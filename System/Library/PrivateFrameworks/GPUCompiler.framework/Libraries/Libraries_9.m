uint64_t sub_22E842A9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)(a1 + 16);
  v7 = *(unsigned __int16 *)(a1 + 32);
  switch(v7)
  {
    case 402:
      v8 = *(_QWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 16);
      v9 = *(_DWORD *)(a1 + 20);
      if (!v9)
        v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v9;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      result = sub_22EA03FE0(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, v8, v10, (uint64_t)v6);
      break;
    case 403:
      v18 = *(_QWORD *)(a1 + 24);
      v20 = *(_DWORD *)(a1 + 16);
      v19 = *(_DWORD *)(a1 + 20);
      if (!v19)
        v19 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v19;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      result = sub_22F31CED8(*(_QWORD **)(a1 + 88), v18, v20);
      break;
    case 404:
      v21 = *(_QWORD *)(a1 + 24);
      v23 = *(_DWORD *)(a1 + 16);
      v22 = *(_DWORD *)(a1 + 20);
      if (!v22)
        v22 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v22;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      if (a3)
      {
        v24 = *(unsigned __int16 *)(a1 + 32);
        v25 = v24 > 0x25;
        v26 = (0xDFDD7FFFFuLL >> v24) & 1;
        if (v25)
          v27 = 1;
        else
          v27 = v26;
      }
      else
      {
        v27 = 0;
      }
      result = sub_22F31CF88(*(_QWORD *)(a1 + 88), a2, v21, v23, v27);
      break;
    default:
      v28 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      if ((sub_22E842CDC(a1, a2, 0, 0, 0, 0, 0, 0, &v28, (uint64_t)&v30) & 1) != 0)
        return 1;
      v15 = *(unsigned __int16 *)(a1 + 32);
      if (v15 <= 0x25)
        v16 = (0xDFDD7FFFFuLL >> v15) & 1;
      else
        v16 = 1;
      if (a3)
        v17 = v16;
      else
        v17 = 0;
      result = sub_22EB1C438(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, v28, &v30, v15 == 21, v17, 0, 0, a4);
      break;
  }
  v29 = result;
  if (result)
    v12 = (result & 1) == 0;
  else
    v12 = 0;
  if (v12 && *(_WORD *)(a1 + 32) == 46)
  {
    sub_22E88172C(a1, &v29);
    return v29;
  }
  return result;
}

uint64_t sub_22E842CDC(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v14;
  int v15;
  _WORD *v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  _BYTE *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  unsigned __int8 *v102;
  _BYTE v103[12];
  char v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  _BYTE v110[9];
  _QWORD v111[2];
  __int16 v112;
  _BYTE v113[32];
  _BYTE *v114;
  __int128 v115;
  void *__p;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;

  v14 = a2;
  if (a9)
  {
    *a9 = 0;
    v16 = (_WORD *)(a1 + 32);
    v15 = *(unsigned __int16 *)(a1 + 32);
    v17 = (unsigned int *)(a1 + 16);
    if (v15 == 147)
    {
      if (a3 || *(_QWORD *)(a2 + 8))
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        *a9 = *(_DWORD *)(a1 + 40);
        v18 = 1;
LABEL_12:
        v15 = (unsigned __int16)*v16;
        a2 = v14;
        goto LABEL_14;
      }
LABEL_7:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
      v19 = *(unsigned int *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v20 + 312) = v19;
      *(_DWORD *)(v20 + 316) = 1769;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v102, v20);
      BYTE12(v115) = 0;
      *(_QWORD *)((char *)&v115 + 4) = 0;
      v117 = 0;
      v118 = 0;
      __p = 0;
      LOBYTE(v119) = 0;
      v114 = (_BYTE *)(v19 | (v19 << 32));
      LOBYTE(v115) = 1;
      sub_22E6D82D0((uint64_t *)&v102, &v114);
      if (SHIBYTE(v118) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v102);
      v18 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v16 = (_WORD *)(a1 + 32);
    v15 = *(unsigned __int16 *)(a1 + 32);
    v17 = (unsigned int *)(a1 + 16);
    if (v15 == 147)
      goto LABEL_7;
  }
  v18 = 0;
LABEL_14:
  switch(v15)
  {
    case 401:
      v27 = (unsigned int *)*((_QWORD *)v17 + 1);
      if (v27[8] && !*((_BYTE *)v27 + 48))
      {
        if (a7
          && (v45 = *((_QWORD *)v27 + 1)) != 0
          && (v46 = sub_22EAA96DC(*(_QWORD *)(a1 + 88), a2, a2), a2 = v14, v46)
          && (v47 = *(_QWORD *)(v46 + 40), (v47 & 7) == 0)
          && v45 == (v47 & 0xFFFFFFFFFFFFFFF8))
        {
          if (*(_QWORD *)(v14 + 8))
          {
            v48 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v48 + 312) = v27[1];
            *(_DWORD *)(v48 + 316) = 1686;
            if (*(char *)(v48 + 311) < 0)
            {
              **(_BYTE **)(v48 + 288) = 0;
              *(_QWORD *)(v48 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v48 + 288) = 0;
              *(_BYTE *)(v48 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v102, v48);
            v49 = *((_QWORD *)v27 + 1);
            v50 = v102;
            if (!v102)
            {
              v50 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v103);
              v102 = v50;
            }
            v50[*v50 + 1] = 5;
            v51 = v102;
            v52 = *v102;
            *v102 = v52 + 1;
            *(_QWORD *)&v51[8 * v52 + 16] = v49;
            v53 = *(_BYTE **)(v27 + 9);
            *(_QWORD *)((char *)&v115 + 4) = 0;
            BYTE12(v115) = 0;
            v117 = 0;
            v118 = 0;
            __p = 0;
            LOBYTE(v119) = 0;
            v114 = v53;
            LOBYTE(v115) = 1;
            sub_22E6D82D0((uint64_t *)&v102, &v114);
            if (SHIBYTE(v118) < 0)
              operator delete(__p);
            sub_22E3BB0B8((uint64_t)&v102);
            v54 = sub_22EBB85D8(*(_QWORD **)(a1 + 88), *((_QWORD *)v27 + 1), v27[1], *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14, a5);
            if (!v54)
              return 1;
            v55 = v27[1];
            v56 = v27[10];
            *(_DWORD *)a10 = 4;
            *(_DWORD *)(a10 + 24) = v55;
            *(_DWORD *)(a10 + 28) = v56;
            *(_QWORD *)(a10 + 8) = v54;
          }
          else
          {
            *(_DWORD *)a10 = 5;
            *(_QWORD *)(a10 + 8) = v27;
            *(_DWORD *)(a10 + 24) = v27[1];
            *(_DWORD *)(a10 + 28) = v27[10];
          }
        }
        else
        {
          *(_DWORD *)a10 = 7;
          *(_QWORD *)(a10 + 8) = v27;
          *(_DWORD *)(a10 + 24) = v27[1];
          *(_DWORD *)(a10 + 28) = v27[10];
          v57 = *v27;
          if ((_DWORD)v57)
          {
            if (a9 && (a3 || *(_QWORD *)(a2 + 8)))
            {
              *a9 = v57;
            }
            else
            {
              v58 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v58 + 312) = v57;
              *(_DWORD *)(v58 + 316) = 1769;
              if (*(char *)(v58 + 311) < 0)
              {
                **(_BYTE **)(v58 + 288) = 0;
                *(_QWORD *)(v58 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v58 + 288) = 0;
                *(_BYTE *)(v58 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v102, v58);
              BYTE12(v115) = 0;
              *(_QWORD *)((char *)&v115 + 4) = 0;
              v117 = 0;
              v118 = 0;
              __p = 0;
              LOBYTE(v119) = 0;
              v114 = (_BYTE *)(v57 | (v57 << 32));
              LOBYTE(v115) = 1;
              sub_22E6D82D0((uint64_t *)&v102, &v114);
              if (SHIBYTE(v118) < 0)
                operator delete(__p);
              sub_22E3BB0B8((uint64_t)&v102);
            }
          }
        }
        v82 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v82 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v82;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
        return 0;
      }
      v28 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v28 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v28;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
      return 1;
    case 141:
      if ((sub_22E841B34(a1, a2, a10) & 1) == 0)
      {
        v114 = 0;
        if ((*(_DWORD *)a10 | 2) == 3 && *v16 == 46)
        {
          if (a9)
            v26 = *a9;
          else
            v26 = 0;
          return sub_22E8462E0(a1, (uint64_t *)v14, a3, a4, v26, 0, 0, a5, (int *)a10, v18);
        }
        if (v18)
        {
          v43 = *(_QWORD *)(a1 + 88);
          v25 = 1;
          v44 = sub_22ED66924(v43, *(uint64_t **)(v43 + 12888), v14, *a9, a10, a3, a5, (unint64_t *)&v114, 1);
          goto LABEL_95;
        }
        return 0;
      }
      return 1;
    case 5:
      v21 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
      v23 = *(_DWORD *)(a1 + 40);
      v24 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
      if ((v24 & 0x100) == 0)
      {
        v25 = 0;
        *(_DWORD *)a10 = 0;
        *(_QWORD *)(a10 + 8) = v21;
        *(_DWORD *)(a10 + 24) = v23;
        *(_DWORD *)(a10 + 28) = v23;
        return v25;
      }
      v114 = 0;
      v35 = v14;
      if (a7)
      {
        v36 = sub_22EAA96DC(*(_QWORD *)(a1 + 88), v22, v14);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 40);
          if ((v37 & 7) == 0 && v21 == (v37 & 0xFFFFFFFFFFFFFFF8))
          {
            v38 = sub_22EBB85D8(*(_QWORD **)(a1 + 88), v21, v23, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14, a5);
            if (v38)
            {
              *(_DWORD *)a10 = 4;
              *(_DWORD *)(a10 + 24) = v23;
              *(_DWORD *)(a10 + 28) = v23;
              *(_QWORD *)(a10 + 8) = v38;
              v35 = v14;
              goto LABEL_90;
            }
            return 1;
          }
        }
        v24 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
        v35 = v14;
      }
      if ((v24 & 0x800) != 0
        && a8
        && (*(_DWORD *)(v35 + 4) ? (v59 = *(_DWORD *)v35 == 0) : (v59 = 1),
            v59
         && !*(_QWORD *)(v35 + 8)
         && (v60 = sub_22ED5735C(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v21, v23, (unint64_t *)&v114), v35 = v14, v60)))
      {
        v61 = v114;
        *(_DWORD *)a10 = 9;
        *(_QWORD *)(a10 + 8) = v61;
      }
      else
      {
        *(_DWORD *)a10 = 0;
        *(_QWORD *)(a10 + 8) = v21;
      }
      *(_DWORD *)(a10 + 24) = v23;
      *(_DWORD *)(a10 + 28) = v23;
LABEL_90:
      v102 = 0;
      if (*v16 == 46)
      {
        if (a9)
          v62 = *a9;
        else
          v62 = 0;
        return sub_22E8462E0(a1, (uint64_t *)v35, a3, a4, v62, v21, v23, a5, (int *)a10, v18);
      }
      if (v18)
      {
        v63 = *(_QWORD *)(a1 + 88);
        v25 = 1;
        v44 = sub_22ED66924(v63, *(uint64_t **)(v63 + 12888), v35, *a9, a10, a3, a5, (unint64_t *)&v102, 1);
LABEL_95:
        if (!v44)
          return v25;
        return 0;
      }
      return 0;
  }
  v29 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v29 + 56) + 1) & 1) == 0
    || (*(_QWORD *)(a2 + 8) ? (v39 = 1) : (v39 = a6), v15 != 39 || !v39))
  {
    sub_22E884578(a1, (int *)v17, 1544, (uint64_t)&v114);
    v30 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
    v31 = v114;
    if (!v114)
    {
      v31 = (unsigned __int8 *)sub_22E3B8AAC(v115);
      v114 = v31;
    }
    v31[*v31 + 1] = 3;
    v32 = v114;
    v33 = *v114;
    *v114 = v33 + 1;
    *(_QWORD *)&v32[8 * v33 + 16] = v30;
    v34 = &v114;
    goto LABEL_33;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v29, v17);
  if (v18)
  {
    v40 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v40 + 312) = *a9;
    *(_DWORD *)(v40 + 316) = 1768;
    if (*(char *)(v40 + 311) < 0)
    {
      **(_BYTE **)(v40 + 288) = 0;
      *(_QWORD *)(v40 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v40 + 288) = 0;
      *(_BYTE *)(v40 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v114, v40);
    v41 = *v17 | ((unint64_t)*v17 << 32);
    v42 = v114;
    if (!v114)
    {
      v42 = (_BYTE *)sub_22E3B8AAC(v115);
      v114 = v42;
    }
    v25 = 1;
    sub_22E4D6448((uint64_t)(v42 + 336), v41, 1);
    sub_22E3BB0B8((uint64_t)&v114);
    return v25;
  }
  v64 = *(unsigned int *)(a1 + 40);
  v65 = v14;
  if (*(_DWORD *)(v14 + 4))
    v66 = *(_DWORD *)v14 == 0;
  else
    v66 = 1;
  v67 = (unsigned __int16)*v16;
  if (!v66 || *(_QWORD *)(v14 + 8) || v67 != 162)
  {
    v68 = a3;
    if (v67 == 5)
    {
      v111[0] = a1;
      v111[1] = v14;
      v112 = 0;
      v69 = *(_QWORD *)(a1 + 8);
      v70 = *(_QWORD *)(v69 + 2816);
      if (v70 >= *(unsigned int *)(v69 + 2784))
      {
        v71 = sub_22F162D2C(v69, 1u);
        v65 = v14;
      }
      else
      {
        v71 = *(_QWORD *)(v69 + 2776) + 24 * v70;
      }
      if (*(_WORD *)(v71 + 16) != 71)
        goto LABEL_155;
      v73 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = 0;
      if (*(_QWORD *)(v65 + 8))
      {
        sub_22E88ABAC(a1, (int *)v65, 1);
        v65 = v14;
        *(_DWORD *)(v14 + 24) = 0;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
      }
      v74 = v65;
      if ((sub_22E8408AC(a1, v65, a3, a4, a5, 0, 0, 0, 0, 0) & 1) == 0)
      {
        if (*(_DWORD *)(v74 + 4))
          v75 = *(_DWORD *)v74 == 0;
        else
          v75 = 1;
        v76 = *(_QWORD *)(v74 + 8);
        if (v75 && v76 == 0)
          v78 = a3;
        else
          v78 = 0;
        if (*v16 == 5)
        {
          v79 = *(_QWORD *)(a1 + 8);
          v80 = *(_QWORD *)(v79 + 2816);
          if (v80 >= *(unsigned int *)(v79 + 2784))
          {
            v81 = sub_22F162D2C(v79, 1u);
            v76 = *(_QWORD *)(v14 + 8);
          }
          else
          {
            v81 = *(_QWORD *)(v79 + 2776) + 24 * v80;
          }
          if (*(_WORD *)(v81 + 16) != 71 && v76)
          {
            v91 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v91 + 312) = v64;
            *(_DWORD *)(v91 + 316) = 1475;
            if (*(char *)(v91 + 311) < 0)
            {
              **(_BYTE **)(v91 + 288) = 0;
              *(_QWORD *)(v91 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v91 + 288) = 0;
              *(_BYTE *)(v91 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v109, v91);
            BYTE12(v115) = 0;
            *(_QWORD *)((char *)&v115 + 4) = 0;
            v117 = 0;
            v118 = 0;
            __p = 0;
            LOBYTE(v119) = 0;
            v114 = (_BYTE *)(v64 | (v64 << 32));
            LOBYTE(v115) = 1;
            sub_22E6D82D0(&v109, &v114);
            v92 = *v17;
            v104 = 0;
            *(_QWORD *)&v103[4] = 0;
            v106 = 0;
            v107 = 0x100000000000000;
            v102 = (unsigned __int8 *)(v92 | (v92 << 32));
            v103[0] = 0;
            v105 = (void *)126;
            v108 = 0;
            sub_22E6D82D0(&v109, &v102);
            if (SHIBYTE(v107) < 0)
              operator delete(v105);
            if (SHIBYTE(v118) < 0)
              operator delete(__p);
            sub_22E3BB0B8((uint64_t)&v109);
            if (sub_22E95AB18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14))
            {
              HIBYTE(v112) = 1;
              sub_22E885C30(a1, 0);
              if ((sub_22E95AB9C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14) & 1) == 0)
                LOBYTE(v112) = 1;
            }
            *(_BYTE *)(a1 + 945) = v73;
            v68 = v78;
LABEL_155:
            v93 = (unsigned __int16)*v16;
            if ((v93 - 7) >= 6)
            {
              v94 = 0;
              if ((v93 - 13) >= 6 && v93 != 1)
                v94 = *(_QWORD **)(a1 + 24);
            }
            else
            {
              v94 = 0;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
            v95 = *(_DWORD *)(a1 + 40);
            if (*(_WORD *)(a1 + 32) == 46)
            {
              *(_DWORD *)a10 = 6;
              *(_DWORD *)(a10 + 24) = v64;
              *(_DWORD *)(a10 + 28) = v95;
              *(_QWORD *)(a10 + 8) = 0;
              if (a9)
                v96 = *a9;
              else
                v96 = 0;
              v25 = sub_22E8462E0(a1, (uint64_t *)v14, v68, a4, v96, (std::string::size_type)v94, v95, a5, (int *)a10, 0);
              goto LABEL_170;
            }
            v97 = sub_22EBB87FC(*(_QWORD **)(a1 + 88), v64, v94, *(_DWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14, v68, a5);
            if (v97)
            {
              v25 = 0;
              *(_DWORD *)a10 = 6;
              *(_DWORD *)(a10 + 24) = v64;
              *(_DWORD *)(a10 + 28) = v95;
              *(_QWORD *)(a10 + 8) = v97;
LABEL_170:
              sub_22E828C78((uint64_t)v111);
              return v25;
            }
LABEL_167:
            v25 = 1;
            goto LABEL_170;
          }
        }
        v98 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v98 + 312) = v64;
        *(_DWORD *)(v98 + 316) = 1475;
        if (*(char *)(v98 + 311) < 0)
        {
          **(_BYTE **)(v98 + 288) = 0;
          *(_QWORD *)(v98 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v98 + 288) = 0;
          *(_BYTE *)(v98 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v110, v98);
        sub_22E3BB0B8((uint64_t)v110);
      }
      *(_BYTE *)(a1 + 945) = v73;
      goto LABEL_167;
    }
    sub_22E884578(a1, (int *)v17, 1474, (uint64_t)v113);
    v34 = v113;
LABEL_33:
    sub_22E3BB0B8((uint64_t)v34);
    return 1;
  }
  v114 = 0;
  *((_QWORD *)&v115 + 1) = 0;
  __p = 0;
  v117 = 0;
  v118 = a1 + 960;
  v130 = 0;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0;
  v84 = sub_22E82C1E4(a1, (uint64_t)&v114);
  v90 = sub_22F331190(*(_QWORD **)(a1 + 88), (uint64_t)&v114, a3, v85, v86, v87, v88, v89);
  v25 = v90 == 0;
  if (v90)
  {
    *(_DWORD *)a10 = 6;
    *(_DWORD *)(a10 + 24) = v64;
    *(_DWORD *)(a10 + 28) = v84;
    *(_QWORD *)(a10 + 8) = v90;
  }
  if (DWORD1(v121))
    free(*((void **)&v120 + 1));
  sub_22E8D1BC4(v118, (uint64_t)&v118);
  sub_22E80F94C((uint64_t *)&v119);
  sub_22E80F94C(&v117);
  return v25;
}

uint64_t sub_22E8438BC(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];
  __int128 v7;
  void *v8[2];

  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  sub_22E8408AC(a1, (uint64_t)&v7, 0, 0, 0, 0, 0, 0, 0, 0);
  result = sub_22E842A9C(a1, (uint64_t)&v7, a2, (uint64_t)v6);
  if (!result)
  {
    sub_22F2E56C0(a1, (unint64_t)v6);
    result = sub_22E842A9C(a1, (uint64_t)&v7, a2, (uint64_t)v6);
  }
  if (HIDWORD(v8[1]))
  {
    v5 = result;
    free(v8[0]);
    return v5;
  }
  return result;
}

uint64_t sub_22E84396C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  unsigned int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  uint64_t *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int32 v55;
  uint64_t v56;
  int32x4_t *v57;
  int32x4_t *v58;
  __int32 v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int8 *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  char *v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  BOOL v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t *v96;
  _BYTE *v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  _BYTE *v103;
  char v104;
  uint64_t v105;
  int v106;
  __int16 v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  char v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  uint64_t (*v116)(uint64_t);
  uint64_t v117;
  uint64_t v118;
  int v119;
  void *v120;
  uint64_t v121;
  _BYTE v122[80];
  uint64_t *v123;
  __int128 v124;
  _BYTE v125[64];
  int32x4_t v126;
  uint64_t v127;

  v3 = a3;
  v127 = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 0;
  v97 = (_BYTE *)(a1 + 944);
  v111 = (_BYTE *)(a1 + 944);
  v112 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v113 = a1;
  v114 = 1310739;
  v115 = 62;
  v117 = 0;
  v118 = 0;
  v116 = sub_22E80F788;
  sub_22E811DE8((uint64_t)&v111);
  *(_DWORD *)a2 = v118;
  v6 = (unsigned int *)(a1 + 16);
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 != 27)
    goto LABEL_20;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 2816);
  if (v9 >= *(unsigned int *)(v8 + 2784))
  {
    v10 = sub_22F162D2C(v8, 1u);
    v8 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 2776) + 24 * v9;
  }
  if (*(_WORD *)(v10 + 16) == 65)
    goto LABEL_13;
  v11 = *(_QWORD *)(v8 + 2816);
  if (v11 >= *(unsigned int *)(v8 + 2784))
    v12 = sub_22F162D2C(v8, 1u);
  else
    v12 = *(_QWORD *)(v8 + 2776) + 24 * v11;
  if (*(_WORD *)(v12 + 16) != 20)
  {
    v7 = *(unsigned __int16 *)(a1 + 32);
LABEL_20:
    v14 = 1;
    if (v7 == 63)
    {
      *(_DWORD *)(a2 + 12) = 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v3 = 0;
      v14 = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 40);
      v7 = *(unsigned __int16 *)(a1 + 32);
    }
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(a1 + 8);
LABEL_13:
  *(_DWORD *)(a2 + 12) = 2;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v8, (unsigned int *)(a1 + 16));
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 40);
  v7 = *(unsigned __int16 *)(a1 + 32);
  if ((v7 - 7) >= 6)
  {
    v13 = 0;
    if ((v7 - 13) >= 6 && v7 != 1)
      v13 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  if (!v13)
    v3 = 0;
LABEL_22:
  if (v7 == 20)
  {
LABEL_23:
    sub_22E811E8C((uint64_t)&v111);
    result = 0;
    *(_DWORD *)(a2 + 4) = HIDWORD(v118);
    goto LABEL_206;
  }
  v96 = (unint64_t *)(a2 + 16);
  v98 = v3;
  while (1)
  {
    if ((v14 & 1) == 0)
    {
      if (v7 != 65)
      {
        if (v7 != 3)
        {
          if (v3)
            goto LABEL_200;
          v84 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v84 + 312) = *(_DWORD *)(a1 + 16);
          v85 = 1495;
          goto LABEL_203;
        }
        v89 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v89 + 56) + 1) & 0x40) != 0 && v3)
          goto LABEL_200;
        if (*(_QWORD *)(v89 + 752))
        {
          *(_BYTE *)(v89 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v89 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        v87 = *(_QWORD *)(a1 + 88);
        v88 = *(uint64_t ***)(v87 + 12888);
        goto LABEL_185;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v7 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v7 == 3)
    {
      v86 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v86 + 752))
      {
        *(_BYTE *)(v86 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v86 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      v87 = *(_QWORD *)(a1 + 88);
      v88 = *(uint64_t ***)(v87 + 12888);
      if ((*(_BYTE *)(*(_QWORD *)(v86 + 56) + 1) & 0x40) != 0 && v3 && ((v14 ^ 1) & 1) == 0)
      {
        sub_22F316D74(v87, v88);
        goto LABEL_23;
      }
LABEL_185:
      v90 = a2;
      v91 = 0;
      goto LABEL_198;
    }
    v126 = 0uLL;
    v16 = *v6;
    v99 = *v6;
    if (v7 > 62)
    {
      if (v7 == 63)
      {
LABEL_37:
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_QWORD *)(v19 + 2816);
        if (v20 >= *(unsigned int *)(v19 + 2784))
          v21 = sub_22F162D2C(v19, 1u);
        else
          v21 = *(_QWORD *)(v19 + 2776) + 24 * v20;
        v22 = *(unsigned __int16 *)(v21 + 16);
        if ((v22 == 20 || v22 == 65) && *(_DWORD *)(a2 + 12) == 0)
        {
          if (v3)
            goto LABEL_200;
          v84 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v84 + 312) = *(_DWORD *)(a1 + 16);
          v85 = 1461;
          goto LABEL_203;
        }
        v7 = *(unsigned __int16 *)(a1 + 32);
        goto LABEL_48;
      }
      if (v7 == 148)
      {
        *(_DWORD *)(a1 + 40) = v16;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v17 = 0;
        v100 = 0;
        v18 = 0;
        v101 = *(_DWORD *)(a1 + 40);
        v102 = 0;
        goto LABEL_101;
      }
    }
    else
    {
      if (v7 == 27)
        goto LABEL_37;
      if (v7 == 30)
      {
        *(_DWORD *)(a1 + 40) = v16;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (*(_WORD *)(a1 + 32) == 148)
        {
          v101 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v17 = 0;
          v100 = 0;
          v18 = 0;
          v102 = 1;
          goto LABEL_101;
        }
        if (v3)
          goto LABEL_200;
        v84 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v84 + 312) = *(_DWORD *)(a1 + 16);
        v85 = 1537;
LABEL_203:
        *(_DWORD *)(v84 + 316) = v85;
        if (*(char *)(v84 + 311) < 0)
        {
          **(_BYTE **)(v84 + 288) = 0;
          *(_QWORD *)(v84 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v84 + 288) = 0;
          *(_BYTE *)(v84 + 311) = 0;
        }
        v94 = sub_22E78E558((uint64_t)&v123, v84);
        sub_22E3BB0B8(v94);
        result = 1;
        goto LABEL_206;
      }
    }
LABEL_48:
    if (v7 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v126.i32[0] = *(_DWORD *)(a1 + 40);
      v7 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v7 == 27)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v7 = *(unsigned __int16 *)(a1 + 32);
      if (v7 != 3)
      {
        v25 = 3;
        goto LABEL_54;
      }
      v93 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v93 + 752))
      {
        *(_BYTE *)(v93 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v93 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      v87 = *(_QWORD *)(a1 + 88);
      v88 = *(uint64_t ***)(v87 + 12888);
      v90 = a2;
      v91 = 1;
LABEL_198:
      sub_22E9CA19C(v87, v88, v90, v91);
      goto LABEL_23;
    }
    v25 = 2;
LABEL_54:
    v102 = v25;
    if (v7 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v126.i32[1] = *(_DWORD *)(a1 + 40);
      v7 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v7 != 5)
      break;
    v100 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v101 = *(_DWORD *)(a1 + 40);
    v26 = *(unsigned __int16 *)(a1 + 32);
    if (v26 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v126.i32[2] = *(_DWORD *)(a1 + 40);
      v26 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v26 == 21)
    {
      v103 = v97;
      v104 = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v105 = a1;
      v106 = 1441813;
      v107 = 62;
      v109 = 0;
      v110 = 0;
      v108 = sub_22E80F720;
      sub_22E811DE8((uint64_t)&v103);
      v123 = (uint64_t *)&v124 + 1;
      *(_QWORD *)&v124 = 0xC00000000;
      v120 = v122;
      v121 = 0x1400000000;
      if (v3)
      {
        sub_22F2F18E0((uint64_t)&v103);
        v18 = 0;
        *v3 = 1;
      }
      else if (sub_22E83EFC4(a1, (uint64_t)&v123, (uint64_t)&v120, 0, 0, 0, 0))
      {
        sub_22F2F18E0((uint64_t)&v103);
        v18 = 1;
      }
      else
      {
        sub_22E811E8C((uint64_t)&v103);
        v44 = v110;
        v45 = HIDWORD(v110);
        v46 = v123;
        v47 = v124;
        v18 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 8 * v124 + 24, 3);
        v48 = v44;
        v3 = v98;
        sub_22F002D50(v18, v48, v46, v47, v45);
      }
      if (v120 != v122)
        free(v120);
      if (v123 != (uint64_t *)((char *)&v124 + 8))
        free(v123);
      *v103 = v104;
      v17 = 2;
    }
    else if (v26 == 23 || v26 == 63)
    {
      v27 = *(_QWORD *)(a1 + 88);
      LODWORD(v103) = 6;
      v123 = 0;
      v119 = 3;
      v120 = (void *)*(unsigned int *)(v27 + 1704);
      sub_22EB4DDB8(v27 + 3688, (int *)&v103, (int *)&v120, (__int16 *)(v27 + 1693), (uint64_t *)&v123, &v119);
      v28 = *(unsigned int *)(v27 + 3696);
      v29 = v28 - 2;
      v30 = *(_QWORD *)(v27 + 3688);
      v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
      if (v31 == 5)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
        v32 = 1;
      }
      else if (v31 == 2)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
        v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
      }
      else
      {
        v32 = 0;
        *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
      }
      v33 = v30 + 576 * v28;
      *(_BYTE *)(v33 - 3) = v32;
      *(_WORD *)(v27 + 1693) = 0;
      if (*(_DWORD *)(v27 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v27 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
        sub_22EAEAE08(v27 + 1840, (uint64_t *)(v33 - 496));
      }
      v34 = *(unsigned __int16 *)(a1 + 32);
      if (v34 == 63)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v34 = *(unsigned __int16 *)(a1 + 32);
        v17 = 1;
      }
      else
      {
        v17 = 3;
      }
      if (v3)
      {
        if (v34 == 23)
        {
          v123 = (uint64_t *)v97;
          LOBYTE(v124) = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          *((_QWORD *)&v124 + 1) = a1;
          *(_DWORD *)v125 = 1572887;
          strcpy(&v125[4], ">");
          *(_QWORD *)&v125[16] = 0;
          *(_QWORD *)&v125[24] = 0;
          *(_QWORD *)&v125[8] = sub_22E80CED8;
          sub_22E811DE8((uint64_t)&v123);
          sub_22F2F18E0((uint64_t)&v123);
          v18 = 0;
          *v3 = 1;
          *(_BYTE *)v123 = v124;
        }
        else
        {
          v35 = *(_DWORD *)(a1 + 16);
          v36 = *(_BYTE *)(a1 + 947);
          *(_BYTE *)(a1 + 947) = 1;
          v18 = sub_22E83766C(a1, 0);
          if ((v18 & 1) == 0)
            v18 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v123);
          if (*v6 != v35)
          {
            v37 = *(_QWORD **)(a1 + 8);
            v38 = v37[352];
            v39 = v38 - 1;
            v37[352] = v38 - 1;
            *(_DWORD *)(a1 + 16) = v35;
            *(_WORD *)(a1 + 32) = 406;
            *(_QWORD *)(a1 + 24) = v18;
            v40 = v38 - 2;
            v41 = v37[347];
            v42 = (int *)(v41 + 24 * v40);
            if (*((unsigned __int16 *)v42 + 8) - 399 > 0x28
              || (v43 = *(_DWORD *)(v41 + 24 * v40 + 4)) == 0)
            {
              v43 = *v42;
            }
            *(_DWORD *)(a1 + 20) = v43;
            if (v39 && v37[353] != v37[354])
            {
              sub_22F162E18((uint64_t)v37, a1 + 16);
              v37 = *(_QWORD **)(a1 + 8);
              v35 = *(_DWORD *)(a1 + 16);
              v43 = *(_DWORD *)(a1 + 20);
            }
            if (!v43)
              v43 = v35;
            *(_DWORD *)(a1 + 40) = v43;
            sub_22F18FB4C((unint64_t)v37, (unsigned int *)(a1 + 16));
          }
          *(_BYTE *)(a1 + 947) = v36;
          v3 = v98;
        }
      }
      else
      {
        if (v34 == 23)
          v49 = sub_22E84AF40(a1);
        else
          v49 = sub_22E83766C(a1, 0);
        v18 = v49;
      }
      sub_22EB48E64(v27);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v126.i32[3] = *(_DWORD *)(a1 + 40);
    }
LABEL_101:
    if (v3 && *(_WORD *)(a1 + 32) == 5)
    {
      v50 = *(_QWORD *)(a1 + 8);
      v51 = *(_QWORD *)(v50 + 2816);
      v52 = v51 >= *(unsigned int *)(v50 + 2784) ? sub_22F162D2C(v50, 1u) : *(_QWORD *)(v50 + 2776) + 24 * v51;
      v53 = *(unsigned __int16 *)(v52 + 16);
      if (v53 == 61 || v53 == 20)
      {
        result = 0;
        v92 = 2;
        goto LABEL_201;
      }
    }
    v54 = 0;
    while (!v126.i32[v54])
    {
      if (++v54 == 4)
      {
        v55 = 0;
        goto LABEL_149;
      }
    }
    v56 = 4 * (v102 == 3);
    v57 = (int32x4_t *)((char *)v126.i64 + 4);
    if (v102 != 3)
      v57 = &v126;
    if (v17)
    {
      v58 = v57;
    }
    else
    {
      v56 = 8;
      v58 = (int32x4_t *)&v126.u64[1];
    }
    v59 = *(_DWORD *)((unint64_t)&v126 | v56);
    if (v59)
    {
      v60 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22F461610, (int8x16_t)vceqzq_s32(v126)));
      if ((v60 & (v60 - 1) & 0xF) == 0)
      {
        v55 = v59;
        goto LABEL_149;
      }
      v61 = 1590;
      v55 = v59;
    }
    else
    {
      v62 = 0;
      v55 = 0;
      do
      {
        if (v126.i32[v62])
          v55 = v126.i32[v62];
        ++v62;
      }
      while (v62 != 4);
      v61 = 1589;
    }
    v63 = v98;
    if (v98)
    {
      *v98 = 1;
    }
    else
    {
      while (1)
      {
        if ((int32x4_t *)((char *)&v126 + (_QWORD)v63) != v58)
        {
          v64 = *(__int32 *)((char *)v126.i32 + (_QWORD)v63);
          if (v64)
            break;
        }
        if (++v63 == (int *)16)
        {
          v64 = 0;
          break;
        }
      }
      v65 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v65 + 312) = v64;
      *(_DWORD *)(v65 + 316) = v61;
      if (*(char *)(v65 + 311) < 0)
      {
        **(_BYTE **)(v65 + 288) = 0;
        *(_QWORD *)(v65 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v65 + 288) = 0;
        *(_BYTE *)(v65 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v120, v65);
      if (v61 == 1589)
      {
        if (v17)
        {
          v66 = 1;
          v67 = v101;
        }
        else
        {
          v67 = sub_22F141A3C(v101, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
          v66 = 0;
        }
        v68 = (unsigned __int8 *)v120;
        if (!v120)
        {
          v95 = v67;
          v68 = (unsigned __int8 *)sub_22E3B8AAC(v121);
          v67 = v95;
          v120 = v68;
        }
        v68[*v68 + 1] = 2;
        v69 = v120;
        v70 = *(unsigned __int8 *)v120;
        *(_BYTE *)v120 = v70 + 1;
        v69[v70 + 2] = v66;
        BYTE12(v124) = 0;
        *(_QWORD *)((char *)&v124 + 4) = 0;
        v123 = (uint64_t *)(v67 | ((unint64_t)v67 << 32));
        LOBYTE(v124) = 0;
        memset(&v125[4], 0, 19);
        strcpy(v125, "...");
        *(_WORD *)&v125[23] = 3;
        sub_22E6D82D0((uint64_t *)&v120, &v123);
        if ((v125[23] & 0x80000000) != 0)
          operator delete(*(void **)v125);
      }
      for (i = 0; i != 4; ++i)
      {
        if (&v126.i8[i * 4] != (__int8 *)v58)
        {
          v72 = v126.u32[i];
          if ((_DWORD)v72)
          {
            BYTE12(v124) = 0;
            *(_QWORD *)((char *)&v124 + 4) = 0;
            memset(v125, 0, 25);
            v123 = (uint64_t *)(v72 | (v72 << 32));
            LOBYTE(v124) = 1;
            sub_22E6D82D0((uint64_t *)&v120, &v123);
            if ((v125[23] & 0x80000000) != 0)
              operator delete(*(void **)v125);
          }
        }
      }
      sub_22E3BB0B8((uint64_t)&v120);
    }
LABEL_149:
    if (v18 < 2)
    {
      v74 = 0;
      v3 = v98;
    }
    else
    {
      v73 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v123);
      v18 = v73;
      v3 = v98;
      if (v73 < 2)
      {
        v74 = 0;
      }
      else if (v98)
      {
        v74 = 0;
        *v98 = 1;
      }
      else
      {
        v123 = (uint64_t *)(v73 & 0xFFFFFFFFFFFFFFFELL);
        v74 = sub_22F3369FC();
        v18 = (unint64_t)v123;
      }
    }
    v75 = v99 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    v123 = (uint64_t *)__PAIR64__(v101, v102);
    *(_QWORD *)&v124 = v100;
    *((_QWORD *)&v124 + 1) = __PAIR64__(v17, v55);
    *(_QWORD *)v125 = v18;
    *(_QWORD *)&v125[8] = v74;
    *(_QWORD *)&v125[16] = v75;
    v76 = *(_DWORD *)(a2 + 24);
    v77 = *(_QWORD *)(a2 + 16);
    if (v76 >= *(_DWORD *)(a2 + 28))
    {
      v82 = v77 + 48 * v76 > (unint64_t)&v123;
      if (v77 <= (unint64_t)&v123 && v82)
      {
        v83 = (char *)&v123 - v77;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v77 = *v96;
        v78 = &v83[*v96];
        goto LABEL_158;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v77 = *v96;
    }
    v78 = (char *)&v123;
LABEL_158:
    v14 = 0;
    v79 = (_OWORD *)(v77 + 48 * *(unsigned int *)(a2 + 24));
    v80 = *(_OWORD *)v78;
    v81 = *((_OWORD *)v78 + 2);
    v79[1] = *((_OWORD *)v78 + 1);
    v79[2] = v81;
    *v79 = v80;
    ++*(_DWORD *)(a2 + 24);
    v7 = *(unsigned __int16 *)(a1 + 32);
    if (v7 == 20)
      goto LABEL_23;
  }
  if (v7 != 148)
  {
    if (v3)
      goto LABEL_200;
    v84 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v84 + 312) = *(_DWORD *)(a1 + 16);
    v85 = 1488;
    goto LABEL_203;
  }
  if (!v3)
  {
    v84 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v84 + 312) = *(_DWORD *)(a1 + 16);
    v85 = 1748;
    goto LABEL_203;
  }
LABEL_200:
  result = 0;
  v92 = 3;
LABEL_201:
  *v3 = v92;
LABEL_206:
  *v111 = v112;
  return result;
}

uint64_t sub_22E844820(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  _BYTE v41[36];
  int v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  int v52;
  uint64_t v53;
  char v54;
  _BYTE v55[32];
  _BYTE v56[32];
  _BYTE v57[32];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  _QWORD v77[4];
  int v78;
  const char *v79;
  _BYTE v80[32];
  void *v81;
  _BYTE v82[12];
  char v83;
  _BYTE __p[23];
  __int16 v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  __int128 v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 312) = v3;
  *(_DWORD *)(v4 + 316) = 1934;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v80, v4);
  sub_22E3BB0B8((uint64_t)v80);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v77[0] = &unk_24FAE1B70;
  v77[3] = v5;
  v78 = v3;
  v79 = "lambda expression parsing";
  v62[0] = 0;
  v62[2] = 0;
  v63 = 0u;
  v64 = a1 + 960;
  v76 = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0;
  v86 = v62;
  v90 = 0;
  v87 = 0u;
  v88 = 0u;
  v89 = 0;
  v91 = 0u;
  v93 = 0u;
  v92 = 17;
  v94 = 0;
  v95 = &v97;
  v96 = 0x800000000;
  v98 &= 0xFC00u;
  v99 = 0u;
  v100 = a1 + 960;
  v104 = 0;
  v103 = 0u;
  v102 = 0u;
  v101 = 0u;
  sub_22F3090C8(*(_QWORD *)(a1 + 88));
  v58 = 0;
  v59 = 0;
  v60 = a1 + 960;
  v61 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 68) & 0x20) != 0)
    sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v86, 0, 0);
  if (*(_WORD *)(a1 + 32) != 46)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_24;
  }
  sub_22E885C30(a1, 128);
  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x1000) != 0)
    v6 = 1914;
  else
    v6 = 1839;
  sub_22E884578(a1, (int *)(a1 + 16), v6, (uint64_t)v57);
  sub_22E3BB0B8((uint64_t)v57);
  v81 = &v82[8];
  *(_QWORD *)v82 = 0x400000000;
  LODWORD(v43) = 0;
  LODWORD(v51[0]) = 0;
  v7 = sub_22E87D9AC(a1, *(_DWORD *)(a1 + 952), (uint64_t)&v81, &v43, v51);
  v8 = v7;
  if (v7)
  {
    sub_22F336DD4(*(_QWORD *)(a1 + 88), v3, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0);
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  if (!*(_DWORD *)v82)
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = v51[0];
    *(_DWORD *)(v9 + 316) = 1592;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v56, v9);
    sub_22E3BB0B8((uint64_t)v56);
    goto LABEL_14;
  }
  if (*(_WORD *)(a1 + 32) == 168)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v16 = *(_QWORD *)(a1 + 88);
    v17 = sub_22F2E536C(a1, 0);
    v18 = sub_22F327CBC(v16, v17);
    if ((v18 & 1) != 0)
    {
      LODWORD(v53) = 1376279;
      sub_22E885940(a1, (unsigned __int16 *)&v53, 2, 3);
    }
  }
  else
  {
    v18 = 0;
  }
  sub_22F336994(*(_QWORD *)(a1 + 88), v43, v81, *(unsigned int *)v82, v51[0], v18);
  ++*(_DWORD *)(a1 + 952);
  v10 = 1;
LABEL_15:
  if (v81 != &v82[8])
    free(v81);
  v11 = a1;
  if ((v8 & 1) != 0)
    goto LABEL_18;
LABEL_24:
  if (sub_22E8836FC(a1, 0, 0))
  {
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x2000) != 0)
      v14 = 1920;
    else
      v14 = 1804;
    sub_22E884578(a1, (int *)(a1 + 16), v14, (uint64_t)v55);
    sub_22E3BB0B8((uint64_t)v55);
    sub_22E8254B0((uint64_t *)a1, (uint64_t)&v86);
  }
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v51[0] = a1;
  v51[1] = &v58;
  v51[2] = v62;
  v51[3] = &v53;
  v51[4] = &v52;
  v51[5] = &v86;
  v15 = *(unsigned __int16 *)(a1 + 32);
  if (v15 > 0x89)
  {
    if ((v15 - 138 > 0x30 || ((1 << (v15 + 118)) & 0x1001042800001) == 0) && v15 - 312 >= 5)
      goto LABEL_69;
    goto LABEL_64;
  }
  if (v15 == 19)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(v19 + 2816);
    if (v20 >= *(unsigned int *)(v19 + 2784))
      v21 = sub_22F162D2C(v19, 1u);
    else
      v21 = *(_QWORD *)(v19 + 2776) + 24 * v20;
    if (*(_WORD *)(v21 + 16) != 19)
      goto LABEL_69;
    goto LABEL_64;
  }
  if (v15 != 21)
  {
    if (v15 != 36)
      goto LABEL_69;
LABEL_64:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x20) == 0)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1838, (uint64_t)&v43);
      v28 = *(unsigned int *)(a1 + 16);
      *(_QWORD *)&v82[4] = 0;
      v83 = 0;
      v81 = (void *)(v28 | (v28 << 32));
      v82[0] = 0;
      memset(&__p[4], 0, 19);
      strcpy(__p, "() ");
      v85 = 3;
      sub_22E6D82D0((uint64_t *)&v43, &v81);
      if ((char)v85 < 0)
        operator delete(*(void **)__p);
      sub_22E3BB0B8((uint64_t)&v43);
    }
    sub_22E845140((uint64_t)v51, 0, 0, 0, 0, 0);
    goto LABEL_69;
  }
  sub_22E885C30(a1, 776);
  v43 = (_BYTE *)(a1 + 944);
  v44 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v45 = a1;
  v46 = 1441813;
  v47 = 62;
  v49 = 0;
  v50 = 0;
  v48 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v43);
  v22 = v50;
  v81 = &v82[8];
  *(_QWORD *)v82 = 0x1000000000;
  v42 = 0;
  if (*(_WORD *)(a1 + 32) != 22)
  {
    v39 = v50;
    v23 = *(_DWORD *)(a1 + 952);
    v24 = sub_22E904A34(*(_QWORD *)(a1 + 88), 0);
    if (v24)
      *(_DWORD *)(v24 + 1428) = v23 - v10;
    sub_22E826C40(a1, v92, (uint64_t)&v58, (uint64_t)&v81, &v42, 0);
    if (sub_22F309224(*(_QWORD *)(a1 + 88)))
    {
      *(_DWORD *)(a1 + 952) = *(_DWORD *)(a1 + 952) - v10 + 1;
      v10 = 1;
    }
    v22 = v39;
  }
  sub_22E811E8C((uint64_t)&v43);
  sub_22E845140((uint64_t)v51, v22, SHIDWORD(v50), (uint64_t)v81, *(unsigned int *)v82, v42);
  if (*(_WORD *)(a1 + 32) == 168)
    sub_22E831098(a1, (uint64_t)&v86);
  v25 = v81;
  if (*(_DWORD *)v82)
  {
    v26 = (char *)v81 - 8;
    v27 = 32 * *(unsigned int *)v82;
    do
    {
      sub_22E80FBD8((void ***)&v26[v27]);
      v27 -= 32;
    }
    while (v27);
    v25 = v81;
  }
  if (v25 != &v82[8])
    free(v25);
  *v43 = v44;
  if (a1)
    sub_22E885CF4(a1);
LABEL_69:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 68) & 0x20) != 0)
  {
    if ((v59 & 4) != 0)
    {
      v29 = *(unint64_t **)(v59 & 0xFFFFFFFFFFFFFFF8);
      v30 = (uint64_t *)&v29[*(unsigned int *)((v59 & 0xFFFFFFFFFFFFFFF8) + 8)];
    }
    else
    {
      v29 = &v59;
      v30 = (uint64_t *)(&v59 + (v59 > 7));
    }
    for (; v29 != (unint64_t *)v30; ++v29)
    {
      v33 = (_DWORD *)*v29;
      v34 = *(unsigned __int16 *)(*(_QWORD *)(*v29 + 72) + 8);
      v35 = v34 > 0x3B;
      v36 = (1 << v34) & 0xC80000000000000;
      if (!v35 && v36 != 0)
      {
        v38 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v38 + 312) = v33[4];
        *(_DWORD *)(v38 + 316) = 1898;
        if (*(char *)(v38 + 311) < 0)
        {
          **(_BYTE **)(v38 + 288) = 0;
          *(_QWORD *)(v38 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v38 + 288) = 0;
          *(_BYTE *)(v38 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v81, v38);
        sub_22E3B89A8((unsigned __int8 **)&v81, (void *)(*(_QWORD *)(*(_QWORD *)v33 + 16) + 16), **(unsigned int **)(*(_QWORD *)v33 + 16));
        sub_22E3BB0B8((uint64_t)&v81);
      }
    }
  }
  sub_22E885C30(a1, 4194377);
  sub_22EC53290(*(_QWORD *)(a1 + 88), a2, (uint64_t)&v86, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
  if (*(_WORD *)(a1 + 32) == 23)
  {
    v31 = sub_22E878918(a1, 0);
    sub_22E885CF4(a1);
    if (v11)
      sub_22E885CF4(v11);
    v32 = *(_QWORD *)(a1 + 88);
    if ((v31 & 1) != 0 || v54)
    {
      sub_22F336DD4(v32, v3, *(_QWORD *)(v32 + 12888), 0);
      goto LABEL_19;
    }
    v12 = sub_22F3371C4(v32, v3, v31 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1506, (uint64_t)v41);
    sub_22E3BB0B8((uint64_t)v41);
    sub_22F336DD4(*(_QWORD *)(a1 + 88), v3, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0);
    sub_22E885CF4(a1);
    if (v11)
    {
LABEL_18:
      sub_22E885CF4(v11);
LABEL_19:
      v12 = 1;
      goto LABEL_20;
    }
    v12 = 1;
  }
LABEL_20:
  sub_22E8D1BC4(v60, (uint64_t)&v60);
  sub_22E80F94C(&v61);
  sub_22E80F94C((uint64_t *)&v59);
  *(_DWORD *)(a1 + 952) -= v10;
  sub_22E827F78((uint64_t)&v86);
  if (DWORD1(v67))
    free(*((void **)&v66 + 1));
  sub_22E8D1BC4(v64, (uint64_t)&v64);
  sub_22E80F94C((uint64_t *)&v65);
  sub_22E80F94C((uint64_t *)&v63 + 1);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v77);
  return v12;
}

void sub_22E845140(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const char *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  int v50;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  void *__p;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void *v67[2];
  _BYTE v68[16];
  uint64_t *v69;
  uint64_t v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a1;
  sub_22E8220E8(*(_QWORD *)a1, 3, *(uint64_t **)(a1 + 8), 0);
  v55 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (unsigned int *)(v7 + 16);
  v50 = a3;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v11 = *(unsigned __int16 *)(v7 + 32);
        if (v11 != 138)
          break;
        if (v9)
        {
          v12 = *(_QWORD *)(v7 + 96);
          *(_DWORD *)(v12 + 312) = *(_DWORD *)(v7 + 16);
          *(_DWORD *)(v12 + 316) = 1591;
          if (*(char *)(v12 + 311) < 0)
          {
            **(_BYTE **)(v12 + 288) = 0;
            *(_QWORD *)(v12 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v12 + 288) = 0;
            *(_BYTE *)(v12 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v69, v12);
          v13 = v69;
          if (!v69)
          {
            v13 = (uint64_t *)sub_22E3B8AAC(v70);
            v69 = v13;
          }
          *((_BYTE *)v13 + *(unsigned __int8 *)v13 + 1) = 2;
          v14 = v69;
          v15 = *(unsigned __int8 *)v69;
          *(_BYTE *)v69 = v15 + 1;
          v14[v15 + 2] = 0;
          v16 = *v10 | ((unint64_t)*v10 << 32);
          v62 = 0;
          v61 = 0;
          v64 = 0;
          v65 = 0;
          __p = 0;
          v66 = 0;
          v59 = v16;
          v60 = 1;
          sub_22E6D82D0((uint64_t *)&v69, &v59);
          if (SHIBYTE(v65) < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)&v69);
        }
        *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
        sub_22F18FB4C(*(_QWORD *)(v7 + 8), (unsigned int *)(v7 + 16));
        v9 = *(_DWORD *)(v7 + 40);
        a3 = v9;
      }
      if (v11 != 161)
        break;
      if (v8)
      {
        v22 = *(_QWORD *)(v7 + 96);
        *(_DWORD *)(v22 + 312) = *(_DWORD *)(v7 + 16);
        *(_DWORD *)(v22 + 316) = 1591;
        if (*(char *)(v22 + 311) < 0)
        {
          **(_BYTE **)(v22 + 288) = 0;
          *(_QWORD *)(v22 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v22 + 288) = 0;
          *(_BYTE *)(v22 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v69, v22);
        v23 = v69;
        if (!v69)
        {
          v23 = (uint64_t *)sub_22E3B8AAC(v70);
          v69 = v23;
        }
        *((_BYTE *)v23 + *(unsigned __int8 *)v23 + 1) = 2;
        v24 = v69;
        v25 = *(unsigned __int8 *)v69;
        *(_BYTE *)v69 = v25 + 1;
        v24[v25 + 2] = 1;
        v26 = *v10 | ((unint64_t)*v10 << 32);
        v62 = 0;
        v61 = 0;
        v64 = 0;
        v65 = 0;
        __p = 0;
        v66 = 0;
        v59 = v26;
        v60 = 1;
        sub_22E6D82D0((uint64_t *)&v69, &v59);
        if (SHIBYTE(v65) < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v69);
      }
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
      sub_22F18FB4C(*(_QWORD *)(v7 + 8), (unsigned int *)(v7 + 16));
      v8 = *(_DWORD *)(v7 + 40);
      a3 = v8;
    }
    if (v11 != 174)
      break;
    if (v55)
    {
      v17 = *(_QWORD *)(v7 + 96);
      *(_DWORD *)(v17 + 312) = *(_DWORD *)(v7 + 16);
      *(_DWORD *)(v17 + 316) = 1591;
      if (*(char *)(v17 + 311) < 0)
      {
        **(_BYTE **)(v17 + 288) = 0;
        *(_QWORD *)(v17 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v17 + 288) = 0;
        *(_BYTE *)(v17 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v69, v17);
      v18 = v69;
      if (!v69)
      {
        v18 = (uint64_t *)sub_22E3B8AAC(v70);
        v69 = v18;
      }
      *((_BYTE *)v18 + *(unsigned __int8 *)v18 + 1) = 2;
      v19 = v69;
      v20 = *(unsigned __int8 *)v69;
      *(_BYTE *)v69 = v20 + 1;
      v19[v20 + 2] = 2;
      v21 = *v10 | ((unint64_t)*v10 << 32);
      v62 = 0;
      v61 = 0;
      v64 = 0;
      v65 = 0;
      __p = 0;
      v66 = 0;
      v59 = v21;
      v60 = 1;
      sub_22E6D82D0((uint64_t *)&v69, &v59);
      if (SHIBYTE(v65) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v69);
    }
    *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
    sub_22F18FB4C(*(_QWORD *)(v7 + 8), (unsigned int *)(v7 + 16));
    a3 = *(_DWORD *)(v7 + 40);
    v55 = a3;
  }
  v27 = a1;
  v28 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    if ((**(_QWORD **)(*(_QWORD *)(v7 + 8) + 56) & 0x800) != 0)
      v29 = 1902;
    else
      v29 = 1800;
    v30 = *(_QWORD *)(v7 + 96);
    *(_DWORD *)(v30 + 312) = v8;
    *(_DWORD *)(v30 + 316) = v29;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v59, v30);
    sub_22E3BB0B8((uint64_t)&v59);
    if ((*(_QWORD *)v28 & 0x6000000000) == 0)
    {
      *(_QWORD *)v28 = *(_QWORD *)v28 & 0xFFFFFF9FFFFFFFFFLL | 0x2000000000;
      *(_DWORD *)(v28 + 196) = v8;
    }
    v28 = *(_QWORD *)(a1 + 16);
  }
  if (v55)
  {
    v31 = *(_QWORD *)(v7 + 96);
    *(_DWORD *)(v31 + 312) = v55;
    *(_DWORD *)(v31 + 316) = 126;
    if (*(char *)(v31 + 311) < 0)
    {
      **(_BYTE **)(v31 + 288) = 0;
      *(_QWORD *)(v31 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v31 + 288) = 0;
      *(_BYTE *)(v31 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v59, v31);
    sub_22E3BB0B8((uint64_t)&v59);
    v32 = (*(_QWORD *)v28 >> 37) & 3;
    if ((_DWORD)v32)
    {
      if ((_DWORD)v32 == 1)
      {
        v43 = "constexpr";
      }
      else if ((_DWORD)v32 == 3)
      {
        v43 = "constinit";
      }
      else
      {
        v43 = "consteval";
      }
      if ((_DWORD)v32 == 2)
        v44 = 94;
      else
        v44 = 3658;
      v45 = *(_QWORD *)(v7 + 96);
      *(_DWORD *)(v45 + 312) = v55;
      *(_DWORD *)(v45 + 316) = v44;
      if (*(char *)(v45 + 311) < 0)
      {
        **(_BYTE **)(v45 + 288) = 0;
        *(_QWORD *)(v45 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v45 + 288) = 0;
        *(_BYTE *)(v45 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v69, v45);
      v46 = v69;
      if (!v69)
      {
        v46 = (uint64_t *)sub_22E3B8AAC(v70);
        v69 = v46;
      }
      *((_BYTE *)v46 + *(unsigned __int8 *)v46 + 1) = 1;
      v47 = v69;
      v48 = *(unsigned __int8 *)v69;
      *(_BYTE *)v69 = v48 + 1;
      v47[v48 + 2] = (uint64_t)v43;
      sub_22E3BB0B8((uint64_t)&v69);
      v27 = a1;
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v28 & 0xFFFFFF9FFFFFFFFFLL | 0x4000000000;
      *(_DWORD *)(v28 + 196) = v55;
    }
  }
  v57 = 0;
  v58 = 0;
  v69 = v71;
  v70 = 0x200000000;
  v67[0] = v68;
  v67[1] = (void *)0x200000000;
  v56 = 0;
  v33 = sub_22E834248(v7, 0, (uint64_t)&v58, (uint64_t)&v69, (uint64_t)v67, &v57, &v56);
  if (v33)
    v34 = HIDWORD(v58);
  else
    v34 = a3;
  if (sub_22E8103B4(v7, *(_QWORD *)(v27 + 8), 0))
    v34 = *(_DWORD *)(*(_QWORD *)(v27 + 8) + 4);
  v35 = *(unsigned __int16 *)(v7 + 32);
  if ((v35 - 312) <= 4)
  {
    sub_22E816A3C(v7, *(_QWORD *)(v27 + 16) + 24);
    *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
    sub_22F18FB4C(*(_QWORD *)(v7 + 8), (unsigned int *)(v7 + 16));
    v35 = *(unsigned __int16 *)(v7 + 32);
  }
  if (v35 == 36)
  {
    v37 = *(_DWORD *)(v7 + 16);
    v59 = 0;
    v40 = sub_22F2E4AE0(v7, (uint64_t)&v59, 0);
    v41 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)v41 = v40;
    *(_BYTE *)(v41 + 8) = v42;
    v36 = *(int **)(v27 + 32);
    *v36 = v59;
    if (HIDWORD(v59))
      v34 = HIDWORD(v59);
  }
  else
  {
    v36 = *(int **)(v27 + 32);
    v37 = v34;
  }
  v38 = *(_QWORD *)(v27 + 40);
  if (v57 <= 1)
    v39 = 0;
  else
    v39 = v57 & 0xFFFFFFFFFFFFFFFELL;
  sub_22E8ACEBC(1, 0, a2, a4, a5, a6, v50, 1, (uint64_t)&v59, 0, 0, v9, 0, v33, v58, v69, (uint64_t *)v67[0], v70, v39,
    0,
    0,
    0,
    a2,
    0,
    v37,
    v38,
    **(_QWORD **)(v27 + 24),
    *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8),
    HIDWORD(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8)),
    *v36,
    *(_QWORD *)(v27 + 16));
  sub_22E824ABC(v38, (unint64_t)&v59, *(_QWORD *)(v27 + 8), v34);
  sub_22E80F94C((uint64_t *)&__p);
  if (v67[0] != v68)
    free(v67[0]);
  if (v69 != v71)
    free(v69);
}

uint64_t sub_22E845834(uint64_t a1)
{
  unsigned int *v1;
  int v2;
  const char *v3;
  const char *v4;
  const char *v5;
  char *v6;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  _BYTE v49[24];
  __int128 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v1 = (unsigned int *)(a1 + 16);
  v2 = *(unsigned __int16 *)(a1 + 32);
  v3 = "addrspace_cast";
  if (v2 != 348)
    v3 = "as_type";
  if (v2 == 146)
    v3 = "static_cast";
  v4 = "const_cast";
  v5 = "dynamic_cast";
  if (v2 != 133)
    v5 = "reinterpret_cast";
  if (v2 != 131)
    v4 = v5;
  if (*(unsigned __int16 *)(a1 + 32) <= 0x91u)
    v6 = (char *)v4;
  else
    v6 = (char *)v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v1);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(unsigned int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 19 && *(_DWORD *)(a1 + 20) == 2)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 2816);
    v12 = v11 >= *(unsigned int *)(v10 + 2784) ? sub_22F162D2C(v10, 1u) : *(_QWORD *)(v10 + 2776) + 24 * v11;
    v13 = *(_OWORD *)v12;
    *(_QWORD *)&v49[16] = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v49 = v13;
    if (*(unsigned __int16 *)&v49[16] == 61 && sub_22F2E6FAC(a1, (int *)v1, (int *)v49))
      sub_22E8406B8(a1, *(_QWORD *)(a1 + 8), v1, (unsigned int *)v49, v2, 1);
  }
  if (v2 == 133 && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 100) & 0x2000000000) != 0)
  {
    sub_22E884578(a1, (int *)v1, 1599, (uint64_t)v49);
    v14 = *(unsigned __int8 **)v49;
    if (!*(_QWORD *)v49)
    {
      v14 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v49[8]);
      *(_QWORD *)v49 = v14;
    }
    v14[*v14 + 1] = 2;
    v15 = *(_QWORD *)v49;
    v16 = **(_BYTE **)v49;
    **(_BYTE **)v49 = v16 + 1;
    *(_QWORD *)(v15 + 8 * v16 + 16) = 2;
    sub_22E3BB0B8((uint64_t)v49);
    strcpy(v49, "3");
    v17 = 1;
    sub_22E885940(a1, (unsigned __int16 *)v49, 1, 1);
    *(_WORD *)v49 = 21;
    sub_22E885940(a1, (unsigned __int16 *)v49, 1, 1);
    *(_WORD *)v49 = 22;
    sub_22E885940(a1, (unsigned __int16 *)v49, 1, 1);
  }
  else
  {
    v18 = strlen(v6);
    if ((sub_22E8847B4(a1, 0x2Eu, 1509, v6, v18) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v34[0] = 0;
      v34[2] = 0;
      v35 = 0u;
      v36 = a1 + 960;
      v48 = 0;
      v37 = 0u;
      *(_OWORD *)v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0;
      sub_22E80FF64(a1, v34, 3, 0, 0);
      *(_QWORD *)v49 = v34;
      v52 = 0;
      v53 = 0;
      *(_OWORD *)&v49[8] = 0u;
      v50 = 0u;
      v51 = 0;
      v54 = *((_QWORD *)&v39 + 1);
      v58 = &v60;
      v61 = (v34[0] & 0x3F000) == 204800;
      v56 = 0u;
      v55 = 5;
      v57 = 0;
      v59 = 0x800000000;
      v62 = 0u;
      v63 = v36;
      v67 = 0;
      v66 = 0u;
      v65 = 0u;
      v64 = 0u;
      sub_22E8227E4(a1, (uint64_t)v49, (unint64_t)sub_22E823490, 0);
      v19 = *(unsigned int *)(a1 + 16);
      if (sub_22E8847B4(a1, 0x33u, 15, "", 0))
      {
        v20 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v20 + 312) = v9;
        *(_DWORD *)(v20 + 316) = 104;
        if (*(char *)(v20 + 311) < 0)
        {
          **(_BYTE **)(v20 + 288) = 0;
          *(_QWORD *)(v20 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v20 + 288) = 0;
          *(_BYTE *)(v20 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v26, v20);
        v21 = v26;
        if (!v26)
        {
          v21 = (unsigned __int8 *)sub_22E3B8AAC(v27);
          v26 = v21;
        }
        v21[*v21 + 1] = 4;
        v22 = v26;
        v23 = *v26;
        *v26 = v23 + 1;
        *(_QWORD *)&v22[8 * v23 + 16] = 46;
        sub_22E3BB0B8((uint64_t)&v26);
        v17 = 1;
      }
      else
      {
        v26 = (unsigned __int8 *)(a1 + 944);
        LOBYTE(v27) = *(_BYTE *)(a1 + 944);
        v17 = 1;
        *(_BYTE *)(a1 + 944) = 1;
        v28 = a1;
        v29 = 1441813;
        v30 = 62;
        v32 = 0;
        v33 = 0;
        v31 = sub_22E80F720;
        if ((sub_22E88C650((uint64_t)&v26, 1510, v6, 0) & 1) == 0)
        {
          v24 = sub_22E83766C(a1, 0);
          v17 = sub_22E83778C(a1, v24, 1);
          sub_22E811E8C((uint64_t)&v26);
          if ((v17 & 1) == 0 && (v61 & 1) == 0 && (**(_QWORD **)v49 & 0x3F000) != 0x32000)
            v17 = sub_22E95ACE8(*(_QWORD **)(a1 + 88), v8, v2, v9, (uint64_t)v49, v19, v33, v17 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(v33));
        }
        *v26 = v27;
      }
      sub_22E827F78((uint64_t)v49);
      if (DWORD1(v39))
        free(v38[1]);
      sub_22E8D1BC4(v36, (uint64_t)&v36);
      sub_22E80F94C((uint64_t *)&v37);
      sub_22E80F94C((uint64_t *)&v35 + 1);
    }
  }
  return v17;
}

uint64_t sub_22E845D78(uint64_t a1)
{
  int *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;

  v2 = (int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v2 - 1) + 56) + 104) & 0x20) == 0)
  {
    v3 = v2[6];
    v23 = (unsigned __int8 *)(a1 + 944);
    LOBYTE(v24) = *(_BYTE *)(a1 + 944);
    v4 = 1;
    *(_BYTE *)(a1 + 944) = 1;
    v25 = a1;
    v26 = 1441813;
    v27 = 62;
    v29 = 0;
    v30 = 0;
    v28 = sub_22E80F720;
    if ((sub_22E88C650((uint64_t)&v23, 1510, "typeid", 0) & 1) != 0)
    {
LABEL_17:
      *v23 = v24;
      return v4;
    }
    v5 = v30;
    v6 = *(_QWORD *)(a1 + 88);
    sub_22EB4DECC(v6, 0, 0, 3);
    LOBYTE(v31) = 0;
    if (sub_22E828854(a1, &v31))
    {
      v7 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
      v9 = v8;
      sub_22E811E8C((uint64_t)&v23);
      v4 = 1;
      if (v9)
        goto LABEL_16;
      v12 = HIDWORD(v30);
      if (!HIDWORD(v30))
        goto LABEL_16;
      v13 = *(_QWORD **)(a1 + 88);
      v14 = v3;
      v15 = v5;
      v16 = 1;
      v17 = v7;
    }
    else
    {
      v21 = sub_22E83766C(a1, 0);
      v4 = sub_22E83778C(a1, v21, 1);
      if ((v4 & 1) != 0)
      {
        v31 = 22;
        sub_22E885940(a1, &v31, 1, 1);
        goto LABEL_16;
      }
      sub_22E811E8C((uint64_t)&v23);
      v12 = HIDWORD(v30);
      if (!HIDWORD(v30))
      {
        v4 = 1;
        goto LABEL_16;
      }
      v13 = *(_QWORD **)(a1 + 88);
      v17 = v4 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v3;
      v15 = v5;
      v16 = 0;
    }
    v4 = sub_22EBB9BCC(v13, v14, v15, v16, v17, v12, v10, v11);
LABEL_16:
    sub_22EB48E64(v6);
    goto LABEL_17;
  }
  sub_22E884578(a1, v2, 1599, (uint64_t)&v23);
  v18 = v23;
  if (!v23)
  {
    v18 = (unsigned __int8 *)sub_22E3B8AAC(v24);
    v23 = v18;
  }
  v18[*v18 + 1] = 2;
  v19 = v23;
  v20 = *v23;
  *v23 = v20 + 1;
  *(_QWORD *)&v19[8 * v20 + 16] = 14;
  sub_22E3BB0B8((uint64_t)&v23);
  LOWORD(v23) = 21;
  v4 = 1;
  sub_22E885940(a1, (unsigned __int16 *)&v23, 1, 1);
  LOWORD(v23) = 22;
  sub_22E885940(a1, (unsigned __int16 *)&v23, 1, 1);
  return v4;
}

uint64_t sub_22E845FF4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 a4, uint64_t *a5, unint64_t a6)
{
  unsigned int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  std::string::size_type v22;
  unsigned int v23;
  int v24;
  _BYTE v26[32];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  v46 = 0;
  v12 = (unsigned int *)(a1 + 16);
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 401)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!*(_DWORD *)(v16 + 32) || *(_BYTE *)(v16 + 48))
      return 1;
    v43 = 7;
    v44 = v16;
    v14 = *(_DWORD *)(v16 + 4);
    v17 = *(_DWORD *)(v16 + 40);
    v45 = v14;
    v46 = v17;
    v18 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v18 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v18;
  }
  else
  {
    if (v13 != 5)
    {
      v14 = 0;
      v15 = 0;
      v44 = 0;
      v45 = 0;
      goto LABEL_11;
    }
    v14 = *(_DWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a1 + 24);
    v45 = v14;
    v46 = v14;
    *(_DWORD *)(a1 + 40) = v14;
  }
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
  v15 = *(_DWORD *)(a1 + 40);
LABEL_11:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
  v19 = *(_DWORD *)(a1 + 40);
  v20 = *(unsigned __int16 *)(a1 + 32);
  if (v20 == 162 && !v14)
  {
    v27[0] = 0;
    v27[2] = 0;
    v28 = 0;
    v29 = 0;
    v30 = a1 + 960;
    v42 = 0;
    v31 = 0u;
    *(_OWORD *)v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    sub_22E82C1E4(a1, (uint64_t)v27);
    if ((v27[0] & 0x3F000) == 0x32000)
      v21 = 1;
    else
      v21 = sub_22F332014(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, a3, a4, v19, (uint64_t)v27);
    if (DWORD1(v33))
      free(v32[1]);
    sub_22E8D1BC4(v30, (uint64_t)&v30);
    sub_22E80F94C((uint64_t *)&v31);
    sub_22E80F94C(&v29);
    return v21;
  }
  if (v20 != 5)
  {
    sub_22E884578(a1, (int *)v12, 1474, (uint64_t)v26);
    sub_22E3BB0B8((uint64_t)v26);
    return 1;
  }
  v22 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
  v23 = *(_DWORD *)(a1 + 40);
  LODWORD(v27[0]) = 0;
  v27[1] = v22;
  LODWORD(v28) = v23;
  HIDWORD(v28) = v23;
  if (*(_WORD *)(a1 + 32) != 46)
    return sub_22EBCE310(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, a3, a4, (uint64_t)a5, (uint64_t)&v43, v15, v19, (uint64_t)v27);
  if (a2)
    v24 = (*(unsigned __int8 *)(a2 + 2) >> 1) & 1;
  else
    LOBYTE(v24) = 0;
  v21 = 1;
  if ((sub_22E8462E0(a1, a5, a6, v24, 0, v22, v23, 0, (int *)v27, 1) & 1) == 0)
    return sub_22EBCE310(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, a3, a4, (uint64_t)a5, (uint64_t)&v43, v15, v19, (uint64_t)v27);
  return v21;
}

uint64_t sub_22E8462E0(uint64_t a1, uint64_t *a2, unint64_t a3, char a4, unsigned int a5, std::string::size_type a6, unsigned int a7, int a8, int *a9, char a10)
{
  uint64_t v10;
  int v17;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  int data;
  unint64_t v30;
  char v31;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int *v38;
  std::string::size_type v39;
  const void *v40;
  unsigned int v41;
  std::string *p_dst;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  size_t size;
  unint64_t v47;
  const std::string::value_type *v48;
  uint64_t v49;
  unsigned __int8 *v51[4];
  std::string v52;
  char v53;
  uint64_t v54;
  std::string __dst;
  _BYTE __p[23];
  __int16 v57;
  uint64_t v58;

  v10 = 0;
  v58 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  switch(*a9)
  {
    case 0:
    case 1:
    case 3:
      if (a10)
        goto LABEL_3;
      v53 = 0;
      v19 = sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)a2, a5 != 0, a9, a3, a8, (unint64_t *)&v54, &v53, 0);
      if (v19 == 5)
      {
        if (sub_22F2F0E30(a1, 0) != 1)
        {
          v20 = 5;
          goto LABEL_12;
        }
        return 0;
      }
      v20 = v19;
      if (v19)
        v27 = 1;
      else
        v27 = v53 == 0;
      if (!v27 && a3 != 0)
      {
        if (sub_22F2F0E30(a1, 0))
          return 0;
        if ((a4 & 1) != 0)
        {
LABEL_3:
          v17 = sub_22ED66924(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)a2, a5, (uint64_t)a9, a3, a8, (unint64_t *)&v54, 1);
          goto LABEL_11;
        }
        memset(&v52, 0, sizeof(v52));
        if (*a9)
        {
          MEMORY[0x2348A0C14](&v52, "operator ");
          if (*a9 == 1)
          {
            v48 = (const std::string::value_type *)sub_22F41FBE0(a9[2]);
            std::string::append(&v52, v48);
          }
          else
          {
            std::string::append(&v52, (const std::string::value_type *)(*(_QWORD *)(*((_QWORD *)a9 + 1) + 16) + 16), **(unsigned int **)(*((_QWORD *)a9 + 1) + 16));
          }
LABEL_64:
          v44 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v44 + 312) = a9[6];
          *(_DWORD *)(v44 + 316) = 1604;
          if (*(char *)(v44 + 311) < 0)
          {
            **(_BYTE **)(v44 + 288) = 0;
            *(_QWORD *)(v44 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v44 + 288) = 0;
            *(_BYTE *)(v44 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v51, v44);
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = &v52;
          else
            v45 = (std::string *)v52.__r_.__value_.__r.__words[0];
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v52.__r_.__value_.__l.__size_;
          sub_22E3B89A8(v51, v45, size);
          v47 = a9[6] | ((unint64_t)a9[6] << 32);
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 4) = 0;
          __dst.__r_.__value_.__s.__data_[20] = 0;
          __dst.__r_.__value_.__r.__words[0] = v47;
          __dst.__r_.__value_.__s.__data_[8] = 0;
          memset(&__p[10], 0, 13);
          strcpy(__p, "template ");
          v57 = 9;
          sub_22E6D82D0((uint64_t *)v51, &__dst);
          if ((char)v57 < 0)
            operator delete(*(void **)__p);
          sub_22E3BB0B8((uint64_t)v51);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          goto LABEL_3;
        }
        v38 = *(unsigned int **)(*((_QWORD *)a9 + 1) + 16);
        v41 = *v38;
        v40 = v38 + 4;
        v39 = v41;
        if (v41 >= 0x17uLL)
        {
          v43 = (v39 & 0xFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v43 = v39 | 7;
          v49 = v43;
          p_dst = (std::string *)operator new(v43 + 1);
          __dst.__r_.__value_.__l.__size_ = v39;
          __dst.__r_.__value_.__r.__words[2] = v49 - 0x7FFFFFFFFFFFFFFFLL;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v39;
          p_dst = &__dst;
          if (!v39)
            goto LABEL_61;
        }
        memmove(p_dst, v40, v39);
LABEL_61:
        p_dst->__r_.__value_.__s.__data_[v39] = 0;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        v52 = __dst;
        goto LABEL_64;
      }
      if (!v19)
        return 0;
LABEL_12:
      LODWORD(v51[0]) = 0;
      LODWORD(v52.__r_.__value_.__l.__data_) = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
      __dst.__r_.__value_.__l.__size_ = 0x1000000000;
      v10 = 1;
      if ((sub_22E88101C(a1, 1, (int *)v51, (uint64_t)&__dst, (unsigned int *)&v52, v54) & 1) == 0 && v20)
      {
        v23 = *a9;
        if (*a9 > 3 || v23 == 2)
        {
          data = (int)v52.__r_.__value_.__l.__data_;
          v30 = sub_22ED62A48(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)a2, a5, v54, a6, a7, v51[0], (uint64_t)__dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), v52.__r_.__value_.__l.__data_, 0, 1, 0);
          if (!v31)
          {
            v10 = 0;
            if (*a9 == 4)
            {
              *a9 = 4;
              a9[6] = a7;
            }
            else
            {
              *a9 = 6;
            }
            a9[7] = data;
            *((_QWORD *)a9 + 1) = v30;
          }
        }
        else
        {
          if (v23)
            v24 = 0;
          else
            v24 = *((_QWORD *)a9 + 1);
          if (v23)
            v25 = *((_QWORD *)a9 + 1);
          else
            v25 = 0;
          v26 = sub_22E847E44(a5, a9[6], v24, v25, v54, v20, (int)v51[0], (int)v52.__r_.__value_.__l.__data_, (uint64_t)__dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), 0, a1 + 2192);
          v10 = 0;
          *a9 = 7;
          *((_QWORD *)a9 + 1) = v26;
          a9[6] = *(_DWORD *)(v26 + 4);
          a9[7] = *(_DWORD *)(v26 + 40);
        }
      }
      sub_22E828F5C(&__dst.__r_.__value_.__l.__data_);
      return v10;
    case 4:
      LOBYTE(v51[0]) = 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      __dst.__r_.__value_.__l.__size_ = a6;
      *(_DWORD *)__p = a7;
      *(_DWORD *)&__p[4] = a7;
      v20 = sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)a2, a5 != 0, (int *)&__dst, a3, a8, (unint64_t *)&v54, v51, 0);
      if (!v20)
        return 0;
      goto LABEL_12;
    case 6:
      v52.__r_.__value_.__s.__data_[0] = 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      __dst.__r_.__value_.__l.__size_ = a6;
      *(_DWORD *)__p = a7;
      *(_DWORD *)&__p[4] = a7;
      v21 = *(_QWORD **)(a1 + 88);
      v22 = (uint64_t *)v21[1611];
      if (a3)
      {
        v17 = sub_22ED66924((uint64_t)v21, v22, (uint64_t)a2, a5, (uint64_t)&__dst, a3, a8, (unint64_t *)&v54, 1);
LABEL_11:
        v20 = v17;
      }
      else
      {
        v20 = sub_22ED562E8(v21, v22, (uint64_t)a2, a5 != 0, (int *)&__dst, 0, a8, (unint64_t *)&v54, &v52, 0);
        if (!v20)
        {
          if (!*((_QWORD *)a9 + 1))
          {
            v34 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v34 + 312) = a7;
            *(_DWORD *)(v34 + 316) = 1473;
            if (*(char *)(v34 + 311) < 0)
            {
              **(_BYTE **)(v34 + 288) = 0;
              *(_QWORD *)(v34 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v34 + 288) = 0;
              *(_BYTE *)(v34 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v51, v34);
            v35 = v51[0];
            if (!v51[0])
            {
              v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v51[1]);
              v51[0] = v35;
            }
            v35[*v35 + 1] = 5;
            v36 = v51[0];
            v37 = *v51[0];
            *v51[0] = v37 + 1;
            *(_QWORD *)&v36[8 * v37 + 16] = a6;
            sub_22E4D6448((uint64_t)(v36 + 336), *a2, 1);
            sub_22E3BB0B8((uint64_t)v51);
          }
          v20 = 0;
        }
      }
      goto LABEL_12;
    default:
      return v10;
  }
}

uint64_t sub_22E8468C8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = a1 + 16;
  v2 = *(unsigned __int16 *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  return sub_22EBBA59C(v3, *(_DWORD *)(v1 + 24), v2);
}

uint64_t sub_22E846914(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[5];
  _BYTE *v31;
  char v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40[2];
  _BYTE v41[80];
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  _WORD v62[484];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  v54 = 0;
  v55 = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v56 = a2[11];
  v58 = 0u;
  v57 = 6;
  v59 = 0;
  v60 = v62;
  v61 = 0x800000000;
  v62[480] = (*a2 & 0x3F000) == 204800;
  v10 = a2[5];
  v63 = 0u;
  v64 = v10;
  v68 = 0;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v11 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v50, a4, a5, a6, a7, a8);
  v12 = v11;
  v39 = v11;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 136) & 2) != 0)
  {
    v42 = (void *)(a1 + 944);
    LOBYTE(v43) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v44 = a1;
    v45 = 1441813;
    v46 = 62;
    v48 = 0;
    v49 = 0;
    v47 = sub_22E80F720;
    sub_22E811DE8((uint64_t)&v42);
    v23 = sub_22E838554(a1, 0, 0, 0, 0, 0);
    if ((v23 & 1) != 0)
    {
      LOWORD(v40[0]) = 22;
      v13 = 1;
      v24 = (unsigned __int16 *)v40;
    }
    else
    {
      v40[0] = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (!sub_22E811E8C((uint64_t)&v42))
      {
        if (v12)
          v13 = sub_22EBBC220(*(_QWORD *)(a1 + 88), v12, v49, v40, 1, SHIDWORD(v49));
        else
          v13 = 1;
        goto LABEL_31;
      }
      LOWORD(v31) = 22;
      v13 = 1;
      v24 = (unsigned __int16 *)&v31;
    }
    sub_22E885940(a1, v24, 1, 1);
LABEL_31:
    v14 = v43;
    v15 = v42;
LABEL_13:
    *v15 = v14;
    goto LABEL_14;
  }
  if (*(_WORD *)(a1 + 32) != 23)
  {
    v31 = (_BYTE *)(a1 + 944);
    v32 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v33 = a1;
    v34 = 1441813;
    v35 = 62;
    v37 = 0;
    v38 = 0;
    v36 = sub_22E80F720;
    sub_22E811DE8((uint64_t)&v31);
    if (*(_BYTE *)(a1 + 48))
    {
      v25 = 0;
      v26 = *(_DWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 64) = 0;
      if (v12 >= 0x10)
        v25 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) | v12 & 7;
      *(_QWORD *)(a1 + 56) = v25;
      *(_DWORD *)(a1 + 52) = v26;
    }
    v42 = &v44;
    v43 = 0xC00000000;
    v40[0] = v41;
    v40[1] = (void *)0x1400000000;
    v30[0] = &v39;
    v30[1] = a1;
    v30[2] = a2;
    v30[3] = &v42;
    v30[4] = &v31;
    if (*(_WORD *)(a1 + 32) != 22
      && (v29[0] = a1, v29[1] = v30, sub_22E83EFC4(a1, &v42, v40, sub_22E849E38, v29, 0, 0)))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 864) && !*(_BYTE *)(a1 + 948))
        sub_22E846D60((unint64_t)v30);
      LOWORD(v29[0]) = 22;
      v13 = 1;
      sub_22E885940(a1, (unsigned __int16 *)v29, 1, 1);
    }
    else
    {
      sub_22E811E8C((uint64_t)&v31);
      if (v39)
        v13 = sub_22EBBC220(*(_QWORD *)(a1 + 88), v39, v38, v42, v43, SHIDWORD(v38));
      else
        v13 = 1;
    }
    if (v40[0] != v41)
      free(v40[0]);
    if (v42 != &v44)
      free(v42);
    v14 = v32;
    v15 = v31;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v27 = 0;
    v28 = *(_DWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 64) = 0;
    if (v11 >= 0x10)
      v27 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) | v11 & 7;
    *(_QWORD *)(a1 + 56) = v27;
    *(_DWORD *)(a1 + 52) = v28;
  }
  v17 = sub_22E84AF40(a1);
  v13 = v17;
  if ((v17 & 1) == 0)
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v42 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *(_QWORD *)(a1 + 88);
    sub_22F0D5A50(v17 & 0xFFFFFFFFFFFFFFFELL);
    v21 = v20;
    sub_22F0D60E4(v18);
    v13 = sub_22EBBC220(v19, v12, v21, &v42, 1, v22);
  }
LABEL_14:
  sub_22E827F78((uint64_t)&v50);
  return v13;
}

unint64_t sub_22E846D60(unint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (**(_QWORD **)result)
    result = sub_22E9C487C();
  *(_BYTE *)(v1 + 948) = 1;
  return result;
}

uint64_t sub_22E846DC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  char v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _BOOL8 v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  __int16 v80;
  _BYTE v81[32];
  _QWORD v82[4];
  _BYTE v83[32];
  uint64_t v84[3];
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  void *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 v103;
  uint64_t *v104;
  __int128 v105;
  __int128 __p;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 88);
  if (a7)
    v14 = *(_QWORD *)(v13 + 12888);
  else
    v14 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v72 = *(_DWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(v13 + 88) + 16400);
    *(_DWORD *)(a1 + 52) = v72;
  }
  v15 = *(_WORD *)(a1 + 80);
  v16 = *(_WORD *)(a1 + 82);
  v17 = *(_WORD *)(a1 + 84);
  if (*(_WORD *)(a1 + 32) != 3)
  {
    v80 = *(_WORD *)(a1 + 84);
    v19 = *(_WORD *)(a1 + 82);
    v20 = *(_WORD *)(a1 + 80);
    v99 = 0;
    v100 = 0;
    v101 = a1 + 960;
    v102 = 0;
    sub_22E8103B4(a1, &v99, 0);
    v22 = sub_22E8831C0(a1, a2 != 0, a6 != 0);
    if (v22 == 3)
    {
      v47 = *(_DWORD *)(a1 + 16);
      LODWORD(v104) = 0;
      v48 = sub_22E81801C(a1, 9, &v104, (uint64_t)&v99, 0, a6, 0);
      *(_QWORD *)(a6 + 16) = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), (uint64_t)v48, v47, *(_DWORD *)(a1 + 16));
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_DWORD *)(a8 + 15) = 0;
      v15 = v20;
      v16 = v19;
      v17 = v80;
      goto LABEL_74;
    }
    if (v22 == 2)
    {
      if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
        v36 = 1904;
      else
        v36 = 1834;
      v37 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v37 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v37 + 316) = v36;
      if (*(char *)(v37 + 311) < 0)
      {
        **(_BYTE **)(v37 + 288) = 0;
        *(_QWORD *)(v37 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v37 + 288) = 0;
        *(_BYTE *)(v37 + 311) = 0;
      }
      v23 = a4;
      sub_22E78E558((uint64_t)&v104, v37);
      v38 = v104;
      v15 = v20;
      if (!v104)
      {
        v38 = (uint64_t *)sub_22E3B8AAC(v105);
        v104 = v38;
      }
      *((_BYTE *)v38 + *(unsigned __int8 *)v38 + 1) = 2;
      v39 = v104;
      v40 = *(unsigned __int8 *)v104;
      *(_BYTE *)v104 = v40 + 1;
      v39[v40 + 2] = (_DWORD)v23 == 2;
      sub_22E3BB0B8((uint64_t)&v104);
      v41 = *(_DWORD *)(a1 + 16);
      LODWORD(v104) = 0;
      v16 = v19;
      if (*(_WORD *)(a1 + 32) == 154)
      {
        v42 = sub_22F2E7898(a1, 10, (uint64_t)&v99);
        v43 = 0;
      }
      else
      {
        v42 = (uint64_t)sub_22E81801C(a1, 10, &v104, (uint64_t)&v99, 1, 0, 0);
        v43 = (int)v104;
      }
      v17 = v80;
      *a2 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v42, v41, v43);
      goto LABEL_46;
    }
    v77 = (unsigned int *)(a1 + 16);
    if (!v22)
    {
      v23 = a4;
      if (v14)
      {
        *(_QWORD *)(v14 + 40) = v14;
        *(_QWORD *)(v14 + 48) = v14;
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(v14 + 8) & 0xFDFFFFF9 | 6;
      }
      v15 = v20;
      if ((_DWORD)v99 && HIDWORD(v99))
      {
        sub_22E8175C8(a1, &v99, 0);
        sub_22E820B10(&v99);
      }
      v16 = v19;
      if (a2)
      {
        v17 = v80;
        if (*(_WORD *)(a1 + 32) == 62)
        {
          if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
            v24 = 1904;
          else
            v24 = 1834;
          v25 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v25 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v25 + 316) = v24;
          if (*(char *)(v25 + 311) < 0)
          {
            **(_BYTE **)(v25 + 288) = 0;
            *(_QWORD *)(v25 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v25 + 288) = 0;
            *(_BYTE *)(v25 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v104, v25);
          v26 = v104;
          if (!v104)
          {
            v26 = (uint64_t *)sub_22E3B8AAC(v105);
            v104 = v26;
          }
          v76 = v23;
          *((_BYTE *)v26 + *(unsigned __int8 *)v26 + 1) = 2;
          v27 = v104;
          v28 = *(unsigned __int8 *)v104;
          *(_BYTE *)v104 = v28 + 1;
          v75 = (_DWORD)v23 == 2;
          v27[v28 + 2] = v75;
          sub_22E3BB0B8((uint64_t)&v104);
          v29 = *(_DWORD *)(a1 + 16);
          v30 = v29;
          if ((*(_WORD *)(a1 + 34) & 0x10) != 0 || (v29 & 0x80000000) != 0)
          {
            v35 = (unsigned int *)(a1 + 16);
          }
          else
          {
            v31 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v31 + 312) = v29;
            *(_DWORD *)(v31 + 316) = 1950;
            if (*(char *)(v31 + 311) < 0)
            {
              **(_BYTE **)(v31 + 288) = 0;
              *(_QWORD *)(v31 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v31 + 288) = 0;
              *(_BYTE *)(v31 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v84, v31);
            v32 = (unsigned __int8 *)v84[0];
            if (!v84[0])
            {
              v32 = (unsigned __int8 *)sub_22E3B8AAC(v84[1]);
              v84[0] = (uint64_t)v32;
            }
            v32[*v32 + 1] = 2;
            v33 = v84[0];
            v34 = *(unsigned __int8 *)v84[0];
            *(_BYTE *)v84[0] = v34 + 1;
            *(_QWORD *)(v33 + 8 * v34 + 16) = v75;
            BYTE12(v105) = 0;
            *(_QWORD *)((char *)&v105 + 4) = 0;
            v107 = 0;
            __p = 0uLL;
            LOBYTE(v108) = 0;
            v104 = (uint64_t *)(v30 | (v30 << 32));
            LOBYTE(v105) = 1;
            sub_22E6D82D0(v84, &v104);
            if (SHIBYTE(v107) < 0)
              operator delete((void *)__p);
            sub_22E3BB0B8((uint64_t)v84);
            v35 = (unsigned int *)(a1 + 16);
            v29 = *v77;
          }
          *(_DWORD *)(a1 + 40) = v29;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v35);
          *a2 = sub_22ED2B260(*(_QWORD *)(a1 + 88), v30, 0);
          v44 = a3;
          v45 = a1;
          v46 = v76;
          goto LABEL_73;
        }
        v52 = sub_22E83766C(a1, 0);
        v51 = sub_22E83778C(a1, v52, 1);
        if ((v51 & 1) == 0)
        {
          if (*(_WORD *)(a1 + 32) == 62)
          {
            if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
              v53 = 1904;
            else
              v53 = 1834;
            v54 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v54 + 312) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(v54 + 316) = v53;
            if (*(char *)(v54 + 311) < 0)
            {
              **(_BYTE **)(v54 + 288) = 0;
              *(_QWORD *)(v54 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v54 + 288) = 0;
              *(_BYTE *)(v54 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v104, v54);
            v55 = v104;
            if (!v104)
            {
              v55 = (uint64_t *)sub_22E3B8AAC(v105);
              v104 = v55;
            }
            *((_BYTE *)v55 + *(unsigned __int8 *)v55 + 1) = 2;
            v56 = v104;
            v57 = *(unsigned __int8 *)v104;
            *(_BYTE *)v104 = v57 + 1;
            v56[v57 + 2] = (_DWORD)v23 == 2;
            sub_22E3BB0B8((uint64_t)&v104);
            *a2 = sub_22ED2B1FC(*(_QWORD *)(a1 + 88), v51 & 0xFFFFFFFFFFFFFFFELL, 1);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v77);
LABEL_46:
            v44 = a3;
            v45 = a1;
            v46 = v23;
LABEL_73:
            sub_22E846DC0(v45, 0, v44, v46, a5, 0, 0);
            goto LABEL_74;
          }
          goto LABEL_70;
        }
      }
      else
      {
        v50 = sub_22E83766C(a1, 0);
        v51 = sub_22E83778C(a1, v50, 1);
        v17 = v80;
        if ((v51 & 1) == 0)
        {
LABEL_70:
          sub_22EB530EC(*(_QWORD *)(a1 + 88), a3, v51 & 0xFFFFFFFFFFFFFFFELL, v23, a5, a8);
          goto LABEL_74;
        }
      }
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_WORD *)(a8 + 16) = 1;
      *(_BYTE *)(a8 + 18) = 0;
LABEL_74:
      sub_22E8D1BC4(v101, (uint64_t)&v101);
      sub_22E80F94C(&v102);
      sub_22E80F94C(&v100);
      goto LABEL_75;
    }
    if (v14)
    {
      *(_QWORD *)(v14 + 40) = v14;
      *(_QWORD *)(v14 + 48) = v14;
      *(_DWORD *)(v14 + 8) |= 0x2000006u;
    }
    v84[0] = 0;
    v84[2] = 0;
    v85 = 0u;
    v86 = a1 + 960;
    v98 = 0;
    v87 = 0u;
    *(_OWORD *)v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0;
    sub_22E82103C((uint64_t)&v85, (uint64_t)&v99);
    sub_22E80FF64(a1, v84, 3, 9, 0);
    v104 = v84;
    v108 = 0;
    v109 = 0;
    v105 = 0u;
    __p = 0u;
    LODWORD(v107) = 0;
    v110 = *((_QWORD *)&v89 + 1);
    v114 = &v116;
    v112 = 0u;
    v111 = 11;
    v113 = 0;
    v115 = 0x800000000;
    v117 = v117 & 0xFC00 | ((v84[0] & 0x3F000) == 204800);
    v118 = 0u;
    v119 = v86;
    v123 = 0;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    sub_22E8227E4(a1, (uint64_t)&v104, (unint64_t)sub_22E823490, 0);
    if (*(_WORD *)(a1 + 32) == 127)
    {
      LODWORD(v82[0]) = 0;
      v49 = sub_22E8889BC(a1, 1, v82);
      if ((v49 & 1) != 0)
      {
        v103 = 62;
        sub_22E885940(a1, &v103, 1, 1);
        *(_QWORD *)a8 = 0;
        *(_QWORD *)(a8 + 8) = 0;
        *(_WORD *)(a8 + 16) = 1;
LABEL_53:
        *(_BYTE *)(a8 + 18) = 0;
        v15 = v20;
        v16 = v19;
        v17 = v80;
LABEL_54:
        sub_22E827F78((uint64_t)&v104);
        if (DWORD1(v89))
          free(v88[1]);
        sub_22E8D1BC4(v86, (uint64_t)&v86);
        sub_22E80F94C((uint64_t *)&v87);
        sub_22E80F94C((uint64_t *)&v85 + 1);
        goto LABEL_74;
      }
      *((_QWORD *)&v120 + 1) = v49 & 0xFFFFFFFFFFFFFFFELL;
      if (LODWORD(v82[0]))
        HIDWORD(v110) = v82[0];
    }
    sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v104, 0, 0);
    v59 = sub_22F329AD4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v104);
    if (v60)
    {
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_WORD *)(a8 + 16) = 1;
      goto LABEL_53;
    }
    v61 = v59;
    v62 = sub_22E88BE44(a1);
    if (v62)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v77);
    }
    v63 = a4;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0 && *(_WORD *)(a1 + 32) == 23)
    {
      v64 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v64 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v64 + 316) = 1932;
      if (*(char *)(v64 + 311) < 0)
      {
        **(_BYTE **)(v64 + 288) = 0;
        *(_QWORD *)(v64 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v64 + 288) = 0;
        *(_BYTE *)(v64 + 311) = 0;
      }
      v15 = v20;
      sub_22E78E558((uint64_t)v83, v64);
      sub_22E3BB0B8((uint64_t)v83);
      v65 = sub_22E84AF40(a1);
    }
    else
    {
      if (!v62)
      {
        if (*(_WORD *)(a1 + 32) == 21)
        {
          v66 = sub_22E80F720(a1);
          LOWORD(v82[0]) = 22;
          v78 = v66;
          v67 = v66;
          v15 = v20;
          if (sub_22E885940(a1, (unsigned __int16 *)v82, 1, 3))
            v67 = sub_22E80F720(a1);
          v68 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v68 + 312) = *(_DWORD *)(v61 + 24);
          *(_DWORD *)(v68 + 316) = 1505;
          v16 = v19;
          if (*(char *)(v68 + 311) < 0)
          {
            **(_BYTE **)(v68 + 288) = 0;
            *(_QWORD *)(v68 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v68 + 288) = 0;
            *(_BYTE *)(v68 + 311) = 0;
          }
          v17 = v80;
          sub_22E78E558((uint64_t)v82, v68);
          v69 = v78 | (unint64_t)(v67 << 32);
          v70 = v82[0];
          if (!v82[0])
          {
            v70 = sub_22E3B8AAC(v82[1]);
            v82[0] = v70;
          }
          sub_22E4D6448(v70 + 336, v69, 1);
          sub_22E3BB0B8((uint64_t)v82);
        }
        else
        {
          v71 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v71 + 312) = *(_DWORD *)(v61 + 24);
          *(_DWORD *)(v71 + 316) = 1504;
          v15 = v20;
          if (*(char *)(v71 + 311) < 0)
          {
            **(_BYTE **)(v71 + 288) = 0;
            *(_QWORD *)(v71 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v71 + 288) = 0;
            *(_BYTE *)(v71 + 311) = 0;
          }
          v16 = v19;
          sub_22E78E558((uint64_t)v81, v71);
          sub_22E3BB0B8((uint64_t)v81);
          v17 = v80;
        }
        goto LABEL_106;
      }
      if (*(_BYTE *)(a1 + 48))
      {
        v73 = *(_DWORD *)(a1 + 16);
        if (v61 && (*(_DWORD *)(v61 + 28) & 0x7Fu) - 48 < 0x1B)
        {
          *(_QWORD *)(a1 + 64) = 0;
          v74 = *(_QWORD *)(v61 + 48);
        }
        else
        {
          v74 = 0;
          *(_QWORD *)(a1 + 64) = 0;
        }
        *(_QWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 52) = v73;
        v63 = a4;
      }
      v65 = sub_22E83766C(a1, 0);
      v15 = v20;
    }
    v16 = v19;
    v17 = v80;
    if ((v65 & 1) == 0)
    {
      sub_22EA28AD8();
LABEL_107:
      sub_22EA2BC1C(*(_QWORD *)(a1 + 88), v61);
      sub_22F331C88(*(_QWORD *)(a1 + 88), v61, a3, v63, a8);
      goto LABEL_54;
    }
LABEL_106:
    sub_22EA2BABC(*(_QWORD *)(a1 + 88), v61);
    goto LABEL_107;
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v18 + 752))
  {
    *(_BYTE *)(v18 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v18 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  sub_22F313608(v13, *(_QWORD *)(v13 + 12888), 0xAu);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_WORD *)(a8 + 16) = 1;
  *(_BYTE *)(a8 + 18) = 0;
LABEL_75:
  result = sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v15;
  *(_WORD *)(a1 + 82) = v16;
  *(_WORD *)(a1 + 84) = v17;
  if (v14)
    *(_DWORD *)(v14 + 8) &= ~0x2000000u;
  return result;
}

void sub_22E847974(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t *v11;
  int v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  int v20;
  const char *v21;

  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 16);
  v21 = 0;
  v20 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(unsigned __int16 *)(a1 + 32);
  if (v6 == 400)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x3F000) == 0)
      {
        *(_DWORD *)(a2 + 120) = v5;
        *(_DWORD *)(a2 + 132) = v5;
        *(_QWORD *)a2 = v8 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
        *(_QWORD *)(a2 + 8) = v7;
      }
    }
    else
    {
      v18 = (unsigned int *)(a1 + 16);
      sub_22F2F3048(a2);
      v4 = v18;
    }
    v9 = *(_DWORD *)(a1 + 20);
    if (!v9)
      v9 = *v4;
    *(_DWORD *)(a2 + 92) = v9;
    v10 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v10 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v10;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(a1 + 32) <= 0x57u)
  {
    v11 = (unint64_t *)a2;
    if (v6 == 79)
    {
      v12 = 2;
    }
    else if (v6 == 76)
    {
      v12 = 33;
    }
    else
    {
      v12 = 16;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 32) <= 0xAFu)
    {
      switch(*(_WORD *)(a1 + 32))
      {
        case 'X':
          v11 = (unint64_t *)a2;
          v12 = 15;
          goto LABEL_15;
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case 'a':
        case 'b':
        case 'c':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
          goto LABEL_67;
        case ']':
          v11 = (unint64_t *)a2;
          v12 = 7;
          goto LABEL_15;
        case '^':
        case '_':
          v19 = *(_DWORD *)(a1 + 16);
          sub_22E821224(a1, v4);
          v17 = sub_22F2E24E0(a1);
          if ((v17 & 1) != 0)
            sub_22F2F3048(a2);
          else
            sub_22F2F3078((unint64_t *)a2, v19, v17 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v21, &v20);
          goto LABEL_17;
          v13 = (unint64_t *)a2;
          v14 = 2;
          goto LABEL_20;
        case 'd':
          v13 = (unint64_t *)a2;
          v14 = 1;
          goto LABEL_20;
        case 'e':
          v15 = a2;
          v16 = 1;
          goto LABEL_45;
        case 'l':
          v15 = a2;
          v16 = 2;
LABEL_45:
          sub_22F2F2FE8(v15, v16, v5, &v21, &v20);
          break;
        case 'm':
          v11 = (unint64_t *)a2;
          v12 = 1;
          goto LABEL_15;
        default:
          if (v6 != 128)
            __asm { BR              X10 }
          v11 = (unint64_t *)a2;
          v12 = 19;
          goto LABEL_15;
      }
      goto LABEL_16;
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0x14Eu)
    {
      switch(*(_WORD *)(a1 + 32))
      {
        case 0x14F:
          v11 = (unint64_t *)a2;
          v12 = 38;
          goto LABEL_15;
        case 0x150:
          v11 = (unint64_t *)a2;
          v12 = 39;
          goto LABEL_15;
        case 0x151:
          v11 = (unint64_t *)a2;
          v12 = 40;
          goto LABEL_15;
        case 0x152:
          v11 = (unint64_t *)a2;
          v12 = 41;
          goto LABEL_15;
        case 0x153:
          v11 = (unint64_t *)a2;
          v12 = 42;
          goto LABEL_15;
        case 0x154:
          v11 = (unint64_t *)a2;
          v12 = 43;
          goto LABEL_15;
        case 0x155:
          v11 = (unint64_t *)a2;
          v12 = 44;
          goto LABEL_15;
        case 0x156:
          v11 = (unint64_t *)a2;
          v12 = 45;
          goto LABEL_15;
        case 0x157:
          v11 = (unint64_t *)a2;
          v12 = 46;
          goto LABEL_15;
        case 0x158:
          v11 = (unint64_t *)a2;
          v12 = 47;
          goto LABEL_15;
        case 0x159:
          v11 = (unint64_t *)a2;
          v12 = 48;
          goto LABEL_15;
        case 0x15A:
          v11 = (unint64_t *)a2;
          v12 = 49;
          goto LABEL_15;
        case 0x15B:
        case 0x15C:
        case 0x15D:
        case 0x15E:
        case 0x15F:
        case 0x160:
        case 0x161:
        case 0x162:
        case 0x163:
        case 0x164:
        case 0x165:
LABEL_67:
          __break(1u);
          goto LABEL_68;
        case 0x166:
          v11 = (unint64_t *)a2;
          v12 = 14;
          goto LABEL_15;
        case 0x167:
          v11 = (unint64_t *)a2;
          v12 = 10;
          goto LABEL_15;
        default:
          if (v6 == 407)
          {
            *(_DWORD *)(a2 + 92) = sub_22E82C1E4(a1, a2);
            goto LABEL_10;
          }
LABEL_68:
          v13 = (unint64_t *)a2;
          v14 = 3;
LABEL_20:
          sub_22E8AD940(v13, v14, v5, &v21, &v20);
          break;
      }
      goto LABEL_16;
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0xC5u)
    {
      if (v6 == 198)
      {
        v11 = (unint64_t *)a2;
        v12 = 18;
      }
      else
      {
        if (v6 != 200)
        {
          sub_22E8213D4(a1, (unint64_t *)a2);
LABEL_10:
          sub_22E8ADC50(a2, *(_QWORD *)(a1 + 88));
          return;
        }
        v11 = (unint64_t *)a2;
        v12 = 8;
      }
    }
    else
    {
      v11 = (unint64_t *)a2;
      if (v6 == 176)
      {
        v12 = 4;
      }
      else if (v6 == 177)
      {
        v12 = 11;
      }
      else
      {
        v12 = 17;
      }
    }
  }
LABEL_15:
  sub_22E8AD898(v11, v12, v5, (uint64_t *)&v21, &v20);
LABEL_16:
  sub_22E80F0F0(a1, 0);
LABEL_17:
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 40);
  sub_22E8ADC50(a2, *(_QWORD *)(a1 + 88));
}

void sub_22E847E1C()
{
  JUMPOUT(0x22E847A7CLL);
}

void sub_22E847E30()
{
  JUMPOUT(0x22E847A7CLL);
}

uint64_t sub_22E847E44(int a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;

  v19 = (char *)malloc_type_malloc(56 * a10 + 56, 0x4065EBACuLL);
  if (v19 || 56 * a10 == -56 && (v19 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    *(_DWORD *)v19 = a1;
    *((_DWORD *)v19 + 1) = a2;
    *((_QWORD *)v19 + 1) = a3;
    *((_DWORD *)v19 + 4) = a4;
    *((_QWORD *)v19 + 3) = a5;
    *((_DWORD *)v19 + 8) = a6;
    *((_DWORD *)v19 + 9) = a7;
    *((_DWORD *)v19 + 10) = a8;
    *((_DWORD *)v19 + 11) = a10;
    v19[48] = a11;
    if (a10)
    {
      v20 = v19 + 80;
      v21 = a9 + 24;
      do
      {
        *(_OWORD *)(v20 - 3) = *(_OWORD *)(v21 - 24);
        *(v20 - 1) = *(_QWORD *)(v21 - 8);
        v22 = sub_22F0AB560(v20, v21);
        v22[3] = *(_QWORD *)(v21 + 24);
        v20 = v22 + 7;
        v23 = v21 + 32;
        v21 += 56;
      }
      while (v23 != a9 + 56 * a10);
    }
    v24 = *(_DWORD *)(a12 + 8);
    if (v24 >= *(_DWORD *)(a12 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a12 + 8 * v24) = v19;
    ++*(_DWORD *)(a12 + 8);
    return (uint64_t)v19;
  }
  else
  {
    v26 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    return sub_22E847FAC(v26);
  }
}

unint64_t sub_22E847FAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t result;

  v8 = *a1;
  result = sub_22EE89FC0(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 12888), a1[1], a4, a5, a6, a7, a8);
  if (result)
    result = sub_22E9C487C();
  *(_BYTE *)(v8 + 948) = 1;
  return result;
}

uint64_t sub_22E848018(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  __int128 v34;
  unint64_t v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unsigned __int8 *v72;
  __int128 v73;
  void *v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[4];
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;

  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 56) + 104) & 0x20) != 0)
  {
    sub_22E884578(a1, (int *)v6, 1599, (uint64_t)&v72);
    v10 = v72;
    if (!v72)
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC(v73);
      v72 = v10;
    }
    v10[*v10 + 1] = 2;
    v11 = v72;
    v12 = *v72;
    *v72 = v12 + 1;
    *(_QWORD *)&v11[8 * v12 + 16] = 0;
    sub_22E3BB0B8((uint64_t)&v72);
    return 1;
  }
  if (*(_WORD *)(a1 + 32) == 19
    && ((v8 = *(_QWORD *)(v7 + 2816), v8 >= *(unsigned int *)(v7 + 2784))
      ? (v9 = sub_22F162D2C(v7, 1u))
      : (v9 = *(_QWORD *)(v7 + 2776) + 24 * v8),
        *(_WORD *)(v9 + 16) == 20))
  {
    v14 = v6;
    if (*(_WORD *)(a1 + 32) != 1)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(v15 + 2816) + 1;
      if (v16 >= *(unsigned int *)(v15 + 2784))
        v14 = sub_22F162D2C(v15, 2u);
      else
        v14 = *(_QWORD *)(v15 + 2776) + 24 * v16;
    }
    v23 = *(unsigned __int16 *)(v14 + 16);
    if (v23 == 21)
    {
      v24 = v6;
      if (*(_WORD *)(a1 + 32) != 1)
      {
        v25 = *(_QWORD *)(a1 + 8);
        v26 = *(_QWORD *)(v25 + 2816) + 2;
        if (v26 >= *(unsigned int *)(v25 + 2784))
          v24 = sub_22F162D2C(v25, 3u);
        else
          v24 = *(_QWORD *)(v25 + 2776) + 24 * v26;
      }
      if (*(_WORD *)(v24 + 16) == 22)
        goto LABEL_41;
      v27 = v6;
      if (*(_WORD *)(a1 + 32) != 1)
      {
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(v28 + 2816) + 2;
        if (v29 >= *(unsigned int *)(v28 + 2784))
          v27 = sub_22F162D2C(v28, 3u);
        else
          v27 = *(_QWORD *)(v28 + 2776) + 24 * v29;
      }
      if (*(_WORD *)(v27 + 16) == 5)
      {
        v30 = v6;
        if (*(_WORD *)(a1 + 32) != 1)
        {
          v31 = *(_QWORD *)(a1 + 8);
          v32 = *(_QWORD *)(v31 + 2816) + 3;
          if (v32 >= *(unsigned int *)(v31 + 2784))
            v30 = sub_22F162D2C(v31, 4u);
          else
            v30 = *(_QWORD *)(v31 + 2776) + 24 * v32;
        }
        if (*(_WORD *)(v30 + 16) == 5)
        {
LABEL_41:
          v34 = *(_OWORD *)(a1 + 64);
          v81 = *(_OWORD *)(a1 + 48);
          v82 = v34;
          v79 = *(_OWORD *)v6;
          v80 = *(_QWORD *)(v6 + 16);
          v35 = *(unsigned int *)(a1 + 2344);
          v36 = *(_WORD *)(a1 + 80);
          v37 = *(_WORD *)(a1 + 82);
          v38 = *(_WORD *)(a1 + 84);
          sub_22F1629F8(*(_QWORD *)(a1 + 8));
          v39 = *(_QWORD *)(a1 + 8);
          v40 = *(_QWORD *)(v39 + 2816);
          v63 = *(unsigned int *)(a1 + 16);
          if (v40 >= *(unsigned int *)(v39 + 2784))
            v41 = (unsigned int *)sub_22F162D2C(v39, 1u);
          else
            v41 = (unsigned int *)(*(_QWORD *)(v39 + 2776) + 24 * v40);
          v42 = (_OWORD *)(a1 + 48);
          v43 = *v41;
          LODWORD(v72) = 3014679;
          sub_22E885940(a1, (unsigned __int16 *)&v72, 2, 2);
          if (*(_WORD *)(a1 + 32) == 23)
          {
            sub_22E80CED8(a1);
            LOWORD(v72) = 24;
            sub_22E885940(a1, (unsigned __int16 *)&v72, 1, 2);
            v62 = *(unsigned int *)(a1 + 16);
            v44 = *(_QWORD *)(a1 + 8);
            v45 = *(_QWORD *)(v44 + 2832);
            *(_QWORD *)(v44 + 2816) = *(_QWORD *)(v45 - 8);
            *(_QWORD *)(v44 + 2832) = v45 - 8;
            v46 = *(_QWORD *)(v44 + 1008);
            if (v46)
            {
              if (*(_QWORD *)(v46 + 224))
                v47 = 3;
              else
                v47 = 0;
            }
            else if (*(_QWORD *)(v44 + 1040))
            {
              v47 = 1;
            }
            else
            {
              v47 = 2;
            }
            *(_DWORD *)(v44 + 1048) = v47;
            v48 = v82;
            *v42 = v81;
            *(_OWORD *)(a1 + 64) = v48;
            *(_OWORD *)v6 = v79;
            *(_QWORD *)(v6 + 16) = v80;
            sub_22E80FADC(a1 + 2336, v35);
            *(_WORD *)(a1 + 80) = v36;
            *(_WORD *)(a1 + 82) = v37;
            *(_WORD *)(a1 + 84) = v38;
            v49 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v49 + 312) = a3;
            *(_DWORD *)(v49 + 316) = 1588;
            if (*(char *)(v49 + 311) < 0)
            {
              **(_BYTE **)(v49 + 288) = 0;
              *(_QWORD *)(v49 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v49 + 288) = 0;
              *(_BYTE *)(v49 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v78, v49);
            v50 = v78[0];
            if (!v78[0])
            {
              v50 = sub_22E3B8AAC(v78[1]);
              v78[0] = v50;
            }
            sub_22E4D6448(v50 + 336, a3 | (unint64_t)(v43 << 32), 1);
            BYTE12(v73) = 0;
            *(_QWORD *)((char *)&v73 + 4) = 0;
            v75 = 0;
            v76 = 0x100000000000000;
            v72 = (unsigned __int8 *)(v63 | (v63 << 32));
            LOBYTE(v73) = 0;
            v74 = (void *)40;
            LOBYTE(v77) = 0;
            sub_22E6D82D0(v78, &v72);
            v51 = sub_22F141A3C(v62, 0, *(_QWORD **)(*(_QWORD *)(a1 + 88) + 112), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
            v66 = 0;
            v67 = 0;
            v69 = 0;
            v70 = 0x100000000000000;
            v64 = v51 | ((unint64_t)v51 << 32);
            v65 = 0;
            __p = (void *)41;
            v71 = 0;
            sub_22E6D82D0(v78, &v64);
            if (SHIBYTE(v70) < 0)
              operator delete(__p);
            if (SHIBYTE(v76) < 0)
              operator delete(v74);
            v52 = v78;
          }
          else
          {
            v53 = *(_QWORD *)(a1 + 8);
            v54 = *(_QWORD *)(v53 + 2832);
            *(_QWORD *)(v53 + 2816) = *(_QWORD *)(v54 - 8);
            *(_QWORD *)(v53 + 2832) = v54 - 8;
            v55 = *(_QWORD *)(v53 + 1008);
            if (v55)
            {
              if (*(_QWORD *)(v55 + 224))
                v56 = 3;
              else
                v56 = 0;
            }
            else if (*(_QWORD *)(v53 + 1040))
            {
              v56 = 1;
            }
            else
            {
              v56 = 2;
            }
            *(_DWORD *)(v53 + 1048) = v56;
            v57 = v82;
            *v42 = v81;
            *(_OWORD *)(a1 + 64) = v57;
            *(_OWORD *)v6 = v79;
            *(_QWORD *)(v6 + 16) = v80;
            sub_22E80FADC(a1 + 2336, v35);
            *(_WORD *)(a1 + 80) = v36;
            *(_WORD *)(a1 + 82) = v37;
            *(_WORD *)(a1 + 84) = v38;
            v58 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v58 + 312) = a3;
            *(_DWORD *)(v58 + 316) = 1588;
            if (*(char *)(v58 + 311) < 0)
            {
              **(_BYTE **)(v58 + 288) = 0;
              *(_QWORD *)(v58 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v58 + 288) = 0;
              *(_BYTE *)(v58 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v72, v58);
            v59 = (uint64_t)v72;
            if (!v72)
            {
              v59 = sub_22E3B8AAC(v73);
              v72 = (unsigned __int8 *)v59;
            }
            sub_22E4D6448(v59 + 336, a3 | (unint64_t)(v43 << 32), 1);
            v52 = (uint64_t *)&v72;
          }
          sub_22E3BB0B8((uint64_t)v52);
          v60 = sub_22F2E702C(a1);
          if ((v60 & 1) == 0)
          {
            v61 = sub_22E8385C0((_BYTE *)a1, v60);
            if ((v61 & 1) == 0)
            {
              v18 = v61 & 0xFFFFFFFFFFFFFFFELL;
              v19 = a3;
              v20 = *(_QWORD *)(a1 + 88);
              v21 = a2;
              v22 = 0;
              return sub_22EBC2B50(v20, v19, v21, v22, v18);
            }
          }
          return 1;
        }
      }
    }
    else if (v23 == 23 || v23 == 46)
    {
      goto LABEL_41;
    }
    v72 = (unsigned __int8 *)(a1 + 944);
    LOBYTE(v73) = *(_BYTE *)(a1 + 944);
    v17 = 1;
    *(_BYTE *)(a1 + 944) = 1;
    *((_QWORD *)&v73 + 1) = a1;
    LODWORD(v74) = 1310739;
    WORD2(v74) = 62;
    v76 = 0;
    v77 = 0;
    v75 = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v72);
    sub_22E811E8C((uint64_t)&v72);
    v33 = HIDWORD(v77);
    *v72 = v73;
    if (!v33)
      return 1;
  }
  else
  {
    v17 = 0;
  }
  result = sub_22E838554(a1, 0, 0, 0, 0, 0);
  if ((result & 1) != 0)
    return result;
  v18 = result & 0xFFFFFFFFFFFFFFFELL;
  v19 = a3;
  v20 = *(_QWORD *)(a1 + 88);
  v21 = a2;
  v22 = v17;
  return sub_22EBC2B50(v20, v19, v21, v22, v18);
}

uint64_t sub_22E848694(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  int v23;
  __int128 v24;
  unint64_t v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  __int128 v41;
  unint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  unsigned __int16 *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  _BYTE v108[32];
  _OWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[40];
  uint64_t v118;
  uint64_t v119;
  int v120;
  char *v121;
  uint64_t v122;
  _BYTE v123[16];
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD v134[4];

  v134[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(_DWORD *)(v2 + 24);
  v132 = v134;
  v133 = 0x200000000;
  if (*(_WORD *)(v2 + 16) == 21)
  {
    sub_22E885C30(a1, 264);
    *(_QWORD *)v117 = a1 + 944;
    v117[8] = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    *(_QWORD *)&v117[16] = a1;
    *(_DWORD *)&v117[24] = 1441813;
    strcpy(&v117[28], ">");
    v118 = 0;
    v119 = 0;
    *(_QWORD *)&v117[32] = sub_22E80F720;
    sub_22E811DE8((uint64_t)v117);
    if (*(_WORD *)(a1 + 32) != 22)
    {
      v109[0] = 0uLL;
      v109[1] = (unint64_t)(a1 + 960);
      LODWORD(v121) = 0;
      v124 = &v126;
      v125 = 0x200000000;
      sub_22E826C40(a1, 26, (uint64_t)v109, (uint64_t)&v124, &v121, 0);
      if ((_DWORD)v121)
      {
        v4 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v4 + 312) = (_DWORD)v121;
        *(_DWORD *)(v4 + 316) = 1735;
        if (*(char *)(v4 + 311) < 0)
        {
          **(_BYTE **)(v4 + 288) = 0;
          *(_QWORD *)(v4 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 288) = 0;
          *(_BYTE *)(v4 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v116, v4);
        sub_22E3BB0B8((uint64_t)v116);
      }
      v5 = v124;
      if ((_DWORD)v125)
      {
        v105 = v3;
        v6 = v133;
        v7 = 32 * v125;
        v8 = v124 + 2;
        do
        {
          v9 = *v8;
          if (v6 >= HIDWORD(v133))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v6 = v133;
          }
          v132[v6] = v9;
          v6 = v133 + 1;
          LODWORD(v133) = v133 + 1;
          v8 += 4;
          v7 -= 32;
        }
        while (v7);
        v5 = v124;
        if ((_DWORD)v125)
        {
          v10 = v124 - 1;
          v11 = 4 * v125;
          do
          {
            sub_22E80FBD8((void ***)&v10[v11]);
            v11 -= 4;
          }
          while (v11 * 8);
          v5 = v124;
        }
        v3 = v105;
      }
      if (v5 != &v126)
        free(v5);
      sub_22E8D1BC4(*(uint64_t *)&v109[1], (uint64_t)&v109[1]);
      sub_22E80F94C((uint64_t *)&v109[1] + 1);
      sub_22E80F94C((uint64_t *)v109 + 1);
    }
    sub_22E811E8C((uint64_t)v117);
    **(_BYTE **)v117 = v117[8];
    if (a1)
      sub_22E885CF4(a1);
  }
  v124 = (uint64_t *)(a1 + 944);
  LOBYTE(v125) = *(_BYTE *)(a1 + 944);
  v12 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v126 = a1;
  v127 = 1572887;
  v128 = 62;
  v130 = 0;
  v131 = 0;
  v129 = sub_22E80CED8;
  if ((sub_22E88C650((uint64_t)&v124, 15, "", 0) & 1) != 0)
    goto LABEL_23;
  v121 = v123;
  v122 = 0x200000000;
  v14 = *(_QWORD *)(a1 + 88);
  LODWORD(v113) = 0;
  *(_QWORD *)v117 = 0;
  v120 = 3;
  *(_QWORD *)&v109[0] = *(unsigned int *)(v14 + 1704);
  sub_22EB4DDB8(v14 + 3688, (int *)&v113, (int *)v109, (__int16 *)(v14 + 1693), (uint64_t *)v117, &v120);
  v15 = *(unsigned int *)(v14 + 3696);
  v16 = v15 - 2;
  v104 = v14;
  v17 = *(_QWORD *)(v14 + 3688);
  v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
  if (v18 == 5)
  {
    *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
    v19 = 1;
  }
  else if (v18 == 2)
  {
    *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
    v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
  }
  else
  {
    v19 = 0;
    *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
  }
  v20 = v17 + 576 * v15;
  *(_BYTE *)(v20 - 3) = v19;
  *(_WORD *)(v104 + 1693) = 0;
  if (*(_DWORD *)(v104 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v104 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
    sub_22EAEAE08(v104 + 1840, (uint64_t *)(v20 - 496));
  }
  sub_22E885C30(a1, 8);
  v106 = v3;
  v103 = sub_22F33298C(*(_QWORD **)(a1 + 88), v3, v132, v133, *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888));
  v21 = *(unsigned __int16 *)(a1 + 32);
  if (v21 == 24)
  {
    sub_22E884578(a1, (int *)v2, 1482, (uint64_t)v115);
    sub_22E3BB0B8((uint64_t)v115);
    goto LABEL_179;
  }
  v22 = (_OWORD *)(a1 + 48);
  v107 = a1 + 2336;
  while (1)
  {
    v23 = 1;
    if (v21 <= 151)
    {
      if (v21 != 23)
      {
        if (v21 == 24)
          goto LABEL_172;
        goto LABEL_110;
      }
      *(_QWORD *)v117 = a1 + 944;
      v117[8] = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      *(_QWORD *)&v117[16] = a1;
      *(_DWORD *)&v117[24] = 1572887;
      strcpy(&v117[28], ">");
      v118 = 0;
      v119 = 0;
      *(_QWORD *)&v117[32] = sub_22E80CED8;
      sub_22E811DE8((uint64_t)v117);
      v35 = *(_QWORD *)(a1 + 88);
      v36 = sub_22E83766C(a1, 0);
      v37 = sub_22E83778C(a1, v36, 1);
      v38 = v37;
      if ((v37 & 1) == 0)
        v38 = (unint64_t)sub_22EBBCB14(v35, (_DWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v109);
      if (v38 <= 1)
      {
        sub_22F2F18E0((uint64_t)v117);
      }
      else
      {
        if (sub_22E811E8C((uint64_t)v117))
          sub_22F2F18E0((uint64_t)v117);
        v39 = *(unsigned __int16 *)(a1 + 32);
        if (v39 == 163)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
          v40 = *(_DWORD *)(a1 + 40);
          v39 = *(unsigned __int16 *)(a1 + 32);
        }
        else
        {
          v40 = 0;
        }
        if (v39 == 36)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
        }
        else
        {
          if (v39 == 62)
          {
            v59 = sub_22EBCF54C(*(_QWORD *)(a1 + 88), v38 & 0xFFFFFFFFFFFFFFFELL, 0, v40, 0);
            v60 = v122;
            if (v122 >= (unint64_t)HIDWORD(v122))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v122;
            }
            *(_QWORD *)&v121[8 * v60] = v59;
            LODWORD(v122) = v122 + 1;
            goto LABEL_93;
          }
          sub_22E884578(a1, (int *)v2, 1734, (uint64_t)&v113);
          v61 = *(unsigned int *)(a1 + 16);
          *(_QWORD *)((char *)v109 + 12) = 0;
          BYTE4(v109[1]) = 0;
          v110 = 0;
          v111 = 0x200000000000000;
          *((_QWORD *)&v109[1] + 1) = 15917;
          *(_QWORD *)&v109[0] = v61 | (v61 << 32);
          BYTE8(v109[0]) = 0;
          v112 = 0;
          sub_22E6D82D0((uint64_t *)&v113, v109);
          if (SHIBYTE(v111) < 0)
            operator delete(*((void **)&v109[1] + 1));
          sub_22E3BB0B8((uint64_t)&v113);
        }
        if (!sub_22E88001C(a1))
        {
          if (sub_22E8801BC(a1))
          {
            memset(v109, 0, sizeof(v109));
            if (*(_WORD *)(a1 + 32) == 399)
            {
              v85 = *(unsigned int *)(a1 + 16);
              LODWORD(v86) = *(_DWORD *)(a1 + 20);
              if ((_DWORD)v86)
                v86 = v86;
              else
                v86 = v85;
              sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v85 | (v86 << 32), (uint64_t)v109);
              v87 = *(_DWORD *)(a1 + 16);
              if (*(_DWORD *)(a1 + 20))
                v87 = *(_DWORD *)(a1 + 20);
              *(_DWORD *)(a1 + 40) = v87;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
            }
            v88 = sub_22F332618(*(_QWORD **)(a1 + 88), v38 & 0xFFFFFFFFFFFFFFFELL, v40, (uint64_t)v109, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 952));
            v89 = *(_DWORD *)(a1 + 16);
            if (*(_DWORD *)(a1 + 20))
              v89 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 40) = v89;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
            v90 = v122;
            if (v122 >= (unint64_t)HIDWORD(v122))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v90 = v122;
            }
            *(_QWORD *)&v121[8 * v90] = v88;
            LODWORD(v122) = v122 + 1;
            if (HIDWORD(v109[1]))
              free(*(void **)&v109[1]);
            goto LABEL_93;
          }
          sub_22E884578(a1, (int *)v2, 1732, (uint64_t)v108);
          sub_22E3BB0B8((uint64_t)v108);
        }
      }
      LODWORD(v109[0]) = 1572926;
      sub_22E885940(a1, (unsigned __int16 *)v109, 2, 2);
LABEL_93:
      **(_BYTE **)v117 = v117[8];
      goto LABEL_129;
    }
    if (v21 == 152)
    {
      v41 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)v117 = *v22;
      *(_OWORD *)&v117[16] = v41;
      v113 = *(_OWORD *)v2;
      v114 = *(_QWORD *)(v2 + 16);
      v42 = *(unsigned int *)(a1 + 2344);
      v43 = *(_WORD *)(a1 + 80);
      v44 = *(_WORD *)(a1 + 82);
      v45 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
      v46 = *(_DWORD *)(a1 + 40);
      if (sub_22E849D9C(a1) && sub_22E88BDA8(a1, 0))
      {
        sub_22E80FADC(v107, v42);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
        LODWORD(v109[0]) = 1572926;
        v47 = (unsigned __int16 *)v109;
        goto LABEL_128;
      }
      memset(v109, 0, sizeof(v109));
      v48 = *(unsigned __int16 *)(a1 + 32);
      if (v48 == 399)
      {
        v49 = *(unsigned int *)(a1 + 16);
        LODWORD(v50) = *(_DWORD *)(a1 + 20);
        if ((_DWORD)v50)
          v50 = v50;
        else
          v50 = v49;
        sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v49 | (v50 << 32), (uint64_t)v109);
        v51 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v51 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v51;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
        v48 = *(unsigned __int16 *)(a1 + 32);
      }
      if (v48 != 401 && v48 != 5
        || ((v52 = *(_QWORD *)(a1 + 8), v53 = *(_QWORD *)(v52 + 2816), v53 >= *(unsigned int *)(v52 + 2784))
          ? (v54 = sub_22F162D2C(v52, 1u))
          : (v54 = *(_QWORD *)(v52 + 2776) + 24 * v53),
            (*(unsigned __int16 *)(v54 + 16) | 2) == 0x17))
      {
        v62 = *(_QWORD *)(a1 + 8);
        v63 = *(_QWORD *)(v62 + 2832);
        *(_QWORD *)(v62 + 2816) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(v62 + 2832) = v63 - 8;
        v64 = *(_QWORD *)(v62 + 1008);
        if (v64)
        {
          if (*(_QWORD *)(v64 + 224))
            v96 = 3;
          else
            v96 = 0;
        }
        else
        {
          if (!*(_QWORD *)(v62 + 1040))
          {
            *(_DWORD *)(v62 + 1048) = 2;
LABEL_99:
            v65 = *(_OWORD *)&v117[16];
            *v22 = *(_OWORD *)v117;
            *(_OWORD *)(a1 + 64) = v65;
            *(_OWORD *)v2 = v113;
            *(_QWORD *)(v2 + 16) = v114;
            sub_22E80FADC(v107, v42);
            *(_WORD *)(a1 + 80) = v43;
            *(_WORD *)(a1 + 82) = v44;
            v66 = 1;
            *(_WORD *)(a1 + 84) = v45;
LABEL_106:
            if (HIDWORD(v109[1]))
              free(*(void **)&v109[1]);
            if (!v66)
              goto LABEL_129;
            v23 = 1;
            goto LABEL_110;
          }
          v96 = 1;
        }
        *(_DWORD *)(v62 + 1048) = v96;
        goto LABEL_99;
      }
      sub_22E80FADC(v107, v42);
      v67 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v67 + 2832) -= 8;
      v68 = *(_DWORD *)(a1 + 16);
      v69 = *(_QWORD *)(a1 + 24);
      if (*(_WORD *)(a1 + 32) == 5)
      {
        *(_DWORD *)(a1 + 40) = v68;
        sub_22F18FB4C(v67, (unsigned int *)v2);
        v91 = 0;
      }
      else
      {
        v70 = *(_DWORD *)(a1 + 20);
        if (!v70)
          v70 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = v70;
        sub_22F18FB4C(v67, (unsigned int *)v2);
        if (!*(_DWORD *)(v69 + 32) || *(_BYTE *)(v69 + 48))
        {
LABEL_105:
          v66 = 0;
          goto LABEL_106;
        }
        v91 = v69;
        v69 = 0;
      }
      v92 = sub_22F3324A8(*(_QWORD **)(a1 + 88), v46, (uint64_t)v109, v68, v69, v91);
      if (v92)
      {
        v93 = v92;
        v94 = v122;
        if (v122 >= (unint64_t)HIDWORD(v122))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v94 = v122;
        }
        v66 = 0;
        *(_QWORD *)&v121[8 * v94] = v93;
        LODWORD(v122) = v122 + 1;
        goto LABEL_106;
      }
      goto LABEL_105;
    }
    if (v21 != 168)
      goto LABEL_110;
    v24 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)v117 = *v22;
    *(_OWORD *)&v117[16] = v24;
    v109[0] = *(_OWORD *)v2;
    *(_QWORD *)&v109[1] = *(_QWORD *)(v2 + 16);
    v25 = *(unsigned int *)(a1 + 2344);
    v26 = *(_WORD *)(a1 + 80);
    v27 = *(_WORD *)(a1 + 82);
    v28 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
    v29 = *(unsigned __int16 *)(a1 + 32);
    if (v29 == 23)
      goto LABEL_48;
    if (v29 != 21)
      goto LABEL_71;
    sub_22E80F720(a1);
    if (sub_22E883ED8(a1, 0, 0) == 1)
      goto LABEL_71;
    v30 = 1;
    do
    {
      v31 = *(unsigned __int16 *)(a1 + 32);
      if (v31 == 22)
        v32 = -1;
      else
        v32 = 0;
      if (v31 == 21)
        v33 = 1;
      else
        v33 = v32;
      v30 += v33;
      sub_22E80F0F0(a1, 0);
    }
    while (v30);
    if (*(_WORD *)(a1 + 32) == 23)
LABEL_48:
      v34 = 0;
    else
LABEL_71:
      v34 = 1;
    v55 = *(_QWORD *)(a1 + 8);
    v56 = *(_QWORD *)(v55 + 2832);
    *(_QWORD *)(v55 + 2816) = *(_QWORD *)(v56 - 8);
    *(_QWORD *)(v55 + 2832) = v56 - 8;
    v57 = *(_QWORD *)(v55 + 1008);
    if (v57)
    {
      if (*(_QWORD *)(v57 + 224))
        v95 = 3;
      else
        v95 = 0;
      goto LABEL_163;
    }
    if (*(_QWORD *)(v55 + 1040))
    {
      v95 = 1;
LABEL_163:
      *(_DWORD *)(v55 + 1048) = v95;
      goto LABEL_75;
    }
    *(_DWORD *)(v55 + 1048) = 2;
LABEL_75:
    v58 = *(_OWORD *)&v117[16];
    *v22 = *(_OWORD *)v117;
    *(_OWORD *)(a1 + 64) = v58;
    *(_OWORD *)v2 = v109[0];
    *(_QWORD *)(v2 + 16) = *(_QWORD *)&v109[1];
    sub_22E80FADC(v107, v25);
    *(_WORD *)(a1 + 80) = v26;
    *(_WORD *)(a1 + 82) = v27;
    *(_WORD *)(a1 + 84) = v28;
    if (v34)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
      v80 = *(_QWORD *)(a1 + 88);
      v81 = sub_22F2E5148(a1);
      if ((v81 & 1) == 0)
        v81 = (unint64_t)sub_22EBBCB14(v80, (_DWORD *)(v81 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v117);
      if (v81 < 2)
        goto LABEL_127;
      if ((v81 & 1) != 0)
        goto LABEL_127;
      v82 = sub_22F3327E4(*(_QWORD *)(a1 + 88), v81 & 0xFFFFFFFFFFFFFFFELL);
      if (!v82)
        goto LABEL_127;
      v83 = v82;
      v84 = v122;
      if (v122 >= (unint64_t)HIDWORD(v122))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v84 = v122;
      }
      *(_QWORD *)&v121[8 * v84] = v83;
      LODWORD(v122) = v122 + 1;
      goto LABEL_129;
    }
    v23 = 0;
LABEL_110:
    v71 = *(unsigned int *)(a1 + 16);
    v72 = *(_QWORD *)(a1 + 88);
    v73 = sub_22E83766C(a1, 0);
    v74 = sub_22E83778C(a1, v73, 1);
    v75 = v74;
    if ((v74 & 1) == 0)
      v75 = (unint64_t)sub_22EBBCB14(v72, (_DWORD *)(v74 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v117);
    if (v75 <= 1)
      goto LABEL_127;
    if (((v23 | v75) & 1) == 0)
    {
      v76 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v76 + 312) = v71;
      *(_DWORD *)(v76 + 316) = 1733;
      if (*(char *)(v76 + 311) < 0)
      {
        **(_BYTE **)(v76 + 288) = 0;
        *(_QWORD *)(v76 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v76 + 288) = 0;
        *(_BYTE *)(v76 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v109, v76);
      v117[20] = 0;
      *(_QWORD *)&v117[12] = 0;
      v117[33] = 0;
      *(_WORD *)&v117[34] = 0;
      *(_DWORD *)&v117[36] = 0;
      v118 = 0x800000000000000;
      *(_QWORD *)v117 = v71 | (v71 << 32);
      v117[8] = 0;
      strcpy(&v117[24], "requires");
      LOBYTE(v119) = 0;
      sub_22E6D82D0((uint64_t *)v109, v117);
      if (SHIBYTE(v118) < 0)
        operator delete(*(void **)&v117[24]);
      sub_22E3BB0B8((uint64_t)v109);
    }
    v77 = sub_22EBCF54C(*(_QWORD *)(a1 + 88), v75 & 0xFFFFFFFFFFFFFFFELL, 1, 0, 0);
    v78 = v122;
    if (v122 >= (unint64_t)HIDWORD(v122))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v78 = v122;
    }
    *(_QWORD *)&v121[8 * v78] = v77;
    LODWORD(v122) = v122 + 1;
    if (*(_WORD *)(a1 + 32) == 163)
    {
      sub_22E884578(a1, (int *)v2, 1736, (uint64_t)&v113);
      v117[20] = 0;
      *(_QWORD *)&v117[12] = 0;
      *(_QWORD *)&v117[32] = 0;
      v118 = 0x100000000000000;
      *(_QWORD *)&v117[24] = 123;
      *(_QWORD *)v117 = v71 | (v71 << 32);
      v117[8] = 0;
      LOBYTE(v119) = 0;
      sub_22E6D82D0((uint64_t *)&v113, v117);
      v79 = *(unsigned int *)(a1 + 16);
      *(_QWORD *)((char *)v109 + 12) = 0;
      BYTE4(v109[1]) = 0;
      v110 = 0;
      v111 = 0x100000000000000;
      *((_QWORD *)&v109[1] + 1) = 125;
      *(_QWORD *)&v109[0] = v79 | (v79 << 32);
      BYTE8(v109[0]) = 0;
      v112 = 0;
      sub_22E6D82D0((uint64_t *)&v113, v109);
      if (SHIBYTE(v111) < 0)
        operator delete(*((void **)&v109[1] + 1));
      if (SHIBYTE(v118) < 0)
        operator delete(*(void **)&v117[24]);
      sub_22E3BB0B8((uint64_t)&v113);
LABEL_127:
      *(_DWORD *)v117 = 1572926;
      v47 = (unsigned __int16 *)v117;
LABEL_128:
      sub_22E885940(a1, v47, 2, 2);
    }
LABEL_129:
    if (sub_22E884BB4(a1, 1535))
      break;
    v21 = *(unsigned __int16 *)(a1 + 32);
  }
  *(_DWORD *)v117 = 1572926;
  sub_22E885940(a1, (unsigned __int16 *)v117, 2, 2);
  if (*(_WORD *)(a1 + 32) == 62)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
  }
LABEL_172:
  if (!(_DWORD)v122)
  {
    sub_22E811E8C((uint64_t)&v124);
    v97 = *(_QWORD *)(a1 + 88);
    v98 = *(_QWORD *)(sub_22EFCAD5C(*(_QWORD *)(v97 + 216)) + 16);
    v99 = v98 & 0xFFFFFFFFFFFFFFF8;
    if ((v98 & 4) != 0)
      v99 = *(_QWORD *)(v99 + 8);
    *(_QWORD *)(v97 + 216) = v99;
    v12 = 1;
    goto LABEL_176;
  }
LABEL_179:
  sub_22E811E8C((uint64_t)&v124);
  v100 = *(_QWORD *)(a1 + 88);
  v101 = *(_QWORD *)(sub_22EFCAD5C(*(_QWORD *)(v100 + 216)) + 16);
  v102 = v101 & 0xFFFFFFFFFFFFFFF8;
  if ((v101 & 4) != 0)
    v102 = *(_QWORD *)(v102 + 8);
  *(_QWORD *)(v100 + 216) = v102;
  v12 = sub_22F332AA8(*(_QWORD *)(a1 + 88), v106, v103, v132, v133, v121, v122, SHIDWORD(v131));
LABEL_176:
  sub_22E885CF4(a1);
  sub_22EB48E64(v104);
  if (v121 != v123)
    free(v121);
LABEL_23:
  *(_BYTE *)v124 = v125;
  if (v132 != v134)
    free(v132);
  return v12;
}

void sub_22E849674(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_22E8496D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  unsigned int *v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  unint64_t *v47;
  char v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[4];
  _BYTE *v63;
  char v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE v73[120];

  *(_DWORD *)(v37 + 40) = *(_DWORD *)(v37 + 16);
  sub_22F18FB4C(*(_QWORD *)(v37 + 8), v38);
  v40 = *(unsigned int *)(v37 + 40);
  v63 = (_BYTE *)(v37 + 944);
  v64 = *(_BYTE *)(v37 + 944);
  *(_BYTE *)(v37 + 944) = 1;
  v65 = v37;
  v66 = 1441813;
  v67 = 62;
  v69 = 0;
  v70 = 0;
  v68 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v63, 15, "", 0) & 1) == 0)
  {
    v71 = v73;
    v72 = 0x200000000;
    v41 = sub_22E80FC30(v37, 0, 5, 3, 0, 0, 0);
    if (v42)
    {
LABEL_19:
      sub_22F2F18E0((uint64_t)&v63);
    }
    else
    {
      v43 = v41;
      while (1)
      {
        if (*(_WORD *)(v37 + 32) == 26)
        {
          v46 = *(_QWORD **)(v37 + 88);
          *(_DWORD *)(v37 + 40) = *(_DWORD *)(v37 + 16);
          sub_22F18FB4C(*(_QWORD *)(v37 + 8), v38);
          v47 = sub_22F34ACC0(v46, v43, *(_DWORD *)(v37 + 40));
          if (v48)
            goto LABEL_19;
          v43 = (unint64_t)v47;
        }
        v44 = v72;
        if (v72 >= (unint64_t)HIDWORD(v72))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v44 = v72;
        }
        v71[v44] = v43;
        LODWORD(v72) = v72 + 1;
        if (*(_WORD *)(v37 + 32) != 65)
          break;
        *(_DWORD *)(v37 + 40) = *(_DWORD *)(v37 + 16);
        sub_22F18FB4C(*(_QWORD *)(v37 + 8), v38);
        v43 = sub_22E80FC30(v37, 0, 5, 3, 0, 0, 0);
        if (v45)
          goto LABEL_19;
      }
      if ((sub_22E811E8C((uint64_t)&v63) & 1) == 0)
      {
        if ((_DWORD)v72 == 1)
          __asm { BR              X9 }
        v49 = *(_QWORD *)(v37 + 96);
        *(_DWORD *)(v49 + 312) = HIDWORD(v70);
        *(_DWORD *)(v49 + 316) = 1751;
        if (*(char *)(v49 + 311) < 0)
        {
          **(_BYTE **)(v49 + 288) = 0;
          *(_QWORD *)(v49 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v49 + 288) = 0;
          *(_BYTE *)(v49 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v62, v49);
        v50 = (unsigned __int8 *)v62[0];
        if (!v62[0])
        {
          v50 = (unsigned __int8 *)sub_22E3B8AAC(v62[1]);
          v62[0] = v50;
        }
        v50[*v50 + 1] = 3;
        v51 = v62[0];
        v52 = *(unsigned __int8 *)v62[0];
        *(_BYTE *)v62[0] = v52 + 1;
        *(_QWORD *)(v51 + 8 * v52 + 16) = 1;
        *(_BYTE *)(v51 + (v52 + 1) + 1) = 2;
        v53 = v62[0];
        v54 = *(unsigned __int8 *)v62[0];
        *(_BYTE *)v62[0] = v54 + 1;
        *(_QWORD *)(v53 + 8 * v54 + 16) = 0;
        *(_BYTE *)(v53 + (v54 + 1) + 1) = 2;
        v55 = v62[0];
        v56 = *(unsigned __int8 *)v62[0];
        v57 = v56 + 1;
        *(_BYTE *)v62[0] = v56 + 1;
        *(_QWORD *)(v55 + 8 * v56 + 16) = 0;
        v58 = (int)v72;
        *(_BYTE *)(v55 + v57 + 1) = 2;
        v59 = v62[0];
        v60 = *(unsigned __int8 *)v62[0];
        *(_BYTE *)v62[0] = v60 + 1;
        *(_QWORD *)(v59 + 8 * v60 + 16) = v58;
        sub_22E4D6448(v59 + 336, v40 | (v40 << 32), 1);
        sub_22E3BB0B8((uint64_t)v62);
      }
    }
    if (v71 != (_QWORD *)v73)
      free(v71);
  }
  *v63 = v64;
  return 1;
}

BOOL sub_22E849D9C(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if (v2 != 5 && v2 != 71)
  {
    if (v2 == 401)
    {
      v8 = a1;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(v5 + 2816);
      if (v6 >= *(unsigned int *)(v5 + 2784))
        v7 = sub_22F162D2C(v5, 1u);
      else
        v7 = *(_QWORD *)(v5 + 2776) + 24 * v6;
      if (*(_WORD *)(v7 + 16) == 71)
        return 1;
      v2 = *(unsigned __int16 *)(v8 + 32);
    }
    return v2 == 162 || v2 == 311;
  }
  return result;
}

_QWORD *sub_22E849E38(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E849E68;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E849E68(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  if (**(_QWORD **)a1)
    result = sub_22E9C487C();
  else
    result = 0;
  *(_BYTE *)(v1 + 948) = 1;
  return result;
}

_QWORD *sub_22E849ED0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E849F00;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E849F00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t result;

  v8 = *a1;
  result = sub_22EE89FC0(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 12888), a1[1], a4, a5, a6, a7, a8);
  if (result)
    result = sub_22E9C487C();
  *(_BYTE *)(v8 + 948) = 1;
  return result;
}

uint64_t sub_22E849F6C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v16[4];
  _BYTE v17[32];

  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v6 + 16) != 5)
  {
    v14 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v14 + 316) = 1525;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v17, v14);
    v13 = v17;
    return sub_22E3BB0B8((uint64_t)v13);
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
  v8 = *(unsigned int *)(a1 + 40);
  if (a3)
    *a3 = *(_DWORD *)v6;
  if (sub_22F1ACD3C(v7, 0, 8u, 0) == 480)
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = v8;
    *(_DWORD *)(v9 + 316) = 1773;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v16, v9);
    v10 = (unsigned __int8 *)v16[0];
    if (!v16[0])
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC(v16[1]);
      v16[0] = v10;
    }
    v10[*v10 + 1] = 5;
    v11 = v16[0];
    v12 = *(unsigned __int8 *)v16[0];
    *(_BYTE *)v16[0] = v12 + 1;
    *(_QWORD *)(v11 + 8 * v12 + 16) = v7;
    v13 = v16;
    return sub_22E3BB0B8((uint64_t)v13);
  }
  return sub_22E8118E4(a2, v7, v8 | (v8 << 32), 0, 0, 0, 0, 8u, 0);
}

BOOL sub_22E84A0FC(uint64_t a1)
{
  int v2;
  _BOOL8 v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;
  unint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];
  void *v24;
  uint64_t v25;
  _QWORD v26[25];

  v26[24] = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 *)(a1 + 32);
  switch(v2)
  {
    case 5:
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(v5 + 2816);
      if (v6 < *(unsigned int *)(v5 + 2784))
        v7 = *(_QWORD *)(v5 + 2776) + 24 * v6;
      else
        v7 = sub_22F162D2C(v5, 1u);
      return *(unsigned __int16 *)(v7 + 16) == 61;
    case 25:
      return 1;
    case 19:
      v8 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + 1) & 2) == 0)
        return 1;
      v9 = *(_QWORD *)(v8 + 2816);
      v10 = v9 < *(unsigned int *)(v8 + 2784) ? *(_QWORD *)(v8 + 2776) + 24 * v9 : sub_22F162D2C(v8, 1u);
      v11 = *(unsigned __int16 *)(v10 + 16);
      if (v11 != 5)
      {
        if (v11 > 0x3F)
          goto LABEL_22;
        if (((1 << v11) & 0x8000000004100000) != 0)
          return 0;
        if (((1 << v11) & 0x48000000) == 0)
        {
LABEL_22:
          if (v11 != 148)
            return 1;
        }
      }
      v12 = *(_OWORD *)(a1 + 64);
      v21 = *(_OWORD *)(a1 + 48);
      v22 = v12;
      v19 = *(_OWORD *)(a1 + 16);
      v20 = *(_QWORD *)(a1 + 32);
      v13 = *(unsigned int *)(a1 + 2344);
      v14 = *(_WORD *)(a1 + 80);
      v15 = *(_WORD *)(a1 + 82);
      v16 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      v23[0] = 0;
      v23[1] = 0;
      v24 = v26;
      v25 = 0x400000000;
      v18 = 0;
      v3 = (sub_22E84396C(a1, v23, &v18) & 1) != 0 || (v18 & 0xFFFFFFFE) == 2 || *(unsigned __int16 *)(a1 + 32) == 63;
      if (v24 != v26)
        free(v24);
      sub_22F162AFC(*(_QWORD *)(a1 + 8));
      v17 = v22;
      *(_OWORD *)(a1 + 48) = v21;
      *(_OWORD *)(a1 + 64) = v17;
      *(_OWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 32) = v20;
      sub_22E80FADC(a1 + 2336, v13);
      *(_WORD *)(a1 + 80) = v14;
      *(_WORD *)(a1 + 82) = v15;
      *(_WORD *)(a1 + 84) = v16;
      break;
    default:
      return 0;
  }
  return v3;
}

uint64_t sub_22E84A334(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int *v4;
  char *v5;
  void *v6;
  unsigned int v7;
  char v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  _DWORD *v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE *v59;
  unsigned int *v60;
  const void *v61;
  size_t v62;
  unsigned int v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  void *v69;
  __int128 *p_dst;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unsigned int v84;
  _BYTE *v85;
  unsigned int v86;
  void *v87;
  int v88;
  int v89;
  int v90;
  void *v92;
  char v94;
  char *v95;
  char *v96;
  _BYTE v97[32];
  _BYTE v98[32];
  _BYTE v99[32];
  uint64_t v100[4];
  __int16 v101;
  __int128 __dst;
  unint64_t v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  void *v122;
  __int128 v123;
  __int128 __p;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  __int128 v128;
  _QWORD v129[34];

  v129[32] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    v58 = *(_QWORD *)(a1 + 24);
    v127 = v129;
    v128 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)&v122, (uint64_t)&v127);
    v59 = (_BYTE *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) >= (unint64_t)__p)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v122);
    }
    else
    {
      ++*((_QWORD *)&__p + 1);
      *v59 = 46;
    }
    v60 = *(unsigned int **)(v58 + 16);
    v63 = *v60;
    v61 = v60 + 4;
    v62 = v63;
    v64 = *((_QWORD *)&__p + 1);
    if ((unint64_t)v63 <= (_QWORD)__p - *((_QWORD *)&__p + 1))
    {
      if (v62)
      {
        memcpy(*((void **)&__p + 1), v61, v62);
        v64 = *((_QWORD *)&__p + 1) + v62;
        *((_QWORD *)&__p + 1) += v62;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v122, (const char *)v61);
      v64 = *((_QWORD *)&__p + 1);
    }
    if ((unint64_t)__p - v64 > 2)
    {
      *(_BYTE *)(v64 + 2) = 32;
      *(_WORD *)v64 = 15648;
      *((_QWORD *)&__p + 1) += 3;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v122, " = ");
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v122);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v65 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v66 = *(unsigned int *)(a1 + 40);
    v67 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v67 + 312) = v65;
    *(_DWORD *)(v67 + 316) = 1831;
    if (*(char *)(v67 + 311) < 0)
    {
      **(_BYTE **)(v67 + 288) = 0;
      *(_QWORD *)(v67 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v67 + 288) = 0;
      *(_BYTE *)(v67 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v100, v67);
    v69 = v127;
    v68 = v128;
    *(_QWORD *)((char *)&v123 + 4) = 0;
    BYTE12(v123) = 0;
    LOBYTE(v126) = 0;
    v122 = (void *)(v65 | (v66 << 32));
    LOBYTE(v123) = 1;
    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if ((unint64_t)v128 >= 0x17)
    {
      v71 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)v128 | 7) != 0x17)
        v71 = v128 | 7;
      v72 = v71 + 1;
      p_dst = (__int128 *)operator new(v71 + 1);
      *((_QWORD *)&__dst + 1) = v68;
      v103 = v72 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v103) = v128;
      p_dst = &__dst;
      if (!(_QWORD)v128)
      {
LABEL_88:
        *((_BYTE *)p_dst + v68) = 0;
        __p = __dst;
        v125 = v103;
        sub_22E6D82D0(v100, &v122);
        if (SHIBYTE(v125) < 0)
          operator delete((void *)__p);
        sub_22E3BB0B8((uint64_t)v100);
        v122 = (char *)&v123 + 8;
        *(_QWORD *)&v123 = 0x200000000;
        v118 = 0;
        v119 = v58;
        v120 = 0;
        v121 = v65;
        v73 = sub_22E84B46C((uint64_t)&v122, (unint64_t)&v118, 1);
        v74 = (char *)v122 + 40 * v123;
        v75 = *(_QWORD *)(v73 + 32);
        v76 = *(_OWORD *)(v73 + 16);
        *(_OWORD *)v74 = *(_OWORD *)v73;
        *((_OWORD *)v74 + 1) = v76;
        *((_QWORD *)v74 + 4) = v75;
        LODWORD(v123) = v123 + 1;
        if (*(_BYTE *)(a1 + 48))
        {
          v90 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 56) = sub_22E9B41D0(a3, (uint64_t *)&v122);
          *(_DWORD *)(a1 + 52) = v90;
        }
        v77 = *(_QWORD **)(a1 + 88);
        v78 = sub_22E84AE80(a1);
        v31 = sub_22EC38374(v77, (uint64_t *)&v122, v66, 1, v78);
        if (v122 != (char *)&v123 + 8)
          free(v122);
        v79 = v127;
        if (v127 != v129)
          goto LABEL_105;
        return v31;
      }
    }
    memmove(p_dst, v69, v68);
    goto LABEL_88;
  }
  v5 = (char *)&v128 + 8;
  v127 = (char *)&v128 + 8;
  v6 = (void *)(a1 + 944);
  *(_QWORD *)&v128 = 0x200000000;
  while (1)
  {
    while (1)
    {
      v7 = *(unsigned __int16 *)(a1 + 32);
      if (v7 <= 0x18)
        break;
      if (v7 != 25)
      {
        if (v7 != 63)
        {
LABEL_53:
          if ((_DWORD)v128 == 1 && (*(_DWORD *)v127 - 1) <= 1)
          {
            sub_22E884578(a1, (int *)v4, 1830, (uint64_t)v100);
            v50 = *(unsigned int *)(a1 + 16);
            *(_QWORD *)((char *)&v123 + 4) = 0;
            BYTE12(v123) = 0;
            v125 = 0x200000000000000;
            v122 = (void *)(v50 | (v50 << 32));
            LOBYTE(v123) = 0;
            __p = 0x203DuLL;
            LOBYTE(v126) = 0;
            sub_22E6D82D0(v100, &v122);
            if (SHIBYTE(v125) < 0)
              operator delete((void *)__p);
            sub_22E3BB0B8((uint64_t)v100);
            v51 = *(_QWORD **)(a1 + 88);
            v52 = *(_DWORD *)(a1 + 16);
            v47 = sub_22E84AE80(a1);
            v48 = v51;
            v49 = v52;
            v53 = 1;
            goto LABEL_68;
          }
          sub_22E884578(a1, (int *)v4, 1498, (uint64_t)v97);
          v54 = v97;
LABEL_62:
          sub_22E3BB0B8((uint64_t)v54);
          v31 = 1;
          goto LABEL_104;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v45 = *(_DWORD *)(a1 + 40);
        if (*(_BYTE *)(a1 + 48))
        {
          v88 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 56) = sub_22E9B41D0(a3, (uint64_t *)&v127);
          *(_DWORD *)(a1 + 52) = v88;
        }
        v46 = *(_QWORD **)(a1 + 88);
        v47 = sub_22E84AE80(a1);
        v48 = v46;
        v49 = v45;
LABEL_67:
        v53 = 0;
LABEL_68:
        v31 = sub_22EC38374(v48, (uint64_t *)&v127, v49, v53, v47);
        goto LABEL_104;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v13 = *(unsigned __int16 *)(a1 + 32);
      if (v13 != 5)
      {
        if (v13 == 3)
        {
          v44 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v44 + 752))
          {
            *(_BYTE *)(v44 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v44 + 48) + 6) = 1;
          }
          v31 = 1;
          *(_WORD *)(a1 + 32) = 1;
          sub_22E9C5270(*(_QWORD *)(a1 + 88), a3, *(_QWORD *)a2, *(unsigned int *)(a2 + 8), (uint64_t *)&v127);
          goto LABEL_104;
        }
        v55 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v55 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v55 + 316) = 1501;
        if (*(char *)(v55 + 311) < 0)
        {
          **(_BYTE **)(v55 + 288) = 0;
          *(_QWORD *)(v55 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v55 + 288) = 0;
          *(_BYTE *)(v55 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v99, v55);
        v54 = v99;
        goto LABEL_62;
      }
      v14 = *(_DWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_DWORD *)(a1 + 16);
      v114 = 0;
      v115 = v15;
      v116 = v14;
      v117 = v16;
      v17 = sub_22E84B46C((uint64_t)&v127, (unint64_t)&v114, 1);
      v18 = (char *)v127 + 40 * v128;
      v19 = *(_OWORD *)v17;
      v20 = *(_OWORD *)(v17 + 16);
      *((_QWORD *)v18 + 4) = *(_QWORD *)(v17 + 32);
      *(_OWORD *)v18 = v19;
      *((_OWORD *)v18 + 1) = v20;
      LODWORD(v128) = v128 + 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    }
    if (v7 != 19)
    {
      if (v7 != 23 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0)
        goto LABEL_53;
      if (*(_BYTE *)(a1 + 48))
      {
        v89 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 56) = sub_22E9B41D0(a3, (uint64_t *)&v127);
        *(_DWORD *)(a1 + 52) = v89;
      }
      v57 = *(_QWORD **)(a1 + 88);
      v47 = sub_22E84AF40(a1);
      v48 = v57;
      v49 = 0;
      goto LABEL_67;
    }
    v8 = *(_BYTE *)(a1 + 947);
    *(_BYTE *)(a1 + 947) = 1;
    v122 = v6;
    LOBYTE(v123) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    *((_QWORD *)&v123 + 1) = a1;
    LODWORD(__p) = 1310739;
    WORD2(__p) = 62;
    v125 = 0;
    v126 = 0;
    *((_QWORD *)&__p + 1) = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v122);
    v9 = v126;
    v10 = *(_QWORD *)(a1 + 8);
    if ((~**(_DWORD **)(v10 + 56) & 0x4100) == 0)
    {
      if (*(_WORD *)(a1 + 32) == 5 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 336))
      {
        v11 = *(_QWORD *)(v10 + 2816);
        v12 = v11 >= *(unsigned int *)(v10 + 2784) ? sub_22F162D2C(v10, 1u) : *(_QWORD *)(v10 + 2776) + 24 * v11;
        if (*(_WORD *)(v12 + 16) != 25)
        {
          v39 = *(_QWORD *)(a1 + 88) + 12888;
          while (1)
          {
            v39 = *(_QWORD *)v39;
            if (!v39)
              break;
            if ((*(_BYTE *)(v39 + 9) & 8) != 0)
              goto LABEL_107;
          }
        }
      }
      LOBYTE(v101) = 0;
      v100[0] = 0;
      if (sub_22F2EB074(a1, &v101, (unint64_t *)v100))
        goto LABEL_101;
      if (!(_BYTE)v101)
      {
        sub_22E84AE98(*(_QWORD *)(a1 + 96), v9, v127, v128);
        v80 = v100[0];
        goto LABEL_110;
      }
      v31 = v100[0];
      if (v100[0] > 1uLL)
        goto LABEL_27;
      goto LABEL_26;
    }
    if ((**(_QWORD **)(v10 + 56) & 0x4000) != 0 && *(_WORD *)(a1 + 32) == 5)
      break;
LABEL_26:
    v31 = sub_22E83766C(a1, 0);
    if ((v31 & 1) != 0)
    {
      LOWORD(v100[0]) = 20;
      v56 = (unsigned __int16 *)v100;
      goto LABEL_102;
    }
LABEL_27:
    v32 = *(unsigned __int16 *)(a1 + 32);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) != 0)
    {
      if (v32 == 20)
      {
LABEL_31:
        v110 = 1;
        v111 = v31 & 0xFFFFFFFFFFFFFFFELL;
        v112 = v9;
        v113 = 0;
        v33 = &v110;
        goto LABEL_32;
      }
      if (v32 != 26)
      {
        sub_22E84AE98(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 16), v127, v128);
        v87 = (void *)(v31 & 0xFFFFFFFFFFFFFFFELL);
        v85 = (_BYTE *)a1;
        v86 = v9;
        v84 = 0;
        v80 = 0;
        goto LABEL_112;
      }
    }
    else if (v32 != 26)
    {
      goto LABEL_31;
    }
    v96 = v5;
    v40 = v6;
    sub_22E884578(a1, (int *)v4, 1825, (uint64_t)v98);
    sub_22E3BB0B8((uint64_t)v98);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v41 = *(_DWORD *)(a1 + 40);
    v42 = sub_22F2E50C0(a1, 0);
    v43 = v42;
    if ((v42 & 1) != 0)
    {
      LOWORD(v100[0]) = 20;
      sub_22E885940(a1, (unsigned __int16 *)v100, 1, 1);
      v31 = v43;
      v5 = v96;
      goto LABEL_103;
    }
    v104 = 2;
    v105 = v31 & 0xFFFFFFFFFFFFFFFELL;
    v106 = v42 & 0xFFFFFFFFFFFFFFFELL;
    v107 = v9;
    v108 = v41;
    v33 = &v104;
    v109 = 0;
    v6 = v40;
    v5 = v96;
LABEL_32:
    v34 = sub_22E84B46C((uint64_t)&v127, (unint64_t)v33, 1);
    v35 = (char *)v127 + 40 * v128;
    v36 = *(_QWORD *)(v34 + 32);
    v37 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v34;
    *((_OWORD *)v35 + 1) = v37;
    *((_QWORD *)v35 + 4) = v36;
    LODWORD(v128) = v128 + 1;
    sub_22E811E8C((uint64_t)&v122);
    v38 = (char *)v127 + 40 * (v128 - 1);
    if (*v38 == 1)
      v38[5] = HIDWORD(v126);
    else
      v38[8] = HIDWORD(v126);
    *(_BYTE *)v122 = v123;
    *(_BYTE *)(a1 + 947) = v8;
  }
  v94 = v8;
  v92 = v6;
  v95 = v5;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_DWORD *)(a1 + 16);
  v100[0] = 0;
  v23 = *(_QWORD **)(a1 + 88);
  v24 = (uint64_t *)v23[1611];
  v25 = *(_QWORD *)(a1 + 336);
  v26 = *(_QWORD *)(v10 + 2816);
  if (v26 >= *(unsigned int *)(v10 + 2784))
    v27 = sub_22F162D2C(v10, 1u);
  else
    v27 = *(_QWORD *)(v10 + 2776) + 24 * v26;
  v28 = v21 == v25;
  v29 = v22;
  v30 = sub_22EC2D528(v23, v24, v21, v22, v28, *(unsigned __int16 *)(v27 + 16) == 25, (unint64_t *)v100);
  if (v30 != 2)
  {
    v5 = v95;
    v8 = v94;
    if (!v30)
    {
LABEL_107:
      sub_22E84AE98(*(_QWORD *)(a1 + 96), v9, v127, v128);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v84 = *(_DWORD *)(a1 + 40);
      v85 = (_BYTE *)a1;
      v86 = v9;
      v80 = 0;
      goto LABEL_111;
    }
    v6 = v92;
    goto LABEL_26;
  }
  sub_22E84AE98(*(_QWORD *)(a1 + 96), v9, v127, v128);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  v80 = v100[0];
  v5 = v95;
  v8 = v94;
  if (v100[0])
  {
    if (*(_WORD *)(a1 + 32) != 46)
      goto LABEL_110;
    LODWORD(__dst) = 0;
    v81 = sub_22F2EA184(a1, v29, v100[0], 1, &__dst);
    if (v82 || (v80 = v81) == 0)
    {
      v101 = 20;
      v31 = 1;
      v56 = (unsigned __int16 *)&v101;
      goto LABEL_102;
    }
    v100[0] = v81;
LABEL_110:
    v85 = (_BYTE *)a1;
    v86 = v9;
    v84 = 0;
LABEL_111:
    v87 = 0;
LABEL_112:
    v31 = sub_22F2E5080(v85, v86, v84, v80, v87);
  }
  else
  {
LABEL_101:
    LOWORD(__dst) = 20;
    v31 = 1;
    v56 = (unsigned __int16 *)&__dst;
LABEL_102:
    sub_22E885940(a1, v56, 1, 1);
  }
LABEL_103:
  *(_BYTE *)v122 = v123;
  *(_BYTE *)(a1 + 947) = v8;
LABEL_104:
  v79 = v127;
  if (v127 != v5)
LABEL_105:
    free(v79);
  return v31;
}

uint64_t sub_22E84AE80(uint64_t a1)
{
  if (*(_WORD *)(a1 + 32) == 23)
    return sub_22E84AF40();
  else
    return sub_22E83766C(a1, 0);
}

uint64_t sub_22E84AE98(uint64_t result, int a2, _DWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (a4)
  {
    v4 = result;
    if (a4 == 1 && (*a3 - 1) <= 1)
    {
      *(_DWORD *)(result + 312) = a2;
      *(_DWORD *)(result + 316) = 1830;
      if (*(char *)(result + 311) < 0)
      {
        **(_BYTE **)(result + 288) = 0;
        *(_QWORD *)(result + 296) = 0;
      }
      else
      {
        *(_BYTE *)(result + 288) = 0;
        *(_BYTE *)(result + 311) = 0;
      }
      v5 = (uint64_t *)&v8;
    }
    else
    {
      *(_DWORD *)(result + 312) = a2;
      *(_DWORD *)(result + 316) = 1498;
      if (*(char *)(result + 311) < 0)
      {
        **(_BYTE **)(result + 288) = 0;
        *(_QWORD *)(result + 296) = 0;
      }
      else
      {
        *(_BYTE *)(result + 288) = 0;
        *(_BYTE *)(result + 311) = 0;
      }
      v5 = &v7;
    }
    v6 = sub_22E78E558((uint64_t)v5, v4);
    return sub_22E3BB0B8(v6);
  }
  return result;
}

uint64_t sub_22E84AF40(uint64_t a1)
{
  char v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  uint64_t v30[5];
  char v31;
  _BYTE v32[32];
  _BYTE *v33;
  char v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[14];

  v46[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(a1 + 947);
  *(_BYTE *)(a1 + 947) = 0;
  v33 = (_BYTE *)(a1 + 944);
  v34 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v35 = a1;
  v36 = 1572887;
  v37 = 62;
  v39 = 0;
  v40 = 0;
  v38 = sub_22E80CED8;
  sub_22E811DE8((uint64_t)&v33);
  v3 = v40;
  v44 = v46;
  v45 = 0xC00000000;
  if (*(_WORD *)(a1 + 32) == 24)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) == 0)
    {
      v4 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v4 + 312) = v40;
      *(_DWORD *)(v4 + 316) = 1828;
      if (*(char *)(v4 + 311) < 0)
      {
        **(_BYTE **)(v4 + 288) = 0;
        *(_QWORD *)(v4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v4 + 288) = 0;
        *(_BYTE *)(v4 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v32, v4);
      sub_22E3BB0B8((uint64_t)v32);
    }
    v5 = *(_QWORD **)(a1 + 88);
    v6 = sub_22E80CED8(a1);
    v7 = sub_22EB34F98(v5, v3, 0, 0, v6);
    goto LABEL_54;
  }
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576);
  if (v9 > 3 || v9 == 2)
  {
    v11 = 1;
  }
  else
  {
    v11 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v30[0] = 0;
      v42 = 3;
      v43 = 1;
      v41 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v43, (int *)&v41, (__int16 *)(v8 + 1693), v30, &v42);
      v12 = *(unsigned int *)(v8 + 3696);
      v13 = v12 - 2;
      v14 = *(_QWORD *)(v8 + 3688);
      v15 = *(_DWORD *)(v14 + 576 * (v12 - 2));
      if (v15 == 5)
      {
        *(_BYTE *)(v14 + 576 * v12 - 4) = *(_BYTE *)(v14 + 576 * v13 + 572);
        v16 = 1;
      }
      else if (v15 == 2)
      {
        *(_BYTE *)(v14 + 576 * v12 - 4) = 1;
        v16 = *(_BYTE *)(v14 + 576 * v13 + 573) != 0;
      }
      else
      {
        v16 = 0;
        *(_BYTE *)(v14 + 576 * v12 - 4) = 0;
      }
      v17 = v14 + 576 * v12;
      *(_BYTE *)(v17 - 3) = v16;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v17 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v17 - 496));
      }
      v11 = 0;
    }
  }
  LOBYTE(v42) = 1;
  if (!*(_BYTE *)(a1 + 48) || *(_DWORD *)(a1 + 52) != (_DWORD)v40)
    goto LABEL_24;
  v18 = *(_QWORD *)(a1 + 56);
  if (v18 <= 0xF)
  {
    v19 = *(uint64_t (**)(_QWORD))(a1 + 64);
    if (v19)
    {
      v18 = v19(*(_QWORD *)(a1 + 72));
      goto LABEL_25;
    }
LABEL_24:
    v18 = 0;
  }
LABEL_25:
  v41 = v18;
  v31 = 0;
  v30[0] = (uint64_t)&v41;
  v30[1] = a1;
  v30[2] = (uint64_t)&v33;
  v30[3] = (uint64_t)&v44;
  v30[4] = (uint64_t)&v31;
  do
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v26 = *(_DWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 72) = v30;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = sub_22E84B4E4;
      *(_DWORD *)(a1 + 52) = v26;
    }
    if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 0x20) == 0
      || *(unsigned __int16 *)(a1 + 32) - 381 > 1)
    {
      if (sub_22E84A0FC(a1))
      {
        v20 = sub_22E84A334(a1, (uint64_t)&v44, v18);
      }
      else if (*(_WORD *)(a1 + 32) == 23)
      {
        v20 = sub_22E84AF40(a1);
      }
      else
      {
        v20 = sub_22E83766C(a1, 0);
      }
      if (*(_WORD *)(a1 + 32) == 26)
      {
        v21 = *(_QWORD **)(a1 + 88);
        v22 = v20 & 0xFFFFFFFFFFFFFFFELL;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v20 = sub_22EE739C0(v21, v22, *(_DWORD *)(a1 + 40), 0);
      }
      v23 = sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v43);
      if ((unint64_t)v23 < 2)
      {
        LOBYTE(v42) = 0;
        if (*(_WORD *)(a1 + 32) != 65)
        {
          LOWORD(v43) = 24;
          v7 = 1;
          sub_22E885940(a1, (unsigned __int16 *)&v43, 1, 2);
          sub_22E811E8C((uint64_t)&v33);
          goto LABEL_58;
        }
      }
      else
      {
        v24 = (unint64_t)v23;
        v25 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = v45;
        }
        *((_QWORD *)v44 + v25) = v24 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v45) = v45 + 1;
LABEL_41:
        if (*(_WORD *)(a1 + 32) != 65)
          break;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      continue;
    }
    if (sub_22F2E8F34(a1, (uint64_t)&v44, &v42))
      goto LABEL_41;
  }
  while (*(_WORD *)(a1 + 32) != 24);
  v27 = v42;
  v28 = sub_22E811E8C((uint64_t)&v33);
  v7 = 1;
  if (v27)
  {
    if ((v28 & 1) == 0)
      v7 = sub_22EB34F98(*(_QWORD **)(a1 + 88), v3, (uint64_t *)v44, v45, SHIDWORD(v40));
    if ((v11 & 1) == 0)
      goto LABEL_53;
    goto LABEL_54;
  }
LABEL_58:
  if ((v11 & 1) == 0)
LABEL_53:
    sub_22EB48E64(v8);
LABEL_54:
  if (v44 != v46)
    free(v44);
  *v33 = v34;
  *(_BYTE *)(a1 + 947) = v2;
  return v7;
}

unint64_t sub_22E84B46C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

unint64_t sub_22E84B4E4(uint64_t a1)
{
  unint64_t result;

  if (**(_QWORD **)a1 >= 0x10uLL)
    result = sub_22E9C487C();
  else
    result = 0;
  **(_BYTE **)(a1 + 32) = 1;
  return result;
}

unint64_t sub_22E84B554(uint64_t a1, int a2)
{
  unsigned int *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[64];
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v22 = v24;
  v23 = 0x800000000;
  v19 = v21;
  v20 = 0x800000000;
  v16 = v18;
  v17 = 0x800000000;
  while (1)
  {
    sub_22F2E9284(a1, 1);
    if ((sub_22E88517C(a1) & 1) != 0)
    {
      v15 = 62;
      sub_22E885940(a1, &v15, 1, 0);
LABEL_23:
      v13 = 0;
      goto LABEL_25;
    }
    v5 = *(unsigned __int16 *)(a1 + 32);
    if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
      v12 = 0;
    else
      v12 = *(_QWORD *)(a1 + 24);
    v7 = v23;
    if (v23 >= (unint64_t)HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v23;
    }
    v22[v7] = v12;
    LODWORD(v23) = v23 + 1;
    v8 = *v4;
    v9 = v20;
    if (v20 >= (unint64_t)HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v20;
    }
    *((_DWORD *)v19 + v9) = v8;
    LODWORD(v20) = v20 + 1;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    if (*(_WORD *)(a1 + 32) == 46)
      v10 = sub_22F2E965C(a1);
    else
      v10 = 0;
    v11 = v17;
    if (v17 >= (unint64_t)HIDWORD(v17))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v17;
    }
    *((_QWORD *)v16 + v11) = v10;
    LODWORD(v17) = v17 + 1;
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  }
  if ((sub_22E8847B4(a1, 0x3Eu, 16, "@class", 6uLL) & 1) != 0)
    goto LABEL_23;
  v13 = sub_22EAFA330(*(_QWORD *)(a1 + 88), a2, v22, (int *)v19, (uint64_t **)v16, v17, v23);
LABEL_25:
  if (v16 != v18)
    free(v16);
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
  return v13;
}

uint64_t sub_22E84B80C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  void **v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  _DWORD **v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  void *v49;
  uint64_t v50;
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  sub_22E84D330((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v6 + 752))
    {
      *(_BYTE *)(v6 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F317A84(*(_QWORD *)(a1 + 88));
    return 0;
  }
  sub_22F2E9284(a1, 7);
  if ((sub_22E88517C(a1) & 1) != 0)
    return 0;
  v9 = *(unsigned __int16 *)(a1 + 32);
  if ((v9 - 7) >= 6)
  {
    v10 = 0;
    if ((v9 - 13) >= 6 && v9 != 1)
      v10 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v11 = *(_DWORD *)(a1 + 40);
  v44 = 0;
  v45 = 0;
  v60 = (char *)v62;
  v61 = 0x800000000;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
  v42 = *(_QWORD *)(a1 + 88);
  v43 = v12;
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 46)
  {
    v14 = sub_22E84D518(a1, (uint64_t)&v42, (int *)&v45 + 1, (uint64_t *)&v60, (unsigned int *)&v45, 1);
    v13 = *(unsigned __int16 *)(a1 + 32);
  }
  else
  {
    v14 = 0;
  }
  if (v13 != 21)
  {
LABEL_20:
    v41 = 0;
    v49 = v51;
    v50 = 0x400000000;
    v52 = &v54;
    v53 = 0x400000000;
    v46 = v48;
    v47 = 0x400000000;
    if (v13 == 61)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) == 3)
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v18 + 752))
        {
          *(_BYTE *)(v18 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v18 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        sub_22F317C5C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v10, v11);
        goto LABEL_39;
      }
      if ((sub_22E88517C(a1) & 1) != 0)
      {
LABEL_39:
        v7 = 0;
LABEL_59:
        if (v46 != v48)
          free(v46);
        if (v52 != &v54)
          free(v52);
        if (v49 != v51)
          free(v49);
        goto LABEL_85;
      }
      v29 = *(unsigned __int16 *)(a1 + 32);
      v39 = v11;
      if ((v29 - 7) >= 6)
      {
        v40 = 0;
        if ((v29 - 13) >= 6 && v29 != 1)
          v40 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v40 = 0;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v19 = *(_DWORD *)(a1 + 40);
      v13 = *(unsigned __int16 *)(a1 + 32);
      if (v13 == 46)
      {
        sub_22E84EEEC(a1, 0, (int *)&v41 + 1, (uint64_t)&v49, &v41, (uint64_t)&v45 + 4, (uint64_t)&v52, (uint64_t)&v46, (uint64_t)&v45, 1u, 1);
        v7 = 0;
        v13 = *(unsigned __int16 *)(a1 + 32);
        if (v13 == 1)
          goto LABEL_59;
      }
    }
    else
    {
      v39 = v11;
      v40 = 0;
      v19 = 0;
    }
    if (HIDWORD(v45))
    {
      if ((_DWORD)v61)
      {
        v38 = v10;
        v20 = v47;
        v21 = 16 * v61;
        v22 = (int *)(v60 + 8);
        do
        {
          v24 = *v22;
          v22 += 4;
          v23 = v24;
          if (v20 >= HIDWORD(v47))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v47;
          }
          *((_DWORD *)v46 + v20) = v23;
          v20 = v47 + 1;
          LODWORD(v47) = v47 + 1;
          v21 -= 16;
        }
        while (v21);
        sub_22EAF5DCC(*(_QWORD **)(a1 + 88), 1, 1, (uint64_t)v60, v61, (uint64_t)&v52);
        v10 = v38;
      }
    }
    else if (!(_DWORD)v53)
    {
      if (v13 != 46)
        goto LABEL_55;
      if ((sub_22E84DB88(a1, (uint64_t)&v52, (uint64_t)&v46, 1, 1, (int *)&v45 + 1, (unsigned int *)&v45, 1) & 1) != 0)
        goto LABEL_39;
    }
    if (*(_WORD *)(a1 + 32) == 46)
    {
      v27 = v19;
      v28 = (void **)v40;
LABEL_56:
      v7 = (uint64_t)sub_22F32AF18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, v10, v39, (uint64_t)v14, v28, v27, (unint64_t *)v49, v50, HIDWORD(v41), v41, (_DWORD **)v52, v53, (unsigned int *)v46, v45, a3);
      if (*(_WORD *)(a1 + 32) == 23)
        sub_22F2E9810(a1, v7, 9, a2);
      sub_22E84DE14(a1, 7, v7);
      goto LABEL_59;
    }
LABEL_55:
    v27 = v19;
    v28 = (void **)v40;
    sub_22EAF59A0(*(_QWORD *)(a1 + 88), (uint64_t)&v52, (uint64_t)&v46, v40, v27);
    goto LABEL_56;
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(v15 + 2816);
  if (v16 >= *(unsigned int *)(v15 + 2784))
    v17 = sub_22F162D2C(v15, 1u);
  else
    v17 = *(_QWORD *)(v15 + 2776) + 24 * v16;
  if (sub_22E821180(a1, v17))
  {
    v13 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_20;
  }
  v52 = (void *)(a1 + 944);
  LOBYTE(v53) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v54 = a1;
  v55 = 1441813;
  v56 = 62;
  v58 = 0;
  v59 = 0;
  v57 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v52);
  v25 = *(unsigned __int16 *)(a1 + 32);
  if (v25 == 5)
  {
    v30 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v31 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    if (v25 == 3)
    {
      v26 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v26 + 752))
      {
        *(_BYTE *)(v26 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v26 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      sub_22E9D0B90(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v10, v11);
      goto LABEL_74;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) == 0)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v49);
      v32 = (unsigned __int8 *)v49;
      if (!v49)
      {
        v32 = (unsigned __int8 *)sub_22E3B8AAC(v50);
        v49 = v32;
      }
      v32[*v32 + 1] = 4;
      v33 = v49;
      v34 = *(unsigned __int8 *)v49;
      *(_BYTE *)v49 = v34 + 1;
      v33[v34 + 2] = 5;
      sub_22E3BB0B8((uint64_t)&v49);
      goto LABEL_74;
    }
    v31 = 0;
    v30 = 0;
  }
  sub_22E811E8C((uint64_t)&v52);
  if (HIDWORD(v59))
  {
    v49 = v51;
    v50 = 0x800000000;
    v46 = v48;
    v47 = 0x800000000;
    if (*(_WORD *)(a1 + 32) == 46)
    {
      if ((sub_22E84DB88(a1, (uint64_t)&v49, (uint64_t)&v46, 1, 1, (int *)&v45 + 1, (unsigned int *)&v45, 1) & 1) != 0)
      {
        v7 = 0;
LABEL_80:
        if (v46 != v48)
          free(v46);
        if (v49 != v51)
          free(v49);
        goto LABEL_84;
      }
      v37 = (_DWORD **)v49;
      v35 = v50;
      v36 = (unsigned int *)v46;
    }
    else
    {
      v35 = 0;
      v36 = (unsigned int *)v48;
      v37 = (_DWORD **)v51;
    }
    v7 = sub_22F32BC30(*(_QWORD **)(a1 + 88), a2, v10, v11, v14, v30, v31, v37, v35, v36, v45, a3);
    if (*(_WORD *)(a1 + 32) == 23)
      sub_22F2E9810(a1, v7, 8, a2);
    sub_22E84DE14(a1, 0, v7);
    goto LABEL_80;
  }
LABEL_74:
  v7 = 0;
LABEL_84:
  *(_BYTE *)v52 = v53;
LABEL_85:
  if (v44)
    sub_22EAF4E7C(v42, v43, v44);
  if (v60 != (char *)v62)
    free(v60);
  return v7;
}

unint64_t sub_22E84BFB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  _QWORD *v23;
  char v24;
  void *v25;
  uint64_t v26;
  void *v27[2];
  _BYTE v28[32];
  void *v29;
  uint64_t v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*((_WORD *)v6 + 8) == 3)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v7 + 752))
    {
      *(_BYTE *)(v7 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F3178A8(*(_QWORD *)(a1 + 88));
    return 0;
  }
  sub_22F2E9284(a1, 10);
  if ((sub_22E88517C(a1) & 1) != 0)
    return 0;
  v10 = *(unsigned __int16 *)(a1 + 32);
  if ((v10 - 7) >= 6)
  {
    v11 = 0;
    if ((v10 - 13) >= 6 && v10 != 1)
      v11 = *(void **)(a1 + 24);
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
  v12 = *(unsigned int *)(a1 + 40);
  if (*(_WORD *)(a1 + 32) == 62)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    v29 = v11;
    LODWORD(v30) = v12;
    return sub_22F32BA5C(*(_QWORD **)(a1 + 88), a2, (uint64_t)&v29, 1, a3);
  }
  sub_22E84D330((_QWORD *)a1, a2);
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 != 65)
  {
    v29 = v31;
    v30 = 0x800000000;
    v26 = 0;
    v27[0] = v28;
    v27[1] = (void *)0x800000000;
    if (v13 == 46)
    {
      if ((sub_22E84DB88(a1, (uint64_t)&v29, (uint64_t)v27, 0, 1, (int *)&v26 + 1, (unsigned int *)&v26, 1) & 1) != 0)
      {
        v8 = 0;
        goto LABEL_39;
      }
      v23 = v29;
      v21 = v30;
      v22 = (unsigned int *)v27[0];
      v20 = v26;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = (unsigned int *)v28;
      v23 = v31;
    }
    v8 = sub_22EAF5A84(*(_QWORD **)(a1 + 88), a2, (uint64_t)v11, v12, v23, v21, v22, v20, a3);
    sub_22E84DE14(a1, 10, v8);
LABEL_39:
    if (v27[0] != v28)
      free(v27[0]);
    v25 = v29;
    if (v29 == v31)
      return v8;
LABEL_42:
    free(v25);
    return v8;
  }
  v29 = v31;
  v31[0] = v11;
  v31[1] = v12;
  v30 = 0x800000001;
  do
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    if (sub_22E88517C(a1))
    {
      LOWORD(v27[0]) = 62;
      sub_22E885940(a1, (unsigned __int16 *)v27, 1, 0);
LABEL_32:
      v8 = 0;
      goto LABEL_33;
    }
    v14 = *(unsigned __int16 *)(a1 + 32);
    if ((v14 - 7) < 6 || ((v14 - 13) >= 6 ? (v15 = v14 == 1) : (v15 = 1), v15))
      v19 = 0;
    else
      v19 = *(_QWORD *)(a1 + 24);
    v16 = *v6;
    v17 = v30;
    if (v30 >= (unint64_t)HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v30;
    }
    v18 = (char *)v29 + 16 * v17;
    *v18 = v19;
    v18[1] = v16;
    LODWORD(v30) = v30 + 1;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
  }
  while (*(_WORD *)(a1 + 32) == 65);
  v24 = sub_22E8847B4(a1, 0x3Eu, 16, "@protocol", 9uLL);
  if ((v24 & 1) != 0)
    goto LABEL_32;
  v8 = sub_22F32BA5C(*(_QWORD **)(a1 + 88), a2, (uint64_t)v29, v30, a3);
LABEL_33:
  v25 = v29;
  if (v29 != v31)
    goto LABEL_42;
  return v8;
}

unint64_t sub_22E84C368(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v9;
  void **v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  int v42;
  unsigned __int8 *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _BYTE v51[32];
  _BYTE v52[32];
  uint64_t v53;
  unsigned __int8 *v54;
  __int128 v55;
  void *v56;
  __int16 v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _BYTE v66[12];
  char v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  unint64_t v73;
  char v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[64];
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  sub_22E84D330((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v6 + 752))
    {
      *(_BYTE *)(v6 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F317E98(*(_QWORD *)(a1 + 88));
    return 0;
  }
  sub_22F2E9284(a1, 6);
  if ((sub_22E88517C(a1) & 1) != 0)
    return 0;
  v9 = *(unsigned __int16 *)(a1 + 32);
  if ((v9 - 7) >= 6)
  {
    v10 = 0;
    if ((v9 - 13) >= 6 && v9 != 1)
      v10 = *(void ***)(a1 + 24);
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v11 = *(_DWORD *)(a1 + 40);
  v12 = *(unsigned __int16 *)(a1 + 32);
  if (v12 != 46)
    goto LABEL_30;
  v53 = 0;
  v72 = &v74;
  v73 = 0x800000000;
  v13 = *(unsigned int *)(a1 + 16);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
  v62 = *(_QWORD *)(a1 + 88);
  v63 = v14;
  v64 = 0;
  if (sub_22E84D518(a1, (uint64_t)&v62, (int *)&v53 + 1, (uint64_t *)&v72, (unsigned int *)&v53, 1))
  {
    v15 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v15 + 312) = v13;
    *(_DWORD *)(v15 + 316) = 1638;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v65, v15);
    v16 = v13 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    v17 = v65;
    if (!v65)
    {
      v17 = (void *)sub_22E3B8AAC(*(uint64_t *)v66);
      v65 = v17;
    }
    sub_22E4D6448((uint64_t)v17 + 336, v16, 1);
    v18 = &v65;
LABEL_24:
    sub_22E3BB0B8((uint64_t)v18);
    goto LABEL_25;
  }
  v19 = HIDWORD(v53);
  if (HIDWORD(v53))
  {
    v20 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v20 + 312) = HIDWORD(v53);
    *(_DWORD *)(v20 + 316) = 1764;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v20);
    *(_QWORD *)&v66[4] = 0;
    v67 = 0;
    v69 = 0;
    v70 = 0;
    __p = 0;
    v71 = 0;
    v65 = (void *)(v19 | ((unint64_t)v53 << 32));
    v66[0] = 1;
    sub_22E6D82D0((uint64_t *)&v54, &v65);
    if (SHIBYTE(v70) < 0)
      operator delete(__p);
    v18 = (void **)&v54;
    goto LABEL_24;
  }
LABEL_25:
  if (v64)
    sub_22EAF4E7C(v62, v63, v64);
  if (v72 != &v74)
    free(v72);
  v12 = *(unsigned __int16 *)(a1 + 32);
LABEL_30:
  if (v12 == 61)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if ((sub_22E88517C(a1) & 1) == 0)
    {
      v23 = *(unsigned __int16 *)(a1 + 32);
      if ((v23 - 7) >= 6)
      {
        v24 = 0;
        if ((v23 - 13) >= 6 && v23 != 1)
          v24 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v24 = 0;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v32 = *(_DWORD *)(a1 + 40);
      goto LABEL_52;
    }
    return 0;
  }
  if (v12 != 21)
  {
    v32 = 0;
    v24 = 0;
LABEL_52:
    v33 = sub_22EAF7394(*(_QWORD *)(a1 + 88), a2, v10, v11, v24, v32, a3);
    v34 = *(unsigned __int16 *)(a1 + 32);
    if (v34 == 46)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1764, (uint64_t)v51);
      sub_22E3BB0B8((uint64_t)v51);
      LODWORD(v54) = 0;
      LODWORD(v62) = 0;
      v72 = &v74;
      v73 = 0x400000000;
      v65 = &v66[8];
      *(_QWORD *)v66 = 0x400000000;
      sub_22E84DB88(a1, (uint64_t)&v72, (uint64_t)&v65, 0, 0, (int *)&v54, (unsigned int *)&v62, 1);
      if (v65 != &v66[8])
        free(v65);
      if (v72 != &v74)
        free(v72);
    }
    else if (v34 == 23)
    {
      sub_22F2E9810(a1, v33, 8, a2);
    }
    goto LABEL_65;
  }
  sub_22E80F720(a1);
  v21 = *(unsigned __int16 *)(a1 + 32);
  if (v21 != 5)
  {
    if (v21 == 3)
    {
      v22 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v22 + 752))
      {
        *(_BYTE *)(v22 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v22 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      sub_22E9D0EE4(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v10, v11);
    }
    else
    {
      sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v72);
      v29 = (unsigned __int8 *)v72;
      if (!v72)
      {
        v29 = (unsigned __int8 *)sub_22E3B8AAC(v73);
        v72 = v29;
      }
      v29[*v29 + 1] = 4;
      v30 = v72;
      v31 = *(unsigned __int8 *)v72;
      *(_BYTE *)v72 = v31 + 1;
      v30[v31 + 2] = 5;
      sub_22E3BB0B8((uint64_t)&v72);
    }
    return 0;
  }
  v25 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(a1 + 32) != 22)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v72);
    v26 = (unsigned __int8 *)v72;
    if (!v72)
    {
      v26 = (unsigned __int8 *)sub_22E3B8AAC(v73);
      v72 = v26;
    }
    v26[*v26 + 1] = 4;
    v27 = v72;
    v28 = *(unsigned __int8 *)v72;
    *(_BYTE *)v72 = v28 + 1;
    v27[v28 + 2] = 22;
    sub_22E3BB0B8((uint64_t)&v72);
    LOWORD(v72) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v72, 1, 0);
    return 0;
  }
  v35 = *(_DWORD *)(a1 + 40);
  sub_22E80F720(a1);
  if (*(_WORD *)(a1 + 32) == 46)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1764, (uint64_t)v52);
    sub_22E3BB0B8((uint64_t)v52);
    LODWORD(v54) = 0;
    LODWORD(v62) = 0;
    v72 = &v74;
    v73 = 0x400000000;
    v65 = &v66[8];
    *(_QWORD *)v66 = 0x400000000;
    sub_22E84DB88(a1, (uint64_t)&v72, (uint64_t)&v65, 0, 0, (int *)&v54, (unsigned int *)&v62, 1);
    if (v65 != &v66[8])
      free(v65);
    if (v72 != &v74)
      free(v72);
  }
  v33 = sub_22F32C040(*(unsigned int **)(a1 + 88), a2, (uint64_t)v10, v11, v25, v35, a3);
LABEL_65:
  v65 = &v66[8];
  *(_QWORD *)v66 = 0x800000000;
  v72 = (void *)a1;
  v73 = v33;
  v74 = 0;
  v75 = v77;
  v76 = 0x800000000;
  *(_QWORD *)(a1 + 2688) = &v72;
  v78 = 0;
  while (1)
  {
    v36 = *(unsigned __int16 *)(a1 + 32);
    if ((v36 - 436) < 3 || v36 == 1)
      break;
    v54 = 0;
    *(_QWORD *)&v55 = 0;
    *((_QWORD *)&v55 + 1) = a1 + 960;
    v56 = 0;
    sub_22E8103B4(a1, &v54, 0);
    v38 = sub_22E887B48(a1, &v54, 0);
    if (v38)
    {
      v62 = v38;
      if ((v38 & 1) != 0)
        v39 = (uint64_t *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v39 = &v62;
      v40 = &v63;
      if ((v38 & 1) != 0)
        v40 = (uint64_t *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(v38 & 0xFFFFFFFFFFFFFFFELL));
      sub_22F2633B0((uint64_t)&v65, v39, v40);
    }
    sub_22E8D1BC4(*((uint64_t *)&v55 + 1), (uint64_t)&v55 + 8);
    sub_22E80F94C((uint64_t *)&v56);
    sub_22E80F94C((uint64_t *)&v55);
    if (v78)
      goto LABEL_91;
  }
  sub_22F2E9710((uint64_t *)&v72, *((unsigned int *)v72 + 4) | ((unint64_t)*((unsigned int *)v72 + 4) << 32));
  v41 = v72;
  v42 = *((unsigned __int16 *)v72 + 16);
  if ((v42 - 436) < 3 || v42 == 1)
  {
    sub_22E884578((uint64_t)v72, (int *)v72 + 4, 1637, (uint64_t)&v62);
    v44 = (unsigned __int8 *)(*((unsigned int *)v72 + 4) | ((unint64_t)*((unsigned int *)v72 + 4) << 32));
    *(_QWORD *)((char *)&v55 + 4) = 0;
    BYTE12(v55) = 0;
    v54 = v44;
    LOBYTE(v55) = 0;
    v60 = 1536;
    v59 = 0;
    HIBYTE(v56) = 0;
    v57 = 0;
    v58 = 0;
    strcpy((char *)&v56, "\n@end\n");
    v61 = 0;
    sub_22E6D82D0(&v62, &v54);
    if (SHIBYTE(v60) < 0)
      operator delete(v56);
    sub_22E3BB0B8((uint64_t)&v62);
    v45 = v72;
    v46 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v73 + 16))(v73);
    v47 = v45[12];
    *(_DWORD *)(v47 + 312) = v46;
    *(_DWORD *)(v47 + 316) = 1873;
    if (*(char *)(v47 + 311) < 0)
    {
      **(_BYTE **)(v47 + 288) = 0;
      *(_QWORD *)(v47 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v47 + 288) = 0;
      *(_BYTE *)(v47 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v47);
    v48 = v54;
    if (!v54)
    {
      v48 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = v48;
    }
    v48[*v48 + 1] = 2;
    v49 = v54;
    v50 = *v54;
    *v54 = v50 + 1;
    *(_QWORD *)&v49[8 * v50 + 16] = 4;
    sub_22E3BB0B8((uint64_t)&v54);
LABEL_91:
    v41 = v72;
  }
  v41[336] = 0;
  if (v75 != v77)
    free(v75);
  v7 = sub_22F32C31C(*(_QWORD **)(a1 + 88), v33, (unint64_t *)v65, *(unsigned int *)v66);
  if (v65 != &v66[8])
    free(v65);
  return v7;
}

uint64_t sub_22E84CC18(uint64_t a1, int a2)
{
  unsigned int *v4;
  int v5;
  BOOL v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if ((sub_22E88517C(a1) & 1) != 0)
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 32);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v12 = 0;
  else
    v12 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  v7 = *(_DWORD *)(a1 + 40);
  if ((sub_22E88517C(a1) & 1) != 0)
    return 0;
  v9 = *(unsigned __int16 *)(a1 + 32);
  if ((v9 - 7) >= 6)
  {
    v10 = 0;
    if ((v9 - 13) >= 6 && v9 != 1)
      v10 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  v11 = *(_DWORD *)(a1 + 40);
  sub_22E8847B4(a1, 0x3Eu, 16, "@compatibility_alias", 0x14uLL);
  return sub_22F32B5F8(*(_QWORD *)(a1 + 88), a2, v12, v7, v10, v11);
}

void sub_22E84CD58(uint64_t a1, int a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[38];
  unsigned __int16 v14;

  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  while (1)
  {
    v5 = *(unsigned __int16 *)(a1 + 32);
    if (v5 != 5)
      break;
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v7 = *(_DWORD *)(a1 + 40);
    if (*(_WORD *)(a1 + 32) == 63)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      if (*(_WORD *)(a1 + 32) == 3)
      {
        v12 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v12 + 752))
        {
          *(_BYTE *)(v12 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v12 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        sub_22E9D1664(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v6);
        return;
      }
      if ((sub_22E88517C(a1) & 1) != 0)
        goto LABEL_19;
      v8 = *(unsigned __int16 *)(a1 + 32);
      if ((v8 - 7) >= 6)
      {
        v9 = 0;
        if ((v8 - 13) >= 6 && v8 != 1)
          v9 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v9 = 0;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v10 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    sub_22EC78D1C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, v7, 1, v6, v9, v10, 0);
    if (*(_WORD *)(a1 + 32) != 65)
    {
LABEL_19:
      sub_22E8847B4(a1, 0x3Eu, 16, "@synthesize", 0xBuLL);
      return;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  }
  if (v5 == 3)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v11 + 752))
    {
      *(_BYTE *)(v11 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9D1324(*(_QWORD *)(a1 + 88));
  }
  else
  {
    sub_22E884578(a1, (int *)v4, 1743, (uint64_t)v13);
    sub_22E3BB0B8((uint64_t)v13);
    v14 = 62;
    sub_22E885940(a1, &v14, 1, 0);
  }
}

void sub_22E84CFAC(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;

  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = *(unsigned __int16 *)(v4 + 16);
  if (v5 == 21)
  {
    sub_22E80F720(a1);
    v6 = *(unsigned __int16 *)(a1 + 32);
    if ((v6 - 7) < 6
      || ((v6 - 13) >= 6 ? (v7 = v6 == 1) : (v7 = 1), v7 || (v16 = *(_QWORD *)(a1 + 24)) == 0))
    {
      sub_22E884578(a1, (int *)v4, 1632, (uint64_t)&v28);
      v8 = v28;
      if (!v28)
      {
        v8 = (unsigned __int8 *)sub_22E3B8AAC(v29);
        v28 = v8;
      }
      v8[*v8 + 1] = 5;
      v9 = v28;
      v10 = *v28;
      *v28 = v10 + 1;
      *(_QWORD *)&v9[8 * v10 + 16] = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
      v17 = *(_QWORD *)(v16 + 16);
      if (*(_DWORD *)v17 == 5)
      {
        v18 = *(_DWORD *)(v17 + 16);
        v19 = *(unsigned __int8 *)(v17 + 20);
        if (v18 == 1935764579 && v19 == 115)
        {
          if (*(_WORD *)(a1 + 32) == 22)
          {
            sub_22E80F720(a1);
          }
          else
          {
            sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v28);
            v25 = v28;
            if (!v28)
            {
              v25 = (unsigned __int8 *)sub_22E3B8AAC(v29);
              v28 = v25;
            }
            v25[*v25 + 1] = 4;
            v26 = v28;
            v27 = *v28;
            *v28 = v27 + 1;
            *(_QWORD *)&v26[8 * v27 + 16] = 22;
            sub_22E3BB0B8((uint64_t)&v28);
            LOWORD(v28) = 22;
            sub_22E885940(a1, (unsigned __int16 *)&v28, 1, 1);
          }
          v11 = 2;
          goto LABEL_12;
        }
      }
      v21 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v21 + 312) = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(v21 + 316) = 1632;
      if (*(char *)(v21 + 311) < 0)
      {
        **(_BYTE **)(v21 + 288) = 0;
        *(_QWORD *)(v21 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v21 + 288) = 0;
        *(_BYTE *)(v21 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v28, v21);
      v22 = v28;
      if (!v28)
      {
        v22 = (unsigned __int8 *)sub_22E3B8AAC(v29);
        v28 = v22;
      }
      v22[*v22 + 1] = 5;
      v23 = v28;
      v24 = *v28;
      *v28 = v24 + 1;
      *(_QWORD *)&v23[8 * v24 + 16] = v16;
    }
    sub_22E3BB0B8((uint64_t)&v28);
    LOWORD(v28) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v28, 1, 1);
    v11 = 0;
LABEL_12:
    v5 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_14;
  }
  v11 = 0;
LABEL_14:
  if (v5 == 3)
  {
LABEL_15:
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v12 + 752))
    {
      *(_BYTE *)(v12 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v12 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9D1324(*(_QWORD *)(a1 + 88));
  }
  else
  {
    while (1)
    {
      if (sub_22E88517C(a1))
      {
        LOWORD(v28) = 62;
        sub_22E885940(a1, (unsigned __int16 *)&v28, 1, 0);
        return;
      }
      v13 = *(unsigned __int16 *)(a1 + 32);
      if ((v13 - 7) < 6 || ((v13 - 13) >= 6 ? (v14 = v13 == 1) : (v14 = 1), v14))
        v15 = 0;
      else
        v15 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
      sub_22EC78D1C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)(a1 + 40), 0, v15, 0, 0, v11);
      if (*(_WORD *)(a1 + 32) != 65)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
      if (*(_WORD *)(a1 + 32) == 3)
        goto LABEL_15;
    }
    sub_22E8847B4(a1, 0x3Eu, 16, "@dynamic", 8uLL);
  }
}

uint64_t sub_22E84D330(_QWORD *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _BYTE v19[12];
  char v20;
  _WORD __p[11];
  char v22;
  __int16 v23;
  uint64_t v24[4];

  v4 = a1[11];
  result = sub_22F32C640(v4);
  if ((_DWORD)result != -1)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 216);
    if (v7)
    {
      v8 = (*(_WORD *)(v7 + 8) & 0x7F) - 19;
      v9 = v7 - 48;
      if (v8 >= 5)
        v10 = 0;
      else
        v10 = v9;
    }
    else
    {
      v10 = 0;
    }
    v11 = (uint64_t *)a1[336];
    if (v11)
      sub_22F2E9710(v11, a2 | ((unint64_t)a2 << 32));
    else
      sub_22EAFC148(v4, *(_QWORD *)(v4 + 12888), a2 | ((unint64_t)a2 << 32), 0, 0, 0, 0);
    v12 = a1[12];
    *(_DWORD *)(v12 + 312) = a2;
    *(_DWORD *)(v12 + 316) = 1637;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v24, v12);
    v20 = 0;
    *(_QWORD *)&v19[4] = 0;
    v18 = (unsigned __int8 *)(a2 | ((unint64_t)a2 << 32));
    v19[0] = 0;
    *(_QWORD *)&__p[7] = 0;
    *(_QWORD *)&__p[3] = 0;
    v22 = 0;
    strcpy((char *)__p, "@end\n");
    v23 = 5;
    sub_22E6D82D0(v24, &v18);
    if ((char)v23 < 0)
      operator delete(*(void **)__p);
    result = sub_22E3BB0B8((uint64_t)v24);
    if (v10)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v14 = a1[12];
      *(_DWORD *)(v14 + 312) = v13;
      *(_DWORD *)(v14 + 316) = 1873;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v18, v14);
      v15 = v18;
      if (!v18)
      {
        v15 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v19);
        v18 = v15;
      }
      v15[*v15 + 1] = 2;
      v16 = v18;
      v17 = *v18;
      *v18 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = v6;
      return sub_22E3BB0B8((uint64_t)&v18);
    }
  }
  return result;
}

_DWORD *sub_22E84D518(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, unsigned int *a5, char a6)
{
  unsigned int *v10;
  int v11;
  _DWORD *v12;
  int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned __int8 v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  char v53;
  int v54;
  int v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int *v70;
  char v72;
  unsigned __int8 v73;
  int v74;
  uint64_t *v75;
  int v76;
  _BYTE v77[32];
  unsigned __int16 v78[16];
  unint64_t *v79;
  uint64_t v80;
  _QWORD v81[6];

  v81[4] = *MEMORY[0x24BDAC8D0];
  v72 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 0;
  v79 = v81;
  v80 = 0x400000000;
  v10 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v11 = 0;
  v70 = a3;
  *a3 = v10[6];
  v12 = a4 + 1;
  v75 = a4;
  while (1)
  {
    v13 = *(unsigned __int16 *)(a1 + 32);
    if ((v13 & 0xFFFE) == 0x16C)
    {
      if (v13 == 364)
        v14 = 1;
      else
        v14 = 2;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
      v76 = *(_DWORD *)(a1 + 40);
      if (a6)
      {
        v15 = v14;
        v16 = *((unsigned int *)a4 + 2);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = *v75;
          v19 = *v75 + 16 * v16;
          do
          {
            v20 = sub_22EAF43B8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, v17, *(_QWORD *)v18, *(_DWORD *)(v18 + 8), 0, 0);
            if (v21)
              v22 = 1;
            else
              v22 = v20 == 0;
            if (!v22)
            {
              v23 = v20;
              v24 = v80;
              if (v80 >= (unint64_t)HIDWORD(v80))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v24 = v80;
              }
              v79[v24] = v23;
              LODWORD(v80) = v80 + 1;
            }
            v18 += 16;
            ++v17;
          }
          while (v18 != v19);
        }
        *v12 = 0;
        a4 = v75;
        v14 = v15;
      }
      a6 = 0;
      v13 = *(unsigned __int16 *)(a1 + 32);
    }
    else
    {
      v76 = 0;
      v14 = 0;
    }
    if (v13 != 5)
    {
      if (v13 == 3)
      {
        v51 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v51 + 752))
        {
          *(_BYTE *)(v51 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v51 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        sub_22F317674(*(_QWORD *)(a1 + 88), *a4, *((unsigned int *)a4 + 2));
        v52 = 0;
        v53 = v72;
        goto LABEL_90;
      }
      sub_22E884578(a1, (int *)v10, 1634, (uint64_t)v77);
      sub_22E3BB0B8((uint64_t)v77);
      goto LABEL_66;
    }
    v25 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
    v26 = *(unsigned int *)(a1 + 40);
    if (*(_WORD *)(a1 + 32) == 61)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
      v27 = *(_DWORD *)(a1 + 40);
      if (a6)
      {
        v73 = v14;
        v74 = v11;
        v28 = v12;
        v29 = *((unsigned int *)a4 + 2);
        if ((_DWORD)v29)
        {
          v30 = 0;
          v31 = *v75;
          v32 = *v75 + 16 * v29;
          do
          {
            v33 = sub_22EAF43B8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, v30, *(_QWORD *)v31, *(_DWORD *)(v31 + 8), 0, 0);
            if (v34)
              v35 = 1;
            else
              v35 = v33 == 0;
            if (!v35)
            {
              v36 = v33;
              v37 = v80;
              if (v80 >= (unint64_t)HIDWORD(v80))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v37 = v80;
              }
              v79[v37] = v36;
              LODWORD(v80) = v80 + 1;
            }
            v31 += 16;
            ++v30;
          }
          while (v31 != v32);
        }
        v12 = v28;
        *v28 = 0;
        a4 = v75;
        v14 = v73;
        v11 = v74;
      }
      v41 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
      v43 = v42;
      v11 |= v42 != 0;
    }
    else
    {
      if (a6)
      {
        v38 = *((unsigned int *)a4 + 2);
        if (v38 >= *((unsigned int *)a4 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = *((unsigned int *)a4 + 2);
        }
        v39 = (uint64_t *)(*a4 + 16 * v38);
        *v39 = v25;
        v39[1] = v26;
        a6 = 1;
        v40 = (uint64_t *)v12;
        goto LABEL_57;
      }
      v27 = 0;
      v41 = 0;
      v43 = 0;
    }
    if (v41)
      v44 = v43 == 0;
    else
      v44 = 0;
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    v46 = sub_22EAF43B8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v14, v76, v80, v25, v26, v27, v45);
    if (v47)
      v48 = 1;
    else
      v48 = v46 == 0;
    if (v48)
    {
      a6 = 0;
      goto LABEL_58;
    }
    v49 = v46;
    v50 = v80;
    if (v80 >= (unint64_t)HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = v80;
    }
    a6 = 0;
    v79[v50] = v49;
    v40 = &v80;
LABEL_57:
    ++*(_DWORD *)v40;
LABEL_58:
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
  }
  if ((v11 & 1) != 0)
  {
LABEL_66:
    *(_DWORD *)v78 = 4718643;
    sub_22E885940(a1, v78, 2, 2);
    v54 = *(unsigned __int16 *)(a1 + 32);
    v55 = 1;
    goto LABEL_67;
  }
  if (!sub_22E8809B8(a1, *v70, a5, 1, 1))
  {
    v55 = 0;
    goto LABEL_72;
  }
  *(_OWORD *)v78 = xmmword_22F46194E;
  *(_QWORD *)&v78[7] = 0x3E004100170015;
  sub_22E885940(a1, v78, 11, 2);
  v55 = 0;
  v54 = *(unsigned __int16 *)(a1 + 32);
LABEL_67:
  if (v54 == 51)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
  }
LABEL_72:
  v53 = v72;
  if (a6)
  {
    v56 = *(unsigned __int16 *)(a1 + 32);
    if (v56 != 61 && v56 != 21)
    {
      v52 = 0;
      goto LABEL_90;
    }
    v57 = v12;
    v58 = *((unsigned int *)v75 + 2);
    if ((_DWORD)v58)
    {
      v59 = 0;
      v60 = *v75;
      v61 = *v75 + 16 * v58;
      do
      {
        v62 = sub_22EAF43B8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, v59, *(_QWORD *)v60, *(_DWORD *)(v60 + 8), 0, 0);
        if (v63)
          v64 = 1;
        else
          v64 = v62 == 0;
        if (!v64)
        {
          v65 = v62;
          v66 = v80;
          if (v80 >= (unint64_t)HIDWORD(v80))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v66 = v80;
          }
          v79[v66] = v65;
          LODWORD(v80) = v80 + 1;
        }
        v60 += 16;
        ++v59;
      }
      while (v60 != v61);
    }
    *v57 = 0;
  }
  v67 = sub_22EAF4C60(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *v70, v79, v80, *a5);
  *(_QWORD *)(a2 + 16) = v67;
  *v70 = 0;
  *a5 = 0;
  if (v55)
    v52 = 0;
  else
    v52 = v67;
LABEL_90:
  if (v79 != v81)
    free(v79);
  *(_BYTE *)(a1 + 944) = v53;
  return v52;
}

uint64_t sub_22E84DB88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, int *a6, unsigned int *a7, int a8)
{
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[18];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v14 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  *a6 = v14[6];
  v29 = v31;
  v30 = 0x800000000;
  if (*((_WORD *)v14 + 8) == 3)
  {
LABEL_2:
    v15 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v15 + 752))
    {
      *(_BYTE *)(v15 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v15 + 48) + 6) = 1;
    }
    v16 = 1;
    *(_WORD *)(a1 + 32) = 1;
    sub_22F317674(*(_QWORD *)(a1 + 88), (uint64_t)v29, v30);
  }
  else
  {
    while (1)
    {
      if (sub_22E88517C(a1))
      {
        v28 = 51;
        v16 = 1;
        sub_22E885940(a1, &v28, 1, 1);
        goto LABEL_24;
      }
      v17 = *(unsigned __int16 *)(a1 + 32);
      if ((v17 - 7) < 6 || ((v17 - 13) >= 6 ? (v18 = v17 == 1) : (v18 = 1), v18))
        v24 = 0;
      else
        v24 = *(_QWORD *)(a1 + 24);
      v19 = *v14;
      v20 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v30;
      }
      v21 = (char *)v29 + 16 * v20;
      *v21 = v24;
      v21[1] = v19;
      LODWORD(v30) = v30 + 1;
      v22 = *v14;
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = *(unsigned int *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v14);
      if (*(_WORD *)(a1 + 32) != 65)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v14);
      if (*(_WORD *)(a1 + 32) == 3)
        goto LABEL_2;
    }
    if ((sub_22E8809B8(a1, *a6, a7, a8, 0) & 1) != 0)
    {
      v16 = 1;
    }
    else
    {
      sub_22EAF5DCC(*(_QWORD **)(a1 + 88), a4, a5, (uint64_t)v29, v30, a2);
      v16 = 0;
    }
  }
LABEL_24:
  if (v29 != v31)
    free(v29);
  return v16;
}

void sub_22E84DE14(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v43;
  int v45;
  uint64_t v49;
  uint64_t v50;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  char **v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned __int8 *v89;
  unsigned __int8 *v91;
  unsigned int *v92;
  __int128 *v93;
  unsigned int *v94;
  int *v95;
  int *v96;
  int v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[32];
  _BYTE v101[32];
  _BYTE v102[36];
  unsigned int v103;
  _BYTE v104[32];
  int v105;
  unsigned int v106;
  unsigned __int8 *v107;
  __int128 v108;
  _BYTE __p[40];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[3];
  _QWORD v123[41];
  char v124;
  void *v125;
  uint64_t v126;
  _BYTE v127[64];
  void *v128;
  uint64_t v129;
  _QWORD v130[35];

  v130[32] = *MEMORY[0x24BDAC8D0];
  v128 = v130;
  v129 = 0x2000000000;
  v4 = (unsigned int *)(a1 + 16);
  v125 = v127;
  v5 = a1 + 960;
  v126 = 0x800000000;
  v105 = 0;
  v89 = (unsigned __int8 *)(a1 + 944);
  while (1)
  {
    while (1)
    {
      v6 = *(unsigned __int16 *)(a1 + 32);
      if (v6 <= 0x22)
        break;
      if (*(unsigned __int16 *)(a1 + 32) > 0x47u)
      {
        if (v6 != 72)
        {
          if (v6 - 436 < 3)
            goto LABEL_216;
          goto LABEL_35;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v103 = *(_DWORD *)(a1 + 40);
        if (*(_WORD *)(a1 + 32) == 3)
          goto LABEL_218;
        v7 = sub_22F140BE0((uint64_t)v4);
        if (!v7)
        {
          sub_22E884578(a1, (int *)v4, 1646, (uint64_t)v102);
          sub_22E3BB0B8((uint64_t)v102);
          LOWORD(v107) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v107, 1, 0);
          continue;
        }
        v8 = v7;
        if (v7 == 5)
        {
          v76 = v103;
          v77 = *(unsigned int *)(a1 + 16);
          v6 = *(unsigned __int16 *)(a1 + 32);
LABEL_217:
          if (v6 == 3)
          {
LABEL_218:
            v78 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)(v78 + 752))
            {
              *(_BYTE *)(v78 + 864) = 1;
              *(_BYTE *)(*(_QWORD *)(v78 + 48) + 6) = 1;
            }
            *(_WORD *)(a1 + 32) = 1;
            sub_22F316684(*(_QWORD *)(a1 + 88));
            goto LABEL_231;
          }
          goto LABEL_228;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        if ((v8 - 21) < 2)
        {
          if (a2 == 10)
          {
            v105 = v8;
          }
          else
          {
            v17 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v17 + 312) = v103;
            *(_DWORD *)(v17 + 316) = 1629;
            if (*(char *)(v17 + 311) < 0)
            {
              **(_BYTE **)(v17 + 288) = 0;
              *(_QWORD *)(v17 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v17 + 288) = 0;
              *(_BYTE *)(v17 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v100, v17);
            sub_22E3BB0B8((uint64_t)v100);
          }
        }
        else if (v8 == 19)
        {
          v98 = 0u;
          v99 = 0u;
          v97 = 0;
          if (*(_WORD *)(a1 + 32) != 21)
            goto LABEL_184;
          v97 = *(_DWORD *)(a1 + 16);
          v107 = v89;
          LOBYTE(v108) = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          *((_QWORD *)&v108 + 1) = a1;
          *(_DWORD *)__p = 1441813;
          strcpy(&__p[4], ">");
          *(_QWORD *)&__p[16] = 0;
          *(_QWORD *)&__p[24] = 0;
          *(_QWORD *)&__p[8] = sub_22E80F720;
          sub_22E811DE8((uint64_t)&v107);
          while (2)
          {
            v18 = *(unsigned __int16 *)(a1 + 32);
            if (v18 == 3)
            {
              v57 = *(_QWORD *)(a1 + 8);
              if (*(_QWORD *)(v57 + 752))
              {
                *(_BYTE *)(v57 + 864) = 1;
                *(_BYTE *)(*(_QWORD *)(v57 + 48) + 6) = 1;
              }
              *(_WORD *)(a1 + 32) = 1;
              sub_22E9CC678(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (unsigned int *)&v98);
              goto LABEL_183;
            }
            if (v18 - 7 < 6 || v18 <= 0x12 && ((1 << v18) & 0x7E002) != 0 || (v19 = *(_QWORD *)(a1 + 24)) == 0)
            {
LABEL_182:
              sub_22E811E8C((uint64_t)&v107);
              goto LABEL_183;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
            v20 = *(unsigned int **)(v19 + 16);
            v21 = *v20;
            if (v21 == 8)
            {
              if (*((_QWORD *)v20 + 2) != 0x796C6E6F64616572)
              {
                if (*((_QWORD *)v20 + 2) != 0x656C62616C6C756ELL)
                  goto LABEL_196;
                v22 = v98;
                if ((v98 & 0x80000) != 0)
                {
                  sub_22E850828(*(_QWORD *)(a1 + 96), (uint64_t)&v98, 1, *(_DWORD *)(a1 + 16));
                  v22 = v98;
                }
                v23 = *v4;
                v24 = v22 & 0xFDFFFFFF;
                v25 = 17301504;
LABEL_60:
                v26 = v24 | v25;
LABEL_61:
                *(_QWORD *)&v98 = __PAIR64__(v23, v26);
                goto LABEL_176;
              }
              v28 = v98 | 0x80;
              goto LABEL_175;
            }
            v27 = 0;
            switch((int)v21)
            {
              case 4:
                if (v20[4] == 2037411683)
                {
                  v28 = v98 | 0x1000;
                }
                else
                {
                  if (v20[4] != 1801545079)
                    goto LABEL_110;
                  v28 = v98 | 0x10000;
                }
                goto LABEL_175;
              case 5:
              case 8:
                goto LABEL_120;
              case 6:
                if (v20[4] == 1769173857 && *((_WORD *)v20 + 10) == 28263)
                {
                  v28 = v98 | 0x200;
                  goto LABEL_175;
                }
                if (v20[4] == 1635018098 && *((_WORD *)v20 + 10) == 28265)
                {
                  v28 = v98 | 0x800;
                  goto LABEL_175;
                }
                if (v20[4] == 1869771891 && *((_WORD *)v20 + 10) == 26478)
                {
                  v28 = v98 | 0x20000;
                  goto LABEL_175;
                }
                if (v20[4] == 1836020833 && *((_WORD *)v20 + 10) == 25449)
                {
                  v28 = v98 | 0x8000;
                  goto LABEL_175;
                }
                if ((v20[4] != 1953785191 || *((_WORD *)v20 + 10) != 29285)
                  && (v20[4] != 1953785203 || *((_WORD *)v20 + 10) != 29285))
                {
                  v27 = 1;
                  goto LABEL_111;
                }
                v54 = *((unsigned __int8 *)v20 + 16);
                if (v54 == 115)
                  v55 = 1631;
                else
                  v55 = 1630;
                if (sub_22E8847B4(a1, 0x3Fu, v55, "", 0))
                  goto LABEL_202;
                if (*(_WORD *)(a1 + 32) == 3)
                {
                  v71 = *(_QWORD *)(a1 + 8);
                  if (*(_QWORD *)(v71 + 752))
                  {
                    *(_BYTE *)(v71 + 864) = 1;
                    *(_BYTE *)(*(_QWORD *)(v71 + 48) + 6) = 1;
                  }
                  *(_WORD *)(a1 + 32) = 1;
                  v72 = *(char ***)(a1 + 88);
                  if (v54 == 115)
                    sub_22E9CE1F4(v72);
                  else
                    sub_22E9CD988(v72);
                  goto LABEL_183;
                }
                v106 = 0;
                v56 = sub_22E8506D4(a1, &v106);
                if (!v56)
                {
                  sub_22E884578(a1, (int *)v4, 1633, (uint64_t)&v91);
                  v73 = v91;
                  if (!v91)
                  {
                    v73 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v92);
                    v91 = v73;
                  }
                  v73[*v73 + 1] = 2;
                  v74 = v91;
                  v75 = *v91;
                  *v91 = v75 + 1;
                  *(_QWORD *)&v74[8 * v75 + 16] = v54 == 115;
                  goto LABEL_201;
                }
                if (v54 == 115)
                {
                  LODWORD(v98) = v98 | 0x4000;
                  *(_QWORD *)&v99 = v56;
                  HIDWORD(v99) = v106;
                  if (sub_22E8847B4(a1, 0x3Du, 17, "", 0))
                    goto LABEL_202;
                }
                else
                {
                  LODWORD(v98) = v98 | 0x100;
                  *((_QWORD *)&v98 + 1) = v56;
                  DWORD2(v99) = v106;
                }
LABEL_176:
                if (*(_WORD *)(a1 + 32) != 65)
                  goto LABEL_182;
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                continue;
              case 7:
                goto LABEL_112;
              case 9:
                if (*((_QWORD *)v20 + 2) == 0x7469727764616572 && *((_BYTE *)v20 + 24) == 101)
                {
                  v28 = v98 | 0x400;
                  goto LABEL_175;
                }
                if (*((_QWORD *)v20 + 2) == 0x696D6F74616E6F6ELL && *((_BYTE *)v20 + 24) == 99)
                {
                  v28 = v98 | 0x2000;
                  goto LABEL_175;
                }
LABEL_110:
                v27 = 0;
LABEL_111:
                if (v21 == 7)
                {
LABEL_112:
                  if (v20[4] == 1852731246 && *(unsigned int *)((char *)v20 + 19) == 1819047278)
                  {
                    v43 = v98;
                    if ((v98 & 0x80000) != 0)
                    {
                      sub_22E850828(*(_QWORD *)(a1 + 96), (uint64_t)&v98, 0, *(_DWORD *)(a1 + 16));
                      v43 = v98;
                    }
                    v23 = *v4;
                    v26 = v43 & 0xFCF7FFFF | 0x80000;
                    goto LABEL_61;
                  }
                  goto LABEL_127;
                }
LABEL_120:
                if ((_DWORD)v21 == 5)
                {
                  if (v20[4] == 1935764579 && *((_BYTE *)v20 + 20) == 115)
                  {
                    v28 = v98 | 0x200000;
                    goto LABEL_175;
                  }
LABEL_138:
                  v45 = 0;
                  goto LABEL_139;
                }
                if ((_DWORD)v21 != 15)
                {
                  if ((_DWORD)v21 == 16)
                  {
                    if (*((_QWORD *)v20 + 2) == 0x736E755F6C6C756ELL && *((_QWORD *)v20 + 3) == 0x6465696669636570)
                    {
                      v53 = v98;
                      if ((v98 & 0x80000) != 0)
                      {
                        sub_22E850828(*(_QWORD *)(a1 + 96), (uint64_t)&v98, 2, *(_DWORD *)(a1 + 16));
                        v53 = v98;
                      }
                      v23 = *v4;
                      v24 = v53 & 0xFCFFFFFF;
                      v25 = 34078720;
                      goto LABEL_60;
                    }
LABEL_127:
                    if ((v27 & 1) == 0)
                      goto LABEL_196;
                    v45 = 0;
                    goto LABEL_140;
                  }
                  goto LABEL_138;
                }
                if (*((_QWORD *)v20 + 2) == 0x7365725F6C6C756ELL
                  && *(_QWORD *)((char *)v20 + 23) == 0x656C626174746573)
                {
                  v52 = v98;
                  if ((v98 & 0x80000) != 0)
                  {
                    sub_22E850828(*(_QWORD *)(a1 + 96), (uint64_t)&v98, 2, *(_DWORD *)(a1 + 16));
                    v52 = v98;
                  }
                  v28 = v52 & 0xFCE7FFFF | 0x2180000;
                  DWORD1(v98) = *v4;
                  goto LABEL_175;
                }
                v45 = 1;
LABEL_139:
                if (!v27)
                  goto LABEL_144;
LABEL_140:
                if (v20[4] == 1701996900 && *((_WORD *)v20 + 10) == 29795)
                {
                  v28 = v98 | 0x400000;
                  goto LABEL_175;
                }
LABEL_144:
                if (v45)
                {
                  v49 = *((_QWORD *)v20 + 2);
                  v50 = *(_QWORD *)((char *)v20 + 23);
                  if (v49 == 0x7373657270707573 && v50 == 0x7463657269645F73)
                  {
                    v28 = v98 | 0x800000;
LABEL_175:
                    LODWORD(v98) = v28;
                    goto LABEL_176;
                  }
                }
LABEL_196:
                v67 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v67 + 312) = *(_DWORD *)(a1 + 40);
                *(_DWORD *)(v67 + 316) = 1632;
                if (*(char *)(v67 + 311) < 0)
                {
                  **(_BYTE **)(v67 + 288) = 0;
                  *(_QWORD *)(v67 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v67 + 288) = 0;
                  *(_BYTE *)(v67 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v91, v67);
                v68 = v91;
                if (!v91)
                {
                  v68 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v92);
                  v91 = v68;
                }
                v68[*v68 + 1] = 5;
                v69 = v91;
                v70 = *v91;
                *v91 = v70 + 1;
                *(_QWORD *)&v69[8 * v70 + 16] = v19;
LABEL_201:
                sub_22E3BB0B8((uint64_t)&v91);
LABEL_202:
                LOWORD(v91) = 22;
                sub_22E885940(a1, (unsigned __int16 *)&v91, 1, 1);
LABEL_183:
                *v107 = v108;
LABEL_184:
                LOBYTE(v106) = 0;
                v91 = (unsigned __int8 *)a1;
                v92 = &v103;
                v93 = &v98;
                v94 = &v106;
                v95 = &v97;
                v96 = &v105;
                *(_QWORD *)__p = 0;
                *(_QWORD *)&__p[8] = 0;
                *((_QWORD *)&v108 + 1) = 0;
                v107 = 0;
                *(_QWORD *)&__p[16] = v5;
                *(_OWORD *)&__p[24] = 0u;
                v110 = 0u;
                v111 = 0u;
                v112 = 0u;
                v113 = 0u;
                v114 = 0u;
                v115 = 0u;
                v116 = 0u;
                v117 = 0u;
                v118 = 0u;
                v119 = 0;
                v58 = *(_QWORD *)(a1 + 88);
                v120 = 0;
                v121 = v58;
                v122[0] = 0;
                v122[1] = v123;
                v122[2] = 0x400000000;
                v59 = *(_QWORD *)(v58 + 3200);
                *(_QWORD *)(v58 + 3200) = v122;
                v123[40] = v59;
                v124 = 0;
                sub_22E82161C(a1, (unint64_t)&v107, (void (*)(uint64_t, unint64_t *, uint64_t *))sub_22E853A78, (uint64_t)&v91, 0);
                sub_22E8847B4(a1, 0x3Eu, 1532, "", 0);
                sub_22E828C30((uint64_t)&v121);
                if (DWORD1(v111))
                  free(*((void **)&v110 + 1));
                sub_22E8D1BC4(*(uint64_t *)&__p[16], (uint64_t)&__p[16]);
                sub_22E80F94C((uint64_t *)&__p[24]);
                sub_22E80F94C((uint64_t *)&__p[8]);
                break;
              default:
                if ((_DWORD)v21 != 17)
                  goto LABEL_120;
                v29 = *((_QWORD *)v20 + 2);
                v30 = *((_QWORD *)v20 + 3);
                v31 = *((unsigned __int8 *)v20 + 32);
                if (v29 != 0x755F656661736E75 || v30 != 0x656E69617465726ELL || v31 != 100)
                  goto LABEL_196;
                v28 = v98 | 0x40000;
                goto LABEL_175;
            }
            break;
          }
        }
        else
        {
          if ((v8 - 6) < 2)
          {
            v60 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v60 + 312) = v103;
            *(_DWORD *)(v60 + 316) = 1637;
            if (*(char *)(v60 + 311) < 0)
            {
              **(_BYTE **)(v60 + 288) = 0;
              *(_QWORD *)(v60 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v60 + 288) = 0;
              *(_BYTE *)(v60 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v91, v60);
            *(_QWORD *)((char *)&v108 + 4) = 0;
            BYTE12(v108) = 0;
            v107 = (unsigned __int8 *)(v103 | ((unint64_t)v103 << 32));
            LOBYTE(v108) = 0;
            memset(&__p[6], 0, 17);
            strcpy(__p, "@end\n");
            *(_WORD *)&__p[23] = 5;
            sub_22E6D82D0((uint64_t *)&v91, &v107);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            sub_22E3BB0B8((uint64_t)&v91);
            v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
            v62 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v62 + 312) = v61;
            *(_DWORD *)(v62 + 316) = 1873;
            if (*(char *)(v62 + 311) < 0)
            {
              **(_BYTE **)(v62 + 288) = 0;
              *(_QWORD *)(v62 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v62 + 288) = 0;
              *(_BYTE *)(v62 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v107, v62);
            v63 = sub_22F32C640(*(_QWORD *)(a1 + 88));
            v64 = v107;
            if (!v107)
            {
              v64 = (unsigned __int8 *)sub_22E3B8AAC(v108);
              v107 = v64;
            }
            v64[*v64 + 1] = 2;
            v65 = v107;
            v66 = *v107;
            *v107 = v66 + 1;
            *(_QWORD *)&v65[8 * v66 + 16] = v63;
            sub_22E3BB0B8((uint64_t)&v107);
LABEL_27:
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
            continue;
          }
          v9 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v9 + 312) = v103;
          *(_DWORD *)(v9 + 316) = 1635;
          if (*(char *)(v9 + 311) < 0)
          {
            **(_BYTE **)(v9 + 288) = 0;
            *(_QWORD *)(v9 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v9 + 288) = 0;
            *(_BYTE *)(v9 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v101, v9);
          sub_22E3BB0B8((uint64_t)v101);
          LODWORD(v107) = 4718616;
          sub_22E885940(a1, (unsigned __int16 *)&v107, 2, 1);
        }
      }
      else
      {
        if (v6 != 35)
        {
          if (v6 == 62)
            goto LABEL_27;
          goto LABEL_35;
        }
LABEL_21:
        v10 = v105;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v11 = sub_22E84F92C(a1, *(_DWORD *)(a1 + 40), v6, v10, 0);
        if (v11)
        {
          v12 = v11;
          v13 = v129;
          if (v129 >= (unint64_t)HIDWORD(v129))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = v129;
          }
          *((_QWORD *)v128 + v13) = v12;
          LODWORD(v129) = v129 + 1;
        }
        if (sub_22E884BB4(a1, 1528))
        {
          LOWORD(v107) = 72;
          sub_22E885940(a1, (unsigned __int16 *)&v107, 1, 3);
          if (*(_WORD *)(a1 + 32) == 62)
            goto LABEL_27;
        }
      }
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0x17u)
    {
      if (v6 == 32)
        goto LABEL_21;
      if (v6 != 24)
        goto LABEL_35;
      v77 = 0;
      v76 = 0;
LABEL_228:
      if (sub_22F140B7C((uint64_t)v4, 5))
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      }
      else
      {
        sub_22E884578(a1, (int *)v4, 1637, (uint64_t)&v91);
        v81 = *(unsigned int *)(a1 + 16);
        *(_QWORD *)((char *)&v108 + 4) = 0;
        BYTE12(v108) = 0;
        v107 = (unsigned __int8 *)(v81 | (v81 << 32));
        LOBYTE(v108) = 0;
        *(_WORD *)&__p[22] = 1536;
        *(_OWORD *)&__p[6] = 0uLL;
        qmemcpy(__p, "\n@end\n", 6);
        __p[24] = 0;
        sub_22E6D82D0((uint64_t *)&v91, &v107);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_22E3BB0B8((uint64_t)&v91);
        v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
        v83 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v83 + 312) = v82;
        *(_DWORD *)(v83 + 316) = 1873;
        if (*(char *)(v83 + 311) < 0)
        {
          **(_BYTE **)(v83 + 288) = 0;
          *(_QWORD *)(v83 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v83 + 288) = 0;
          *(_BYTE *)(v83 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v107, v83);
        v84 = sub_22F32C640(*(_QWORD *)(a1 + 88));
        v85 = v107;
        if (!v107)
        {
          v85 = (unsigned __int8 *)sub_22E3B8AAC(v108);
          v107 = v85;
        }
        v85[*v85 + 1] = 2;
        v86 = v107;
        v87 = *v107;
        *v107 = v87 + 1;
        *(_QWORD *)&v86[8 * v87 + 16] = v84;
        sub_22E3BB0B8((uint64_t)&v107);
        v76 = *v4;
        v77 = *v4;
      }
      sub_22EAFC148(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v76 | (unint64_t)(v77 << 32), (unint64_t *)v128, v129, (uint64_t)v125, v126);
      goto LABEL_231;
    }
    if (v6 == 21)
    {
      sub_22E884578(a1, (int *)v4, 1516, (uint64_t)v104);
      sub_22E3BB0B8((uint64_t)v104);
      sub_22E84F92C(a1, *(_DWORD *)(a1 + 16), 35, v105, 0);
      continue;
    }
    if (v6 == 1)
    {
LABEL_216:
      v76 = 0;
      v77 = 0;
      goto LABEL_217;
    }
    if (v6 == 3)
      break;
LABEL_35:
    v107 = 0;
    *(_QWORD *)&v108 = 0;
    *((_QWORD *)&v108 + 1) = v5;
    *(_QWORD *)__p = 0;
    if (v6 == 165 || v6 == 120)
    {
      LODWORD(v91) = 0;
      v14 = sub_22E817D84(a1, 0, &v91, &v107, 0);
    }
    else
    {
      v14 = sub_22E888D40(a1, &v107, 0, 3);
    }
    v15 = v14;
    v16 = v126;
    if (v126 >= (unint64_t)HIDWORD(v126))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = v126;
    }
    *((_QWORD *)v125 + v16) = v15;
    LODWORD(v126) = v126 + 1;
    sub_22E8D1BC4(*((uint64_t *)&v108 + 1), (uint64_t)&v108 + 8);
    sub_22E80F94C((uint64_t *)__p);
    sub_22E80F94C((uint64_t *)&v108);
  }
  v79 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v79 + 752))
  {
    *(_BYTE *)(v79 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v79 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  if (*(_QWORD *)(a1 + 2688))
    v80 = 3;
  else
    v80 = 2;
  sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v80);
LABEL_231:
  if (v125 != v127)
    free(v125);
  if (v128 != v130)
    free(v128);
}

void sub_22E84EEEC(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, char a11)
{
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t *v67;
  char v68;
  char v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  _QWORD v88[4];
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  unint64_t v103[5];
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE v128[16];
  uint64_t *v129;
  uint64_t v130;
  _QWORD v131[6];

  v131[4] = *MEMORY[0x24BDAC8D0];
  v17 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v83 = *(_DWORD *)(v17 + 24);
  v129 = v131;
  v130 = 0x400000000;
  v18 = *(unsigned __int16 *)(v17 + 16);
  if (v18 == 5)
  {
    while (1)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(v19 + 2816);
      v21 = v20 >= *(unsigned int *)(v19 + 2784) ? sub_22F162D2C(v19, 1u) : *(_QWORD *)(v19 + 2776) + 24 * v20;
      if (*(_WORD *)(v21 + 16) != 65)
      {
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v22 + 2816);
        v24 = v23 >= *(unsigned int *)(v22 + 2784) ? sub_22F162D2C(v22, 1u) : *(_QWORD *)(v22 + 2776) + 24 * v23;
        if (*(_WORD *)(v24 + 16) != 51)
        {
          v25 = *(_QWORD *)(a1 + 8);
          v26 = *(_QWORD *)(v25 + 2816);
          v27 = v26 >= *(unsigned int *)(v25 + 2784) ? sub_22F162D2C(v25, 1u) : *(_QWORD *)(v25 + 2776) + 24 * v26;
          if (*(_WORD *)(v27 + 16) != 52)
            break;
        }
      }
      v28 = *(unsigned __int16 *)(a1 + 32);
      if ((v28 - 7) < 6 || ((v28 - 13) >= 6 ? (v29 = v28 == 1) : (v29 = 1), v29))
        v33 = 0;
      else
        v33 = *(_QWORD *)(a1 + 24);
      v30 = v130;
      if (v130 >= (unint64_t)HIDWORD(v130))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v130;
      }
      v129[v30] = v33;
      LODWORD(v130) = v130 + 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
      v31 = *(_DWORD *)(a1 + 40);
      v32 = *(unsigned int *)(a8 + 8);
      if (v32 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = *(unsigned int *)(a8 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a8 + 4 * v32) = v31;
      ++*(_DWORD *)(a8 + 8);
      if (*(_WORD *)(a1 + 32) != 65)
      {
        LODWORD(v103[0]) = 0;
        sub_22E8809B8(a1, v83, (unsigned int *)v103, a10, 1);
        sub_22EAF6208(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, v83, v129, v130, *(_QWORD *)a8, *(unsigned int *)(a8 + 8), v103[0], (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a9, a11);
        goto LABEL_117;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
      v18 = *(unsigned __int16 *)(a1 + 32);
      if (v18 != 5)
        goto LABEL_30;
    }
    v18 = *(unsigned __int16 *)(a1 + 32);
  }
LABEL_30:
  if (v18 == 3)
  {
    v103[0] = (unint64_t)&v103[2];
    v103[1] = 0x400000000;
    v34 = v130;
    if ((_DWORD)v130)
    {
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = v129[v36];
        v38 = *(unsigned int *)(*(_QWORD *)a8 + 4 * v36);
        if (v35 >= HIDWORD(v103[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = v103[1];
        }
        v39 = (uint64_t *)(v103[0] + 16 * v35);
        *v39 = v37;
        v39[1] = v38;
        v35 = ++LODWORD(v103[1]);
        ++v36;
      }
      while (v34 != v36);
    }
    else
    {
      v35 = 0;
    }
    if (a2 >= 0x10)
    {
      v61 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (v61 && *(_BYTE *)(v61 + 16) == 57)
        a2 = *(_QWORD *)(v61 + 8);
    }
    else
    {
      a2 = 0;
    }
    v62 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v62 + 752))
    {
      *(_BYTE *)(v62 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v62 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    if (a2 >= 0x10)
    {
      if ((sub_22F409F60(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      {
        sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0xCu);
LABEL_75:
        v63 = (void *)v103[0];
        if ((unint64_t *)v103[0] == &v103[2])
          goto LABEL_117;
LABEL_116:
        free(v63);
        goto LABEL_117;
      }
      v35 = v103[1];
    }
    sub_22F317674(*(_QWORD *)(a1 + 88), v103[0], v35);
    goto LABEL_75;
  }
  v126 = v128;
  v127 = 0x200000000;
  v123 = &v125;
  v124 = 0x200000000;
  v85 = v130;
  if ((_DWORD)v130)
  {
    v40 = 0;
    v86 = 0;
    v84 = 0;
    v41 = 0;
    v80 = 0;
    v87 = 0;
    do
    {
      v42 = sub_22EA003D8(*(_QWORD **)(a1 + 88), v129[v40], *(_DWORD *)(*(_QWORD *)a8 + 4 * v40), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
      if (v42)
      {
        v88[3] = 0;
        v89 = 0;
        v88[2] = 0;
        v88[0] = 0;
        v90 = a1 + 960;
        v102 = 0;
        v91 = 0u;
        v92 = 0u;
        v93 = 0u;
        v94 = 0u;
        v95 = 0u;
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        v100 = 0u;
        v101 = 0;
        v48 = *(_QWORD *)(a1 + 88);
        DWORD2(v95) = *(_DWORD *)(*(_QWORD *)a8 + 4 * v40);
        DWORD1(v96) = DWORD2(v95);
        v88[0] = 114688;
        v88[1] = v42;
        v103[0] = (unint64_t)v88;
        v105 = 0;
        memset(&v103[1], 0, 32);
        v104 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 5;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        v112 = &v114;
        v113 = 0x800000000;
        v115 &= 0xFC00u;
        v116 = 0;
        v117 = 0;
        v118 = a1 + 960;
        v122 = 0;
        v120 = 0u;
        v121 = 0u;
        v119 = 0u;
        v49 = sub_22EE89FC0(v48, *(_QWORD *)(v48 + 12888), (uint64_t)v103, v43, v44, v45, v46, v47);
        if (v50 || (v51 = v49) == 0)
        {
          v53 = v129[v40];
          v54 = v127;
          if (v127 >= (unint64_t)HIDWORD(v127))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v54 = v127;
          }
          *(_QWORD *)&v126[8 * v54] = v53;
          LODWORD(v127) = v127 + 1;
          v55 = *(_DWORD *)(*(_QWORD *)a8 + 4 * v40);
          v56 = v124;
          if (v124 >= (unint64_t)HIDWORD(v124))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v56 = v124;
          }
          *((_DWORD *)v123 + v56) = v55;
          LODWORD(v124) = v124 + 1;
          v86 = 1;
        }
        else
        {
          v52 = *(unsigned int *)(a4 + 8);
          if (v52 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v52 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v52) = v51;
          ++*(_DWORD *)(a4 + 8);
          if (!v41)
          {
            v41 = v129[v40];
            v87 = *(_DWORD *)(*(_QWORD *)a8 + 4 * v40);
          }
        }
        sub_22E827F78((uint64_t)v103);
        if (DWORD1(v93))
          free(*((void **)&v92 + 1));
        sub_22E8D1BC4(v90, (uint64_t)&v90);
        sub_22E80F94C((uint64_t *)&v91);
        sub_22E80F94C(&v89);
      }
      else
      {
        if (sub_22EC65CE0(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 3344), v129[v40], *(_DWORD *)(*(_QWORD *)a8 + 4 * v40), 11, 0))
        {
          if (!v84)
          {
            v84 = v129[v40];
            v80 = *(_DWORD *)(*(_QWORD *)a8 + 4 * v40);
          }
        }
        else
        {
          v57 = v129[v40];
          v58 = v127;
          if (v127 >= (unint64_t)HIDWORD(v127))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v58 = v127;
          }
          *(_QWORD *)&v126[8 * v58] = v57;
          LODWORD(v127) = v127 + 1;
          v59 = *(_DWORD *)(*(_QWORD *)a8 + 4 * v40);
          v60 = v124;
          if (v124 >= (unint64_t)HIDWORD(v124))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v60 = v124;
          }
          *((_DWORD *)v123 + v60) = v59;
          LODWORD(v124) = v124 + 1;
        }
        v86 = 1;
      }
      ++v40;
    }
    while (v85 != v40);
  }
  else
  {
    v87 = 0;
    v80 = 0;
    v41 = 0;
    v84 = 0;
    v86 = 0;
  }
  while (1)
  {
    v64 = *(_DWORD *)(a1 + 16);
    v65 = *(_QWORD *)(a1 + 24);
    v66 = *(unsigned __int16 *)(a1 + 32);
    v67 = (unint64_t *)sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    v69 = v68;
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
      if (!v69)
      {
        if (v67)
        {
          v70 = *(_DWORD *)(a1 + 40);
          if (v70)
          {
            v67 = sub_22F34ACC0(*(_QWORD **)(a1 + 88), (unint64_t)v67, v70);
            v69 = v76;
          }
        }
      }
    }
    if (v69 || !v67)
    {
      v86 = 1;
    }
    else
    {
      v71 = *(unsigned int *)(a4 + 8);
      if (v71 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v71) = v67;
      ++*(_DWORD *)(a4 + 8);
      if (v66 == 1)
        v72 = 0;
      else
        v72 = v65;
      if ((v66 - 13) >= 6)
        v73 = v72;
      else
        v73 = 0;
      if ((v66 - 7) >= 6)
        v74 = v73;
      else
        v74 = 0;
      v75 = v87;
      if (!v41)
        v75 = v64;
      v87 = v75;
      if (!v41)
        v41 = v74;
    }
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
  }
  if (v84 && v41)
    sub_22F32B9EC(*(_QWORD **)(a1 + 88), v84, v80, v41, v87, 0);
  v103[0] = 0;
  if ((_DWORD)v127 && (_DWORD)v124)
  {
    v77 = 0;
    v78 = 0;
    v79 = 8 * v124;
    do
    {
      sub_22EA01B98(*(_QWORD *)(a1 + 88), (uint64_t *)&v126[v78], *(unsigned int *)((char *)v123 + v77), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, v103, 0);
      v78 += 8;
      v77 += 4;
    }
    while (v79 != v78);
  }
  LODWORD(v88[0]) = 0;
  sub_22E8809B8(a1, v83, (unsigned int *)v88, a10, 1);
  if ((v86 & 1) != 0)
  {
    *(_DWORD *)(a4 + 8) = 0;
  }
  else
  {
    *a3 = v83;
    *a5 = v88[0];
  }
  if (v123 != &v125)
    free(v123);
  v63 = v126;
  if (v126 != v128)
    goto LABEL_116;
LABEL_117:
  if (v129 != v131)
    free(v129);
}

unsigned int *sub_22E84F92C(uint64_t a1, unsigned int a2, int a3, int a4, char a5)
{
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  uint64_t *v28;
  char *v29;
  uint64_t **v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  uint64_t v72;
  int v74;
  unsigned int v75;
  char v76;
  int v77;
  int *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  _BYTE v98[32];
  __n128 v99;
  uint64_t v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD v109[8];
  uint64_t *v110;
  __int128 v111;
  _QWORD v112[7];
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[864];
  void *v131;
  uint64_t v132;
  _BYTE v133[48];
  void *v134;
  uint64_t v135;
  _BYTE v136[96];
  void *v137;
  uint64_t v138;
  _BYTE v139[256];
  _QWORD *v140;
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a1 + 88);
  v140 = v7;
  v141[0] = 0;
  v141[1] = &v142;
  v141[2] = 0x400000000;
  v8 = v7[400];
  v7[400] = v141;
  v143 = v8;
  v144 = 0;
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 == 3)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v10 + 752))
    {
      *(_BYTE *)(v10 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v10 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9D1F2C((void **)v7, v7[1611], (a3 == 35) | 0x100, 0);
    v11 = 0;
    goto LABEL_127;
  }
  memset(v109, 0, sizeof(v109));
  if (v9 == 21)
    v79 = sub_22F2E9C3C(a1, (uint64_t)v109, 2, 0);
  else
    v79 = 0;
  v106 = 0;
  v105 = 0;
  v107 = a1 + 960;
  v108 = 0;
  sub_22E8220E8(a1, ((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x4000) != 0) | 4, &v105, 0);
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v15 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v15 + 752))
    {
      *(_BYTE *)(v15 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v15 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9D1F2C(*(void ***)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (a3 == 35) | 0x100, v79);
LABEL_11:
    v11 = 0;
    goto LABEL_126;
  }
  v78 = (int *)(a1 + 16);
  v104 = 0;
  v16 = sub_22E8506D4(a1, &v104);
  v17 = *(unsigned __int16 *)(a1 + 32);
  if (v16)
  {
    v76 = a5;
    v137 = v139;
    v138 = 0x800000000;
    if (v17 != 61)
    {
      sub_22E8220E8(a1, ((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x4000) != 0) | 4, &v105, 0);
      v11 = (unsigned int *)sub_22EAFE2E4(*(_QWORD **)(a1 + 88), *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)(a1 + 16), a3, v109, v79, v61, &v104, 1, v16 | 1, 0, (uint64_t)v137, v138, (uint64_t)&v105, a4, 0, a5);
      if (!v144)
      {
        sub_22EA7E84C(v140, v143, v11);
        v144 = 1;
      }
      goto LABEL_120;
    }
    v74 = a4;
    v75 = a2;
    v77 = a3;
  }
  else
  {
    if (v17 != 61)
    {
      sub_22E884578(a1, v78, 1524, (uint64_t)&v110);
      v62 = a2 | ((unint64_t)*(unsigned int *)(a1 + 16) << 32);
      v63 = (uint64_t)v110;
      if (!v110)
      {
        v63 = sub_22E3B8AAC(v111);
        v110 = (uint64_t *)v63;
      }
      sub_22E4D6448(v63 + 336, v62, 1);
      sub_22E3BB0B8((uint64_t)&v110);
      LOWORD(v110) = 72;
      sub_22E885940(a1, (unsigned __int16 *)&v110, 1, 3);
      goto LABEL_11;
    }
    v76 = a5;
    v74 = a4;
    v75 = a2;
    v77 = a3;
    v137 = v139;
    v138 = 0x800000000;
  }
  v134 = v136;
  v135 = 0xC00000000;
  v131 = v133;
  v132 = 0xC00000000;
  v128 = v130;
  v129 = 0xC00000000;
  sub_22E885C30(a1, 776);
  v102 = a1 + 960;
  v103 = 0;
  do
  {
    v80 = 0;
    v81 = 0;
    v82 = a1 + 960;
    v83 = 0;
    LODWORD(v111) = 0;
    *((_QWORD *)&v111 + 1) = 0;
    LODWORD(v112[0]) &= 0xFC000000;
    *(_OWORD *)((char *)v112 + 4) = 0u;
    memset((char *)&v112[2] + 4, 0, 28);
    if ((sub_22E8847B4(a1, 0x3Du, 15, "", 0) & 1) != 0)
      goto LABEL_19;
    *((_QWORD *)&v111 + 1) = 0;
    if (*(_WORD *)(a1 + 32) == 21)
      *((_QWORD *)&v111 + 1) = sub_22F2E9C3C(a1, (uint64_t)v112, 3, (uint64_t)&v80);
    sub_22E8220E8(a1, ((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x4000) != 0) | 4, &v80, 0);
    v112[4] = v80;
    sub_22E853918(&v112[5], (unint64_t *)&v81);
    if (*(_WORD *)(a1 + 32) == 3)
    {
      v19 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v19 + 752))
      {
        *(_BYTE *)(v19 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v19 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      v20 = v135;
      if (v135 >= (unint64_t)HIDWORD(v135))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v135;
      }
      v21 = v77 == 35;
      *((_QWORD *)v134 + v20) = v16;
      v22 = (v135 + 1);
      LODWORD(v135) = v135 + 1;
      v23 = *(_QWORD *)(a1 + 88);
      v24 = *(_QWORD *)(v23 + 12888);
      v25 = v134;
      v18 = 1;
      v26 = 1;
LABEL_28:
      sub_22E9D70F0(v23, v24, v21, v26, v79, (uint64_t)v25, v22);
      goto LABEL_29;
    }
    if ((sub_22E88517C(a1) & 1) != 0)
      goto LABEL_19;
    v27 = *(unsigned __int16 *)(a1 + 32);
    if ((v27 - 7) >= 6)
    {
      v28 = 0;
      if ((v27 - 13) >= 6 && v27 != 1)
        v28 = *(uint64_t **)(a1 + 24);
    }
    else
    {
      v28 = 0;
    }
    v110 = v28;
    LODWORD(v111) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = v111;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v78);
    v29 = (char *)v128;
    if (v129 >= HIDWORD(v129))
    {
      if (v128 <= &v110 && (char *)v128 + 72 * v129 > (char *)&v110)
      {
        v56 = (char *)&v110 - (_BYTE *)v128;
        sub_22F2EB398((uint64_t)&v128);
        v29 = (char *)v128;
        v30 = (uint64_t **)((char *)v128 + v56);
      }
      else
      {
        sub_22F2EB398((uint64_t)&v128);
        v30 = &v110;
        v29 = (char *)v128;
      }
    }
    else
    {
      v30 = &v110;
    }
    v31 = &v29[72 * v129];
    v32 = *(_OWORD *)v30;
    v33 = *((_OWORD *)v30 + 1);
    v34 = *((_OWORD *)v30 + 2);
    *((_QWORD *)v31 + 6) = v30[6];
    *((_OWORD *)v31 + 1) = v33;
    *((_OWORD *)v31 + 2) = v34;
    *(_OWORD *)v31 = v32;
    *((_QWORD *)v31 + 7) = v30[7];
    sub_22E828D58((uint64_t *)v31 + 8, (uint64_t *)v30 + 8);
    LODWORD(v129) = v129 + 1;
    v35 = v135;
    if (v135 >= (unint64_t)HIDWORD(v135))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v35 = v135;
    }
    *((_QWORD *)v134 + v35) = v16;
    LODWORD(v135) = v135 + 1;
    v36 = v104;
    v37 = v132;
    if (v132 >= (unint64_t)HIDWORD(v132))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v132;
    }
    *((_DWORD *)v131 + v37) = v36;
    LODWORD(v132) = v132 + 1;
    sub_22E8D1C2C((uint64_t)&v102, (uint64_t)&v82);
    if ((v83 & 4) != 0)
    {
      if ((v83 & 0xFFFFFFFFFFFFFFF8) != 0)
        *(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
    }
    else
    {
      v83 = 0;
    }
    if (*(_WORD *)(a1 + 32) == 3)
    {
      v38 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v38 + 752))
      {
        *(_BYTE *)(v38 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v38 + 48) + 6) = 1;
      }
      v21 = v77 == 35;
      v18 = 1;
      *(_WORD *)(a1 + 32) = 1;
      v23 = *(_QWORD *)(a1 + 88);
      v24 = *(_QWORD *)(v23 + 12888);
      v25 = v134;
      v22 = v135;
      v26 = 0;
      goto LABEL_28;
    }
    v39 = sub_22E8506D4(a1, &v104);
    if (v39)
    {
      v16 = v39;
    }
    else
    {
      if (*(_WORD *)(a1 + 32) != 61)
      {
        v16 = 0;
LABEL_19:
        v18 = 3;
        goto LABEL_29;
      }
      v40 = *(_DWORD *)(a1 + 16);
      if (sub_22F141A3C(v111, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56)) == v40)
      {
        v41 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v41 + 312) = v111;
        *(_DWORD *)(v41 + 316) = 1965;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v99, v41);
        v42 = v110;
        v43 = (unsigned __int8 *)v99.n128_u64[0];
        if (!v99.n128_u64[0])
        {
          v43 = (unsigned __int8 *)sub_22E3B8AAC(v99.n128_i64[1]);
          v99.n128_u64[0] = (unint64_t)v43;
        }
        v43[*v43 + 1] = 5;
        v44 = v99.n128_u64[0];
        v45 = *(unsigned __int8 *)v99.n128_u64[0];
        *(_BYTE *)v99.n128_u64[0] = v45 + 1;
        *(_QWORD *)(v44 + 8 * v45 + 16) = v42;
        sub_22E3BB0B8((uint64_t)&v99);
        v46 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v46 + 312) = v111;
        *(_DWORD *)(v46 + 316) = 1872;
        if (*(char *)(v46 + 311) < 0)
        {
          **(_BYTE **)(v46 + 288) = 0;
          *(_QWORD *)(v46 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v46 + 288) = 0;
          *(_BYTE *)(v46 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v99, v46);
        v47 = v110;
        v48 = (unsigned __int8 *)v99.n128_u64[0];
        if (!v99.n128_u64[0])
        {
          v48 = (unsigned __int8 *)sub_22E3B8AAC(v99.n128_i64[1]);
          v99.n128_u64[0] = (unint64_t)v48;
        }
        v48[*v48 + 1] = 5;
        v49 = v99.n128_u64[0];
        v50 = *(unsigned __int8 *)v99.n128_u64[0];
        *(_BYTE *)v99.n128_u64[0] = v50 + 1;
        *(_QWORD *)(v49 + 8 * v50 + 16) = v47;
        sub_22E3BB0B8((uint64_t)&v99);
        v51 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v51 + 312) = v40;
        *(_DWORD *)(v51 + 316) = 1865;
        if (*(char *)(v51 + 311) < 0)
        {
          **(_BYTE **)(v51 + 288) = 0;
          *(_QWORD *)(v51 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v51 + 288) = 0;
          *(_BYTE *)(v51 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v99, v51);
        v52 = v110;
        v53 = (unsigned __int8 *)v99.n128_u64[0];
        if (!v99.n128_u64[0])
        {
          v53 = (unsigned __int8 *)sub_22E3B8AAC(v99.n128_i64[1]);
          v99.n128_u64[0] = (unint64_t)v53;
        }
        v53[*v53 + 1] = 5;
        v54 = v99.n128_u64[0];
        v55 = *(unsigned __int8 *)v99.n128_u64[0];
        *(_BYTE *)v99.n128_u64[0] = v55 + 1;
        *(_QWORD *)(v54 + 8 * v55 + 16) = v52;
        sub_22E3BB0B8((uint64_t)&v99);
      }
      v16 = 0;
    }
    v18 = 0;
LABEL_29:
    sub_22E80F94C(&v112[5]);
    sub_22E8D1BC4(v82, (uint64_t)&v82);
    sub_22E80F94C(&v83);
    sub_22E80F94C(&v81);
  }
  while (!v18);
  if (v18 == 3)
  {
    if (*(_WORD *)(a1 + 32) == 65)
    {
      v57 = 0;
      while (1)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v78);
        if (*(_WORD *)(a1 + 32) == 26)
          break;
        if ((v57 & 1) == 0)
        {
          sub_22E884578(a1, v78, 1897, (uint64_t)v98);
          sub_22E3BB0B8((uint64_t)v98);
        }
        v83 = 0;
        v84 = 0;
        v82 = 0;
        v80 = 0;
        v85 = a1 + 960;
        v97 = 0;
        v86 = 0u;
        v87 = 0u;
        v88 = 0u;
        v89 = 0u;
        v90 = 0u;
        v91 = 0u;
        v92 = 0u;
        v93 = 0u;
        v94 = 0u;
        v95 = 0u;
        v96 = 0;
        LODWORD(v110) = 0;
        v111 = 0uLL;
        sub_22E818334(a1, &v80, &v110, 3, 0, 0, 0);
        v112[6] = *((_QWORD *)&v88 + 1);
        v110 = &v80;
        v112[3] = 0;
        v112[5] = 0;
        v111 = 0u;
        memset(v112, 0, 20);
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v116 = 0;
        v117 = &v119;
        v118 = 0x800000000;
        v120 = v120 & 0xFC00 | ((v80 & 0x3F000) == 204800);
        v121 = 0;
        v122 = 0;
        v123 = v85;
        v127 = 0;
        v125 = 0u;
        v126 = 0u;
        v124 = 0u;
        sub_22E8227E4(a1, (uint64_t)&v110, (unint64_t)sub_22E823490, 0);
        if (LODWORD(v112[2]))
          v58 = 0;
        else
          v58 = v112[3];
        v59 = sub_22EA2DD10(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v110);
        v99.n128_u64[0] = v58;
        v99.n128_u32[2] = v112[5];
        v100 = v59;
        v101 = 0;
        sub_22E827AC4((uint64_t)&v137, &v99);
        v60 = v101;
        v101 = 0;
        if (v60)
        {
          if (*v60 != v60 + 2)
            free(*v60);
          MEMORY[0x2348A0E9C](v60, 0x1080C4070FE8099);
        }
        sub_22E827F78((uint64_t)&v110);
        if (DWORD1(v88))
          free(*((void **)&v87 + 1));
        sub_22E8D1BC4(v85, (uint64_t)&v85);
        sub_22E80F94C((uint64_t *)&v86);
        sub_22E80F94C(&v84);
        v57 = 1;
        if (*(_WORD *)(a1 + 32) != 65)
          goto LABEL_101;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v78);
      v64 = 1;
    }
    else
    {
LABEL_101:
      v64 = 0;
    }
    sub_22E8220E8(a1, ((**(_DWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x4000) != 0) | 4, &v105, 0);
    if ((_DWORD)v135)
    {
      v65 = sub_22F1D3E5C((uint64_t *)(*(_QWORD *)(a1 + 8) + 672), v135, (uint64_t *)v134);
      v11 = (unsigned int *)sub_22EAFE2E4(*(_QWORD **)(a1 + 88), *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888), v75, *(_DWORD *)(a1 + 16), v77, v109, v79, v66, (unsigned int *)v131, v132, v65, (uint64_t)v128, (uint64_t)v137, v138, (uint64_t)&v105, v74, v64, v76);
      if (!v144)
      {
        sub_22EA7E84C(v140, v143, v11);
        v144 = 1;
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  sub_22E8D1BC4(v102, (uint64_t)&v102);
  sub_22E80F94C(&v103);
  if (a1)
    sub_22E885CF4(a1);
  v67 = v128;
  if ((_DWORD)v129)
  {
    v68 = (char *)v128 - 8;
    v69 = 72 * v129;
    do
    {
      sub_22E80F94C((uint64_t *)&v68[v69]);
      v69 -= 72;
    }
    while (v69);
    v67 = v128;
  }
  if (v67 != v130)
    free(v67);
  if (v131 != v133)
    free(v131);
  if (v134 != v136)
    free(v134);
LABEL_120:
  v70 = v137;
  if ((_DWORD)v138)
  {
    v71 = (char *)v137 - 8;
    v72 = 32 * v138;
    do
    {
      sub_22E80FBD8((void ***)&v71[v72]);
      v72 -= 32;
    }
    while (v72);
    v70 = v137;
  }
  if (v70 != v139)
    free(v70);
LABEL_126:
  sub_22E8D1BC4(v107, (uint64_t)&v107);
  sub_22E80F94C(&v108);
  sub_22E80F94C(&v106);
LABEL_127:
  sub_22E828C30((uint64_t)&v140);
  return v11;
}

uint64_t sub_22E8506D4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v5;
  unsigned int v6;
  void **v8;
  size_t v9;
  void *__p[2];
  char v11;

  v2 = 0;
  v5 = (unsigned int *)(a1 + 16);
  switch(*(_WORD *)(a1 + 32))
  {
    case 5:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x73:
    case 0x74:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0xB9:
    case 0xCE:
    case 0xCF:
      if (*(unsigned __int16 *)(a1 + 32) - 7 >= 0xC)
        v2 = *(_QWORD *)(a1 + 24);
      else
        v2 = 0;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      v6 = *(_DWORD *)(a1 + 40);
      goto LABEL_6;
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
      sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
      if (v11 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((word_22F4ADB24[*(unsigned __int8 *)v8] & 0x60) == 0)
      {
        v2 = 0;
        if ((v11 & 0x80) == 0)
          return v2;
        goto LABEL_18;
      }
      if (v11 >= 0)
        v9 = v11 & 0x7F;
      else
        v9 = (size_t)__p[1];
      v2 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), v8, v9);
      *(_WORD *)(a1 + 32) = 5;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      *a2 = *(_DWORD *)(a1 + 40);
      if (v11 < 0)
LABEL_18:
        operator delete(__p[0]);
      return v2;
    case 0x3D:
      v2 = 0;
      v6 = *v5;
LABEL_6:
      *a2 = v6;
      return v2;
    default:
      return v2;
  }
}

uint64_t sub_22E850828(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 v5;
  __int16 v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10[4];

  v5 = a3 | 0x100;
  if ((*(_BYTE *)(a2 + 3) & 3) == a3)
  {
    *(_DWORD *)(a1 + 312) = a4;
    *(_DWORD *)(a1 + 316) = 137;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v10, a1);
    v6 = v5;
  }
  else
  {
    *(_DWORD *)(a1 + 312) = a4;
    *(_DWORD *)(a1 + 316) = 48;
    if (*(char *)(a1 + 311) < 0)
    {
      **(_BYTE **)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 288) = 0;
      *(_BYTE *)(a1 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v10, a1);
    sub_22F41A35C(v10, v5);
    v6 = *(_BYTE *)(a2 + 3) & 3 | 0x100;
  }
  sub_22F41A35C(v10, v6);
  v7 = *(unsigned int *)(a2 + 4) | ((unint64_t)*(unsigned int *)(a2 + 4) << 32);
  v8 = v10[0];
  if (!v10[0])
  {
    v8 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v10[1]);
    v10[0] = v8;
  }
  sub_22E4D6448((uint64_t)(v8 + 336), v7, 1);
  return sub_22E3BB0B8((uint64_t)v10);
}

BOOL sub_22E850930(uint64_t a1)
{
  return (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) != 0
      && *(_WORD *)(a1 + 32) == 5
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 2696);
}

char **sub_22E850968(char **result, int *a2, int a3)
{
  char **v5;
  char **v6;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;

  v5 = result;
  v6 = result + 337;
  while (1)
  {
    v7 = *((unsigned __int16 *)v5 + 16);
    if (v7 != 5)
      break;
    v8 = 0;
    v9 = v5[3];
    do
    {
      if (v9 == v6[v8])
      {
        v10 = (unint64_t)v5[1];
        v11 = *(_QWORD *)(v10 + 2816);
        result = (char **)(v11 >= *(unsigned int *)(v10 + 2784)
                         ? sub_22F162D2C(v10, 1u)
                         : *(_QWORD *)(v10 + 2776) + 24 * v11);
        if (*((_WORD *)result + 8) != 46)
        {
          v12 = (unint64_t)v5[1];
          v13 = *(_QWORD *)(v12 + 2816);
          if (v13 >= *(unsigned int *)(v12 + 2784))
            result = (char **)sub_22F162D2C(v12, 1u);
          else
            result = (char **)(*(_QWORD *)(v12 + 2776) + 24 * v13);
          if (*((_WORD *)result + 8) != 71)
            __asm { BR              X11 }
        }
      }
      ++v8;
    }
    while (v8 != 9);
    if (v9)
      return result;
  }
  if (v7 == 3)
  {
    v14 = v5[1];
    if (*((_QWORD *)v14 + 94))
    {
      v14[864] = 1;
      *(_BYTE *)(*((_QWORD *)v14 + 6) + 6) = 1;
    }
    *((_WORD *)v5 + 16) = 1;
    return sub_22E9CE428((uint64_t)v5[11], *((uint64_t ***)v5[11] + 1611), a2, a3 == 3);
  }
  return result;
}

uint64_t sub_22E850B50(uint64_t result, uint64_t *a2, int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;

  if (*((_DWORD *)a2 + 30))
  {
    v8 = a2[14];
    sub_22F34B71C(result, a3);
    v10 = v9;
    v11 = sub_22E8D1AC4(a2[139], 80);
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = a4 | ((unint64_t)a4 << 32);
    *(_DWORD *)(v11 + 24) = 0;
    v12 = sub_22F1ACD3C(v10, 0, 7u, 0);
    v13 = *(_BYTE *)(v11 + 30);
    *(_WORD *)(v11 + 28) = v12;
    *(_BYTE *)(v11 + 30) = v13 | 0x7F;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) &= 0xFFFFFFFEFF000000;
    *(_DWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 72) = sub_22E8D2434(v11);
    sub_22E828580((uint64_t)(a2 + 140), v11);
    return sub_22E828580(v8 + 24, v11);
  }
  else if (!*a5)
  {
    v14 = *a2;
    sub_22F34B71C(result, a3);
    v16 = v15;
    v17 = sub_22E8D1AC4(*(_QWORD *)(v14 + 40), 80);
    *(_QWORD *)v17 = v16;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = a4 | ((unint64_t)a4 << 32);
    *(_DWORD *)(v17 + 24) = 0;
    v18 = sub_22F1ACD3C(v16, 0, 7u, 0);
    v19 = *(_BYTE *)(v17 + 30);
    *(_WORD *)(v17 + 28) = v18;
    *(_BYTE *)(v17 + 30) = v19 | 0x7F;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) &= 0xFFFFFFFEFF000000;
    *(_DWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 72) = sub_22E8D2434(v17);
    sub_22E828580(v14 + 48, v17);
    result = sub_22E828580(v14 + 32, v17);
    *a5 = 1;
  }
  return result;
}

unint64_t sub_22E850CD0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  void *__p;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21[4];
  unsigned int v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v26 = v28;
  v27 = 0x800000000;
  v23 = v25;
  v24 = 0x800000000;
  sub_22E84DB88(a1, (uint64_t)&v26, (uint64_t)&v23, 0, 0, (int *)&v22, a2, 1);
  v4 = v22;
  v5 = sub_22F34B2D0(*(_QWORD *)(a1 + 88), v22, (uint64_t *)v26, v27, (int *)v23, v24, *a2);
  v6 = v5;
  if (v7)
    v8 = 1;
  else
    v8 = v5 == 0;
  if (!v8)
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = v4;
    *(_DWORD *)(v9 + 316) = 1968;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v21, v9);
    v16 = 0;
    v15 = 0;
    v18 = 0;
    v19 = 0x200000000000000;
    v13 = v4 | (v4 << 32);
    v14 = 0;
    __p = (void *)25705;
    v20 = 0;
    sub_22E6D82D0(v21, &v13);
    v10 = v4 | ((unint64_t)*a2 << 32);
    v11 = v21[0];
    if (!v21[0])
    {
      v11 = sub_22E3B8AAC(v21[1]);
      v21[0] = v11;
    }
    sub_22E4D6448(v11 + 336, v10, 1);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)v21);
  }
  if (v23 != v25)
    free(v23);
  if (v26 != v28)
    free(v26);
  return v6;
}

void sub_22E850EA4(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  unsigned int v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  int i;
  uint64_t v21;
  _QWORD v22[2];
  int v23;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    if (a3)
    {
      if ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x18)
        return;
    }
    else if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x18)
    {
      return;
    }
  }
  v8 = (int *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 16);
  v22[1] = *(_QWORD *)(a2 + 16);
  v23 = 1;
  v22[0] = v7;
  v9 = sub_22E4EF088(a2 + 24, (unint64_t)v22, 1);
  v10 = *(_QWORD *)(a2 + 24) + 24 * *(unsigned int *)(a2 + 32);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a2 + 32);
  v12 = sub_22E4EF088(a2 + 24, a1 + 16, 1);
  v13 = *(_QWORD *)(a2 + 24) + 24 * *(unsigned int *)(a2 + 32);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
  *(_OWORD *)v13 = v14;
  v15 = (*(_DWORD *)(a2 + 32) + 1);
  *(_DWORD *)(a2 + 32) = v15;
  sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)(a2 + 24), v15, 1, 0, 1);
  sub_22E80F0F0(a1, 1);
  if (a3)
    v16 = 4196361;
  else
    v16 = 4194313;
  v21 = a1;
  sub_22E885C30(a1, v16);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(uint64_t **)(v17 + 12888);
  if (a3)
    sub_22EAF341C(v17, v18, v6);
  else
    sub_22EA2F2FC(v17, v18, v6, 0, 0);
  v19 = *(unsigned __int16 *)(a1 + 32);
  if (v19 == 61)
  {
    sub_22E8338EC(a1, v6);
  }
  else
  {
    if (v19 == 151)
    {
      sub_22E879A28(a1, v6, &v21);
      goto LABEL_18;
    }
    sub_22EAB2DB0(*(_QWORD **)(a1 + 88), v6);
  }
  sub_22E8798D0(a1, v6, &v21);
LABEL_18:
  if (*v8 != v7 && sub_22F1E3C34(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *v8, v7))
  {
    for (i = *v8; i != v7 && *(_WORD *)(a1 + 32) != 1; i = *(_DWORD *)(a1 + 16))
      sub_22E80F0F0(a1, 0);
  }
  sub_22E80F0F0(a1, 0);
  if (v21)
    sub_22E885CF4(v21);
}

uint64_t sub_22E8510C0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  _QWORD *v13;
  BOOL v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  int *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD v86[34];

  v86[32] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v4 + 16) != 23)
  {
    sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v62);
    v26 = v62;
    if (!v62)
    {
      v26 = (_QWORD *)sub_22E3B8AAC(v63);
      v62 = v26;
    }
    *((_BYTE *)v26 + *(unsigned __int8 *)v26 + 1) = 4;
    v27 = v62;
    v28 = *(unsigned __int8 *)v62;
    *(_BYTE *)v62 = v28 + 1;
    v27[v28 + 2] = 23;
    sub_22E3BB0B8((uint64_t)&v62);
    return 1;
  }
  v84 = v86;
  v85 = 0x2000000000;
  sub_22E885C30(a1, 4194312);
  v5 = sub_22E878918(a1, 0);
  sub_22E885CF4(a1);
  if ((v5 & 1) != 0)
    v5 = sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
  if (*(_WORD *)(a1 + 32) != 72)
  {
LABEL_56:
    v30 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v30 + 312) = a2;
    *(_DWORD *)(v30 + 316) = 1602;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v46, v30);
    sub_22E3BB0B8((uint64_t)v46);
    v29 = 1;
    goto LABEL_59;
  }
  v45 = v5;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(v7 + 2816);
    if (v8 >= *(unsigned int *)(v7 + 2784))
      v9 = sub_22F162D2C(v7, 1u);
    else
      v9 = *(_QWORD *)(v7 + 2776) + 24 * v8;
    v10 = *(unsigned __int16 *)(v9 + 16);
    v11 = v10 - 399 >= 0x29 && v10 - 7 >= 6;
    if (!v11
      || (v10 <= 0x12 ? (v12 = ((1 << v10) & 0x7E002) == 0) : (v12 = 1),
          !v12
       || ((v13 = *(_QWORD **)(v9 + 8)) == 0 || (*v13 & 0x1FFFE00) != 0x1E00)
       && (v10 <= 0x12 ? (v14 = ((1 << v10) & 0x7E002) == 0) : (v14 = 1),
           v14 ? (v15 = v13 == 0) : (v15 = 1),
           v15 || (*v13 & 0x1FFFE00) != 0x2000)))
    {
      v39 = v5;
      if ((v6 & 1) == 0)
        goto LABEL_56;
      v38 = 0;
      goto LABEL_68;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
    v16 = *(_DWORD *)(a1 + 40);
    v17 = sub_22F140B7C(v4, 15);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
    if (!v17)
    {
      sub_22E885C30(a1, 4194312);
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
      if (*(_DWORD *)(v36 + 68) == 15)
      {
        v39 = v5;
        if ((*(_DWORD *)(v36 + 72) | 0x10) == 0x10)
        {
          v37 = 1;
          sub_22F344D4C(*(_QWORD **)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 1, 1u);
        }
        else
        {
          v37 = 0;
        }
      }
      else
      {
        v37 = 0;
        v39 = v45;
      }
      if (*(_WORD *)(a1 + 32) == 23)
      {
        v40 = sub_22E878918(a1, 0);
        if ((v40 & 1) == 0)
        {
          if (v37)
            v40 = sub_22ED37CF8(*(_QWORD **)(a1 + 88), v40 & 0xFFFFFFFFFFFFFFFELL);
LABEL_83:
          v44 = sub_22F344474(*(_QWORD *)(a1 + 88), v16, v40 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E885CF4(a1);
          v38 = v44 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_68;
        }
      }
      else
      {
        sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v62);
        v41 = v62;
        if (!v62)
        {
          v41 = (_QWORD *)sub_22E3B8AAC(v63);
          v62 = v41;
        }
        *((_BYTE *)v41 + *(unsigned __int8 *)v41 + 1) = 4;
        v42 = v62;
        v43 = *(unsigned __int8 *)v62;
        *(_BYTE *)v62 = v43 + 1;
        v42[v43 + 2] = 23;
        sub_22E3BB0B8((uint64_t)&v62);
      }
      v40 = sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
      if (v37)
        sub_22F344E80(*(_QWORD *)(a1 + 88));
      goto LABEL_83;
    }
    if (*(_WORD *)(a1 + 32) != 21)
      break;
    sub_22E80F720(a1);
    sub_22E885C30(a1, 4195336);
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
      v18 = 0;
    }
    else
    {
      v47[3] = 0;
      v48 = 0;
      v47[2] = 0;
      v47[0] = 0;
      v49 = a1 + 960;
      v61 = 0;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0;
      LODWORD(v62) = 0;
      v63 = 0uLL;
      sub_22E818334(a1, v47, &v62, 3, 0, 0, 0);
      v68 = *((_QWORD *)&v52 + 1);
      v62 = v47;
      v66 = 0;
      v67 = 0;
      v63 = 0u;
      v64 = 0u;
      v65 = 0;
      v69 = 15;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = &v75;
      v74 = 0x800000000;
      v76 = v76 & 0xFC00 | ((v47[0] & 0x3F000) == 204800);
      v77 = 0;
      v78 = 0;
      v79 = v49;
      v83 = 0;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      sub_22E8227E4(a1, (uint64_t)&v62, (unint64_t)sub_22E823490, 0);
      v18 = sub_22EB003C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), &v62);
      sub_22E827F78((uint64_t)&v62);
      if (DWORD1(v52))
        free(*((void **)&v51 + 1));
      sub_22E8D1BC4(v49, (uint64_t)&v49);
      sub_22E80F94C((uint64_t *)&v50);
      sub_22E80F94C(&v48);
    }
    if (*(_WORD *)(a1 + 32) == 22)
    {
      v19 = sub_22E80F720(a1);
    }
    else
    {
      LOWORD(v62) = 22;
      sub_22E885940(a1, (unsigned __int16 *)&v62, 1, 1);
      v19 = 0;
    }
    if (*(_WORD *)(a1 + 32) == 23)
    {
      v20 = sub_22E878918(a1, 0);
      if ((v20 & 1) == 0)
        goto LABEL_46;
    }
    else
    {
      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v62);
      v21 = v62;
      if (!v62)
      {
        v21 = (_QWORD *)sub_22E3B8AAC(v63);
        v62 = v21;
      }
      *((_BYTE *)v21 + *(unsigned __int8 *)v21 + 1) = 4;
      v22 = v62;
      v23 = *(unsigned __int8 *)v62;
      *(_BYTE *)v62 = v23 + 1;
      v22[v23 + 2] = 23;
      sub_22E3BB0B8((uint64_t)&v62);
    }
    v20 = sub_22ED2B260(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), 0);
LABEL_46:
    v24 = sub_22ED36AF8(*(_QWORD *)(a1 + 88), v16, v19, (uint64_t)v18, v20 & 0xFFFFFFFFFFFFFFFELL);
    if ((v24 & 1) == 0)
    {
      v25 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v85;
      }
      *((_QWORD *)v84 + v25) = v24 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v85) = v85 + 1;
    }
    sub_22E885CF4(a1);
    v6 = 1;
    if (*(_WORD *)(a1 + 32) != 72)
    {
      v38 = 0;
      v39 = v5;
LABEL_68:
      v29 = sub_22F3444EC(*(_QWORD *)(a1 + 88), a2, v39 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v84, v85, v38);
      goto LABEL_59;
    }
  }
  v32 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v32 + 312) = v16;
  *(_DWORD *)(v32 + 316) = 1510;
  if (*(char *)(v32 + 311) < 0)
  {
    **(_BYTE **)(v32 + 288) = 0;
    *(_QWORD *)(v32 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v32 + 288) = 0;
    *(_BYTE *)(v32 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v62, v32);
  v33 = v62;
  if (!v62)
  {
    v33 = (_QWORD *)sub_22E3B8AAC(v63);
    v62 = v33;
  }
  v29 = 1;
  *((_BYTE *)v33 + *(unsigned __int8 *)v33 + 1) = 1;
  v34 = v62;
  v35 = *(unsigned __int8 *)v62;
  *(_BYTE *)v62 = v35 + 1;
  v34[v35 + 2] = "@catch clause";
  sub_22E3BB0B8((uint64_t)&v62);
LABEL_59:
  if (v84 != v86)
    free(v84);
  return v29;
}

unsigned int *sub_22E8518A4(uint64_t a1)
{
  int *v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BYTE v10[32];
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19[4];
  _QWORD v20[5];
  int v21;
  const char *v22;

  v2 = (int *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v4 = sub_22E84F92C(a1, *(_DWORD *)(a1 + 40), v3, 0, 1);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
  v6 = *v2;
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v20[0] = &unk_24FAC2E78;
  v20[3] = v5;
  v20[4] = v4;
  v21 = v6;
  v22 = "parsing Objective-C method";
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 == 62)
  {
    if (*(_QWORD *)(a1 + 2688))
    {
      sub_22E884578(a1, v2, 2025, (uint64_t)v19);
      v8 = *(unsigned int *)(a1 + 16);
      v13 = 0;
      v14 = 0;
      v16 = 0;
      v17 = 0;
      __p = 0;
      v18 = 0;
      v11 = v8 | (v8 << 32);
      v12 = 1;
      sub_22E6D82D0(v19, &v11);
      if (SHIBYTE(v17) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)v19);
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
    v7 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v7 == 23
    || (sub_22E884578(a1, v2, 1515, (uint64_t)v10),
        sub_22E3BB0B8((uint64_t)v10),
        LOWORD(v11) = 23,
        sub_22E885940(a1, (unsigned __int16 *)&v11, 1, 3),
        *(_WORD *)(a1 + 32) == 23))
  {
    if (v4)
    {
      sub_22F32AE90(*(_QWORD *)(a1 + 88), (uint64_t)v4);
      sub_22F2EA800(a1, (uint64_t)v4);
    }
    else
    {
      sub_22E80CED8(a1);
      LOWORD(v11) = 24;
      sub_22E885940(a1, (unsigned __int16 *)&v11, 1, 0);
    }
  }
  else
  {
    v4 = 0;
  }
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v20);
  return v4;
}

uint64_t sub_22E851A7C(uint64_t a1, unsigned int a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  int v39;
  char v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int *v57;
  unsigned int **v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  const char *v85;
  unsigned __int8 *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  size_t v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  unsigned int v112;
  void *v113;
  __int128 v114;
  __int128 __p;
  unint64_t v116;
  uint64_t v117;
  int *v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  __int16 v122;
  uint64_t (*v123)(uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  v5 = *(unsigned __int16 *)(a1 + 32);
  if (v5 <= 0x7A)
  {
    switch(*(_WORD *)(a1 + 32))
    {
      case 1:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        goto LABEL_3;
      case 3:
        v24 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v24 + 752))
        {
          *(_BYTE *)(v24 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v24 + 48) + 6) = 1;
        }
        v8 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22F316BD0(*(_QWORD *)(a1 + 88));
        return v8;
      case 7:
        v21 = sub_22F2EAD44(a1, a2);
        return sub_22E8385C0((_BYTE *)a1, v21);
      case 8:
        v21 = sub_22F2EACCC(a1, a2);
        return sub_22E8385C0((_BYTE *)a1, v21);
      case 0xD:
      case 0xE:
        v10 = sub_22E83E898(a1, 0);
        v11 = v10;
        if ((v10 & 1) != 0)
          return sub_22E8385C0((_BYTE *)a1, v11);
        v12 = &v120;
        v118 = (int *)&v120;
        v113 = (char *)&v114 + 8;
        LODWORD(v120) = a2;
        v119 = 0x400000001;
        v13 = *(unsigned __int16 *)(a1 + 32);
        *((_QWORD *)&v114 + 1) = v10 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)&v114 = 0xC00000001;
        v14 = 1;
        if (v13 != 72)
        {
          v58 = (unsigned int **)&v114 + 1;
          v57 = (int *)&v120;
          goto LABEL_80;
        }
        while (1)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
          v15 = *(_DWORD *)(a1 + 40);
          v16 = v119;
          if (v119 >= (unint64_t)HIDWORD(v119))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v119;
          }
          v118[v16] = v15;
          LODWORD(v119) = v119 + 1;
          v17 = *(unsigned __int16 *)(a1 + 32);
          if (v17 > 0x12 || ((1 << v17) & 0x76000) == 0)
            break;
          v11 = sub_22E83E898(a1, 0);
          if ((v11 & 1) != 0)
            goto LABEL_81;
          v18 = v114;
          if (v114 >= (unint64_t)DWORD1(v114))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v114;
          }
          *((_QWORD *)v113 + v18) = v11 & 0xFFFFFFFFFFFFFFFELL;
          v19 = (v114 + 1);
          LODWORD(v114) = v114 + 1;
          if (*(_WORD *)(a1 + 32) != 72)
          {
            v57 = v118;
            v58 = (unsigned int **)v113;
            v14 = v19;
LABEL_80:
            v11 = sub_22EC27204(*(_QWORD **)(a1 + 88), v57, v58, v14);
            goto LABEL_81;
          }
        }
        sub_22E884578(a1, (int *)v4, 1628, (uint64_t)&v110);
        sub_22E3BB0B8((uint64_t)&v110);
        v11 = 1;
LABEL_81:
        if (v113 != (char *)&v114 + 8)
          free(v113);
        v59 = (char *)v118;
        goto LABEL_143;
      case 0x13:
        v12 = (uint64_t *)&v114 + 1;
        v113 = (char *)&v114 + 8;
        *(_QWORD *)&v114 = 0xC00000000;
        sub_22E80F788(a1);
        if (*(_WORD *)(a1 + 32) == 20)
        {
          v23 = sub_22E80F788(a1);
          goto LABEL_28;
        }
        v40 = 0;
        while (2)
        {
          v11 = sub_22E83766C(a1, 0);
          if ((v11 & 1) != 0)
          {
            LOWORD(v118) = 20;
            sub_22E885940(a1, (unsigned __int16 *)&v118, 1, 1);
          }
          else
          {
            v41 = sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v118);
            v42 = (uint64_t)v41;
            v43 = v41 & 1;
            if (*(_WORD *)(a1 + 32) == 26)
            {
              v44 = *(_QWORD **)(a1 + 88);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              v42 = sub_22EE739C0(v44, v42 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a1 + 40), 0);
              v45 = v42 & 1;
            }
            else
            {
              v45 = v41 & 1;
            }
            v46 = (v45 | v43) != 0;
            v47 = v114;
            if (v114 >= (unint64_t)DWORD1(v114))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v47 = v114;
            }
            *((_QWORD *)v113 + v47) = v42 & 0xFFFFFFFFFFFFFFFELL;
            v40 |= v46;
            LODWORD(v114) = v114 + 1;
            v48 = *(unsigned __int16 *)(a1 + 32);
            if (v48 == 65)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              if (*(_WORD *)(a1 + 32) == 20)
                goto LABEL_73;
              continue;
            }
            if (v48 == 20)
            {
LABEL_73:
              v23 = sub_22E80F788(a1);
              if ((v40 & 1) != 0)
                goto LABEL_101;
LABEL_28:
              v11 = sub_22EC28BF4(*(_QWORD **)(a1 + 88), a2 | (unint64_t)(v23 << 32), (uint64_t *)v113, v114);
              goto LABEL_142;
            }
            sub_22E884578(a1, (int *)v4, 18, (uint64_t)&v118);
            v68 = v118;
            if (!v118)
            {
              v68 = (int *)sub_22E3B8AAC(v119);
              v118 = v68;
            }
            *((_BYTE *)v68 + *(unsigned __int8 *)v68 + 1) = 4;
            v69 = (uint64_t)v118;
            v70 = *(unsigned __int8 *)v118;
            *(_BYTE *)v118 = v70 + 1;
            *(_QWORD *)(v69 + 8 * v70 + 16) = 20;
            *(_BYTE *)(v69 + (v70 + 1) + 1) = 4;
            v71 = (uint64_t)v118;
            v72 = *(unsigned __int8 *)v118;
            *(_BYTE *)v118 = v72 + 1;
            *(_QWORD *)(v71 + 8 * v72 + 16) = 65;
            sub_22E3BB0B8((uint64_t)&v118);
LABEL_101:
            v11 = 1;
          }
          goto LABEL_142;
        }
      case 0x15:
        v21 = sub_22F2EADBC(a1, a2);
        return sub_22E8385C0((_BYTE *)a1, v21);
      case 0x17:
        v113 = (char *)&v114 + 8;
        *(_QWORD *)&v114 = 0x400000000;
        sub_22E80CED8(a1);
        if (*(_WORD *)(a1 + 32) == 24)
        {
          v22 = sub_22E80CED8(a1);
          goto LABEL_25;
        }
        v29 = 0;
        break;
      case 0x20:
      case 0x23:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        if (*(_WORD *)(a1 + 32) == 7)
        {
          v20 = *(unsigned int *)(a1 + 40);
          v8 = sub_22EB261F0(*(_QWORD *)(a1 + 88), (uint64_t)v4, 0);
          if ((v8 & 1) == 0)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
            v8 = sub_22EB48C3C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v20, v5, v8 & 0xFFFFFFFFFFFFFFFELL);
            if ((v8 & 1) == 0)
            {
              v21 = sub_22EC27798(*(_QWORD *)(a1 + 88), a2, (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFFELL));
              return sub_22E8385C0((_BYTE *)a1, v21);
            }
          }
        }
        else
        {
          sub_22E884578(a1, (int *)v4, 1627, (uint64_t)&v113);
          v25 = (unsigned __int8 *)v113;
          if (!v113)
          {
            v25 = (unsigned __int8 *)sub_22E3B8AAC(v114);
            v113 = v25;
          }
          v26 = "+";
          if (v5 == 35)
            v26 = "-";
          v8 = 1;
          v25[*v25 + 1] = 1;
          v27 = v113;
          v28 = *(unsigned __int8 *)v113;
          *(_BYTE *)v113 = v28 + 1;
          v27[v28 + 2] = v26;
          sub_22E3BB0B8((uint64_t)&v113);
        }
        return v8;
      default:
        goto LABEL_65;
    }
    while (1)
    {
      v30 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = 1;
      v11 = sub_22E83766C(a1, 0);
      if ((v11 & 1) != 0)
      {
        LOWORD(v118) = 24;
        sub_22E885940(a1, (unsigned __int16 *)&v118, 1, 1);
        *(_BYTE *)(a1 + 945) = v30;
        goto LABEL_112;
      }
      *(_BYTE *)(a1 + 945) = v30;
      if (sub_22E8847B4(a1, 0x3Du, 15, "", 0))
      {
        LOWORD(v118) = 24;
        v11 = 1;
        sub_22E885940(a1, (unsigned __int16 *)&v118, 1, 1);
        goto LABEL_112;
      }
      v31 = sub_22E83766C(a1, 0);
      if ((v31 & 1) != 0)
      {
        LOWORD(v118) = 24;
        sub_22E885940(a1, (unsigned __int16 *)&v118, 1, 1);
        v11 = v31;
        goto LABEL_112;
      }
      v32 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v118);
      v33 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v118);
      v34 = 0;
      v35 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v35 + 56) + 1) & 1) != 0)
      {
        if (*(_WORD *)(a1 + 32) == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(v35, v4);
          v34 = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v34 = 0;
        }
      }
      v118 = (int *)(v32 & 0xFFFFFFFFFFFFFFFELL);
      v119 = v33 & 0xFFFFFFFFFFFFFFFELL;
      v29 |= v32 | v33;
      LODWORD(v120) = v34;
      BYTE4(v120) = 0;
      LOBYTE(v121) = 0;
      v36 = (_OWORD *)sub_22E78DF7C((uint64_t)&v113, (unint64_t)&v118, 1);
      v37 = (char *)v113 + 32 * v114;
      v38 = v36[1];
      *v37 = *v36;
      v37[1] = v38;
      LODWORD(v114) = v114 + 1;
      v39 = *(unsigned __int16 *)(a1 + 32);
      if (v39 != 65)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      if (*(_WORD *)(a1 + 32) == 24)
        goto LABEL_85;
    }
    if (v39 == 24)
    {
LABEL_85:
      v22 = sub_22E80CED8(a1);
      if ((v29 & 1) != 0)
        goto LABEL_111;
LABEL_25:
      v11 = sub_22EC297B0(*(_QWORD **)(a1 + 88), a2 | (unint64_t)(v22 << 32), (uint64_t)v113, v114);
      goto LABEL_112;
    }
    sub_22E884578(a1, (int *)v4, 18, (uint64_t)&v110);
    v76 = (unsigned __int8 *)v110;
    if (!(_QWORD)v110)
    {
      v76 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v110 + 1));
      *(_QWORD *)&v110 = v76;
    }
    v76[*v76 + 1] = 4;
    v77 = v110;
    v78 = *(unsigned __int8 *)v110;
    *(_BYTE *)v110 = v78 + 1;
    *(_QWORD *)(v77 + 8 * v78 + 16) = 24;
    *(_BYTE *)(v77 + (v78 + 1) + 1) = 4;
    v79 = v110;
    v80 = *(unsigned __int8 *)v110;
    *(_BYTE *)v110 = v80 + 1;
    *(_QWORD *)(v79 + 8 * v80 + 16) = 65;
    sub_22E3BB0B8((uint64_t)&v110);
LABEL_111:
    v11 = 1;
LABEL_112:
    v59 = (char *)v113;
    if (v113 == (char *)&v114 + 8)
      return sub_22E8385C0((_BYTE *)a1, v11);
    goto LABEL_144;
  }
  if (*(unsigned __int16 *)(a1 + 32) > 0x87u)
  {
    if (v5 == 136)
    {
LABEL_95:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v64 = *(_DWORD *)(a1 + 40);
      v65 = *(_QWORD *)(a1 + 88);
      v66 = a2;
      v67 = 0;
LABEL_97:
      v21 = sub_22F33415C(v65, v66, v64, v67);
      return sub_22E8385C0((_BYTE *)a1, v21);
    }
    if (v5 != 150)
      goto LABEL_65;
LABEL_96:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v64 = *(_DWORD *)(a1 + 40);
    v65 = *(_QWORD *)(a1 + 88);
    v66 = a2;
    v67 = 1;
    goto LABEL_97;
  }
  if (v5 == 123)
    goto LABEL_96;
  if (v5 == 124)
    goto LABEL_95;
LABEL_65:
  v49 = *(unint64_t **)(a1 + 24);
  if (!v49)
    goto LABEL_3;
  v50 = *v49;
  v51 = (unsigned __int16)(v50 >> 9);
  v52 = v50 >> 9;
  if (v51 >= 0x1B)
    LOWORD(v52) = 0;
  if ((unsigned __int16)v52 <= 0xBu)
  {
    if ((unsigned __int16)v52 == 10)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      if (*(_WORD *)(a1 + 32) == 21)
      {
        v53 = *(_DWORD *)(a1 + 40);
        v113 = (void *)(a1 + 944);
        LOBYTE(v114) = *(_BYTE *)(a1 + 944);
        v54 = 1;
        *(_BYTE *)(a1 + 944) = 1;
        *((_QWORD *)&v114 + 1) = a1;
        LODWORD(__p) = 1441813;
        WORD2(__p) = 62;
        v116 = 0;
        v117 = 0;
        *((_QWORD *)&__p + 1) = sub_22E80F720;
        sub_22E811DE8((uint64_t)&v113);
        if ((sub_22E88517C(a1) & 1) == 0)
        {
          v55 = *(unsigned __int16 *)(a1 + 32);
          if ((v55 - 7) >= 6)
          {
            v56 = 0;
            if ((v55 - 13) >= 6 && v55 != 1)
              v56 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v56 = 0;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
          v94 = *(_DWORD *)(a1 + 40);
          sub_22E811E8C((uint64_t)&v113);
          v54 = sub_22F3343D8(*(_QWORD **)(a1 + 88), v56, a2, v53, v117, v94, SHIDWORD(v117));
        }
        *(_BYTE *)v113 = v114;
      }
      else
      {
        sub_22E884578(a1, (int *)v4, 1510, (uint64_t)&v113);
        v81 = (unsigned __int8 *)v113;
        if (!v113)
        {
          v81 = (unsigned __int8 *)sub_22E3B8AAC(v114);
          v113 = v81;
        }
        v54 = 1;
        v81[*v81 + 1] = 1;
        v82 = v113;
        v83 = *(unsigned __int8 *)v113;
        *(_BYTE *)v113 = v83 + 1;
        v82[v83 + 2] = "@protocol";
        sub_22E3BB0B8((uint64_t)&v113);
      }
      return sub_22E8385C0((_BYTE *)a1, v54);
    }
    if ((unsigned __int16)v52 == 4)
    {
      v21 = sub_22F2EAF04(a1, a2);
      return sub_22E8385C0((_BYTE *)a1, v21);
    }
  }
  else
  {
    if ((unsigned __int16)v52 == 12)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      if (*(_WORD *)(a1 + 32) != 21)
      {
        sub_22E884578(a1, (int *)v4, 1510, (uint64_t)&v113);
        v86 = (unsigned __int8 *)v113;
        if (!v113)
        {
          v86 = (unsigned __int8 *)sub_22E3B8AAC(v114);
          v113 = v86;
        }
        v11 = 1;
        v86[*v86 + 1] = 1;
        v87 = v113;
        v88 = *(unsigned __int8 *)v113;
        *(_BYTE *)v113 = v88 + 1;
        v87[v88 + 2] = "@selector";
        sub_22E3BB0B8((uint64_t)&v113);
        return sub_22E8385C0((_BYTE *)a1, v11);
      }
      v60 = *(_DWORD *)(a1 + 40);
      v12 = (uint64_t *)&v114 + 1;
      v113 = (char *)&v114 + 8;
      *(_QWORD *)&v114 = 0xC00000000;
      v118 = (int *)(a1 + 944);
      LOBYTE(v119) = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v120 = a1;
      v121 = 1441813;
      v122 = 62;
      v124 = 0;
      v125 = 0;
      v123 = sub_22E80F720;
      sub_22E811DE8((uint64_t)&v118);
      v61 = *(unsigned __int16 *)(a1 + 32);
      v62 = v61;
      if (v61 == 21)
      {
        sub_22E80F720(a1);
        v62 = *(unsigned __int16 *)(a1 + 32);
      }
      if (v62 == 3)
      {
LABEL_91:
        v63 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v63 + 752))
        {
          *(_BYTE *)(v63 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v63 + 48) + 6) = 1;
        }
        v11 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22E9D0150(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v113, v114);
      }
      else
      {
        v89 = sub_22E8506D4(a1, &v112);
        if (v89 || (v99 = *(unsigned __int16 *)(a1 + 32), v99 == 61) || v99 == 71)
        {
          v90 = v114;
          if (v114 >= DWORD1(v114))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v90 = v114;
          }
          *((_QWORD *)v113 + v90) = v89;
          LODWORD(v114) = v114 + 1;
          v91 = *(unsigned __int16 *)(a1 + 32);
          if (v91 == 22)
          {
            v92 = 0;
          }
          else
          {
            v92 = 0;
            v11 = 1;
            while (1)
            {
              if (v91 == 71)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                v95 = v114;
                if (v114 >= (unint64_t)DWORD1(v114))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v95 = v114;
                }
                ++v92;
                *((_QWORD *)v113 + v95) = 0;
                LODWORD(v114) = v114 + 1;
              }
              else if ((sub_22E8847B4(a1, 0x3Du, 15, "", 0) & 1) != 0)
              {
                goto LABEL_141;
              }
              ++v92;
              v91 = *(unsigned __int16 *)(a1 + 32);
              if (v91 == 22)
                break;
              if (v91 == 3)
                goto LABEL_91;
              v96 = sub_22E8506D4(a1, (unsigned int *)&v110);
              v97 = v114;
              if (v114 >= (unint64_t)DWORD1(v114))
              {
                v98 = v96;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v96 = v98;
                v97 = v114;
              }
              *((_QWORD *)v113 + v97) = v96;
              LODWORD(v114) = v114 + 1;
              if (v96)
              {
                v91 = *(unsigned __int16 *)(a1 + 32);
              }
              else
              {
                v91 = *(unsigned __int16 *)(a1 + 32);
                if (v91 != 61 && v91 != 71)
                  break;
              }
            }
          }
          if (v61 == 21 && v91 == 22)
            sub_22E80F720(a1);
          sub_22E811E8C((uint64_t)&v118);
          v93 = sub_22F1D3E5C((uint64_t *)(*(_QWORD *)(a1 + 8) + 672), v92, (uint64_t *)v113);
          v11 = sub_22EC2A7D0(*(_QWORD *)(a1 + 88), v93, a2, v60, v125, HIDWORD(v125), v61 != 21);
        }
        else
        {
          sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v110);
          v100 = (unsigned __int8 *)v110;
          if (!(_QWORD)v110)
          {
            v100 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v110 + 1));
            *(_QWORD *)&v110 = v100;
          }
          v100[*v100 + 1] = 4;
          v101 = v110;
          v102 = *(unsigned __int8 *)v110;
          *(_BYTE *)v110 = v102 + 1;
          *(_QWORD *)(v101 + 8 * v102 + 16) = 5;
          sub_22E3BB0B8((uint64_t)&v110);
          v11 = 1;
        }
      }
LABEL_141:
      *(_BYTE *)v118 = v119;
LABEL_142:
      v59 = (char *)v113;
LABEL_143:
      if (v59 == (char *)v12)
        return sub_22E8385C0((_BYTE *)a1, v11);
LABEL_144:
      free(v59);
      return sub_22E8385C0((_BYTE *)a1, v11);
    }
    if ((unsigned __int16)v52 == 26)
      return sub_22E83E9D0(a1, a2);
  }
  v73 = *(_QWORD *)(a1 + 8);
  v74 = *(_QWORD *)(v73 + 2816);
  v75 = v74 >= *(unsigned int *)(v73 + 2784) ? sub_22F162D2C(v73, 1u) : *(_QWORD *)(v73 + 2776) + 24 * v74;
  if (*(_WORD *)(v75 + 16) != 23 || *(_DWORD *)(a1 + 2628) != a2)
    goto LABEL_3;
  v84 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16);
  switch(v84)
  {
    case 'a':
      v85 = "autoreleasepool";
      break;
    case 't':
      v85 = "try";
      break;
    case 'f':
      v85 = "finally";
      break;
    default:
LABEL_3:
      v6 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v6 + 312) = a2;
      *(_DWORD *)(v6 + 316) = 1759;
      if (*(char *)(v6 + 311) < 0)
      {
        **(_BYTE **)(v6 + 288) = 0;
        *(_QWORD *)(v6 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v6 + 288) = 0;
        *(_BYTE *)(v6 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v113, v6);
      v7 = &v113;
      goto LABEL_6;
  }
  v103 = *(unsigned int *)(a1 + 16);
  v104 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v104 + 312) = a2;
  *(_DWORD *)(v104 + 316) = 1759;
  if (*(char *)(v104 + 311) < 0)
  {
    **(_BYTE **)(v104 + 288) = 0;
    *(_QWORD *)(v104 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v104 + 288) = 0;
    *(_BYTE *)(v104 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v118, v104);
  v105 = strlen(v85);
  *(_QWORD *)((char *)&v114 + 4) = 0;
  BYTE12(v114) = 0;
  LOBYTE(v117) = 0;
  v113 = (void *)(v103 | (v103 << 32));
  LOBYTE(v114) = 1;
  if (v105 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v106 = v105;
  if (v105 >= 0x17)
  {
    v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v105 | 7) != 0x17)
      v108 = v105 | 7;
    v109 = v108 + 1;
    v107 = (__int128 *)operator new(v108 + 1);
    *((_QWORD *)&v110 + 1) = v106;
    v111 = v109 | 0x8000000000000000;
    *(_QWORD *)&v110 = v107;
  }
  else
  {
    HIBYTE(v111) = v105;
    v107 = &v110;
    if (!v105)
      goto LABEL_182;
  }
  memcpy(v107, v85, v106);
LABEL_182:
  *((_BYTE *)v107 + v106) = 0;
  __p = v110;
  v116 = v111;
  sub_22E6D82D0((uint64_t *)&v118, &v113);
  if (SHIBYTE(v116) < 0)
    operator delete((void *)__p);
  v7 = (void **)&v118;
LABEL_6:
  sub_22E3BB0B8((uint64_t)v7);
  return 1;
}

unint64_t sub_22E852BB0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 56) + 1) & 0x40) == 0)
    goto LABEL_2;
  v5 = *(_QWORD *)(v2 + 2816);
  v6 = v5 >= *(unsigned int *)(v2 + 2784) ? sub_22F162D2C(v2, 1u) : *(_QWORD *)(v2 + 2776) + 24 * v5;
  if (*(_WORD *)(v6 + 16) != 5 || *(_BYTE *)(a1 + 947))
    goto LABEL_2;
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 != 5)
  {
    if (v7 == 400)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v9 = v8 != 0;
      goto LABEL_13;
    }
LABEL_2:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  v9 = 1;
  v8 = sub_22EA003D8(*(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
LABEL_13:
  if (!v9
    || !v8
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 33 > 1)
  {
    goto LABEL_2;
  }
  LODWORD(v3) = *(unsigned __int16 *)(a1 + 32);
  if ((_DWORD)v3 == 1)
  {
    v10 = a1 + 16;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v12 + 2816) + 1;
    if (v3 >= *(unsigned int *)(v12 + 2784))
      v10 = sub_22F162D2C(v12, 2u);
    else
      v10 = *(_QWORD *)(v12 + 2776) + 24 * v3;
  }
  v11 = *(unsigned __int16 *)(v10 + 16);
  if (v11 == 61 || v11 == 20)
  {
    LODWORD(v3) = *(unsigned __int16 *)(a1 + 32);
    if ((_DWORD)v3 == 5)
    {
      sub_22E88B7AC(a1);
      LODWORD(v3) = *(unsigned __int16 *)(a1 + 32);
    }
    LOBYTE(v3) = (_DWORD)v3 == 400;
  }
  if (v11 != 20 && v11 != 61)
    goto LABEL_2;
  return v3 & 1;
}

uint64_t sub_22E852D38(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v30;
  char v31;
  int v32;
  void *v33;
  __int16 v34;

  v2 = sub_22E80F788(a1);
  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 != 3)
  {
    v6 = v2;
    v7 = *(_BYTE *)(a1 + 947);
    *(_BYTE *)(a1 + 947) = 1;
    v8 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + 1) & 1) != 0)
    {
      if (v3 == 5 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 336))
      {
        v16 = *(_QWORD *)(v8 + 2816);
        v17 = v16 >= *(unsigned int *)(v8 + 2784) ? sub_22F162D2C(v8, 1u) : *(_QWORD *)(v8 + 2776) + 24 * v16;
        if (*(_WORD *)(v17 + 16) != 25)
        {
          v18 = *(_QWORD *)(a1 + 88) + 12888;
          while (1)
          {
            v18 = *(_QWORD *)v18;
            if (!v18)
              break;
            if ((*(_BYTE *)(v18 + 9) & 8) != 0)
              goto LABEL_18;
          }
        }
      }
      LOBYTE(v34) = 0;
      v33 = 0;
      if (!sub_22F2EB074(a1, &v34, (unint64_t *)&v33))
      {
        v23 = v33;
        if ((_BYTE)v34)
          goto LABEL_27;
        v20 = v6;
        v21 = a1;
        v19 = 0;
        v22 = (unint64_t)v33;
        goto LABEL_19;
      }
    }
    else
    {
      if (v3 != 5)
      {
LABEL_23:
        v25 = *(_QWORD *)(a1 + 88);
        v26 = sub_22E83766C(a1, 0);
        v27 = sub_22E83778C(a1, v26, 1);
        v5 = v27;
        if ((v27 & 1) == 0)
          v5 = (uint64_t)sub_22EBBCB14(v25, (_DWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v33);
        if ((v5 & 1) == 0)
        {
          v23 = (void *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_27:
          v20 = v6;
          v21 = a1;
          v19 = 0;
          v22 = 0;
          goto LABEL_28;
        }
        LOWORD(v33) = 20;
        v28 = (unsigned __int16 *)&v33;
LABEL_37:
        sub_22E885940(a1, v28, 1, 1);
        goto LABEL_38;
      }
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 16);
      v33 = 0;
      v11 = *(_QWORD **)(a1 + 88);
      v12 = (uint64_t *)v11[1611];
      v13 = *(_QWORD *)(a1 + 336);
      v14 = *(_QWORD *)(v8 + 2816);
      if (v14 >= *(unsigned int *)(v8 + 2784))
        v15 = sub_22F162D2C(v8, 1u);
      else
        v15 = *(_QWORD *)(v8 + 2776) + 24 * v14;
      v24 = sub_22EC2D528(v11, v12, v9, v10, v9 == v13, *(unsigned __int16 *)(v15 + 16) == 25, (unint64_t *)&v33);
      if (v24 != 2)
      {
        if (v24)
          goto LABEL_23;
LABEL_18:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v19 = *(_DWORD *)(a1 + 40);
        v20 = v6;
        v21 = a1;
        v22 = 0;
LABEL_19:
        v23 = 0;
LABEL_28:
        v5 = sub_22E85305C(v21, v20, v19, v22, v23);
LABEL_38:
        *(_BYTE *)(a1 + 947) = v7;
        return v5;
      }
      if (v33)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v22 = (unint64_t)v33;
        if (*(_WORD *)(a1 + 32) == 46)
        {
          v30 = sub_22F2EA184(a1, v10, (unint64_t)v33, 1, &v32);
          if (v31 || (v22 = v30) == 0)
          {
            v34 = 20;
            v5 = 1;
            v28 = (unsigned __int16 *)&v34;
            goto LABEL_37;
          }
          v33 = (void *)v30;
        }
        v20 = v6;
        v21 = a1;
        v19 = 0;
        goto LABEL_19;
      }
    }
    LOWORD(v32) = 20;
    v5 = 1;
    v28 = (unsigned __int16 *)&v32;
    goto LABEL_37;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v4 + 752))
  {
    *(_BYTE *)(v4 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + 6) = 1;
  }
  v5 = 1;
  *(_WORD *)(a1 + 32) = 1;
  sub_22F316D74(*(_QWORD *)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888));
  return v5;
}

uint64_t sub_22E85305C(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, void *a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t i;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v52;
  _BYTE v53[12];
  char v54;
  void *__p;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59[4];
  _BYTE v60[36];
  unsigned int v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[96];
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  uint64_t *v68;
  uint64_t v69;
  _QWORD v70[14];

  v70[12] = *MEMORY[0x24BDAC8D0];
  v9 = *(_BYTE *)(a1 + 947);
  *(_BYTE *)(a1 + 947) = 1;
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v10 + 752))
    {
      *(_BYTE *)(v10 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v10 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    if (a3)
    {
      sub_22F317070(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a3, 0, 0, 0);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 88);
      v12 = *(_QWORD *)(v11 + 12888);
      if (a4)
        sub_22F3172C0(v11, v12, a4, 0, 0, 0, 0);
      else
        sub_22E9C0E00(v11, v12, a5, 0, 0, 0, 0);
    }
    v24 = 1;
  }
  else
  {
    v61 = 0;
    v14 = sub_22E8506D4(a1, &v61);
    v15 = v14;
    v68 = v70;
    v69 = 0xC00000000;
    v65 = v67;
    v66 = 0xC00000000;
    v62 = v64;
    v63 = 0xC00000000;
    v16 = *(unsigned __int16 *)(a1 + 32);
    if (v16 == 61)
    {
      v17 = 0;
      for (i = 12; ; i = HIDWORD(v69))
      {
        if (v17 >= i)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v69;
        }
        v68[v17] = v15;
        LODWORD(v69) = v69 + 1;
        v19 = v61;
        v20 = v66;
        if (v66 >= (unint64_t)HIDWORD(v66))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v66;
        }
        *((_DWORD *)v65 + v20) = v19;
        LODWORD(v66) = v66 + 1;
        if (sub_22E8847B4(a1, 0x3Du, 15, "", 0))
        {
          LOWORD(v52) = 20;
          v24 = 1;
          goto LABEL_81;
        }
        v21 = *(unsigned __int16 *)(a1 + 32);
        v22 = *(_QWORD *)(a1 + 8);
        if (v21 == 3)
          break;
        if (v21 == 23 && (**(_QWORD **)(v22 + 56) & 0x200) != 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1932, (uint64_t)v60);
          sub_22E3BB0B8((uint64_t)v60);
          v23 = sub_22E84AF40(a1);
        }
        else
        {
          v23 = sub_22E83766C(a1, 0);
        }
        v24 = v23;
        if ((v23 & 1) != 0)
          goto LABEL_80;
        v25 = v63;
        if (v63 >= (unint64_t)HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = v63;
        }
        *((_QWORD *)v62 + v25) = v24 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v63) = v63 + 1;
        if (*(_WORD *)(a1 + 32) == 3)
        {
          v44 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v44 + 752))
          {
            *(_BYTE *)(v44 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v44 + 48) + 6) = 1;
          }
          *(_WORD *)(a1 + 32) = 1;
          if (a3)
          {
            sub_22F317070(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a3, (uint64_t)v68, v69, 0);
          }
          else
          {
            v45 = *(_QWORD *)(a1 + 88);
            v46 = *(_QWORD *)(v45 + 12888);
            if (a4)
              sub_22F3172C0(v45, v46, a4, (uint64_t)v68, v69, 0, 0);
            else
              sub_22E9C0E00(v45, v46, a5, (uint64_t)v68, v69, 0, 0);
          }
          v24 = 1;
          goto LABEL_82;
        }
        v15 = sub_22E8506D4(a1, &v61);
        if (!v15)
        {
          v16 = *(unsigned __int16 *)(a1 + 32);
          if (v16 != 61)
          {
            if (v16 != 65)
            {
LABEL_70:
              v15 = 0;
              goto LABEL_27;
            }
            while (1)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              v47 = *(unsigned int *)(a1 + 40);
              v48 = sub_22E83766C(a1, 0);
              v24 = v48;
              if (*(_WORD *)(a1 + 32) == 61 && (v48 & 1) == 0)
                v24 = (uint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v48 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v52);
              if ((v24 & 1) != 0)
                break;
              v49 = v63;
              if (v63 >= (unint64_t)HIDWORD(v63))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v49 = v63;
              }
              *((_QWORD *)v62 + v49) = v24 & 0xFFFFFFFFFFFFFFFELL;
              LODWORD(v63) = v63 + 1;
              v16 = *(unsigned __int16 *)(a1 + 32);
              if (v16 != 65)
                goto LABEL_70;
            }
            if (*(_WORD *)(a1 + 32) == 61)
            {
              v50 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v50 + 312) = v47;
              *(_DWORD *)(v50 + 316) = 1864;
              if (*(char *)(v50 + 311) < 0)
              {
                **(_BYTE **)(v50 + 288) = 0;
                *(_QWORD *)(v50 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v50 + 288) = 0;
                *(_BYTE *)(v50 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v59, v50);
              v54 = 0;
              *(_QWORD *)&v53[4] = 0;
              v56 = 0;
              v57 = 0;
              __p = 0;
              v58 = 0;
              v52 = (unsigned __int8 *)(v47 | (v47 << 32));
              v53[0] = 1;
              sub_22E6D82D0(v59, &v52);
              if (SHIBYTE(v57) < 0)
                operator delete(__p);
              sub_22E3BB0B8((uint64_t)v59);
            }
LABEL_80:
            LOWORD(v52) = 20;
LABEL_81:
            sub_22E885940(a1, (unsigned __int16 *)&v52, 1, 1);
            goto LABEL_82;
          }
        }
        v17 = v69;
      }
      if (*(_QWORD *)(v22 + 752))
      {
        *(_BYTE *)(v22 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v22 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      if (a3)
      {
        v24 = 1;
        sub_22F317070(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a3, (uint64_t)v68, v69, 1);
      }
      else
      {
        v42 = *(_QWORD *)(a1 + 88);
        v43 = *(_QWORD *)(v42 + 12888);
        v24 = 1;
        if (a4)
          sub_22F3172C0(v42, v43, a4, (uint64_t)v68, v69, 1, 0);
        else
          sub_22E9C0E00(v42, v43, a5, (uint64_t)v68, v69, 1, 0);
      }
    }
    else if (v14)
    {
LABEL_27:
      if (v16 == 20)
      {
        v26 = sub_22E80F788(a1);
        v27 = v69;
        if (!(_DWORD)v69)
        {
          if (HIDWORD(v69))
          {
            v28 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = v69;
          }
          v68[v28] = v15;
          LODWORD(v69) = v69 + 1;
          v29 = v61;
          v30 = v66;
          if (v66 >= HIDWORD(v66))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v66;
          }
          *((_DWORD *)v65 + v30) = v29;
          LODWORD(v66) = v66 + 1;
        }
        v31 = sub_22F1D3E5C((uint64_t *)(*(_QWORD *)(a1 + 8) + 672), v27, v68);
        if (a3)
        {
          v24 = sub_22F33472C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a3, v31, a2, (int *)v65, v66, v26, (unsigned __int8 **)v62, v63);
        }
        else
        {
          v32 = *(_QWORD **)(a1 + 88);
          v33 = v32[1611];
          if (a4)
            v34 = sub_22F3349A8(v32, v33, a4, v31, a2, (int *)v65, v66, v26, (unsigned __int8 **)v62, v63, 0);
          else
            v34 = sub_22EC308F4((uint64_t)v32, v33, (unsigned __int8 *)a5, v31, a2, (int *)v65, v66, v26, (unsigned __int8 **)v62, v63);
          v24 = v34;
        }
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v52);
        if (*(_WORD *)(a1 + 32) == 5)
          v38 = 61;
        else
          v38 = 20;
        v39 = v52;
        if (!v52)
        {
          v39 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v53);
          v52 = v39;
        }
        v39[*v39 + 1] = 4;
        v40 = v52;
        v41 = *v52;
        *v52 = v41 + 1;
        *(_QWORD *)&v40[8 * v41 + 16] = v38;
        sub_22E3BB0B8((uint64_t)&v52);
        LOWORD(v52) = 20;
        v24 = 1;
        sub_22E885940(a1, (unsigned __int16 *)&v52, 1, 1);
      }
    }
    else
    {
      sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v52);
      v35 = v52;
      if (!v52)
      {
        v35 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v53);
        v52 = v35;
      }
      v35[*v35 + 1] = 4;
      v36 = v52;
      v37 = *v52;
      *v52 = v37 + 1;
      *(_QWORD *)&v36[8 * v37 + 16] = 5;
      sub_22E3BB0B8((uint64_t)&v52);
      LOWORD(v52) = 20;
      v24 = 1;
      sub_22E885940(a1, (unsigned __int16 *)&v52, 1, 1);
    }
LABEL_82:
    if (v62 != v64)
      free(v62);
    if (v65 != v67)
      free(v65);
    if (v68 != v70)
      free(v68);
  }
  *(_BYTE *)(a1 + 947) = v9;
  return v24;
}

uint64_t sub_22E853888(uint64_t result, _QWORD *__dst)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (char *)(__dst + 1);
  v3 = __dst[1];
  if ((v3 & 4) != 0)
  {
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    v4 = *(char **)v6;
    v5 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v5 = (uint64_t)&v4[8 * (v3 > 7)];
  }
  if ((char *)v5 != v4)
  {
    v7 = result + 8;
    do
    {
      v9 = *(_QWORD *)(v5 - 8);
      v5 -= 8;
      v8 = v9;
      if ((*(_BYTE *)(v9 + 50) & 2) == 0)
      {
        sub_22E817D2C(__dst, v8);
        result = sub_22E828580(v7, v8);
      }
    }
    while ((char *)v5 != v4);
  }
  return result;
}

unint64_t *sub_22E853918(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;

  if (a1 == a2)
    return a1;
  v4 = *a2;
  if (*a2 < 8)
    goto LABEL_3;
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v8)
          *(_DWORD *)(v8 + 8) = 0;
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
LABEL_22:
      sub_22E828DE4(v7 & 0xFFFFFFFFFFFFFFF8, v5);
      return a1;
    }
  }
  else
  {
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
      if ((v4 & 4) != 0)
        goto LABEL_22;
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
      if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = 0;
      }
      else
      {
        v15 = v4 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = v15;
        v10 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v5;
      ++*(_DWORD *)(v9 + 8);
      return a1;
    }
    if ((v4 & 4) == 0)
    {
LABEL_17:
      *a1 = v5;
      return a1;
    }
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 == 1)
  {
    v5 = **(_QWORD **)v5 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_17;
  }
  v11 = (_QWORD *)operator new();
  v12 = (unint64_t)v11;
  v13 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v11 = v11 + 2;
  v11[1] = 0x400000000;
  if (*(_DWORD *)(v13 + 8))
    sub_22E828DE4((uint64_t)v11, v13);
  *a1 = v12 | 4;
  return a1;
}

void sub_22E853A78(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD v19[4];

  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a2 + 40))
    v8 = 1;
  else
    v8 = v7 == 0;
  if (v8)
  {
    v9 = v6[12];
    *(_DWORD *)(v9 + 312) = **(_DWORD **)(a1 + 8);
    v10 = 1642;
LABEL_9:
    *(_DWORD *)(v9 + 316) = v10;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v19, v9);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = v19[0];
    if (!v19[0])
    {
      v12 = sub_22E3B8AAC(v19[1]);
      v19[0] = v12;
    }
    sub_22E4D6448(v12 + 336, v11, 1);
    sub_22E3BB0B8((uint64_t)v19);
    return;
  }
  if (*(_QWORD *)(a2 + 1688))
  {
    v9 = v6[12];
    *(_DWORD *)(v9 + 312) = **(_DWORD **)(a1 + 8);
    v10 = 1641;
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a1 + 16);
  if ((*(_DWORD *)v13 & 0x80000) != 0)
  {
    sub_22E850B50(v6[11], (uint64_t *)a2, HIBYTE(*(_DWORD *)v13) & 3, *(_DWORD *)(v13 + 4), *(_BYTE **)(a1 + 24));
    v13 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(a2 + 40))
      v7 = 0;
    else
      v7 = *(_QWORD *)(a2 + 48);
  }
  v15 = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v15)
    v15 = v7;
  v16 = v15 | 1;
  if (v14)
  {
    v17 = v14 | 2;
  }
  else
  {
    v17 = sub_22F41FA34((llvm::StringMapImpl *)(v6[1] + 544), v6[1] + 672, v7);
    v13 = *(_QWORD *)(a1 + 16);
  }
  v18 = (unsigned int *)sub_22EC75C90((unsigned int *)v6[11], *(_QWORD *)(v6[11] + 12888), **(_DWORD **)(a1 + 8), **(unsigned int **)(a1 + 32), a2, (unsigned int *)v13, v16, v17, **(_DWORD **)(a1 + 40), 0);
  if (!*(_BYTE *)(a2 + 2056))
  {
    sub_22EA7E84C(*(_QWORD **)(a2 + 1696), *(_QWORD *)(a2 + 2048), v18);
    *(_BYTE *)(a2 + 2056) = 1;
  }
  *a3 = v18;
}

void sub_22E853C24(uint64_t *a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;

  v11 = *a1;
  *(_WORD *)(a2 + 1088) |= 0x40u;
  v12 = (unsigned int *)sub_22EA38B28(*(_QWORD **)(v11 + 88), *(uint64_t **)(*(_QWORD *)(v11 + 88) + 12888), *(_DWORD *)(*(_QWORD *)a2 + 88), a2, *(_QWORD *)(a2 + 1688), *(unsigned int *)a1[1], a7, a8);
  if (v12)
  {
    v13 = a1[2];
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 >= *(_DWORD *)(v13 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(v13 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
    ++*(_DWORD *)(v13 + 8);
  }
  if (!*(_BYTE *)(a2 + 2056))
  {
    sub_22EA7E84C(*(_QWORD **)(a2 + 1696), *(_QWORD *)(a2 + 2048), v12);
    *(_BYTE *)(a2 + 2056) = 1;
  }
  *a3 = v12;
}

uint64_t sub_22E853CF0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char *OpenMPDirectiveName;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  unint64_t v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  _BYTE *v92;
  __int128 *v93;
  unint64_t v94;
  unsigned int *v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  int v99;
  __int16 v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  _BYTE v109[32];
  _BYTE v110[32];
  _BYTE v111[32];
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  uint64_t (*v117)(uint64_t);
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  _QWORD v121[2];
  int v122;
  void **v123;
  _BYTE *v124;
  char v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  _BYTE v134[128];
  void *v135[2];
  _BYTE v136[80];
  unsigned __int8 *v137;
  uint64_t v138;
  _QWORD v139[14];

  v139[12] = *MEMORY[0x24BDAC8D0];
  v4 = (_BYTE *)(a1 + 944);
  v112 = (_BYTE *)(a1 + 944);
  v113 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v114 = a1;
  v115 = 1441813;
  v116 = 430;
  v118 = 0;
  v119 = 0;
  v117 = sub_22E80F720;
  OpenMPDirectiveName = (char *)llvm::omp::getOpenMPDirectiveName();
  if (sub_22E88C650((uint64_t)&v112, 1510, OpenMPDirectiveName, 0))
  {
    LOWORD(v132) = 430;
    sub_22E885940(a1, (unsigned __int16 *)&v132, 1, 2);
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 88);
  if (*(_WORD *)(a1 + 32) == 141)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  v9 = *(unsigned __int16 *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 16);
  if (v9 <= 0x36)
  {
    v11 = 5;
    switch(*(_WORD *)(a1 + 32))
    {
      case 0x1B:
        v11 = 11;
        goto LABEL_26;
      case 0x1C:
        v11 = 35;
        goto LABEL_26;
      case 0x1D:
      case 0x1F:
      case 0x21:
      case 0x22:
        goto LABEL_16;
      case 0x1E:
        v11 = 7;
        goto LABEL_26;
      case 0x20:
        goto LABEL_26;
      case 0x23:
        v11 = 6;
        goto LABEL_26;
      default:
        if (v9 != 5)
          goto LABEL_16;
        v31 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 40) = v10;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (!v31)
          goto LABEL_19;
        goto LABEL_27;
    }
  }
  switch(v9)
  {
    case '7':
      v11 = 10;
      goto LABEL_26;
    case '9':
      v11 = 12;
LABEL_26:
      *(_DWORD *)(a1 + 40) = v10;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v31 = (*(_QWORD *)(v8 + 88) + 16 * v11 + 15280) | 6;
LABEL_27:
      v13 = 1;
      goto LABEL_28;
    case ':':
      v11 = 36;
      goto LABEL_26;
  }
LABEL_16:
  v12 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v12 + 312) = v10;
  *(_DWORD *)(v12 + 316) = 1669;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v132, v12);
  sub_22E3BB0B8((uint64_t)&v132);
  LODWORD(v137) = 1441853;
  WORD2(v137) = 430;
  sub_22E885940(a1, (unsigned __int16 *)&v137, 3, 2);
LABEL_19:
  v6 = 0;
  if (*(_WORD *)(a1 + 32) == 430)
    goto LABEL_4;
  v13 = 0;
  v31 = 0;
LABEL_28:
  v14 = sub_22E8847B4(a1, 0x3Du, 15, "", 0);
  v15 = *(unsigned __int16 *)(a1 + 32);
  if (v14)
  {
    if (v15 == 430)
      goto LABEL_3;
    v13 = 0;
  }
  if (v15 == 430 || v15 == 61)
  {
    v16 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v16 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v16 + 316) = 1542;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v111, v16);
    sub_22E3BB0B8((uint64_t)v111);
    if (*(_WORD *)(a1 + 32) == 430)
      goto LABEL_3;
    v13 = 0;
  }
  v95 = (unsigned int *)(a1 + 16);
  v132 = v134;
  v133 = 0x800000000;
  v17 = *(_BYTE *)(a1 + 945);
  while (1)
  {
    *(_BYTE *)(a1 + 945) = 1;
    v137 = 0;
    v18 = sub_22E80FC30(a1, &v137, 1, a2, 0, 0, 0);
    if (v19 || v18 == 0)
    {
      LODWORD(v135[0]) = 3997761;
      WORD2(v135[0]) = 430;
      sub_22E885940(a1, (unsigned __int16 *)v135, 3, 2);
    }
    else
    {
      v23 = sub_22F33F6FC(*(_QWORD **)(a1 + 88), (int)v137, v18);
      if (v23 >= 0x10)
      {
        v24 = v23;
        v92 = v4;
        v25 = v137;
        v26 = v133;
        if (v133 >= (unint64_t)HIDWORD(v133))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v133;
        }
        v27 = (unint64_t *)((char *)v132 + 16 * v26);
        *v27 = v24;
        v27[1] = v25;
        LODWORD(v133) = v133 + 1;
        v4 = v92;
      }
    }
    v21 = *(unsigned __int16 *)(a1 + 32);
    if (v21 == 61 || v21 == 430)
      break;
    v22 = sub_22E8847B4(a1, 0x41u, 15, "", 0);
    v21 = *(unsigned __int16 *)(a1 + 32);
    if (v22)
    {
      if (v21 == 430)
      {
        v30 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v30 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v30 + 316) = 1542;
        if (*(char *)(v30 + 311) < 0)
        {
          **(_BYTE **)(v30 + 288) = 0;
          *(_QWORD *)(v30 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v30 + 288) = 0;
          *(_BYTE *)(v30 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v110, v30);
        sub_22E3BB0B8((uint64_t)v110);
        v6 = 0;
        *(_BYTE *)(a1 + 945) = v17;
        goto LABEL_64;
      }
      v13 = 0;
    }
    *(_BYTE *)(a1 + 945) = v17;
    if (v21 == 430)
      goto LABEL_56;
  }
  *(_BYTE *)(a1 + 945) = v17;
LABEL_56:
  if (!(_DWORD)v133)
  {
    LOWORD(v137) = 430;
    sub_22E885940(a1, (unsigned __int16 *)&v137, 1, 2);
    goto LABEL_63;
  }
  if (((v21 == 430) & (v13 ^ 1)) != 0)
  {
LABEL_63:
    v6 = 0;
    goto LABEL_64;
  }
  v28 = sub_22E8847B4(a1, 0x3Du, 15, "", 0);
  if (*(_WORD *)(a1 + 32) == 430)
  {
    v29 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v29 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v29 + 316) = 1499;
    if (*(char *)(v29 + 311) < 0)
    {
      **(_BYTE **)(v29 + 288) = 0;
      *(_QWORD *)(v29 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v29 + 288) = 0;
      *(_BYTE *)(v29 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v109, v29);
    sub_22E3BB0B8((uint64_t)v109);
    goto LABEL_63;
  }
  v32 = v28 ^ 1;
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_QWORD *)(v33 + 224);
  if (!v34)
    v34 = *(_QWORD *)(v33 + 216);
  v35 = v32 & v13;
  v36 = sub_22ECAF9F4(v33, *(uint64_t **)(v33 + 12888), v34, v31, (uint64_t)v132, v133, a2, 0);
  v6 = v36;
  v37 = v133;
  v108 = v36;
  if (v36)
    v38 = (uint64_t *)&v108;
  else
    v38 = 0;
  if ((v36 & 1) != 0)
    v39 = (uint64_t *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v39 = v38;
  if ((v36 & 1) != 0)
  {
    v40 = (uint64_t *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(v36 & 0xFFFFFFFFFFFFFFFELL));
  }
  else if (v36)
  {
    v40 = (uint64_t *)v109;
  }
  else
  {
    v40 = 0;
  }
  if (v39 == v40)
    goto LABEL_172;
  v41 = 0;
  v93 = (__int128 *)(a1 + 48);
  v88 = a1 + 2336;
  while (1)
  {
    v42 = *v39;
    v43 = *(_OWORD *)(a1 + 64);
    v106 = *v93;
    v107 = v43;
    v104 = *(_OWORD *)v95;
    v105 = *(_QWORD *)(a1 + 32);
    v94 = *(unsigned int *)(a1 + 2344);
    v90 = *(_WORD *)(a1 + 82);
    v91 = *(_WORD *)(a1 + 80);
    v89 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    sub_22E885C30(a1, 4227081);
    sub_22F33F824(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v42);
    v44 = *(_QWORD *)(a1 + 88);
    v45 = sub_22E83766C(a1, 0);
    v46 = sub_22E83778C(a1, v45, 1);
    v47 = sub_22EBCF22C(v44, v46 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v42 + 24), 0, 0);
    sub_22F33FA20(*(_QWORD *)(a1 + 88), v42, v47 & 0xFFFFFFFFFFFFFFFELL);
    if ((v47 & 1) != 0)
    {
      v48 = *(unsigned __int16 *)(a1 + 32);
      if (v48 != 22 && v48 != 430)
        goto LABEL_170;
    }
    v49 = (sub_22E811E8C((uint64_t)&v112) ^ 1) & v35;
    v35 = v47 > 1 ? v49 : 0;
    v50 = *(unsigned __int16 *)(a1 + 32);
    if (v50 != 430)
      break;
LABEL_118:
    if (++v41 == v37)
    {
      sub_22E80FADC(v88, v94);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
      v41 = v37;
    }
    else
    {
      v64 = *(_QWORD *)(a1 + 8);
      v65 = *(_QWORD *)(v64 + 2832);
      *(_QWORD *)(v64 + 2816) = *(_QWORD *)(v65 - 8);
      *(_QWORD *)(v64 + 2832) = v65 - 8;
      v66 = *(_QWORD *)(v64 + 1008);
      if (v66)
      {
        if (*(_QWORD *)(v66 + 224))
          v77 = 3;
        else
          v77 = 0;
        *(_DWORD *)(v64 + 1048) = v77;
        v68 = v94;
        v67 = v91;
      }
      else
      {
        v67 = v91;
        if (*(_QWORD *)(v64 + 1040))
          *(_DWORD *)(v64 + 1048) = 1;
        else
          *(_DWORD *)(v64 + 1048) = 2;
        v68 = v94;
      }
      v69 = v107;
      *v93 = v106;
      *(_OWORD *)(a1 + 64) = v69;
      *(_OWORD *)v95 = v104;
      *(_QWORD *)(a1 + 32) = v105;
      sub_22E80FADC(v88, v68);
      *(_WORD *)(a1 + 80) = v67;
      *(_WORD *)(a1 + 82) = v90;
      *(_WORD *)(a1 + 84) = v89;
    }
    sub_22E885CF4(a1);
    if (++v39 == v40)
      goto LABEL_172;
  }
  if (v50 != 5
    || (v51 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_DWORD *)v51 != 11)
    || ((v52 = *(_QWORD *)(v51 + 16), v53 = *(_QWORD *)(v51 + 19), v52 == 0x696C616974696E69)
      ? (v54 = v53 == 0x72657A696C616974)
      : (v54 = 0),
        !v54))
  {
    v80 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v80 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v80 + 316) = 15;
    if (*(char *)(v80 + 311) < 0)
    {
      **(_BYTE **)(v80 + 288) = 0;
      *(_QWORD *)(v80 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v80 + 288) = 0;
      *(_BYTE *)(v80 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v137, v80);
    v81 = v137;
    if (!v137)
    {
      v81 = (unsigned __int8 *)sub_22E3B8AAC(v138);
      v137 = v81;
    }
    v81[*v81 + 1] = 1;
    v82 = v137;
    v83 = *v137;
    *v137 = v83 + 1;
    *(_QWORD *)&v82[8 * v83 + 16] = "'initializer'";
    sub_22E3BB0B8((uint64_t)&v137);
LABEL_170:
    sub_22E80FADC(v88, v94);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
    goto LABEL_171;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v95);
  v96 = v4;
  v97 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v98 = a1;
  v99 = 1441813;
  v100 = 430;
  v102 = 0;
  v103 = 0;
  v101 = sub_22E80F720;
  v35 &= ~sub_22E88C650((uint64_t)&v96, 1510, "initializer", 0);
  if (*(_WORD *)(a1 + 32) == 430)
  {
LABEL_117:
    *v96 = v97;
    goto LABEL_118;
  }
  sub_22E885C30(a1, 4227081);
  v87 = sub_22F33FAB0(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v42);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    if (*(_DWORD *)v55 == 8 && *(_QWORD *)(v55 + 16) == 0x766972705F706D6FLL)
    {
      v86 = v37;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v95);
      if (sub_22E88BE44(a1))
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v95);
        v56 = *(unsigned __int16 *)(a1 + 32);
        if (v56 == 3)
        {
          v57 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v57 + 752))
          {
            *(_BYTE *)(v57 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v57 + 48) + 6) = 1;
          }
          v58 = v40;
          *(_WORD *)(a1 + 32) = 1;
          sub_22F31466C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v87);
          sub_22EA2BC1C(*(_QWORD *)(a1 + 88), v87);
          goto LABEL_154;
        }
        if (*(_BYTE *)v93)
        {
          if (v87 && (*(_DWORD *)(v87 + 28) & 0x7Fu) - 48 < 0x1B)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v78 = *(_QWORD *)(v87 + 48);
          }
          else
          {
            v78 = 0;
            *(_QWORD *)(a1 + 64) = 0;
          }
          v79 = *v95;
          *(_QWORD *)(a1 + 56) = v78;
          *(_DWORD *)(a1 + 52) = v79;
        }
        if (v56 == 23)
          v72 = sub_22E84AF40(a1);
        else
          v72 = sub_22E83766C(a1, 0);
        v58 = v40;
        if ((v72 & 1) != 0)
        {
          LODWORD(v137) = 28180502;
          sub_22E885940(a1, (unsigned __int16 *)&v137, 2, 2);
          sub_22EA2BABC(*(_QWORD *)(a1 + 88), v87);
          goto LABEL_154;
        }
      }
      else
      {
        v70 = *(unsigned __int16 *)(a1 + 32);
        if (v70 == 21)
        {
          v58 = v40;
          v124 = v4;
          v125 = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          v126 = a1;
          v127 = 1441813;
          v128 = 62;
          v130 = 0;
          v131 = 0;
          v129 = sub_22E80F720;
          sub_22E811DE8((uint64_t)&v124);
          v137 = (unsigned __int8 *)v139;
          v138 = 0xC00000000;
          v135[0] = v136;
          v135[1] = (void *)0x1400000000;
          v121[0] = a1;
          v121[1] = v87;
          v122 = v131;
          v123 = (void **)&v137;
          v120[0] = a1;
          v120[1] = v121;
          if (sub_22E83EFC4(a1, &v137, v135, sub_22E8613F4, v120, 0, 0))
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 864) && !*(_BYTE *)(a1 + 948))
            {
              v71 = v121[0];
              sub_22E9C487C();
              *(_BYTE *)(v71 + 948) = 1;
            }
            sub_22EA2BABC(*(_QWORD *)(a1 + 88), v87);
            LODWORD(v120[0]) = 28180502;
            sub_22E885940(a1, (unsigned __int16 *)v120, 2, 2);
          }
          else
          {
            v73 = *(_DWORD *)(a1 + 16);
            v74 = sub_22E811E8C((uint64_t)&v124);
            v85 = v131;
            v84 = (uint64_t *)v137;
            v75 = v138;
            if (!v74)
              v73 = HIDWORD(v131);
            v76 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 8 * v138 + 24, 3);
            sub_22F002D50(v76, v85, v84, v75, v73);
            sub_22EA28AD8();
          }
          v37 = v86;
          if (v135[0] != v136)
            free(v135[0]);
          if (v137 != (unsigned __int8 *)v139)
            free(v137);
          *v124 = v125;
          goto LABEL_154;
        }
        if (v70 != 23 || (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) == 0)
        {
          v58 = v40;
          sub_22EA117E4();
LABEL_154:
          v61 = 0;
          goto LABEL_110;
        }
        v58 = v40;
        sub_22E884578(a1, (int *)v95, 1932, (uint64_t)&v137);
        sub_22E3BB0B8((uint64_t)&v137);
        if ((sub_22E84AF40(a1) & 1) != 0)
        {
          sub_22EA2BABC(*(_QWORD *)(a1 + 88), v87);
          goto LABEL_154;
        }
      }
      sub_22EA28AD8();
      goto LABEL_154;
    }
  }
  v58 = v40;
  v59 = *(_QWORD *)(a1 + 88);
  v60 = sub_22E83766C(a1, 0);
  v61 = sub_22EBCF22C(v59, v60 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v42 + 24), 0, 0);
LABEL_110:
  sub_22F33FC94(*(_QWORD *)(a1 + 88), v42, v61 & 0xFFFFFFFFFFFFFFFELL, v87);
  if ((v61 & 1) == 0 || (v62 = *(unsigned __int16 *)(a1 + 32), v62 == 430) || v62 == 22)
  {
    v63 = v35 & ~sub_22E811E8C((uint64_t)&v96);
    if ((v61 & 1) != 0)
      v35 = 0;
    else
      v35 = v63;
    sub_22E885CF4(a1);
    v40 = v58;
    goto LABEL_117;
  }
  sub_22E80FADC(v88, v94);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
  sub_22E885CF4(a1);
  *v96 = v97;
LABEL_171:
  sub_22E885CF4(a1);
  v35 = 0;
LABEL_172:
  sub_22F33FDA0(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v6, v35);
LABEL_64:
  if (v132 != v134)
    free(v132);
LABEL_4:
  *v112 = v113;
  return v6;
}

_QWORD *sub_22E854B88(uint64_t a1, uint64_t a2)
{
  char *OpenMPDirectiveName;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t OpenMPClauseKind;
  unsigned int *v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *__p;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  _BYTE *v43;
  char v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD v53[8];

  v53[6] = *MEMORY[0x24BDAC8D0];
  v43 = (_BYTE *)(a1 + 944);
  v44 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v45 = a1;
  v46 = 1441813;
  v47 = 430;
  v49 = 0;
  v50 = 0;
  v48 = sub_22E80F720;
  OpenMPDirectiveName = (char *)llvm::omp::getOpenMPDirectiveName();
  if (sub_22E88C650((uint64_t)&v43, 1510, OpenMPDirectiveName, 0))
  {
    LOWORD(v51) = 430;
LABEL_3:
    sub_22E885940(a1, (unsigned __int16 *)&v51, 1, 2);
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 2816);
  if (v6 >= *(unsigned int *)(v5 + 2784))
    v7 = sub_22F162D2C(v5, 1u);
  else
    v7 = *(_QWORD *)(v5 + 2776) + 24 * v6;
  if (*(_WORD *)(v7 + 16) != 61)
  {
    v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 15192), "default", 7uLL);
LABEL_19:
    v14 = 1;
    goto LABEL_21;
  }
  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 == 5 || v8 == 82)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v11 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v11 + 316) = 1675;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v42, v11);
    sub_22E3BB0B8((uint64_t)v42);
    v9 = 0;
    v10 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  sub_22E8847B4(a1, 0x3Du, 15, "", 0);
  if ((v10 & 1) != 0)
    goto LABEL_19;
  if (*(_WORD *)(a1 + 32) == 430)
    goto LABEL_16;
  v14 = 0;
LABEL_21:
  v41 = 0;
  LODWORD(v40) = 0;
  v15 = sub_22F2EB494(a1, &v40, &v41, a2);
  if (v16
    || !v15
    || ((v17 = v40, v18 = sub_22F33FEEC(*(_QWORD **)(a1 + 88), v40, v15), v18 > 0xF) ? (v19 = v14) : (v19 = 0),
        (v19 & 1) == 0 || (v20 = v18, sub_22E811E8C((uint64_t)&v43))))
  {
    LOWORD(v51) = 430;
    goto LABEL_3;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_22E885C30(a1, 4227081);
  sub_22F33C0DC();
  v21 = v41;
  v34 = sub_22F33FF90(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v20, v17, v41);
  v51 = v53;
  v52 = 0x600000000;
  v22 = *(unsigned __int16 *)(a1 + 32);
  if (v22 == 430)
    goto LABEL_44;
  v23 = 1;
  do
  {
    if ((v22 - 399) >= 0x29)
    {
      sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
      OpenMPClauseKind = llvm::omp::getOpenMPClauseKind();
      if (v36 < 0)
        operator delete(__p);
    }
    else
    {
      OpenMPClauseKind = 85;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12288) + 21440) = OpenMPClauseKind;
    v25 = sub_22E855078(a1, 10, OpenMPClauseKind, (_DWORD)v52 == 0);
    if (v25)
    {
      v26 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        v28 = v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v28;
        v26 = v52;
      }
      v51[v26] = v25;
      LODWORD(v52) = v52 + 1;
    }
    else
    {
      v23 = 0;
    }
    if (*(_WORD *)(a1 + 32) == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    v27 = *(_QWORD **)(a1 + 88);
    *(_DWORD *)(v27[1536] + 21440) = 85;
    sub_22EB4E2D8(v27);
    v22 = *(unsigned __int16 *)(a1 + 32);
  }
  while (v22 != 430);
  if (!(_DWORD)v52)
  {
LABEL_44:
    sub_22E884578(a1, (int *)(a1 + 16), 1660, (uint64_t)&__p);
    v29 = (void *)llvm::omp::getOpenMPDirectiveName();
    sub_22E3B89A8((unsigned __int8 **)&__p, v29, v30);
    sub_22E3BB0B8((uint64_t)&__p);
    v23 = 0;
  }
  sub_22EC81438(*(_QWORD **)(a1 + 88), 0);
  sub_22E885CF4(a1);
  v31 = *(_QWORD *)(a1 + 88);
  v32 = *(_QWORD *)(v31 + 224);
  if (!v32)
    v32 = *(_QWORD *)(v31 + 216);
  v33 = sub_22ECB0100(v31, *(uint64_t **)(v31 + 12888), v32, v9, v20, v17, v21, a2, v34 & 0xFFFFFFFFFFFFFFFELL, v51, v52, 0);
  if ((v23 & 1) != 0)
    v12 = v33;
  else
    v12 = 0;
  if (v51 != v53)
    free(v51);
LABEL_17:
  *v43 = v44;
  return v12;
}

unsigned int *sub_22E855078(uint64_t a1, int a2, uint64_t a3, char a4)
{
  int isAllowedClauseForDirective;
  void *OpenMPClauseName;
  size_t v10;
  void *OpenMPDirectiveName;
  size_t v12;
  unsigned int *v13;
  int v14;
  void *v15;
  size_t v16;
  void *v17;
  size_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  void *v24;
  size_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  void *v39;
  size_t v40;
  void *v41;
  size_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  BOOL v47;
  void *v48;
  size_t v49;
  void *v50;
  size_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  char *v57;
  void *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  size_t v65;
  void *v66;
  size_t v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  _BOOL4 v77;
  _BOOL4 v78;
  int v79;
  void *v80;
  size_t v81;
  void *v82;
  size_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 ***v92;
  size_t v93;
  _BOOL4 v94;
  _BOOL4 v95;
  char v96;
  void *v97;
  size_t v98;
  void *v99;
  size_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  __int128 v106;
  unint64_t v107;
  __int16 v108;
  int v109;
  unsigned int v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  int v117;
  BOOL v118;
  unsigned __int16 *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  BOOL v129;
  unsigned __int16 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  char v140;
  unsigned __int8 *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  int v148;
  BOOL v149;
  unsigned __int16 *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  int v160;
  char v161;
  int v162;
  unint64_t v163;
  unsigned __int8 *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  int v172;
  int v173;
  unsigned __int8 **v174;
  BOOL v175;
  unsigned __int16 *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  char v190;
  uint64_t v192;
  void *v193;
  size_t v194;
  void *v195;
  size_t v196;
  unsigned __int8 *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  unsigned __int8 **v208;
  char v209;
  BOOL v210;
  unsigned __int16 *v211;
  void *v212;
  void *v213;
  unsigned int v214;
  int v215;
  char v216;
  BOOL v217;
  unsigned __int16 *v218;
  void *v219;
  void *v220;
  unsigned int v221;
  int v222;
  void *v223;
  unsigned __int8 *v224;
  _QWORD *v225;
  uint64_t v226;
  char v227;
  BOOL v228;
  unsigned __int16 *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 **v232;
  int v233;
  unint64_t v234;
  __int16 v235;
  __int16 v236;
  int v237;
  int v238;
  __int128 v239;
  uint64_t v240;
  void *__p[2];
  __int128 v242;
  __int128 v243;
  _OWORD v244[3];
  uint64_t v245;
  int v246;
  int *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD v252[5];
  _QWORD v253[3];
  _BYTE v254[12];
  int v255;
  unsigned __int8 **v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  __int16 v260;
  uint64_t (*v261)(uint64_t);
  uint64_t v262;
  uint64_t v263;
  _DWORD *v264;
  uint64_t v265;
  _DWORD v266[8];
  uint64_t v267;

  v267 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 956) = a3;
  if ((_DWORD)a3 == 85)
  {
    v14 = 0;
LABEL_46:
    sub_22F2EB66C(a1);
LABEL_95:
    v13 = 0;
  }
  else
  {
    isAllowedClauseForDirective = llvm::omp::isAllowedClauseForDirective();
    if ((isAllowedClauseForDirective & 1) == 0)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1677, (uint64_t)&v243);
      OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
      sub_22E3B89A8((unsigned __int8 **)&v243, OpenMPClauseName, v10);
      OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
      sub_22E3B89A8((unsigned __int8 **)&v243, OpenMPDirectiveName, v12);
      sub_22E3BB0B8((uint64_t)&v243);
    }
    v13 = 0;
    v14 = isAllowedClauseForDirective ^ 1;
    switch((int)a3)
    {
      case 0:
      case 1:
      case 11:
      case 13:
      case 25:
      case 32:
      case 49:
      case 50:
      case 51:
      case 65:
      case 67:
      case 68:
      case 69:
      case 72:
      case 74:
      case 80:
      case 82:
      case 83:
      case 86:
      case 93:
        if ((a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v15 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v15, v16);
          v17 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v17, v18);
          v19 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v19 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v19;
          }
          v19[*v19 + 1] = 2;
          v20 = v243;
          v21 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v14 = 1;
        }
        goto LABEL_18;
      case 3:
      case 5:
      case 6:
      case 14:
      case 15:
      case 18:
      case 26:
      case 29:
      case 30:
      case 31:
      case 34:
      case 37:
      case 39:
      case 42:
      case 43:
      case 44:
      case 46:
      case 53:
      case 63:
      case 66:
      case 73:
      case 77:
      case 81:
      case 89:
      case 90:
        v68 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = v68;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v69 = *(_DWORD *)(a1 + 40);
        v256 = (unsigned __int8 **)&v258;
        v257 = 0x400000000;
        v245 = 0;
        v243 = 0u;
        memset(v244, 0, 44);
        v246 = -1;
        v247 = (int *)&v249;
        v248 = 0x500000000;
        v250 = v252;
        v251 = 0x500000000;
        v252[3] = v253;
        v252[4] = 0x200000000;
        v253[1] = v254;
        v253[2] = 0x200000000;
        v254[8] = 0;
        v255 = 0;
        v13 = 0;
        if (((sub_22E85964C(a1, a2, a3, (uint64_t)&v256, (uint64_t)&v243) | v14) & 1) == 0)
        {
          v264 = (_DWORD *)__PAIR64__(v69, v68);
          LODWORD(v265) = HIDWORD(v243);
          LODWORD(v234) = v246;
          v13 = sub_22F33ED50(*(uint64_t **)(a1 + 88), a3, v256, v257, (_DWORD *)v243, (int *)&v264, DWORD2(v243), (uint64_t)v244, (uint64_t)&v244[2], v234, v247, (unsigned __int8 **)v248, (uint64_t)v250);
        }
        sub_22F2EC9A4((uint64_t)&v243);
        if (v256 != (unsigned __int8 **)&v258)
          free(v256);
        break;
      case 4:
      case 7:
      case 12:
      case 19:
      case 21:
      case 27:
      case 28:
      case 33:
      case 35:
      case 52:
      case 55:
      case 56:
      case 57:
      case 58:
      case 60:
      case 61:
      case 62:
      case 70:
      case 75:
      case 78:
        if ((a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v22 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v22, v23);
          v24 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v24, v25);
          v26 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v26 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v26;
          }
          v26[*v26 + 1] = 2;
          v27 = v243;
          v28 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v28 + 1;
          *(_QWORD *)(v27 + 8 * v28 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v14 = 1;
        }
        v29 = *(_QWORD *)(a1 + 8);
        if ((a3 & 0xFFFFFFFE) != 0x3C)
          goto LABEL_55;
        v30 = *(_QWORD *)(v29 + 2816);
        if (v30 >= *(unsigned int *)(v29 + 2784))
          v31 = sub_22F162D2C(v29, 1u);
        else
          v31 = *(_QWORD *)(v29 + 2776) + 24 * v30;
        if (*(_WORD *)(v31 + 16) != 21)
        {
LABEL_18:
          v32 = *(_DWORD *)(a1 + 16);
          sub_22E80F0F0(a1, 0);
          if (!isAllowedClauseForDirective)
            goto LABEL_95;
          v33 = *(_QWORD *)(a1 + 88);
          v34 = *(_DWORD *)(a1 + 16);
          v35 = a3;
          v36 = v32;
LABEL_20:
          v37 = sub_22F33E73C(v33, v35, v36, v34);
          goto LABEL_21;
        }
        v29 = *(_QWORD *)(a1 + 8);
LABEL_55:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(v29, (unsigned int *)(a1 + 16));
        v70 = *(_DWORD *)(a1 + 40);
        v71 = *(_DWORD *)(a1 + 16);
        LODWORD(v243) = 0;
        v72 = (char *)llvm::omp::getOpenMPClauseName();
        v74 = sub_22F2EBCF4(a1, v72, v73, &v243, 0);
        if (!(v74 & 1 | ((isAllowedClauseForDirective & 1) == 0)))
        {
          v37 = (uint64_t)sub_22F33DED4(*(uint64_t **)(a1 + 88), a3, (unsigned __int8 *)(v74 & 0xFFFFFFFFFFFFFFFELL), v70, v71, v243);
LABEL_21:
          v13 = (unsigned int *)v37;
          break;
        }
        goto LABEL_95;
      case 9:
      case 10:
      case 16:
      case 59:
      case 64:
        v38 = isAllowedClauseForDirective ^ 1;
        if ((_DWORD)a3 != 59)
        {
          v38 = v14;
          if ((a4 & 1) == 0)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
            v39 = (void *)llvm::omp::getOpenMPDirectiveName();
            sub_22E3B89A8((unsigned __int8 **)&v243, v39, v40);
            v41 = (void *)llvm::omp::getOpenMPClauseName();
            sub_22E3B89A8((unsigned __int8 **)&v243, v41, v42);
            v43 = (unsigned __int8 *)v243;
            if (!(_QWORD)v243)
            {
              v43 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
              *(_QWORD *)&v243 = v43;
            }
            v43[*v43 + 1] = 2;
            v44 = v243;
            v45 = *(unsigned __int8 *)v243;
            *(_BYTE *)v243 = v45 + 1;
            *(_QWORD *)(v44 + 8 * v45 + 16) = 0;
            sub_22E3BB0B8((uint64_t)&v243);
            v38 = 1;
          }
        }
        sub_22E860744(a1, a3, v14);
        v13 = v46;
        v14 = v38;
        break;
      case 17:
      case 22:
      case 24:
      case 71:
        v47 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) > 0x31u && (_DWORD)a3 == 17;
        if (!v47 && (a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v48 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v48, v49);
          v50 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v50, v51);
          v52 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v52 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v52;
          }
          v52[*v52 + 1] = 2;
          v53 = v243;
          v54 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v54 + 1;
          *(_QWORD *)(v53 + 8 * v54 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v14 = 1;
        }
        goto LABEL_36;
      case 20:
        if (a2 == 93)
          goto LABEL_58;
        if ((a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v97 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v97, v98);
          v99 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v99, v100);
          v101 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v101 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v101;
          }
          v101[*v101 + 1] = 2;
          v102 = v243;
          v103 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v103 + 1;
          *(_QWORD *)(v102 + 8 * v103 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v14 = 1;
        }
        v104 = *(_DWORD *)(a1 + 16);
        sub_22E80F0F0(a1, 0);
        if (!isAllowedClauseForDirective)
          goto LABEL_95;
        v33 = *(_QWORD *)(a1 + 88);
        v34 = *(_DWORD *)(a1 + 16);
        v35 = 20;
        v36 = v104;
        goto LABEL_20;
      case 23:
        goto LABEL_46;
      case 36:
LABEL_36:
        v55 = (int *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v56 = *(_DWORD *)(a1 + 40);
        *(_QWORD *)&v243 = a1 + 944;
        BYTE8(v243) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v244[0] = a1;
        DWORD2(v244[0]) = 1441813;
        WORD6(v244[0]) = 430;
        *((_QWORD *)&v244[1] + 1) = 0;
        *(_QWORD *)&v244[2] = 0;
        *(_QWORD *)&v244[1] = sub_22E80F720;
        v57 = (char *)llvm::omp::getOpenMPClauseName();
        v13 = 0;
        if ((sub_22E88C650((uint64_t)&v243, 1510, v57, 0) & 1) != 0)
          goto LABEL_265;
        v256 = (unsigned __int8 **)&v258;
        v257 = 0x400000000;
        v264 = v266;
        v265 = 0x400000000;
        v237 = v56;
        if ((int)a3 > 23)
        {
          if ((_DWORD)a3 == 24)
          {
            if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
            {
              sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
              v88 = BYTE7(v242);
              v58 = __p[1];
            }
            else
            {
              v88 = 0;
              BYTE7(v242) = 0;
              LOBYTE(__p[0]) = 0;
            }
            v118 = v88 < 0;
            if (v88 >= 0)
              v119 = (unsigned __int16 *)__p;
            else
              v119 = (unsigned __int16 *)__p[0];
            v120 = v88 & 0x7F;
            if (v118)
              v121 = (uint64_t)v58;
            else
              v121 = v120;
            v122 = sub_22F1DC2A4(24, v119, v121, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
            v123 = v257;
            if (v257 >= HIDWORD(v257))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v123 = v257;
            }
            *((_DWORD *)v256 + v123) = v122;
            LODWORD(v257) = v257 + 1;
            if (SBYTE7(v242) < 0)
              operator delete(__p[0]);
            v124 = *v55;
            v125 = v265;
            if (v265 >= HIDWORD(v265))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v125 = v265;
            }
            v264[v125] = v124;
            LODWORD(v265) = v265 + 1;
            v126 = *(unsigned __int16 *)(a1 + 32);
            if (v126 != 22 && v126 != 65 && v126 != 430)
              sub_22E80F0F0(a1, 0);
            if (!*((_DWORD *)v256 + v257 - 1) && *(_WORD *)(a1 + 32) == 65)
            {
              v117 = sub_22E80F0F0(a1, 0);
              if (v117)
                goto LABEL_252;
              goto LABEL_169;
            }
          }
          else
          {
            if ((_DWORD)a3 != 71)
            {
LABEL_100:
              v266[0] = *(_DWORD *)(a1 + 16);
              LODWORD(v265) = 1;
              v106 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
              v242 = v106;
              v239 = *(_OWORD *)v55;
              v240 = *(_QWORD *)(a1 + 32);
              v107 = *(unsigned int *)(a1 + 2344);
              v108 = *(_WORD *)(a1 + 80);
              v235 = *(_WORD *)(a1 + 82);
              v236 = *(_WORD *)(a1 + 84);
              sub_22F1629F8(*(_QWORD *)(a1 + 8));
              v109 = sub_22E85EC88(a1);
              v110 = v257;
              if (v257 >= HIDWORD(v257))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v110 = v257;
              }
              v111 = (_OWORD *)(a1 + 48);
              *((_DWORD *)v256 + v110) = v109;
              LODWORD(v257) = v257 + 1;
              if (v109 == 89)
              {
                v112 = *(_QWORD *)(a1 + 8);
                v113 = *(_QWORD *)(v112 + 2832);
                *(_QWORD *)(v112 + 2816) = *(_QWORD *)(v113 - 8);
                *(_QWORD *)(v112 + 2832) = v113 - 8;
                v114 = *(_QWORD *)(v112 + 1008);
                if (v114)
                {
                  if (*(_QWORD *)(v114 + 224))
                    v115 = 3;
                  else
                    v115 = 0;
                }
                else if (*(_QWORD *)(v112 + 1040))
                {
                  v115 = 1;
                }
                else
                {
                  v115 = 2;
                }
                *(_DWORD *)(v112 + 1048) = v115;
                v116 = v242;
                *v111 = *(_OWORD *)__p;
                *(_OWORD *)(a1 + 64) = v116;
                *(_OWORD *)v55 = v239;
                *(_QWORD *)(a1 + 32) = v240;
                sub_22E80FADC(a1 + 2336, v107);
                v117 = 0;
                *(_WORD *)(a1 + 80) = v108;
                *(_WORD *)(a1 + 82) = v235;
                *(_WORD *)(a1 + 84) = v236;
              }
              else
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                v127 = *(_QWORD *)(a1 + 8);
                if (*(_WORD *)(a1 + 32) == 61 && *(_DWORD *)(*(_QWORD *)(v127 + 56) + 72) >= 0x29u)
                {
                  sub_22E80FADC(a1 + 2336, v107);
                  v128 = *(_QWORD *)(a1 + 8);
                  *(_QWORD *)(v128 + 2832) -= 8;
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(v128, (unsigned int *)(a1 + 16));
                  v117 = *(_DWORD *)(a1 + 40);
                }
                else
                {
                  v144 = *(_QWORD *)(v127 + 2832);
                  *(_QWORD *)(v127 + 2816) = *(_QWORD *)(v144 - 8);
                  *(_QWORD *)(v127 + 2832) = v144 - 8;
                  v145 = *(_QWORD *)(v127 + 1008);
                  if (v145)
                  {
                    if (*(_QWORD *)(v145 + 224))
                      v146 = 3;
                    else
                      v146 = 0;
                  }
                  else if (*(_QWORD *)(v127 + 1040))
                  {
                    v146 = 1;
                  }
                  else
                  {
                    v146 = 2;
                  }
                  *(_DWORD *)(v127 + 1048) = v146;
                  v147 = v242;
                  *v111 = *(_OWORD *)__p;
                  *(_OWORD *)(a1 + 64) = v147;
                  *(_OWORD *)v55 = v239;
                  *(_QWORD *)(a1 + 32) = v240;
                  sub_22E80FADC(a1 + 2336, v107);
                  v117 = 0;
                  *(_WORD *)(a1 + 80) = v108;
                  *(_WORD *)(a1 + 82) = v235;
                  *(_WORD *)(a1 + 84) = v236;
                  *((_DWORD *)v256 + v257 - 1) = 89;
                }
              }
              if ((_DWORD)a3 == 36)
                goto LABEL_252;
LABEL_169:
              v148 = 0;
LABEL_188:
              v157 = 0;
              goto LABEL_253;
            }
            v259 = 0;
            v258 = 0;
            LODWORD(v257) = 3;
            sub_22F2ED5C8((uint64_t)&v264);
            v208 = v256;
            *v256 = (unsigned __int8 *)0x500000005;
            *((_DWORD *)v208 + 2) = 5;
            if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
            {
              sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
              v209 = BYTE7(v242);
            }
            else
            {
              v209 = 0;
              BYTE7(v242) = 0;
              LOBYTE(__p[0]) = 0;
            }
            v210 = v209 < 0;
            if (v209 >= 0)
              v211 = (unsigned __int16 *)__p;
            else
              v211 = (unsigned __int16 *)__p[0];
            v212 = (void *)(v209 & 0x7F);
            if (v210)
              v213 = __p[1];
            else
              v213 = v212;
            v214 = sub_22F1DC2A4(71, v211, (uint64_t)v213, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
            if (SBYTE7(v242) < 0)
              operator delete(__p[0]);
            if (v214 >= 6)
            {
              *(_DWORD *)v256 = v214;
              *v264 = *(_DWORD *)(a1 + 16);
              v215 = *(unsigned __int16 *)(a1 + 32);
              if (v215 != 22 && v215 != 65 && v215 != 430)
              {
                sub_22E80F0F0(a1, 0);
                v215 = *(unsigned __int16 *)(a1 + 32);
              }
              if (v215 == 65)
              {
                sub_22E80F0F0(a1, 0);
                if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
                {
                  sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
                  v216 = BYTE7(v242);
                }
                else
                {
                  v216 = 0;
                  BYTE7(v242) = 0;
                  LOBYTE(__p[0]) = 0;
                }
                v217 = v216 < 0;
                if (v216 >= 0)
                  v218 = (unsigned __int16 *)__p;
                else
                  v218 = (unsigned __int16 *)__p[0];
                v219 = (void *)(v216 & 0x7F);
                if (v217)
                  v220 = __p[1];
                else
                  v220 = v219;
                v221 = sub_22F1DC2A4(71, v218, (uint64_t)v220, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
                if (SBYTE7(v242) < 0)
                  operator delete(__p[0]);
                if (v221 <= 5)
                  v222 = 5;
                else
                  v222 = v221;
                *((_DWORD *)v256 + 1) = v222;
                v264[1] = *(_DWORD *)(a1 + 16);
                v215 = *(unsigned __int16 *)(a1 + 32);
                if (v215 != 22 && v215 != 65 && v215 != 430)
                {
                  sub_22E80F0F0(a1, 0);
                  v215 = *(unsigned __int16 *)(a1 + 32);
                }
              }
              if (v215 == 61)
              {
                sub_22E80F0F0(a1, 0);
              }
              else
              {
                sub_22E884578(a1, (int *)(a1 + 16), 1989, (uint64_t)__p);
                v224 = (unsigned __int8 *)__p[0];
                if (!__p[0])
                {
                  v224 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                  __p[0] = v224;
                }
                v224[*v224 + 1] = 1;
                v225 = __p[0];
                v226 = *(unsigned __int8 *)__p[0];
                *(_BYTE *)__p[0] = v226 + 1;
                v225[v226 + 2] = "schedule modifier";
                sub_22E3BB0B8((uint64_t)__p);
              }
              if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
              {
                sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
                v227 = BYTE7(v242);
                v223 = __p[1];
              }
              else
              {
                v227 = 0;
                BYTE7(v242) = 0;
                LOBYTE(__p[0]) = 0;
              }
              v228 = v227 < 0;
              if (v227 >= 0)
                v229 = (unsigned __int16 *)__p;
              else
                v229 = (unsigned __int16 *)__p[0];
              v230 = v227 & 0x7F;
              if (v228)
                v231 = (uint64_t)v223;
              else
                v231 = v230;
              v214 = sub_22F1DC2A4(71, v229, v231, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
              if (SBYTE7(v242) < 0)
                operator delete(__p[0]);
            }
            v232 = v256;
            *((_DWORD *)v256 + 2) = v214;
            v264[2] = *(_DWORD *)(a1 + 16);
            v233 = *(unsigned __int16 *)(a1 + 32);
            if (v233 != 22 && v233 != 65 && v233 != 430)
            {
              sub_22E80F0F0(a1, 0);
              v232 = v256;
            }
            if (*((_DWORD *)v232 + 2) <= 2u && *(_WORD *)(a1 + 32) == 65)
            {
              v117 = sub_22E80F0F0(a1, 0);
              if (v117)
                goto LABEL_252;
              goto LABEL_169;
            }
          }
        }
        else
        {
          if ((_DWORD)a3 != 17)
          {
            if ((_DWORD)a3 == 22)
            {
              v59 = 0;
              if ((a2 - 56) <= 0x2A && ((1 << (a2 - 56)) & 0x6000001CF91) != 0)
              {
                v60 = *(_QWORD *)(a1 + 8);
                if (*(_DWORD *)(*(_QWORD *)(v60 + 56) + 72) < 0x32u)
                {
                  v59 = 0;
                }
                else
                {
                  v61 = *(_QWORD *)(v60 + 2816);
                  if (v61 >= *(unsigned int *)(v60 + 2784))
                  {
                    v63 = sub_22F162D2C(v60, 1u);
                  }
                  else
                  {
                    v62 = *(void **)(v60 + 2776);
                    v63 = (uint64_t)v62 + 24 * v61;
                  }
                  if (*(_WORD *)(v63 + 16) == 61)
                  {
                    if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
                    {
                      sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
                      v161 = BYTE7(v242);
                      v62 = __p[1];
                    }
                    else
                    {
                      v161 = 0;
                      BYTE7(v242) = 0;
                      LOBYTE(__p[0]) = 0;
                    }
                    v175 = v161 < 0;
                    if (v161 >= 0)
                      v176 = (unsigned __int16 *)__p;
                    else
                      v176 = (unsigned __int16 *)__p[0];
                    v177 = v161 & 0x7F;
                    if (v175)
                      v178 = (uint64_t)v62;
                    else
                      v178 = v177;
                    v179 = sub_22F1DC2A4(22, v176, v178, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
                    v180 = v257;
                    if (v257 >= HIDWORD(v257))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v180 = v257;
                    }
                    *((_DWORD *)v256 + v180) = v179;
                    LODWORD(v257) = v257 + 1;
                    if (SBYTE7(v242) < 0)
                      operator delete(__p[0]);
                    v181 = *v55;
                    v182 = v265;
                    if (v265 >= HIDWORD(v265))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v182 = v265;
                    }
                    v264[v182] = v181;
                    LODWORD(v265) = v265 + 1;
                    sub_22E80F0F0(a1, 0);
                    sub_22E80F0F0(a1, 0);
                    goto LABEL_251;
                  }
                  v59 = v257;
                  if (v257 >= HIDWORD(v257))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v59 = v257;
                  }
                }
              }
              *((_DWORD *)v256 + v59) = 2;
              LODWORD(v257) = v257 + 1;
              v162 = v265;
              if (v265 < HIDWORD(v265))
              {
                v117 = 0;
                v264[v265] = 0;
                LODWORD(v265) = v162 + 1;
LABEL_252:
                v183 = *(_DWORD *)(a1 + 16);
                v184 = sub_22E838554(a1, 0, 0, 0, 0, 0);
                v185 = sub_22E83778C(a1, v184, 3);
                v157 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v185 & 0xFFFFFFFFFFFFFFFELL, v183, 0, 0);
                v148 = 1;
                goto LABEL_253;
              }
              sub_22F2ED640((uint64_t)&v264);
LABEL_251:
              v117 = 0;
              goto LABEL_252;
            }
            goto LABEL_100;
          }
          if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
          {
            sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
            v96 = BYTE7(v242);
            v58 = __p[1];
          }
          else
          {
            v96 = 0;
            BYTE7(v242) = 0;
            LOBYTE(__p[0]) = 0;
          }
          v129 = v96 < 0;
          if (v96 >= 0)
            v130 = (unsigned __int16 *)__p;
          else
            v130 = (unsigned __int16 *)__p[0];
          v131 = v96 & 0x7F;
          if (v129)
            v132 = (uint64_t)v58;
          else
            v132 = v131;
          v133 = sub_22F1DC2A4(17, v130, v132, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
          if (SBYTE7(v242) < 0)
            operator delete(__p[0]);
          if (v133 <= 3)
            v134 = 3;
          else
            v134 = v133;
          v135 = v257;
          if (v257 >= HIDWORD(v257))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v135 = v257;
          }
          *((_DWORD *)v256 + v135) = v134;
          LODWORD(v257) = v257 + 1;
          v136 = *v55;
          v137 = v265;
          if (v265 >= HIDWORD(v265))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v137 = v265;
          }
          v264[v137] = v136;
          LODWORD(v265) = v265 + 1;
          v138 = *(unsigned __int16 *)(a1 + 32);
          if (v138 != 22 && v138 != 65 && v138 != 430)
          {
            sub_22E80F0F0(a1, 0);
            v138 = *(unsigned __int16 *)(a1 + 32);
          }
          if (v138 == 61)
          {
            sub_22E80F0F0(a1, 0);
          }
          else
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) >= 0x32u)
            {
              v159 = v257;
              if (v257 >= HIDWORD(v257))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v159 = v257;
              }
              *((_DWORD *)v256 + v159) = 3;
              LODWORD(v257) = v257 + 1;
              v160 = v265;
              if (v265 >= HIDWORD(v265))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v160 = v265;
              }
              v148 = 0;
              v117 = 0;
              v157 = 0;
              v264[v160] = 0;
              LODWORD(v265) = v265 + 1;
LABEL_253:
              v186 = *v55;
              v187 = sub_22E811E8C((uint64_t)&v243);
              v189 = DWORD1(v244[2]);
              if (v187)
                v189 = v186;
              if (v148)
              {
                if ((v157 & 1) != 0)
                  v190 = 0;
                else
                  v190 = isAllowedClauseForDirective;
                if ((v190 & 1) == 0)
                  goto LABEL_260;
              }
              else if (!isAllowedClauseForDirective)
              {
LABEL_260:
                v13 = 0;
LABEL_261:
                if (v264 != v266)
                  free(v264);
                v174 = v256;
                if (v256 != (unsigned __int8 **)&v258)
LABEL_264:
                  free(v174);
LABEL_265:
                *(_BYTE *)v243 = BYTE8(v243);
                break;
              }
              v13 = sub_22F33E634(*(_QWORD **)(a1 + 88), a3, (uint64_t)v256, v257, (_DWORD *)(v157 & 0xFFFFFFFFFFFFFFFELL), v237, v244[2], v188, v264, v265, v117, 0, v189);
              goto LABEL_261;
            }
            v139 = v257;
            if (*((_DWORD *)v256 + v257 - 1) != 3)
            {
              sub_22E884578(a1, (int *)(a1 + 16), 1989, (uint64_t)__p);
              v141 = (unsigned __int8 *)__p[0];
              if (!__p[0])
              {
                v141 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                __p[0] = v141;
              }
              v141[*v141 + 1] = 1;
              v142 = __p[0];
              v143 = *(unsigned __int8 *)__p[0];
              *(_BYTE *)__p[0] = v143 + 1;
              v142[v143 + 2] = "defaultmap modifier";
              sub_22E3BB0B8((uint64_t)__p);
            }
          }
          if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
          {
            sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
            v140 = BYTE7(v242);
            v139 = (uint64_t)__p[1];
          }
          else
          {
            v140 = 0;
            BYTE7(v242) = 0;
            LOBYTE(__p[0]) = 0;
          }
          v149 = v140 < 0;
          if (v140 >= 0)
            v150 = (unsigned __int16 *)__p;
          else
            v150 = (unsigned __int16 *)__p[0];
          v151 = v140 & 0x7F;
          if (v149)
            v152 = v139;
          else
            v152 = v151;
          v153 = sub_22F1DC2A4(17, v150, v152, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
          v154 = v257;
          if (v257 >= HIDWORD(v257))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v154 = v257;
          }
          *((_DWORD *)v256 + v154) = v153;
          LODWORD(v257) = v257 + 1;
          if (SBYTE7(v242) < 0)
            operator delete(__p[0]);
          v155 = *v55;
          v156 = v265;
          if (v265 >= HIDWORD(v265))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v156 = v265;
          }
          v157 = 0;
          v148 = 0;
          v264[v156] = v155;
          LODWORD(v265) = v265 + 1;
          v158 = *(unsigned __int16 *)(a1 + 32);
          if (v158 == 22 || v158 == 65)
          {
            v117 = 0;
            goto LABEL_253;
          }
          v117 = 0;
          if (v158 == 430)
            goto LABEL_253;
          sub_22E80F0F0(a1, 0);
        }
        v148 = 0;
        v117 = 0;
        goto LABEL_188;
      case 41:
      case 88:
LABEL_58:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v75 = *(_DWORD *)(a1 + 40);
        *(_QWORD *)&v243 = a1 + 944;
        BYTE8(v243) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v244[0] = a1;
        DWORD2(v244[0]) = 1441813;
        WORD6(v244[0]) = 430;
        *((_QWORD *)&v244[1] + 1) = 0;
        *(_QWORD *)&v244[2] = 0;
        *(_QWORD *)&v244[1] = sub_22E80F720;
        v76 = (char *)llvm::omp::getOpenMPClauseName();
        v13 = 0;
        if ((sub_22E88C650((uint64_t)&v243, 1510, v76, 0) & 1) != 0)
          goto LABEL_265;
        v238 = v75;
        v264 = v266;
        v265 = 0x400000000;
        if ((_DWORD)a3 != 41)
        {
          v77 = 0;
          v78 = 0;
          goto LABEL_223;
        }
        if (*(_WORD *)(a1 + 32) == 5)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v256);
          v89 = HIBYTE(v258);
          if (v258 >= 0)
            v90 = HIBYTE(v258) & 0x7F;
          else
            v90 = v257;
          if (v90 == 11)
          {
            if (v258 >= 0)
              v91 = HIBYTE(v258);
            else
              v91 = v257;
            if (v258 >= 0)
              v92 = &v256;
            else
              v92 = (unsigned __int8 ***)v256;
            if (v91 >= 0xB)
              v93 = 11;
            else
              v93 = v91;
            v94 = memcmp(v92, "prefer_type", v93) == 0;
            v95 = v91 == 11 && v94;
          }
          else
          {
            v95 = 0;
          }
          if (v89 < 0)
            operator delete(v256);
          if (v95)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v256 = (unsigned __int8 **)(a1 + 944);
            LOBYTE(v257) = *(_BYTE *)(a1 + 944);
            *(_BYTE *)(a1 + 944) = 1;
            v258 = a1;
            v259 = 1441813;
            v260 = 430;
            v262 = 0;
            v263 = 0;
            v261 = sub_22E80F720;
            if ((sub_22E88C650((uint64_t)&v256, 1510, "prefer_type", 0) & 1) != 0)
            {
              v13 = 0;
              *(_BYTE *)v256 = v257;
              goto LABEL_235;
            }
            if (*(_WORD *)(a1 + 32) != 22)
            {
              do
              {
                v200 = *(_DWORD *)(a1 + 16);
                v201 = sub_22E838554(a1, 0, 0, 0, 0, 0);
                v202 = *(_QWORD *)(a1 + 88);
                v203 = sub_22E83778C(a1, v201, 3);
                if ((v203 & 1) == 0)
                  v203 = (uint64_t)sub_22EBBCB14(v202, (_DWORD *)(v203 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)__p);
                v204 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v203 & 0xFFFFFFFFFFFFFFFELL, v200, 0, 0);
                if (v204 < 2)
                {
                  LODWORD(__p[0]) = 1441857;
                  WORD2(__p[0]) = 430;
                  sub_22E885940(a1, (unsigned __int16 *)__p, 3, 2);
                }
                else
                {
                  v205 = v204;
                  v206 = v265;
                  if (v265 >= (unint64_t)HIDWORD(v265))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v206 = v265;
                  }
                  *(_QWORD *)&v264[2 * v206] = v205 & 0xFFFFFFFFFFFFFFFELL;
                  LODWORD(v265) = v265 + 1;
                }
                v207 = *(unsigned __int16 *)(a1 + 32);
                if (v207 == 65)
                {
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                  v207 = *(unsigned __int16 *)(a1 + 32);
                }
              }
              while (v207 != 22);
            }
            sub_22E811E8C((uint64_t)&v256);
            *(_BYTE *)v256 = v257;
          }
        }
        if ((_DWORD)v265)
        {
          if (*(_WORD *)(a1 + 32) == 65)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          }
          else
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1667, (uint64_t)&v256);
            sub_22E3BB0B8((uint64_t)&v256);
          }
        }
        v163 = sub_22E85B1CC(a1);
        if (HIDWORD(v163))
        {
          v78 = v163 != 1;
          v77 = v163 != 0;
          if (*(_WORD *)(a1 + 32) == 61)
            goto LABEL_222;
          sub_22E884578(a1, (int *)(a1 + 16), 1989, (uint64_t)__p);
          v164 = (unsigned __int8 *)__p[0];
          if (!__p[0])
          {
            v164 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
            __p[0] = v164;
          }
          v164[*v164 + 1] = 1;
          v165 = __p[0];
          v166 = *(unsigned __int8 *)__p[0];
          *(_BYTE *)__p[0] = v166 + 1;
          v165[v166 + 2] = "interop types";
          sub_22E3BB0B8((uint64_t)__p);
        }
        else
        {
          v77 = 0;
          v78 = 0;
        }
        if (*(_WORD *)(a1 + 32) != 61)
          goto LABEL_223;
LABEL_222:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_223:
        v167 = *(unsigned int *)(a1 + 16);
        v168 = *(_QWORD *)(a1 + 88);
        v169 = sub_22E83766C(a1, 0);
        v170 = v169;
        if ((v169 & 1) == 0)
          v170 = (unint64_t)sub_22EBBCB14(v168, (_DWORD *)(v169 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)__p);
        if (v170 <= 1)
        {
          LODWORD(__p[0]) = 1441857;
          WORD2(__p[0]) = 430;
          sub_22E885940(a1, (unsigned __int16 *)__p, 3, 2);
        }
        v171 = *(_DWORD *)(a1 + 16);
        v13 = 0;
        if (sub_22E811E8C((uint64_t)&v243))
          v172 = v171;
        else
          v172 = DWORD1(v244[2]);
        v173 = (_DWORD)a3 != 41 || v78;
        if ((isAllowedClauseForDirective & (v77 | v173)) == 1 && v170 >= 2)
        {
          if ((_DWORD)a3 == 41)
          {
            v192 = sub_22F33EB88(*(_QWORD **)(a1 + 88), v170 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v264, v265, v78, v77, v238, v244[2], v167, SHIDWORD(v167), v172);
          }
          else if ((_DWORD)a3 == 88)
          {
            v192 = sub_22F33ECC8(*(_QWORD **)(a1 + 88), v170 & 0xFFFFFFFFFFFFFFFELL, v238, v244[2], v167, v172);
          }
          else
          {
            v192 = sub_22F33EAFC(*(_QWORD **)(a1 + 88), v170 & 0xFFFFFFFFFFFFFFFELL, v238, v244[2], v167, v172);
          }
          v13 = (unsigned int *)v192;
        }
LABEL_235:
        v174 = (unsigned __int8 **)v264;
        if (v264 == v266)
          goto LABEL_265;
        goto LABEL_264;
      case 47:
      case 79:
      case 84:
        if (isAllowedClauseForDirective)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1677, (uint64_t)&v243);
          v64 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v64, v65);
          v66 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v66, v67);
          sub_22E3BB0B8((uint64_t)&v243);
        }
        LODWORD(v243) = 28180545;
        sub_22E885940(a1, (unsigned __int16 *)&v243, 2, 2);
        goto LABEL_95;
      case 76:
        if ((a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v193 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v193, v194);
          v195 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v195, v196);
          v197 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v197 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v197;
          }
          v197[*v197 + 1] = 2;
          v198 = v243;
          v199 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v199 + 1;
          *(_QWORD *)(v198 + 8 * v199 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v14 = 1;
        }
        v37 = (uint64_t)sub_22F2EC2E0(a1);
        goto LABEL_21;
      case 87:
        v79 = isAllowedClauseForDirective ^ 1;
        if ((a4 & 1) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)&v243);
          v80 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v80, v81);
          v82 = (void *)llvm::omp::getOpenMPClauseName();
          sub_22E3B89A8((unsigned __int8 **)&v243, v82, v83);
          v84 = (unsigned __int8 *)v243;
          if (!(_QWORD)v243)
          {
            v84 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v243 + 1));
            *(_QWORD *)&v243 = v84;
          }
          v84[*v84 + 1] = 2;
          v85 = v243;
          v86 = *(unsigned __int8 *)v243;
          *(_BYTE *)v243 = v86 + 1;
          *(_QWORD *)(v85 + 8 * v86 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v243);
          v79 = 1;
        }
        if (a2 == 15)
        {
          sub_22E860744(a1, 87, isAllowedClauseForDirective ^ 1);
LABEL_98:
          v13 = (unsigned int *)v87;
          goto LABEL_161;
        }
        v105 = *(_DWORD *)(a1 + 16);
        sub_22E80F0F0(a1, 0);
        if (isAllowedClauseForDirective)
        {
          v87 = sub_22F33E73C(*(_QWORD *)(a1 + 88), 87, v105, *(_DWORD *)(a1 + 16));
          goto LABEL_98;
        }
        v13 = 0;
LABEL_161:
        v14 = v79;
        break;
      case 91:
        v37 = (uint64_t)sub_22F2EC514(a1);
        goto LABEL_21;
      default:
        break;
    }
  }
  if (v14)
    return 0;
  else
    return v13;
}

uint64_t sub_22E856D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;

  v3 = a3;
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 32) = 0;
  if ((a3 & 1) != 0)
    v3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 13 >= 0x3E)
    v6 = 0;
  else
    v6 = v3;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)v8;
  if (v8)
  {
    v9 = (*(_WORD *)(v8 + 8) & 0x7E) - 34;
    v10 = v8 - 64;
    if (v9 >= 4)
      v11 = 0;
    else
      v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(a2 + 88);
  v13 = operator new();
  if (v6)
    v14 = sub_22EFBAEF8(v6);
  else
    v14 = 0;
  sub_22EBBBB24(v13, v12, v11, 0, v14);
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 32) = (*(_DWORD *)(v3 + 28) & 0x7Fu) - 26 < 7;
  v15 = (_QWORD *)operator new();
  v16 = v15;
  v17 = *(unsigned __int8 *)(a1 + 32);
  *v15 = a2;
  if (v17)
  {
    sub_22E885C30(a2, 128);
    v18 = *(unsigned __int8 *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v16;
    if (v18)
      sub_22EABF260(v12, *(_QWORD *)(v12 + 12888), v3);
  }
  else
  {
    *v15 = 0;
    *(_QWORD *)(a1 + 16) = v15;
  }
  v20 = (*(_DWORD *)(v3 + 28) & 0x7F) == 0x1D || (*(_DWORD *)(v3 + 28) & 0x7Fu) - 52 < 6;
  *(_BYTE *)(a1 + 33) = v20;
  v21 = (_QWORD *)operator new();
  v22 = v21;
  v23 = *(unsigned __int8 *)(a1 + 33);
  *v21 = a2;
  if (v23)
  {
    sub_22E885C30(a2, 4194313);
    v24 = *(unsigned __int8 *)(a1 + 33);
    *(_QWORD *)(a1 + 24) = v22;
    if (v24)
      sub_22F31D0D4(v12, *(_QWORD *)(v12 + 12888), v3);
  }
  else
  {
    *v21 = 0;
    *(_QWORD *)(a1 + 24) = v21;
  }
  return a1;
}

uint64_t sub_22E856F50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 33))
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v3 = *(_QWORD *)(sub_22EFCAD5C(*(_QWORD *)(v2 + 216)) + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v2 + 216) = v4;
    v5 = *(uint64_t **)(a1 + 24);
    if (*v5)
    {
      sub_22E885CF4(*v5);
      *v5 = 0;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v6 = *(uint64_t **)(a1 + 16);
    if (*v6)
    {
      sub_22E885CF4(*v6);
      *v6 = 0;
    }
  }
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
  {
    if (*v7)
    {
      sub_22E885CF4(*v7);
      *v7 = 0;
    }
    MEMORY[0x2348A0E9C](v7, 0x20C4093837F09);
  }
  v8 = *(uint64_t **)(a1 + 16);
  if (v8)
  {
    if (*v8)
    {
      sub_22E885CF4(*v8);
      *v8 = 0;
    }
    MEMORY[0x2348A0E9C](v8, 0x20C4093837F09);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 16))
      *(_QWORD *)(*(_QWORD *)v9 + 10288) = *(_QWORD *)(v9 + 8);
    MEMORY[0x2348A0E9C]();
  }
  return a1;
}

const char *sub_22E85705C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int16 *)(a2 + 16);
  if (v5 > 0x12)
    goto LABEL_6;
  if (((1 << v5) & 0x76000) != 0)
  {
    v6 = sub_22E83E898(a1, 1);
    if (v6 >= 2)
      return (const char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 4 * *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 4) + 20);
    return "";
  }
  if (v5 != 5)
  {
LABEL_6:
    if (v5 != 89)
    {
      v8 = *(_DWORD *)a2;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v9 + 312) = v8;
      *(_DWORD *)(v9 + 316) = 1979;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v14, v9);
      v10 = (unsigned __int8 *)v14;
      if (!v14)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC(v15);
        v14 = v10;
      }
      v10[*v10 + 1] = 2;
      v11 = v14;
      v12 = *(unsigned __int8 *)v14;
      *(_BYTE *)v14 = v12 + 1;
      v11[v12 + 2] = a3;
      sub_22E3BB0B8((uint64_t)&v14);
      return "";
    }
  }
  v14 = v16;
  v15 = xmmword_22F44E350;
  v7 = sub_22F18E170(*(_QWORD *)(a1 + 8), a2, (uint64_t *)&v14, 0);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (v14 != v16)
    free(v14);
  return (const char *)v7;
}

BOOL sub_22E857210(uint64_t a1, void *a2, size_t a3, int a4, llvm::StringMapImpl *a5, unsigned int a6)
{
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;

  v26 = a4;
  v11 = sub_22F2EC8A0(a5, a2, a3, &v26);
  v13 = v12;
  if (!v12)
  {
    v14 = v11;
    v15 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v15 + 312) = a4;
    *(_DWORD *)(v15 + 316) = 1974;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v24, v15);
    v16 = v24;
    if (!v24)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v16;
    }
    v16[*v16 + 1] = 2;
    v17 = v24;
    v18 = *v24;
    *v24 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = a6;
    sub_22E3B89A8(&v24, a2, a3);
    sub_22E3BB0B8((uint64_t)&v24);
    v19 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v19 + 312) = *(_DWORD *)(*v14 + 8);
    *(_DWORD *)(v19 + 316) = 1881;
    if (*(char *)(v19 + 311) < 0)
    {
      **(_BYTE **)(v19 + 288) = 0;
      *(_QWORD *)(v19 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 288) = 0;
      *(_BYTE *)(v19 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v24, v19);
    v20 = v24;
    if (!v24)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v20;
    }
    v20[*v20 + 1] = 2;
    v21 = v24;
    v22 = *v24;
    *v24 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = a6;
    sub_22E3B89A8(&v24, a2, a3);
    sub_22E3BB0B8((uint64_t)&v24);
  }
  return v13 == 0;
}

uint64_t sub_22E8573A4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::StringMapImpl *a4)
{
  _DWORD *v7;
  int v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  int OpenMPContextTraitPropertyKind;
  int v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 *v17;
  void **v18;
  uint64_t v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  void *OpenMPContextTraitSelectorName;
  size_t v24;
  void *OpenMPContextTraitSetName;
  size_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  void **v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  void **v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  void **v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  llvm::StringMapImpl *v46;
  void *v47;
  size_t v48;
  int v49;
  unsigned __int8 *v50;
  const char *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  void **v57;
  uint64_t v58;
  void *p_p;
  size_t v60;
  void ***v61;
  uint64_t v62;
  void *v63;
  size_t v64;
  void *v65;
  size_t v66;
  void **v67;
  size_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  size_t v76;
  void *v77;
  size_t v78;
  void *v79;
  size_t v80;
  uint64_t v81;
  void *v82;
  size_t v83;
  void *v84;
  size_t v85;
  void *v86;
  size_t v87;
  int v88;
  uint64_t v89;
  void *OpenMPContextTraitPropertyName;
  size_t v91;
  size_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  void **v100;
  uint64_t v101;
  int v102;
  int v103;
  const char *v104;
  size_t v105;
  void *__p;
  size_t v107;
  char *v108;
  size_t v109;
  __int16 v110;
  void **v111;
  uint64_t v112;
  const char *v113;
  __int16 v114;
  void *v115[2];
  char v116;
  unsigned __int8 *v117[4];
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v7 = (_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 16);
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v9 = sub_22E85705C(a1, a1 + 16, 2u);
  v11 = v10;
  if (v10)
  {
    v12 = (char *)v9;
    v104 = v9;
    v105 = v10;
    OpenMPContextTraitPropertyKind = llvm::omp::getOpenMPContextTraitPropertyKind();
    v103 = OpenMPContextTraitPropertyKind;
    if (OpenMPContextTraitPropertyKind)
    {
      v14 = OpenMPContextTraitPropertyKind;
      result = sub_22E857210(a1, v12, v11, v8, a4, 2u);
      if ((_DWORD)result)
      {
        v14 = 0;
        v103 = 0;
      }
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v22 + 312) = v8;
      *(_DWORD *)(v22 + 316) = 1975;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v22);
      sub_22E3B89A8((unsigned __int8 **)&v111, v12, v11);
      OpenMPContextTraitSelectorName = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
      sub_22E3B89A8((unsigned __int8 **)&v111, OpenMPContextTraitSelectorName, v24);
      OpenMPContextTraitSetName = (void *)llvm::omp::getOpenMPContextTraitSetName();
      sub_22E3B89A8((unsigned __int8 **)&v111, OpenMPContextTraitSetName, v26);
      sub_22E3BB0B8((uint64_t)&v111);
      if (llvm::omp::getOpenMPContextTraitSetKind())
      {
        v27 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v27 + 312) = v8;
        *(_DWORD *)(v27 + 316) = 1878;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v27);
        sub_22E3B89A8((unsigned __int8 **)&v111, v12, v11);
        v28 = (unsigned __int8 *)v111;
        if (!v111)
        {
          v28 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = (void **)v28;
        }
        v28[*v28 + 1] = 2;
        v29 = v111;
        v30 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v30 + 1;
        v29[v30 + 2] = 0;
        *((_BYTE *)v29 + (v30 + 1) + 1) = 2;
        v31 = v111;
        v32 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v32 + 1;
        v31[v32 + 2] = (void *)2;
        sub_22E3BB0B8((uint64_t)&v111);
        v33 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v33 + 312) = v8;
        *(_DWORD *)(v33 + 316) = 1880;
        if (*(char *)(v33 + 311) < 0)
        {
          **(_BYTE **)(v33 + 288) = 0;
          *(_QWORD *)(v33 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v33 + 288) = 0;
          *(_BYTE *)(v33 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v33);
        sub_22E3B89A8((unsigned __int8 **)&v111, v12, v11);
        v34 = (unsigned __int8 *)v111;
        if (!v111)
        {
          v34 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = (void **)v34;
        }
        v34[*v34 + 1] = 1;
        v35 = v111;
        v36 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v36 + 1;
        v35[v36 + 2] = "<selector-name>";
        *((_BYTE *)v35 + (v36 + 1) + 1) = 1;
        v37 = v111;
        v38 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v38 + 1;
        v37[v38 + 2] = "(<property-name>)";
        result = sub_22E3BB0B8((uint64_t)&v111);
        v14 = 0;
      }
      else if (llvm::omp::getOpenMPContextTraitSelectorKind())
      {
        v39 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v39 + 312) = v8;
        *(_DWORD *)(v39 + 316) = 1878;
        if (*(char *)(v39 + 311) < 0)
        {
          **(_BYTE **)(v39 + 288) = 0;
          *(_QWORD *)(v39 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v39 + 288) = 0;
          *(_BYTE *)(v39 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v39);
        sub_22E3B89A8((unsigned __int8 **)&v111, v12, v11);
        v40 = (unsigned __int8 *)v111;
        if (!v111)
        {
          v40 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = (void **)v40;
        }
        v40[*v40 + 1] = 2;
        v41 = v111;
        v42 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v42 + 1;
        v41[v42 + 2] = (void *)1;
        *((_BYTE *)v41 + (v42 + 1) + 1) = 2;
        v43 = v111;
        v44 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v44 + 1;
        v43[v44 + 2] = (void *)2;
        sub_22E3BB0B8((uint64_t)&v111);
        LOBYTE(__p) = 0;
        LOBYTE(v117[0]) = 0;
        llvm::omp::getOpenMPContextTraitSetForSelector();
        llvm::omp::isValidTraitSelectorForTraitSet();
        v45 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v45 + 312) = v8;
        *(_DWORD *)(v45 + 316) = 1880;
        v46 = a4;
        if (*(char *)(v45 + 311) < 0)
        {
          **(_BYTE **)(v45 + 288) = 0;
          *(_QWORD *)(v45 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v45 + 288) = 0;
          *(_BYTE *)(v45 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v45);
        llvm::omp::getOpenMPContextTraitSetForSelector();
        v47 = (void *)llvm::omp::getOpenMPContextTraitSetName();
        sub_22E3B89A8((unsigned __int8 **)&v111, v47, v48);
        sub_22E3B89A8((unsigned __int8 **)&v111, v12, v11);
        v49 = LOBYTE(v117[0]);
        v50 = (unsigned __int8 *)v111;
        if (!v111)
        {
          v50 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = (void **)v50;
        }
        v51 = "(<property-name>)";
        if (!v49)
          v51 = "";
        v50[*v50 + 1] = 1;
        v52 = v111;
        v53 = *(unsigned __int8 *)v111;
        *(_BYTE *)v111 = v53 + 1;
        v52[v53 + 2] = (void *)v51;
        result = sub_22E3BB0B8((uint64_t)&v111);
        v14 = 0;
        a4 = v46;
      }
      else
      {
        v102 = v8;
        v54 = 0;
        v118 = xmmword_22F461C10;
        while (!llvm::omp::getOpenMPContextTraitPropertyKind())
        {
          v54 += 4;
          if (v54 == 16)
          {
            v55 = *(_QWORD *)(a1 + 96);
            v8 = v102;
            *(_DWORD *)(v55 + 312) = v102;
            *(_DWORD *)(v55 + 316) = 1879;
            if (*(char *)(v55 + 311) < 0)
            {
              **(_BYTE **)(v55 + 288) = 0;
              *(_QWORD *)(v55 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v55 + 288) = 0;
              *(_BYTE *)(v55 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v111, v55);
            v56 = (unsigned __int8 *)v111;
            if (!v111)
            {
              v56 = (unsigned __int8 *)sub_22E3B8AAC(v112);
              v111 = (void **)v56;
            }
            v56[*v56 + 1] = 2;
            v57 = v111;
            v58 = *(unsigned __int8 *)v111;
            *(_BYTE *)v111 = v58 + 1;
            v57[v58 + 2] = (void *)2;
            llvm::omp::listOpenMPContextTraitProperties();
            if (SHIBYTE(v108) >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (SHIBYTE(v108) >= 0)
              v60 = HIBYTE(v108) & 0x7F;
            else
              v60 = v107;
            sub_22E3B89A8((unsigned __int8 **)&v111, p_p, v60);
            if (SHIBYTE(v108) < 0)
              operator delete(__p);
            v61 = &v111;
            goto LABEL_69;
          }
        }
        v62 = *(_QWORD *)(a1 + 96);
        v8 = v102;
        *(_DWORD *)(v62 + 312) = v102;
        *(_DWORD *)(v62 + 316) = 1880;
        if (*(char *)(v62 + 311) < 0)
        {
          **(_BYTE **)(v62 + 288) = 0;
          *(_QWORD *)(v62 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v62 + 288) = 0;
          *(_BYTE *)(v62 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v117, v62);
        llvm::omp::getOpenMPContextTraitSetForProperty();
        v63 = (void *)llvm::omp::getOpenMPContextTraitSetName();
        sub_22E3B89A8(v117, v63, v64);
        llvm::omp::getOpenMPContextTraitSelectorForProperty();
        v65 = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
        sub_22E3B89A8(v117, v65, v66);
        v110 = 1283;
        __p = "(";
        v108 = v12;
        v109 = v11;
        v111 = &__p;
        v113 = ")";
        v114 = 770;
        llvm::Twine::str((llvm::Twine *)&v111);
        if (v116 >= 0)
          v67 = v115;
        else
          v67 = (void **)v115[0];
        if (v116 >= 0)
          v68 = v116 & 0x7F;
        else
          v68 = (size_t)v115[1];
        sub_22E3B89A8(v117, v67, v68);
        if (v116 < 0)
          operator delete(v115[0]);
        v61 = (void ***)v117;
LABEL_69:
        result = sub_22E3BB0B8((uint64_t)v61);
        v14 = 0;
      }
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v16 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v16 + 316) = 1879;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v111, v16);
    v17 = (unsigned __int8 *)v111;
    if (!v111)
    {
      v17 = (unsigned __int8 *)sub_22E3B8AAC(v112);
      v111 = (void **)v17;
    }
    v17[*v17 + 1] = 2;
    v18 = v111;
    v19 = *(unsigned __int8 *)v111;
    *(_BYTE *)v111 = v19 + 1;
    v18[v19 + 2] = (void *)2;
    llvm::omp::listOpenMPContextTraitProperties();
    if (SHIBYTE(v108) >= 0)
      v20 = &__p;
    else
      v20 = __p;
    if (SHIBYTE(v108) >= 0)
      v21 = HIBYTE(v108) & 0x7F;
    else
      v21 = v107;
    sub_22E3B89A8((unsigned __int8 **)&v111, v20, v21);
    if (SHIBYTE(v108) < 0)
      operator delete(__p);
    result = sub_22E3BB0B8((uint64_t)&v111);
    v14 = 0;
  }
  if (*(_DWORD *)(a2 + 8) == 9)
  {
    if ((v14 - 43) < 2)
      goto LABEL_78;
    if (!v14)
      goto LABEL_92;
    v69 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v69)
    {
      v70 = *(_DWORD **)(a2 + 16);
      v71 = 24 * v69;
      while ((*v70 - 40) > 2)
      {
        v70 += 6;
        v71 -= 24;
        if (!v71)
          goto LABEL_77;
      }
      v89 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v89 + 312) = *v7;
      *(_DWORD *)(v89 + 316) = 1682;
      if (*(char *)(v89 + 311) < 0)
      {
        **(_BYTE **)(v89 + 288) = 0;
        *(_QWORD *)(v89 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v89 + 288) = 0;
        *(_BYTE *)(v89 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v89);
      sub_22E3BB0B8((uint64_t)&v111);
      OpenMPContextTraitPropertyName = (void *)llvm::omp::getOpenMPContextTraitPropertyName();
      v92 = v91;
      v93 = sub_22F2A5E48(a4, OpenMPContextTraitPropertyName, v91);
      v94 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v94 + 312) = *(_DWORD *)(*v93 + 8);
      *(_DWORD *)(v94 + 316) = 1881;
      if (*(char *)(v94 + 311) < 0)
      {
        **(_BYTE **)(v94 + 288) = 0;
        *(_QWORD *)(v94 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v94 + 288) = 0;
        *(_BYTE *)(v94 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&__p, v94);
      v95 = (unsigned __int8 *)__p;
      if (!__p)
      {
        v95 = (unsigned __int8 *)sub_22E3B8AAC(v107);
        __p = v95;
      }
      v95[*v95 + 1] = 2;
      v96 = __p;
      v97 = *(unsigned __int8 *)__p;
      *(_BYTE *)__p = v97 + 1;
      v96[v97 + 2] = 2;
      sub_22E3B89A8((unsigned __int8 **)&__p, OpenMPContextTraitPropertyName, v92);
      result = sub_22E3BB0B8((uint64_t)&__p);
LABEL_92:
      v88 = *v7;
      if (v8 == *v7)
        return result;
      goto LABEL_93;
    }
  }
LABEL_77:
  if (!v14)
    goto LABEL_92;
LABEL_78:
  if (llvm::omp::isValidTraitPropertyForTraitSetAndSelector())
  {
    result = sub_22E4EF088(a2 + 16, (unint64_t)&v103, 1);
    v72 = *(_QWORD *)(a2 + 16) + 24 * *(unsigned int *)(a2 + 24);
    v73 = *(_OWORD *)result;
    *(_QWORD *)(v72 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v72 = v73;
    ++*(_DWORD *)(a2 + 24);
    return result;
  }
  v74 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v74 + 312) = v8;
  *(_DWORD *)(v74 + 316) = 1970;
  if (*(char *)(v74 + 311) < 0)
  {
    **(_BYTE **)(v74 + 288) = 0;
    *(_QWORD *)(v74 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v74 + 288) = 0;
    *(_BYTE *)(v74 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v111, v74);
  v75 = (void *)llvm::omp::getOpenMPContextTraitPropertyName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v75, v76);
  v77 = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v77, v78);
  v79 = (void *)llvm::omp::getOpenMPContextTraitSetName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v79, v80);
  sub_22E3BB0B8((uint64_t)&v111);
  v81 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v81 + 312) = v8;
  *(_DWORD *)(v81 + 316) = 1875;
  if (*(char *)(v81 + 311) < 0)
  {
    **(_BYTE **)(v81 + 288) = 0;
    *(_QWORD *)(v81 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v81 + 288) = 0;
    *(_BYTE *)(v81 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v111, v81);
  v82 = (void *)llvm::omp::getOpenMPContextTraitPropertyName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v82, v83);
  llvm::omp::getOpenMPContextTraitSelectorForProperty();
  v84 = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v84, v85);
  llvm::omp::getOpenMPContextTraitSetForProperty();
  v86 = (void *)llvm::omp::getOpenMPContextTraitSetName();
  sub_22E3B89A8((unsigned __int8 **)&v111, v86, v87);
  sub_22E3BB0B8((uint64_t)&v111);
  v88 = *(_DWORD *)(a1 + 16);
LABEL_93:
  v98 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v98 + 312) = v88;
  *(_DWORD *)(v98 + 316) = 1877;
  if (*(char *)(v98 + 311) < 0)
  {
    **(_BYTE **)(v98 + 288) = 0;
    *(_QWORD *)(v98 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v98 + 288) = 0;
    *(_BYTE *)(v98 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v111, v98);
  v99 = (unsigned __int8 *)v111;
  if (!v111)
  {
    v99 = (unsigned __int8 *)sub_22E3B8AAC(v112);
    v111 = (void **)v99;
  }
  v99[*v99 + 1] = 2;
  v100 = v111;
  v101 = *(unsigned __int8 *)v111;
  *(_BYTE *)v111 = v101 + 1;
  v100[v101 + 2] = (void *)2;
  return sub_22E3BB0B8((uint64_t)&v111);
}

uint64_t sub_22E857F0C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::StringMapImpl *a4)
{
  int v7;
  const char *v8;
  size_t v9;
  char *v10;
  size_t v11;
  int OpenMPContextTraitSelectorKind;
  uint64_t result;
  uint64_t v14;
  unsigned __int8 *v15;
  void **v16;
  uint64_t v17;
  void **v18;
  size_t v19;
  uint64_t v20;
  void *OpenMPContextTraitSetName;
  size_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  void **v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  void **v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  size_t v45;
  void *OpenMPContextTraitSelectorName;
  size_t v47;
  void **v48;
  size_t v49;
  void *__p[2];
  char *v51;
  size_t v52;
  __int16 v53;
  void **v54;
  uint64_t v55;
  const char *v56;
  __int16 v57;
  void *v58[2];
  char v59;
  unsigned __int8 *v60[4];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 8) = 0;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = sub_22E85705C(a1, a1 + 16, 1u);
  if (!v9)
  {
    v14 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 16);
LABEL_6:
    *(_DWORD *)(v14 + 316) = 1879;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v14);
    v15 = (unsigned __int8 *)v54;
    if (!v54)
    {
      v15 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = (void **)v15;
    }
    v15[*v15 + 1] = 2;
    v16 = v54;
    v17 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v17 + 1;
    v16[v17 + 2] = (void *)1;
    llvm::omp::listOpenMPContextTraitSelectors();
    if (SHIBYTE(v51) >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (SHIBYTE(v51) >= 0)
      v19 = HIBYTE(v51) & 0x7F;
    else
      v19 = (size_t)__p[1];
    sub_22E3B89A8((unsigned __int8 **)&v54, v18, v19);
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
    goto LABEL_30;
  }
  v10 = (char *)v8;
  v11 = v9;
  OpenMPContextTraitSelectorKind = llvm::omp::getOpenMPContextTraitSelectorKind();
  *(_DWORD *)(a2 + 8) = OpenMPContextTraitSelectorKind;
  if (!OpenMPContextTraitSelectorKind)
  {
    v20 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v20 + 312) = v7;
    *(_DWORD *)(v20 + 316) = 1976;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v20);
    sub_22E3B89A8((unsigned __int8 **)&v54, v10, v11);
    OpenMPContextTraitSetName = (void *)llvm::omp::getOpenMPContextTraitSetName();
    sub_22E3B89A8((unsigned __int8 **)&v54, OpenMPContextTraitSetName, v22);
    sub_22E3BB0B8((uint64_t)&v54);
    if (!llvm::omp::getOpenMPContextTraitSetKind())
    {
      v36 = 0;
      v61 = xmmword_22F461C10;
      while (!llvm::omp::getOpenMPContextTraitPropertyKind())
      {
        v36 += 4;
        if (v36 == 16)
        {
          v14 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v14 + 312) = v7;
          goto LABEL_6;
        }
      }
      v37 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v37 + 312) = v7;
      *(_DWORD *)(v37 + 316) = 1878;
      if (*(char *)(v37 + 311) < 0)
      {
        **(_BYTE **)(v37 + 288) = 0;
        *(_QWORD *)(v37 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v37 + 288) = 0;
        *(_BYTE *)(v37 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v54, v37);
      sub_22E3B89A8((unsigned __int8 **)&v54, v10, v11);
      v38 = (unsigned __int8 *)v54;
      if (!v54)
      {
        v38 = (unsigned __int8 *)sub_22E3B8AAC(v55);
        v54 = (void **)v38;
      }
      v38[*v38 + 1] = 2;
      v39 = v54;
      v40 = *(unsigned __int8 *)v54;
      *(_BYTE *)v54 = v40 + 1;
      v39[v40 + 2] = (void *)2;
      *((_BYTE *)v39 + (v40 + 1) + 1) = 2;
      v41 = v54;
      v42 = *(unsigned __int8 *)v54;
      *(_BYTE *)v54 = v42 + 1;
      v41[v42 + 2] = (void *)1;
      sub_22E3BB0B8((uint64_t)&v54);
      v43 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v43 + 312) = v7;
      *(_DWORD *)(v43 + 316) = 1880;
      if (*(char *)(v43 + 311) < 0)
      {
        **(_BYTE **)(v43 + 288) = 0;
        *(_QWORD *)(v43 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v43 + 288) = 0;
        *(_BYTE *)(v43 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v60, v43);
      llvm::omp::getOpenMPContextTraitSetForProperty();
      v44 = (void *)llvm::omp::getOpenMPContextTraitSetName();
      sub_22E3B89A8(v60, v44, v45);
      llvm::omp::getOpenMPContextTraitSelectorForProperty();
      OpenMPContextTraitSelectorName = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
      sub_22E3B89A8(v60, OpenMPContextTraitSelectorName, v47);
      v53 = 1283;
      __p[0] = "(";
      v51 = v10;
      v52 = v11;
      v54 = __p;
      v56 = ")";
      v57 = 770;
      llvm::Twine::str((llvm::Twine *)&v54);
      if (v59 >= 0)
        v48 = v58;
      else
        v48 = (void **)v58[0];
      if (v59 >= 0)
        v49 = v59 & 0x7F;
      else
        v49 = (size_t)v58[1];
      sub_22E3B89A8(v60, v48, v49);
      if (v59 < 0)
        operator delete(v58[0]);
      v35 = (void ***)v60;
      return sub_22E3BB0B8((uint64_t)v35);
    }
    v23 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v23 + 312) = v7;
    *(_DWORD *)(v23 + 316) = 1878;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v23);
    sub_22E3B89A8((unsigned __int8 **)&v54, v10, v11);
    v24 = (unsigned __int8 *)v54;
    if (!v54)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = (void **)v24;
    }
    v24[*v24 + 1] = 2;
    v25 = v54;
    v26 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v26 + 1;
    v25[v26 + 2] = 0;
    *((_BYTE *)v25 + (v26 + 1) + 1) = 2;
    v27 = v54;
    v28 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v28 + 1;
    v27[v28 + 2] = (void *)1;
    sub_22E3BB0B8((uint64_t)&v54);
    v29 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v29 + 312) = v7;
    *(_DWORD *)(v29 + 316) = 1880;
    if (*(char *)(v29 + 311) < 0)
    {
      **(_BYTE **)(v29 + 288) = 0;
      *(_QWORD *)(v29 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v29 + 288) = 0;
      *(_BYTE *)(v29 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v29);
    sub_22E3B89A8((unsigned __int8 **)&v54, v10, v11);
    v30 = (unsigned __int8 *)v54;
    if (!v54)
    {
      v30 = (unsigned __int8 *)sub_22E3B8AAC(v55);
      v54 = (void **)v30;
    }
    v30[*v30 + 1] = 1;
    v31 = v54;
    v32 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v32 + 1;
    v31[v32 + 2] = "<selector-name>";
    *((_BYTE *)v31 + (v32 + 1) + 1) = 1;
    v33 = v54;
    v34 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v34 + 1;
    v33[v34 + 2] = "<property-name>";
LABEL_30:
    v35 = &v54;
    return sub_22E3BB0B8((uint64_t)v35);
  }
  result = sub_22E857210(a1, v10, v11, v7, a4, 1u);
  if ((_DWORD)result)
    *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_22E858484(unsigned __int16 *a1)
{
  uint64_t i;
  unsigned int v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  for (i = *((_QWORD *)a1 + 1); ; sub_22E80F0F0(i, 0))
  {
    do
      v12[0] = 0x1AE004100160018;
    while (!sub_22E885940(i, (unsigned __int16 *)v12, 4, 2));
    v3 = *a1;
    v4 = *(unsigned __int16 *)(i + 80);
    if (*(_WORD *)(i + 32) == 22 && v3 > v4)
    {
      sub_22E80F720(i);
      v3 = *a1;
      v4 = *(unsigned __int16 *)(i + 80);
    }
    if (v3 <= v4)
      break;
    v6 = *(unsigned __int16 *)(i + 32);
    if (v6 != 65 && v6 != 22)
      break;
  }
  v7 = *(_QWORD *)(i + 96);
  *(_DWORD *)(v7 + 312) = *(_DWORD *)(i + 16);
  *(_DWORD *)(v7 + 316) = 1877;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v12, v7);
  v8 = (unsigned __int8 *)v12[0];
  if (!v12[0])
  {
    v8 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
    v12[0] = v8;
  }
  v8[*v8 + 1] = 2;
  v9 = v12[0];
  v10 = *(unsigned __int8 *)v12[0];
  *(_BYTE *)v12[0] = v10 + 1;
  *(_QWORD *)(v9 + 8 * v10 + 16) = 1;
  return sub_22E3BB0B8((uint64_t)v12);
}

uint64_t sub_22E8585DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned int v20;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  size_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  size_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  __int128 *v51;
  size_t v52;
  uint64_t v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *OpenMPContextTraitSetName;
  size_t v62;
  int v63;
  unsigned __int8 *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  size_t v77;
  void *OpenMPContextTraitSelectorName;
  size_t v79;
  void *v80;
  size_t v81;
  _QWORD v84[4];
  void *v85;
  size_t v86;
  char v87;
  void *__p[2];
  char *v89;
  size_t v90;
  __int16 v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int OpenMPContextTraitSetKind;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _WORD v105[12];
  uint64_t v106;

  v2 = a2;
  v106 = *MEMORY[0x24BDAC8D0];
  v84[0] = 0;
  v4 = (unsigned int *)(a1 + 16);
  v84[1] = 0;
  v84[2] = 0x1000000000;
  while (1)
  {
    v96 = (char *)&v98;
    v97 = 0x200000000;
    v5 = *(unsigned __int16 *)(a1 + 84);
    OpenMPContextTraitSetKind = 0;
    v6 = *(_DWORD *)(a1 + 16);
    v7 = sub_22E85705C(a1, (uint64_t)v4, 0);
    if (v8)
    {
      v15 = (char *)v7;
      v16 = v8;
      OpenMPContextTraitSetKind = llvm::omp::getOpenMPContextTraitSetKind();
      if (OpenMPContextTraitSetKind)
      {
        if (sub_22E857210(a1, v15, v16, v6, (llvm::StringMapImpl *)v84, 0))
        {
          OpenMPContextTraitSetKind = 0;
          goto LABEL_31;
        }
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v17 + 312) = v6;
        *(_DWORD *)(v17 + 316) = 1977;
        if (*(char *)(v17 + 311) < 0)
        {
          **(_BYTE **)(v17 + 288) = 0;
          *(_QWORD *)(v17 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v17 + 288) = 0;
          *(_BYTE *)(v17 + 311) = 0;
        }
        v18 = (unsigned __int8 **)sub_22E78E558((uint64_t)&v101, v17);
        sub_22E3B89A8(v18, v15, v16);
        sub_22E3BB0B8((uint64_t)&v101);
        if (llvm::omp::getOpenMPContextTraitSelectorKind())
        {
          v53 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v53 + 312) = v6;
          *(_DWORD *)(v53 + 316) = 1878;
          if (*(char *)(v53 + 311) < 0)
          {
            **(_BYTE **)(v53 + 288) = 0;
            *(_QWORD *)(v53 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v53 + 288) = 0;
            *(_BYTE *)(v53 + 311) = 0;
          }
          v54 = (unsigned __int8 **)sub_22E78E558((uint64_t)&v101, v53);
          sub_22E3B89A8(v54, v15, v16);
          v55 = (unsigned __int8 *)v101;
          if (!v101)
          {
            v55 = (unsigned __int8 *)sub_22E3B8AAC(v102);
            v101 = (uint64_t)v55;
          }
          v55[*v55 + 1] = 2;
          v56 = v101;
          v57 = *(unsigned __int8 *)v101;
          *(_BYTE *)v101 = v57 + 1;
          *(_QWORD *)(v56 + 8 * v57 + 16) = 1;
          *(_BYTE *)(v56 + (v57 + 1) + 1) = 2;
          v58 = v101;
          v59 = *(unsigned __int8 *)v101;
          *(_BYTE *)v101 = v59 + 1;
          *(_QWORD *)(v58 + 8 * v59 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v101);
          LOBYTE(__p[0]) = 0;
          LOBYTE(v92) = 0;
          llvm::omp::getOpenMPContextTraitSetForSelector();
          llvm::omp::isValidTraitSelectorForTraitSet();
          v60 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v60 + 312) = v6;
          *(_DWORD *)(v60 + 316) = 1880;
          if (*(char *)(v60 + 311) < 0)
          {
            **(_BYTE **)(v60 + 288) = 0;
            *(_QWORD *)(v60 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v60 + 288) = 0;
            *(_BYTE *)(v60 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v101, v60);
          llvm::omp::getOpenMPContextTraitSetForSelector();
          OpenMPContextTraitSetName = (void *)llvm::omp::getOpenMPContextTraitSetName();
          sub_22E3B89A8((unsigned __int8 **)&v101, OpenMPContextTraitSetName, v62);
          sub_22E3B89A8((unsigned __int8 **)&v101, v15, v16);
          v63 = v92;
          v64 = (unsigned __int8 *)v101;
          if (!v101)
          {
            v64 = (unsigned __int8 *)sub_22E3B8AAC(v102);
            v101 = (uint64_t)v64;
          }
          v65 = "(<property-name>)";
          if (!v63)
            v65 = "";
          v64[*v64 + 1] = 1;
          v66 = v101;
          v67 = *(unsigned __int8 *)v101;
          *(_BYTE *)v101 = v67 + 1;
          *(_QWORD *)(v66 + 8 * v67 + 16) = v65;
          sub_22E3BB0B8((uint64_t)&v101);
          v2 = a2;
        }
        else
        {
          v19 = 0;
          v99 = xmmword_22F461C10;
          while (!llvm::omp::getOpenMPContextTraitPropertyKind())
          {
            v19 += 4;
            if (v19 == 16)
            {
              v9 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v9 + 312) = v6;
              *(_DWORD *)(v9 + 316) = 1879;
              if (*(char *)(v9 + 311) < 0)
              {
                **(_BYTE **)(v9 + 288) = 0;
                *(_QWORD *)(v9 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v9 + 288) = 0;
                *(_BYTE *)(v9 + 311) = 0;
              }
              v2 = a2;
              goto LABEL_5;
            }
          }
          v68 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v68 + 312) = v6;
          *(_DWORD *)(v68 + 316) = 1878;
          if (*(char *)(v68 + 311) < 0)
          {
            **(_BYTE **)(v68 + 288) = 0;
            *(_QWORD *)(v68 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v68 + 288) = 0;
            *(_BYTE *)(v68 + 311) = 0;
          }
          v2 = a2;
          v69 = (unsigned __int8 **)sub_22E78E558((uint64_t)&v101, v68);
          sub_22E3B89A8(v69, v15, v16);
          v70 = (unsigned __int8 *)v101;
          if (!v101)
          {
            v70 = (unsigned __int8 *)sub_22E3B8AAC(v102);
            v101 = (uint64_t)v70;
          }
          v70[*v70 + 1] = 2;
          v71 = v101;
          v72 = *(unsigned __int8 *)v101;
          *(_BYTE *)v101 = v72 + 1;
          *(_QWORD *)(v71 + 8 * v72 + 16) = 2;
          *(_BYTE *)(v71 + (v72 + 1) + 1) = 2;
          v73 = v101;
          v74 = *(unsigned __int8 *)v101;
          *(_BYTE *)v101 = v74 + 1;
          *(_QWORD *)(v73 + 8 * v74 + 16) = 0;
          sub_22E3BB0B8((uint64_t)&v101);
          v75 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v75 + 312) = v6;
          *(_DWORD *)(v75 + 316) = 1880;
          if (*(char *)(v75 + 311) < 0)
          {
            **(_BYTE **)(v75 + 288) = 0;
            *(_QWORD *)(v75 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v75 + 288) = 0;
            *(_BYTE *)(v75 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v92, v75);
          llvm::omp::getOpenMPContextTraitSetForProperty();
          v76 = (void *)llvm::omp::getOpenMPContextTraitSetName();
          sub_22E3B89A8(&v92, v76, v77);
          llvm::omp::getOpenMPContextTraitSelectorForProperty();
          OpenMPContextTraitSelectorName = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
          sub_22E3B89A8(&v92, OpenMPContextTraitSelectorName, v79);
          v91 = 1283;
          __p[0] = "(";
          v89 = v15;
          v90 = v16;
          v101 = (uint64_t)__p;
          v103 = ")";
          v105[0] = 770;
          llvm::Twine::str((llvm::Twine *)&v101);
          if (v87 >= 0)
            v80 = &v85;
          else
            v80 = v85;
          if (v87 >= 0)
            v81 = v87 & 0x7F;
          else
            v81 = v86;
          sub_22E3B89A8(&v92, v80, v81);
          if (v87 < 0)
            operator delete(v85);
          sub_22E3BB0B8((uint64_t)&v92);
        }
      }
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v9 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v9 + 316) = 1879;
      if (*(char *)(v9 + 311) < 0)
      {
        **(_BYTE **)(v9 + 288) = 0;
        *(_QWORD *)(v9 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v9 + 288) = 0;
        *(_BYTE *)(v9 + 311) = 0;
      }
LABEL_5:
      sub_22E78E558((uint64_t)&v101, v9);
      v10 = (unsigned __int8 *)v101;
      if (!v101)
      {
        v10 = (unsigned __int8 *)sub_22E3B8AAC(v102);
        v101 = (uint64_t)v10;
      }
      v10[*v10 + 1] = 2;
      v11 = v101;
      v12 = *(unsigned __int8 *)v101;
      *(_BYTE *)v101 = v12 + 1;
      *(_QWORD *)(v11 + 8 * v12 + 16) = 0;
      llvm::omp::listOpenMPContextTraitSets((llvm::omp *)v10);
      if (SHIBYTE(v89) >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (SHIBYTE(v89) >= 0)
        v14 = HIBYTE(v89) & 0x7F;
      else
        v14 = (size_t)__p[1];
      sub_22E3B89A8((unsigned __int8 **)&v101, v13, v14);
      if (SHIBYTE(v89) < 0)
        operator delete(__p[0]);
      sub_22E3BB0B8((uint64_t)&v101);
    }
    if (OpenMPContextTraitSetKind)
    {
      if (*(_WORD *)(a1 + 32) == 63)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v27 + 316) = 1978;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v92, v27);
        v28 = v92;
        if (!v92)
        {
          v28 = (unsigned __int8 *)sub_22E3B8AAC(v93);
          v92 = v28;
        }
        v28[*v28 + 1] = 1;
        v29 = v92;
        v30 = *v92;
        *v92 = v30 + 1;
        *(_QWORD *)&v29[8 * v30 + 16] = "=";
        v31 = llvm::omp::getOpenMPContextTraitSetName();
        v91 = 1283;
        __p[0] = "context set name \"";
        v89 = (char *)v31;
        v90 = v32;
        v101 = (uint64_t)__p;
        v103 = "\"";
        v105[0] = 770;
        llvm::Twine::str((llvm::Twine *)&v101);
        if (v87 >= 0)
          v33 = &v85;
        else
          v33 = v85;
        if (v87 >= 0)
          v34 = v87 & 0x7F;
        else
          v34 = v86;
        sub_22E3B89A8(&v92, v33, v34);
        if (v87 < 0)
          operator delete(v85);
        sub_22E3BB0B8((uint64_t)&v92);
      }
      if (*(_WORD *)(a1 + 32) == 23)
      {
        sub_22E80CED8(a1);
      }
      else
      {
        v35 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v35 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v35 + 316) = 1978;
        if (*(char *)(v35 + 311) < 0)
        {
          **(_BYTE **)(v35 + 288) = 0;
          *(_QWORD *)(v35 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v35 + 288) = 0;
          *(_BYTE *)(v35 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v92, v35);
        v36 = v92;
        if (!v92)
        {
          v36 = (unsigned __int8 *)sub_22E3B8AAC(v93);
          v92 = v36;
        }
        v36[*v36 + 1] = 1;
        v37 = v92;
        v38 = *v92;
        *v92 = v38 + 1;
        *(_QWORD *)&v37[8 * v38 + 16] = "{";
        v39 = llvm::omp::getOpenMPContextTraitSetName();
        v91 = 1283;
        __p[0] = "'=' that follows the context set name \"";
        v89 = (char *)v39;
        v90 = v40;
        v101 = (uint64_t)__p;
        v103 = "\"";
        v105[0] = 770;
        llvm::Twine::str((llvm::Twine *)&v101);
        if (v87 >= 0)
          v41 = &v85;
        else
          v41 = v85;
        if (v87 >= 0)
          v42 = v87 & 0x7F;
        else
          v42 = v86;
        sub_22E3B89A8(&v92, v41, v42);
        if (v87 < 0)
          operator delete(v85);
        sub_22E3BB0B8((uint64_t)&v92);
      }
      v92 = 0;
      v93 = 0;
      v94 = 0x1000000000;
      while (1)
      {
        v101 = 0;
        LODWORD(v102) = 0;
        v103 = (char *)v105;
        v104 = 0x100000000;
        sub_22F2EB6F4(a1, (uint64_t)&v101, OpenMPContextTraitSetKind, (llvm::StringMapImpl *)&v92);
        if ((_DWORD)v102)
          v43 = (_DWORD)v104 == 0;
        else
          v43 = 1;
        if (!v43)
          sub_22F2EBDFC((uint64_t)&v96, (unint64_t)&v101);
        if (v103 != (char *)v105)
          free(v103);
        v44 = *(unsigned __int16 *)(a1 + 32);
        if (v44 != 65)
          break;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      }
      if (v44 == 24)
      {
        sub_22E80CED8(a1);
      }
      else
      {
        v45 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v45 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v45 + 316) = 1978;
        if (*(char *)(v45 + 311) < 0)
        {
          **(_BYTE **)(v45 + 288) = 0;
          *(_QWORD *)(v45 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v45 + 288) = 0;
          *(_BYTE *)(v45 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v85, v45);
        v46 = (unsigned __int8 *)v85;
        if (!v85)
        {
          v46 = (unsigned __int8 *)sub_22E3B8AAC(v86);
          v85 = v46;
        }
        v46[*v46 + 1] = 1;
        v47 = v85;
        v48 = *(unsigned __int8 *)v85;
        *(_BYTE *)v85 = v48 + 1;
        v47[v48 + 2] = "}";
        v49 = llvm::omp::getOpenMPContextTraitSetName();
        v91 = 1283;
        __p[0] = "context selectors for the context set \"";
        v89 = (char *)v49;
        v90 = v50;
        v101 = (uint64_t)__p;
        v103 = "\"";
        v105[0] = 770;
        llvm::Twine::str((llvm::Twine *)&v101);
        if (v100 >= 0)
          v51 = &v99;
        else
          v51 = (__int128 *)v99;
        if (v100 >= 0)
          v52 = v100 & 0x7F;
        else
          v52 = *((_QWORD *)&v99 + 1);
        sub_22E3B89A8((unsigned __int8 **)&v85, v51, v52);
        if (v100 < 0)
          operator delete((void *)v99);
        sub_22E3BB0B8((uint64_t)&v85);
      }
      sub_22F27B320((uint64_t)&v92);
      goto LABEL_101;
    }
    while (1)
    {
      do
LABEL_31:
        v101 = 0x1AE001600180041;
      while (!sub_22E885940(a1, (unsigned __int16 *)&v101, 4, 2));
      v20 = *(unsigned __int16 *)(a1 + 84);
      if (*(_WORD *)(a1 + 32) == 24 && v5 > v20)
      {
        sub_22E80CED8(a1);
        v20 = *(unsigned __int16 *)(a1 + 84);
      }
      if (v5 <= v20)
        break;
      v22 = *(unsigned __int16 *)(a1 + 32);
      if (v22 != 65 && v22 != 24)
        break;
      sub_22E80F0F0(a1, 0);
    }
    v23 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v23 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v23 + 316) = 1877;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v101, v23);
    v24 = (unsigned __int8 *)v101;
    if (!v101)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC(v102);
      v101 = (uint64_t)v24;
    }
    v24[*v24 + 1] = 2;
    v25 = v101;
    v26 = *(unsigned __int8 *)v101;
    *(_BYTE *)v101 = v26 + 1;
    *(_QWORD *)(v25 + 8 * v26 + 16) = 0;
    sub_22E3BB0B8((uint64_t)&v101);
LABEL_101:
    if (OpenMPContextTraitSetKind && (_DWORD)v97)
      sub_22F2EBE78(v2, (unint64_t)&OpenMPContextTraitSetKind);
    sub_22F2BF8FC(&v96);
    if (*(_WORD *)(a1 + 32) != 65)
      return sub_22F27B320((uint64_t)v84);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  }
}

uint64_t sub_22E85912C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int OpenMPClauseKind;
  char *OpenMPClauseName;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 **v30;
  uint64_t v31;
  void *OpenMPContextTraitPropertyName;
  size_t v33;
  void *OpenMPContextTraitSelectorName;
  size_t v35;
  void *OpenMPContextTraitSetName;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56[4];
  _BYTE v57[32];
  void *__p;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;

  if (*(unsigned __int16 *)(a1 + 32) - 399 < 0x29)
    goto LABEL_59;
  sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
  OpenMPClauseKind = llvm::omp::getOpenMPClauseKind();
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  if (OpenMPClauseKind == 47)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    __p = (void *)(a1 + 944);
    LOBYTE(v59) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v60 = a1;
    v61 = 1441813;
    v62 = 430;
    v64 = 0;
    v65 = 0;
    v63 = sub_22E80F720;
    OpenMPClauseName = (char *)llvm::omp::getOpenMPClauseName();
    v47 = sub_22E88C650((uint64_t)&__p, 1510, OpenMPClauseName, 0);
    if ((v47 & 1) == 0)
    {
      sub_22E8585DC(a1, a3);
      sub_22E811E8C((uint64_t)&__p);
      if (a4)
      {
        v9 = *(_DWORD *)(a4 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)a4;
          v48 = v10 + 136 * v9;
          while (1)
          {
            v11 = *(_DWORD *)(a3 + 8);
            if (v11)
              break;
LABEL_58:
            sub_22F2EBE78(a3, v10);
LABEL_56:
            v10 += 136;
            if (v10 == v48)
              goto LABEL_64;
          }
          v12 = 0;
          v13 = *(_QWORD *)a3;
          v14 = *(_QWORD *)a3 + 136 * v11;
          v50 = v14;
          while (1)
          {
            if (*(_DWORD *)v13 != *(_DWORD *)v10)
              goto LABEL_54;
            v15 = *(_DWORD *)(v10 + 16);
            if (v15)
              break;
            v12 = 1;
LABEL_54:
            v13 += 136;
            if (v13 == v14)
            {
              if ((v12 & 1) != 0)
                goto LABEL_56;
              goto LABEL_58;
            }
          }
          v16 = *(_QWORD *)(v10 + 8);
          v52 = v13;
          v53 = v16 + 56 * v15;
          v51 = v13 + 8;
          while (1)
          {
            v17 = *(_DWORD *)(v13 + 16);
            if (v17)
              break;
LABEL_52:
            sub_22F2EBDFC(v51, v16);
LABEL_50:
            v16 += 56;
            if (v16 == v53)
            {
              v12 = 1;
              v14 = v50;
              goto LABEL_54;
            }
          }
          v18 = 0;
          v19 = *(_QWORD *)(v13 + 8);
          v20 = v19 + 56 * v17;
          v54 = v20;
          while (1)
          {
            if (*(_DWORD *)(v19 + 8) != *(_DWORD *)(v16 + 8))
              goto LABEL_48;
            v21 = *(_DWORD *)(v16 + 24);
            if (v21)
              break;
            v18 = 1;
LABEL_48:
            v19 += 56;
            if (v19 == v20)
            {
              v13 = v52;
              if ((v18 & 1) != 0)
                goto LABEL_50;
              goto LABEL_52;
            }
          }
          v22 = *(_QWORD *)(v16 + 16);
          v55 = v22 + 24 * v21;
LABEL_19:
          v23 = *(_DWORD *)(v19 + 24);
          if (!v23)
            goto LABEL_44;
          v24 = 0;
          v25 = *(_QWORD *)(v19 + 16);
          v26 = v25 + 24 * v23;
          while (1)
          {
            while (1)
            {
              if (*(_DWORD *)v25 != *(_DWORD *)v22)
                goto LABEL_37;
              v27 = *(_QWORD *)(v25 + 16);
              if (v27 == *(_QWORD *)(v22 + 16))
                break;
LABEL_28:
              if (*(_DWORD *)(v19 + 8) == 10)
              {
                v29 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v29 + 312) = a2;
                *(_DWORD *)(v29 + 316) = 1658;
                if (*(char *)(v29 + 311) < 0)
                {
                  **(_BYTE **)(v29 + 288) = 0;
                  *(_QWORD *)(v29 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v29 + 288) = 0;
                  *(_BYTE *)(v29 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v57, v29);
                v30 = (unsigned __int8 **)v57;
LABEL_36:
                sub_22E3BB0B8((uint64_t)v30);
                goto LABEL_37;
              }
              if (*(_QWORD *)v19 != *(_QWORD *)v16)
              {
                v31 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v31 + 312) = a2;
                *(_DWORD *)(v31 + 316) = 1657;
                if (*(char *)(v31 + 311) < 0)
                {
                  **(_BYTE **)(v31 + 288) = 0;
                  *(_QWORD *)(v31 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v31 + 288) = 0;
                  *(_BYTE *)(v31 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v56, v31);
                OpenMPContextTraitPropertyName = (void *)llvm::omp::getOpenMPContextTraitPropertyName();
                sub_22E3B89A8(v56, OpenMPContextTraitPropertyName, v33);
                OpenMPContextTraitSelectorName = (void *)llvm::omp::getOpenMPContextTraitSelectorName();
                sub_22E3B89A8(v56, OpenMPContextTraitSelectorName, v35);
                OpenMPContextTraitSetName = (void *)llvm::omp::getOpenMPContextTraitSetName();
                sub_22E3B89A8(v56, OpenMPContextTraitSetName, v37);
                v30 = v56;
                goto LABEL_36;
              }
LABEL_37:
              v25 += 24;
              if (v25 == v26)
              {
                if ((v24 & 1) == 0)
                {
LABEL_44:
                  v38 = sub_22E4EF088(v19 + 16, v22, 1);
                  v39 = *(_QWORD *)(v19 + 16) + 24 * *(unsigned int *)(v19 + 24);
                  v40 = *(_OWORD *)v38;
                  *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
                  *(_OWORD *)v39 = v40;
                  ++*(_DWORD *)(v19 + 24);
                }
LABEL_45:
                v22 += 24;
                if (v22 == v55)
                {
                  v18 = 1;
                  v20 = v54;
                  goto LABEL_48;
                }
                goto LABEL_19;
              }
            }
            if (v27)
            {
              v28 = memcmp(*(const void **)(v25 + 8), *(const void **)(v22 + 8), v27);
              if (v28)
              {
                v24 |= v28 == 0;
                goto LABEL_28;
              }
            }
            if (*(_QWORD *)v19 != *(_QWORD *)v16)
            {
              v24 = 1;
              goto LABEL_28;
            }
            v25 += 24;
            v24 = 1;
            if (v25 == v26)
              goto LABEL_45;
          }
        }
      }
    }
LABEL_64:
    *(_BYTE *)__p = v59;
    return v47;
  }
  else
  {
LABEL_59:
    v41 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v41 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v41 + 316) = 1659;
    if (*(char *)(v41 + 311) < 0)
    {
      **(_BYTE **)(v41 + 288) = 0;
      *(_QWORD *)(v41 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v41 + 288) = 0;
      *(_BYTE *)(v41 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&__p, v41);
    v42 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
    v43 = (unsigned __int8 *)__p;
    if (!__p)
    {
      v43 = (unsigned __int8 *)sub_22E3B8AAC(v59);
      __p = v43;
    }
    v43[*v43 + 1] = 2;
    v44 = __p;
    v45 = *(unsigned __int8 *)__p;
    *(_BYTE *)__p = v45 + 1;
    v44[v45 + 2] = v42 > 0x32;
    sub_22E3BB0B8((uint64_t)&__p);
    return 1;
  }
}

uint64_t sub_22E85964C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  char *OpenMPClauseName;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  __int128 *v33;
  size_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  int v37;
  char v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  unint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  __int128 *v64;
  size_t v65;
  _BOOL4 v66;
  _BOOL4 v67;
  char v68;
  char v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  BOOL v80;
  unsigned __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned __int16 *v91;
  uint64_t v92;
  unsigned __int16 *v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  unsigned int v97;
  int v98;
  char v99;
  _DWORD *v100;
  char v101;
  uint64_t v102;
  int v103;
  unsigned int *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  unint64_t v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  _OWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  __int128 v158;
  char v159;
  BOOL v161;
  int v162;
  char v163;
  int v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  BOOL v171;
  void *OpenMPDirectiveName;
  size_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  int v180;
  int v181;
  unsigned __int16 *v183;
  uint64_t v184;
  int v185;
  unsigned __int16 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  _BOOL8 v194;
  unsigned int v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  _BYTE *v201;
  char v202;
  uint64_t v203;
  int v204;
  __int16 v205;
  uint64_t (*v206)(uint64_t);
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  char v210;
  uint64_t v211;
  int v212;
  __int16 v213;
  uint64_t (*v214)(uint64_t);
  uint64_t v215;
  uint64_t v216;
  void *v217[2];
  char v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  int v223;
  _BYTE v224[12];
  int v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  v223 = 0;
  *(_QWORD *)v224 = 0;
  v226 = 0;
  v9 = (_BYTE *)(a1 + 944);
  v209 = (_BYTE *)(a1 + 944);
  v210 = *(_BYTE *)(a1 + 944);
  v10 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v211 = a1;
  v212 = 1441813;
  v213 = 430;
  v216 = 0;
  v214 = sub_22E80F720;
  v215 = 0;
  OpenMPClauseName = (char *)llvm::omp::getOpenMPClauseName();
  if ((sub_22E88C650((uint64_t)&v209, 1510, OpenMPClauseName, 0) & 1) != 0)
    goto LABEL_367;
  v201 = v9;
  v202 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v203 = a1;
  v204 = 1441813;
  v205 = 430;
  v207 = 0;
  v208 = 0;
  v206 = sub_22E80F720;
  v196 = a3;
  if ((int)a3 <= 65)
  {
    v13 = a5;
    switch((int)a3)
    {
      case '%':
        goto LABEL_30;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case '-':
        goto LABEL_38;
      case '+':
        v14 = 1;
        *(_DWORD *)(a5 + 72) = 1;
        v15 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(*(_QWORD *)(v15 + 56) + 72) < 0x32u
          || (sub_22F421B08(a2) & 1) != 0
          || (a2 - 36) < 0x2A && ((0x30000000C03uLL >> (a2 - 36)) & 1) != 0
          || *(_WORD *)(a1 + 32) != 5
          || ((v135 = *(_QWORD *)(v15 + 2816), v135 >= *(unsigned int *)(v15 + 2784))
            ? (v136 = sub_22F162D2C(v15, 1u))
            : (v136 = *(_QWORD *)(v15 + 2776) + 24 * v135),
              *(_WORD *)(v136 + 16) != 61))
        {
          v190 = 0;
          v191 = 0;
          v193 = 0;
          goto LABEL_311;
        }
        sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
        if ((SBYTE7(v228) & 0x80u) == 0)
          v186 = (unsigned __int16 *)&v227;
        else
          v186 = (unsigned __int16 *)v227;
        if ((SBYTE7(v228) & 0x80u) == 0)
          v187 = BYTE7(v228) & 0x7F;
        else
          v187 = *((_QWORD *)&v227 + 1);
        *(_DWORD *)(a5 + 72) = sub_22F1DC2A4(43, v186, v187, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
        if (SBYTE7(v228) < 0)
          operator delete((void *)v227);
        *(_DWORD *)(a5 + 212) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v190 = 0;
        v191 = 0;
        v193 = 0;
        v192 = 0;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a1 + 40);
        goto LABEL_313;
      case ',':
        *(_DWORD *)(a5 + 72) = 0;
        if (*(_WORD *)(a1 + 32) != 5)
          goto LABEL_278;
        v56 = *(_QWORD *)(a1 + 8);
        v57 = *(_QWORD *)(v56 + 2816);
        v58 = v57 >= *(unsigned int *)(v56 + 2784) ? sub_22F162D2C(v56, 1u) : *(_QWORD *)(v56 + 2776) + 24 * v57;
        if (*(_WORD *)(v58 + 16) != 21)
          goto LABEL_278;
        sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
        if ((SBYTE7(v228) & 0x80u) == 0)
          v91 = (unsigned __int16 *)&v227;
        else
          v91 = (unsigned __int16 *)v227;
        if ((SBYTE7(v228) & 0x80u) == 0)
          v92 = BYTE7(v228) & 0x7F;
        else
          v92 = *((_QWORD *)&v227 + 1);
        *(_DWORD *)(a5 + 72) = sub_22F1DC2A4(44, v91, v92, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
        if (SBYTE7(v228) < 0)
          operator delete((void *)v227);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        *(_DWORD *)(a5 + 212) = *(_DWORD *)(a1 + 40);
        sub_22E811DE8((uint64_t)&v201);
        v190 = 0;
        v191 = 0;
        v193 = 0;
        v192 = 1;
        goto LABEL_303;
      case '.':
        v38 = *(_BYTE *)(a1 + 945);
        *(_BYTE *)(a1 + 945) = 1;
        *(_DWORD *)(a5 + 72) = 6;
        v39 = (_OWORD *)(a1 + 16);
        *(_DWORD *)(a5 + 212) = *(_DWORD *)(a1 + 16);
        v40 = (_OWORD *)(a1 + 48);
        v41 = *(_OWORD *)(a1 + 64);
        v199 = *(_OWORD *)(a1 + 48);
        v200 = v41;
        v197 = *(_OWORD *)(a1 + 16);
        v198 = *(_QWORD *)(a1 + 32);
        v42 = *(unsigned int *)(a1 + 2344);
        v43 = *(_WORD *)(a1 + 80);
        v44 = *(_WORD *)(a1 + 82);
        v45 = *(_WORD *)(a1 + 84);
        sub_22F1629F8(*(_QWORD *)(a1 + 8));
        LODWORD(v227) = 1441853;
        WORD2(v227) = 430;
        if (sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2))
        {
          v46 = *(unsigned __int16 *)(a1 + 32);
          v47 = *(_QWORD *)(a1 + 8);
          v48 = *(_QWORD *)(v47 + 2832);
          *(_QWORD *)(v47 + 2816) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(v47 + 2832) = v48 - 8;
          v49 = *(_QWORD *)(v47 + 1008);
          if (v49)
          {
            if (*(_QWORD *)(v49 + 224))
              v50 = 3;
            else
              v50 = 0;
          }
          else if (*(_QWORD *)(v47 + 1040))
          {
            v50 = 1;
          }
          else
          {
            v50 = 2;
          }
          *(_DWORD *)(v47 + 1048) = v50;
          v51 = v200;
          *v40 = v199;
          *(_OWORD *)(a1 + 64) = v51;
          *v39 = v197;
          *(_QWORD *)(a1 + 32) = v198;
          sub_22E80FADC(a1 + 2336, v42);
          *(_WORD *)(a1 + 80) = v43;
          *(_WORD *)(a1 + 82) = v44;
          *(_WORD *)(a1 + 84) = v45;
          if (v46 != 61)
          {
            v190 = 0;
            v13 = a5;
            LODWORD(a3) = v196;
            goto LABEL_131;
          }
          v52 = *(unsigned __int16 *)(a1 + 32);
          v13 = a5;
          LODWORD(a3) = v196;
          if (v52 == 61)
          {
LABEL_65:
            v53 = *(_DWORD *)v39;
            goto LABEL_66;
          }
          while (1)
          {
            v219 = *v39;
            v220 = *(_QWORD *)(a1 + 32);
            if ((unsigned __int16)v220 != 5)
              goto LABEL_230;
            sub_22F1413E0((uint64_t)&v219, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v221);
            if (v222 >= 0)
              v111 = (unsigned __int16 *)&v221;
            else
              v111 = (unsigned __int16 *)v221;
            if (v222 >= 0)
              v112 = HIBYTE(v222) & 0x7F;
            else
              v112 = *((_QWORD *)&v221 + 1);
            v113 = sub_22F1DC2A4(46, v111, v112, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
            if (SHIBYTE(v222) < 0)
              operator delete((void *)v221);
            if (v113 > 0xB)
              break;
            if (((1 << v113) & 0xD80) != 0)
            {
              v114 = *(unsigned int *)(a5 + 88);
              if (v114 >= *(unsigned int *)(a5 + 92))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v114 = *(unsigned int *)(a5 + 88);
              }
              *(_DWORD *)(*(_QWORD *)(a5 + 80) + 4 * v114) = v113;
              ++*(_DWORD *)(a5 + 88);
              v115 = *(_DWORD *)v39;
              v116 = *(unsigned int *)(a5 + 128);
              if (v116 >= *(unsigned int *)(a5 + 132))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v116 = *(unsigned int *)(a5 + 128);
              }
              LODWORD(a3) = v196;
              *(_DWORD *)(*(_QWORD *)(a5 + 120) + 4 * v116) = v115;
              ++*(_DWORD *)(a5 + 128);
              goto LABEL_239;
            }
            if (v113 != 9)
              break;
            v117 = *(unsigned int *)(a5 + 88);
            if (v117 >= *(unsigned int *)(a5 + 92))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v117 = *(unsigned int *)(a5 + 88);
            }
            LODWORD(a3) = v196;
            *(_DWORD *)(*(_QWORD *)(a5 + 80) + 4 * v117) = 9;
            ++*(_DWORD *)(a5 + 88);
            v118 = *(_DWORD *)v39;
            v119 = *(unsigned int *)(a5 + 128);
            if (v119 >= *(unsigned int *)(a5 + 132))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v119 = *(unsigned int *)(a5 + 128);
            }
            *(_DWORD *)(*(_QWORD *)(a5 + 120) + 4 * v119) = v118;
            ++*(_DWORD *)(a5 + 128);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            if ((sub_22E8608A8(a1, a5) & 1) != 0)
            {
              LODWORD(v227) = 28180541;
              sub_22E885940(a1, (unsigned __int16 *)&v227, 2, 2);
              v190 = 1;
              goto LABEL_131;
            }
LABEL_240:
            v52 = *(unsigned __int16 *)(a1 + 32);
            if (v52 == 65)
              goto LABEL_241;
LABEL_242:
            if (v52 == 61)
              goto LABEL_65;
          }
          v52 = *(unsigned __int16 *)(a1 + 32);
          LODWORD(a3) = v196;
LABEL_230:
          if (v52 == 65)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1673, (uint64_t)&v227);
            sub_22E3BB0B8((uint64_t)&v227);
LABEL_241:
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v52 = *(unsigned __int16 *)(a1 + 32);
            goto LABEL_242;
          }
          v120 = *(_QWORD *)(a1 + 8);
          v121 = *(_QWORD *)(v120 + 2816);
          if (v121 >= *(unsigned int *)(v120 + 2784))
            v122 = sub_22F162D2C(v120, 1u);
          else
            v122 = *(_QWORD *)(v120 + 2776) + 24 * v121;
          if (*(_WORD *)(v122 + 16) == 61)
          {
            v53 = *(_DWORD *)(a1 + 16);
            if (*(_WORD *)(a1 + 32) != 61)
            {
              v221 = *v39;
              v222 = *(_QWORD *)(a1 + 32);
              if ((unsigned __int16)v222 == 5 || (unsigned __int16)v222 == 132)
              {
                sub_22F1413E0((uint64_t)&v221, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)v217);
                if (v218 >= 0)
                  v183 = (unsigned __int16 *)v217;
                else
                  v183 = (unsigned __int16 *)v217[0];
                if (v218 >= 0)
                  v184 = v218 & 0x7F;
                else
                  v184 = (uint64_t)v217[1];
                v185 = sub_22F1DC2A4(46, v183, v184, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
                if (v218 < 0)
                  operator delete(v217[0]);
                v13 = a5;
                *(_DWORD *)(a5 + 72) = v185;
                if (v185 != 6)
                {
LABEL_397:
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_69:
                  v190 = 0;
                  goto LABEL_131;
                }
              }
              else
              {
                *(_DWORD *)(a5 + 72) = 6;
              }
              v188 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v188 + 312) = v53;
              *(_DWORD *)(v188 + 316) = 1680;
              if (*(char *)(v188 + 311) < 0)
              {
                **(_BYTE **)(v188 + 288) = 0;
                *(_QWORD *)(v188 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v188 + 288) = 0;
                *(_BYTE *)(v188 + 311) = 0;
              }
              v189 = sub_22E78E558((uint64_t)&v219, v188);
              sub_22E3BB0B8(v189);
              goto LABEL_397;
            }
LABEL_66:
            v54 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v54 + 312) = v53;
            *(_DWORD *)(v54 + 316) = 1672;
            if (*(char *)(v54 + 311) < 0)
            {
              **(_BYTE **)(v54 + 288) = 0;
              *(_QWORD *)(v54 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v54 + 288) = 0;
              *(_BYTE *)(v54 + 311) = 0;
            }
            v55 = sub_22E78E558((uint64_t)&v227, v54);
            sub_22E3BB0B8(v55);
            goto LABEL_69;
          }
          sub_22E884578(a1, (int *)(a1 + 16), 1681, (uint64_t)&v219);
          v123 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
          v124 = (unsigned __int8 *)v219;
          if (!(_QWORD)v219)
          {
            v124 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v219 + 1));
            *(_QWORD *)&v219 = v124;
          }
          v124[*v124 + 1] = 2;
          v125 = v219;
          v126 = *(unsigned __int8 *)v219;
          *(_BYTE *)v219 = v126 + 1;
          *(_QWORD *)(v125 + 8 * v126 + 16) = v123 > 0x32;
          v127 = HIDWORD(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72)) & 1;
          *(_BYTE *)(v125 + (v126 + 1) + 1) = 3;
          v128 = v219;
          v129 = *(unsigned __int8 *)v219;
          *(_BYTE *)v219 = v129 + 1;
          *(_QWORD *)(v128 + 8 * v129 + 16) = v127;
          sub_22E3BB0B8((uint64_t)&v219);
LABEL_239:
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          goto LABEL_240;
        }
        v75 = *(_QWORD *)(a1 + 8);
        v76 = *(_QWORD *)(v75 + 2832);
        *(_QWORD *)(v75 + 2816) = *(_QWORD *)(v76 - 8);
        *(_QWORD *)(v75 + 2832) = v76 - 8;
        v77 = *(_QWORD *)(v75 + 1008);
        if (v77)
        {
          if (*(_QWORD *)(v77 + 224))
            v78 = 3;
          else
            v78 = 0;
        }
        else if (*(_QWORD *)(v75 + 1040))
        {
          v78 = 1;
        }
        else
        {
          v78 = 2;
        }
        *(_DWORD *)(v75 + 1048) = v78;
        v79 = v200;
        *v40 = v199;
        *(_OWORD *)(a1 + 64) = v79;
        *v39 = v197;
        *(_QWORD *)(a1 + 32) = v198;
        sub_22E80FADC(a1 + 2336, v42);
        v190 = 0;
        *(_WORD *)(a1 + 80) = v43;
        *(_WORD *)(a1 + 82) = v44;
        *(_WORD *)(a1 + 84) = v45;
        v13 = a5;
LABEL_131:
        if (*(_DWORD *)(v13 + 72) == 6)
        {
          *(_DWORD *)(v13 + 72) = 3;
          *(_BYTE *)(v13 + 208) = 1;
        }
        if (*(_WORD *)(a1 + 32) == 61)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 40);
        }
        v193 = 0;
        v90 = 0;
        *(_BYTE *)(a1 + 945) = v38;
        break;
      default:
        if ((_DWORD)a3 != 18)
        {
          if ((_DWORD)a3 == 31)
            goto LABEL_9;
          goto LABEL_38;
        }
        v59 = *(_QWORD *)(a1 + 8);
        v60 = *(_QWORD *)(v59 + 56);
        if (*(_DWORD *)(v60 + 72) >= 0x32u && *(_WORD *)(a1 + 32) == 5)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(v59 + 88), (_QWORD *)v60, 0, (uint64_t)&v227);
          v61 = BYTE7(v228);
          if ((SBYTE7(v228) & 0x80u) == 0)
            v62 = BYTE7(v228) & 0x7F;
          else
            v62 = *((_QWORD *)&v227 + 1);
          if (v62 == 8)
          {
            if ((SBYTE7(v228) & 0x80u) == 0)
              v63 = BYTE7(v228);
            else
              v63 = *((_QWORD *)&v227 + 1);
            if ((SBYTE7(v228) & 0x80u) == 0)
              v64 = &v227;
            else
              v64 = (__int128 *)v227;
            if (v63 >= 8)
              v65 = 8;
            else
              v65 = v63;
            v66 = memcmp(v64, "iterator", v65) == 0;
            v67 = v63 == 8 && v66;
          }
          else
          {
            v67 = 0;
          }
          if (v61 < 0)
            operator delete((void *)v227);
          if (v67)
          {
            sub_22E885C30(a1, 32776);
            v13 = a5;
            *(_QWORD *)a5 = sub_22E860A60(a1) & 0xFFFFFFFFFFFFFFFELL;
            sub_22E8847B4(a1, 0x41u, 15, "", 0);
            v193 = 1;
          }
          else
          {
            v193 = 0;
            v13 = a5;
          }
        }
        else
        {
          v193 = 0;
        }
        v68 = *(_BYTE *)(a1 + 945);
        *(_BYTE *)(a1 + 945) = 1;
        if (*(_WORD *)(a1 + 32) == 5)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
          v69 = BYTE7(v228);
        }
        else
        {
          v69 = 0;
          BYTE7(v228) = 0;
          LOBYTE(v227) = 0;
        }
        v80 = v69 < 0;
        if (v69 >= 0)
          v81 = (unsigned __int16 *)&v227;
        else
          v81 = (unsigned __int16 *)v227;
        v82 = v69 & 0x7F;
        if (v80)
          v83 = *((_QWORD *)&v227 + 1);
        else
          v83 = v82;
        v84 = sub_22F1DC2A4(18, v81, v83, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
        *(_DWORD *)(v13 + 72) = v84;
        if (SBYTE7(v228) < 0)
        {
          operator delete((void *)v227);
          v84 = *(_DWORD *)(v13 + 72);
        }
        *(_DWORD *)(v13 + 212) = *(_DWORD *)(a1 + 16);
        if (v84 == 8)
        {
          LODWORD(v227) = 1441853;
          WORD2(v227) = 430;
          sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
        }
        else
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (a2 == 39 && *(_DWORD *)(v13 + 72) == 5)
          {
            sub_22E811E8C((uint64_t)&v209);
            v10 = 0;
            *(_BYTE *)(a1 + 945) = v68;
            goto LABEL_366;
          }
        }
        if (*(_WORD *)(a1 + 32) == 61)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 40);
        }
        else
        {
          if (a2 == 39)
            v85 = 1990;
          else
            v85 = 1989;
          sub_22E884578(a1, (int *)(a1 + 16), v85, (uint64_t)&v227);
          v86 = (unsigned __int8 *)v227;
          if (!(_QWORD)v227)
          {
            v86 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v227 + 1));
            *(_QWORD *)&v227 = v86;
          }
          v86[*v86 + 1] = 1;
          v87 = v227;
          v88 = *(unsigned __int8 *)v227;
          *(_BYTE *)v227 = v88 + 1;
          *(_QWORD *)(v87 + 8 * v88 + 16) = "dependency type";
          sub_22E3BB0B8((uint64_t)&v227);
        }
        v190 = 0;
        v191 = 0;
        *(_BYTE *)(a1 + 945) = v68;
        v89 = *(_DWORD *)(v13 + 72);
        goto LABEL_304;
    }
LABEL_300:
    v89 = *(_DWORD *)(v13 + 72);
    v191 = v90;
    if ((_DWORD)a3 != 46 || v89 == 6)
    {
LABEL_304:
      v192 = 0;
      v14 = (_DWORD)a3 == 18 && v89 != 8;
      goto LABEL_313;
    }
    goto LABEL_302;
  }
  v13 = a5;
  if ((_DWORD)a3 == 66 || (_DWORD)a3 == 77)
  {
LABEL_30:
    *(_DWORD *)(v13 + 72) = 3;
    if ((_DWORD)a3 == 66)
    {
      v25 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(*(_QWORD *)(v25 + 56) + 72) >= 0x32u)
      {
        v26 = *(unsigned __int16 *)(a1 + 32);
        if (v26 == 82 || v26 == 5)
        {
          v27 = *(_QWORD *)(v25 + 2816);
          v28 = v27 >= *(unsigned int *)(v25 + 2784) ? sub_22F162D2C(v25, 1u) : *(_QWORD *)(v25 + 2776) + 24 * v27;
          if (*(_WORD *)(v28 + 16) == 65)
          {
            sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
            if ((SBYTE7(v228) & 0x80u) == 0)
              v93 = (unsigned __int16 *)&v227;
            else
              v93 = (unsigned __int16 *)v227;
            if ((SBYTE7(v228) & 0x80u) == 0)
              v94 = BYTE7(v228) & 0x7F;
            else
              v94 = *((_QWORD *)&v227 + 1);
            *(_DWORD *)(v13 + 72) = sub_22F1DC2A4(66, v93, v94, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
            if (SBYTE7(v228) < 0)
              operator delete((void *)v227);
            *(_DWORD *)(v13 + 212) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          }
        }
      }
    }
    v95 = *(_BYTE *)(a1 + 945);
    *(_BYTE *)(a1 + 945) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      sub_22E8408AC(a1, v13 + 16, 0, 0, 0, 0, 0, 0, 0, 0);
    if (*(_DWORD *)(v13 + 20))
      v96 = *(_DWORD *)(v13 + 16) == 0;
    else
      v96 = 1;
    if (!v96 || *(_QWORD *)(v13 + 24))
      goto LABEL_173;
    v97 = *(unsigned __int16 *)(a1 + 32);
    if (v97 <= 0x36)
    {
      v98 = 5;
      switch(*(_WORD *)(a1 + 32))
      {
        case 0x1B:
          v98 = 11;
          goto LABEL_183;
        case 0x1C:
          v98 = 35;
          goto LABEL_183;
        case 0x1E:
          v98 = 7;
          goto LABEL_183;
        case 0x20:
          goto LABEL_183;
        case 0x23:
          v98 = 6;
          goto LABEL_183;
        default:
          goto LABEL_173;
      }
    }
    switch(v97)
    {
      case '7':
        v98 = 10;
        break;
      case '9':
        v98 = 12;
        break;
      case ':':
        v98 = 36;
        break;
      default:
LABEL_173:
        v90 = 0;
        if (sub_22E842CDC(a1, v13 + 16, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v223))
        {
          LODWORD(v227) = 1441853;
          WORD2(v227) = 430;
          sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
          v90 = 1;
        }
LABEL_188:
        v104 = (unsigned int *)(a1 + 16);
        if (*(_WORD *)(a1 + 32) == 61)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v104);
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 40);
          if ((v90 & 1) != 0)
            goto LABEL_195;
        }
        else
        {
          sub_22E884578(a1, (int *)v104, 1989, (uint64_t)&v227);
          v105 = (unsigned __int8 *)v227;
          if (!(_QWORD)v227)
          {
            v105 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v227 + 1));
            *(_QWORD *)&v227 = v105;
          }
          v105[*v105 + 1] = 1;
          v106 = v227;
          v107 = *(unsigned __int8 *)v227;
          *(_BYTE *)v227 = v107 + 1;
          *(_QWORD *)(v106 + 8 * v107 + 16) = "reduction identifier";
          sub_22E3BB0B8((uint64_t)&v227);
          if ((v90 & 1) != 0)
            goto LABEL_195;
        }
        sub_22EA12DB4(*(_QWORD *)(a1 + 88), (uint64_t)&v223);
        *(_OWORD *)(v13 + 48) = v227;
        *(_QWORD *)(v13 + 64) = v228;
LABEL_195:
        v193 = 0;
        v190 = 0;
        *(_BYTE *)(a1 + 945) = v95;
        goto LABEL_295;
    }
LABEL_183:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v102 = 0;
    LODWORD(v227) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)((char *)&v227 + 4) = v227;
    LODWORD(v226) = v227;
    HIDWORD(v226) = v227;
    *(_QWORD *)&v224[4] = 0;
    v225 = 0;
    v223 = 1;
    *(_DWORD *)v224 = v98;
    do
    {
      v103 = *(_DWORD *)((char *)&v227 + v102);
      *(_DWORD *)&v224[v102 + 4] = v103;
      if (v103)
        HIDWORD(v226) = v103;
      v102 += 4;
    }
    while (v102 != 12);
    v90 = 0;
    goto LABEL_188;
  }
  if ((_DWORD)a3 == 81)
  {
LABEL_9:
    if (*(_WORD *)(a1 + 32) == 5)
    {
      while (1)
      {
        sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
        if ((SBYTE7(v228) & 0x80u) == 0)
          v16 = (unsigned __int16 *)&v227;
        else
          v16 = (unsigned __int16 *)v227;
        if ((SBYTE7(v228) & 0x80u) == 0)
          v17 = BYTE7(v228) & 0x7F;
        else
          v17 = *((_QWORD *)&v227 + 1);
        v18 = sub_22F1DC2A4(a3, v16, v17, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
        if (SBYTE7(v228) < 0)
          operator delete((void *)v227);
        if (v18 == 2)
        {
LABEL_94:
          v190 = 0;
          v37 = 1;
          goto LABEL_95;
        }
        v19 = *(unsigned int *)(v13 + 168);
        if (v19 >= *(unsigned int *)(v13 + 172))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = *(unsigned int *)(v13 + 168);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 160) + 4 * v19) = v18;
        ++*(_DWORD *)(v13 + 168);
        v20 = v13;
        v21 = *(_DWORD *)(a1 + 16);
        v22 = *(unsigned int *)(v20 + 192);
        if (v22 >= *(unsigned int *)(v20 + 196))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = *(unsigned int *)(a5 + 192);
        }
        *(_DWORD *)(*(_QWORD *)(a5 + 184) + 4 * v22) = v21;
        v13 = a5;
        ++*(_DWORD *)(a5 + 192);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (!v18 && (sub_22E8608A8(a1, a5) & 1) != 0)
          break;
        v23 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(*(_QWORD *)(v23 + 56) + 72) < 0x33u)
          goto LABEL_94;
        v24 = *(unsigned __int16 *)(a1 + 32);
        a3 = v196;
        if (v24 == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(v23, (unsigned int *)(a1 + 16));
          v24 = *(unsigned __int16 *)(a1 + 32);
        }
        if (v24 != 5)
          goto LABEL_58;
      }
      v37 = 0;
      v190 = 1;
LABEL_95:
      LODWORD(a3) = v196;
    }
    else
    {
LABEL_58:
      v190 = 0;
      v37 = 1;
    }
    if (*(_DWORD *)(v13 + 168))
    {
      if (*(_WORD *)(a1 + 32) == 61)
      {
LABEL_203:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v193 = 0;
        v90 = 0;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 40);
        goto LABEL_295;
      }
      if (v37)
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) > 0x32u)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1989, (uint64_t)&v227);
          v108 = (unsigned __int8 *)v227;
          if (!(_QWORD)v227)
          {
            v108 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v227 + 1));
            *(_QWORD *)&v227 = v108;
          }
          v108[*v108 + 1] = 1;
          v109 = v227;
          v110 = *(unsigned __int8 *)v227;
          *(_BYTE *)v227 = v110 + 1;
          v73 = v109 + 8 * v110;
          v74 = "motion modifier";
        }
        else
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1989, (uint64_t)&v227);
          v70 = (unsigned __int8 *)v227;
          if (!(_QWORD)v227)
          {
            v70 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v227 + 1));
            *(_QWORD *)&v227 = v70;
          }
          v70[*v70 + 1] = 1;
          v71 = v227;
          v72 = *(unsigned __int8 *)v227;
          *(_BYTE *)v227 = v72 + 1;
          v73 = v71 + 8 * v72;
          v74 = ")";
        }
        *(_QWORD *)(v73 + 16) = v74;
        sub_22E3BB0B8((uint64_t)&v227);
      }
      LODWORD(v227) = 1441853;
      WORD2(v227) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
      if (*(_DWORD *)(v13 + 168))
        goto LABEL_202;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) >= 0x33u)
    {
LABEL_202:
      if (*(_WORD *)(a1 + 32) == 61)
        goto LABEL_203;
    }
    v193 = 0;
    goto LABEL_205;
  }
LABEL_38:
  v29 = a3 != 6;
  if ((_DWORD)a3 == 6)
    goto LABEL_276;
  if ((_DWORD)a3 == 2)
  {
    v99 = *(_BYTE *)(a1 + 945);
    *(_BYTE *)(a1 + 945) = 1;
    v100 = (_DWORD *)(a1 + 16);
    if (*(_WORD *)(a1 + 32) == 5)
    {
      sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
      v101 = BYTE7(v228);
      v12 = *((_QWORD *)&v227 + 1);
    }
    else
    {
      v101 = 0;
      BYTE7(v228) = 0;
      LOBYTE(v227) = 0;
    }
    v130 = v101 < 0;
    if (v101 >= 0)
      v131 = (unsigned __int16 *)&v227;
    else
      v131 = (unsigned __int16 *)v227;
    v132 = v101 & 0x7F;
    if (v130)
      v133 = v12;
    else
      v133 = v132;
    v134 = sub_22F1DC2A4(2, v131, v133, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
    *(_DWORD *)(a5 + 72) = v134;
    if (SBYTE7(v228) < 0)
    {
      operator delete((void *)v227);
      v134 = *(_DWORD *)(a5 + 72);
    }
    *(_DWORD *)(a5 + 212) = *v100;
    if (v134 == 2)
    {
      LODWORD(v227) = 1441853;
      WORD2(v227) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) == 61)
        *(_DWORD *)(a5 + 8) = *v100;
      sub_22E8847B4(a1, 0x3Du, 1989, "adjust-op", 9uLL);
    }
    v190 = 0;
    v191 = 0;
    v193 = 0;
    v192 = 0;
    *(_BYTE *)(a1 + 945) = v99;
    goto LABEL_303;
  }
  v13 = a5;
  if ((_DWORD)a3 != 3)
  {
    v193 = 0;
    v190 = 0;
LABEL_205:
    v90 = 0;
    goto LABEL_295;
  }
  if (*(_WORD *)(a1 + 32) == 5)
  {
    sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v227);
    v30 = BYTE7(v228);
    if ((SBYTE7(v228) & 0x80u) == 0)
      v31 = BYTE7(v228) & 0x7F;
    else
      v31 = *((_QWORD *)&v227 + 1);
    if (v31 == 8)
    {
      if ((SBYTE7(v228) & 0x80u) == 0)
        v32 = BYTE7(v228);
      else
        v32 = *((_QWORD *)&v227 + 1);
      if ((SBYTE7(v228) & 0x80u) == 0)
        v33 = &v227;
      else
        v33 = (__int128 *)v227;
      if (v32 >= 8)
        v34 = 8;
      else
        v34 = v32;
      v35 = memcmp(v33, "iterator", v34) == 0;
      v36 = v32 == 8 && v35;
    }
    else
    {
      v36 = 0;
    }
    v29 = 1;
    if (v30 < 0)
    {
      operator delete((void *)v227);
      v29 = 1;
    }
    if (v36)
    {
LABEL_276:
      v193 = v29;
      v137 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = 1;
      v138 = *(_OWORD *)(a1 + 64);
      v227 = *(_OWORD *)(a1 + 48);
      v228 = v138;
      v219 = *(_OWORD *)(a1 + 16);
      v220 = *(_QWORD *)(a1 + 32);
      v139 = *(unsigned int *)(a1 + 2344);
      v140 = *(_WORD *)(a1 + 80);
      v141 = *(_WORD *)(a1 + 82);
      v142 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      if ((_DWORD)a3 == 6)
      {
        v143 = sub_22E83766C(a1, 0);
      }
      else
      {
        sub_22E885C30(a1, 32776);
        v143 = sub_22E860A60(a1);
      }
      v144 = v143;
      v145 = *(_QWORD *)(a1 + 88);
      if ((v144 & 1) == 0)
      {
        v144 = (unint64_t)sub_22EBBCB14(v145, (_DWORD *)(v144 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v199);
        v145 = *(_QWORD *)(a1 + 88);
      }
      v146 = (_OWORD *)(a1 + 48);
      v147 = (_OWORD *)(a1 + 16);
      v148 = sub_22EBCF22C(v145, v144 & 0xFFFFFFFFFFFFFFFELL, v216, 0, 0);
      if (v148 < 2)
      {
        v149 = *(_QWORD *)(a1 + 8);
        v150 = *(_QWORD *)(v149 + 2832);
        *(_QWORD *)(v149 + 2816) = *(_QWORD *)(v150 - 8);
        *(_QWORD *)(v149 + 2832) = v150 - 8;
        v151 = *(_QWORD *)(v149 + 1008);
        if (v151)
        {
          if (*(_QWORD *)(v151 + 224))
            v152 = 3;
          else
            v152 = 0;
        }
        else if (*(_QWORD *)(v149 + 1040))
        {
          v152 = 1;
        }
        else
        {
          v152 = 2;
        }
        *(_DWORD *)(v149 + 1048) = v152;
        v153 = v228;
        *v146 = v227;
        *(_OWORD *)(a1 + 64) = v153;
        *v147 = v219;
        *(_QWORD *)(a1 + 32) = v220;
        sub_22E80FADC(a1 + 2336, v139);
        *(_WORD *)(a1 + 80) = v140;
        *(_WORD *)(a1 + 82) = v141;
        *(_WORD *)(a1 + 84) = v142;
        LODWORD(v199) = 1441857;
        WORD2(v199) = 430;
        sub_22E885940(a1, (unsigned __int16 *)&v199, 3, 2);
      }
      else
      {
        if (*(_WORD *)(a1 + 32) == 61)
        {
          v13 = a5;
          *(_QWORD *)a5 = v148 & 0xFFFFFFFFFFFFFFFELL;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          *(_DWORD *)(a5 + 8) = *(_DWORD *)(a1 + 40);
          sub_22E80FADC(a1 + 2336, v139);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
LABEL_294:
          v190 = 0;
          v90 = 0;
          *(_BYTE *)(a1 + 945) = v137;
LABEL_295:
          v14 = 1;
          if ((a3 - 18) > 0x3B || ((1 << (a3 - 18)) & 0x801000010080001) == 0)
          {
            v192 = 0;
            v191 = v90;
            goto LABEL_313;
          }
          v159 = v90 ^ 1;
          if ((_DWORD)a3 != 66)
            v159 = 0;
          if ((v159 & 1) != 0)
          {
            v191 = 0;
LABEL_311:
            v192 = 0;
            goto LABEL_313;
          }
          goto LABEL_300;
        }
        v154 = *(_QWORD *)(a1 + 8);
        v155 = *(_QWORD *)(v154 + 2832);
        *(_QWORD *)(v154 + 2816) = *(_QWORD *)(v155 - 8);
        *(_QWORD *)(v154 + 2832) = v155 - 8;
        v156 = *(_QWORD *)(v154 + 1008);
        if (v156)
        {
          if (*(_QWORD *)(v156 + 224))
            v157 = 3;
          else
            v157 = 0;
        }
        else if (*(_QWORD *)(v154 + 1040))
        {
          v157 = 1;
        }
        else
        {
          v157 = 2;
        }
        *(_DWORD *)(v154 + 1048) = v157;
        v158 = v228;
        *v146 = v227;
        *(_OWORD *)(a1 + 64) = v158;
        *v147 = v219;
        *(_QWORD *)(a1 + 32) = v220;
        sub_22E80FADC(a1 + 2336, v139);
        *(_WORD *)(a1 + 80) = v140;
        *(_WORD *)(a1 + 82) = v141;
        *(_WORD *)(a1 + 84) = v142;
      }
      v13 = a5;
      goto LABEL_294;
    }
  }
LABEL_278:
  v190 = 0;
  v191 = 0;
  v193 = 0;
LABEL_302:
  v192 = 0;
LABEL_303:
  v14 = 1;
LABEL_313:
  v161 = (_DWORD)a3 == 44 || (_DWORD)a3 == 5;
  v162 = a3;
  v163 = v161;
  v194 = v162 == 30;
  if (v14)
    goto LABEL_323;
  while (1)
  {
    v164 = *(unsigned __int16 *)(a1 + 32);
    if (v164 == 22 || v164 == 61 || v164 == 430)
      break;
    do
    {
LABEL_323:
      sub_22E885C30(a1, 0x8000);
      v165 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = v163;
      v166 = *(_QWORD *)(a1 + 88);
      v167 = sub_22E83766C(a1, 0);
      v168 = v167;
      if ((v167 & 1) == 0)
        v168 = (unint64_t)sub_22EBBCB14(v166, (_DWORD *)(v167 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v227);
      if (v168 < 2)
      {
        LODWORD(v227) = 1441857;
        WORD2(v227) = 430;
        sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
      }
      else
      {
        v169 = *(unsigned int *)(a4 + 8);
        if (v169 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v169 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v169) = v168 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a4 + 8);
      }
      v170 = *(unsigned __int16 *)(a1 + 32);
      v171 = v170 == 65;
      if (v170 == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      }
      else if (v170 != 22 && v170 != 430 && (v196 != 44 && v196 != 5 || v170 != 61))
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1666, (uint64_t)&v227);
        if (v196 == 30)
          OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
        else
          OpenMPDirectiveName = (void *)llvm::omp::getOpenMPClauseName();
        sub_22E3B89A8((unsigned __int8 **)&v227, OpenMPDirectiveName, v173);
        v174 = (unsigned __int8 *)v227;
        if (!(_QWORD)v227)
        {
          v174 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v227 + 1));
          *(_QWORD *)&v227 = v174;
        }
        v174[*v174 + 1] = 2;
        v175 = v227;
        v176 = *(unsigned __int8 *)v227;
        *(_BYTE *)v227 = v176 + 1;
        *(_QWORD *)(v175 + 8 * v176 + 16) = v194;
        sub_22E3BB0B8((uint64_t)&v227);
      }
      *(_BYTE *)(a1 + 945) = v165;
      sub_22E885CF4(a1);
    }
    while (v171);
  }
  if (v192)
    sub_22E811E8C((uint64_t)&v201);
  if ((v196 == 44 || v196 == 5) && *(_WORD *)(a1 + 32) == 61)
  {
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v177 = *(_DWORD *)(a1 + 40);
    v178 = sub_22E83766C(a1, 0);
    v179 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v178 & 0xFFFFFFFFFFFFFFFELL, v177, 0, 0);
    if (v179 < 2)
    {
      LODWORD(v227) = 1441857;
      WORD2(v227) = 430;
      sub_22E885940(a1, (unsigned __int16 *)&v227, 3, 2);
    }
    else
    {
      *(_QWORD *)a5 = v179 & 0xFFFFFFFFFFFFFFFELL;
    }
    v180 = 1;
  }
  else
  {
    v180 = 0;
  }
  *(_DWORD *)(a5 + 12) = *(_DWORD *)(a1 + 16);
  if ((sub_22E811E8C((uint64_t)&v209) & 1) == 0)
    *(_DWORD *)(a5 + 12) = HIDWORD(v216);
  if (v193)
    sub_22E885CF4(a1);
  if (v196 == 18 || v196 == 46 || *(_DWORD *)(a4 + 8))
  {
    if (*(_QWORD *)a5)
      v181 = 0;
    else
      v181 = v180;
    v10 = v190 | v191 | v181;
  }
  else
  {
    v10 = 1;
  }
LABEL_366:
  *v201 = v202;
LABEL_367:
  *v209 = v210;
  return v10;
}

uint64_t sub_22E85B1CC(uint64_t a1)
{
  int *v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[32];
  _BYTE v23[32];
  unsigned __int8 *v24;
  uint64_t v25;

  v2 = (int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      if (*(_DWORD *)v6 == 10)
      {
        v13 = *(_QWORD *)(v6 + 16);
        v14 = *(unsigned __int16 *)(v6 + 24);
        if (v13 != 0x7973746567726174 || v14 != 25454)
        {
LABEL_18:
          sub_22E884578(a1, v2, 1665, (uint64_t)v23);
          sub_22E3BB0B8((uint64_t)v23);
          v3 = 1;
          goto LABEL_19;
        }
        if ((v5 & 1) != 0)
        {
          sub_22E884578(a1, v2, 1982, (uint64_t)&v24);
          v16 = v24;
          if (!v24)
          {
            v16 = (unsigned __int8 *)sub_22E3B8AAC(v25);
            v24 = v16;
          }
          v5 = 1;
          v16[*v16 + 1] = 1;
          v17 = v24;
          v18 = *v24;
          *v24 = v18 + 1;
          *(_QWORD *)&v17[8 * v18 + 16] = "targetsync";
          goto LABEL_26;
        }
        v5 = 1;
      }
      else
      {
        if (*(_DWORD *)v6 != 6)
          goto LABEL_18;
        v7 = *(_DWORD *)(v6 + 16);
        v8 = *(unsigned __int16 *)(v6 + 20);
        if (v7 != 1735549300 || v8 != 29797)
          goto LABEL_18;
        if ((v4 & 1) != 0)
        {
          sub_22E884578(a1, v2, 1982, (uint64_t)&v24);
          v10 = v24;
          if (!v24)
          {
            v10 = (unsigned __int8 *)sub_22E3B8AAC(v25);
            v24 = v10;
          }
          v4 = 1;
          v10[*v10 + 1] = 1;
          v11 = v24;
          v12 = *v24;
          *v24 = v12 + 1;
          *(_QWORD *)&v11[8 * v12 + 16] = "target";
LABEL_26:
          sub_22E3BB0B8((uint64_t)&v24);
          goto LABEL_19;
        }
        v4 = 1;
      }
LABEL_19:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
      if (*(_WORD *)(a1 + 32) == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
        if (*(_WORD *)(a1 + 32) == 5)
          continue;
      }
      if ((v3 & 1) == 0)
        goto LABEL_31;
LABEL_34:
      v19 = 0;
      v20 = 0;
      return v20 | v19;
    }
  }
  v4 = 0;
  v5 = 0;
LABEL_31:
  if ((v4 & 1) == 0 && (v5 & 1) == 0)
  {
    sub_22E884578(a1, v2, 1665, (uint64_t)v22);
    sub_22E3BB0B8((uint64_t)v22);
    goto LABEL_34;
  }
  v20 = (v4 & 1) == 0;
  if ((v4 & v5 & 1) != 0)
    v20 = 2;
  v19 = 0x100000000;
  return v20 | v19;
}

void sub_22E85B42C(uint64_t a1@<X8>)
{
  uint64_t v1;
  std::string::size_type size;
  const std::string::value_type *v3;
  char *v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  std::string __dst;
  void *__p[2];
  uint64_t v20;
  std::string v21;

  v1 = 0;
  memset(&v21, 0, sizeof(v21));
  do
  {
    size = *((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x7F;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v21.__r_.__value_.__l.__size_;
    if (size)
      v3 = "', '";
    else
      v3 = "'";
    v4 = (&off_24FAA4B10)[v1];
    if (!v4)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_18;
    }
    v5 = (std::string::size_type)(&off_24FAA4B10)[v1 + 1];
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (&off_24FAA4B10)[v1 + 1];
      p_dst = &__dst;
      if (!v5)
        goto LABEL_17;
    }
    memmove(p_dst, v4, v5);
LABEL_17:
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
LABEL_18:
    v9 = std::string::insert(&__dst, 0, v3);
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v20 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (v20 >= 0)
      v12 = HIBYTE(v20) & 0x7F;
    else
      v12 = (std::string::size_type)__p[1];
    std::string::append(&v21, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v1 += 3;
  }
  while (v1 != 21);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = *((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x7F;
  else
    v13 = v21.__r_.__value_.__l.__size_;
  v14 = sub_22E3B8BF4(a1, v13 + 1);
  if (*(char *)(v14 + 23) >= 0)
    v15 = (char *)v14;
  else
    v15 = *(char **)v14;
  if (v13)
  {
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v21;
    else
      v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
    memmove(v15, v16, v13);
  }
  *(_WORD *)&v15[v13] = 39;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

uint64_t sub_22E85B630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  char *OpenMPClauseName;
  uint64_t result;
  void *v11;
  char v12;
  char v13;
  BOOL v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  void *__p[2];
  char v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;

  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 40) = v7;
  sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
  v8 = *(_DWORD *)(a2 + 40);
  v25 = (_BYTE *)(a2 + 944);
  v26 = *(_BYTE *)(a2 + 944);
  *(_BYTE *)(a2 + 944) = 1;
  v27 = a2;
  v28 = 1441813;
  v29 = 430;
  v31 = 0;
  v32 = 0;
  v30 = sub_22E80F720;
  OpenMPClauseName = (char *)llvm::omp::getOpenMPClauseName();
  result = sub_22E88C650((uint64_t)&v25, 1510, OpenMPClauseName, 0);
  if ((_DWORD)result)
  {
    v12 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    if (*(unsigned __int16 *)(a2 + 32) - 399 > 0x28)
    {
      sub_22F1413E0(v6, *(uint64_t **)(*(_QWORD *)(a2 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a2 + 8) + 56), 0, (uint64_t)__p);
      v13 = v24;
      v11 = __p[1];
    }
    else
    {
      v13 = 0;
      v24 = 0;
      LOBYTE(__p[0]) = 0;
    }
    v14 = v13 < 0;
    if (v13 >= 0)
      v15 = (unsigned __int16 *)__p;
    else
      v15 = (unsigned __int16 *)__p[0];
    v16 = v13 & 0x7F;
    if (v14)
      v17 = (uint64_t)v11;
    else
      v17 = v16;
    v18 = sub_22F1DC2A4(a3, v15, v17, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 56));
    if (v24 < 0)
      operator delete(__p[0]);
    v19 = *(_DWORD *)(a2 + 16);
    v20 = *(unsigned __int16 *)(a2 + 32);
    v21 = v19;
    if (v20 != 22)
    {
      v21 = *(_DWORD *)(a2 + 16);
      if (v20 != 65)
      {
        v21 = *(_DWORD *)(a2 + 16);
        if (v20 != 430)
        {
          sub_22E80F0F0(a2, 0);
          v21 = *(_DWORD *)(a2 + 16);
        }
      }
    }
    result = sub_22E811E8C((uint64_t)&v25);
    v22 = HIDWORD(v32);
    if ((_DWORD)result)
      v22 = v21;
    *(_DWORD *)a1 = v18;
    *(_DWORD *)(a1 + 4) = v7;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v22;
    v12 = 1;
  }
  *(_BYTE *)(a1 + 20) = v12;
  *v25 = v26;
  return result;
}

uint64_t sub_22E85B7F0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  uint64_t result;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  void *__p[2];
  char v25;
  unsigned __int8 *v26[4];

  if (a4 == a3)
  {
    sub_22E80F0F0(a1, 0);
    return sub_22F2EB66C(a1);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v11 + 312) = a6;
    *(_DWORD *)(v11 + 316) = 1496;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v22, v11);
    v12 = (unsigned __int8 *)v22[0];
    if (!v22[0])
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v22[1]);
      v22[0] = v12;
    }
    v12[*v12 + 1] = 2;
    v13 = v22[0];
    v14 = *(unsigned __int8 *)v22[0];
    *(_BYTE *)v22[0] = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 16) = a3 != 25;
    sub_22E3BB0B8((uint64_t)v22);
    v15 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v15 + 312) = a5;
    *(_DWORD *)(v15 + 316) = 104;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v26, v15);
    v21 = 1283;
    v20[0] = "'#pragma omp ";
    v20[2] = llvm::omp::getOpenMPDirectiveName();
    v20[3] = v16;
    v22[0] = v20;
    v22[2] = "'";
    v23 = 770;
    llvm::Twine::str((llvm::Twine *)v22);
    if (v25 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if (v25 >= 0)
      v18 = v25 & 0x7F;
    else
      v18 = (size_t)__p[1];
    sub_22E3B89A8(v26, v17, v18);
    if (v25 < 0)
      operator delete(__p[0]);
    result = sub_22E3BB0B8((uint64_t)v26);
    if (a7)
    {
      LOWORD(v22[0]) = 430;
      return sub_22E885940(a1, (unsigned __int16 *)v22, 1, 2);
    }
  }
  return result;
}

uint64_t sub_22E85B9CC(std::string::size_type a1, int *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  llvm *v44;
  llvm *v45;
  uint64_t v46;
  void *v47;
  size_t v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  _DWORD *v57;
  size_t v58;
  unsigned int v59;
  _BOOL4 v60;
  int v61;
  _BOOL4 v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  _QWORD *v74;
  char v75;
  int v76;
  llvm *v77;
  int v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  __int128 v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  _DWORD *v99;
  char *v100;
  unsigned int v101;
  char *v102;
  uint64_t v103;
  const void *v104;
  int v105;
  int v106;
  int v107;
  char *v108;
  uint64_t v109;
  void *OpenMPDirectiveName;
  size_t v111;
  std::string *v112;
  size_t size;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unsigned int *v123;
  size_t v124;
  const void *v125;
  unsigned int v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::string *v131;
  std::string *v132;
  std::string::size_type v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  llvm *v142;
  llvm *v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  void *v153;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  uint64_t v158;
  llvm *v159;
  llvm *v160;
  uint64_t v161;
  llvm *v162;
  int v163;
  uint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  void *v171;
  size_t v172;
  int v173;
  int v174;
  char v175;
  uint64_t v176;
  int *v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unsigned __int8 *v189;
  _QWORD *v190;
  uint64_t v191;
  llvm *v192;
  char v193;
  uint64_t v194;
  llvm *v195;
  int v196;
  llvm *v197;
  unint64_t v198;
  uint64_t v199;
  llvm *v200;
  unint64_t *v201;
  llvm *v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int *v211;
  size_t v212;
  _DWORD *v213;
  unsigned int v214;
  int v215;
  llvm *v216;
  const char *v217;
  llvm *v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  int v222;
  int v223;
  int v224;
  std::string *p_p;
  uint64_t v226;
  int v227;
  int v228;
  void *v229;
  size_t v230;
  llvm *v231;
  llvm *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  _DWORD *v238;
  uint64_t v239;
  uint64_t v241;
  uint64_t *v242;
  int v243;
  int v244;
  void *v245;
  size_t v246;
  void *OpenMPClauseName;
  size_t v248;
  unsigned __int8 *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  BOOL v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  int v266;
  char v267;
  uint64_t i;
  char v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v276;
  std::string *v278;
  void (**v279)(std::string *);
  int v281;
  uint64_t OpenMPClauseKind;
  unsigned int *v283;
  uint64_t v284;
  int v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  llvm *v291;
  llvm *v292;
  uint64_t v293;
  unsigned int v294;
  int v295;
  int v296;
  char v297;
  char *v298;
  char v299;
  _DWORD *v300;
  int v301;
  int v302;
  unint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  char v309;
  std::string *v310;
  std::string::size_type *p_size;
  _QWORD *v312;
  BOOL v313;
  uint64_t v314;
  unsigned int v315;
  llvm *v316;
  llvm *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  size_t v321;
  void *v322;
  size_t v323;
  llvm *v324;
  llvm *v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  int v335;
  int v336;
  int v337;
  uint64_t v338;
  __int16 v339;
  __int16 v340;
  unsigned int *v342;
  char v343;
  int v344[2];
  uint64_t v345;
  unsigned int v346;
  char v347;
  char v348;
  unsigned int v349;
  __int16 v350;
  __int16 v351;
  __int16 v352;
  _BYTE v353[32];
  _BYTE v354[36];
  int v355;
  _BYTE __dst[32];
  uint64_t (*v357)(uint64_t);
  uint64_t v358;
  std::string::size_type v359;
  int v360;
  llvm *v361[2];
  __int128 v362;
  _BYTE v363[32];
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  _QWORD v368[4];
  __int128 v369;
  __int128 v370;
  __int128 v371;
  int v372;
  int v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD v376[3];
  _QWORD v377[41];
  char v378;
  void *v379;
  uint64_t v380;
  _BYTE v381[32];
  void *v382;
  uint64_t v383;
  _BYTE v384[16];
  void *v385;
  uint64_t v386;
  _BYTE v387[32];
  void *v388;
  uint64_t v389;
  _BYTE v390[24];
  void *__src;
  uint64_t v392;
  std::string::size_type v393;
  int v394;
  __int16 v395;
  uint64_t (*v396)(uint64_t);
  uint64_t v397;
  uint64_t v398;
  __int128 __p;
  _BYTE v400[48];
  std::string v401;
  std::string *v402;
  uint64_t v403;

  v9 = a2;
  v403 = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned __int8 *)(a1 + 946);
  *(_BYTE *)(a1 + 946) = 1;
  v12 = *(unsigned __int16 *)(a1 + 80);
  v13 = *(unsigned __int16 *)(a1 + 82);
  v352 = *(_WORD *)(a1 + 84);
  if ((_DWORD)a4)
  {
    v349 = *(unsigned __int16 *)(a1 + 82);
    v15 = *(unsigned __int16 *)(a1 + 80);
    v346 = v11;
    v16 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&__dst[16] = v16;
    v17 = (_OWORD *)(a1 + 16);
    v401 = *(std::string *)(a1 + 16);
    v12 = *(unsigned int *)(a1 + 2344);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    v18 = *(_DWORD *)(a1 + 20);
    v19 = *(_DWORD *)(a1 + 16);
    if (!v18)
      v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = v18;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v20 = sub_22E85EC88(a1);
    if ((v20 & 0xFFFFFFFE) == 0xA)
    {
      v21 = *(_QWORD *)(a1 + 8);
      v22 = *(_QWORD *)(v21 + 2832);
      *(_QWORD *)(v21 + 2816) = *(_QWORD *)(v22 - 8);
      *(_QWORD *)(v21 + 2832) = v22 - 8;
      v23 = *(_QWORD *)(v21 + 1008);
      if (v23)
      {
        if (*(_QWORD *)(v23 + 224))
          v24 = 3;
        else
          v24 = 0;
      }
      else if (*(_QWORD *)(v21 + 1040))
      {
        v24 = 1;
      }
      else
      {
        v24 = 2;
      }
      *(_DWORD *)(v21 + 1048) = v24;
      v25 = *(_OWORD *)&__dst[16];
      *(_OWORD *)(a1 + 48) = *(_OWORD *)__dst;
      *(_OWORD *)(a1 + 64) = v25;
      *v17 = *(_OWORD *)&v401.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)&v401.__r_.__value_.__l + 2);
      sub_22E80FADC(a1 + 2336, v12);
      LOWORD(v12) = v15;
      *(_WORD *)(a1 + 80) = v15;
      *(_WORD *)(a1 + 82) = v349;
      *(_WORD *)(a1 + 84) = v352;
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x400000000;
      v26 = 1;
      v27 = sub_22E4EF088((uint64_t)v361, a1 + 16, 1);
      v28 = (char *)v361[0] + 24 * LODWORD(v361[1]);
      v29 = *(_OWORD *)v27;
      *((_QWORD *)v28 + 2) = *(_QWORD *)(v27 + 16);
      *(_OWORD *)v28 = v29;
      ++LODWORD(v361[1]);
      while (*(_WORD *)(a1 + 32) != 1)
      {
        sub_22E80F0F0(a1, 0);
        v30 = *(unsigned __int16 *)(a1 + 32);
        v31 = v30 & 0xFFFE;
        if (v30 == 430)
          v32 = -1;
        else
          v32 = 0;
        if (v31 == 428)
          v32 = 1;
        v26 += v32;
        v33 = sub_22E4EF088((uint64_t)v361, a1 + 16, 1);
        v34 = (char *)v361[0] + 24 * LODWORD(v361[1]);
        v35 = *(_OWORD *)v33;
        *((_QWORD *)v34 + 2) = *(_QWORD *)(v33 + 16);
        *(_OWORD *)v34 = v35;
        ++LODWORD(v361[1]);
        if (!v26)
        {
          sub_22E80F0F0(a1, 0);
          break;
        }
      }
      v36 = operator new();
      v37 = *a2;
      *(_QWORD *)v36 = &off_24FAA4998;
      *(_QWORD *)(v36 + 8) = a1;
      *(_DWORD *)(v36 + 16) = v37;
      *(_QWORD *)(v36 + 24) = v36 + 40;
      *(_QWORD *)(v36 + 32) = 0x400000000;
      sub_22E861244(v36 + 24, (uint64_t)v361);
      v38 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v38 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v38 & 0x1FF));
      v40 = *(_DWORD *)(v39 + 24);
      if (v40 >= *(_DWORD *)(v39 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v40 = *(_DWORD *)(v39 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8 * v40) = v36;
      ++*(_DWORD *)(v39 + 24);
      LOBYTE(v11) = v346;
      if ((__int128 *)v361[0] != &v362)
        free(v361[0]);
      v41 = 0;
      LOWORD(v13) = v349;
      goto LABEL_462;
    }
    v43 = v20;
    sub_22E80FADC(a1 + 2336, v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
    v11 = v346;
    v12 = v15;
    v9 = a2;
    v13 = v349;
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 16);
    v42 = *(_DWORD *)(a1 + 20);
    if (!v42)
      v42 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = v42;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v43 = sub_22E85EC88(a1);
  }
  switch((int)v43)
  {
    case 0:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x400000000;
      v359 = a1;
      v360 = 0;
      v361[0] = (llvm *)sub_22E861844;
      v361[1] = (llvm *)__dst;
      if ((sub_22F2EBF34(a1, 0, (uint64_t)v361, 1) & 1) != 0)
      {
        v202 = *(llvm **)__dst;
        if (*(_BYTE **)__dst == &__dst[16])
          goto LABEL_459;
        goto LABEL_311;
      }
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
      v401.__r_.__value_.__l.__size_ = 0x100000000;
      if (*(_WORD *)(a1 + 32) == 430)
        goto LABEL_383;
      v348 = v11;
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x5F00000000;
      sub_22E8618E0((char **)v361);
      v281 = *(unsigned __int16 *)(a1 + 32);
      if (v281 == 430)
        goto LABEL_542;
      while (2)
      {
        if ((v281 - 399) >= 0x29)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
          OpenMPClauseKind = llvm::omp::getOpenMPClauseKind();
          if ((v400[7] & 0x80000000) != 0)
            operator delete((void *)__p);
        }
        else
        {
          OpenMPClauseKind = 85;
        }
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12288) + 21440) = OpenMPClauseKind;
        v283 = sub_22E855078(a1, 0, OpenMPClauseKind, (*((_QWORD *)v361[0] + OpenMPClauseKind) & 2) == 0);
        LODWORD(__p) = 327745;
        WORD2(__p) = 430;
        sub_22E885940(a1, (unsigned __int16 *)&__p, 3, 2);
        *((_QWORD *)v361[0] + OpenMPClauseKind) |= 2uLL;
        if (v283)
        {
          v284 = LODWORD(v401.__r_.__value_.__r.__words[1]);
          if (LODWORD(v401.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v401.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v284 = LODWORD(v401.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(v401.__r_.__value_.__r.__words[0] + 8 * v284) = v283;
          ++LODWORD(v401.__r_.__value_.__r.__words[1]);
        }
        v285 = *(unsigned __int16 *)(a1 + 32);
        if (v285 == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        else if (v285 == 430)
        {
          v312 = *(_QWORD **)(a1 + 88);
          *(_DWORD *)(v312[1536] + 21440) = 85;
          sub_22EB4E2D8(v312);
LABEL_542:
          sub_22F2EB66C(a1);
          if ((__int128 *)v361[0] != &v362)
            free(v361[0]);
          LOBYTE(v11) = v348;
LABEL_383:
          v244 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v244 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v244;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v41 = sub_22EC83A4C(*(_QWORD **)(a1 + 88), v19, *(uint64_t **)__dst, *(unsigned int *)&__dst[8], v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), 0);
          if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
            free(v401.__r_.__value_.__l.__data_);
          v162 = *(llvm **)__dst;
          if (*(_BYTE **)__dst != &__dst[16])
            goto LABEL_214;
          goto LABEL_462;
        }
        v286 = *(_QWORD **)(a1 + 88);
        *(_DWORD *)(v286[1536] + 21440) = 85;
        sub_22EB4E2D8(v286);
        v281 = *(unsigned __int16 *)(a1 + 32);
        if (v281 == 430)
          goto LABEL_542;
        continue;
      }
    case 1:
    case 4:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v76 = *(_DWORD *)(a1 + 40);
      v77 = (llvm *)&v362;
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x400000000;
      v78 = *(unsigned __int16 *)(a1 + 32);
      if (v78 == 430)
      {
        v79 = 0;
        v80 = 0;
LABEL_182:
        sub_22EC84788(*(_QWORD *)(a1 + 88), v76, v43, (uint64_t)v77, v79, v80 & 1);
        sub_22E3B9848((char **)v361);
        goto LABEL_459;
      }
      v340 = v12;
      v343 = 0;
      v333 = v76;
      v350 = v13;
      v334 = v43;
LABEL_98:
      v92 = *(_DWORD *)(a1 + 16);
      if ((v78 - 5) > 1)
      {
        v97 = 0;
        v105 = -1;
        goto LABEL_117;
      }
      v93 = v11;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = *(_QWORD *)(a1 + 24);
      v98 = *(unsigned int **)(v97 + 16);
      v101 = *v98;
      v99 = v98 + 4;
      v100 = (char *)v101;
      while (1)
      {
        v102 = (&off_24FAA4B10)[v94 + 1];
        v103 = v96 & 0xFF00000000;
        if (LOBYTE((&off_24FAA4B10)[v94 + 2]))
        {
          if (v103 || v100 < v102)
            goto LABEL_111;
          if (!v102)
          {
LABEL_110:
            v96 = v95 | 0x100000000;
            goto LABEL_111;
          }
          v104 = v99;
        }
        else
        {
          if (v103 || v100 != v102)
            goto LABEL_111;
          if (!v100)
            goto LABEL_110;
          v104 = v99;
          v102 = v100;
        }
        if (!memcmp(v104, (&off_24FAA4B10)[v94], (size_t)v102))
          goto LABEL_110;
LABEL_111:
        ++v95;
        v94 += 3;
        if (v94 == 21)
        {
          if ((v96 & 0xFF00000000) != 0)
            v105 = v96;
          else
            v105 = -1;
          v11 = v93;
          LOWORD(v13) = v350;
          v43 = v334;
LABEL_117:
          sub_22E80F0F0(a1, 0);
          v106 = *(unsigned __int16 *)(a1 + 32);
          if (v105 != -1)
          {
            if (*((_BYTE *)&off_24FAA4B10 + 24 * v105 + 17)
              || (v107 = v105, *((_BYTE *)&off_24FAA4B10 + 24 * v105 + 18)))
            {
              v108 = (char *)(*(_QWORD *)(v97 + 16) + 16);
              *(_QWORD *)__dst = a1 + 944;
              __dst[8] = *(_BYTE *)(a1 + 944);
              *(_BYTE *)(a1 + 944) = 1;
              *(_QWORD *)&__dst[16] = a1;
              *(_DWORD *)&__dst[24] = 1441813;
              *(_WORD *)&__dst[28] = 430;
              v358 = 0;
              v359 = 0;
              v357 = sub_22E80F720;
              if ((sub_22E88C650((uint64_t)__dst, 1510, v108, 0) & 1) == 0)
                sub_22F2F18E0((uint64_t)__dst);
              **(_BYTE **)__dst = __dst[8];
              goto LABEL_138;
            }
            if (v106 == 21)
            {
              v118 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v118 + 312) = *(_DWORD *)(a1 + 16);
              *(_DWORD *)(v118 + 316) = 1984;
              if (*(char *)(v118 + 311) < 0)
              {
                **(_BYTE **)(v118 + 288) = 0;
                *(_QWORD *)(v118 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v118 + 288) = 0;
                *(_BYTE *)(v118 + 311) = 0;
              }
              sub_22E78E558((uint64_t)__dst, v118);
              v119 = *(unsigned __int8 **)__dst;
              if (!*(_QWORD *)__dst)
              {
                v119 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
                *(_QWORD *)__dst = v119;
              }
              v119[*v119 + 1] = 5;
              v120 = *(_QWORD *)__dst;
              v121 = **(_BYTE **)__dst;
              **(_BYTE **)__dst = v121 + 1;
              *(_QWORD *)(v120 + 8 * v121 + 16) = v97;
              sub_22E3BB0B8((uint64_t)__dst);
              v122 = (char *)(*(_QWORD *)(v97 + 16) + 16);
              *(_QWORD *)__dst = a1 + 944;
              __dst[8] = *(_BYTE *)(a1 + 944);
              *(_BYTE *)(a1 + 944) = 1;
              *(_QWORD *)&__dst[16] = a1;
              *(_DWORD *)&__dst[24] = 1441813;
              *(_WORD *)&__dst[28] = 430;
              v358 = 0;
              v359 = 0;
              v357 = sub_22E80F720;
              if ((sub_22E88C650((uint64_t)__dst, 1510, v122, 0) & 1) == 0)
              {
                sub_22F2F18E0((uint64_t)__dst);
                if (HIDWORD(v359))
                {
                  v137 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v137 + 312) = HIDWORD(v359);
                  *(_DWORD *)(v137 + 316) = 1874;
                  if (*(char *)(v137 + 311) < 0)
                  {
                    **(_BYTE **)(v137 + 288) = 0;
                    *(_QWORD *)(v137 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v137 + 288) = 0;
                    *(_BYTE *)(v137 + 311) = 0;
                  }
                  v138 = sub_22E78E558((uint64_t)&v401, v137);
                  sub_22E3BB0B8(v138);
                }
              }
              **(_BYTE **)__dst = __dst[8];
            }
            v123 = *(unsigned int **)(v97 + 16);
            v126 = *v123;
            v125 = v123 + 4;
            v124 = v126;
            if (v126 >= 0x17uLL)
            {
              if ((v124 | 7) == 0x17)
                v128 = (v124 & 0xFFFFFFF8) + 8;
              else
                v128 = v124 | 7;
              v127 = operator new(v128 + 1);
              *(_QWORD *)&__dst[8] = v124;
              *(_QWORD *)&__dst[16] = v128 - 0x7FFFFFFFFFFFFFFFLL;
              *(_QWORD *)__dst = v127;
            }
            else
            {
              __dst[23] = v124;
              v127 = __dst;
              if (!v124)
              {
LABEL_157:
                v127[v124] = 0;
                if (LOBYTE((&off_24FAA4B10)[3 * v107 + 2]))
                {
                  v129 = v43;
                  v130 = v11;
                  v131 = std::string::basic_string(&v401, (const std::string *)__dst, (std::string::size_type)(&off_24FAA4B10)[3 * v107 + 1], 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
                  v132 = std::string::insert(v131, 0, "ompx_");
                  v133 = v132->__r_.__value_.__r.__words[0];
                  *(_QWORD *)&__p = v132->__r_.__value_.__l.__size_;
                  *(_QWORD *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1]
                                                                            + 7);
                  v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
                  v132->__r_.__value_.__l.__size_ = 0;
                  v132->__r_.__value_.__r.__words[2] = 0;
                  v132->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(v12) = v340;
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                  *(_QWORD *)__dst = v133;
                  *(_QWORD *)&__dst[8] = __p;
                  *(_QWORD *)&__dst[15] = *(_QWORD *)((char *)&__p + 7);
                  __dst[23] = v134;
                  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v401.__r_.__value_.__l.__data_);
                  v11 = v130;
                  v43 = v129;
                }
                else
                {
                  std::operator+<char>();
                  LOWORD(v12) = v340;
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                  *(std::string *)__dst = v401;
                }
                sub_22E5EFE94((uint64_t)v361, (unint64_t)__dst);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                goto LABEL_168;
              }
            }
            memmove(v127, v125, v124);
            goto LABEL_157;
          }
          v109 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v109 + 312) = v92;
          *(_DWORD *)(v109 + 316) = 1983;
          if (*(char *)(v109 + 311) < 0)
          {
            **(_BYTE **)(v109 + 288) = 0;
            *(_QWORD *)(v109 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v109 + 288) = 0;
            *(_BYTE *)(v109 + 311) = 0;
          }
          sub_22E78E558((uint64_t)__dst, v109);
          OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)__dst, OpenMPDirectiveName, v111);
          sub_22E85B42C((uint64_t)&v401);
          if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &v401;
          else
            v112 = (std::string *)v401.__r_.__value_.__r.__words[0];
          if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v401.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v401.__r_.__value_.__l.__size_;
          sub_22E3B89A8((unsigned __int8 **)__dst, v112, size);
          v114 = *(unsigned __int8 **)__dst;
          if (!*(_QWORD *)__dst)
          {
            v114 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
            *(_QWORD *)__dst = v114;
          }
          v114[*v114 + 1] = 2;
          v115 = *(_QWORD *)__dst;
          v116 = **(_BYTE **)__dst;
          **(_BYTE **)__dst = v116 + 1;
          *(_QWORD *)(v115 + 8 * v116 + 16) = v106 == 21;
          if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v401.__r_.__value_.__l.__data_);
          sub_22E3BB0B8((uint64_t)__dst);
          if (v106 == 21)
          {
            if (v97)
              v117 = (char *)(*(_QWORD *)(v97 + 16) + 16);
            else
              v117 = "";
            *(_QWORD *)__dst = a1 + 944;
            __dst[8] = *(_BYTE *)(a1 + 944);
            *(_BYTE *)(a1 + 944) = 1;
            *(_QWORD *)&__dst[16] = a1;
            *(_DWORD *)&__dst[24] = 1441813;
            *(_WORD *)&__dst[28] = 430;
            v358 = 0;
            v359 = 0;
            v357 = sub_22E80F720;
            LOWORD(v12) = v340;
            if ((sub_22E88C650((uint64_t)__dst, 1510, v117, 0) & 1) == 0)
            {
              sub_22F2F18E0((uint64_t)__dst);
              if (HIDWORD(v359))
              {
                v135 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v135 + 312) = HIDWORD(v359);
                *(_DWORD *)(v135 + 316) = 1874;
                if (*(char *)(v135 + 311) < 0)
                {
                  **(_BYTE **)(v135 + 288) = 0;
                  *(_QWORD *)(v135 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v135 + 288) = 0;
                  *(_BYTE *)(v135 + 311) = 0;
                }
                v136 = sub_22E78E558((uint64_t)&v401, v135);
                sub_22E3BB0B8(v136);
              }
            }
            **(_BYTE **)__dst = __dst[8];
            v343 = 1;
          }
          else
          {
LABEL_138:
            v343 = 1;
            LOWORD(v12) = v340;
          }
LABEL_168:
          v78 = *(unsigned __int16 *)(a1 + 32);
          if (v78 == 430)
          {
            v77 = v361[0];
            v79 = LODWORD(v361[1]);
            v76 = v333;
            v80 = v343;
            goto LABEL_182;
          }
          goto LABEL_98;
        }
      }
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 19:
    case 20:
    case 21:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 88:
    case 90:
    case 92:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
      sub_22E884578(a1, (int *)(a1 + 16), 1678, (uint64_t)v361);
      v44 = v361[0];
      if (!v361[0])
      {
        v44 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
        v361[0] = v44;
      }
      *((_BYTE *)v44 + *(unsigned __int8 *)v44 + 1) = 2;
      v45 = v361[0];
      v46 = *(unsigned __int8 *)v361[0];
      *(_BYTE *)v361[0] = v46 + 1;
      *((_QWORD *)v45 + v46 + 2) = 1;
      goto LABEL_30;
    case 5:
    case 13:
      v49 = sub_22E80F0F0(a1, 0);
      v50 = *(unsigned __int16 *)(a1 + 32);
      v361[1] = 0;
      v361[0] = 0;
      LODWORD(v362) = 0;
      DWORD2(v362) = 2;
      HIDWORD(v362) = v43;
      v363[0] = 0;
      v363[8] = 0;
      *(_DWORD *)&v363[16] = v49;
      if (v50 == 430)
        goto LABEL_276;
      v336 = 0;
      v347 = 0;
      v51 = 0;
      v342 = (unsigned int *)(a1 + 16);
      while (2)
      {
        v52 = v13;
        v53 = *(unsigned __int16 *)(a1 + 32);
        if (v53 == 430)
          goto LABEL_234;
        LODWORD(v385) = 0;
        if (v53 != 5)
        {
          if (HIDWORD(v362) != 13)
          {
            v63 = v53;
            goto LABEL_42;
          }
          v68 = 0;
LABEL_85:
          *(_QWORD *)__dst = a1;
          *(_DWORD *)&__dst[8] = v68;
          *(_QWORD *)&__dst[16] = v361;
          *(_QWORD *)&__p = sub_22E86173C;
          *((_QWORD *)&__p + 1) = __dst;
          if (sub_22F2EBF34(a1, 13, (uint64_t)&__p, 1))
          {
LABEL_234:
            LOWORD(v13) = v52;
            goto LABEL_262;
          }
          v63 = *(unsigned __int16 *)(a1 + 32);
LABEL_42:
          if (v63 == 21)
          {
            v174 = v43;
            v175 = v11;
            v176 = a1;
            v177 = (int *)(a1 + 16);
            v178 = 1649;
          }
          else
          {
            if (v53 == 5 || v63 == 430)
            {
              v13 = v52;
              if (v63 == 65)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v342);
              }
              v64 = 0;
              goto LABEL_70;
            }
            v174 = v43;
            v175 = v11;
            v176 = a1;
            v177 = (int *)(a1 + 16);
            v178 = 1656;
          }
          sub_22E884578(v176, v177, v178, (uint64_t)__dst);
          LOWORD(v13) = v52;
          sub_22E3BB0B8((uint64_t)__dst);
          LOBYTE(v11) = v175;
          LODWORD(v43) = v174;
          goto LABEL_262;
        }
        v54 = v43;
        v55 = v11;
        v56 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 16);
        v59 = *v56;
        v57 = v56 + 4;
        v58 = v59;
        v43 = v12;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) < 0x32u)
        {
          v60 = 0;
        }
        else
        {
          v60 = llvm::omp::getOpenMPClauseKind() == 23;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) >= 0x33u)
          {
            v61 = llvm::omp::getOpenMPClauseKind();
            v62 = v61 == 40;
            if (v363[8] && v61 == 40)
            {
              sub_22E884578(a1, (int *)v342, 49, (uint64_t)__dst);
              v245 = (void *)llvm::omp::getOpenMPDirectiveName();
              sub_22E3B89A8((unsigned __int8 **)__dst, v245, v246);
              OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
              sub_22E3B89A8((unsigned __int8 **)__dst, OpenMPClauseName, v248);
              v249 = *(unsigned __int8 **)__dst;
              if (!*(_QWORD *)__dst)
              {
                v249 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
                *(_QWORD *)__dst = v249;
              }
              v249[*v249 + 1] = 2;
              v250 = *(_QWORD *)__dst;
              v251 = **(_BYTE **)__dst;
              **(_BYTE **)__dst = v251 + 1;
              *(_QWORD *)(v250 + 8 * v251 + 16) = 0;
LABEL_260:
              sub_22E3BB0B8((uint64_t)__dst);
              LOBYTE(v11) = v55;
              LOWORD(v12) = v43;
              LOWORD(v13) = v52;
              LODWORD(v43) = v54;
LABEL_261:
              v51 = 1;
LABEL_262:
              if (v363[8])
                v185 = DWORD2(v362) == 2;
              else
                v185 = 1;
              if (!v185)
              {
                v186 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v186 + 312) = v336;
                *(_DWORD *)(v186 + 316) = 1652;
                if (*(char *)(v186 + 311) < 0)
                {
                  **(_BYTE **)(v186 + 288) = 0;
                  *(_QWORD *)(v186 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v186 + 288) = 0;
                  *(_BYTE *)(v186 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&__p, v186);
                sub_22E3BB0B8((uint64_t)&__p);
              }
              if (!((HIDWORD(v362) != 13 || (v51 & 1) == 0) | v347 & 1))
              {
                v187 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v187 + 312) = *(_DWORD *)&v363[16];
                *(_DWORD *)(v187 + 316) = 1653;
                if (*(char *)(v187 + 311) < 0)
                {
                  **(_BYTE **)(v187 + 288) = 0;
                  *(_QWORD *)(v187 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v187 + 288) = 0;
                  *(_BYTE *)(v187 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&__src, v187);
                v188 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
                v189 = (unsigned __int8 *)__src;
                if (!__src)
                {
                  v189 = (unsigned __int8 *)sub_22E3B8AAC(v392);
                  __src = v189;
                }
                v189[*v189 + 1] = 2;
                v190 = __src;
                v191 = *(unsigned __int8 *)__src;
                *(_BYTE *)__src = v191 + 1;
                v190[v191 + 2] = v188 > 0x32;
                sub_22E3BB0B8((uint64_t)&__src);
              }
              LOWORD(__src) = 430;
              sub_22E885940(a1, (unsigned __int16 *)&__src, 1, 2);
              if ((_DWORD)v43 == 5)
              {
LABEL_276:
                sub_22E80F0F0(a1, 0);
LABEL_277:
                sub_22ECB0878(*(_QWORD *)(a1 + 88), (unint64_t)v361);
                v41 = 0;
LABEL_278:
                llvm::deallocate_buffer(v361[0], (void *)(16 * v362));
                goto LABEL_462;
              }
              if (LODWORD(v361[1]))
              {
                sub_22E80F0F0(a1, 0);
              }
              else
              {
                v196 = v363[8];
                sub_22E80F0F0(a1, 0);
                if (v196)
                  goto LABEL_277;
              }
              sub_22ECB0994(*(_QWORD **)(a1 + 88), (uint64_t)v361);
              *(_QWORD *)__dst = &__dst[16];
              *(_QWORD *)&__dst[8] = 0x400000000;
              v192 = (llvm *)((char *)v361[0] + 16 * v362);
              v193 = v11;
              if (LODWORD(v361[1]))
              {
                if ((_DWORD)v362)
                {
                  v194 = 16 * v362;
                  v195 = v361[0];
                  while ((*(_QWORD *)v195 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v195 = (llvm *)((char *)v195 + 16);
                    v194 -= 16;
                    if (!v194)
                      goto LABEL_286;
                  }
                }
                else
                {
                  v195 = v361[0];
                }
              }
              else
              {
LABEL_286:
                v195 = (llvm *)((char *)v361[0] + 16 * v362);
              }
              v197 = (llvm *)((char *)v361[0] + 16 * v362);
              if (v195 == v197)
              {
                v198 = 0;
                v201 = (unint64_t *)&__dst[16];
              }
              else
              {
                LODWORD(v198) = 0;
                do
                {
                  v199 = *(_QWORD *)v195;
                  if (v198 >= *(_DWORD *)&__dst[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    LODWORD(v198) = *(_DWORD *)&__dst[8];
                  }
                  *(_QWORD *)(*(_QWORD *)__dst + 8 * v198) = v199;
                  v198 = ++*(_DWORD *)&__dst[8];
                  v200 = (llvm *)((char *)v195 + 16);
                  v195 = v192;
                  if (v200 != v192)
                  {
                    v195 = v200;
                    while ((*(_QWORD *)v195 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v195 = (llvm *)((char *)v195 + 16);
                      if (v195 == v192)
                      {
                        v195 = v192;
                        break;
                      }
                    }
                  }
                }
                while (v195 != v197);
                v201 = *(unint64_t **)__dst;
              }
              v41 = sub_22EA2D7B4(*(_QWORD **)(a1 + 88), v201, v198);
              LOBYTE(v11) = v193;
              if (*(_BYTE **)__dst != &__dst[16])
                free(*(void **)__dst);
              goto LABEL_278;
            }
LABEL_50:
            v65 = sub_22EF96BD0(v57, v58, (int *)&v385);
            if (v60 || v62 || HIDWORD(v362) != 5)
            {
              if (((v60 | v65 | v62) & 1) != 0)
              {
                v347 |= v65 | v62;
                if (v62)
                {
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v342);
                  v12 = v43;
                  v13 = v52;
                  if (*(_WORD *)(a1 + 32) == 21)
                  {
                    v69 = *(_DWORD *)(a1 + 40);
                    v70 = (char *)llvm::omp::getOpenMPClauseName();
                    v72 = sub_22F2EBCF4(a1, v70, v71, &__src, 0);
                    v43 = v54;
                    if ((v72 & 1) != 0
                      || (v73 = (unsigned __int8 *)(v72 & 0xFFFFFFFFFFFFFFFELL),
                          (*(_DWORD *)(v72 & 0xFFFFFFFFFFFFFFFELL) & 0x1E000) != 0)
                      || (sub_22EB52F30(*(_QWORD *)(a1 + 88), v69, v73, 0) & 1) != 0)
                    {
                      LOBYTE(v11) = v55;
                      goto LABEL_261;
                    }
                    DWORD2(__p) = 1;
                    *(_QWORD *)&__p = 0;
                    BYTE12(__p) = 0;
                    v74 = *(_QWORD **)(a1 + 88);
                    __dst[8] = 0;
                    *(_QWORD *)__dst = off_24FAB82C8;
                    v75 = sub_22EB4CB24(v74, (uint64_t)v73, (uint64_t)&__p, __dst, 1);
                    if ((v75 & 1) == 0)
                    {
                      *(_QWORD *)v363 = v73;
                      if (!v363[8])
                        v363[8] = 1;
                    }
                    if (DWORD2(__p) >= 0x41 && (_QWORD)__p)
                      MEMORY[0x2348A0E84](__p, 0x1000C8000313F17);
                    v11 = v55;
                    if ((v75 & 1) != 0)
                      goto LABEL_261;
                  }
                  else
                  {
                    v11 = v55;
                    *(_QWORD *)v363 = 0;
                    v43 = v54;
                    if (!v363[8])
                      v363[8] = 1;
                  }
                  v51 = 1;
                  v64 = 2;
LABEL_70:
                  if (v64 == 3)
                    goto LABEL_262;
                  continue;
                }
                v11 = v55;
                if (v60)
                {
                  sub_22E85B630((uint64_t)__dst, a1, 23);
                  v12 = v43;
                  if (__dst[20])
                  {
                    v13 = v52;
                    if (v336)
                    {
                      v66 = *(_QWORD *)(a1 + 96);
                      *(_DWORD *)(v66 + 312) = *(_DWORD *)&__dst[4];
                      *(_DWORD *)(v66 + 316) = 1981;
                      if (*(char *)(v66 + 311) < 0)
                      {
                        **(_BYTE **)(v66 + 288) = 0;
                        *(_QWORD *)(v66 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v66 + 288) = 0;
                        *(_BYTE *)(v66 + 311) = 0;
                      }
                      v43 = v54;
                      v67 = sub_22E78E558((uint64_t)&v401, v66);
                      sub_22E3BB0B8(v67);
                      v64 = 3;
                    }
                    else
                    {
                      v43 = v54;
                      if (*(_DWORD *)__dst <= 2u)
                        DWORD2(v362) = *(_DWORD *)__dst;
                      v64 = 2;
                      v336 = *(_DWORD *)&__dst[4];
                    }
                  }
                  else
                  {
                    v64 = 2;
                    v13 = v52;
                    v43 = v54;
                  }
                  v51 = 1;
                  goto LABEL_70;
                }
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v342);
                v51 = 1;
                v68 = (int)v385;
                v12 = v43;
                v43 = v54;
                goto LABEL_85;
              }
              sub_22E884578(a1, (int *)v342, 1655, (uint64_t)__dst);
              sub_22E3B89A8((unsigned __int8 **)__dst, v57, v58);
              v180 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
              v181 = 1;
              if (v180 > 0x31)
                v181 = 2;
              if (v180 <= 0x32)
                v179 = v181;
              else
                v179 = 4;
            }
            else
            {
              sub_22E884578(a1, (int *)v342, 1655, (uint64_t)__dst);
              sub_22E3B89A8((unsigned __int8 **)__dst, v57, v58);
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) <= 0x32u)
                v179 = 0;
              else
                v179 = 3;
            }
            v182 = *(unsigned __int8 **)__dst;
            if (!*(_QWORD *)__dst)
            {
              v182 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__dst[8]);
              *(_QWORD *)__dst = v182;
            }
            v182[*v182 + 1] = 2;
            v183 = *(_QWORD *)__dst;
            v184 = **(_BYTE **)__dst;
            **(_BYTE **)__dst = v184 + 1;
            *(_QWORD *)(v183 + 8 * v184 + 16) = v179;
            goto LABEL_260;
          }
        }
        break;
      }
      v62 = 0;
      goto LABEL_50;
    case 6:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v203 = *(_QWORD *)(a1 + 88);
      v204 = *(unsigned int *)(v203 + 12544);
      v205 = v11;
      if ((_DWORD)v204)
        v206 = *(_QWORD *)(*(_QWORD *)(v203 + 12536) + 32 * v204 - 32);
      else
        v206 = 0;
      v241 = *(_QWORD *)(v203 + 88);
      v242 = (uint64_t *)sub_22F36FB58(v241);
      if (sub_22E85912C(a1, v19, (uint64_t)v242, v206))
      {
        do
          LOWORD(v361[0]) = 430;
        while (!sub_22E885940(a1, (unsigned __int16 *)v361, 1, 2));
        v243 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v243 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v243;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        LOBYTE(v11) = v205;
        goto LABEL_459;
      }
      sub_22F2EB66C(a1);
      v267 = *(_BYTE *)(a1 + 946);
      *(_BYTE *)(a1 + 946) = 0;
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x600000000;
      sub_22E47EDD0((uint64_t)v361, 1uLL, 0);
      LODWORD(v364) = 55;
      *((_QWORD *)&v364 + 1) = (char *)&v365 + 8;
      *(_QWORD *)&v365 = 0x800000000;
      v374 = v376;
      v375 = 0x800000000;
      v377[1] = 1;
      for (i = 34; i != 46; i += 3)
        LODWORD(v361[i]) = -1;
      sub_22F0C382C(v242, v241, v361);
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FAA4BC8;
      v401.__r_.__value_.__l.__size_ = a1;
      v401.__r_.__value_.__r.__words[2] = v19;
      v402 = &v401;
      sub_22F0C45F8((uint64_t)__dst, v241, (uint64_t)&v401, 0, 0, 0);
      if ((llvm::omp::isVariantApplicableInContext() & 1) != 0)
      {
        sub_22EC81340(*(_QWORD *)(a1 + 88), v19, v242);
LABEL_433:
        v269 = 1;
        goto LABEL_451;
      }
      v270 = 1;
      while (2)
      {
        v271 = *(_DWORD *)(a1 + 16);
        v272 = sub_22E85EC88(a1);
        if (v272 == 26)
        {
          v273 = -1;
        }
        else
        {
          if (v272 != 6)
            goto LABEL_440;
          v273 = 1;
        }
        v270 += v273;
        if (!v270)
          break;
LABEL_440:
        v274 = *(unsigned __int16 *)(a1 + 32);
        if ((v274 - 436) >= 3 && v274 != 1)
        {
          sub_22E80F0F0(a1, 0);
          continue;
        }
        break;
      }
      sub_22E85B7F0(a1, 6, 26, v272, v19, v271, 1);
      v276 = *(unsigned __int16 *)(a1 + 32);
      if ((v276 - 436) >= 3 && v276 != 1)
        goto LABEL_433;
      v269 = 0;
LABEL_451:
      sub_22F2ECA24(__dst);
      v278 = v402;
      if (v402 == &v401)
      {
        v279 = (void (**)(std::string *))(v401.__r_.__value_.__r.__words[0] + 32);
        v278 = &v401;
      }
      else
      {
        if (!v402)
          goto LABEL_456;
        v279 = (void (**)(std::string *))(v402->__r_.__value_.__r.__words[0] + 40);
      }
      (*v279)(v278);
LABEL_456:
      sub_22F2ECBAC((uint64_t)v361);
      *(_BYTE *)(a1 + 946) = v267;
      LOBYTE(v11) = v205;
      if ((v269 & 1) != 0)
        goto LABEL_459;
      goto LABEL_461;
    case 10:
      v139 = (unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v145 = sub_22E854B88(a1, *v9);
      if (!v145)
        goto LABEL_459;
      v41 = (uint64_t)v145;
      goto LABEL_191;
    case 11:
      v139 = (unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v140 = sub_22E853CF0(a1, *v9);
      if (!v140)
        goto LABEL_459;
      v41 = v140;
      sub_22F2EB66C(a1);
LABEL_191:
      v146 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v146 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v146;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v139);
      goto LABEL_462;
    case 12:
    case 14:
      v339 = v12;
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x400000000;
      v81 = sub_22E4EF088((uint64_t)__dst, a1 + 16, 1);
      v82 = *(_QWORD *)__dst + 24 * *(unsigned int *)&__dst[8];
      v83 = *(_OWORD *)v81;
      *(_QWORD *)(v82 + 16) = *(_QWORD *)(v81 + 16);
      *(_OWORD *)v82 = v83;
      ++*(_DWORD *)&__dst[8];
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      while (*(_WORD *)(a1 + 32) != 430)
      {
        v84 = sub_22E4EF088((uint64_t)__dst, a1 + 16, 1);
        v85 = *(_QWORD *)__dst + 24 * *(unsigned int *)&__dst[8];
        v86 = *(_OWORD *)v84;
        *(_QWORD *)(v85 + 16) = *(_QWORD *)(v84 + 16);
        *(_OWORD *)v85 = v86;
        ++*(_DWORD *)&__dst[8];
        sub_22E80F0F0(a1, 0);
      }
      v87 = sub_22E4EF088((uint64_t)__dst, a1 + 16, 1);
      v88 = *(_QWORD *)__dst + 24 * *(unsigned int *)&__dst[8];
      v89 = *(_OWORD *)v87;
      *(_QWORD *)(v88 + 16) = *(_QWORD *)(v87 + 16);
      *(_OWORD *)v88 = v89;
      ++*(_DWORD *)&__dst[8];
      sub_22E80F0F0(a1, 0);
      v90 = *(unsigned __int16 *)(a1 + 32);
      v91 = v19;
      if (v90 > 0x1B3)
      {
        if (v90 - 436 < 3)
          goto LABEL_208;
      }
      else
      {
        if (v90 - 428 < 2)
        {
          v157 = (unsigned int *)sub_22E85B9CC(a1, v9, a3, a4, a5, a6);
          goto LABEL_206;
        }
        if (v90 == 1 || v90 == 24)
          goto LABEL_208;
      }
      if (*v9 == 3)
      {
        sub_22E8103B4(a1, a3, 0);
        v361[0] = 0;
        v362 = 0uLL;
        *(_QWORD *)v363 = 0;
        *(_QWORD *)&v363[8] = a1 + 960;
        *(_OWORD *)&v363[16] = 0u;
        v364 = 0u;
        v365 = 0u;
        v366 = 0u;
        v367 = 0u;
        memset(v368, 0, sizeof(v368));
        v369 = 0u;
        v370 = 0u;
        v371 = 0u;
        v372 = 0;
        v155 = *(_QWORD *)(a1 + 88);
        v374 = 0;
        v375 = v155;
        v376[0] = 0;
        v376[1] = v377;
        v376[2] = 0x400000000;
        v156 = *(_QWORD *)(v155 + 3200);
        *(_QWORD *)(v155 + 3200) = v376;
        v377[40] = v156;
        v378 = 0;
        v41 = sub_22E887B48(a1, a3, v361);
        sub_22E828C30((uint64_t)&v375);
        if (DWORD1(v365))
          free(*((void **)&v364 + 1));
        sub_22E8D1BC4(*(uint64_t *)&v363[8], (uint64_t)&v363[8]);
        sub_22E80F94C((uint64_t *)&v363[16]);
        sub_22E80F94C((uint64_t *)v363);
        goto LABEL_207;
      }
      v157 = sub_22E833304(a1, v9, a3, a5, a6);
LABEL_206:
      v41 = (uint64_t)v157;
LABEL_207:
      if (!v41)
      {
LABEL_208:
        v158 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v158 + 312) = v91;
        *(_DWORD *)(v158 + 316) = 1650;
        if (*(char *)(v158 + 311) < 0)
        {
          **(_BYTE **)(v158 + 288) = 0;
          *(_QWORD *)(v158 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v158 + 288) = 0;
          *(_BYTE *)(v158 + 311) = 0;
        }
        LOWORD(v12) = v339;
        sub_22E78E558((uint64_t)v361, v158);
        v159 = v361[0];
        if (!v361[0])
        {
          v159 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
          v361[0] = v159;
        }
        *((_BYTE *)v159 + *(unsigned __int8 *)v159 + 1) = 2;
        v160 = v361[0];
        v161 = *(unsigned __int8 *)v361[0];
        *(_BYTE *)v361[0] = v161 + 1;
        *((_QWORD *)v160 + v161 + 2) = (_DWORD)v43 != 12;
        sub_22E3BB0B8((uint64_t)v361);
        v41 = 0;
LABEL_213:
        v162 = *(llvm **)__dst;
        if (*(_BYTE **)__dst != &__dst[16])
LABEL_214:
          free(v162);
        goto LABEL_462;
      }
      v207 = v91;
      sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
      sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)__dst, *(unsigned int *)&__dst[8], 1, 0, 1);
      sub_22E80F0F0(a1, 1);
      sub_22E80F0F0(a1, 1);
      if ((_DWORD)v43 == 12)
      {
        v328 = v91;
        sub_22E856D74((uint64_t)&v388, a1, v41);
        v329 = 0;
        v208 = 0;
        v209 = 0;
        *(_QWORD *)v344 = 0;
        v337 = 0;
        v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
        v401.__r_.__value_.__l.__size_ = 0x400000000;
        *(_QWORD *)&__p = v400;
        *((_QWORD *)&__p + 1) = 0x400000000;
        __src = &v393;
        v392 = 0x400000000;
        v385 = v387;
        v386 = 0x400000000;
        v382 = v384;
        v383 = 0x400000000;
        v379 = v381;
        v380 = 0x400000000;
        while (1)
        {
          if (*(_WORD *)(a1 + 32) != 5)
          {
LABEL_407:
            sub_22F2EB66C(a1);
            v265 = *(unsigned int *)(a1 + 16);
            v264 = *(_DWORD *)(a1 + 20);
            if (!v264)
              v264 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 40) = v264;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            LOWORD(v12) = v339;
            if ((v337 & 1) == 0)
              v41 = sub_22EC96930(*(_QWORD **)(a1 + 88), v41, v208, (_DWORD *)(v329 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 **)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (unsigned __int8 **)__p, DWORD2(__p), (_DWORD **)__src, v392, (unsigned __int8 **)v385, v386, (int *)v382, v383, (uint64_t *)v379, v380, v328 | (v265 << 32));
            if (v379 != v381)
              free(v379);
            if (v382 != v384)
              free(v382);
            if (v385 != v387)
              free(v385);
            if (__src != &v393)
              free(__src);
            if ((_BYTE *)__p != v400)
              free((void *)__p);
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
              free(v401.__r_.__value_.__l.__data_);
            sub_22E856F50((uint64_t)&v388);
            goto LABEL_213;
          }
          v210 = v13;
          v355 = 0;
          v211 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 16);
          v214 = *v211;
          v213 = v211 + 4;
          v212 = v214;
          if (sub_22EF96B3C(v213, v214, &v355))
            break;
          if (v212 == 7
            && (*v213 == 1684892019 ? (v221 = *(_DWORD *)((char *)v213 + 3) == 1852140644) : (v221 = 0), v221))
          {
            if (v329 >= 2)
            {
              sub_22E884578(a1, (int *)(a1 + 16), 49, (uint64_t)v361);
              v229 = (void *)llvm::omp::getOpenMPDirectiveName();
              sub_22E3B89A8((unsigned __int8 **)v361, v229, v230);
              sub_22E3B89A8((unsigned __int8 **)v361, v213, 7uLL);
              v231 = v361[0];
              if (!v361[0])
              {
                v231 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
                v361[0] = v231;
              }
              *((_BYTE *)v231 + *(unsigned __int8 *)v231 + 1) = 2;
              v232 = v361[0];
              v233 = *(unsigned __int8 *)v361[0];
              *(_BYTE *)v361[0] = v233 + 1;
              *((_QWORD *)v232 + v233 + 2) = 0;
              sub_22E3BB0B8((uint64_t)v361);
              v337 = 1;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v329 = sub_22F2EBCF4(a1, (char *)v213, 7, v361, 0);
            v337 |= v329;
            v13 = v210;
          }
          else
          {
            v222 = llvm::omp::getOpenMPClauseKind();
            v223 = v222;
            if (v222 == 5 || v222 == 84 || v222 == 44)
            {
              *(_QWORD *)&v364 = 0;
              *(_OWORD *)v361 = 0u;
              v362 = 0u;
              memset(v363, 0, 28);
              DWORD2(v364) = -1;
              *(_QWORD *)&v365 = &v366;
              *((_QWORD *)&v365 + 1) = 0x500000000;
              *((_QWORD *)&v367 + 1) = &v368[1];
              v368[0] = 0x500000000;
              *(_QWORD *)&v369 = &v370;
              *((_QWORD *)&v369 + 1) = 0x200000000;
              *((_QWORD *)&v370 + 1) = (char *)&v371 + 8;
              *(_QWORD *)&v371 = 0x200000000;
              LOBYTE(v372) = 0;
              if (v222 == 5)
                p_p = (std::string *)&__p;
              else
                p_p = &v401;
              v373 = 0;
              if (v222 == 44)
              {
                DWORD2(v364) = 0;
                p_p = (std::string *)&v385;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              v226 = llvm::omp::getOpenMPClauseKind();
              v227 = sub_22E85964C(a1, 12, v226, (uint64_t)p_p, (uint64_t)v361);
              if (v223 == 5)
              {
                sub_22F2A3804((uint64_t)&__src, DWORD2(__p) - (unint64_t)v392, (uint64_t)v361[0]);
                v13 = v210;
              }
              else
              {
                v13 = v210;
                if (v223 == 44)
                {
                  v331 = v227;
                  if ((sub_22ECAE8F8(*(_QWORD **)(a1 + 88), SDWORD2(v364), v373) & 1) != 0)
                  {
                    v228 = 0;
                    DWORD2(v364) = 0;
                  }
                  else
                  {
                    v228 = DWORD2(v364);
                  }
                  v234 = v386;
                  v235 = v383;
                  v236 = v383;
                  v237 = v383;
                  if (v386 > HIDWORD(v383))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v236 = v383;
                    v237 = v383;
                  }
                  if (v234 != v235)
                  {
                    v238 = (char *)v382 + 4 * v236;
                    v239 = v235 - v234;
                    do
                      *v238++ = v228;
                    while (!__CFADD__(v239++, 1));
                    v237 = v383;
                  }
                  LODWORD(v383) = v237 + v234 - v235;
                  sub_22F2A3804((uint64_t)&v379, v386 - (unint64_t)v380, (uint64_t)v361[0]);
                  v13 = v210;
                  v227 = v331;
                }
              }
              v337 |= v227;
              sub_22F2EC9A4((uint64_t)v361);
              v224 = 0;
            }
            else
            {
              v224 = 3;
              v13 = v210;
            }
            if (v223 != 5 && v223 != 84 && v223 != 44)
              goto LABEL_349;
          }
LABEL_346:
          if (*(_WORD *)(a1 + 32) == 65)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          }
          v224 = 0;
LABEL_349:
          if (v224)
            goto LABEL_407;
        }
        v215 = v355;
        if (!v208 || v208 == v355)
        {
          v209 = *(_DWORD *)(a1 + 16);
          v13 = v210;
        }
        else
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1651, (uint64_t)v361);
          sub_22E3B89A8((unsigned __int8 **)v361, v213, v212);
          v216 = v361[0];
          if (!v361[0])
          {
            v216 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
            v361[0] = v216;
          }
          v217 = "inbranch";
          if (v208 == 2)
            v217 = "notinbranch";
          *((_BYTE *)v216 + *(unsigned __int8 *)v216 + 1) = 1;
          v218 = v361[0];
          v219 = *(unsigned __int8 *)v361[0];
          *(_BYTE *)v361[0] = v219 + 1;
          *((_QWORD *)v218 + v219 + 2) = v217;
          sub_22E4D6448((uint64_t)v218 + 336, v209 | (*(_QWORD *)v344 << 32), 1);
          sub_22E3BB0B8((uint64_t)v361);
          v209 = *(_DWORD *)(a1 + 16);
          v13 = v210;
          if (*(unsigned __int16 *)(a1 + 32) - 399 <= 0x28)
          {
            LODWORD(v220) = *(_DWORD *)(a1 + 20);
            if ((_DWORD)v220)
              v220 = v220;
            else
              v220 = v209;
            *(_QWORD *)v344 = v220;
            v337 = 1;
            goto LABEL_345;
          }
          v337 = 1;
        }
        *(_QWORD *)v344 = *(_DWORD *)(a1 + 20) + v209;
LABEL_345:
        *(_DWORD *)(a1 + 40) = v209;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v208 = v215;
        goto LABEL_346;
      }
      sub_22E856D74((uint64_t)&v385, a1, v41);
      LODWORD(v382) = 0;
      v253 = *(_QWORD *)(a1 + 88);
      LODWORD(__p) = 0;
      v361[0] = 0;
      LODWORD(__src) = 3;
      v401.__r_.__value_.__r.__words[0] = *(unsigned int *)(v253 + 1704);
      sub_22EB4DDB8(v253 + 3688, (int *)&__p, (int *)&v401, (__int16 *)(v253 + 1693), (uint64_t *)v361, (int *)&__src);
      v254 = *(unsigned int *)(v253 + 3696);
      v255 = v254 - 2;
      v256 = *(_QWORD *)(v253 + 3688);
      v257 = *(_DWORD *)(v256 + 576 * (v254 - 2));
      if (v257 == 5)
      {
        *(_BYTE *)(v256 + 576 * v254 - 4) = *(_BYTE *)(v256 + 576 * v255 + 572);
        v258 = 1;
        LOWORD(v12) = v339;
      }
      else
      {
        LOWORD(v12) = v339;
        if (v257 == 2)
        {
          *(_BYTE *)(v256 + 576 * v254 - 4) = 1;
          v258 = *(_BYTE *)(v256 + 576 * v255 + 573) != 0;
        }
        else
        {
          v258 = 0;
          *(_BYTE *)(v256 + 576 * v254 - 4) = 0;
        }
      }
      v259 = v256 + 576 * v254;
      *(_BYTE *)(v259 - 3) = v258;
      *(_WORD *)(v253 + 1693) = 0;
      if (*(_DWORD *)(v253 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v253 + 1776), (llvm::SmallPtrSetImplBase *)(v259 - 560));
        sub_22EAEAE08(v253 + 1840, (uint64_t *)(v259 - 496));
      }
      v260 = (char *)llvm::omp::getOpenMPDirectiveName();
      v262 = sub_22F2EBCF4(a1, v260, v261, &v382, 1);
      sub_22EB48E64(v253);
      if (v262 <= 1)
      {
        if (*(_WORD *)(a1 + 32) != 430)
        {
          do
            LOWORD(v361[0]) = 430;
          while (!sub_22E885940(a1, (unsigned __int16 *)v361, 1, 2));
        }
        v263 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v263 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v263;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        goto LABEL_406;
      }
      v351 = v13;
      v330 = v262;
      v287 = *(_QWORD *)(a1 + 88);
      v288 = *(unsigned int *)(v287 + 12544);
      if ((_DWORD)v288)
        v338 = *(_QWORD *)(*(_QWORD *)(v287 + 12536) + 32 * v288 - 32);
      else
        v338 = 0;
      v345 = sub_22F36FB58(*(_QWORD *)(v287 + 88));
      v401.__r_.__value_.__r.__words[0] = (std::string::size_type)&v401.__r_.__value_.__r.__words[2];
      v401.__r_.__value_.__l.__size_ = 0x600000000;
      *(_QWORD *)&__p = v400;
      *((_QWORD *)&__p + 1) = 0x600000000;
      v388 = v390;
      v389 = 0x300000000;
      if (*(_WORD *)(a1 + 32) == 430)
      {
        v289 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v289 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v289 + 316) = 1659;
        if (*(char *)(v289 + 311) < 0)
        {
          **(_BYTE **)(v289 + 288) = 0;
          *(_QWORD *)(v289 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v289 + 288) = 0;
          *(_BYTE *)(v289 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v361, v289);
        v290 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
        v291 = v361[0];
        if (!v361[0])
        {
          v291 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
          v361[0] = v291;
        }
        *((_BYTE *)v291 + *(unsigned __int8 *)v291 + 1) = 2;
        v292 = v361[0];
        v293 = *(unsigned __int8 *)v361[0];
        *(_BYTE *)v361[0] = v293 + 1;
        *((_QWORD *)v292 + v293 + 2) = v290 > 0x32;
        sub_22E3BB0B8((uint64_t)v361);
      }
      v294 = 0;
      v332 = 0;
LABEL_488:
      v295 = *(unsigned __int16 *)(a1 + 32);
      while (1)
      {
        if (v295 == 430)
        {
          sub_22EC993F8(*(_QWORD *)(a1 + 88), v41, v330 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v345, v389, v207 | ((unint64_t)*(unsigned int *)(a1 + 16) << 32), (uint64_t)v361);
          if ((_BYTE)v362)
            v313 = *(_DWORD *)(v345 + 8) == 0;
          else
            v313 = 1;
          if (!v313)
            sub_22EC9A820(*(_QWORD **)(a1 + 88), (uint64_t)v361[0], (uint64_t)v361[1], (_DWORD *)v345, (uint64_t *)v401.__r_.__value_.__l.__data_, LODWORD(v401.__r_.__value_.__r.__words[1]), (uint64_t *)__p, DWORD2(__p), v388, v389, v332, v294, v207 | ((unint64_t)*(unsigned int *)(a1 + 16) << 32));
          goto LABEL_562;
        }
        if ((v295 - 399) >= 0x29)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)v361);
          v296 = llvm::omp::getOpenMPClauseKind();
          if (SBYTE7(v362) < 0)
            operator delete(v361[0]);
        }
        else
        {
          v296 = 85;
        }
        if ((llvm::omp::isAllowedClauseForDirective() & 1) == 0)
        {
          v314 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v314 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v314 + 316) = 1659;
          if (*(char *)(v314 + 311) < 0)
          {
            **(_BYTE **)(v314 + 288) = 0;
            *(_QWORD *)(v314 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v314 + 288) = 0;
            *(_BYTE *)(v314 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v361, v314);
          v315 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72);
          v316 = v361[0];
          if (!v361[0])
          {
            v316 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
            v361[0] = v316;
          }
          *((_BYTE *)v316 + *(unsigned __int8 *)v316 + 1) = 2;
          v317 = v361[0];
          v318 = *(unsigned __int8 *)v361[0];
          *(_BYTE *)v361[0] = v318 + 1;
          *((_QWORD *)v317 + v318 + 2) = v315 > 0x32;
          goto LABEL_560;
        }
        if (v296 == 8)
        {
          if ((_DWORD)v389)
          {
            v319 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v319 + 312) = v294;
            *(_DWORD *)(v319 + 316) = 49;
            if (*(char *)(v319 + 311) < 0)
            {
              **(_BYTE **)(v319 + 288) = 0;
              *(_QWORD *)(v319 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v319 + 288) = 0;
              *(_BYTE *)(v319 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v361, v319);
            v320 = (void *)llvm::omp::getOpenMPDirectiveName();
            sub_22E3B89A8((unsigned __int8 **)v361, v320, v321);
            v322 = (void *)llvm::omp::getOpenMPClauseName();
            sub_22E3B89A8((unsigned __int8 **)v361, v322, v323);
            v324 = v361[0];
            if (!v361[0])
            {
              v324 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
              v361[0] = v324;
            }
            *((_BYTE *)v324 + *(unsigned __int8 *)v324 + 1) = 2;
            v325 = v361[0];
            v326 = *(unsigned __int8 *)v361[0];
            *(_BYTE *)v361[0] = v326 + 1;
            *((_QWORD *)v325 + v326 + 2) = 0;
LABEL_560:
            sub_22E3BB0B8((uint64_t)v361);
            goto LABEL_561;
          }
          v294 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 40) = v294;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v361[0] = (llvm *)(a1 + 944);
          LOBYTE(v361[1]) = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          *(_QWORD *)&v362 = a1;
          DWORD2(v362) = 1441813;
          WORD6(v362) = 430;
          *(_QWORD *)&v363[16] = 0;
          *(_QWORD *)v363 = sub_22E80F720;
          *(_QWORD *)&v363[8] = 0;
          v298 = (char *)llvm::omp::getOpenMPClauseName();
          if ((sub_22E88C650((uint64_t)v361, 1510, v298, 0) & 1) != 0)
            goto LABEL_541;
          if (*(_WORD *)(a1 + 32) == 5)
          {
            v299 = 0;
            while (1)
            {
              v300 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 16);
              if (*v300 != 7)
                goto LABEL_519;
              v301 = v300[4];
              v302 = *(_DWORD *)((char *)v300 + 19);
              if (v301 != 1702129257 || v302 != 1886351973)
                goto LABEL_519;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              __src = (void *)(a1 + 944);
              LOBYTE(v392) = *(_BYTE *)(a1 + 944);
              *(_BYTE *)(a1 + 944) = 1;
              v393 = a1;
              v394 = 1441813;
              v395 = 430;
              v398 = 0;
              v396 = sub_22E80F720;
              v397 = 0;
              if (sub_22E88C650((uint64_t)&__src, 1510, "interop", 0))
                break;
              v304 = sub_22E85B1CC(a1);
              if (HIDWORD(v304))
              {
                v305 = v304;
                v306 = v389;
                if (v389 >= (unint64_t)HIDWORD(v389))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v306 = v389;
                }
                *((_DWORD *)v388 + v306) = v305;
                LODWORD(v389) = v389 + 1;
              }
              else
              {
                v299 = 1;
              }
              sub_22E811E8C((uint64_t)&__src);
              v307 = *(unsigned __int16 *)(a1 + 32);
              if (v307 == 65)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                v307 = *(unsigned __int16 *)(a1 + 32);
              }
              *(_BYTE *)__src = v392;
              if (v307 != 5)
                goto LABEL_519;
            }
            *(_BYTE *)__src = v392;
LABEL_541:
            *(_BYTE *)v361[0] = v361[1];
            do
LABEL_561:
              LOWORD(v361[0]) = 430;
            while (!sub_22E885940(a1, (unsigned __int16 *)v361, 1, 2));
LABEL_562:
            v327 = *(_DWORD *)(a1 + 16);
            if (*(_DWORD *)(a1 + 20))
              v327 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 40) = v327;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            if (v388 != v390)
              free(v388);
            if ((_BYTE *)__p != v400)
              free((void *)__p);
            if ((std::string::size_type *)v401.__r_.__value_.__l.__data_ != &v401.__r_.__value_.__r.__words[2])
              free(v401.__r_.__value_.__l.__data_);
            LOWORD(v12) = v339;
            LOWORD(v13) = v351;
LABEL_406:
            sub_22E856F50((uint64_t)&v385);
            goto LABEL_213;
          }
          v299 = 0;
LABEL_519:
          if ((v299 & 1) == 0 && !(_DWORD)v389)
          {
            v308 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v308 + 312) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(v308 + 316) = 1676;
            if (*(char *)(v308 + 311) < 0)
            {
              **(_BYTE **)(v308 + 288) = 0;
              *(_QWORD *)(v308 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v308 + 288) = 0;
              *(_BYTE *)(v308 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v379, v308);
            sub_22E3BB0B8((uint64_t)&v379);
            LODWORD(__src) = 1441857;
            WORD2(__src) = 430;
            sub_22E885940(a1, (unsigned __int16 *)&__src, 3, 2);
            v299 = 1;
          }
          v297 = sub_22E811E8C((uint64_t)v361);
          *(_BYTE *)v361[0] = v361[1];
          if ((v299 & 1) != 0)
            goto LABEL_561;
        }
        else
        {
          if (v296 != 47)
          {
            v332 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 40) = v332;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            *(_QWORD *)&v364 = 0;
            *(_OWORD *)v361 = 0u;
            v362 = 0u;
            memset(v363, 0, 28);
            DWORD2(v364) = -1;
            *(_QWORD *)&v365 = &v366;
            *((_QWORD *)&v365 + 1) = 0x500000000;
            *((_QWORD *)&v367 + 1) = &v368[1];
            v368[0] = 0x500000000;
            *(_QWORD *)&v369 = &v370;
            *((_QWORD *)&v369 + 1) = 0x200000000;
            *((_QWORD *)&v370 + 1) = (char *)&v371 + 8;
            *(_QWORD *)&v371 = 0x200000000;
            LOBYTE(v372) = 0;
            v373 = 0;
            __src = &v393;
            v392 = 0x600000000;
            v309 = sub_22E85964C(a1, 14, 2, (uint64_t)&__src, (uint64_t)v361);
            if ((v309 & 1) == 0)
            {
              if (DWORD2(v364))
                v310 = (std::string *)&__p;
              else
                v310 = &v401;
              p_size = &v401.__r_.__value_.__l.__size_;
              if (DWORD2(v364))
                p_size = (std::string::size_type *)&__p + 1;
              sub_22F2ECCD8((uint64_t)v310, v310->__r_.__value_.__r.__words[0] + 8 * *(unsigned int *)p_size, (uint64_t *)__src, (uint64_t *)__src + v392);
            }
            if (__src != &v393)
              free(__src);
            sub_22F2EC9A4((uint64_t)v361);
            if ((v309 & 1) != 0)
              goto LABEL_561;
            goto LABEL_526;
          }
          v297 = sub_22E85912C(a1, v207, v345, v338);
        }
        if ((v297 & 1) != 0)
          goto LABEL_561;
LABEL_526:
        v295 = *(unsigned __int16 *)(a1 + 32);
        if (v295 == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          goto LABEL_488;
        }
      }
    case 24:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22F2EBEE8(a1, *(_DWORD *)(a1 + 40));
      goto LABEL_459;
    case 25:
      v141 = *(_QWORD *)(a1 + 88);
      if (*(_DWORD *)(v141 + 12304))
      {
        sub_22F3400B4(v141, (uint64_t)v361);
        sub_22F2EC278(a1, HIDWORD(v362), *(int *)&v363[16]);
        llvm::deallocate_buffer(v361[0], (void *)(16 * v362));
        goto LABEL_461;
      }
      sub_22E884578(a1, (int *)(a1 + 16), 1678, (uint64_t)v361);
      v142 = v361[0];
      if (!v361[0])
      {
        v142 = (llvm *)sub_22E3B8AAC((uint64_t)v361[1]);
        v361[0] = v142;
      }
      *((_BYTE *)v142 + *(unsigned __int8 *)v142 + 1) = 2;
      v143 = v361[0];
      v144 = *(unsigned __int8 *)v361[0];
      *(_BYTE *)v361[0] = v144 + 1;
      *((_QWORD *)v143 + v144 + 2) = 1;
LABEL_30:
      v47 = (void *)llvm::omp::getOpenMPDirectiveName();
      sub_22E3B89A8((unsigned __int8 **)v361, v47, v48);
      sub_22E3BB0B8((uint64_t)v361);
      goto LABEL_459;
    case 26:
      v147 = *(_QWORD *)(a1 + 88);
      v148 = *(_DWORD *)(v147 + 12544);
      if (v148)
      {
        v149 = (v148 - 1);
        *(_DWORD *)(v147 + 12544) = v149;
        v150 = *(_QWORD *)(v147 + 12536) + 32 * v149;
        if (*(char *)(v150 + 31) < 0)
          operator delete(*(void **)(v150 + 8));
      }
      else
      {
        v169 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v169 + 312) = v19;
        *(_DWORD *)(v169 + 316) = 1487;
        if (*(char *)(v169 + 311) < 0)
        {
          **(_BYTE **)(v169 + 288) = 0;
          *(_QWORD *)(v169 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v169 + 288) = 0;
          *(_BYTE *)(v169 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v354, v169);
        sub_22E3BB0B8((uint64_t)v354);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      goto LABEL_459;
    case 50:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v151 = *(_DWORD *)(a1 + 40);
      *(_QWORD *)__dst = &__dst[16];
      *(_QWORD *)&__dst[8] = 0x500000000;
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x5F00000000;
      sub_22E8618E0((char **)v361);
      v152 = *(unsigned __int16 *)(a1 + 32);
      if (v152 == 430)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1660, (uint64_t)&v401);
        v153 = (void *)llvm::omp::getOpenMPDirectiveName();
        sub_22E3B89A8((unsigned __int8 **)&v401, v153, v154);
        sub_22E3BB0B8((uint64_t)&v401);
        v41 = 0;
        goto LABEL_239;
      }
      v335 = v151;
      v163 = *(unsigned __int16 *)(a1 + 32);
      while (2)
      {
        if ((v163 - 399) >= 0x29)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v401);
          v164 = llvm::omp::getOpenMPClauseKind();
          if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v401.__r_.__value_.__l.__data_);
        }
        else
        {
          v164 = 85;
        }
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12288) + 21440) = v164;
        v165 = sub_22E855078(a1, 50, v164, (*((_QWORD *)v361[0] + v164) & 2) == 0);
        LODWORD(v401.__r_.__value_.__l.__data_) = 327745;
        WORD2(v401.__r_.__value_.__r.__words[0]) = 430;
        sub_22E885940(a1, (unsigned __int16 *)&v401, 3, 2);
        *((_QWORD *)v361[0] + v164) |= 2uLL;
        if (v165)
        {
          v166 = *(unsigned int *)&__dst[8];
          if (*(unsigned int *)&__dst[8] >= (unint64_t)*(unsigned int *)&__dst[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v166 = *(unsigned int *)&__dst[8];
          }
          *(_QWORD *)(*(_QWORD *)__dst + 8 * v166) = v165;
          ++*(_DWORD *)&__dst[8];
        }
        v167 = *(unsigned __int16 *)(a1 + 32);
        if (v167 == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_228:
          v168 = *(_QWORD **)(a1 + 88);
          *(_DWORD *)(v168[1536] + 21440) = 85;
          sub_22EB4E2D8(v168);
          v163 = *(unsigned __int16 *)(a1 + 32);
          if (v163 == 430)
            goto LABEL_235;
          continue;
        }
        break;
      }
      if (v167 != 430)
        goto LABEL_228;
      v170 = *(_QWORD **)(a1 + 88);
      *(_DWORD *)(v170[1536] + 21440) = 85;
      sub_22EB4E2D8(v170);
LABEL_235:
      if (*(_DWORD *)&__dst[8])
      {
        v252 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v252 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v252;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v41 = sub_22F33C8A4(*(_QWORD **)(a1 + 88), v335, *(int ***)__dst, *(unsigned int *)&__dst[8]);
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1660, (uint64_t)&v401);
        v171 = (void *)llvm::omp::getOpenMPDirectiveName();
        sub_22E3B89A8((unsigned __int8 **)&v401, v171, v172);
        sub_22E3BB0B8((uint64_t)&v401);
        v173 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v173 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v173;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v41 = 0;
      }
LABEL_239:
      if ((__int128 *)v361[0] != &v362)
        free(v361[0]);
      if (*(_BYTE **)__dst != &__dst[16])
        free(*(void **)__dst);
      if (v152 == 430)
      {
LABEL_459:
        while (*(_WORD *)(a1 + 32) != 430)
          sub_22E80F0F0(a1, 0);
        sub_22E80F0F0(a1, 0);
LABEL_461:
        v41 = 0;
      }
LABEL_462:
      sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
      *(_WORD *)(a1 + 80) = v12;
      *(_WORD *)(a1 + 82) = v13;
      *(_WORD *)(a1 + 84) = v352;
      *(_BYTE *)(a1 + 946) = v11;
      return v41;
    case 87:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v361[0] = (llvm *)&v362;
      v361[1] = (llvm *)0x400000000;
      *(_QWORD *)&v363[16] = a1;
      *(_DWORD *)&v363[24] = 87;
      *(_QWORD *)__dst = sub_22E861844;
      *(_QWORD *)&__dst[8] = v361;
      if ((sub_22F2EBF34(a1, 87, (uint64_t)__dst, 1) & 1) != 0)
      {
        v202 = v361[0];
        if ((__int128 *)v361[0] != &v362)
LABEL_311:
          free(v202);
        goto LABEL_459;
      }
      sub_22F2EB66C(a1);
      v266 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v266 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v266;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v41 = sub_22F33C42C(*(_QWORD **)(a1 + 88), v19, (uint64_t *)v361[0], LODWORD(v361[1]));
      v162 = v361[0];
      if ((__int128 *)v361[0] != &v362)
        goto LABEL_214;
      goto LABEL_462;
    case 89:
      sub_22E884578(a1, (int *)(a1 + 16), 1679, (uint64_t)v353);
      sub_22E3BB0B8((uint64_t)v353);
      goto LABEL_459;
    default:
      goto LABEL_459;
  }
}

uint64_t sub_22E85EC88(uint64_t a1)
{
  unsigned __int8 v2;
  void *p_p;
  uint64_t v4;
  unsigned int v5;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *__p;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  v2 = atomic_load((unsigned __int8 *)qword_253E4BD80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_253E4BD80))
  {
    xmmword_253E4BD90 = xmmword_22F461C20;
    unk_253E4BDA0 = xmmword_22F461C30;
    xmmword_253E4BDB0 = xmmword_22F461C40;
    unk_253E4BDC0 = xmmword_22F461C50;
    xmmword_253E4BDD0 = xmmword_22F461C60;
    unk_253E4BDE0 = xmmword_22F461C70;
    xmmword_253E4BDF0 = xmmword_22F461C80;
    unk_253E4BE00 = xmmword_22F461C90;
    xmmword_253E4BE10 = xmmword_22F461CA0;
    unk_253E4BE20 = xmmword_22F461CB0;
    xmmword_253E4BE30 = xmmword_22F461CC0;
    unk_253E4BE40 = xmmword_22F461CD0;
    xmmword_253E4BE50 = xmmword_22F461CE0;
    unk_253E4BE60 = xmmword_22F461CF0;
    xmmword_253E4BE70 = xmmword_22F461D00;
    unk_253E4BE80 = xmmword_22F461D10;
    xmmword_253E4BE90 = xmmword_22F461D20;
    unk_253E4BEA0 = xmmword_22F461D30;
    xmmword_253E4BEB0 = xmmword_22F461D40;
    unk_253E4BEC0 = xmmword_22F461D50;
    xmmword_253E4BED0 = xmmword_22F461D60;
    unk_253E4BEE0 = xmmword_22F461D70;
    xmmword_253E4BEF0 = xmmword_22F461D80;
    unk_253E4BF00 = xmmword_22F461D90;
    xmmword_253E4BF10 = xmmword_22F461DA0;
    unk_253E4BF20 = xmmword_22F461DB0;
    xmmword_253E4BF30 = xmmword_22F461DC0;
    unk_253E4BF40 = xmmword_22F461DD0;
    xmmword_253E4BF50 = xmmword_22F461DE0;
    unk_253E4BF60 = xmmword_22F461DF0;
    xmmword_253E4BF70 = xmmword_22F461E00;
    unk_253E4BF80 = xmmword_22F461E10;
    xmmword_253E4BF90 = xmmword_22F461E20;
    unk_253E4BFA0 = xmmword_22F461E30;
    xmmword_253E4BFB0 = xmmword_22F461E40;
    unk_253E4BFC0 = xmmword_22F461E50;
    xmmword_253E4BFD0 = xmmword_22F461E60;
    unk_253E4BFE0 = xmmword_22F461E70;
    xmmword_253E4BFF0 = xmmword_22F461E80;
    qword_253E4C000 = 0x360000002ELL;
    dword_253E4C008 = 47;
    __cxa_guard_release(qword_253E4BD80);
  }
  v17 = *(_OWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 32);
  if ((unsigned __int16)v18 - 399 < 0x29)
    return 89;
  sub_22F1413E0((uint64_t)&v17, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
  if (v16 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v16 >= 0)
    v4 = v16 & 0x7F;
  else
    v4 = v15;
  v5 = sub_22E860FBC((uint64_t)p_p, v4);
  if (v16 < 0)
    operator delete(__p);
  if (v5 == 89)
    return 89;
  for (i = 0; i != 636; i += 12)
  {
    if (v5 == *(_DWORD *)((char *)&qword_253E4BD80[2] + i))
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 2816);
      v10 = v9 >= *(unsigned int *)(v8 + 2784) ? sub_22F162D2C(v8, 1u) : *(_QWORD *)(v8 + 2776) + 24 * v9;
      v17 = *(_OWORD *)v10;
      v18 = *(_QWORD *)(v10 + 16);
      if ((unsigned __int16)v18 - 399 >= 0x29)
      {
        sub_22F1413E0((uint64_t)&v17, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
        if (v16 >= 0)
          v11 = &__p;
        else
          v11 = __p;
        if (v16 >= 0)
          v12 = v16 & 0x7F;
        else
          v12 = v15;
        v13 = sub_22E860FBC((uint64_t)v11, v12);
        if (v16 < 0)
          operator delete(__p);
        if (v13 != 89 && v13 == *(_DWORD *)((char *)&qword_253E4BD80[2] + i + 4))
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v5 = *(_DWORD *)((char *)&qword_253E4BD80[3] + i);
        }
      }
    }
  }
  if (v5 >= 0x64)
    return 89;
  else
    return v5;
}

uint64_t sub_22E85F01C(uint64_t a1, unsigned int a2, int a3)
{
  char v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  _OWORD *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int128 v38;
  int BestVariantMatchForContext;
  int v40;
  __int16 v41;
  __int16 v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  void *v46;
  size_t v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  void *v53;
  size_t v54;
  unsigned __int8 *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned int *v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  void *v73;
  size_t v74;
  unsigned __int8 *v75;
  _QWORD *v76;
  uint64_t v77;
  __int16 v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  size_t v91;
  unsigned __int8 *v92;
  _QWORD *v93;
  uint64_t v94;
  void *OpenMPClauseName;
  size_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  void *v101;
  size_t v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  uint64_t v105;
  void *OpenMPDirectiveName;
  size_t v107;
  unsigned __int8 *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v120;
  uint64_t v121;
  void (**v122)(void);
  uint64_t v123;
  int *v124;
  int v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t OpenMPClauseKind;
  unsigned int *v132;
  uint64_t v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  _DWORD *v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  __int16 v145;
  int v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  uint64_t v151;
  _BYTE v152[32];
  _BYTE v153[32];
  void *v154;
  char v155;
  __int128 v156;
  uint64_t v157;
  void *v158[2];
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  _BYTE v162[32];
  _QWORD v163[3];
  _QWORD *v164;
  void *__p[2];
  _QWORD v166[5];
  int v167;
  int v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD v171[18];
  _QWORD v172[17];
  __int128 v173;
  uint64_t v174;
  int v175;
  __int16 v176;
  uint64_t (*v177)(uint64_t);
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int16 v184;
  uint64_t (*v185)(uint64_t);
  uint64_t v186;
  uint64_t v187;
  int v188;
  void *v189[2];
  _BYTE v190[760];
  uint64_t *v191;
  uint64_t v192;
  _QWORD v193[8];

  v193[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 946);
  *(_BYTE *)(a1 + 946) = 1;
  v6 = *(_WORD *)(a1 + 80);
  v7 = *(_WORD *)(a1 + 82);
  v8 = *(_WORD *)(a1 + 84);
  v191 = v193;
  v192 = 0x500000000;
  v189[0] = v190;
  v189[1] = (void *)0x5F00000000;
  sub_22E8618E0((char **)v189);
  v9 = (_OWORD *)(a1 + 16);
  v151 = *(unsigned int *)(a1 + 16);
  if ((a3 & 1) != 0)
  {
    v10 = sub_22E85EC88(a1);
    if (v10 == 89)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1679, (uint64_t)v162);
      sub_22E3BB0B8((uint64_t)v162);
      v11 = 1;
      goto LABEL_150;
    }
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if (!v12)
      v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = v12;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v10 = sub_22E85EC88(a1);
  }
  *(_QWORD *)&v160 = 0;
  DWORD2(v160) = 0;
  v161 = 0;
  v13 = 1;
  switch(v10)
  {
    case 0u:
      if ((a2 & 1) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1670, (uint64_t)&v180);
        OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
        sub_22E3B89A8((unsigned __int8 **)&v180, OpenMPDirectiveName, v107);
        v108 = (unsigned __int8 *)v180;
        if (!v180)
        {
          v108 = (unsigned __int8 *)sub_22E3B8AAC(v181);
          v180 = v108;
        }
        v108[*v108 + 1] = 2;
        v109 = v180;
        v110 = *(unsigned __int8 *)v180;
        *(_BYTE *)v180 = v110 + 1;
        v109[v110 + 2] = 0;
        sub_22E3BB0B8((uint64_t)&v180);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      __p[0] = v166;
      __p[1] = (void *)0x400000000;
      v166[4] = a1;
      v167 = 0;
      v180 = sub_22E861844;
      v181 = (uint64_t)__p;
      if ((sub_22F2EBF34(a1, 0, (uint64_t)&v180, 0) & 1) != 0)
      {
        v11 = 1;
        goto LABEL_173;
      }
      *(_QWORD *)&v173 = &v174;
      *((_QWORD *)&v173 + 1) = 0x100000000;
      if (*(_WORD *)(a1 + 32) == 430)
      {
        v111 = 0;
        v112 = (char *)&v174;
        goto LABEL_171;
      }
      v180 = &v182;
      v181 = 0x5F00000000;
      sub_22E8618E0((char **)&v180);
      v130 = *(unsigned __int16 *)(a1 + 32);
      if (v130 == 430)
        goto LABEL_224;
      while (2)
      {
        if ((v130 - 399) >= 0x29)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)v158);
          OpenMPClauseKind = llvm::omp::getOpenMPClauseKind();
          if (SBYTE7(v159) < 0)
            operator delete(v158[0]);
        }
        else
        {
          OpenMPClauseKind = 85;
        }
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12288) + 21440) = OpenMPClauseKind;
        v132 = sub_22E855078(a1, 0, OpenMPClauseKind, (*((_QWORD *)v180 + OpenMPClauseKind) & 2) == 0);
        LODWORD(v158[0]) = 327745;
        WORD2(v158[0]) = 430;
        sub_22E885940(a1, (unsigned __int16 *)v158, 3, 2);
        *((_QWORD *)v180 + OpenMPClauseKind) |= 2uLL;
        if (v132)
        {
          v133 = DWORD2(v173);
          if (DWORD2(v173) >= (unint64_t)HIDWORD(v173))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v133 = DWORD2(v173);
          }
          *(_QWORD *)(v173 + 8 * v133) = v132;
          ++DWORD2(v173);
        }
        v134 = *(unsigned __int16 *)(a1 + 32);
        if (v134 == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        else if (v134 == 430)
        {
          v136 = *(_QWORD **)(a1 + 88);
          *(_DWORD *)(v136[1536] + 21440) = 85;
          sub_22EB4E2D8(v136);
LABEL_224:
          sub_22F2EB66C(a1);
          if (v180 != &v182)
            free(v180);
          v112 = (char *)v173;
          v111 = DWORD2(v173);
LABEL_171:
          v113 = sub_22EC83A4C(*(_QWORD **)(a1 + 88), v151, (uint64_t *)__p[0], LODWORD(__p[1]), v112, v111, 0);
          v11 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v113, v151, *(_DWORD *)(a1 + 16));
          if ((uint64_t *)v173 != &v174)
            free((void *)v173);
LABEL_173:
          LOWORD(v180) = 430;
          sub_22E885940(a1, (unsigned __int16 *)&v180, 1, 0);
          v97 = (uint64_t *)__p[0];
          if (__p[0] != v166)
            goto LABEL_149;
          goto LABEL_150;
        }
        v135 = *(_QWORD **)(a1 + 88);
        *(_DWORD *)(v135[1536] + 21440) = 85;
        sub_22EB4E2D8(v135);
        v130 = *(unsigned __int16 *)(a1 + 32);
        if (v130 == 430)
          goto LABEL_224;
        continue;
      }
    case 2u:
    case 9u:
    case 0x10u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x27u:
    case 0x28u:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Cu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x50u:
    case 0x51u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x58u:
    case 0x5Au:
    case 0x5Cu:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
      goto LABEL_57;
    case 3u:
    case 7u:
    case 8u:
    case 0xFu:
    case 0x20u:
    case 0x33u:
    case 0x3Au:
    case 0x3Bu:
    case 0x49u:
    case 0x4Eu:
    case 0x4Fu:
    case 0x5Du:
      if ((a2 & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1670, (uint64_t)&v180);
        v46 = (void *)llvm::omp::getOpenMPDirectiveName();
        sub_22E3B89A8((unsigned __int8 **)&v180, v46, v47);
        v48 = (unsigned __int8 *)v180;
        if (!v180)
        {
          v48 = (unsigned __int8 *)sub_22E3B8AAC(v181);
          v180 = v48;
        }
        v48[*v48 + 1] = 2;
        v49 = v180;
        v50 = *(unsigned __int8 *)v180;
        *(_BYTE *)v180 = v50 + 1;
        v49[v50 + 2] = 0;
        sub_22E3BB0B8((uint64_t)&v180);
      }
      v13 = 0;
LABEL_57:
      v146 = v13;
      v51 = v10 == 15 || v10 == 32;
      if (v10 == 32 || v10 == 15)
      {
        *(_OWORD *)__p = *v9;
        v166[0] = *(_QWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v145 = v6;
      v148 = v8;
      if (v10 == 9)
      {
        v180 = (void *)(a1 + 944);
        LOBYTE(v181) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        v182 = a1;
        v183 = 1441813;
        v184 = 430;
        v187 = 0;
        v185 = sub_22E80F720;
        v186 = 0;
        if ((sub_22E811DE8((uint64_t)&v180) & 1) == 0)
        {
          if (*(unsigned __int16 *)(a1 + 32) - 5 > 1)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1664, (uint64_t)v153);
            sub_22E3BB0B8((uint64_t)v153);
          }
          else
          {
            v52 = *(_DWORD *)(a1 + 16);
            *(_QWORD *)&v173 = *(_QWORD *)(a1 + 24);
            DWORD2(v173) = v52;
            sub_22EFC6D6C((uint64_t)&v174, v173);
            v160 = v173;
            v161 = v174;
            sub_22E80F0F0(a1, 0);
          }
          sub_22E811E8C((uint64_t)&v180);
        }
        *(_BYTE *)v180 = v181;
      }
      else if (v10 - 7 <= 1)
      {
        sub_22E85EC88(a1);
        if (*(_WORD *)(a1 + 32) != 430)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
      }
      v143 = sub_22F4219DC(v10);
      if (v143)
        v58 = 4292617;
      else
        v58 = 4227081;
      if (sub_22F421AC0(v10))
        v59 = v58 | 0x20000;
      else
        v59 = v58;
      sub_22E885C30(a1, v59);
      sub_22F33C0DC();
      v60 = *(unsigned __int16 *)(a1 + 32);
      if (v60 == 430)
        goto LABEL_106;
      if (v10 == 32)
        v61 = 30;
      else
        v61 = 19;
      while (v60 != 22 || !a3)
      {
        v62 = v51 && v60 == 21;
        if (v62 == 1)
        {
          sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
          sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)__p, 1);
          sub_22E80F0F0(a1, 0);
          v60 = *(unsigned __int16 *)(a1 + 32);
        }
        if ((v60 - 399) >= 0x29)
        {
          sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v180);
          LODWORD(v63) = llvm::omp::getOpenMPClauseKind();
          if (SHIBYTE(v182) < 0)
            operator delete(v180);
        }
        else
        {
          LODWORD(v63) = 85;
        }
        if (v62)
          v63 = v61;
        else
          v63 = v63;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12288) + 21440) = v63;
        v64 = sub_22E855078(a1, v10, v63, (*((_QWORD *)v189[0] + v63) & 2) == 0);
        v65 = v189[0];
        v66 = *((_QWORD *)v189[0] + v63) | 2;
        *((_QWORD *)v189[0] + v63) = v66;
        if (v64)
        {
          v67 = v64;
          v65[v63] = v66 & 3 | (unint64_t)v64;
          v68 = v192;
          if (v192 >= (unint64_t)HIDWORD(v192))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v68 = v192;
          }
          v191[v68] = (uint64_t)v67;
          LODWORD(v192) = v192 + 1;
        }
        if (*(_WORD *)(a1 + 32) == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        v69 = *(_QWORD **)(a1 + 88);
        *(_DWORD *)(v69[1536] + 21440) = 85;
        sub_22EB4E2D8(v69);
        v51 = 0;
        v60 = *(unsigned __int16 *)(a1 + 32);
        if (v60 == 430)
          goto LABEL_106;
      }
      do
        sub_22E80F0F0(a1, 0);
      while (*(_WORD *)(a1 + 32) != 430);
LABEL_106:
      v70 = *(_DWORD *)(a1 + 20);
      if (!v70)
        v70 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v70;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (v10 == 88)
      {
        v6 = v145;
        v8 = v148;
        v71 = v146;
        if ((*((_BYTE *)v189[0] + 608) & 2) == 0)
        {
          v72 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v72 + 312) = v151;
          *(_DWORD *)(v72 + 316) = 50;
          if (*(char *)(v72 + 311) < 0)
          {
            **(_BYTE **)(v72 + 288) = 0;
            *(_QWORD *)(v72 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v72 + 288) = 0;
            *(_BYTE *)(v72 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v180, v72);
          v73 = (void *)llvm::omp::getOpenMPDirectiveName();
          sub_22E3B89A8((unsigned __int8 **)&v180, v73, v74);
          v75 = (unsigned __int8 *)v180;
          if (!v180)
          {
            v75 = (unsigned __int8 *)sub_22E3B8AAC(v181);
            v180 = v75;
          }
          v75[*v75 + 1] = 1;
          v76 = v180;
          v77 = *(unsigned __int8 *)v180;
          *(_BYTE *)v180 = v77 + 1;
          v76[v77 + 2] = "sizes";
          sub_22E3BB0B8((uint64_t)&v180);
          if ((v146 & 1) == 0)
            goto LABEL_138;
          goto LABEL_121;
        }
      }
      else
      {
        v6 = v145;
        v8 = v148;
        v71 = v146;
        if (v10 == 39)
        {
          if ((*((_BYTE *)v189[0] + 144) & 2) == 0)
          {
            if ((v146 & 1) == 0)
              goto LABEL_138;
            goto LABEL_121;
          }
          if ((a2 & 2) == 0)
          {
            v89 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v89 + 312) = v151;
            *(_DWORD *)(v89 + 316) = 1670;
            if (*(char *)(v89 + 311) < 0)
            {
              **(_BYTE **)(v89 + 288) = 0;
              *(_QWORD *)(v89 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v89 + 288) = 0;
              *(_BYTE *)(v89 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v180, v89);
            v90 = (void *)llvm::omp::getOpenMPDirectiveName();
            sub_22E3B89A8((unsigned __int8 **)&v180, v90, v91);
            v92 = (unsigned __int8 *)v180;
            if (!v180)
            {
              v92 = (unsigned __int8 *)sub_22E3B8AAC(v181);
              v180 = v92;
            }
            v92[*v92 + 1] = 2;
            v93 = v180;
            v94 = *(unsigned __int8 *)v180;
            *(_BYTE *)v180 = v94 + 1;
            v93[v94 + 2] = 1;
            OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
            sub_22E3B89A8((unsigned __int8 **)&v180, OpenMPClauseName, v96);
            sub_22E3BB0B8((uint64_t)&v180);
          }
LABEL_138:
          v11 = sub_22EC87DEC();
          sub_22EC81438(*(_QWORD **)(a1 + 88), (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFFELL));
          sub_22E885CF4(a1);
          goto LABEL_150;
        }
      }
      if (!v71)
      {
        if (v10 - 58 <= 0xF && ((1 << (v10 - 58)) & 0x8003) != 0)
        {
          sub_22EC84DA0(*(_QWORD *)(a1 + 88), v10);
          v86 = *(_QWORD *)(a1 + 88);
          sub_22E905168(v86, 0);
          v87 = sub_22ED2C004(*(_QWORD **)(a1 + 88), v151, v151, 0, 0);
          v88 = *(_QWORD *)(*(_QWORD *)(v86 + 1896) + 8 * *(unsigned int *)(v86 + 1904) - 8);
          --*(_QWORD *)(v88 + 360);
          sub_22EC8617C(*(_QWORD **)(a1 + 88), (unint64_t)v87, v191, v192);
        }
        goto LABEL_138;
      }
LABEL_121:
      v78 = v8;
      sub_22EC84DA0(*(_QWORD *)(a1 + 88), v10);
      v79 = *(_BYTE *)(a1 + 946);
      *(_BYTE *)(a1 + 946) = 0;
      v80 = *(_QWORD *)(a1 + 88);
      sub_22E905168(v80, 0);
      v81 = sub_22E873C74(a1, 0, 0);
      v82 = (unsigned __int8 *)v81;
      v83 = v143 ^ 1;
      if (v81 < 2)
        v83 = 1;
      if ((v83 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 76) & 0x20) != 0)
      {
        v82 = (unsigned __int8 *)(v81 & 0xFFFFFFFFFFFFFFFELL);
        v84 = *(unsigned __int8 *)(v81 & 0xFFFFFFFFFFFFFFFELL);
        if (v84 == 14 || v84 == 5)
          v82 = (unsigned __int8 *)sub_22EC86C20(*(_QWORD *)(a1 + 88), v82);
      }
      v85 = *(_QWORD *)(*(_QWORD *)(v80 + 1896) + 8 * *(unsigned int *)(v80 + 1904) - 8);
      --*(_QWORD *)(v85 + 360);
      sub_22EC8617C(*(_QWORD **)(a1 + 88), (unint64_t)v82, v191, v192);
      *(_BYTE *)(a1 + 946) = v79;
      v8 = v78;
      goto LABEL_138;
    case 5u:
    case 6u:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0x19u:
    case 0x1Au:
    case 0x32u:
      sub_22E884578(a1, (int *)(a1 + 16), 1678, (uint64_t)&v180);
      v14 = (unsigned __int8 *)v180;
      if (!v180)
      {
        v14 = (unsigned __int8 *)sub_22E3B8AAC(v181);
        v180 = v14;
      }
      v14[*v14 + 1] = 2;
      v15 = v180;
      v16 = *(unsigned __int8 *)v180;
      *(_BYTE *)v180 = v16 + 1;
      v11 = 1;
      v15[v16 + 2] = 1;
      v17 = (void *)llvm::omp::getOpenMPDirectiveName();
      sub_22E3B89A8((unsigned __int8 **)&v180, v17, v18);
      sub_22E3BB0B8((uint64_t)&v180);
      LOWORD(v180) = 430;
      goto LABEL_11;
    case 0xAu:
      v41 = v8;
      v42 = v7;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v43 = sub_22E854B88(a1, 3);
      if (v43)
      {
        v44 = (uint64_t)v43;
        v45 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v45 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v45;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v11 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v44, v151, *(_DWORD *)(a1 + 16));
      }
      else
      {
        LOWORD(v180) = 430;
        v11 = 1;
        sub_22E885940(a1, (unsigned __int16 *)&v180, 1, 0);
      }
      v7 = v42;
      goto LABEL_141;
    case 0xBu:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v19 = sub_22E853CF0(a1, 3);
      if (!v19)
        goto LABEL_51;
      v20 = v19;
      sub_22F2EB66C(a1);
      sub_22E80F0F0(a1, 0);
      v11 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v20, v151, *(_DWORD *)(a1 + 16));
      goto LABEL_150;
    case 0x26u:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v181 = 0x400000000;
      v21 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)v158 = *(_OWORD *)(a1 + 48);
      v180 = &v182;
      v159 = v21;
      v156 = *v9;
      v157 = *(_QWORD *)(a1 + 32);
      v144 = *(unsigned int *)(a1 + 2344);
      v138 = *(_WORD *)(a1 + 82);
      v139 = *(_WORD *)(a1 + 80);
      v140 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      v142 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
      *(_QWORD *)&v173 = a1 + 944;
      BYTE8(v173) = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v174 = a1;
      v175 = 1441813;
      v176 = 430;
      v179 = 0;
      v177 = sub_22E80F720;
      v178 = 0;
      v22 = *(unsigned __int16 *)(a1 + 32);
      v147 = v8;
      if (v22 == 430)
        goto LABEL_39;
      v11 = 1;
      v149 = v7;
      break;
    case 0x57u:
      if ((a2 & 1) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1670, (uint64_t)&v180);
        v101 = (void *)llvm::omp::getOpenMPDirectiveName();
        sub_22E3B89A8((unsigned __int8 **)&v180, v101, v102);
        v103 = (unsigned __int8 *)v180;
        if (!v180)
        {
          v103 = (unsigned __int8 *)sub_22E3B8AAC(v181);
          v180 = v103;
        }
        v103[*v103 + 1] = 2;
        v104 = v180;
        v105 = *(unsigned __int8 *)v180;
        *(_BYTE *)v180 = v105 + 1;
        v104[v105 + 2] = 0;
        sub_22E3BB0B8((uint64_t)&v180);
      }
      v41 = v8;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v180 = &v182;
      v181 = 0x400000000;
      v187 = a1;
      v188 = 87;
      __p[0] = sub_22E861844;
      __p[1] = &v180;
      if ((sub_22F2EBF34(a1, 87, (uint64_t)__p, 0) & 1) != 0)
      {
        v11 = 1;
      }
      else
      {
        sub_22F2EB66C(a1);
        v129 = sub_22F33C42C(*(_QWORD **)(a1 + 88), v151, (uint64_t *)v180, v181);
        v11 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v129, v151, *(_DWORD *)(a1 + 16));
      }
      LOWORD(__p[0]) = 430;
      sub_22E885940(a1, (unsigned __int16 *)__p, 1, 0);
      if (v180 != &v182)
        free(v180);
LABEL_141:
      v8 = v41;
      goto LABEL_150;
    default:
      sub_22E884578(a1, (int *)(a1 + 16), 1679, (uint64_t)v152);
      sub_22E3BB0B8((uint64_t)v152);
LABEL_51:
      LOWORD(v180) = 430;
      v11 = 1;
LABEL_11:
      sub_22E885940(a1, (unsigned __int16 *)&v180, 1, 0);
      goto LABEL_150;
  }
  do
  {
    if ((v22 - 399) >= 0x29)
    {
      sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
      v23 = llvm::omp::getOpenMPClauseKind();
      if (SHIBYTE(v166[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v23 = 85;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v24 = (char *)llvm::omp::getOpenMPClauseName();
    if ((sub_22E88C650((uint64_t)&v173, 1510, v24, 0) & 1) != 0)
    {
      v36 = v6;
      goto LABEL_143;
    }
    v141 = (_DWORD *)sub_22F36FB58(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88));
    if (v23 != 92)
      goto LABEL_25;
    sub_22E8585DC(a1, (uint64_t)v141);
    if (!v141[2])
    {
      v36 = v6;
      v123 = a1;
      v124 = (int *)(a1 + 16);
      v125 = 1662;
      goto LABEL_206;
    }
    if (*(_WORD *)(a1 + 32) != 61)
    {
      v36 = v6;
      v123 = a1;
      v124 = (int *)(a1 + 16);
      v125 = 1661;
LABEL_206:
      sub_22E884578(v123, v124, v125, (uint64_t)__p);
      v126 = (unsigned __int8 *)__p[0];
      if (!__p[0])
      {
        v126 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
        __p[0] = v126;
      }
      v11 = 1;
      v126[*v126 + 1] = 1;
      v127 = __p[0];
      v128 = *(unsigned __int8 *)__p[0];
      *(_BYTE *)__p[0] = v128 + 1;
      v127[v128 + 2] = "when clause";
      sub_22E3BB0B8((uint64_t)__p);
      sub_22E80FADC(a1 + 2336, v144);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
LABEL_143:
      v7 = v149;
      goto LABEL_144;
    }
    sub_22E80F0F0(a1, 0);
LABEL_25:
    v25 = *(unsigned __int16 *)(a1 + 32);
    if (v25 != 22)
    {
      v26 = 0;
      while (v25 != 430)
      {
        v27 = v25 == 22;
        if (v25 == 21)
          v28 = v26 + 1;
        else
          v28 = v26;
        v26 = v28 - v27;
        sub_22E80F0F0(a1, 0);
        v25 = *(unsigned __int16 *)(a1 + 32);
        v29 = v25 == 22 && v26 == 0;
        if (v29)
          goto LABEL_36;
      }
      v36 = v6;
      sub_22E884578(a1, (int *)(a1 + 16), 1666, (uint64_t)__p);
      v53 = (void *)llvm::omp::getOpenMPClauseName();
      sub_22E3B89A8((unsigned __int8 **)__p, v53, v54);
      v55 = (unsigned __int8 *)__p[0];
      if (!__p[0])
      {
        v55 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
        __p[0] = v55;
      }
      v55[*v55 + 1] = 2;
      v56 = __p[0];
      v57 = *(unsigned __int8 *)__p[0];
      *(_BYTE *)__p[0] = v57 + 1;
      v56[v57 + 2] = 0;
      sub_22E3BB0B8((uint64_t)__p);
      sub_22E80FADC(a1 + 2336, v144);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
      v11 = 1;
      goto LABEL_143;
    }
LABEL_36:
    sub_22E811E8C((uint64_t)&v173);
    __p[0] = v166;
    __p[1] = (void *)0x600000000;
    sub_22E47EDD0((uint64_t)__p, 1uLL, 0);
    v168 = 55;
    v169 = v171;
    v170 = 0x800000000;
    v171[16] = v172;
    v30 = 34;
    v171[17] = 0x800000000;
    v172[4] = 1;
    do
    {
      LODWORD(__p[v30]) = -1;
      v30 += 3;
    }
    while (v30 != 46);
    sub_22F0C382C(v141, v142, __p);
    v31 = (_DWORD *)sub_22E861A70((uint64_t)&v180, (unint64_t)__p, 1);
    sub_22F2ED178((uint64_t)v180 + 368 * v181, v31);
    LODWORD(v181) = v181 + 1;
    sub_22F2ECBAC((uint64_t)__p);
    v22 = *(unsigned __int16 *)(a1 + 32);
    v7 = v149;
  }
  while (v22 != 430);
LABEL_39:
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(v32 + 2832);
  *(_QWORD *)(v32 + 2816) = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v32 + 2832) = v33 - 8;
  v34 = *(_QWORD *)(v32 + 1008);
  if (v34)
  {
    v36 = v6;
    if (*(_QWORD *)(v34 + 224))
      v137 = 3;
    else
      v137 = 0;
    *(_DWORD *)(v32 + 1048) = v137;
    v35 = v151;
  }
  else
  {
    v35 = v151;
    v36 = v6;
    if (*(_QWORD *)(v32 + 1040))
      v37 = 1;
    else
      v37 = 2;
    *(_DWORD *)(v32 + 1048) = v37;
  }
  v38 = v159;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v158;
  *(_OWORD *)(a1 + 64) = v38;
  *v9 = v156;
  *(_QWORD *)(a1 + 32) = v157;
  sub_22E80FADC(a1 + 2336, v144);
  *(_WORD *)(a1 + 80) = v139;
  *(_WORD *)(a1 + 82) = v138;
  *(_WORD *)(a1 + 84) = v140;
  v163[0] = &off_24FAA4C10;
  v163[1] = a1;
  v163[2] = v35;
  v164 = v163;
  sub_22F0C45F8((uint64_t)__p, v142, (uint64_t)v163, 0, 0, 0);
  BestVariantMatchForContext = llvm::omp::getBestVariantMatchForContext();
  v40 = *(unsigned __int16 *)(a1 + 32);
  if (v40 == 430)
  {
    v11 = 1;
  }
  else
  {
    v114 = BestVariantMatchForContext;
    if (BestVariantMatchForContext)
    {
      v11 = 1;
      v115 = 1;
      while (1)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E811DE8((uint64_t)&v173);
        v116 = *(unsigned __int16 *)(a1 + 32);
        if (v116 != 22)
        {
          v117 = 0;
          do
          {
            if (v116 == 21)
              v118 = v117 + 1;
            else
              v118 = v117;
            v117 = v118 - (v116 == 22);
            sub_22E80F0F0(a1, 0);
            v116 = *(unsigned __int16 *)(a1 + 32);
          }
          while (v116 != 22 || v117 != 0);
        }
        sub_22E811E8C((uint64_t)&v173);
        v40 = *(unsigned __int16 *)(a1 + 32);
        if (v40 == 430)
          break;
        v29 = v115++ == v114;
        if (v29)
          goto LABEL_190;
      }
    }
    else
    {
LABEL_190:
      if ((v40 - 399) >= 0x29)
      {
        sub_22F1413E0(a1 + 16, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&v154);
        v120 = llvm::omp::getOpenMPClauseKind();
        if (v155 < 0)
          operator delete(v154);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E811DE8((uint64_t)&v173);
        if (v120 == 92)
        {
          v121 = sub_22F36FB58(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88));
          sub_22E8585DC(a1, v121);
          sub_22E80F0F0(a1, 0);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E811DE8((uint64_t)&v173);
      }
      if (*(_WORD *)(a1 + 32) == 22)
      {
        LOWORD(v154) = 430;
        v11 = 1;
        sub_22E885940(a1, (unsigned __int16 *)&v154, 1, 0);
      }
      else
      {
        v11 = sub_22E85F01C(a1, a2, 1);
      }
    }
  }
  sub_22F2ECA24(__p);
  if (v164 == v163)
  {
    v122 = (void (**)(void))(v163[0] + 32);
LABEL_203:
    (*v122)();
  }
  else if (v164)
  {
    v122 = (void (**)(void))(*v164 + 40);
    goto LABEL_203;
  }
LABEL_144:
  *(_BYTE *)v173 = BYTE8(v173);
  v97 = (uint64_t *)v180;
  if ((_DWORD)v181)
  {
    v98 = 368 * v181;
    v99 = (char *)v180 - 368;
    do
    {
      sub_22F2ECBAC((uint64_t)&v99[v98]);
      v98 -= 368;
    }
    while (v98);
    v97 = (uint64_t *)v180;
  }
  v6 = v36;
  v8 = v147;
  if (v97 != &v182)
LABEL_149:
    free(v97);
LABEL_150:
  if (v189[0] != v190)
    free(v189[0]);
  if (v191 != v193)
    free(v191);
  sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 82) = v7;
  *(_WORD *)(a1 + 84) = v8;
  *(_BYTE *)(a1 + 946) = v5;
  return v11;
}

void sub_22E860744(uint64_t a1, uint64_t a2, char a3)
{
  int v4;
  BOOL v6;
  uint64_t v7;
  void *OpenMPClauseName;
  size_t v9;
  void *v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15[4];
  unsigned int v16[2];
  int v17;
  int v18;
  int v19;
  char v20;

  v4 = a2;
  sub_22E85B630((uint64_t)v16, a1, a2);
  if (v20 && (a3 & 1) == 0)
  {
    if (v4 == 16
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) <= 0x32u ? (v6 = v16[0] == 2) : (v6 = 0), v6))
    {
      v7 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v7 + 312) = v17;
      *(_DWORD *)(v7 + 316) = 1671;
      if (*(char *)(v7 + 311) < 0)
      {
        **(_BYTE **)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v7 + 288) = 0;
        *(_BYTE *)(v7 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v15, v7);
      OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
      sub_22E3B89A8(v15, OpenMPClauseName, v9);
      v10 = (void *)llvm::omp::getOpenMPClauseName();
      sub_22E3B89A8(v15, v10, v11);
      v12 = v15[0];
      if (!v15[0])
      {
        v12 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v15[1]);
        v15[0] = v12;
      }
      v12[*v12 + 1] = 1;
      v13 = v15[0];
      v14 = *v15[0];
      *v15[0] = v14 + 1;
      *(_QWORD *)&v13[8 * v14 + 16] = "5.1";
      sub_22E3BB0B8((uint64_t)v15);
    }
    else
    {
      sub_22F33E588(*(_QWORD **)(a1 + 88), v4, v16[0], v18, v17, v16[1], v19);
    }
  }
}

uint64_t sub_22E8608A8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[32];
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;

  v12 = (_BYTE *)(a1 + 944);
  v13 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v14 = a1;
  v15 = 1441813;
  v16 = 61;
  v18 = 0;
  v19 = 0;
  v17 = sub_22E80F720;
  if (sub_22E88C650((uint64_t)&v12, 1510, "mapper", 0))
  {
LABEL_13:
    LODWORD(v9) = 1441853;
    WORD2(v9) = 430;
    sub_22E885940(a1, (unsigned __int16 *)&v9, 3, 2);
    result = 1;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    sub_22E8408AC(a1, a2 + 16, 0, 0, 0, 0, 0, 0, 0, 0);
  v4 = *(unsigned __int16 *)(a1 + 32);
  if (v4 != 5 && v4 != 82)
  {
    v8 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v8 + 316) = 1675;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v11, v8);
    sub_22E3BB0B8((uint64_t)v11);
    goto LABEL_13;
  }
  if ((v4 - 7) >= 0xC)
    v5 = *(_QWORD *)(a1 + 24);
  else
    v5 = 0;
  v6 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)&v9 = v5;
  DWORD2(v9) = v6;
  sub_22EFC6D6C((uint64_t)&v10, v5);
  *(_OWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  result = sub_22E811E8C((uint64_t)&v12);
LABEL_14:
  *v12 = v13;
  return result;
}

uint64_t sub_22E860A60(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v39;
  int v40;
  char v41;
  int v42;
  uint64_t v43;
  _BYTE v44[32];
  _BYTE v45[32];
  _QWORD v46[4];
  _BYTE *v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[34];

  v57[32] = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 40);
  v47 = (_BYTE *)(a1 + 944);
  v48 = *(_BYTE *)(a1 + 944);
  v4 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v49 = a1;
  v50 = 1441813;
  v51 = 430;
  v53 = 0;
  v54 = 0;
  v52 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v47, 1510, "iterator", 0) & 1) != 0)
    goto LABEL_45;
  v39 = v54;
  v55 = v57;
  v56 = 0x400000000;
  while (1)
  {
    v5 = *(unsigned __int16 *)(a1 + 32);
    if (v5 != 5)
      break;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(v6 + 2816);
    if (v7 >= *(unsigned int *)(v6 + 2784))
      v8 = sub_22F162D2C(v6, 1u);
    else
      v8 = *(_QWORD *)(v6 + 2776) + 24 * v7;
    if (*(_WORD *)(v8 + 16) == 63)
    {
      v9 = 0;
      goto LABEL_14;
    }
LABEL_12:
    v10 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, 0);
    if (v11)
    {
      sub_22F2F18E0((uint64_t)&v47);
      v4 = 1;
      goto LABEL_43;
    }
    v9 = v10;
LABEL_14:
    if (*(_WORD *)(a1 + 32) == 5)
    {
      v43 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v42 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      sub_22E884578(a1, (int *)v2, 1544, (uint64_t)v46);
      v12 = (unsigned __int8 *)v46[0];
      if (!v46[0])
      {
        v12 = (unsigned __int8 *)sub_22E3B8AAC(v46[1]);
        v46[0] = v12;
      }
      v12[*v12 + 1] = 2;
      v13 = v46[0];
      v14 = *(unsigned __int8 *)v46[0];
      *(_BYTE *)v46[0] = v14 + 1;
      *(_QWORD *)(v13 + 8 * v14 + 16) = 0;
      sub_22E3BB0B8((uint64_t)v46);
      v42 = 0;
      v43 = 0;
    }
    if (*(_WORD *)(a1 + 32) == 63)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v40 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      sub_22E884578(a1, (int *)v2, 1663, (uint64_t)v45);
      sub_22E3BB0B8((uint64_t)v45);
      v40 = 0;
    }
    v41 = *(_BYTE *)(a1 + 945);
    *(_BYTE *)(a1 + 945) = 1;
    v15 = *(_DWORD *)(a1 + 16);
    v16 = sub_22E838554(a1, 0, 0, 0, 0, 0);
    v17 = *(_QWORD *)(a1 + 88);
    v18 = sub_22E83778C(a1, v16, 3);
    if ((v18 & 1) == 0)
      v18 = (uint64_t)sub_22EBBCB14(v17, (_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v46);
    v19 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v18 & 0xFFFFFFFFFFFFFFFELL, v15, 0, 0);
    v20 = 0;
    if (*(_WORD *)(a1 + 32) == 61)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v20 = *(_DWORD *)(a1 + 40);
    }
    v21 = *(_DWORD *)(a1 + 16);
    v22 = sub_22E838554(a1, 0, 0, 0, 0, 0);
    v23 = *(_QWORD *)(a1 + 88);
    v24 = sub_22E83778C(a1, v22, 3);
    if ((v24 & 1) == 0)
      v24 = (uint64_t)sub_22EBBCB14(v23, (_DWORD *)(v24 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v46);
    v25 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v24 & 0xFFFFFFFFFFFFFFFELL, v21, 0, 0);
    v26 = *(unsigned __int16 *)(a1 + 32);
    if (v26 == 61)
    {
      v27 = v19;
      v28 = v3;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v29 = *(_DWORD *)(a1 + 40);
      v30 = *(_DWORD *)(a1 + 16);
      v31 = sub_22E838554(a1, 0, 0, 0, 0, 0);
      v32 = *(_QWORD *)(a1 + 88);
      v33 = sub_22E83778C(a1, v31, 3);
      if ((v33 & 1) == 0)
        v33 = (uint64_t)sub_22EBBCB14(v32, (_DWORD *)(v33 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v46);
      v34 = sub_22EBCF22C(*(_QWORD *)(a1 + 88), v33 & 0xFFFFFFFFFFFFFFFELL, v30, 0, 0);
      v26 = *(unsigned __int16 *)(a1 + 32);
      v3 = v28;
      v19 = v27;
    }
    else
    {
      v29 = 0;
      v34 = 0;
    }
    if (v26 != 22 && v26 != 65)
    {
      sub_22E884578(a1, (int *)v2, 1668, (uint64_t)v44);
      sub_22E3BB0B8((uint64_t)v44);
      v26 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v26 == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
    }
    v35 = sub_22F2EC860((uint64_t)&v55);
    *(_QWORD *)v35 = v43;
    *(_DWORD *)(v35 + 8) = v42;
    *(_DWORD *)(v35 + 48) = v40;
    *(_DWORD *)(v35 + 52) = v20;
    *(_DWORD *)(v35 + 56) = v29;
    *(_QWORD *)(v35 + 16) = v9;
    *(_QWORD *)(v35 + 24) = v19 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v35 + 32) = v25 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v35 + 40) = v34 & 0xFFFFFFFFFFFFFFFELL;
    *(_BYTE *)(a1 + 945) = v41;
  }
  if (v5 != 22 && v5 != 430)
    goto LABEL_12;
  v36 = *(_DWORD *)(a1 + 16);
  if (sub_22E811E8C((uint64_t)&v47))
    v37 = v36;
  else
    v37 = HIDWORD(v54);
  v4 = sub_22EB2C3A8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v3, v39, v37, (uint64_t)v55, v56);
LABEL_43:
  if (v55 != v57)
    free(v55);
LABEL_45:
  *v47 = v48;
  return v4;
}

uint64_t sub_22E860FBC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v9;

  result = llvm::omp::getOpenMPDirectiveKind();
  if ((_DWORD)result == 89)
  {
    v5 = 0;
    switch(a2)
    {
      case 3:
        if (*(_WORD *)a1 != 28261 || *(_BYTE *)(a1 + 2) != 100)
          goto LABEL_41;
        v5 = 0x100000068;
        break;
      case 4:
        if (*(_DWORD *)a1 == 1635017060)
        {
          v5 = 0x100000066;
        }
        else
        {
          if (*(_DWORD *)a1 != 1953069157)
            goto LABEL_41;
          v5 = 0x10000006BLL;
        }
        break;
      case 5:
        if (*(_DWORD *)a1 == 1702129253 && *(_BYTE *)(a1 + 4) == 114)
        {
          v5 = 0x10000006ALL;
        }
        else
        {
          if (*(_DWORD *)a1 != 1852403568 || *(_BYTE *)(a1 + 4) != 116)
          {
            v9 = *(_DWORD *)a1 ^ 0x69676562 | *(unsigned __int8 *)(a1 + 4) ^ 0x6E;
            v5 = 0x100000076;
            goto LABEL_31;
          }
          v5 = 0x10000006CLL;
        }
        break;
      case 6:
        if (*(_DWORD *)a1 != 1633972341 || *(_WORD *)(a1 + 4) != 25972)
        {
          v9 = *(_DWORD *)a1 ^ 0x7070616D | *(unsigned __int16 *)(a1 + 4) ^ 0x7265;
          v5 = 0x100000074;
          goto LABEL_31;
        }
        v5 = 0x100000070;
        break;
      case 7:
        if (*(_DWORD *)a1 == 1818453348 && *(_DWORD *)(a1 + 3) == 1701994860)
        {
          v5 = 0x100000067;
        }
        else
        {
          v9 = *(_DWORD *)a1 ^ 0x69726176 | *(_DWORD *)(a1 + 3) ^ 0x746E6169;
          v5 = 0x100000075;
LABEL_31:
          if (v9)
            v5 = 0;
        }
        break;
      case 9:
        if (*(_QWORD *)a1 ^ 0x6F69746375646572 | *(unsigned __int8 *)(a1 + 8) ^ 0x6ELL)
          v5 = 0;
        else
          v5 = 0x10000006DLL;
        break;
      case 12:
        if (*(_QWORD *)a1 == 0x616C6C65636E6163 && *(_DWORD *)(a1 + 8) == 1852795252)
          v5 = 0x100000065;
        else
LABEL_41:
          v5 = 0;
        break;
      default:
        break;
    }
    if ((v5 & 0x300000000) != 0)
      return v5;
    else
      return 89;
  }
  return result;
}

uint64_t sub_22E861244(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (result != a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_QWORD *)result == result + 16 || *(_QWORD *)a2 == a2 + 16)
    {
      if (*(_DWORD *)(result + 12) < *(_DWORD *)(a2 + 8))
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v3 + 8);
      if (*(_DWORD *)(a2 + 12) < v7)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(v3 + 8);
      }
      v8 = *(_DWORD *)(a2 + 8);
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = v7;
      if ((_DWORD)v9)
      {
        v10 = 0;
        do
        {
          v11 = (__int128 *)(*(_QWORD *)v3 + v10);
          v12 = (__int128 *)(*(_QWORD *)a2 + v10);
          v13 = *((_QWORD *)v11 + 2);
          v14 = *v11;
          v15 = *((_QWORD *)v12 + 2);
          *v11 = *v12;
          *((_QWORD *)v11 + 2) = v15;
          *v12 = v14;
          *((_QWORD *)v12 + 2) = v13;
          v10 += 24;
        }
        while (24 * v9 != v10);
        v7 = *(_DWORD *)(v3 + 8);
        v8 = *(_DWORD *)(a2 + 8);
      }
      v16 = v7 - v8;
      if (v7 <= v8)
      {
        v17 = v8 - v7;
        if (v8 > v7)
        {
          if ((_DWORD)v9 != v8)
          {
            result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 24 * v7), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v8 - (*(_QWORD *)a2 + 24 * v9));
            v7 = *(_DWORD *)(v3 + 8);
          }
          *(_DWORD *)(v3 + 8) = v17 + v7;
          *(_DWORD *)(a2 + 8) = v9;
        }
      }
      else
      {
        if ((_DWORD)v9 != v7)
        {
          result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + 24 * v8), (const void *)(*(_QWORD *)v3 + 24 * v9), *(_QWORD *)v3 + 24 * v7 - (*(_QWORD *)v3 + 24 * v9));
          v8 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v16 + v8;
        *(_DWORD *)(v3 + 8) = v9;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

_QWORD *sub_22E8613F4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E861424;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E861424(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = sub_22E9C487C();
  *(_BYTE *)(v1 + 948) = 1;
  return result;
}

unint64_t sub_22E86147C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2BFB24(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2BFB24(a1);
    }
  }
  return v3;
}

unint64_t sub_22E8614E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 136 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2BF970(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2BF970(a1);
    }
  }
  return v3;
}

uint64_t sub_22E86154C(uint64_t a1, uint64_t **a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  if ((uint64_t **)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v10 = *a2;
        v11 = (uint64_t)&(*a2)[7 * v4];
        v12 = *(_QWORD *)a1;
        do
        {
          v13 = *v10;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v10 + 2);
          *(_QWORD *)v12 = v13;
          sub_22F2E32AC(v12 + 16, (uint64_t)(v10 + 2));
          v12 += 56;
          v10 += 7;
        }
        while (v10 != (uint64_t *)v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v12 = *(_QWORD *)a1;
      }
      for (i = v14 + 56 * v5; i != v12; i -= 56)
      {
        v16 = *(void **)(i - 40);
        if ((void *)(i - 24) != v16)
          free(v16);
      }
      goto LABEL_26;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD *)a1;
        v18 = 56 * v5;
        do
        {
          v19 = *(void **)(v17 + v18 - 40);
          if ((void *)(v17 + v18 - 24) != v19)
            free(v19);
          v18 -= 56;
        }
        while (v18);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2BFB24(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = (uint64_t)&(*a2)[7 * v5];
      v8 = *(_QWORD *)a1;
      do
      {
        v9 = *v6;
        *(_DWORD *)(v8 + 8) = *((_DWORD *)v6 + 2);
        *(_QWORD *)v8 = v9;
        sub_22F2E32AC(v8 + 16, (uint64_t)(v6 + 2));
        v6 += 7;
        v8 += 56;
      }
      while (v6 != (uint64_t *)v7);
LABEL_25:
      v20 = *((unsigned int *)a2 + 2);
      if (v5 != v20)
      {
        v22 = *a2;
        v23 = &v22[7 * v20];
        v24 = *(_QWORD *)a1;
        v25 = 7 * v5;
        do
        {
          v26 = &v22[v25];
          v27 = v24 + v25 * 8;
          v28 = v22[v25];
          *(_DWORD *)(v27 + 8) = v22[v25 + 1];
          *(_QWORD *)v27 = v28;
          *(_QWORD *)(v27 + 24) = 0x100000000;
          *(_QWORD *)(v27 + 16) = v24 + v25 * 8 + 32;
          if (LODWORD(v22[v25 + 3]))
            sub_22F2E32AC(v24 + v25 * 8 + 16, (uint64_t)(v26 + 2));
          v24 += 56;
          v22 += 7;
        }
        while (v26 + 7 != v23);
      }
LABEL_26:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_25;
  }
  return a1;
}

uint64_t sub_22E86173C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v11 = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  v4 = *a1;
  result = sub_22ECB0A64(*(_QWORD **)(*a1 + 88), *(uint64_t **)(*(_QWORD *)(*a1 + 88) + 12888), a2, &v11);
  v16 = result;
  if (result)
  {
    LODWORD(v15) = *((_DWORD *)a1 + 2);
    HIDWORD(v15) = DWORD2(v11);
    result = sub_22F2543D4((uint64_t)v13, a1[2], &v16, &v15);
    if (!v14)
    {
      v6 = *(_QWORD *)(v4 + 96);
      *(_DWORD *)(v6 + 312) = DWORD2(v11);
      *(_DWORD *)(v6 + 316) = 1654;
      if (*(char *)(v6 + 311) < 0)
      {
        **(_BYTE **)(v6 + 288) = 0;
        *(_QWORD *)(v6 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v6 + 288) = 0;
        *(_BYTE *)(v6 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v13, v6);
      v7 = v11;
      v8 = (unsigned __int8 *)v13[0];
      if (!v13[0])
      {
        v8 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
        v13[0] = v8;
      }
      v8[*v8 + 1] = 10;
      v9 = v13[0];
      v10 = *(unsigned __int8 *)v13[0];
      *(_BYTE *)v13[0] = v10 + 1;
      *(_QWORD *)(v9 + 8 * v10 + 16) = v7;
      return sub_22E3BB0B8((uint64_t)v13);
    }
  }
  return result;
}

unint64_t sub_22E861844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  result = sub_22EC82EF4(*(_QWORD **)(*(_QWORD *)(a1 + 48) + 88), *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) + 12888), a2, &v7, *(_DWORD *)(a1 + 56));
  if (result >= 2)
  {
    v5 = result & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_DWORD *)(a1 + 8);
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

void sub_22E8618E0(char **a1)
{
  _DWORD *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)a1 + 3) > 0x5Eu)
  {
    v3 = *a1;
    v2 = a1 + 1;
    v4 = *((unsigned int *)a1 + 2);
    v5 = 95;
    if (v4 < 0x5F)
      v5 = *((unsigned int *)a1 + 2);
    if (v5)
      bzero(v3, 8 * v5);
    if (v4 <= 0x5E)
      bzero(&v3[8 * v4], 760 - 8 * v4);
  }
  else
  {
    *((_DWORD *)a1 + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    bzero(*a1, 0x2F8uLL);
    v2 = a1 + 1;
  }
  *v2 = 95;
}

void sub_22E861988()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E86199C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FAA4BC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E8619D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAA4BC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E8619F4(uint64_t a1, uint64_t a2)
{
  void *v2;
  size_t v3;
  uint64_t v4;
  unsigned __int8 *v6[4];

  v2 = *(void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 316) = 2029;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v6, v4);
  sub_22E3B89A8(v6, v2, v3);
  return sub_22E3BB0B8((uint64_t)v6);
}

unint64_t sub_22E861A70(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 368 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2ECE34(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2ECE34(a1);
    }
  }
  return v3;
}

uint64_t sub_22E861AD8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_7;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
LABEL_6:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_7:
      *v7 = 0;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v8)
    {
      v13 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v8);
      v10 = v13;
LABEL_12:
      v11 = *v7;
      if (v10 != v11)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v11 - (*(_QWORD *)a2 + 8 * v10));
      goto LABEL_6;
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22E861BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v5)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v5);
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

void sub_22E861CCC()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22E861CE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FAA4C10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_22E861D18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FAA4C10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22E861D38(uint64_t a1, uint64_t a2)
{
  void *v2;
  size_t v3;
  uint64_t v4;
  unsigned __int8 *v6[4];

  v2 = *(void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 316) = 2029;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v6, v4);
  sub_22E3B89A8(v6, v2, v3);
  return sub_22E3BB0B8((uint64_t)v6);
}

uint64_t sub_22E861DB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v2 = operator new();
  *(_BYTE *)(v2 + 31) = 5;
  strcpy((char *)(v2 + 8), "align");
  *(_QWORD *)v2 = off_24FAA4C80;
  v3 = a1[72];
  a1[72] = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v2 = a1[72];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v2);
  v4 = operator new();
  *(_BYTE *)(v4 + 31) = 10;
  *(_QWORD *)v4 = off_24FAA4CB0;
  strcpy((char *)(v4 + 8), "visibility");
  v5 = a1[73];
  a1[73] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = a1[73];
  }
  sub_22F184264(a1[1], "GCC", 3uLL, v4);
  v6 = operator new();
  *(_BYTE *)(v6 + 31) = 7;
  strcpy((char *)(v6 + 8), "options");
  *(_QWORD *)v6 = off_24FAA4CE0;
  v7 = a1[74];
  a1[74] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[74];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v6);
  v8 = operator new();
  *(_BYTE *)(v8 + 31) = 4;
  strcpy((char *)(v8 + 8), "pack");
  *(_QWORD *)v8 = off_24FAA4D10;
  v9 = a1[75];
  a1[75] = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v8 = a1[75];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v8);
  v10 = operator new();
  *(_BYTE *)(v10 + 31) = 9;
  *(_QWORD *)v10 = off_24FAA4D40;
  strcpy((char *)(v10 + 8), "ms_struct");
  v11 = a1[76];
  a1[76] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v10 = a1[76];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v10);
  v12 = operator new();
  *(_BYTE *)(v12 + 31) = 6;
  strcpy((char *)(v12 + 8), "unused");
  *(_QWORD *)v12 = off_24FAA4D70;
  v13 = a1[77];
  a1[77] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = a1[77];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v12);
  v14 = operator new();
  *(_BYTE *)(v14 + 31) = 4;
  strcpy((char *)(v14 + 8), "weak");
  *(_QWORD *)v14 = off_24FAA4DA0;
  v15 = a1[78];
  a1[78] = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v14 = a1[78];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v14);
  v16 = operator new();
  *(_BYTE *)(v16 + 31) = 16;
  strcpy((char *)(v16 + 8), "redefine_extname");
  *(_QWORD *)v16 = off_24FAA4DD0;
  v17 = a1[79];
  a1[79] = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = a1[79];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v16);
  v18 = operator new();
  *(_BYTE *)(v18 + 31) = 11;
  *(_QWORD *)v18 = off_24FAA4E00;
  strcpy((char *)(v18 + 8), "FP_CONTRACT");
  v19 = a1[80];
  a1[80] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v18 = a1[80];
  }
  sub_22F184264(a1[1], "STDC", 4uLL, v18);
  v20 = operator new();
  *(_BYTE *)(v20 + 31) = 11;
  *(_QWORD *)v20 = off_24FAA4E30;
  strcpy((char *)(v20 + 8), "FENV_ACCESS");
  v21 = a1[108];
  a1[108] = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = a1[108];
  }
  sub_22F184264(a1[1], "STDC", 4uLL, v20);
  v22 = operator new();
  *(_BYTE *)(v22 + 31) = 10;
  *(_QWORD *)v22 = off_24FAA4E60;
  strcpy((char *)(v22 + 8), "FENV_ROUND");
  v23 = a1[109];
  a1[109] = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v22 = a1[109];
  }
  sub_22F184264(a1[1], "STDC", 4uLL, v22);
  v24 = operator new();
  *(_BYTE *)(v24 + 31) = 16;
  strcpy((char *)(v24 + 8), "CX_LIMITED_RANGE");
  *(_QWORD *)v24 = off_24FAA4E90;
  v25 = a1[110];
  a1[110] = v24;
  if (v25)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v24 = a1[110];
  }
  sub_22F184264(a1[1], "STDC", 4uLL, v24);
  v26 = (_OWORD *)operator new();
  *v26 = 0u;
  v26[1] = 0u;
  *(_QWORD *)v26 = off_24FAA4EC0;
  v27 = a1[111];
  a1[111] = (uint64_t)v26;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v26 = (_OWORD *)a1[111];
  }
  sub_22F184264(a1[1], "STDC", 4uLL, (uint64_t)v26);
  v28 = a1[11];
  v29 = operator new();
  *(_BYTE *)(v29 + 31) = 7;
  strcpy((char *)(v29 + 8), "section");
  *(_QWORD *)v29 = off_24FAA4EF0;
  *(_QWORD *)(v29 + 32) = v28;
  v30 = a1[83];
  a1[83] = v29;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v29 = a1[83];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v29);
  v31 = *(_QWORD *)(a1[1] + 56);
  if ((*(_DWORD *)(v31 + 52) & 0x40000000) != 0)
  {
    v32 = operator new();
    *(_BYTE *)(v32 + 31) = 9;
    *(_QWORD *)v32 = off_24FAA4F20;
    strcpy((char *)(v32 + 8), "EXTENSION");
    v33 = a1[81];
    a1[81] = v32;
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v32 = a1[81];
    }
    sub_22F184264(a1[1], "OPENCL", 6uLL, v32);
    sub_22F184264(a1[1], "OPENCL", 6uLL, a1[80]);
    v31 = *(_QWORD *)(a1[1] + 56);
  }
  v34 = *(_DWORD *)(v31 + 72);
  v35 = operator new();
  v36 = v35;
  *(_BYTE *)(v35 + 31) = 3;
  *(_DWORD *)(v35 + 8) = 7368047;
  if (v34)
    v37 = off_24FAA4F50;
  else
    v37 = off_24FAA4F80;
  *(_QWORD *)v35 = v37;
  v38 = a1[82];
  a1[82] = v36;
  if (v38)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v36 = a1[82];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v36);
  v39 = a1[1];
  if ((**(_BYTE **)(v39 + 56) & 0x20) != 0 || *(_DWORD *)(*(_QWORD *)(v39 + 64) + 76) == 3)
  {
    v40 = a1[11];
    v41 = operator new();
    *(_BYTE *)(v41 + 31) = 7;
    strcpy((char *)(v41 + 8), "comment");
    *(_QWORD *)v41 = off_24FAA4FB0;
    *(_QWORD *)(v41 + 32) = v40;
    v42 = a1[84];
    a1[84] = v41;
    if (v42)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v41 = a1[84];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v41);
  }
  v43 = operator new();
  *(_BYTE *)(v43 + 31) = 13;
  *(_QWORD *)v43 = off_24FAA4FE0;
  strcpy((char *)(v43 + 8), "float_control");
  v44 = a1[87];
  a1[87] = v43;
  if (v44)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v43 = a1[87];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v43);
  v45 = *(_BYTE **)(a1[1] + 56);
  if ((*v45 & 0x20) != 0)
  {
    v46 = a1[11];
    v47 = operator new();
    *(_BYTE *)(v47 + 31) = 15;
    *(_QWORD *)v47 = off_24FAA5010;
    strcpy((char *)(v47 + 8), "detect_mismatch");
    *(_QWORD *)(v47 + 32) = v46;
    v48 = a1[85];
    a1[85] = v47;
    if (v48)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      v47 = a1[85];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v47);
    v49 = operator new();
    *(_BYTE *)(v49 + 31) = 19;
    strcpy((char *)(v49 + 8), "pointers_to_members");
    *(_QWORD *)v49 = off_24FAA5040;
    v50 = a1[88];
    a1[88] = v49;
    if (v50)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v49 = a1[88];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v49);
    v51 = operator new();
    *(_BYTE *)(v51 + 31) = 8;
    *(_QWORD *)v51 = off_24FAA5070;
    strcpy((char *)(v51 + 8), "vtordisp");
    v52 = a1[89];
    a1[89] = v51;
    if (v52)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v51 = a1[89];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v51);
    v53 = operator new();
    *(_BYTE *)(v53 + 31) = 8;
    *(_QWORD *)v53 = off_24FAA50A0;
    strcpy((char *)(v53 + 8), "init_seg");
    v54 = a1[90];
    a1[90] = v53;
    if (v54)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v53 = a1[90];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v53);
    v55 = operator new();
    *(_BYTE *)(v55 + 31) = 8;
    *(_QWORD *)v55 = off_24FAA50A0;
    strcpy((char *)(v55 + 8), "data_seg");
    v56 = a1[91];
    a1[91] = v55;
    if (v56)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      v55 = a1[91];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v55);
    v57 = operator new();
    *(_BYTE *)(v57 + 31) = 7;
    strcpy((char *)(v57 + 8), "bss_seg");
    *(_QWORD *)v57 = off_24FAA50A0;
    v58 = a1[92];
    a1[92] = v57;
    if (v58)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      v57 = a1[92];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v57);
    v59 = operator new();
    *(_BYTE *)(v59 + 31) = 9;
    *(_QWORD *)v59 = off_24FAA50A0;
    strcpy((char *)(v59 + 8), "const_seg");
    v60 = a1[93];
    a1[93] = v59;
    if (v60)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      v59 = a1[93];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v59);
    v61 = operator new();
    *(_BYTE *)(v61 + 31) = 8;
    *(_QWORD *)v61 = off_24FAA50A0;
    strcpy((char *)(v61 + 8), "code_seg");
    v62 = a1[94];
    a1[94] = v61;
    if (v62)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v61 = a1[94];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v61);
    v63 = operator new();
    *(_BYTE *)(v63 + 31) = 7;
    strcpy((char *)(v63 + 8), "section");
    *(_QWORD *)v63 = off_24FAA50A0;
    v64 = a1[95];
    a1[95] = v63;
    if (v64)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      v63 = a1[95];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v63);
    v65 = operator new();
    *(_BYTE *)(v65 + 31) = 14;
    *(_QWORD *)v65 = off_24FAA50D0;
    strcpy((char *)(v65 + 8), "runtime_checks");
    v66 = a1[96];
    a1[96] = v65;
    if (v66)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      v65 = a1[96];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v65);
    v67 = operator new();
    *(_BYTE *)(v67 + 31) = 9;
    *(_QWORD *)v67 = off_24FAA5100;
    strcpy((char *)(v67 + 8), "intrinsic");
    v68 = a1[97];
    a1[97] = v67;
    if (v68)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      v67 = a1[97];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v67);
    v69 = operator new();
    *(_BYTE *)(v69 + 31) = 8;
    *(_QWORD *)v69 = off_24FAA5130;
    strcpy((char *)(v69 + 8), "optimize");
    v70 = a1[98];
    a1[98] = v69;
    if (v70)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      v69 = a1[98];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v69);
    v71 = operator new();
    *(_BYTE *)(v71 + 31) = 11;
    *(_QWORD *)v71 = off_24FAA5160;
    strcpy((char *)(v71 + 8), "fenv_access");
    v72 = a1[99];
    a1[99] = v71;
    if (v72)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      v71 = a1[99];
    }
    sub_22F182804(*(_QWORD *)(a1[1] + 688), v71);
    v45 = *(_BYTE **)(a1[1] + 56);
  }
  if ((v45[68] & 0x20) != 0)
  {
    v73 = a1[11];
    v74 = operator new();
    strcpy((char *)(v74 + 8), "force_cuda_host_device");
    *(_BYTE *)(v74 + 31) = 22;
    *(_QWORD *)v74 = off_24FAA5190;
    *(_QWORD *)(v74 + 32) = v73;
    v75 = a1[100];
    a1[100] = v74;
    if (v75)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
      v74 = a1[100];
    }
    sub_22F184264(a1[1], "clang", 5uLL, v74);
  }
  v76 = a1[11];
  v77 = operator new();
  *(_BYTE *)(v77 + 31) = 8;
  *(_QWORD *)v77 = off_24FAA51C0;
  strcpy((char *)(v77 + 8), "optimize");
  *(_QWORD *)(v77 + 32) = v76;
  v78 = a1[101];
  a1[101] = v77;
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    v77 = a1[101];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v77);
  v79 = operator new();
  *(_BYTE *)(v79 + 31) = 4;
  strcpy((char *)(v79 + 8), "loop");
  *(_QWORD *)v79 = off_24FAA51F0;
  v80 = a1[102];
  a1[102] = v79;
  if (v80)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    v79 = a1[102];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v79);
  v81 = operator new();
  *(_BYTE *)(v81 + 31) = 6;
  strcpy((char *)(v81 + 8), "unroll");
  *(_QWORD *)v81 = off_24FAA5220;
  v82 = a1[103];
  a1[103] = v81;
  if (v82)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
    v81 = a1[103];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v81);
  sub_22F184264(a1[1], "GCC", 3uLL, a1[103]);
  v83 = operator new();
  *(_BYTE *)(v83 + 31) = 8;
  *(_QWORD *)v83 = off_24FAA5220;
  strcpy((char *)(v83 + 8), "nounroll");
  v84 = a1[104];
  a1[104] = v83;
  if (v84)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
    v83 = a1[104];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v83);
  sub_22F184264(a1[1], "GCC", 3uLL, a1[104]);
  v85 = operator new();
  *(_BYTE *)(v85 + 31) = 14;
  *(_QWORD *)v85 = off_24FAA5220;
  strcpy((char *)(v85 + 8), "unroll_and_jam");
  v86 = a1[105];
  a1[105] = v85;
  if (v86)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    v85 = a1[105];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v85);
  v87 = operator new();
  *(_BYTE *)(v87 + 31) = 16;
  strcpy((char *)(v87 + 8), "nounroll_and_jam");
  *(_QWORD *)v87 = off_24FAA5220;
  v88 = a1[106];
  a1[106] = v87;
  if (v88)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    v87 = a1[106];
  }
  sub_22F182804(*(_QWORD *)(a1[1] + 688), v87);
  v89 = operator new();
  *(_BYTE *)(v89 + 31) = 2;
  strcpy((char *)(v89 + 8), "fp");
  *(_QWORD *)v89 = off_24FAA5250;
  v90 = a1[107];
  a1[107] = v89;
  if (v90)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    v89 = a1[107];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v89);
  v91 = operator new();
  *(_BYTE *)(v91 + 31) = 9;
  *(_QWORD *)v91 = off_24FAA5280;
  strcpy((char *)(v91 + 8), "attribute");
  *(_QWORD *)(v91 + 32) = 0;
  *(_QWORD *)(v91 + 40) = 0;
  *(_QWORD *)(v91 + 48) = a1 + 120;
  *(_QWORD *)(v91 + 56) = 0;
  v92 = a1[112];
  a1[112] = v91;
  if (v92)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
    v91 = a1[112];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v91);
  v93 = operator new();
  *(_BYTE *)(v93 + 31) = 15;
  *(_QWORD *)v93 = off_24FAA52B0;
  strcpy((char *)(v93 + 8), "max_tokens_here");
  v94 = a1[113];
  a1[113] = v93;
  if (v94)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    v93 = a1[113];
  }
  sub_22F184264(a1[1], "clang", 5uLL, v93);
  v95 = operator new();
  *(_BYTE *)(v95 + 31) = 16;
  strcpy((char *)(v95 + 8), "max_tokens_total");
  *(_QWORD *)v95 = off_24FAA52E0;
  v96 = a1[114];
  a1[114] = v95;
  if (v96)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    v95 = a1[114];
  }
  result = sub_22F184264(a1[1], "clang", 5uLL, v95);
  if ((*(_BYTE *)(*(_QWORD *)(a1[1] + 56) + 104) & 0x20) != 0)
  {
    v98 = operator new();
    *(_BYTE *)(v98 + 31) = 2;
    strcpy((char *)(v98 + 8), "fp");
    *(_QWORD *)v98 = off_24FAA5310;
    v99 = a1[115];
    a1[115] = v98;
    if (v99)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
      v98 = a1[115];
    }
    sub_22F184264(a1[1], "METAL", 5uLL, v98);
    v100 = operator new();
    *(_BYTE *)(v100 + 31) = 9;
    *(_QWORD *)v100 = off_24FAA5340;
    strcpy((char *)(v100 + 8), "internals");
    v101 = a1[116];
    a1[116] = v100;
    if (v101)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
      v100 = a1[116];
    }
    return sub_22F184264(a1[1], "METAL", 5uLL, v100);
  }
  return result;
}

uint64_t sub_22E8631D8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 20);
  v3 = a1 + 16;
  if (!v2)
    v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v2;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v3);
  v5 = *(unsigned __int16 *)(v3 + 16);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 24);
  sub_22F31E688(*(_QWORD **)(v3 + 72), v8, v4, *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  return sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v3);
}

void sub_22E863268(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 20);
  v4 = a1 + 16;
  if (!v2)
    v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v2;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v5 = *(unsigned __int16 *)(v4 + 16);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v11 = 0;
  else
    v11 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v7;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v8 = *(unsigned __int16 *)(a1 + 32);
  if ((v8 - 7) < 6 || ((v8 - 13) >= 6 ? (v9 = v8 == 1) : (v9 = 1), v9))
    v12 = 0;
  else
    v12 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v10;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  sub_22EA3D3BC(*(_QWORD **)(a1 + 88), v11, v12, v3, v7, v10);
}

void sub_22E863354(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 20);
  v4 = a1 + 16;
  if (!v2)
    v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v2;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v5 = *(unsigned __int16 *)(v4 + 16);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v11 = 0;
  else
    v11 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v7;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v8 = *(unsigned __int16 *)(a1 + 32);
  if ((v8 - 7) < 6 || ((v8 - 13) >= 6 ? (v9 = v8 == 1) : (v9 = 1), v9))
    v12 = 0;
  else
    v12 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v10;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  sub_22EA3D250(*(_QWORD **)(a1 + 88), v11, v12, v3, v7, v10);
}

uint64_t sub_22E863440(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[3];
  __int16 v14;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = a1 + 16;
  if (*(_DWORD *)(a1 + 20))
    v2 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v2;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v3);
  if (*(_WORD *)(v3 + 16) != 23)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v4 + 316) = 15;
    if (*(char *)(v4 + 311) < 0)
    {
      **(_BYTE **)(v4 + 288) = 0;
      *(_QWORD *)(v4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 288) = 0;
      *(_BYTE *)(v4 + 311) = 0;
    }
    v5 = (unsigned __int8 *)(v4 + 320);
    v13[0] = v4 + 320;
    v13[1] = 0;
    v13[2] = v4;
    v14 = 1;
    *(_BYTE *)(v4 + 320) = 0;
    *(_DWORD *)(v4 + 664) = 0;
    v6 = *(unsigned int *)(v4 + 776);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(v4 + 768);
      v8 = 56 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 9) < 0)
          operator delete(*(void **)(v7 + v8 - 32));
        v8 -= 56;
      }
      while (v8);
      LODWORD(v6) = *v5;
    }
    *(_DWORD *)(v4 + 776) = 0;
    v5[v6 + 1] = 4;
    *(_BYTE *)(v4 + 320) = v6 + 1;
    *(_QWORD *)&v5[8 * v6 + 16] = 23;
    sub_22E3BB0B8((uint64_t)v13);
    return 1;
  }
  v10 = *(_DWORD *)(a1 + 16);
  sub_22E885C30(a1, 4194313);
  sub_22F344D4C(*(_QWORD **)(a1 + 88), v10, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, 1u);
  v11 = sub_22E8788D0(a1, 0, 4194312);
  sub_22E885CF4(a1);
  v12 = *(_QWORD **)(a1 + 88);
  if ((v11 & 1) != 0)
  {
    sub_22F344E80((uint64_t)v12);
    return 1;
  }
  return sub_22ED37CF8(v12, v11 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22E8635C8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  size_t v11;
  _BYTE *v12;
  unsigned int v13;
  int Key;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  v5 = *((unsigned __int8 *)v4 + 8);
  v6 = *v4;
  v7 = *(_DWORD *)(a1 + 20);
  if (!v7)
    v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v7;
  result = sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v2);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_DWORD **)(v6 + 16);
  v13 = *v10;
  v12 = v10 + 4;
  v11 = v13;
  if (v13 == 3 && *(_WORD *)v12 == 27745 && v12[2] == 108)
  {
    if (!v5)
      return sub_22F421820(v9 + 24);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v17 + 312) = v3;
    *(_DWORD *)(v17 + 316) = 1997;
    if (*(char *)(v17 + 311) < 0)
    {
      **(_BYTE **)(v17 + 288) = 0;
      *(_QWORD *)(v17 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 311) = 0;
    }
    v22 = (unsigned __int8 *)(v17 + 320);
    v31 = v17 + 320;
    v32 = 0;
    v33 = v17;
    v34 = 1;
    *(_BYTE *)(v17 + 320) = 0;
    *(_DWORD *)(v17 + 664) = 0;
    v23 = *(unsigned int *)(v17 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v17 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
      LODWORD(v23) = *v22;
    }
    *(_DWORD *)(v17 + 776) = 0;
    v22[v23 + 1] = 2;
    *(_BYTE *)(v17 + 320) = v23 + 1;
    *(_QWORD *)&v22[8 * v23 + 16] = 1;
    return sub_22E3BB0B8((uint64_t)&v31);
  }
  if (v5 == 3)
    return result;
  if (v5 != 2)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v9 + 32) || !sub_22F4207E0(v9 + 24))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v16 + 312) = v3;
      *(_DWORD *)(v16 + 316) = 2020;
      if (*(char *)(v16 + 311) < 0)
      {
        **(_BYTE **)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v16 + 288) = 0;
        *(_BYTE *)(v16 + 311) = 0;
      }
      v18 = (unsigned __int8 *)(v16 + 320);
      v31 = v16 + 320;
      v32 = 0;
      v33 = v16;
      v34 = 1;
      *(_BYTE *)(v16 + 320) = 0;
      *(_DWORD *)(v16 + 664) = 0;
      v19 = *(unsigned int *)(v16 + 776);
      if (!(_DWORD)v19)
        goto LABEL_24;
      v20 = *(_QWORD *)(v16 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    else
    {
      if (sub_22F420958(v9 + 24, (uint64_t)v12, v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))
      {
        result = (uint64_t)sub_22F2BBFD8((llvm::StringMapImpl *)(v9 + 24), v12, v11);
        *(_BYTE *)(*(_QWORD *)result + 25) = v5 == 1;
        return result;
      }
      if (sub_22F4208FC(v9 + 24, (uint64_t)v12, v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        *(_DWORD *)(v16 + 312) = v3;
        *(_DWORD *)(v16 + 316) = 2004;
        if (*(char *)(v16 + 311) < 0)
        {
          **(_BYTE **)(v16 + 288) = 0;
          *(_QWORD *)(v16 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 288) = 0;
          *(_BYTE *)(v16 + 311) = 0;
        }
        v18 = (unsigned __int8 *)(v16 + 320);
        v31 = v16 + 320;
        v32 = 0;
        v33 = v16;
        v34 = 1;
        *(_BYTE *)(v16 + 320) = 0;
        *(_DWORD *)(v16 + 664) = 0;
        v19 = *(unsigned int *)(v16 + 776);
        if (!(_DWORD)v19)
          goto LABEL_24;
        v27 = *(_QWORD *)(v16 + 768);
        v28 = 56 * v19;
        do
        {
          if (*(char *)(v27 + v28 - 9) < 0)
            operator delete(*(void **)(v27 + v28 - 32));
          v28 -= 56;
        }
        while (v28);
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        *(_DWORD *)(v16 + 312) = v3;
        *(_DWORD *)(v16 + 316) = 2023;
        if (*(char *)(v16 + 311) < 0)
        {
          **(_BYTE **)(v16 + 288) = 0;
          *(_QWORD *)(v16 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 288) = 0;
          *(_BYTE *)(v16 + 311) = 0;
        }
        v18 = (unsigned __int8 *)(v16 + 320);
        v31 = v16 + 320;
        v32 = 0;
        v33 = v16;
        v34 = 1;
        *(_BYTE *)(v16 + 320) = 0;
        *(_DWORD *)(v16 + 664) = 0;
        v19 = *(unsigned int *)(v16 + 776);
        if (!(_DWORD)v19)
          goto LABEL_24;
        v29 = *(_QWORD *)(v16 + 768);
        v30 = 56 * v19;
        do
        {
          if (*(char *)(v29 + v30 - 9) < 0)
            operator delete(*(void **)(v29 + v30 - 32));
          v30 -= 56;
        }
        while (v30);
      }
    }
    LODWORD(v19) = *v18;
LABEL_24:
    *(_DWORD *)(v16 + 776) = 0;
    v18[v19 + 1] = 5;
    *(_BYTE *)(v16 + 320) = v19 + 1;
    *(_QWORD *)&v18[8 * v19 + 16] = v6;
    return sub_22E3BB0B8((uint64_t)&v31);
  }
  v26 = llvm::StringMapImpl::FindKey();
  if (v26 == -1
    || v26 == (unint64_t)*(unsigned int *)(v9 + 32)
    || (result = sub_22F420778(v9 + 24, (uint64_t)v12, v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)), (result & 1) == 0))
  {
    *(_BYTE *)(*sub_22F2BBFD8((llvm::StringMapImpl *)(v9 + 24), v12, v11) + 24) = 1;
    result = (uint64_t)sub_22F2BBFD8((llvm::StringMapImpl *)(v9 + 24), v12, v11);
    *(_BYTE *)(*(_QWORD *)result + 8) = 1;
  }
  return result;
}

uint64_t sub_22E863A08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v16;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE **)v2;
  *(_QWORD *)v2 = 0;
  sub_22F1735E4(v3, v4, *(unsigned int *)(v2 + 8), 1, 1, 1);
  v6 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  if (!v5)
    v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v5;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v7 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  v10 = *v7;
  v8 = v7 + 2;
  v9 = v10;
  v11 = v10;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if ((_DWORD)v10 == 7)
  {
    if (*(_DWORD *)v8 != 1601401698 || *(_DWORD *)((char *)v8 + 3) != 1734701919)
    {
      v16 = *(_DWORD *)v8 ^ 0x74636573 | *(_DWORD *)((char *)v8 + 3) ^ 0x6E6F6974;
      v14 = v16 == 0;
      if (v16)
        v13 = 0;
      else
        v13 = (unint64_t)sub_22E86429C & 0xFFFFFFFFFFFFFF00;
      v12 = (unint64_t)sub_22E86429C & 0xFF;
LABEL_19:
      if (!v14)
        v12 = 0;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v9 == 9)
  {
    if (*v8 != 0x65735F74736E6F63 || *((_BYTE *)v8 + 8) != 103)
      goto LABEL_26;
LABEL_27:
    v12 = (unint64_t)sub_22E863C24 & 0xFF;
    v13 = (unint64_t)sub_22E863C24 & 0xFFFFFFFFFFFFFF00;
    goto LABEL_28;
  }
  if (v9 != 8)
  {
LABEL_26:
    result = MEMORY[0](a1, v8, v11, v6);
    goto LABEL_29;
  }
  v12 = (unint64_t)sub_22E863C24 & 0xFF;
  v13 = (unint64_t)sub_22E863C24 & 0xFFFFFFFFFFFFFF00;
  if (*v8 != 0x6765735F61746164 && *v8 != 0x6765735F65646F63)
  {
    v14 = *v8 == 0x6765735F74696E69;
    v12 = (unint64_t)sub_22E8649B0 & 0xFF;
    v13 = (unint64_t)sub_22E8649B0 & 0xFFFFFFFFFFFFFF00;
    if (*v8 != 0x6765735F74696E69)
      v13 = 0;
    goto LABEL_19;
  }
LABEL_28:
  result = ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))(v12 | v13))(a1, v8, v11, v6);
LABEL_29:
  if ((result & 1) == 0)
  {
    while (*(_WORD *)(a1 + 32) != 1)
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    return sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  return result;
}

uint64_t sub_22E863C24(uint64_t a1, void *__src, size_t __len, int a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  _DWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;

  if (*(_WORD *)(a1 + 32) != 21)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v11 + 312) = a4;
    *(_DWORD *)(v11 + 316) = 1995;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v11 + 320);
    v50 = 0;
    v51 = v11;
    v52 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v16 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v11 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
    }
    goto LABEL_106;
  }
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v8 = *(unsigned __int16 *)(a1 + 32);
  if ((v8 - 5) > 1)
  {
    v12 = 0;
    v13 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (*(_DWORD *)v9 != 3)
  {
    if (*(_DWORD *)v9 == 4 && *(_DWORD *)(v9 + 16) == 1752397168)
    {
      v10 = 2;
      goto LABEL_56;
    }
LABEL_37:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v11 + 312) = a4;
    *(_DWORD *)(v11 + 316) = 2002;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v11 + 320);
    v50 = 0;
    v51 = v11;
    v52 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v24 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v11 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
    }
    goto LABEL_106;
  }
  v21 = *(unsigned __int16 *)(v9 + 16);
  v22 = *(unsigned __int8 *)(v9 + 18);
  if (v21 != 28528 || v22 != 112)
    goto LABEL_37;
  v10 = 4;
LABEL_56:
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v30 = *(unsigned __int16 *)(a1 + 32);
  if (v30 == 22)
  {
    v14 = 0;
    v12 = 0;
    v13 = 0;
    goto LABEL_13;
  }
  if (v30 != 65)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v11 + 312) = a4;
    *(_DWORD *)(v11 + 316) = 1998;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v11 + 320);
    v50 = 0;
    v51 = v11;
    v52 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v40 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(v11 + 768);
      v42 = 56 * v40;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
    }
    goto LABEL_106;
  }
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v8 = *(unsigned __int16 *)(a1 + 32);
  if ((v8 - 5) > 1)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v31 = *(unsigned int **)(*(_QWORD *)(a1 + 24) + 16);
    v32 = *v31;
    v12 = v31 + 4;
    v13 = v32;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v33 = *(unsigned __int16 *)(a1 + 32);
    if (v33 == 22)
      goto LABEL_12;
    if (v33 != 65)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v11 + 312) = a4;
      *(_DWORD *)(v11 + 316) = 1998;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v49 = (unsigned __int8 *)(v11 + 320);
      v50 = 0;
      v51 = v11;
      v52 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v46 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(v11 + 768);
        v48 = 56 * v46;
        do
        {
          if (*(char *)(v47 + v48 - 9) < 0)
            operator delete(*(void **)(v47 + v48 - 32));
          v48 -= 56;
        }
        while (v48);
      }
      goto LABEL_106;
    }
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v8 = *(unsigned __int16 *)(a1 + 32);
  }
LABEL_10:
  if (v8 == 13)
  {
    v19 = sub_22E83E898(a1, 0);
    result = 0;
    if ((v19 & 1) != 0)
      return result;
    v14 = (_DWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if ((*(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL) & 0xE00000) == 0x200000)
    {
      if (*(_WORD *)(a1 + 32) == 22)
      {
        v10 |= v14[4] != 0;
        goto LABEL_13;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v11 + 312) = a4;
      *(_DWORD *)(v11 + 316) = 1999;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v49 = (unsigned __int8 *)(v11 + 320);
      v50 = 0;
      v51 = v11;
      v52 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v43 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v43)
      {
        v44 = *(_QWORD *)(v11 + 768);
        v45 = 56 * v43;
        do
        {
          if (*(char *)(v44 + v45 - 9) < 0)
            operator delete(*(void **)(v44 + v45 - 32));
          v45 -= 56;
        }
        while (v45);
      }
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v11 + 312) = a4;
      *(_DWORD *)(v11 + 316) = 1996;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v49 = (unsigned __int8 *)(v11 + 320);
      v50 = 0;
      v51 = v11;
      v52 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v37 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD *)(v11 + 768);
        v39 = 56 * v37;
        do
        {
          if (*(char *)(v38 + v39 - 9) < 0)
            operator delete(*(void **)(v38 + v39 - 32));
          v39 -= 56;
        }
        while (v39);
      }
    }
  }
  else
  {
    if (v8 == 22)
    {
LABEL_12:
      v14 = 0;
LABEL_13:
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) == 1)
      {
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E90ED04(*(_QWORD **)(a1 + 88), a4, v10, v12, v13, v14, (uint64_t)__src, __len);
        return 1;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v11 + 312) = a4;
      *(_DWORD *)(v11 + 316) = 2005;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v49 = (unsigned __int8 *)(v11 + 320);
      v50 = 0;
      v51 = v11;
      v52 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v34 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v11 + 768);
        v36 = 56 * v34;
        do
        {
          if (*(char *)(v35 + v36 - 9) < 0)
            operator delete(*(void **)(v35 + v36 - 32));
          v36 -= 56;
        }
        while (v36);
      }
      goto LABEL_106;
    }
    if (v13)
      v20 = 2001;
    else
      v20 = 2000;
    if (!v10)
      v20 = 2002;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v11 + 312) = a4;
    *(_DWORD *)(v11 + 316) = v20;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v11 + 320);
    v50 = 0;
    v51 = v11;
    v52 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v27 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v11 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
  }
LABEL_106:
  *(_DWORD *)(v11 + 776) = 0;
  sub_22E3B89A8(&v49, __src, __len);
  sub_22E3BB0B8((uint64_t)&v49);
  return 0;
}

uint64_t sub_22E86429C(uint64_t a1, void *__src, size_t __len, int a4)
{
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  int v19;
  int v20;
  int v21;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;

  if (*(_WORD *)(a1 + 32) == 21)
  {
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if (*(_WORD *)(a1 + 32) == 13)
    {
      v8 = sub_22E83E898(a1, 0);
      result = 0;
      if ((v8 & 1) != 0)
        return result;
      v10 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
      if ((*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL) & 0xE00000) == 0x200000)
      {
        v50 = 1;
        v51 = 1;
        while (1)
        {
          v11 = *(unsigned __int16 *)(a1 + 32);
          if (v11 != 65)
            break;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v12 = *(unsigned __int16 *)(a1 + 32);
          if ((v12 | 4) != 0x64)
          {
            if ((v12 - 5) < 2)
            {
              v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
              switch(*(_DWORD *)v13)
              {
                case 4:
                  v14 = *(_DWORD *)(v13 + 16) == 1684104562;
                  v15 = 0x100000001;
                  goto LABEL_33;
                case 5:
                  v14 = (*(_DWORD *)(v13 + 16) ^ 0x74697277 | *(unsigned __int8 *)(v13 + 20) ^ 0x65) == 0;
                  v15 = 0x100000002;
                  goto LABEL_33;
                case 6:
                  if (*(_DWORD *)(v13 + 16) == 1918986355 && *(_WORD *)(v13 + 20) == 25701)
                    goto LABEL_36;
                  if (*(_DWORD *)(v13 + 16) == 1634758510 && *(_WORD *)(v13 + 20) == 25959)
                    goto LABEL_36;
                  v19 = *(_DWORD *)(v13 + 16) ^ 0x6F6D6572;
                  v20 = *(unsigned __int16 *)(v13 + 20);
                  v21 = 25974;
                  goto LABEL_32;
                case 7:
                  if (*(_DWORD *)(v13 + 16) == 1667594341 && *(_DWORD *)(v13 + 19) == 1702131043)
                  {
                    v16 = 0x100000004;
                  }
                  else if (*(_DWORD *)(v13 + 16) == 1633906542 && *(_DWORD *)(v13 + 19) == 1701340001)
                  {
LABEL_36:
                    v16 = 0x180000000;
                  }
                  else
                  {
                    v19 = *(_DWORD *)(v13 + 16) ^ 0x63736964;
                    v20 = *(_DWORD *)(v13 + 19);
                    v21 = 1685217635;
LABEL_32:
                    v14 = (v19 | v20 ^ v21) == 0;
                    v15 = 0x180000000;
LABEL_33:
                    if (v14)
                      v16 = v15;
                    else
                      v16 = 0;
                  }
LABEL_38:
                  if (v16 <= 0x100000000)
                    v24 = 0;
                  else
                    v24 = v16;
                  if ((v24 | 0x80000000) == 0x80000000)
                  {
                    if (v24)
                    {
                      v25 = 2022;
                    }
                    else
                    {
                      LODWORD(v16) = 0;
                      v25 = 2012;
                    }
                    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
                    *(_DWORD *)(v26 + 312) = a4;
                    *(_DWORD *)(v26 + 316) = v25;
                    if (*(char *)(v26 + 311) < 0)
                    {
                      **(_BYTE **)(v26 + 288) = 0;
                      *(_QWORD *)(v26 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v26 + 288) = 0;
                      *(_BYTE *)(v26 + 311) = 0;
                    }
                    v52 = (unsigned __int8 *)(v26 + 320);
                    v53 = 0;
                    v54 = v26;
                    v55 = 1;
                    *(_BYTE *)(v26 + 320) = 0;
                    *(_DWORD *)(v26 + 664) = 0;
                    v27 = *(unsigned int *)(v26 + 776);
                    if ((_DWORD)v27)
                    {
                      v28 = *(_QWORD *)(v26 + 768);
                      v29 = 56 * v27;
                      do
                      {
                        if (*(char *)(v28 + v29 - 9) < 0)
                          operator delete(*(void **)(v28 + v29 - 32));
                        v29 -= 56;
                      }
                      while (v29);
                    }
                    *(_DWORD *)(v26 + 776) = 0;
                    sub_22E3B89A8(&v52, __src, __len);
                    sub_22E3B89A8(&v52, (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16), **(unsigned int **)(*(_QWORD *)(a1 + 24) + 16));
                    sub_22E3BB0B8((uint64_t)&v52);
                  }
                  else
                  {
                    v51 |= v24;
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                    v50 = 0;
                  }
                  if ((v16 | 0x80000000) == 0x80000000)
                    return 0;
                  continue;
                default:
                  v16 = 0;
                  goto LABEL_38;
              }
            }
            v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
            *(_DWORD *)(v30 + 312) = a4;
            *(_DWORD *)(v30 + 316) = 1988;
            if (*(char *)(v30 + 311) < 0)
            {
              **(_BYTE **)(v30 + 288) = 0;
              *(_QWORD *)(v30 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v30 + 288) = 0;
              *(_BYTE *)(v30 + 311) = 0;
            }
            v52 = (unsigned __int8 *)(v30 + 320);
            v53 = 0;
            v54 = v30;
            v55 = 1;
            *(_BYTE *)(v30 + 320) = 0;
            *(_DWORD *)(v30 + 664) = 0;
            v47 = *(unsigned int *)(v30 + 776);
            if ((_DWORD)v47)
            {
              v48 = *(_QWORD *)(v30 + 768);
              v49 = 56 * v47;
              do
              {
                if (*(char *)(v48 + v49 - 9) < 0)
                  operator delete(*(void **)(v48 + v49 - 32));
                v49 -= 56;
              }
              while (v49);
            }
            goto LABEL_106;
          }
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        if ((v50 & 1) != 0)
          v37 = v51 | 2;
        else
          v37 = v51;
        if (v11 == 22)
        {
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (*(_WORD *)(a1 + 32) == 1)
          {
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            sub_22F30ACDC(*(_QWORD **)(a1 + 88), a4, v37, v10);
            return 1;
          }
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
          *(_DWORD *)(v30 + 312) = a4;
          *(_DWORD *)(v30 + 316) = 2005;
          if (*(char *)(v30 + 311) < 0)
          {
            **(_BYTE **)(v30 + 288) = 0;
            *(_QWORD *)(v30 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v30 + 288) = 0;
            *(_BYTE *)(v30 + 311) = 0;
          }
          v52 = (unsigned __int8 *)(v30 + 320);
          v53 = 0;
          v54 = v30;
          v55 = 1;
          *(_BYTE *)(v30 + 320) = 0;
          *(_DWORD *)(v30 + 664) = 0;
          v44 = *(unsigned int *)(v30 + 776);
          if ((_DWORD)v44)
          {
            v45 = *(_QWORD *)(v30 + 768);
            v46 = 56 * v44;
            do
            {
              if (*(char *)(v45 + v46 - 9) < 0)
                operator delete(*(void **)(v45 + v46 - 32));
              v46 -= 56;
            }
            while (v46);
          }
        }
        else
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
          *(_DWORD *)(v30 + 312) = a4;
          *(_DWORD *)(v30 + 316) = 1999;
          if (*(char *)(v30 + 311) < 0)
          {
            **(_BYTE **)(v30 + 288) = 0;
            *(_QWORD *)(v30 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v30 + 288) = 0;
            *(_BYTE *)(v30 + 311) = 0;
          }
          v52 = (unsigned __int8 *)(v30 + 320);
          v53 = 0;
          v54 = v30;
          v55 = 1;
          *(_BYTE *)(v30 + 320) = 0;
          *(_DWORD *)(v30 + 664) = 0;
          v41 = *(unsigned int *)(v30 + 776);
          if ((_DWORD)v41)
          {
            v42 = *(_QWORD *)(v30 + 768);
            v43 = 56 * v41;
            do
            {
              if (*(char *)(v42 + v43 - 9) < 0)
                operator delete(*(void **)(v42 + v43 - 32));
              v43 -= 56;
            }
            while (v43);
          }
        }
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        *(_DWORD *)(v30 + 312) = a4;
        *(_DWORD *)(v30 + 316) = 1996;
        if (*(char *)(v30 + 311) < 0)
        {
          **(_BYTE **)(v30 + 288) = 0;
          *(_QWORD *)(v30 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v30 + 288) = 0;
          *(_BYTE *)(v30 + 311) = 0;
        }
        v52 = (unsigned __int8 *)(v30 + 320);
        v53 = 0;
        v54 = v30;
        v55 = 1;
        *(_BYTE *)(v30 + 320) = 0;
        *(_DWORD *)(v30 + 664) = 0;
        v38 = *(unsigned int *)(v30 + 776);
        if ((_DWORD)v38)
        {
          v39 = *(_QWORD *)(v30 + 768);
          v40 = 56 * v38;
          do
          {
            if (*(char *)(v39 + v40 - 9) < 0)
              operator delete(*(void **)(v39 + v40 - 32));
            v40 -= 56;
          }
          while (v40);
        }
      }
    }
    else
    {
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v30 + 312) = a4;
      *(_DWORD *)(v30 + 316) = 2001;
      if (*(char *)(v30 + 311) < 0)
      {
        **(_BYTE **)(v30 + 288) = 0;
        *(_QWORD *)(v30 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v30 + 288) = 0;
        *(_BYTE *)(v30 + 311) = 0;
      }
      v52 = (unsigned __int8 *)(v30 + 320);
      v53 = 0;
      v54 = v30;
      v55 = 1;
      *(_BYTE *)(v30 + 320) = 0;
      *(_DWORD *)(v30 + 664) = 0;
      v34 = *(unsigned int *)(v30 + 776);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v30 + 768);
        v36 = 56 * v34;
        do
        {
          if (*(char *)(v35 + v36 - 9) < 0)
            operator delete(*(void **)(v35 + v36 - 32));
          v36 -= 56;
        }
        while (v36);
      }
    }
  }
  else
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
    *(_DWORD *)(v30 + 312) = a4;
    *(_DWORD *)(v30 + 316) = 1995;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v52 = (unsigned __int8 *)(v30 + 320);
    v53 = 0;
    v54 = v30;
    v55 = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v31 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v31)
    {
      v32 = *(_QWORD *)(v30 + 768);
      v33 = 56 * v31;
      do
      {
        if (*(char *)(v32 + v33 - 9) < 0)
          operator delete(*(void **)(v32 + v33 - 32));
        v33 -= 56;
      }
      while (v33);
    }
  }
LABEL_106:
  *(_DWORD *)(v30 + 776) = 0;
  sub_22E3B89A8(&v52, __src, __len);
  sub_22E3BB0B8((uint64_t)&v52);
  return 0;
}

uint64_t sub_22E8649B0(uint64_t a1, void *a2, size_t a3, int a4)
{
  uint64_t v5;
  int v9;
  int *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  const char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  __int16 v34;
  unsigned __int8 *v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 64) + 72) != 16)
  {
    v13 = *(_QWORD *)(v5 + 48);
    *(_DWORD *)(v13 + 312) = a4;
    *(_DWORD *)(v13 + 316) = 2008;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v33[0] = v13 + 320;
    v33[1] = 0;
    v33[2] = v13;
    v34 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v14 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v13 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
    *(_DWORD *)(v13 + 776) = 0;
    v17 = (unsigned __int8 **)v33;
    goto LABEL_44;
  }
  if ((sub_22E8847B4(a1, 0x15u, 1995, a2, a3) & 1) == 0)
  {
    v9 = *(unsigned __int16 *)(a1 + 32);
    if ((v9 - 5) <= 1)
    {
      v10 = *(int **)(*(_QWORD *)(a1 + 24) + 16);
      v11 = *v10;
      if (*v10 == 3)
      {
        v22 = *((unsigned __int16 *)v10 + 8);
        v23 = *((unsigned __int8 *)v10 + 18);
        if (v22 != 26988 || v23 != 98)
          goto LABEL_35;
        v12 = "\".CRT$XCL\"";
      }
      else
      {
        if (v11 != 4)
        {
          if (v11 == 8 && *((_QWORD *)v10 + 2) == 0x72656C69706D6F63)
          {
            v12 = "\".CRT$XCC\"";
            goto LABEL_31;
          }
LABEL_35:
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
          *(_DWORD *)(v21 + 312) = a4;
          *(_DWORD *)(v21 + 316) = 1993;
          if (*(char *)(v21 + 311) < 0)
          {
            **(_BYTE **)(v21 + 288) = 0;
            *(_QWORD *)(v21 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v21 + 288) = 0;
            *(_BYTE *)(v21 + 311) = 0;
          }
          v35 = (unsigned __int8 *)(v21 + 320);
          v36 = 0;
          v37 = v21;
          v38 = 1;
          *(_BYTE *)(v21 + 320) = 0;
          *(_DWORD *)(v21 + 664) = 0;
          v27 = *(unsigned int *)(v21 + 776);
          if ((_DWORD)v27)
          {
            v28 = *(_QWORD *)(v21 + 768);
            v29 = 56 * v27;
            do
            {
              if (*(char *)(v28 + v29 - 9) < 0)
                operator delete(*(void **)(v28 + v29 - 32));
              v29 -= 56;
            }
            while (v29);
          }
LABEL_43:
          *(_DWORD *)(v21 + 776) = 0;
          sub_22E3B89A8(&v35, a2, a3);
          v17 = &v35;
LABEL_44:
          sub_22E3BB0B8((uint64_t)v17);
          return 0;
        }
        if (v10[4] != 1919251317)
          goto LABEL_35;
        v12 = "\".CRT$XCU\"";
      }
LABEL_31:
      v25 = v12;
      LODWORD(v37) = 13;
      v26 = *(_DWORD *)(a1 + 16);
      v36 = v25;
      v35 = (unsigned __int8 *)(v26 | 0xA00000000);
      v20 = (_DWORD *)(sub_22EB21338(*(_QWORD *)(a1 + 88), (uint64_t)&v35, 1, 0) & 0xFFFFFFFFFFFFFFFELL);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (v20)
      {
LABEL_32:
        if ((sub_22E8847B4(a1, 0x16u, 1999, a2, a3) & 1) == 0 && (sub_22E8847B4(a1, 1u, 2005, a2, a3) & 1) == 0)
        {
          sub_22F30AD08(*(_QWORD *)(a1 + 88), a4, v20);
          return 1;
        }
        return 0;
      }
      goto LABEL_35;
    }
    if (v9 == 13)
    {
      v18 = sub_22E83E898(a1, 0);
      result = 0;
      if ((v18 & 1) != 0)
        return result;
      v20 = (_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((*(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL) & 0xE00000) == 0x200000)
        goto LABEL_32;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
      *(_DWORD *)(v21 + 312) = a4;
      *(_DWORD *)(v21 + 316) = 1996;
      if (*(char *)(v21 + 311) < 0)
      {
        **(_BYTE **)(v21 + 288) = 0;
        *(_QWORD *)(v21 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v21 + 288) = 0;
        *(_BYTE *)(v21 + 311) = 0;
      }
      v35 = (unsigned __int8 *)(v21 + 320);
      v36 = 0;
      v37 = v21;
      v38 = 1;
      *(_BYTE *)(v21 + 320) = 0;
      *(_DWORD *)(v21 + 664) = 0;
      v30 = *(unsigned int *)(v21 + 776);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v21 + 768);
        v32 = 56 * v30;
        do
        {
          if (*(char *)(v31 + v32 - 9) < 0)
            operator delete(*(void **)(v31 + v32 - 32));
          v32 -= 56;
        }
        while (v32);
      }
      goto LABEL_43;
    }
    goto LABEL_35;
  }
  return 0;
}

uint64_t sub_22E864D68(uint64_t a1, unint64_t *a2)
{
  unsigned int *v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v25;
  unsigned int *v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v38;
  unsigned int v39;
  BOOL v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v95;
  void *v96;
  size_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  void *p_p;
  size_t v105;
  int v106;
  int v107;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  size_t v112;
  unsigned int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  int v119;
  int *v120;
  _BYTE v121[32];
  _BYTE v122[32];
  void *__p;
  size_t v124;
  char v125;
  _BYTE v126[32];
  unsigned __int8 *v127;
  uint64_t v128;
  __int16 v129;

  v4 = *(unsigned int **)(a1 + 24);
  v5 = *((unsigned __int16 *)v4 + 8);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v78 = 0;
  else
    v78 = *((_QWORD *)v4 + 1);
  v7 = *v4;
  v8 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
  *(_DWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = v78;
  a2[1] = v8;
  if (*((_WORD *)v4 + 20) == 5)
    v9 = *((_QWORD *)v4 + 4);
  else
    v9 = 0;
  v10 = v4[6];
  v11 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
  *(_DWORD *)v11 = v10;
  *(_QWORD *)(v11 + 8) = v9;
  a2[2] = v11;
  v12 = (int *)*((_QWORD *)v4 + 6);
  v13 = *((_QWORD *)v4 + 7);
  v14 = *(unsigned int **)(v78 + 16);
  v15 = *v14;
  v127 = (unsigned __int8 *)(v14 + 4);
  v128 = v15;
  v129 = 0;
  v17 = sub_22E72DCE4((uint64_t)&v127, "unroll", 6, "nounroll", 8, "unroll_and_jam", 14, v16, "nounroll_and_jam", 16, 1);
  if (!v13 && *(_BYTE *)(v17 + 17) && *(_BYTE *)(v17 + 16))
  {
    v18 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v18 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v18;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v19 = *v4 | ((unint64_t)*v4 << 32);
    goto LABEL_17;
  }
  v120 = v12;
  if (!v9)
  {
    v26 = (unsigned int *)(a1 + 16);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v23 = 0;
    v25 = 0;
    goto LABEL_63;
  }
  v21 = *(uint64_t **)(v9 + 16);
  v22 = *v21;
  if (*v21 == 14)
  {
    v25 = 0;
    v23 = v21[2] == 0x615F6C6C6F726E75 && *(uint64_t *)((char *)v21 + 22) == 0x6D616A5F646E615FLL;
    goto LABEL_44;
  }
  if ((_DWORD)v22 == 10)
  {
    v26 = (unsigned int *)(a1 + 16);
    v25 = 0;
    v23 = 0;
    v32 = v21[2];
    v31 = v21 + 2;
    v30 = v32;
    v33 = *((unsigned __int16 *)v31 + 4);
    v34 = v32 == 0x7562697274736964 && v33 == 25972;
    v35 = v30 ^ 0x61656C7265746E69 | v33 ^ 0x6576;
    v29 = v34;
    if (v35)
      v36 = 0;
    else
      v36 = 257;
LABEL_45:
    v28 = 0;
    v38 = v22;
    v39 = v36 >> 8;
    if (v38 == 19 && v36 <= 0xFF)
    {
      v28 = 0;
      if (*(uint64_t *)((char *)v31 + 11) == 0x6574616369646572
        && v31[1] == 0x6369646572705F65
        && *v31 == 0x7A69726F74636576)
      {
        v36 = 257;
      }
      v39 = v36 >> 8;
    }
    goto LABEL_56;
  }
  if ((_DWORD)v22 == 6)
  {
    v23 = 0;
    v25 = *((_DWORD *)v21 + 4) == 1869770357 && *((_WORD *)v21 + 10) == 27756;
LABEL_44:
    v26 = (unsigned int *)(a1 + 16);
    v29 = 0;
    v36 = 0;
    v31 = v21 + 2;
    goto LABEL_45;
  }
  v31 = v21 + 2;
  v26 = (unsigned int *)(a1 + 16);
  if ((_DWORD)v22 == 9)
  {
    v28 = 0;
    v23 = 0;
    v25 = 0;
    v29 = 0;
    v39 = (*v31 ^ 0x7A69726F74636576 | *((unsigned __int8 *)v31 + 8) ^ 0x65) == 0;
    LOBYTE(v36) = (*v31 ^ 0x7A69726F74636576 | *((unsigned __int8 *)v31 + 8) ^ 0x65) == 0;
  }
  else
  {
    if ((_DWORD)v22 != 8)
    {
      v29 = 0;
      v25 = 0;
      v23 = 0;
      v36 = 0;
      goto LABEL_45;
    }
    v23 = 0;
    v25 = 0;
    v29 = 0;
    LOBYTE(v36) = 0;
    v39 = 0;
    v28 = *v31 == 0x656E696C65706970;
  }
LABEL_56:
  if ((_BYTE)v36)
    v42 = v39 == 0;
  else
    v42 = 1;
  v43 = !v42 || v25;
  v27 = v43 | v23 | v29 | v28;
LABEL_63:
  v44 = v25 | v23;
  v45 = v44 | v29 | v28;
  if (*((_WORD *)v120 + 8) == 1)
  {
    v46 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v46 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v46;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
    v47 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v47 + 312) = *v120;
    *(_DWORD *)(v47 + 316) = 1721;
    if (*(char *)(v47 + 311) < 0)
    {
      **(_BYTE **)(v47 + 288) = 0;
      *(_QWORD *)(v47 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v47 + 288) = 0;
      *(_BYTE *)(v47 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v127, v47);
    v48 = v127;
    if (!v127)
    {
      v48 = (unsigned __int8 *)sub_22E3B8AAC(v128);
      v127 = v48;
    }
    v48[*v48 + 1] = 2;
    v49 = v127;
    v50 = *v127;
    *v127 = v50 + 1;
    *(_QWORD *)&v49[8 * v50 + 16] = v27;
    v49[(v50 + 1) + 1] = 2;
    v51 = v127;
    v52 = *v127;
    *v127 = v52 + 1;
    *(_QWORD *)&v51[8 * v52 + 16] = v44;
    v51[(v52 + 1) + 1] = 2;
    v53 = v127;
    v54 = *v127;
    *v127 = v54 + 1;
    *(_QWORD *)&v53[8 * v54 + 16] = v45 ^ 1u;
    goto LABEL_118;
  }
  if (!v27)
  {
    if (!v9
      || (v60 = *(_QWORD *)(v9 + 16), *(_DWORD *)v60 != 15)
      || ((v61 = *(_QWORD *)(v60 + 16), v62 = *(_QWORD *)(v60 + 23), v61 == 0x7A69726F74636576)
        ? (v63 = v62 == 0x68746469775F657ALL)
        : (v63 = 0),
          !v63))
    {
      sub_22F1735E4(*(_QWORD *)(a1 + 8), v120, v13, 0, 0, 0);
      v99 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v99 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v99;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
      v100 = sub_22F2E50C0(a1, 0);
      if (*(_WORD *)(a1 + 32) != 1)
      {
        v103 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v103 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v103 + 316) = 2005;
        if (*(char *)(v103 + 311) < 0)
        {
          **(_BYTE **)(v103 + 288) = 0;
          *(_QWORD *)(v103 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v103 + 288) = 0;
          *(_BYTE *)(v103 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v127, v103);
        sub_22E865AC8(&__p, *((_QWORD *)v4 + 1));
        if (v125 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v125 >= 0)
          v105 = v125 & 0x7F;
        else
          v105 = v124;
        sub_22E3B89A8(&v127, p_p, v105);
        if (v125 < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v127);
        while (*(_WORD *)(a1 + 32) != 1)
          sub_22E80F0F0(a1, 0);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
      if ((v100 & 1) != 0)
        return 0;
      v101 = *(_QWORD **)(a1 + 88);
      v102 = v100 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_192;
    }
    sub_22F1735E4(*(_QWORD *)(a1 + 8), v120, v13, 0, 0, 0);
    v64 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v64 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v64;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
    v65 = *v120;
    v66 = *((unsigned __int16 *)v120 + 8);
    if (v66 - 7 >= 6 && (v66 > 0x12 || ((1 << v66) & 0x7E002) == 0))
    {
      v67 = *((_QWORD *)v120 + 1);
      if (v67)
      {
        v68 = *(_QWORD *)(v67 + 16);
        if (*(_DWORD *)v68 == 5)
        {
          v80 = *(_DWORD *)(v68 + 16);
          v81 = *(unsigned __int8 *)(v68 + 20);
          if (v80 == 1702390118 && v81 == 100)
            goto LABEL_96;
        }
        else if (*(_DWORD *)v68 == 8 && *(_QWORD *)(v68 + 16) == 0x656C62616C616373)
        {
LABEL_96:
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
          if (v13 >= 3)
          {
            v69 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v69 + 312) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(v69 + 316) = 2005;
            if (*(char *)(v69 + 311) < 0)
            {
              **(_BYTE **)(v69 + 288) = 0;
              *(_QWORD *)(v69 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v69 + 288) = 0;
              *(_BYTE *)(v69 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v127, v69);
            sub_22E865AC8(&__p, *((_QWORD *)v4 + 1));
            if (v125 >= 0)
              v70 = &__p;
            else
              v70 = __p;
            if (v125 >= 0)
              v71 = v125 & 0x7F;
            else
              v71 = v124;
            sub_22E3B89A8(&v127, v70, v71);
            if (v125 < 0)
              operator delete(__p);
            sub_22E3BB0B8((uint64_t)&v127);
            while (*(_WORD *)(a1 + 32) != 1)
              sub_22E80F0F0(a1, 0);
          }
          v79 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
          *(_DWORD *)v79 = v65;
          *(_QWORD *)(v79 + 8) = v67;
          a2[3] = v79;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
          goto LABEL_194;
        }
      }
    }
    v83 = sub_22F2E50C0(a1, 0);
    if ((v83 & 1) != 0 && *(_WORD *)(a1 + 32) != 65)
    {
      v84 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v84 + 312) = *v120;
      *(_DWORD *)(v84 + 316) = 1884;
      if (*(char *)(v84 + 311) < 0)
      {
        **(_BYTE **)(v84 + 288) = 0;
        *(_QWORD *)(v84 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v84 + 288) = 0;
        *(_BYTE *)(v84 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v122, v84);
      sub_22E3BB0B8((uint64_t)v122);
    }
    v85 = *(unsigned __int16 *)(a1 + 32);
    if (v85 != 65)
    {
      v89 = 0;
LABEL_189:
      if (v85 != 1)
      {
        v110 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v110 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v110 + 316) = 2005;
        if (*(char *)(v110 + 311) < 0)
        {
          **(_BYTE **)(v110 + 288) = 0;
          *(_QWORD *)(v110 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v110 + 288) = 0;
          *(_BYTE *)(v110 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v127, v110);
        sub_22E865AC8(&__p, *((_QWORD *)v4 + 1));
        if (v125 >= 0)
          v111 = &__p;
        else
          v111 = __p;
        if (v125 >= 0)
          v112 = v125 & 0x7F;
        else
          v112 = v124;
        sub_22E3B89A8(&v127, v111, v112);
        if (v125 < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v127);
        while (*(_WORD *)(a1 + 32) != 1)
          sub_22E80F0F0(a1, 0);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
      if (((v83 | v89) & 1) != 0)
        return 0;
      v101 = *(_QWORD **)(a1 + 88);
      v102 = v83 & 0xFFFFFFFFFFFFFFFELL;
LABEL_192:
      if ((sub_22EB25E50(v101, v102) & 1) != 0)
        return 0;
      a2[4] = v102;
LABEL_194:
      v19 = *v4 | ((unint64_t)*(unsigned int *)(*((_QWORD *)v4 + 6) + 24 * *((_QWORD *)v4 + 7) - 24) << 32);
LABEL_17:
      *a2 = v19;
      return 1;
    }
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
    v86 = *(_QWORD *)(a1 + 24);
    v87 = *(_QWORD *)(v86 + 16);
    if (*(_DWORD *)v87 == 5)
    {
      v106 = *(_DWORD *)(v87 + 16);
      v107 = *(unsigned __int8 *)(v87 + 20);
      if (v106 != 1702390118 || v107 != 100)
        goto LABEL_137;
    }
    else if (*(_DWORD *)v87 != 8 || *(_QWORD *)(v87 + 16) != 0x656C62616C616373)
    {
LABEL_137:
      v88 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v88 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v88 + 316) = 1720;
      if (*(char *)(v88 + 311) < 0)
      {
        **(_BYTE **)(v88 + 288) = 0;
        *(_QWORD *)(v88 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v88 + 288) = 0;
        *(_BYTE *)(v88 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v121, v88);
      sub_22E3BB0B8((uint64_t)v121);
      v89 = 1;
      goto LABEL_188;
    }
    v109 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
    v89 = 0;
    *(_DWORD *)v109 = v65;
    *(_QWORD *)(v109 + 8) = v86;
    a2[3] = v109;
LABEL_188:
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
    v85 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_189;
  }
  v55 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v55 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v55;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v26);
  v56 = *v120;
  v57 = *((unsigned __int16 *)v120 + 8);
  if ((v57 - 7) < 6)
    goto LABEL_76;
  if ((v57 - 13) < 6)
    goto LABEL_76;
  if (v57 == 1)
    goto LABEL_76;
  v90 = *((_QWORD *)v120 + 1);
  if (!v90)
    goto LABEL_76;
  v91 = *(unsigned int **)(v90 + 16);
  v92 = *v91;
  if (v92 == 7)
  {
    if (v91[4] ^ 0x61736964 | *(unsigned int *)((char *)v91 + 19) ^ 0x656C6261)
      v93 = 0;
    else
      v93 = 257;
  }
  else
  {
    switch((_DWORD)v92)
    {
      case 4:
        if (v91[4] != 1819047270)
          goto LABEL_76;
        v93 = v44 | 0x100;
        break;
      case 0xD:
        v116 = *((_QWORD *)v91 + 2);
        v117 = *(_QWORD *)((char *)v91 + 21);
        if (v116 == 0x735F656D75737361 && v117 == 0x7974656661735F65)
          v119 = v45;
        else
          v119 = 1;
        if (v119 != 1)
          goto LABEL_150;
        goto LABEL_76;
      case 6:
        v113 = v91[4];
        v114 = *((unsigned __int16 *)v91 + 10);
        if (v113 != 1650552421 || v114 != 25964)
          goto LABEL_76;
        v93 = !v28 | 0x100;
        break;
      default:
        goto LABEL_76;
    }
  }
  if (v93 >= 0x100 && v93 != 0)
  {
LABEL_150:
    if (v13 >= 3)
    {
      v95 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v95 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v95 + 316) = 2005;
      if (*(char *)(v95 + 311) < 0)
      {
        **(_BYTE **)(v95 + 288) = 0;
        *(_QWORD *)(v95 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v95 + 288) = 0;
        *(_BYTE *)(v95 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v127, v95);
      sub_22E865AC8(&__p, *((_QWORD *)v4 + 1));
      if (v125 >= 0)
        v96 = &__p;
      else
        v96 = __p;
      if (v125 >= 0)
        v97 = v125 & 0x7F;
      else
        v97 = v124;
      sub_22E3B89A8(&v127, v96, v97);
      if (v125 < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v127);
    }
    v98 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
    *(_DWORD *)v98 = v56;
    *(_QWORD *)(v98 + 8) = v90;
    a2[3] = v98;
    goto LABEL_194;
  }
LABEL_76:
  if (v28)
  {
    v58 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v58 + 312) = v56;
    *(_DWORD *)(v58 + 316) = 1726;
    if (*(char *)(v58 + 311) < 0)
    {
      **(_BYTE **)(v58 + 288) = 0;
      *(_QWORD *)(v58 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v58 + 288) = 0;
      *(_BYTE *)(v58 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v126, v58);
    v59 = (unsigned __int8 **)v126;
    goto LABEL_119;
  }
  v72 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v72 + 312) = v56;
  *(_DWORD *)(v72 + 316) = 1718;
  if (*(char *)(v72 + 311) < 0)
  {
    **(_BYTE **)(v72 + 288) = 0;
    *(_QWORD *)(v72 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v72 + 288) = 0;
    *(_BYTE *)(v72 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v127, v72);
  v73 = v127;
  if (!v127)
  {
    v73 = (unsigned __int8 *)sub_22E3B8AAC(v128);
    v127 = v73;
  }
  v73[*v73 + 1] = 2;
  v74 = v127;
  v75 = *v127;
  *v127 = v75 + 1;
  *(_QWORD *)&v74[8 * v75 + 16] = v44;
  v74[(v75 + 1) + 1] = 2;
  v76 = v127;
  v77 = *v127;
  *v127 = v77 + 1;
  *(_QWORD *)&v76[8 * v77 + 16] = v45 ^ 1u;
LABEL_118:
  v59 = &v127;
LABEL_119:
  sub_22E3BB0B8((uint64_t)v59);
  return 0;
}

void sub_22E865AC8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  void **v5;
  uint64_t v6;
  size_t v7;
  void **v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[4];
  __int16 v15;
  void *__p[2];
  char v17;

  v3 = *(_QWORD **)(a2 + 16);
  v6 = *v3;
  v5 = (void **)(v3 + 2);
  v4 = v6;
  v14[0] = "clang loop ";
  v14[2] = v5;
  v14[3] = v6;
  v15 = 1283;
  llvm::Twine::str((llvm::Twine *)v14);
  if ((_DWORD)v6 == 14)
  {
    if (*v5 != (void *)0x615F6C6C6F726E75 || *(void **)((char *)v5 + 6) != (void *)0x6D616A5F646E615FLL)
      goto LABEL_25;
    v7 = 14;
  }
  else
  {
    if (v4 != 6)
    {
      if (v4 == 4)
      {
        v7 = v17 >= 0 ? v17 & 0x7F : (size_t)__p[1];
        v8 = v17 >= 0 ? __p : (void **)__p[0];
        if (*(_DWORD *)v5 == 1886351212)
        {
          if (v7 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v7 >= 0x17)
          {
            v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v7 | 7) != 0x17)
              v11 = v7 | 7;
            v12 = v11 + 1;
            v13 = operator new(v11 + 1);
            a1[1] = v7;
            a1[2] = v12 | 0x8000000000000000;
            *a1 = v13;
            v5 = v8;
            a1 = v13;
          }
          else
          {
            *((_BYTE *)a1 + 23) = v7;
            if (!v7)
              goto LABEL_29;
            v5 = v8;
          }
          goto LABEL_28;
        }
      }
LABEL_25:
      v7 = 0;
      *((_BYTE *)a1 + 23) = 0;
      goto LABEL_29;
    }
    if (*(_DWORD *)v5 != 1869770357 || *((_WORD *)v5 + 2) != 27756)
      goto LABEL_25;
    v7 = 6;
  }
  *((_BYTE *)a1 + 23) = v7;
LABEL_28:
  memmove(a1, v5, v7);
LABEL_29:
  *((_BYTE *)a1 + v7) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
}

const char *sub_22E865C64(uint64_t a1, unsigned __int16 a2)
{
  char *v2;
  char *v3;

  if (a2 == 5)
    return (const char *)(*(_QWORD *)(a1 + 16) + 16);
  v3 = sub_22F20D598(a2);
  if (!v3)
    return "";
  v2 = v3;
  strlen(v3);
  return v2;
}

uint64_t sub_22E865CC0(uint64_t a1, int a2, void *a3, size_t a4, int a5)
{
  unsigned __int8 *v8;
  const char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v16[2];
  uint64_t v17;
  __int16 v18;
  _QWORD v19[3];
  __int16 v20;

  *(_DWORD *)(a1 + 312) = a5;
  *(_DWORD *)(a1 + 316) = 1699;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v16, a1);
  sub_22E3B89A8(v16, a3, a4);
  v8 = v16[0];
  v19[1] = 0;
  v19[2] = v17;
  v19[0] = v16[0];
  v20 = v18;
  v17 = 0;
  v18 = 0;
  sub_22E3BB0B8((uint64_t)v16);
  switch(a2)
  {
    case 10:
      v9 = "'is_instance'";
      if (v8)
        goto LABEL_18;
      goto LABEL_17;
    case 11:
    case 12:
    case 13:
    case 15:
    case 17:
    case 18:
      goto LABEL_9;
    case 14:
      v9 = "'unless(is_union)'";
      if (!v8)
        goto LABEL_17;
      goto LABEL_18;
    case 16:
      v9 = "'functionType'";
      if (!v8)
        goto LABEL_17;
      goto LABEL_18;
    case 19:
      v9 = "'is_thread_local', 'is_global', 'is_local', 'is_parameter', 'unless(is_parameter)'";
      if (!v8)
        goto LABEL_17;
      goto LABEL_18;
    default:
      if (a2 == 4)
      {
        v9 = "'is_member'";
        if (!v8)
        {
LABEL_17:
          v8 = (unsigned __int8 *)sub_22E3B8AAC(0);
          v19[0] = v8;
        }
LABEL_18:
        v11 = v8 + 1;
        v12 = *v8;
        v11[v12] = 2;
        *v8 = v12 + 2;
        v13 = v8 + 16;
        *(_QWORD *)&v13[8 * v12] = 1;
        v14 = (v12 + 1);
        v11[v14] = 1;
        *(_QWORD *)&v13[8 * v14] = v9;
      }
      else
      {
LABEL_9:
        if (!v8)
        {
          v8 = (unsigned __int8 *)sub_22E3B8AAC(0);
          v19[0] = v8;
        }
        v10 = *v8;
        v8[v10 + 1] = 2;
        *v8 = v10 + 1;
        *(_QWORD *)&v8[8 * v10 + 16] = 0;
      }
      return sub_22E3BB0B8((uint64_t)v19);
  }
}

uint64_t sub_22E865E5C(uint64_t a1, int a2, void *a3, size_t a4, void *a5, size_t a6, int a7)
{
  unsigned __int8 *v12;
  const char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v20[2];
  uint64_t v21;
  __int16 v22;
  _QWORD v23[3];
  __int16 v24;

  *(_DWORD *)(a1 + 312) = a7;
  *(_DWORD *)(a1 + 316) = 1705;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v20, a1);
  sub_22E3B89A8(v20, a5, a6);
  sub_22E3B89A8(v20, a3, a4);
  v12 = v20[0];
  v23[1] = 0;
  v23[2] = v21;
  v23[0] = v20[0];
  v24 = v22;
  v21 = 0;
  v22 = 0;
  sub_22E3BB0B8((uint64_t)v20);
  switch(a2)
  {
    case 10:
      v13 = "'is_instance'";
      if (v12)
        goto LABEL_18;
      goto LABEL_17;
    case 11:
    case 12:
    case 13:
    case 15:
    case 17:
    case 18:
      goto LABEL_9;
    case 14:
      v13 = "'unless(is_union)'";
      if (!v12)
        goto LABEL_17;
      goto LABEL_18;
    case 16:
      v13 = "'functionType'";
      if (!v12)
        goto LABEL_17;
      goto LABEL_18;
    case 19:
      v13 = "'is_thread_local', 'is_global', 'is_local', 'is_parameter', 'unless(is_parameter)'";
      if (!v12)
        goto LABEL_17;
      goto LABEL_18;
    default:
      if (a2 == 4)
      {
        v13 = "'is_member'";
        if (!v12)
        {
LABEL_17:
          v12 = (unsigned __int8 *)sub_22E3B8AAC(0);
          v23[0] = v12;
        }
LABEL_18:
        v15 = v12 + 1;
        v16 = *v12;
        v15[v16] = 2;
        *v12 = v16 + 2;
        v17 = v12 + 16;
        *(_QWORD *)&v17[8 * v16] = 1;
        v18 = (v16 + 1);
        v15[v18] = 1;
        *(_QWORD *)&v17[8 * v18] = v13;
      }
      else
      {
LABEL_9:
        if (!v12)
        {
          v12 = (unsigned __int8 *)sub_22E3B8AAC(0);
          v23[0] = v12;
        }
        v14 = *v12;
        v12[v14 + 1] = 2;
        *v12 = v14 + 1;
        *(_QWORD *)&v12[8 * v14 + 16] = 0;
      }
      return sub_22E3BB0B8((uint64_t)v23);
  }
}

unsigned int *sub_22E866018(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 **v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  const char *v54;
  size_t v55;
  int v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t (*v60)();
  int v61;
  BOOL v62;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)();
  const char *v72;
  size_t v73;
  char *v74;
  size_t v75;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  const char *v82;
  std::string::size_type v83;
  const char *v84;
  std::string::size_type v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  char v96;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 **v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::string *p_dst;
  uint64_t v114;
  uint64_t v115;
  std::string *v116;
  std::string::size_type v117;
  std::string *v118;
  std::string::size_type v119;
  __int128 *v120;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char *v126;
  size_t v127;
  int v128;
  uint64_t v129;
  llvm *v130[2];
  unsigned int v131;
  _BYTE v132[32];
  llvm *v133[2];
  unsigned int v134;
  uint64_t v135[4];
  uint64_t v136[4];
  _BYTE v137[32];
  _BYTE v138[32];
  std::string __dst;
  std::string v140;
  _BYTE v141[12];
  _BYTE v142[12];
  void *__p;
  uint64_t (*v144)(uint64_t);
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 v150;
  _BYTE v151[12];
  uint64_t v152;
  uint64_t (*v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[32];
  unsigned __int8 *v157;
  __int128 v158;
  void *v159[2];
  __int128 v160;

  v2 = (unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = *(_DWORD *)(a1 + 20);
      if (!v6)
        v6 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v6;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      return sub_22E910314(*(_QWORD *)(a1 + 88), v3, *(_QWORD *)(v4 + 16));
    }
    v8 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8)
    {
      v9 = *(_DWORD *)(a1 + 20);
      if (!v9)
        v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = v9;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      v10 = *(_QWORD *)(a1 + 88);
      v11 = *(_QWORD *)(v4 + 16);
      result = (unsigned int *)sub_22F30AEE8(v10 + 1376);
      v12 = *(_QWORD *)(v10 + 1376);
      *(_DWORD *)(v12 + 144 * *(unsigned int *)(v10 + 1384) - 144) = v3;
      *(_QWORD *)(v12 + 144 * *(unsigned int *)(v10 + 1384) - 136) = v11;
      return result;
    }
  }
  sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)(v4 + 24), v8, 0, 0, 0);
  v13 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v13 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v13;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  v14 = *(uint64_t **)v4;
  v15 = (uint64_t *)(*(_QWORD *)v4 + 8);
  if ((*v15 & 4) != 0)
  {
    v16 = *v15 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
      *(_DWORD *)(v16 + 8) = 0;
  }
  else
  {
    *v15 = 0;
  }
  v17 = *(unsigned __int16 *)(a1 + 32);
  if (v17 == 19)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v18 + 2816);
    if (v19 >= *(unsigned int *)(v18 + 2784))
      v20 = sub_22F162D2C(v18, 1u);
    else
      v20 = *(_QWORD *)(v18 + 2776) + 24 * v19;
    if (*(_WORD *)(v20 + 16) == 19)
    {
      sub_22E836038(a1, v14, 0);
      goto LABEL_30;
    }
    v17 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v17 == 302)
  {
    sub_22E815DDC(a1, v14);
    goto LABEL_30;
  }
  if (v17 != 186)
  {
    sub_22E884578(a1, (int *)v2, 1695, (uint64_t)v137);
    sub_22E3BB0B8((uint64_t)v137);
    v23 = *(unsigned __int16 *)(a1 + 32);
    if ((v23 - 7) >= 6 && (v23 - 13) >= 6 && v23 != 1 && *(_QWORD *)(a1 + 24))
    {
      v24 = 0;
      if ((v23 - 13) >= 6)
        v24 = *(_QWORD *)(a1 + 24);
      if (sub_22F1ACD3C(v24, 0, 0, 0) != 480)
      {
        v25 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = v25;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        if (*(_WORD *)(a1 + 32) != 21
          || (sub_22E80F0F0(a1, 0),
              LOWORD(v157) = 22,
              sub_22E885940(a1, (unsigned __int16 *)&v157, 1, 2),
              *(_WORD *)(a1 + 32) == 22))
        {
          sub_22E884578(a1, (int *)v2, 1883, (uint64_t)v141);
          BYTE12(v158) = 0;
          *(_QWORD *)((char *)&v158 + 4) = 0;
          v157 = (unsigned __int8 *)(v25 | (v25 << 32));
          LOBYTE(v158) = 0;
          LODWORD(v160) = 0;
          *(_DWORD *)((char *)&v160 + 3) = 0;
          strcpy((char *)v159, "__attribute__((");
          *(_WORD *)((char *)&v160 + 7) = 15;
          sub_22E6D82D0((uint64_t *)v141, &v157);
          if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
          {
            v26 = *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16);
          }
          else
          {
            v26 = *(_DWORD *)(a1 + 20);
            if (!v26)
              v26 = *v2;
          }
          v151[8] = 0;
          *(_QWORD *)v151 = 0;
          v153 = 0;
          v154 = 0x200000000000000;
          v152 = 10537;
          v149 = (unsigned __int8 *)(v26 | ((unint64_t)v26 << 32));
          v150 = 0;
          LOBYTE(v155) = 0;
          sub_22E6D82D0((uint64_t *)v141, &v149);
          if (SHIBYTE(v154) < 0)
            operator delete((void *)v152);
          if (SBYTE7(v160) < 0)
            operator delete(v159[0]);
          v46 = (unsigned __int8 **)v141;
          goto LABEL_78;
        }
        LOWORD(v157) = 1;
LABEL_80:
        sub_22E885940(a1, (unsigned __int16 *)&v157, 1, 2);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        return (unsigned int *)sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      }
    }
LABEL_79:
    LOWORD(v157) = 1;
    goto LABEL_80;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  if (sub_22E8847B4(a1, 0x15u, 1510, "attribute", 9uLL))
    goto LABEL_79;
  if (sub_22E8847B4(a1, 0x15u, 1510, "(", 1uLL))
  {
    LOWORD(v157) = 1;
    goto LABEL_80;
  }
  v33 = *(unsigned __int16 *)(a1 + 32);
  if (v33 == 3)
  {
    v47 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v47 + 752))
    {
      *(_BYTE *)(v47 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v47 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F313954(*(char ***)(a1 + 88), 0, 0, 0);
    goto LABEL_86;
  }
  while (1)
  {
    if (v33 != 5)
    {
      sub_22E884578(a1, (int *)v2, 1694, (uint64_t)v138);
      v46 = (unsigned __int8 **)v138;
      goto LABEL_78;
    }
    v34 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
    v35 = *(unsigned int *)(a1 + 40);
    if (*(_WORD *)(a1 + 32) == 21)
      sub_22E81199C(a1, v34, v35, v14, 0, 0, 0, 0, 0);
    else
      sub_22E8118E4((uint64_t)v14, v34, v35 | (v35 << 32), 0, v35, 0, 0, 0, 0);
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
    v33 = *(unsigned __int16 *)(a1 + 32);
  }
  if (sub_22E8847B4(a1, 0x16u, 15, "", 0) || sub_22E8847B4(a1, 0x16u, 15, "", 0))
    goto LABEL_79;
LABEL_30:
  v21 = *v15;
  if ((unint64_t)*v15 < 8)
    goto LABEL_79;
  v22 = (_DWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) == 0 || !v22)
  {
    if ((v21 & 4) != 0)
      goto LABEL_50;
    if ((*(_BYTE *)(v21 + 50) & 1) == 0)
    {
      v27 = (uint64_t)(v14 + 2);
      v28 = v15;
      goto LABEL_53;
    }
    goto LABEL_79;
  }
  if (!v22[2])
    goto LABEL_79;
LABEL_50:
  if ((*(_BYTE *)(**(_QWORD **)v22 + 50) & 1) != 0)
    goto LABEL_79;
  v29 = v22[2];
  if ((_DWORD)v29)
  {
    v28 = *(uint64_t **)v22;
    v27 = *(_QWORD *)v22 + 8 * v29;
LABEL_53:
    while (1)
    {
      v30 = (uint64_t *)*v28;
      if ((*(_BYTE *)(*(_QWORD *)(*v28 + 72) + 12) & 4) == 0)
        break;
      if (++v28 == (uint64_t *)v27)
        goto LABEL_55;
    }
    v36 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v36 + 312) = v3;
    *(_DWORD *)(v36 + 316) = 1706;
    if (*(char *)(v36 + 311) < 0)
    {
      **(_BYTE **)(v36 + 288) = 0;
      *(_QWORD *)(v36 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v36 + 288) = 0;
      *(_BYTE *)(v36 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v157, v36);
    v37 = *v30;
    v38 = v157;
    if (!v157)
    {
      v38 = (unsigned __int8 *)sub_22E3B8AAC(v158);
      v157 = v38;
    }
    v38[*v38 + 1] = 5;
    v39 = v157;
    v40 = *v157;
    *v157 = v40 + 1;
    *(_QWORD *)&v39[8 * v40 + 16] = v37;
LABEL_76:
    v46 = &v157;
LABEL_78:
    sub_22E3BB0B8((uint64_t)v46);
    goto LABEL_79;
  }
LABEL_55:
  if (*(_WORD *)(a1 + 32) != 65)
  {
    sub_22E867560((uint64_t *)&v157, 15, (uint64_t)v14, 0, a1);
    v41 = v157;
    if (!v157)
    {
      v41 = (unsigned __int8 *)sub_22E3B8AAC(v158);
      v157 = v41;
    }
    v41[*v41 + 1] = 4;
    v42 = v157;
    v43 = *v157;
    *v157 = v43 + 1;
    v44 = &v42[8 * v43];
    v45 = 65;
    goto LABEL_75;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  if (*(_WORD *)(a1 + 32) != 5)
  {
    sub_22E867560(v136, 1702, (uint64_t)v14, 1, a1);
    v32 = v136;
    goto LABEL_85;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (*(_DWORD *)v31 != 8 || *(_QWORD *)(v31 + 16) != 0x6F745F796C707061)
  {
    sub_22E867560(v135, 1702, (uint64_t)v14, 1, a1);
    v32 = v135;
LABEL_85:
    sub_22E3BB0B8((uint64_t)v32);
LABEL_86:
    LOWORD(v157) = 1;
    goto LABEL_80;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  if (*(_WORD *)(a1 + 32) != 63)
  {
    sub_22E867560((uint64_t *)&v157, 15, (uint64_t)v14, 2, a1);
    v51 = v157;
    if (!v157)
    {
      v51 = (unsigned __int8 *)sub_22E3B8AAC(v158);
      v157 = v51;
    }
    v51[*v51 + 1] = 4;
    v52 = v157;
    v53 = *v157;
    *v157 = v53 + 1;
    v44 = &v52[8 * v53];
    v45 = 63;
LABEL_75:
    *((_QWORD *)v44 + 2) = v45;
    goto LABEL_76;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  v133[0] = 0;
  v133[1] = 0;
  v134 = 0;
  v157 = (unsigned __int8 *)(a1 + 944);
  LOBYTE(v158) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  *((_QWORD *)&v158 + 1) = a1;
  LODWORD(v159[0]) = 1441813;
  strcpy((char *)v159 + 4, ">");
  v160 = 0uLL;
  v159[1] = sub_22E80F720;
  v48 = sub_22E865C64(*(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
  v128 = 0;
  if (v49 != 3)
    goto LABEL_109;
  if (*(_WORD *)v48 != 28257 || v48[2] != 121)
  {
    v128 = 0;
    goto LABEL_109;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  if ((sub_22E88C650((uint64_t)&v157, 15, "", 0) & 1) != 0)
    goto LABEL_304;
  v128 = 1;
LABEL_109:
  while (2)
  {
    v54 = sub_22E865C64(*(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
    LOBYTE(v56) = 0;
    v57 = 0;
    v58 = 1;
    v126 = (char *)v54;
    v127 = v55;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    switch(v55)
    {
      case 0uLL:
        sub_22E884578(a1, (int *)v2, 1698, (uint64_t)v156);
        v107 = (unsigned __int8 **)v156;
        goto LABEL_266;
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 6uLL:
      case 7uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
        goto LABEL_199;
      case 4uLL:
        if (*(_DWORD *)v54 != 1836412517)
          goto LABEL_149;
        v56 = 0;
        v61 = 1;
        v60 = sub_22E867AFC;
        v59 = 0x1000000;
        v57 = 1;
        goto LABEL_192;
      case 5uLL:
        if (*(_DWORD *)v54 == 1668246626 && v54[4] == 107)
        {
          v56 = 0;
          v57 = 0;
          v61 = 1;
          v60 = sub_22E867AFC;
          v59 = 0x1000000;
        }
        else
        {
          v56 = 0;
          if (*(_DWORD *)v54 == 1818585446 && v54[4] == 100)
          {
            v61 = 1;
            v60 = sub_22E867AFC;
            v59 = 0x1000000;
            v57 = 3;
          }
          else
          {
LABEL_132:
            v61 = 0;
            v60 = 0;
            v59 = 0;
            v57 = 0;
          }
        }
        goto LABEL_192;
      case 8uLL:
        if (*(_QWORD *)v54 == 0x6E6F6974636E7566)
        {
          v61 = 1;
          v60 = (uint64_t (*)())sub_22E867B04;
          v59 = 0x1000000;
          v57 = 4;
        }
        else if (*(_QWORD *)v54 == 0x656C626169726176)
        {
          v61 = 1;
          v60 = (uint64_t (*)())sub_22E867C40;
          v59 = 0x1000000;
          v57 = 19;
        }
        else
        {
LABEL_149:
          v61 = 0;
          v60 = 0;
          v59 = 0;
          v57 = 0;
        }
        goto LABEL_150;
      case 9uLL:
        if (*(_QWORD *)v54 != 0x63617073656D616ELL || v54[8] != 101)
          goto LABEL_149;
        v61 = 1;
        v60 = sub_22E867AFC;
        v59 = 0x1000000;
        v57 = 6;
        goto LABEL_150;
      case 0xDuLL:
        v62 = *(_QWORD *)v54 == 0x6E6F635F6D756E65 && *(_QWORD *)(v54 + 5) == 0x746E6174736E6F63;
        v56 = 1;
        if (!v62)
          goto LABEL_132;
        v61 = 1;
        v60 = sub_22E867AFC;
        v59 = 0x1000000;
        v57 = 2;
LABEL_192:
        v58 = v61 == 0;
        if (!v56 || v61)
          goto LABEL_199;
        v93 = *(_QWORD *)v54 == 0x7461635F636A626FLL && *(_QWORD *)(v54 + 5) == 0x79726F6765746163;
        LOBYTE(v56) = 1;
        if (v93)
        {
          v61 = 1;
          v60 = sub_22E867AFC;
          v59 = 0x1000000;
          v57 = 7;
        }
        else
        {
          v61 = 0;
          v58 = 1;
LABEL_199:
          if (v55 == 11 && v58)
          {
            if (*(_QWORD *)v54 == 0x74656D5F636A626FLL && *(_QWORD *)(v54 + 3) == 0x646F6874656D5F63)
            {
              v61 = 1;
              v60 = (uint64_t (*)())sub_22E867B54;
              v59 = 0x1000000;
              v57 = 10;
              goto LABEL_150;
            }
            v61 = 0;
          }
          v96 = v56 ^ 1;
          if (v61)
            v96 = 1;
          if ((v96 & 1) != 0)
            goto LABEL_219;
          if (*(_QWORD *)v54 == 0x6F72705F636A626FLL && *(_QWORD *)(v54 + 5) == 0x79747265706F7270)
          {
            v61 = 1;
            v60 = sub_22E867AFC;
            v59 = 0x1000000;
            v57 = 12;
            goto LABEL_150;
          }
          if (*(_QWORD *)v54 == 0x6F72705F636A626FLL && *(_QWORD *)(v54 + 5) == 0x6C6F636F746F7270)
          {
            v61 = 1;
            v60 = sub_22E867AFC;
            v59 = 0x1000000;
            v57 = 13;
          }
          else
          {
LABEL_219:
            if (v55 == 6 && v61 == 0)
            {
              if (*(_DWORD *)v54 == 1868785010 && *((_WORD *)v54 + 2) == 25714)
              {
                v61 = 1;
                v60 = (uint64_t (*)())sub_22E867BB0;
                v59 = 0x1000000;
                v57 = 14;
              }
              else
              {
                v61 = 0;
              }
            }
            else if (v55 == 7 && v61 == 0)
            {
              if (*(_DWORD *)v54 == 1416847720 && *(_DWORD *)(v54 + 3) == 1701869908)
              {
                v61 = 1;
                v60 = (uint64_t (*)())sub_22E867BEC;
                v59 = 0x1000000;
                v57 = 16;
              }
            }
            else if (v55 == 10 && v61 == 0 && *(_QWORD *)v54 == 0x696C615F65707974 && *((_WORD *)v54 + 4) == 29537)
            {
              v61 = 1;
              v60 = sub_22E867AFC;
              v59 = 0x1000000;
              v57 = 18;
            }
          }
        }
LABEL_150:
        v69 = v57 | (v59 << 8);
        if (v61)
          v70 = v69;
        else
          v70 = 0;
        if (v61)
          v71 = v60;
        else
          v71 = sub_22E867AFC;
        if ((v70 & 0x100000000) == 0)
        {
          sub_22E884578(a1, (int *)v2, 1704, (uint64_t)&v149);
          sub_22E3B89A8(&v149, v126, v127);
          v107 = &v149;
LABEL_266:
          sub_22E3BB0B8((uint64_t)v107);
          goto LABEL_304;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        v129 = *(unsigned int *)(a1 + 40);
        v149 = (unsigned __int8 *)(a1 + 944);
        v150 = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v151[4] = a1;
        LODWORD(v152) = 1441813;
        WORD2(v152) = 62;
        v154 = 0;
        v155 = 0;
        v153 = sub_22E80F720;
        if ((_DWORD)v70 == 16)
        {
          if ((sub_22E88C650((uint64_t)&v149, 15, "", 0) & 1) != 0)
            goto LABEL_303;
        }
        else if (sub_22E811DE8((uint64_t)&v149))
        {
          *(_DWORD *)v141 = v70;
          v105 = v129 | (v129 << 32);
          *(_QWORD *)&v141[4] = v105;
          v140.__r_.__value_.__r.__words[0] = *(_QWORD *)v141;
          LODWORD(v140.__r_.__value_.__r.__words[1]) = v129;
          LODWORD(v147) = v70;
          *(_QWORD *)((char *)&v147 + 4) = *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4);
          sub_22F2EE58C((uint64_t)v141, (uint64_t)v133, (int *)&v147, (__int128 *)((char *)&v147 + 4));
          if (v142[4])
            goto LABEL_172;
          v106 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v106 + 312) = v129;
          *(_DWORD *)(v106 + 316) = 1692;
          if (*(char *)(v106 + 311) < 0)
          {
            **(_BYTE **)(v106 + 288) = 0;
            *(_QWORD *)(v106 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v106 + 288) = 0;
            *(_BYTE *)(v106 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v147, v106);
          sub_22E3B89A8((unsigned __int8 **)&v147, v126, v127);
          if (*(_WORD *)(a1 + 32) == 65)
            v105 = v129 | ((unint64_t)*v2 << 32);
          v142[8] = 0;
          *(_QWORD *)v142 = 0;
          v144 = 0;
          v145 = 0;
          __p = 0;
          LOBYTE(v146) = 0;
          *(_QWORD *)v141 = v105;
          goto LABEL_260;
        }
        v72 = sub_22E865C64(*(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
        v74 = (char *)v72;
        v75 = v73;
        if (v73 != 6)
        {
          if (!v73)
          {
            sub_22E865CC0(*(_QWORD *)(a1 + 96), v70, v126, v127, *(_DWORD *)(a1 + 16));
            goto LABEL_303;
          }
LABEL_168:
          v77 = ((uint64_t (*)(const char *, size_t, _QWORD))v71)(v72, v73, 0);
          v78 = *v2;
          if ((v77 & 0xFF00000000) == 0)
          {
            sub_22E865E5C(*(_QWORD *)(a1 + 96), v70, v126, v127, v74, v75, v78);
            goto LABEL_303;
          }
          v79 = v77;
          *(_DWORD *)(a1 + 40) = v78;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
          goto LABEL_170;
        }
        if (*(_DWORD *)v72 != 1701604981 || *((_WORD *)v72 + 2) != 29555)
          goto LABEL_168;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        v125 = *(_DWORD *)(a1 + 40);
        *(_QWORD *)v141 = a1 + 944;
        v141[8] = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v142[4] = a1;
        LODWORD(__p) = 1441813;
        WORD2(__p) = 62;
        v145 = 0;
        v146 = 0;
        v144 = sub_22E80F720;
        if ((sub_22E88C650((uint64_t)v141, 15, "", 0) & 1) != 0)
          goto LABEL_302;
        v82 = sub_22E865C64(*(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
        if (!v83)
        {
          sub_22E865CC0(*(_QWORD *)(a1 + 96), v70, v126, v127, v125);
          goto LABEL_302;
        }
        v84 = v82;
        v85 = v83;
        v86 = ((uint64_t (*)(const char *, std::string::size_type, uint64_t))v71)(v82, v83, 1);
        if ((v86 & 0xFF00000000) == 0)
        {
          if (v84)
          {
            if (v85 >= 0x7FFFFFFFFFFFFFF8)
              abort();
            if (v85 >= 0x17)
            {
              v114 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v85 | 7) != 0x17)
                v114 = v85 | 7;
              v115 = v114 + 1;
              p_dst = (std::string *)operator new(v114 + 1);
              __dst.__r_.__value_.__l.__size_ = v85;
              __dst.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v85;
              p_dst = &__dst;
            }
            memmove(p_dst, v84, v85);
            p_dst->__r_.__value_.__s.__data_[v85] = 0;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
          }
          v116 = std::string::insert(&__dst, 0, "unless(");
          v117 = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&v140, ")");
          v119 = v118->__r_.__value_.__r.__words[2];
          v147 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v148 = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (v148 >= 0)
            v120 = &v147;
          else
            v120 = (__int128 *)v147;
          if (v148 >= 0)
            v121 = HIBYTE(v148) & 0x7F;
          else
            v121 = *((_QWORD *)&v147 + 1);
          sub_22E865E5C(*(_QWORD *)(a1 + 96), v70, v126, v127, v120, v121, v125);
          if (SHIBYTE(v148) < 0)
            operator delete((void *)v147);
LABEL_302:
          **(_BYTE **)v141 = v141[8];
LABEL_303:
          *v149 = v150;
LABEL_304:
          *v157 = v158;
LABEL_305:
          LOWORD(v157) = 1;
          sub_22E885940(a1, (unsigned __int16 *)&v157, 1, 2);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
          return (unsigned int *)llvm::deallocate_buffer(v133[0], (void *)(12 * v134));
        }
        v79 = v86;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        v87 = sub_22E811E8C((uint64_t)v141);
        **(_BYTE **)v141 = v141[8];
        if ((v87 & 1) != 0)
          goto LABEL_303;
LABEL_170:
        v80 = *v2;
        if ((sub_22E811E8C((uint64_t)&v149) & 1) != 0)
          goto LABEL_303;
        *(_DWORD *)v141 = v79;
        v81 = v129 | (v80 << 32);
        *(_QWORD *)&v141[4] = v81;
        v140.__r_.__value_.__r.__words[0] = *(_QWORD *)v141;
        LODWORD(v140.__r_.__value_.__r.__words[1]) = v80;
        LODWORD(v147) = v79;
        *(_QWORD *)((char *)&v147 + 4) = *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4);
        sub_22F2EE58C((uint64_t)v141, (uint64_t)v133, (int *)&v147, (__int128 *)((char *)&v147 + 4));
        if (!v142[4])
        {
          v88 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v88 + 312) = v129;
          *(_DWORD *)(v88 + 316) = 1692;
          if (*(char *)(v88 + 311) < 0)
          {
            **(_BYTE **)(v88 + 288) = 0;
            *(_QWORD *)(v88 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v88 + 288) = 0;
            *(_BYTE *)(v88 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v147, v88);
          v89 = sub_22F419360(v79);
          v90 = (unsigned __int8 *)v147;
          if (!(_QWORD)v147)
          {
            v90 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v147 + 1));
            *(_QWORD *)&v147 = v90;
          }
          v90[*v90 + 1] = 1;
          v91 = v147;
          v92 = *(unsigned __int8 *)v147;
          *(_BYTE *)v147 = v92 + 1;
          *(_QWORD *)(v91 + 8 * v92 + 16) = v89;
          if (*(_WORD *)(a1 + 32) == 65)
            v81 = v129 | ((unint64_t)*v2 << 32);
          v142[8] = 0;
          *(_QWORD *)v142 = 0;
          v144 = 0;
          v145 = 0;
          __p = 0;
          LOBYTE(v146) = 0;
          *(_QWORD *)v141 = v81;
LABEL_260:
          v141[8] = 1;
          sub_22E6D82D0((uint64_t *)&v147, v141);
          if (SHIBYTE(v145) < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)&v147);
        }
LABEL_172:
        *v149 = v150;
        if (!v128)
          goto LABEL_269;
        if (*(_WORD *)(a1 + 32) == 65)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
          continue;
        }
        if ((sub_22E811E8C((uint64_t)&v157) & 1) != 0)
          goto LABEL_304;
LABEL_269:
        *v157 = v158;
        if (*(_WORD *)(a1 + 32) != 1)
        {
          sub_22E884578(a1, (int *)v2, 1700, (uint64_t)v132);
          sub_22E3BB0B8((uint64_t)v132);
          goto LABEL_305;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        if (!*(_DWORD *)(v4 + 8))
        {
          v122 = *(_QWORD *)(a1 + 88);
          v123 = *(_QWORD *)(v4 + 16);
          sub_22F30AEE8(v122 + 1376);
          v124 = *(_QWORD *)(v122 + 1376);
          *(_DWORD *)(v124 + 144 * *(unsigned int *)(v122 + 1384) - 144) = v3;
          *(_QWORD *)(v124 + 144 * *(unsigned int *)(v122 + 1384) - 136) = v123;
        }
        v108 = *v15;
        if ((*v15 & 4) != 0)
        {
          v110 = v108 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(uint64_t **)v110;
          v109 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
        }
        else
        {
          v109 = (uint64_t)&v15[v108 > 7];
        }
        while (v15 != (uint64_t *)v109)
        {
          v111 = *v15++;
          v112 = *(_QWORD *)(a1 + 88);
          v130[0] = 0;
          v130[1] = 0;
          v131 = 0;
          sub_22E873BF4((uint64_t)v130, (uint64_t)v133);
          sub_22E90F414(v112, v111, v3, (int32x2_t *)v130);
          llvm::deallocate_buffer(v130[0], (void *)(12 * v131));
        }
        return (unsigned int *)llvm::deallocate_buffer(v133[0], (void *)(12 * v134));
      case 0xEuLL:
        if (*(_QWORD *)v54 != 0x746E695F636A626FLL || *(_QWORD *)(v54 + 6) != 0x656361667265746ELL)
          goto LABEL_149;
        v61 = 1;
        v60 = sub_22E867AFC;
        v59 = 0x1000000;
        v57 = 9;
        goto LABEL_150;
      case 0x13uLL:
        if (*(_QWORD *)v54 != 0x706D695F636A626FLL
          || *((_QWORD *)v54 + 1) != 0x7461746E656D656CLL
          || *(_QWORD *)(v54 + 11) != 0x6E6F697461746E65)
        {
          goto LABEL_149;
        }
        v61 = 1;
        v60 = sub_22E867AFC;
        v59 = 0x1000000;
        v57 = 8;
        goto LABEL_150;
      default:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        goto LABEL_199;
    }
  }
}

void sub_22E867560(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int8x8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  std::string *v46;
  size_t size;
  void *v48;
  std::string *v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  std::string v57;
  void *__dst[2];
  _QWORD v59[6];
  int v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  _BYTE v65[12];
  char v66;
  __int128 __p;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22F141A3C(*(unsigned int *)(a5 + 40), 0, *(_QWORD **)(*(_QWORD *)(a5 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a5 + 8) + 56));
  if (v10)
    v11 = v10;
  else
    v11 = *(unsigned int *)(a5 + 16);
  v12 = *(_QWORD *)(a5 + 96);
  *(_DWORD *)(v12 + 312) = v11;
  *(_DWORD *)(v12 + 316) = a2;
  if (*(char *)(v12 + 311) < 0)
  {
    **(_BYTE **)(v12 + 288) = 0;
    *(_QWORD *)(v12 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 288) = 0;
    *(_BYTE *)(v12 + 311) = 0;
  }
  sub_22E78E558((uint64_t)a1, v12);
  memset(&v57, 0, sizeof(v57));
  v13 = *(unsigned __int16 *)(a5 + 32);
  if ((v13 - 7) >= 6 && (v13 - 13) >= 6 && v13 != 1)
  {
    v21 = *(_QWORD *)(a5 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (*(_DWORD *)v22 == 3)
      {
        v54 = *(unsigned __int16 *)(v22 + 16);
        v55 = *(unsigned __int8 *)(v22 + 18);
        if (v54 == 28257 && v55 == 121)
        {
          v14 = 3;
          goto LABEL_11;
        }
      }
      else if (*(_DWORD *)v22 == 8 && *(_QWORD *)(v22 + 16) == 0x6F745F796C707061)
      {
        v14 = 1;
        goto LABEL_11;
      }
    }
  }
  if (v13 == 63)
    v14 = 2;
  else
    v14 = 4;
LABEL_11:
  if (!a4)
    MEMORY[0x2348A0C14](&v57, ", ");
  if (a4 <= 1 && v14 >= 2)
    std::string::append(&v57, "apply_to");
  if (v14 < 3)
    goto LABEL_64;
  std::string::append(&v57, " = ");
  if (v14 != 4)
    goto LABEL_64;
  v64 = &v65[8];
  *(_QWORD *)v65 = 0x600000000;
  sub_22E47EDD0((uint64_t)&v64, 1uLL, -1);
  v70 = 25;
  v15 = (int8x8_t *)v64;
  v16 = *(unsigned int *)v65;
  *((_QWORD *)v64 + *(unsigned int *)v65 - 1) &= 0x1FFFFFFuLL;
  v19 = *(_QWORD *)(a3 + 8);
  v18 = (uint64_t *)(a3 + 8);
  v17 = v19;
  if ((v19 & 4) != 0)
  {
    v23 = v17 & 0xFFFFFFFFFFFFFFF8;
    v18 = *(uint64_t **)v23;
    v20 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
  }
  else
  {
    v20 = (uint64_t)&v18[v17 > 7];
  }
  if (v18 != (uint64_t *)v20)
  {
    do
    {
      v24 = *v18;
      v61 = v63;
      v62 = 0x400000000;
      (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v24 + 72) + 72))(*(_QWORD *)(v24 + 72), &v61, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 56));
      __dst[0] = v59;
      __dst[1] = (void *)0x600000000;
      sub_22E47EDD0((uint64_t)__dst, 1uLL, 0);
      v60 = 25;
      v25 = v61;
      if ((_DWORD)v62)
      {
        v26 = (char *)__dst[0];
        v27 = 8 * v62;
        v28 = (char *)v61 + 4;
        do
        {
          if (*v28)
            *(_QWORD *)&v26[((unint64_t)*((unsigned int *)v28 - 1) >> 3) & 0x1FFFFFF8] |= 1 << *((_DWORD *)v28 - 1);
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
      }
      v29 = *(_DWORD *)v65;
      v30 = __dst[1];
      if (LODWORD(__dst[1]) >= *(_DWORD *)v65)
        v31 = *(unsigned int *)v65;
      else
        v31 = LODWORD(__dst[1]);
      if ((_DWORD)v31)
      {
        v32 = (uint64_t *)__dst[0];
        v33 = v64;
        v34 = v31;
        do
        {
          v35 = *v32++;
          *v33++ &= v35;
          --v34;
        }
        while (v34);
      }
      if (v29 > v30)
      {
        v36 = v64;
        do
        {
          v36[v31] = 0;
          LODWORD(v31) = v31 + 1;
        }
        while (v29 != (_DWORD)v31);
      }
      if (__dst[0] != v59)
      {
        free(__dst[0]);
        v25 = v61;
      }
      if (v25 != v63)
        free(v25);
      ++v18;
    }
    while (v18 != (uint64_t *)v20);
    v15 = (int8x8_t *)v64;
    v16 = *(unsigned int *)v65;
  }
  if ((_DWORD)v16)
  {
    v37 = 0;
    v38 = 8 * v16;
    v39 = v15;
    do
    {
      v40 = *v39++;
      v41 = (uint8x8_t)vcnt_s8(v40);
      v41.i16[0] = vaddlv_u8(v41);
      v37 += v41.i32[0];
      v38 -= 8;
    }
    while (v38);
    if (v37)
    {
      std::string::append(&v57, "any(");
      v42 = 0;
      v43 = 0;
      do
      {
        if (((*((_QWORD *)v64 + (v42 >> 6)) >> v42) & 1) != 0)
        {
          if ((v43 & 1) != 0)
            std::string::append(&v57, ", ");
          v44 = sub_22F419360(v42);
          std::string::append(&v57, v44);
          v43 = 1;
        }
        ++v42;
      }
      while (v42 != 25);
      std::string::append(&v57, ")");
      LOWORD(__dst[0]) = 1;
      sub_22E885940(a5, (unsigned __int16 *)__dst, 1, 2);
      v45 = *(unsigned int *)(a5 + 16);
      if (v64 != &v65[8])
        free(v64);
      if ((_DWORD)v11 == (_DWORD)v45)
      {
LABEL_64:
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v57;
        else
          v46 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v57.__r_.__value_.__l.__size_;
        sub_22E729148(v46, size, v11, 0, (uint64_t)&v64);
LABEL_71:
        sub_22E6D82D0(a1, &v64);
        if (SHIBYTE(v68) < 0)
          operator delete((void *)__p);
        goto LABEL_73;
      }
      v48 = (void *)(v11 | (v45 << 32));
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v57;
      else
        v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v65[4] = 0;
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
      else
        v50 = v57.__r_.__value_.__l.__size_;
      v66 = 0;
      v69 = 0;
      v64 = v48;
      v65[0] = 0;
      if (v50 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v50 >= 0x17)
      {
        v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v52 = v50 | 7;
        v53 = v52 + 1;
        v51 = operator new(v52 + 1);
        __dst[1] = (void *)v50;
        v59[0] = v53 | 0x8000000000000000;
        __dst[0] = v51;
      }
      else
      {
        HIBYTE(v59[0]) = v50;
        v51 = __dst;
        if (!v50)
          goto LABEL_90;
      }
      memmove(v51, v49, v50);
LABEL_90:
      *((_BYTE *)v51 + v50) = 0;
      __p = *(_OWORD *)__dst;
      v68 = v59[0];
      goto LABEL_71;
    }
  }
  if (v15 != (int8x8_t *)&v65[8])
    free(v15);
LABEL_73:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

uint64_t sub_22E867AFC()
{
  return 0;
}

uint64_t sub_22E867B04(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = 0;
  if ((a3 & 1) == 0 && a2 == 9)
  {
    if (*(_QWORD *)a1 ^ 0x65626D656D5F7369 | *(unsigned __int8 *)(a1 + 8) ^ 0x72)
      return 0;
    else
      return 0x100000005;
  }
  return result;
}

uint64_t sub_22E867B54(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = 0;
  if ((a3 & 1) == 0 && a2 == 11)
  {
    if (*a1 ^ 0x6174736E695F7369 | *(_QWORD *)((char *)a1 + 3) ^ 0x65636E6174736E69)
      return 0;
    else
      return 0x10000000BLL;
  }
  return result;
}

uint64_t sub_22E867BB0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = 0;
  if (a3 && a2 == 8)
  {
    if (*a1 == 0x6E6F696E755F7369)
      return 0x10000000FLL;
    else
      return 0;
  }
  return result;
}

uint64_t sub_22E867BEC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = 0;
  if ((a3 & 1) == 0 && a2 == 12)
  {
    if (*(_QWORD *)a1 ^ 0x6E6F6974636E7566 | *(unsigned int *)(a1 + 8) ^ 0x65707954)
      return 0;
    else
      return 0x100000011;
  }
  return result;
}

uint64_t sub_22E867C40(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (a3)
  {
    if (a2 == 12)
    {
      if (*(_QWORD *)a1 ^ 0x6D617261705F7369 | *(unsigned int *)(a1 + 8) ^ 0x72657465)
        return 0;
      else
        return 0x100000018;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    switch(a2)
    {
      case 8:
        if (*(_QWORD *)a1 != 0x6C61636F6C5F7369)
          return 0;
        result = 0x100000016;
        break;
      case 9:
        if (*(_QWORD *)a1 != 0x61626F6C675F7369 || *(_BYTE *)(a1 + 8) != 108)
          return 0;
        result = 0x100000015;
        break;
      case 12:
        if (*(_QWORD *)a1 != 0x6D617261705F7369 || *(_DWORD *)(a1 + 8) != 1919251557)
          return 0;
        result = 0x100000017;
        break;
      case 15:
        if (*(_QWORD *)a1 != 0x61657268745F7369 || *(_QWORD *)(a1 + 7) != 0x6C61636F6C5F6461)
          return 0;
        result = 0x100000014;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_22E867DA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E867DE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E867E30(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  return sub_22E867E40(a2, a4, 0);
}

char *sub_22E867E40(unint64_t a1, _DWORD *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[3];
  __int16 v58;
  unsigned int v59;
  uint64_t v60;
  __int16 v61;

  if (a3)
  {
    if ((sub_22F18FB4C(a1, &v59), v61 != 5)
      || (v6 = *(_QWORD *)(v60 + 16), *(_DWORD *)v6 != 5)
      || ((v7 = *(_DWORD *)(v6 + 16), v8 = *(unsigned __int8 *)(v6 + 20), v7 == 1734962273)
        ? (v9 = v8 == 110)
        : (v9 = 0),
          !v9))
    {
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v10 + 312) = v59;
      *(_DWORD *)(v10 + 316) = 2018;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v57[0] = v10 + 320;
      v57[1] = 0;
      v57[2] = v10;
      v58 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v20 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v10 + 768);
        v22 = 56 * v20;
        do
        {
          if (*(char *)(v21 + v22 - 9) < 0)
            operator delete(*(void **)(v21 + v22 - 32));
          v22 -= 56;
        }
        while (v22);
      }
      *(_DWORD *)(v10 + 776) = 0;
      v23 = v57;
      return (char *)sub_22E3BB0B8((uint64_t)v23);
    }
  }
  sub_22F18FB4C(a1, &v59);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 196) & 2) != 0)
  {
    if (v61 != 21)
    {
      v24 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v24 + 312) = v59;
      *(_DWORD *)(v24 + 316) = 1995;
      if (*(char *)(v24 + 311) < 0)
      {
        **(_BYTE **)(v24 + 288) = 0;
        *(_QWORD *)(v24 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v24 + 288) = 0;
        *(_BYTE *)(v24 + 311) = 0;
      }
      v29 = (unsigned __int8 *)(v24 + 320);
      v53 = v24 + 320;
      v54 = 0;
      v55 = v24;
      v56 = 1;
      *(_BYTE *)(v24 + 320) = 0;
      *(_DWORD *)(v24 + 664) = 0;
      v30 = *(unsigned int *)(v24 + 776);
      if (!(_DWORD)v30)
        goto LABEL_58;
      v31 = *(_QWORD *)(v24 + 768);
      v32 = 56 * v30;
      do
      {
        if (*(char *)(v31 + v32 - 9) < 0)
          operator delete(*(void **)(v31 + v32 - 32));
        v32 -= 56;
      }
      while (v32);
      goto LABEL_57;
    }
  }
  else if (v61 != 63)
  {
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = v59;
    *(_DWORD *)(v11 + 316) = 1985;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(v11 + 320);
    v53 = v11 + 320;
    v54 = 0;
    v55 = v11;
    v56 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v26 = *(unsigned int *)(v11 + 776);
    if (!(_DWORD)v26)
      goto LABEL_92;
    v27 = *(_QWORD *)(v11 + 768);
    v28 = 56 * v26;
    do
    {
      if (*(char *)(v27 + v28 - 9) < 0)
        operator delete(*(void **)(v27 + v28 - 32));
      v28 -= 56;
    }
    while (v28);
LABEL_91:
    LODWORD(v26) = *v25;
LABEL_92:
    *(_DWORD *)(v11 + 776) = 0;
    v34 = (const char *)a3;
    v25[v26 + 1] = 2;
LABEL_93:
    *(_BYTE *)(v11 + 320) = v26 + 1;
    v33 = &v25[8 * v26];
    goto LABEL_94;
  }
  sub_22F18FB4C(a1, &v59);
  if (v61 != 5)
  {
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = v59;
    *(_DWORD *)(v11 + 316) = 1992;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(v11 + 320);
    v53 = v11 + 320;
    v54 = 0;
    v55 = v11;
    v56 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v26 = *(unsigned int *)(v11 + 776);
    if (!(_DWORD)v26)
      goto LABEL_66;
    v35 = *(_QWORD *)(v11 + 768);
    v36 = 56 * v26;
    do
    {
      if (*(char *)(v35 + v36 - 9) < 0)
        operator delete(*(void **)(v35 + v36 - 32));
      v36 -= 56;
    }
    while (v36);
    goto LABEL_65;
  }
  v12 = *(int **)(v60 + 16);
  v13 = *v12;
  if (*v12 == 5)
  {
    if (v12[4] == 1702326128 && *((_BYTE *)v12 + 20) == 114)
    {
      v19 = 3;
    }
    else
    {
      v38 = v12[4];
      v39 = *((unsigned __int8 *)v12 + 20);
      if (v38 != 1702061426 || v39 != 116)
        goto LABEL_83;
      v19 = 5;
    }
  }
  else if (v13 == 7)
  {
    v41 = v12[4];
    v42 = *(int *)((char *)v12 + 19);
    if (v41 != 1970561390 || v42 != 1818325621)
      goto LABEL_83;
    v19 = 1;
  }
  else
  {
    if (v13 != 6)
    {
LABEL_83:
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v11 + 312) = v59;
      *(_DWORD *)(v11 + 316) = 1986;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v25 = (unsigned __int8 *)(v11 + 320);
      v53 = v11 + 320;
      v54 = 0;
      v55 = v11;
      v56 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v26 = *(unsigned int *)(v11 + 776);
      if (!(_DWORD)v26)
        goto LABEL_92;
      v44 = *(_QWORD *)(v11 + 768);
      v45 = 56 * v26;
      do
      {
        if (*(char *)(v44 + v45 - 9) < 0)
          operator delete(*(void **)(v44 + v45 - 32));
        v45 -= 56;
      }
      while (v45);
      goto LABEL_91;
    }
    if (v12[4] == 1769234798 && *((_WORD *)v12 + 10) == 25974)
    {
      v19 = 0;
    }
    else if (v12[4] == 1801675120 && *((_WORD *)v12 + 10) == 25701)
    {
      v19 = 2;
    }
    else
    {
      v16 = v12[4];
      v17 = *((unsigned __int16 *)v12 + 10);
      if (v16 != 912482669 || v17 != 27448)
        goto LABEL_83;
      v19 = 4;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 196) & 2) != 0)
  {
    sub_22F18FB4C(a1, &v59);
    if (v61 != 22)
    {
      v24 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v24 + 312) = v59;
      *(_DWORD *)(v24 + 316) = 1999;
      if (*(char *)(v24 + 311) < 0)
      {
        **(_BYTE **)(v24 + 288) = 0;
        *(_QWORD *)(v24 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v24 + 288) = 0;
        *(_BYTE *)(v24 + 311) = 0;
      }
      v29 = (unsigned __int8 *)(v24 + 320);
      v53 = v24 + 320;
      v54 = 0;
      v55 = v24;
      v56 = 1;
      *(_BYTE *)(v24 + 320) = 0;
      *(_DWORD *)(v24 + 664) = 0;
      v30 = *(unsigned int *)(v24 + 776);
      if (!(_DWORD)v30)
        goto LABEL_58;
      v51 = *(_QWORD *)(v24 + 768);
      v52 = 56 * v30;
      do
      {
        if (*(char *)(v51 + v52 - 9) < 0)
          operator delete(*(void **)(v51 + v52 - 32));
        v52 -= 56;
      }
      while (v52);
LABEL_57:
      LODWORD(v30) = *v29;
LABEL_58:
      *(_DWORD *)(v24 + 776) = 0;
      v29[v30 + 1] = 1;
      *(_BYTE *)(v24 + 320) = v30 + 1;
      v33 = &v29[8 * v30];
      v34 = "align";
LABEL_94:
      *((_QWORD *)v33 + 2) = v34;
      v23 = &v53;
      return (char *)sub_22E3BB0B8((uint64_t)v23);
    }
  }
  v47 = v59;
  sub_22F18FB4C(a1, &v59);
  if (v61 != 2)
  {
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v11 + 312) = v59;
    *(_DWORD *)(v11 + 316) = 2005;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v25 = (unsigned __int8 *)(v11 + 320);
    v53 = v11 + 320;
    v54 = 0;
    v55 = v11;
    v56 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v26 = *(unsigned int *)(v11 + 776);
    if (!(_DWORD)v26)
      goto LABEL_66;
    v49 = *(_QWORD *)(v11 + 768);
    v50 = 56 * v26;
    do
    {
      if (*(char *)(v49 + v50 - 9) < 0)
        operator delete(*(void **)(v49 + v50 - 32));
      v50 -= 56;
    }
    while (v50);
LABEL_65:
    LODWORD(v26) = *v25;
LABEL_66:
    *(_DWORD *)(v11 + 776) = 0;
    v34 = "align";
    if (a3)
      v34 = "options";
    v25[v26 + 1] = 1;
    goto LABEL_93;
  }
  v48 = sub_22E3CD3D4(a1 + 128, 24, 3);
  *(_DWORD *)(v48 + 16) = 0;
  *(_QWORD *)v48 = 0;
  *(_QWORD *)(v48 + 8) = 0;
  *(_WORD *)(v48 + 16) = 415;
  *(_DWORD *)v48 = *a2;
  *(_DWORD *)(v48 + 4) = v47;
  *(_QWORD *)(v48 + 8) = v19;
  return sub_22F1735E4(a1, (_BYTE *)v48, 1, 1, 0, 0);
}

uint64_t sub_22E8684CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86850C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E86855C(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int16 v40;

  v5 = *a4;
  v6 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v6 | 0x20;
  sub_22F18FB4C(a2, &v38);
  v7 = v6 & 0x20;
  v8 = *(_WORD *)(a2 + 536);
  v9 = v8 & 0xFFDF | v7;
  *(_WORD *)(a2 + 536) = v9;
  if (v40 - 7 < 6)
    goto LABEL_7;
  v10 = v40 - 13 < 6 || v40 == 1;
  if (v10 || !v39)
    goto LABEL_7;
  v17 = *(_QWORD *)(v39 + 16);
  if (*(_DWORD *)v17 == 4)
  {
    if (*(_DWORD *)(v17 + 16) != 1752397168)
    {
LABEL_7:
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v38;
      *(_DWORD *)(v11 + 316) = 1992;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v12 = (unsigned __int8 *)(v11 + 320);
      v34 = v11 + 320;
      v35 = 0;
      v36 = v11;
      v37 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v13 = *(unsigned int *)(v11 + 776);
      if (!(_DWORD)v13)
        goto LABEL_16;
      v14 = *(_QWORD *)(v11 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
LABEL_15:
      LODWORD(v13) = *v12;
LABEL_16:
      *(_DWORD *)(v11 + 776) = 0;
      v12[v13 + 1] = 1;
      *(_BYTE *)(v11 + 320) = v13 + 1;
      *(_QWORD *)&v12[8 * v13 + 16] = "visibility";
      return (char *)sub_22E3BB0B8((uint64_t)&v34);
    }
    *(_WORD *)(a2 + 536) = v8 | 0x20;
    sub_22F18FB4C(a2, &v38);
    v24 = *(_WORD *)(a2 + 536);
    *(_WORD *)(a2 + 536) = v24 & 0xFFDF | v7;
    if (v40 != 21)
    {
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v38;
      *(_DWORD *)(v11 + 316) = 1995;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v12 = (unsigned __int8 *)(v11 + 320);
      v34 = v11 + 320;
      v35 = 0;
      v36 = v11;
      v37 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v13 = *(unsigned int *)(v11 + 776);
      if (!(_DWORD)v13)
        goto LABEL_16;
      v28 = *(_QWORD *)(v11 + 768);
      v29 = 56 * v13;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
      goto LABEL_15;
    }
    *(_WORD *)(a2 + 536) = v24 | 0x20;
    sub_22F18FB4C(a2, &v38);
    v25 = *(_WORD *)(a2 + 536);
    *(_WORD *)(a2 + 536) = v25 & 0xFFDF | v7;
    if (v40 - 7 < 6 || v40 - 13 < 6 || v40 == 1 || (v21 = v39) == 0)
    {
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v38;
      *(_DWORD *)(v11 + 316) = 1992;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v12 = (unsigned __int8 *)(v11 + 320);
      v34 = v11 + 320;
      v35 = 0;
      v36 = v11;
      v37 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v13 = *(unsigned int *)(v11 + 776);
      if (!(_DWORD)v13)
        goto LABEL_16;
      v30 = *(_QWORD *)(v11 + 768);
      v31 = 56 * v13;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
      goto LABEL_15;
    }
    *(_WORD *)(a2 + 536) = v25 | 0x20;
    sub_22F18FB4C(a2, &v38);
    v9 = *(_WORD *)(a2 + 536) & 0xFFDF | v7;
    *(_WORD *)(a2 + 536) = v9;
    if (v40 != 22)
    {
      v11 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v11 + 312) = v38;
      *(_DWORD *)(v11 + 316) = 1999;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v12 = (unsigned __int8 *)(v11 + 320);
      v34 = v11 + 320;
      v35 = 0;
      v36 = v11;
      v37 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v13 = *(unsigned int *)(v11 + 776);
      if (!(_DWORD)v13)
        goto LABEL_16;
      v32 = *(_QWORD *)(v11 + 768);
      v33 = 56 * v13;
      do
      {
        if (*(char *)(v32 + v33 - 9) < 0)
          operator delete(*(void **)(v32 + v33 - 32));
        v33 -= 56;
      }
      while (v33);
      goto LABEL_15;
    }
  }
  else
  {
    if (*(_DWORD *)v17 != 3)
      goto LABEL_7;
    v18 = *(unsigned __int16 *)(v17 + 16);
    v19 = *(unsigned __int8 *)(v17 + 18);
    if (v18 != 28528 || v19 != 112)
      goto LABEL_7;
    v21 = 0;
  }
  v22 = v38;
  *(_WORD *)(a2 + 536) = v9 | 0x20;
  sub_22F18FB4C(a2, &v38);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v7;
  if (v40 != 2)
  {
    v11 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v11 + 312) = v38;
    *(_DWORD *)(v11 + 316) = 2005;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v12 = (unsigned __int8 *)(v11 + 320);
    v34 = v11 + 320;
    v35 = 0;
    v36 = v11;
    v37 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v13 = *(unsigned int *)(v11 + 776);
    if (!(_DWORD)v13)
      goto LABEL_16;
    v26 = *(_QWORD *)(v11 + 768);
    v27 = 56 * v13;
    do
    {
      if (*(char *)(v26 + v27 - 9) < 0)
        operator delete(*(void **)(v26 + v27 - 32));
      v27 -= 56;
    }
    while (v27);
    goto LABEL_15;
  }
  v23 = operator new[]();
  *(_DWORD *)v23 = v5;
  *(_DWORD *)(v23 + 4) = v22;
  *(_QWORD *)(v23 + 8) = v21;
  *(_QWORD *)(v23 + 16) = 409;
  return sub_22F1735E4(a2, (_BYTE *)v23, 1, 1, 1, 0);
}

uint64_t sub_22E868A1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E868A5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E868AAC(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  return sub_22E867E40(a2, a4, 1u);
}

uint64_t sub_22E868ABC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E868AFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E868B4C(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  __int16 v49;
  _QWORD v50[3];
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  int v60;

  v6 = *a4;
  sub_22F18FB4C(a2, (unsigned int *)&v56);
  if (v58 != 21)
  {
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = v56;
    *(_DWORD *)(v15 + 316) = 1995;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v16 = (unsigned __int8 *)(v15 + 320);
    v52 = v15 + 320;
    v53 = 0;
    v54 = v15;
    v55 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v17 = *(unsigned int *)(v15 + 776);
    if (!(_DWORD)v17)
      goto LABEL_59;
    v18 = *(_QWORD *)(v15 + 768);
    v19 = 56 * v17;
    do
    {
      if (*(char *)(v18 + v19 - 9) < 0)
        operator delete(*(void **)(v18 + v19 - 32));
      v19 -= 56;
    }
    while (v19);
    goto LABEL_58;
  }
  sub_22F18FB4C(a2, (unsigned int *)&v56);
  if (v58 == 5)
  {
    v20 = *(_QWORD *)(v57 + 16);
    if (*(_DWORD *)v20 == 3)
    {
      v29 = *(unsigned __int16 *)(v20 + 16);
      v30 = *(unsigned __int8 *)(v20 + 18);
      if (v29 == 28528 && v30 == 112)
      {
        v14 = 4;
LABEL_63:
        sub_22F18FB4C(a2, (unsigned int *)&v56);
        if (v58 == 65)
        {
          sub_22F18FB4C(a2, (unsigned int *)&v56);
          if (v58 != 5)
          {
            if (v58 != 7)
            {
              v39 = *(_QWORD *)(a2 + 48);
              *(_DWORD *)(v39 + 312) = v56;
              *(_DWORD *)(v39 + 316) = 2019;
              if (*(char *)(v39 + 311) < 0)
              {
                **(_BYTE **)(v39 + 288) = 0;
                *(_QWORD *)(v39 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v39 + 288) = 0;
                *(_BYTE *)(v39 + 311) = 0;
              }
              v48[0] = v39 + 320;
              v48[1] = 0;
              v48[2] = v39;
              v49 = 1;
              *(_BYTE *)(v39 + 320) = 0;
              *(_DWORD *)(v39 + 664) = 0;
              v40 = *(unsigned int *)(v39 + 776);
              if ((_DWORD)v40)
              {
                v41 = *(_QWORD *)(v39 + 768);
                v42 = 56 * v40;
                do
                {
                  if (*(char *)(v41 + v42 - 9) < 0)
                    operator delete(*(void **)(v41 + v42 - 32));
                  v42 -= 56;
                }
                while (v42);
              }
              *(_DWORD *)(v39 + 776) = 0;
              v36 = v48;
              return (char *)sub_22E3BB0B8((uint64_t)v36);
            }
            v14 |= 1u;
            v47 = v56;
            v7 = v57;
            v8 = v59;
            v4 = v60;
            sub_22F18FB4C(a2, (unsigned int *)&v56);
            v12 = 0;
            v13 = 0;
            goto LABEL_67;
          }
          v37 = *(unsigned int **)(v57 + 16);
          v38 = *v37;
          v12 = v37 + 4;
          v13 = v38;
          sub_22F18FB4C(a2, (unsigned int *)&v56);
          if (v58 == 65)
          {
            sub_22F18FB4C(a2, (unsigned int *)&v56);
            if (v58 != 7)
            {
              v43 = *(_QWORD *)(a2 + 48);
              *(_DWORD *)(v43 + 312) = v56;
              *(_DWORD *)(v43 + 316) = 2019;
              if (*(char *)(v43 + 311) < 0)
              {
                **(_BYTE **)(v43 + 288) = 0;
                *(_QWORD *)(v43 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v43 + 288) = 0;
                *(_BYTE *)(v43 + 311) = 0;
              }
              v50[0] = v43 + 320;
              v50[1] = 0;
              v50[2] = v43;
              v51 = 1;
              *(_BYTE *)(v43 + 320) = 0;
              *(_DWORD *)(v43 + 664) = 0;
              v44 = *(unsigned int *)(v43 + 776);
              if ((_DWORD)v44)
              {
                v45 = *(_QWORD *)(v43 + 768);
                v46 = 56 * v44;
                do
                {
                  if (*(char *)(v45 + v46 - 9) < 0)
                    operator delete(*(void **)(v45 + v46 - 32));
                  v46 -= 56;
                }
                while (v46);
              }
              *(_DWORD *)(v43 + 776) = 0;
              v36 = v50;
              return (char *)sub_22E3BB0B8((uint64_t)v36);
            }
            v14 |= 1u;
            v47 = v56;
            v7 = v57;
            v8 = v59;
            v4 = v60;
            sub_22F18FB4C(a2, (unsigned int *)&v56);
LABEL_67:
            v11 = 7;
            goto LABEL_25;
          }
          v8 = 0;
          v11 = 0;
          v7 = 0;
        }
        else
        {
          v8 = 0;
          v11 = 0;
          v7 = 0;
          v12 = 0;
          v13 = 0;
        }
        v47 = 0;
        goto LABEL_25;
      }
    }
    else if (*(_DWORD *)v20 == 4)
    {
      if (*(_DWORD *)(v20 + 16) == 2003789939)
      {
        sub_22F18FB4C(a2, (unsigned int *)&v56);
        v8 = 0;
        v11 = 0;
        v7 = 0;
        v12 = 0;
        v13 = 0;
        v47 = 0;
        v14 = 8;
        goto LABEL_25;
      }
      if (*(_DWORD *)(v20 + 16) == 1752397168)
      {
        v14 = 2;
        goto LABEL_63;
      }
    }
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = v56;
    *(_DWORD *)(v15 + 316) = 2010;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v16 = (unsigned __int8 *)(v15 + 320);
    v52 = v15 + 320;
    v53 = 0;
    v54 = v15;
    v55 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v17 = *(unsigned int *)(v15 + 776);
    if (!(_DWORD)v17)
      goto LABEL_59;
    v32 = *(_QWORD *)(v15 + 768);
    v33 = 56 * v17;
    do
    {
      if (*(char *)(v32 + v33 - 9) < 0)
        operator delete(*(void **)(v32 + v33 - 32));
      v33 -= 56;
    }
    while (v33);
    goto LABEL_58;
  }
  if (v58 == 7)
  {
    v47 = v56;
    v7 = v57;
    v8 = v59;
    v4 = v60;
    sub_22F18FB4C(a2, (unsigned int *)&v56);
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 192);
    if ((v9 & 0x200000000) != 0)
      v10 = 3;
    else
      v10 = 1;
    v11 = 7;
    v12 = 0;
    v13 = 0;
    if ((v9 & 0x100000000) != 0)
      v14 = 3;
    else
      v14 = v10;
  }
  else
  {
    v8 = 0;
    v11 = 0;
    v7 = 0;
    v12 = 0;
    v13 = 0;
    v47 = 0;
    v14 = 4 * ((*(_BYTE *)(*(_QWORD *)(a2 + 56) + 196) & 3) != 0);
  }
LABEL_25:
  if (v58 == 22)
  {
    v21 = v56;
    sub_22F18FB4C(a2, (unsigned int *)&v56);
    if (v58 == 2)
    {
      v22 = sub_22E3CD3D4(a2 + 128, 48, 3);
      v23 = v7;
      v24 = v22;
      *(_DWORD *)v22 = v14;
      *(_QWORD *)(v22 + 8) = v12;
      *(_QWORD *)(v22 + 16) = v13;
      *(_QWORD *)(v22 + 24) = v47;
      *(_QWORD *)(v22 + 32) = v23;
      *(_WORD *)(v22 + 40) = v11;
      *(_WORD *)(v22 + 42) = v8;
      *(_DWORD *)(v22 + 44) = v4;
      v25 = sub_22E3CD3D4(a2 + 128, 24, 3);
      *(_DWORD *)(v25 + 16) = 410;
      *(_DWORD *)v25 = v6;
      *(_DWORD *)(v25 + 4) = v21;
      *(_QWORD *)(v25 + 8) = v24;
      return sub_22F1735E4(a2, (_BYTE *)v25, 1, 1, 0, 0);
    }
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = v56;
    *(_DWORD *)(v15 + 316) = 2005;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v16 = (unsigned __int8 *)(v15 + 320);
    v52 = v15 + 320;
    v53 = 0;
    v54 = v15;
    v55 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v17 = *(unsigned int *)(v15 + 776);
    if (!(_DWORD)v17)
      goto LABEL_59;
    v34 = *(_QWORD *)(v15 + 768);
    v35 = 56 * v17;
    do
    {
      if (*(char *)(v34 + v35 - 9) < 0)
        operator delete(*(void **)(v34 + v35 - 32));
      v35 -= 56;
    }
    while (v35);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = v56;
    *(_DWORD *)(v15 + 316) = 1999;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v16 = (unsigned __int8 *)(v15 + 320);
    v52 = v15 + 320;
    v53 = 0;
    v54 = v15;
    v55 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v17 = *(unsigned int *)(v15 + 776);
    if (!(_DWORD)v17)
      goto LABEL_59;
    v27 = *(_QWORD *)(v15 + 768);
    v28 = 56 * v17;
    do
    {
      if (*(char *)(v27 + v28 - 9) < 0)
        operator delete(*(void **)(v27 + v28 - 32));
      v28 -= 56;
    }
    while (v28);
  }
LABEL_58:
  LODWORD(v17) = *v16;
LABEL_59:
  *(_DWORD *)(v15 + 776) = 0;
  v16[v17 + 1] = 1;
  *(_BYTE *)(v15 + 320) = v17 + 1;
  *(_QWORD *)&v16[8 * v17 + 16] = "pack";
  v36 = &v52;
  return (char *)sub_22E3BB0B8((uint64_t)v36);
}

uint64_t sub_22E8691F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E869234(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E869284(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  __int16 v33;
  _QWORD v34[3];
  __int16 v35;
  _QWORD v36[3];
  __int16 v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v40;

  sub_22F18FB4C(a2, &v38);
  v6 = v38;
  if (v40 != 5)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v38;
    *(_DWORD *)(v10 + 316) = 2015;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v36[0] = v10 + 320;
    v36[1] = 0;
    v36[2] = v10;
    v37 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v11 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v10 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v14 = v36;
    return (char *)sub_22E3BB0B8((uint64_t)v14);
  }
  v7 = *(int **)(v39 + 16);
  v8 = *v7;
  if (*v7 == 5)
  {
    v15 = v7[4];
    v16 = *((unsigned __int8 *)v7 + 20);
    v17 = v15 == 1702061426;
    v18 = 116;
  }
  else
  {
    if (v8 != 3)
    {
      if (v8 == 2 && *((_WORD *)v7 + 8) == 28271)
      {
        v9 = 1;
        goto LABEL_33;
      }
LABEL_22:
      v21 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v21 + 312) = v38;
      *(_DWORD *)(v21 + 316) = 2015;
      if (*(char *)(v21 + 311) < 0)
      {
        **(_BYTE **)(v21 + 288) = 0;
        *(_QWORD *)(v21 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v21 + 288) = 0;
        *(_BYTE *)(v21 + 311) = 0;
      }
      v34[0] = v21 + 320;
      v34[1] = 0;
      v34[2] = v21;
      v35 = 1;
      *(_BYTE *)(v21 + 320) = 0;
      *(_DWORD *)(v21 + 664) = 0;
      v22 = *(unsigned int *)(v21 + 776);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v21 + 768);
        v24 = 56 * v22;
        do
        {
          if (*(char *)(v23 + v24 - 9) < 0)
            operator delete(*(void **)(v23 + v24 - 32));
          v24 -= 56;
        }
        while (v24);
      }
      *(_DWORD *)(v21 + 776) = 0;
      v14 = v34;
      return (char *)sub_22E3BB0B8((uint64_t)v14);
    }
    v19 = *((unsigned __int16 *)v7 + 8);
    v16 = *((unsigned __int8 *)v7 + 18);
    v17 = v19 == 26223;
    v18 = 102;
  }
  if (!v17 || v16 != v18)
    goto LABEL_22;
  v9 = 0;
LABEL_33:
  sub_22F18FB4C(a2, &v38);
  if (v40 != 2)
  {
    v27 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v27 + 312) = v38;
    *(_DWORD *)(v27 + 316) = 2005;
    if (*(char *)(v27 + 311) < 0)
    {
      **(_BYTE **)(v27 + 288) = 0;
      *(_QWORD *)(v27 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v27 + 288) = 0;
      *(_BYTE *)(v27 + 311) = 0;
    }
    v28 = (unsigned __int8 *)(v27 + 320);
    v32[0] = v27 + 320;
    v32[1] = 0;
    v32[2] = v27;
    v33 = 1;
    *(_BYTE *)(v27 + 320) = 0;
    *(_DWORD *)(v27 + 664) = 0;
    v29 = *(unsigned int *)(v27 + 776);
    if ((_DWORD)v29)
    {
      v30 = *(_QWORD *)(v27 + 768);
      v31 = 56 * v29;
      do
      {
        if (*(char *)(v30 + v31 - 9) < 0)
          operator delete(*(void **)(v30 + v31 - 32));
        v31 -= 56;
      }
      while (v31);
      LODWORD(v29) = *v28;
    }
    *(_DWORD *)(v27 + 776) = 0;
    v28[v29 + 1] = 1;
    *(_BYTE *)(v27 + 320) = v29 + 1;
    *(_QWORD *)&v28[8 * v29 + 16] = "ms_struct";
    v14 = v32;
    return (char *)sub_22E3BB0B8((uint64_t)v14);
  }
  v26 = sub_22E3CD3D4(a2 + 128, 24, 3);
  *(_DWORD *)(v26 + 16) = 0;
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_WORD *)(v26 + 16) = 414;
  *(_DWORD *)v26 = *a4;
  *(_DWORD *)(v26 + 4) = v6;
  *(_QWORD *)(v26 + 8) = v9;
  return sub_22F1735E4(a2, (_BYTE *)v26, 1, 1, 0, 0);
}

uint64_t sub_22E869574(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E8695B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E869604(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  _QWORD v38[3];
  __int16 v39;
  unsigned int v40[4];
  __int16 v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = *a4;
  sub_22F18FB4C(a2, v40);
  if (v41 != 21)
  {
    v17 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v17 + 312) = v40[0];
    *(_DWORD *)(v17 + 316) = 1995;
    if (*(char *)(v17 + 311) < 0)
    {
      **(_BYTE **)(v17 + 288) = 0;
      *(_QWORD *)(v17 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 311) = 0;
    }
    v18 = (unsigned __int8 *)(v17 + 320);
    v42 = (void *)(v17 + 320);
    v43 = 0;
    v44 = v17;
    v45 = 1;
    *(_BYTE *)(v17 + 320) = 0;
    *(_DWORD *)(v17 + 664) = 0;
    v19 = *(unsigned int *)(v17 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v17 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
      LODWORD(v19) = *v18;
    }
    *(_DWORD *)(v17 + 776) = 0;
    v18[v19 + 1] = 1;
    *(_BYTE *)(v17 + 320) = v19 + 1;
    *(_QWORD *)&v18[8 * v19 + 16] = "unused";
    sub_22E3BB0B8((uint64_t)&v42);
    return;
  }
  v42 = &v44;
  v43 = 0x500000000;
  do
  {
    sub_22F18FB4C(a2, v40);
    if (v41 != 5)
    {
      v22 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v22 + 312) = v40[0];
      *(_DWORD *)(v22 + 316) = 2024;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      v38[0] = v22 + 320;
      v38[1] = 0;
      v38[2] = v22;
      v39 = 1;
      *(_BYTE *)(v22 + 320) = 0;
      *(_DWORD *)(v22 + 664) = 0;
      v24 = *(unsigned int *)(v22 + 776);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v22 + 768);
        v26 = 56 * v24;
        do
        {
          if (*(char *)(v25 + v26 - 9) < 0)
            operator delete(*(void **)(v25 + v26 - 32));
          v26 -= 56;
        }
        while (v26);
      }
      *(_DWORD *)(v22 + 776) = 0;
      v27 = v38;
      goto LABEL_49;
    }
    v6 = sub_22E4EF088((uint64_t)&v42, (unint64_t)v40, 1);
    v7 = (char *)v42 + 24 * v43;
    v8 = *(_OWORD *)v6;
    *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = v8;
    LODWORD(v43) = v43 + 1;
    sub_22F18FB4C(a2, v40);
  }
  while (v41 == 65);
  if (v41 != 22)
  {
    v23 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v23 + 312) = v40[0];
    *(_DWORD *)(v23 + 316) = 1998;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    v28 = (unsigned __int8 *)(v23 + 320);
    v34 = v23 + 320;
    v35 = 0;
    v36 = v23;
    v37 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v29 = *(unsigned int *)(v23 + 776);
    if (!(_DWORD)v29)
      goto LABEL_48;
    v30 = *(_QWORD *)(v23 + 768);
    v31 = 56 * v29;
    do
    {
      if (*(char *)(v30 + v31 - 9) < 0)
        operator delete(*(void **)(v30 + v31 - 32));
      v31 -= 56;
    }
    while (v31);
    goto LABEL_47;
  }
  sub_22F18FB4C(a2, v40);
  if (v41 != 2)
  {
    v23 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v23 + 312) = v40[0];
    *(_DWORD *)(v23 + 316) = 2005;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    v28 = (unsigned __int8 *)(v23 + 320);
    v34 = v23 + 320;
    v35 = 0;
    v36 = v23;
    v37 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v29 = *(unsigned int *)(v23 + 776);
    if (!(_DWORD)v29)
      goto LABEL_48;
    v32 = *(_QWORD *)(v23 + 768);
    v33 = 56 * v29;
    do
    {
      if (*(char *)(v32 + v33 - 9) < 0)
        operator delete(*(void **)(v32 + v33 - 32));
      v33 -= 56;
    }
    while (v33);
LABEL_47:
    LODWORD(v29) = *v28;
LABEL_48:
    *(_DWORD *)(v23 + 776) = 0;
    v28[v29 + 1] = 1;
    *(_BYTE *)(v23 + 320) = v29 + 1;
    *(_QWORD *)&v28[8 * v29 + 16] = "unused";
    v27 = &v34;
LABEL_49:
    sub_22E3BB0B8((uint64_t)v27);
    goto LABEL_50;
  }
  v9 = (_BYTE *)sub_22E3CD3D4(a2 + 128, 48 * v43, 3);
  v10 = (2 * v43);
  if ((_DWORD)v43)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = &v9[24 * v12 - 24];
      v14 = &v9[24 * v12];
      *((_DWORD *)v13 + 4) = 0;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_WORD *)v13 + 8) = 408;
      *(_DWORD *)v13 = v5;
      v15 = (char *)v42 + 24 * v11;
      v16 = *(_OWORD *)v15;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v14 = v16;
      ++v11;
      v12 += 2;
    }
    while (v11 != (_DWORD)v43);
  }
  sub_22F1735E4(a2, v9, v10, 1, 0, 0);
LABEL_50:
  if (v42 != &v44)
    free(v42);
}

uint64_t sub_22E869A48(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E869A88(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E869AD8(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  _BYTE v26[24];
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = *a4;
  sub_22F18FB4C(a2, (unsigned int *)v26);
  if (*(unsigned __int16 *)&v26[16] == 5)
  {
    v20 = *(_OWORD *)v26;
    v21 = *(_QWORD *)&v26[16];
    sub_22F18FB4C(a2, (unsigned int *)v26);
    if (*(unsigned __int16 *)&v26[16] == 2)
    {
      v7 = sub_22E3CD3D4(a2 + 128, 48, 3);
      *(_DWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_WORD *)(v7 + 16) = 416;
      *(_DWORD *)v7 = v5;
      *(_DWORD *)(v7 + 4) = v5;
      *(_OWORD *)(v7 + 24) = v20;
      *(_QWORD *)(v7 + 40) = v21;
      v8 = a2;
      v9 = 2;
      return sub_22F1735E4(v8, (_BYTE *)v7, v9, 1, 0, 0);
    }
    if (*(unsigned __int16 *)&v26[16] == 63)
    {
      sub_22F18FB4C(a2, (unsigned int *)v26);
      if (*(unsigned __int16 *)&v26[16] != 5)
      {
        v10 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v10 + 312) = *(_DWORD *)v26;
        *(_DWORD *)(v10 + 316) = 1992;
        if (*(char *)(v10 + 311) < 0)
        {
          **(_BYTE **)(v10 + 288) = 0;
          *(_QWORD *)(v10 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v10 + 288) = 0;
          *(_BYTE *)(v10 + 311) = 0;
        }
        v11 = (unsigned __int8 *)(v10 + 320);
        v22 = v10 + 320;
        v23 = 0;
        v24 = v10;
        v25 = 1;
        *(_BYTE *)(v10 + 320) = 0;
        *(_DWORD *)(v10 + 664) = 0;
        v12 = *(unsigned int *)(v10 + 776);
        if (!(_DWORD)v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v10 + 768);
        v19 = 56 * v12;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
        goto LABEL_35;
      }
      v6 = *(_DWORD *)v26;
      v27 = *(_OWORD *)&v26[4];
      v28 = *(_DWORD *)&v26[20];
      sub_22F18FB4C(a2, (unsigned int *)v26);
      if (*(unsigned __int16 *)&v26[16] == 2)
      {
        v7 = sub_22E3CD3D4(a2 + 128, 72, 3);
        *(_DWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_WORD *)(v7 + 16) = 417;
        *(_DWORD *)v7 = v5;
        *(_DWORD *)(v7 + 4) = v6;
        *(_OWORD *)(v7 + 24) = v20;
        *(_QWORD *)(v7 + 40) = v21;
        *(_DWORD *)(v7 + 48) = v6;
        *(_OWORD *)(v7 + 52) = v27;
        *(_DWORD *)(v7 + 68) = v28;
        v8 = a2;
        v9 = 3;
        return sub_22F1735E4(v8, (_BYTE *)v7, v9, 1, 0, 0);
      }
    }
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)v26;
    *(_DWORD *)(v10 + 316) = 2005;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v10 + 320);
    v22 = v10 + 320;
    v23 = 0;
    v24 = v10;
    v25 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if (!(_DWORD)v12)
      goto LABEL_36;
    v16 = *(_QWORD *)(v10 + 768);
    v17 = 56 * v12;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)v26;
    *(_DWORD *)(v10 + 316) = 1992;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v10 + 320);
    v22 = v10 + 320;
    v23 = 0;
    v24 = v10;
    v25 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if (!(_DWORD)v12)
      goto LABEL_36;
    v13 = *(_QWORD *)(v10 + 768);
    v14 = 56 * v12;
    do
    {
      if (*(char *)(v13 + v14 - 9) < 0)
        operator delete(*(void **)(v13 + v14 - 32));
      v14 -= 56;
    }
    while (v14);
  }
LABEL_35:
  LODWORD(v12) = *v11;
LABEL_36:
  *(_DWORD *)(v10 + 776) = 0;
  v11[v12 + 1] = 1;
  *(_BYTE *)(v10 + 320) = v12 + 1;
  *(_QWORD *)&v11[8 * v12 + 16] = "weak";
  return (char *)sub_22E3BB0B8((uint64_t)&v22);
}

uint64_t sub_22E869E2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E869E6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E869EBC(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  _BYTE v24[24];
  __int128 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *a4;
  sub_22F18FB4C(a2, (unsigned int *)v24);
  if (*(unsigned __int16 *)&v24[16] != 5)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)v24;
    *(_DWORD *)(v9 + 316) = 1992;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v20 = v9 + 320;
    v21 = 0;
    v22 = v9;
    v23 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_32;
    v12 = *(_QWORD *)(v9 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
    goto LABEL_31;
  }
  v18 = *(_OWORD *)v24;
  v19 = *(_QWORD *)&v24[16];
  sub_22F18FB4C(a2, (unsigned int *)v24);
  if (*(unsigned __int16 *)&v24[16] != 5)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)v24;
    *(_DWORD *)(v9 + 316) = 1992;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v20 = v9 + 320;
    v21 = 0;
    v22 = v9;
    v23 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_32;
    v14 = *(_QWORD *)(v9 + 768);
    v15 = 56 * v11;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
    goto LABEL_31;
  }
  v6 = *(_DWORD *)v24;
  v25 = *(_OWORD *)&v24[4];
  v26 = *(_DWORD *)&v24[20];
  sub_22F18FB4C(a2, (unsigned int *)v24);
  if (*(unsigned __int16 *)&v24[16] == 2)
  {
    v7 = sub_22E3CD3D4(a2 + 128, 72, 3);
    *(_DWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 418;
    *(_DWORD *)v7 = v5;
    *(_DWORD *)(v7 + 4) = v6;
    *(_OWORD *)(v7 + 24) = v18;
    *(_QWORD *)(v7 + 40) = v19;
    *(_DWORD *)(v7 + 48) = v6;
    *(_OWORD *)(v7 + 52) = v25;
    *(_DWORD *)(v7 + 68) = v26;
    return sub_22F1735E4(a2, (_BYTE *)v7, 3, 1, 0, 0);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v9 + 312) = *(_DWORD *)v24;
  *(_DWORD *)(v9 + 316) = 2005;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v10 = (unsigned __int8 *)(v9 + 320);
  v20 = v9 + 320;
  v21 = 0;
  v22 = v9;
  v23 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v11 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v11)
  {
    v16 = *(_QWORD *)(v9 + 768);
    v17 = 56 * v11;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
LABEL_31:
    LODWORD(v11) = *v10;
  }
LABEL_32:
  *(_DWORD *)(v9 + 776) = 0;
  v10[v11 + 1] = 1;
  *(_BYTE *)(v9 + 320) = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = "redefine_extname";
  return (char *)sub_22E3BB0B8((uint64_t)&v20);
}

uint64_t sub_22E86A1AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86A1EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86A23C(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  result = sub_22F184458(a2, (int *)&v8);
  if ((result & 1) == 0)
  {
    v7 = sub_22E3CD3D4(a2 + 128, 24, 3);
    *(_DWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 419;
    *(_DWORD *)v7 = *a4;
    *(_DWORD *)(v7 + 4) = *a4;
    *(_QWORD *)(v7 + 8) = v8;
    return (uint64_t)sub_22F1735E4(a2, (_BYTE *)v7, 1, 1, 0, 0);
  }
  return result;
}

uint64_t sub_22E86A2CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86A30C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86A35C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13[3];
  __int16 v14;

  v6 = *(_QWORD *)(a4 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 144))(*(_QWORD *)(a2 + 64)) & 1) != 0
    || (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 140) & 0x4000000000000000) != 0)
  {
    LODWORD(v13[0]) = 0;
    result = sub_22F184458(a2, (int *)v13);
    if ((result & 1) == 0)
    {
      v9 = sub_22E3CD3D4(a2 + 128, 24, 3);
      *(_DWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_WORD *)(v9 + 16) = 420;
      *(_DWORD *)v9 = *(_DWORD *)a4;
      *(_DWORD *)(v9 + 4) = *(_DWORD *)a4;
      *(_QWORD *)(v9 + 8) = LODWORD(v13[0]);
      return (uint64_t)sub_22F1735E4(a2, (_BYTE *)v9, 1, 1, 0, 0);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 316) = 2007;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v13[0] = (unsigned __int8 *)(v7 + 320);
    v13[1] = 0;
    v13[2] = (unsigned __int8 *)v7;
    v14 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v10 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v7 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
    }
    *(_DWORD *)(v7 + 776) = 0;
    sub_22E3B89A8(v13, (void *)(*(_QWORD *)(v6 + 16) + 16), **(unsigned int **)(v6 + 16));
    return sub_22E3BB0B8((uint64_t)v13);
  }
  return result;
}

uint64_t sub_22E86A4B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86A4F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86A548(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  __int16 v46;
  _QWORD v47[3];
  __int16 v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[4];

  v55[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a4 + 8);
  v53 = v55;
  v54 = 0x100000000;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 144))(*(_QWORD *)(a2 + 64)) & 1) == 0
    && (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 140) & 0x4000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 316) = 2007;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v7 + 320);
    v50 = 0;
    v51 = v7;
    v52 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v14 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v7 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
LABEL_24:
    *(_DWORD *)(v7 + 776) = 0;
    sub_22E3B89A8(&v49, (void *)(*(_QWORD *)(v6 + 16) + 16), **(unsigned int **)(v6 + 16));
    goto LABEL_25;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 5)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 316) = 1992;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v49 = (unsigned __int8 *)(v7 + 320);
    v50 = 0;
    v51 = v7;
    v52 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v11 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v7 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    goto LABEL_24;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
  switch(*(_DWORD *)v8)
  {
    case 9:
      v9 = bswap64(*(_QWORD *)(v8 + 16));
      if (v9 == 0x46455F5550574152)
      {
        v10 = *(unsigned __int8 *)(v8 + 24) - 68;
      }
      else if (v9 < 0x46455F5550574152)
      {
        v10 = -1;
      }
      else
      {
        v10 = 1;
      }
      v27 = 2;
      if (v10)
        goto LABEL_46;
      goto LABEL_63;
    case 0xA:
      v18 = 0x46455F44594E414DLL;
      v19 = bswap64(*(_QWORD *)(v8 + 16));
      if (v19 == 0x46455F44594E414DLL
        && (v19 = bswap32(*(unsigned __int16 *)(v8 + 24)) >> 16, v18 = 18755, (_DWORD)v19 == 18755))
      {
        v20 = 0;
      }
      else if (v19 < v18)
      {
        v20 = -1;
      }
      else
      {
        v20 = 1;
      }
      v27 = 7;
      if (!v20)
        goto LABEL_63;
      goto LABEL_46;
    case 0xB:
      v21 = 0x46455F444F574E57;
      v22 = bswap64(*(_QWORD *)(v8 + 16));
      if (v22 == 0x46455F444F574E57
        && (v21 = 0x444F574E57415244, v22 = bswap64(*(_QWORD *)(v8 + 19)), v22 == 0x444F574E57415244))
      {
        v23 = 0;
      }
      else if (v22 < v21)
      {
        v23 = -1;
      }
      else
      {
        v23 = 1;
      }
      v27 = 3;
      if (!v23)
        goto LABEL_63;
      goto LABEL_46;
    case 0xC:
      v24 = 0x46455F544F4E4541;
      v25 = bswap64(*(_QWORD *)(v8 + 16));
      if (v25 == 0x46455F544F4E4541
        && (v24 = 1380275028, v25 = bswap32(*(_DWORD *)(v8 + 24)), (_DWORD)v25 == 1380275028))
      {
        v26 = 0;
      }
      else if (v25 < v24)
      {
        v26 = -1;
      }
      else
      {
        v26 = 1;
      }
      v27 = 1;
      if (!v26)
        goto LABEL_63;
      goto LABEL_46;
    case 0xD:
      if (bswap64(*(_QWORD *)(v8 + 16)) != 0x46455F544F574152
        || bswap64(*(_QWORD *)(v8 + 21)) != 0x574152445A45524FLL)
      {
        goto LABEL_46;
      }
      v27 = 0;
LABEL_63:
      sub_22F18FB4C(a2, (unsigned int *)a4);
      if (*(_WORD *)(a4 + 16) == 2)
      {
        v35 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v35 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v35 + 316) = 2027;
        if (*(char *)(v35 + 311) < 0)
        {
          **(_BYTE **)(v35 + 288) = 0;
          *(_QWORD *)(v35 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v35 + 288) = 0;
          *(_BYTE *)(v35 + 311) = 0;
        }
        v45[0] = v35 + 320;
        v45[1] = 0;
        v45[2] = v35;
        v46 = 1;
        *(_BYTE *)(v35 + 320) = 0;
        *(_DWORD *)(v35 + 664) = 0;
        v37 = *(unsigned int *)(v35 + 776);
        if ((_DWORD)v37)
        {
          v38 = *(_QWORD *)(v35 + 768);
          v39 = 56 * v37;
          do
          {
            if (*(char *)(v38 + v39 - 9) < 0)
              operator delete(*(void **)(v38 + v39 - 32));
            v39 -= 56;
          }
          while (v39);
        }
        *(_DWORD *)(v35 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v45);
        v40 = sub_22E3CD3D4(a2 + 128, 24, 3);
        *(_DWORD *)(v40 + 16) = 0;
        *(_QWORD *)v40 = 0;
        *(_QWORD *)(v40 + 8) = 0;
        *(_WORD *)(v40 + 16) = 422;
        *(_DWORD *)v40 = *(_DWORD *)a4;
        *(_DWORD *)(v40 + 4) = *(_DWORD *)a4;
        *(_QWORD *)(v40 + 8) = v27;
        sub_22F1735E4(a2, (_BYTE *)v40, 1, 1, 0, 0);
        goto LABEL_56;
      }
      v36 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v36 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v36 + 316) = 2005;
      if (*(char *)(v36 + 311) < 0)
      {
        **(_BYTE **)(v36 + 288) = 0;
        *(_QWORD *)(v36 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v36 + 288) = 0;
        *(_BYTE *)(v36 + 311) = 0;
      }
      v41 = (unsigned __int8 *)(v36 + 320);
      v49 = (unsigned __int8 *)(v36 + 320);
      v50 = 0;
      v51 = v36;
      v52 = 1;
      *(_BYTE *)(v36 + 320) = 0;
      *(_DWORD *)(v36 + 664) = 0;
      v42 = *(unsigned int *)(v36 + 776);
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(v36 + 768);
        v44 = 56 * v42;
        do
        {
          if (*(char *)(v43 + v44 - 9) < 0)
            operator delete(*(void **)(v43 + v44 - 32));
          v44 -= 56;
        }
        while (v44);
        LODWORD(v42) = *v41;
      }
      *(_DWORD *)(v36 + 776) = 0;
      v41[v42 + 1] = 1;
      *(_BYTE *)(v36 + 320) = v42 + 1;
      *(_QWORD *)&v41[8 * v42 + 16] = "STDC FENV_ROUND";
      break;
    case 0x14:
      v28 = 0x46455F544F4E4541;
      v29 = bswap64(*(_QWORD *)(v8 + 16));
      if (v29 == 0x46455F544F4E4541
        && (v28 = 0x5245535446524F4DLL, v29 = bswap64(*(_QWORD *)(v8 + 24)), v29 == 0x5245535446524F4DLL)
        && (v28 = 1514492495, v29 = bswap32(*(_DWORD *)(v8 + 32)), (_DWORD)v29 == 1514492495))
      {
        v30 = 0;
      }
      else if (v29 < v28)
      {
        v30 = -1;
      }
      else
      {
        v30 = 1;
      }
      v27 = 4;
      if (v30)
        goto LABEL_46;
      goto LABEL_63;
    default:
LABEL_46:
      v31 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v31 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v31 + 316) = 2028;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      v47[0] = v31 + 320;
      v47[1] = 0;
      v47[2] = v31;
      v48 = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v32 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v31 + 768);
        v34 = 56 * v32;
        do
        {
          if (*(char *)(v33 + v34 - 9) < 0)
            operator delete(*(void **)(v33 + v34 - 32));
          v34 -= 56;
        }
        while (v34);
      }
      *(_DWORD *)(v31 + 776) = 0;
      v17 = (unsigned __int8 **)v47;
      goto LABEL_55;
  }
LABEL_25:
  v17 = &v49;
LABEL_55:
  sub_22E3BB0B8((uint64_t)v17);
LABEL_56:
  if (v53 != v55)
    free(v53);
}

uint64_t sub_22E86ABC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86AC08(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86AC58(uint64_t a1, unint64_t a2)
{
  int v3;

  v3 = 0;
  return sub_22F184458(a2, &v3);
}

uint64_t sub_22E86AC80(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86ACC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86AD10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  __int16 v10;

  v4 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 312) = *a4;
  *(_DWORD *)(v4 + 316) = 1854;
  if (*(char *)(v4 + 311) < 0)
  {
    **(_BYTE **)(v4 + 288) = 0;
    *(_QWORD *)(v4 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v4 + 288) = 0;
    *(_BYTE *)(v4 + 311) = 0;
  }
  v9[0] = v4 + 320;
  v9[1] = 0;
  v9[2] = v4;
  v10 = 1;
  *(_BYTE *)(v4 + 320) = 0;
  *(_DWORD *)(v4 + 664) = 0;
  v5 = *(unsigned int *)(v4 + 776);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 768);
    v7 = 56 * v5;
    do
    {
      if (*(char *)(v6 + v7 - 9) < 0)
        operator delete(*(void **)(v6 + v7 - 32));
      v7 -= 56;
    }
    while (v7);
  }
  *(_DWORD *)(v4 + 776) = 0;
  return sub_22E3BB0B8((uint64_t)v9);
}

uint64_t sub_22E86ADC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86AE04(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86AE54(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  uint64_t v15;
  __int16 v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  const char *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v40;

  sub_22F18FB4C(a2, &v38);
  while (2)
  {
    if (v40 != 5)
    {
      if (v40 == 2)
        return;
      v20 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v20 + 312) = v38;
      *(_DWORD *)(v20 + 316) = 1712;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      v22 = (unsigned __int8 *)(v20 + 320);
      __p = (void *)(v20 + 320);
      v35 = 0;
      v36 = v20;
      v37 = 1;
      *(_BYTE *)(v20 + 320) = 0;
      *(_DWORD *)(v20 + 664) = 0;
      v23 = *(unsigned int *)(v20 + 776);
      if ((_DWORD)v23)
      {
        v26 = *(_QWORD *)(v20 + 768);
        v27 = 56 * v23;
        do
        {
          if (*(char *)(v26 + v27 - 9) < 0)
            operator delete(*(void **)(v26 + v27 - 32));
          v27 -= 56;
        }
        while (v27);
        goto LABEL_57;
      }
LABEL_58:
      *(_DWORD *)(v20 + 776) = 0;
      v22[v23 + 1] = 1;
      *(_BYTE *)(v20 + 320) = v23 + 1;
      v28 = &v22[8 * v23];
      v29 = "clang section";
      goto LABEL_67;
    }
    v4 = *(_QWORD *)(v39 + 16);
    switch(*(_DWORD *)v4)
    {
      case 3:
        v5 = *(unsigned __int16 *)(v4 + 16);
        v6 = *(unsigned __int8 *)(v4 + 18);
        if (v5 != 29538 || v6 != 115)
          goto LABEL_40;
        v8 = 1;
        goto LABEL_26;
      case 4:
        if (*(_DWORD *)(v4 + 16) != 1635017060)
        {
          if (*(_DWORD *)(v4 + 16) == 1954047348)
          {
            v8 = 4;
            goto LABEL_26;
          }
LABEL_40:
          v20 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v20 + 312) = v38;
          *(_DWORD *)(v20 + 316) = 1712;
          if (*(char *)(v20 + 311) < 0)
          {
            **(_BYTE **)(v20 + 288) = 0;
            *(_QWORD *)(v20 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v20 + 288) = 0;
            *(_BYTE *)(v20 + 311) = 0;
          }
          v22 = (unsigned __int8 *)(v20 + 320);
          __p = (void *)(v20 + 320);
          v35 = 0;
          v36 = v20;
          v37 = 1;
          *(_BYTE *)(v20 + 320) = 0;
          *(_DWORD *)(v20 + 664) = 0;
          v23 = *(unsigned int *)(v20 + 776);
          if ((_DWORD)v23)
          {
            v24 = *(_QWORD *)(v20 + 768);
            v25 = 56 * v23;
            do
            {
              if (*(char *)(v24 + v25 - 9) < 0)
                operator delete(*(void **)(v24 + v25 - 32));
              v25 -= 56;
            }
            while (v25);
LABEL_57:
            LODWORD(v23) = *v22;
            goto LABEL_58;
          }
          goto LABEL_58;
        }
        v8 = 2;
LABEL_26:
        v15 = v38;
        sub_22F18FB4C(a2, &v38);
        if (v40 == 63)
        {
          __p = 0;
          v35 = 0;
          v36 = 0;
          v16 = *(_WORD *)(a2 + 536);
          *(_WORD *)(a2 + 536) = v16 | 0x20;
          sub_22F18FB4C(a2, &v38);
          *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v16 & 0x20;
          v17 = sub_22F190300(a2, (unint64_t)&v38, (uint64_t)&__p, (uint64_t)"pragma clang section", 0);
          v18 = v17;
          if (v17)
          {
            if (v36 >= 0)
              v19 = HIBYTE(v36) & 0x7F;
            else
              v19 = v35;
            sub_22E90E014(*(_QWORD *)(a1 + 32), v15, v19 == 0, v8);
          }
          if (SHIBYTE(v36) < 0)
          {
            operator delete(__p);
            if ((v18 & 1) == 0)
              return;
          }
          else if ((v18 & 1) == 0)
          {
            return;
          }
          continue;
        }
        v21 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v21 + 312) = v38;
        *(_DWORD *)(v21 + 316) = 1708;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v30 = (unsigned __int8 *)(v21 + 320);
        __p = (void *)(v21 + 320);
        v35 = 0;
        v36 = v21;
        v37 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v31 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v21 + 768);
          v33 = 56 * v31;
          do
          {
            if (*(char *)(v32 + v33 - 9) < 0)
              operator delete(*(void **)(v32 + v33 - 32));
            v33 -= 56;
          }
          while (v33);
          LODWORD(v31) = *v30;
        }
        *(_DWORD *)(v21 + 776) = 0;
        v29 = (const char *)v8;
        v30[v31 + 1] = 2;
        *(_BYTE *)(v21 + 320) = v31 + 1;
        v28 = &v30[8 * v31];
LABEL_67:
        *((_QWORD *)v28 + 2) = v29;
        sub_22E3BB0B8((uint64_t)&__p);
        return;
      case 5:
        v9 = *(_DWORD *)(v4 + 16);
        v10 = *(unsigned __int8 *)(v4 + 20);
        if (v9 != 1919706482 || v10 != 111)
          goto LABEL_40;
        v8 = 5;
        goto LABEL_26;
      case 6:
        v12 = *(_DWORD *)(v4 + 16);
        v13 = *(unsigned __int16 *)(v4 + 20);
        if (v12 != 1633972082 || v13 != 24948)
          goto LABEL_40;
        v8 = 3;
        goto LABEL_26;
      default:
        goto LABEL_40;
    }
  }
}

uint64_t sub_22E86B240(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86B280(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86B2D0(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v34;
  int v35;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;

  v6 = *(_WORD *)(a2 + 536);
  *(_WORD *)(a2 + 536) = v6 | 0x20;
  sub_22F18FB4C(a2, a4);
  *(_WORD *)(a2 + 536) = *(_WORD *)(a2 + 536) & 0xFFDF | v6 & 0x20;
  if (*((_WORD *)a4 + 8) != 5)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v14 + 312) = *a4;
    *(_DWORD *)(v14 + 316) = 1992;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v16 = (unsigned __int8 *)(v14 + 320);
    v59 = v14 + 320;
    v60 = 0;
    v61 = v14;
    v62 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v17 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v14 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
      LODWORD(v17) = *v16;
    }
    *(_DWORD *)(v14 + 776) = 0;
    v16[v17 + 1] = 1;
    *(_BYTE *)(v14 + 320) = v17 + 1;
    v20 = &v16[8 * v17];
    v21 = "OPENCL";
    goto LABEL_23;
  }
  v7 = *((_QWORD *)a4 + 1);
  v8 = *a4;
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) == 61)
  {
    sub_22F18FB4C(a2, a4);
    if (*((_WORD *)a4 + 8) == 5)
    {
      v9 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 16);
      switch(*(_DWORD *)v9)
      {
        case 3:
          v10 = *(unsigned __int16 *)(v9 + 16);
          v11 = *(unsigned __int8 *)(v9 + 18);
          if (v10 != 28261 || v11 != 100)
            goto LABEL_58;
          v13 = 3;
          goto LABEL_78;
        case 5:
          v31 = *(_DWORD *)(v9 + 16);
          v32 = *(unsigned __int8 *)(v9 + 20);
          if (v31 != 1768383842 || v32 != 110)
            goto LABEL_58;
          v13 = 2;
          goto LABEL_78;
        case 6:
          v34 = *(_DWORD *)(v9 + 16);
          v35 = *(unsigned __int16 *)(v9 + 20);
          if (v34 != 1650552421 || v35 != 25964)
            goto LABEL_58;
          v13 = 1;
          goto LABEL_78;
        case 7:
          v37 = *(_DWORD *)(v9 + 16);
          v38 = *(_DWORD *)(v9 + 19);
          if (v37 != 1634953572 || v38 != 1701601889)
            goto LABEL_58;
          v13 = 0;
LABEL_78:
          v51 = *a4;
          sub_22F18FB4C(a2, a4);
          if (*((_WORD *)a4 + 8) == 2)
          {
            v52 = sub_22E3CD3D4(a2 + 128, 16, 3);
            *(_QWORD *)v52 = v7;
            *(_BYTE *)(v52 + 8) = v13;
            v53 = sub_22E3CD3D4(a2 + 128, 24, 3);
            *(_DWORD *)(v53 + 16) = 427;
            *(_QWORD *)(v53 + 8) = v52;
            *(_DWORD *)v53 = v8;
            *(_DWORD *)(v53 + 4) = v51;
            sub_22F1735E4(a2, (_BYTE *)v53, 1, 1, 0, 0);
            result = *(_QWORD *)(a2 + 1088);
            if (result)
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 160))(result, v8, v7, v51, v13);
            return result;
          }
          v54 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v54 + 312) = *a4;
          *(_DWORD *)(v54 + 316) = 2005;
          if (*(char *)(v54 + 311) < 0)
          {
            **(_BYTE **)(v54 + 288) = 0;
            *(_QWORD *)(v54 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v54 + 288) = 0;
            *(_BYTE *)(v54 + 311) = 0;
          }
          v55 = (unsigned __int8 *)(v54 + 320);
          v59 = v54 + 320;
          v60 = 0;
          v61 = v54;
          v62 = 1;
          *(_BYTE *)(v54 + 320) = 0;
          *(_DWORD *)(v54 + 664) = 0;
          v56 = *(unsigned int *)(v54 + 776);
          if ((_DWORD)v56)
          {
            v57 = *(_QWORD *)(v54 + 768);
            v58 = 56 * v56;
            do
            {
              if (*(char *)(v57 + v58 - 9) < 0)
                operator delete(*(void **)(v57 + v58 - 32));
              v58 -= 56;
            }
            while (v58);
            LODWORD(v56) = *v55;
          }
          *(_DWORD *)(v54 + 776) = 0;
          v55[v56 + 1] = 1;
          *(_BYTE *)(v54 + 320) = v56 + 1;
          v20 = &v55[8 * v56];
          v21 = "OPENCL EXTENSION";
          break;
        default:
LABEL_58:
          v40 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v40 + 312) = *a4;
          *(_DWORD *)(v40 + 316) = 1997;
          if (*(char *)(v40 + 311) < 0)
          {
            **(_BYTE **)(v40 + 288) = 0;
            *(_QWORD *)(v40 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v40 + 288) = 0;
            *(_BYTE *)(v40 + 311) = 0;
          }
          v59 = v40 + 320;
          v60 = 0;
          v61 = v40;
          v62 = 1;
          *(_BYTE *)(v40 + 320) = 0;
          *(_DWORD *)(v40 + 664) = 0;
          v41 = *(unsigned int *)(v40 + 776);
          if ((_DWORD)v41)
          {
            v42 = *(_QWORD *)(v40 + 768);
            v43 = 56 * v41;
            do
            {
              if (*(char *)(v42 + v43 - 9) < 0)
                operator delete(*(void **)(v42 + v43 - 32));
              v43 -= 56;
            }
            while (v43);
          }
          *(_DWORD *)(v40 + 776) = 0;
          v44 = *(_QWORD *)(v7 + 16);
          if (*(_DWORD *)v44 == 3)
          {
            v45 = *(unsigned __int16 *)(v44 + 16);
            v46 = *(unsigned __int8 *)(v44 + 18);
            v48 = v45 == 27745 && v46 == 108;
          }
          else
          {
            v48 = 0;
          }
          v49 = *(unsigned __int8 *)(v40 + 320);
          *(_BYTE *)(v40 + 320 + v49 + 1) = 2;
          *(_BYTE *)(v40 + 320) = v49 + 1;
          *(_QWORD *)(v40 + 320 + 8 * v49 + 16) = v48;
          return sub_22E3BB0B8((uint64_t)&v59);
      }
LABEL_23:
      *((_QWORD *)v20 + 2) = v21;
      return sub_22E3BB0B8((uint64_t)&v59);
    }
    v22 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v22 + 312) = *a4;
    *(_DWORD *)(v22 + 316) = 1997;
    if (*(char *)(v22 + 311) < 0)
    {
      **(_BYTE **)(v22 + 288) = 0;
      *(_QWORD *)(v22 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v22 + 288) = 0;
      *(_BYTE *)(v22 + 311) = 0;
    }
    v27 = (unsigned __int8 *)(v22 + 320);
    v59 = v22 + 320;
    v60 = 0;
    v61 = v22;
    v62 = 1;
    *(_BYTE *)(v22 + 320) = 0;
    *(_DWORD *)(v22 + 664) = 0;
    v28 = *(unsigned int *)(v22 + 776);
    if ((_DWORD)v28)
    {
      v29 = *(_QWORD *)(v22 + 768);
      v30 = 56 * v28;
      do
      {
        if (*(char *)(v29 + v30 - 9) < 0)
          operator delete(*(void **)(v29 + v30 - 32));
        v30 -= 56;
      }
      while (v30);
      LODWORD(v28) = *v27;
    }
    *(_DWORD *)(v22 + 776) = 0;
    v27[v28 + 1] = 2;
    *(_BYTE *)(v22 + 320) = v28 + 1;
    *(_QWORD *)&v27[8 * v28 + 16] = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = *a4;
    *(_DWORD *)(v15 + 316) = 1989;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v23 = (unsigned __int8 *)(v15 + 320);
    v59 = v15 + 320;
    v60 = 0;
    v61 = v15;
    v62 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v24 = *(unsigned int *)(v15 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v15 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
      LODWORD(v24) = *v23;
    }
    *(_DWORD *)(v15 + 776) = 0;
    v23[v24 + 1] = 5;
    *(_BYTE *)(v15 + 320) = v24 + 1;
    *(_QWORD *)&v23[8 * v24 + 16] = v7;
  }
  return sub_22E3BB0B8((uint64_t)&v59);
}

uint64_t sub_22E86B888(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86B8C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86B918(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__src;
  uint64_t v32;
  _QWORD v33[49];

  v33[48] = *MEMORY[0x24BDAC8D0];
  __src = v33;
  v32 = 0x1000000000;
  v29 = 0;
  v30 = 429;
  v28 = HIDWORD(a3);
  do
  {
    v4 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v28, 1);
    v5 = (char *)__src + 24 * v32;
    v6 = *(_OWORD *)v4;
    *((_QWORD *)v5 + 2) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v5 = v6;
    LODWORD(v32) = v32 + 1;
    sub_22F18FB4C(a2, (unsigned int *)&v28);
    v7 = (unsigned __int16)v30;
    if ((unsigned __int16)v30 == 429)
    {
      v8 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v8 + 312) = v28;
      *(_DWORD *)(v8 + 316) = 1678;
      if (*(char *)(v8 + 311) < 0)
      {
        **(_BYTE **)(v8 + 288) = 0;
        *(_QWORD *)(v8 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v8 + 288) = 0;
        *(_BYTE *)(v8 + 311) = 0;
      }
      v9 = (unsigned __int8 *)(v8 + 320);
      v24 = (unsigned __int8 *)(v8 + 320);
      v25 = 0;
      v26 = v8;
      v27 = 1;
      *(_BYTE *)(v8 + 320) = 0;
      *(_DWORD *)(v8 + 664) = 0;
      v10 = *(unsigned int *)(v8 + 776);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v8 + 768);
        v12 = 56 * v10;
        do
        {
          if (*(char *)(v11 + v12 - 9) < 0)
            operator delete(*(void **)(v11 + v12 - 32));
          v12 -= 56;
        }
        while (v12);
        v9 = v24;
        *(_DWORD *)(v8 + 776) = 0;
        if (!v9)
        {
          v9 = (unsigned __int8 *)sub_22E3B8AAC(v25);
          v24 = v9;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 776) = 0;
      }
      v9[*v9 + 1] = 2;
      v13 = v24;
      v14 = *v24;
      *v24 = v14 + 1;
      *(_QWORD *)&v13[8 * v14 + 16] = 0;
      sub_22E3BB0B8((uint64_t)&v24);
      v15 = 1;
      do
      {
        sub_22F18FB4C(a2, (unsigned int *)&v28);
        if ((unsigned __int16)v30 == 430)
          v16 = -1;
        else
          v16 = 0;
        if ((unsigned __int16)v30 == 429)
          v17 = 1;
        else
          v17 = v16;
        v15 += v17;
      }
      while (v15);
      sub_22F18FB4C(a2, (unsigned int *)&v28);
      v7 = (unsigned __int16)v30;
    }
  }
  while ((v7 - 1) > 1);
  HIDWORD(v28) = 0;
  v29 = 0;
  v30 = 430;
  v18 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v28, 1);
  v19 = (char *)__src + 24 * v32;
  v20 = *(_OWORD *)v18;
  *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
  *(_OWORD *)v19 = v20;
  LODWORD(v32) = v32 + 1;
  v21 = 24 * v32;
  v22 = (_BYTE *)operator new[]();
  bzero(v22, v21);
  v23 = v32;
  if ((_DWORD)v32)
    memmove(v22, __src, 24 * v32);
  sub_22F1735E4(a2, v22, v23, 0, 1, 0);
  if (__src != v33)
    free(__src);
}

uint64_t sub_22E86BBE8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86BC28(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86BC78(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v5 = *(_QWORD *)(a2 + 48);
  v6 = *a4;
  if (sub_22F1CF68C(*(_QWORD *)(v5 + 32), 0x7E0u, *a4, v5) != 1)
  {
    *(_DWORD *)(v5 + 312) = v6;
    *(_DWORD *)(v5 + 316) = 2016;
    if (*(char *)(v5 + 311) < 0)
    {
      **(_BYTE **)(v5 + 288) = 0;
      *(_QWORD *)(v5 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 288) = 0;
      *(_BYTE *)(v5 + 311) = 0;
    }
    v11[0] = v5 + 320;
    v11[1] = 0;
    v11[2] = v5;
    v12 = 1;
    *(_BYTE *)(v5 + 320) = 0;
    *(_DWORD *)(v5 + 664) = 0;
    v7 = *(unsigned int *)(v5 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(v5 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
    }
    *(_DWORD *)(v5 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v11);
    sub_22F1CCBD0(*(_QWORD *)(a2 + 48), 0x7E0u, 1, 0);
  }
  return sub_22F163BBC(a2);
}

uint64_t sub_22E86BD68(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86BDA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86BDF8(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  _QWORD v49[3];
  __int16 v50;
  _QWORD v51[3];
  __int16 v52;
  void *__p;
  size_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[3];
  __int16 v58;
  _QWORD v59[3];
  __int16 v60;
  _QWORD v61[3];
  __int16 v62;

  v7 = *a4;
  sub_22F18FB4C((unint64_t)a2, a4);
  if (*((_WORD *)a4 + 8) != 21)
  {
    v13 = a2[6];
    *(_DWORD *)(v13 + 312) = v7;
    *(_DWORD *)(v13 + 316) = 1709;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v61[0] = v13 + 320;
    v61[1] = 0;
    v61[2] = v13;
    v62 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v15 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v13 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
    }
    *(_DWORD *)(v13 + 776) = 0;
    p_p = (void **)v61;
    goto LABEL_74;
  }
  sub_22F18FB4C((unint64_t)a2, a4);
  if (*((_WORD *)a4 + 8) != 5)
  {
    v14 = a2[6];
    *(_DWORD *)(v14 + 312) = v7;
    *(_DWORD *)(v14 + 316) = 1709;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    v59[0] = v14 + 320;
    v59[1] = 0;
    v59[2] = v14;
    v60 = 1;
    *(_BYTE *)(v14 + 320) = 0;
    *(_DWORD *)(v14 + 664) = 0;
    v19 = *(unsigned int *)(v14 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v14 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
    }
    *(_DWORD *)(v14 + 776) = 0;
    p_p = (void **)v59;
    goto LABEL_74;
  }
  v8 = *((_QWORD *)a4 + 1);
  v9 = *(unsigned int **)(v8 + 16);
  v10 = *v9;
  if (v10 == 6)
  {
    if (v9[4] == 1802398060 && *((_WORD *)v9 + 10) == 29285)
    {
      v12 = 0x100000001;
    }
    else if (v9[4] ^ 0x73657865 | *((unsigned __int16 *)v9 + 10) ^ 0x7274)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0x100000004;
    }
  }
  else
  {
    switch((_DWORD)v10)
    {
      case 8:
        if (*((_QWORD *)v9 + 2) != 0x72656C69706D6F63)
          goto LABEL_58;
        v12 = 0x100000003;
        break;
      case 4:
        if (v9[4] != 1919251317)
          goto LABEL_58;
        v12 = 0x100000005;
        break;
      case 3:
        if (*((unsigned __int16 *)v9 + 8) ^ 0x696C | *((unsigned __int8 *)v9 + 18) ^ 0x62)
          v12 = 0;
        else
          v12 = 0x100000002;
        break;
      default:
        goto LABEL_58;
    }
  }
  if (!HIDWORD(v12) || !(_DWORD)v12)
  {
LABEL_58:
    v26 = a2[6];
    *(_DWORD *)(v26 + 312) = *a4;
    *(_DWORD *)(v26 + 316) = 1710;
    if (*(char *)(v26 + 311) < 0)
    {
      **(_BYTE **)(v26 + 288) = 0;
      *(_QWORD *)(v26 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v26 + 288) = 0;
      *(_BYTE *)(v26 + 311) = 0;
    }
    v57[0] = v26 + 320;
    v57[1] = 0;
    v57[2] = v26;
    v58 = 1;
    *(_BYTE *)(v26 + 320) = 0;
    *(_DWORD *)(v26 + 664) = 0;
    v27 = *(unsigned int *)(v26 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v26 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
    *(_DWORD *)(v26 + 776) = 0;
    p_p = (void **)v57;
    goto LABEL_74;
  }
  v22 = (_DWORD *)a2[8];
  if ((_DWORD)v12 != 2 && v22[19] == 3)
  {
    v23 = a2[6];
    *(_DWORD *)(v23 + 312) = *a4;
    *(_DWORD *)(v23 + 316) = 1987;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    __p = (void *)(v23 + 320);
    v54 = 0;
    v55 = v23;
    v56 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v30 = *(unsigned int *)(v23 + 776);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD *)(v23 + 768);
      v32 = 56 * v30;
      do
      {
        if (*(char *)(v31 + v32 - 9) < 0)
          operator delete(*(void **)(v31 + v32 - 32));
        v32 -= 56;
      }
      while (v32);
    }
LABEL_73:
    *(_DWORD *)(v23 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)&__p, (void *)(*(_QWORD *)(v8 + 16) + 16), **(unsigned int **)(v8 + 16));
    p_p = &__p;
LABEL_74:
    sub_22E3BB0B8((uint64_t)p_p);
    return;
  }
  if (v22[14] == 42 && v22[16] == 3 && (_DWORD)v12 != 2 && v22[17] == 25)
  {
    v23 = a2[6];
    *(_DWORD *)(v23 + 312) = *a4;
    *(_DWORD *)(v23 + 316) = 1987;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    __p = (void *)(v23 + 320);
    v54 = 0;
    v55 = v23;
    v56 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v41 = *(unsigned int *)(v23 + 776);
    if ((_DWORD)v41)
    {
      v42 = *(_QWORD *)(v23 + 768);
      v43 = 56 * v41;
      do
      {
        if (*(char *)(v42 + v43 - 9) < 0)
          operator delete(*(void **)(v42 + v43 - 32));
        v43 -= 56;
      }
      while (v43);
    }
    goto LABEL_73;
  }
  sub_22F18FB4C((unint64_t)a2, a4);
  __p = 0;
  v54 = 0;
  v55 = 0;
  v24 = *((unsigned __int16 *)a4 + 8);
  if (v24 == 65)
  {
    sub_22F18FB4C((unint64_t)a2, a4);
    if (!sub_22F190300((uint64_t)a2, (unint64_t)a4, (uint64_t)&__p, (uint64_t)"pragma comment", 1))
      goto LABEL_94;
    v24 = *((unsigned __int16 *)a4 + 8);
  }
  if (v24 == 22)
  {
    sub_22F18FB4C((unint64_t)a2, a4);
    if (*((_WORD *)a4 + 8) == 2)
    {
      v44 = a2[136];
      if (v44)
      {
        if (v55 >= 0)
          v45 = &__p;
        else
          v45 = __p;
        if (v55 >= 0)
          v46 = HIBYTE(v55) & 0x7F;
        else
          v46 = v54;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *, size_t))(*(_QWORD *)v44 + 96))(v44, v7, v8, v45, v46);
      }
      if (v55 >= 0)
        v47 = &__p;
      else
        v47 = __p;
      if (v55 >= 0)
        v48 = HIBYTE(v55) & 0x7F;
      else
        v48 = v54;
      sub_22F30A554(*(_QWORD *)(a1 + 32), v7, v12, v47, v48);
      goto LABEL_94;
    }
    v25 = a2[6];
    *(_DWORD *)(v25 + 312) = *a4;
    *(_DWORD *)(v25 + 316) = 1709;
    if (*(char *)(v25 + 311) < 0)
    {
      **(_BYTE **)(v25 + 288) = 0;
      *(_QWORD *)(v25 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 288) = 0;
      *(_BYTE *)(v25 + 311) = 0;
    }
    v49[0] = v25 + 320;
    v49[1] = 0;
    v49[2] = v25;
    v50 = 1;
    *(_BYTE *)(v25 + 320) = 0;
    *(_DWORD *)(v25 + 664) = 0;
    v38 = *(unsigned int *)(v25 + 776);
    if ((_DWORD)v38)
    {
      v39 = *(_QWORD *)(v25 + 768);
      v40 = 56 * v38;
      do
      {
        if (*(char *)(v39 + v40 - 9) < 0)
          operator delete(*(void **)(v39 + v40 - 32));
        v40 -= 56;
      }
      while (v40);
    }
    *(_DWORD *)(v25 + 776) = 0;
    v37 = v49;
  }
  else
  {
    v33 = a2[6];
    *(_DWORD *)(v33 + 312) = *a4;
    *(_DWORD *)(v33 + 316) = 1709;
    if (*(char *)(v33 + 311) < 0)
    {
      **(_BYTE **)(v33 + 288) = 0;
      *(_QWORD *)(v33 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v33 + 288) = 0;
      *(_BYTE *)(v33 + 311) = 0;
    }
    v51[0] = v33 + 320;
    v51[1] = 0;
    v51[2] = v33;
    v52 = 1;
    *(_BYTE *)(v33 + 320) = 0;
    *(_DWORD *)(v33 + 664) = 0;
    v34 = *(unsigned int *)(v33 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(v33 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
    }
    *(_DWORD *)(v33 + 776) = 0;
    v37 = v51;
  }
  sub_22E3BB0B8((uint64_t)v37);
LABEL_94:
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
}

uint64_t sub_22E86C490(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86C4D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E86C520(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  __int16 v81;
  _QWORD v82[3];
  __int16 v83;
  _QWORD v84[3];
  __int16 v85;
  _QWORD v86[3];
  __int16 v87;
  _QWORD v88[3];
  __int16 v89;
  _QWORD v90[3];
  __int16 v91;
  _QWORD v92[3];
  __int16 v93;
  _QWORD v94[3];
  __int16 v95;
  _QWORD v96[3];
  __int16 v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;

  v6 = *(_DWORD *)a4;
  v7 = *(_QWORD *)(a4 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 144))(*(_QWORD *)(a2 + 64)) & 1) == 0
    && (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 140) & 0x4000000000000000) == 0)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v8 + 316) = 2007;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v98 = (unsigned __int8 *)(v8 + 320);
    v99 = 0;
    v100 = v8;
    v101 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v21 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v8 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v8 + 776) = 0;
    sub_22E3B89A8(&v98, (void *)(*(_QWORD *)(v7 + 16) + 16), **(unsigned int **)(v7 + 16));
    goto LABEL_29;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) == 21)
  {
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (*(_WORD *)(a4 + 16) != 5)
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v14 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v14 + 316) = 1715;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      v96[0] = v14 + 320;
      v96[1] = 0;
      v96[2] = v14;
      v97 = 1;
      *(_BYTE *)(v14 + 320) = 0;
      *(_DWORD *)(v14 + 664) = 0;
      v25 = *(unsigned int *)(v14 + 776);
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD *)(v14 + 768);
        v27 = 56 * v25;
        do
        {
          if (*(char *)(v26 + v27 - 9) < 0)
            operator delete(*(void **)(v26 + v27 - 32));
          v27 -= 56;
        }
        while (v27);
      }
      *(_DWORD *)(v14 + 776) = 0;
      v24 = (unsigned __int8 **)v96;
      return (char *)sub_22E3BB0B8((uint64_t)v24);
    }
    v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
    switch(*(_DWORD *)v10)
    {
      case 3:
        v11 = 0x100000006;
        v12 = (*(unsigned __int16 *)(v10 + 16) ^ 0x6F70 | *(unsigned __int8 *)(v10 + 18) ^ 0x70) == 0;
        goto LABEL_38;
      case 4:
        v11 = 0x100000005;
        v12 = *(_DWORD *)(v10 + 16) == 1752397168;
LABEL_38:
        if (v12)
          v9 = v11;
        else
          v9 = 0;
        break;
      case 6:
        v28 = (*(_DWORD *)(v10 + 16) ^ 0x65637865 | *(unsigned __int16 *)(v10 + 20) ^ 0x7470) == 0;
        v29 = 0x100000003;
        goto LABEL_43;
      case 7:
        v28 = (*(_DWORD *)(v10 + 16) ^ 0x63657270 | *(_DWORD *)(v10 + 19) ^ 0x65736963) == 0;
        v29 = 0x100000001;
LABEL_43:
        if (v28)
          v9 = v29;
        else
          v9 = 0;
        break;
      default:
        break;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (!HIDWORD(v9) || !(_DWORD)v9)
    {
      v32 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v32 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v32 + 316) = 1715;
      if (*(char *)(v32 + 311) < 0)
      {
        **(_BYTE **)(v32 + 288) = 0;
        *(_QWORD *)(v32 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v32 + 288) = 0;
        *(_BYTE *)(v32 + 311) = 0;
      }
      v94[0] = v32 + 320;
      v94[1] = 0;
      v94[2] = v32;
      v95 = 1;
      *(_BYTE *)(v32 + 320) = 0;
      *(_DWORD *)(v32 + 664) = 0;
      v36 = *(unsigned int *)(v32 + 776);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(v32 + 768);
        v38 = 56 * v36;
        do
        {
          if (*(char *)(v37 + v38 - 9) < 0)
            operator delete(*(void **)(v37 + v38 - 32));
          v38 -= 56;
        }
        while (v38);
      }
      *(_DWORD *)(v32 + 776) = 0;
      v24 = (unsigned __int8 **)v94;
      return (char *)sub_22E3BB0B8((uint64_t)v24);
    }
    v30 = *(unsigned __int16 *)(a4 + 16);
    if ((v9 - 5) <= 1)
    {
      if (v30 != 22)
      {
        v39 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v39 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v39 + 316) = 1715;
        if (*(char *)(v39 + 311) < 0)
        {
          **(_BYTE **)(v39 + 288) = 0;
          *(_QWORD *)(v39 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v39 + 288) = 0;
          *(_BYTE *)(v39 + 311) = 0;
        }
        v92[0] = v39 + 320;
        v92[1] = 0;
        v92[2] = v39;
        v93 = 1;
        *(_BYTE *)(v39 + 320) = 0;
        *(_DWORD *)(v39 + 664) = 0;
        v44 = *(unsigned int *)(v39 + 776);
        if ((_DWORD)v44)
        {
          v45 = *(_QWORD *)(v39 + 768);
          v46 = 56 * v44;
          do
          {
            if (*(char *)(v45 + v46 - 9) < 0)
              operator delete(*(void **)(v45 + v46 - 32));
            v46 -= 56;
          }
          while (v46);
        }
        *(_DWORD *)(v39 + 776) = 0;
        v24 = (unsigned __int8 **)v92;
        return (char *)sub_22E3BB0B8((uint64_t)v24);
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      if ((_DWORD)v9 == 6)
        v31 = 0x40000;
      else
        v31 = 0x20000;
      goto LABEL_58;
    }
    if (v30 != 65)
    {
      if (v30 != 22)
      {
        v43 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v43 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v43 + 316) = 1715;
        if (*(char *)(v43 + 311) < 0)
        {
          **(_BYTE **)(v43 + 288) = 0;
          *(_QWORD *)(v43 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v43 + 288) = 0;
          *(_BYTE *)(v43 + 311) = 0;
        }
        v90[0] = v43 + 320;
        v90[1] = 0;
        v90[2] = v43;
        v91 = 1;
        *(_BYTE *)(v43 + 320) = 0;
        *(_DWORD *)(v43 + 664) = 0;
        v52 = *(unsigned int *)(v43 + 776);
        if ((_DWORD)v52)
        {
          v53 = *(_QWORD *)(v43 + 768);
          v54 = 56 * v52;
          do
          {
            if (*(char *)(v53 + v54 - 9) < 0)
              operator delete(*(void **)(v53 + v54 - 32));
            v54 -= 56;
          }
          while (v54);
        }
        *(_DWORD *)(v43 + 776) = 0;
        v24 = (unsigned __int8 **)v90;
        return (char *)sub_22E3BB0B8((uint64_t)v24);
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v31 = 0x10000;
      goto LABEL_58;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (*(unsigned __int16 *)(a4 + 16) - 5 >= 2)
    {
      v47 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v47 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v47 + 316) = 1715;
      if (*(char *)(v47 + 311) < 0)
      {
        **(_BYTE **)(v47 + 288) = 0;
        *(_QWORD *)(v47 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v47 + 288) = 0;
        *(_BYTE *)(v47 + 311) = 0;
      }
      v88[0] = v47 + 320;
      v88[1] = 0;
      v88[2] = v47;
      v89 = 1;
      *(_BYTE *)(v47 + 320) = 0;
      *(_DWORD *)(v47 + 664) = 0;
      v55 = *(unsigned int *)(v47 + 776);
      if ((_DWORD)v55)
      {
        v56 = *(_QWORD *)(v47 + 768);
        v57 = 56 * v55;
        do
        {
          if (*(char *)(v56 + v57 - 9) < 0)
            operator delete(*(void **)(v56 + v57 - 32));
          v57 -= 56;
        }
        while (v57);
      }
      *(_DWORD *)(v47 + 776) = 0;
      v24 = (unsigned __int8 **)v88;
      return (char *)sub_22E3BB0B8((uint64_t)v24);
    }
    v41 = *(int **)(*(_QWORD *)(a4 + 8) + 16);
    v42 = *v41;
    if (*v41 == 4)
    {
      if (v41[4] == 1752397168)
      {
        v31 = 196608;
LABEL_133:
        sub_22F18FB4C(a2, (unsigned int *)a4);
        v66 = *(unsigned __int16 *)(a4 + 16);
        if (v66 == 65)
        {
          sub_22F18FB4C(a2, (unsigned int *)a4);
          if (*(unsigned __int16 *)(a4 + 16) - 5 >= 2)
          {
            v69 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
            *(_DWORD *)(v69 + 316) = 1715;
            if (*(char *)(v69 + 311) < 0)
            {
              **(_BYTE **)(v69 + 288) = 0;
              *(_QWORD *)(v69 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v69 + 288) = 0;
              *(_BYTE *)(v69 + 311) = 0;
            }
            v84[0] = v69 + 320;
            v84[1] = 0;
            v84[2] = v69;
            v85 = 1;
            *(_BYTE *)(v69 + 320) = 0;
            *(_DWORD *)(v69 + 664) = 0;
            v70 = *(unsigned int *)(v69 + 776);
            if ((_DWORD)v70)
            {
              v71 = *(_QWORD *)(v69 + 768);
              v72 = 56 * v70;
              do
              {
                if (*(char *)(v71 + v72 - 9) < 0)
                  operator delete(*(void **)(v71 + v72 - 32));
                v72 -= 56;
              }
              while (v72);
            }
            *(_DWORD *)(v69 + 776) = 0;
            v24 = (unsigned __int8 **)v84;
            return (char *)sub_22E3BB0B8((uint64_t)v24);
          }
          v67 = *(_DWORD **)(*(_QWORD *)(a4 + 8) + 16);
          if (*v67 != 4 || v67[4] != 1752397168)
          {
            v68 = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(v68 + 312) = *(_DWORD *)a4;
            *(_DWORD *)(v68 + 316) = 1715;
            if (*(char *)(v68 + 311) < 0)
            {
              **(_BYTE **)(v68 + 288) = 0;
              *(_QWORD *)(v68 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v68 + 288) = 0;
              *(_BYTE *)(v68 + 311) = 0;
            }
            v82[0] = v68 + 320;
            v82[1] = 0;
            v82[2] = v68;
            v83 = 1;
            *(_BYTE *)(v68 + 320) = 0;
            *(_DWORD *)(v68 + 664) = 0;
            v73 = *(unsigned int *)(v68 + 776);
            if ((_DWORD)v73)
            {
              v74 = *(_QWORD *)(v68 + 768);
              v75 = 56 * v73;
              do
              {
                if (*(char *)(v74 + v75 - 9) < 0)
                  operator delete(*(void **)(v74 + v75 - 32));
                v75 -= 56;
              }
              while (v75);
            }
            *(_DWORD *)(v68 + 776) = 0;
            v24 = (unsigned __int8 **)v82;
            return (char *)sub_22E3BB0B8((uint64_t)v24);
          }
          sub_22F18FB4C(a2, (unsigned int *)a4);
          v66 = *(unsigned __int16 *)(a4 + 16);
          v31 = 196608;
        }
        if (v66 != 22)
        {
          v76 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v76 + 312) = *(_DWORD *)a4;
          *(_DWORD *)(v76 + 316) = 1715;
          if (*(char *)(v76 + 311) < 0)
          {
            **(_BYTE **)(v76 + 288) = 0;
            *(_QWORD *)(v76 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v76 + 288) = 0;
            *(_BYTE *)(v76 + 311) = 0;
          }
          v80[0] = v76 + 320;
          v80[1] = 0;
          v80[2] = v76;
          v81 = 1;
          *(_BYTE *)(v76 + 320) = 0;
          *(_DWORD *)(v76 + 664) = 0;
          v77 = *(unsigned int *)(v76 + 776);
          if ((_DWORD)v77)
          {
            v78 = *(_QWORD *)(v76 + 768);
            v79 = 56 * v77;
            do
            {
              if (*(char *)(v78 + v79 - 9) < 0)
                operator delete(*(void **)(v78 + v79 - 32));
              v79 -= 56;
            }
            while (v79);
          }
          *(_DWORD *)(v76 + 776) = 0;
          v24 = (unsigned __int8 **)v80;
          return (char *)sub_22E3BB0B8((uint64_t)v24);
        }
        sub_22F18FB4C(a2, (unsigned int *)a4);
LABEL_58:
        if (*(_WORD *)(a4 + 16) == 2)
        {
          v33 = *(_DWORD *)a4;
          v34 = operator new[]();
          *(_DWORD *)v34 = v6;
          *(_DWORD *)(v34 + 4) = v33;
          *(_QWORD *)(v34 + 8) = v31 | (unsigned __int16)v9;
          *(_QWORD *)(v34 + 16) = 423;
          return sub_22F1735E4(a2, (_BYTE *)v34, 1, 0, 1, 0);
        }
        v40 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v40 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v40 + 316) = 2005;
        if (*(char *)(v40 + 311) < 0)
        {
          **(_BYTE **)(v40 + 288) = 0;
          *(_QWORD *)(v40 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v40 + 288) = 0;
          *(_BYTE *)(v40 + 311) = 0;
        }
        v48 = (unsigned __int8 *)(v40 + 320);
        v98 = (unsigned __int8 *)(v40 + 320);
        v99 = 0;
        v100 = v40;
        v101 = 1;
        *(_BYTE *)(v40 + 320) = 0;
        *(_DWORD *)(v40 + 664) = 0;
        v49 = *(unsigned int *)(v40 + 776);
        if ((_DWORD)v49)
        {
          v50 = *(_QWORD *)(v40 + 768);
          v51 = 56 * v49;
          do
          {
            if (*(char *)(v50 + v51 - 9) < 0)
              operator delete(*(void **)(v50 + v51 - 32));
            v51 -= 56;
          }
          while (v51);
          LODWORD(v49) = *v48;
        }
        *(_DWORD *)(v40 + 776) = 0;
        v48[v49 + 1] = 1;
        *(_BYTE *)(v40 + 320) = v49 + 1;
        v19 = &v48[8 * v49];
        v20 = (uint64_t)"float_control";
        goto LABEL_21;
      }
    }
    else if (v42 == 3)
    {
      v58 = *((unsigned __int16 *)v41 + 8);
      v59 = *((unsigned __int8 *)v41 + 18);
      if (v58 == 26223 && v59 == 102)
      {
        if ((_DWORD)v9 == 1)
          v65 = 2;
        else
          v65 = v9;
        if (v65 == 3)
          LOWORD(v9) = 4;
        else
          LOWORD(v9) = v65;
        goto LABEL_132;
      }
    }
    else if (v42 == 2 && *((_WORD *)v41 + 8) == 28271)
    {
LABEL_132:
      v31 = 0x10000;
      goto LABEL_133;
    }
    v61 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v61 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v61 + 316) = 1715;
    if (*(char *)(v61 + 311) < 0)
    {
      **(_BYTE **)(v61 + 288) = 0;
      *(_QWORD *)(v61 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v61 + 288) = 0;
      *(_BYTE *)(v61 + 311) = 0;
    }
    v86[0] = v61 + 320;
    v86[1] = 0;
    v86[2] = v61;
    v87 = 1;
    *(_BYTE *)(v61 + 320) = 0;
    *(_DWORD *)(v61 + 664) = 0;
    v62 = *(unsigned int *)(v61 + 776);
    if ((_DWORD)v62)
    {
      v63 = *(_QWORD *)(v61 + 768);
      v64 = 56 * v62;
      do
      {
        if (*(char *)(v63 + v64 - 9) < 0)
          operator delete(*(void **)(v63 + v64 - 32));
        v64 -= 56;
      }
      while (v64);
    }
    *(_DWORD *)(v61 + 776) = 0;
    v24 = (unsigned __int8 **)v86;
    return (char *)sub_22E3BB0B8((uint64_t)v24);
  }
  v13 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v13 + 312) = v6;
  *(_DWORD *)(v13 + 316) = 15;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  v15 = (unsigned __int8 *)(v13 + 320);
  v98 = (unsigned __int8 *)(v13 + 320);
  v99 = 0;
  v100 = v13;
  v101 = 1;
  *(_BYTE *)(v13 + 320) = 0;
  *(_DWORD *)(v13 + 664) = 0;
  v16 = *(unsigned int *)(v13 + 776);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(v13 + 768);
    v18 = 56 * v16;
    do
    {
      if (*(char *)(v17 + v18 - 9) < 0)
        operator delete(*(void **)(v17 + v18 - 32));
      v18 -= 56;
    }
    while (v18);
    LODWORD(v16) = *v15;
  }
  *(_DWORD *)(v13 + 776) = 0;
  v15[v16 + 1] = 4;
  *(_BYTE *)(v13 + 320) = v16 + 1;
  v19 = &v15[8 * v16];
  v20 = 21;
LABEL_21:
  *((_QWORD *)v19 + 2) = v20;
LABEL_29:
  v24 = &v98;
  return (char *)sub_22E3BB0B8((uint64_t)v24);
}

uint64_t sub_22E86CF78(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86CFB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86D008(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  size_t v29;
  void *p_p;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  _QWORD v36[3];
  __int16 v37;
  _QWORD v38[3];
  __int16 v39;
  void *__p;
  size_t v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;

  v7 = *a4;
  sub_22F18FB4C(a2, a4);
  if (*((_WORD *)a4 + 8) == 21)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_22F18FB4C(a2, a4);
    if (!sub_22F190300(a2, (unint64_t)a4, (uint64_t)&v43, (uint64_t)"pragma detect_mismatch", 1))
    {
LABEL_48:
      if (SHIBYTE(v45) < 0)
        operator delete(v43);
      return;
    }
    __p = 0;
    v41 = 0;
    v42 = 0;
    if (*((_WORD *)a4 + 8) == 65)
    {
      sub_22F18FB4C(a2, a4);
      if (!sub_22F190300(a2, (unint64_t)a4, (uint64_t)&__p, (uint64_t)"pragma detect_mismatch", 1))
        goto LABEL_46;
      if (*((_WORD *)a4 + 8) == 22)
      {
        sub_22F18FB4C(a2, a4);
        if (*((_WORD *)a4 + 8) == 2)
        {
          v27 = *(_QWORD *)(a2 + 1088);
          if (v27)
          {
            if (v45 >= 0)
              v28 = &v43;
            else
              v28 = v43;
            if (v45 >= 0)
              v29 = HIBYTE(v45) & 0x7F;
            else
              v29 = v44;
            if (v42 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (v42 >= 0)
              v31 = HIBYTE(v42) & 0x7F;
            else
              v31 = v41;
            (*(void (**)(uint64_t, uint64_t, void *, size_t, void *, size_t))(*(_QWORD *)v27 + 112))(v27, v7, v28, v29, p_p, v31);
          }
          if (v45 >= 0)
            v32 = &v43;
          else
            v32 = v43;
          if (v45 >= 0)
            v33 = HIBYTE(v45) & 0x7F;
          else
            v33 = v44;
          if (v42 >= 0)
            v34 = &__p;
          else
            v34 = __p;
          if (v42 >= 0)
            v35 = HIBYTE(v42) & 0x7F;
          else
            v35 = v41;
          sub_22F30A5F4(*(_QWORD *)(a1 + 32), v7, v32, v33, v34, v35);
          goto LABEL_46;
        }
        v8 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v8 + 312) = *a4;
        *(_DWORD *)(v8 + 316) = 1711;
        if (*(char *)(v8 + 311) < 0)
        {
          **(_BYTE **)(v8 + 288) = 0;
          *(_QWORD *)(v8 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v8 + 288) = 0;
          *(_BYTE *)(v8 + 311) = 0;
        }
        v36[0] = v8 + 320;
        v36[1] = 0;
        v36[2] = v8;
        v37 = 1;
        *(_BYTE *)(v8 + 320) = 0;
        *(_DWORD *)(v8 + 664) = 0;
        v24 = *(unsigned int *)(v8 + 776);
        if ((_DWORD)v24)
        {
          v25 = *(_QWORD *)(v8 + 768);
          v26 = 56 * v24;
          do
          {
            if (*(char *)(v25 + v26 - 9) < 0)
              operator delete(*(void **)(v25 + v26 - 32));
            v26 -= 56;
          }
          while (v26);
        }
        *(_DWORD *)(v8 + 776) = 0;
        v18 = v36;
      }
      else
      {
        v19 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v19 + 312) = *a4;
        *(_DWORD *)(v19 + 316) = 15;
        if (*(char *)(v19 + 311) < 0)
        {
          **(_BYTE **)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v19 + 288) = 0;
          *(_BYTE *)(v19 + 311) = 0;
        }
        v20 = (unsigned __int8 *)(v19 + 320);
        v46 = v19 + 320;
        v47 = 0;
        v48 = v19;
        v49 = 1;
        *(_BYTE *)(v19 + 320) = 0;
        *(_DWORD *)(v19 + 664) = 0;
        v21 = *(unsigned int *)(v19 + 776);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD *)(v19 + 768);
          v23 = 56 * v21;
          do
          {
            if (*(char *)(v22 + v23 - 9) < 0)
              operator delete(*(void **)(v22 + v23 - 32));
            v23 -= 56;
          }
          while (v23);
          LODWORD(v21) = *v20;
        }
        *(_DWORD *)(v19 + 776) = 0;
        v20[v21 + 1] = 4;
        *(_BYTE *)(v19 + 320) = v21 + 1;
        *(_QWORD *)&v20[8 * v21 + 16] = 22;
        v18 = &v46;
      }
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v14 + 312) = *a4;
      *(_DWORD *)(v14 + 316) = 1711;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      v38[0] = v14 + 320;
      v38[1] = 0;
      v38[2] = v14;
      v39 = 1;
      *(_BYTE *)(v14 + 320) = 0;
      *(_DWORD *)(v14 + 664) = 0;
      v15 = *(unsigned int *)(v14 + 776);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v14 + 768);
        v17 = 56 * v15;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
      }
      *(_DWORD *)(v14 + 776) = 0;
      v18 = v38;
    }
    sub_22E3BB0B8((uint64_t)v18);
LABEL_46:
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v9 + 312) = v7;
  *(_DWORD *)(v9 + 316) = 15;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  v10 = (unsigned __int8 *)(v9 + 320);
  v46 = v9 + 320;
  v47 = 0;
  v48 = v9;
  v49 = 1;
  *(_BYTE *)(v9 + 320) = 0;
  *(_DWORD *)(v9 + 664) = 0;
  v11 = *(unsigned int *)(v9 + 776);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v9 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
    LODWORD(v11) = *v10;
  }
  *(_DWORD *)(v9 + 776) = 0;
  v10[v11 + 1] = 4;
  *(_BYTE *)(v9 + 320) = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = 21;
  sub_22E3BB0B8((uint64_t)&v46);
}

uint64_t sub_22E86D430(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86D470(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E86D4C0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const char *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;

  v6 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 21)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v6;
    *(_DWORD *)(v10 + 316) = 1995;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v10 + 320);
    v70 = (unsigned __int8 *)(v10 + 320);
    v71 = 0;
    v72 = v10;
    v73 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if (!(_DWORD)v12)
      goto LABEL_26;
    v13 = *(_QWORD *)(v10 + 768);
    v14 = 56 * v12;
    do
    {
      if (*(char *)(v13 + v14 - 9) < 0)
        operator delete(*(void **)(v13 + v14 - 32));
      v14 -= 56;
    }
    while (v14);
    goto LABEL_25;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v7 = *(unsigned __int16 *)(a4 + 16);
  if ((v7 - 7) < 6
    || ((v7 - 13) >= 6 ? (v8 = v7 == 1) : (v8 = 1), v8 || (v20 = *(_QWORD *)(a4 + 8)) == 0))
  {
    v9 = *(_DWORD *)a4;
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v9;
    *(_DWORD *)(v10 + 316) = 1992;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v10 + 320);
    v70 = (unsigned __int8 *)(v10 + 320);
    v71 = 0;
    v72 = v10;
    v73 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if (!(_DWORD)v12)
      goto LABEL_26;
    v15 = *(_QWORD *)(v10 + 768);
    v16 = 56 * v12;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
    goto LABEL_25;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *v21;
  if (*v21 == 15)
  {
    if (v21[2] == 0x6E65675F6C6C7566 && *(uint64_t *)((char *)v21 + 23) == 0x7974696C6172656ELL)
    {
      v47 = *(unsigned __int16 *)(a4 + 16);
      if (v47 == 22)
      {
        v24 = 3;
        goto LABEL_88;
      }
      if (v47 != 65)
      {
        v57 = *(_DWORD *)a4;
        v58 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v58 + 312) = v57;
        *(_DWORD *)(v58 + 316) = 1521;
        if (*(char *)(v58 + 311) < 0)
        {
          **(_BYTE **)(v58 + 288) = 0;
          *(_QWORD *)(v58 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v58 + 288) = 0;
          *(_BYTE *)(v58 + 311) = 0;
        }
        v61 = (unsigned __int8 *)(v58 + 320);
        v70 = (unsigned __int8 *)(v58 + 320);
        v71 = 0;
        v72 = v58;
        v73 = 1;
        *(_BYTE *)(v58 + 320) = 0;
        *(_DWORD *)(v58 + 664) = 0;
        v62 = *(unsigned int *)(v58 + 776);
        if ((_DWORD)v62)
        {
          v63 = *(_QWORD *)(v58 + 768);
          v64 = 56 * v62;
          do
          {
            if (*(char *)(v63 + v64 - 9) < 0)
              operator delete(*(void **)(v63 + v64 - 32));
            v64 -= 56;
          }
          while (v64);
          LODWORD(v62) = *v61;
        }
        *(_DWORD *)(v58 + 776) = 0;
        v61[v62 + 1] = 1;
        *(_BYTE *)(v58 + 320) = v62 + 1;
        v17 = &v61[8 * v62];
        v18 = "full_generality";
        goto LABEL_27;
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v48 = *(unsigned __int16 *)(a4 + 16);
      if ((v48 - 7) < 6 || (v48 - 13) < 6 || v48 == 1 || (v20 = *(_QWORD *)(a4 + 8)) == 0)
      {
        v49 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v49 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v49 + 316) = 1727;
        if (*(char *)(v49 + 311) < 0)
        {
          **(_BYTE **)(v49 + 288) = 0;
          *(_QWORD *)(v49 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v49 + 288) = 0;
          *(_BYTE *)(v49 + 311) = 0;
        }
        v70 = (unsigned __int8 *)(v49 + 320);
        v71 = 0;
        v72 = v49;
        v73 = 1;
        *(_BYTE *)(v49 + 320) = 0;
        *(_DWORD *)(v49 + 664) = 0;
        v65 = *(unsigned int *)(v49 + 776);
        if ((_DWORD)v65)
        {
          v66 = *(_QWORD *)(v49 + 768);
          v67 = 56 * v65;
          do
          {
            if (*(char *)(v66 + v67 - 9) < 0)
              operator delete(*(void **)(v66 + v67 - 32));
            v67 -= 56;
          }
          while (v67);
          LODWORD(v65) = *(unsigned __int8 *)(v49 + 320);
        }
        *(_DWORD *)(v49 + 776) = 0;
        v68 = *(unsigned __int16 *)(a4 + 16);
        *(_BYTE *)(v49 + 321 + v65) = 4;
        *(_QWORD *)(v49 + 336 + 8 * v65) = v68;
        v69 = (v65 + 1);
        *(_BYTE *)(v49 + 321 + v69) = 2;
        *(_BYTE *)(v49 + 320) = v65 + 2;
        *(_QWORD *)(v49 + 336 + 8 * v69) = 0;
        return (char *)sub_22E3BB0B8((uint64_t)&v70);
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v21 = *(uint64_t **)(v20 + 16);
      v22 = *v21;
    }
    goto LABEL_42;
  }
  if ((_DWORD)v22 != 9 || (v21[2] == 0x7361635F74736562 ? (v23 = *((_BYTE *)v21 + 24) == 101) : (v23 = 0), !v23))
  {
LABEL_42:
    if ((_DWORD)v22 == 20)
    {
      v31 = v21[2];
      v32 = v21[3];
      v33 = *((_DWORD *)v21 + 8);
      if (v31 != 0x656C7069746C756DLL || v32 != 0x74697265686E695FLL || v33 != 1701015137)
        goto LABEL_70;
      v24 = 2;
    }
    else if ((_DWORD)v22 == 19)
    {
      v36 = v21[2];
      v37 = v21[3];
      v38 = *(uint64_t *)((char *)v21 + 27);
      if (v36 != 0x5F6C617574726976 || v37 != 0x6174697265686E69 || v38 != 0x65636E6174697265)
        goto LABEL_70;
      v24 = 3;
    }
    else
    {
      if ((_DWORD)v22 != 18
        || ((v26 = v21[2], v27 = v21[3], v28 = *((unsigned __int16 *)v21 + 16), v26 == 0x695F656C676E6973)
          ? (v29 = v27 == 0x6E6174697265686ELL)
          : (v29 = 0),
            v29 ? (v30 = v28 == 25955) : (v30 = 0),
            !v30))
      {
LABEL_70:
        v41 = *(_DWORD *)a4;
        v42 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v42 + 312) = v41;
        *(_DWORD *)(v42 + 316) = 1727;
        if (*(char *)(v42 + 311) < 0)
        {
          **(_BYTE **)(v42 + 288) = 0;
          *(_QWORD *)(v42 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v42 + 288) = 0;
          *(_BYTE *)(v42 + 311) = 0;
        }
        v70 = (unsigned __int8 *)(v42 + 320);
        v71 = 0;
        v72 = v42;
        v73 = 1;
        *(_BYTE *)(v42 + 320) = 0;
        *(_DWORD *)(v42 + 664) = 0;
        v43 = *(unsigned int *)(v42 + 776);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(v42 + 768);
          v45 = 56 * v43;
          do
          {
            if (*(char *)(v44 + v45 - 9) < 0)
              operator delete(*(void **)(v44 + v45 - 32));
            v45 -= 56;
          }
          while (v45);
          LODWORD(v43) = *(unsigned __int8 *)(v42 + 320);
        }
        *(_DWORD *)(v42 + 776) = 0;
        *(_BYTE *)(v42 + 321 + v43) = 5;
        *(_QWORD *)(v42 + 336 + 8 * v43) = v20;
        v46 = (v43 + 1);
        *(_BYTE *)(v42 + 321 + v46) = 2;
        *(_BYTE *)(v42 + 320) = v43 + 2;
        *(_QWORD *)(v42 + 336 + 8 * v46) = 1;
        return (char *)sub_22E3BB0B8((uint64_t)&v70);
      }
      v24 = 1;
    }
    goto LABEL_87;
  }
  v24 = 0;
LABEL_87:
  if (*(_WORD *)(a4 + 16) != 22)
  {
    v51 = *(_DWORD *)a4;
    v52 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v52 + 312) = v51;
    *(_DWORD *)(v52 + 316) = 1523;
    if (*(char *)(v52 + 311) < 0)
    {
      **(_BYTE **)(v52 + 288) = 0;
      *(_QWORD *)(v52 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v52 + 288) = 0;
      *(_BYTE *)(v52 + 311) = 0;
    }
    v70 = (unsigned __int8 *)(v52 + 320);
    v71 = 0;
    v72 = v52;
    v73 = 1;
    *(_BYTE *)(v52 + 320) = 0;
    *(_DWORD *)(v52 + 664) = 0;
    v54 = *(unsigned int *)(v52 + 776);
    if ((_DWORD)v54)
    {
      v55 = *(_QWORD *)(v52 + 768);
      v56 = 56 * v54;
      do
      {
        if (*(char *)(v55 + v56 - 9) < 0)
          operator delete(*(void **)(v55 + v56 - 32));
        v56 -= 56;
      }
      while (v56);
    }
    *(_DWORD *)(v52 + 776) = 0;
    sub_22E3B89A8(&v70, (void *)(*(_QWORD *)(v20 + 16) + 16), **(unsigned int **)(v20 + 16));
    return (char *)sub_22E3BB0B8((uint64_t)&v70);
  }
LABEL_88:
  v50 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v53 = *(_DWORD *)a4;
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v53;
    *(_DWORD *)(v10 + 316) = 2005;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v11 = (unsigned __int8 *)(v10 + 320);
    v70 = (unsigned __int8 *)(v10 + 320);
    v71 = 0;
    v72 = v10;
    v73 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if (!(_DWORD)v12)
      goto LABEL_26;
    v59 = *(_QWORD *)(v10 + 768);
    v60 = 56 * v12;
    do
    {
      if (*(char *)(v59 + v60 - 9) < 0)
        operator delete(*(void **)(v59 + v60 - 32));
      v60 -= 56;
    }
    while (v60);
LABEL_25:
    LODWORD(v12) = *v11;
LABEL_26:
    *(_DWORD *)(v10 + 776) = 0;
    v11[v12 + 1] = 1;
    *(_BYTE *)(v10 + 320) = v12 + 1;
    v17 = &v11[8 * v12];
    v18 = "pointers_to_members";
LABEL_27:
    *((_QWORD *)v17 + 2) = v18;
    return (char *)sub_22E3BB0B8((uint64_t)&v70);
  }
  LODWORD(v72) = 424;
  v70 = (unsigned __int8 *)__PAIR64__(v50, v6);
  v71 = v24;
  return sub_22E80F2F4(a2, (unint64_t)&v70, 1);
}

uint64_t sub_22E86DBEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86DC2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E86DC7C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v6 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 21)
  {
    v12 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v12 + 312) = v6;
    *(_DWORD *)(v12 + 316) = 1995;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v12 + 320);
    v44 = v12 + 320;
    v45 = 0;
    v46 = v12;
    v47 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v14 = *(unsigned int *)(v12 + 776);
    if (!(_DWORD)v14)
      goto LABEL_55;
    v15 = *(_QWORD *)(v12 + 768);
    v16 = 56 * v14;
    do
    {
      if (*(char *)(v15 + v16 - 9) < 0)
        operator delete(*(void **)(v15 + v16 - 32));
      v16 -= 56;
    }
    while (v16);
    goto LABEL_54;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v7 = *(unsigned __int16 *)(a4 + 16);
  v8 = v7 - 7;
  if (v7 - 7 < 6 || v7 <= 0x12 && (((1 << v7) & 0x76000) != 0 || ((1 << v7) & 0x8002) != 0))
  {
    v43 = 0;
    v9 = 1;
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(a4 + 8);
  if (!v17)
  {
    if (v7 == 22)
    {
      v10 = 0;
      v9 = 0;
      goto LABEL_70;
    }
    v9 = 1;
LABEL_45:
    if (v7 - 13 >= 6 && v7 != 1)
    {
      v31 = *(_QWORD *)(a4 + 8);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 16);
        if (*(_DWORD *)v32 == 2)
        {
          if (*(_WORD *)(v32 + 16) == 28271)
          {
            sub_22F18FB4C(a2, (unsigned int *)a4);
            v10 = 1;
            goto LABEL_70;
          }
        }
        else if (*(_DWORD *)v32 == 3)
        {
          v33 = *(unsigned __int16 *)(v32 + 16);
          v34 = *(unsigned __int8 *)(v32 + 18);
          if (v33 == 26223 && v34 == 102)
          {
            sub_22F18FB4C(a2, (unsigned int *)a4);
            v10 = 0;
            goto LABEL_70;
          }
        }
      }
    }
LABEL_46:
    v12 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v12 + 316) = 2010;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v12 + 320);
    v44 = v12 + 320;
    v45 = 0;
    v46 = v12;
    v47 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v14 = *(unsigned int *)(v12 + 776);
    if (!(_DWORD)v14)
      goto LABEL_55;
    v28 = *(_QWORD *)(v12 + 768);
    v29 = 56 * v14;
    do
    {
      if (*(char *)(v28 + v29 - 9) < 0)
        operator delete(*(void **)(v28 + v29 - 32));
      v29 -= 56;
    }
    while (v29);
    goto LABEL_54;
  }
  v18 = *(_QWORD *)(v17 + 16);
  if (*(_DWORD *)v18 == 3)
  {
    v25 = *(unsigned __int16 *)(v18 + 16);
    v26 = *(unsigned __int8 *)(v18 + 18);
    if (v25 == 28528 && v26 == 112)
    {
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v10 = 0;
      v9 = 4;
      goto LABEL_70;
    }
  }
  else if (*(_DWORD *)v18 == 4 && *(_DWORD *)(v18 + 16) == 1752397168)
  {
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (*(_WORD *)(a4 + 16) != 65)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v12 + 312) = v6;
      *(_DWORD *)(v12 + 316) = 1998;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      v13 = (unsigned __int8 *)(v12 + 320);
      v44 = v12 + 320;
      v45 = 0;
      v46 = v12;
      v47 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v14 = *(unsigned int *)(v12 + 776);
      if (!(_DWORD)v14)
        goto LABEL_55;
      v41 = *(_QWORD *)(v12 + 768);
      v42 = 56 * v14;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
      goto LABEL_54;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    v7 = *(unsigned __int16 *)(a4 + 16);
    v8 = v7 - 7;
    v9 = 3;
    goto LABEL_43;
  }
  v9 = 1;
LABEL_43:
  v43 = 0;
LABEL_7:
  if (v8 >= 6u)
    goto LABEL_45;
  if (v7 != 7 || !sub_22F190750(a2, (int *)a4, &v43))
    goto LABEL_46;
  v10 = (uint64_t)v43;
  if ((unint64_t)v43 >= 3)
  {
    v11 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v11 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v11 + 316) = 1994;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v44 = v11 + 320;
    v45 = 0;
    v46 = v11;
    v47 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v19 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v11 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
      LODWORD(v19) = *(unsigned __int8 *)(v11 + 320);
    }
    *(_DWORD *)(v11 + 776) = 0;
    v22 = v11 + 321;
    *(_BYTE *)(v11 + 321 + v19) = 2;
    *(_QWORD *)(v11 + 336 + 8 * v19) = 0;
    v23 = (v19 + 1);
    *(_BYTE *)(v22 + v23) = 2;
    *(_QWORD *)(v11 + 336 + 8 * v23) = 2;
    v24 = (v19 + 2);
    *(_BYTE *)(v22 + v24) = 1;
    *(_BYTE *)(v11 + 320) = v19 + 3;
    *(_QWORD *)(v11 + 336 + 8 * v24) = "vtordisp";
    return (char *)sub_22E3BB0B8((uint64_t)&v44);
  }
LABEL_70:
  if (*(_WORD *)(a4 + 16) != 22)
  {
    v12 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v12 + 312) = v6;
    *(_DWORD *)(v12 + 316) = 1999;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v12 + 320);
    v44 = v12 + 320;
    v45 = 0;
    v46 = v12;
    v47 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v14 = *(unsigned int *)(v12 + 776);
    if (!(_DWORD)v14)
      goto LABEL_55;
    v37 = *(_QWORD *)(v12 + 768);
    v38 = 56 * v14;
    do
    {
      if (*(char *)(v37 + v38 - 9) < 0)
        operator delete(*(void **)(v37 + v38 - 32));
      v38 -= 56;
    }
    while (v38);
    goto LABEL_54;
  }
  v36 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v12 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v12 + 316) = 2005;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v12 + 320);
    v44 = v12 + 320;
    v45 = 0;
    v46 = v12;
    v47 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v14 = *(unsigned int *)(v12 + 776);
    if (!(_DWORD)v14)
      goto LABEL_55;
    v39 = *(_QWORD *)(v12 + 768);
    v40 = 56 * v14;
    do
    {
      if (*(char *)(v39 + v40 - 9) < 0)
        operator delete(*(void **)(v39 + v40 - 32));
      v40 -= 56;
    }
    while (v40);
LABEL_54:
    LODWORD(v14) = *v13;
LABEL_55:
    *(_DWORD *)(v12 + 776) = 0;
    v13[v14 + 1] = 1;
    *(_BYTE *)(v12 + 320) = v14 + 1;
    *(_QWORD *)&v13[8 * v14 + 16] = "vtordisp";
    return (char *)sub_22E3BB0B8((uint64_t)&v44);
  }
  LODWORD(v46) = 425;
  v44 = __PAIR64__(v36, v6);
  v45 = v10 | (v9 << 16);
  return sub_22E80F2F4(a2, (unint64_t)&v44, 0);
}

uint64_t sub_22E86E270(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86E2B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86E300(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  size_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  _QWORD v24[2];
  int v25;
  void *__src;
  uint64_t v27;
  _QWORD v28[25];

  v28[24] = *MEMORY[0x24BDAC8D0];
  v24[0] = 0;
  v24[1] = 0;
  v25 = 1;
  v22 = 0;
  v23 = 426;
  v20 = *(_DWORD *)a4;
  v21 = v20;
  __src = v28;
  v27 = 0x800000000;
  while (*(_WORD *)(a4 + 16) != 2)
  {
    v6 = sub_22E4EF088((uint64_t)&__src, a4, 1);
    v7 = (char *)__src + 24 * v27;
    v8 = *(_OWORD *)v6;
    *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = v8;
    LODWORD(v27) = v27 + 1;
    v21 = *(_DWORD *)a4;
    sub_22F18FB4C(a2, (unsigned int *)a4);
  }
  v9 = sub_22E4EF088((uint64_t)&__src, (unint64_t)v24, 1);
  v10 = (char *)__src + 24 * v27;
  v11 = *(_OWORD *)v9;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  v12 = __CFADD__((_DWORD)v27, 1);
  v13 = (v27 + 1);
  LODWORD(v27) = v27 + 1;
  if (!v12)
  {
    v14 = 24 * v13;
    v15 = (char *)__src + 18;
    do
    {
      *v15 |= 0x800u;
      v15 += 12;
      v14 -= 24;
    }
    while (v14);
  }
  v16 = 24 * v13;
  v17 = (void *)operator new[]();
  bzero(v17, v16);
  if ((_DWORD)v27)
    memmove(v17, __src, 24 * v27);
  v18 = (_QWORD *)sub_22E3CD3D4(a2 + 128, 16, 3);
  v19 = v27;
  *v18 = v17;
  v18[1] = v19;
  v22 = v18;
  sub_22E80F2F4(a2, (unint64_t)&v20, 0);
  if (__src != v28)
    free(__src);
}

uint64_t sub_22E86E4F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86E534(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86E584(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86E5C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86E614(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  llvm *v12;
  _BOOL4 v13;
  int v14;
  _BOOL8 v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;

  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 21)
  {
    v6 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v6 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v6 + 316) = 1995;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v7 = (unsigned __int8 *)(v6 + 320);
    v30 = (unsigned __int8 *)(v6 + 320);
    v31 = 0;
    v32 = v6;
    v33 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v8 = *(unsigned int *)(v6 + 776);
    if (!(_DWORD)v8)
      goto LABEL_11;
    v9 = *(_QWORD *)(v6 + 768);
    v10 = 56 * v8;
    do
    {
      if (*(char *)(v9 + v10 - 9) < 0)
        operator delete(*(void **)(v9 + v10 - 32));
      v10 -= 56;
    }
    while (v10);
LABEL_10:
    LODWORD(v8) = *v7;
LABEL_11:
    *(_DWORD *)(v6 + 776) = 0;
    v7[v8 + 1] = 1;
    *(_BYTE *)(v6 + 320) = v8 + 1;
    *(_QWORD *)&v7[8 * v8 + 16] = "intrinsic";
    return sub_22E3BB0B8((uint64_t)&v30);
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v12 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(a2 + 544), "__INTRIN_H", 0xAuLL);
  v13 = sub_22F2EE534(a2, v12);
  v14 = *(unsigned __int16 *)(a4 + 16);
  if (v14 == 5)
  {
    v15 = !v13;
    do
    {
      v16 = *(_QWORD **)(a4 + 8);
      if (((*v16 >> 11) & 0x3FFFuLL) <= 6)
      {
        v17 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v17 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v17 + 316) = 2009;
        if (*(char *)(v17 + 311) < 0)
        {
          **(_BYTE **)(v17 + 288) = 0;
          *(_QWORD *)(v17 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v17 + 288) = 0;
          *(_BYTE *)(v17 + 311) = 0;
        }
        v18 = (unsigned __int8 *)(v17 + 320);
        v30 = (unsigned __int8 *)(v17 + 320);
        v31 = 0;
        v32 = v17;
        v33 = 1;
        *(_BYTE *)(v17 + 320) = 0;
        *(_DWORD *)(v17 + 664) = 0;
        v19 = *(unsigned int *)(v17 + 776);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)(v17 + 768);
          v21 = 56 * v19;
          do
          {
            if (*(char *)(v20 + v21 - 9) < 0)
              operator delete(*(void **)(v20 + v21 - 32));
            v21 -= 56;
          }
          while (v21);
          v18 = v30;
          *(_DWORD *)(v17 + 776) = 0;
          if (!v18)
          {
            v18 = (unsigned __int8 *)sub_22E3B8AAC(v31);
            v30 = v18;
          }
        }
        else
        {
          *(_DWORD *)(v17 + 776) = 0;
        }
        v18[*v18 + 1] = 5;
        v22 = v30;
        v23 = *v30;
        *v30 = v23 + 1;
        *(_QWORD *)&v22[8 * v23 + 16] = v16;
        v22[(v23 + 1) + 1] = 2;
        v24 = v30;
        v25 = *v30;
        *v30 = v25 + 1;
        *(_QWORD *)&v24[8 * v25 + 16] = v15;
        sub_22E3BB0B8((uint64_t)&v30);
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v14 = *(unsigned __int16 *)(a4 + 16);
      if (v14 != 65)
        break;
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v14 = *(unsigned __int16 *)(a4 + 16);
    }
    while (v14 == 5);
  }
  if (v14 != 22)
  {
    v6 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v6 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v6 + 316) = 1999;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v7 = (unsigned __int8 *)(v6 + 320);
    v30 = (unsigned __int8 *)(v6 + 320);
    v31 = 0;
    v32 = v6;
    v33 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v8 = *(unsigned int *)(v6 + 776);
    if (!(_DWORD)v8)
      goto LABEL_11;
    v26 = *(_QWORD *)(v6 + 768);
    v27 = 56 * v8;
    do
    {
      if (*(char *)(v26 + v27 - 9) < 0)
        operator delete(*(void **)(v26 + v27 - 32));
      v27 -= 56;
    }
    while (v27);
    goto LABEL_10;
  }
  result = sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v6 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v6 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v6 + 316) = 2005;
    if (*(char *)(v6 + 311) < 0)
    {
      **(_BYTE **)(v6 + 288) = 0;
      *(_QWORD *)(v6 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 288) = 0;
      *(_BYTE *)(v6 + 311) = 0;
    }
    v7 = (unsigned __int8 *)(v6 + 320);
    v30 = (unsigned __int8 *)(v6 + 320);
    v31 = 0;
    v32 = v6;
    v33 = 1;
    *(_BYTE *)(v6 + 320) = 0;
    *(_DWORD *)(v6 + 664) = 0;
    v8 = *(unsigned int *)(v6 + 776);
    if (!(_DWORD)v8)
      goto LABEL_11;
    v28 = *(_QWORD *)(v6 + 768);
    v29 = 56 * v8;
    do
    {
      if (*(char *)(v28 + v29 - 9) < 0)
        operator delete(*(void **)(v28 + v29 - 32));
      v29 -= 56;
    }
    while (v29);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_22E86E9C0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86EA00(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86EA50(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  size_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  __int16 v53;
  void *__p[2];
  char v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;

  v6 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 21)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 1995;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v56 = (unsigned __int8 *)(v9 + 320);
    v57 = 0;
    v58 = v9;
    v59 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_35;
    v12 = *(_QWORD *)(v9 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
    goto LABEL_34;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 13)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 2003;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v56 = (unsigned __int8 *)(v9 + 320);
    v57 = 0;
    v58 = v9;
    v59 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_35;
    v14 = *(_QWORD *)(v9 + 768);
    v15 = 56 * v11;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
    goto LABEL_34;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 65)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 1991;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v56 = (unsigned __int8 *)(v9 + 320);
    v57 = 0;
    v58 = v9;
    v59 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_35;
    v16 = *(_QWORD *)(v9 + 768);
    v17 = 56 * v11;
    do
    {
      if (*(char *)(v16 + v17 - 9) < 0)
        operator delete(*(void **)(v16 + v17 - 32));
      v17 -= 56;
    }
    while (v17);
    goto LABEL_34;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v7 = *(unsigned __int16 *)(a4 + 16);
  if (v7 == 22 || v7 == 2)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v8 + 316) = 2013;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v56 = (unsigned __int8 *)(v8 + 320);
    v57 = 0;
    v58 = v8;
    v59 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v21 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v8 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
      LODWORD(v21) = *(unsigned __int8 *)(v8 + 320);
    }
    v24 = v8 + 321;
    *(_BYTE *)(v8 + 321 + v21) = 1;
    *(_DWORD *)(v8 + 776) = 0;
    *(_QWORD *)(v8 + 336 + 8 * v21) = "optimize";
    v25 = (v21 + 1);
    *(_BYTE *)(v24 + v25) = 2;
    *(_QWORD *)(v8 + 336 + 8 * v25) = 1;
    v26 = (v21 + 2);
    *(_BYTE *)(v24 + v26) = 1;
    *(_BYTE *)(v8 + 320) = v21 + 3;
    *(_QWORD *)(v8 + 336 + 8 * v26) = "'on' or 'off'";
    goto LABEL_36;
  }
  if ((v7 - 7) < 6)
    goto LABEL_40;
  if ((v7 - 13) < 6)
    goto LABEL_40;
  if (v7 == 1)
    goto LABEL_40;
  v39 = *(_QWORD *)(a4 + 8);
  if (!v39)
    goto LABEL_40;
  v40 = *(_QWORD *)(v39 + 16);
  if (*(_DWORD *)v40 != 3)
  {
    if (*(_DWORD *)v40 == 2 && *(_WORD *)(v40 + 16) == 28271)
      goto LABEL_77;
LABEL_40:
    v20 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v20 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v20 + 316) = 2011;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v56 = (unsigned __int8 *)(v20 + 320);
    v57 = 0;
    v58 = v20;
    v59 = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v27 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v20 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
    *(_DWORD *)(v20 + 776) = 0;
    sub_22F1413E0(a4, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)__p);
    if (v55 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    if (v55 >= 0)
      v31 = v55 & 0x7F;
    else
      v31 = (size_t)__p[1];
    sub_22E3B89A8(&v56, v30, v31);
    v32 = v56;
    if (!v56)
    {
      v32 = (unsigned __int8 *)sub_22E3B8AAC(v57);
      v56 = v32;
    }
    v32[*v32 + 1] = 1;
    v33 = v56;
    v34 = *v56;
    *v56 = v34 + 1;
    *(_QWORD *)&v33[8 * v34 + 16] = "optimize";
    v33[(v34 + 1) + 1] = 2;
    v35 = v56;
    v36 = *v56;
    *v56 = v36 + 1;
    *(_QWORD *)&v35[8 * v36 + 16] = 1;
    v35[(v36 + 1) + 1] = 1;
    v37 = v56;
    v38 = *v56;
    *v56 = v38 + 1;
    *(_QWORD *)&v37[8 * v38 + 16] = "'on' or 'off'";
    if (v55 < 0)
      operator delete(__p[0]);
    goto LABEL_36;
  }
  v41 = *(unsigned __int16 *)(v40 + 16);
  v42 = *(unsigned __int8 *)(v40 + 18);
  if (v41 != 26223 || v42 != 102)
    goto LABEL_40;
LABEL_77:
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 22)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 1999;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v56 = (unsigned __int8 *)(v9 + 320);
    v57 = 0;
    v58 = v9;
    v59 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_35;
    v45 = *(_QWORD *)(v9 + 768);
    v46 = 56 * v11;
    do
    {
      if (*(char *)(v45 + v46 - 9) < 0)
        operator delete(*(void **)(v45 + v46 - 32));
      v46 -= 56;
    }
    while (v46);
    goto LABEL_34;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v9 + 316) = 2005;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v10 = (unsigned __int8 *)(v9 + 320);
    v56 = (unsigned __int8 *)(v9 + 320);
    v57 = 0;
    v58 = v9;
    v59 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if (!(_DWORD)v11)
      goto LABEL_35;
    v50 = *(_QWORD *)(v9 + 768);
    v51 = 56 * v11;
    do
    {
      if (*(char *)(v50 + v51 - 9) < 0)
        operator delete(*(void **)(v50 + v51 - 32));
      v51 -= 56;
    }
    while (v51);
LABEL_34:
    LODWORD(v11) = *v10;
LABEL_35:
    *(_DWORD *)(v9 + 776) = 0;
    v10[v11 + 1] = 1;
    *(_BYTE *)(v9 + 320) = v11 + 1;
    *(_QWORD *)&v10[8 * v11 + 16] = "optimize";
LABEL_36:
    v18 = &v56;
    return sub_22E3BB0B8((uint64_t)v18);
  }
  v44 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v44 + 312) = v6;
  *(_DWORD *)(v44 + 316) = 2017;
  if (*(char *)(v44 + 311) < 0)
  {
    **(_BYTE **)(v44 + 288) = 0;
    *(_QWORD *)(v44 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v44 + 288) = 0;
    *(_BYTE *)(v44 + 311) = 0;
  }
  v52[0] = v44 + 320;
  v52[1] = 0;
  v52[2] = v44;
  v53 = 1;
  *(_BYTE *)(v44 + 320) = 0;
  *(_DWORD *)(v44 + 664) = 0;
  v47 = *(unsigned int *)(v44 + 776);
  if ((_DWORD)v47)
  {
    v48 = *(_QWORD *)(v44 + 768);
    v49 = 56 * v47;
    do
    {
      if (*(char *)(v48 + v49 - 9) < 0)
        operator delete(*(void **)(v48 + v49 - 32));
      v49 -= 56;
    }
    while (v49);
  }
  *(_DWORD *)(v44 + 776) = 0;
  v18 = (unsigned __int8 **)v52;
  return sub_22E3BB0B8((uint64_t)v18);
}

uint64_t sub_22E86F11C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86F15C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E86F1AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v6;
  size_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  __int16 v40;
  _QWORD v41[3];
  __int16 v42;
  unsigned int v43;
  uint64_t v44;
  __int16 v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;

  v6 = *(unsigned int **)(*(_QWORD *)(a4 + 8) + 16);
  v9 = *v6;
  v8 = v6 + 4;
  v7 = v9;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 144))(*(_QWORD *)(a2 + 64)) & 1) == 0
    && (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 140) & 0x4000000000000000) == 0)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v10 + 316) = 2007;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v10 + 320);
    v47 = 0;
    v48 = v10;
    v49 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v17 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v10 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
    }
LABEL_28:
    *(_DWORD *)(v10 + 776) = 0;
    sub_22E3B89A8(&v46, v8, v7);
    v20 = &v46;
    return (char *)sub_22E3BB0B8((uint64_t)v20);
  }
  sub_22F18FB4C(a2, &v43);
  if (v45 != 21)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v43;
    *(_DWORD *)(v10 + 316) = 1995;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v10 + 320);
    v47 = 0;
    v48 = v10;
    v49 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v14 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v10 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
    }
    goto LABEL_28;
  }
  sub_22F18FB4C(a2, &v43);
  if (v45 != 5)
  {
    v13 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v13 + 312) = v43;
    *(_DWORD *)(v13 + 316) = 2014;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v41[0] = v13 + 320;
    v41[1] = 0;
    v41[2] = v13;
    v42 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v21 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v13 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v13 + 776) = 0;
    v20 = (unsigned __int8 **)v41;
    return (char *)sub_22E3BB0B8((uint64_t)v20);
  }
  v11 = *(_QWORD *)(v44 + 16);
  if (*(_DWORD *)v11 != 3)
  {
    if (*(_DWORD *)v11 == 2 && *(_WORD *)(v11 + 16) == 28271)
    {
      v12 = 0;
      goto LABEL_51;
    }
LABEL_40:
    v27 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v27 + 312) = v43;
    *(_DWORD *)(v27 + 316) = 2014;
    if (*(char *)(v27 + 311) < 0)
    {
      **(_BYTE **)(v27 + 288) = 0;
      *(_QWORD *)(v27 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v27 + 288) = 0;
      *(_BYTE *)(v27 + 311) = 0;
    }
    v39[0] = v27 + 320;
    v39[1] = 0;
    v39[2] = v27;
    v40 = 1;
    *(_BYTE *)(v27 + 320) = 0;
    *(_DWORD *)(v27 + 664) = 0;
    v28 = *(unsigned int *)(v27 + 776);
    if ((_DWORD)v28)
    {
      v29 = *(_QWORD *)(v27 + 768);
      v30 = 56 * v28;
      do
      {
        if (*(char *)(v29 + v30 - 9) < 0)
          operator delete(*(void **)(v29 + v30 - 32));
        v30 -= 56;
      }
      while (v30);
    }
    *(_DWORD *)(v27 + 776) = 0;
    v20 = (unsigned __int8 **)v39;
    return (char *)sub_22E3BB0B8((uint64_t)v20);
  }
  v24 = *(unsigned __int16 *)(v11 + 16);
  v25 = *(unsigned __int8 *)(v11 + 18);
  if (v24 != 26223 || v25 != 102)
    goto LABEL_40;
  v12 = 1;
LABEL_51:
  sub_22F18FB4C(a2, &v43);
  if (v45 != 22)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v43;
    *(_DWORD *)(v10 + 316) = 1999;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v10 + 320);
    v47 = 0;
    v48 = v10;
    v49 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v33 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v33)
    {
      v34 = *(_QWORD *)(v10 + 768);
      v35 = 56 * v33;
      do
      {
        if (*(char *)(v34 + v35 - 9) < 0)
          operator delete(*(void **)(v34 + v35 - 32));
        v35 -= 56;
      }
      while (v35);
    }
    goto LABEL_28;
  }
  sub_22F18FB4C(a2, &v43);
  if (v45 != 2)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v43;
    *(_DWORD *)(v10 + 316) = 2005;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v46 = (unsigned __int8 *)(v10 + 320);
    v47 = 0;
    v48 = v10;
    v49 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v36 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD *)(v10 + 768);
      v38 = 56 * v36;
      do
      {
        if (*(char *)(v37 + v38 - 9) < 0)
          operator delete(*(void **)(v37 + v38 - 32));
        v38 -= 56;
      }
      while (v38);
    }
    goto LABEL_28;
  }
  v32 = sub_22E3CD3D4(a2 + 128, 24, 3);
  *(_DWORD *)(v32 + 16) = 0;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_WORD *)(v32 + 16) = 421;
  *(_DWORD *)v32 = *(_DWORD *)a4;
  *(_DWORD *)(v32 + 4) = v43;
  *(_QWORD *)(v32 + 8) = v12;
  return sub_22F1735E4(a2, (_BYTE *)v32, 1, 1, 0, 0);
}

uint64_t sub_22E86F658(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86F698(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86F6E8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  int v8;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  __int16 v37;
  _QWORD v38[3];
  __int16 v39;
  _QWORD v40[3];
  __int16 v41;

  v7 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v8 = *(unsigned __int16 *)(a4 + 16);
  if ((v8 - 7) < 6)
    goto LABEL_7;
  if ((v8 - 13) < 6 || v8 == 1)
    goto LABEL_7;
  v17 = *(_QWORD *)(a4 + 8);
  if (!v17)
    goto LABEL_7;
  v18 = *(_QWORD *)(v17 + 16);
  if (*(_DWORD *)v18 != 3)
  {
    if (*(_DWORD *)v18 != 5
      || ((v19 = *(_DWORD *)(v18 + 16), v20 = *(unsigned __int8 *)(v18 + 20), v19 == 1768383842)
        ? (v21 = v20 == 110)
        : (v21 = 0),
          !v21))
    {
LABEL_7:
      v10 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v10 + 312) = v7;
      *(_DWORD *)(v10 + 316) = 2006;
      if (*(char *)(v10 + 311) < 0)
      {
        **(_BYTE **)(v10 + 288) = 0;
        *(_QWORD *)(v10 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v10 + 288) = 0;
        *(_BYTE *)(v10 + 311) = 0;
      }
      v40[0] = v10 + 320;
      v40[1] = 0;
      v40[2] = v10;
      v41 = 1;
      *(_BYTE *)(v10 + 320) = 0;
      *(_DWORD *)(v10 + 664) = 0;
      v11 = (_DWORD *)(v10 + 776);
      v12 = *(unsigned int *)(v10 + 776);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v10 + 768);
        v14 = 56 * v12;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
      }
      v15 = v40;
LABEL_16:
      *v11 = 0;
      return sub_22E3BB0B8((uint64_t)v15);
    }
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(v22 + 12776) + 1;
    goto LABEL_34;
  }
  v24 = *(unsigned __int16 *)(v18 + 16);
  v25 = *(unsigned __int8 *)(v18 + 18);
  if (v24 != 28261 || v25 != 100)
    goto LABEL_7;
  v22 = *(_QWORD *)(a1 + 32);
  v27 = *(_DWORD *)(v22 + 12776);
  if (v27)
  {
    v23 = v27 - 1;
LABEL_34:
    *(_DWORD *)(v22 + 12776) = v23;
    goto LABEL_35;
  }
  v29 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v29 + 312) = v7;
  *(_DWORD *)(v29 + 316) = 1707;
  if (*(char *)(v29 + 311) < 0)
  {
    **(_BYTE **)(v29 + 288) = 0;
    *(_QWORD *)(v29 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v29 + 288) = 0;
    *(_BYTE *)(v29 + 311) = 0;
  }
  v38[0] = v29 + 320;
  v38[1] = 0;
  v38[2] = v29;
  v39 = 1;
  *(_BYTE *)(v29 + 320) = 0;
  *(_DWORD *)(v29 + 664) = 0;
  v33 = *(unsigned int *)(v29 + 776);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD *)(v29 + 768);
    v35 = 56 * v33;
    do
    {
      if (*(char *)(v34 + v35 - 9) < 0)
        operator delete(*(void **)(v34 + v35 - 32));
      v35 -= 56;
    }
    while (v35);
  }
  *(_DWORD *)(v29 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v38);
LABEL_35:
  result = sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v28 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v28 + 312) = v7;
    *(_DWORD *)(v28 + 316) = 2006;
    if (*(char *)(v28 + 311) < 0)
    {
      **(_BYTE **)(v28 + 288) = 0;
      *(_QWORD *)(v28 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v28 + 288) = 0;
      *(_BYTE *)(v28 + 311) = 0;
    }
    v36[0] = v28 + 320;
    v36[1] = 0;
    v36[2] = v28;
    v37 = 1;
    *(_BYTE *)(v28 + 320) = 0;
    *(_DWORD *)(v28 + 664) = 0;
    v11 = (_DWORD *)(v28 + 776);
    v30 = *(unsigned int *)(v28 + 776);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD *)(v28 + 768);
      v32 = 56 * v30;
      do
      {
        if (*(char *)(v31 + v32 - 9) < 0)
          operator delete(*(void **)(v31 + v32 - 32));
        v15 = v36;
        v32 -= 56;
      }
      while (v32);
    }
    else
    {
      v15 = v36;
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_22E86F994(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86F9D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E86FA24(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  size_t v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  unsigned int v39;
  uint64_t v40;
  __int16 v41;

  sub_22F18FB4C(a2, &v39);
  if (v41 != 5)
  {
    if (v41 == 2)
    {
      v7 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v7 + 312) = v39;
      *(_DWORD *)(v7 + 316) = 1723;
      if (*(char *)(v7 + 311) < 0)
      {
        **(_BYTE **)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v7 + 288) = 0;
        *(_BYTE *)(v7 + 311) = 0;
      }
      v35 = (unsigned __int8 *)(v7 + 320);
      v36 = 0;
      v37 = v7;
      v38 = 1;
      *(_BYTE *)(v7 + 320) = 0;
      *(_DWORD *)(v7 + 664) = 0;
      v11 = *(unsigned int *)(v7 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v7 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
        LODWORD(v11) = *(unsigned __int8 *)(v7 + 320);
      }
      v14 = v7 + 321;
      *(_BYTE *)(v7 + 321 + v11) = 1;
      *(_DWORD *)(v7 + 776) = 0;
      *(_QWORD *)(v7 + 336 + 8 * v11) = "clang optimize";
      v15 = (v11 + 1);
      *(_BYTE *)(v14 + v15) = 2;
      *(_QWORD *)(v7 + 336 + 8 * v15) = 1;
      v16 = (v11 + 2);
      *(_BYTE *)(v14 + v16) = 1;
      *(_BYTE *)(v7 + 320) = v11 + 3;
      *(_QWORD *)(v7 + 336 + 8 * v16) = "'on' or 'off'";
      return sub_22E3BB0B8((uint64_t)&v35);
    }
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v39;
    *(_DWORD *)(v10 + 316) = 1725;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v10 + 320);
    v36 = 0;
    v37 = v10;
    v38 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v17 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v10 + 768);
      v19 = 56 * v17;
      do
      {
        if (*(char *)(v18 + v19 - 9) < 0)
          operator delete(*(void **)(v18 + v19 - 32));
        v19 -= 56;
      }
      while (v19);
    }
LABEL_38:
    *(_DWORD *)(v10 + 776) = 0;
    sub_22F1413E0((uint64_t)&v39, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)__p);
    if (v34 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    if (v34 >= 0)
      v27 = v34 & 0x7F;
    else
      v27 = (size_t)__p[1];
    sub_22E3B89A8(&v35, v26, v27);
    if (v34 < 0)
      operator delete(__p[0]);
    return sub_22E3BB0B8((uint64_t)&v35);
  }
  v8 = *(_QWORD *)(v40 + 16);
  if (*(_DWORD *)v8 != 3)
  {
    if (*(_DWORD *)v8 == 2 && *(_WORD *)(v8 + 16) == 28271)
    {
      v9 = 1;
      goto LABEL_48;
    }
LABEL_30:
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v39;
    *(_DWORD *)(v10 + 316) = 1725;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v10 + 320);
    v36 = 0;
    v37 = v10;
    v38 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v23 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(v10 + 768);
      v25 = 56 * v23;
      do
      {
        if (*(char *)(v24 + v25 - 9) < 0)
          operator delete(*(void **)(v24 + v25 - 32));
        v25 -= 56;
      }
      while (v25);
    }
    goto LABEL_38;
  }
  v20 = *(unsigned __int16 *)(v8 + 16);
  v21 = *(unsigned __int8 *)(v8 + 18);
  if (v20 != 26223 || v21 != 102)
    goto LABEL_30;
  v9 = 0;
LABEL_48:
  result = sub_22F18FB4C(a2, &v39);
  if (v41 != 2)
  {
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v10 + 312) = v39;
    *(_DWORD *)(v10 + 316) = 1724;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v35 = (unsigned __int8 *)(v10 + 320);
    v36 = 0;
    v37 = v10;
    v38 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v30 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD *)(v10 + 768);
      v32 = 56 * v30;
      do
      {
        if (*(char *)(v31 + v32 - 9) < 0)
          operator delete(*(void **)(v31 + v32 - 32));
        v32 -= 56;
      }
      while (v32);
    }
    goto LABEL_38;
  }
  v29 = *a4;
  if (v9)
    v29 = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1688) = v29;
  return result;
}

uint64_t sub_22E86FDC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E86FE00(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E86FE50(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v5;
  unsigned int v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unsigned int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  void *__src;
  uint64_t v75;
  _BYTE v76[24];
  __int128 v77;
  int v78;
  uint64_t v79;

  v5 = HIDWORD(a3);
  v79 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)a4;
  v77 = *(_OWORD *)(a4 + 4);
  v78 = *(_DWORD *)(a4 + 20);
  __src = v76;
  v75 = 0x100000000;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 5)
  {
    v40 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v40 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v40 + 316) = 1719;
    if (*(char *)(v40 + 311) < 0)
    {
      **(_BYTE **)(v40 + 288) = 0;
      *(_QWORD *)(v40 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v40 + 288) = 0;
      *(_BYTE *)(v40 + 311) = 0;
    }
    v70 = v40 + 320;
    v71 = 0;
    v72 = v40;
    v73 = 1;
    *(_BYTE *)(v40 + 320) = 0;
    *(_DWORD *)(v40 + 664) = 0;
    v44 = *(unsigned int *)(v40 + 776);
    if ((_DWORD)v44)
    {
      v45 = *(_QWORD *)(v40 + 768);
      v46 = 56 * v44;
      do
      {
        if (*(char *)(v45 + v46 - 9) < 0)
          operator delete(*(void **)(v45 + v46 - 32));
        v46 -= 56;
      }
      while (v46);
      LODWORD(v44) = *(unsigned __int8 *)(v40 + 320);
    }
    *(_DWORD *)(v40 + 776) = 0;
    *(_BYTE *)(v40 + 321 + v44) = 2;
    *(_QWORD *)(v40 + 336 + 8 * v44) = 1;
    v47 = (v44 + 1);
    *(_BYTE *)(v40 + 321 + v47) = 1;
    *(_BYTE *)(v40 + 320) = v44 + 2;
    *(_QWORD *)(v40 + 336 + 8 * v47) = "";
    goto LABEL_99;
  }
  v8 = 5;
  while (v8 == 5)
  {
    v9 = 0;
    v68 = *(_OWORD *)a4;
    v10 = *(_QWORD *)(a4 + 8);
    v69 = *(_QWORD *)(a4 + 16);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = 1;
    switch(*(_QWORD *)v11)
    {
      case 6u:
        v13 = 1970172527;
        v14 = bswap32(*(_DWORD *)(v11 + 16));
        if (v14 == 1970172527)
        {
          v14 = bswap32(*(unsigned __int16 *)(v11 + 20)) >> 16;
          v13 = 27756;
          if (v14 == 27756)
          {
            v15 = 0;
            goto LABEL_22;
          }
        }
        v17 = v14 >= v13;
        goto LABEL_19;
      case 9u:
        v16 = bswap64(*(_QWORD *)(v11 + 16));
        v17 = v16 >= 0x766563746F72697ALL;
        if (v16 == 0x766563746F72697ALL)
        {
          v15 = *(unsigned __int8 *)(v11 + 24) - 101;
        }
        else
        {
LABEL_19:
          if (v17)
            v15 = 1;
          else
            v15 = -1;
        }
LABEL_22:
        v12 = v15 != 0;
        if (v15)
          v9 = 0;
        else
          v9 = 257;
        goto LABEL_25;
      case 0xAu:
        v18 = *(_QWORD *)(v11 + 16) ^ 0x61656C7265746E69 | *(unsigned __int16 *)(v11 + 24) ^ 0x6576;
        v19 = v18 == 0;
        if (v18)
        {
          v20 = *(_QWORD *)(v11 + 16) ^ 0x7562697274736964;
          v21 = *(unsigned __int16 *)(v11 + 24);
          v22 = 25972;
LABEL_15:
          v24 = v21 ^ v22;
LABEL_17:
          v19 = (v20 | v24) == 0;
          v27 = v19;
        }
        else
        {
          v27 = 1;
        }
        goto LABEL_48;
      case 0xCu:
        v20 = *(_QWORD *)(v11 + 16) ^ 0x635F6C6C6F726E75;
        v21 = *(unsigned int *)(v11 + 24);
        v22 = 1953396079;
        goto LABEL_15;
      case 0xFu:
        v20 = *(_QWORD *)(v11 + 16) ^ 0x7A69726F74636576;
        v21 = *(_QWORD *)(v11 + 23);
        v22 = 0x68746469775F657ALL;
        goto LABEL_15;
      case 0x10u:
        v23 = *(_QWORD *)(v11 + 16);
        v21 = *(_QWORD *)(v11 + 24);
        v20 = v23 ^ 0x61656C7265746E69;
        v22 = 0x746E756F635F6576;
        goto LABEL_15;
      case 0x13u:
        v25 = *(_QWORD *)(v11 + 16) ^ 0x7A69726F74636576;
        v26 = *(_QWORD *)(v11 + 24) ^ 0x6369646572705F65;
        v24 = *(_QWORD *)(v11 + 27) ^ 0x6574616369646572;
        v20 = v25 | v26;
        goto LABEL_17;
      default:
LABEL_25:
        v28 = *(_QWORD *)v11;
        v29 = v28 != 8 || !v12;
        if (v29)
        {
          v29 = v28 == 28;
          v30 = !v12;
          if (!v29)
            v30 = 1;
          if ((v30 & 1) != 0)
          {
            v27 = v9;
            v19 = v9 >> 8;
            goto LABEL_48;
          }
          v33 = *(_DWORD *)(v11 + 40) == 1818326642
             && *(_QWORD *)(v11 + 32) == 0x65746E695F6E6F69
             && *(_QWORD *)(v11 + 24) == 0x74616974696E695FLL
             && *(_QWORD *)(v11 + 16) == 0x656E696C65706970;
        }
        else
        {
          v33 = *(_QWORD *)(v11 + 16) == 0x656E696C65706970;
        }
        if (v33)
          v34 = 257;
        else
          v34 = v9;
        v27 = v34;
        v19 = v34 >> 8;
LABEL_48:
        if (v19)
          v35 = v27 == 0;
        else
          v35 = 1;
        if (v35)
        {
          v49 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v49 + 312) = *(_DWORD *)a4;
          *(_DWORD *)(v49 + 316) = 1719;
          if (*(char *)(v49 + 311) < 0)
          {
            **(_BYTE **)(v49 + 288) = 0;
            *(_QWORD *)(v49 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v49 + 288) = 0;
            *(_BYTE *)(v49 + 311) = 0;
          }
          v70 = v49 + 320;
          v71 = 0;
          v72 = v49;
          v73 = 1;
          *(_BYTE *)(v49 + 320) = 0;
          *(_DWORD *)(v49 + 664) = 0;
          v55 = *(unsigned int *)(v49 + 776);
          if ((_DWORD)v55)
          {
            v56 = *(_QWORD *)(v49 + 768);
            v57 = 56 * v55;
            do
            {
              if (*(char *)(v56 + v57 - 9) < 0)
                operator delete(*(void **)(v56 + v57 - 32));
              v57 -= 56;
            }
            while (v57);
            LODWORD(v55) = *(unsigned __int8 *)(v49 + 320);
          }
          *(_DWORD *)(v49 + 776) = 0;
          *(_BYTE *)(v49 + 321 + v55) = 2;
          *(_QWORD *)(v49 + 336 + 8 * v55) = 0;
          v58 = (v55 + 1);
          *(_BYTE *)(v49 + 321 + v58) = 5;
          *(_BYTE *)(v49 + 320) = v55 + 2;
          *(_QWORD *)(v49 + 336 + 8 * v58) = v10;
          goto LABEL_99;
        }
        sub_22F18FB4C(a2, (unsigned int *)a4);
        if (*(_WORD *)(a4 + 16) != 21)
        {
          v50 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v50 + 312) = *(_DWORD *)a4;
          *(_DWORD *)(v50 + 316) = 15;
          if (*(char *)(v50 + 311) < 0)
          {
            **(_BYTE **)(v50 + 288) = 0;
            *(_QWORD *)(v50 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v50 + 288) = 0;
            *(_BYTE *)(v50 + 311) = 0;
          }
          v59 = (unsigned __int8 *)(v50 + 320);
          v70 = v50 + 320;
          v71 = 0;
          v72 = v50;
          v73 = 1;
          *(_BYTE *)(v50 + 320) = 0;
          *(_DWORD *)(v50 + 664) = 0;
          v60 = *(unsigned int *)(v50 + 776);
          if ((_DWORD)v60)
          {
            v61 = *(_QWORD *)(v50 + 768);
            v62 = 56 * v60;
            do
            {
              if (*(char *)(v61 + v62 - 9) < 0)
                operator delete(*(void **)(v61 + v62 - 32));
              v62 -= 56;
            }
            while (v62);
            LODWORD(v60) = *v59;
          }
          *(_DWORD *)(v50 + 776) = 0;
          v59[v60 + 1] = 4;
          *(_BYTE *)(v50 + 320) = v60 + 1;
          *(_QWORD *)&v59[8 * v60 + 16] = 21;
          goto LABEL_99;
        }
        sub_22F18FB4C(a2, (unsigned int *)a4);
        v36 = sub_22E3CD3D4(a2 + 128, 64, 3);
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = 0;
        v65 = v7;
        v66 = v77;
        v67 = v78;
        v63 = v68;
        v64 = v69;
        if (sub_22E870638(a2, a4, (__int128 *)&v65, &v63, 1, v36))
          goto LABEL_100;
        LODWORD(v72) = 431;
        v70 = __PAIR64__(v7, v5);
        v71 = v36;
        v37 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v70, 1);
        v38 = (char *)__src + 24 * v75;
        v39 = *(_OWORD *)v37;
        *((_QWORD *)v38 + 2) = *(_QWORD *)(v37 + 16);
        *(_OWORD *)v38 = v39;
        LODWORD(v75) = v75 + 1;
        v8 = *(_WORD *)(a4 + 16);
        break;
    }
  }
  if (v8 != 2)
  {
    v48 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v48 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v48 + 316) = 2005;
    if (*(char *)(v48 + 311) < 0)
    {
      **(_BYTE **)(v48 + 288) = 0;
      *(_QWORD *)(v48 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v48 + 288) = 0;
      *(_BYTE *)(v48 + 311) = 0;
    }
    v51 = (unsigned __int8 *)(v48 + 320);
    v70 = v48 + 320;
    v71 = 0;
    v72 = v48;
    v73 = 1;
    *(_BYTE *)(v48 + 320) = 0;
    *(_DWORD *)(v48 + 664) = 0;
    v52 = *(unsigned int *)(v48 + 776);
    if ((_DWORD)v52)
    {
      v53 = *(_QWORD *)(v48 + 768);
      v54 = 56 * v52;
      do
      {
        if (*(char *)(v53 + v54 - 9) < 0)
          operator delete(*(void **)(v53 + v54 - 32));
        v54 -= 56;
      }
      while (v54);
      LODWORD(v52) = *v51;
    }
    *(_DWORD *)(v48 + 776) = 0;
    v51[v52 + 1] = 1;
    *(_BYTE *)(v48 + 320) = v52 + 1;
    *(_QWORD *)&v51[8 * v52 + 16] = "clang loop";
LABEL_99:
    sub_22E3BB0B8((uint64_t)&v70);
    goto LABEL_100;
  }
  v41 = 24 * v75;
  v42 = (_BYTE *)operator new[]();
  bzero(v42, v41);
  v43 = v75;
  if ((_DWORD)v75)
    memmove(v42, __src, 24 * v75);
  sub_22F1735E4(a2, v42, v43, 0, 1, 0);
LABEL_100:
  if (__src != v76)
    free(__src);
}

uint64_t sub_22E870638(unint64_t a1, unint64_t a2, __int128 *a3, __int128 *a4, int a5, uint64_t a6)
{
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[4];

  v45[3] = *MEMORY[0x24BDAC8D0];
  v43 = v45;
  v44 = 0x100000000;
  v12 = a5;
  while (1)
  {
    v13 = *(unsigned __int16 *)(a2 + 16);
    if (v13 == 21)
    {
      ++v12;
      goto LABEL_9;
    }
    if (v13 != 22)
      break;
    if (!--v12 && (a5 & 1) != 0)
    {
      sub_22F18FB4C(a1, (unsigned int *)a2);
      goto LABEL_14;
    }
LABEL_9:
    v14 = sub_22E4EF088((uint64_t)&v43, a2, 1);
    v15 = (char *)v43 + 24 * v44;
    v16 = *(_OWORD *)v14;
    *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
    *(_OWORD *)v15 = v16;
    LODWORD(v44) = v44 + 1;
    sub_22F18FB4C(a1, (unsigned int *)a2);
  }
  if (v13 != 2)
    goto LABEL_9;
  if (!a5)
  {
LABEL_14:
    v39 = 0;
    v40 = 0;
    v18 = *(_DWORD *)a2;
    LODWORD(v41) = 1;
    LODWORD(v39) = v18;
    v19 = sub_22E4EF088((uint64_t)&v43, (unint64_t)&v39, 1);
    v20 = (char *)v43 + 24 * v44;
    v21 = *(_OWORD *)v19;
    *((_QWORD *)v20 + 2) = *(_QWORD *)(v19 + 16);
    *(_OWORD *)v20 = v21;
    v22 = __CFADD__((_DWORD)v44, 1);
    v23 = (v44 + 1);
    LODWORD(v44) = v44 + 1;
    if (v22)
    {
      v24 = sub_22E3CD3D4(a1 + 128, 24 * v23, 3);
    }
    else
    {
      v25 = (char *)v43;
      v26 = 24 * v23;
      v27 = (char *)v43 + 18;
      do
      {
        *v27 |= 0x800u;
        v27 += 12;
        v26 -= 24;
      }
      while (v26);
      v24 = sub_22E3CD3D4(a1 + 128, 24 * v23, 3);
      v28 = 0;
      do
      {
        v29 = v24 + v28;
        v30 = *(_OWORD *)&v25[v28];
        *(_QWORD *)(v29 + 16) = *(_QWORD *)&v25[v28 + 16];
        *(_OWORD *)v29 = v30;
        v28 += 24;
      }
      while (24 * v23 != v28);
    }
    v31 = 0;
    *(_QWORD *)(a6 + 48) = v24;
    *(_QWORD *)(a6 + 56) = v23;
    v32 = *a3;
    *(_QWORD *)(a6 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)a6 = v32;
    v33 = *a4;
    *(_QWORD *)(a6 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a6 + 24) = v33;
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v17 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v17 + 316) = 15;
  if (*(char *)(v17 + 311) < 0)
  {
    **(_BYTE **)(v17 + 288) = 0;
    *(_QWORD *)(v17 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v17 + 288) = 0;
    *(_BYTE *)(v17 + 311) = 0;
  }
  v34 = (unsigned __int8 *)(v17 + 320);
  v39 = v17 + 320;
  v40 = 0;
  v41 = v17;
  v42 = 1;
  *(_BYTE *)(v17 + 320) = 0;
  *(_DWORD *)(v17 + 664) = 0;
  v35 = *(unsigned int *)(v17 + 776);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(v17 + 768);
    v37 = 56 * v35;
    do
    {
      if (*(char *)(v36 + v37 - 9) < 0)
        operator delete(*(void **)(v36 + v37 - 32));
      v37 -= 56;
    }
    while (v37);
    LODWORD(v35) = *v34;
  }
  *(_DWORD *)(v17 + 776) = 0;
  v34[v35 + 1] = 4;
  *(_BYTE *)(v17 + 320) = v35 + 1;
  *(_QWORD *)&v34[8 * v35 + 16] = 22;
  sub_22E3BB0B8((uint64_t)&v39);
  v31 = 1;
LABEL_29:
  if (v43 != v45)
    free(v43);
  return v31;
}

uint64_t sub_22E870930(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E870970(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8709C0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  __int16 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;

  v5 = HIDWORD(a3);
  v7 = *(_DWORD *)a4;
  v8 = *(_DWORD *)(a4 + 4);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_WORD *)(a4 + 16);
  v47 = *(_DWORD *)(a4 + 18);
  v48 = *(_WORD *)(a4 + 22);
  sub_22F18FB4C(a2, (unsigned int *)a4);
  v11 = sub_22E3CD3D4(a2 + 128, 64, 3);
  v12 = v11;
  *(_QWORD *)(v11 + 48) = 0;
  v13 = (_DWORD **)(v11 + 48);
  *(_QWORD *)(v11 + 56) = 0;
  v14 = *(unsigned __int16 *)(a4 + 16);
  if (v14 == 2)
  {
    *(_DWORD *)v11 = v7;
    *(_DWORD *)(v11 + 4) = v8;
    *(_QWORD *)(v11 + 8) = v9;
    *(_WORD *)(v11 + 16) = v10;
    *(_DWORD *)(v11 + 18) = v47;
    *(_WORD *)(v11 + 22) = v48;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_DWORD *)(v11 + 40) = 0;
LABEL_3:
    v15 = operator new[]();
    *(_DWORD *)v15 = v5;
    *(_DWORD *)(v15 + 4) = v7;
    *(_QWORD *)(v15 + 8) = v12;
    *(_QWORD *)(v15 + 16) = 431;
    return (uint64_t)sub_22F1735E4(a2, (_BYTE *)v15, 1, 0, 1, 0);
  }
  v17 = *(unsigned int **)(v9 + 16);
  v18 = *v17;
  if (v18 == 8 && *((_QWORD *)v17 + 2) == 0x6C6C6F726E756F6ELL
    || v18 == 16
    && ((v20 = *((_QWORD *)v17 + 2), v19 = *((_QWORD *)v17 + 3), v20 == 0x6C6C6F726E756F6ELL)
      ? (v21 = v19 == 0x6D616A5F646E615FLL)
      : (v21 = 0),
        v21))
  {
    v23 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v23 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v23 + 316) = 2005;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    v43 = (unsigned __int8 *)(v23 + 320);
    v44 = 0;
    v45 = v23;
    v46 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v24 = *(unsigned int *)(v23 + 776);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(v23 + 768);
      v26 = 56 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 9) < 0)
          operator delete(*(void **)(v25 + v26 - 32));
        v26 -= 56;
      }
      while (v26);
    }
    *(_DWORD *)(v23 + 776) = 0;
    sub_22E3B89A8(&v43, (void *)(*(_QWORD *)(v9 + 16) + 16), **(unsigned int **)(v9 + 16));
    return sub_22E3BB0B8((uint64_t)&v43);
  }
  if (v14 == 21)
    sub_22F18FB4C(a2, (unsigned int *)a4);
  *(_QWORD *)&v39 = __PAIR64__(v8, v7);
  *((_QWORD *)&v39 + 1) = v9;
  v40 = v10;
  v41 = v47;
  v42 = v48;
  v37 = 0uLL;
  v38 = 0;
  result = sub_22E870638(a2, a4, &v39, &v37, v14 == 21, v12);
  if ((result & 1) == 0)
  {
    if (v14 == 21 && (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 64) & 0x2000000000) != 0)
    {
      v22 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v22 + 312) = **v13;
      *(_DWORD *)(v22 + 316) = 2021;
      if (*(char *)(v22 + 311) < 0)
      {
        **(_BYTE **)(v22 + 288) = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v22 + 288) = 0;
        *(_BYTE *)(v22 + 311) = 0;
      }
      v35[0] = v22 + 320;
      v35[1] = 0;
      v35[2] = v22;
      v36 = 1;
      *(_BYTE *)(v22 + 320) = 0;
      *(_DWORD *)(v22 + 664) = 0;
      v27 = *(unsigned int *)(v22 + 776);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v22 + 768);
        v29 = 56 * v27;
        do
        {
          if (*(char *)(v28 + v29 - 9) < 0)
            operator delete(*(void **)(v28 + v29 - 32));
          v29 -= 56;
        }
        while (v29);
      }
      *(_DWORD *)(v22 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v35);
    }
    if (*(_WORD *)(a4 + 16) == 2)
      goto LABEL_3;
    v30 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v30 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v30 + 316) = 2005;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    v31 = (unsigned __int8 *)(v30 + 320);
    v43 = (unsigned __int8 *)(v30 + 320);
    v44 = 0;
    v45 = v30;
    v46 = 1;
    *(_BYTE *)(v30 + 320) = 0;
    *(_DWORD *)(v30 + 664) = 0;
    v32 = *(unsigned int *)(v30 + 776);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)(v30 + 768);
      v34 = 56 * v32;
      do
      {
        if (*(char *)(v33 + v34 - 9) < 0)
          operator delete(*(void **)(v33 + v34 - 32));
        v34 -= 56;
      }
      while (v34);
      LODWORD(v32) = *v31;
    }
    *(_DWORD *)(v30 + 776) = 0;
    v31[v32 + 1] = 1;
    *(_BYTE *)(v30 + 320) = v32 + 1;
    *(_QWORD *)&v31[8 * v32 + 16] = "unroll";
    return sub_22E3BB0B8((uint64_t)&v43);
  }
  return result;
}

uint64_t sub_22E870D84(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E870DC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E870E14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  size_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  size_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  void *__p[2];
  char v110;
  unsigned __int8 *v111;
  _BYTE *v112;
  uint64_t v113;
  __int16 v114;
  void *__src;
  uint64_t v116;
  _QWORD v117[4];

  v117[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)a4;
  __src = v117;
  v116 = 0x100000000;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 5)
  {
    v55 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v55 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v55 + 316) = 1717;
    if (*(char *)(v55 + 311) < 0)
    {
      **(_BYTE **)(v55 + 288) = 0;
      *(_QWORD *)(v55 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v55 + 288) = 0;
      *(_BYTE *)(v55 + 311) = 0;
    }
    v111 = (unsigned __int8 *)(v55 + 320);
    v112 = 0;
    v113 = v55;
    v114 = 1;
    *(_BYTE *)(v55 + 320) = 0;
    *(_DWORD *)(v55 + 664) = 0;
    v56 = *(unsigned int *)(v55 + 776);
    if ((_DWORD)v56)
    {
      v57 = *(_QWORD *)(v55 + 768);
      v58 = 56 * v56;
      do
      {
        if (*(char *)(v57 + v58 - 9) < 0)
          operator delete(*(void **)(v57 + v58 - 32));
        v58 -= 56;
      }
      while (v58);
      LODWORD(v56) = *(unsigned __int8 *)(v55 + 320);
    }
    *(_DWORD *)(v55 + 776) = 0;
    *(_BYTE *)(v55 + 321 + v56) = 2;
    *(_QWORD *)(v55 + 336 + 8 * v56) = 1;
    v59 = (v56 + 1);
    *(_BYTE *)(v55 + 321 + v59) = 1;
    *(_BYTE *)(v55 + 320) = v56 + 2;
    *(_QWORD *)(v55 + 336 + 8 * v59) = "";
LABEL_208:
    sub_22E3BB0B8((uint64_t)&v111);
    goto LABEL_209;
  }
  v7 = (_BYTE *)sub_22E3CD3D4(a2 + 128, 32, 3);
  *v7 = 0;
  v7[4] = 0;
  v7[8] = 0;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  while (2)
  {
    v8 = *(unsigned __int16 *)(a4 + 16);
    if (v8 == 5)
    {
      v9 = *(_QWORD *)(a4 + 8);
      v10 = *(int **)(v9 + 16);
      v11 = *v10;
      if (*v10 == 8)
      {
        v17 = bswap64(*((_QWORD *)v10 + 2));
        v18 = v17 >= 0x636F6E7472616374;
        v19 = v17 > 0x636F6E7472616374;
        v20 = !v18;
        if (v19 != v20)
        {
LABEL_113:
          v66 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v66 + 312) = *(_DWORD *)a4;
          *(_DWORD *)(v66 + 316) = 1717;
          if (*(char *)(v66 + 311) < 0)
          {
            **(_BYTE **)(v66 + 288) = 0;
            *(_QWORD *)(v66 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v66 + 288) = 0;
            *(_BYTE *)(v66 + 311) = 0;
          }
          v111 = (unsigned __int8 *)(v66 + 320);
          v112 = 0;
          v113 = v66;
          v114 = 1;
          *(_BYTE *)(v66 + 320) = 0;
          *(_DWORD *)(v66 + 664) = 0;
          v71 = *(unsigned int *)(v66 + 776);
          if ((_DWORD)v71)
          {
            v72 = *(_QWORD *)(v66 + 768);
            v73 = 56 * v71;
            do
            {
              if (*(char *)(v72 + v73 - 9) < 0)
                operator delete(*(void **)(v72 + v73 - 32));
              v73 -= 56;
            }
            while (v73);
            LODWORD(v71) = *(unsigned __int8 *)(v66 + 320);
          }
          *(_DWORD *)(v66 + 776) = 0;
          *(_BYTE *)(v66 + 321 + v71) = 2;
          *(_QWORD *)(v66 + 336 + 8 * v71) = 0;
          v74 = (v71 + 1);
          *(_BYTE *)(v66 + 321 + v74) = 5;
          *(_BYTE *)(v66 + 320) = v71 + 2;
          *(_QWORD *)(v66 + 336 + 8 * v74) = v9;
          goto LABEL_208;
        }
        v16 = 0;
        v21 = 0;
        goto LABEL_28;
      }
      if (v11 == 10)
      {
        v22 = *((_QWORD *)v10 + 2);
        v23 = *((unsigned __int16 *)v10 + 12);
        v24 = v22 == 0x6F69747065637865 && v23 == 29550;
        v16 = 2;
        if (!v24)
          goto LABEL_113;
      }
      else
      {
        if (v11 != 11)
          goto LABEL_113;
        if (*((_QWORD *)v10 + 2) == 0x69636F7373616572 && *(_QWORD *)((char *)v10 + 19) == 0x65746169636F7373)
        {
          v21 = 1;
          v16 = 1;
          goto LABEL_28;
        }
        v13 = *((_QWORD *)v10 + 2);
        v14 = *(_QWORD *)((char *)v10 + 19);
        if (v13 != 0x74656D5F6C617665 || v14 != 0x646F6874656D5F6CLL)
          goto LABEL_113;
        v16 = 3;
      }
      v21 = v16;
LABEL_28:
      sub_22F18FB4C(a2, (unsigned int *)a4);
      if (*(_WORD *)(a4 + 16) != 21)
      {
        v68 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v68 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v68 + 316) = 15;
        if (*(char *)(v68 + 311) < 0)
        {
          **(_BYTE **)(v68 + 288) = 0;
          *(_QWORD *)(v68 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v68 + 288) = 0;
          *(_BYTE *)(v68 + 311) = 0;
        }
        v81 = (unsigned __int8 *)(v68 + 320);
        v111 = (unsigned __int8 *)(v68 + 320);
        v112 = 0;
        v113 = v68;
        v114 = 1;
        *(_BYTE *)(v68 + 320) = 0;
        *(_DWORD *)(v68 + 664) = 0;
        v82 = *(unsigned int *)(v68 + 776);
        if ((_DWORD)v82)
        {
          v83 = *(_QWORD *)(v68 + 768);
          v84 = 56 * v82;
          do
          {
            if (*(char *)(v83 + v84 - 9) < 0)
              operator delete(*(void **)(v83 + v84 - 32));
            v84 -= 56;
          }
          while (v84);
          LODWORD(v82) = *v81;
        }
        *(_DWORD *)(v68 + 776) = 0;
        v81[v82 + 1] = 4;
        *(_BYTE *)(v68 + 320) = v82 + 1;
        v79 = &v81[8 * v82];
        v80 = 21;
        goto LABEL_162;
      }
      sub_22F18FB4C(a2, (unsigned int *)a4);
      v25 = *(unsigned __int16 *)(a4 + 16);
      v27 = v16 == 3 && v25 == 84;
      if (v25 == 5 || v27)
      {
        if ((v25 - 7) >= 0xC)
          v28 = *(_QWORD *)(a4 + 8);
        else
          v28 = 0;
        switch(v16)
        {
          case 0:
            v29 = *(int **)(v28 + 16);
            v30 = *v29;
            if (*v29 == 2)
            {
              if (bswap32(*((unsigned __int16 *)v29 + 8)) >> 16 != 28526)
                goto LABEL_165;
              v34 = 0x100000001;
            }
            else if (v30 == 4)
            {
              v54 = v29[4];
              v34 = 0x100000002;
              if (v54 != 1953718630)
                goto LABEL_165;
            }
            else
            {
              if (v30 != 3
                || ((v31 = *((unsigned __int16 *)v29 + 8), v32 = *((unsigned __int8 *)v29 + 18), v31 == 26223)
                  ? (v33 = v32 == 102)
                  : (v33 = 0),
                    !v33))
              {
LABEL_165:
                *(_QWORD *)v7 = 0;
                v69 = *(_QWORD *)(a2 + 48);
                *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
                *(_DWORD *)(v69 + 316) = 1716;
                if (*(char *)(v69 + 311) < 0)
                {
                  **(_BYTE **)(v69 + 288) = 0;
                  *(_QWORD *)(v69 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v69 + 288) = 0;
                  *(_BYTE *)(v69 + 311) = 0;
                }
                v111 = (unsigned __int8 *)(v69 + 320);
                v112 = 0;
                v113 = v69;
                v114 = 1;
                *(_BYTE *)(v69 + 320) = 0;
                *(_DWORD *)(v69 + 664) = 0;
                v95 = *(unsigned int *)(v69 + 776);
                if ((_DWORD)v95)
                {
                  v96 = *(_QWORD *)(v69 + 768);
                  v97 = 56 * v95;
                  do
                  {
                    if (*(char *)(v96 + v97 - 9) < 0)
                      operator delete(*(void **)(v96 + v97 - 32));
                    v97 -= 56;
                  }
                  while (v97);
                }
                goto LABEL_198;
              }
              v34 = 0x100000000;
            }
            *(_QWORD *)v7 = v34;
            goto LABEL_97;
          case 1:
            v35 = *(_QWORD *)(v28 + 16);
            if (*(_DWORD *)v35 == 2)
            {
              if (bswap32(*(unsigned __int16 *)(v35 + 16)) >> 16 != 28526)
                goto LABEL_163;
              v39 = 0x100000001;
            }
            else
            {
              if (*(_DWORD *)v35 != 3
                || ((v36 = *(unsigned __int16 *)(v35 + 16), v37 = *(unsigned __int8 *)(v35 + 18), v36 == 26223)
                  ? (v38 = v37 == 102)
                  : (v38 = 0),
                    !v38))
              {
LABEL_163:
                *((_QWORD *)v7 + 1) = 0;
                v69 = *(_QWORD *)(a2 + 48);
                *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
                *(_DWORD *)(v69 + 316) = 1716;
                if (*(char *)(v69 + 311) < 0)
                {
                  **(_BYTE **)(v69 + 288) = 0;
                  *(_QWORD *)(v69 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v69 + 288) = 0;
                  *(_BYTE *)(v69 + 311) = 0;
                }
                v111 = (unsigned __int8 *)(v69 + 320);
                v112 = 0;
                v113 = v69;
                v114 = 1;
                *(_BYTE *)(v69 + 320) = 0;
                *(_DWORD *)(v69 + 664) = 0;
                v92 = *(unsigned int *)(v69 + 776);
                if ((_DWORD)v92)
                {
                  v93 = *(_QWORD *)(v69 + 768);
                  v94 = 56 * v92;
                  do
                  {
                    if (*(char *)(v93 + v94 - 9) < 0)
                      operator delete(*(void **)(v93 + v94 - 32));
                    v94 -= 56;
                  }
                  while (v94);
                }
                goto LABEL_198;
              }
              v39 = 0x100000000;
            }
            *((_QWORD *)v7 + 1) = v39;
            goto LABEL_97;
          case 2:
            v40 = *(_QWORD *)(v28 + 16);
            if (*(_DWORD *)v40 == 6)
            {
              if (bswap32(*(_DWORD *)(v40 + 16)) == 1768386159
                && bswap32(*(unsigned __int16 *)(v40 + 20)) >> 16 == 29285)
              {
                v44 = 0x100000000;
              }
              else
              {
                v51 = *(_DWORD *)(v40 + 16);
                v52 = *(unsigned __int16 *)(v40 + 20);
                v53 = v51 == 1769108595 && v52 == 29795;
                v44 = 0x100000002;
                if (!v53)
                {
LABEL_169:
                  *((_QWORD *)v7 + 2) = 0;
                  v69 = *(_QWORD *)(a2 + 48);
                  *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
                  *(_DWORD *)(v69 + 316) = 1716;
                  if (*(char *)(v69 + 311) < 0)
                  {
                    **(_BYTE **)(v69 + 288) = 0;
                    *(_QWORD *)(v69 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v69 + 288) = 0;
                    *(_BYTE *)(v69 + 311) = 0;
                  }
                  v111 = (unsigned __int8 *)(v69 + 320);
                  v112 = 0;
                  v113 = v69;
                  v114 = 1;
                  *(_BYTE *)(v69 + 320) = 0;
                  *(_DWORD *)(v69 + 664) = 0;
                  v101 = *(unsigned int *)(v69 + 776);
                  if ((_DWORD)v101)
                  {
                    v102 = *(_QWORD *)(v69 + 768);
                    v103 = 56 * v101;
                    do
                    {
                      if (*(char *)(v102 + v103 - 9) < 0)
                        operator delete(*(void **)(v102 + v103 - 32));
                      v103 -= 56;
                    }
                    while (v103);
                  }
                  goto LABEL_198;
                }
              }
            }
            else
            {
              if (*(_DWORD *)v40 != 7)
                goto LABEL_169;
              v41 = *(_DWORD *)(v40 + 16);
              v42 = *(_DWORD *)(v40 + 19);
              if (v41 != 1954111853 || v42 != 1885434484)
                goto LABEL_169;
              v44 = 0x100000001;
            }
            *((_QWORD *)v7 + 2) = v44;
            goto LABEL_97;
          case 3:
            v45 = *(_QWORD *)(v28 + 16);
            if (*(_DWORD *)v45 == 8)
            {
              v47 = *(_QWORD *)(v45 + 16);
              v46 = 0x100000002;
              if (v47 != 0x6465646E65747865)
                goto LABEL_167;
            }
            else
            {
              if (*(_DWORD *)v45 != 6)
                goto LABEL_167;
              if (bswap32(*(_DWORD *)(v45 + 16)) == 1936684402
                && bswap32(*(unsigned __int16 *)(v45 + 20)) >> 16 == 25445)
              {
                v46 = 0x100000000;
              }
              else
              {
                v48 = *(_DWORD *)(v45 + 16);
                v49 = *(unsigned __int16 *)(v45 + 20);
                if (v48 != 1651863396 || v49 != 25964)
                {
LABEL_167:
                  *((_QWORD *)v7 + 3) = 0;
                  v69 = *(_QWORD *)(a2 + 48);
                  *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
                  *(_DWORD *)(v69 + 316) = 1716;
                  if (*(char *)(v69 + 311) < 0)
                  {
                    **(_BYTE **)(v69 + 288) = 0;
                    *(_QWORD *)(v69 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v69 + 288) = 0;
                    *(_BYTE *)(v69 + 311) = 0;
                  }
                  v111 = (unsigned __int8 *)(v69 + 320);
                  v112 = 0;
                  v113 = v69;
                  v114 = 1;
                  *(_BYTE *)(v69 + 320) = 0;
                  *(_DWORD *)(v69 + 664) = 0;
                  v98 = *(unsigned int *)(v69 + 776);
                  if ((_DWORD)v98)
                  {
                    v99 = *(_QWORD *)(v69 + 768);
                    v100 = 56 * v98;
                    do
                    {
                      if (*(char *)(v99 + v100 - 9) < 0)
                        operator delete(*(void **)(v99 + v100 - 32));
                      v100 -= 56;
                    }
                    while (v100);
                  }
                  goto LABEL_198;
                }
                v46 = 0x100000001;
              }
            }
            *((_QWORD *)v7 + 3) = v46;
LABEL_97:
            sub_22F18FB4C(a2, (unsigned int *)a4);
            if (*(_WORD *)(a4 + 16) != 22)
            {
              v70 = *(_QWORD *)(a2 + 48);
              *(_DWORD *)(v70 + 312) = *(_DWORD *)a4;
              *(_DWORD *)(v70 + 316) = 15;
              if (*(char *)(v70 + 311) < 0)
              {
                **(_BYTE **)(v70 + 288) = 0;
                *(_QWORD *)(v70 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v70 + 288) = 0;
                *(_BYTE *)(v70 + 311) = 0;
              }
              v88 = (unsigned __int8 *)(v70 + 320);
              v111 = (unsigned __int8 *)(v70 + 320);
              v112 = 0;
              v113 = v70;
              v114 = 1;
              *(_BYTE *)(v70 + 320) = 0;
              *(_DWORD *)(v70 + 664) = 0;
              v89 = *(unsigned int *)(v70 + 776);
              if ((_DWORD)v89)
              {
                v90 = *(_QWORD *)(v70 + 768);
                v91 = 56 * v89;
                do
                {
                  if (*(char *)(v90 + v91 - 9) < 0)
                    operator delete(*(void **)(v90 + v91 - 32));
                  v91 -= 56;
                }
                while (v91);
                LODWORD(v89) = *v88;
              }
              *(_DWORD *)(v70 + 776) = 0;
              v88[v89 + 1] = 4;
              *(_BYTE *)(v70 + 320) = v89 + 1;
              v79 = &v88[8 * v89];
              v80 = 22;
LABEL_162:
              *((_QWORD *)v79 + 2) = v80;
              goto LABEL_208;
            }
            sub_22F18FB4C(a2, (unsigned int *)a4);
            continue;
          default:
            goto LABEL_97;
        }
      }
      v69 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v69 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v69 + 316) = 1716;
      if (*(char *)(v69 + 311) < 0)
      {
        **(_BYTE **)(v69 + 288) = 0;
        *(_QWORD *)(v69 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v69 + 288) = 0;
        *(_BYTE *)(v69 + 311) = 0;
      }
      v111 = (unsigned __int8 *)(v69 + 320);
      v112 = 0;
      v113 = v69;
      v114 = 1;
      *(_BYTE *)(v69 + 320) = 0;
      *(_DWORD *)(v69 + 664) = 0;
      v85 = *(unsigned int *)(v69 + 776);
      if ((_DWORD)v85)
      {
        v86 = *(_QWORD *)(v69 + 768);
        v87 = 56 * v85;
        do
        {
          if (*(char *)(v86 + v87 - 9) < 0)
            operator delete(*(void **)(v86 + v87 - 32));
          v87 -= 56;
        }
        while (v87);
      }
LABEL_198:
      *(_DWORD *)(v69 + 776) = 0;
      sub_22F1413E0(a4, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)__p);
      if (v110 >= 0)
        v104 = __p;
      else
        v104 = (void **)__p[0];
      if (v110 >= 0)
        v105 = v110 & 0x7F;
      else
        v105 = (size_t)__p[1];
      sub_22E3B89A8(&v111, v104, v105);
      sub_22E3B89A8(&v111, (void *)(*(_QWORD *)(v9 + 16) + 16), **(unsigned int **)(v9 + 16));
      v106 = v111;
      if (!v111)
      {
        v106 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v112);
        v111 = v106;
      }
      v106[*v106 + 1] = 2;
      v107 = v111;
      v108 = *v111;
      *v111 = v108 + 1;
      *(_QWORD *)&v107[8 * v108 + 16] = v21;
      if (v110 < 0)
        operator delete(__p[0]);
      goto LABEL_208;
    }
    break;
  }
  if (v8 != 2)
  {
    v67 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v67 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v67 + 316) = 2005;
    if (*(char *)(v67 + 311) < 0)
    {
      **(_BYTE **)(v67 + 288) = 0;
      *(_QWORD *)(v67 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v67 + 288) = 0;
      *(_BYTE *)(v67 + 311) = 0;
    }
    v75 = (unsigned __int8 *)(v67 + 320);
    v111 = (unsigned __int8 *)(v67 + 320);
    v112 = 0;
    v113 = v67;
    v114 = 1;
    *(_BYTE *)(v67 + 320) = 0;
    *(_DWORD *)(v67 + 664) = 0;
    v76 = *(unsigned int *)(v67 + 776);
    if ((_DWORD)v76)
    {
      v77 = *(_QWORD *)(v67 + 768);
      v78 = 56 * v76;
      do
      {
        if (*(char *)(v77 + v78 - 9) < 0)
          operator delete(*(void **)(v77 + v78 - 32));
        v78 -= 56;
      }
      while (v78);
      LODWORD(v76) = *v75;
    }
    *(_DWORD *)(v67 + 776) = 0;
    v75[v76 + 1] = 1;
    *(_BYTE *)(v67 + 320) = v76 + 1;
    v79 = &v75[8 * v76];
    v80 = (uint64_t)"clang fp";
    goto LABEL_162;
  }
  LODWORD(v113) = 432;
  LODWORD(v111) = v6;
  HIDWORD(v111) = v6;
  v112 = v7;
  v60 = sub_22E4EF088((uint64_t)&__src, (unint64_t)&v111, 1);
  v61 = (char *)__src + 24 * v116;
  v62 = *(_OWORD *)v60;
  *((_QWORD *)v61 + 2) = *(_QWORD *)(v60 + 16);
  *(_OWORD *)v61 = v62;
  LODWORD(v116) = v116 + 1;
  v63 = 24 * v116;
  v64 = (_BYTE *)operator new[]();
  bzero(v64, v63);
  v65 = v116;
  if ((_DWORD)v116)
    memmove(v64, __src, 24 * v116);
  sub_22F1735E4(a2, v64, v65, 0, 1, 0);
LABEL_209:
  if (__src != v117)
    free(__src);
}

uint64_t sub_22E871A98(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAA5280;
  sub_22E8D1BC4(*(_QWORD *)(a1 + 48), a1 + 48);
  sub_22E80F94C((uint64_t *)(a1 + 56));
  sub_22E80F94C((uint64_t *)(a1 + 40));
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E871B00(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAA5280;
  sub_22E8D1BC4(*(_QWORD *)(a1 + 48), a1 + 48);
  sub_22E80F94C((uint64_t *)(a1 + 56));
  sub_22E80F94C((uint64_t *)(a1 + 40));
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E871B78(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *p_p;
  size_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *__p;
  size_t v86;
  uint64_t v87;
  __int16 v88;
  _QWORD v89[3];
  __int16 v90;
  _QWORD v91[3];
  __int16 v92;
  _QWORD v93[3];
  __int16 v94;
  _QWORD v95[3];
  __int16 v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int16 v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  sub_22F18FB4C(a2, &v97);
  v7 = sub_22E3CD3D4(a2 + 128, 40, 3);
  *(_QWORD *)v7 = a1 + 32;
  *(_QWORD *)(v7 + 16) = 0;
  v8 = (_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  v9 = v99;
  if (v99 == 5)
  {
    v10 = v98;
    v11 = *(uint64_t **)(v98 + 16);
    v12 = *v11;
    if (*v11 == 3)
    {
      if (*((_WORD *)v11 + 8) == 28528 && *((_BYTE *)v11 + 18) == 112)
        goto LABEL_15;
    }
    else if ((_DWORD)v12 == 4 && *((_DWORD *)v11 + 4) == 1752397168)
    {
      goto LABEL_15;
    }
    *v8 = v98;
    sub_22F18FB4C(a2, &v97);
    if (v99 != 25)
    {
      v17 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v17 + 312) = v97;
      *(_DWORD *)(v17 + 316) = 1696;
      if (*(char *)(v17 + 311) < 0)
      {
        **(_BYTE **)(v17 + 288) = 0;
        *(_QWORD *)(v17 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v17 + 288) = 0;
        *(_BYTE *)(v17 + 311) = 0;
      }
      v32 = (unsigned __int8 *)(v17 + 320);
      v100 = (void *)(v17 + 320);
      v101 = 0;
      v102 = v17;
      v103 = 1;
      *(_BYTE *)(v17 + 320) = 0;
      *(_DWORD *)(v17 + 664) = 0;
      v33 = *(unsigned int *)(v17 + 776);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(v17 + 768);
        v35 = 56 * v33;
        do
        {
          if (*(char *)(v34 + v35 - 9) < 0)
            operator delete(*(void **)(v34 + v35 - 32));
          v35 -= 56;
        }
        while (v35);
        LODWORD(v33) = *v32;
      }
      *(_DWORD *)(v17 + 776) = 0;
      v32[v33 + 1] = 5;
      *(_BYTE *)(v17 + 320) = v33 + 1;
      *(_QWORD *)&v32[8 * v33 + 16] = v10;
      goto LABEL_112;
    }
    sub_22F18FB4C(a2, &v97);
    v9 = v99;
  }
  if (v9 != 21)
  {
    if (v9 != 5)
    {
      v16 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v16 + 312) = v97;
      *(_DWORD *)(v16 + 316) = 1697;
      if (*(char *)(v16 + 311) < 0)
      {
        **(_BYTE **)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v16 + 288) = 0;
        *(_BYTE *)(v16 + 311) = 0;
      }
      v95[0] = v16 + 320;
      v95[1] = 0;
      v95[2] = v16;
      v96 = 1;
      *(_BYTE *)(v16 + 320) = 0;
      *(_DWORD *)(v16 + 664) = 0;
      v28 = *(unsigned int *)(v16 + 776);
      if ((_DWORD)v28)
      {
        v29 = *(_QWORD *)(v16 + 768);
        v30 = 56 * v28;
        do
        {
          if (*(char *)(v29 + v30 - 9) < 0)
            operator delete(*(void **)(v29 + v30 - 32));
          v30 -= 56;
        }
        while (v30);
      }
      *(_DWORD *)(v16 + 776) = 0;
      v31 = (void **)v95;
      goto LABEL_113;
    }
    v11 = *(uint64_t **)(v98 + 16);
    v12 = *v11;
LABEL_15:
    if ((_DWORD)v12 == 3)
    {
      v18 = *((unsigned __int16 *)v11 + 8);
      v19 = *((unsigned __int8 *)v11 + 18);
      if (v18 == 28528 && v19 == 112)
      {
        v14 = 1;
LABEL_78:
        *(_DWORD *)(v7 + 8) = v14;
        sub_22F18FB4C(a2, &v97);
        v43 = *(_DWORD *)(v7 + 8);
        v27 = v99;
        if (v43)
          v44 = 1;
        else
          v44 = v99 == 2;
        v45 = !v44;
        if (v43 != 2 && !v45)
          goto LABEL_123;
        goto LABEL_86;
      }
    }
    else if ((_DWORD)v12 == 4 && *((_DWORD *)v11 + 4) == 1752397168)
    {
      v14 = 0;
      goto LABEL_78;
    }
    v21 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v21 + 312) = v97;
    *(_DWORD *)(v21 + 316) = 1701;
    if (*(char *)(v21 + 311) < 0)
    {
      **(_BYTE **)(v21 + 288) = 0;
      *(_QWORD *)(v21 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v21 + 288) = 0;
      *(_BYTE *)(v21 + 311) = 0;
    }
    v100 = (void *)(v21 + 320);
    v101 = 0;
    v102 = v21;
    v103 = 1;
    *(_BYTE *)(v21 + 320) = 0;
    *(_DWORD *)(v21 + 664) = 0;
    v22 = *(unsigned int *)(v21 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v21 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
    }
    *(_DWORD *)(v21 + 776) = 0;
    sub_22F1413E0((uint64_t)&v97, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)&__p);
    if (v87 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v87 >= 0)
      v26 = HIBYTE(v87) & 0x7F;
    else
      v26 = v86;
    sub_22E3B89A8((unsigned __int8 **)&v100, p_p, v26);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
    goto LABEL_112;
  }
  if (*v8)
  {
    v15 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v15 + 312) = v97;
    *(_DWORD *)(v15 + 316) = 1703;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    v93[0] = v15 + 320;
    v93[1] = 0;
    v93[2] = v15;
    v94 = 1;
    *(_BYTE *)(v15 + 320) = 0;
    *(_DWORD *)(v15 + 664) = 0;
    v36 = *(unsigned int *)(v15 + 776);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD *)(v15 + 768);
      v38 = 56 * v36;
      do
      {
        if (*(char *)(v37 + v38 - 9) < 0)
          operator delete(*(void **)(v37 + v38 - 32));
        v38 -= 56;
      }
      while (v38);
    }
    *(_DWORD *)(v15 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v93);
    v39 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v39 + 312) = v97;
    *(_DWORD *)(v39 + 316) = 1882;
    if (*(char *)(v39 + 311) < 0)
    {
      **(_BYTE **)(v39 + 288) = 0;
      *(_QWORD *)(v39 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v39 + 288) = 0;
      *(_BYTE *)(v39 + 311) = 0;
    }
    v91[0] = v39 + 320;
    v91[1] = 0;
    v91[2] = v39;
    v92 = 1;
    *(_BYTE *)(v39 + 320) = 0;
    *(_DWORD *)(v39 + 664) = 0;
    v40 = *(unsigned int *)(v39 + 776);
    if ((_DWORD)v40)
    {
      v41 = *(_QWORD *)(v39 + 768);
      v42 = 56 * v40;
      do
      {
        if (*(char *)(v41 + v42 - 9) < 0)
          operator delete(*(void **)(v41 + v42 - 32));
        v42 -= 56;
      }
      while (v42);
    }
    *(_DWORD *)(v39 + 776) = 0;
    v31 = (void **)v91;
    goto LABEL_113;
  }
  *(_DWORD *)(v7 + 8) = 2;
  v27 = v99;
LABEL_86:
  if (v27 != 21)
  {
    v50 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v50 + 312) = v97;
    *(_DWORD *)(v50 + 316) = 15;
    if (*(char *)(v50 + 311) < 0)
    {
      **(_BYTE **)(v50 + 288) = 0;
      *(_QWORD *)(v50 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v50 + 288) = 0;
      *(_BYTE *)(v50 + 311) = 0;
    }
    v59 = (unsigned __int8 *)(v50 + 320);
    v100 = (void *)(v50 + 320);
    v101 = 0;
    v102 = v50;
    v103 = 1;
    *(_BYTE *)(v50 + 320) = 0;
    *(_DWORD *)(v50 + 664) = 0;
    v60 = *(unsigned int *)(v50 + 776);
    if ((_DWORD)v60)
    {
      v61 = *(_QWORD *)(v50 + 768);
      v62 = 56 * v60;
      do
      {
        if (*(char *)(v61 + v62 - 9) < 0)
          operator delete(*(void **)(v61 + v62 - 32));
        v62 -= 56;
      }
      while (v62);
      LODWORD(v60) = *v59;
    }
    *(_DWORD *)(v50 + 776) = 0;
    v59[v60 + 1] = 4;
    *(_BYTE *)(v50 + 320) = v60 + 1;
    *(_QWORD *)&v59[8 * v60 + 16] = 21;
LABEL_112:
    v31 = &v100;
LABEL_113:
    sub_22E3BB0B8((uint64_t)v31);
    return;
  }
  sub_22F18FB4C(a2, &v97);
  v100 = &v102;
  v101 = 0x1000000000;
  v46 = 1;
  while (1)
  {
    if (v99 == 21)
    {
      ++v46;
      goto LABEL_94;
    }
    if (v99 == 22)
      break;
    if (v99 == 2)
    {
      if ((_DWORD)v101)
      {
        v51 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v51 + 312) = v97;
        *(_DWORD *)(v51 + 316) = 15;
        if (*(char *)(v51 + 311) < 0)
        {
          **(_BYTE **)(v51 + 288) = 0;
          *(_QWORD *)(v51 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v51 + 288) = 0;
          *(_BYTE *)(v51 + 311) = 0;
        }
        v81 = (unsigned __int8 *)(v51 + 320);
        __p = (void *)(v51 + 320);
        v86 = 0;
        v87 = v51;
        v88 = 1;
        *(_BYTE *)(v51 + 320) = 0;
        *(_DWORD *)(v51 + 664) = 0;
        v82 = *(unsigned int *)(v51 + 776);
        if ((_DWORD)v82)
        {
          v83 = *(_QWORD *)(v51 + 768);
          v84 = 56 * v82;
          do
          {
            if (*(char *)(v83 + v84 - 9) < 0)
              operator delete(*(void **)(v83 + v84 - 32));
            v84 -= 56;
          }
          while (v84);
          LODWORD(v82) = *v81;
        }
        *(_DWORD *)(v51 + 776) = 0;
        v81[v82 + 1] = 4;
        *(_BYTE *)(v51 + 320) = v82 + 1;
        *(_QWORD *)&v81[8 * v82 + 16] = 22;
        v80 = &__p;
LABEL_150:
        sub_22E3BB0B8((uint64_t)v80);
        if (v100 != &v102)
          free(v100);
        return;
      }
LABEL_115:
      v63 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v63 + 312) = v97;
      *(_DWORD *)(v63 + 316) = 1693;
      if (*(char *)(v63 + 311) < 0)
      {
        **(_BYTE **)(v63 + 288) = 0;
        *(_QWORD *)(v63 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v63 + 288) = 0;
        *(_BYTE *)(v63 + 311) = 0;
      }
      v89[0] = v63 + 320;
      v89[1] = 0;
      v89[2] = v63;
      v90 = 1;
      *(_BYTE *)(v63 + 320) = 0;
      *(_DWORD *)(v63 + 664) = 0;
      v77 = *(unsigned int *)(v63 + 776);
      if ((_DWORD)v77)
      {
        v78 = *(_QWORD *)(v63 + 768);
        v79 = 56 * v77;
        do
        {
          if (*(char *)(v78 + v79 - 9) < 0)
            operator delete(*(void **)(v78 + v79 - 32));
          v79 -= 56;
        }
        while (v79);
      }
      *(_DWORD *)(v63 + 776) = 0;
      v80 = (void **)v89;
      goto LABEL_150;
    }
LABEL_94:
    v47 = sub_22E4EF088((uint64_t)&v100, (unint64_t)&v97, 1);
    v48 = (char *)v100 + 24 * v101;
    v49 = *(_OWORD *)v47;
    *((_QWORD *)v48 + 2) = *(_QWORD *)(v47 + 16);
    *(_OWORD *)v48 = v49;
    LODWORD(v101) = v101 + 1;
    sub_22F18FB4C(a2, &v97);
  }
  if (--v46)
    goto LABEL_94;
  if (!(_DWORD)v101)
    goto LABEL_115;
  v52 = v97;
  sub_22F18FB4C(a2, &v97);
  v86 = 0;
  LODWORD(v87) = 1;
  __p = (void *)v52;
  v53 = sub_22E4EF088((uint64_t)&v100, (unint64_t)&__p, 1);
  v54 = (char *)v100 + 24 * v101;
  v55 = *(_OWORD *)v53;
  *((_QWORD *)v54 + 2) = *(_QWORD *)(v53 + 16);
  *(_OWORD *)v54 = v55;
  v56 = __CFADD__((_DWORD)v101, 1);
  v57 = (v101 + 1);
  LODWORD(v101) = v101 + 1;
  if (v56)
  {
    v58 = sub_22E3CD3D4(a2 + 128, 24 * v57, 3);
  }
  else
  {
    v64 = (char *)v100;
    v65 = 24 * v57;
    v66 = (char *)v100 + 18;
    do
    {
      *v66 |= 0x800u;
      v66 += 12;
      v65 -= 24;
    }
    while (v65);
    v58 = sub_22E3CD3D4(a2 + 128, 24 * v57, 3);
    v67 = 0;
    do
    {
      v68 = v58 + v67;
      v69 = *(_OWORD *)&v64[v67];
      *(_QWORD *)(v68 + 16) = *(_QWORD *)&v64[v67 + 16];
      *(_OWORD *)v68 = v69;
      v67 += 24;
    }
    while (24 * v57 != v67);
  }
  *(_QWORD *)(v7 + 24) = v58;
  *(_QWORD *)(v7 + 32) = v57;
  if (v100 != &v102)
    free(v100);
  v27 = v99;
LABEL_123:
  if (v27 != 2)
  {
    v70 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v70 + 312) = v97;
    *(_DWORD *)(v70 + 316) = 2005;
    if (*(char *)(v70 + 311) < 0)
    {
      **(_BYTE **)(v70 + 288) = 0;
      *(_QWORD *)(v70 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v70 + 288) = 0;
      *(_BYTE *)(v70 + 311) = 0;
    }
    v71 = (unsigned __int8 *)(v70 + 320);
    v100 = (void *)(v70 + 320);
    v101 = 0;
    v102 = v70;
    v103 = 1;
    *(_BYTE *)(v70 + 320) = 0;
    *(_DWORD *)(v70 + 664) = 0;
    v72 = *(unsigned int *)(v70 + 776);
    if ((_DWORD)v72)
    {
      v73 = *(_QWORD *)(v70 + 768);
      v74 = 56 * v72;
      do
      {
        if (*(char *)(v73 + v74 - 9) < 0)
          operator delete(*(void **)(v73 + v74 - 32));
        v74 -= 56;
      }
      while (v74);
      LODWORD(v72) = *v71;
    }
    *(_DWORD *)(v70 + 776) = 0;
    v71[v72 + 1] = 1;
    *(_BYTE *)(v70 + 320) = v72 + 1;
    *(_QWORD *)&v71[8 * v72 + 16] = "clang attribute";
    sub_22E3BB0B8((uint64_t)&v100);
  }
  v75 = operator new[]();
  v76 = *a4;
  *(_DWORD *)v75 = *a4;
  *(_DWORD *)(v75 + 4) = v76;
  *(_QWORD *)(v75 + 8) = v7;
  *(_QWORD *)(v75 + 16) = 433;
  sub_22F1735E4(a2, (_BYTE *)v75, 1, 0, 1, 0);
}

uint64_t sub_22E872538(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E872578(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8725C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  sub_22F18FB4C(a2, (unsigned int *)a4);
  v6 = *(unsigned __int16 *)(a4 + 16);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 316) = 1723;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v31 = v7 + 320;
    v32 = 0;
    v33 = v7;
    v34 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v12 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v7 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
      LODWORD(v12) = *(unsigned __int8 *)(v7 + 320);
    }
    v15 = v7 + 321;
    *(_BYTE *)(v7 + 321 + v12) = 1;
    *(_DWORD *)(v7 + 776) = 0;
    *(_QWORD *)(v7 + 336 + 8 * v12) = "clang max_tokens_here";
    v16 = (v12 + 1);
    *(_BYTE *)(v15 + v16) = 2;
    *(_QWORD *)(v7 + 336 + 8 * v16) = 1;
    v17 = (v12 + 2);
    *(_BYTE *)(v15 + v17) = 1;
    *(_BYTE *)(v7 + 320) = v12 + 3;
    *(_QWORD *)(v7 + 336 + 8 * v17) = "integer";
    return sub_22E3BB0B8((uint64_t)&v31);
  }
  v8 = *(_DWORD *)a4;
  v30 = 0;
  if (v6 != 7)
    goto LABEL_19;
  result = sub_22F190750(a2, (int *)a4, &v30);
  if ((result & 1) == 0)
  {
    v8 = *(_DWORD *)a4;
LABEL_19:
    v18 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v18 + 312) = v8;
    *(_DWORD *)(v18 + 316) = 1713;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    v19 = (unsigned __int8 *)(v18 + 320);
    v31 = v18 + 320;
    v32 = 0;
    v33 = v18;
    v34 = 1;
    *(_BYTE *)(v18 + 320) = 0;
    *(_DWORD *)(v18 + 664) = 0;
    v20 = *(unsigned int *)(v18 + 776);
    if (!(_DWORD)v20)
      goto LABEL_28;
    v21 = *(_QWORD *)(v18 + 768);
    v22 = 56 * v20;
    do
    {
      if (*(char *)(v21 + v22 - 9) < 0)
        operator delete(*(void **)(v21 + v22 - 32));
      v22 -= 56;
    }
    while (v22);
    goto LABEL_27;
  }
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v18 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v18 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v18 + 316) = 2005;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    v19 = (unsigned __int8 *)(v18 + 320);
    v31 = v18 + 320;
    v32 = 0;
    v33 = v18;
    v34 = 1;
    *(_BYTE *)(v18 + 320) = 0;
    *(_DWORD *)(v18 + 664) = 0;
    v20 = *(unsigned int *)(v18 + 776);
    if (!(_DWORD)v20)
      goto LABEL_28;
    v23 = *(_QWORD *)(v18 + 768);
    v24 = 56 * v20;
    do
    {
      if (*(char *)(v23 + v24 - 9) < 0)
        operator delete(*(void **)(v23 + v24 - 32));
      v24 -= 56;
    }
    while (v24);
LABEL_27:
    LODWORD(v20) = *v19;
LABEL_28:
    *(_DWORD *)(v18 + 776) = 0;
    v19[v20 + 1] = 1;
    *(_BYTE *)(v18 + 320) = v20 + 1;
    *(_QWORD *)&v19[8 * v20 + 16] = "clang max_tokens_here";
    return sub_22E3BB0B8((uint64_t)&v31);
  }
  v10 = v30;
  if ((unint64_t)v30 >= *(unsigned int *)(a2 + 912))
    return result;
  v11 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v11 + 312) = v8;
  *(_DWORD *)(v11 + 316) = 1958;
  if (*(char *)(v11 + 311) < 0)
  {
    **(_BYTE **)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v11 + 288) = 0;
    *(_BYTE *)(v11 + 311) = 0;
  }
  v31 = v11 + 320;
  v32 = 0;
  v33 = v11;
  v34 = 1;
  *(_BYTE *)(v11 + 320) = 0;
  *(_DWORD *)(v11 + 664) = 0;
  v25 = *(unsigned int *)(v11 + 776);
  if ((_DWORD)v25)
  {
    v26 = *(_QWORD *)(v11 + 768);
    v27 = 56 * v25;
    do
    {
      if (*(char *)(v26 + v27 - 9) < 0)
        operator delete(*(void **)(v26 + v27 - 32));
      v27 -= 56;
    }
    while (v27);
    LODWORD(v25) = *(unsigned __int8 *)(v11 + 320);
  }
  *(_DWORD *)(v11 + 776) = 0;
  v28 = *(unsigned int *)(a2 + 912);
  *(_BYTE *)(v11 + 321 + v25) = 3;
  *(_QWORD *)(v11 + 336 + 8 * v25) = v28;
  v29 = (v25 + 1);
  *(_BYTE *)(v11 + 321 + v29) = 3;
  *(_BYTE *)(v11 + 320) = v25 + 2;
  *(_QWORD *)(v11 + 336 + 8 * v29) = v10;
  return sub_22E3BB0B8((uint64_t)&v31);
}

uint64_t sub_22E872920(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E872960(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8729B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  sub_22F18FB4C(a2, (unsigned int *)a4);
  v6 = *(unsigned __int16 *)(a4 + 16);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v7 + 316) = 1723;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v24 = v7 + 320;
    v25 = 0;
    v26 = v7;
    v27 = 1;
    *(_BYTE *)(v7 + 320) = 0;
    *(_DWORD *)(v7 + 664) = 0;
    v10 = *(unsigned int *)(v7 + 776);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v7 + 768);
      v12 = 56 * v10;
      do
      {
        if (*(char *)(v11 + v12 - 9) < 0)
          operator delete(*(void **)(v11 + v12 - 32));
        v12 -= 56;
      }
      while (v12);
      LODWORD(v10) = *(unsigned __int8 *)(v7 + 320);
    }
    v13 = v7 + 321;
    *(_BYTE *)(v7 + 321 + v10) = 1;
    *(_DWORD *)(v7 + 776) = 0;
    *(_QWORD *)(v7 + 336 + 8 * v10) = "clang max_tokens_total";
    v14 = (v10 + 1);
    *(_BYTE *)(v13 + v14) = 2;
    *(_QWORD *)(v7 + 336 + 8 * v14) = 1;
    v15 = (v10 + 2);
    *(_BYTE *)(v13 + v15) = 1;
    *(_BYTE *)(v7 + 320) = v10 + 3;
    *(_QWORD *)(v7 + 336 + 8 * v15) = "integer";
    return sub_22E3BB0B8((uint64_t)&v24);
  }
  v8 = *(_DWORD *)a4;
  v23 = 0;
  if (v6 == 7)
  {
    result = sub_22F190750(a2, (int *)a4, &v23);
    if ((result & 1) != 0)
    {
      if (*(_WORD *)(a4 + 16) == 2)
      {
        *(_DWORD *)(a2 + 920) = (_DWORD)v23;
        *(_DWORD *)(a2 + 924) = v8;
        return result;
      }
      v16 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v16 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v16 + 316) = 2005;
      if (*(char *)(v16 + 311) < 0)
      {
        **(_BYTE **)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v16 + 288) = 0;
        *(_BYTE *)(v16 + 311) = 0;
      }
      v17 = (unsigned __int8 *)(v16 + 320);
      v24 = v16 + 320;
      v25 = 0;
      v26 = v16;
      v27 = 1;
      *(_BYTE *)(v16 + 320) = 0;
      *(_DWORD *)(v16 + 664) = 0;
      v18 = *(unsigned int *)(v16 + 776);
      if (!(_DWORD)v18)
        goto LABEL_26;
      v21 = *(_QWORD *)(v16 + 768);
      v22 = 56 * v18;
      do
      {
        if (*(char *)(v21 + v22 - 9) < 0)
          operator delete(*(void **)(v21 + v22 - 32));
        v22 -= 56;
      }
      while (v22);
      goto LABEL_25;
    }
    v8 = *(_DWORD *)a4;
  }
  v16 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(v16 + 312) = v8;
  *(_DWORD *)(v16 + 316) = 1713;
  if (*(char *)(v16 + 311) < 0)
  {
    **(_BYTE **)(v16 + 288) = 0;
    *(_QWORD *)(v16 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v16 + 288) = 0;
    *(_BYTE *)(v16 + 311) = 0;
  }
  v17 = (unsigned __int8 *)(v16 + 320);
  v24 = v16 + 320;
  v25 = 0;
  v26 = v16;
  v27 = 1;
  *(_BYTE *)(v16 + 320) = 0;
  *(_DWORD *)(v16 + 664) = 0;
  v18 = *(unsigned int *)(v16 + 776);
  if (!(_DWORD)v18)
    goto LABEL_26;
  v19 = *(_QWORD *)(v16 + 768);
  v20 = 56 * v18;
  do
  {
    if (*(char *)(v19 + v20 - 9) < 0)
      operator delete(*(void **)(v19 + v20 - 32));
    v20 -= 56;
  }
  while (v20);
LABEL_25:
  LODWORD(v18) = *v17;
LABEL_26:
  *(_DWORD *)(v16 + 776) = 0;
  v17[v18 + 1] = 1;
  *(_BYTE *)(v16 + 320) = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = "clang max_tokens_total";
  return sub_22E3BB0B8((uint64_t)&v24);
}

uint64_t sub_22E872C4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E872C8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E872CDC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  size_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  void *__p[2];
  char v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 5)
  {
    v38 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v38 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v38 + 316) = 1597;
    if (*(char *)(v38 + 311) < 0)
    {
      **(_BYTE **)(v38 + 288) = 0;
      *(_QWORD *)(v38 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v38 + 288) = 0;
      *(_BYTE *)(v38 + 311) = 0;
    }
    v93 = (void *)(v38 + 320);
    v94 = 0;
    v95 = v38;
    v96 = 1;
    *(_BYTE *)(v38 + 320) = 0;
    *(_DWORD *)(v38 + 664) = 0;
    v39 = *(unsigned int *)(v38 + 776);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(v38 + 768);
      v41 = 56 * v39;
      do
      {
        if (*(char *)(v40 + v41 - 9) < 0)
          operator delete(*(void **)(v40 + v41 - 32));
        v41 -= 56;
      }
      while (v41);
      LODWORD(v39) = *(unsigned __int8 *)(v38 + 320);
    }
    *(_DWORD *)(v38 + 776) = 0;
    *(_BYTE *)(v38 + 321 + v39) = 2;
    *(_QWORD *)(v38 + 336 + 8 * v39) = 1;
    v42 = (v39 + 1);
    *(_BYTE *)(v38 + 321 + v42) = 1;
    *(_BYTE *)(v38 + 320) = v39 + 2;
    *(_QWORD *)(v38 + 336 + 8 * v42) = "";
    sub_22E3BB0B8((uint64_t)&v93);
    return;
  }
  v93 = &v95;
  v7 = 5;
  v94 = 0x200000000;
  while (v7 == 5)
  {
    v8 = *(_QWORD *)(a4 + 8);
    v9 = *(unsigned int **)(v8 + 16);
    v10 = *v9;
    if (v10 == 8)
    {
      v11 = bswap64(*((_QWORD *)v9 + 2));
      v12 = v11 >= 0x636F6E7472616374;
      v13 = v11 > 0x636F6E7472616374;
      v14 = !v12;
      if (v13 != v14)
        goto LABEL_79;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      if (v10 != 9
        || ((v17 = *((_QWORD *)v9 + 2), v18 = *((unsigned __int8 *)v9 + 24), v17 == 0x646F6D5F6874616DLL)
          ? (v19 = v18 == 101)
          : (v19 = 0),
            !v19))
      {
LABEL_79:
        v50 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v50 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v50 + 316) = 1597;
        if (*(char *)(v50 + 311) < 0)
        {
          **(_BYTE **)(v50 + 288) = 0;
          *(_QWORD *)(v50 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v50 + 288) = 0;
          *(_BYTE *)(v50 + 311) = 0;
        }
        v89 = (unsigned __int8 *)(v50 + 320);
        v90 = 0;
        v91 = v50;
        v92 = 1;
        *(_BYTE *)(v50 + 320) = 0;
        *(_DWORD *)(v50 + 664) = 0;
        v55 = *(unsigned int *)(v50 + 776);
        if ((_DWORD)v55)
        {
          v56 = *(_QWORD *)(v50 + 768);
          v57 = 56 * v55;
          do
          {
            if (*(char *)(v56 + v57 - 9) < 0)
              operator delete(*(void **)(v56 + v57 - 32));
            v57 -= 56;
          }
          while (v57);
          LODWORD(v55) = *(unsigned __int8 *)(v50 + 320);
        }
        *(_DWORD *)(v50 + 776) = 0;
        *(_BYTE *)(v50 + 321 + v55) = 2;
        *(_QWORD *)(v50 + 336 + 8 * v55) = 0;
        v58 = (v55 + 1);
        *(_BYTE *)(v50 + 321 + v58) = 5;
        *(_BYTE *)(v50 + 320) = v55 + 2;
        *(_QWORD *)(v50 + 336 + 8 * v58) = v8;
        goto LABEL_158;
      }
      v15 = 1;
      v16 = 1;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (*(_WORD *)(a4 + 16) != 21)
    {
      v52 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v52 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v52 + 316) = 15;
      if (*(char *)(v52 + 311) < 0)
      {
        **(_BYTE **)(v52 + 288) = 0;
        *(_QWORD *)(v52 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v52 + 288) = 0;
        *(_BYTE *)(v52 + 311) = 0;
      }
      v65 = (unsigned __int8 *)(v52 + 320);
      v89 = (unsigned __int8 *)(v52 + 320);
      v90 = 0;
      v91 = v52;
      v92 = 1;
      *(_BYTE *)(v52 + 320) = 0;
      *(_DWORD *)(v52 + 664) = 0;
      v66 = *(unsigned int *)(v52 + 776);
      if ((_DWORD)v66)
      {
        v67 = *(_QWORD *)(v52 + 768);
        v68 = 56 * v66;
        do
        {
          if (*(char *)(v67 + v68 - 9) < 0)
            operator delete(*(void **)(v67 + v68 - 32));
          v68 -= 56;
        }
        while (v68);
        LODWORD(v66) = *v65;
      }
      *(_DWORD *)(v52 + 776) = 0;
      v65[v66 + 1] = 4;
      *(_BYTE *)(v52 + 320) = v66 + 1;
      v63 = &v65[8 * v66];
      v64 = 21;
      goto LABEL_134;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    if (*(_WORD *)(a4 + 16) != 5)
    {
      v53 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v53 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v53 + 316) = 1596;
      if (*(char *)(v53 + 311) < 0)
      {
        **(_BYTE **)(v53 + 288) = 0;
        *(_QWORD *)(v53 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v53 + 288) = 0;
        *(_BYTE *)(v53 + 311) = 0;
      }
      v89 = (unsigned __int8 *)(v53 + 320);
      v90 = 0;
      v91 = v53;
      v92 = 1;
      *(_BYTE *)(v53 + 320) = 0;
      *(_DWORD *)(v53 + 664) = 0;
      v69 = *(unsigned int *)(v53 + 776);
      if ((_DWORD)v69)
      {
        v70 = *(_QWORD *)(v53 + 768);
        v71 = 56 * v69;
        do
        {
          if (*(char *)(v70 + v71 - 9) < 0)
            operator delete(*(void **)(v70 + v71 - 32));
          v71 -= 56;
        }
        while (v71);
      }
LABEL_148:
      *(_DWORD *)(v53 + 776) = 0;
      sub_22F1413E0(a4, *(uint64_t **)(a2 + 88), *(_QWORD **)(a2 + 56), 0, (uint64_t)__p);
      if (v88 >= 0)
        v82 = __p;
      else
        v82 = (void **)__p[0];
      if (v88 >= 0)
        v83 = v88 & 0x7F;
      else
        v83 = (size_t)__p[1];
      sub_22E3B89A8(&v89, v82, v83);
      sub_22E3B89A8(&v89, (void *)(*(_QWORD *)(v8 + 16) + 16), **(unsigned int **)(v8 + 16));
      v84 = v89;
      if (!v89)
      {
        v84 = (unsigned __int8 *)sub_22E3B8AAC(v90);
        v89 = v84;
      }
      v84[*v84 + 1] = 2;
      v85 = v89;
      v86 = *v89;
      *v89 = v86 + 1;
      *(_QWORD *)&v85[8 * v86 + 16] = v16;
      if (v88 < 0)
        operator delete(__p[0]);
LABEL_158:
      sub_22E3BB0B8((uint64_t)&v89);
      goto LABEL_159;
    }
    v20 = *(int **)(*(_QWORD *)(a4 + 8) + 16);
    v21 = *v20;
    if (v10 == 8)
    {
      if (v21 == 4)
      {
        if (v20[4] != 1953718630)
          goto LABEL_89;
        goto LABEL_40;
      }
      if (v21 != 3)
      {
        if (v21 != 2 || *((_WORD *)v20 + 8) != 28271)
          goto LABEL_89;
LABEL_32:
        v25 = 0x100000000;
        goto LABEL_48;
      }
      v29 = bswap32(*((unsigned __int16 *)v20 + 8)) >> 16;
      if (v29 == 28518)
      {
        v30 = *((unsigned __int8 *)v20 + 18) - 102;
      }
      else if (v29 < 0x6F66)
      {
        v30 = -1;
      }
      else
      {
        v30 = 1;
      }
      if (v30)
      {
LABEL_89:
        v53 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v53 + 312) = *(_DWORD *)a4;
        *(_DWORD *)(v53 + 316) = 1596;
        if (*(char *)(v53 + 311) < 0)
        {
          **(_BYTE **)(v53 + 288) = 0;
          *(_QWORD *)(v53 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v53 + 288) = 0;
          *(_BYTE *)(v53 + 311) = 0;
        }
        v89 = (unsigned __int8 *)(v53 + 320);
        v90 = 0;
        v91 = v53;
        v92 = 1;
        *(_BYTE *)(v53 + 320) = 0;
        *(_DWORD *)(v53 + 664) = 0;
        v76 = *(unsigned int *)(v53 + 776);
        if ((_DWORD)v76)
        {
          v77 = *(_QWORD *)(v53 + 768);
          v78 = 56 * v76;
          do
          {
            if (*(char *)(v77 + v78 - 9) < 0)
              operator delete(*(void **)(v77 + v78 - 32));
            v78 -= 56;
          }
          while (v78);
        }
        goto LABEL_148;
      }
    }
    else
    {
      if (v21 != 4)
      {
        if (v21 != 7
          || ((v22 = v20[4], v23 = *(int *)((char *)v20 + 19), v22 == 1634493810)
            ? (v24 = v23 == 1684371553)
            : (v24 = 0),
              !v24))
        {
LABEL_91:
          v53 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)(v53 + 312) = *(_DWORD *)a4;
          *(_DWORD *)(v53 + 316) = 1596;
          if (*(char *)(v53 + 311) < 0)
          {
            **(_BYTE **)(v53 + 288) = 0;
            *(_QWORD *)(v53 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v53 + 288) = 0;
            *(_BYTE *)(v53 + 311) = 0;
          }
          v89 = (unsigned __int8 *)(v53 + 320);
          v90 = 0;
          v91 = v53;
          v92 = 1;
          *(_BYTE *)(v53 + 320) = 0;
          *(_DWORD *)(v53 + 664) = 0;
          v79 = *(unsigned int *)(v53 + 776);
          if ((_DWORD)v79)
          {
            v80 = *(_QWORD *)(v53 + 768);
            v81 = 56 * v79;
            do
            {
              if (*(char *)(v80 + v81 - 9) < 0)
                operator delete(*(void **)(v80 + v81 - 32));
              v81 -= 56;
            }
            while (v81);
          }
          goto LABEL_148;
        }
        goto LABEL_32;
      }
      v26 = bswap32(v20[4]);
      v12 = v26 >= 0x66617374;
      v27 = v26 > 0x66617374;
      v28 = !v12;
      if (v27 != v28)
      {
        if (v20[4] != 1701208435)
          goto LABEL_91;
LABEL_40:
        v25 = 0x200000000;
        goto LABEL_48;
      }
    }
    v25 = 0;
LABEL_48:
    sub_22F18FB4C(a2, (unsigned int *)a4);
    v31 = v93;
    if ((_DWORD)v94)
    {
      v32 = 0;
      v33 = (char *)v93 + 8 * v94;
      v34 = 8 * v94 - 8;
      while (v15 != *(_DWORD *)((char *)v93 + v32))
      {
        v32 += 8;
        v34 -= 8;
        if (8 * v94 == v32)
          goto LABEL_60;
      }
      v33 = (char *)v93 + v32;
      if (8 * v94 - 8 != v32)
      {
        v35 = v33 + 8;
        do
        {
          if (v15 != *v35)
          {
            *(_QWORD *)v33 = *v35;
            v33 += 8;
          }
          ++v35;
          v34 -= 8;
        }
        while (v34);
        v31 = v93;
      }
    }
    else
    {
      v33 = (char *)v93;
    }
LABEL_60:
    v36 = (unint64_t)(v33 - v31) >> 3;
    v37 = v36;
    LODWORD(v94) = v36;
    if (HIDWORD(v94) <= (unint64_t)v36)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = v93;
      v37 = v94;
    }
    *(_QWORD *)&v31[8 * v37] = v25 | v16;
    LODWORD(v94) = v94 + 1;
    if (*(_WORD *)(a4 + 16) != 22)
    {
      v54 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v54 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v54 + 316) = 15;
      if (*(char *)(v54 + 311) < 0)
      {
        **(_BYTE **)(v54 + 288) = 0;
        *(_QWORD *)(v54 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v54 + 288) = 0;
        *(_BYTE *)(v54 + 311) = 0;
      }
      v72 = (unsigned __int8 *)(v54 + 320);
      v89 = (unsigned __int8 *)(v54 + 320);
      v90 = 0;
      v91 = v54;
      v92 = 1;
      *(_BYTE *)(v54 + 320) = 0;
      *(_DWORD *)(v54 + 664) = 0;
      v73 = *(unsigned int *)(v54 + 776);
      if ((_DWORD)v73)
      {
        v74 = *(_QWORD *)(v54 + 768);
        v75 = 56 * v73;
        do
        {
          if (*(char *)(v74 + v75 - 9) < 0)
            operator delete(*(void **)(v74 + v75 - 32));
          v75 -= 56;
        }
        while (v75);
        LODWORD(v73) = *v72;
      }
      *(_DWORD *)(v54 + 776) = 0;
      v72[v73 + 1] = 4;
      *(_BYTE *)(v54 + 320) = v73 + 1;
      v63 = &v72[8 * v73];
      v64 = 22;
      goto LABEL_134;
    }
    sub_22F18FB4C(a2, (unsigned int *)a4);
    v7 = *(_WORD *)(a4 + 16);
  }
  if (v7 != 2)
  {
    v51 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v51 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v51 + 316) = 2005;
    if (*(char *)(v51 + 311) < 0)
    {
      **(_BYTE **)(v51 + 288) = 0;
      *(_QWORD *)(v51 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v51 + 288) = 0;
      *(_BYTE *)(v51 + 311) = 0;
    }
    v59 = (unsigned __int8 *)(v51 + 320);
    v89 = (unsigned __int8 *)(v51 + 320);
    v90 = 0;
    v91 = v51;
    v92 = 1;
    *(_BYTE *)(v51 + 320) = 0;
    *(_DWORD *)(v51 + 664) = 0;
    v60 = *(unsigned int *)(v51 + 776);
    if ((_DWORD)v60)
    {
      v61 = *(_QWORD *)(v51 + 768);
      v62 = 56 * v60;
      do
      {
        if (*(char *)(v61 + v62 - 9) < 0)
          operator delete(*(void **)(v61 + v62 - 32));
        v62 -= 56;
      }
      while (v62);
      LODWORD(v60) = *v59;
    }
    *(_DWORD *)(v51 + 776) = 0;
    v59[v60 + 1] = 1;
    *(_BYTE *)(v51 + 320) = v60 + 1;
    v63 = &v59[8 * v60];
    v64 = (uint64_t)"METAL fp";
LABEL_134:
    *((_QWORD *)v63 + 2) = v64;
    goto LABEL_158;
  }
  v43 = (_BYTE *)operator new[]();
  bzero(v43, 24 * v94);
  if ((_DWORD)v94)
  {
    v44 = 0;
    v45 = 8 * v94;
    v46 = v43;
    do
    {
      *((_DWORD *)v46 + 4) = 0;
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = 0;
      *((_WORD *)v46 + 8) = 434;
      v47 = *(_DWORD *)a4;
      *(_DWORD *)v46 = v6;
      *((_DWORD *)v46 + 1) = v47;
      v48 = (_QWORD *)sub_22E3CD3D4(a2 + 128, 8, 3);
      *v48 = *(_QWORD *)((char *)v93 + v44);
      *((_QWORD *)v46 + 1) = v48;
      v44 += 8;
      v46 += 24;
    }
    while (v45 != v44);
    v49 = v94;
  }
  else
  {
    v49 = 0;
  }
  sub_22F1735E4(a2, v43, v49, 1, 1, 0);
LABEL_159:
  if (v93 != &v95)
    free(v93);
}

uint64_t sub_22E8736CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E87370C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAC8378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22E87375C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  v6 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 61)
  {
    v12 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v12 + 316) = 1989;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v14 = (unsigned __int8 *)(v12 + 320);
    v37 = v12 + 320;
    v38 = 0;
    v39 = v12;
    v40 = 1;
    *(_BYTE *)(v12 + 320) = 0;
    *(_DWORD *)(v12 + 664) = 0;
    v15 = *(unsigned int *)(v12 + 776);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v12 + 768);
      v17 = 56 * v15;
      do
      {
        if (*(char *)(v16 + v17 - 9) < 0)
          operator delete(*(void **)(v16 + v17 - 32));
        v17 -= 56;
      }
      while (v17);
      LODWORD(v15) = *v14;
    }
    *(_DWORD *)(v12 + 776) = 0;
    v14[v15 + 1] = 1;
    *(_BYTE *)(v12 + 320) = v15 + 1;
    v18 = &v14[8 * v15];
    v19 = "internals";
    goto LABEL_23;
  }
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 5)
  {
    v13 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v13 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v13 + 316) = 1997;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v20 = (unsigned __int8 *)(v13 + 320);
    v37 = v13 + 320;
    v38 = 0;
    v39 = v13;
    v40 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v21 = *(unsigned int *)(v13 + 776);
    if (!(_DWORD)v21)
      goto LABEL_44;
    v22 = *(_QWORD *)(v13 + 768);
    v23 = 56 * v21;
    do
    {
      if (*(char *)(v22 + v23 - 9) < 0)
        operator delete(*(void **)(v22 + v23 - 32));
      v23 -= 56;
    }
    while (v23);
    goto LABEL_43;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
  if (*(_DWORD *)v7 == 7)
  {
    v24 = *(_DWORD *)(v7 + 16);
    v25 = *(_DWORD *)(v7 + 19);
    if (v24 != 1634953572 || v25 != 1701601889)
      goto LABEL_35;
    v11 = 0;
  }
  else
  {
    if (*(_DWORD *)v7 != 6
      || ((v8 = *(_DWORD *)(v7 + 16), v9 = *(unsigned __int16 *)(v7 + 20), v8 == 1650552421)
        ? (v10 = v9 == 25964)
        : (v10 = 0),
          !v10))
    {
LABEL_35:
      v13 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(v13 + 312) = *(_DWORD *)a4;
      *(_DWORD *)(v13 + 316) = 1997;
      if (*(char *)(v13 + 311) < 0)
      {
        **(_BYTE **)(v13 + 288) = 0;
        *(_QWORD *)(v13 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v13 + 288) = 0;
        *(_BYTE *)(v13 + 311) = 0;
      }
      v20 = (unsigned __int8 *)(v13 + 320);
      v37 = v13 + 320;
      v38 = 0;
      v39 = v13;
      v40 = 1;
      *(_BYTE *)(v13 + 320) = 0;
      *(_DWORD *)(v13 + 664) = 0;
      v21 = *(unsigned int *)(v13 + 776);
      if (!(_DWORD)v21)
        goto LABEL_44;
      v27 = *(_QWORD *)(v13 + 768);
      v28 = 56 * v21;
      do
      {
        if (*(char *)(v27 + v28 - 9) < 0)
          operator delete(*(void **)(v27 + v28 - 32));
        v28 -= 56;
      }
      while (v28);
LABEL_43:
      LODWORD(v21) = *v20;
LABEL_44:
      *(_DWORD *)(v13 + 776) = 0;
      v20[v21 + 1] = 2;
      *(_BYTE *)(v13 + 320) = v21 + 1;
      *(_QWORD *)&v20[8 * v21 + 16] = 0;
      return (char *)sub_22E3BB0B8((uint64_t)&v37);
    }
    v11 = 1;
  }
  v30 = *(_DWORD *)a4;
  sub_22F18FB4C(a2, (unsigned int *)a4);
  if (*(_WORD *)(a4 + 16) != 2)
  {
    v32 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v32 + 312) = *(_DWORD *)a4;
    *(_DWORD *)(v32 + 316) = 2005;
    if (*(char *)(v32 + 311) < 0)
    {
      **(_BYTE **)(v32 + 288) = 0;
      *(_QWORD *)(v32 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v32 + 288) = 0;
      *(_BYTE *)(v32 + 311) = 0;
    }
    v33 = (unsigned __int8 *)(v32 + 320);
    v37 = v32 + 320;
    v38 = 0;
    v39 = v32;
    v40 = 1;
    *(_BYTE *)(v32 + 320) = 0;
    *(_DWORD *)(v32 + 664) = 0;
    v34 = *(unsigned int *)(v32 + 776);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD *)(v32 + 768);
      v36 = 56 * v34;
      do
      {
        if (*(char *)(v35 + v36 - 9) < 0)
          operator delete(*(void **)(v35 + v36 - 32));
        v36 -= 56;
      }
      while (v36);
      LODWORD(v34) = *v33;
    }
    *(_DWORD *)(v32 + 776) = 0;
    v33[v34 + 1] = 1;
    *(_BYTE *)(v32 + 320) = v34 + 1;
    v18 = &v33[8 * v34];
    v19 = "METAL internals";
LABEL_23:
    *((_QWORD *)v18 + 2) = v19;
    return (char *)sub_22E3BB0B8((uint64_t)&v37);
  }
  v31 = operator new[]();
  *(_QWORD *)(v31 + 8) = v11;
  *(_QWORD *)(v31 + 16) = 435;
  *(_DWORD *)v31 = v6;
  *(_DWORD *)(v31 + 4) = v30;
  return sub_22F1735E4(a2, (_BYTE *)v31, 1, 1, 1, 0);
}

_DWORD *sub_22E873B28(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 12 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2EE77C(a1, (uint64_t)v4, (uint64_t)v4 + 12 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(12 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = 0x7FFFFFFF;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
  }
  return result;
}

void *sub_22E873BF4(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(12 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](12 * v5, 4);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 12 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_22E873C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v8[2];
  _QWORD v9[33];

  v9[32] = *MEMORY[0x24BDAC8D0];
  do
  {
    v8[0] = v9;
    v8[1] = (void *)0x2000000000;
    v6 = sub_22E873D2C(a1, v8, a3, a2);
    if (v8[0] != v9)
      free(v8[0]);
  }
  while (!v6);
  return v6;
}

unint64_t sub_22E873D2C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int *v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_WORD *)(a1 + 80);
  v9 = *(_WORD *)(a1 + 82);
  v10 = *(_WORD *)(a1 + 84);
  v19 = 0;
  v20 = 0;
  v21 = a1 + 960;
  v22 = 0;
  sub_22E8103B4(a1, &v19, 1);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) & 0x40000000) != 0 && *(_WORD *)(a1 + 32) == 186)
    sub_22E810414(a1, &v19, 0, 0, 0);
  v12 = sub_22E873EBC(a1, a2, a3, a4, (uint64_t)&v19, v11);
  v13 = *(unsigned int *)(a1 + 2200);
  if ((_DWORD)v13 && (*(_WORD *)(a1 + 32) == 1 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1048)))
  {
    v14 = *(unsigned int ***)(a1 + 2192);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      sub_22E886514(v16);
      v15 -= 8;
    }
    while (v15);
    *(_DWORD *)(a1 + 2200) = 0;
  }
  if (v20 >= 8)
  {
    if ((v20 & 4) != 0 && (v20 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8))
        v17 = (v12 & 1) == 0;
      else
        v17 = 0;
      if (!v17)
        goto LABEL_20;
    }
    else if ((v12 & 1) != 0)
    {
      goto LABEL_20;
    }
    v12 = (unint64_t)sub_22F343EEC(*(_QWORD *)(a1 + 88), (int *)&v19, (unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL));
  }
LABEL_20:
  sub_22E8D1BC4(v21, (uint64_t)&v21);
  sub_22E80F94C(&v22);
  sub_22E80F94C((uint64_t *)&v20);
  sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v8;
  *(_WORD *)(a1 + 82) = v9;
  *(_WORD *)(a1 + 84) = v10;
  return v12;
}

unint64_t sub_22E873EBC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, int8x16_t a6)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v15;
  BOOL v17;
  char v18;
  BOOL v19;
  unsigned __int8 *v21;
  const char *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned __int8 *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  const char *v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  char *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  char *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  char *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  char *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  unsigned int *v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int8 *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  const char *v121;
  uint64_t v122;
  unsigned __int8 *v123;
  _QWORD *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  char *v132;
  uint64_t v133;
  char v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  _QWORD *v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  _QWORD *v160;
  uint64_t v161;
  size_t v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  _BOOL4 v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  int v188;
  int v189;
  BOOL v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  char v212;
  unsigned int v213;
  BOOL v214;
  uint64_t v215;
  BOOL v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  char v228;
  int v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  int v239;
  BOOL v240;
  uint64_t v241;
  int v242;
  char v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unsigned int v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  BOOL v291;
  int v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  BOOL v302;
  uint64_t v303;
  unsigned __int8 *v304;
  int v305;
  unsigned __int8 *v306;
  int v307;
  int v308;
  int v309;
  _BOOL4 v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned __int8 v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  int v335;
  unsigned int *v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v346;
  unsigned __int8 *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned __int8 *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _BOOL4 v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  char v379;
  char v380;
  char v381;
  __int16 v382;
  char v383;
  uint64_t v384;
  __int16 v385;
  __int128 v386;
  int v387;
  __int16 v388;
  int v389;
  int v390;
  uint64_t v393;
  uint64_t v395;
  int v396;
  unsigned int *v397;
  int v398;
  _BYTE v400[32];
  unsigned int v401;
  int v402;
  __int128 v403;
  char v404;
  char v405;
  char v406;
  int v407;
  char v408;
  uint64_t v409;
  unsigned int v410;
  int v411;
  int v412;
  int v413;
  BOOL v414;
  uint64_t v415[4];
  int v416[8];
  _BYTE v417[24];
  _OWORD v418[2];
  _QWORD v419[3];
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  char v429;
  void *v430[37];

  v7 = a1;
  v8 = 0;
  v430[34] = *(void **)MEMORY[0x24BDAC8D0];
  v401 = 0;
  v397 = (unsigned int *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      v9 = *(unsigned __int16 *)(v7 + 32);
      if (v9 <= 61)
        break;
      if (v9 <= 169)
      {
        if (v9 <= 98)
        {
          switch(v9)
          {
            case 'H':
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              return sub_22F2EAAE8(a1, *(_DWORD *)(a1 + 40), a3);
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'O':
            case 'P':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
              goto LABEL_350;
            case 'M':
              v27 = v397;
              v26 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v28 = sub_22ED34574(*(unsigned int **)(v26 + 88), *(_DWORD *)(v26 + 40), *(_QWORD *)(*(_QWORD *)(v26 + 88) + 12888));
              v29 = "break";
              goto LABEL_288;
            case 'N':
              v41 = a1;
              v42 = a3;
              v43 = 0;
              v44 = 0;
              return sub_22E877D3C(v41, v42, v43, v44);
            case 'Q':
              v27 = v397;
              v26 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v28 = sub_22F344308(*(unsigned int **)(v26 + 88), *(_DWORD *)(v26 + 40), *(_QWORD *)(*(_QWORD *)(v26 + 88) + 12888));
              v29 = "continue";
              goto LABEL_288;
            case 'R':
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v45 = *(_DWORD *)(a1 + 40);
              v46 = *(unsigned __int16 *)(a1 + 32);
              if (v46 == 62)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                v47 = *(unsigned int *)(a1 + 40);
                v142 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v142 + 312) = v47;
                *(_DWORD *)(v142 + 316) = 16;
                if (*(char *)(v142 + 311) < 0)
                {
                  **(_BYTE **)(v142 + 288) = 0;
                  *(_QWORD *)(v142 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v142 + 288) = 0;
                  *(_BYTE *)(v142 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v418, v142);
                v143 = *(unsigned __int8 **)&v418[0];
                if (!*(_QWORD *)&v418[0])
                {
                  v143 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                  *(_QWORD *)&v418[0] = v143;
                }
                v143[*v143 + 1] = 1;
                v144 = *(_QWORD *)&v418[0];
                v145 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v145 + 1;
                *(_QWORD *)(v144 + 8 * v145 + 16) = "'default'";
                *(_BYTE *)(v144 + (v145 + 1) + 1) = 4;
                v146 = *(_QWORD *)&v418[0];
                v147 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v147 + 1;
                *(_QWORD *)(v146 + 8 * v147 + 16) = 61;
                BYTE4(v430[2]) = 0;
                *(void **)((char *)&v430[1] + 4) = 0;
                v430[4] = 0;
                v430[5] = (void *)0x100000000000000;
                LOBYTE(v430[6]) = 0;
                v430[0] = (void *)(v47 | (v47 << 32));
                LOBYTE(v430[1]) = 1;
                v430[3] = (void *)58;
              }
              else
              {
                if (v46 == 61)
                {
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                  LODWORD(v47) = *(_DWORD *)(a1 + 40);
                  goto LABEL_273;
                }
                LODWORD(v47) = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
                v148 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v148 + 312) = v47;
                *(_DWORD *)(v148 + 316) = 16;
                if (*(char *)(v148 + 311) < 0)
                {
                  **(_BYTE **)(v148 + 288) = 0;
                  *(_QWORD *)(v148 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v148 + 288) = 0;
                  *(_BYTE *)(v148 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v418, v148);
                v149 = *(unsigned __int8 **)&v418[0];
                if (!*(_QWORD *)&v418[0])
                {
                  v149 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                  *(_QWORD *)&v418[0] = v149;
                }
                v149[*v149 + 1] = 1;
                v150 = *(_QWORD *)&v418[0];
                v151 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v151 + 1;
                *(_QWORD *)(v150 + 8 * v151 + 16) = "'default'";
                *(_BYTE *)(v150 + (v151 + 1) + 1) = 4;
                v152 = *(_QWORD *)&v418[0];
                v153 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v153 + 1;
                *(_QWORD *)(v152 + 8 * v153 + 16) = 61;
                BYTE4(v430[2]) = 0;
                *(void **)((char *)&v430[1] + 4) = 0;
                v430[4] = 0;
                v430[5] = (void *)0x100000000000000;
                v430[0] = (void *)(v47 | ((unint64_t)v47 << 32));
                LOBYTE(v430[1]) = 0;
                v430[3] = (void *)58;
                LOBYTE(v430[6]) = 0;
              }
              sub_22E6D82D0((uint64_t *)v418, v430);
              if (SHIBYTE(v430[5]) < 0)
                operator delete(v430[3]);
              sub_22E3BB0B8((uint64_t)v418);
LABEL_273:
              v154 = a1;
              if (*(_WORD *)(a1 + 32) == 24)
              {
                v155 = sub_22F141A3C(v47, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
                v156 = v155;
                v157 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v157 + 312) = v155;
                *(_DWORD *)(v157 + 316) = 1587;
                if (*(char *)(v157 + 311) < 0)
                {
                  **(_BYTE **)(v157 + 288) = 0;
                  *(_QWORD *)(v157 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v157 + 288) = 0;
                  *(_BYTE *)(v157 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v418, v157);
                BYTE4(v430[2]) = 0;
                *(void **)((char *)&v430[1] + 4) = 0;
                v430[4] = 0;
                v430[5] = (void *)0x200000000000000;
                v430[0] = (void *)(v156 | (v156 << 32));
                LOBYTE(v430[1]) = 0;
                v430[3] = (void *)15136;
                LOBYTE(v430[6]) = 0;
                sub_22E6D82D0((uint64_t *)v418, v430);
                if (SHIBYTE(v430[5]) < 0)
                  operator delete(v430[3]);
                sub_22E3BB0B8((uint64_t)v418);
                v154 = a1;
              }
              else
              {
                v158 = sub_22E873C74(a1, 0, a3 & 6);
                if ((v158 & 1) == 0)
                  return sub_22ED2C5AC(*(_QWORD *)(v154 + 88), v45, v47, v158 & 0xFFFFFFFFFFFFFFFELL);
              }
              v158 = sub_22ED2B260(*(_QWORD *)(v154 + 88), v47, 0);
              return sub_22ED2C5AC(*(_QWORD *)(v154 + 88), v45, v47, v158 & 0xFFFFFFFFFFFFFFFELL);
            case 'S':
              v27 = v397;
              v26 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v48 = *(_DWORD *)(a1 + 40);
              if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 1) != 0)
                v49 = 14;
              else
                v49 = 6;
              sub_22E885C30(a1, v49);
              v50 = *(unsigned __int16 *)(a1 + 32);
              if ((**(_WORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x101) == 0 || v50 == 23)
              {
                if (v50 == 23)
                {
                  v52 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                  v53 = *(_QWORD *)(v52 + 32);
                  if (v53)
                  {
                    ++*(_WORD *)(v53 + 14);
                    ++*(_WORD *)(v52 + 16);
                  }
                }
                v101 = sub_22E873C74(a1, 0, 0);
              }
              else
              {
                sub_22E885C30(a1, 8);
                v101 = sub_22E873C74(a1, 0, 0);
                sub_22E885CF4(a1);
              }
              if (*(_WORD *)(a1 + 32) == 111)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                if (*(_WORD *)(a1 + 32) == 21)
                {
                  v102 = *(_DWORD *)(a1 + 40);
                  v430[0] = (void *)(a1 + 944);
                  LOBYTE(v430[1]) = *(_BYTE *)(a1 + 944);
                  *(_BYTE *)(a1 + 944) = 1;
                  v430[2] = (void *)a1;
                  LODWORD(v430[3]) = 1441813;
                  WORD2(v430[3]) = 62;
                  v430[6] = 0;
                  v430[4] = sub_22E80F720;
                  v430[5] = 0;
                  sub_22E811DE8((uint64_t)v430);
                  sub_22E831780(a1);
                  v103 = *(_DWORD *)(a1 + 16);
                  v104 = sub_22E83766C(a1, 0);
                  v105 = sub_22E83778C(a1, v104, 1);
                  if (v105 < 2)
                  {
                    v285 = *(unsigned __int16 *)(a1 + 32);
                    if (v285 > 0x18 || ((1 << v285) & 0x1500000) == 0)
                    {
                      strcpy((char *)v418, ">");
                      sub_22E885940(a1, (unsigned __int16 *)v418, 1, 0);
                    }
                    v286 = v103;
                    if (v103 != *(_DWORD *)(a1 + 16))
                      v286 = *(_DWORD *)(a1 + 40);
                    v107 = sub_22F32D6EC(*(_QWORD *)(a1 + 88), v103, v286, 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 16400));
                  }
                  else
                  {
                    v106 = v105;
                    if ((v105 & 1) != 0)
                      goto LABEL_212;
                    v107 = (uint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v105 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v418);
                  }
                  v106 = v107;
LABEL_212:
                  sub_22E811E8C((uint64_t)v430);
                  sub_22E885CF4(a1);
                  if (((v106 | v101) & 1) != 0)
                    v28 = 1;
                  else
                    v28 = sub_22F3440A8(*(_QWORD *)(a1 + 88), v48, v101 & 0xFFFFFFFFFFFFFFFELL, v102, LODWORD(v430[6]), (unsigned __int8 *)(v106 & 0xFFFFFFFFFFFFFFFELL), SHIDWORD(v430[6]));
                  *(_BYTE *)v430[0] = v430[1];
LABEL_287:
                  v29 = "do/while";
                  goto LABEL_288;
                }
                sub_22E884578(a1, (int *)v397, 1510, (uint64_t)v430);
                v159 = (unsigned __int8 *)v430[0];
                if (!v430[0])
                {
                  v159 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
                  v430[0] = v159;
                }
                v159[*v159 + 1] = 1;
                v160 = v430[0];
                v161 = *(unsigned __int8 *)v430[0];
                *(_BYTE *)v430[0] = v161 + 1;
                v160[v161 + 2] = "do/while";
                sub_22E3BB0B8((uint64_t)v430);
                LOWORD(v430[0]) = 62;
                v112 = (unsigned __int16 *)v430;
              }
              else
              {
                if ((v101 & 1) != 0)
                {
LABEL_286:
                  sub_22E885CF4(a1);
                  v28 = 1;
                  goto LABEL_287;
                }
                sub_22E884578(a1, (int *)v397, 1546, (uint64_t)v430);
                sub_22E3BB0B8((uint64_t)v430);
                v108 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v108 + 312) = v48;
                *(_DWORD *)(v108 + 316) = 104;
                if (*(char *)(v108 + 311) < 0)
                {
                  **(_BYTE **)(v108 + 288) = 0;
                  *(_QWORD *)(v108 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v108 + 288) = 0;
                  *(_BYTE *)(v108 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v418, v108);
                v109 = *(unsigned __int8 **)&v418[0];
                if (!*(_QWORD *)&v418[0])
                {
                  v109 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                  *(_QWORD *)&v418[0] = v109;
                }
                v109[*v109 + 1] = 1;
                v110 = *(_QWORD *)&v418[0];
                v111 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v111 + 1;
                *(_QWORD *)(v110 + 8 * v111 + 16) = "'do'";
                sub_22E3BB0B8((uint64_t)v418);
                strcpy((char *)v418, ">");
                v112 = (unsigned __int16 *)v418;
              }
              sub_22E885940(a1, v112, 1, 2);
              goto LABEL_286;
            case 'Y':
              v7 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v54 = *(_DWORD *)(a1 + 40);
              v55 = *(unsigned __int16 *)(a1 + 32);
              if (v55 == 169)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                v56 = *(_DWORD *)(a1 + 40);
                v55 = *(unsigned __int16 *)(a1 + 32);
              }
              else
              {
                v56 = 0;
              }
              if (v55 == 21)
              {
                v113 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x4101;
                if (v113)
                  v114 = 24;
                else
                  v114 = 0;
                sub_22E885C30(a1, v114);
                v430[0] = (void *)(a1 + 944);
                LOBYTE(v430[1]) = *(_BYTE *)(a1 + 944);
                *(_BYTE *)(a1 + 944) = 1;
                v430[2] = (void *)a1;
                LODWORD(v430[3]) = 1441813;
                WORD2(v430[3]) = 62;
                v430[6] = 0;
                v430[4] = sub_22E80F720;
                v430[5] = 0;
                sub_22E811DE8((uint64_t)v430);
                v425 = 0;
                v426 = 0;
                v427 = 0;
                if (*(_WORD *)(a1 + 32) == 3)
                {
                  v115 = *(_QWORD *)(a1 + 8);
                  if (*(_QWORD *)(v115 + 752))
                  {
                    *(_BYTE *)(v115 + 864) = 1;
                    *(_BYTE *)(*(_QWORD *)(v115 + 48) + 6) = 1;
                  }
                  v28 = 1;
                  *(_WORD *)(a1 + 32) = 1;
                  if (v113)
                    v116 = 9;
                  else
                    v116 = 7;
                  sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v116);
                  *(_BYTE *)v430[0] = v430[1];
LABEL_689:
                  v30 = v7;
                  goto LABEL_690;
                }
                v422 = 0uLL;
                v423 = a1 + 960;
                v424 = 0;
                sub_22E8103B4(a1, &v422, 0);
                v163 = *(unsigned __int16 *)(a1 + 32);
                v395 = v113;
                if (v163 == 62)
                {
                  if ((_DWORD)v422 && DWORD1(v422))
                  {
                    sub_22E8175C8(a1, (uint64_t *)&v422, 0);
                    sub_22E820B10(&v422);
                  }
                  v164 = *(_DWORD *)(a1 + 16);
                  v165 = (*(unsigned __int16 *)(a1 + 34) >> 4) & 1;
                  if (v164 < 0)
                    v165 = 1;
                  if (v165)
                    v166 = 0;
                  else
                    v166 = *(_DWORD *)(a1 + 16);
                  *(_DWORD *)(a1 + 40) = v164;
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                  v167 = 0;
                  v168 = 0;
                  v169 = 0;
                  goto LABEL_304;
                }
                if (v163 == 5
                  && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0
                  && sub_22F2EF340(a1))
                {
                  if ((_DWORD)v422 && DWORD1(v422))
                  {
                    sub_22E8175C8(a1, (uint64_t *)&v422, 0);
                    sub_22E820B10(&v422);
                  }
                  v287 = *(unsigned __int16 *)(a1 + 32);
                  if ((v287 - 7) >= 6)
                  {
                    v288 = 0;
                    if ((v287 - 13) >= 6 && v287 != 1)
                      v288 = *(_QWORD *)(a1 + 24);
                  }
                  else
                  {
                    v288 = 0;
                  }
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                  v362 = *(unsigned int *)(a1 + 40);
                  sub_22E8103B4(a1, &v422, 0);
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                  v425 = *(_DWORD *)(a1 + 40);
                  if (*(_WORD *)(a1 + 32) == 23)
                  {
                    v363 = sub_22E84AF40(a1);
                  }
                  else
                  {
                    v364 = sub_22E83766C(a1, 0);
                    v363 = sub_22E83778C(a1, v364, 1);
                  }
                  v426 = v363;
                  v365 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v365 + 312) = v362;
                  *(_DWORD *)(v365 + 316) = 1559;
                  if (*(char *)(v365 + 311) < 0)
                  {
                    **(_BYTE **)(v365 + 288) = 0;
                    *(_QWORD *)(v365 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v365 + 288) = 0;
                    *(_BYTE *)(v365 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)&v420, v365);
                  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0xA00) == 0x200)
                  {
                    BYTE4(v418[1]) = 0;
                    *(_QWORD *)((char *)v418 + 12) = 0;
                    *(_QWORD *)&v418[0] = v362 | (v362 << 32);
                    BYTE8(v418[0]) = 0;
                    v419[0] = 0;
                    *(_QWORD *)((char *)v419 + 7) = 0;
                    strcpy((char *)&v418[1] + 8, "auto &&");
                    *(_WORD *)((char *)&v419[1] + 7) = 7;
                  }
                  else
                  {
                    memset(v419, 0, sizeof(v419));
                    memset(v418, 0, sizeof(v418));
                  }
                  sub_22E6D82D0((uint64_t *)&v420, v418);
                  if (SHIBYTE(v419[1]) < 0)
                    operator delete(*((void **)&v418[1] + 1));
                  sub_22E3BB0B8((uint64_t)&v420);
                  v366 = sub_22F31DFC8(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v362, v288, (uint64_t)&v422);
                  v166 = 0;
                  v167 = 0;
                  v168 = 0;
                  v169 = 0;
                  v427 = v366;
                  goto LABEL_304;
                }
                if (sub_22F2EF460(a1))
                {
                  v388 = *(_WORD *)(a1 + 80);
                  v382 = *(_WORD *)(a1 + 84);
                  v385 = *(_WORD *)(a1 + 82);
                  if (!v113)
                  {
                    sub_22E884578(a1, (int *)v397, 1794, (uint64_t)&v420);
                    sub_22E3BB0B8((uint64_t)&v420);
                    sub_22E884578(a1, (int *)v397, 1957, (uint64_t)v417);
                    sub_22E3BB0B8((uint64_t)v417);
                  }
                  if (*(_WORD *)(a1 + 32) == 154)
                  {
                    sub_22F2E7898(a1, 9, (uint64_t)&v422);
                    v167 = 0;
                    v337 = 0;
                    v169 = 0;
                    goto LABEL_805;
                  }
                  v333 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
                  v334 = *(_BYTE *)(a1 + 945);
                  *(_BYTE *)(a1 + 945) = BYTE1(v333) & 1;
                  v335 = *(_DWORD *)(a1 + 16);
                  LODWORD(v418[0]) = 0;
                  v336 = sub_22E81801C(a1, 9, v418, (uint64_t)&v422, 0, (unint64_t)&v425 & (v333 << 55 >> 63), 0);
                  v337 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), (uint64_t)v336, v335, *(_DWORD *)(a1 + 16));
                  if (v425)
                  {
                    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
                      v338 = 1931;
                    else
                      v338 = 1821;
                    v339 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v339 + 312) = v425;
                    *(_DWORD *)(v339 + 316) = v338;
                    if (*(char *)(v339 + 311) < 0)
                    {
                      **(_BYTE **)(v339 + 288) = 0;
                      *(_QWORD *)(v339 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v339 + 288) = 0;
                      *(_BYTE *)(v339 + 311) = 0;
                    }
                    sub_22E78E558((uint64_t)v416, v339);
                    sub_22E3BB0B8((uint64_t)v416);
                    v167 = 0;
                    v169 = 0;
                    v427 = v337;
                    v337 = 0;
                    v7 = a1;
                  }
                  else
                  {
                    v369 = *(unsigned __int16 *)(a1 + 32);
                    if (v369 == 62)
                    {
                      v7 = a1;
                      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                    }
                    else
                    {
                      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) != 0
                        && v369 == 5
                        && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 2696))
                      {
                        sub_22ED2B390(*(_QWORD **)(a1 + 88), (uint64_t)v336);
                        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                        if (*(_WORD *)(a1 + 32) == 3)
                        {
                          v377 = *(_QWORD *)(a1 + 8);
                          if (*(_QWORD *)(v377 + 752))
                          {
                            *(_BYTE *)(v377 + 864) = 1;
                            *(_BYTE *)(*(_QWORD *)(v377 + 48) + 6) = 1;
                          }
                          v169 = 1;
                          v7 = a1;
                          *(_WORD *)(a1 + 32) = 1;
                          sub_22F31752C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v336);
                          v167 = 0;
                          v374 = 0;
                          *(_BYTE *)(a1 + 945) = v334;
                          goto LABEL_806;
                        }
                        v7 = a1;
                        v375 = sub_22E83766C(a1, 0);
                        v169 = 1;
                        v167 = sub_22E83778C(a1, v375, 1);
                        goto LABEL_804;
                      }
                      v7 = a1;
                      sub_22E884578(a1, (int *)v397, 1534, (uint64_t)v416);
                      sub_22E3BB0B8((uint64_t)v416);
                    }
                    v167 = 0;
                    v169 = 0;
                  }
LABEL_804:
                  *(_BYTE *)(v7 + 945) = v334;
LABEL_805:
                  v374 = 1;
LABEL_806:
                  sub_22E80F8BC(v7 + 2416, (unsigned __int16 *)v7);
                  *(_WORD *)(v7 + 80) = v388;
                  *(_WORD *)(v7 + 82) = v385;
                  *(_WORD *)(v7 + 84) = v382;
                  if ((v374 & 1) == 0)
                  {
                    v28 = 1;
                    goto LABEL_688;
                  }
                  v166 = 0;
                  v168 = v337;
                  goto LABEL_815;
                }
                if ((_DWORD)v422 && DWORD1(v422))
                {
                  sub_22E8175C8(a1, (uint64_t *)&v422, 0);
                  sub_22E820B10(&v422);
                }
                v356 = *(_QWORD *)(a1 + 88);
                v357 = sub_22E83766C(a1, 0);
                v358 = sub_22E83778C(a1, v357, 1);
                v359 = v358;
                if ((v358 & 1) == 0)
                  v359 = (uint64_t)sub_22EBBCB14(v356, (_DWORD *)(v358 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v418);
                v360 = *(_QWORD *)(a1 + 8);
                v361 = **(_QWORD **)(v360 + 56);
                v169 = (v361 & 0x4000) != 0
                    && *(_WORD *)(a1 + 32) == 5
                    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 2696);
                if ((v359 & 1) != 0)
                {
                  v368 = *(unsigned __int16 *)(a1 + 32);
                  if (v368 == 62)
                  {
                    v168 = 0;
                    v7 = a1;
                    goto LABEL_788;
                  }
                  v168 = 0;
                  v7 = a1;
                  if (!v169)
                  {
LABEL_789:
                    if (v368 != 61 || (**(_QWORD **)(v360 + 56) & 0x200) == 0 || (v168 & 0xFFFFFFFFFFFFFFFELL) == 0)
                    {
                      if ((v359 & 1) != 0)
                      {
                        LOWORD(v418[0]) = 22;
                        sub_22E885940(a1, (unsigned __int16 *)v418, 1, 3);
                        if (*(_WORD *)(a1 + 32) != 62)
                        {
                          v166 = 0;
                          v169 = 0;
                          v7 = a1;
                          goto LABEL_814;
                        }
                        v7 = a1;
                        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                      }
                      else
                      {
                        v7 = a1;
                        sub_22E884578(a1, (int *)v397, 1534, (uint64_t)&v420);
                        sub_22E3BB0B8((uint64_t)&v420);
                      }
                      v166 = 0;
                      v169 = 0;
LABEL_814:
                      v167 = 0;
LABEL_815:
                      v113 = v395;
LABEL_304:
                      v170 = 0;
                      v386 = 0u;
                      if (v169 || v425)
                      {
                        v380 = 0;
                        v383 = 0;
                      }
                      else
                      {
                        v169 = 0;
                        v171 = *(unsigned __int16 *)(v7 + 32);
                        if (v171 == 22 || v171 == 62)
                        {
                          v170 = 0;
                          v380 = 0;
                          v383 = 0;
                        }
                        else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 56) + 1) & 1) != 0)
                        {
                          v379 = *(_BYTE *)(v7 + 945);
                          *(_BYTE *)(v7 + 945) = 1;
                          sub_22E846DC0(v7, 0, v54, 0, 1, (uint64_t)&v425, 1, (uint64_t)v418);
                          v386 = v418[0];
                          v170 = LOBYTE(v418[1]);
                          v380 = BYTE2(v418[1]);
                          v383 = BYTE1(v418[1]);
                          if (v425)
                          {
                            if ((v168 & 0xFFFFFFFFFFFFFFFELL) != 0)
                            {
                              sub_22F0D5A50(v168 & 0xFFFFFFFFFFFFFFFELL);
                              if ((**(_QWORD **)(*(_QWORD *)(v7 + 8) + 56) & 0x1000) != 0)
                                v280 = 1912;
                              else
                                v280 = 1822;
                              v281 = *(_QWORD *)(v7 + 96);
                              *(_DWORD *)(v281 + 312) = v279;
                              *(_DWORD *)(v281 + 316) = v280;
                              if (*(char *)(v281 + 311) < 0)
                              {
                                **(_BYTE **)(v281 + 288) = 0;
                                *(_QWORD *)(v281 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v281 + 288) = 0;
                                *(_BYTE *)(v281 + 311) = 0;
                              }
                              sub_22E78E558((uint64_t)v418, v281);
                              sub_22F0D4E74(v168 & 0xFFFFFFFFFFFFFFFELL);
                              v283 = v282 & 0xFFFFFFFF00000000;
                            }
                            else
                            {
                              if ((**(_QWORD **)(*(_QWORD *)(v7 + 8) + 56) & 0x1000) != 0)
                                v348 = 1912;
                              else
                                v348 = 1822;
                              v349 = *(_QWORD *)(v7 + 96);
                              *(_DWORD *)(v349 + 312) = v425;
                              *(_DWORD *)(v349 + 316) = v348;
                              if (*(char *)(v349 + 311) < 0)
                              {
                                **(_BYTE **)(v349 + 288) = 0;
                                *(_QWORD *)(v349 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v349 + 288) = 0;
                                *(_BYTE *)(v349 + 311) = 0;
                              }
                              sub_22E78E558((uint64_t)v418, v349);
                              LODWORD(v282) = 0;
                              v283 = 0;
                            }
                            v350 = v283 | v282;
                            v351 = *(_QWORD *)&v418[0];
                            if (!*(_QWORD *)&v418[0])
                            {
                              v351 = sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                              *(_QWORD *)&v418[0] = v351;
                            }
                            sub_22E4D6448(v351 + 336, v350, 1);
                            sub_22E3BB0B8((uint64_t)v418);
                            if (v166)
                            {
                              v352 = *(_QWORD *)(v7 + 96);
                              *(_DWORD *)(v352 + 312) = v166;
                              *(_DWORD *)(v352 + 316) = 1950;
                              if (*(char *)(v352 + 311) < 0)
                              {
                                **(_BYTE **)(v352 + 288) = 0;
                                *(_QWORD *)(v352 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v352 + 288) = 0;
                                *(_BYTE *)(v352 + 311) = 0;
                              }
                              sub_22E78E558((uint64_t)v415, v352);
                              v353 = (unsigned __int8 *)v415[0];
                              if (!v415[0])
                              {
                                v353 = (unsigned __int8 *)sub_22E3B8AAC(v415[1]);
                                v415[0] = (uint64_t)v353;
                              }
                              v353[*v353 + 1] = 2;
                              v354 = v415[0];
                              v355 = *(unsigned __int8 *)v415[0];
                              *(_BYTE *)v415[0] = v355 + 1;
                              *(_QWORD *)(v354 + 8 * v355 + 16) = 2;
                              BYTE4(v418[1]) = 0;
                              *(_QWORD *)((char *)v418 + 12) = 0;
                              memset(v419, 0, 17);
                              *((_QWORD *)&v418[1] + 1) = 0;
                              *(_QWORD *)&v418[0] = v166 | ((unint64_t)v166 << 32);
                              BYTE8(v418[0]) = 1;
                              sub_22E6D82D0(v415, v418);
                              if (SHIBYTE(v419[1]) < 0)
                                operator delete(*((void **)&v418[1] + 1));
                              sub_22E3BB0B8((uint64_t)v415);
                            }
                          }
                          v169 = 0;
                          *(_BYTE *)(v7 + 945) = v379;
                        }
                        else
                        {
                          v256 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 12888);
                          *(_QWORD *)(v256 + 40) = v256;
                          *(_QWORD *)(v256 + 48) = v256;
                          *(_DWORD *)(v256 + 8) |= 6u;
                          v257 = sub_22E83766C(v7, 0);
                          v170 = 1;
                          v258 = sub_22E83778C(v7, v257, 1);
                          if ((v258 & 1) != 0)
                          {
                            v169 = 0;
                            v380 = 0;
                            v383 = 0;
                          }
                          else
                          {
                            sub_22EB530EC(*(_QWORD *)(v7 + 88), v54, v258 & 0xFFFFFFFFFFFFFFFELL, 0, 1, (uint64_t)v418);
                            v169 = 0;
                            v386 = v418[0];
                            v170 = LOBYTE(v418[1]);
                            v380 = BYTE2(v418[1]);
                            v383 = BYTE1(v418[1]);
                          }
                        }
                      }
                      goto LABEL_376;
                    }
                    sub_22E884578(a1, (int *)v397, 1558, (uint64_t)v418);
                    sub_22F0D4E74(v168 & 0xFFFFFFFFFFFFFFFELL);
                    v372 = v371;
                    v373 = *(_QWORD *)&v418[0];
                    if (!*(_QWORD *)&v418[0])
                    {
                      v373 = sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                      *(_QWORD *)&v418[0] = v373;
                    }
                    v170 = 1;
                    sub_22E4D6448(v373 + 336, v372, 1);
                    sub_22E3BB0B8((uint64_t)v418);
                    LOWORD(v418[0]) = 22;
                    v7 = a1;
                    sub_22E885940(a1, (unsigned __int16 *)v418, 1, 2);
                    v169 = 0;
                    v380 = 0;
                    v383 = 0;
                    v386 = 0u;
                    v167 = 0;
LABEL_376:
                    v210 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 12888);
                    v211 = *(_DWORD *)(v210 + 8);
                    if ((v211 & 4) == 0)
                    {
                      *(_QWORD *)(v210 + 40) = v210;
                      *(_QWORD *)(v210 + 48) = v210;
                      *(_DWORD *)(v210 + 8) = v211 | 6;
                    }
                    if (v425)
                      v212 = 1;
                    else
                      v212 = v169;
                    if ((v212 & 1) != 0)
                      goto LABEL_537;
                    if (*(_WORD *)(v7 + 32) == 62)
                      goto LABEL_535;
                    if (v170)
                    {
                      LOWORD(v418[0]) = 22;
                      sub_22E885940(v7, (unsigned __int16 *)v418, 1, 3);
                    }
                    else
                    {
                      sub_22E884578(v7, (int *)v397, 1534, (uint64_t)v418);
                      sub_22E3BB0B8((uint64_t)v418);
                    }
                    v261 = *(unsigned __int16 *)(v7 + 32);
                    if (v261 == 62)
                    {
LABEL_535:
                      *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
                      sub_22F18FB4C(*(_QWORD *)(v7 + 8), v397);
                      v261 = *(unsigned __int16 *)(v7 + 32);
                    }
                    if (v261 == 22)
                    {
LABEL_537:
                      v262 = 0;
                    }
                    else
                    {
                      v263 = sub_22E83766C(v7, 0);
                      v264 = sub_22E83778C(v7, v263, 1);
                      v265 = *(_QWORD *)(v7 + 88);
                      v266 = v264 & 0xFFFFFFFFFFFFFFFELL;
                      if ((v264 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        sub_22EFF605C(v264 & 0xFFFFFFFFFFFFFFFELL);
                        v268 = v267;
                      }
                      else
                      {
                        v268 = 0;
                      }
                      v262 = sub_22EBCF22C(v265, v266, v268, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
                      v113 = v395;
                    }
                    sub_22E811E8C((uint64_t)v430);
                    v269 = v425;
                    if (!v56 || v425)
                    {
                      if (!v56 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x10) == 0)
                      {
LABEL_553:
                        if (v269)
                        {
                          v272 = a1;
                          v273 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v426 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v409);
                          v274 = v168;
                          v275 = sub_22ED31E48(*(_QWORD **)(v272 + 88), *(_QWORD *)(*(_QWORD *)(v272 + 88) + 12888), v54, v56, v168 & 0xFFFFFFFFFFFFFFFELL, (_BYTE *)(v427 & 0xFFFFFFFFFFFFFFFELL), v425, v273 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(v430[6]), 0, 0);
                          v276 = 0;
                          v277 = v275 & 0xFFFFFFFFFFFFFFFELL;
                        }
                        else if (v169)
                        {
                          v272 = a1;
                          v278 = v167;
                          v274 = v168;
                          v277 = 0;
                          v276 = sub_22ED3169C(*(_QWORD *)(a1 + 88), v54, v168 & 0xFFFFFFFFFFFFFFFELL, v278 & 0xFFFFFFFFFFFFFFFELL, SHIDWORD(v430[6])) & 0xFFFFFFFFFFFFFFFELL;
                        }
                        else
                        {
                          v274 = v168;
                          v277 = 0;
                          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72))
                          {
                            v276 = 0;
                            v272 = a1;
                            if (v274 >= 2)
                            {
                              sub_22EC9AE58(*(_QWORD **)(a1 + 88), v54, (unsigned int *)(v274 & 0xFFFFFFFFFFFFFFFELL));
                              v277 = 0;
                              v276 = 0;
                            }
                          }
                          else
                          {
                            v276 = 0;
                            v272 = a1;
                          }
                        }
                        v320 = *(unsigned __int16 *)(v272 + 32);
                        if (!v113 || v320 == 23)
                        {
                          if (v320 == 23)
                          {
                            v323 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                            v324 = *(_QWORD *)(v323 + 32);
                            if (v324)
                            {
                              ++*(_WORD *)(v324 + 14);
                              ++*(_WORD *)(v323 + 16);
                            }
                          }
                          v321 = 0;
                          v322 = (uint64_t)a4;
                          if (!v395)
                            goto LABEL_671;
                        }
                        else
                        {
                          v321 = a1;
                          sub_22E885C30(a1, 8);
                          v322 = (uint64_t)a4;
                        }
                        v325 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                        v326 = *(_QWORD *)(v325 + 32);
                        if (v326)
                        {
                          --*(_WORD *)(v326 + 14);
                          --*(_WORD *)(v325 + 16);
                        }
LABEL_671:
                        v409 = a1;
                        v327 = *(_DWORD *)(a1 + 16);
                        v410 = v54;
                        v411 = v327;
                        v412 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2176);
                        v413 = 2;
                        v414 = *(unsigned __int16 *)(a1 + 32) == 23;
                        if (*(_DWORD *)(a1 + 2632))
                        {
                          v410 = *(_DWORD *)(a1 + 2632);
                          *(_DWORD *)(a1 + 2632) = 0;
                        }
                        v328 = sub_22E873C74(a1, v322, 0);
                        if (v328 >= 2)
                          sub_22E879644(&v409);
                        if (v321)
                          sub_22E885CF4(v321);
                        sub_22E885CF4(a1);
                        if ((v328 & 1) != 0)
                        {
                          v28 = 1;
                        }
                        else if (v169)
                        {
                          v28 = 1;
                          if (v276 && (v328 & 0xFFFFFFFFFFFFFFFELL) != 0)
                          {
                            *(_QWORD *)(v276 + 24) = v328 & 0xFFFFFFFFFFFFFFFELL;
                            v28 = v276;
                          }
                        }
                        else
                        {
                          v329 = *(_QWORD *)(a1 + 88);
                          if (v425)
                          {
                            v330 = sub_22ED33C64(v329, v277, v328 & 0xFFFFFFFFFFFFFFFELL);
                          }
                          else
                          {
                            v403 = v386;
                            v404 = v170;
                            v405 = v383;
                            v406 = v380;
                            v407 = v428;
                            v408 = v429;
                            v330 = sub_22ED31008(v329, v54, (int)v430[6], v274 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v403, v262, SHIDWORD(v430[6]), (_DWORD *)(v328 & 0xFFFFFFFFFFFFFFFELL));
                          }
                          v28 = v330;
                        }
                        v7 = 0;
                        goto LABEL_688;
                      }
                      v271 = *(_QWORD *)(a1 + 96);
                      *(_DWORD *)(v271 + 312) = v56;
                      *(_DWORD *)(v271 + 316) = 1949;
                      if (*(char *)(v271 + 311) < 0)
                      {
                        **(_BYTE **)(v271 + 288) = 0;
                        *(_QWORD *)(v271 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v271 + 288) = 0;
                        *(_BYTE *)(v271 + 311) = 0;
                      }
                      sub_22E78E558((uint64_t)v415, v271);
                    }
                    else
                    {
                      v270 = *(_QWORD *)(a1 + 96);
                      *(_DWORD *)(v270 + 312) = v56;
                      *(_DWORD *)(v270 + 316) = 1557;
                      if (*(char *)(v270 + 311) < 0)
                      {
                        **(_BYTE **)(v270 + 288) = 0;
                        *(_QWORD *)(v270 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v270 + 288) = 0;
                        *(_BYTE *)(v270 + 311) = 0;
                      }
                      sub_22E78E558((uint64_t)v415, v270);
                      v56 = 0;
                    }
                    sub_22E3BB0B8((uint64_t)v415);
                    v269 = v425;
                    v113 = v395;
                    goto LABEL_553;
                  }
                }
                else
                {
                  if (!v169)
                  {
                    v367 = (v361 & 0x200) != 0 && *(unsigned __int16 *)(a1 + 32) == 61;
                    v7 = a1;
                    v168 = sub_22ED2B1FC(*(_QWORD *)(a1 + 88), v359, !v367);
                    v368 = *(unsigned __int16 *)(a1 + 32);
                    v360 = *(_QWORD *)(a1 + 8);
                    if (v368 == 62)
                      goto LABEL_788;
                    goto LABEL_789;
                  }
                  v7 = a1;
                  v168 = sub_22F3441F0(*(_QWORD *)(a1 + 88), (_DWORD *)(v359 & 0xFFFFFFFFFFFFFFFELL));
                  v360 = *(_QWORD *)(a1 + 8);
                  if (*(_WORD *)(a1 + 32) == 62)
                  {
LABEL_788:
                    *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
                    sub_22F18FB4C(v360, v397);
                    v166 = 0;
                    goto LABEL_814;
                  }
                }
                *(_DWORD *)(v7 + 40) = *(_DWORD *)(v7 + 16);
                sub_22F18FB4C(v360, v397);
                if (*(_WORD *)(v7 + 32) == 3)
                {
                  v376 = *(_QWORD *)(a1 + 8);
                  if (*(_QWORD *)(v376 + 752))
                  {
                    *(_BYTE *)(v376 + 864) = 1;
                    *(_BYTE *)(*(_QWORD *)(v376 + 48) + 6) = 1;
                  }
                  v28 = 1;
                  v7 = a1;
                  *(_WORD *)(a1 + 32) = 1;
                  sub_22F31752C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0);
LABEL_688:
                  sub_22E8D1BC4(v423, (uint64_t)&v423);
                  sub_22E80F94C(&v424);
                  sub_22E80F94C((uint64_t *)&v422 + 1);
                  *(_BYTE *)v430[0] = v430[1];
                  if (!v7)
                    return v28;
                  goto LABEL_689;
                }
                v7 = a1;
                v370 = sub_22E83766C(a1, 0);
                v169 = 1;
                v167 = sub_22E83778C(a1, v370, 1);
                v170 = 0;
                v380 = 0;
                v383 = 0;
                v386 = 0u;
                goto LABEL_376;
              }
              sub_22E884578(a1, (int *)v397, 1510, (uint64_t)v430);
              v117 = (unsigned __int8 *)v430[0];
              if (!v430[0])
              {
                v117 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
                v430[0] = v117;
              }
              v28 = 1;
              v117[*v117 + 1] = 1;
              v118 = (char *)v430[0];
              v119 = *(unsigned __int8 *)v430[0];
              *(_BYTE *)v430[0] = v119 + 1;
              v120 = &v118[8 * v119];
              v121 = "for";
              goto LABEL_249;
            case 'Z':
              v27 = v397;
              v26 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v57 = *(_DWORD *)(a1 + 40);
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) == 0)
              {
                v58 = *(unsigned __int16 *)(a1 + 32);
                if (v58 == 30)
                {
                  sub_22E884578(a1, (int *)v397, 1829, (uint64_t)v430);
                  sub_22E3BB0B8((uint64_t)v430);
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                  v181 = *(_DWORD *)(a1 + 40);
                  v182 = sub_22E83766C(a1, 0);
                  v183 = sub_22E83778C(a1, v182, 1);
                  if ((v183 & 1) != 0)
                  {
                    strcpy((char *)v418, ">");
                    v28 = 1;
                    sub_22E885940(a1, (unsigned __int16 *)v418, 1, 2);
                  }
                  else
                  {
                    v28 = sub_22ED343AC(*(_QWORD *)(a1 + 88), v57, v181, v183 & 0xFFFFFFFFFFFFFFFELL);
                  }
                }
                else
                {
                  if (v58 != 5)
                  {
                    sub_22E884578(a1, (int *)v397, 15, (uint64_t)v430);
                    v59 = (unsigned __int8 *)v430[0];
                    if (!v430[0])
                    {
                      v59 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
                      v430[0] = v59;
                    }
                    v59[*v59 + 1] = 4;
                    v60 = v430[0];
                    v61 = *(unsigned __int8 *)v430[0];
                    *(_BYTE *)v430[0] = v61 + 1;
                    v60[v61 + 2] = 5;
                    sub_22E3BB0B8((uint64_t)v430);
LABEL_241:
                    v28 = 1;
                    goto LABEL_242;
                  }
                  v284 = sub_22EC67D70(*(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), 0);
                  v28 = sub_22F344258(*(_QWORD *)(a1 + 88), v57, *(_DWORD *)(a1 + 16), v284);
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                }
LABEL_242:
                v29 = "goto";
                goto LABEL_288;
              }
              v122 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v122 + 312) = v57;
              *(_DWORD *)(v122 + 316) = 1599;
              if (*(char *)(v122 + 311) < 0)
              {
                **(_BYTE **)(v122 + 288) = 0;
                *(_QWORD *)(v122 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v122 + 288) = 0;
                *(_BYTE *)(v122 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v430, v122);
              v123 = (unsigned __int8 *)v430[0];
              if (!v430[0])
              {
                v123 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
                v430[0] = v123;
              }
              v123[*v123 + 1] = 2;
              v124 = v430[0];
              v125 = *(unsigned __int8 *)v430[0];
              *(_BYTE *)v430[0] = v125 + 1;
              v124[v125 + 2] = 3;
              sub_22E3BB0B8((uint64_t)v430);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              goto LABEL_241;
            case '[':
              v7 = a1;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v37 = *(_DWORD *)(a1 + 40);
              v38 = *(unsigned __int16 *)(a1 + 32);
              if (v38 == 161)
              {
                if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
                  v39 = 1901;
                else
                  v39 = 1799;
                sub_22E884578(a1, (int *)v397, v39, (uint64_t)v430);
                sub_22E3BB0B8((uint64_t)v430);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                v40 = *(unsigned __int16 *)(a1 + 32);
LABEL_204:
                if (v40 == 21)
                {
                  v99 = 0;
                  v98 = 0;
                  v100 = 0;
                  goto LABEL_328;
                }
LABEL_253:
                sub_22E884578(a1, (int *)v397, 1510, (uint64_t)v418);
                v135 = *(unsigned __int8 **)&v418[0];
                if (!*(_QWORD *)&v418[0])
                {
                  v135 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v418[0] + 1));
                  *(_QWORD *)&v418[0] = v135;
                }
                v28 = 1;
                v135[*v135 + 1] = 1;
                v136 = *(_QWORD *)&v418[0];
                v137 = **(_BYTE **)&v418[0];
                **(_BYTE **)&v418[0] = v137 + 1;
                *(_QWORD *)(v136 + 8 * v137 + 16) = "if";
                sub_22E3BB0B8((uint64_t)v418);
                strcpy((char *)v418, ">");
                v129 = (unsigned __int16 *)v418;
                goto LABEL_251;
              }
              if (v38 == 174)
              {
                v98 = 0;
              }
              else
              {
                v40 = *(unsigned __int16 *)(a1 + 32);
                if (v38 != 40)
                  goto LABEL_204;
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                v98 = *(_DWORD *)(a1 + 40);
                v40 = *(unsigned __int16 *)(a1 + 32);
                if (v40 != 174)
                {
                  if (v98)
                    goto LABEL_253;
                  goto LABEL_204;
                }
              }
              if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x2000) != 0)
                v184 = 1919;
              else
                v184 = 1798;
              sub_22E884578(a1, (int *)v397, v184, (uint64_t)v430);
              sub_22E3BB0B8((uint64_t)v430);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              v100 = *(_DWORD *)(a1 + 40);
              v99 = 1;
LABEL_328:
              v185 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x101;
              if (v185)
              {
                sub_22E885C30(a1, 24);
                v186 = a1;
              }
              else
              {
                v186 = 0;
              }
              v415[0] = 0;
              *(_QWORD *)v417 = 0;
              *(_QWORD *)&v417[8] = 0;
              *(_DWORD *)&v417[15] = 0;
              LODWORD(v403) = 0;
              v428 = 0;
              if ((v99 & 1) != 0)
              {
                v389 = v100;
              }
              else
              {
                if ((sub_22E879370(a1, v415, (uint64_t)v417, v37, v38 == 161, &v403, &v428) & 1) != 0)
                {
LABEL_624:
                  v28 = 1;
                  goto LABEL_659;
                }
                v389 = v100;
                if (v38 == 161)
                {
                  v188 = v417[17];
                  if (v417[17])
                    v187 = v417[18];
                  else
                    v187 = 0;
                  goto LABEL_334;
                }
              }
              v187 = 0;
              v188 = 0;
LABEL_334:
              v189 = *(unsigned __int16 *)(a1 + 32);
              if (v185)
                v190 = v189 == 23;
              else
                v190 = 1;
              v393 = v185;
              if (v190)
              {
                if (v189 == 23)
                {
                  v191 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                  v192 = *(_QWORD *)(v191 + 32);
                  v194 = 0;
                  if (v192)
                  {
                    ++*(_WORD *)(v192 + 14);
                    ++*(_WORD *)(v191 + 16);
                  }
                  v193 = 23;
                }
                else
                {
                  v194 = 0;
                  v193 = *(unsigned __int16 *)(a1 + 32);
                }
              }
              else
              {
                sub_22E885C30(a1, 8);
                v193 = *(unsigned __int16 *)(a1 + 32);
                v194 = a1;
              }
              *(_QWORD *)&v418[0] = a1;
              v226 = *(_DWORD *)(a1 + 16);
              *((_QWORD *)&v418[0] + 1) = __PAIR64__(v226, v37);
              v387 = v226;
              *(_QWORD *)&v418[1] = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 2176);
              BYTE8(v418[1]) = v193 == 23;
              if (*(_DWORD *)(a1 + 2632))
              {
                DWORD2(v418[0]) = *(_DWORD *)(a1 + 2632);
                *(_DWORD *)(a1 + 2632) = 0;
              }
              v402 = 0;
              if (v187)
                v227 = 1;
              else
                v227 = v188 == 0;
              v228 = !v227;
              if (v99)
                v229 = 5;
              else
                v229 = 2;
              if (v98)
                v230 = 0;
              else
                v230 = v99;
              v396 = v188;
              v390 = v229;
              if ((v230 & 1) != 0 || (v228 & 1) != 0)
              {
                v381 = v187;
                v384 = v186;
                v232 = *(_QWORD *)(a1 + 88);
                if (v98)
                  v233 = 2;
                else
                  v233 = v229;
                v416[0] = v233;
                *(_QWORD *)&v422 = 0;
                LODWORD(v409) = 3;
                *(_QWORD *)&v420 = *(unsigned int *)(v232 + 1704);
                sub_22EB4DDB8(v232 + 3688, v416, (int *)&v420, (__int16 *)(v232 + 1693), (uint64_t *)&v422, (int *)&v409);
                v234 = *(unsigned int *)(v232 + 3696);
                v235 = v234 - 2;
                v236 = *(_QWORD *)(v232 + 3688);
                v237 = *(_DWORD *)(v236 + 576 * (v234 - 2));
                v238 = v37;
                v239 = v99;
                if (v237 == 5)
                {
                  *(_BYTE *)(v236 + 576 * v234 - 4) = *(_BYTE *)(v236 + 576 * v235 + 572);
                  v240 = 1;
                }
                else if (v237 == 2)
                {
                  *(_BYTE *)(v236 + 576 * v234 - 4) = 1;
                  v240 = *(_BYTE *)(v236 + 576 * v235 + 573) != 0;
                }
                else
                {
                  v240 = 0;
                  *(_BYTE *)(v236 + 576 * v234 - 4) = 0;
                }
                v241 = v236 + 576 * v234;
                *(_BYTE *)(v241 - 3) = v240;
                *(_WORD *)(v232 + 1693) = 0;
                if (*(_DWORD *)(v232 + 1848))
                {
                  llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v232 + 1776), (llvm::SmallPtrSetImplBase *)(v241 - 560));
                  sub_22EAEAE08(v232 + 1840, (uint64_t *)(v241 - 496));
                }
                v231 = sub_22E873C74(a1, (uint64_t)&v402, 0);
                sub_22EB48E64(v232);
                v99 = v239;
                v37 = v238;
                v186 = v384;
                v187 = v381;
              }
              else
              {
                v231 = sub_22E873C74(a1, (uint64_t)&v402, 0);
              }
              if (*(_WORD *)(a1 + 32) != 85)
                sub_22E879644((uint64_t *)v418);
              if (v194)
                sub_22E885CF4(v194);
              v242 = *(unsigned __int16 *)(a1 + 32);
              if (v242 == 3)
              {
                v250 = *(_QWORD *)(a1 + 8);
                if (*(_QWORD *)(v250 + 752))
                {
                  *(_BYTE *)(v250 + 864) = 1;
                  *(_BYTE *)(*(_QWORD *)(v250 + 48) + 6) = 1;
                }
                v28 = 1;
                *(_WORD *)(a1 + 32) = 1;
                sub_22F314740(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v189 == 23);
                goto LABEL_659;
              }
              v378 = v98;
              if (v242 == 85)
              {
                v243 = v187;
                if (a4)
                  *a4 = *v397;
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
                v244 = *(_DWORD *)(a1 + 40);
                v245 = *(_DWORD *)(a1 + 16);
                v246 = *(unsigned __int16 *)(a1 + 32);
                v398 = v245;
                if (!v393 || v246 == 23)
                {
                  v249 = v390;
                  if (v246 == 23)
                  {
                    v254 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                    v255 = *(_QWORD *)(v254 + 32);
                    v7 = 0;
                    if (v255)
                    {
                      ++*(_WORD *)(v255 + 14);
                      ++*(_WORD *)(v254 + 16);
                    }
                    v246 = 23;
                    v247 = v245;
                    v248 = a1;
                  }
                  else
                  {
                    v248 = a1;
                    v7 = 0;
                    v247 = *(_DWORD *)(a1 + 16);
                  }
                }
                else
                {
                  sub_22E885C30(a1, 8);
                  v247 = *(_DWORD *)(a1 + 16);
                  v246 = *(unsigned __int16 *)(a1 + 32);
                  v248 = a1;
                  v249 = v390;
                }
                v289 = v186;
                *(_QWORD *)&v422 = v248;
                *((_QWORD *)&v422 + 1) = __PAIR64__(v247, v244);
                LODWORD(v423) = *(_DWORD *)(*(_QWORD *)(v248 + 8) + 2176);
                HIDWORD(v423) = 1;
                LOBYTE(v424) = v246 == 23;
                if (*(_DWORD *)(v248 + 2632))
                {
                  DWORD2(v422) = *(_DWORD *)(v248 + 2632);
                  *(_DWORD *)(v248 + 2632) = 0;
                }
                v290 = v231;
                if (v246 != 23)
                  *(_DWORD *)(a1 + 2632) = v244;
                if (v243)
                  v291 = v396 == 0;
                else
                  v291 = 1;
                v292 = !v291;
                v293 = v99;
                if (v291)
                  v294 = v99;
                else
                  v294 = 1;
                if (v98)
                  v295 = v294;
                else
                  v295 = v292;
                v296 = *(_QWORD *)(a1 + 88);
                if (v295 == 1)
                {
                  v297 = v98 ? v249 : 2;
                  LODWORD(v409) = v297;
                  *(_QWORD *)&v420 = 0;
                  v425 = 3;
                  *(_QWORD *)v416 = *(unsigned int *)(v296 + 1704);
                  sub_22EB4DDB8(v296 + 3688, (int *)&v409, v416, (__int16 *)(v296 + 1693), (uint64_t *)&v420, (int *)&v425);
                  v298 = *(unsigned int *)(v296 + 3696);
                  v299 = v298 - 2;
                  v300 = *(_QWORD *)(v296 + 3688);
                  v301 = *(_DWORD *)(v300 + 576 * (v298 - 2));
                  if (v301 == 5)
                  {
                    *(_BYTE *)(v300 + 576 * v298 - 4) = *(_BYTE *)(v300 + 576 * v299 + 572);
                    v302 = 1;
                  }
                  else if (v301 == 2)
                  {
                    *(_BYTE *)(v300 + 576 * v298 - 4) = 1;
                    v302 = *(_BYTE *)(v300 + 576 * v299 + 573) != 0;
                  }
                  else
                  {
                    v302 = 0;
                    *(_BYTE *)(v300 + 576 * v298 - 4) = 0;
                  }
                  v303 = v300 + 576 * v298;
                  *(_BYTE *)(v303 - 3) = v302;
                  *(_WORD *)(v296 + 1693) = 0;
                  if (*(_DWORD *)(v296 + 1848))
                  {
                    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v296 + 1776), (llvm::SmallPtrSetImplBase *)(v303 - 560));
                    sub_22EAEAE08(v296 + 1840, (uint64_t *)(v303 - 496));
                  }
                }
                v253 = sub_22E873C74(a1, 0, 0);
                if (v253 >= 2)
                  sub_22E879644((uint64_t *)&v422);
                if (v7)
                  sub_22E885CF4(v7);
                if (v295)
                  sub_22EB48E64(v296);
                v7 = a1;
                v99 = v293;
                v231 = v290;
                v186 = v289;
                v252 = v398;
              }
              else
              {
                if (v402)
                {
                  v251 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v251 + 312) = v402;
                  *(_DWORD *)(v251 + 316) = 1948;
                  if (*(char *)(v251 + 311) < 0)
                  {
                    **(_BYTE **)(v251 + 288) = 0;
                    *(_QWORD *)(v251 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v251 + 288) = 0;
                    *(_BYTE *)(v251 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)&v422, v251);
                  sub_22E3BB0B8((uint64_t)&v422);
                }
                v244 = 0;
                v252 = 0;
                v253 = 0;
              }
              if (v186)
                sub_22E885CF4(v186);
              v186 = 0;
              v28 = 1;
              if ((v253 & v231 & 1) != 0 || (v231 & (v253 < 2)) != 0)
              {
LABEL_659:
                if (!v186)
                  return v28;
                v30 = v186;
                goto LABEL_690;
              }
              v304 = (unsigned __int8 *)(v231 & 0xFFFFFFFFFFFFFFFELL);
              if ((v231 & 0xFFFFFFFFFFFFFFFELL) == 0 && (v253 & 1) != 0)
              {
                v186 = 0;
                goto LABEL_624;
              }
              if (!v99)
                goto LABEL_639;
              if (v304)
              {
                v305 = *v304;
                if (v305 != 101)
                  goto LABEL_631;
                v304 = (unsigned __int8 *)*((_QWORD *)v304 + 1);
              }
              if (!v304)
                goto LABEL_652;
              v305 = *v304;
LABEL_631:
              if (v305 == 8)
              {
                if (!v253)
                {
LABEL_639:
                  if ((v231 & 1) != 0)
                    v231 = sub_22ED2B260(*(_QWORD *)(v7 + 88), v387, 0);
                  if ((v253 & 1) != 0)
                    v253 = sub_22ED2B260(*(_QWORD *)(v7 + 88), v252, 0);
                  v308 = v99 ^ 1;
                  if (v38 == 161)
                    v308 = 1;
                  if (v378)
                    v309 = 3;
                  else
                    v309 = 2;
                  if (v308)
                    v310 = v38 == 161;
                  else
                    v310 = v309;
                  v311 = *(_QWORD *)(v7 + 88);
                  v420 = *(_OWORD *)v417;
                  v421 = *(_QWORD *)&v417[16];
                  v28 = sub_22ED2D6D0(v311, v37, v310, v403, v415[0] & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v420, v428, (unsigned int *)(v231 & 0xFFFFFFFFFFFFFFFELL), v244, (_BYTE *)(v253 & 0xFFFFFFFFFFFFFFFELL));
                  goto LABEL_658;
                }
                v306 = (unsigned __int8 *)(v253 & 0xFFFFFFFFFFFFFFFELL);
                if ((v253 & 0xFFFFFFFFFFFFFFFELL) != 0)
                {
                  v307 = *v306;
                  if (v307 != 101)
                    goto LABEL_638;
                  v306 = (unsigned __int8 *)*((_QWORD *)v306 + 1);
                }
                if (!v306)
                {
LABEL_732:
                  v346 = *(_QWORD *)(v7 + 96);
                  *(_DWORD *)(v346 + 312) = v244;
                  *(_DWORD *)(v346 + 316) = 16;
                  if (*(char *)(v346 + 311) < 0)
                  {
                    **(_BYTE **)(v346 + 288) = 0;
                    *(_QWORD *)(v346 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v346 + 288) = 0;
                    *(_BYTE *)(v346 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)&v420, v346);
                  v347 = (unsigned __int8 *)v420;
                  if (!(_QWORD)v420)
                  {
                    v347 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v420 + 1));
                    *(_QWORD *)&v420 = v347;
                  }
                  v28 = 1;
                  v347[*v347 + 1] = 1;
                  v314 = v420;
                  v315 = *(unsigned __int8 *)v420;
                  v316 = v315 + 1;
                  *(_BYTE *)v420 = v315 + 1;
                  v317 = "else";
LABEL_657:
                  *(_QWORD *)(v314 + 8 * v315 + 16) = v317;
                  *(_BYTE *)(v314 + v316 + 1) = 1;
                  v318 = v420;
                  v319 = *(unsigned __int8 *)v420;
                  *(_BYTE *)v420 = v319 + 1;
                  *(_QWORD *)(v318 + 8 * v319 + 16) = "{";
                  sub_22E3BB0B8((uint64_t)&v420);
LABEL_658:
                  v186 = 0;
                  goto LABEL_659;
                }
                v307 = *v306;
LABEL_638:
                if (v307 == 8)
                  goto LABEL_639;
                goto LABEL_732;
              }
LABEL_652:
              v312 = *(_QWORD *)(v7 + 96);
              *(_DWORD *)(v312 + 312) = v389;
              *(_DWORD *)(v312 + 316) = 16;
              if (*(char *)(v312 + 311) < 0)
              {
                **(_BYTE **)(v312 + 288) = 0;
                *(_QWORD *)(v312 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v312 + 288) = 0;
                *(_BYTE *)(v312 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v420, v312);
              v313 = (unsigned __int8 *)v420;
              if (!(_QWORD)v420)
              {
                v313 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v420 + 1));
                *(_QWORD *)&v420 = v313;
              }
              v28 = 1;
              v313[*v313 + 1] = 1;
              v314 = v420;
              v315 = *(unsigned __int8 *)v420;
              v316 = v315 + 1;
              *(_BYTE *)v420 = v315 + 1;
              v317 = "consteval";
              goto LABEL_657;
            default:
              if (v9 != 62)
                goto LABEL_350;
              v34 = (*(unsigned __int16 *)(a1 + 34) >> 4) & 1;
              v35 = *(_QWORD *)(a1 + 88);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
              return sub_22ED2B260(v35, *(_DWORD *)(a1 + 40), v34);
          }
        }
        v27 = v397;
        if (v9 > 110)
        {
          if (v9 != 111)
          {
            if (v9 != 127)
            {
              if (v9 == 151)
                return sub_22F2EEB18(a1);
              goto LABEL_350;
            }
            v26 = a1;
            if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
            {
              sub_22E8175C8(a1, (uint64_t *)a5, 0);
              sub_22E820B10((_QWORD *)a5);
            }
            LOBYTE(v430[0]) = 0;
            v28 = sub_22E87A594(a1, v430);
            if (LOBYTE(v430[0]))
              return v28;
            v29 = "asm";
            goto LABEL_288;
          }
          v7 = a1;
          v62 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 40) = v62;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
          if (*(_WORD *)(a1 + 32) == 21)
          {
            v63 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x101;
            if (v63)
              v64 = 30;
            else
              v64 = 6;
            sub_22E885C30(a1, v64);
            memset(v418, 0, 19);
            LODWORD(v420) = 0;
            *(_DWORD *)v417 = 0;
            if ((sub_22E879370(a1, 0, (uint64_t)v418, v62, 0, &v420, v417) & 1) == 0)
            {
              v177 = *(unsigned __int16 *)(a1 + 32);
              if (v63)
                v178 = v177 == 23;
              else
                v178 = 1;
              if (v178)
              {
                v197 = (uint64_t)a4;
                if (v177 == 23)
                {
                  v179 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
                  v180 = *(_QWORD *)(v179 + 32);
                  v7 = 0;
                  if (v180)
                  {
                    ++*(_WORD *)(v180 + 14);
                    ++*(_WORD *)(v179 + 16);
                  }
                  v177 = 23;
                  v196 = a1;
                }
                else
                {
                  v196 = a1;
                  v7 = 0;
                }
              }
              else
              {
                sub_22E885C30(a1, 8);
                v177 = *(unsigned __int16 *)(a1 + 32);
                v196 = a1;
                v197 = (uint64_t)a4;
              }
              v430[0] = (void *)v196;
              v430[1] = (void *)__PAIR64__(*(_DWORD *)(v196 + 16), v62);
              LODWORD(v430[2]) = *(_DWORD *)(*(_QWORD *)(v196 + 8) + 2176);
              HIDWORD(v430[2]) = 3;
              LOBYTE(v430[3]) = v177 == 23;
              if (*(_DWORD *)(v196 + 2632))
              {
                LODWORD(v430[1]) = *(_DWORD *)(v196 + 2632);
                *(_DWORD *)(v196 + 2632) = 0;
              }
              v259 = sub_22E873C74(v196, v197, 0);
              if (v259 >= 2)
                sub_22E879644((uint64_t *)v430);
              if (v7)
                sub_22E885CF4(v7);
              sub_22E885CF4(a1);
              v28 = 1;
              if ((v259 & 1) == 0 && !LOBYTE(v418[1]))
              {
                v260 = *(_QWORD *)(a1 + 88);
                v422 = v418[0];
                v423 = *(_QWORD *)&v418[1];
                return sub_22F343FAC(v260, v62, v420, (uint64_t)&v422, *(int *)v417, (_BYTE *)(v259 & 0xFFFFFFFFFFFFFFFELL));
              }
              return v28;
            }
            sub_22E885CF4(a1);
            return 1;
          }
          sub_22E884578(a1, (int *)v397, 1510, (uint64_t)v430);
          v131 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v131 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v131;
          }
          v28 = 1;
          v131[*v131 + 1] = 1;
          v132 = (char *)v430[0];
          v133 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v133 + 1;
          v120 = &v132[8 * v133];
          v121 = "while";
LABEL_249:
          *((_QWORD *)v120 + 2) = v121;
          sub_22E3BB0B8((uint64_t)v430);
          LOWORD(v430[0]) = 62;
LABEL_250:
          v129 = (unsigned __int16 *)v430;
LABEL_251:
          v130 = v7;
LABEL_252:
          v134 = 0;
          goto LABEL_293;
        }
        if (v9 == 99)
        {
          v26 = a1;
          v28 = sub_22E87832C(a1);
          v29 = "return";
LABEL_288:
          if (*(_WORD *)(v26 + 32) == 62)
          {
            *(_DWORD *)(v26 + 40) = *(_DWORD *)(v26 + 16);
            v96 = *(_QWORD *)(v26 + 8);
            v97 = v27;
LABEL_290:
            sub_22F18FB4C(v96, v97);
            return v28;
          }
          if ((v28 & 1) != 0)
            return v28;
          v162 = strlen(v29);
          sub_22E8847B4(v26, 0x3Eu, 1531, v29, v162);
          LOWORD(v430[0]) = 24;
          v129 = (unsigned __int16 *)v430;
          v130 = v26;
          v134 = 3;
LABEL_293:
          sub_22E885940(v130, v129, 1, v134);
          return v28;
        }
        if (v9 != 105)
          goto LABEL_350;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
        if (*(_WORD *)(a1 + 32) != 21)
        {
          sub_22E884578(a1, (int *)v397, 1510, (uint64_t)v430);
          v126 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v126 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v126;
          }
          v28 = 1;
          v126[*v126 + 1] = 1;
          v127 = v430[0];
          v128 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v128 + 1;
          v127[v128 + 2] = "switch";
          sub_22E3BB0B8((uint64_t)v430);
          LOWORD(v430[0]) = 62;
          v129 = (unsigned __int16 *)v430;
          v130 = a1;
          goto LABEL_252;
        }
        v31 = *(_DWORD *)(a1 + 40);
        v32 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x101;
        if (v32)
          v33 = 4120;
        else
          v33 = 4096;
        sub_22E885C30(a1, v33);
        *(_QWORD *)&v422 = 0;
        v430[0] = 0;
        v430[1] = 0;
        *(_DWORD *)((char *)&v430[1] + 7) = 0;
        LODWORD(v420) = 0;
        *(_DWORD *)v417 = 0;
        if ((sub_22E879370(a1, &v422, (uint64_t)v430, v31, 2, &v420, v417) & 1) != 0)
        {
          v28 = 1;
LABEL_431:
          v30 = a1;
          goto LABEL_690;
        }
        v172 = *(_QWORD *)(a1 + 88);
        v418[0] = *(_OWORD *)v430;
        *(void **)&v418[1] = v430[2];
        v28 = sub_22ED2E0D4(v172, v31, v420, v422 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v418, *(int *)v417);
        if ((v28 & 1) != 0)
        {
          if (*(_WORD *)(a1 + 32) == 23)
          {
            sub_22E80CED8(a1);
            v195 = 24;
          }
          else
          {
            v195 = 62;
          }
          LOWORD(v416[0]) = v195;
          sub_22E885940(a1, (unsigned __int16 *)v416, 1, 0);
          goto LABEL_431;
        }
        v173 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
        *(_QWORD *)(v173 + 40) = v173;
        *(_DWORD *)(v173 + 8) |= 2u;
        v174 = *(unsigned __int16 *)(a1 + 32);
        if (!v32 || v174 == 23)
        {
          v176 = (uint64_t)a4;
          if (v174 == 23)
          {
            v221 = *(_QWORD *)(v173 + 32);
            if (v221)
            {
              ++*(_WORD *)(v221 + 14);
              ++*(_WORD *)(v173 + 16);
            }
          }
          if (!v32)
          {
            sub_22E873C74(a1, (uint64_t)a4, 0);
LABEL_522:
            sub_22E885CF4(a1);
            return sub_22ED2E298();
          }
          v175 = 0;
        }
        else
        {
          v175 = a1;
          sub_22E885C30(a1, 8);
          v173 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
          v176 = (uint64_t)a4;
        }
        v222 = *(_QWORD *)(v173 + 32);
        if (v222)
        {
          --*(_WORD *)(v222 + 14);
          --*(_WORD *)(v173 + 16);
        }
        sub_22E873C74(a1, v176, 0);
        if (v175)
          sub_22E885CF4(v175);
        goto LABEL_522;
      }
      switch(v9)
      {
        case 377:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
          if (*(_WORD *)(a1 + 32) != 23)
          {
            sub_22E884578(a1, (int *)v397, 15, (uint64_t)v430);
            v138 = (unsigned __int8 *)v430[0];
            if (!v430[0])
            {
              v138 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
              v430[0] = v138;
            }
            v138[*v138 + 1] = 4;
            v139 = v430[0];
            v140 = *(unsigned __int8 *)v430[0];
            *(_BYTE *)v430[0] = v140 + 1;
            v139[v140 + 2] = 23;
            goto LABEL_259;
          }
          v80 = *(_DWORD *)(a1 + 40);
          sub_22E885C30(a1, 4718600);
          v81 = sub_22E878918(a1, 0);
          sub_22E885CF4(a1);
          v28 = v81;
          if ((v81 & 1) != 0)
            return v28;
          v82 = *(unsigned __int16 *)(a1 + 32);
          if (v82 != 5)
            goto LABEL_144;
          v331 = *(_QWORD *)(a1 + 24);
          if (v331 == sub_22F2F11E8(a1))
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
            v332 = sub_22F2EEC9C(a1, *(_DWORD *)(a1 + 40));
          }
          else
          {
            v82 = *(unsigned __int16 *)(a1 + 32);
LABEL_144:
            if (v82 != 378)
            {
              sub_22E884578(a1, (int *)v397, 62, (uint64_t)v430);
LABEL_259:
              v141 = v430;
              goto LABEL_354;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
            v332 = sub_22F2EF0A8(a1, *(_DWORD *)(a1 + 40));
          }
          v28 = v332;
          if ((v332 & 1) == 0)
            return sub_22ED3765C(*(_QWORD *)(a1 + 88), 0, v80, v81 & 0xFFFFFFFFFFFFFFFELL, v332 & 0xFFFFFFFFFFFFFFFELL);
          return v28;
        case 378:
        case 380:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 411:
        case 430:
          goto LABEL_350;
        case 379:
          v27 = v397;
          v26 = a1;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
          v28 = sub_22F3449F4(*(_QWORD *)(v26 + 88), *(_DWORD *)(v26 + 40), *(_QWORD *)(*(_QWORD *)(v26 + 88) + 12888));
          v29 = "__leave";
          goto LABEL_288;
        case 381:
        case 382:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE83C(a1, a2);
          return 0;
        case 409:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EDFFC(a1);
          return 0;
        case 410:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE050(a1);
          return 0;
        case 412:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          return sub_22E863440(a1);
        case 413:
          sub_22F2EE160(a1);
          return 0;
        case 414:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE0DC(a1);
          return 0;
        case 415:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE11C(a1);
          return 0;
        case 416:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E8631D8(a1);
          return 0;
        case 417:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E863268(a1);
          return 0;
        case 418:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E863354(a1);
          return 0;
        case 419:
          v73 = a1;
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          v74 = v397;
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v89 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v89 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v89;
          }
          v28 = 1;
          v89[*v89 + 1] = 1;
          v90 = (char *)v430[0];
          v91 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v91 + 1;
          v78 = &v90[8 * v91];
          v79 = "fp_contract";
          goto LABEL_190;
        case 420:
        case 421:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v21 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v21;
          }
          v22 = "fenv_access";
          if (v9 == 420)
            v22 = "STDC FENV_ACCESS";
          v21[*v21 + 1] = 1;
          v23 = v430[0];
          v24 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v24 + 1;
          v23[v24 + 2] = v22;
          sub_22E3BB0B8((uint64_t)v430);
          v25 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v25 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v25;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
          return 0;
        case 422:
          v73 = a1;
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          v74 = v397;
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v86 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v86 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v86;
          }
          v28 = 1;
          v86[*v86 + 1] = 1;
          v87 = (char *)v430[0];
          v88 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v88 + 1;
          v78 = &v87[8 * v88];
          v79 = "STDC FENV_ROUND";
          goto LABEL_190;
        case 423:
          v73 = a1;
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          v74 = v397;
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v83 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v83 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v83;
          }
          v28 = 1;
          v83[*v83 + 1] = 1;
          v84 = (char *)v430[0];
          v85 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v85 + 1;
          v78 = &v84[8 * v85];
          v79 = "float_control";
          goto LABEL_190;
        case 424:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE328(a1);
          return 0;
        case 425:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE378(a1);
          return 0;
        case 426:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E863A08(a1);
          return 0;
        case 427:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22E8635C8(a1);
          return 0;
        case 428:
          return sub_22E85F01C(a1, a3, 0);
        case 429:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          return sub_22E85F01C(a1, a3, 0);
        case 431:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          return sub_22E878584(a1, a2, a3, (uint64_t)a4, (_DWORD *)a5, a6);
        case 432:
          v73 = a1;
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          v74 = v397;
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v75 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v75 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v75;
          }
          v28 = 1;
          v75[*v75 + 1] = 1;
          v76 = (char *)v430[0];
          v77 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v77 + 1;
          v78 = &v76[8 * v77];
          v79 = "clang fp";
          goto LABEL_190;
        case 433:
          sub_22E866018(a1);
          return 0;
        case 434:
          v73 = a1;
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          v74 = v397;
          sub_22E884578(a1, (int *)v397, 1714, (uint64_t)v430);
          v92 = (unsigned __int8 *)v430[0];
          if (!v430[0])
          {
            v92 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
            v430[0] = v92;
          }
          v28 = 1;
          v92[*v92 + 1] = 1;
          v93 = (char *)v430[0];
          v94 = *(unsigned __int8 *)v430[0];
          *(_BYTE *)v430[0] = v94 + 1;
          v78 = &v93[8 * v94];
          v79 = "METAL fp";
LABEL_190:
          *((_QWORD *)v78 + 2) = v79;
          sub_22E3BB0B8((uint64_t)v430);
          v95 = *(_DWORD *)(v73 + 16);
          if (*(_DWORD *)(v73 + 20))
            v95 = *(_DWORD *)(v73 + 20);
          *(_DWORD *)(v73 + 40) = v95;
          v96 = *(_QWORD *)(v73 + 8);
          v97 = v74;
          goto LABEL_290;
        case 435:
          if (*(_DWORD *)a5 && *(_DWORD *)(a5 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a5, 0);
            sub_22E820B10((_QWORD *)a5);
          }
          sub_22F2EE440(a1);
          return 0;
        default:
          if (v9 == 170)
          {
            v26 = a1;
            v28 = sub_22E87832C(a1);
            v29 = "co_return";
            v27 = v397;
            goto LABEL_288;
          }
          if (v9 != 186)
            goto LABEL_350;
          v7 = a1;
          v8 = *(_DWORD *)(a1 + 16);
          v401 = v8;
          sub_22E810414(a1, a5, 0, 0, 0);
          break;
      }
    }
    if (v9 != 5)
    {
      if (v9 == 3)
      {
        v65 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v65 + 752))
        {
          *(_BYTE *)(v65 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v65 + 48) + 6) = 1;
        }
        v28 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 8u);
        return v28;
      }
      if (v9 == 23)
      {
        sub_22E885C30(a1, 4194312);
        v28 = sub_22E878918(a1, 0);
        v30 = a1;
LABEL_690:
        sub_22E885CF4(v30);
        return v28;
      }
LABEL_350:
      v198 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
      if ((a3 & 1) == 0 && (v198 & 0x120) == 0)
        goto LABEL_352;
      if (v8)
      {
        v199 = a5 + 8;
        v200 = *(_QWORD *)(a5 + 8);
        if (v200 < 8)
        {
LABEL_357:
          LODWORD(v430[0]) = 0;
          goto LABEL_405;
        }
        v207 = v200 & 0xFFFFFFFFFFFFFFF8;
        if ((v200 & 4) != 0 && v207)
        {
          v208 = *(unsigned int *)(v207 + 8);
          if (!(_DWORD)v208)
            goto LABEL_357;
          goto LABEL_392;
        }
        if ((v200 & 4) == 0)
        {
          v209 = a5 + 16;
          goto LABEL_393;
        }
        v208 = *(unsigned int *)(v207 + 8);
        if ((_DWORD)v208)
        {
LABEL_392:
          v199 = *(_QWORD *)v207;
          v209 = *(_QWORD *)v207 + 8 * v208;
LABEL_393:
          while ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v199 + 72) + 12) & 1) != 0)
          {
            v199 += 8;
            if (v199 == v209)
              goto LABEL_395;
          }
          goto LABEL_404;
        }
      }
LABEL_395:
      if ((v198 & 0x100) != 0)
      {
        v213 = *(unsigned __int16 *)(a1 + 32) - 120;
        v214 = v213 > 0x2D;
        v215 = (1 << v213) & 0x200400080081;
        v216 = v214 || v215 == 0;
        if (v216 && !sub_22E881C3C(a1, 0))
        {
LABEL_352:
          if (*(_WORD *)(a1 + 32) == 24)
          {
            sub_22E884578(a1, (int *)v397, 1538, (uint64_t)v400);
            v141 = (void **)v400;
LABEL_354:
            sub_22E3BB0B8((uint64_t)v141);
          }
          else
          {
            v201 = *(unsigned int *)(a1 + 16);
            *(_DWORD *)(a1 + 2628) = v201;
            v202 = sub_22E83766C(a1, 0);
            v203 = sub_22E83778C(a1, v202, 1);
            if ((v203 & 1) == 0)
            {
              if (*(_WORD *)(a1 + 32) == 61)
              {
                v204 = *(_QWORD *)(a1 + 88);
                v205 = v204 + 12888;
                do
                {
                  v205 = *(_QWORD *)v205;
                  if (!v205)
                    break;
                  v206 = *(_DWORD *)(v205 + 8);
                  if ((v206 & 0x1000) != 0)
                  {
                    if (!sub_22EB537C0(v204, v203 & 0xFFFFFFFFFFFFFFFELL))
                      break;
                    v220 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v220 + 312) = v201;
                    *(_DWORD *)(v220 + 316) = 1489;
                    if (*(char *)(v220 + 311) < 0)
                    {
                      **(_BYTE **)(v220 + 288) = 0;
                      *(_QWORD *)(v220 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v220 + 288) = 0;
                      *(_BYTE *)(v220 + 311) = 0;
                    }
                    sub_22E78E558((uint64_t)v418, v220);
                    BYTE4(v430[2]) = 0;
                    *(void **)((char *)&v430[1] + 4) = 0;
                    v430[0] = (void *)(v201 | (v201 << 32));
                    LOBYTE(v430[1]) = 0;
                    *(_OWORD *)((char *)&v430[3] + 6) = 0uLL;
                    BYTE6(v430[5]) = 0;
                    strcpy((char *)&v430[3], "case ");
                    *(_WORD *)((char *)&v430[5] + 7) = 5;
                    sub_22E6D82D0((uint64_t *)v418, v430);
                    if (SHIBYTE(v430[5]) < 0)
                      operator delete(v430[3]);
                    sub_22E3BB0B8((uint64_t)v418);
                    v41 = a1;
                    v42 = a3;
                    v43 = 1;
                    v44 = v203;
                    return sub_22E877D3C(v41, v42, v43, v44);
                  }
                }
                while ((v206 & 0xDE1) == 0);
              }
              sub_22E884BB4(a1, 1527);
              return sub_22E87872C(a1, v203, a3);
            }
            LOWORD(v430[0]) = 24;
            sub_22E885940(a1, (unsigned __int16 *)v430, 1, 3);
            if (*(_WORD *)(a1 + 32) == 62)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
            }
            sub_22EB48DCC(*(_QWORD *)(a1 + 88));
          }
          return 1;
        }
      }
      else if ((sub_22E81CB8C(a1, 1) & 1) == 0)
      {
        goto LABEL_352;
      }
LABEL_404:
      v217 = *v397;
      LODWORD(v430[0]) = 0;
      if (!v8)
      {
        v218 = sub_22E817D84(a1, 8, v430, a5, 0);
        v8 = v217;
        goto LABEL_406;
      }
LABEL_405:
      v218 = sub_22E817D84(a1, 8, v430, a5, &v401);
LABEL_406:
      if (*(_DWORD *)a5)
        v219 = *(_DWORD *)a5;
      else
        v219 = v8;
      return sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v218, v219, (int)v430[0]);
    }
    v7 = a1;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 2816);
    if (v11 >= *(unsigned int *)(v10 + 2784))
      v12 = sub_22F162D2C(v10, 1u);
    else
      v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
    v422 = *(_OWORD *)v12;
    v13 = *(unsigned __int16 *)(v12 + 16);
    LODWORD(v420) = *(_DWORD *)(v12 + 18);
    WORD2(v420) = *(_WORD *)(v12 + 22);
    if (v13 == 71)
      goto LABEL_350;
    if (v13 == 61)
      break;
    *(_OWORD *)&v430[4] = v422;
    *(_DWORD *)((char *)&v430[6] + 2) = v420;
    HIWORD(v430[6]) = WORD2(v420);
    LODWORD(v430[1]) = 16843009;
    BYTE4(v430[1]) = 1;
    *(_OWORD *)((char *)&v430[1] + 5) = 0uLL;
    HIDWORD(v430[3]) = 0;
    v430[0] = &off_24FAA5370;
    LOWORD(v430[6]) = v13;
    v15 = (v13 - 5) < 0x2A && ((0x20000014001uLL >> (v13 - 5)) & 1) != 0
       || v13 == 30
       || v13 == 27;
    LOBYTE(v430[1]) = v15;
    v17 = v13 == 36 || v13 == 25;
    v18 = (v13 | 0x10) == 0x15 || v17;
    BYTE1(v430[1]) = v18;
    v19 = 1;
    if (v13 != 21 && v13 != 62)
      v19 = v13 == 5 || v13 == 23;
    BYTE4(v430[1]) = v19;
    BYTE2(v430[1]) = 0;
    if (!sub_22E88AC5C(a1, (uint64_t)v430))
    {
      LOWORD(v418[0]) = 24;
      sub_22E885940(a1, (unsigned __int16 *)v418, 1, 3);
      if (*(_WORD *)(a1 + 32) == 62)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
      }
      return 1;
    }
    if (*(_WORD *)(a1 + 32) == 5)
      goto LABEL_350;
  }
  v66 = *(_DWORD *)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 24);
  v68 = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = v66;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v397);
  v69 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v69 + 56) + 104) & 0x20) != 0)
  {
    sub_22E884578(a1, (int *)v397, 1599, (uint64_t)v430);
    v70 = (unsigned __int8 *)v430[0];
    if (!v430[0])
    {
      v70 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v430[1]);
      v430[0] = v70;
    }
    v70[*v70 + 1] = 2;
    v71 = v430[0];
    v72 = *(unsigned __int8 *)v430[0];
    *(_BYTE *)v430[0] = v72 + 1;
    v71[v72 + 2] = 4;
    sub_22E3BB0B8((uint64_t)v430);
    LOWORD(v430[0]) = 62;
    v28 = 1;
    goto LABEL_250;
  }
  v223 = a3 & 6;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v69, v397);
  v224 = *(unsigned int *)(a1 + 40);
  if (*(_WORD *)(a1 + 32) != 186)
    goto LABEL_717;
  v418[0] = 0uLL;
  v418[1] = (unint64_t)(a1 + 960);
  sub_22E810414(a1, v418, 0, 0, 0);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0 && *(_WORD *)(a1 + 32) != 62)
  {
    v430[0] = &v430[2];
    v430[1] = (void *)0x2000000000;
    v340 = sub_22E873EBC(a1, v430, v223, 0, v418);
    v225 = v340;
    if (*((_QWORD *)&v418[0] + 1) >= 8uLL
      && ((BYTE8(v418[0]) & 4) == 0
       || (*((_QWORD *)&v418[0] + 1) & 0xFFFFFFFFFFFFFFF8) == 0
       || *(_DWORD *)((*((_QWORD *)&v418[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 8))
      && (v340 & 1) == 0)
    {
      v225 = (uint64_t)sub_22F343EEC(*(_QWORD *)(a1 + 88), (int *)v418, (unsigned __int8 *)(v340 & 0xFFFFFFFFFFFFFFFELL));
    }
    if (v430[0] != &v430[2])
      free(v430[0]);
  }
  else
  {
    sub_22E82103C(a5, (uint64_t)v418);
    v225 = 0;
  }
  sub_22E8D1BC4(*(uint64_t *)&v418[1], (uint64_t)&v418[1]);
  sub_22E80F94C((uint64_t *)&v418[1] + 1);
  sub_22E80F94C((uint64_t *)v418 + 1);
  if (!v225)
LABEL_717:
    v225 = sub_22E873C74(a1, 0, v223);
  if ((v225 & 1) != 0)
    v225 = sub_22ED2B260(*(_QWORD *)(a1 + 88), v224, 0);
  if (v68 == 1)
    v341 = 0;
  else
    v341 = v67;
  if ((v68 - 13) >= 6)
    v342 = v341;
  else
    v342 = 0;
  if ((v68 - 7) >= 6)
    v343 = v342;
  else
    v343 = 0;
  v344 = sub_22EC67D70(*(_QWORD **)(a1 + 88), v343, v66, 0);
  sub_22EA63DD8(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v344, a5, 1);
  sub_22E820B10((_QWORD *)a5);
  return sub_22F343D54(*(_QWORD **)(a1 + 88), v66, v344, v224, v225 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22E877D3C(uint64_t a1, char a2, char a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  unint64_t v37;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  void *__p;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;
  _BYTE v52[40];

  v36 = a2 & 6;
  v37 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v39 = 0;
  v40 = 1;
  v41 = (unsigned int *)(a1 + 16);
  while (1)
  {
    if ((a3 & 1) != 0)
    {
      if (*(_WORD *)(a1 + 32) == 3)
        break;
      sub_22EFF605C(v37);
      v6 = v5;
      v7 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = 1;
      v8 = a4;
      goto LABEL_8;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v41);
    if (*(_WORD *)(a1 + 32) == 3)
      break;
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_BYTE *)(a1 + 945);
    *(_BYTE *)(a1 + 945) = 1;
    v8 = sub_22E839A58(a1, v6);
    if ((v8 & 1) != 0)
    {
      LODWORD(v42) = 1572925;
      if (!sub_22E885940(a1, (unsigned __int16 *)&v42, 2, 3))
        goto LABEL_62;
    }
LABEL_8:
    v9 = *(unsigned __int16 *)(a1 + 32);
    if (v9 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v41);
      v10 = *(_DWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v11 + 312) = v10;
      *(_DWORD *)(v11 + 316) = 1826;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v12 = sub_22E78E558((uint64_t)v52, v11);
      sub_22E3BB0B8(v12);
      v13 = sub_22E839A58(a1, v6);
      if ((v13 & 1) != 0)
      {
        LODWORD(v42) = 1572925;
        if (!sub_22E885940(a1, (unsigned __int16 *)&v42, 2, 3))
        {
LABEL_62:
          v40 = 1;
          goto LABEL_63;
        }
      }
      v9 = *(unsigned __int16 *)(a1 + 32);
    }
    else
    {
      v10 = 0;
      v13 = 0;
    }
    *(_BYTE *)(a1 + 945) = v7;
    if (v9 == 71 || v9 == 62)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v41);
      v14 = *(unsigned int *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v15 + 312) = v14;
      *(_DWORD *)(v15 + 316) = 16;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v50, v15);
      v16 = v50;
      if (!v50)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(v51);
        v50 = v16;
      }
      v16[*v16 + 1] = 1;
      v17 = v50;
      v18 = *v50;
      *v50 = v18 + 1;
      *(_QWORD *)&v17[8 * v18 + 16] = "'case'";
      v17[(v18 + 1) + 1] = 4;
      v19 = v50;
      v20 = *v50;
      *v50 = v20 + 1;
      *(_QWORD *)&v19[8 * v20 + 16] = 61;
      v45 = 0;
      v44 = 0;
      v47 = 0;
      v48 = 0x100000000000000;
      __p = (void *)58;
      v49 = 0;
      v42 = v14 | (v14 << 32);
      v43 = 1;
      sub_22E6D82D0((uint64_t *)&v50, &v42);
      if (SHIBYTE(v48) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&v50);
    }
    else
    {
      if (v9 != 61)
      {
        v21 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
        v22 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v22 + 312) = v21;
        *(_DWORD *)(v22 + 316) = 16;
        if (*(char *)(v22 + 311) < 0)
        {
          **(_BYTE **)(v22 + 288) = 0;
          *(_QWORD *)(v22 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v22 + 288) = 0;
          *(_BYTE *)(v22 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v50, v22);
        v23 = v50;
        if (!v50)
        {
          v23 = (unsigned __int8 *)sub_22E3B8AAC(v51);
          v50 = v23;
        }
        v14 = v21;
        v23[*v23 + 1] = 1;
        v24 = v50;
        v25 = *v50;
        *v50 = v25 + 1;
        *(_QWORD *)&v24[8 * v25 + 16] = "'case'";
        v24[(v25 + 1) + 1] = 4;
        v26 = v50;
        v27 = *v50;
        *v50 = v27 + 1;
        *(_QWORD *)&v26[8 * v27 + 16] = 61;
        v45 = 0;
        v44 = 0;
        v47 = 0;
        v48 = 0x100000000000000;
        __p = (void *)58;
        v42 = v21 | ((unint64_t)v21 << 32);
        v43 = 0;
        v49 = 0;
        sub_22E6D82D0((uint64_t *)&v50, &v42);
        if (SHIBYTE(v48) < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v50);
        goto LABEL_34;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v41);
      v14 = *(unsigned int *)(a1 + 40);
    }
    v21 = v14;
LABEL_34:
    v28 = sub_22ED2C48C(*(_QWORD *)(a1 + 88), v6, v8, v10, v13, v14);
    if ((v28 & 1) != 0)
    {
      if ((v40 & 1) != 0)
      {
        v40 = sub_22E873C74(a1, 0, v36);
LABEL_63:
        *(_BYTE *)(a1 + 945) = v7;
        return v40;
      }
    }
    else
    {
      if ((v40 & 1) != 0)
        v40 = v28;
      else
        *(_QWORD *)&v39[4 * (((unint64_t)*v39 >> 8) & 1) + 16] = v28 & 0xFFFFFFFFFFFFFFFELL;
      v39 = (unsigned __int16 *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    }
    a3 = 0;
    *(_BYTE *)(a1 + 945) = v7;
    v29 = *(unsigned __int16 *)(a1 + 32);
    if (v29 != 78)
    {
      if (v29 == 24)
      {
        if (v21)
        {
          v30 = sub_22F141A3C(v14, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
          v31 = v30;
          v32 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v32 + 312) = v30;
          *(_DWORD *)(v32 + 316) = 1587;
          if (*(char *)(v32 + 311) < 0)
          {
            **(_BYTE **)(v32 + 288) = 0;
            *(_QWORD *)(v32 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v32 + 288) = 0;
            *(_BYTE *)(v32 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v50, v32);
          v45 = 0;
          v44 = 0;
          v47 = 0;
          v48 = 0x200000000000000;
          v42 = v31 | (v31 << 32);
          v43 = 0;
          __p = (void *)15136;
          v49 = 0;
          sub_22E6D82D0((uint64_t *)&v50, &v42);
          if (SHIBYTE(v48) < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)&v50);
        }
        v33 = 1;
      }
      else
      {
        v33 = sub_22E873C74(a1, 0, v36);
      }
      if (v39)
      {
        if ((v33 & 1) != 0)
          v33 = sub_22ED2B260(*(_QWORD *)(a1 + 88), 0, 0);
        *(_QWORD *)&v39[4 * (((unint64_t)*v39 >> 8) & 1) + 16] = v33 & 0xFFFFFFFFFFFFFFFELL;
      }
      return v40;
    }
  }
  v34 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v34 + 752))
  {
    *(_BYTE *)(v34 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v34 + 48) + 6) = 1;
  }
  v40 = 1;
  *(_WORD *)(a1 + 32) = 1;
  sub_22E9C3950(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
  return v40;
}

uint64_t sub_22E87832C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(_QWORD);
  _QWORD v24[4];

  v2 = a1 + 16;
  v3 = *(unsigned __int16 *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v4 = *(_DWORD *)(v2 + 24);
  v5 = *(unsigned __int16 *)(v2 + 16);
  if (v5 == 62)
  {
    v7 = 0;
    goto LABEL_7;
  }
  if (v3 != 170)
  {
    sub_22E9B4128(a1 + 48, *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16));
    v5 = *(unsigned __int16 *)(a1 + 32);
    if (v5 == 3)
    {
      v19 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v19 + 752))
      {
        *(_BYTE *)(v19 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v19 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      v20 = *(_QWORD *)(a1 + 88);
      v21 = *(_QWORD *)(v20 + 12888);
      if (*(_BYTE *)(a1 + 48) && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a1 + 16))
      {
        v22 = *(_QWORD *)(a1 + 56);
        if (v22 > 0xF)
        {
LABEL_32:
          sub_22F313C2C(v20, v21, v22, 0);
          return 1;
        }
        v23 = *(uint64_t (**)(_QWORD))(a1 + 64);
        if (v23)
        {
          v22 = v23(*(_QWORD *)(a1 + 72));
          goto LABEL_32;
        }
      }
      v22 = 0;
      goto LABEL_32;
    }
  }
  if (v5 == 23 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
    v12 = sub_22E84AF40(a1);
    v7 = v12;
    if (v12 >= 2)
    {
      sub_22F0D5A50(v12 & 0xFFFFFFFFFFFFFFFELL);
      if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
        v14 = 1932;
      else
        v14 = 1823;
      v15 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v15 + 312) = v13;
      *(_DWORD *)(v15 + 316) = v14;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v24, v15);
      sub_22F0D4E74(v7 & 0xFFFFFFFFFFFFFFFELL);
      v17 = v16;
      v18 = v24[0];
      if (!v24[0])
      {
        v18 = sub_22E3B8AAC(v24[1]);
        v24[0] = v18;
      }
      sub_22E4D6448(v18 + 336, v17, 1);
      sub_22E3BB0B8((uint64_t)v24);
    }
  }
  else
  {
    v6 = sub_22E83766C(a1, 0);
    v7 = sub_22E83778C(a1, v6, 1);
  }
  if ((v7 & 1) != 0)
  {
    LOWORD(v24[0]) = 24;
    v10 = 1;
    sub_22E885940(a1, (unsigned __int16 *)v24, 1, 3);
    return v10;
  }
LABEL_7:
  v8 = *(_QWORD *)(a1 + 88);
  if (v3 == 170)
    return sub_22F31B02C(v8, *(_QWORD *)(v8 + 12888), v4, (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  else
    return sub_22ED357A0(v8, v4, (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(v8 + 12888));
}

uint64_t sub_22E878584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int8x16_t a6)
{
  int v11;
  __int128 v12;
  uint64_t v13;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  v21 = a1 + 960;
  v22 = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 431)
  {
    a6.i64[0] = 2;
    v16 = a6;
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v15 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFDLL);
    do
    {
      memset(v18, 0, 40);
      if (sub_22E864D68(a1, (unint64_t *)v18))
      {
        *(_QWORD *)&v12 = vorrq_s8(*(int8x16_t *)((char *)&v18[1] + 8), v16).u64[0];
        *((_QWORD *)&v12 + 1) = vandq_s8(*(v18 + 24), v15).i64[1];
        v23[0] = vorrq_s8(*(int8x16_t *)((char *)v18 + 8), v17);
        v23[1] = v12;
        sub_22E8118E4((uint64_t)&v19, *(_QWORD *)(v18[0].i64[1] + 8), v18[0].i64[0], 0, *(_DWORD *)v18[0].i64[1], v23, 4u, 6u, 0);
      }
    }
    while (*(_WORD *)(a1 + 32) == 431);
  }
  sub_22E8103B4(a1, a5, 0);
  v13 = sub_22E873EBC(a1, a2, a3, a4, a5);
  sub_22E82103C((uint64_t)a5, (uint64_t)&v19);
  if (!*a5)
    *a5 = v11;
  sub_22E8D1BC4(v21, (uint64_t)&v21);
  sub_22E80F94C(&v22);
  sub_22E80F94C(&v20);
  return v13;
}

unint64_t sub_22E87872C(uint64_t a1, uint64_t a2, char a3)
{
  int v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if ((a3 & 4) == 0)
  {
LABEL_2:
    v5 = 1;
    return sub_22ED2B1FC(*(_QWORD *)(a1 + 88), a2, v5);
  }
  v7 = a1 + 16;
  v8 = 1;
  while (1)
  {
    v9 = *(unsigned __int16 *)(a1 + 32);
    v10 = (v8 - 1);
    if (v8 != 1)
      break;
    if (v9 == 24)
    {
      v11 = 1;
LABEL_8:
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(v12 + 2816) + v10;
      if (v13 < *(unsigned int *)(v12 + 2784))
        v14 = *(_QWORD *)(v12 + 2776) + 24 * v13;
      else
        v14 = sub_22F162D2C(v12, v11);
      goto LABEL_10;
    }
    v21 = v7;
    v22 = 1;
    if (v9 != 62)
      goto LABEL_2;
LABEL_20:
    v8 = v22 + 1;
    v7 = v21;
  }
  v20 = (v8 - 1);
  v22 = v8;
  v21 = v7;
  if (v9 != 1)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(v16 + 2816) + (v8 - 2);
    if (v17 >= *(unsigned int *)(v16 + 2784))
      v7 = sub_22F162D2C(v16, v20);
    else
      v7 = *(_QWORD *)(v16 + 2776) + 24 * v17;
  }
  if (*(_WORD *)(v7 + 16) == 62)
    goto LABEL_20;
  v15 = v21;
  if (*(_WORD *)(a1 + 32) != 1)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v18 + 2816) + (v22 - 2);
    if (v19 >= *(unsigned int *)(v18 + 2784))
      v15 = sub_22F162D2C(v18, v20);
    else
      v15 = *(_QWORD *)(v18 + 2776) + 24 * v19;
  }
  if (*(_WORD *)(v15 + 16) != 24)
    goto LABEL_2;
  if (!v22)
  {
    v14 = v21;
    goto LABEL_10;
  }
  v11 = v22;
  v10 = v20;
  v14 = v21;
  if (*(_WORD *)(a1 + 32) != 1)
    goto LABEL_8;
LABEL_10:
  if (*(_WORD *)(v14 + 16) != 22)
    goto LABEL_2;
  a2 = sub_22EB49994(*(_QWORD *)(a1 + 88), a2);
  v5 = 0;
  return sub_22ED2B1FC(*(_QWORD *)(a1 + 88), a2, v5);
}

uint64_t sub_22E8788D0(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  sub_22E885C30(a1, a3);
  v5 = sub_22E878918(a1, a2);
  if (a1)
    sub_22E885CF4(a1);
  return v5;
}

uint64_t sub_22E878918(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int i;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _BYTE v57[32];
  unsigned __int8 *v58;
  __int128 v59;
  void *__p;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  _BYTE *v75;
  char v76;
  uint64_t v77;
  int v78;
  __int16 v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[4];
  int v84;
  const char *v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[64];
  void *v89;
  uint64_t v90;
  _QWORD v91[34];

  v91[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v6 = (unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 16);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v83[0] = &unk_24FAE1B70;
  v83[3] = v4;
  v84 = v5;
  v85 = "in compound statement ('{}')";
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_DWORD *)(v7 + 56);
  v9 = *(_QWORD *)(v7 + 1296);
  v56 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
  v10 = *(_BYTE *)(a1 + 947);
  *(_BYTE *)(a1 + 947) = 0;
  v75 = (_BYTE *)(a1 + 944);
  v76 = *(_BYTE *)(a1 + 944);
  v11 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v77 = a1;
  v78 = 1572887;
  v79 = 62;
  v81 = 0;
  v82 = 0;
  v80 = sub_22E80CED8;
  if ((sub_22E811DE8((uint64_t)&v75) & 1) != 0)
    goto LABEL_96;
  v54 = v9;
  v55 = v8;
  v53 = *(_QWORD *)(a1 + 88);
  sub_22E905168(v53, a2);
  sub_22E879240(a1);
  v12 = *(_QWORD *)(a1 + 88);
  if ((*(_DWORD *)(v12 + 56) & 0xFC) != 4)
  {
    v52 = *(_QWORD *)(*(_QWORD *)(v12 + 1896) + 8 * *(unsigned int *)(v12 + 1904) - 8);
    *(_DWORD *)(v52 + 8) |= 0x400u;
  }
  v89 = v91;
  v90 = 0x2000000000;
  for (i = *(unsigned __int16 *)(a1 + 32); i == 201; i = *(unsigned __int16 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    v14 = *(_DWORD *)(a1 + 40);
    v86 = v88;
    v87 = 0x800000000;
    while (*(_WORD *)(a1 + 32) == 5)
    {
      v15 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      v16 = sub_22EC67D70(*(_QWORD **)(a1 + 88), v15, *(_DWORD *)(a1 + 40), v14);
      v17 = v87;
      if (v87 >= (unint64_t)HIDWORD(v87))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v87;
      }
      *((_QWORD *)v86 + v17) = v16;
      v18 = v87 + 1;
      LODWORD(v87) = v87 + 1;
      if (*(_WORD *)(a1 + 32) != 65)
        goto LABEL_14;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    }
    sub_22E884578(a1, (int *)v6, 15, (uint64_t)&v58);
    v19 = v58;
    if (!v58)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC(v59);
      v58 = v19;
    }
    v19[*v19 + 1] = 4;
    v20 = v58;
    v21 = *v58;
    *v58 = v21 + 1;
    *(_QWORD *)&v20[8 * v21 + 16] = 5;
    sub_22E3BB0B8((uint64_t)&v58);
    v18 = v87;
LABEL_14:
    __p = 0;
    v61 = 0;
    *((_QWORD *)&v59 + 1) = 0;
    v58 = 0;
    v62 = a1 + 960;
    v74 = 0;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0;
    v22 = sub_22EA2CFC4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t *)&v58, (uint64_t *)v86, v18);
    v23 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v22, v14, *(_DWORD *)(a1 + 16));
    sub_22E884BB4(a1, 1533);
    if (v23 >= 2)
    {
      v24 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = v90;
      }
      *((_QWORD *)v89 + v24) = v23 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v90) = v90 + 1;
    }
    if (DWORD1(v65))
      free(*((void **)&v64 + 1));
    sub_22E8D1BC4(v62, (uint64_t)&v62);
    sub_22E80F94C((uint64_t *)&v63);
    sub_22E80F94C(&v61);
    if (v86 != v88)
      free(v86);
  }
  if (a2)
    v25 = 7;
  else
    v25 = 3;
  while (1)
  {
    if ((i - 436) <= 2)
    {
      if ((sub_22F2F1928(a1) & 1) != 0)
        break;
      i = *(unsigned __int16 *)(a1 + 32);
    }
    if (i > 195)
    {
      if (i != 196)
      {
        if (i == 408)
        {
          sub_22F2EDFA0(a1);
          goto LABEL_71;
        }
        goto LABEL_50;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      v32 = *(_DWORD *)(a1 + 40);
      while (*(_WORD *)(a1 + 32) == 196)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      }
      v58 = 0;
      *(_QWORD *)&v59 = 0;
      *((_QWORD *)&v59 + 1) = a1 + 960;
      __p = 0;
      sub_22E8103B4(a1, &v58, 1);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      {
        v34 = *(unsigned __int16 *)(a1 + 32) - 120;
        v35 = v34 > 0x2D;
        v36 = (1 << v34) & 0x200400080081;
        v37 = v35 || v36 == 0;
        if (v37 && !sub_22E881C3C(a1, 0))
          goto LABEL_75;
      }
      else if (!sub_22E81CB8C(a1, 1))
      {
LABEL_75:
        v44 = sub_22F2E4FF4(a1, v32);
        if ((v44 & 1) != 0)
        {
          LOWORD(v86) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v86, 1, 0);
          v33 = 0;
          v41 = 0;
LABEL_59:
          sub_22E8D1BC4(*((uint64_t *)&v59 + 1), (uint64_t)&v59 + 8);
          sub_22E80F94C((uint64_t *)&__p);
          sub_22E80F94C((uint64_t *)&v59);
          if (!v41)
            goto LABEL_71;
          goto LABEL_60;
        }
        sub_22E884BB4(a1, 1527);
        v33 = sub_22E87872C(a1, v44, v25);
        if (v33 >= 2)
          v33 = (unint64_t)sub_22F343EEC(*(_QWORD *)(a1 + 88), (int *)&v58, (unsigned __int8 *)(v33 & 0xFFFFFFFFFFFFFFFELL));
LABEL_58:
        v41 = 1;
        goto LABEL_59;
      }
      v38 = *(_QWORD *)(a1 + 96);
      ++*(_BYTE *)(v38 + 4);
      v39 = *(_DWORD *)(a1 + 16);
      LODWORD(v86) = 0;
      v40 = sub_22E817D84(a1, 8, &v86, (uint64_t)&v58, 0);
      v33 = sub_22ED2B2F8(*(_QWORD *)(a1 + 88), v40, v39, (int)v86);
      --*(_BYTE *)(v38 + 4);
      goto LABEL_58;
    }
    if (i == 62)
    {
      if ((*(_WORD *)(a1 + 34) & 0x10) == 0)
      {
        v26 = *(unsigned int *)(a1 + 16);
        v27 = v26;
        if ((int)v26 >= 1)
        {
          while (1)
          {
            v28 = v27;
            v29 = sub_22E873D2C(a1, (uint64_t)&v89, 0, 0);
            if (v29 >= 2)
            {
              v30 = v29;
              v31 = v90;
              if (v90 >= (unint64_t)HIDWORD(v90))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v31 = v90;
              }
              *((_QWORD *)v89 + v31) = v30 & 0xFFFFFFFFFFFFFFFELL;
              LODWORD(v90) = v90 + 1;
            }
            if (*(_WORD *)(a1 + 32) != 62 || (*(_WORD *)(a1 + 34) & 0x10) != 0)
              break;
            v27 = *v6;
            if ((int)v27 < 1)
              goto LABEL_65;
          }
LABEL_66:
          v43 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v43 + 312) = v26;
          *(_DWORD *)(v43 + 316) = 1967;
          if (*(char *)(v43 + 311) < 0)
          {
            **(_BYTE **)(v43 + 288) = 0;
            *(_QWORD *)(v43 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v43 + 288) = 0;
            *(_BYTE *)(v43 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v86, v43);
          BYTE12(v59) = 0;
          *(_QWORD *)((char *)&v59 + 4) = 0;
          v61 = 0;
          v62 = 0;
          __p = 0;
          LOBYTE(v63) = 0;
          v58 = (unsigned __int8 *)(v26 | (v28 << 32));
          LOBYTE(v59) = 1;
          sub_22E6D82D0((uint64_t *)&v86, &v58);
          if (SHIBYTE(v62) < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)&v86);
          goto LABEL_71;
        }
        v28 = 0;
LABEL_65:
        if (v28)
          goto LABEL_66;
      }
      goto LABEL_50;
    }
    if (i == 1 || i == 24)
      break;
LABEL_50:
    v33 = sub_22E873D2C(a1, (uint64_t)&v89, v25, 0);
LABEL_60:
    if (v33 >= 2)
    {
      v42 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = v90;
      }
      *((_QWORD *)v89 + v42) = v33 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v90) = v90 + 1;
    }
LABEL_71:
    i = *(unsigned __int16 *)(a1 + 32);
  }
  v8 = v55;
  v9 = v54;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 64) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) & 1) == 0)
  {
    v45 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v45 + 524) || !*(_DWORD *)(v45 + 520))
    {
      v46 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v46 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v46 + 316) = 1966;
      if (*(char *)(v46 + 311) < 0)
      {
        **(_BYTE **)(v46 + 288) = 0;
        *(_QWORD *)(v46 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v46 + 288) = 0;
        *(_BYTE *)(v46 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v57, v46);
      sub_22E3BB0B8((uint64_t)v57);
    }
  }
  v47 = *v6;
  if ((sub_22E811E8C((uint64_t)&v75) & 1) == 0 && a2 && *(_WORD *)(a1 + 32) == 22)
    sub_22E8853B0(a1, v47, 0x18u, 1);
  if (HIDWORD(v82))
    v48 = HIDWORD(v82);
  else
    v48 = v47;
  v11 = (uint64_t)sub_22ED2C004(*(_QWORD **)(a1 + 88), v82, v48, (_BYTE **)v89, v90);
  if (v89 != v91)
    free(v89);
  v49 = *(_QWORD *)(*(_QWORD *)(v53 + 1896) + 8 * *(unsigned int *)(v53 + 1904) - 8);
  --*(_QWORD *)(v49 + 360);
LABEL_96:
  *v75 = v76;
  *(_BYTE *)(a1 + 947) = v10;
  *(_DWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 1296) = v9;
  v50 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v50 + 520) = v56;
  *(_DWORD *)(v50 + 528) = v56;
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v83);
  return v11;
}

void sub_22E879240(uint64_t a1)
{
  while (1)
  {
    if (*(_WORD *)(a1 + 32) == 409)
    {
      sub_22F2EDFFC(a1);
    }
    else
    {
      switch(*(_WORD *)(a1 + 32))
      {
        case 0x19A:
          sub_22F2EE050(a1);
          break;
        case 0x19D:
          sub_22F2EE160(a1);
          break;
        case 0x19E:
          sub_22F2EE0DC(a1);
          break;
        case 0x19F:
          sub_22F2EE11C(a1);
          break;
        case 0x1A0:
          sub_22E8631D8(a1);
          break;
        case 0x1A1:
          sub_22E863268(a1);
          break;
        case 0x1A2:
          sub_22E863354(a1);
          break;
        case 0x1A3:
          sub_22F2EE1A8(a1);
          break;
        case 0x1A4:
        case 0x1A5:
          sub_22F2EE27C(a1);
          break;
        case 0x1A6:
          sub_22F2EE2D4(a1);
          break;
        case 0x1A7:
          sub_22F2EE220(a1);
          break;
        case 0x1A8:
          sub_22F2EE328(a1);
          break;
        case 0x1A9:
          sub_22F2EE378(a1);
          break;
        case 0x1AA:
          sub_22E863A08(a1);
          break;
        case 0x1AB:
          sub_22E8635C8(a1);
          break;
        case 0x1B0:
          sub_22F2EE488(a1);
          break;
        case 0x1B2:
          sub_22F2EE3D4(a1);
          break;
        case 0x1B3:
          sub_22F2EE440(a1);
          break;
        default:
          return;
      }
    }
  }
}

uint64_t sub_22E879370(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[20];
  char v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29[4];
  _BYTE *v30;
  char v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;

  v30 = (_BYTE *)(a1 + 944);
  v31 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v32 = a1;
  v33 = 1441813;
  v34 = 62;
  v36 = 0;
  v37 = 0;
  v35 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v30);
  v14 = *(_DWORD *)(a1 + 16);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
    sub_22E846DC0(a1, a2, a4, a5, 0, 0, 0, (uint64_t)v23);
  }
  else
  {
    v15 = sub_22E83766C(a1, 0);
    v16 = sub_22E83778C(a1, v15, 1);
    if ((v16 & 1) != 0)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_WORD *)(a3 + 16) = 1;
      *(_BYTE *)(a3 + 18) = 0;
      goto LABEL_7;
    }
    sub_22EB530EC(*(_QWORD *)(a1 + 88), a4, v16 & 0xFFFFFFFFFFFFFFFELL, a5, 0, (uint64_t)v23);
  }
  *(_OWORD *)a3 = *(_OWORD *)v23;
  *(_DWORD *)(a3 + 15) = *(_DWORD *)&v23[15];
LABEL_7:
  if (*(_BYTE *)(a3 + 16))
  {
    if (*(_WORD *)(a1 + 32) == 22)
      goto LABEL_21;
    strcpy(v23, ">");
    v17 = 1;
    sub_22E885940(a1, (unsigned __int16 *)v23, 1, 0);
    if (*(_WORD *)(a1 + 32) != 22)
      goto LABEL_20;
    if (*(_BYTE *)(a3 + 16))
    {
LABEL_21:
      v20 = v14;
      if (*(_DWORD *)(a1 + 16) != v14)
        v20 = *(_DWORD *)(a1 + 40);
      v21 = 16400;
      if ((_DWORD)a5 == 2)
        v21 = 16480;
      v22 = sub_22F32D6EC(*(_QWORD *)(a1 + 88), v14, v20, 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + v21));
      if ((v22 & 1) == 0)
      {
        sub_22EB530EC(*(_QWORD *)(a1 + 88), a4, v22 & 0xFFFFFFFFFFFFFFFELL, a5, 0, (uint64_t)v23);
        *(_OWORD *)a3 = *(_OWORD *)v23;
        *(_DWORD *)(a3 + 15) = *(_DWORD *)&v23[15];
      }
    }
  }
  sub_22E811E8C((uint64_t)&v30);
  if (a6)
    *a6 = v37;
  if (a7)
    *a7 = HIDWORD(v37);
  while (*(_WORD *)(a1 + 32) == 22)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1554, (uint64_t)v29);
    v18 = *(unsigned int *)(a1 + 16);
    *(_QWORD *)&v23[12] = 0;
    v24 = 0;
    v26 = 0;
    v27 = 0;
    __p = 0;
    v28 = 0;
    *(_QWORD *)v23 = v18 | (v18 << 32);
    v23[8] = 1;
    sub_22E6D82D0(v29, v23);
    if (SHIBYTE(v27) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)v29);
    sub_22E80F720(a1);
  }
  v17 = 0;
LABEL_20:
  *v30 = v31;
  return v17;
}

uint64_t sub_22E879644(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  unsigned __int8 *v30;
  uint64_t v31;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 16);
  v4 = *(unsigned __int16 *)(*a1 + 32);
  v5 = *(_WORD *)(*a1 + 34);
  v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 104);
  result = sub_22F1CF68C(*(_QWORD *)(v6 + 32), 0x7AAu, v3, v6);
  if ((_DWORD)result == 1 || *((_BYTE *)a1 + 24))
    goto LABEL_8;
  v8 = *(_QWORD *)(v2 + 8);
  if (*((_DWORD *)a1 + 4) != *(_DWORD *)(v8 + 2176) || v4 == 24)
    goto LABEL_8;
  if (v4 == 62)
    goto LABEL_8;
  if ((v4 - 399) < 0x29)
    goto LABEL_8;
  if ((v3 & 0x80000000) != 0)
    goto LABEL_8;
  v10 = *((_DWORD *)a1 + 3);
  if (v10 < 0 || (a1[1] & 0x80000000) != 0)
    goto LABEL_8;
  if (*((_DWORD *)a1 + 5) != 1)
    goto LABEL_17;
  if (!*(_DWORD *)(v2 + 2632))
  {
LABEL_8:
    *(_DWORD *)(v2 + 2632) = 0;
    return result;
  }
  *(_DWORD *)(v2 + 2632) = 0;
  v10 = *((_DWORD *)a1 + 3);
LABEL_17:
  v11 = *(_QWORD **)(v8 + 88);
  v12 = sub_22E87A414(v11, v10);
  v13 = sub_22E87A414(v11, v3);
  result = sub_22E87A414(v11, *((_DWORD *)a1 + 2));
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14 && (_DWORD)result != 0)
  {
    v16 = v12 == v13 && v12 > result;
    if (v16 || (v5 & 1) == 0)
    {
      sub_22F1E2F68((uint64_t)v11, *((_DWORD *)a1 + 2), 1, (uint64_t)&v30);
      v18 = v30 ? HIDWORD(v31) : 0;
      result = sub_22F1E2F68((uint64_t)v11, v3, 1, (uint64_t)&v30);
      v19 = v30 ? HIDWORD(v31) : 0;
      if (v18 != v19)
      {
        v20 = *a1;
        if (v4 == 5)
        {
          v21 = *(_QWORD *)(v20 + 8);
          v22 = *(_QWORD *)(v21 + 2816);
          if (v22 >= *(unsigned int *)(v21 + 2784))
            result = sub_22F162D2C(v21, 1u);
          else
            result = *(_QWORD *)(v21 + 2776) + 24 * v22;
          if (*(_WORD *)(result + 16) == 61)
            return result;
          v20 = *a1;
        }
        v23 = *(_QWORD *)(v20 + 96);
        *(_DWORD *)(v23 + 312) = v3;
        *(_DWORD *)(v23 + 316) = 1962;
        if (*(char *)(v23 + 311) < 0)
        {
          **(_BYTE **)(v23 + 288) = 0;
          *(_QWORD *)(v23 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v23 + 288) = 0;
          *(_BYTE *)(v23 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v30, v23);
        v24 = *((int *)a1 + 5);
        v25 = v30;
        if (!v30)
        {
          v25 = (unsigned __int8 *)sub_22E3B8AAC(v31);
          v30 = v25;
        }
        v25[*v25 + 1] = 2;
        v26 = v30;
        v27 = *v30;
        *v30 = v27 + 1;
        *(_QWORD *)&v26[8 * v27 + 16] = v24;
        sub_22E3BB0B8((uint64_t)&v30);
        v28 = *(_QWORD *)(*a1 + 96);
        *(_DWORD *)(v28 + 312) = *((_DWORD *)a1 + 2);
        *(_DWORD *)(v28 + 316) = 1886;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v29, v28);
        return sub_22E3BB0B8((uint64_t)v29);
      }
    }
  }
  return result;
}

unint64_t sub_22E8798D0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v14[32];
  _QWORD v15[5];
  int v16;
  const char *v17;

  v6 = *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v8 = 0;
  v15[0] = &unk_24FAC2E78;
  v15[3] = v7;
  v15[4] = a2;
  v16 = v6;
  v17 = "parsing function body";
  if (a2 && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0)
    v8 = (*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 < 4;
  sub_22E90D320((uint64_t)v14, *(_QWORD *)(a1 + 88), (uint64_t)"InternalPragmaState", 19, v8);
  v9 = sub_22E878918(a1, 0);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 88);
    sub_22E905168(v10, 0);
    v9 = (unint64_t)sub_22ED2C004(*(_QWORD **)(a1 + 88), v6, v6, 0, 0);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 1896) + 8 * *(unsigned int *)(v10 + 1904) - 8);
    --*(_QWORD *)(v11 + 360);
  }
  if (*a3)
  {
    sub_22E885CF4(*a3);
    *a3 = 0;
  }
  v12 = sub_22EA30A38(*(_QWORD *)(a1 + 88), a2, v9 & 0xFFFFFFFFFFFFFFFELL, 0);
  sub_22E90D3F0((uint64_t)v14);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v15);
  return v12;
}

unint64_t sub_22E879A28(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];
  _QWORD v24[5];
  int v25;
  const char *v26;

  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v7 = *(unsigned int *)(v6 + 24);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 56) + 104) & 0x20) != 0)
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = v7;
    *(_DWORD *)(v9 + 316) = 1599;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v24, v9);
    v10 = (unsigned __int8 *)v24[0];
    if (!v24[0])
    {
      v10 = (unsigned __int8 *)sub_22E3B8AAC(v24[1]);
      v24[0] = v10;
    }
    v10[*v10 + 1] = 2;
    v11 = v24[0];
    v12 = *(unsigned __int8 *)v24[0];
    *(_BYTE *)v24[0] = v12 + 1;
    *(_QWORD *)(v11 + 8 * v12 + 16) = 12;
    sub_22E3BB0B8((uint64_t)v24);
    LOWORD(v24[0]) = 23;
    sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
    LOWORD(v24[0]) = 24;
    sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
    if (*(_WORD *)(a1 + 32) == 129)
    {
      LOWORD(v24[0]) = 21;
      sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
      LOWORD(v24[0]) = 22;
      sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
      LOWORD(v24[0]) = 23;
      sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
      LOWORD(v24[0]) = 24;
      sub_22E885940(a1, (unsigned __int16 *)v24, 1, 0);
    }
    v13 = *(_QWORD *)(a1 + 88);
    sub_22E905168(v13, 0);
    v14 = sub_22ED2C004(*(_QWORD **)(a1 + 88), v7, v7, 0, 0);
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 1896) + 8 * *(unsigned int *)(v13 + 1904) - 8);
    --*(_QWORD *)(v15 + 360);
    if (*a3)
    {
      sub_22E885CF4(*a3);
      *a3 = 0;
    }
    return sub_22EA30A38(*(_QWORD *)(a1 + 88), a2, (unint64_t)v14 & 0xFFFFFFFFFFFFFFFELL, 0);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
    llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
    v24[0] = &unk_24FAC2E78;
    v24[3] = v8;
    v24[4] = a2;
    v25 = v7;
    v26 = "parsing function try block";
    if (*(_WORD *)(a1 + 32) == 61)
      sub_22E8338EC(a1, a2);
    else
      sub_22EAB2DB0(*(_QWORD **)(a1 + 88), a2);
    v17 = 0;
    if (a2 && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0)
      v17 = (*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 < 4;
    sub_22E90D320((uint64_t)v23, *(_QWORD *)(a1 + 88), (uint64_t)"InternalPragmaState", 19, v17);
    v18 = *(unsigned int *)(a1 + 16);
    v19 = sub_22E879D7C(a1, v7, 1);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(a1 + 88);
      sub_22E905168(v20, 0);
      v19 = (uint64_t)sub_22ED2C004(*(_QWORD **)(a1 + 88), v18, v18, 0, 0);
      v21 = *(_QWORD *)(*(_QWORD *)(v20 + 1896) + 8 * *(unsigned int *)(v20 + 1904) - 8);
      --*(_QWORD *)(v21 + 360);
    }
    if (*a3)
    {
      sub_22E885CF4(*a3);
      *a3 = 0;
    }
    v16 = sub_22EA30A38(*(_QWORD *)(a1 + 88), a2, v19 & 0xFFFFFFFFFFFFFFFELL, 0);
    sub_22E90D3F0((uint64_t)v23);
    llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v24);
  }
  return v16;
}

uint64_t sub_22E879D7C(uint64_t a1, int a2, int a3)
{
  int *v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24;
  uint64_t v25;
  _QWORD v26[33];

  v26[32] = *MEMORY[0x24BDAC8D0];
  v4 = (int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) != 23)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v24);
    v13 = (unsigned __int8 *)v24;
    if (!v24)
    {
      v13 = (unsigned __int8 *)sub_22E3B8AAC(v25);
      v24 = v13;
    }
    v13[*v13 + 1] = 4;
    v14 = v24;
    v15 = *(unsigned __int8 *)v24;
    *(_BYTE *)v24 = v15 + 1;
    v14[v15 + 2] = 23;
    sub_22E3BB0B8((uint64_t)&v24);
    return 1;
  }
  if (a3)
    v7 = 4218888;
  else
    v7 = 4202504;
  sub_22E885C30(a1, v7);
  v8 = sub_22E878918(a1, 0);
  sub_22E885CF4(a1);
  v9 = v8;
  if ((v8 & 1) != 0)
    return v9;
  v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 != 5
    || (v17 = *(_QWORD *)(a1 + 24), v18 = sub_22F2F11E8(a1), v10 = *(unsigned __int16 *)(a1 + 32), v17 != v18))
  {
    if (v10 == 378)
      goto LABEL_30;
    v24 = v26;
    v25 = 0x2000000000;
    sub_22E831780(a1);
    if (*(_WORD *)(a1 + 32) == 129)
    {
      do
      {
        v11 = sub_22F2EF4E0(a1, a3);
        if ((v11 & 1) == 0)
        {
          v12 = v25;
          if (v25 >= (unint64_t)HIDWORD(v25))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = v25;
          }
          *((_QWORD *)v24 + v12) = v11 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v25) = v25 + 1;
        }
      }
      while (*(_WORD *)(a1 + 32) == 129);
      if ((_DWORD)v25)
      {
        v9 = sub_22ED36EF4(*(_QWORD *)(a1 + 88), a2, v8 & 0xFFFFFFFFFFFFFFFELL, v24, v25);
        goto LABEL_22;
      }
    }
    else
    {
      sub_22E884578(a1, v4, 1490, (uint64_t)v23);
      sub_22E3BB0B8((uint64_t)v23);
    }
    v9 = 1;
LABEL_22:
    if (v24 != v26)
      free(v24);
    return v9;
  }
  if ((v10 - 7) < 6)
  {
    v19 = 0;
    goto LABEL_31;
  }
  v19 = 0;
  if ((v10 - 13) < 6 || v10 == 1)
    goto LABEL_31;
LABEL_30:
  v19 = *(_QWORD *)(a1 + 24);
LABEL_31:
  v20 = sub_22F2F11E8(a1);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v21 = *(_DWORD *)(a1 + 40);
  if (v19 == v20)
    v22 = sub_22F2EEC9C(a1, v21);
  else
    v22 = sub_22F2EF0A8(a1, v21);
  v9 = v22;
  if ((v22 & 1) != 0)
    return v9;
  return sub_22ED3765C(*(_QWORD *)(a1 + 88), 1, a2, v8 & 0xFFFFFFFFFFFFFFFELL, v22 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22E87A070(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  int v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unsigned __int16 v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[14];

  v25[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v2 + 752))
  {
    sub_22F2F173C(a1);
    return 1;
  }
  v20 = *(_OWORD *)(a1 + 48);
  v21 = *(_OWORD *)(a1 + 64);
  v18 = *(_OWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 2344);
  v4 = *(_WORD *)(a1 + 80);
  v5 = *(_WORD *)(a1 + 82);
  v6 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(v2);
  v7 = *(unsigned __int16 *)(a1 + 32);
  v23 = v25;
  v24 = 0x400000000;
  v8 = sub_22E80C35C(a1, (uint64_t)&v23);
  if ((_DWORD)v24)
  {
    v9 = (unsigned __int16 *)((char *)v23 + 16);
    v10 = 24 * v24;
    do
    {
      v11 = *v9;
      v9 += 12;
      if (v11 == 3)
        goto LABEL_13;
      v10 -= 24;
    }
    while (v10);
  }
  if (v8)
  {
    sub_22E80FADC(a1 + 2336, v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
    sub_22F2E2198(a1);
  }
  else
  {
    v22 = 24;
    if (!sub_22E885940(a1, &v22, 1, 4))
    {
LABEL_13:
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(v12 + 2832);
      *(_QWORD *)(v12 + 2816) = *(_QWORD *)(v13 - 8);
      *(_QWORD *)(v12 + 2832) = v13 - 8;
      v14 = *(_QWORD *)(v12 + 1008);
      if (v14)
      {
        if (*(_QWORD *)(v14 + 224))
          v15 = 3;
        else
          v15 = 0;
      }
      else if (*(_QWORD *)(v12 + 1040))
      {
        v15 = 1;
      }
      else
      {
        v15 = 2;
      }
      *(_DWORD *)(v12 + 1048) = v15;
      *(_OWORD *)(a1 + 48) = v20;
      *(_OWORD *)(a1 + 64) = v21;
      *(_OWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 32) = v19;
      sub_22E80FADC(a1 + 2336, v3);
      v16 = 0;
      *(_WORD *)(a1 + 80) = v4;
      *(_WORD *)(a1 + 82) = v5;
      *(_WORD *)(a1 + 84) = v6;
      goto LABEL_19;
    }
    if (v7 == 151)
    {
      while (*(_WORD *)(a1 + 32) == 129)
      {
        v22 = 23;
        if (sub_22E885940(a1, &v22, 1, 4))
        {
          v22 = 24;
          if ((sub_22E885940(a1, &v22, 1, 4) & 1) != 0)
            continue;
        }
        goto LABEL_13;
      }
    }
    sub_22E80FADC(a1 + 2336, v3);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
  }
  v16 = 1;
LABEL_19:
  if (v23 != v25)
    free(v23);
  return v16;
}

void sub_22E87A2D8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E87A2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v7;
  uint64_t v8;

  v4 = sub_22F2E6D78(a2);
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7Fu) - 49 <= 2)
    return (*(_DWORD *)(v4 + 28) & 0x7F) == 0x33 || *(_QWORD *)(a2 + 8) == 0;
  v7 = *(unsigned __int16 *)(a1 + 48);
  if (v7 == 25)
  {
    v8 = sub_22F2E6D78(a2);
    if (v8 && (*(_DWORD *)(v8 + 28) & 0x7F) == 0x10)
      return 0;
    return sub_22EC6B6AC((_BYTE *)a1, a2);
  }
  if (v7 != 63)
    return sub_22EC6B6AC((_BYTE *)a1, a2);
  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7Fu) - 60 < 7;
  return result;
}

__n128 sub_22E87A3AC@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAA5370;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  *a2 = v4;
  return result;
}

uint64_t sub_22E87A414(_QWORD *a1, int a2)
{
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  char v12;

  v3 = *(_DWORD *)(*(_QWORD *)(a1[1] + 40) + 32);
  v5 = sub_22F423BA4((uint64_t)a1, a2, 0);
  if ((_DWORD)v5 && v3 != 1)
  {
    v6 = sub_22E677168((uint64_t)a1, a2);
    sub_22F1E1E78(a1, v6, (uint64_t)&v11);
    if (v12)
    {
      if ((_DWORD)v5 != 1)
      {
        v7 = 0;
        v8 = -(uint64_t)(v5 - 1);
        do
        {
          if (*(_BYTE *)(v11 + HIDWORD(v6) + v8) == 9)
            v9 = v3 + v7 / v3 * v3 - v7;
          else
            v9 = 1;
          v7 += v9;
          ++v8;
        }
        while (v8);
        return v7 + 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_22E87A4F0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  int v10;
  void *v11;
  size_t v12;
  size_t v13;
  unsigned __int8 *v15[4];

  v4 = sub_22E87D3CC(a2, *(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 96);
  *(_DWORD *)(v5 + 312) = v4;
  *(_DWORD *)(v5 + 316) = 1578;
  if (*(char *)(v5 + 311) < 0)
  {
    **(_BYTE **)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v15, v5);
  v8 = *(void **)(a1 + 56);
  v7 = a1 + 56;
  v6 = v8;
  v9 = *(_BYTE *)(v7 + 23);
  v10 = v9;
  if (v9 >= 0)
    v11 = (void *)v7;
  else
    v11 = v6;
  v12 = v9 & 0x7F;
  if (v10 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(v7 + 8);
  sub_22E3B89A8(v15, v11, v13);
  return sub_22E3BB0B8((uint64_t)v15);
}

uint64_t sub_22E87A594(uint64_t a1, _BYTE *a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  __int16 v43;
  char v44;
  unsigned int v45;
  int v46;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  void *p_p;
  size_t v79;
  char v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void *ArchName;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  size_t v104;
  const void *v105;
  size_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  std::string::size_type v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  BOOL v132;
  const std::string::value_type *v133;
  uint64_t v134;
  std::string::size_type v135;
  uint64_t i;
  char v137;
  BOOL v138;
  const std::string::value_type *v139;
  std::string::size_type v140;
  std::string::size_type v141;
  uint64_t (*v142)(void **);
  char v143;
  int v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, void **, void **);
  uint64_t v161;
  char v162;
  int v163;
  uint64_t v164;
  char *v165;
  uint64_t (*v166)(uint64_t);
  uint64_t v167;
  uint64_t (*v168)(void **, _QWORD *, uint64_t, std::string *, std::string::size_type);
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 *v171;
  _QWORD *v172;
  uint64_t v173;
  std::string *v174;
  std::string::size_type size;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  char v179;
  int v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t MCAsmParser;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t);
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t, void **);
  uint64_t v195;
  unsigned __int8 *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t);
  uint64_t (*v201)(void **, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char v208;
  unint64_t v209;
  uint64_t v210;
  size_t v211;
  size_t v213;
  const void **v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  const void *v219;
  size_t v220;
  const void *v222;
  size_t v223;
  __int128 v225;
  char *v226;
  char *v227;
  uint64_t *v228;
  char *v229;
  unint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  char v238;
  BOOL v239;
  uint64_t v240;
  _QWORD *v241;
  const void *v242;
  size_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t NullStreamer;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  std::string *v266;
  unsigned int v267;
  _BYTE v268[32];
  _BYTE v269[32];
  void *v270;
  size_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD v274[2];
  unsigned int v275;
  void *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284[9];
  std::string v285;
  char *v286;
  uint64_t v287;
  _WORD v288[20];
  void *v289;
  uint64_t v290;
  _BYTE v291[16];
  __int16 v292;
  void *v293[2];
  _BYTE v294[64];
  void *v295;
  __int128 v296;
  _QWORD v297[248];
  void *v298;
  uint64_t v299;
  void *v300;
  __int16 v301;
  __int16 v302;
  char v303;
  void *v304;
  char v305;
  void *v306;
  char v307;
  void *v308;
  char v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  _BYTE v313[32];
  void *__p;
  __int128 v315;
  _BYTE v316[512];
  void *v317;
  uint64_t v318;
  _BYTE v319[64];
  void *v320;
  uint64_t v321;
  _BYTE v322[32];
  void *v323;
  uint64_t v324;
  _BYTE v325[64];
  int *v326;
  uint64_t v327;
  _BYTE v328[16];
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  __int16 v333;
  uint64_t (*v334)(uint64_t);
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;

  v337 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = v4[6];
  v6 = *((_QWORD *)v4 - 1);
  v267 = v5;
  if ((**(_BYTE **)(v6 + 56) & 0x40) == 0
    || ((v7 = *(unsigned __int16 *)(a1 + 32), (v7 - 90) <= 0x14)
      ? (v8 = ((1 << (v7 - 90)) & 0x100005) == 0)
      : (v8 = 1),
        v8 ? (v9 = v7 == 21) : (v9 = 1),
        v9))
  {
    v10 = 0;
    v262 = *(_DWORD *)(a1 + 16);
    while (1)
    {
      v11 = *(unsigned __int16 *)(a1 + 32);
      if (v11 <= 0x5B)
      {
        if (v11 != 90)
        {
          if (v11 != 21)
          {
LABEL_43:
            v25 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v25 + 312) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(v25 + 316) = 1437;
            if (*(char *)(v25 + 311) < 0)
            {
              **(_BYTE **)(v25 + 288) = 0;
              *(_QWORD *)(v25 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v25 + 288) = 0;
              *(_BYTE *)(v25 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v295, v25);
            sub_22E3BB0B8((uint64_t)&v295);
            LOWORD(__p) = 22;
            v26 = 1;
            sub_22E885940(a1, (unsigned __int16 *)&__p, 1, 1);
            return v26;
          }
          if ((v10 & 4) != 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 212) & 0x20) != 0)
          {
            v19 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v19 + 312) = v262;
            *(_DWORD *)(v19 + 316) = 142;
            if (*(char *)(v19 + 311) < 0)
            {
              **(_BYTE **)(v19 + 288) = 0;
              *(_QWORD *)(v19 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v19 + 288) = 0;
              *(_BYTE *)(v19 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v269, v19);
            sub_22E3BB0B8((uint64_t)v269);
          }
          v329 = (uint64_t *)(a1 + 944);
          LOBYTE(v330) = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          v331 = a1;
          v332 = 1441813;
          v333 = 62;
          v335 = 0;
          v336 = 0;
          v334 = sub_22E80F720;
          sub_22E811DE8((uint64_t)&v329);
          v20 = sub_22E88A8D8(a1, 0);
          v21 = v20;
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8) & 0x200000000000000) != 0 || (v20 & 1) != 0)
          {
            if ((v20 & 1) != 0)
            {
              sub_22F2F18E0((uint64_t)&v329);
              v26 = 1;
              goto LABEL_247;
            }
          }
          else
          {
            v22 = ((*(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL) >> 21) & 7u)
                * *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 16);
            v295 = (void *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 4 * *(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 4) + 20);
            *(_QWORD *)&v296 = v22;
            sub_22E63A6F4(&v295);
            if (v23)
            {
              v24 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v24 + 312) = v262;
              *(_DWORD *)(v24 + 316) = 1570;
              if (*(char *)(v24 + 311) < 0)
              {
                **(_BYTE **)(v24 + 288) = 0;
                *(_QWORD *)(v24 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v24 + 288) = 0;
                *(_BYTE *)(v24 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v268, v24);
              sub_22E3BB0B8((uint64_t)v268);
            }
          }
          v289 = v291;
          v290 = 0x400000000;
          v295 = (char *)&v296 + 8;
          *(_QWORD *)&v296 = 0xC00000000;
          __p = (char *)&v315 + 8;
          *(_QWORD *)&v315 = 0xC00000000;
          v298 = &v300;
          v299 = 0xC00000000;
          v27 = *(unsigned __int16 *)(a1 + 32);
          if (v27 != 71 && v27 != 61)
          {
            if (v27 == 22)
            {
              sub_22E811E8C((uint64_t)&v329);
              v29 = sub_22ED4E804(*(_QWORD *)(a1 + 88), v5, 1, v10 & 1, 0, 0, 0, v28, (char *)v295, v296, (uint64_t *)__p, v315, v21 & 0xFFFFFFFFFFFFFFFELL, (char *)v298, v299, 0, 0, v246, SHIDWORD(v336));
              goto LABEL_164;
            }
            v30 = 0;
LABEL_56:
            if (v27 == 71 || v27 == 61)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              if (v27 == 71)
              {
                v263 = v290 - v30;
LABEL_70:
                v36 = 0;
                v37 = *(unsigned __int16 *)(a1 + 32);
                if (v37 <= 0x12 && ((1 << v37) & 0x76000) != 0)
                {
                  v38 = v30;
                  while (1)
                  {
                    v39 = sub_22E88A8D8(a1, 0);
                    if ((v39 & 1) != 0)
                      break;
                    v40 = v299;
                    if (v299 >= (unint64_t)HIDWORD(v299))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v40 = v299;
                    }
                    *((_QWORD *)v298 + v40) = v39 & 0xFFFFFFFFFFFFFFFELL;
                    LODWORD(v299) = v299 + 1;
                    v37 = *(unsigned __int16 *)(a1 + 32);
                    if (v37 != 65)
                    {
                      v36 = 0;
                      v30 = v38;
                      if ((v10 & 4) != 0)
                      {
LABEL_211:
                        if ((v36 & 1) != 0)
                        {
                          v260 = v30;
                          goto LABEL_215;
                        }
                        if (v37 == 61)
                        {
                          v260 = v30;
                          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                          v37 = *(unsigned __int16 *)(a1 + 32);
LABEL_215:
                          if (v37 == 5)
                          {
                            v84 = 1;
                            while (1)
                            {
                              v108 = sub_22EC67D70(*(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), 0);
                              v109 = 0;
                              v110 = *(unsigned __int16 *)(a1 + 32);
                              if ((v110 - 7) >= 6)
                              {
                                if ((v110 - 13) < 6 || v110 == 1)
                                  v109 = 0;
                                else
                                  v109 = *(_QWORD *)(a1 + 24);
                              }
                              v112 = v290;
                              if (v290 >= (unint64_t)HIDWORD(v290))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                v112 = v290;
                              }
                              *((_QWORD *)v289 + v112) = v109;
                              LODWORD(v290) = v290 + 1;
                              if (!v108)
                              {
                                LOWORD(v286) = 22;
                                v26 = 1;
                                sub_22E885940(a1, (unsigned __int16 *)&v286, 1, 1);
                                goto LABEL_239;
                              }
                              v113 = sub_22F32F628(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 16), v108);
                              v114 = v315;
                              if (v315 >= (unint64_t)DWORD1(v315))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                v114 = v315;
                              }
                              *((_QWORD *)__p + v114) = v113 & 0xFFFFFFFFFFFFFFFELL;
                              LODWORD(v315) = v315 + 1;
                              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                              if (*(_WORD *)(a1 + 32) != 65)
                                break;
                              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                              ++v84;
                              if (*(_WORD *)(a1 + 32) != 5)
                                goto LABEL_231;
                            }
                            v30 = v260;
LABEL_163:
                            sub_22E811E8C((uint64_t)&v329);
                            v29 = sub_22ED4E804(*(_QWORD *)(a1 + 88), v5, 0, v10 & 1, v30, v263, (char *)v289, v85, (char *)v295, v296, (uint64_t *)__p, v315, v21 & 0xFFFFFFFFFFFFFFFELL, (char *)v298, v299, 0, v84, v246, SHIDWORD(v336));
LABEL_164:
                            v26 = v29;
LABEL_239:
                            if (v298 != &v300)
                              free(v298);
                            if (__p != (char *)&v315 + 8)
                              free(__p);
                            if (v295 != (char *)&v296 + 8)
                              free(v295);
                            if (v289 != v291)
                              free(v289);
LABEL_247:
                            *(_BYTE *)v329 = v330;
                            return v26;
                          }
LABEL_231:
                          sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v286);
                          v115 = v286;
                          if (!v286)
                          {
                            v115 = (char *)sub_22E3B8AAC(v287);
                            v286 = v115;
                          }
                          v115[*v115 + 1] = 4;
                          v116 = v286;
                          v117 = *v286;
                          *v286 = v117 + 1;
                          v118 = &v116[8 * v117];
                          v119 = 5;
                        }
                        else
                        {
                          sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v286);
                          v120 = v286;
                          if (!v286)
                          {
                            v120 = (char *)sub_22E3B8AAC(v287);
                            v286 = v120;
                          }
                          v120[*v120 + 1] = 4;
                          v121 = v286;
                          v122 = *v286;
                          *v286 = v122 + 1;
                          v118 = &v121[8 * v122];
                          v119 = 61;
                        }
                        *((_QWORD *)v118 + 2) = v119;
                        sub_22E3BB0B8((uint64_t)&v286);
                        LOWORD(v286) = 22;
                        v26 = 1;
                        sub_22E885940(a1, (unsigned __int16 *)&v286, 1, 1);
                        goto LABEL_239;
                      }
LABEL_156:
                      v80 = v36 ^ 1;
                      if (v37 != 22)
                        v80 = 0;
                      if ((v80 & 1) != 0)
                      {
                        v84 = 0;
                        goto LABEL_163;
                      }
                      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v286);
                      v81 = v286;
                      if (!v286)
                      {
                        v81 = (char *)sub_22E3B8AAC(v287);
                        v286 = v81;
                      }
                      v81[*v81 + 1] = 4;
                      v82 = v286;
                      v83 = *v286;
                      *v286 = v83 + 1;
                      *(_QWORD *)&v82[8 * v83 + 16] = 22;
                      sub_22E3BB0B8((uint64_t)&v286);
                      LOWORD(v286) = 22;
                      v26 = 1;
                      sub_22E885940(a1, (unsigned __int16 *)&v286, 1, 1);
                      goto LABEL_239;
                    }
                    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
                  }
                  v36 = 0;
                  v30 = v38;
                  goto LABEL_154;
                }
                goto LABEL_155;
              }
LABEL_60:
              if ((sub_22E87C8B8(a1, (uint64_t)&v289, (uint64_t)&v295, (uint64_t)&__p) & 1) != 0)
                goto LABEL_61;
              v35 = v290;
              v27 = *(unsigned __int16 *)(a1 + 32);
            }
            else
            {
              v35 = v30;
            }
            v263 = v35 - v30;
            if (v27 == 71 || v27 == 61)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              if (v27 != 71)
                goto LABEL_70;
              v36 = 1;
            }
            else
            {
              v36 = 0;
            }
LABEL_154:
            v37 = *(unsigned __int16 *)(a1 + 32);
LABEL_155:
            if ((v10 & 4) != 0)
              goto LABEL_211;
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
          if (v27 == 71)
          {
            v30 = v290;
            goto LABEL_60;
          }
          if ((sub_22E87C8B8(a1, (uint64_t)&v289, (uint64_t)&v295, (uint64_t)&__p) & 1) == 0)
          {
            v27 = *(unsigned __int16 *)(a1 + 32);
            v30 = v290;
            goto LABEL_56;
          }
LABEL_61:
          v26 = 1;
          goto LABEL_239;
        }
        v12 = 4;
      }
      else if (v11 == 110)
      {
        v12 = 1;
      }
      else
      {
        if (v11 != 92)
          goto LABEL_43;
        v12 = 2;
      }
      v13 = *v4;
      if ((v12 & v10) != 0)
      {
        v14 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v14 + 312) = v13;
        *(_DWORD *)(v14 + 316) = 1434;
        if (*(char *)(v14 + 311) < 0)
        {
          **(_BYTE **)(v14 + 288) = 0;
          *(_QWORD *)(v14 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v14 + 288) = 0;
          *(_BYTE *)(v14 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&__p, v14);
        if (v12 == 1)
        {
          v15 = "volatile";
        }
        else if (v12 == 4)
        {
          v15 = "goto";
        }
        else
        {
          v15 = "inline";
        }
        v16 = (unsigned __int8 *)__p;
        if (!__p)
        {
          v16 = (unsigned __int8 *)sub_22E3B8AAC(v315);
          __p = v16;
        }
        v16[*v16 + 1] = 1;
        v17 = __p;
        v18 = *(unsigned __int8 *)__p;
        *(_BYTE *)__p = v18 + 1;
        v17[v18 + 2] = v15;
        sub_22E3BB0B8((uint64_t)&__p);
        v13 = *v4;
      }
      v10 |= v12;
      *(_DWORD *)(a1 + 40) = v13;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    }
  }
  *a2 = 1;
  v31 = *(_QWORD *)(v6 + 88);
  v329 = &v331;
  v330 = 0x400000000;
  v257 = *(unsigned __int16 *)(a1 + 84);
  v326 = (int *)v328;
  v327 = 0x400000000;
  v264 = v31;
  if (v7 == 23)
  {
    v32 = sub_22E80CED8(a1);
    v259 = 0;
    v258 = 0;
    v33 = v327;
    v34 = 1;
    v261 = v32;
  }
  else
  {
    v41 = sub_22E74B2B0(v31, v5);
    v42 = sub_22F1E33FC(v31, v41, SHIDWORD(v41), 0);
    v32 = 0;
    v34 = 0;
    v33 = v327;
    v261 = v5;
    v259 = v41;
    v258 = v42;
  }
  LOBYTE(v43) = 0;
  v44 = 0;
  v326[v33] = v32;
  LODWORD(v327) = v327 + 1;
  v45 = v34;
  while (1)
  {
    v46 = *(unsigned __int16 *)(a1 + 32);
    if ((v46 - 436) < 3 || v46 == 1)
      break;
    v48 = *(_DWORD *)(a1 + 16);
    if ((v44 & 1) != 0)
      goto LABEL_86;
    if (v46 == 62)
    {
      if (v7 == 23)
      {
        v50 = sub_22E74B2B0(v264, *(_DWORD *)(a1 + 16));
        v51 = HIDWORD(v50);
LABEL_106:
        v258 = sub_22F1E33FC(v264, v50, v51, 0);
        v259 = v50;
      }
LABEL_107:
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      LOBYTE(v43) = 0;
      v44 = 1;
      goto LABEL_136;
    }
    if (v46 == 23)
    {
      v43 = *(_WORD *)(a1 + 34);
      v52 = sub_22E4EF088((uint64_t)&v329, (unint64_t)v4, 1);
      v53 = (char *)&v329[3 * v330];
      v54 = *(_OWORD *)v52;
      *((_QWORD *)v53 + 2) = *(_QWORD *)(v52 + 16);
      *(_OWORD *)v53 = v54;
      LODWORD(v330) = v330 + 1;
      v48 = sub_22E80CED8(a1);
      v55 = v327;
      if (v327 >= (unint64_t)HIDWORD(v327))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v55 = v327;
      }
      v44 = 0;
      LOBYTE(v43) = v43 & 1;
      ++v45;
      v326[v55] = v48;
      v56 = v327 + 1;
LABEL_132:
      LODWORD(v327) = v56;
      goto LABEL_136;
    }
    if (v7 != 23)
    {
LABEL_86:
      v49 = sub_22E74B2B0(v264, *(_DWORD *)(a1 + 16));
      LODWORD(v50) = v49;
      v51 = HIDWORD(v49);
      if (v259 == (_DWORD)v49 && sub_22F1E33FC(v264, v49, SHIDWORD(v49), 0) == v258)
      {
        if ((v44 & 1) != 0)
          goto LABEL_107;
        if (*(_WORD *)(a1 + 32) == 24 && !v45)
          goto LABEL_139;
      }
      else
      {
        v57 = *(unsigned __int16 *)(a1 + 32);
        if (v7 != 23)
        {
          if (v57 != 127)
            break;
          v58 = *(_QWORD *)(a1 + 8);
          v59 = *(_QWORD *)(v58 + 2816);
          v60 = v59 >= *(unsigned int *)(v58 + 2784) ? sub_22F162D2C(v58, 1u) : *(_QWORD *)(v58 + 2776) + 24 * v59;
          v61 = *(unsigned __int16 *)(v60 + 16);
          v62 = (v61 - 90) > 0x14 || ((1 << (v61 - 90)) & 0x100005) == 0;
          if (!v62 || v61 == 21)
            break;
LABEL_118:
          v64 = *(_QWORD *)(a1 + 8);
          v65 = *(_QWORD *)(v64 + 2816);
          if (v65 >= *(unsigned int *)(v64 + 2784))
            v66 = sub_22F162D2C(v64, 1u);
          else
            v66 = *(_QWORD *)(v64 + 2776) + 24 * v65;
          if (*(_WORD *)(v66 + 16) == 23)
            break;
          v258 = sub_22F1E33FC(v264, v50, v51, 0);
          v43 = *(_WORD *)(a1 + 34) & 1;
          goto LABEL_123;
        }
        if (v57 == 127)
          goto LABEL_118;
        if (v57 == 62)
          goto LABEL_106;
      }
    }
LABEL_123:
    if (v45 && *(_WORD *)(a1 + 32) == 24 && v45 + v257 == *(unsigned __int16 *)(a1 + 84))
    {
      v43 = *(_WORD *)(a1 + 34);
      if (v7 != 23 || v45 >= 2)
      {
        *(_WORD *)(a1 + 34) = v43 & 0xFFFD;
        v67 = sub_22E4EF088((uint64_t)&v329, (unint64_t)v4, 1);
        v68 = (char *)&v329[3 * v330];
        v69 = *(_OWORD *)v67;
        *((_QWORD *)v68 + 2) = *(_QWORD *)(v67 + 16);
        *(_OWORD *)v68 = v69;
        LODWORD(v330) = v330 + 1;
      }
      v70 = sub_22E80CED8(a1);
      v48 = v70;
      --v45;
      if (v7 == 23 && !v45)
      {
        v261 = v70;
        if (!v34)
          goto LABEL_307;
        goto LABEL_140;
      }
      v44 = 0;
      LOBYTE(v43) = v43 & 1;
      v56 = v327 - 1;
      goto LABEL_132;
    }
    if ((v43 & 1) != 0)
      *(_WORD *)(a1 + 34) |= 1u;
    v71 = sub_22E4EF088((uint64_t)&v329, (unint64_t)v4, 1);
    v72 = (char *)&v329[3 * v330];
    v73 = *(_OWORD *)v71;
    *((_QWORD *)v72 + 2) = *(_QWORD *)(v71 + 16);
    *(_OWORD *)v72 = v73;
    LODWORD(v330) = v330 + 1;
    sub_22E80F0F0(a1, 0);
    LOBYTE(v43) = 0;
    v44 = 0;
LABEL_136:
    ++v34;
    v261 = v48;
  }
  if (v45 && *(unsigned __int16 *)(a1 + 84) != v257)
  {
    v26 = 1;
    do
    {
      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v295);
      v86 = (unsigned __int8 *)v295;
      if (!v295)
      {
        v86 = (unsigned __int8 *)sub_22E3B8AAC(v296);
        v295 = v86;
      }
      v86[*v86 + 1] = 4;
      v87 = v295;
      v88 = *(unsigned __int8 *)v295;
      *(_BYTE *)v295 = v88 + 1;
      v87[v88 + 2] = 24;
      sub_22E3BB0B8((uint64_t)&v295);
      v89 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v89 + 312) = v326[v327 - 1];
      *(_DWORD *)(v89 + 316) = 104;
      if (*(char *)(v89 + 311) < 0)
      {
        **(_BYTE **)(v89 + 288) = 0;
        *(_QWORD *)(v89 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v89 + 288) = 0;
        *(_BYTE *)(v89 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v295, v89);
      v90 = (unsigned __int8 *)v295;
      if (!v295)
      {
        v90 = (unsigned __int8 *)sub_22E3B8AAC(v296);
        v295 = v90;
      }
      v90[*v90 + 1] = 4;
      v91 = v295;
      v92 = *(unsigned __int8 *)v295;
      *(_BYTE *)v295 = v92 + 1;
      v91[v92 + 2] = 23;
      sub_22E3BB0B8((uint64_t)&v295);
      LODWORD(v327) = v327 - 1;
      --v45;
    }
    while (v45);
    goto LABEL_310;
  }
LABEL_139:
  if (!v34)
  {
LABEL_307:
    sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v295);
    v156 = (unsigned __int8 *)v295;
    if (!v295)
    {
      v156 = (unsigned __int8 *)sub_22E3B8AAC(v296);
      v295 = v156;
    }
    v156[*v156 + 1] = 4;
    v157 = v295;
    v158 = *(unsigned __int8 *)v295;
    *(_BYTE *)v295 = v158 + 1;
    v157[v158 + 2] = 23;
    sub_22E3BB0B8((uint64_t)&v295);
    v26 = 1;
    goto LABEL_310;
  }
LABEL_140:
  v323 = v325;
  v324 = 0x400000000;
  v320 = v322;
  v321 = 0x400000000;
  v317 = v319;
  v318 = 0x400000000;
  v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 15088);
  if ((*(_DWORD *)(v74 + 56) - 41) >= 2)
  {
    v93 = *(_QWORD *)(a1 + 96);
    v76 = v267;
    *(_DWORD *)(v93 + 312) = v267;
    *(_DWORD *)(v93 + 316) = 1623;
    if (*(char *)(v93 + 311) < 0)
    {
      **(_BYTE **)(v93 + 288) = 0;
      *(_QWORD *)(v93 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v93 + 288) = 0;
      *(_BYTE *)(v93 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v295, v93);
    ArchName = (void *)llvm::Triple::getArchName((llvm::Triple *)(v74 + 32));
    sub_22E3B89A8((unsigned __int8 **)&v295, ArchName, v95);
    sub_22E3BB0B8((uint64_t)&v295);
    v75 = 0;
  }
  else
  {
    v315 = 0uLL;
    __p = 0;
    v75 = llvm::TargetRegistry::lookupTarget();
    v76 = v267;
    if (!v75)
    {
      v77 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v77 + 312) = v267;
      *(_DWORD *)(v77 + 316) = 1622;
      if (*(char *)(v77 + 311) < 0)
      {
        **(_BYTE **)(v77 + 288) = 0;
        *(_QWORD *)(v77 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v77 + 288) = 0;
        *(_BYTE *)(v77 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v295, v77);
      if (v315 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v315 >= 0)
        v79 = HIBYTE(v315) & 0x7F;
      else
        v79 = v315;
      sub_22E3B89A8((unsigned __int8 **)&v295, p_p, v79);
      sub_22E3BB0B8((uint64_t)&v295);
    }
    if (SHIBYTE(v315) < 0)
      operator delete(__p);
  }
  __p = v316;
  v315 = xmmword_22F45DFC0;
  v96 = v330;
  if (!v75 || !(_DWORD)v330)
  {
    v26 = sub_22ED51D60(*(_QWORD *)(a1 + 88), v76, *v326, v329, v330, v316, 0, 0, 0, (uint64_t)v323, v324, (uint64_t)v317, v318, (uint64_t *)v320, v321, v261);
    goto LABEL_297;
  }
  v253 = v74;
  v255 = (char *)(v74 + 32);
  v97 = 0;
  v311 = v313;
  v312 = 0x800000000;
  v98 = *(_QWORD *)(a1 + 8);
  v99 = v329;
  v100 = 1;
  while (2)
  {
    if ((v100 & 1) != 0)
    {
      v100 = 1;
      LODWORD(v101) = v315;
      goto LABEL_191;
    }
    if (LOWORD(v99[3 * v97 + 2]) == 127)
    {
      v101 = v315;
      goto LABEL_188;
    }
    v102 = WORD1(v99[3 * v97 + 2]);
    v101 = v315;
    if ((v102 & 1) != 0)
    {
LABEL_188:
      if (*((_QWORD *)&v315 + 1) < (unint64_t)(v101 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v101 = v315;
      }
      *(_WORD *)((char *)__p + v101) = 2314;
      LODWORD(v101) = v315 + 2;
      *(_QWORD *)&v315 = v315 + 2;
      v100 = 1;
    }
    else if ((v102 & 2) != 0)
    {
      if ((unint64_t)(v315 + 1) > *((_QWORD *)&v315 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v101 = v315;
      }
      v100 = 0;
      *((_BYTE *)__p + v101) = 32;
      LODWORD(v101) = v315 + 1;
      *(_QWORD *)&v315 = v315 + 1;
    }
    else
    {
      v100 = 0;
    }
LABEL_191:
    v103 = v312;
    if (v312 >= (unint64_t)HIDWORD(v312))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v103 = v312;
    }
    *((_DWORD *)v311 + v103) = v101;
    LODWORD(v312) = v312 + 1;
    if (LOWORD(v99[3 * v97 + 2]) != 127)
    {
      v295 = v297;
      v296 = xmmword_22F44E330;
      LOBYTE(v289) = 0;
      v105 = (const void *)sub_22F18E170(v98, (uint64_t)&v99[3 * v97], (uint64_t *)&v295, (unsigned __int8 *)&v289);
      v106 = v104;
      v107 = v315;
      if (*((_QWORD *)&v315 + 1) < v104 + (unint64_t)v315)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v107 = v315;
        if (!v106)
          goto LABEL_199;
      }
      else if (!v104)
      {
LABEL_199:
        *(_QWORD *)&v315 = v107 + v106;
        if (v295 != v297)
          free(v295);
        v100 = 0;
        ++v97;
        goto LABEL_202;
      }
      memcpy((char *)__p + v107, v105, v106);
      v107 = v315;
      goto LABEL_199;
    }
    if (++v97 == v96)
    {
      v152 = *(_QWORD *)(v98 + 48);
      *(_DWORD *)(v152 + 312) = v267;
      *(_DWORD *)(v152 + 316) = 1435;
      if (*(char *)(v152 + 311) < 0)
      {
        **(_BYTE **)(v152 + 288) = 0;
        *(_QWORD *)(v152 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v152 + 288) = 0;
        *(_BYTE *)(v152 + 311) = 0;
      }
      v298 = (void *)(v152 + 320);
      v299 = 0;
      v300 = (void *)v152;
      v301 = 1;
      *(_BYTE *)(v152 + 320) = 0;
      *(_DWORD *)(v152 + 664) = 0;
      v153 = *(unsigned int *)(v152 + 776);
      if ((_DWORD)v153)
      {
        v154 = *(_QWORD *)(v152 + 768);
        v155 = 56 * v153;
        do
        {
          if (*(char *)(v154 + v155 - 9) < 0)
            operator delete(*(void **)(v154 + v155 - 32));
          v155 -= 56;
        }
        while (v155);
      }
      *(_DWORD *)(v152 + 776) = 0;
      sub_22E3BB0B8((uint64_t)&v298);
      v26 = 1;
      goto LABEL_295;
    }
LABEL_202:
    if (v97 != v96)
      continue;
    break;
  }
  v124 = v315;
  if ((unint64_t)(v315 + 1) > *((_QWORD *)&v315 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v124 = v315;
  }
  *((_BYTE *)__p + v124) = 0;
  v125 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 15088) + 16);
  v127 = v125[25];
  v126 = v125[26];
  memset(&v285, 0, sizeof(v285));
  if (v127 != v126)
  {
    v128 = 0xAAAAAAAAAAAAAAABLL * ((v126 - v127) >> 3) - 1;
    v129 = v127;
    do
    {
      if (*(char *)(v129 + 23) < 0)
        v130 = *(_QWORD *)(v129 + 8);
      else
        v130 = *(unsigned __int8 *)(v129 + 23);
      v128 += v130;
      v129 += 24;
    }
    while (v129 != v126);
    std::string::reserve(&v285, v128);
    v131 = *(_BYTE *)(v127 + 23);
    v132 = v131 < 0;
    v133 = v131 >= 0 ? (const std::string::value_type *)v127 : *(const std::string::value_type **)v127;
    v134 = v131 & 0x7F;
    v135 = v132 ? *(_QWORD *)(v127 + 8) : v134;
    std::string::append(&v285, v133, v135);
    for (i = v127 + 24; i != v126; i += 24)
    {
      std::string::append(&v285, ",", 1uLL);
      v137 = *(_BYTE *)(i + 23);
      v138 = v137 < 0;
      if (v137 >= 0)
        v139 = (const std::string::value_type *)i;
      else
        v139 = *(const std::string::value_type **)i;
      v140 = v137 & 0x7F;
      if (v138)
        v141 = *(_QWORD *)(i + 8);
      else
        v141 = v140;
      std::string::append(&v285, v139, v141);
    }
  }
  v142 = *(uint64_t (**)(void **))(v75 + 80);
  if (!v142)
    goto LABEL_278;
  v143 = *(_BYTE *)(v253 + 55);
  v144 = v143;
  v145 = v143 & 0x7F;
  if (v144 >= 0)
  {
    v146 = v255;
  }
  else
  {
    v145 = *(_QWORD *)(v253 + 40);
    v146 = *(char **)(v253 + 32);
  }
  v302 = 261;
  v298 = v146;
  v299 = v145;
  MEMORY[0x23489F1BC](&v295, &v298);
  v147 = v142(&v295);
  if (SHIBYTE(v296) < 0)
    operator delete(v295);
  if (!v147)
  {
LABEL_278:
    v148 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v148 + 312) = v267;
    *(_DWORD *)(v148 + 316) = 1622;
    if (*(char *)(v148 + 311) < 0)
    {
      **(_BYTE **)(v148 + 288) = 0;
      *(_QWORD *)(v148 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v148 + 288) = 0;
      *(_BYTE *)(v148 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v295, v148);
    v149 = (unsigned __int8 *)v295;
    if (!v295)
    {
      v149 = (unsigned __int8 *)sub_22E3B8AAC(v296);
      v295 = v149;
    }
    v149[*v149 + 1] = 1;
    v150 = v295;
    v151 = *(unsigned __int8 *)v295;
    *(_BYTE *)v295 = v151 + 1;
    v150[v151 + 2] = "target MC unavailable";
    sub_22E3BB0B8((uint64_t)&v295);
    v26 = sub_22ED51D60(*(_QWORD *)(a1 + 88), v267, *v326, v329, v330, __p, v315, 0, 0, (uint64_t)v323, v324, (uint64_t)v317, v318, (uint64_t *)v320, v321, v261);
    goto LABEL_283;
  }
  v159 = llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)&v298);
  v160 = *(uint64_t (**)(uint64_t, void **, void **))(v75 + 48);
  if (v160)
  {
    v162 = *(_BYTE *)(v253 + 55);
    v163 = v162;
    v164 = v162 & 0x7F;
    if (v163 >= 0)
    {
      v165 = v255;
    }
    else
    {
      v164 = *(_QWORD *)(v253 + 40);
      v165 = *(char **)(v253 + 32);
    }
    v292 = 261;
    v289 = v165;
    v290 = v164;
    MEMORY[0x23489F1BC](&v295, &v289);
    v159 = v160(v147, &v295, &v298);
    v161 = v159;
    if (SHIBYTE(v296) < 0)
      operator delete(v295);
  }
  else
  {
    v161 = 0;
  }
  v166 = *(uint64_t (**)(uint64_t))(v75 + 64);
  if (v166)
    v167 = v166(v159);
  else
    v167 = 0;
  v168 = *(uint64_t (**)(void **, _QWORD *, uint64_t, std::string *, std::string::size_type))(v75 + 88);
  if (!v168)
  {
    v169 = 0;
    goto LABEL_326;
  }
  v251 = v161;
  v252 = v167;
  v174 = &v285;
  if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v174 = (std::string *)v285.__r_.__value_.__r.__words[0];
  v266 = v174;
  if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v285.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v285.__r_.__value_.__l.__size_;
  v178 = (_QWORD *)v125[6];
  v177 = v125 + 6;
  v176 = v178;
  v179 = *((_BYTE *)v177 + 23);
  v180 = v179;
  if (v179 >= 0)
    v181 = v177;
  else
    v181 = v176;
  v182 = v179 & 0x7F;
  if (v180 >= 0)
    v183 = v182;
  else
    v183 = v177[1];
  v184 = *(_BYTE *)(v253 + 55);
  v185 = v184;
  v186 = v184 & 0x7F;
  if (v185 >= 0)
  {
    v187 = v255;
  }
  else
  {
    v186 = *(_QWORD *)(v253 + 40);
    v187 = *(char **)(v253 + 32);
  }
  v292 = 261;
  v289 = v187;
  v290 = v186;
  MEMORY[0x23489F1BC](&v295, &v289);
  v169 = v168(&v295, v181, v183, v266, size);
  if (SHIBYTE(v296) < 0)
  {
    v188 = v169;
    operator delete(v295);
    v169 = v188;
  }
  v161 = v251;
  v167 = v252;
  if (v251 && v252 && v169)
  {
    v189 = v169;
    llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)v284);
    v265 = v189;
    llvm::MCContext::MCContext();
    v250 = sub_22F2EF844(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v75 + 56), (uint64_t)&v295);
    v297[18] = v250;
    llvm::MemoryBuffer::getMemBuffer();
    v282 = v283;
    v283 = 0;
    sub_22F2EF90C(v284, &v282, 0);
    v190 = v282;
    v282 = 0;
    if (v190)
      (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
    NullStreamer = llvm::createNullStreamer();
    MCAsmParser = llvm::createMCAsmParser();
    v254 = MCAsmParser;
    v193 = *(void (**)(uint64_t, uint64_t))(v75 + 288);
    if (v193)
      v193(MCAsmParser, v192);
    v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(v75 + 112);
    if (!v194 || (v248 = v194(v189, v254, v252, &v298)) == 0)
    {
      v195 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v195 + 312) = v267;
      *(_DWORD *)(v195 + 316) = 1622;
      if (*(char *)(v195 + 311) < 0)
      {
        **(_BYTE **)(v195 + 288) = 0;
        *(_QWORD *)(v195 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v195 + 288) = 0;
        *(_BYTE *)(v195 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v289, v195);
      v196 = (unsigned __int8 *)v289;
      if (!v289)
      {
        v196 = (unsigned __int8 *)sub_22E3B8AAC(v290);
        v289 = v196;
      }
      v196[*v196 + 1] = 1;
      v197 = v289;
      v198 = *(unsigned __int8 *)v289;
      *(_BYTE *)v289 = v198 + 1;
      v197[v198 + 2] = "target ASM parser unavailable";
      sub_22E3BB0B8((uint64_t)&v289);
      v26 = sub_22ED51D60(*(_QWORD *)(a1 + 88), v267, *v326, v329, v330, __p, v315, 0, 0, (uint64_t)v323, v324, (uint64_t)v317, v318, (uint64_t *)v320, v321, v261);
      goto LABEL_469;
    }
    v288[8] = 260;
    v286 = v255;
    v199 = MEMORY[0x23489F1BC](&v289, &v286);
    v200 = *(void (**)(uint64_t))(v75 + 288);
    if (v200)
      v200(v199);
    v201 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 136);
    if (v201)
      v256 = v201(&v289, 1, v251, v252, v147);
    else
      v256 = 0;
    if ((v291[7] & 0x80000000) != 0)
      operator delete(v289);
    v202 = v254;
    v26 = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v254 + 72))(v254, 1);
    llvm::MCAsmParser::setTargetParser();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v202 + 88))(v202, 1);
    *(_BYTE *)(v248 + 64) = 1;
    v274[0] = &off_24FAA53A8;
    v274[1] = a1;
    v275 = v267;
    v276 = __p;
    v277 = v315;
    v278 = v329;
    v279 = v330;
    v280 = v311;
    v281 = v312;
    *(_QWORD *)(v248 + 72) = v274;
    v284[6] = (uint64_t)sub_22E87A4F0;
    v284[7] = (uint64_t)v274;
    v272 = 0;
    v273 = 0;
    v270 = 0;
    v271 = 0;
    v293[0] = v294;
    v293[1] = (void *)0x400000000;
    v289 = v291;
    v290 = 0x400000000;
    v286 = (char *)v288;
    v287 = 0x400000000;
    if (((*(uint64_t (**)(uint64_t, void **, char *, uint64_t *, void **, void **, char **, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v202 + 152))(v202, &v270, (char *)&v273 + 4, &v273, v293, &v289, &v286, v252, v256, v274) & 1) == 0)
    {
      v203 = v286;
      v247 = v287;
      if ((_DWORD)v287)
      {
        v205 = 0;
        v204 = &v286[24 * v287];
        v206 = 24 * v287;
        while (1)
        {
          v207 = &v203[v205];
          v208 = v203[v205 + 23];
          v209 = *(_QWORD *)&v203[v205 + 8];
          if (v208 >= 0)
            v210 = v208 & 0x7F;
          else
            v210 = *(_QWORD *)&v203[v205 + 8];
          if (v210 == 5)
          {
            if (v203[v205 + 23] < 0)
              v207 = *(char **)v207;
            else
              v209 = v203[v205 + 23];
            if (v209 >= 5)
              v213 = 5;
            else
              v213 = v209;
            if (!memcmp(v207, "mxcsr", v213) && v209 == 5)
            {
LABEL_401:
              v204 = &v203[v205];
              if (v206 - 24 == v205)
                goto LABEL_433;
              v215 = (const void **)(v204 + 24);
              v216 = v206 - v205 - 24;
              while (2)
              {
                v217 = *((unsigned __int8 *)v215 + 23);
                if ((v217 & 0x80u) == 0)
                  v218 = v217 & 0x7F;
                else
                  v218 = (unint64_t)v215[1];
                if (v218 == 5)
                {
                  v222 = v215;
                  if ((v217 & 0x80) != 0)
                  {
                    v222 = *v215;
                    v217 = (unint64_t)v215[1];
                  }
                  if (v217 >= 5)
                    v223 = 5;
                  else
                    v223 = v217;
                  if (memcmp(v222, "mxcsr", v223) || v217 != 5)
                  {
LABEL_428:
                    if (v204[23] < 0)
                      operator delete(*(void **)v204);
                    v225 = *(_OWORD *)v215;
                    *((_QWORD *)v204 + 2) = v215[2];
                    *(_OWORD *)v204 = v225;
                    v204 += 24;
                    *((_BYTE *)v215 + 23) = 0;
                    *(_BYTE *)v215 = 0;
                  }
                }
                else
                {
                  if (v218 != 4)
                    goto LABEL_428;
                  v219 = v215;
                  if ((v217 & 0x80) != 0)
                  {
                    v219 = *v215;
                    v217 = (unint64_t)v215[1];
                  }
                  v220 = v217 >= 4 ? 4 : v217;
                  if (memcmp(v219, "fpsr", v220) || v217 != 4)
                    goto LABEL_428;
                }
                v215 += 3;
                v216 -= 24;
                if (!v216)
                {
                  v203 = v286;
                  v247 = v287;
                  goto LABEL_433;
                }
                continue;
              }
            }
          }
          else if (v210 == 4)
          {
            if (v203[v205 + 23] < 0)
              v207 = *(char **)v207;
            else
              v209 = v203[v205 + 23];
            v211 = v209 >= 4 ? 4 : v209;
            if (!memcmp(v207, "fpsr", v211) && v209 == 4)
              goto LABEL_401;
          }
          v205 += 24;
          if (v206 == v205)
            goto LABEL_433;
        }
      }
      v247 = 0;
      v204 = v286;
LABEL_433:
      sub_22E80B390((__int128 *)&v203[24 * v247], (__int128 *)&v203[24 * v247], (uint64_t)v204);
      v227 = v226;
      v228 = (uint64_t *)v286;
      v229 = &v286[24 * v287];
      if (v229 != v227)
      {
        do
        {
          if (*(v229 - 1) < 0)
            operator delete(*((void **)v229 - 3));
          v229 -= 24;
        }
        while (v229 != v227);
        v228 = (uint64_t *)v286;
      }
      LODWORD(v287) = -1431655765 * ((v227 - (char *)v228) >> 3);
      sub_22F2EF9D8((uint64_t)&v317, v228, &v228[3 * v287]);
      v230 = (v273 + HIDWORD(v273));
      v231 = v324;
      if ((_DWORD)v324 != (_DWORD)v230)
      {
        if (v324 <= v230)
        {
          if (HIDWORD(v324) < v230)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v231 = v324;
          }
          if (v231 != (_DWORD)v230)
            bzero((char *)v323 + 16 * v231, 16 * (v230 - v231));
        }
        LODWORD(v324) = v230;
      }
      sub_22F24C010((uint64_t)&v320, v230);
      if ((_DWORD)v230)
      {
        v232 = 0;
        v233 = 0;
        v234 = 0;
        v235 = 24 * v230;
        v26 = 1;
        while (1)
        {
          v236 = *(_QWORD *)((char *)v293[0] + v232);
          if (!v236)
            break;
          if (*((_BYTE *)v293[0] + v232 + 8))
            v236 = sub_22EB2941C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v267, 4, v236) & 0xFFFFFFFFFFFFFFFELL;
          v237 = (char *)v289 + v234;
          v238 = *((_BYTE *)v289 + v234 + 23);
          v239 = v238 < 0;
          if (v238 < 0)
            v237 = *(char **)((char *)v289 + v234);
          v240 = v238 & 0x7F;
          if (v239)
            v240 = *(_QWORD *)((char *)v289 + v234 + 8);
          v241 = (char *)v323 + v232;
          *v241 = v237;
          v241[1] = v240;
          *(_QWORD *)((char *)v320 + v233) = v236;
          v234 += 24;
          v233 += 8;
          v232 += 16;
          if (v235 == v234)
            goto LABEL_455;
        }
      }
      else
      {
LABEL_455:
        if (v272 >= 0)
          v242 = &v270;
        else
          v242 = v270;
        if (v272 >= 0)
          v243 = HIBYTE(v272) & 0x7F;
        else
          v243 = v271;
        v26 = sub_22ED51D60(*(_QWORD *)(a1 + 88), v267, *v326, v329, v330, v242, v243, HIDWORD(v273), v273, (uint64_t)v323, v324, (uint64_t)v317, v318, (uint64_t *)v320, v321, v261);
      }
    }
    sub_22E3B9848(&v286);
    sub_22E3B9848((char **)&v289);
    if (v293[0] != v294)
      free(v293[0]);
    if (SHIBYTE(v272) < 0)
      operator delete(v270);
    llvm::MCAsmParserSemaCallback::~MCAsmParserSemaCallback((llvm::MCAsmParserSemaCallback *)v274);
    if (v256)
      (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
LABEL_469:
    v161 = v251;
    v167 = v252;
    if (v254)
      (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
    (*(void (**)(uint64_t))(*(_QWORD *)NullStreamer + 48))(NullStreamer);
    v244 = v283;
    v283 = 0;
    if (v244)
      (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
    if (v250)
      (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
    MEMORY[0x23489FB1C](&v295);
    MEMORY[0x23489FBF4](v284);
  }
  else
  {
LABEL_326:
    v170 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v170 + 312) = v267;
    *(_DWORD *)(v170 + 316) = 1622;
    v265 = v169;
    if (*(char *)(v170 + 311) < 0)
    {
      **(_BYTE **)(v170 + 288) = 0;
      *(_QWORD *)(v170 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v170 + 288) = 0;
      *(_BYTE *)(v170 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v295, v170);
    v171 = (unsigned __int8 *)v295;
    if (!v295)
    {
      v171 = (unsigned __int8 *)sub_22E3B8AAC(v296);
      v295 = v171;
    }
    v171[*v171 + 1] = 1;
    v172 = v295;
    v173 = *(unsigned __int8 *)v295;
    *(_BYTE *)v295 = v173 + 1;
    v172[v173 + 2] = "target MC unavailable";
    sub_22E3BB0B8((uint64_t)&v295);
    v26 = sub_22ED51D60(*(_QWORD *)(a1 + 88), v267, *v326, v329, v330, __p, v315, 0, 0, (uint64_t)v323, v324, (uint64_t)v317, v318, (uint64_t *)v320, v321, v261);
  }
  if (!v265)
  {
    if (!v167)
      goto LABEL_478;
LABEL_490:
    MEMORY[0x2348A0E9C](v167, 0x10F0C40CB53E019);
    if (!v161)
      goto LABEL_480;
LABEL_479:
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
    goto LABEL_480;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  if (v167)
    goto LABEL_490;
LABEL_478:
  if (v161)
    goto LABEL_479;
LABEL_480:
  v295 = &v310;
  sub_22E3B3CC8((void ***)&v295);
  if (v309 < 0)
    operator delete(v308);
  if (v307 < 0)
    operator delete(v306);
  if (v305 < 0)
    operator delete(v304);
  if (v303 < 0)
    operator delete(v300);
  v245 = sub_22F2EF990(v147);
  MEMORY[0x2348A0E9C](v245, 0x10F0C4031312594);
LABEL_283:
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
LABEL_295:
  if (v311 != v313)
    free(v311);
LABEL_297:
  if (__p != v316)
    free(__p);
  if (v317 != v319)
    free(v317);
  if (v320 != v322)
    free(v320);
  if (v323 != v325)
    free(v323);
LABEL_310:
  if (v326 != (int *)v328)
    free(v326);
  if (v329 != &v331)
    free(v329);
  return v26;
}

uint64_t sub_22E87C8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[4];
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;

  v4 = *(unsigned __int16 *)(a1 + 32);
  if (v4 > 0x13 || ((1 << v4) & 0xF6000) == 0)
    return 0;
  v10 = (int *)(a1 + 16);
  v11 = (unsigned __int8 *)(a1 + 944);
  while (v4 != 19)
  {
    v14 = *(unsigned int *)(a2 + 8);
    if (v14 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = 0;
    ++*(_DWORD *)(a2 + 8);
LABEL_14:
    v15 = sub_22E88A8D8(a1, 0);
    if ((v15 & 1) != 0)
    {
      LOWORD(v31) = 22;
      v22 = 1;
LABEL_29:
      sub_22E885940(a1, (unsigned __int16 *)&v31, 1, 1);
      return v22;
    }
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15 & 0xFFFFFFFFFFFFFFFELL;
    ++*(_DWORD *)(a3 + 8);
    if (*(_WORD *)(a1 + 32) != 21)
    {
      sub_22E884578(a1, v10, 1510, (uint64_t)&v31);
      v23 = v31;
      if (!v31)
      {
        v23 = (unsigned __int8 *)sub_22E3B8AAC(v32);
        v31 = v23;
      }
      v22 = 1;
      v23[*v23 + 1] = 1;
      v24 = v31;
      v25 = *v31;
      *v31 = v25 + 1;
      *(_QWORD *)&v24[8 * v25 + 16] = "asm operand";
      sub_22E3BB0B8((uint64_t)&v31);
      LOWORD(v31) = 22;
      goto LABEL_29;
    }
    v31 = v11;
    LOBYTE(v32) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v33 = a1;
    v34 = 1441813;
    v35 = 62;
    v37 = 0;
    v38 = 0;
    v36 = sub_22E80F720;
    sub_22E811DE8((uint64_t)&v31);
    v17 = *(_QWORD *)(a1 + 88);
    v18 = sub_22E83766C(a1, 0);
    v19 = sub_22E83778C(a1, v18, 1);
    v20 = v19;
    if ((v19 & 1) == 0)
      v20 = (unint64_t)sub_22EBBCB14(v17, (_DWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v30);
    sub_22E811E8C((uint64_t)&v31);
    if ((v20 & 1) != 0)
    {
      LOWORD(v30[0]) = 22;
      v22 = 1;
      sub_22E885940(a1, (unsigned __int16 *)v30, 1, 1);
      *v31 = v32;
      return v22;
    }
    v21 = *(unsigned int *)(a4 + 8);
    if (v21 >= *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(unsigned int *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v21) = v20 & 0xFFFFFFFFFFFFFFFELL;
    ++*(_DWORD *)(a4 + 8);
    if (*(_WORD *)(a1 + 32) != 65)
    {
      v22 = 0;
      goto LABEL_36;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v10);
    *v31 = v32;
    v4 = *(unsigned __int16 *)(a1 + 32);
  }
  v31 = v11;
  LOBYTE(v32) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v33 = a1;
  v34 = 1310739;
  v35 = 62;
  v37 = 0;
  v38 = 0;
  v36 = sub_22E80F788;
  sub_22E811DE8((uint64_t)&v31);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    v12 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v10);
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v12;
    ++*(_DWORD *)(a2 + 8);
    sub_22E811E8C((uint64_t)&v31);
    *v31 = v32;
    goto LABEL_14;
  }
  sub_22E884578(a1, v10, 15, (uint64_t)v30);
  v26 = (unsigned __int8 *)v30[0];
  if (!v30[0])
  {
    v26 = (unsigned __int8 *)sub_22E3B8AAC(v30[1]);
    v30[0] = v26;
  }
  v26[*v26 + 1] = 4;
  v27 = v30[0];
  v28 = *(unsigned __int8 *)v30[0];
  *(_BYTE *)v30[0] = v28 + 1;
  *(_QWORD *)(v27 + 8 * v28 + 16) = 5;
  sub_22E3BB0B8((uint64_t)v30);
  LOWORD(v30[0]) = 22;
  v22 = 1;
  sub_22E885940(a1, (unsigned __int16 *)v30, 1, 1);
LABEL_36:
  *v31 = v32;
  return v22;
}

uint64_t sub_22E87CD04(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v1 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) + 1;
  if (v1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v1)
    v1 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v3 = 0xAAAAAAAAAAAAAAALL;
  else
    v3 = v1;
  if (v3)
  {
    if (v3 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v4 = (char *)operator new(24 * v3);
  }
  else
  {
    v4 = 0;
  }
  v5 = &v4[24 * v3];
  v6 = llvm::SourceMgr::SrcBuffer::SrcBuffer();
  v7 = v6 + 24;
  v9 = (char *)*a1;
  v8 = (char *)a1[1];
  if (v8 == (char *)*a1)
  {
    *a1 = v6;
    a1[1] = v7;
    a1[2] = (uint64_t)v5;
  }
  else
  {
    do
    {
      v8 -= 24;
      v10 = llvm::SourceMgr::SrcBuffer::SrcBuffer();
    }
    while (v8 != v9);
    v8 = (char *)*a1;
    v11 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v7;
    a1[2] = (uint64_t)v5;
    while (v11 != v8)
    {
      v11 -= 24;
      MEMORY[0x23489FBDC](v11);
    }
  }
  if (v8)
    operator delete(v8);
  return v7;
}

void sub_22E87CE30(llvm::MCAsmParserSemaCallback *a1)
{
  llvm::MCAsmParserSemaCallback::~MCAsmParserSemaCallback(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E87CE54(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v50;
  __int128 v51;
  void *v52[2];
  _QWORD v53[2];
  int v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[384];
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v55 = v57;
  v56 = 0x1000000000;
  v7 = *a2;
  v8 = a1[3];
  v9 = a1[7];
  v10 = a1[8];
  if (v10)
  {
    v11 = (_DWORD *)a1[7];
    v12 = a1[8];
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < (int)v7 - (int)v8)
        v11 = v15;
      else
        v12 = v13;
    }
    while (v12);
  }
  else
  {
    v11 = (_DWORD *)a1[7];
  }
  v17 = (unint64_t)v11 - v9;
  v18 = ((unint64_t)v11 - v9) >> 2;
  v48 = a1[5];
  if ((_DWORD)v18 != (_DWORD)v10)
  {
    v19 = v7 + a2[1] - v8;
    do
    {
      if (*(_DWORD *)(a1[7] + 4 * v18) >= v19)
        break;
      v20 = v18;
      v21 = sub_22E4EF088((uint64_t)&v55, a1[5] + 24 * v18, 1);
      v22 = (char *)v55 + 24 * v56;
      v23 = *(_OWORD *)v21;
      *((_QWORD *)v22 + 2) = *(_QWORD *)(v21 + 16);
      *(_OWORD *)v22 = v23;
      LODWORD(v56) = v56 + 1;
      LODWORD(v18) = v20 + 1;
    }
    while ((_DWORD)v10 != v20 + 1);
  }
  v24 = a1[1];
  v53[0] = 0;
  v53[1] = 0;
  v54 = 62;
  v25 = sub_22E4EF088((uint64_t)&v55, (unint64_t)v53, 1);
  v26 = (char *)v55 + 24 * v56;
  v27 = *(_OWORD *)v25;
  *((_QWORD *)v26 + 2) = *(_QWORD *)(v25 + 16);
  *(_OWORD *)v26 = v27;
  LODWORD(v56) = v56 + 1;
  v28 = sub_22E4EF088((uint64_t)&v55, v24 + 16, 1);
  v29 = (char *)v55 + 24 * v56;
  v30 = *(_OWORD *)v28;
  *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + 16);
  *(_OWORD *)v29 = v30;
  LODWORD(v56) = v56 + 1;
  sub_22F1735E4(*(_QWORD *)(v24 + 8), v55, v56, 1, 0, 1);
  sub_22E80F0F0(v24, 0);
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 56) + 1) & 1) != 0)
    sub_22E8408AC(v24, (uint64_t)&v51, 0, 0, 0, 0, 0, 0, 0, 0);
  v50 = 0;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  if (*(_WORD *)(v24 + 32) == 148)
  {
    *(_DWORD *)(v24 + 40) = *(_DWORD *)(v24 + 16);
    sub_22F18FB4C(*(_QWORD *)(v24 + 8), (unsigned int *)(v24 + 16));
    v31 = (unint64_t)sub_22EBBC0DC(*(_QWORD **)(v24 + 88), *(_DWORD *)(v24 + 40));
    v32 = 0;
  }
  else
  {
    v32 = sub_22E842CDC(v24, (uint64_t)&v51, 0, 0, 0, 0, 0, 0, &v50, (uint64_t)&v58);
    v31 = sub_22ED512EC(*(_QWORD *)(v24 + 88), (uint64_t)&v51, v50, &v58, a4);
  }
  if (v31 < 2)
  {
LABEL_31:
    v33 = *(unsigned __int16 *)(v24 + 32);
  }
  else
  {
    while (1)
    {
      v33 = *(unsigned __int16 *)(v24 + 32);
      if (v33 != 25)
        break;
      v34 = *(_QWORD *)(v24 + 8);
      v35 = *(_QWORD *)(v34 + 2816);
      if (v35 >= *(unsigned int *)(v34 + 2784))
        v36 = sub_22F162D2C(v34, 1u);
      else
        v36 = *(_QWORD *)(v34 + 2776) + 24 * v35;
      if (*(_WORD *)(v36 + 16) == 5)
      {
        *(_DWORD *)(v24 + 40) = *(_DWORD *)(v24 + 16);
        sub_22F18FB4C(*(_QWORD *)(v24 + 8), (unsigned int *)(v24 + 16));
        v37 = *(unsigned __int16 *)(v24 + 32);
        if ((v37 - 7) >= 6)
        {
          v38 = 0;
          if ((v37 - 13) >= 6 && v37 != 1)
            v38 = *(_QWORD *)(v24 + 24);
        }
        else
        {
          v38 = 0;
        }
        *(_DWORD *)(v24 + 40) = *(_DWORD *)(v24 + 16);
        sub_22F18FB4C(*(_QWORD *)(v24 + 8), (unsigned int *)(v24 + 16));
        v31 = sub_22ED51A5C(*(_QWORD **)(v24 + 88), v31 & 0xFFFFFFFFFFFFFFFELL, (const void *)(*(_QWORD *)(v38 + 16) + 16), **(unsigned int **)(v38 + 16), *(_DWORD *)(v24 + 16));
        if (v31 > 1)
          continue;
      }
      goto LABEL_31;
    }
  }
  if (v33 == 62)
  {
    v39 = v56;
    v40 = v56 - 2;
    v41 = v56 - 2;
  }
  else
  {
    v40 = -1;
    do
      ++v40;
    while (*((_DWORD *)v55 + 6 * v40) != *(_DWORD *)(v24 + 16));
    v39 = v56;
    if (v32)
      v41 = v56 - 2;
    else
      v41 = v40;
  }
  v42 = v39 - v40;
  v43 = v42 - 2;
  if (v42 != 2)
  {
    do
    {
      sub_22E80F0F0(v24, 0);
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(v24 + 40) = *(_DWORD *)(v24 + 16);
  sub_22F18FB4C(*(_QWORD *)(v24 + 8), (unsigned int *)(v24 + 16));
  v44 = v56 - 2;
  LODWORD(v56) = v56 - 2;
  if (HIDWORD(v52[1]))
  {
    free(v52[0]);
    v44 = v56;
  }
  if (v41 && v44 != v41)
  {
    v45 = a1[5];
    v46 = v41 - 1431655765 * ((v48 + 24 * (v17 >> 2) - v45) >> 3) - 1;
    v47 = (*(_DWORD *)(v45 + 24 * v46 + 4)
                       + *(_DWORD *)(a1[7] + 4 * v46)
                       - *(_DWORD *)(a1[7]
                                   + 0xFFFFFFFEAAAAAAACLL
                                   * ((v48 + 24 * (v17 >> 2) - v45) >> 3)));
    if (a2[1] < v47)
      v47 = a2[1];
    a2[1] = v47;
  }
  if (v31 >= 2)
    sub_22ED51100(*(_QWORD *)(a1[1] + 88), v31 & 0xFFFFFFFFFFFFFFFELL, a3);
  if (v55 != v57)
    free(v55);
}

uint64_t sub_22E87D354(uint64_t a1, unsigned __int8 *a2, size_t a3, _QWORD *a4, int a5, int a6)
{
  int v10;

  v10 = sub_22E87D3CC(a1, a4, a5);
  return *(_QWORD *)(sub_22ED51F38(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), a2, a3, v10, a6) + 56);
}

uint64_t sub_22E87D3B8(uint64_t a1, _DWORD *a2, size_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  return sub_22ED51458(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, a3, a4, a5, a6, *(_DWORD *)(a1 + 16));
}

uint64_t sub_22E87D3CC(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;

  v4 = a3 - *(_DWORD *)(*(_QWORD *)(*a2 + 24 * (llvm::SourceMgr::FindBufferContainingLoc() - 1)) + 8);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = *(_DWORD **)(a1 + 56);
    do
    {
      v7 = v5 >> 1;
      v8 = &v6[v5 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v5 += ~(v5 >> 1);
      if (v10 < v4)
        v6 = v9;
      else
        v5 = v7;
    }
    while (v5);
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 56);
  }
  v11 = (((unint64_t)v6 - *(_QWORD *)(a1 + 56)) >> 2);
  if (v11 >= *(_QWORD *)(a1 + 48))
    return *(unsigned int *)(a1 + 16);
  else
    return v4 - *v6 + *(_DWORD *)(*(_QWORD *)(a1 + 40) + 24 * v11);
}

unint64_t sub_22E87D494(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;

  sub_22E8287D8((uint64_t)&v16, a1);
  if (*(_WORD *)(a1 + 32) == 147
    && ((v10 = *(_QWORD *)(a1 + 8), v11 = *(_QWORD *)(v10 + 2816), v11 < *(unsigned int *)(v10 + 2784))
      ? (v12 = *(_QWORD *)(v10 + 2776) + 24 * v11)
      : (v12 = sub_22F162D2C(v10, 1u)),
        *(_WORD *)(v12 + 16) != 46))
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v13 = sub_22F2EFA94(a1, a2, 0, *(_DWORD *)(a1 + 40), a3, a4, a5);
  }
  else
  {
    v13 = sub_22E87D5A4(a1, a2, a3, a4, a5);
  }
  v14 = v13;
  if (v17)
    sub_22F31E524(*(_QWORD *)(v16 + 88), v17);
  *v18 = v19;
  return v14;
}

unint64_t sub_22E87D5A4(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v33;
  _BYTE v34[38];
  unsigned __int16 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  _QWORD v44[3];
  _QWORD v45[41];
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  sub_22E885C30(a1, 128);
  v7 = 0;
  v8 = 0;
  v43 = *(_QWORD *)(a1 + 88);
  v44[0] = 0;
  v44[1] = v45;
  v44[2] = 0x400000000;
  v9 = *(_QWORD *)(v43 + 3200);
  *(_QWORD *)(v43 + 3200) = v44;
  v45[40] = v9;
  v46 = 0;
  v40 = v42;
  v41 = 0x400000000;
  v10 = *(unsigned __int16 *)(a1 + 32);
  v11 = 1;
  do
  {
    if (v10 == 135)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v12 = *(_DWORD *)(a1 + 40);
      v10 = *(unsigned __int16 *)(a1 + 32);
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_DWORD *)(a1 + 16);
    if (v10 != 147)
    {
      sub_22E88453C(a1, v13, 1539, (uint64_t)v34);
      sub_22E3BB0B8((uint64_t)v34);
LABEL_30:
      v26 = 0;
      goto LABEL_23;
    }
    *(_DWORD *)(a1 + 40) = v13;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v14 = *(_DWORD *)(a1 + 40);
    v33 = 0;
    v36 = &v38;
    v37 = 0x400000000;
    if (sub_22E87D9AC(a1, *(_DWORD *)(a1 + 952), (uint64_t)&v36, (_DWORD *)&v33 + 1, &v33))
    {
      v35 = 24;
      sub_22E885940(a1, &v35, 1, 3);
      if (*(_WORD *)(a1 + 32) == 62)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      }
      v20 = 0;
    }
    else
    {
      v15 = v37;
      v16 = *(unsigned int *)(a1 + 952);
      if (!(_DWORD)v37)
      {
        v15 = 0;
        v17 = 0;
        v8 = 1;
        goto LABEL_9;
      }
      v16 = (v16 + 1);
      *(_DWORD *)(a1 + 952) = v16;
      ++v7;
      if (*(_WORD *)(a1 + 32) != 168)
      {
        v17 = 0;
        v11 = 0;
LABEL_9:
        v18 = sub_22ED5BDFC(*(_QWORD **)(a1 + 88), v16, v12, v14, SHIDWORD(v33), (uint64_t)v36, v15, v33, v17 & 0xFFFFFFFFFFFFFFFELL);
        v19 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v41;
        }
        *((_QWORD *)v40 + v19) = v18;
        LODWORD(v41) = v41 + 1;
        v20 = 1;
        goto LABEL_12;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v28 = *(_QWORD *)(a1 + 88);
      v29 = sub_22F2E536C(a1, 0);
      v17 = sub_22F327CBC(v28, v29);
      if (v17 >= 2)
      {
        v11 = 0;
        v16 = *(unsigned int *)(a1 + 952);
        v15 = v37;
        goto LABEL_9;
      }
      v35 = 24;
      sub_22E885940(a1, &v35, 1, 3);
      if (*(_WORD *)(a1 + 32) == 62)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      }
      v20 = 0;
      v11 = 0;
    }
LABEL_12:
    if (v36 != &v38)
      free(v36);
    if (!v20)
      goto LABEL_30;
    v10 = *(unsigned __int16 *)(a1 + 32);
  }
  while (v10 == 147 || v10 == 135);
  v21 = *(_QWORD *)(a1 + 88);
  v22 = *(_QWORD *)(v21 + 12888);
  v23 = *(_DWORD *)(v22 + 8);
  if ((v11 & 1) != 0)
  {
    sub_22E8FB7FC(*(_QWORD *)(v21 + 12888), *(_QWORD *)v22, v23 & 0xFFFFFF7F);
    v10 = *(unsigned __int16 *)(a1 + 32);
    v24 = 2;
  }
  else
  {
    v22 = 0;
    v24 = 1;
  }
  LODWORD(v36) = v24;
  v37 = (uint64_t)&v40;
  v38 = 0;
  v39 = v8;
  if (v10 == 167)
    v25 = sub_22E87DB78(a1, (uint64_t)&v36, a3);
  else
    v25 = sub_22E87DF50(a1, a2, (int *)&v36, (uint64_t)&v43, a3, a4, a5);
  v26 = v25;
  if (v22)
    sub_22E8FB7FC(v22, *(_QWORD *)v22, v23);
LABEL_23:
  *(_DWORD *)(a1 + 952) -= v7;
  if (v40 != v42)
    free(v40);
  sub_22E828C30((uint64_t)&v43);
  sub_22E885CF4(a1);
  return v26;
}

uint64_t sub_22E87D9AC(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;

  if (*(_WORD *)(a1 + 32) == 46)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    *a4 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int16 *)(a1 + 32);
    if ((v10 - 51) < 2)
    {
      v11 = 1;
    }
    else
    {
      v11 = !sub_22E87EC88(a1, a2, a3);
      v10 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v10 == 51)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v12 = 0;
      *a5 = *(_DWORD *)(a1 + 40);
    }
    else if (v10 == 52)
    {
      v12 = 0;
      *(_WORD *)(a1 + 32) = 51;
      *a5 = (*(_DWORD *)(a1 + 16))++;
    }
    else if (v11)
    {
      return 0;
    }
    else
    {
      sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 15, (uint64_t)&v20);
      v17 = v20;
      if (!v20)
      {
        v17 = (unsigned __int8 *)sub_22E3B8AAC(v21);
        v20 = v17;
      }
      v17[*v17 + 1] = 4;
      v18 = v20;
      v19 = *v20;
      *v20 = v19 + 1;
      *(_QWORD *)&v18[8 * v19 + 16] = 51;
      sub_22E3BB0B8((uint64_t)&v20);
      return 1;
    }
  }
  else
  {
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1509, (uint64_t)&v20);
    v14 = v20;
    if (!v20)
    {
      v14 = (unsigned __int8 *)sub_22E3B8AAC(v21);
      v20 = v14;
    }
    v12 = 1;
    v14[*v14 + 1] = 1;
    v15 = v20;
    v16 = *v20;
    *v20 = v16 + 1;
    *(_QWORD *)&v15[8 * v16 + 16] = "template";
    sub_22E3BB0B8((uint64_t)&v20);
  }
  return v12;
}

uint64_t sub_22E87DB78(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[4];
  _BYTE v29[32];
  _BYTE v30[32];
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v6 + 16) == 128)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
    v7 = *(unsigned int *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v8 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v8 + 316) = 1797;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v9 = (uint64_t *)sub_22E78E558((uint64_t)&v35, v8);
    BYTE4(v31[1]) = 0;
    *(_QWORD *)((char *)v31 + 12) = 0;
    v32 = 0;
    v33 = 0;
    *((_QWORD *)&v31[1] + 1) = 0;
    v34 = 0;
    *(_QWORD *)&v31[0] = v7 | (v7 << 32);
    BYTE8(v31[0]) = 1;
    sub_22E6D82D0(v9, v31);
    if (SHIBYTE(v33) < 0)
      operator delete(*((void **)&v31[1] + 1));
    sub_22E3BB0B8((uint64_t)&v35);
  }
  sub_22E831780(a1);
  memset(v31, 0, sizeof(v31));
  if ((sub_22E8408AC(a1, (uint64_t)v31, 0, 0, 0, 0, 0, 0, 1, 0) & 1) != 0
    || (LODWORD(v31[0]) ? (v10 = DWORD1(v31[0]) == 0) : (v10 = 1),
        v10 ? (v11 = 0) : (v11 = 1),
        v11 == 1 ? (v12 = *((_QWORD *)&v31[0] + 1) == 0) : (v12 = 0),
        v12))
  {
    LOWORD(v35) = 62;
    v16 = (unsigned __int16 *)&v35;
LABEL_38:
    sub_22E885940(a1, v16, 1, 0);
    v23 = 0;
    goto LABEL_39;
  }
  if (*((_QWORD *)&v31[0] + 1))
    v11 = 1;
  if (v11 == 1)
  {
    v13 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v13 + 312) = v31[0];
    *(_DWORD *)(v13 + 316) = 1463;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v30, v13);
    sub_22E3BB0B8((uint64_t)v30);
  }
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (sub_22E842CDC(a1, (uint64_t)v31, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v35))
  {
LABEL_37:
    LOWORD(v28[0]) = 62;
    v16 = (unsigned __int16 *)v28;
    goto LABEL_38;
  }
  if (v35)
  {
    v14 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v14 + 312) = v37;
    *(_DWORD *)(v14 + 316) = 1463;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v29, v14);
    v15 = v29;
LABEL_36:
    sub_22E3BB0B8((uint64_t)v15);
    goto LABEL_37;
  }
  v17 = v36;
  v18 = v37;
  sub_22E831780(a1);
  if (*(_WORD *)(a1 + 32) != 63)
  {
    v19 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v19 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v19 + 316) = 15;
    if (*(char *)(v19 + 311) < 0)
    {
      **(_BYTE **)(v19 + 288) = 0;
      *(_QWORD *)(v19 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 288) = 0;
      *(_BYTE *)(v19 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v28, v19);
    v20 = (unsigned __int8 *)v28[0];
    if (!v28[0])
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC(v28[1]);
      v28[0] = v20;
    }
    v20[*v20 + 1] = 4;
    v21 = v28[0];
    v22 = *(unsigned __int8 *)v28[0];
    *(_BYTE *)v28[0] = v22 + 1;
    *(_QWORD *)(v21 + 8 * v22 + 16) = 63;
    v15 = v28;
    goto LABEL_36;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
  v25 = *(_QWORD *)(a1 + 88);
  v26 = sub_22F2E5148(a1);
  v27 = v26;
  if ((v26 & 1) == 0)
    v27 = (unint64_t)sub_22EBBCB14(v25, (_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v28);
  if ((v27 & 1) != 0)
    goto LABEL_37;
  *a3 = *(_DWORD *)(a1 + 16);
  sub_22E884BB4(a1, 1533);
  v23 = sub_22F3466CC(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), **(uint64_t ***)(a2 + 8), *(unsigned int *)(*(_QWORD *)(a2 + 8) + 8), v17, v18, v27 & 0xFFFFFFFFFFFFFFFELL);
LABEL_39:
  if (HIDWORD(v31[1]))
    free(*(void **)&v31[1]);
  return v23;
}

unint64_t sub_22E87DF50(uint64_t a1, int a2, int *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int ***v11;
  int v12;
  unint64_t v13;
  unsigned int *v17;
  unint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  llvm *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char v49;
  int v50;
  int *v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  unsigned __int8 *v69;
  _QWORD *v70;
  uint64_t v71;
  llvm *v72;
  llvm *TimeTraceProfilerInstance;
  unsigned int v75;
  unsigned int *v76;
  uint64_t *v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  char v81;
  _BYTE v82[32];
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  void *__p;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[24];
  _QWORD *v96;
  _QWORD v97[3];
  uint64_t v98;
  _QWORD *v99;
  char v100;
  unsigned __int8 *v101;
  __int128 v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  __int128 v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD v122[3];
  uint64_t v123;
  uint64_t v124;
  char v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143[44];
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 32) != 165)
  {
    if (a2 == 7)
    {
      sub_22E831804(a1, a7, a6, a3, a4);
      return 0;
    }
    v83 = 0;
    v84 = 0;
    v85 = a1 + 960;
    v86 = 0;
    sub_22E8103B4(a1, &v83, 0);
    if (*(_WORD *)(a1 + 32) == 154)
    {
      v18 = sub_22E82A4C4(a1, a2, a3, a5, (uint64_t)&v83);
      if ((v18 & 1) != 0)
        v19 = 0;
      else
        v19 = (unsigned int *)v18;
      if (v18)
        v17 = v19;
      else
        v17 = 0;
LABEL_132:
      sub_22E8D1BC4(v85, (uint64_t)&v85);
      sub_22E80F94C(&v86);
      sub_22E80F94C((uint64_t *)&v84);
      return (unint64_t)v17;
    }
    v76 = (unsigned int *)(a1 + 16);
    v126[0] = 0;
    v126[2] = 0;
    v128 = 0;
    v127 = 0;
    v129 = a1 + 960;
    v141 = 0;
    v130 = 0u;
    v131 = 0u;
    v132 = 0u;
    v133 = 0u;
    v134 = 0u;
    v135 = 0u;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v139 = 0u;
    v140 = 0;
    sub_22E836960((uint64_t)&v142, a1, a4);
    if (a2)
    {
      if (a2 == 12)
      {
        v21 = 6;
      }
      else
      {
        v75 = a2 & 0xFFFFFFFE;
        if ((a2 & 0xFFFFFFFE) == 0x14)
        {
          v21 = 3;
        }
        else if (v75 == 22)
        {
          v21 = 7;
        }
        else
        {
          v21 = 4 * (v75 == 24);
        }
      }
    }
    else
    {
      v21 = 5;
    }
    v22 = &v128;
    sub_22E818334(a1, v126, a3, a7, v21, 0, 0);
    if (*(_WORD *)(a1 + 32) == 62)
    {
      if ((_DWORD)v83 && HIDWORD(v83))
      {
        sub_22E8175C8(a1, &v83, 0);
        sub_22E820B10(&v83);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v76);
      *a5 = *(_DWORD *)(a1 + 40);
      v101 = 0;
      v23 = *((_QWORD *)a3 + 1);
      if (v23)
      {
        v24 = *(const void **)v23;
        v25 = *(unsigned int *)(v23 + 8);
      }
      else
      {
        v25 = 0;
        v24 = 0;
      }
      v17 = (unsigned int *)sub_22EA0F52C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a7, (unsigned int *)v126, v24, v25, *a3 == 3, (unint64_t *)&v101);
      if (!v144)
      {
        sub_22EA7E84C(v142, v143[43], v17);
        v144 = 1;
      }
      goto LABEL_129;
    }
    if (*a3 == 3)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) == 0)
      {
        if ((_DWORD)v83 && HIDWORD(v83))
        {
          sub_22E8175C8(a1, &v83, 0);
          sub_22E820B10(&v83);
        }
LABEL_61:
        v102 = 0u;
        v103 = 0u;
        v107 = *((_QWORD *)&v132 + 1);
        v109 = 0u;
        v111 = &v113;
        v101 = (unsigned __int8 *)v126;
        v105 = 0;
        v106 = 0;
        v104 = 0;
        v108 = a2;
        v110 = 0;
        v112 = 0x800000000;
        v114 = v114 & 0xFC00 | ((v126[0] & 0x3F000) == 204800);
        v115 = 0u;
        v116 = v129;
        v120 = 0;
        v117 = 0u;
        v118 = 0u;
        v119 = 0u;
        v39 = *(_QWORD **)(a1 + 88);
        v121 = v39;
        v122[0] = v143;
        v122[1] = &v123;
        v122[2] = 0x400000000;
        v40 = v39[400];
        v39[400] = v122;
        v124 = v40;
        v125 = 0;
        v41 = (uint64_t *)*((_QWORD *)a3 + 1);
        if (v41)
        {
          v42 = *v41;
          v43 = *((unsigned int *)v41 + 2);
          *((_QWORD *)&v118 + 1) = v42;
          *(_QWORD *)&v119 = v43;
        }
        v44 = *a3;
        v96 = v39;
        v97[0] = 0;
        v97[1] = &v98;
        v97[2] = 0x400000000;
        if ((v44 & 0xFFFFFFFE) == 2)
        {
          v39[400] = v97;
          v99 = v122;
          v100 = 1;
          sub_22E8227E4(a1, (uint64_t)&v101, (unint64_t)sub_22E823490, 0);
          sub_22EA7E84C(v96, (uint64_t)v99, 0);
          v100 = 0;
        }
        else
        {
          v100 = 0;
          sub_22E8227E4(a1, (uint64_t)&v101, (unint64_t)sub_22E823490, 0);
        }
        if (!v104 && !v105 && !(_DWORD)v109)
        {
          LOWORD(v87) = 24;
          sub_22E885940(a1, (unsigned __int16 *)&v87, 1, 3);
          if (*(_WORD *)(a1 + 32) == 62)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v76);
          }
          v17 = 0;
LABEL_128:
          sub_22E828B78((uint64_t)&v96);
          sub_22E828C30((uint64_t)&v121);
          sub_22E827F78((uint64_t)&v101);
LABEL_129:
          sub_22E828C30((uint64_t)&v142);
          if (DWORD1(v132))
            free(*((void **)&v131 + 1));
          sub_22E8D1BC4(v129, (uint64_t)&v129);
          sub_22E80F94C((uint64_t *)&v130);
          sub_22E80F94C(v22);
          goto LABEL_132;
        }
        v87 = &v101;
        if (llvm::getTimeTraceProfilerInstance(v45))
          llvm::timeTraceProfilerBegin();
        v93 = v95;
        v94 = 0x200000000;
        v95[16] = 1;
        LODWORD(v46) = v112;
        if ((_DWORD)v112)
        {
          v47 = (int *)v111;
          v48 = v112;
          while (1)
          {
            v50 = *v47;
            v47 += 30;
            v49 = v50;
            if (v50 != 6)
              break;
            if (!--v48)
              goto LABEL_80;
          }
          if (((1 << v49) & 0xB7) != 0)
            goto LABEL_80;
          if (*(_WORD *)(a1 + 32) == 168)
            sub_22E831098(a1, (uint64_t)&v101);
          sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v101, (uint64_t)&v93, 0);
          LODWORD(v46) = v112;
          if ((_DWORD)v112)
          {
LABEL_80:
            v51 = (int *)v111;
            v46 = v46;
            while (1)
            {
              v53 = *v51;
              v51 += 30;
              v52 = v53;
              if (v53 != 6)
                break;
              if (!--v46)
                goto LABEL_110;
            }
            if (v52 == 3 && sub_22E888FB8(a1, (uint64_t)&v101))
            {
              if (a2)
              {
                sub_22E884578(a1, (int *)v76, 1565, (uint64_t)v82);
                sub_22E3BB0B8((uint64_t)v82);
                sub_22F2E2198(a1);
                v17 = 0;
                goto LABEL_124;
              }
              if ((v126[0] & 7) == 1)
              {
                v54 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v54 + 312) = v133;
                *(_DWORD *)(v54 + 316) = 1564;
                if (*(char *)(v54 + 311) < 0)
                {
                  **(_BYTE **)(v54 + 288) = 0;
                  *(_QWORD *)(v54 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v54 + 288) = 0;
                  *(_BYTE *)(v54 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v78, v54);
                *(_QWORD *)((char *)&v88 + 4) = 0;
                BYTE12(v88) = 0;
                v90 = 0;
                v91 = 0;
                __p = 0;
                v92 = 0;
                v87 = (void *)(v133 | ((unint64_t)v133 << 32));
                LOBYTE(v88) = 1;
                sub_22E6D82D0(&v78, &v87);
                if (SHIBYTE(v91) < 0)
                  operator delete(__p);
                sub_22E3BB0B8((uint64_t)&v78);
                v126[0] &= 0xFFFFFFFFFFFFFFC0;
                *(_QWORD *)&v133 = 0;
              }
              if (*a3 == 3)
              {
                if (v104 == 7)
                {
                  v77 = v22;
                  v55 = sub_22F141A3C(a3[5], 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
                  v56 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v56 + 312) = v106;
                  *(_DWORD *)(v56 + 316) = 1548;
                  if (*(char *)(v56 + 311) < 0)
                  {
                    **(_BYTE **)(v56 + 288) = 0;
                    *(_QWORD *)(v56 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v56 + 288) = 0;
                    *(_BYTE *)(v56 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)&v78, v56);
                  v57 = a3[5] | ((unint64_t)a3[5] << 32);
                  v58 = v78;
                  if (!v78)
                  {
                    v58 = sub_22E3B8AAC((uint64_t)v79);
                    v78 = v58;
                  }
                  sub_22E4D6448(v58 + 336, v57, 1);
                  BYTE12(v88) = 0;
                  *(_QWORD *)((char *)&v88 + 4) = 0;
                  v90 = 0;
                  v91 = 0x200000000000000;
                  v87 = (void *)(v55 | ((unint64_t)v55 << 32));
                  LOBYTE(v88) = 0;
                  __p = (void *)15932;
                  v92 = 0;
                  sub_22E6D82D0(&v78, &v87);
                  if (SHIBYTE(v91) < 0)
                    operator delete(__p);
                  sub_22E3BB0B8((uint64_t)&v78);
                  v87 = (char *)&v88 + 8;
                  *(_QWORD *)&v88 = 0x400000000;
                  v59 = a3[5];
                  v60 = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
                  sub_22EFE8D6C(v60, v61, v59, v55, 0, 0, v55, 0);
                  v62 = v88;
                  if (v88 >= DWORD1(v88))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v62 = v88;
                  }
                  *((_QWORD *)v87 + v62) = v60;
                  LODWORD(v88) = v88 + 1;
                  LODWORD(v78) = 2;
                  v79 = &v87;
                  v80 = 0;
                  v81 = 1;
                  v17 = (unsigned int *)sub_22E8895A4(a1, (uint64_t)&v101, (uint64_t)&v78, &v93);
                  v22 = v77;
                  if (v87 != (char *)&v88 + 8)
                    free(v87);
                  goto LABEL_124;
                }
                sub_22E884578(a1, (int *)v76, 1744, (uint64_t)&v87);
                v69 = (unsigned __int8 *)v87;
                if (!v87)
                {
                  v69 = (unsigned __int8 *)sub_22E3B8AAC(v88);
                  v87 = v69;
                }
                v69[*v69 + 1] = 2;
                v70 = v87;
                v71 = *(unsigned __int8 *)v87;
                *(_BYTE *)v87 = v71 + 1;
                v70[v71 + 2] = 0;
                sub_22E3BB0B8((uint64_t)&v87);
                LODWORD(v87) = 0;
                v88 = 0uLL;
                v68 = &v87;
                v67 = a1;
              }
              else
              {
                v67 = a1;
                v68 = (void **)a3;
              }
              v17 = (unsigned int *)sub_22E8895A4(v67, (uint64_t)&v101, (uint64_t)v68, &v93);
              goto LABEL_124;
            }
          }
        }
LABEL_110:
        v17 = (unsigned int *)sub_22F2E23B4(a1, (uint64_t)&v101, (int ****)a3);
        if (*(_WORD *)(a1 + 32) == 65)
        {
          sub_22E884578(a1, (int *)v76, 1624, (uint64_t)&v87);
          v63 = *a3;
          v64 = (unsigned __int8 *)v87;
          if (!v87)
          {
            v64 = (unsigned __int8 *)sub_22E3B8AAC(v88);
            v87 = v64;
          }
          v64[*v64 + 1] = 2;
          v65 = v87;
          v66 = *(unsigned __int8 *)v87;
          *(_BYTE *)v87 = v66 + 1;
          v65[v66 + 2] = v63;
          sub_22E3BB0B8((uint64_t)&v87);
          LOWORD(v87) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v87, 1, 0);
        }
        else
        {
          sub_22E884BB4(a1, 1533);
          if ((_DWORD)v94)
            sub_22E80F20C(a1, &v93, (uint64_t)v17, 1, 0);
          if (!v125)
          {
            sub_22EA7E84C(v121, v124, v17);
            v125 = 1;
          }
        }
LABEL_124:
        v72 = (llvm *)v93;
        if (v93 != v95)
          free(v93);
        TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v72);
        if (TimeTraceProfilerInstance)
          llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
        goto LABEL_128;
      }
      if ((v84 & 4) != 0)
      {
        v29 = *(unint64_t **)(v84 & 0xFFFFFFFFFFFFFFF8);
        v28 = (uint64_t *)&v29[*(unsigned int *)((v84 & 0xFFFFFFFFFFFFFFF8) + 8)];
      }
      else
      {
        v28 = (uint64_t *)(&v84 + (v84 > 7));
        v29 = &v84;
      }
      for (; v29 != (unint64_t *)v28; ++v29)
      {
        v30 = *v29;
        v31 = *(unsigned __int16 *)(*(_QWORD *)(*v29 + 72) + 8);
        v32 = (v31 - 173) > 0x19 || ((1 << (v31 + 83)) & 0x2105041) == 0;
        if (v32 && v31 != 252 && v31 != 255)
        {
          v33 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v33 + 312) = *(_DWORD *)(v30 + 16);
          *(_DWORD *)(v33 + 316) = 1595;
          v34 = v22;
          if (*(char *)(v33 + 311) < 0)
          {
            **(_BYTE **)(v33 + 288) = 0;
            *(_QWORD *)(v33 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v33 + 288) = 0;
            *(_BYTE *)(v33 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v101, v33);
          v35 = *(_QWORD *)v30;
          v36 = v101;
          if (!v101)
          {
            v36 = (unsigned __int8 *)sub_22E3B8AAC(v102);
            v101 = v36;
          }
          v36[*v36 + 1] = 5;
          v37 = (unint64_t)v101;
          v38 = *v101;
          *v101 = v38 + 1;
          *(_QWORD *)(v37 + 8 * v38 + 16) = v35;
          sub_22E3BB0B8((uint64_t)&v101);
          *(_QWORD *)(v30 + 48) |= 0x10000uLL;
          v22 = v34;
        }
      }
    }
    sub_22E82103C((uint64_t)&v127, (uint64_t)&v83);
    goto LABEL_61;
  }
  v10 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v10 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v10 + 316) = 1746;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v101, v10);
  v11 = (unsigned int ***)*((_QWORD *)a3 + 1);
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 2);
    if (v12)
      v13 = ***v11 | ((unint64_t)(*v11)[v12 - 1][2] << 32);
    else
      v13 = 0;
    v20 = HIDWORD(v13);
  }
  else
  {
    LODWORD(v13) = a3[4];
    v20 = a3[5];
    if (!(_DWORD)v13)
      LODWORD(v13) = a3[5];
  }
  v26 = v13 | (v20 << 32);
  v27 = (uint64_t)v101;
  if (!v101)
  {
    v27 = sub_22E3B8AAC(v102);
    v101 = (unsigned __int8 *)v27;
  }
  sub_22E4D6448(v27 + 336, v26, 1);
  sub_22E3BB0B8((uint64_t)&v101);
  return sub_22E82BC2C(a1, a5);
}

unint64_t sub_22E87EC34(uint64_t a1)
{
  unsigned int ***v1;
  int v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned int ****)(a1 + 8);
  if (v1)
  {
    v2 = *((_DWORD *)v1 + 2);
    if (v2)
      v3 = ***v1 | ((unint64_t)(*v1)[v2 - 1][2] << 32);
    else
      v3 = 0;
    v4 = HIDWORD(v3);
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 16);
    v4 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v3)
      LODWORD(v3) = *(_DWORD *)(a1 + 20);
  }
  return v3 | (v4 << 32);
}

BOOL sub_22E87EC88(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  _DWORD *v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  _BOOL4 v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unsigned int *i;
  _BYTE v136[32];
  _BYTE v137[64];
  void *v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  _BYTE v149[32];
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  int v154;
  uint64_t v155;
  _BYTE v156[32];
  uint64_t v157;
  _BYTE v158[40];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  int v165;
  _BYTE *v166;
  uint64_t v167;
  _BYTE v168[960];
  __int16 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a1 + 16);
  for (i = (unsigned int *)(a1 + 16); ; sub_22F18FB4C(*(_QWORD *)(a1 + 8), i))
  {
    v6 = *(unsigned int *)(a3 + 8);
    if (*(_WORD *)(a1 + 32) == 130)
    {
      v37 = *(_QWORD *)(a1 + 8);
      v38 = *(_QWORD *)(v37 + 2816);
      if (v38 < *(unsigned int *)(v37 + 2784))
        v39 = *(_QWORD *)(v37 + 2776) + 24 * v38;
      else
        v39 = sub_22F162D2C(v37, 1u);
      v40 = *(unsigned __int16 *)(v39 + 16);
      if (v40 != 5)
      {
        v119 = v40 - 26;
        v112 = v119 > 0x27;
        v113 = 1 << v119;
        v114 = 0xA006000001;
        goto LABEL_182;
      }
      v41 = (uint64_t)v5;
      if (*(_WORD *)(a1 + 32) != 1)
      {
        v42 = *(_QWORD *)(a1 + 8);
        v43 = *(_QWORD *)(v42 + 2816) + 1;
        if (v43 < *(unsigned int *)(v42 + 2784))
          v41 = *(_QWORD *)(v42 + 2776) + 24 * v43;
        else
          v41 = sub_22F162D2C(v42, 2u);
      }
      v44 = *(unsigned __int16 *)(v41 + 16) - 51;
      v112 = v44 > 0xE;
      v45 = (1 << v44) & 0x5003;
      if (!v112 && v45 != 0)
      {
LABEL_17:
        if (*(_WORD *)(a1 + 32) == 106)
        {
          v17 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v17 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v17 + 316) = 1540;
          if (*(char *)(v17 + 311) < 0)
          {
            **(_BYTE **)(v17 + 288) = 0;
            *(_QWORD *)(v17 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v17 + 288) = 0;
            *(_BYTE *)(v17 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v156, v17);
          sub_22E3BB0B8((uint64_t)v156);
          v18 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v18 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v18 + 316) = 1867;
          if (*(char *)(v18 + 311) < 0)
          {
            **(_BYTE **)(v18 + 288) = 0;
            *(_QWORD *)(v18 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v18 + 288) = 0;
            *(_BYTE *)(v18 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v137, v18);
          v19 = *(unsigned int *)(a1 + 16);
          v20 = *(_DWORD *)(a1 + 20);
          v21 = v20 + v19;
          if (!v20)
            v20 = *(_DWORD *)(a1 + 16);
          if (*(unsigned __int16 *)(a1 + 32) - 399 >= 0x29)
            v22 = v21;
          else
            v22 = v20;
          *(_QWORD *)&v158[12] = 0;
          v158[20] = 0;
          v158[33] = 0;
          *(_WORD *)&v158[34] = 0;
          *(_DWORD *)&v158[36] = 0;
          v159 = 0x800000000000000;
          LOBYTE(v160) = 0;
          *(_QWORD *)v158 = v19 | (v22 << 32);
          v158[8] = 0;
          strcpy(&v158[24], "typename");
          sub_22E6D82D0((uint64_t *)v137, v158);
          if (SHIBYTE(v159) < 0)
            operator delete(*(void **)&v158[24]);
          sub_22E3BB0B8((uint64_t)v137);
          *(_WORD *)(a1 + 32) = 152;
        }
        v23 = v6;
        memset(v158, 0, 32);
        sub_22E8408AC(a1, (uint64_t)v158, 0, 0, 0, 0, 0, 0, 0, 0);
        v24 = *(unsigned __int16 *)(a1 + 32);
        v25 = *(_DWORD *)(a1 + 16);
        if (v24 == 401)
        {
          v26 = *(_QWORD *)(a1 + 24);
          v27 = *(_DWORD *)(a1 + 20);
          if (!v27)
            v27 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 40) = v27;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
          v28 = 0;
        }
        else
        {
          v28 = v24 == 152;
          *(_DWORD *)(a1 + 40) = v25;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
          v26 = 0;
          v25 = *(_DWORD *)(a1 + 40);
        }
        v29 = *(unsigned __int16 *)(a1 + 32);
        if (v29 == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
          v30 = *(unsigned int *)(a1 + 40);
          if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
            v31 = 129;
          else
            v31 = 93;
          v32 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v32 + 312) = v30;
          *(_DWORD *)(v32 + 316) = v31;
          if (*(char *)(v32 + 311) < 0)
          {
            **(_BYTE **)(v32 + 288) = 0;
            *(_QWORD *)(v32 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v32 + 288) = 0;
            *(_BYTE *)(v32 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v137, v32);
          sub_22E3BB0B8((uint64_t)v137);
          v29 = *(unsigned __int16 *)(a1 + 32);
        }
        else
        {
          v30 = 0;
        }
        v33 = *v5;
        if ((v29 - 5) > 0x3C)
          goto LABEL_89;
        if (((1 << (v29 - 5)) & 0x1400C00000000000) != 0)
        {
          v34 = 0;
          goto LABEL_46;
        }
        if (v29 == 5)
        {
          v34 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 40) = v33;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
          v29 = *(unsigned __int16 *)(a1 + 32);
          if (v29 == 26)
          {
            v68 = v5;
            v69 = v30 != 0;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v68);
            LODWORD(v30) = *(_DWORD *)(a1 + 40);
            sub_22E880460(a1, v30, v33, v69, 1);
            v29 = *(unsigned __int16 *)(a1 + 32);
          }
LABEL_46:
          if (v29 == 63)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
            v35 = *(_DWORD *)(a1 + 40);
            v36 = sub_22E80FC30(a1, 0, 23, 3, 0, 0, 0);
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v47 = sub_22ED587C8(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v28, v30, v25, v34, v33, a2, v23, v129, v35, v36, v26 != 0);
          if (v26)
            sub_22ED58C78(*(_QWORD **)(a1 + 88), (uint64_t)v158, v26, v47, v30, 0);
        }
        else
        {
LABEL_89:
          v57 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v57 + 312) = v33;
          *(_DWORD *)(v57 + 316) = 15;
          if (*(char *)(v57 + 311) < 0)
          {
            **(_BYTE **)(v57 + 288) = 0;
            *(_QWORD *)(v57 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v57 + 288) = 0;
            *(_BYTE *)(v57 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v150, v57);
          v58 = (unsigned __int8 *)v150;
          if (!(_QWORD)v150)
          {
            v58 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v150 + 1));
            *(_QWORD *)&v150 = v58;
          }
          v58[*v58 + 1] = 4;
          v59 = v150;
          v60 = *(unsigned __int8 *)v150;
          *(_BYTE *)v150 = v60 + 1;
          *(_QWORD *)(v59 + 8 * v60 + 16) = 5;
          sub_22E3BB0B8((uint64_t)&v150);
          v47 = 0;
        }
        if (!*(_DWORD *)&v158[28])
          goto LABEL_66;
        v48 = *(void **)&v158[16];
LABEL_65:
        free(v48);
        goto LABEL_66;
      }
LABEL_187:
      v8 = *(unsigned __int16 *)(a1 + 32);
      goto LABEL_73;
    }
    if ((sub_22E88001C(a1) & 1) != 0)
    {
      memset(&v137[16], 0, 24);
      *(_QWORD *)&v137[40] = a1 + 960;
      v148 = 0;
      *(_OWORD *)&v137[48] = 0u;
      *(_OWORD *)v138 = 0u;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      v143 = 0u;
      v144 = 0u;
      v145 = 0u;
      v146 = 0u;
      v147 = 0;
      *(_QWORD *)v137 = 204800;
      DWORD1(v142) = 0;
      *(_QWORD *)v158 = v137;
      memset(&v158[8], 0, 32);
      v162 = 0;
      v164 = 0u;
      v163 = 12;
      v165 = 0;
      v166 = v168;
      v167 = 0x800000000;
      v170 = 0u;
      v171 = a1 + 960;
      v175 = 0;
      v172 = 0u;
      v173 = 0u;
      v174 = 0u;
      v107 = *(_DWORD *)(a1 + 16);
      LODWORD(v159) = 0;
      v160 = 0;
      HIDWORD(v161) = v107;
      LODWORD(v161) = v107;
      v169 = v169 & 0xFC00 | 1;
      v47 = sub_22ED59868(*(unsigned int **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v158, a2, v6, 0, 0, v7);
      sub_22EFC77E8(v47, 1);
      LODWORD(v150) = 3342401;
      WORD2(v150) = 52;
      sub_22E885940(a1, (unsigned __int16 *)&v150, 3, 3);
      sub_22E827F78((uint64_t)v158);
      if (DWORD1(v139))
        free(v138[1]);
      goto LABEL_88;
    }
    if (sub_22E8801BC(a1))
    {
      v108 = *(unsigned __int16 *)(a1 + 32);
      if (v108 == 399)
        v109 = 2;
      else
        v109 = 1;
      if (v108 != 1)
      {
        v117 = *(_QWORD *)(a1 + 8);
        v118 = *(_QWORD *)(v117 + 2816) + v109 - 1;
        if (v118 >= *(unsigned int *)(v117 + 2784))
          v5 = (unsigned int *)sub_22F162D2C(v117, v109);
        else
          v5 = (unsigned int *)(*(_QWORD *)(v117 + 2776) + 24 * v118);
      }
      v110 = *((unsigned __int16 *)v5 + 8);
      v5 = i;
      if (v110 != 162 && v110 != 76)
        goto LABEL_17;
    }
    v8 = *(unsigned __int16 *)(a1 + 32);
    if (v8 == 152 || v8 == 106)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(v9 + 2816);
      if (v10 < *(unsigned int *)(v9 + 2784))
        v11 = *(_QWORD *)(v9 + 2776) + 24 * v10;
      else
        v11 = sub_22F162D2C(v9, 1u);
      v12 = *(unsigned __int16 *)(v11 + 16);
      if (v12 == 5)
      {
        v13 = (uint64_t)v5;
        if (*(_WORD *)(a1 + 32) != 1)
        {
          v14 = *(_QWORD *)(a1 + 8);
          v15 = *(_QWORD *)(v14 + 2816) + 1;
          if (v15 < *(unsigned int *)(v14 + 2784))
            v13 = *(_QWORD *)(v14 + 2776) + 24 * v15;
          else
            v13 = sub_22F162D2C(v14, 2u);
        }
        v12 = *(unsigned __int16 *)(v13 + 16);
      }
      if ((v12 - 26) <= 0x27 && ((1 << (v12 - 26)) & 0xA006000001) != 0)
        goto LABEL_17;
      v111 = v12 - 106;
      v112 = v111 > 0x2E;
      v113 = 1 << v111;
      v114 = 0x400001000001;
LABEL_182:
      v115 = v113 & v114;
      if (!v112 && v115 != 0)
        goto LABEL_17;
      goto LABEL_187;
    }
LABEL_73:
    if (v8 != 147)
    {
      *(_QWORD *)v137 = 0;
      memset(&v137[16], 0, 24);
      *(_QWORD *)&v137[40] = a1 + 960;
      v148 = 0;
      *(_OWORD *)&v137[48] = 0u;
      *(_OWORD *)v138 = 0u;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      v143 = 0u;
      v144 = 0u;
      v145 = 0u;
      v146 = 0u;
      v147 = 0;
      *(_DWORD *)v158 = 0;
      *(_OWORD *)&v158[8] = 0u;
      sub_22E818334(a1, v137, v158, 3, 6, 0, 0);
      *(_QWORD *)v158 = v137;
      v160 = 0;
      v161 = 0;
      memset(&v158[8], 0, 32);
      LODWORD(v159) = 0;
      v162 = *((_QWORD *)&v139 + 1);
      v164 = 0u;
      v163 = 12;
      v165 = 0;
      v166 = v168;
      v167 = 0x800000000;
      v169 = (*(_DWORD *)v137 & 0x3F000) == 204800;
      v170 = 0u;
      v171 = *(_QWORD *)&v137[40];
      v175 = 0;
      v174 = 0u;
      v173 = 0u;
      v172 = 0u;
      sub_22E8227E4(a1, (uint64_t)v158, (unint64_t)sub_22E823490, 0);
      if ((*(_DWORD *)v137 & 0x3F000) != 0)
      {
        v54 = *(unsigned __int16 *)(a1 + 32);
        if (v54 == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
          v120 = *(unsigned int *)(a1 + 40);
          v121 = HIDWORD(v175);
          if (!HIDWORD(v175))
            HIDWORD(v175) = *(_DWORD *)(a1 + 40);
          v122 = 1;
          if (!(_DWORD)v159 && !v160)
            v122 = v164 != 0;
          sub_22E880460(a1, v120, v161, v121 != 0, v122);
          v54 = *(unsigned __int16 *)(a1 + 32);
        }
        if (v54 == 63)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), i);
          v55 = *(unsigned int *)(a1 + 40);
          if (*(_WORD *)(a1 + 32) == 21
            && ((v123 = *(_QWORD *)(a1 + 8), v124 = *(_QWORD *)(v123 + 2816), v124 >= *(unsigned int *)(v123 + 2784))
              ? (v125 = sub_22F162D2C(v123, 1u))
              : (v125 = *(_QWORD *)(v123 + 2776) + 24 * v124),
                *(_WORD *)(v125 + 16) == 23))
          {
            sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 4739, (uint64_t)&v150);
            v126 = (unsigned __int8 *)v150;
            if (!(_QWORD)v150)
            {
              v126 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v150 + 1));
              *(_QWORD *)&v150 = v126;
            }
            v126[*v126 + 1] = 2;
            v127 = v150;
            v128 = *(unsigned __int8 *)v150;
            *(_BYTE *)v150 = v128 + 1;
            *(_QWORD *)(v127 + 8 * v128 + 16) = 1;
            sub_22E3BB0B8((uint64_t)&v150);
            LODWORD(v150) = 3342401;
            sub_22E885940(a1, (unsigned __int16 *)&v150, 2, 3);
            v56 = 0;
          }
          else
          {
            v103 = *(_BYTE *)(a1 + 944);
            *(_BYTE *)(a1 + 944) = 0;
            v104 = *(_QWORD *)(a1 + 88);
            sub_22EB48CC8(v104, 4, 0, 3);
            v105 = *(_QWORD *)(a1 + 88);
            v106 = sub_22E83766C(a1, 0);
            v56 = v106;
            if ((v106 & 1) != 0
              || (v56 = (unint64_t)sub_22EBBCB14(v105, (_DWORD *)(v106 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v150), (v56 & 1) != 0))
            {
              LODWORD(v150) = 3342401;
              sub_22E885940(a1, (unsigned __int16 *)&v150, 2, 3);
            }
            sub_22EB48E64(v104);
            *(_BYTE *)(a1 + 944) = v103;
          }
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
        v47 = sub_22ED59868(*(unsigned int **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v158, a2, v6, v55, v56 & 0xFFFFFFFFFFFFFFFELL, v53);
      }
      else
      {
        sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1540, (uint64_t)&v150);
        sub_22E3BB0B8((uint64_t)&v150);
        v47 = 0;
      }
      sub_22E827F78((uint64_t)v158);
      if (DWORD1(v139))
        free(v138[1]);
LABEL_88:
      sub_22E8D1BC4(*(uint64_t *)&v137[40], (uint64_t)&v137[40]);
      sub_22E80F94C((uint64_t *)&v137[48]);
      sub_22E80F94C((uint64_t *)&v137[32]);
      goto LABEL_66;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    v51 = *(_DWORD *)(a1 + 40);
    v157 = 0;
    *(_QWORD *)v158 = &v158[16];
    *(_QWORD *)&v158[8] = 0x800000000;
    sub_22E885C30(a1, 128);
    v52 = sub_22E87D9AC(a1, a2 + 1, v158, (char *)&v157 + 4, &v157);
    sub_22E885CF4(a1);
    if ((v52 & 1) != 0)
      goto LABEL_75;
    v63 = *(unsigned __int16 *)(a1 + 32);
    if (v63 == 130)
    {
LABEL_126:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      goto LABEL_127;
    }
    v64 = *(unsigned __int16 *)(a1 + 32);
    v65 = (uint64_t)v5;
    if (v63 == 104)
    {
      v66 = *(_QWORD *)(a1 + 8);
      v67 = *(_QWORD *)(v66 + 2816);
      if (v67 < *(unsigned int *)(v66 + 2784))
      {
        v65 = *(_QWORD *)(v66 + 2776) + 24 * v67;
        goto LABEL_111;
      }
      v65 = sub_22F162D2C(v66, 1u);
      v64 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v64 == 152)
    {
      if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
        v70 = 1908;
      else
        v70 = 1855;
      v71 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v71 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v71 + 316) = v70;
      if (*(char *)(v71 + 311) < 0)
      {
        **(_BYTE **)(v71 + 288) = 0;
        *(_QWORD *)(v71 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v71 + 288) = 0;
        *(_BYTE *)(v71 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v150, v71);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 8) != 0)
      {
        memset(v137, 0, 56);
        goto LABEL_121;
      }
      v72 = *v5;
      *(_QWORD *)&v137[12] = 0;
      v137[20] = 0;
      memset(&v137[24], 0, 25);
      *(_QWORD *)v137 = v72 | (v72 << 32);
LABEL_120:
      v137[8] = 1;
      qmemcpy(&v137[24], "class", 5);
      v137[47] = 5;
LABEL_121:
      sub_22E6D82D0((uint64_t *)&v150, v137);
      if ((v137[47] & 0x80000000) != 0)
        operator delete(*(void **)&v137[24]);
      v80 = &v150;
      goto LABEL_124;
    }
LABEL_111:
    v73 = *(unsigned __int16 *)(v65 + 16) - 5;
    if (v73 <= 0x3C && ((1 << v73) & 0x1000C00000200001) != 0)
    {
      v74 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v74 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v74 + 316) = 1462;
      if (*(char *)(v74 + 311) < 0)
      {
        **(_BYTE **)(v74 + 288) = 0;
        *(_QWORD *)(v74 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v74 + 288) = 0;
        *(_BYTE *)(v74 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v150, v74);
      v75 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
      v76 = (unsigned __int8 *)v150;
      if (!(_QWORD)v150)
      {
        v76 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v150 + 1));
        *(_QWORD *)&v150 = v76;
      }
      v76[*v76 + 1] = 3;
      v77 = v150;
      v78 = *(unsigned __int8 *)v150;
      *(_BYTE *)v150 = v78 + 1;
      *(_QWORD *)(v77 + 8 * v78 + 16) = (v75 >> 11) & 1;
      if (v63 != 152 && v63 != 104)
      {
        v97 = *v5;
        *(_QWORD *)&v137[12] = 0;
        v137[20] = 0;
        *(_QWORD *)v137 = v97 | (v97 << 32);
        v137[8] = 0;
        memset(&v137[30], 0, 17);
        qmemcpy(&v137[24], "class ", 6);
        *(_WORD *)&v137[47] = 6;
        goto LABEL_121;
      }
      v79 = *v5;
      *(_QWORD *)&v137[12] = 0;
      v137[20] = 0;
      memset(&v137[24], 0, 25);
      *(_QWORD *)v137 = v79 | (v79 << 32);
      goto LABEL_120;
    }
    v98 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v98 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v98 + 316) = 1462;
    if (*(char *)(v98 + 311) < 0)
    {
      **(_BYTE **)(v98 + 288) = 0;
      *(_QWORD *)(v98 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v98 + 288) = 0;
      *(_BYTE *)(v98 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v137, v98);
    v99 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
    v100 = *(unsigned __int8 **)v137;
    if (!*(_QWORD *)v137)
    {
      v100 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v137[8]);
      *(_QWORD *)v137 = v100;
    }
    v100[*v100 + 1] = 3;
    v101 = *(_QWORD *)v137;
    v102 = **(_BYTE **)v137;
    **(_BYTE **)v137 = v102 + 1;
    *(_QWORD *)(v101 + 8 * v102 + 16) = (v99 >> 11) & 1;
    v80 = (__int128 *)v137;
LABEL_124:
    sub_22E3BB0B8((uint64_t)v80);
    if (v63 == 152 || v63 == 104)
      goto LABEL_126;
LABEL_127:
    v81 = *(unsigned __int16 *)(a1 + 32);
    if (v81 == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      v82 = *(unsigned int *)(a1 + 40);
      if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
        v83 = 129;
      else
        v83 = 93;
      v84 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v84 + 312) = v82;
      *(_DWORD *)(v84 + 316) = v83;
      if (*(char *)(v84 + 311) < 0)
      {
        **(_BYTE **)(v84 + 288) = 0;
        *(_QWORD *)(v84 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v84 + 288) = 0;
        *(_BYTE *)(v84 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v156, v84);
      sub_22E3BB0B8((uint64_t)v156);
      v81 = *(unsigned __int16 *)(a1 + 32);
    }
    else
    {
      v82 = 0;
    }
    v85 = *v5;
    v86 = (v81 - 5);
    if (v86 > 0x3C)
    {
LABEL_149:
      v92 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v92 + 312) = v85;
      *(_DWORD *)(v92 + 316) = 15;
      if (*(char *)(v92 + 311) < 0)
      {
        **(_BYTE **)(v92 + 288) = 0;
        *(_QWORD *)(v92 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v92 + 288) = 0;
        *(_BYTE *)(v92 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v137, v92);
      v93 = *(unsigned __int8 **)v137;
      if (!*(_QWORD *)v137)
      {
        v93 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v137[8]);
        *(_QWORD *)v137 = v93;
      }
      v93[*v93 + 1] = 4;
      v94 = *(_QWORD *)v137;
      v95 = **(_BYTE **)v137;
      **(_BYTE **)v137 = v95 + 1;
      *(_QWORD *)(v94 + 8 * v95 + 16) = 5;
      sub_22E3BB0B8((uint64_t)v137);
LABEL_75:
      v47 = 0;
      goto LABEL_76;
    }
    v133 = *v5;
    if (((1 << v86) & 0x1400C00000000000) != 0)
    {
      v131 = v82;
      v132 = 0;
    }
    else
    {
      if (v86)
        goto LABEL_149;
      v132 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = v85;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      if (*(_WORD *)(a1 + 32) == 26)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
        v131 = *(_DWORD *)(a1 + 40);
        sub_22E880460(a1, v131, v85, v82 != 0, 1);
      }
      else
      {
        v131 = v82;
      }
    }
    v87 = v51;
    v88 = sub_22ED5BDFC(*(_QWORD **)(a1 + 88), a2, 0, v51, SHIDWORD(v157), *(uint64_t *)v158, *(unsigned int *)&v158[8], v157, 0);
    v89 = 0;
    *(_DWORD *)v137 = 0;
    memset(&v137[8], 0, 48);
    if (*(_WORD *)(a1 + 32) == 63)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      v89 = *(_DWORD *)(a1 + 40);
      sub_22E8805F4((uint64_t)&v150, a1);
      *(_OWORD *)v137 = v150;
      *(_QWORD *)&v137[16] = v151;
      sub_22F0AB71C((uint64_t)&v137[24], (uint64_t)&v152);
      *(_QWORD *)&v137[48] = v155;
      if (v154)
        free(v153);
      if (!*(_QWORD *)&v137[8])
      {
        v96 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v96 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v96 + 316) = 1472;
        if (*(char *)(v96 + 311) < 0)
        {
          **(_BYTE **)(v96 + 288) = 0;
          *(_QWORD *)(v96 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v96 + 288) = 0;
          *(_BYTE *)(v96 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v149, v96);
        sub_22E3BB0B8((uint64_t)v149);
        LODWORD(v150) = 3342401;
        WORD2(v150) = 52;
        sub_22E885940(a1, (unsigned __int16 *)&v150, 3, 3);
      }
    }
    v90 = *(_QWORD **)(a1 + 88);
    v91 = v90[1611];
    v150 = *(_OWORD *)v137;
    v151 = *(_QWORD *)&v137[16];
    sub_22F0AB560(&v152, (uint64_t)&v137[24]);
    v155 = *(_QWORD *)&v137[48];
    v47 = sub_22ED5BAE0(v90, v91, v87, (uint64_t)v88, v131, v132, v133, a2, v6, v130, v89, (uint64_t)&v150);
    if (v154)
      free(v153);
    if (*(_DWORD *)&v137[44])
      free(*(void **)&v137[32]);
LABEL_76:
    v48 = *(void **)v158;
    if (*(_BYTE **)v158 != &v158[16])
      goto LABEL_65;
LABEL_66:
    if (v47)
    {
      v49 = *(unsigned int *)(a3 + 8);
      if (v49 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v49 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v49) = v47;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      *(_DWORD *)v158 = 3342401;
      strcpy(&v158[4], "4");
      sub_22E885940(a1, (unsigned __int16 *)v158, 3, 3);
    }
    v50 = *(unsigned __int16 *)(a1 + 32);
    v5 = i;
    if (v50 != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  }
  v61 = v50 - 51;
  if ((v50 - 51) >= 2)
  {
    sub_22E88453C(a1, *(_DWORD *)(a1 + 16), 1494, (uint64_t)v136);
    sub_22E3BB0B8((uint64_t)v136);
    *(_DWORD *)v158 = 3342401;
    strcpy(&v158[4], "4");
    sub_22E885940(a1, (unsigned __int16 *)v158, 3, 3);
  }
  return v61 < 2;
}

uint64_t sub_22E88001C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  char v11;
  uint64_t v12;
  __int128 v13;
  void *v14[2];
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x10) == 0)
    return 0;
  v13 = 0u;
  *(_OWORD *)v14 = 0u;
  v3 = *(unsigned __int16 *)(a1 + 32);
  v1 = 1;
  if ((sub_22E8408AC(a1, (uint64_t)&v13, 0, 0, 0, 0, 1, 0, 0, 0) & 1) == 0)
  {
    if (*(_WORD *)(a1 + 32) == 5)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_DWORD *)(a1 + 16);
      v15 = 0;
      v16 = v4;
      v17 = v5;
      v18 = v5;
      v12 = 0;
      v11 = 0;
      v6 = sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v13, 0, &v15, 0, 0, (unint64_t *)&v12, &v11, 1);
      if (v11 || !v12 || v6 != 6)
      {
        if (DWORD1(v13))
          v7 = (_DWORD)v13 == 0;
        else
          v7 = 1;
        if (v7 && !*((_QWORD *)&v13 + 1))
          goto LABEL_24;
LABEL_23:
        sub_22E88ABAC(a1, (int *)&v13, v3 != 399);
LABEL_24:
        v1 = 0;
        goto LABEL_25;
      }
      if ((sub_22E880230(a1, v12, 6, (uint64_t)&v13, 0, (uint64_t)&v15, 0, 1) & 1) != 0)
        goto LABEL_25;
    }
    if (DWORD1(v13))
      v8 = (_DWORD)v13 == 0;
    else
      v8 = 1;
    if (v8 && *((_QWORD *)&v13 + 1) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_25:
  if (HIDWORD(v14[1]))
    free(v14[0]);
  return v1;
}

BOOL sub_22E8801BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;

  if (*(_WORD *)(a1 + 32) == 399)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(v3 + 2816);
    if (v4 >= *(unsigned int *)(v3 + 2784))
      v1 = sub_22F162D2C(v3, 1u);
    else
      v1 = *(_QWORD *)(v3 + 2776) + 24 * v4;
  }
  else
  {
    v1 = a1 + 16;
  }
  return *(_WORD *)(v1 + 16) == 401 && *(_DWORD *)(*(_QWORD *)(v1 + 8) + 32) == 6;
}

uint64_t sub_22E880230(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, char a7, int a8)
{
  unsigned int v15;
  char *v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[113];

  v34[112] = *MEMORY[0x24BDAC8D0];
  v15 = *(_DWORD *)(a6 + 24);
  v16 = (char *)v34;
  v31 = 0;
  v32 = (char *)v34;
  v33 = 0x1000000000;
  if (a8 && *(_WORD *)(a1 + 32) != 46)
  {
    v18 = 0;
    v23 = 0;
    v19 = 0;
    v17 = 0;
    if (a3 == 2 && (a7 & 1) != 0)
      goto LABEL_22;
LABEL_13:
    *(_WORD *)(a1 + 32) = 401;
    if (*(_DWORD *)a6)
      v24 = 0;
    else
      v24 = *(_QWORD *)(a6 + 8);
    if (*(_DWORD *)a6)
      v25 = *(_QWORD *)(a6 + 8);
    else
      v25 = 0;
    *(_QWORD *)(a1 + 24) = sub_22E847E44(a5, v15, v24, v25, a2, a3, v23, v18, (uint64_t)v16, v19, v17, a1 + 2192);
    if (!a5)
      goto LABEL_33;
    goto LABEL_20;
  }
  v17 = sub_22E88101C(a1, 0, (int *)&v31 + 1, (uint64_t)&v32, (unsigned int *)&v31, a2);
  v18 = v31;
  if (!(_DWORD)v31)
  {
    v22 = 1;
    goto LABEL_39;
  }
  v16 = v32;
  v19 = v33;
  if (a3 != 2 || (a7 & 1) == 0)
  {
    v23 = HIDWORD(v31);
    goto LABEL_13;
  }
  if ((v17 & 1) != 0)
  {
    v20 = 0;
    v21 = 1;
    goto LABEL_23;
  }
  v23 = HIDWORD(v31);
LABEL_22:
  v20 = sub_22ED62A48(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a4, a5, a2, *(_QWORD *)(a6 + 8), v15, v23, (uint64_t)v16, v19, v18, 0, 0, 0);
LABEL_23:
  *(_WORD *)(a1 + 32) = 400;
  if (v21)
    v26 = 0;
  else
    v26 = v20;
  *(_QWORD *)(a1 + 24) = v26;
  v27 = *(_DWORD *)a4;
  if (*(_DWORD *)(a4 + 4))
    v28 = v27 == 0;
  else
    v28 = 1;
  if (v28 && !*(_QWORD *)(a4 + 8))
  {
    if (!a5)
    {
LABEL_33:
      *(_DWORD *)(a1 + 16) = v15;
      goto LABEL_35;
    }
LABEL_20:
    *(_DWORD *)(a1 + 16) = a5;
    goto LABEL_35;
  }
  *(_DWORD *)(a1 + 16) = v27;
LABEL_35:
  *(_DWORD *)(a1 + 20) = v18;
  v29 = *(_QWORD **)(a1 + 8);
  if (v29[352] && v29[353] != v29[354])
    sub_22F162E18((uint64_t)v29, a1 + 16);
  v22 = 0;
LABEL_39:
  sub_22E828F5C(&v32);
  return v22;
}

void sub_22E880460(uint64_t a1, uint64_t a2, unsigned int a3, char a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[4];
  unint64_t v13;
  char v14;
  _BYTE v15[12];
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[11];
  char v20;
  uint64_t v21;
  char v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v13 = 0;
  *(_QWORD *)&v15[3] = 0;
  v15[11] = 0;
  v17 = 0;
  memset(v18, 0, 9);
  v16 = 0;
  if ((a4 & 1) == 0)
  {
    *(_QWORD *)&v19[3] = 0;
    v20 = 0;
    v13 = a3 | ((unint64_t)a3 << 32);
    v14 = 0;
    *(_QWORD *)v15 = *(unsigned int *)v19;
    *(_DWORD *)&v15[8] = 0;
    v16 = (void *)3026478;
    *(_WORD *)((char *)v18 + 7) = 3;
  }
  v7 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v7 + 312) = a2;
  *(_DWORD *)(v7 + 316) = 1600;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v12, v7);
  v22 = 0;
  v21 = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v26 = 0;
  *(_QWORD *)v19 = a2 | (unint64_t)(a2 << 32);
  v19[8] = 1;
  sub_22E6D82D0(v12, v19);
  sub_22E6D82D0(v12, &v13);
  v8 = a5 ^ 1u;
  v9 = (unsigned __int8 *)v12[0];
  if (!v12[0])
  {
    v9 = (unsigned __int8 *)sub_22E3B8AAC(v12[1]);
    v12[0] = (uint64_t)v9;
  }
  v9[*v9 + 1] = 2;
  v10 = v12[0];
  v11 = *(unsigned __int8 *)v12[0];
  *(_BYTE *)v12[0] = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 16) = v8;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  sub_22E3BB0B8((uint64_t)v12);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v16);
}

void sub_22E8805F4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  void *v27[2];
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a2 + 32);
  if (v4 != 5 && v4 != 71 && v4 != 399)
  {
    *(_DWORD *)a1 = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    return;
  }
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  sub_22E8408AC(a2, &v26, 0, 0, 0, 0, 0, 0, 0);
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(unsigned __int16 *)(a2 + 32);
  if (*((_QWORD *)&v26 + 1) && v5 == 147)
  {
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 16);
    sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
    if (*(_WORD *)(a2 + 32) == 5)
    {
      v6 = *(_DWORD *)(a2 + 40);
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_DWORD *)(a2 + 16);
      v28 = 0;
      v29 = v7;
      v30 = v8;
      v31 = v8;
      *(_DWORD *)(a2 + 40) = v8;
      sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
      v9 = *(unsigned __int16 *)(a2 + 32);
      if (v9 == 26)
      {
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 16);
        sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
        v10 = *(_DWORD *)(a2 + 40);
        v9 = *(unsigned __int16 *)(a2 + 32);
      }
      else
      {
        v10 = 0;
      }
      v25 = 0;
      v14 = v9 - 51;
      if (v14 > 0x17
        || ((1 << v14) & 0x804003) == 0
        || !sub_22ED66924(*(_QWORD *)(a2 + 88), *(uint64_t **)(*(_QWORD *)(a2 + 88) + 12888), (uint64_t)&v26, v6, (uint64_t)&v28, 0, 0, &v25, 0))
      {
LABEL_25:
        if (v10)
        {
          if (*(_QWORD *)(a1 + 8))
          {
            sub_22F34AB70(*(_QWORD **)(a2 + 88), a1, v10, (uint64_t)&v19);
            *(_OWORD *)a1 = v19;
            *(_QWORD *)(a1 + 16) = v20;
            sub_22F0AB71C(a1 + 24, (uint64_t)&v21);
            *(_QWORD *)(a1 + 48) = v24;
            if (v23)
              free(v22);
          }
        }
        goto LABEL_29;
      }
LABEL_23:
      v17 = v30;
      LODWORD(v19) = 2;
      *((_QWORD *)&v19 + 1) = v25;
      v20 = v26;
      sub_22F0AB560(&v21, (uint64_t)&v26 + 8);
      v24 = v17;
      *(_OWORD *)a1 = v19;
      *(_QWORD *)(a1 + 16) = v20;
      sub_22F0AB71C(a1 + 24, (uint64_t)&v21);
      *(_QWORD *)(a1 + 48) = v24;
      if (v23)
        free(v22);
      goto LABEL_25;
    }
  }
  else if (v5 == 5)
  {
    v25 = 0;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 16);
    v28 = 0;
    v29 = v11;
    v30 = v12;
    v31 = v12;
    *(_DWORD *)(a2 + 40) = v12;
    sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
    v13 = *(unsigned __int16 *)(a2 + 32);
    if (v13 == 26)
    {
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 16);
      sub_22F18FB4C(*(_QWORD *)(a2 + 8), (unsigned int *)(a2 + 16));
      v10 = *(_DWORD *)(a2 + 40);
      v13 = *(unsigned __int16 *)(a2 + 32);
    }
    else
    {
      v10 = 0;
    }
    v15 = v13 - 51;
    if (v15 > 0x17)
      goto LABEL_25;
    if (((1 << v15) & 0x804003) == 0)
      goto LABEL_25;
    v18 = 0;
    v16 = sub_22ED562E8(*(_QWORD **)(a2 + 88), *(uint64_t **)(*(_QWORD *)(a2 + 88) + 12888), (uint64_t)&v26, 0, &v28, 0, 0, &v25, &v18, 0);
    if (v16 != 4 && v16 != 2)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_29:
  if (HIDWORD(v27[1]))
    free(v27[0]);
}

void sub_22E88096C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;

  v4 = *(_DWORD *)(a3 + 1684);
  if (!v4)
    *(_DWORD *)(a3 + 1684) = a2;
  v5 = *(_DWORD *)(a3 + 64);
  if (*(_DWORD *)(a3 + 40))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a3 + 48) == 0;
  v7 = !v6 || *(_DWORD *)(a3 + 88) != 0;
  sub_22E880460(a1, a2, v5, v4 != 0, v7);
}

uint64_t sub_22E8809B8(uint64_t a1, int a2, unsigned int *a3, int a4, int a5)
{
  unsigned int *v9;
  int v10;
  __int16 v11;
  const char *v12;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int *v49;
  unsigned int *v50;
  int v51;
  __int16 v52;
  int v53;
  _BOOL4 v54;
  unint64_t v55;
  char v56;
  _BYTE v57[12];
  void *__p;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  uint64_t v62;
  _BYTE v63[11];
  char v64;
  unsigned __int8 *__src;
  _BYTE v66[14];
  __int16 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v9 = (unsigned int *)(a1 + 16);
  v54 = 0;
  v10 = 1;
  v11 = 51;
  v12 = "> >";
  switch(*(_WORD *)(a1 + 32))
  {
    case '3':
      *a3 = *v9;
      if (a4)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v9);
      }
      return 0;
    case '4':
      goto LABEL_22;
    case '5':
      v24 = *(_QWORD *)(a1 + 8);
      v25 = *(_QWORD *)(v24 + 2816);
      if (v25 >= *(unsigned int *)(v24 + 2784))
        v26 = sub_22F162D2C(v24, 1u);
      else
        v26 = *(_QWORD *)(v24 + 2776) + 24 * v25;
      if (*(_WORD *)(v26 + 16) == 63)
      {
        v47 = *(_QWORD *)(a1 + 8);
        v48 = *(_QWORD *)(v47 + 2816);
        if (v48 >= *(unsigned int *)(v47 + 2784))
          v49 = (int *)sub_22F162D2C(v47, 1u);
        else
          v49 = (int *)(*(_QWORD *)(v47 + 2776) + 24 * v48);
        v10 = 0;
        v54 = sub_22F2E6FAC(a1, (int *)v9, v49);
        if (v54)
          v11 = 64;
        else
          v11 = 63;
      }
      else
      {
        v54 = 0;
        v10 = 0;
        v11 = 63;
      }
      v12 = "> =";
      goto LABEL_22;
    case '6':
      v54 = 0;
      v10 = 0;
      v11 = 53;
      goto LABEL_22;
    default:
      if (*(_WORD *)(a1 + 32) == 74)
      {
        v54 = 0;
        v10 = 1;
        v11 = 52;
        v12 = "> >";
LABEL_22:
        v52 = v11;
        v53 = a4;
        v51 = *(_DWORD *)(a1 + 40);
        v27 = *(unsigned int *)(a1 + 16);
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(v28 + 2816);
        if (v29 >= *(unsigned int *)(v28 + 2784))
          v30 = sub_22F162D2C(v28, 1u);
        else
          v30 = *(_QWORD *)(v28 + 2776) + 24 * v29;
        v61 = *(_OWORD *)v30;
        v62 = *(_QWORD *)(v30 + 16);
        v31 = 0;
        if (v10)
        {
          v32 = (unsigned __int16)v62 - 51;
          if (v32 <= 0x17 && ((1 << v32) & 0x80300F) != 0)
            v31 = sub_22F2E6FAC(a1, (int *)v9, (int *)&v61);
        }
        v33 = *(_QWORD *)(a1 + 8);
        if (!a5)
        {
          v34 = sub_22F1418F4(v27, 2u, *(uint64_t **)(v33 + 88), *(_QWORD **)(v33 + 56));
          v66[12] = 0;
          *(_QWORD *)&v66[4] = 0;
          v69 = 0;
          v68 = 0uLL;
          v70 = 0;
          __src = (unsigned __int8 *)(v27 | ((unint64_t)(v34 + v27) << 32));
          v66[0] = 0;
          v35 = *(_WORD *)(v12 + 1);
          LOBYTE(v68) = *v12;
          *(_WORD *)((char *)&v68 + 1) = v35;
          HIBYTE(v69) = 3;
          v56 = 0;
          v55 = 0;
          *(_QWORD *)&v57[3] = 0;
          v57[11] = 0;
          v59 = 0;
          memset(v60, 0, 9);
          __p = 0;
          if (v31)
          {
            *(_QWORD *)&v63[3] = 0;
            v64 = 0;
            v55 = v61 | ((unint64_t)v61 << 32);
            v56 = 0;
            *(_QWORD *)v57 = *(unsigned int *)v63;
            *(_DWORD *)&v57[8] = 0;
            __p = (void *)32;
            *(_WORD *)((char *)v60 + 7) = 1;
          }
          v36 = *(unsigned __int16 *)(a1 + 32);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0
            || (v37 = 1947, v36 != 52) && v36 != 74)
          {
            if (v36 == 53)
              v37 = 1737;
            else
              v37 = 1749;
          }
          v38 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v38 + 312) = v27;
          *(_DWORD *)(v38 + 316) = v37;
          if (*(char *)(v38 + 311) < 0)
          {
            **(_BYTE **)(v38 + 288) = 0;
            *(_QWORD *)(v38 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v38 + 288) = 0;
            *(_BYTE *)(v38 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v63, v38);
          sub_22E6D82D0((uint64_t *)v63, &__src);
          sub_22E6D82D0((uint64_t *)v63, &v55);
          sub_22E3BB0B8((uint64_t)v63);
          if (SHIBYTE(v60[0]) < 0)
            operator delete(__p);
          if (SHIBYTE(v69) < 0)
            operator delete((void *)v68);
          v33 = *(_QWORD *)(a1 + 8);
        }
        v39 = sub_22F1418F4(v27, 1u, *(uint64_t **)(v33 + 88), *(_QWORD **)(v33 + 56));
        *a3 = sub_22F18E328(*(_QWORD *)(a1 + 8), v27, v39);
        v40 = (unint64_t)v9;
        v41 = sub_22F162F18(*(_QWORD **)(a1 + 8), (int *)v9);
        v42 = *(_QWORD *)(a1 + 24);
        LODWORD(v55) = *(_DWORD *)(a1 + 34);
        WORD2(v55) = *(_WORD *)(a1 + 38);
        v50 = a3;
        v43 = *a3;
        v44 = *(_DWORD *)(a1 + 20);
        if (v54)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v40);
          v44 += *(_DWORD *)(a1 + 20);
        }
        *(_WORD *)(a1 + 32) = v52;
        *(_DWORD *)(a1 + 20) = v44 - v39;
        v45 = v39 + v27;
        if (v31)
          v45 = sub_22F18E328(*(_QWORD *)(a1 + 8), v45, v44 - v39);
        *(_DWORD *)v40 = v45;
        if (v41)
        {
          if (v54)
            sub_22F162FA4(*(_QWORD *)(a1 + 8), 0, 0);
          v46 = *(_QWORD *)(a1 + 8);
          if (v53)
          {
            __src = (unsigned __int8 *)__PAIR64__(v39, v43);
            *(_QWORD *)v66 = v42;
            strcpy(&v66[8], "3");
            *(_DWORD *)&v66[10] = v55;
            v67 = WORD2(v55);
            v68 = *(_OWORD *)v40;
            v69 = *(_QWORD *)(v40 + 16);
            sub_22F162FA4(v46, &__src, 2);
LABEL_55:
            *(_DWORD *)(a1 + 40) = *v50;
            return 0;
          }
          __src = (unsigned __int8 *)__PAIR64__(v39, v43);
          *(_QWORD *)v66 = v42;
          strcpy(&v66[8], "3");
          *(_DWORD *)&v66[10] = v55;
          v67 = WORD2(v55);
          sub_22F162FA4(v46, &__src, 1);
        }
        else if (v53)
        {
          goto LABEL_55;
        }
        *(_DWORD *)(a1 + 40) = v51;
        sub_22E80F2F4(*(_QWORD *)(a1 + 8), v40, 1);
        *(_DWORD *)(a1 + 16) = v43;
        *(_DWORD *)(a1 + 20) = v39;
        *(_QWORD *)(a1 + 24) = v42;
        *(_WORD *)(a1 + 32) = 51;
        *(_DWORD *)(a1 + 34) = v55;
        *(_WORD *)(a1 + 38) = WORD2(v55);
        return 0;
      }
      v14 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
      v15 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v15 + 312) = v14;
      *(_DWORD *)(v15 + 316) = 15;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&__src, v15);
      v16 = __src;
      if (!__src)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v66);
        __src = v16;
      }
      v16[*v16 + 1] = 4;
      v17 = __src;
      v18 = *__src;
      *__src = v18 + 1;
      *(_QWORD *)&v17[8 * v18 + 16] = 51;
      sub_22E3BB0B8((uint64_t)&__src);
      v19 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v19 + 312) = a2;
      *(_DWORD *)(v19 + 316) = 104;
      if (*(char *)(v19 + 311) < 0)
      {
        **(_BYTE **)(v19 + 288) = 0;
        *(_QWORD *)(v19 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v19 + 288) = 0;
        *(_BYTE *)(v19 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&__src, v19);
      v20 = __src;
      if (!__src)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v66);
        __src = v20;
      }
      v20[*v20 + 1] = 4;
      v21 = __src;
      v22 = *__src;
      *__src = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = 46;
      sub_22E3BB0B8((uint64_t)&__src);
      return 1;
  }
}

uint64_t sub_22E88101C(uint64_t a1, int a2, int *a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  char v14;
  unsigned int v15;
  int v16;
  int v18;
  __int16 v19;
  unsigned __int16 v20;

  v12 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v13 = *(_DWORD *)(v12 + 24);
  *a3 = v13;
  v14 = *(_BYTE *)(v12 + 928);
  *(_BYTE *)(v12 + 928) = 0;
  v15 = *(unsigned __int16 *)(v12 + 16) - 51;
  if (v15 < 0x18 && ((0x80000Fu >> v15) & 1) != 0 || !sub_22E881150(a1, a4, a6, v13))
  {
    v16 = 0;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0)
  {
    v18 = 3407923;
    v19 = 74;
    sub_22E885940(a1, (unsigned __int16 *)&v18, 3, 3);
    v16 = 1;
  }
  else
  {
    v20 = 51;
    v16 = 1;
    sub_22E885940(a1, &v20, 1, 3);
  }
  *(_BYTE *)(a1 + 944) = v14;
  return v16 | sub_22E8809B8(a1, *a3, a5, a2, 0);
}

BOOL sub_22E881150(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL8 result;
  BOOL v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  int v46;
  uint64_t v47;
  _OWORD v48[4];
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58[3];

  v54 = a3;
  v53 = a4;
  v6 = *(unsigned __int8 *)(a1 + 945);
  *(_BYTE *)(a1 + 945) = 0;
  v7 = a1 + 48;
  v8 = a1 + 16;
  v49 = &v54;
  v50 = a1;
  v51 = a2;
  v52 = (unsigned int *)&v53;
  while (1)
  {
    if (*(_BYTE *)v7)
    {
      v38 = *(_DWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 64) = sub_22E881C00;
      *(_QWORD *)(a1 + 72) = &v49;
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 52) = v38;
    }
    v9 = *(_QWORD *)(a1 + 88);
    v57 = 1;
    v58[0] = 4;
    *(_QWORD *)&v43 = 0;
    *(_QWORD *)&v55 = *(unsigned int *)(v9 + 1704);
    sub_22EB4DDB8(v9 + 3688, v58, (int *)&v55, (__int16 *)(v9 + 1693), (uint64_t *)&v43, &v57);
    v10 = *(unsigned int *)(v9 + 3696);
    v11 = v10 - 2;
    v12 = *(_QWORD *)(v9 + 3688);
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)(v9 + 1693) = 0;
    if (*(_DWORD *)(v9 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08(v9 + 1840, (uint64_t *)(v15 - 496));
    }
    if (sub_22E883528(a1, 2, &v43))
    {
      v16 = sub_22E80FC30(a1, 0, 22, 3, 0, 0, 0);
      sub_22ED58468(*(_QWORD *)(a1 + 88), v16, v48);
    }
    else
    {
      v42 = v6;
      v22 = *(_OWORD *)(v7 + 16);
      v43 = *(_OWORD *)v7;
      v44 = v22;
      v55 = *(_OWORD *)v8;
      v23 = v8;
      v56 = *(_QWORD *)(v8 + 16);
      v24 = *(unsigned int *)(a1 + 2344);
      v25 = *(_WORD *)(a1 + 80);
      v26 = *(_WORD *)(a1 + 82);
      v27 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      sub_22E8805F4((uint64_t)v48, a1);
      if (*((_QWORD *)&v48[0] + 1))
      {
        sub_22E80FADC(a1 + 2336, v24);
        sub_22F414580(*(_QWORD *)(a1 + 8));
        v6 = v42;
        v8 = v23;
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 8);
        v29 = *(_QWORD *)(v28 + 2832);
        *(_QWORD *)(v28 + 2816) = *(_QWORD *)(v29 - 8);
        *(_QWORD *)(v28 + 2832) = v29 - 8;
        v30 = *(_QWORD *)(v28 + 1008);
        if (v30)
        {
          if (*(_QWORD *)(v30 + 224))
            v31 = 3;
          else
            v31 = 0;
        }
        else if (*(_QWORD *)(v28 + 1040))
        {
          v31 = 1;
        }
        else
        {
          v31 = 2;
        }
        *(_DWORD *)(v28 + 1048) = v31;
        v32 = v44;
        *(_OWORD *)v7 = v43;
        *(_OWORD *)(v7 + 16) = v32;
        *(_OWORD *)v23 = v55;
        *(_QWORD *)(v23 + 16) = v56;
        sub_22E80FADC(a1 + 2336, v24);
        *(_WORD *)(a1 + 80) = v25;
        *(_WORD *)(a1 + 82) = v26;
        *(_WORD *)(a1 + 84) = v27;
        if (HIDWORD(v48[2]))
          free(*(void **)&v48[2]);
        v33 = *(_DWORD *)(a1 + 16);
        v34 = sub_22E839A0C(a1, 1);
        v6 = v42;
        if ((v34 & 1) != 0 || (v34 & 0xFFFFFFFFFFFFFFFELL) == 0)
        {
          LODWORD(v48[0]) = 0;
          memset((char *)v48 + 8, 0, 48);
        }
        else
        {
          LODWORD(v48[0]) = 1;
          *((_QWORD *)&v48[0] + 1) = v34 & 0xFFFFFFFFFFFFFFFELL;
          memset(&v48[1], 0, 32);
          *(_QWORD *)&v48[3] = v33;
        }
        v8 = v23;
      }
    }
    sub_22EB48E64(v9);
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
      sub_22F34AB70(*(_QWORD **)(a1 + 88), (uint64_t)v48, *(_DWORD *)(a1 + 40), (uint64_t)&v43);
      v48[0] = v43;
      *(_QWORD *)&v48[1] = v44;
      sub_22F0AB71C((uint64_t)&v48[1] + 8, (uint64_t)&v44 + 8);
      *(_QWORD *)&v48[3] = v47;
      if (v46)
        free(v45);
    }
    v17 = *((_QWORD *)&v48[0] + 1);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v18 = *(_DWORD *)(a2 + 8);
      v19 = *(_QWORD *)a2;
      v20 = (char *)v48;
      if (v18 >= *(_DWORD *)(a2 + 12))
      {
        v36 = v19 + 56 * v18 > (unint64_t)v48;
        if (v19 <= (unint64_t)v48 && v36)
        {
          v37 = (char *)v48 - v19;
          sub_22F2F03AC(a2);
          v19 = *(_QWORD *)a2;
          v20 = &v37[*(_QWORD *)a2];
        }
        else
        {
          sub_22F2F03AC(a2);
          v19 = *(_QWORD *)a2;
          v20 = (char *)v48;
        }
      }
      v21 = v19 + 56 * *(unsigned int *)(a2 + 8);
      *(_OWORD *)v21 = *(_OWORD *)v20;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
      sub_22F0AB560((_QWORD *)(v21 + 24), (uint64_t)(v20 + 24));
      *(_QWORD *)(v21 + 48) = *((_QWORD *)v20 + 6);
      ++*(_DWORD *)(a2 + 8);
    }
    else if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 864))
    {
      if (!*(_BYTE *)(a1 + 948))
      {
        v39 = *v49;
        if (*v49)
        {
          v40 = v50;
          v41 = v51;
          *(_BYTE *)(v50 + 948) = 1;
          sub_22E9C4FA0(*(_QWORD *)(v40 + 88), v39, *(_QWORD *)v41, *(unsigned int *)(v41 + 8), *v52);
        }
      }
    }
    if (HIDWORD(v48[2]))
      free(*(void **)&v48[2]);
    if (!v17 || *(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
  }
  result = v17 == 0;
  *(_BYTE *)(a1 + 945) = v6;
  return result;
}

double sub_22E881648(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  char v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  _QWORD *v15;

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v5 + 32) && !*(_BYTE *)(v5 + 48))
  {
    v6 = sub_22ED62A48(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)v5, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 4), *(_DWORD *)(v5 + 36), v5 + 56, *(unsigned int *)(v5 + 44), *(_DWORD *)(v5 + 40), 0, 0, a3);
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v10 = (_DWORD *)(a1 + 16);
  *(_WORD *)(a1 + 32) = 400;
  if (v7)
    v11 = 0;
  else
    v11 = v6;
  *(_QWORD *)(a1 + 24) = v11;
  v12 = *(_DWORD *)a2;
  if (*(_DWORD *)(a2 + 4))
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13 || *(_QWORD *)(a2 + 8) != 0)
    *v10 = v12;
  v15 = *(_QWORD **)(a1 + 8);
  if (v15[352])
  {
    if (v15[353] != v15[354])
      *(_QWORD *)&result = sub_22F162E18((uint64_t)v15, (uint64_t)v10).n128_u64[0];
  }
  return result;
}

void sub_22E88172C(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 72) + 1) & 1) == 0 || (*a2 & 1) != 0)
    return;
  v4 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *v4;
  if (v5 <= 0xA2)
  {
    if (v5 != 123)
    {
      if (v5 != 161)
        return;
      v6 = *(unsigned int *)v4;
      if ((v6 & 0x80000) != 0)
      {
        v7 = 0;
        v8 = &v4[16 * ((v6 >> 18) & 1) + 32 + 8 * ((v6 >> 20) & 1)];
        goto LABEL_19;
      }
LABEL_11:
      v7 = 0;
      goto LABEL_20;
    }
    if ((v4[2] & 8) != 0)
    {
      v8 = v4 + 72;
LABEL_18:
      v7 = 1;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (v5 == 163)
  {
    if ((v4[2] & 4) != 0)
    {
      v8 = v4 + 56;
      goto LABEL_18;
    }
LABEL_15:
    v7 = 1;
    goto LABEL_20;
  }
  if (v5 != 188)
    return;
  v9 = *(unsigned int *)v4;
  if ((v9 & 0x100000) == 0)
    goto LABEL_11;
  v7 = 0;
  v8 = &v4[24 * ((v9 >> 19) & 1) + 48];
LABEL_19:
  if (*(_DWORD *)v8)
    return;
LABEL_20:
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 2816);
  if (v11 < *(unsigned int *)(v10 + 2784))
    v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
  else
    v12 = sub_22F162D2C(v10, 1u);
  if (*(_WORD *)(v12 + 16) == 51)
    goto LABEL_48;
  v13 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v13 + 56) + 1) & 2) != 0)
  {
    v14 = *(_QWORD *)(v13 + 2816);
    if (v14 >= *(unsigned int *)(v13 + 2784))
      v15 = sub_22F162D2C(v13, 1u);
    else
      v15 = *(_QWORD *)(v13 + 2776) + 24 * v14;
    v16 = *(unsigned __int16 *)(v15 + 16);
    if (v16 != 52 && v16 != 74)
    {
      v13 = *(_QWORD *)(a1 + 8);
      goto LABEL_29;
    }
LABEL_48:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v38 = *(_DWORD *)(a1 + 40);
    LODWORD(v41) = 0;
    sub_22E8809B8(a1, v38, (unsigned int *)&v41, 1, 0);
    sub_22ED57748(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *a2, v38, v41);
    *a2 = 1;
    return;
  }
LABEL_29:
  v17 = *(_OWORD *)(a1 + 64);
  v41 = *(_OWORD *)(a1 + 48);
  v42 = v17;
  v39 = *(_OWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 32);
  v18 = *(unsigned int *)(a1 + 2344);
  v19 = *(unsigned __int16 *)(a1 + 80);
  v20 = *(unsigned __int16 *)(a1 + 82);
  v21 = *(unsigned __int16 *)(a1 + 84);
  sub_22F1629F8(v13);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v22 = *(_DWORD *)(a1 + 40);
  if (sub_22E83F964(a1) && sub_22F2F0154(a1, *a2, v22))
  {
    sub_22E80FADC(a1 + 2336, v18);
    sub_22F414580(*(_QWORD *)(a1 + 8));
    *a2 = 1;
    return;
  }
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(v23 + 2832);
  *(_QWORD *)(v23 + 2816) = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v23 + 2832) = v24 - 8;
  v25 = *(_QWORD *)(v23 + 1008);
  if (v25)
  {
    if (*(_QWORD *)(v25 + 224))
      v26 = 3;
    else
      v26 = 0;
  }
  else if (*(_QWORD *)(v23 + 1040))
  {
    v26 = 1;
  }
  else
  {
    v26 = 2;
  }
  *(_DWORD *)(v23 + 1048) = v26;
  v27 = v42;
  *(_OWORD *)(a1 + 48) = v41;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 32) = v40;
  sub_22E80FADC(a1 + 2336, v18);
  *(_WORD *)(a1 + 80) = v19;
  *(_WORD *)(a1 + 82) = v20;
  *(_WORD *)(a1 + 84) = v21;
  v28 = ((2 * v7) | (*(unsigned __int16 *)(a1 + 34) >> 1) & 1) ^ 1;
  v29 = *(_DWORD *)(a1 + 16);
  v30 = *(_DWORD *)(a1 + 2424);
  v31 = *(_QWORD *)(a1 + 2416);
  if (!v30)
  {
    v32 = 0;
LABEL_35:
    *(_QWORD *)&v41 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    DWORD2(v41) = v29;
    WORD6(v41) = v28;
    HIWORD(v41) = v19;
    LOWORD(v42) = v20;
    WORD1(v42) = v21;
    v33 = (char *)&v41;
    if (v30 >= *(_DWORD *)(a1 + 2428))
    {
      if (v31 <= (unint64_t)&v41 && v31 + 24 * v32 > (unint64_t)&v41)
      {
        v37 = (char *)&v41 - v31;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = *(_QWORD *)(a1 + 2416);
        v33 = &v37[v31];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = *(_QWORD *)(a1 + 2416);
        v33 = (char *)&v41;
      }
    }
    v34 = v31 + 24 * *(unsigned int *)(a1 + 2424);
    v35 = *(_OWORD *)v33;
    *(_QWORD *)(v34 + 16) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v34 = v35;
    ++*(_DWORD *)(a1 + 2424);
    return;
  }
  v36 = v31 + 24 * v30;
  v32 = *(_DWORD *)(a1 + 2424);
  if (v19 != *(unsigned __int16 *)(v36 - 10))
    goto LABEL_35;
  v32 = *(_DWORD *)(a1 + 2424);
  if (v20 != *(unsigned __int16 *)(v36 - 8))
    goto LABEL_35;
  v32 = *(_DWORD *)(a1 + 2424);
  if (v21 != *(unsigned __int16 *)(v36 - 6))
    goto LABEL_35;
  if (*(unsigned __int16 *)(v36 - 12) <= v28)
  {
    *(_QWORD *)(v36 - 24) = *a2 & 0xFFFFFFFFFFFFFFFELL;
    *(_DWORD *)(v36 - 16) = v29;
    *(_WORD *)(v31 + 24 * *(unsigned int *)(a1 + 2424) - 12) = v28;
  }
}

void *sub_22E881B54@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  size_t v3;
  const char *v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;

  if (*(_DWORD *)(*(_QWORD *)result + 40) || (v5 = *(_QWORD *)(*(_QWORD *)result + 48)) == 0)
  {
    v3 = 9;
    a2[23] = 9;
    v4 = "<unknown>";
  }
  else
  {
    v6 = *(_DWORD **)(v5 + 16);
    v7 = *v6;
    v4 = (const char *)(v6 + 4);
    v3 = v7;
    if (v7 >= 0x17uLL)
    {
      if ((v3 | 7) == 0x17)
        v8 = (v3 & 0xFFFFFFF8) + 8;
      else
        v8 = v3 | 7;
      v9 = operator new(v8 + 1);
      *((_QWORD *)a2 + 1) = v3;
      *((_QWORD *)a2 + 2) = v8 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)a2 = v9;
      a2 = v9;
    }
    else
    {
      a2[23] = v3;
      if (!v3)
        goto LABEL_4;
    }
  }
  result = memmove(a2, v4, v3);
LABEL_4:
  a2[v3] = 0;
  return result;
}

unint64_t sub_22E881C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)a1;
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 948) = 1;
  return sub_22E9C4FA0(*(_QWORD *)(v2 + 88), v1, *(_QWORD *)v3, *(unsigned int *)(v3 + 8), **(_DWORD **)(a1 + 24));
}

BOOL sub_22E881C3C(uint64_t a1, int a2)
{
  int v4;
  unint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  BOOL v19;

  v19 = 0;
  v4 = sub_22E881D88(a1, 1, &v19);
  if (v4 != 2)
    return v4 != 1;
  if (v19)
    return 0;
  v17 = *(_OWORD *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 2344);
  v7 = *(_WORD *)(a1 + 80);
  v8 = *(_WORD *)(a1 + 82);
  v9 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  v10 = sub_22E882920(a1, a2);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 2832);
  *(_QWORD *)(v11 + 2816) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 2832) = v12 - 8;
  v13 = *(_QWORD *)(v11 + 1008);
  if (v13)
  {
    if (*(_QWORD *)(v13 + 224))
      v14 = 3;
    else
      v14 = 0;
  }
  else if (*(_QWORD *)(v11 + 1040))
  {
    v14 = 1;
  }
  else
  {
    v14 = 2;
  }
  *(_DWORD *)(v11 + 1048) = v14;
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 32) = v16;
  sub_22E80FADC(a1 + 2336, v6);
  *(_WORD *)(a1 + 80) = v7;
  *(_WORD *)(a1 + 82) = v8;
  *(_WORD *)(a1 + 84) = v9;
  return v10 == 3 || (v10 & 0xFFFFFFFD) == 0;
}

unint64_t sub_22E881D88(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  int v49;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  unint64_t v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  int v85;
  int v86;
  int v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];

  while (2)
  {
    v6 = 0;
    v7 = *(unsigned __int16 *)(a1 + 32);
    if (v7 > 0xC4)
    {
      switch(*(_WORD *)(a1 + 32))
      {
        case 0xFA:
        case 0x127:
        case 0x12E:
        case 0x12F:
        case 0x130:
        case 0x131:
        case 0x132:
        case 0x133:
        case 0x134:
        case 0x135:
        case 0x136:
        case 0x13E:
        case 0x13F:
        case 0x140:
        case 0x141:
        case 0x142:
        case 0x143:
        case 0x144:
        case 0x145:
        case 0x162:
        case 0x163:
        case 0x16E:
        case 0x16F:
        case 0x170:
        case 0x171:
        case 0x172:
        case 0x173:
        case 0x174:
        case 0x175:
        case 0x176:
        case 0x177:
        case 0x182:
        case 0x187:
          return v6;
        case 0xFB:
        case 0xFC:
        case 0xFD:
        case 0xFE:
        case 0xFF:
        case 0x100:
        case 0x101:
        case 0x102:
        case 0x103:
        case 0x104:
        case 0x105:
        case 0x106:
        case 0x107:
        case 0x108:
        case 0x109:
        case 0x10A:
        case 0x10B:
        case 0x10C:
        case 0x10D:
        case 0x10E:
        case 0x10F:
        case 0x110:
        case 0x111:
        case 0x112:
        case 0x113:
        case 0x114:
        case 0x115:
        case 0x116:
        case 0x117:
        case 0x118:
        case 0x119:
        case 0x11A:
        case 0x11B:
        case 0x11C:
        case 0x11D:
        case 0x11E:
        case 0x11F:
        case 0x120:
        case 0x121:
        case 0x122:
        case 0x123:
        case 0x124:
        case 0x125:
        case 0x126:
        case 0x128:
        case 0x129:
        case 0x12A:
        case 0x12B:
        case 0x12C:
        case 0x12D:
        case 0x13D:
        case 0x14D:
        case 0x14E:
        case 0x15C:
        case 0x15D:
        case 0x15E:
        case 0x15F:
        case 0x160:
        case 0x161:
        case 0x164:
        case 0x165:
        case 0x168:
        case 0x169:
        case 0x16A:
        case 0x16B:
        case 0x16C:
        case 0x16D:
        case 0x178:
        case 0x179:
        case 0x17A:
        case 0x17B:
        case 0x17D:
        case 0x17E:
        case 0x17F:
        case 0x180:
        case 0x181:
        case 0x183:
        case 0x184:
        case 0x185:
        case 0x186:
        case 0x188:
        case 0x189:
        case 0x18A:
        case 0x18B:
        case 0x18C:
        case 0x18D:
        case 0x18E:
        case 0x192:
        case 0x193:
        case 0x194:
        case 0x195:
        case 0x196:
          return 1;
        case 0x137:
          goto LABEL_9;
        case 0x138:
        case 0x139:
        case 0x13A:
        case 0x13B:
        case 0x13C:
        case 0x146:
        case 0x147:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14B:
        case 0x14C:
        case 0x15B:
          return 0;
        case 0x14F:
        case 0x150:
        case 0x151:
        case 0x152:
        case 0x153:
        case 0x154:
        case 0x155:
        case 0x156:
        case 0x157:
        case 0x158:
        case 0x159:
        case 0x15A:
        case 0x166:
        case 0x167:
        case 0x17C:
        case 0x197:
          goto LABEL_17;
        case 0x18F:
          if ((sub_22E88B7AC(a1) & 1) != 0)
            return 3;
          v28 = a1 + 16;
          v29 = *(unsigned __int16 *)(a1 + 32);
          if (v29 == 400)
            goto LABEL_42;
          if (v29 != 399)
            return 1;
          v30 = *(_QWORD *)(a1 + 8);
          v31 = *(_QWORD *)(v30 + 2816);
          if (v31 >= *(unsigned int *)(v30 + 2784))
            v32 = sub_22F162D2C(v30, 1u);
          else
            v32 = *(_QWORD *)(v30 + 2776) + 24 * v31;
          if (*(_WORD *)(v32 + 16) != 401)
            goto LABEL_145;
          v58 = *(_QWORD *)(a1 + 8);
          v59 = *(_QWORD *)(v58 + 2816);
          if (v59 >= *(unsigned int *)(v58 + 2784))
            v60 = sub_22F162D2C(v58, 1u);
          else
            v60 = *(_QWORD *)(v58 + 2776) + 24 * v59;
          v63 = *(_DWORD *)(*(_QWORD *)(v60 + 8) + 32);
          if (v63 == 6)
          {
            v70 = a1 + 16;
            if (*(_WORD *)(a1 + 32) != 1)
            {
              v71 = *(_QWORD *)(a1 + 8);
              v72 = *(_QWORD *)(v71 + 2816) + 1;
              if (v72 >= *(unsigned int *)(v71 + 2784))
                v70 = sub_22F162D2C(v71, 2u);
              else
                v70 = *(_QWORD *)(v71 + 2776) + 24 * v72;
            }
            v6 = 0;
            v73 = *(unsigned __int16 *)(v70 + 16);
            if (v73 == 5 || v73 == 76 || v73 == 162)
              return v6;
          }
          else if (!v63)
          {
LABEL_112:
            if (!a3)
              return 3;
LABEL_113:
            v64 = *(_QWORD *)(a1 + 8);
            v65 = *(_QWORD *)(v64 + 2816);
            if (v65 >= *(unsigned int *)(v64 + 2784))
              v66 = sub_22F162D2C(v64, 1u);
            else
              v66 = *(_QWORD *)(v64 + 2776) + 24 * v65;
            *a3 = *(unsigned __int16 *)(v66 + 16) == 21;
            return 2;
          }
LABEL_145:
          if (*(_WORD *)(a1 + 32) != 399)
            return 1;
          v74 = *(_QWORD *)(a1 + 8);
          v75 = *(_QWORD *)(v74 + 2816);
          v76 = v75 >= *(unsigned int *)(v74 + 2784) ? sub_22F162D2C(v74, 1u) : *(_QWORD *)(v74 + 2776) + 24 * v75;
          if (*(_WORD *)(v76 + 16) != 5)
            return 1;
          memset(v107, 0, sizeof(v107));
          v77 = *(unsigned int *)(a1 + 16);
          LODWORD(v78) = *(_DWORD *)(a1 + 20);
          if ((_DWORD)v78)
            v78 = v78;
          else
            v78 = v77;
          sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v77 | (v78 << 32), (uint64_t)v107);
          if (!*((_QWORD *)&v107[0] + 1) || (sub_22F0AAC5C(*((unint64_t *)&v107[0] + 1)) & 4) == 0)
          {
            v6 = 3;
            v79 = 1;
            switch(sub_22E88AC5C(a1, 0))
            {
              case 0u:
                break;
              case 1u:
                v6 = 1;
                break;
              case 2u:
                if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) == 0)
                  goto LABEL_166;
                if ((sub_22E88B7AC(a1) & 1) == 0)
                {
                  if (*(_WORD *)(a1 + 32) != 5)
                    goto LABEL_174;
                  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
                    v6 = 0;
                  else
LABEL_166:
                    v6 = *(_BYTE *)(a1 + 944) == 0;
                }
                break;
              case 3u:
                if (a3)
                  v6 = 2;
                else
                  v6 = 1;
                break;
              default:
LABEL_174:
                v6 = sub_22E881D88(a1, a2, a3);
                v79 = 1;
                break;
            }
LABEL_198:
            if (HIDWORD(v107[1]))
              free(*(void **)&v107[1]);
            if (v79)
              return v6;
            return 1;
          }
          v80 = *(_OWORD *)(a1 + 64);
          v105 = *(_OWORD *)(a1 + 48);
          v106 = v80;
          v103 = *(_OWORD *)v28;
          v104 = *(_QWORD *)(a1 + 32);
          v81 = *(unsigned int *)(a1 + 2344);
          v82 = *(_WORD *)(a1 + 80);
          v83 = *(_WORD *)(a1 + 82);
          v84 = *(_WORD *)(a1 + 84);
          sub_22F1629F8(*(_QWORD *)(a1 + 8));
          v85 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v85 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v85;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (*(_WORD *)(a1 + 32) == 5)
          {
            v6 = 3;
            v86 = 1;
            goto LABEL_194;
          }
          v87 = sub_22E881D88(a1, a2, a3);
          v6 = 3;
          v86 = 1;
          if (!v87 || v87 == 3)
          {
LABEL_194:
            v98 = *(_QWORD *)(a1 + 8);
            v99 = *(_QWORD *)(v98 + 2832);
            *(_QWORD *)(v98 + 2816) = *(_QWORD *)(v99 - 8);
            *(_QWORD *)(v98 + 2832) = v99 - 8;
            v100 = *(_QWORD *)(v98 + 1008);
            if (v100)
            {
              if (*(_QWORD *)(v100 + 224))
                v101 = 3;
              else
                v101 = 0;
            }
            else if (*(_QWORD *)(v98 + 1040))
            {
              v101 = 1;
            }
            else
            {
              v101 = 2;
            }
            *(_DWORD *)(v98 + 1048) = v101;
            v102 = v106;
            *(_OWORD *)(a1 + 48) = v105;
            *(_OWORD *)(a1 + 64) = v102;
            *(_OWORD *)v28 = v103;
            *(_QWORD *)(a1 + 32) = v104;
            sub_22E80FADC(a1 + 2336, v81);
            *(_WORD *)(a1 + 80) = v82;
            *(_WORD *)(a1 + 82) = v83;
            *(_WORD *)(a1 + 84) = v84;
            v79 = v86;
            goto LABEL_198;
          }
          if (a3)
          {
            *a3 = 1;
            v6 = 2;
            goto LABEL_194;
          }
          v88 = *(_QWORD *)(a1 + 8);
          if ((**(_BYTE **)(v88 + 56) & 0x10) == 0)
            goto LABEL_192;
          v89 = *(unsigned __int16 *)(a1 + 32);
          if (v89 != 30 && v89 != 27)
            goto LABEL_187;
          v90 = *(_QWORD *)(v88 + 2816);
          if (v90 >= *(unsigned int *)(v88 + 2784))
            v91 = sub_22F162D2C(v88, 1u);
          else
            v91 = *(_QWORD *)(v88 + 2776) + 24 * v90;
          if (*(_WORD *)(v91 + 16) != 22)
          {
            v92 = *(_QWORD *)(a1 + 8);
            v93 = *(_QWORD *)(v92 + 2816);
            v94 = v93 >= *(unsigned int *)(v92 + 2784) ? sub_22F162D2C(v92, 1u) : *(_QWORD *)(v92 + 2776) + 24 * v93;
            if (*(_WORD *)(v94 + 16) != 51)
            {
              v89 = *(unsigned __int16 *)(a1 + 32);
LABEL_187:
              if (v89 != 28
                || ((v95 = *(_QWORD *)(a1 + 8), v96 = *(_QWORD *)(v95 + 2816), v96 >= *(unsigned int *)(v95 + 2784))
                  ? (v97 = sub_22F162D2C(v95, 1u))
                  : (v97 = *(_QWORD *)(v95 + 2776) + 24 * v96),
                    *(_WORD *)(v97 + 16) != 51))
              {
LABEL_192:
                v86 = 0;
              }
            }
          }
          v6 = 0;
          goto LABEL_194;
        case 0x190:
          v28 = a1 + 16;
          goto LABEL_42;
        case 0x191:
          v35 = *(_QWORD *)(a1 + 24);
          v36 = *(_DWORD *)(v35 + 32);
          if (!v36)
            goto LABEL_112;
          if (a3 && v36 == 5)
            goto LABEL_113;
          if (v36 != 6)
            goto LABEL_106;
          v37 = *(_QWORD *)(a1 + 8);
          v38 = *(_QWORD *)(v37 + 2816);
          if (v38 >= *(unsigned int *)(v37 + 2784))
            v39 = sub_22F162D2C(v37, 1u);
          else
            v39 = *(_QWORD *)(v37 + 2776) + 24 * v38;
          v6 = 0;
          v62 = *(unsigned __int16 *)(v39 + 16);
          if (v62 == 5 || v62 == 76 || v62 == 162)
            return v6;
          v36 = *(_DWORD *)(v35 + 32);
LABEL_106:
          if (v36 != 2)
            return 1;
          v28 = a1 + 16;
          memset(v107, 0, sizeof(v107));
          sub_22E881648(a1, (uint64_t)v107, 0);
          if (HIDWORD(v107[1]))
            free(*(void **)&v107[1]);
LABEL_42:
          v15 = *(_QWORD *)(a1 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v15 + 56) + 1) & 0x40) == 0)
            goto LABEL_18;
          v33 = *(_QWORD *)(v15 + 2816);
          if (v33 >= *(unsigned int *)(v15 + 2784))
          {
            v34 = sub_22F162D2C(v15, 1u);
            v15 = *(_QWORD *)(a1 + 8);
          }
          else
          {
            v34 = *(_QWORD *)(v15 + 2776) + 24 * v33;
          }
          if (*(_WORD *)(v34 + 16) != 46)
            goto LABEL_18;
          v51 = *(_OWORD *)(a1 + 64);
          v107[0] = *(_OWORD *)(a1 + 48);
          v107[1] = v51;
          v105 = *(_OWORD *)v28;
          *(_QWORD *)&v106 = *(_QWORD *)(v28 + 16);
          v41 = *(unsigned int *)(a1 + 2344);
          v42 = *(_WORD *)(a1 + 80);
          v43 = *(_WORD *)(a1 + 82);
          v44 = *(_WORD *)(a1 + 84);
          sub_22F1629F8(v15);
          sub_22E80F0F0(a1, 0);
          v52 = sub_22F2F04BC(a1);
          v46 = *(_QWORD *)(a1 + 8);
          if (v52 == 3)
            v6 = 3;
          else
            v6 = 2;
          if (v52 == 3)
            goto LABEL_82;
          goto LABEL_65;
        default:
          v11 = v7 - 197;
          if (v11 > 0xA)
            return 1;
          if (((1 << v11) & 0xB) != 0)
          {
LABEL_17:
            v15 = *(_QWORD *)(a1 + 8);
LABEL_18:
            v16 = *(_QWORD *)(v15 + 2816);
            if (v16 >= *(unsigned int *)(v15 + 2784))
              v17 = sub_22F162D2C(v15, 1u);
            else
              v17 = *(_QWORD *)(v15 + 2776) + 24 * v16;
            if (*(_WORD *)(v17 + 16) == 21)
              return 2;
            v18 = *(_QWORD *)(a1 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v18 + 56) + 1) & 2) == 0)
              return sub_22E852BB0(a1);
            v19 = *(_QWORD *)(v18 + 2816);
            v20 = v19 >= *(unsigned int *)(v18 + 2784) ? sub_22F162D2C(v18, 1u) : *(_QWORD *)(v18 + 2776) + 24 * v19;
            v6 = a2;
            if (*(_WORD *)(v20 + 16) != 23)
              return sub_22E852BB0(a1);
          }
          else
          {
            if (((1 << v11) & 0x240) != 0)
              return v6;
            if (v11 != 10)
              return 1;
            v12 = *(_QWORD *)(a1 + 8);
            v13 = *(_QWORD *)(v12 + 2816);
            if (v13 >= *(unsigned int *)(v12 + 2784))
              v14 = sub_22F162D2C(v12, 1u);
            else
              v14 = *(_QWORD *)(v12 + 2776) + 24 * v13;
            if (*(_WORD *)(v14 + 16) != 21)
              return 0;
            v28 = a1 + 16;
            v47 = *(_OWORD *)(a1 + 64);
            v107[0] = *(_OWORD *)(a1 + 48);
            v107[1] = v47;
            v105 = *(_OWORD *)(a1 + 16);
            *(_QWORD *)&v106 = *(_QWORD *)(a1 + 32);
            v41 = *(unsigned int *)(a1 + 2344);
            v42 = *(_WORD *)(a1 + 80);
            v43 = *(_WORD *)(a1 + 82);
            v44 = *(_WORD *)(a1 + 84);
            sub_22F1629F8(*(_QWORD *)(a1 + 8));
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            sub_22E80F720(a1);
            LOWORD(v103) = 22;
            v48 = sub_22E885940(a1, (unsigned __int16 *)&v103, 1, 1);
            if (v48)
              v6 = 2;
            else
              v6 = 3;
            v46 = *(_QWORD *)(a1 + 8);
            if (v48)
            {
LABEL_65:
              v49 = *(unsigned __int16 *)(a1 + 32);
              if (v49 != 21)
              {
                if (v49 != 23 || (*(_BYTE *)(*(_QWORD *)(v46 + 56) + 1) & 2) == 0)
                  v6 = 0;
                else
                  v6 = a2;
              }
            }
LABEL_82:
            v53 = *(_QWORD *)(v46 + 2832);
            *(_QWORD *)(v46 + 2816) = *(_QWORD *)(v53 - 8);
            *(_QWORD *)(v46 + 2832) = v53 - 8;
            v54 = *(_QWORD *)(v46 + 1008);
            if (v54)
            {
              if (*(_QWORD *)(v54 + 224))
                v55 = 3;
              else
                v55 = 0;
            }
            else if (*(_QWORD *)(v46 + 1040))
            {
              v55 = 1;
            }
            else
            {
              v55 = 2;
            }
            *(_DWORD *)(v46 + 1048) = v55;
            v56 = v107[1];
            *(_OWORD *)(a1 + 48) = v107[0];
            *(_OWORD *)(a1 + 64) = v56;
            *(_OWORD *)v28 = v105;
            *(_QWORD *)(v28 + 16) = v106;
            sub_22E80FADC(a1 + 2336, v41);
            *(_WORD *)(a1 + 80) = v42;
            *(_WORD *)(a1 + 82) = v43;
            *(_WORD *)(a1 + 84) = v44;
          }
          return v6;
      }
    }
    switch(*(_WORD *)(a1 + 32))
    {
      case 0x4C:
      case 0x50:
      case 0x56:
      case 0x57:
      case 0x5C:
      case 0x61:
      case 0x62:
      case 0x67:
      case 0x68:
      case 0x6A:
      case 0x6B:
      case 0x6E:
      case 0x72:
      case 0x74:
      case 0x79:
      case 0x82:
      case 0x86:
      case 0x89:
      case 0x8A:
      case 0x9B:
      case 0xA1:
      case 0xA6:
      case 0xAE:
      case 0xAF:
      case 0xBA:
        return v6;
      case 0x4D:
      case 0x4E:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x55:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x63:
      case 0x66:
      case 0x69:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x73:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x81:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x87:
      case 0x88:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x99:
      case 0x9A:
      case 0x9D:
      case 0x9E:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
        return 1;
      case 0x4F:
      case 0x54:
      case 0x58:
      case 0x5D:
      case 0x60:
      case 0x64:
      case 0x65:
      case 0x6C:
      case 0x6D:
      case 0x80:
      case 0x9C:
      case 0x9F:
      case 0xA0:
      case 0xB0:
      case 0xB1:
        goto LABEL_17;
      case 0x5E:
      case 0x5F:
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v22 + 2816);
        if (v23 >= *(unsigned int *)(v22 + 2784))
          v24 = sub_22F162D2C(v22, 1u);
        else
          v24 = *(_QWORD *)(v22 + 2776) + 24 * v23;
        if (*(_WORD *)(v24 + 16) != 21)
          return 3;
        v28 = a1 + 16;
        v40 = *(_OWORD *)(a1 + 64);
        v107[0] = *(_OWORD *)(a1 + 48);
        v107[1] = v40;
        v105 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)&v106 = *(_QWORD *)(a1 + 32);
        v41 = *(unsigned int *)(a1 + 2344);
        v42 = *(_WORD *)(a1 + 80);
        v43 = *(_WORD *)(a1 + 82);
        v44 = *(_WORD *)(a1 + 84);
        sub_22F1629F8(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E80F720(a1);
        LOWORD(v103) = 22;
        if ((sub_22E885940(a1, (unsigned __int16 *)&v103, 1, 1) & 1) != 0)
        {
          v45 = *(unsigned __int16 *)(a1 + 32);
          v46 = *(_QWORD *)(a1 + 8);
          if (v45 == 21)
          {
            v6 = 2;
          }
          else if (((v45 == 23) & ((*(_BYTE *)(*(_QWORD *)(v46 + 56) + 1) & 2) >> 1)) != 0)
          {
            v6 = a2;
          }
          else
          {
            v6 = 0;
          }
        }
        else
        {
          v46 = *(_QWORD *)(a1 + 8);
          v6 = 3;
        }
        goto LABEL_82;
      case 0x8E:
        return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) & 0x40000000) == 0;
      case 0x98:
      case 0xA2:
        goto LABEL_9;
      default:
        if (v7 == 71)
        {
          v8 = *(_QWORD *)(a1 + 8);
          v9 = *(_QWORD *)(v8 + 2816);
          if (v9 >= *(unsigned int *)(v8 + 2784))
            v10 = sub_22F162D2C(v8, 1u);
          else
            v10 = *(_QWORD *)(v8 + 2776) + 24 * v9;
          if ((*(unsigned __int16 *)(v10 + 16) | 8) == 0x8C)
            return 1;
LABEL_9:
          if ((sub_22E88B7AC(a1) & 1) != 0)
            return 3;
          continue;
        }
        if (v7 != 5)
          return 1;
        if ((sub_22E822180(a1) & 1) != 0)
          return 0;
        v25 = *(_QWORD *)(a1 + 8);
        v26 = *(_QWORD *)(v25 + 2816);
        if (v26 >= *(unsigned int *)(v25 + 2784))
        {
          v27 = sub_22F162D2C(v25, 1u);
          v25 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v27 = *(_QWORD *)(v25 + 2776) + 24 * v26;
        }
        v57 = *(unsigned __int16 *)(v27 + 16);
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 56) + 1) & 0x40) == 0 && v57 == 5)
          return 0;
        if (v57 != 46 && v57 != 71)
        {
          DWORD2(v107[0]) = 16843009;
          *(_QWORD *)&v107[0] = &off_24FAA53E0;
          memset((char *)v107 + 12, 0, 20);
          if ((v57 - 21) >= 2)
          {
            v61 = 1;
            if (v57 != 23)
            {
              v69 = v57 == 5 || v57 == 65;
              v61 = v57 == 51 || v69;
            }
          }
          else
          {
            v61 = 1;
          }
          BYTE8(v107[0]) = v61;
          v6 = 3;
          switch(sub_22E88AC5C(a1, (uint64_t)v107))
          {
            case 0u:
              return v6;
            case 1u:
              return 1;
            case 2u:
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 8) == 0)
                goto LABEL_131;
              if ((sub_22E88B7AC(a1) & 1) != 0)
                return v6;
              if (*(_WORD *)(a1 + 32) != 5)
                return sub_22E881D88(a1, a2, a3);
LABEL_131:
              v6 = *(_BYTE *)(a1 + 944) == 0;
              break;
            case 3u:
              if (a3)
                return 2;
              else
                return 1;
            default:
              return sub_22E881D88(a1, a2, a3);
          }
          return v6;
        }
        if ((sub_22E88B7AC(a1) & 1) != 0)
          return 3;
        if (*(_WORD *)(a1 + 32) == 5)
          return 1;
        return sub_22E881D88(a1, a2, a3);
    }
  }
}

uint64_t sub_22E882920(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;

  result = sub_22E8829B4(a1);
  if ((_DWORD)result != 3)
  {
    if (*(_WORD *)(a1 + 32) != 21)
    {
      result = sub_22E881D88(a1, 1, 0);
      switch((_DWORD)result)
      {
        case 3:
          return result;
        case 2:
          return 0;
        case 0:
          return result;
      }
    }
    result = sub_22F2F0554(a1);
    if ((_DWORD)result == 2)
    {
      v5 = *(unsigned __int16 *)(a1 + 32);
      if (v5 == 61)
        v6 = a2;
      else
        v6 = 0;
      if (v5 == 62)
        v7 = 1;
      else
        v7 = v6;
      if (v7)
        return 2;
      else
        return 1;
    }
  }
  return result;
}

uint64_t sub_22E8829B4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t *v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned __int16 v15;

  v2 = (unsigned int *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 > 0xF9)
  {
    if (v3 == 250)
      goto LABEL_32;
    if (v3 != 386)
    {
      if (v3 == 399)
      {
        v9 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v9 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v9;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = v3 - 86;
    if (v4 > 0x2C)
    {
LABEL_5:
      if (v3 == 186 || v3 == 207)
        goto LABEL_32;
LABEL_11:
      sub_22E80F0F0(a1, 0);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) != 0 && *(_WORD *)(a1 + 32) == 46)
        return sub_22F2F04BC(a1);
      return 2;
    }
    if (((1 << (v3 - 86)) & 0x100000240001) == 0)
    {
      if (v4 != 28)
        goto LABEL_5;
      v14 = (unsigned int *)(a1 + 16);
      v6 = (unint64_t *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(v10 + 2816);
      if (v11 >= *(unsigned int *)(v10 + 2784))
        v12 = sub_22F162D2C(v10, 1u);
      else
        v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
      v2 = v14;
      if (*(_WORD *)(v12 + 16) == 21)
      {
LABEL_32:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
        if (*(_WORD *)(a1 + 32) != 21)
          return 3;
        sub_22E80F720(a1);
        v15 = 22;
        if ((sub_22E885940(a1, &v15, 1, 0) & 1) == 0)
          return 3;
        return 2;
      }
      goto LABEL_35;
    }
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  v6 = (unint64_t *)(a1 + 8);
  v14 = (unsigned int *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  if (!sub_22E882BD8(a1) || sub_22E849D9C(a1) && (sub_22E88BDA8(a1, 0) & 1) != 0)
    return 3;
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 == 399)
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v8;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v14);
    v7 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v7 == 401)
  {
    v13 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v13 = *(_DWORD *)(a1 + 20);
    goto LABEL_36;
  }
  if (v7 == 5)
  {
LABEL_35:
    v13 = *(_DWORD *)(a1 + 16);
LABEL_36:
    *(_DWORD *)(a1 + 40) = v13;
    sub_22F18FB4C(*v6, v14);
    return 2;
  }
  return 3;
}

uint64_t sub_22E882BD8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned __int16 v5;
  unsigned __int16 v6;

  v2 = (unsigned int *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      v3 = *(unsigned __int16 *)(a1 + 32);
      result = 1;
      if (v3 > 0xB9)
      {
        if (v3 != 186 && v3 != 302)
          return result;
        goto LABEL_8;
      }
      if (v3 == 19)
        break;
      if (v3 != 157)
        return result;
LABEL_8:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
      if (*(_WORD *)(a1 + 32) == 21)
      {
        sub_22E80F720(a1);
        v6 = 22;
        if ((sub_22E885940(a1, &v6, 1, 0) & 1) != 0)
          continue;
      }
      return 0;
    }
    sub_22E80F788(a1);
    if (*(_WORD *)(a1 + 32) != 19)
      return 0;
    sub_22E80F788(a1);
    v5 = 20;
    result = sub_22E885940(a1, &v5, 1, 0);
    if (!(_DWORD)result)
      return result;
    if (*(_WORD *)(a1 + 32) != 20)
      return 0;
    sub_22E80F788(a1);
  }
}

uint64_t sub_22E882CE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  __int128 v33;
  void *v34[2];

  result = sub_22E883BBC(a1);
  if ((_DWORD)result == 3)
    return result;
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 == 26)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v9 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v9 == 5 || v9 == 141)
    goto LABEL_11;
  if (v9 != 399)
    goto LABEL_46;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 2816);
  v12 = v11 >= *(unsigned int *)(v10 + 2784) ? sub_22F162D2C(v10, 1u) : *(_QWORD *)(v10 + 2776) + 24 * v11;
  if (*(_WORD *)(v12 + 16) == 5)
  {
LABEL_11:
    if ((_DWORD)a3)
      goto LABEL_12;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(v20 + 2816);
    if (v21 >= *(unsigned int *)(v20 + 2784))
      v22 = sub_22F162D2C(v20, 1u);
    else
      v22 = *(_QWORD *)(v20 + 2776) + 24 * v21;
    if (*(_WORD *)(v22 + 16) == 141 && (a3 & 1) != 0)
    {
LABEL_12:
      v13 = *(unsigned __int16 *)(a1 + 32);
      if (v13 == 5)
      {
        v23 = *(_QWORD *)(a1 + 24);
        v24 = *(_DWORD *)(a1 + 2344);
        if (v24 >= *(_DWORD *)(a1 + 2348))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = *(_DWORD *)(a1 + 2344);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 2336) + 8 * v24) = v23;
        ++*(_DWORD *)(a1 + 2344);
      }
      else
      {
        if (v13 != 399)
          goto LABEL_40;
        v33 = 0u;
        *(_OWORD *)v34 = 0u;
        v14 = *(unsigned int *)(a1 + 16);
        LODWORD(v15) = *(_DWORD *)(a1 + 20);
        if ((_DWORD)v15)
          v15 = v15;
        else
          v15 = v14;
        sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v14 | (v15 << 32), (uint64_t)&v33);
        if ((_DWORD)v33)
          v16 = DWORD1(v33) == 0;
        else
          v16 = 1;
        v17 = !v16 && *((_QWORD *)&v33 + 1) == 0;
        v18 = v17;
        if (!v17)
        {
          v19 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v19 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v19;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        if (HIDWORD(v34[1]))
          free(v34[0]);
        if ((v18 & 1) != 0)
          return 3;
      }
      v13 = *(unsigned __int16 *)(a1 + 32);
LABEL_40:
      if (v13 != 141)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if ((a4 & 1) == 0)
          goto LABEL_56;
        return 2;
      }
      v31 = sub_22F2F0840(a1);
      v32 = v31 == 3;
      if (v31 == 3)
        result = 3;
      else
        result = 2;
      if (!v32)
      {
LABEL_55:
        if ((a4 & 1) == 0)
          goto LABEL_56;
        return result;
      }
      return result;
    }
  }
LABEL_46:
  if (*(_WORD *)(a1 + 32) != 21)
  {
    if ((_DWORD)a2)
      result = 2;
    else
      result = 1;
    if (!(_DWORD)a2)
      return result;
    goto LABEL_55;
  }
  sub_22E80F720(a1);
  if ((_DWORD)a2)
  {
    v25 = *(unsigned __int16 *)(a1 + 32);
    if (v25 == 26)
    {
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *(_QWORD *)(v26 + 2816);
      if (v27 >= *(unsigned int *)(v26 + 2784))
        v28 = sub_22F162D2C(v26, 1u);
      else
        v28 = *(_QWORD *)(v26 + 2776) + 24 * v27;
      v25 = *(unsigned __int16 *)(v28 + 16);
    }
    if (v25 == 22 || sub_22E81CB8C(a1, 0))
    {
      result = sub_22F2F0ADC(a1);
      if ((_DWORD)result != 2)
        return result;
      goto LABEL_55;
    }
  }
  result = 0;
  v30 = *(unsigned __int16 *)(a1 + 32);
  if ((v30 - 302) >= 7 && v30 != 186)
  {
    result = sub_22E882CE0(a1, a2, a3, 0);
    if ((_DWORD)result == 2)
    {
      if (*(_WORD *)(a1 + 32) == 22)
      {
        sub_22E80F720(a1);
        if ((a4 & 1) != 0)
          return 2;
        while (1)
        {
LABEL_56:
          v29 = *(unsigned __int16 *)(a1 + 32);
          switch(v29)
          {
            case 21:
              if ((a2 & 1) == 0 && !sub_22E883CE0(a1, 0))
                return 2;
              sub_22E80F720(a1);
              result = sub_22F2F0ADC(a1);
              break;
            case 19:
              result = sub_22F2F0C8C(a1);
              break;
            case 168:
              return 0;
            default:
              return 2;
          }
          if ((_DWORD)result != 2)
            return result;
        }
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_22E883050(uint64_t a1, char a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  int v10;
  _BOOL8 v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = *(_OWORD *)(a1 + 64);
  v23 = *(_OWORD *)(a1 + 48);
  v24 = v4;
  v5 = a1 + 16;
  v21 = *(_OWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 2344);
  v7 = *(_WORD *)(a1 + 80);
  v8 = *(_WORD *)(a1 + 82);
  v9 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v5);
  v20 = 0;
  v10 = sub_22E881D88(a1, 0, &v20);
  if (v10 != 2)
    goto LABEL_10;
  if (sub_22E8829B4(a1) == 3)
  {
    v11 = 1;
    goto LABEL_11;
  }
  v12 = *(unsigned __int16 *)(a1 + 32);
  if (v12 == 62)
    v13 = a2;
  else
    v13 = 0;
  v11 = 1;
  if (v12 != 23 && (v13 & 1) == 0)
  {
    v10 = sub_22E881D88(a1, 0, &v20);
LABEL_10:
    v11 = v10 != 1;
  }
LABEL_11:
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 2832);
  *(_QWORD *)(v14 + 2816) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v14 + 2832) = v15 - 8;
  v16 = *(_QWORD *)(v14 + 1008);
  if (v16)
  {
    if (*(_QWORD *)(v16 + 224))
      v17 = 3;
    else
      v17 = 0;
  }
  else if (*(_QWORD *)(v14 + 1040))
  {
    v17 = 1;
  }
  else
  {
    v17 = 2;
  }
  *(_DWORD *)(v14 + 1048) = v17;
  v18 = v24;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)v5 = v21;
  *(_QWORD *)(v5 + 16) = v22;
  sub_22E80FADC(a1 + 2336, v6);
  *(_WORD *)(a1 + 80) = v7;
  *(_WORD *)(a1 + 82) = v8;
  *(_WORD *)(a1 + 84) = v9;
  return v11;
}

uint64_t sub_22E8831C0(uint64_t a1, int a2, unsigned __int8 a3)
{
  int v4;
  uint8x8_t v5;
  uint64_t v6;
  unint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  int v12;
  uint8x8_t v13;
  int v14;
  uint8x8_t v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  uint8x8_t v21;
  unsigned int v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int16 v32;

  v28 = a1;
  v29 = 257;
  v30 = a2;
  v31 = a3;
  if (a2 && *(_WORD *)(a1 + 32) == 154)
    return 2;
  v4 = sub_22E881D88(a1, 1, 0);
  if (sub_22E8834C0((uint64_t)&v28, v4, v5))
  {
    if ((_BYTE)v29)
      return 0;
    if (HIBYTE(v29))
      return 1;
    if (!v30)
    {
      if (v31)
        return 3;
      else
        return 4;
    }
    return 2;
  }
  v26 = *(_OWORD *)(a1 + 48);
  v27 = *(_OWORD *)(a1 + 64);
  v24 = *(_OWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 2344);
  v9 = *(_WORD *)(a1 + 80);
  v10 = *(_WORD *)(a1 + 82);
  v11 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  v12 = sub_22E8829B4(a1);
  if (sub_22E8834C0((uint64_t)&v28, v12, v13)
    || (v14 = sub_22E882CE0(a1, 0, 1, 0), sub_22E8834C0((uint64_t)&v28, v14, v15)))
  {
LABEL_9:
    if ((_BYTE)v29)
    {
      v6 = 0;
    }
    else if (HIBYTE(v29))
    {
      v6 = 1;
    }
    else if (v30)
    {
      v6 = 2;
    }
    else if (v31)
    {
      v6 = 3;
    }
    else
    {
      v6 = 4;
    }
    goto LABEL_11;
  }
  while (1)
  {
    v16 = *(unsigned __int16 *)(a1 + 32);
    if (v16 == 63
      || v16 == 127
      || v16 == 186
      || (v16 == 23 ? (v17 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) == 0) : (v17 = 1), !v17))
    {
      sub_22F2F0674(&v28);
      goto LABEL_9;
    }
    if (v16 == 61 && v31)
    {
      v6 = 3;
      goto LABEL_11;
    }
    HIBYTE(v29) = 0;
    v18 = v30;
    v19 = v30 + v29;
    if (v19 + v31 <= 1)
    {
      if (v31)
        v22 = 3;
      else
        v22 = 4;
      if (v30)
        v22 = 2;
      goto LABEL_52;
    }
    v31 = 0;
    if (v19 <= 1)
    {
      if (v30)
        v22 = 2;
      else
        v22 = 4;
LABEL_52:
      if ((_BYTE)v29)
        v6 = 0;
      else
        v6 = v22;
      goto LABEL_11;
    }
    if (v16 == 21)
    {
      sub_22E80F720(a1);
      v32 = 22;
      sub_22E885940(a1, &v32, 1, 1);
      v16 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v16 != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v20 = sub_22E882CE0(a1, 0, 1, 0);
    if (sub_22E8834C0((uint64_t)&v28, v20, v21))
      goto LABEL_9;
  }
  if (v16 != 62 || v18 == 0)
    v6 = 0;
  else
    v6 = 2;
LABEL_11:
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = v26;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 32) = v25;
  sub_22E80FADC(a1 + 2336, v8);
  *(_WORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 82) = v10;
  *(_WORD *)(a1 + 84) = v11;
  return v6;
}

BOOL sub_22E8834C0(uint64_t a1, int a2, uint8x8_t a3)
{
  uint64_t v4;

  switch(a2)
  {
    case 1:
      *(_BYTE *)(a1 + 11) = 0;
      *(_WORD *)(a1 + 9) = 0;
      break;
    case 3:
      *(_DWORD *)(a1 + 8) = 0;
      break;
    case 0:
      v4 = a1;
      sub_22F2F0674((_BYTE *)a1);
      a1 = v4;
      break;
  }
  a3.i32[0] = *(_DWORD *)(a1 + 8);
  return vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3)) < 2u;
}

BOOL sub_22E883528(uint64_t a1, int a2, _BYTE *a3)
{
  int v6;
  _BOOL8 v7;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *a3 = 0;
  v6 = sub_22E881D88(a1, 1, 0);
  if (v6 == 2)
  {
    v22 = *(_OWORD *)(a1 + 48);
    v23 = *(_OWORD *)(a1 + 64);
    v20 = *(_OWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 32);
    v9 = *(unsigned int *)(a1 + 2344);
    v10 = *(_WORD *)(a1 + 80);
    v11 = *(_WORD *)(a1 + 82);
    v12 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    sub_22E8829B4(a1);
    v13 = sub_22E882CE0(a1, 1, 0, 0);
    if (v13 == 3)
      v14 = 0;
    else
      v14 = v13;
    if (v14 != 2)
      goto LABEL_8;
    if (a2 == 2)
    {
      v15 = *(unsigned __int16 *)(a1 + 32);
      if (v15 != 51 && v15 != 65)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 56) + 1) & 2) == 0)
          goto LABEL_17;
        if (v15 != 74 && v15 != 52)
        {
          if (v15 != 26)
            goto LABEL_17;
          v17 = *(_QWORD *)(v16 + 2816);
          v18 = v17 >= *(unsigned int *)(v16 + 2784) ? sub_22F162D2C(v16, 1u) : *(_QWORD *)(v16 + 2776) + 24 * v17;
          v19 = *(unsigned __int16 *)(v18 + 16);
          if ((v19 - 51) >= 2 && v19 != 74 && v19 != 65)
            goto LABEL_17;
        }
      }
    }
    else if (a2 || *(_WORD *)(a1 + 32) != 22)
    {
LABEL_17:
      v14 = 1;
      goto LABEL_8;
    }
    v14 = 0;
    *a3 = 1;
LABEL_8:
    v7 = v14 == 0;
    sub_22F162AFC(*(_QWORD *)(a1 + 8));
    *(_OWORD *)(a1 + 48) = v22;
    *(_OWORD *)(a1 + 64) = v23;
    *(_OWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 32) = v21;
    sub_22E80FADC(a1 + 2336, v9);
    *(_WORD *)(a1 + 80) = v10;
    *(_WORD *)(a1 + 82) = v11;
    *(_WORD *)(a1 + 84) = v12;
    return v7;
  }
  return v6 != 1;
}

uint64_t sub_22E8836FC(uint64_t a1, char a2, uint64_t a3)
{
  int v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v15;
  __int128 v16;
  unint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  int v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unsigned int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[2];
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[27];

  v55[24] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 == 157)
    return 1;
  if (v3 != 19)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 2816);
  v9 = v8 >= *(unsigned int *)(v7 + 2784) ? sub_22F162D2C(v7, 1u) : *(_QWORD *)(v7 + 2776) + 24 * v8;
  if (*(_WORD *)(v9 + 16) != 19)
    return 0;
  if ((a2 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) == 0)
    return 1;
  v10 = (__int128 *)(a1 + 16);
  v11 = a1 + 16;
  if (*(_WORD *)(a1 + 32) != 1)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(v12 + 2816) + 1;
    if (v13 >= *(unsigned int *)(v12 + 2784))
      v11 = sub_22F162D2C(v12, 2u);
    else
      v11 = *(_QWORD *)(v12 + 2776) + 24 * v13;
  }
  if (*(_WORD *)(v11 + 16) == 154)
    return 1;
  v15 = (__int128 *)(a1 + 48);
  v16 = *(_OWORD *)(a1 + 64);
  v50 = *(_OWORD *)(a1 + 48);
  v51 = v16;
  v48 = *v10;
  v49 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned int *)(a1 + 2344);
  v18 = *(_WORD *)(a1 + 80);
  v19 = *(_WORD *)(a1 + 82);
  v20 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  sub_22E80F788(a1);
  v21 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v21 + 56) + 1) & 0x40) != 0)
  {
    v42 = v18;
    v22 = *(_OWORD *)(a1 + 64);
    v46 = *v15;
    v47 = v22;
    v44 = *v10;
    v45 = *(_QWORD *)(a1 + 32);
    v23 = *(unsigned int *)(a1 + 2344);
    v40 = *(_WORD *)(a1 + 82);
    v41 = *(_WORD *)(a1 + 80);
    v39 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(v21);
    v52[0] = 0;
    v52[1] = 0;
    v53 = v55;
    v54 = 0x400000000;
    v43 = 0;
    if ((sub_22E84396C(a1, (uint64_t)v52, (int *)&v43) & 1) != 0)
    {
LABEL_22:
      v24 = 0;
      a3 = 0;
      goto LABEL_32;
    }
    if (v43 >= 2)
    {
      if (v43 == 2)
        goto LABEL_22;
      v24 = 1;
    }
    else
    {
      v24 = 0;
      if ((_DWORD)a3)
        v25 = 0;
      else
        v25 = 2;
      if (*(_WORD *)(a1 + 32) == 20)
        a3 = 1;
      else
        a3 = v25;
    }
LABEL_32:
    if (v53 != v55)
      free(v53);
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD *)(v26 + 2832);
    *(_QWORD *)(v26 + 2816) = *(_QWORD *)(v27 - 8);
    *(_QWORD *)(v26 + 2832) = v27 - 8;
    v28 = *(_QWORD *)(v26 + 1008);
    if (v28)
    {
      if (*(_QWORD *)(v28 + 224))
        v38 = 3;
      else
        v38 = 0;
      *(_DWORD *)(v26 + 1048) = v38;
    }
    else
    {
      if (*(_QWORD *)(v26 + 1040))
        v29 = 1;
      else
        v29 = 2;
      *(_DWORD *)(v26 + 1048) = v29;
    }
    v30 = v47;
    *v15 = v46;
    *(_OWORD *)(a1 + 64) = v30;
    *v10 = v44;
    *(_QWORD *)(a1 + 32) = v45;
    sub_22E80FADC(a1 + 2336, v23);
    *(_WORD *)(a1 + 80) = v41;
    *(_WORD *)(a1 + 82) = v40;
    *(_WORD *)(a1 + 84) = v39;
    v18 = v42;
    if (v24)
    {
      sub_22E80F788(a1);
      while (1)
      {
        v31 = *(unsigned __int16 *)(a1 + 32);
        if (v31 == 20)
          goto LABEL_55;
        if (v31 == 65)
        {
          a3 = 1;
          goto LABEL_57;
        }
        LODWORD(v52[0]) = 0;
        if (!sub_22E834EA8(a1, v52, 2, 0))
          goto LABEL_56;
        v32 = *(unsigned __int16 *)(a1 + 32);
        if (v32 == 71)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (!sub_22E834EA8(a1, v52, 2, 0))
            goto LABEL_56;
          v32 = *(unsigned __int16 *)(a1 + 32);
        }
        if (v32 == 21)
        {
          sub_22E80F720(a1);
          LOWORD(v46) = 22;
          if (!sub_22E885940(a1, (unsigned __int16 *)&v46, 1, 0))
            goto LABEL_56;
          v32 = *(unsigned __int16 *)(a1 + 32);
        }
        if (v32 == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v32 = *(unsigned __int16 *)(a1 + 32);
        }
        if (v32 != 65)
          break;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      }
      if (v32 == 20)
      {
LABEL_55:
        sub_22E80F788(a1);
        a3 = *(unsigned __int16 *)(a1 + 32) == 20;
        goto LABEL_57;
      }
LABEL_56:
      a3 = 0;
    }
    goto LABEL_57;
  }
  sub_22E80F788(a1);
  LOWORD(v52[0]) = 20;
  if ((sub_22E885940(a1, (unsigned __int16 *)v52, 1, 0) & (*(_WORD *)(a1 + 32) == 20)) != 0)
    a3 = 1;
  else
    a3 = 2;
LABEL_57:
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(_QWORD *)(v33 + 2832);
  *(_QWORD *)(v33 + 2816) = *(_QWORD *)(v34 - 8);
  *(_QWORD *)(v33 + 2832) = v34 - 8;
  v35 = *(_QWORD *)(v33 + 1008);
  if (v35)
  {
    if (*(_QWORD *)(v35 + 224))
      v36 = 3;
    else
      v36 = 0;
  }
  else if (*(_QWORD *)(v33 + 1040))
  {
    v36 = 1;
  }
  else
  {
    v36 = 2;
  }
  *(_DWORD *)(v33 + 1048) = v36;
  v37 = v51;
  *v15 = v50;
  *(_OWORD *)(a1 + 64) = v37;
  *v10 = v48;
  *(_QWORD *)(a1 + 32) = v49;
  sub_22E80FADC(a1 + 2336, v17);
  *(_WORD *)(a1 + 80) = v18;
  *(_WORD *)(a1 + 82) = v19;
  *(_WORD *)(a1 + 84) = v20;
  return a3;
}

uint64_t sub_22E883BBC(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  BOOL v11;

  while (!sub_22E849D9C(a1) || (sub_22E88BDA8(a1, 1) & 1) == 0)
  {
    v2 = *(unsigned __int16 *)(a1 + 32);
    if (v2 == 399)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 2816);
      if (v7 >= *(unsigned int *)(v6 + 2784))
        v8 = sub_22F162D2C(v6, 1u);
      else
        v8 = *(_QWORD *)(v6 + 2776) + 24 * v7;
      if (*(_WORD *)(v8 + 16) != 30)
        return 0;
    }
    else
    {
      v3 = v2 > 0x37;
      v4 = (1 << v2) & 0x80000058000000;
      if (v3 || v4 == 0)
        return 0;
    }
    sub_22E80F0F0(a1, 0);
    if (!sub_22E882BD8(a1))
      return 3;
    while (1)
    {
      v10 = *(unsigned __int16 *)(a1 + 32);
      v11 = (v10 - 80) > 0x22 || ((1 << (v10 - 80)) & 0x440040001) == 0;
      if (v11 && (v10 - 367) >= 4)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
  }
  return 3;
}

BOOL sub_22E883CE0(uint64_t a1, _BYTE *a2)
{
  __int128 v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  __int128 v24;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v4 = *(_OWORD *)(a1 + 64);
  v29 = *(_OWORD *)(a1 + 48);
  v30 = v4;
  v27 = *(_OWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned int *)(a1 + 2344);
  v6 = *(_WORD *)(a1 + 80);
  v7 = *(_WORD *)(a1 + 82);
  v8 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  sub_22E80F720(a1);
  v26 = 0;
  v9 = sub_22E883ED8(a1, &v26, 0);
  if (v9 == 2)
  {
    if (*(_WORD *)(a1 + 32) == 22)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(v10 + 2816);
      if (v11 >= *(unsigned int *)(v10 + 2784))
        v12 = sub_22F162D2C(v10, 1u);
      else
        v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
      v9 = 0;
      v13 = *(unsigned __int16 *)(v12 + 16);
      if ((v13 - 19) > 0x3D || ((1 << (v13 - 19)) & 0x2000100000020311) == 0)
      {
        v15 = v13 - 110;
        v16 = v15 > 0x35;
        v17 = (1 << v15) & 0x20028000000001;
        if (v16 || v17 == 0)
        {
          if (sub_22E82F8E8((_QWORD *)a1, v12))
          {
            v9 = 0;
          }
          else
          {
            if (v26)
              v9 = 1;
            else
              v9 = 2;
            if (a2 && !v26)
            {
              *a2 = 1;
              v9 = 2;
            }
          }
        }
      }
    }
    else
    {
      v9 = 1;
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 2832);
  *(_QWORD *)(v19 + 2816) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v19 + 2832) = v20 - 8;
  v21 = *(_QWORD *)(v19 + 1008);
  if (v21)
  {
    if (*(_QWORD *)(v21 + 224))
      v22 = 3;
    else
      v22 = 0;
  }
  else if (*(_QWORD *)(v19 + 1040))
  {
    v22 = 1;
  }
  else
  {
    v22 = 2;
  }
  *(_DWORD *)(v19 + 1048) = v22;
  v23 = v9 != 1;
  v24 = v30;
  *(_OWORD *)(a1 + 48) = v29;
  *(_OWORD *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 16) = v27;
  *(_QWORD *)(a1 + 32) = v28;
  sub_22E80FADC(a1 + 2336, v5);
  *(_WORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 82) = v7;
  *(_WORD *)(a1 + 84) = v8;
  return v23;
}

uint64_t sub_22E883ED8(uint64_t a1, BOOL *a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v4 = *(unsigned __int16 *)(a1 + 32);
  if (v4 == 22)
    return 2;
  v17 = (unsigned int *)(a1 + 16);
  if (v4 == 26)
    goto LABEL_3;
  v18 = a1 + 960;
  do
  {
    if (sub_22E8836FC(a1, 0, 1))
      return 0;
    v19 = 0;
    v20 = 0;
    v21 = v18;
    v22 = 0;
    sub_22E8221D8((uint64_t *)a1, (uint64_t)&v19);
    v9 = 1;
    v10 = sub_22E881D88(a1, 1, a2);
    if ((_DWORD)v10)
      v11 = 0;
    else
      v11 = a3;
    if ((_DWORD)v10 != 2 && !v11)
    {
LABEL_11:
      v6 = v10;
      goto LABEL_12;
    }
    v12 = sub_22F2F0D0C(a1);
    if (sub_22E8829B4(a1) == 3)
    {
      v6 = 3;
      goto LABEL_12;
    }
    while (1)
    {
      if ((v12 & 1) != 0 && *(_WORD *)(a1 + 32) == 5)
      {
        v6 = 0;
        v9 = 1;
        goto LABEL_12;
      }
      v9 = 1;
      v13 = sub_22E881D88(a1, 1, a2);
      if ((_DWORD)v13)
        break;
      if ((a3 & 1) == 0)
        goto LABEL_28;
LABEL_21:
      v12 |= sub_22F2F0D0C(a1);
      v6 = 3;
      if (sub_22E8829B4(a1) == 3)
        goto LABEL_12;
    }
    v6 = v13;
    if ((_DWORD)v13 != 1)
    {
      if ((_DWORD)v13 == 3)
        goto LABEL_12;
      goto LABEL_21;
    }
    v10 = sub_22E882CE0(a1, 1, 1, 0);
    if ((_DWORD)v10 != 2)
      goto LABEL_11;
    v14 = *(unsigned __int16 *)(a1 + 32);
    if (v14 == 186)
    {
LABEL_28:
      v6 = 0;
      goto LABEL_12;
    }
    if (a3)
    {
      v15 = v14 == 63;
LABEL_38:
      v6 = !v15;
    }
    else
    {
      if (v14 == 63)
      {
        v23 = 1441857;
        v6 = 3;
        if (!sub_22E885940(a1, (unsigned __int16 *)&v23, 2, 3))
          goto LABEL_12;
        v14 = *(unsigned __int16 *)(a1 + 32);
      }
      if (v14 == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
        v9 = 0;
      }
      else
      {
        if (v14 == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
          v15 = *(unsigned __int16 *)(a1 + 32) == 22;
          goto LABEL_38;
        }
        v9 = 3;
      }
      v6 = v3;
    }
LABEL_12:
    sub_22E8D1BC4(v21, (uint64_t)&v21);
    sub_22E80F94C(&v22);
    sub_22E80F94C(&v20);
    if (v9)
    {
      if (v9 == 1)
        return v6;
      return 2;
    }
    v3 = v6;
  }
  while (*(_WORD *)(a1 + 32) != 26);
LABEL_3:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v17);
  return *(unsigned __int16 *)(a1 + 32) != 22;
}

void sub_22E884184()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E884198(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 16);
    if (*v5)
    {
      v6 = 8 * v4;
      while (sub_22EFBAEF8(*v5))
      {
        ++v5;
        v6 -= 8;
        if (!v6)
          return 0;
      }
    }
  }
  return sub_22EC6B6AC(a1, a2);
}

__n128 sub_22E88420C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAA53E0;
  *a2 = v4;
  return result;
}

uint64_t sub_22E884264(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t i;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (**v16)();
  _QWORD *v17;
  _QWORD *v18;
  void (**v19)(_QWORD *);
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24FAA5418;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_QWORD *)(a2 + 752) != 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 504) = 1;
  for (i = 512; i != 576; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 944) = 1;
  *(_DWORD *)(a1 + 945) = 0;
  *(_QWORD *)(a1 + 952) = 0x5500000000;
  sub_22F30677C((_QWORD *)(a1 + 960));
  *(_QWORD *)(a1 + 2192) = a1 + 2208;
  *(_QWORD *)(a1 + 2200) = 0x1000000000;
  *(_QWORD *)(a1 + 2336) = a1 + 2352;
  *(_QWORD *)(a1 + 2344) = 0x800000000;
  *(_QWORD *)(a1 + 2416) = a1 + 2432;
  *(_QWORD *)(a1 + 2424) = 0x800000000;
  *(_BYTE *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2628) = 0;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  if (*(_QWORD *)(a2 + 752))
    v9 = 1;
  else
    v9 = a4;
  *(_BYTE *)(a1 + 2625) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 2688) = 0;
  sub_22E861DB4((uint64_t *)a1);
  v10 = (_QWORD *)operator new();
  *v10 = &off_24FAA5470;
  v10[1] = a3;
  v11 = *(_QWORD *)(a1 + 936);
  *(_QWORD *)(a1 + 936) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v10 = *(_QWORD **)(a1 + 936);
  }
  v12 = *(_QWORD *)(a1 + 8);
  v21[0] = v10;
  v13 = *(_QWORD **)(v12 + 712);
  if ((unint64_t)v13 < *(_QWORD *)(v12 + 720))
  {
    *v13 = v10;
    v14 = v13 + 1;
  }
  else
  {
    v14 = sub_22E4A02B0((void **)(v12 + 704), v21);
  }
  *(_QWORD *)(v12 + 712) = v14;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 744) = a1;
  v15 = *(_QWORD **)(a1 + 88);
  v16 = &off_24FAA5498;
  v17 = v15 + 396;
  v21[0] = &off_24FAA5498;
  v21[1] = a1;
  v22 = v21;
  if (v15 + 396 == v21)
    goto LABEL_16;
  v18 = (_QWORD *)v15[399];
  if (v18 == v17)
  {
    v22 = 0;
    (*(void (**)(_QWORD *, _QWORD *))(v15[396] + 24))(v15 + 396, v21);
    (*(void (**)(_QWORD))(*(_QWORD *)v15[399] + 32))(v15[399]);
    v22 = v21;
    v15[396] = &off_24FAA5498;
    v15[397] = a1;
    v15[399] = v17;
    v16 = (uint64_t (**)())v21[0];
    goto LABEL_16;
  }
  v15[396] = &off_24FAA5498;
  v15[397] = a1;
  v22 = v18;
  v15[399] = v17;
  if (v18 == v21)
  {
LABEL_16:
    v19 = (void (**)(_QWORD *))(v16 + 4);
    v18 = v21;
    goto LABEL_17;
  }
  if (v18)
  {
    v19 = (void (**)(_QWORD *))(*v18 + 40);
LABEL_17:
    (*v19)(v18);
  }
  return a1;
}

uint64_t sub_22E88453C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v5 + 312) = a2;
  *(_DWORD *)(v5 + 316) = a3;
  if (*(char *)(v5 + 311) < 0)
  {
    **(_BYTE **)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 311) = 0;
  }
  return sub_22E78E558(a4, v5);
}

uint64_t sub_22E884578@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v7 + 312) = v6;
  *(_DWORD *)(v7 + 316) = a3;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  return sub_22E78E558(a4, v7);
}

uint64_t sub_22E8845B4(uint64_t a1, int a2, int a3, unint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36[3];
  __int16 v37;
  _QWORD v38[3];
  __int16 v39;

  v8 = sub_22F141A3C(HIDWORD(a4), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
  if ((a4 & 0x8000000000000000) != 0 || (v9 = v8) == 0)
  {
    v11 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v11 + 312) = a2;
    *(_DWORD *)(v11 + 316) = a3;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v38[0] = v11 + 320;
    v38[1] = 0;
    v38[2] = v11;
    v39 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v16 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(v11 + 768);
      v18 = 56 * v16;
      do
      {
        if (*(char *)(v17 + v18 - 9) < 0)
          operator delete(*(void **)(v17 + v18 - 32));
        v18 -= 56;
      }
      while (v18);
    }
    *(_DWORD *)(v11 + 776) = 0;
    v15 = v38;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v10 + 312) = a2;
    *(_DWORD *)(v10 + 316) = a3;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    v36[0] = v10 + 320;
    v36[1] = 0;
    v36[2] = v10;
    v37 = 1;
    *(_BYTE *)(v10 + 320) = 0;
    *(_DWORD *)(v10 + 664) = 0;
    v12 = *(unsigned int *)(v10 + 776);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(v10 + 768);
      v14 = 56 * v12;
      do
      {
        if (*(char *)(v13 + v14 - 9) < 0)
          operator delete(*(void **)(v13 + v14 - 32));
        v14 -= 56;
      }
      while (v14);
    }
    *(_DWORD *)(v10 + 776) = 0;
    v31 = 0;
    v30 = 0;
    v33 = 0;
    v34 = 0x100000000000000;
    v28 = a4 | ((unint64_t)a4 << 32);
    v29 = 0;
    v32 = (void *)40;
    v35 = 0;
    sub_22E6D82D0(v36, &v28);
    v23 = 0;
    v22 = 0;
    v25 = 0;
    v26 = 0x100000000000000;
    v20 = v9 | ((unint64_t)v9 << 32);
    v21 = 0;
    __p = (void *)41;
    v27 = 0;
    sub_22E6D82D0(v36, &v20);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    v15 = v36;
  }
  return sub_22E3BB0B8((uint64_t)v15);
}

uint64_t sub_22E8847B4(uint64_t a1, unsigned int a2, int a3, void *a4, size_t a5)
{
  int v6;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40[2];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  void *__p;
  __int16 v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;

  v6 = *(unsigned __int16 *)(a1 + 32);
  if (v6 == a2 || v6 == 3)
    goto LABEL_47;
  if (a2 != 62 || v6 != 65 && v6 != 61)
  {
    v14 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    if (v14 && (v32 = v14, (v33 = sub_22F43F6D8(a2)) != 0))
    {
      v34 = v33;
      v35 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v35 + 312) = v32;
      *(_DWORD *)(v35 + 316) = a3;
      if (*(char *)(v35 + 311) < 0)
      {
        **(_BYTE **)(v35 + 288) = 0;
        *(_QWORD *)(v35 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v35 + 288) = 0;
        *(_BYTE *)(v35 + 311) = 0;
      }
      v40[0] = v35 + 320;
      v40[1] = 0;
      v41 = v35;
      v42 = 1;
      *(_BYTE *)(v35 + 320) = 0;
      *(_DWORD *)(v35 + 664) = 0;
      v36 = *(unsigned int *)(v35 + 776);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(v35 + 768);
        v38 = 56 * v36;
        do
        {
          if (*(char *)(v37 + v38 - 9) < 0)
            operator delete(*(void **)(v37 + v38 - 32));
          v38 -= 56;
        }
        while (v38);
      }
      *(_DWORD *)(v35 + 776) = 0;
      v39 = strlen(v34);
      sub_22E729148(v34, v39, v32, 0, (uint64_t)&v43);
      sub_22E6D82D0(v40, &v43);
      v16 = (unsigned __int8 *)v40[0];
      v50 = 0;
      v51 = v41;
      v49 = (unsigned __int8 *)v40[0];
      v52 = v42;
      v41 = 0;
      v42 = 0;
      if ((char)v48 < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)v40);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v15 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v15 + 316) = a3;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      v16 = (unsigned __int8 *)(v15 + 320);
      v49 = (unsigned __int8 *)(v15 + 320);
      v50 = 0;
      v51 = v15;
      v52 = 1;
      *(_BYTE *)(v15 + 320) = 0;
      *(_DWORD *)(v15 + 664) = 0;
      v17 = *(unsigned int *)(v15 + 776);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v15 + 768);
        v19 = 56 * v17;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
      }
      *(_DWORD *)(v15 + 776) = 0;
    }
    if (a3 == 16)
    {
      sub_22E3B89A8(&v49, a4, a5);
      v22 = v49;
      if (!v49)
      {
        v22 = (unsigned __int8 *)sub_22E3B8AAC(v50);
        v49 = v22;
      }
      v20 = a2;
      v21 = &v22[*v22];
    }
    else
    {
      if (a3 != 15)
      {
        sub_22E3B89A8(&v49, a4, a5);
        goto LABEL_30;
      }
      if (!v16)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(0);
        v49 = v16;
      }
      v20 = a2;
      v21 = &v16[*v16];
    }
    v21[1] = 4;
    v23 = v49;
    v24 = *v49;
    *v49 = v24 + 1;
    *(_QWORD *)&v23[8 * v24 + 16] = v20;
LABEL_30:
    sub_22E3BB0B8((uint64_t)&v49);
    return 1;
  }
  v12 = *(unsigned int *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v13 + 312) = v12;
  *(_DWORD *)(v13 + 316) = a3;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  v49 = (unsigned __int8 *)(v13 + 320);
  v50 = 0;
  v51 = v13;
  v52 = 1;
  *(_BYTE *)(v13 + 320) = 0;
  *(_DWORD *)(v13 + 664) = 0;
  v26 = *(unsigned int *)(v13 + 776);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(v13 + 768);
    v28 = 56 * v26;
    do
    {
      if (*(char *)(v27 + v28 - 9) < 0)
        operator delete(*(void **)(v27 + v28 - 32));
      v28 -= 56;
    }
    while (v28);
  }
  *(_DWORD *)(v13 + 776) = 0;
  v46 = 0;
  v45 = 0;
  v43 = v12 | (v12 << 32);
  v44 = 1;
  LOWORD(__p) = 59;
  v48 = 1;
  sub_22E6D82D0((uint64_t *)&v49, &v43);
  if ((char)v48 < 0)
    operator delete(__p);
  if (a3 == 16)
  {
    sub_22E3B89A8(&v49, a4, a5);
    goto LABEL_43;
  }
  if (a3 == 15)
  {
LABEL_43:
    v29 = v49;
    if (!v49)
    {
      v29 = (unsigned __int8 *)sub_22E3B8AAC(v50);
      v49 = v29;
    }
    v29[*v29 + 1] = 4;
    v30 = v49;
    v31 = *v49;
    *v49 = v31 + 1;
    *(_QWORD *)&v30[8 * v31 + 16] = 62;
    goto LABEL_46;
  }
  sub_22E3B89A8(&v49, a4, a5);
LABEL_46:
  sub_22E3BB0B8((uint64_t)&v49);
LABEL_47:
  sub_22E80F0F0(a1, 0);
  return 0;
}

uint64_t sub_22E884BB4(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25[2];
  char v26;
  unsigned __int8 *v27[3];
  __int16 v28;

  v4 = (unsigned int *)(a1 + 16);
  v5 = *(unsigned __int16 *)(a1 + 32);
  if (v5 > 0x15)
  {
    if (v5 != 22)
    {
      if (v5 != 62)
        return sub_22E8847B4(a1, 0x3Eu, a2, "", 0);
      goto LABEL_31;
    }
LABEL_6:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(v6 + 2816);
    if (v7 >= *(unsigned int *)(v6 + 2784))
      v8 = sub_22F162D2C(v6, 1u);
    else
      v8 = *(_QWORD *)(v6 + 2776) + 24 * v7;
    if (*(_WORD *)(v8 + 16) != 62)
      return sub_22E8847B4(a1, 0x3Eu, a2, "", 0);
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v9 + 316) = 1555;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    v27[0] = (unsigned __int8 *)(v9 + 320);
    v27[1] = 0;
    v27[2] = (unsigned __int8 *)v9;
    v28 = 1;
    *(_BYTE *)(v9 + 320) = 0;
    *(_DWORD *)(v9 + 664) = 0;
    v11 = *(unsigned int *)(v9 + 776);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v9 + 768);
      v13 = 56 * v11;
      do
      {
        if (*(char *)(v12 + v13 - 9) < 0)
          operator delete(*(void **)(v12 + v13 - 32));
        v13 -= 56;
      }
      while (v13);
    }
    *(_DWORD *)(v9 + 776) = 0;
    sub_22F1413E0((uint64_t)v4, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)v25);
    if (v26 >= 0)
      v14 = v25;
    else
      v14 = (void **)v25[0];
    if (v26 >= 0)
      v15 = v26 & 0x7F;
    else
      v15 = (size_t)v25[1];
    sub_22E3B89A8(v27, v14, v15);
    v16 = *(unsigned int *)(a1 + 16);
    v19 = 0;
    v20 = 0;
    v22 = 0;
    v23 = 0;
    __p = 0;
    v24 = 0;
    v17 = v16 | (v16 << 32);
    v18 = 1;
    sub_22E6D82D0((uint64_t *)v27, &v17);
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
    if (v26 < 0)
      operator delete(v25[0]);
    sub_22E3BB0B8((uint64_t)v27);
    sub_22E80F0F0(a1, 0);
LABEL_31:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    return 0;
  }
  if (v5 == 20)
    goto LABEL_6;
  if (v5 != 3)
    return sub_22E8847B4(a1, 0x3Eu, a2, "", 0);
  sub_22F2F124C(a1);
  return 0;
}

uint64_t sub_22E884DD8(uint64_t result, int a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  if (*(_WORD *)(result + 32) != 62)
    return result;
  v5 = result;
  v6 = (unsigned int *)(result + 16);
  v7 = *(unsigned int *)(result + 16);
  *(_DWORD *)(result + 40) = v7;
  sub_22F18FB4C(*(_QWORD *)(result + 8), (unsigned int *)(result + 16));
  if (*(_WORD *)(v5 + 32) != 62 || (*(_WORD *)(v5 + 34) & 1) != 0)
  {
    v9 = 0;
    v8 = v7;
    if (!a2)
      goto LABEL_7;
LABEL_12:
    v12 = v9 ^ 1;
    if (a2 != 3)
      v12 = 0;
    if ((v12 & 1) != 0)
    {
      v11 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v11 + 312) = v7;
      *(_DWORD *)(v11 + 316) = 1955;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v38 = v11 + 320;
      v39 = 0;
      v40 = v11;
      v41 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v13 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(v11 + 768);
        v15 = 56 * v13;
        do
        {
          if (*(char *)(v14 + v15 - 9) < 0)
            operator delete(*(void **)(v14 + v15 - 32));
          v15 -= 56;
        }
        while (v15);
      }
      goto LABEL_32;
    }
LABEL_45:
    v23 = *(_QWORD *)(v5 + 96);
    *(_DWORD *)(v23 + 312) = v7;
    *(_DWORD *)(v23 + 316) = 1818;
    if (*(char *)(v23 + 311) < 0)
    {
      **(_BYTE **)(v23 + 288) = 0;
      *(_QWORD *)(v23 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v23 + 288) = 0;
      *(_BYTE *)(v23 + 311) = 0;
    }
    v24 = 0;
    v38 = v23 + 320;
    v39 = 0;
    v40 = v23;
    v41 = 1;
    *(_BYTE *)(v23 + 320) = 0;
    *(_DWORD *)(v23 + 664) = 0;
    v25 = *(unsigned int *)(v23 + 776);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(v23 + 768);
      v27 = 56 * v25;
      do
      {
        if (*(char *)(v26 + v27 - 9) < 0)
          operator delete(*(void **)(v26 + v27 - 32));
        v27 -= 56;
      }
      while (v27);
      v24 = *(unsigned __int8 *)(v23 + 320);
    }
    *(_DWORD *)(v23 + 776) = 0;
    *(_BYTE *)(v23 + 321 + v24) = 2;
    v28 = v24 + 1;
    *(_BYTE *)(v23 + 320) = v24 + 1;
    *(_QWORD *)(v23 + 336 + 8 * v24) = a2;
    v29 = sub_22F2F2CB0(a3);
    *(_BYTE *)(v23 + 321 + v28) = 1;
    *(_BYTE *)(v23 + 320) = v24 + 2;
    *(_QWORD *)(v23 + 336 + 8 * v28) = v29;
    v33 = 0;
    v32 = 0;
    v35 = 0;
    v36 = 0;
    __p = 0;
    v37 = 0;
    v30 = v7 | (v8 << 32);
    v31 = 1;
    goto LABEL_34;
  }
  do
  {
    v8 = *(unsigned int *)(v5 + 16);
    *(_DWORD *)(v5 + 40) = v8;
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
  }
  while (*(_WORD *)(v5 + 32) == 62 && (*(_WORD *)(v5 + 34) & 1) == 0);
  v9 = 1;
  if (a2)
    goto LABEL_12;
LABEL_7:
  v10 = **(_QWORD **)(*(_QWORD *)(v5 + 8) + 56);
  if ((v10 & 0x100) == 0)
    goto LABEL_45;
  if ((v10 & 0x200) != 0)
  {
    v16 = *(_QWORD *)(v5 + 96);
    *(_DWORD *)(v16 + 312) = v7;
    *(_DWORD *)(v16 + 316) = 1945;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    v38 = v16 + 320;
    v39 = 0;
    v40 = v16;
    v41 = 1;
    *(_BYTE *)(v16 + 320) = 0;
    *(_DWORD *)(v16 + 664) = 0;
    v20 = *(unsigned int *)(v16 + 776);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v16 + 768);
      v22 = 56 * v20;
      do
      {
        if (*(char *)(v21 + v22 - 9) < 0)
          operator delete(*(void **)(v21 + v22 - 32));
        v22 -= 56;
      }
      while (v22);
    }
    *(_DWORD *)(v16 + 776) = 0;
    goto LABEL_33;
  }
  v11 = *(_QWORD *)(v5 + 96);
  *(_DWORD *)(v11 + 312) = v7;
  *(_DWORD *)(v11 + 316) = 1819;
  if (*(char *)(v11 + 311) < 0)
  {
    **(_BYTE **)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v11 + 288) = 0;
    *(_BYTE *)(v11 + 311) = 0;
  }
  v38 = v11 + 320;
  v39 = 0;
  v40 = v11;
  v41 = 1;
  *(_BYTE *)(v11 + 320) = 0;
  *(_DWORD *)(v11 + 664) = 0;
  v17 = *(unsigned int *)(v11 + 776);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(v11 + 768);
    v19 = 56 * v17;
    do
    {
      if (*(char *)(v18 + v19 - 9) < 0)
        operator delete(*(void **)(v18 + v19 - 32));
      v19 -= 56;
    }
    while (v19);
  }
LABEL_32:
  *(_DWORD *)(v11 + 776) = 0;
LABEL_33:
  v33 = 0;
  v32 = 0;
  v35 = 0;
  v36 = 0;
  __p = 0;
  v37 = 0;
  v30 = v7 | (v8 << 32);
  v31 = 1;
LABEL_34:
  sub_22E6D82D0(&v38, &v30);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  return sub_22E3BB0B8((uint64_t)&v38);
}

uint64_t sub_22E88517C(uint64_t a1)
{
  int v1;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  v1 = *(unsigned __int16 *)(a1 + 32);
  if (v1 == 5)
    return 0;
  if ((v1 - 7) >= 6 && (v1 - 13) >= 6 && v1 != 1)
  {
    v11 = *(_DWORD **)(a1 + 24);
    if (v11)
    {
      if (sub_22F41F21C(v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))
      {
        v12 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v12 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v12 + 316) = 1541;
        if (*(char *)(v12 + 311) < 0)
        {
          **(_BYTE **)(v12 + 288) = 0;
          *(_QWORD *)(v12 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v12 + 288) = 0;
          *(_BYTE *)(v12 + 311) = 0;
        }
        v13 = (unsigned __int8 *)(v12 + 320);
        v20 = v12 + 320;
        v21 = 0;
        v22 = v12;
        v23 = 1;
        *(_BYTE *)(v12 + 320) = 0;
        *(_DWORD *)(v12 + 664) = 0;
        v14 = *(unsigned int *)(v12 + 776);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v12 + 768);
          v16 = 56 * v14;
          do
          {
            if (*(char *)(v15 + v16 - 9) < 0)
              operator delete(*(void **)(v15 + v16 - 32));
            v16 -= 56;
          }
          while (v16);
          LODWORD(v14) = *v13;
        }
        *(_DWORD *)(v12 + 776) = 0;
        v13[v14 + 1] = 4;
        v17 = v14 + 1;
        *(_QWORD *)&v13[8 * v14 + 16] = 5;
        v18 = *(unsigned __int16 *)(a1 + 32);
        if ((v18 - 7) >= 6)
        {
          v19 = 0;
          if ((v18 - 13) >= 6 && v18 != 1)
            v19 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v19 = 0;
        }
        *(_BYTE *)(v12 + 320 + v17 + 1) = 5;
        *(_BYTE *)(v12 + 320) = v14 + 2;
        *(_QWORD *)(v12 + 320 + 8 * v17 + 16) = v19;
        sub_22E3BB0B8((uint64_t)&v20);
        return 0;
      }
    }
  }
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v6 + 312) = v5;
  *(_DWORD *)(v6 + 316) = 15;
  if (*(char *)(v6 + 311) < 0)
  {
    **(_BYTE **)(v6 + 288) = 0;
    *(_QWORD *)(v6 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v6 + 288) = 0;
    *(_BYTE *)(v6 + 311) = 0;
  }
  v7 = (unsigned __int8 *)(v6 + 320);
  v20 = v6 + 320;
  v21 = 0;
  v22 = v6;
  v23 = 1;
  *(_BYTE *)(v6 + 320) = 0;
  *(_DWORD *)(v6 + 664) = 0;
  v8 = *(unsigned int *)(v6 + 776);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(v6 + 768);
    v10 = 56 * v8;
    do
    {
      if (*(char *)(v9 + v10 - 9) < 0)
        operator delete(*(void **)(v9 + v10 - 32));
      v10 -= 56;
    }
    while (v10);
    LODWORD(v8) = *v7;
  }
  *(_DWORD *)(v6 + 776) = 0;
  v7[v8 + 1] = 4;
  *(_BYTE *)(v6 + 320) = v8 + 1;
  *(_QWORD *)&v7[8 * v8 + 16] = 5;
  sub_22E3BB0B8((uint64_t)&v20);
  return 1;
}

uint64_t sub_22E8853B0(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;

  if (a2)
  {
    v7 = result;
    v8 = *(unsigned int *)(result + 16);
    if ((a2 & 0x80000000) == 0 && (v8 & 0x80000000) == 0)
      goto LABEL_41;
    v9 = *(_QWORD *)(*(_QWORD *)(result + 8) + 88);
    v10 = a2 & 0x7FFFFFFF;
    v11 = *(_DWORD *)(v9 + 304);
    v12 = v11 + 1;
    if (v11 + 1 > 1)
    {
      if ((v11 & 0x80000000) != 0)
      {
        v14 = -2 - v11;
        v13 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-2 - v11) >> 6)) >> (-2 - v11)) & 1) != 0
                       ? *(_QWORD *)(v9 + 200) + 24 * v14
                       : sub_22F1E1134(*(_QWORD *)(*(_QWORD *)(result + 8) + 88), v14, 0));
      }
      else
      {
        v13 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v11);
      }
    }
    else
    {
      v13 = *(_DWORD **)(v9 + 184);
    }
    if ((*v13 & 0x7FFFFFFFu) > v10)
      goto LABEL_11;
    if (v11 == -2
      || (v12 != *(_DWORD *)(v9 + 192)
        ? ((v12 & 0x80000000) != 0
         ? ((v18 = -3 - v11,
             ((*(_QWORD *)(*(_QWORD *)(v9 + 224) + 8 * ((-3 - v11) >> 6)) >> (-3 - v11)) & 1) == 0)
          ? (v17 = (_DWORD *)sub_22F1E1134(v9, v18, 0))
          : (v17 = (_DWORD *)(*(_QWORD *)(v9 + 200) + 24 * v18)))
         : (v17 = (_DWORD *)(*(_QWORD *)(v9 + 184) + 24 * v12)),
           v16 = *v17 & 0x7FFFFFFF)
        : (v16 = *(_DWORD *)(v9 + 216)),
          v16 > v10))
    {
      v15 = *(_DWORD *)(v9 + 304);
    }
    else
    {
LABEL_11:
      v15 = sub_22F1E1EE8(v9, a2 & 0x7FFFFFFF);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 88);
    v20 = v8 & 0x7FFFFFFF;
    v21 = *(_DWORD *)(v19 + 304);
    v22 = v21 + 1;
    if (v21 + 1 > 1)
    {
      if ((v21 & 0x80000000) != 0)
      {
        v24 = -2 - v21;
        v23 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v19 + 224) + 8 * ((-2 - v21) >> 6)) >> (-2 - v21)) & 1) != 0
                       ? *(_QWORD *)(v19 + 200) + 24 * v24
                       : sub_22F1E1134(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 88), v24, 0));
      }
      else
      {
        v23 = (_DWORD *)(*(_QWORD *)(v19 + 184) + 24 * v21);
      }
    }
    else
    {
      v23 = *(_DWORD **)(v19 + 184);
    }
    if ((*v23 & 0x7FFFFFFFu) > v20)
      goto LABEL_29;
    if (v21 == -2
      || (v22 != *(_DWORD *)(v19 + 192)
        ? ((v22 & 0x80000000) != 0
         ? ((v27 = -3 - v21,
             ((*(_QWORD *)(*(_QWORD *)(v19 + 224) + 8 * ((-3 - v21) >> 6)) >> (-3 - v21)) & 1) == 0)
          ? (v26 = (_DWORD *)sub_22F1E1134(v19, v27, 0))
          : (v26 = (_DWORD *)(*(_QWORD *)(v19 + 200) + 24 * v27)))
         : (v26 = (_DWORD *)(*(_QWORD *)(v19 + 184) + 24 * v22)),
           v25 = *v26 & 0x7FFFFFFF)
        : (v25 = *(_DWORD *)(v19 + 216)),
          v25 > v20))
    {
      result = *(unsigned int *)(v19 + 304);
    }
    else
    {
LABEL_29:
      result = sub_22F1E1EE8(v19, v8 & 0x7FFFFFFF);
    }
    if (v15 != (_DWORD)result)
    {
      v32 = *(_QWORD *)(v7 + 96);
      *(_DWORD *)(v32 + 312) = a2;
      *(_DWORD *)(v32 + 316) = 1895;
      if (*(char *)(v32 + 311) < 0)
      {
        **(_BYTE **)(v32 + 288) = 0;
        *(_QWORD *)(v32 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v32 + 288) = 0;
        *(_BYTE *)(v32 + 311) = 0;
      }
      v60 = v32 + 320;
      v61 = 0;
      v62 = v32;
      v63 = 1;
      *(_BYTE *)(v32 + 320) = 0;
      *(_DWORD *)(v32 + 664) = 0;
      v44 = *(unsigned int *)(v32 + 776);
      if ((_DWORD)v44)
      {
        v45 = *(_QWORD *)(v32 + 768);
        v46 = 56 * v44;
        do
        {
          if (*(char *)(v45 + v46 - 9) < 0)
            operator delete(*(void **)(v45 + v46 - 32));
          v46 -= 56;
        }
        while (v46);
        LODWORD(v44) = *(unsigned __int8 *)(v32 + 320);
      }
      *(_DWORD *)(v32 + 776) = 0;
      v47 = *(unsigned __int16 *)(v7 + 32) == a3;
      v48 = v32 + 321;
      *(_BYTE *)(v32 + 321 + v44) = 2;
      *(_QWORD *)(v32 + 336 + 8 * v44) = v47;
      v49 = (v44 + 1);
      *(_BYTE *)(v48 + v49) = 4;
      *(_QWORD *)(v32 + 336 + 8 * v49) = a3;
      v50 = *(unsigned __int16 *)(v7 + 32);
      v51 = (v44 + 2);
      *(_BYTE *)(v48 + v51) = 4;
      *(_QWORD *)(v32 + 336 + 8 * v51) = v50;
      v52 = (v44 + 3);
      *(_BYTE *)(v48 + v52) = 2;
      *(_BYTE *)(v32 + 320) = v44 + 4;
      *(_QWORD *)(v32 + 336 + 8 * v52) = a4;
      sub_22E4D6448(v32 + 656, a2 | ((unint64_t)a2 << 32), 1);
      sub_22E3BB0B8((uint64_t)&v60);
      v53 = *(_QWORD *)(v7 + 96);
      *(_DWORD *)(v53 + 312) = v8;
      *(_DWORD *)(v53 + 316) = 1862;
      if (*(char *)(v53 + 311) < 0)
      {
        **(_BYTE **)(v53 + 288) = 0;
        *(_QWORD *)(v53 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v53 + 288) = 0;
        *(_BYTE *)(v53 + 311) = 0;
      }
      v60 = v53 + 320;
      v61 = 0;
      v62 = v53;
      v63 = 1;
      *(_BYTE *)(v53 + 320) = 0;
      *(_DWORD *)(v53 + 664) = 0;
      v54 = *(unsigned int *)(v53 + 776);
      if ((_DWORD)v54)
      {
        v55 = *(_QWORD *)(v53 + 768);
        v56 = 56 * v54;
        do
        {
          if (*(char *)(v55 + v56 - 9) < 0)
            operator delete(*(void **)(v55 + v56 - 32));
          v56 -= 56;
        }
        while (v56);
        LODWORD(v54) = *(unsigned __int8 *)(v53 + 320);
      }
      *(_DWORD *)(v53 + 776) = 0;
      v57 = *(unsigned __int16 *)(v7 + 32) == a3;
      *(_BYTE *)(v53 + 321 + v54) = 2;
      *(_QWORD *)(v53 + 336 + 8 * v54) = v57;
      v58 = *(unsigned __int16 *)(v7 + 32);
      v59 = (v54 + 1);
      *(_BYTE *)(v53 + 321 + v59) = 4;
      *(_BYTE *)(v53 + 320) = v54 + 2;
      *(_QWORD *)(v53 + 336 + 8 * v59) = v58;
      v42 = v8 | (v8 << 32);
      v43 = v53 + 656;
    }
    else
    {
LABEL_41:
      if ((*(_WORD *)(v7 + 34) & 3) == 0)
        return result;
      v28 = a2;
      v29 = sub_22F141A3C(a2, 0, *(_QWORD **)(*(_QWORD *)(v7 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v7 + 8) + 56));
      if (v29)
        v30 = v29;
      else
        v30 = a2;
      v31 = *(_QWORD *)(v7 + 96);
      *(_DWORD *)(v31 + 312) = v30;
      *(_DWORD *)(v31 + 316) = 1896;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      v60 = v31 + 320;
      v61 = 0;
      v62 = v31;
      v63 = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v33 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD *)(v31 + 768);
        v35 = 56 * v33;
        do
        {
          if (*(char *)(v34 + v35 - 9) < 0)
            operator delete(*(void **)(v34 + v35 - 32));
          v35 -= 56;
        }
        while (v35);
        LODWORD(v33) = *(unsigned __int8 *)(v31 + 320);
      }
      *(_DWORD *)(v31 + 776) = 0;
      v36 = *(unsigned __int16 *)(v7 + 32) == a3;
      v37 = v31 + 321;
      *(_BYTE *)(v31 + 321 + v33) = 2;
      *(_QWORD *)(v31 + 336 + 8 * v33) = v36;
      v38 = (v33 + 1);
      *(_BYTE *)(v37 + v38) = 4;
      *(_QWORD *)(v31 + 336 + 8 * v38) = a3;
      v39 = *(unsigned __int16 *)(v7 + 32);
      v40 = (v33 + 2);
      *(_BYTE *)(v37 + v40) = 4;
      *(_QWORD *)(v31 + 336 + 8 * v40) = v39;
      v41 = (v33 + 3);
      *(_BYTE *)(v37 + v41) = 2;
      *(_BYTE *)(v31 + 320) = v33 + 4;
      *(_QWORD *)(v31 + 336 + 8 * v41) = a4;
      v42 = v28 | (v8 << 32);
      v43 = v31 + 656;
    }
    sub_22E4D6448(v43, v42, 1);
    return sub_22E3BB0B8((uint64_t)&v60);
  }
  return result;
}

uint64_t sub_22E885940(uint64_t a1, unsigned __int16 *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  uint64_t result;
  __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;

  v8 = a3;
  v9 = a4 & 5;
  v10 = (unsigned int *)(a1 + 16);
  v11 = 1;
  while (1)
  {
    if (v8)
    {
      v12 = v8;
      v13 = a2;
      while (1)
      {
        v14 = *v13++;
        if (*(unsigned __int16 *)(a1 + 32) == v14)
          break;
        if (!--v12)
          goto LABEL_6;
      }
      if ((a4 & 2) == 0)
        sub_22E80F0F0(a1, 0);
      return 1;
    }
LABEL_6:
    if (a3 == 1)
      break;
    v15 = *(unsigned __int16 *)(a1 + 32);
LABEL_11:
    result = 0;
    if (v15 > 59)
    {
      if (v15 <= 427)
      {
        if (v15 == 60)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
          v27 = 61;
          v17 = &v27;
          v19 = a1;
          v20 = v9;
          goto LABEL_44;
        }
        if (v15 == 62 && (a4 & 1) != 0)
          return 0;
LABEL_46:
        sub_22E80F0F0(a1, 0);
        v11 = 0;
      }
      else
      {
        if ((v15 - 428) >= 3)
        {
          if ((v15 - 436) < 3)
            return result;
          goto LABEL_46;
        }
        if (*(_BYTE *)(a1 + 946))
          return 0;
        v18 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v18 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v18;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
        v11 = 0;
      }
    }
    else
    {
      switch(v15)
      {
        case 19:
          sub_22E80F788(a1);
          if ((a4 & 4) == 0)
          {
            v24 = 20;
            v17 = &v24;
            goto LABEL_33;
          }
          v23 = 20;
          v17 = &v23;
          goto LABEL_43;
        case 20:
          if (((*(_WORD *)(a1 + 82) != 0) & ~v11) != 0)
            return 0;
          sub_22E80F788(a1);
          v11 = 0;
          continue;
        case 21:
          sub_22E80F720(a1);
          if ((a4 & 4) == 0)
          {
            v22 = 22;
            v17 = &v22;
            goto LABEL_33;
          }
          v21 = 22;
          v17 = &v21;
          goto LABEL_43;
        case 22:
          if (((*(_WORD *)(a1 + 80) != 0) & ~v11) != 0)
            return 0;
          sub_22E80F720(a1);
          v11 = 0;
          continue;
        case 23:
          sub_22E80CED8(a1);
          if ((a4 & 4) != 0)
          {
            v25 = 24;
            v17 = &v25;
LABEL_43:
            v19 = a1;
            v20 = 4;
          }
          else
          {
            v26 = 24;
            v17 = &v26;
LABEL_33:
            v19 = a1;
            v20 = 0;
          }
          break;
        case 24:
          if (((*(_WORD *)(a1 + 84) != 0) & ~v11) != 0)
            return 0;
          sub_22E80CED8(a1);
          v11 = 0;
          continue;
        default:
          if (v15 == 1)
            return result;
          if (v15 != 3)
            goto LABEL_46;
          if ((a4 & 4) == 0)
            sub_22F2F124C(a1);
          return 0;
      }
LABEL_44:
      sub_22E885940(v19, v17, 1, v20);
      v11 = 0;
    }
  }
  v15 = *(unsigned __int16 *)(a1 + 32);
  if ((_DWORD)v9 || *a2 != 1)
    goto LABEL_11;
  if (v15 == 1)
    return 1;
  do
  {
    sub_22E80F0F0(a1, 0);
    result = 1;
  }
  while (*(_WORD *)(a1 + 32) != 1);
  return result;
}

void sub_22E885C30(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 104);
  if (v4)
  {
    v5 = v4 - 1;
    *(_DWORD *)(a1 + 104) = v5;
    v6 = *(_QWORD *)(a1 + 8 * v5 + 112);
    v7 = (_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
    v9 = v6;
  }
  else
  {
    v9 = operator new();
    v6 = v9;
    v10 = *(_QWORD *)(a1 + 88);
    v7 = (_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(v10 + 12888);
    v11 = v7[1];
    *(_QWORD *)(v9 + 72) = v9 + 104;
    *(_QWORD *)(v9 + 80) = v9 + 104;
    *(_QWORD *)(v9 + 88) = 32;
    *(_DWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 368) = v9 + 384;
    *(_QWORD *)(v9 + 376) = 0x200000000;
    *(_QWORD *)(v9 + 400) = v11;
    *(_QWORD *)(v9 + 408) = *(_QWORD *)(v11 + 172);
    *(_QWORD *)(v9 + 416) = 0;
  }
  sub_22E8FB978(v9, v8, a2);
  *(_QWORD *)(*v7 + 12888) = v6;
}

void sub_22E885CF4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;

  sub_22EA060B8(*(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD **)(v2 + 12888);
  *(_QWORD *)(v2 + 12888) = *v3;
  v4 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v4 == 16)
  {
    v5 = (_QWORD *)v3[46];
    if (v5 != v3 + 48)
      free(v5);
    v6 = (void *)v3[10];
    if (v6 != (void *)v3[9])
      free(v6);
    JUMPOUT(0x2348A0E9CLL);
  }
  *(_DWORD *)(a1 + 104) = v4 + 1;
  *(_QWORD *)(a1 + 8 * v4 + 112) = v3;
}

uint64_t sub_22E885D90(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5;

  if ((a4 & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 12888);
    *(_QWORD *)a1 = v5;
    if (v5)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v5 + 8);
      sub_22E8FB7FC(v5, *(_QWORD *)v5, a3);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

uint64_t sub_22E885DDC(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  if (v2)
    sub_22E8FB7FC((uint64_t)v2, *v2, *(_DWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_22E885E10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int *v17;
  void **v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  *(_QWORD *)a1 = &off_24FAA5418;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = v2 + 396;
  v4 = (_QWORD *)v2[399];
  v2[399] = 0;
  if (v4 == v2 + 396)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
  v2 = *(_QWORD **)(a1 + 88);
LABEL_6:
  v6 = (_QWORD *)v2[1611];
  if (v6)
  {
    v7 = (_QWORD *)v6[46];
    if (v7 != v6 + 48)
      free(v7);
    v8 = (void *)v6[10];
    if (v8 != (void *)v6[9])
      free(v8);
    MEMORY[0x2348A0E9C](v6, 0x10E0C40EAD4166DLL);
    v2 = *(_QWORD **)(a1 + 88);
  }
  v2[1611] = 0;
  v9 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)(a1 + 112);
    do
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        v12 = (_QWORD *)v11[46];
        if (v12 != v11 + 48)
          free(v12);
        v13 = (void *)v11[10];
        if (v13 != (void *)v11[9])
          free(v13);
        MEMORY[0x2348A0E9C](v11, 0x10E0C40EAD4166DLL);
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  sub_22F2ED704((uint64_t *)a1);
  sub_22F4186B4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 936));
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 744) = 0;
  v14 = *(unsigned int *)(a1 + 2200);
  if ((_DWORD)v14)
  {
    v15 = *(unsigned int ***)(a1 + 2192);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      sub_22E886514(v17);
      v16 -= 8;
    }
    while (v16);
  }
  *(_DWORD *)(a1 + 2200) = 0;
  v18 = *(void ***)(a1 + 2648);
  v19 = *(void ***)(a1 + 2656);
  *(_QWORD *)(a1 + 2680) = 0;
  v20 = (char *)v19 - (char *)v18;
  if ((unint64_t)((char *)v19 - (char *)v18) >= 0x11)
  {
    do
    {
      operator delete(*v18);
      v18 = (void **)(*(_QWORD *)(a1 + 2648) + 8);
      *(_QWORD *)(a1 + 2648) = v18;
      v19 = *(void ***)(a1 + 2656);
      v20 = (char *)v19 - (char *)v18;
    }
    while ((unint64_t)((char *)v19 - (char *)v18) > 0x10);
  }
  v21 = v20 >> 3;
  if (v21 == 1)
  {
    v22 = 256;
    goto LABEL_30;
  }
  if (v21 == 2)
  {
    v22 = 512;
LABEL_30:
    *(_QWORD *)(a1 + 2672) = v22;
  }
  if (v18 != v19)
  {
    do
    {
      v23 = *v18++;
      operator delete(v23);
    }
    while (v18 != v19);
    v24 = *(_QWORD *)(a1 + 2648);
    v25 = *(_QWORD *)(a1 + 2656);
    if (v25 != v24)
      *(_QWORD *)(a1 + 2656) = v25 + ((v24 - v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v26 = *(void **)(a1 + 2640);
  if (v26)
    operator delete(v26);
  v27 = *(void **)(a1 + 2416);
  if (v27 != (void *)(a1 + 2432))
    free(v27);
  v28 = *(void **)(a1 + 2336);
  if (v28 != (void *)(a1 + 2352))
    free(v28);
  v29 = *(void **)(a1 + 2192);
  if (v29 != (void *)(a1 + 2208))
    free(v29);
  sub_22E8FB19C((char **)(a1 + 1056));
  sub_22E3B4EF4(a1 + 960);
  v30 = *(_QWORD *)(a1 + 936);
  *(_QWORD *)(a1 + 936) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 928) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(a1 + 912);
  *(_QWORD *)(a1 + 912) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 904) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 888) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 856) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 816) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 752) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 744) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 712) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 656) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 624) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  if ((*(_BYTE *)(a1 + 504) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 512), (void *)(16 * *(unsigned int *)(a1 + 520)));
  return a1;
}

void sub_22E8864CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;
  uint64_t v4;
  unsigned int *v5;

  v2 = *(unsigned int *)(a1 + 2200);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int ***)(a1 + 2192);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      sub_22E886514(v5);
      v4 -= 8;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 2200) = 0;
}

void sub_22E886514(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;

  v1 = a1[11];
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = a1 + 22;
    do
    {
      if (v3[3])
      {
        v5 = v2;
        v6 = v3;
        v4 = a1;
        free(*(void **)v3);
        v3 = v6;
        a1 = v4;
        v2 = v5;
      }
      v3 += 14;
      v2 -= 56;
    }
    while (v2);
  }
  free(a1);
}

uint64_t sub_22E88657C(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  __int16 v15;

  sub_22F308D44(*(_QWORD *)(a1 + 88));
  *a3 = 0;
  v6 = sub_22E88668C(a1, a2, a3);
  if ((_DWORD)v6)
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 16048))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      if ((*(_BYTE *)(v7 + 1) & 1) == 0 && !*(_BYTE *)(v7 + 704))
      {
        v8 = *(_DWORD *)(a1 + 16);
        v9 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v9 + 312) = v8;
        *(_DWORD *)(v9 + 316) = 1811;
        if (*(char *)(v9 + 311) < 0)
        {
          **(_BYTE **)(v9 + 288) = 0;
          *(_QWORD *)(v9 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v9 + 288) = 0;
          *(_BYTE *)(v9 + 311) = 0;
        }
        v14[0] = v9 + 320;
        v14[1] = 0;
        v14[2] = v9;
        v15 = 1;
        *(_BYTE *)(v9 + 320) = 0;
        *(_DWORD *)(v9 + 664) = 0;
        v10 = *(unsigned int *)(v9 + 776);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v9 + 768);
          v12 = 56 * v10;
          do
          {
            if (*(char *)(v11 + v12 - 9) < 0)
              operator delete(*(void **)(v11 + v12 - 32));
            v12 -= 56;
          }
          while (v12);
        }
        *(_DWORD *)(v9 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v14);
      }
    }
  }
  return v6;
}

uint64_t sub_22E88668C(uint64_t a1, _QWORD *a2, int *a3)
{
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD v83[3];
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  void *v93;
  __int128 v94;
  void *__p;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v6 + 736) && *(_WORD *)(a1 + 32) == 1)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(v6, (unsigned int *)(a1 + 16));
  }
  *a2 = 0;
  v7 = (unsigned int *)(a1 + 16);
  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 > 0xAC)
  {
    if (*(unsigned __int16 *)(a1 + 32) > 0x1B4u)
    {
      if (v8 == 437)
      {
        sub_22F33AA8C(*(__n128 **)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      }
      else
      {
        if (v8 != 438)
          goto LABEL_122;
        sub_22F33AC7C(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      }
      v25 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v25 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v25;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v21 = 0;
      *a3 = 5;
      goto LABEL_130;
    }
    if (v8 != 173)
    {
      if (v8 == 408)
      {
        sub_22F2EDFA0(a1);
LABEL_129:
        v21 = 0;
        goto LABEL_130;
      }
      if (v8 == 436)
      {
        sub_22F33AA40(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
        v33 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v33 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v33;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        goto LABEL_129;
      }
      goto LABEL_122;
    }
LABEL_27:
    v21 = 0;
    *a2 = sub_22E887218(a1, 0, a3);
    goto LABEL_130;
  }
  if (*(unsigned __int16 *)(a1 + 32) > 0x86u)
  {
    if (v8 != 135)
    {
      if (v8 == 172)
      {
        v13 = *v7;
        goto LABEL_19;
      }
      goto LABEL_122;
    }
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD *)(v26 + 2816);
    if (v27 >= *(unsigned int *)(v26 + 2784))
      v28 = sub_22F162D2C(v26, 1u);
    else
      v28 = *(_QWORD *)(v26 + 2776) + 24 * v27;
    v29 = *(unsigned __int16 *)(v28 + 16);
    if (v29 == 172)
      goto LABEL_132;
    if (v29 != 5)
      goto LABEL_122;
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(_QWORD *)(v30 + 2816);
    v32 = v31 >= *(unsigned int *)(v30 + 2784) ? sub_22F162D2C(v30, 1u) : *(_QWORD *)(v30 + 2776) + 24 * v31;
    v38 = *(unsigned __int16 *)(v32 + 16);
    if ((v38 - 7) >= 6)
    {
      v39 = 0;
      if ((v38 - 13) >= 6 && v38 != 1)
        v39 = *(_QWORD *)(v32 + 8);
    }
    else
    {
      v39 = 0;
    }
    if (v39 != *(_QWORD *)(a1 + 496) && v39 != *(_QWORD *)(a1 + 488))
      goto LABEL_122;
    v40 = a1 + 16;
    if (*(_WORD *)(a1 + 32) != 1)
    {
      v41 = *(_QWORD *)(a1 + 8);
      v42 = *(_QWORD *)(v41 + 2816) + 1;
      if (v42 >= *(unsigned int *)(v41 + 2784))
        v40 = sub_22F162D2C(v41, 2u);
      else
        v40 = *(_QWORD *)(v41 + 2776) + 24 * v42;
    }
    if (*(_WORD *)(v40 + 16) == 71)
    {
LABEL_122:
      v93 = 0;
      *(_QWORD *)&v94 = 0;
      *((_QWORD *)&v94 + 1) = a1 + 960;
      __p = 0;
      sub_22E8103B4(a1, (unint64_t *)&v93, 0);
      v65 = sub_22E887B48(a1, (uint64_t)&v93, 0);
      *a2 = v65;
      if (v65)
      {
        if (!*a3)
        {
          v66 = 5;
          goto LABEL_127;
        }
        if (*a3 == 2)
        {
          v66 = 3;
LABEL_127:
          *a3 = v66;
        }
      }
      sub_22E8D1BC4(*((uint64_t *)&v94 + 1), (uint64_t)&v94 + 8);
      sub_22E80F94C((uint64_t *)&__p);
      sub_22E80F94C((uint64_t *)&v94);
      goto LABEL_129;
    }
    if (v39 == *(_QWORD *)(a1 + 496))
      goto LABEL_132;
    goto LABEL_27;
  }
  if (v8 != 1)
  {
    if (v8 == 5)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (v9 == *(_QWORD *)(a1 + 496) || v9 == *(_QWORD *)(a1 + 488))
      {
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(v10 + 2816);
        v12 = v11 >= *(unsigned int *)(v10 + 2784) ? sub_22F162D2C(v10, 1u) : *(_QWORD *)(v10 + 2776) + 24 * v11;
        if (*(_WORD *)(v12 + 16) != 71)
        {
          v34 = *(unsigned __int16 *)(a1 + 32);
          if ((v34 - 7) >= 6)
          {
            v35 = 0;
            if ((v34 - 13) >= 6 && v34 != 1)
              v35 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v35 = 0;
          }
          if (v35 == *(_QWORD *)(a1 + 496))
          {
LABEL_132:
            v13 = *(_DWORD *)(a1 + 16);
            if (*(_WORD *)(a1 + 32) == 135)
            {
              *(_DWORD *)(a1 + 40) = v13;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              v14 = 0;
              v15 = *(_DWORD *)(a1 + 16);
LABEL_20:
              *(_DWORD *)(a1 + 40) = v15;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              v16 = *(_DWORD *)(a1 + 40);
              sub_22E831780(a1);
              v17 = *(_QWORD *)(a1 + 8);
              if ((*(_QWORD *)(*(_QWORD *)(v17 + 56) + 20) & 0x800000000000) != 0)
              {
                v18 = *(unsigned __int16 *)(a1 + 32);
                if (v18 == 61)
                {
                  v36 = *(_QWORD *)(v17 + 2816);
                  if (v36 >= *(unsigned int *)(v17 + 2784))
                    v37 = sub_22F162D2C(v17, 1u);
                  else
                    v37 = *(_QWORD *)(v17 + 2776) + 24 * v36;
                  if (*(_WORD *)(v37 + 16) == 142)
                  {
                    if ((v14 & 1) == 0)
                    {
                      v43 = *(_QWORD *)(a1 + 96);
                      *(_DWORD *)(v43 + 312) = v13;
                      *(_DWORD *)(v43 + 316) = 1610;
                      if (*(char *)(v43 + 311) < 0)
                      {
                        **(_BYTE **)(v43 + 288) = 0;
                        *(_QWORD *)(v43 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v43 + 288) = 0;
                        *(_BYTE *)(v43 + 311) = 0;
                      }
                      v68 = (unsigned __int8 *)(v43 + 320);
                      v89 = (void *)(v43 + 320);
                      v90 = 0;
                      v91 = v43;
                      v92 = 1;
                      *(_BYTE *)(v43 + 320) = 0;
                      *(_DWORD *)(v43 + 664) = 0;
                      v69 = *(unsigned int *)(v43 + 776);
                      if ((_DWORD)v69)
                      {
                        v70 = v16;
                        v71 = *(_QWORD *)(v43 + 768);
                        v72 = 56 * v69;
                        do
                        {
                          if (*(char *)(v71 + v72 - 9) < 0)
                            operator delete(*(void **)(v71 + v72 - 32));
                          v72 -= 56;
                        }
                        while (v72);
                        LODWORD(v69) = *v68;
                        v16 = v70;
                      }
                      *(_DWORD *)(v43 + 776) = 0;
                      v68[v69 + 1] = 2;
                      *(_BYTE *)(v43 + 320) = v69 + 1;
                      *(_QWORD *)&v68[8 * v69 + 16] = 1;
                      BYTE12(v94) = 0;
                      *(_QWORD *)((char *)&v94 + 4) = 0;
                      v96 = 0;
                      v97 = 0;
                      __p = 0;
                      v98 = 0;
                      v93 = (void *)(v13 | ((unint64_t)v13 << 32));
                      LOBYTE(v94) = 1;
                      sub_22E6D82D0((uint64_t *)&v89, &v93);
                      if (SHIBYTE(v97) < 0)
                        operator delete(__p);
                      sub_22E3BB0B8((uint64_t)&v89);
                    }
                    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                    v73 = *(_DWORD *)(a1 + 40);
                    sub_22E831780(a1);
                    sub_22E884BB4(a1, 1728);
                    *a3 = 4;
                    v74 = sub_22EC74254(*(int64x2_t **)(a1 + 88), v16, v73);
                    goto LABEL_149;
                  }
                }
                else if (v18 == 62)
                {
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                  sub_22F18FB4C(v17, (unsigned int *)(a1 + 16));
                  if (*a3)
                  {
                    v19 = *(unsigned int *)(a1 + 40);
                    v20 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v20 + 312) = v13;
                    *(_DWORD *)(v20 + 316) = 1569;
                    if (*(char *)(v20 + 311) < 0)
                    {
                      **(_BYTE **)(v20 + 288) = 0;
                      *(_QWORD *)(v20 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v20 + 288) = 0;
                      *(_BYTE *)(v20 + 311) = 0;
                    }
                    v93 = (void *)(v20 + 320);
                    *(_QWORD *)&v94 = 0;
                    *((_QWORD *)&v94 + 1) = v20;
                    LOWORD(__p) = 1;
                    *(_BYTE *)(v20 + 320) = 0;
                    *(_DWORD *)(v20 + 664) = 0;
                    v55 = *(unsigned int *)(v20 + 776);
                    if ((_DWORD)v55)
                    {
                      v56 = *(_QWORD *)(v20 + 768);
                      v57 = 56 * v55;
                      do
                      {
                        if (*(char *)(v56 + v57 - 9) < 0)
                          operator delete(*(void **)(v56 + v57 - 32));
                        v57 -= 56;
                      }
                      while (v57);
                    }
                    *(_DWORD *)(v20 + 776) = 0;
                    sub_22E4D6448(v20 + 656, v13 | (unint64_t)(v19 << 32), 1);
                    sub_22E3BB0B8((uint64_t)&v93);
                    v44 = 0;
                    goto LABEL_119;
                  }
                  if ((v14 & 1) == 0)
                  {
                    v75 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v75 + 312) = v13;
                    *(_DWORD *)(v75 + 316) = 1610;
                    if (*(char *)(v75 + 311) < 0)
                    {
                      **(_BYTE **)(v75 + 288) = 0;
                      *(_QWORD *)(v75 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v75 + 288) = 0;
                      *(_BYTE *)(v75 + 311) = 0;
                    }
                    v76 = 0;
                    v77 = (unsigned __int8 *)(v75 + 320);
                    v89 = (void *)(v75 + 320);
                    v90 = 0;
                    v91 = v75;
                    v92 = 1;
                    *(_BYTE *)(v75 + 320) = 0;
                    *(_DWORD *)(v75 + 664) = 0;
                    v78 = *(unsigned int *)(v75 + 776);
                    if ((_DWORD)v78)
                    {
                      v79 = v16;
                      v80 = *(_QWORD *)(v75 + 768);
                      v81 = 56 * v78;
                      do
                      {
                        if (*(char *)(v80 + v81 - 9) < 0)
                          operator delete(*(void **)(v80 + v81 - 32));
                        v81 -= 56;
                      }
                      while (v81);
                      v76 = *v77;
                      v16 = v79;
                    }
                    *(_DWORD *)(v75 + 776) = 0;
                    v77[v76 + 1] = 2;
                    *(_BYTE *)(v75 + 320) = v76 + 1;
                    *(_QWORD *)&v77[8 * v76 + 16] = 0;
                    BYTE12(v94) = 0;
                    *(_QWORD *)((char *)&v94 + 4) = 0;
                    v96 = 0;
                    v97 = 0;
                    __p = 0;
                    v98 = 0;
                    v93 = (void *)(v13 | ((unint64_t)v13 << 32));
                    LOBYTE(v94) = 1;
                    sub_22E6D82D0((uint64_t *)&v89, &v93);
                    if (SHIBYTE(v97) < 0)
                      operator delete(__p);
                    sub_22E3BB0B8((uint64_t)&v89);
                  }
                  *a3 = 1;
                  v74 = sub_22F33A83C(*(_QWORD *)(a1 + 88), v16);
LABEL_149:
                  v44 = v74;
LABEL_119:
                  v21 = 0;
                  *a2 = v44;
                  goto LABEL_130;
                }
              }
              v93 = (char *)&v94 + 8;
              *(_QWORD *)&v94 = 0x200000000;
              if ((sub_22E88C298(a1, v16, (uint64_t)&v93, 0) & 1) != 0)
              {
                v44 = 0;
LABEL_117:
                if (v93 != (char *)&v94 + 8)
                  free(v93);
                goto LABEL_119;
              }
              v89 = &v91;
              v90 = 0x200000000;
              if (*(_WORD *)(a1 + 32) == 61)
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x800000000000) != 0)
                {
                  if ((sub_22E88C298(a1, v16, (uint64_t)&v89, 0) & 1) != 0)
                  {
                    v44 = 0;
                    goto LABEL_115;
                  }
                }
                else
                {
                  v45 = *(unsigned int *)(a1 + 40);
                  v46 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v46 + 312) = v45;
                  *(_DWORD *)(v46 + 316) = 1778;
                  v82 = v16;
                  if (*(char *)(v46 + 311) < 0)
                  {
                    **(_BYTE **)(v46 + 288) = 0;
                    *(_QWORD *)(v46 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v46 + 288) = 0;
                    *(_BYTE *)(v46 + 311) = 0;
                  }
                  v85 = v46 + 320;
                  v86 = 0;
                  v87 = v46;
                  LOWORD(v88) = 1;
                  *(_BYTE *)(v46 + 320) = 0;
                  *(_DWORD *)(v46 + 664) = 0;
                  v62 = *(unsigned int *)(v46 + 776);
                  if ((_DWORD)v62)
                  {
                    v63 = *(_QWORD *)(v46 + 768);
                    v64 = 56 * v62;
                    do
                    {
                      if (*(char *)(v63 + v64 - 9) < 0)
                        operator delete(*(void **)(v63 + v64 - 32));
                      v64 -= 56;
                    }
                    while (v64);
                  }
                  *(_DWORD *)(v46 + 776) = 0;
                  sub_22E4D6448(v46 + 656, v45 | ((unint64_t)*((unsigned int *)v89 + 4 * v90 - 2) << 32), 1);
                  sub_22E3BB0B8((uint64_t)&v85);
                  v16 = v82;
                }
              }
              v85 = 0;
              v86 = 0;
              v87 = a1 + 960;
              v88 = 0;
              sub_22E8103B4(a1, (unint64_t *)&v85, 0);
              sub_22E817724(a1, (uint64_t)&v85, 1444, 0, 1);
              sub_22E884BB4(a1, 1609);
              v44 = sub_22EC738A0(*(_QWORD *)(a1 + 88), v13, v16, v14, (uint64_t)v93, v94, (uint64_t *)v89, v90, a3);
              sub_22E8D1BC4(v87, (uint64_t)&v87);
              sub_22E80F94C(&v88);
              sub_22E80F94C(&v86);
LABEL_115:
              if (v89 != &v91)
                free(v89);
              goto LABEL_117;
            }
LABEL_19:
            v14 = 1;
            v15 = v13;
            goto LABEL_20;
          }
          goto LABEL_27;
        }
      }
    }
    goto LABEL_122;
  }
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_DWORD *)(v22 + 920);
  if (v23 && *(_DWORD *)(v22 + 912) > v23)
  {
    v24 = *(_QWORD *)(v22 + 48);
    *(_DWORD *)(v24 + 312) = *v7;
    *(_DWORD *)(v24 + 316) = 1959;
    if (*(char *)(v24 + 311) < 0)
    {
      **(_BYTE **)(v24 + 288) = 0;
      *(_QWORD *)(v24 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v24 + 288) = 0;
      *(_BYTE *)(v24 + 311) = 0;
    }
    v93 = (void *)(v24 + 320);
    *(_QWORD *)&v94 = 0;
    *((_QWORD *)&v94 + 1) = v24;
    LOWORD(__p) = 1;
    *(_BYTE *)(v24 + 320) = 0;
    *(_DWORD *)(v24 + 664) = 0;
    v47 = *(unsigned int *)(v24 + 776);
    if ((_DWORD)v47)
    {
      v48 = *(_QWORD *)(v24 + 768);
      v49 = 56 * v47;
      do
      {
        if (*(char *)(v48 + v49 - 9) < 0)
          operator delete(*(void **)(v48 + v49 - 32));
        v49 -= 56;
      }
      while (v49);
      LODWORD(v47) = *(unsigned __int8 *)(v24 + 320);
    }
    *(_DWORD *)(v24 + 776) = 0;
    v50 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 912);
    *(_BYTE *)(v24 + 321 + v47) = 3;
    *(_QWORD *)(v24 + 336 + 8 * v47) = v50;
    v51 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 920);
    v52 = (v47 + 1);
    *(_BYTE *)(v24 + 321 + v52) = 3;
    *(_BYTE *)(v24 + 320) = v47 + 2;
    *(_QWORD *)(v24 + 336 + 8 * v52) = v51;
    sub_22E3BB0B8((uint64_t)&v93);
    v22 = *(_QWORD *)(a1 + 8);
    v53 = *(_DWORD *)(v22 + 924);
    if (v53)
    {
      v54 = *(_QWORD *)(v22 + 48);
      *(_DWORD *)(v54 + 312) = v53;
      *(_DWORD *)(v54 + 316) = 1866;
      if (*(char *)(v54 + 311) < 0)
      {
        **(_BYTE **)(v54 + 288) = 0;
        *(_QWORD *)(v54 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v54 + 288) = 0;
        *(_BYTE *)(v54 + 311) = 0;
      }
      v83[0] = v54 + 320;
      v83[1] = 0;
      v83[2] = v54;
      v84 = 1;
      *(_BYTE *)(v54 + 320) = 0;
      *(_DWORD *)(v54 + 664) = 0;
      v58 = *(unsigned int *)(v54 + 776);
      if ((_DWORD)v58)
      {
        v59 = *(_QWORD *)(v54 + 768);
        v60 = 56 * v58;
        do
        {
          if (*(char *)(v59 + v60 - 9) < 0)
            operator delete(*(void **)(v59 + v60 - 32));
          v60 -= 56;
        }
        while (v60);
      }
      *(_DWORD *)(v54 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v83);
      v22 = *(_QWORD *)(a1 + 8);
    }
  }
  v61 = *(_QWORD **)(a1 + 88);
  v61[393] = sub_22F2EFB44;
  v61[394] = 0;
  v61[395] = a1;
  if (!*(_BYTE *)(v22 + 736))
    sub_22E9018D8((unint64_t)v61);
  v21 = 1;
LABEL_130:
  sub_22E88CA20(a1);
  return v21;
}

unint64_t sub_22E887218(uint64_t a1, int a2, _DWORD *a3)
{
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _QWORD v69[3];
  __int16 v70;
  _QWORD v71[3];
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  _QWORD v77[3];
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD v85[6];

  v85[4] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (!a2)
    v6 = *(_DWORD *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 135)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v7 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_22F140B7C(a1 + 16, 25);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v9 = *(_DWORD *)(a1 + 40);
  v83 = v85;
  v84 = 0x200000000;
  v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 == 439)
  {
    v68 = v8;
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v14 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v14;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v11 = 0;
    v12 = 0;
    goto LABEL_13;
  }
  if (v10 != 61)
  {
    if (v10 == 15)
    {
      v68 = v8;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v11 = 0;
      v12 = 0;
      v13 = 0;
LABEL_13:
      v15 = 1;
      goto LABEL_34;
    }
    v15 = 1;
    if ((sub_22E88C298(a1, v9, (uint64_t)&v83, 1u) & 1) != 0)
    {
      v13 = 0;
      goto LABEL_99;
    }
    v68 = v8;
    goto LABEL_33;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v16 = *(unsigned int *)(a1 + 40);
  v68 = v8;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x800000000000) == 0)
  {
    v17 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v17 + 312) = v16;
    *(_DWORD *)(v17 + 316) = 1778;
    if (*(char *)(v17 + 311) < 0)
    {
      **(_BYTE **)(v17 + 288) = 0;
      *(_QWORD *)(v17 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v17 + 288) = 0;
      *(_BYTE *)(v17 + 311) = 0;
    }
    v18 = v17 + 320;
    v79 = v17 + 320;
    v80 = 0;
    v81 = v17;
    LOWORD(v82) = 1;
    *(_BYTE *)(v17 + 320) = 0;
    *(_DWORD *)(v17 + 664) = 0;
    v19 = *(unsigned int *)(v17 + 776);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(v17 + 768);
      v21 = 56 * v19;
      do
      {
        if (*(char *)(v20 + v21 - 9) < 0)
          operator delete(*(void **)(v20 + v21 - 32));
        v21 -= 56;
      }
      while (v21);
      v18 = v79;
    }
    *(_DWORD *)(v17 + 776) = 0;
    v22 = v16 | ((unint64_t)LODWORD(v83[2 * v84 - 1]) << 32);
    if (!v18)
    {
      v18 = sub_22E3B8AAC(v80);
      v79 = v18;
    }
    v15 = 1;
    sub_22E4D6448(v18 + 336, v22, 1);
    sub_22E3BB0B8((uint64_t)&v79);
LABEL_33:
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_34:
    v79 = 0;
    v80 = 0;
    v81 = a1 + 960;
    v82 = 0;
    sub_22E8103B4(a1, &v79, 0);
    sub_22E817724(a1, (uint64_t)&v79, 1443, 0, 1);
    v23 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(*(_QWORD *)(v23 + 112) + 9))
    {
      if (*(_QWORD *)(v23 + 752))
      {
        *(_BYTE *)(v23 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v23 + 48) + 6) = 1;
      }
      v13 = 0;
      *(_WORD *)(a1 + 32) = 1;
LABEL_98:
      sub_22E8D1BC4(v81, (uint64_t)&v81);
      sub_22E80F94C(&v82);
      sub_22E80F94C(&v80);
      goto LABEL_99;
    }
    switch(*a3)
    {
      case 0:
      case 5:
        if ((v15 & 1) != 0)
          goto LABEL_47;
        v24 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v24 + 312) = v9;
        *(_DWORD *)(v24 + 316) = 1689;
        if (*(char *)(v24 + 311) < 0)
        {
          **(_BYTE **)(v24 + 288) = 0;
          *(_QWORD *)(v24 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v24 + 288) = 0;
          *(_BYTE *)(v24 + 311) = 0;
        }
        v77[0] = v24 + 320;
        v77[1] = 0;
        v77[2] = v24;
        v78 = 1;
        *(_BYTE *)(v24 + 320) = 0;
        *(_DWORD *)(v24 + 664) = 0;
        v31 = *(unsigned int *)(v24 + 776);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v24 + 768);
          v33 = 56 * v31;
          do
          {
            if (*(char *)(v32 + v33 - 9) < 0)
              operator delete(*(void **)(v32 + v33 - 32));
            v33 -= 56;
          }
          while (v33);
        }
        *(_DWORD *)(v24 + 776) = 0;
        v34 = v77;
        goto LABEL_96;
      case 1:
        if (v13 && *(_DWORD *)(v13 + 28) == 2)
          goto LABEL_48;
        v25 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v25 + 312) = v9;
        *(_DWORD *)(v25 + 316) = 1574;
        if (*(char *)(v25 + 311) < 0)
        {
          **(_BYTE **)(v25 + 288) = 0;
          *(_QWORD *)(v25 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v25 + 288) = 0;
          *(_BYTE *)(v25 + 311) = 0;
        }
        v73 = v25 + 320;
        v74 = 0;
        v75 = v25;
        v76 = 1;
        *(_BYTE *)(v25 + 320) = 0;
        *(_DWORD *)(v25 + 664) = 0;
        v45 = *(unsigned int *)(v25 + 776);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)(v25 + 768);
          v47 = 56 * v45;
          do
          {
            if (*(char *)(v46 + v47 - 9) < 0)
              operator delete(*(void **)(v46 + v47 - 32));
            v47 -= 56;
          }
          while (v47);
          LODWORD(v45) = *(unsigned __int8 *)(v25 + 320);
        }
        *(_BYTE *)(v25 + 321 + v45) = 2;
        *(_DWORD *)(v25 + 776) = 0;
        *(_QWORD *)(v25 + 336 + 8 * v45) = v12;
        v48 = (v45 + 1);
        *(_BYTE *)(v25 + 321 + v48) = 2;
        *(_BYTE *)(v25 + 320) = v45 + 2;
        *(_QWORD *)(v25 + 336 + 8 * v48) = 0;
        goto LABEL_88;
      case 2:
        goto LABEL_47;
      case 3:
        if ((*(_QWORD *)(*(_QWORD *)(v23 + 56) + 20) & 0x800000000000) != 0)
        {
          v30 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v30 + 312) = v9;
          *(_DWORD *)(v30 + 316) = 1575;
          if (*(char *)(v30 + 311) < 0)
          {
            **(_BYTE **)(v30 + 288) = 0;
            *(_QWORD *)(v30 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v30 + 288) = 0;
            *(_BYTE *)(v30 + 311) = 0;
          }
          v71[0] = v30 + 320;
          v71[1] = 0;
          v71[2] = v30;
          v72 = 1;
          *(_BYTE *)(v30 + 320) = 0;
          *(_DWORD *)(v30 + 664) = 0;
          v49 = *(unsigned int *)(v30 + 776);
          if ((_DWORD)v49)
          {
            v50 = *(_QWORD *)(v30 + 768);
            v51 = 56 * v49;
            do
            {
              if (*(char *)(v50 + v51 - 9) < 0)
                operator delete(*(void **)(v50 + v51 - 32));
              v51 -= 56;
            }
            while (v51);
          }
          *(_DWORD *)(v30 + 776) = 0;
          v34 = v71;
LABEL_96:
          sub_22E3BB0B8((uint64_t)v34);
LABEL_97:
          sub_22E884BB4(a1, 1609);
          v13 = 0;
          goto LABEL_98;
        }
LABEL_47:
        if (v13)
        {
LABEL_48:
          v26 = sub_22EC74940(*(_QWORD *)(a1 + 88), v6, v7, v9, v13, 0, 0);
        }
        else
        {
          if (!(_DWORD)v84)
          {
            sub_22E884BB4(a1, 1609);
            v13 = 0;
LABEL_73:
            v39 = !v68;
            if (!a2)
              v39 = 1;
            if ((v39 & 1) == 0)
            {
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
              v41 = a2 & 0x7FFFFFFF;
              v42 = *(_DWORD *)(v40 + 304);
              v43 = v42 + 1;
              if (v42 + 1 > 1)
              {
                if ((v42 & 0x80000000) != 0)
                {
                  v53 = -2 - v42;
                  v44 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v40 + 224) + 8 * ((-2 - v42) >> 6)) >> (-2 - v42)) & 1) != 0
                                 ? *(_QWORD *)(v40 + 200) + 24 * v53
                                 : sub_22F1E1134(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), v53, 0));
                }
                else
                {
                  v44 = (_DWORD *)(*(_QWORD *)(v40 + 184) + 24 * v42);
                }
              }
              else
              {
                v44 = *(_DWORD **)(v40 + 184);
              }
              if ((*v44 & 0x7FFFFFFFu) > v41)
                goto LABEL_105;
              if (v42 == -2
                || (v43 != *(_DWORD *)(v40 + 192)
                  ? ((v43 & 0x80000000) != 0
                   ? ((v57 = -3 - v42,
                       ((*(_QWORD *)(*(_QWORD *)(v40 + 224) + 8 * ((-3 - v42) >> 6)) >> (-3 - v42)) & 1) == 0)
                    ? (v56 = (_DWORD *)sub_22F1E1134(v40, v57, 0))
                    : (v56 = (_DWORD *)(*(_QWORD *)(v40 + 200) + 24 * v57)))
                   : (v56 = (_DWORD *)(*(_QWORD *)(v40 + 184) + 24 * v43)),
                     v55 = *v56 & 0x7FFFFFFF)
                  : (v55 = *(_DWORD *)(v40 + 216)),
                    v55 > v41))
              {
                v54 = *(_DWORD *)(v40 + 304);
              }
              else
              {
LABEL_105:
                v54 = sub_22F1E1EE8(v40, a2 & 0x7FFFFFFF);
              }
              v58 = sub_22E49F3DC((_QWORD *)v40, v54);
              if (v58)
              {
                v59 = *(_QWORD *)((*((_QWORD *)v58 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
                if (v59)
                {
                  do
                  {
                    v60 = *(_QWORD *)(v59 + 8);
                    if ((v60 & 2) == 0)
                      break;
                    v59 = v60 & 0xFFFFFFFFFFFFFFFCLL;
                  }
                  while (v59);
                  v61 = llvm::sys::path::parent_path();
                  if (v62 >= 0xA
                    && *(_QWORD *)(v61 + v62 - 10) == 0x6F77656D6172662ELL
                    && *(_WORD *)(v61 + v62 - 2) == 27506)
                  {
                    v64 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v64 + 312) = a2;
                    *(_DWORD *)(v64 + 316) = 1889;
                    if (*(char *)(v64 + 311) < 0)
                    {
                      **(_BYTE **)(v64 + 288) = 0;
                      *(_QWORD *)(v64 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v64 + 288) = 0;
                      *(_BYTE *)(v64 + 311) = 0;
                    }
                    v69[0] = v64 + 320;
                    v69[1] = 0;
                    v69[2] = v64;
                    v70 = 1;
                    *(_BYTE *)(v64 + 320) = 0;
                    *(_DWORD *)(v64 + 664) = 0;
                    v65 = *(unsigned int *)(v64 + 776);
                    if ((_DWORD)v65)
                    {
                      v66 = *(_QWORD *)(v64 + 768);
                      v67 = 56 * v65;
                      do
                      {
                        if (*(char *)(v66 + v67 - 9) < 0)
                          operator delete(*(void **)(v66 + v67 - 32));
                        v67 -= 56;
                      }
                      while (v67);
                    }
                    *(_DWORD *)(v64 + 776) = 0;
                    sub_22E3BB0B8((uint64_t)v69);
                  }
                }
              }
            }
            goto LABEL_98;
          }
          v26 = sub_22EC74554(*(_QWORD *)(a1 + 88), v6, v7, v9, v83, v84, v11);
        }
        v13 = (unint64_t)v26;
        v29 = v27;
        sub_22E884BB4(a1, 1609);
        if (v29)
        {
          v13 = 0;
          goto LABEL_98;
        }
        goto LABEL_73;
      case 4:
        v28 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v28 + 312) = v9;
        *(_DWORD *)(v28 + 316) = 1574;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        v73 = v28 + 320;
        v74 = 0;
        v75 = v28;
        v76 = 1;
        *(_BYTE *)(v28 + 320) = 0;
        *(_DWORD *)(v28 + 664) = 0;
        v35 = *(unsigned int *)(v28 + 776);
        if ((_DWORD)v35)
        {
          v36 = *(_QWORD *)(v28 + 768);
          v37 = 56 * v35;
          do
          {
            if (*(char *)(v36 + v37 - 9) < 0)
              operator delete(*(void **)(v36 + v37 - 32));
            v37 -= 56;
          }
          while (v37);
          LODWORD(v35) = *(unsigned __int8 *)(v28 + 320);
        }
        *(_DWORD *)(v28 + 776) = 0;
        *(_BYTE *)(v28 + 321 + v35) = 2;
        *(_QWORD *)(v28 + 336 + 8 * v35) = v12;
        v38 = (v35 + 1);
        *(_BYTE *)(v28 + 321 + v38) = 2;
        *(_BYTE *)(v28 + 320) = v35 + 2;
        *(_QWORD *)(v28 + 336 + 8 * v38) = 1;
LABEL_88:
        v34 = &v73;
        goto LABEL_96;
      default:
        goto LABEL_97;
    }
  }
  v11 = 1;
  v13 = 0;
  if ((sub_22E88C298(a1, v16, (uint64_t)&v83, 1u) & 1) == 0)
  {
    v15 = 0;
    v12 = 1;
    goto LABEL_34;
  }
LABEL_99:
  if (v83 != v85)
    free(v83);
  return v13;
}

_QWORD *sub_22E887B48(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];
  __int16 v84;
  _QWORD v85[3];
  __int16 v86;
  _QWORD v87[3];
  __int16 v88;
  _QWORD v89[3];
  __int16 v90;
  _QWORD v91[3];
  __int16 v92;
  _QWORD v93[3];
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  char v100;
  uint64_t v101;
  int v102;
  __int16 v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = *(_WORD *)(a1 + 80);
  v5 = *(_WORD *)(a1 + 82);
  v6 = *(_WORD *)(a1 + 84);
  v7 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v7 + 864))
  {
    v11 = *(unsigned __int16 *)(a1 + 32);
    if (v11 > 0xAB)
    {
      if (*(unsigned __int16 *)(a1 + 32) > 0x17Cu)
      {
        switch(*(_WORD *)(a1 + 32))
        {
          case 0x17D:
          case 0x17E:
            v111 = 0;
            v112 = 0;
            v108 = 0u;
            v109 = 0u;
            LODWORD(v107) = 0;
            v110 = 0;
            if ((sub_22E88BFB8(a1, (unsigned int *)&v107) & 1) == 0)
            {
              v99 = (_BYTE *)(a1 + 944);
              v100 = *(_BYTE *)(a1 + 944);
              *(_BYTE *)(a1 + 944) = 1;
              v101 = a1;
              v102 = 1572887;
              v103 = 62;
              v105 = 0;
              v106 = 0;
              v104 = sub_22E80CED8;
              if (sub_22E811DE8((uint64_t)&v99))
              {
                v14 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(v14 + 316) = 15;
                if (*(char *)(v14 + 311) < 0)
                {
                  **(_BYTE **)(v14 + 288) = 0;
                  *(_QWORD *)(v14 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v14 + 288) = 0;
                  *(_BYTE *)(v14 + 311) = 0;
                }
                v58 = (unsigned __int8 *)(v14 + 320);
                v95 = v14 + 320;
                v96 = 0;
                v97 = v14;
                LOWORD(v98) = 1;
                *(_BYTE *)(v14 + 320) = 0;
                *(_DWORD *)(v14 + 664) = 0;
                v59 = *(unsigned int *)(v14 + 776);
                if ((_DWORD)v59)
                {
                  v60 = *(_QWORD *)(v14 + 768);
                  v61 = 56 * v59;
                  do
                  {
                    if (*(char *)(v60 + v61 - 9) < 0)
                      operator delete(*(void **)(v60 + v61 - 32));
                    v61 -= 56;
                  }
                  while (v61);
                  LODWORD(v59) = *v58;
                }
                *(_DWORD *)(v14 + 776) = 0;
                v58[v59 + 1] = 4;
                *(_BYTE *)(v14 + 320) = v59 + 1;
                *(_QWORD *)&v58[8 * v59 + 16] = 23;
                sub_22E3BB0B8((uint64_t)&v95);
              }
              else
              {
                if (v113 == 1)
                {
                  LOWORD(v95) = HIWORD(v102);
                  sub_22E885940(v101, (unsigned __int16 *)&v95, 1, 2);
                }
                else
                {
                  while (1)
                  {
                    v51 = *(unsigned __int16 *)(a1 + 32);
                    v52 = (v51 - 436) < 3 || v51 == 1;
                    if (v52 || v51 == 24)
                      break;
                    v95 = 0;
                    v96 = 0;
                    v97 = a1 + 960;
                    v98 = 0;
                    sub_22E8103B4(a1, &v95, 0);
                    v54 = sub_22E887B48(a1, &v95, 0);
                    if (v54)
                    {
                      v55 = *(_QWORD *)(a1 + 88);
                      if (!**(_QWORD **)(v55 + 12888))
                        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v55 + 96) + 24))(*(_QWORD *)(v55 + 96), v54);
                    }
                    sub_22E8D1BC4(v97, (uint64_t)&v97);
                    sub_22E80F94C(&v98);
                    sub_22E80F94C(&v96);
                  }
                }
                sub_22E811E8C((uint64_t)&v99);
              }
              *v99 = v100;
            }
            if (HIDWORD(v109))
              free((void *)v109);
            goto LABEL_188;
          case 0x199:
            sub_22F2EDFFC(a1);
            goto LABEL_188;
          case 0x19A:
            sub_22F2EE050(a1);
            goto LABEL_188;
          case 0x19D:
            sub_22F2EE160(a1);
            goto LABEL_188;
          case 0x19E:
            sub_22F2EE0DC(a1);
            goto LABEL_188;
          case 0x19F:
            sub_22F2EE11C(a1);
            goto LABEL_188;
          case 0x1A0:
            sub_22E8631D8(a1);
            goto LABEL_188;
          case 0x1A1:
            sub_22E863268(a1);
            goto LABEL_188;
          case 0x1A2:
            sub_22E863354(a1);
            goto LABEL_188;
          case 0x1A3:
            sub_22F2EE1A8(a1);
            goto LABEL_188;
          case 0x1A4:
          case 0x1A5:
            sub_22F2EE27C(a1);
            goto LABEL_188;
          case 0x1A6:
            sub_22F2EE2D4(a1);
            goto LABEL_188;
          case 0x1A7:
            sub_22F2EE220(a1);
            goto LABEL_188;
          case 0x1A8:
            sub_22F2EE328(a1);
            goto LABEL_188;
          case 0x1A9:
            sub_22F2EE378(a1);
            goto LABEL_188;
          case 0x1AA:
            sub_22E863A08(a1);
            goto LABEL_188;
          case 0x1AB:
            sub_22E8635C8(a1);
            goto LABEL_188;
          case 0x1AC:
          case 0x1AD:
            LODWORD(v107) = 3;
            v13 = sub_22E85B9CC(a1, (int *)&v107, (_QWORD *)a2, 0, 0, 0);
            goto LABEL_161;
          case 0x1B0:
            sub_22F2EE488(a1);
            goto LABEL_188;
          case 0x1B1:
            sub_22E866018(a1);
            goto LABEL_188;
          case 0x1B2:
            sub_22F2EE3D4(a1);
            goto LABEL_188;
          case 0x1B3:
            sub_22F2EE440(a1);
            goto LABEL_188;
          default:
            goto LABEL_159;
        }
      }
      switch(v11)
      {
        case 0xACu:
          v24 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v24 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v24 + 316) = 1761;
          if (*(char *)(v24 + 311) < 0)
          {
            **(_BYTE **)(v24 + 288) = 0;
            *(_QWORD *)(v24 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v24 + 288) = 0;
            *(_BYTE *)(v24 + 311) = 0;
          }
          v83[0] = v24 + 320;
          v83[1] = 0;
          v83[2] = v24;
          v84 = 1;
          *(_BYTE *)(v24 + 320) = 0;
          *(_DWORD *)(v24 + 664) = 0;
          v44 = *(unsigned int *)(v24 + 776);
          if ((_DWORD)v44)
          {
            v45 = *(_QWORD *)(v24 + 768);
            v46 = 56 * v44;
            do
            {
              if (*(char *)(v45 + v46 - 9) < 0)
                operator delete(*(void **)(v45 + v46 - 32));
              v46 -= 56;
            }
            while (v46);
          }
          *(_DWORD *)(v24 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v83);
          LOWORD(v107) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v107, 1, 0);
          goto LABEL_188;
        case 0xADu:
          LODWORD(v107) = 5;
          v13 = sub_22E887218(a1, 0, &v107);
          goto LABEL_161;
        case 0xC4u:
          v18 = *(_QWORD *)(a1 + 96);
          ++*(_BYTE *)(v18 + 4);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(v7, (unsigned int *)(a1 + 16));
          v8 = (_QWORD *)sub_22E887B48(a1, a2, 0);
          --*(_BYTE *)(v18 + 4);
          goto LABEL_189;
      }
      goto LABEL_159;
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0x5Bu)
    {
      v12 = v11 - 106;
      if (v12 <= 0x3B)
      {
        if (((1 << (v11 - 106)) & 0x801020200004001) != 0)
        {
LABEL_9:
          LODWORD(v107) = 0;
          v13 = sub_22E817D84(a1, 0, &v107, a2, 0);
LABEL_161:
          v8 = (_QWORD *)v13;
          goto LABEL_189;
        }
        if (v12 == 21)
        {
          if (*(_DWORD *)a2 && *(_DWORD *)(a2 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a2, 0);
            sub_22E820B10((_QWORD *)a2);
          }
          v25 = *(_DWORD *)(a1 + 16);
          LODWORD(v99) = 0;
          v26 = sub_22E8889BC(a1, 0, &v99);
          v27 = v26;
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
          if ((*(_QWORD *)(v28 + 8) & 0x200000000000000) == 0 && (v26 & 1) == 0
            || (*(_BYTE *)(v28 + 104) & 0x20) != 0)
          {
            v29 = ((*(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL) >> 21) & 7u)
                * *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 16);
            v107 = (v26 & 0xFFFFFFFFFFFFFFFELL) + 4 * *(unsigned int *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 4) + 20;
            *(_QWORD *)&v108 = v29;
            sub_22E63A6F4(&v107);
            if (v30)
            {
              v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8);
              v32 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v32 + 312) = v25;
              if ((v31 & 0x200000000000000) != 0)
              {
                *(_DWORD *)(v32 + 316) = 1598;
                if (*(char *)(v32 + 311) < 0)
                {
                  **(_BYTE **)(v32 + 288) = 0;
                  *(_QWORD *)(v32 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v32 + 288) = 0;
                  *(_BYTE *)(v32 + 311) = 0;
                }
                v87[0] = v32 + 320;
                v87[1] = 0;
                v87[2] = v32;
                v88 = 1;
                *(_BYTE *)(v32 + 320) = 0;
                *(_DWORD *)(v32 + 664) = 0;
                v67 = (_DWORD *)(v32 + 776);
                v72 = *(unsigned int *)(v32 + 776);
                if ((_DWORD)v72)
                {
                  v73 = *(_QWORD *)(v32 + 768);
                  v74 = 56 * v72;
                  do
                  {
                    if (*(char *)(v73 + v74 - 9) < 0)
                      operator delete(*(void **)(v73 + v74 - 32));
                    v74 -= 56;
                  }
                  while (v74);
                }
                v71 = v87;
              }
              else
              {
                *(_DWORD *)(v32 + 316) = 1570;
                if (*(char *)(v32 + 311) < 0)
                {
                  **(_BYTE **)(v32 + 288) = 0;
                  *(_QWORD *)(v32 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v32 + 288) = 0;
                  *(_BYTE *)(v32 + 311) = 0;
                }
                v89[0] = v32 + 320;
                v89[1] = 0;
                v89[2] = v32;
                v90 = 1;
                *(_BYTE *)(v32 + 320) = 0;
                *(_DWORD *)(v32 + 664) = 0;
                v67 = (_DWORD *)(v32 + 776);
                v68 = *(unsigned int *)(v32 + 776);
                if ((_DWORD)v68)
                {
                  v69 = *(_QWORD *)(v32 + 768);
                  v70 = 56 * v68;
                  do
                  {
                    if (*(char *)(v69 + v70 - 9) < 0)
                      operator delete(*(void **)(v69 + v70 - 32));
                    v70 -= 56;
                  }
                  while (v70);
                }
                v71 = v89;
              }
              *v67 = 0;
              sub_22E3BB0B8((uint64_t)v71);
            }
          }
          sub_22E8847B4(a1, 0x3Eu, 16, "top-level asm block", 0x13uLL);
          if ((v27 & 1) == 0)
          {
            v13 = sub_22F31E638(*(_QWORD *)(a1 + 88), v27 & 0xFFFFFFFFFFFFFFFELL, v25, (int)v99);
            goto LABEL_161;
          }
LABEL_188:
          v8 = 0;
          goto LABEL_189;
        }
        if (v12 == 29)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v7 + 56) + 20) & 0xC00000000000) != 0)
          {
            if (*(_DWORD *)a2 && *(_DWORD *)(a2 + 4))
            {
              sub_22E8175C8(a1, (uint64_t *)a2, 0);
              sub_22E820B10((_QWORD *)a2);
            }
            v13 = sub_22F2E38C0(a1);
            goto LABEL_161;
          }
          goto LABEL_9;
        }
      }
      if (v11 == 92)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 56) + 1) & 1) != 0)
        {
          v33 = *(_QWORD *)(v7 + 2816);
          if (v33 >= *(unsigned int *)(v7 + 2784))
            v34 = sub_22F162D2C(v7, 1u);
          else
            v34 = *(_QWORD *)(v7 + 2776) + 24 * v33;
          v57 = *(unsigned __int16 *)(v34 + 16);
          if (v57 == 147)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v62 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v62 + 312) = *(_DWORD *)(a1 + 40);
            *(_DWORD *)(v62 + 316) = 2026;
            if (*(char *)(v62 + 311) < 0)
            {
              **(_BYTE **)(v62 + 288) = 0;
              *(_QWORD *)(v62 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v62 + 288) = 0;
              *(_BYTE *)(v62 + 311) = 0;
            }
            v76 = (unsigned __int8 *)(v62 + 320);
            v107 = v62 + 320;
            *(_QWORD *)&v108 = 0;
            *((_QWORD *)&v108 + 1) = v62;
            LOWORD(v109) = 1;
            *(_BYTE *)(v62 + 320) = 0;
            *(_DWORD *)(v62 + 664) = 0;
            v77 = *(unsigned int *)(v62 + 776);
            if ((_DWORD)v77)
            {
              v78 = *(_QWORD *)(v62 + 768);
              v79 = 56 * v77;
              do
              {
                if (*(char *)(v78 + v79 - 9) < 0)
                  operator delete(*(void **)(v78 + v79 - 32));
                v79 -= 56;
              }
              while (v79);
              LODWORD(v77) = *v76;
            }
            *(_DWORD *)(v62 + 776) = 0;
            v76[v77 + 1] = 2;
            *(_BYTE *)(v62 + 320) = v77 + 1;
            *(_QWORD *)&v76[8 * v77 + 16] = 1;
            goto LABEL_212;
          }
          if (v57 == 139)
            goto LABEL_9;
        }
      }
      else if (v11 == 103 && (*(_BYTE *)(*(_QWORD *)(v7 + 56) + 1) & 1) != 0)
      {
        v19 = *(_QWORD *)(v7 + 2816);
        v20 = v19 >= *(unsigned int *)(v7 + 2784) ? sub_22F162D2C(v7, 1u) : *(_QWORD *)(v7 + 2776) + 24 * v19;
        if (*(_WORD *)(v20 + 16) == 147)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v56 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v56 + 312) = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(v56 + 316) = 2026;
          if (*(char *)(v56 + 311) < 0)
          {
            **(_BYTE **)(v56 + 288) = 0;
            *(_QWORD *)(v56 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v56 + 288) = 0;
            *(_BYTE *)(v56 + 311) = 0;
          }
          v63 = (unsigned __int8 *)(v56 + 320);
          v107 = v56 + 320;
          *(_QWORD *)&v108 = 0;
          *((_QWORD *)&v108 + 1) = v56;
          LOWORD(v109) = 1;
          *(_BYTE *)(v56 + 320) = 0;
          *(_DWORD *)(v56 + 664) = 0;
          v64 = *(unsigned int *)(v56 + 776);
          if ((_DWORD)v64)
          {
            v65 = *(_QWORD *)(v56 + 768);
            v66 = 56 * v64;
            do
            {
              if (*(char *)(v65 + v66 - 9) < 0)
                operator delete(*(void **)(v65 + v66 - 32));
              v66 -= 56;
            }
            while (v66);
            LODWORD(v64) = *v63;
          }
          *(_DWORD *)(v56 + 776) = 0;
          v63[v64 + 1] = 2;
          *(_BYTE *)(v56 + 320) = v64 + 1;
          *(_QWORD *)&v63[8 * v64 + 16] = 0;
LABEL_212:
          sub_22E3BB0B8((uint64_t)&v107);
          goto LABEL_9;
        }
      }
      goto LABEL_159;
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0x22u)
    {
      if (*(unsigned __int16 *)(a1 + 32) > 0x47u)
      {
        if (v11 == 72)
        {
          v13 = sub_22F2E93A0(a1, a2);
          goto LABEL_161;
        }
        if (v11 == 87 && (*(_BYTE *)(*(_QWORD *)(v7 + 56) + 1) & 1) != 0)
        {
          v16 = *(_QWORD *)(v7 + 2816);
          v17 = v16 >= *(unsigned int *)(v7 + 2784) ? sub_22F162D2C(v7, 1u) : *(_QWORD *)(v7 + 2776) + 24 * v16;
          if (*(_WORD *)(v17 + 16) == 147)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v47 = *(unsigned int *)(a1 + 40);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v48 = *(unsigned int *)(a1 + 40);
            if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
              v49 = 1930;
            else
              v49 = 1817;
            v50 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v50 + 312) = v47;
            *(_DWORD *)(v50 + 316) = v49;
            if (*(char *)(v50 + 311) < 0)
            {
              **(_BYTE **)(v50 + 288) = 0;
              *(_QWORD *)(v50 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v50 + 288) = 0;
              *(_BYTE *)(v50 + 311) = 0;
            }
            v107 = v50 + 320;
            *(_QWORD *)&v108 = 0;
            *((_QWORD *)&v108 + 1) = v50;
            LOWORD(v109) = 1;
            *(_BYTE *)(v50 + 320) = 0;
            *(_DWORD *)(v50 + 664) = 0;
            v80 = *(unsigned int *)(v50 + 776);
            if ((_DWORD)v80)
            {
              v81 = *(_QWORD *)(v50 + 768);
              v82 = 56 * v80;
              do
              {
                if (*(char *)(v81 + v82 - 9) < 0)
                  operator delete(*(void **)(v81 + v82 - 32));
                v82 -= 56;
              }
              while (v82);
            }
            *(_DWORD *)(v50 + 776) = 0;
            sub_22E4D6448(v50 + 656, v47 | (v48 << 32), 1);
            sub_22E3BB0B8((uint64_t)&v107);
            LODWORD(v107) = 0;
            v13 = sub_22F2EFA94(a1, 0, v47, v48, &v107, a2, 3);
            goto LABEL_161;
          }
        }
        goto LABEL_159;
      }
      if (v11 != 35)
      {
        if (v11 == 62)
        {
          v8 = sub_22F32968C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)(a1 + 16));
          sub_22E884DD8(a1, 0, 0);
          goto LABEL_189;
        }
        goto LABEL_159;
      }
    }
    else
    {
      if (*(unsigned __int16 *)(a1 + 32) <= 0x17u)
      {
        if (v11 == 1)
        {
          v22 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v22 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v22 + 316) = 1500;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v91[0] = v22 + 320;
          v91[1] = 0;
          v91[2] = v22;
          v92 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v38 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v38)
          {
            v39 = *(_QWORD *)(v22 + 768);
            v40 = 56 * v38;
            do
            {
              if (*(char *)(v39 + v40 - 9) < 0)
                operator delete(*(void **)(v39 + v40 - 32));
              v40 -= 56;
            }
            while (v40);
          }
          *(_DWORD *)(v22 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v91);
          goto LABEL_188;
        }
        if (v11 == 3)
        {
          if (*(_QWORD *)(v7 + 752))
          {
            *(_BYTE *)(v7 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v7 + 48) + 6) = 1;
          }
          *(_WORD *)(a1 + 32) = 1;
          if (*(_QWORD *)(a1 + 2688))
          {
            sub_22E9D1F2C(*(void ***)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 0, 0);
            if (*(_QWORD *)(a1 + 2688))
              v15 = 3;
            else
              v15 = 0;
          }
          else
          {
            v15 = 0;
          }
          sub_22F313608(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v15);
          goto LABEL_188;
        }
        goto LABEL_159;
      }
      if (v11 == 24)
      {
        v23 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v23 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v23 + 316) = 1553;
        if (*(char *)(v23 + 311) < 0)
        {
          **(_BYTE **)(v23 + 288) = 0;
          *(_QWORD *)(v23 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v23 + 288) = 0;
          *(_BYTE *)(v23 + 311) = 0;
        }
        v93[0] = v23 + 320;
        v93[1] = 0;
        v93[2] = v23;
        v94 = 1;
        *(_BYTE *)(v23 + 320) = 0;
        *(_DWORD *)(v23 + 664) = 0;
        v41 = *(unsigned int *)(v23 + 776);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(v23 + 768);
          v43 = 56 * v41;
          do
          {
            if (*(char *)(v42 + v43 - 9) < 0)
              operator delete(*(void **)(v42 + v43 - 32));
            v43 -= 56;
          }
          while (v43);
        }
        *(_DWORD *)(v23 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v93);
        sub_22E80CED8(a1);
        goto LABEL_188;
      }
      if (v11 != 32)
      {
LABEL_159:
        if ((*(_WORD *)(a1 + 34) & 0x400) == 0)
        {
          v13 = (uint64_t)sub_22E888D40(a1, a2, a3, 3);
          goto LABEL_161;
        }
LABEL_162:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        goto LABEL_188;
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 56) + 1) & 0x40) != 0)
    {
      v13 = (uint64_t)sub_22E8518A4(a1);
      goto LABEL_161;
    }
    v21 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v21 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v21 + 316) = 1500;
    if (*(char *)(v21 + 311) < 0)
    {
      **(_BYTE **)(v21 + 288) = 0;
      *(_QWORD *)(v21 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v21 + 288) = 0;
      *(_BYTE *)(v21 + 311) = 0;
    }
    v85[0] = v21 + 320;
    v85[1] = 0;
    v85[2] = v21;
    v86 = 1;
    *(_BYTE *)(v21 + 320) = 0;
    *(_DWORD *)(v21 + 664) = 0;
    v35 = *(unsigned int *)(v21 + 776);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD *)(v21 + 768);
      v37 = 56 * v35;
      do
      {
        if (*(char *)(v36 + v37 - 9) < 0)
          operator delete(*(void **)(v36 + v37 - 32));
        v37 -= 56;
      }
      while (v37);
    }
    *(_DWORD *)(v21 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v85);
    goto LABEL_162;
  }
  if (*(_QWORD *)(v7 + 752))
  {
    *(_BYTE *)(v7 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + 6) = 1;
  }
  v8 = 0;
  *(_WORD *)(a1 + 32) = 1;
LABEL_189:
  sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 82) = v5;
  *(_WORD *)(a1 + 84) = v6;
  sub_22E88CA20(a1);
  return v8;
}

uint64_t sub_22E8889BC(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  _BYTE v29[12];
  void *__p;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;

  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v7 = *(unsigned __int16 *)(v6 + 16) - 90;
  v8 = v7 > 0x14;
  v9 = (1 << v7) & 0x100005;
  if (!v8 && v9 != 0)
  {
    v18 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v19 = sub_22F141A3C(*(unsigned int *)(a1 + 16), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v20 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v20 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v20 + 316) = 1568;
    if (*(char *)(v20 + 311) < 0)
    {
      **(_BYTE **)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v20 + 288) = 0;
      *(_BYTE *)(v20 + 311) = 0;
    }
    v34 = v20 + 320;
    v35 = 0;
    v36 = v20;
    v37 = 1;
    *(_BYTE *)(v20 + 320) = 0;
    *(_DWORD *)(v20 + 664) = 0;
    v21 = *(unsigned int *)(v20 + 776);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v20 + 768);
      v23 = 56 * v21;
      do
      {
        if (*(char *)(v22 + v23 - 9) < 0)
          operator delete(*(void **)(v22 + v23 - 32));
        v23 -= 56;
      }
      while (v23);
    }
    *(_DWORD *)(v20 + 776) = 0;
    v24 = *(unsigned __int16 *)(a1 + 32);
    switch(v24)
    {
      case 'Z':
        v25 = "goto";
        break;
      case '\\':
        v25 = "inline";
        break;
      case 'n':
        v25 = "volatile";
        break;
      default:
        v25 = "unspecified";
        break;
    }
    v26 = *(unsigned __int8 *)(v20 + 320);
    *(_BYTE *)(v20 + 320 + v26 + 1) = 1;
    *(_BYTE *)(v20 + 320) = v26 + 1;
    *(_QWORD *)(v20 + 320 + 8 * v26 + 16) = v25;
    v29[8] = 0;
    *(_QWORD *)v29 = 0;
    v31 = 0;
    v32 = 0;
    __p = 0;
    LOBYTE(v33) = 0;
    v27 = (_BYTE *)(v18 | (unint64_t)(v19 << 32));
    v28 = 1;
    sub_22E6D82D0(&v34, &v27);
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)&v34);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
  }
  v27 = (_BYTE *)(a1 + 944);
  v28 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  *(_QWORD *)&v29[4] = a1;
  LODWORD(__p) = 1441813;
  WORD2(__p) = 62;
  v32 = 0;
  v33 = 0;
  v31 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v27))
  {
    v11 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v11 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v11 + 316) = 1510;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v13 = (unsigned __int8 *)(v11 + 320);
    v34 = v11 + 320;
    v35 = 0;
    v36 = v11;
    v12 = 1;
    v37 = 1;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v14 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v11 + 768);
      v16 = 56 * v14;
      do
      {
        if (*(char *)(v15 + v16 - 9) < 0)
          operator delete(*(void **)(v15 + v16 - 32));
        v16 -= 56;
      }
      while (v16);
      LODWORD(v14) = *v13;
    }
    *(_DWORD *)(v11 + 776) = 0;
    v13[v14 + 1] = 1;
    *(_BYTE *)(v11 + 320) = v14 + 1;
    *(_QWORD *)&v13[8 * v14 + 16] = "asm";
    sub_22E3BB0B8((uint64_t)&v34);
  }
  else
  {
    v12 = sub_22E88A8D8(a1, a2);
    if ((v12 & 1) != 0)
    {
      LOWORD(v34) = 22;
      if (sub_22E885940(a1, (unsigned __int16 *)&v34, 1, 3))
      {
        if (a3)
          *a3 = *(_DWORD *)v6;
        sub_22E80F720(a1);
      }
    }
    else
    {
      sub_22E811E8C((uint64_t)&v27);
      if (a3)
        *a3 = HIDWORD(v33);
    }
  }
  *v27 = v28;
  return v12;
}

unsigned int *sub_22E888D40(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[41];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3)
    return sub_22E8890B0(a1, a2, a3, a4);
  v15[0] = 0;
  v15[2] = 0;
  v15[3] = 0;
  v16 = 0;
  v17 = a1 + 960;
  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v7 = *(_QWORD *)(a1 + 88);
  v29 = 0;
  v30 = v7;
  v31[0] = 0;
  v31[1] = v32;
  v31[2] = 0x400000000;
  v8 = *(_QWORD *)(v7 + 3200);
  *(_QWORD *)(v7 + 3200) = v31;
  v32[40] = v8;
  v33 = 0;
  sub_22E8287D8((uint64_t)&v11, a1);
  v9 = sub_22E8890B0(a1, a2, (unsigned int *)v15, a4);
  if (v12)
    sub_22F31E524(*(_QWORD *)(v11 + 88), v12);
  *v13 = v14;
  sub_22E828C30((uint64_t)&v30);
  if (DWORD1(v20))
    free(v19[1]);
  sub_22E8D1BC4(v17, (uint64_t)&v17);
  sub_22E80F94C((uint64_t *)&v18);
  sub_22E80F94C(&v16);
  return v9;
}

uint64_t sub_22E888EFC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 56) + 1) & 1) == 0
    || *(_WORD *)(a1 + 32) != 63
    || ((v3 = *(_QWORD *)(v2 + 2816), v3 >= *(unsigned int *)(v2 + 2784))
      ? (v4 = sub_22F162D2C(v2, 1u))
      : (v4 = *(_QWORD *)(v2 + 2776) + 24 * v3),
        (result = 0, v6 = *(unsigned __int16 *)(v4 + 16), v6 != 82) && v6 != 132))
  {
    v7 = *(unsigned __int16 *)(a1 + 32);
    result = 1;
    v8 = (v7 - 62) > 3 || v7 == 64;
    if (v8 && v7 != 127 && v7 != 186)
      return (v7 == 21) & *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1);
  }
  return result;
}

unint64_t sub_22E888FB8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v2 = *(unsigned __int16 *)(a1 + 32);
  if (v2 == 23)
    return 1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 56) + 1) & 1) != 0)
  {
    if (v2 == 63)
    {
      v11 = *(_QWORD *)(v4 + 2816);
      if (v11 >= *(unsigned int *)(v4 + 2784))
        v12 = sub_22F162D2C(*(_QWORD *)(a1 + 8), 1u);
      else
        v12 = *(_QWORD *)(v4 + 2776) + 24 * v11;
      v16 = *(unsigned __int16 *)(v12 + 16);
      return v16 == 82 || v16 == 132;
    }
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(int **)(a2 + 112);
      while (1)
      {
        v10 = *v8;
        v8 += 30;
        v9 = v10;
        if (v10 != 6)
          break;
        if (v6 == ++v7)
          goto LABEL_16;
      }
      if (((1 << v9) & 0xB7) != 0)
        v7 = 0;
    }
    else
    {
LABEL_16:
      v7 = 0;
    }
    v13 = *(_QWORD *)(a2 + 112) + 120 * v7;
    v15 = *(_WORD *)(v13 + 32);
    v14 = v13 + 32;
    if ((v15 & 1) == 0 && *(_DWORD *)(v14 + 16))
      return sub_22E81CB8C(a1, 0);
  }
  return v2 == 61 || v2 == 151;
}

unsigned int *sub_22E8890B0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  char v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  __int16 v37;
  void *v38[2];
  _BYTE v39[24];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)(a3 + 6);
  sub_22E8221D8((uint64_t *)a1, (uint64_t)(a3 + 6));
  v38[0] = v39;
  v38[1] = (void *)0x200000000;
  v39[16] = 1;
  LODWORD(v34) = 0;
  v35 = 0;
  v36 = 0;
  sub_22E818334(a1, a3, &v34, a4, 5, v38, 1);
  if ((*((_BYTE *)a3 + 2) & 0x20) != 0 && (*(_BYTE *)(*((_QWORD *)a3 + 1) + 74) & 1) != 0)
  {
    v20 = sub_22E81B924(a1, (uint64_t)a3, a4, 5, 0);
    v18 = 0;
    if ((v20 & 1) != 0)
      goto LABEL_31;
  }
  if (*(_WORD *)(a1 + 32) == 62)
  {
    v9 = ((unint64_t)*a3 >> 12) & 0x3F;
    if ((v9 - 23) > 4)
      v10 = 0;
    else
      v10 = dword_22F46228C[v9 - 23] + a3[30];
    if (*(_DWORD *)a2 && *(_DWORD *)(a2 + 4))
    {
      sub_22E8175C8(a1, (uint64_t *)a2, v10);
      sub_22E820B10((_QWORD *)a2);
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v33 = 0;
    v18 = (unsigned int *)sub_22EA0F52C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 3, a3, 0, 0, 0, (unint64_t *)&v33);
    if (!*((_BYTE *)a3 + 584))
    {
      sub_22EA7E84C(*((_QWORD **)a3 + 28), *((_QWORD *)a3 + 72), v18);
      *((_BYTE *)a3 + 584) = 1;
    }
    if (v33)
    {
      v34 = v33;
      v35 = v18;
      v17 = sub_22EA2D7B4(*(_QWORD **)(a1 + 88), (unint64_t *)&v34, 2uLL);
LABEL_30:
      v18 = (unsigned int *)v17;
    }
  }
  else
  {
    sub_22E82103C(v8, a2);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = **(_QWORD **)(v11 + 56);
    if ((v12 & 0x4000) == 0 || *(_WORD *)(a1 + 32) != 72)
    {
      if ((v12 & 0x100) != 0
        && (v16 = *(unsigned __int16 *)(a1 + 32), v16 <= 0x12)
        && ((1 << v16) & 0x76000) != 0
        && (*(_QWORD *)a3 & 7) == 2
        && sub_22E8AD5F4((uint64_t *)a3) == 1)
      {
        v17 = sub_22F2E35F0(a1, (uint64_t)a3);
      }
      else
      {
        v17 = sub_22E81BCEC(a1, (uint64_t *)a3, 0, 0, 0, v38);
      }
      goto LABEL_30;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(v11, (unsigned int *)(a1 + 16));
    v13 = *(_DWORD *)(a1 + 40);
    if (sub_22F140B7C(a1 + 16, 7) || sub_22F140B7C(a1 + 16, 10) || sub_22F140B7C(a1 + 16, 6))
    {
      if (!*((_BYTE *)a3 + 584))
      {
        sub_22EA7E84C(*((_QWORD **)a3 + 28), *((_QWORD *)a3 + 72), 0);
        *((_BYTE *)a3 + 584) = 1;
      }
      v33 = 0;
      v30 = 0;
      if (sub_22E8AD898((unint64_t *)a3, 0, v13, &v33, &v30))
      {
        v14 = v30;
        v15 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v15 + 312) = v13;
        *(_DWORD *)(v15 + 316) = v14;
        if (*(char *)(v15 + 311) < 0)
        {
          **(_BYTE **)(v15 + 288) = 0;
          *(_QWORD *)(v15 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v15 + 288) = 0;
          *(_BYTE *)(v15 + 311) = 0;
        }
        v21 = (unsigned __int8 *)(v15 + 320);
        v34 = v15 + 320;
        v35 = 0;
        v36 = v15;
        v37 = 1;
        *(_BYTE *)(v15 + 320) = 0;
        *(_DWORD *)(v15 + 664) = 0;
        v22 = *(unsigned int *)(v15 + 776);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)(v15 + 768);
          v24 = 56 * v22;
          do
          {
            if (*(char *)(v23 + v24 - 9) < 0)
              operator delete(*(void **)(v23 + v24 - 32));
            v24 -= 56;
          }
          while (v24);
          LODWORD(v22) = *v21;
        }
        *(_DWORD *)(v15 + 776) = 0;
        v25 = v33;
        v21[v22 + 1] = 1;
        *(_BYTE *)(v15 + 320) = v22 + 1;
        *(_QWORD *)&v21[8 * v22 + 16] = v25;
        sub_22E3BB0B8((uint64_t)&v34);
      }
      if (sub_22F140B7C(a1 + 16, 10))
      {
        v17 = sub_22E84BFB8(a1, v13, v8);
      }
      else if (sub_22F140B7C(a1 + 16, 6))
      {
        v17 = sub_22E84C368(a1, v13, v8);
      }
      else
      {
        v17 = sub_22E84B80C(a1, v13, v8);
      }
      goto LABEL_30;
    }
    v26 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v26 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v26 + 316) = 1645;
    if (*(char *)(v26 + 311) < 0)
    {
      **(_BYTE **)(v26 + 288) = 0;
      *(_QWORD *)(v26 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v26 + 288) = 0;
      *(_BYTE *)(v26 + 311) = 0;
    }
    v31[0] = v26 + 320;
    v31[1] = 0;
    v31[2] = v26;
    v32 = 1;
    *(_BYTE *)(v26 + 320) = 0;
    *(_DWORD *)(v26 + 664) = 0;
    v27 = *(unsigned int *)(v26 + 776);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(v26 + 768);
      v29 = 56 * v27;
      do
      {
        if (*(char *)(v28 + v29 - 9) < 0)
          operator delete(*(void **)(v28 + v29 - 32));
        v29 -= 56;
      }
      while (v29);
    }
    *(_DWORD *)(v26 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v31);
    LOWORD(v34) = 62;
    sub_22E885940(a1, (unsigned __int16 *)&v34, 1, 0);
    v18 = 0;
  }
LABEL_31:
  if (v38[0] != v39)
    free(v38[0]);
  return v18;
}

uint64_t sub_22E8895A4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  char *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  int **v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v118;
  int **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  _QWORD v129[3];
  __int16 v130;
  _BYTE v131[144];
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  _QWORD v136[3];
  __int16 v137;
  _QWORD v138[3];
  __int16 v139;
  _QWORD v140[3];
  __int16 v141;
  uint64_t v142[4];
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  sub_22E836A6C((uint64_t)v131, (_QWORD *)a1, 1);
  v7 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(int **)(a2 + 112);
    while (1)
    {
      v11 = *v9;
      v9 += 30;
      v10 = v11;
      if (v11 != 6)
        break;
      if (v7 == ++v8)
        goto LABEL_5;
    }
    if (((1 << v10) & 0xB7) != 0)
      LODWORD(v8) = 0;
  }
  else
  {
LABEL_5:
    LODWORD(v8) = 0;
  }
  v12 = *(_QWORD *)(a2 + 112) + 120 * v8 + 32;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8) & 0x100000000) != 0)
  {
    v13 = *(unint64_t **)a2;
    if (!sub_22E8AD5F4(*(uint64_t **)a2))
    {
      sub_22E8AD898(v13, 7, *(_DWORD *)(a2 + 64), (uint64_t *)&v157, v142);
      v14 = *(_DWORD *)(*(_QWORD *)a2 + 88);
      if (v14)
        *(_DWORD *)(a2 + 72) = v14;
    }
  }
  v128 = a3;
  if ((*(_WORD *)v12 & 1) == 0 && *(_DWORD *)(v12 + 16))
  {
    v15 = *(unsigned int *)(a2 + 120);
    v126 = a2;
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *(int **)(a2 + 112);
      while (1)
      {
        v19 = *v17;
        v17 += 30;
        v18 = v19;
        if (v19 != 6)
          break;
        if (v15 == ++v16)
          goto LABEL_18;
      }
      v20 = 0;
      if (((1 << v18) & 0xB7) == 0)
        v20 = v16;
    }
    else
    {
LABEL_18:
      v20 = 0;
    }
    v21 = *(_QWORD *)(a2 + 112) + 120 * v20 + 32;
    sub_22E885C30(a1, 776);
LABEL_22:
    if (!sub_22E81CB8C(a1, 0))
      goto LABEL_100;
    v22 = *(_DWORD *)(a1 + 16);
    v142[3] = 0;
    v143 = 0;
    v142[2] = 0;
    v142[0] = 0;
    v144 = a1 + 960;
    v156 = 0;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    v149 = 0u;
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = 0;
    LODWORD(v157) = 0;
    v158 = 0uLL;
    sub_22E818334(a1, v142, &v157, 3, 0, 0, 0);
    if (*(_WORD *)(a1 + 32) == 62)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v23 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v23 + 312) = v22;
      *(_DWORD *)(v23 + 316) = 1468;
      if (*(char *)(v23 + 311) < 0)
      {
        **(_BYTE **)(v23 + 288) = 0;
        *(_QWORD *)(v23 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v23 + 288) = 0;
        *(_BYTE *)(v23 + 311) = 0;
      }
      v140[0] = v23 + 320;
      v140[1] = 0;
      v140[2] = v23;
      v141 = 1;
      *(_BYTE *)(v23 + 320) = 0;
      *(_DWORD *)(v23 + 664) = 0;
      v26 = *(unsigned int *)(v23 + 776);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v23 + 768);
        v28 = 56 * v26;
        do
        {
          if (*(char *)(v27 + v28 - 9) < 0)
            operator delete(*(void **)(v27 + v28 - 32));
          v28 -= 56;
        }
        while (v28);
      }
      *(_DWORD *)(v23 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v140);
      v29 = 2;
      goto LABEL_97;
    }
    v24 = v142[0];
    if ((v142[0] & 7) != 0 && (v142[0] & 7) != 5)
    {
      v25 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v25 + 312) = v148;
      *(_DWORD *)(v25 + 316) = 31;
      if (*(char *)(v25 + 311) < 0)
      {
        **(_BYTE **)(v25 + 288) = 0;
        *(_QWORD *)(v25 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v25 + 288) = 0;
        *(_BYTE *)(v25 + 311) = 0;
      }
      v138[0] = v25 + 320;
      v138[1] = 0;
      v138[2] = v25;
      v139 = 1;
      *(_BYTE *)(v25 + 320) = 0;
      *(_DWORD *)(v25 + 664) = 0;
      v30 = *(unsigned int *)(v25 + 776);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v25 + 768);
        v32 = 56 * v30;
        do
        {
          if (*(char *)(v31 + v32 - 9) < 0)
            operator delete(*(void **)(v31 + v32 - 32));
          v32 -= 56;
        }
        while (v32);
      }
      *(_DWORD *)(v25 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v138);
      v24 = v142[0] & 0xFFFFFFC0;
      v142[0] &= 0xFFFFFFFFFFFFFFC0;
      *(_QWORD *)&v148 = 0;
    }
    if ((v24 & 0x18) != 0)
    {
      v33 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v33 + 312) = DWORD1(v148);
      *(_DWORD *)(v33 + 316) = 31;
      if (*(char *)(v33 + 311) < 0)
      {
        **(_BYTE **)(v33 + 288) = 0;
        *(_QWORD *)(v33 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v33 + 288) = 0;
        *(_BYTE *)(v33 + 311) = 0;
      }
      v136[0] = v33 + 320;
      v136[1] = 0;
      v136[2] = v33;
      v137 = 1;
      *(_BYTE *)(v33 + 320) = 0;
      *(_DWORD *)(v33 + 664) = 0;
      v34 = *(unsigned int *)(v33 + 776);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v33 + 768);
        v36 = 56 * v34;
        do
        {
          if (*(char *)(v35 + v36 - 9) < 0)
            operator delete(*(void **)(v35 + v36 - 32));
          v36 -= 56;
        }
        while (v36);
      }
      *(_DWORD *)(v33 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v136);
      v24 = v142[0] & 0xFFFFFFC0;
      v142[0] &= 0xFFFFFFFFFFFFFFC0;
      *(_QWORD *)&v148 = 0;
    }
    v163 = *((_QWORD *)&v147 + 1);
    v157 = v142;
    v161 = 0;
    v162 = 0;
    v158 = 0u;
    v159 = 0u;
    v160 = 0;
    v164 = 4;
    v165 = 0;
    v166 = 0;
    v167 = 0;
    v168 = &v170;
    v169 = 0x800000000;
    v171 = v171 & 0xFC00 | ((*(_QWORD *)&v24 & 0x3F000) == 204800);
    v172 = 0;
    v173 = 0;
    v174 = v144;
    v178 = 0;
    v175 = 0u;
    v176 = 0u;
    v177 = 0u;
    while (1)
    {
      sub_22E8227E4(a1, (uint64_t)&v157, (unint64_t)sub_22E823490, 0);
      sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v157, 0, 0);
      v37 = sub_22EA2DD10(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v157);
      if (!v37 || v160 || !v161)
        goto LABEL_88;
      v38 = *(unsigned int *)(v21 + 16);
      if ((_DWORD)v38)
      {
        v39 = (uint64_t *)(*(_QWORD *)(v21 + 40) + 16);
        while (*(v39 - 2) != v161)
        {
          v39 += 4;
          if (!--v38)
            goto LABEL_62;
        }
        if (!*v39)
        {
          *v39 = v37;
          goto LABEL_88;
        }
        v40 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v40 + 312) = v162;
        *(_DWORD *)(v40 + 316) = 58;
        if (*(char *)(v40 + 311) < 0)
        {
          **(_BYTE **)(v40 + 288) = 0;
          *(_QWORD *)(v40 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v40 + 288) = 0;
          *(_BYTE *)(v40 + 311) = 0;
        }
        v41 = (unsigned __int8 *)(v40 + 320);
        v132 = (unsigned __int8 *)(v40 + 320);
        v133 = 0;
        v134 = v40;
        v135 = 1;
        *(_BYTE *)(v40 + 320) = 0;
        *(_DWORD *)(v40 + 664) = 0;
        v45 = *(unsigned int *)(v40 + 776);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)(v40 + 768);
          v47 = 56 * v45;
          do
          {
            if (*(char *)(v46 + v47 - 9) < 0)
              operator delete(*(void **)(v46 + v47 - 32));
            v47 -= 56;
          }
          while (v47);
          goto LABEL_81;
        }
      }
      else
      {
LABEL_62:
        v40 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v40 + 312) = v162;
        *(_DWORD *)(v40 + 316) = 1626;
        if (*(char *)(v40 + 311) < 0)
        {
          **(_BYTE **)(v40 + 288) = 0;
          *(_QWORD *)(v40 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v40 + 288) = 0;
          *(_BYTE *)(v40 + 311) = 0;
        }
        v41 = (unsigned __int8 *)(v40 + 320);
        v132 = (unsigned __int8 *)(v40 + 320);
        v133 = 0;
        v134 = v40;
        v135 = 1;
        *(_BYTE *)(v40 + 320) = 0;
        *(_DWORD *)(v40 + 664) = 0;
        v42 = *(unsigned int *)(v40 + 776);
        if ((_DWORD)v42)
        {
          v43 = *(_QWORD *)(v40 + 768);
          v44 = 56 * v42;
          do
          {
            if (*(char *)(v43 + v44 - 9) < 0)
              operator delete(*(void **)(v43 + v44 - 32));
            v44 -= 56;
          }
          while (v44);
LABEL_81:
          v41 = v132;
          *(_DWORD *)(v40 + 776) = 0;
          v48 = v160;
          v49 = v161;
          if (!v41)
          {
            v41 = (unsigned __int8 *)sub_22E3B8AAC(v133);
            v132 = v41;
          }
          goto LABEL_84;
        }
      }
      *(_DWORD *)(v40 + 776) = 0;
      v48 = v160;
      v49 = v161;
LABEL_84:
      if (v48)
        v50 = 0;
      else
        v50 = v49;
      v41[*v41 + 1] = 5;
      v51 = v132;
      v52 = *v132;
      *v132 = v52 + 1;
      *(_QWORD *)&v51[8 * v52 + 16] = v50;
      sub_22E3BB0B8((uint64_t)&v132);
LABEL_88:
      if (*(_WORD *)(a1 + 32) != 65)
      {
        if (sub_22E884BB4(a1, 1533))
        {
          LOWORD(v132) = 23;
          v29 = 3;
          if ((sub_22E885940(a1, (unsigned __int16 *)&v132, 1, 3) & 1) == 0)
          {
            if (*(_WORD *)(a1 + 32) == 62)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            }
            v29 = 0;
          }
        }
        else
        {
          v29 = 2;
        }
        sub_22E827F78((uint64_t)&v157);
LABEL_97:
        if (DWORD1(v147))
          free(*((void **)&v146 + 1));
        sub_22E8D1BC4(v144, (uint64_t)&v144);
        sub_22E80F94C((uint64_t *)&v145);
        sub_22E80F94C(&v143);
        if (v29 == 3)
        {
LABEL_100:
          a2 = v126;
          sub_22EA2ED98(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v126, *(_DWORD *)(a1 + 16));
          sub_22E885CF4(a1);
          break;
        }
        goto LABEL_22;
      }
      sub_22E827FFC((uint64_t)&v157);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      LODWORD(v178) = *(_DWORD *)(a1 + 40);
    }
  }
  v53 = *(unsigned __int16 *)(a1 + 32);
  if (v53 != 23)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) == 0)
      goto LABEL_103;
    if (v53 != 61)
    {
      v55 = a2;
      if (v53 == 63)
        goto LABEL_138;
      if (v53 != 151)
      {
LABEL_103:
        v54 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v54 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v54 + 316) = 1502;
        if (*(char *)(v54 + 311) < 0)
        {
          **(_BYTE **)(v54 + 288) = 0;
          *(_QWORD *)(v54 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v54 + 288) = 0;
          *(_BYTE *)(v54 + 311) = 0;
        }
        v129[0] = v54 + 320;
        v129[1] = 0;
        v129[2] = v54;
        v130 = 1;
        *(_BYTE *)(v54 + 320) = 0;
        *(_DWORD *)(v54 + 664) = 0;
        v56 = *(unsigned int *)(v54 + 776);
        if ((_DWORD)v56)
        {
          v57 = *(_QWORD *)(v54 + 768);
          v58 = 56 * v56;
          do
          {
            if (*(char *)(v57 + v58 - 9) < 0)
              operator delete(*(void **)(v57 + v58 - 32));
            v58 -= 56;
          }
          while (v58);
        }
        *(_DWORD *)(v54 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v129);
        LOWORD(v157) = 23;
        sub_22E885940(a1, (unsigned __int16 *)&v157, 1, 3);
        if (*(_WORD *)(a1 + 32) != 23)
        {
          v79 = 0;
          v77 = 0;
          goto LABEL_251;
        }
      }
    }
  }
  v59 = *(_QWORD *)(a2 + 1104);
  v55 = a2;
  if ((v59 & 4) != 0)
  {
    v62 = v59 & 0xFFFFFFFFFFFFFFF8;
    v60 = *(_QWORD *)v62;
    v61 = *(_QWORD *)v62 + 8 * *(unsigned int *)(v62 + 8);
  }
  else
  {
    v60 = a2 + 1104;
    v61 = a2 + 1104 + 8 * (v59 > 7);
  }
  for (; v60 != v61; v60 += 8)
  {
    v63 = *(uint64_t **)v60;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v60 + 72) + 12) & 2) != 0)
    {
      v64 = *((unsigned __int16 *)v63 + 14) | (*((unsigned __int8 *)v63 + 30) << 16);
      if ((v64 & 0x5FFFF) != 0x50011)
      {
        v65 = v64 & 0x70000;
        if (v65 != 0x10000 && v65 != 0x20000)
        {
          v66 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v66 + 312) = *((_DWORD *)v63 + 4);
          *(_DWORD *)(v66 + 316) = 1891;
          if (*(char *)(v66 + 311) < 0)
          {
            **(_BYTE **)(v66 + 288) = 0;
            *(_QWORD *)(v66 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v66 + 288) = 0;
            *(_BYTE *)(v66 + 311) = 0;
          }
          v67 = (unsigned __int8 *)(v66 + 320);
          v157 = (void *)(v66 + 320);
          *(_QWORD *)&v158 = 0;
          *((_QWORD *)&v158 + 1) = v66;
          LOWORD(v159) = 1;
          *(_BYTE *)(v66 + 320) = 0;
          *(_DWORD *)(v66 + 664) = 0;
          v68 = *(unsigned int *)(v66 + 776);
          if ((_DWORD)v68)
          {
            v69 = *(_QWORD *)(v66 + 768);
            v70 = 56 * v68;
            do
            {
              if (*(char *)(v69 + v70 - 9) < 0)
                operator delete(*(void **)(v69 + v70 - 32));
              v70 -= 56;
            }
            while (v70);
            v67 = (unsigned __int8 *)v157;
            *(_DWORD *)(v66 + 776) = 0;
            v71 = *v63;
            if (!v67)
            {
              v67 = (unsigned __int8 *)sub_22E3B8AAC(v158);
              v157 = v67;
            }
          }
          else
          {
            *(_DWORD *)(v66 + 776) = 0;
            v71 = *v63;
          }
          v67[*v67 + 1] = 5;
          v72 = v157;
          v73 = *(unsigned __int8 *)v157;
          *(_BYTE *)v157 = v73 + 1;
          v72[v73 + 2] = v71;
          sub_22E3BB0B8((uint64_t)&v157);
        }
      }
    }
  }
LABEL_138:
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 148) & 0x1000) != 0)
  {
    v74 = *(_WORD *)(a1 + 32) != 63 && *(_DWORD *)v128 == 1;
    if (v74 && sub_22F31E270(*(_QWORD *)(a1 + 88), (uint64_t **)v55))
    {
      v118 = *(_QWORD *)(v128 + 8);
      v119 = *(int ***)v118;
      v120 = *(unsigned int *)(v118 + 8);
      sub_22E885C30(a1, 4194313);
      v121 = **(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888);
      *(_WORD *)(v55 + 1088) = *(_WORD *)(v55 + 1088) & 0xFFF3 | 4;
      v77 = sub_22EA13184(*(_QWORD *)(a1 + 88), v121, (uint64_t **)v55, v119, v120);
      if (!*(_BYTE *)(v55 + 2048))
      {
        sub_22EA7E84C(*(_QWORD **)(v55 + 1688), *(_QWORD *)(v55 + 2040), (unsigned int *)v77);
        *(_BYTE *)(v55 + 2048) = 1;
      }
      v122 = *(uint64_t **)v55;
      if (!*(_BYTE *)(*(_QWORD *)v55 + 584))
      {
        sub_22EA7E84C((_QWORD *)v122[28], v122[72], 0);
        *((_BYTE *)v122 + 584) = 1;
      }
      if (*(_BYTE *)(a1 + 2625)
        && (!v77 || sub_22EA30968(*(_QWORD *)(a1 + 88), v77))
        && sub_22E87A070(a1))
      {
        sub_22E885CF4(a1);
        sub_22F31E348(*(_QWORD *)(a1 + 88), v77);
        goto LABEL_156;
      }
      v157 = (char *)&v158 + 8;
      *(_QWORD *)&v158 = 0x400000000;
      sub_22F2F00B4((unsigned __int16 *)a1, (uint64_t)&v157);
      if (v77)
      {
        v124 = *(_DWORD *)(v77 + 28);
        v125 = v77;
        if ((v124 & 0x7Eu) - 58 <= 0xFFFFFFF9)
        {
          if ((v124 & 0x7F) == 0x1D)
            v125 = *(_QWORD *)(v77 + 48);
          else
            v125 = 0;
        }
        sub_22EA30480(*(_QWORD **)(a1 + 88), v125, 0, 0);
        sub_22F346CB4(*(_QWORD *)(a1 + 88), v125, v77, (uint64_t)&v157);
      }
      if (v157 != (char *)&v158 + 8)
        free(v157);
LABEL_155:
      sub_22E885CF4(a1);
LABEL_156:
      v79 = 0;
      goto LABEL_251;
    }
  }
  if (*(_QWORD *)(a1 + 2688))
  {
    if (!*(_QWORD *)(v128 + 8))
    {
      v75 = *(unsigned __int16 *)(a1 + 32);
      if ((v75 == 23 || v75 == 151 || v75 == 61)
        && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 216) + 8) & 0x7F) == 0x53)
      {
        sub_22E885C30(a1, 4194313);
        v76 = **(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888);
        *(_WORD *)(v55 + 1088) = *(_WORD *)(v55 + 1088) & 0xFFF3 | 4;
        v77 = sub_22EA13184(*(_QWORD *)(a1 + 88), v76, (uint64_t **)v55, 0, 0);
        if (!*(_BYTE *)(v55 + 2048))
        {
          sub_22EA7E84C(*(_QWORD **)(v55 + 1688), *(_QWORD *)(v55 + 2040), (unsigned int *)v77);
          *(_BYTE *)(v55 + 2048) = 1;
        }
        v78 = *(uint64_t **)v55;
        if (!*(_BYTE *)(*(_QWORD *)v55 + 584))
        {
          sub_22EA7E84C((_QWORD *)v78[28], v78[72], 0);
          *((_BYTE *)v78 + 584) = 1;
        }
        if (v77)
        {
          sub_22F2EA800(a1, v77);
          *(_BYTE *)(*(_QWORD *)(a1 + 2688) + 16) = 1;
          goto LABEL_155;
        }
        sub_22E885CF4(a1);
      }
    }
  }
  v142[0] = a1;
  sub_22E885C30(a1, 4194313);
  if (*(_WORD *)(a1 + 32) != 63)
  {
    v81 = 0;
    v84 = 0;
    goto LABEL_217;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v80 = *(unsigned __int16 *)(a1 + 32);
  if (v80 == 132)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v81 = *(_DWORD *)(a1 + 40);
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
      v82 = 1927;
    else
      v82 = 1807;
    v83 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v83 + 312) = v81;
    *(_DWORD *)(v83 + 316) = v82;
    if (*(char *)(v83 + 311) < 0)
    {
      **(_BYTE **)(v83 + 288) = 0;
      *(_QWORD *)(v83 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v83 + 288) = 0;
      *(_BYTE *)(v83 + 311) = 0;
    }
    v87 = (unsigned __int8 *)(v83 + 320);
    v157 = (void *)(v83 + 320);
    *(_QWORD *)&v158 = 0;
    *((_QWORD *)&v158 + 1) = v83;
    LOWORD(v159) = 1;
    *(_BYTE *)(v83 + 320) = 0;
    *(_DWORD *)(v83 + 664) = 0;
    v88 = *(unsigned int *)(v83 + 776);
    if ((_DWORD)v88)
    {
      v89 = *(_QWORD *)(v83 + 768);
      v90 = 56 * v88;
      do
      {
        if (*(char *)(v89 + v90 - 9) < 0)
          operator delete(*(void **)(v89 + v90 - 32));
        v90 -= 56;
      }
      while (v90);
      v87 = (unsigned __int8 *)v157;
      *(_DWORD *)(v83 + 776) = 0;
      if (!v87)
      {
        v87 = (unsigned __int8 *)sub_22E3B8AAC(v158);
        v157 = v87;
      }
    }
    else
    {
      *(_DWORD *)(v83 + 776) = 0;
    }
    v84 = 2;
    v87[*v87 + 1] = 2;
    v95 = v157;
    v96 = *(unsigned __int8 *)v157;
    *(_BYTE *)v157 = v96 + 1;
    v95[v96 + 2] = 1;
    sub_22E3BB0B8((uint64_t)&v157);
  }
  else
  {
    if (v80 == 82)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v81 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v81 = 0;
    }
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
      v85 = 1927;
    else
      v85 = 1807;
    v86 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v86 + 312) = v81;
    *(_DWORD *)(v86 + 316) = v85;
    if (*(char *)(v86 + 311) < 0)
    {
      **(_BYTE **)(v86 + 288) = 0;
      *(_QWORD *)(v86 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v86 + 288) = 0;
      *(_BYTE *)(v86 + 311) = 0;
    }
    v91 = (unsigned __int8 *)(v86 + 320);
    v157 = (void *)(v86 + 320);
    *(_QWORD *)&v158 = 0;
    *((_QWORD *)&v158 + 1) = v86;
    LOWORD(v159) = 1;
    *(_BYTE *)(v86 + 320) = 0;
    *(_DWORD *)(v86 + 664) = 0;
    v92 = *(unsigned int *)(v86 + 776);
    if ((_DWORD)v92)
    {
      v93 = *(_QWORD *)(v86 + 768);
      v94 = 56 * v92;
      do
      {
        if (*(char *)(v93 + v94 - 9) < 0)
          operator delete(*(void **)(v93 + v94 - 32));
        v94 -= 56;
      }
      while (v94);
      v91 = (unsigned __int8 *)v157;
      *(_DWORD *)(v86 + 776) = 0;
      if (!v91)
      {
        v91 = (unsigned __int8 *)sub_22E3B8AAC(v158);
        v157 = v91;
      }
    }
    else
    {
      *(_DWORD *)(v86 + 776) = 0;
    }
    v91[*v91 + 1] = 2;
    v97 = v157;
    v98 = *(unsigned __int8 *)v157;
    *(_BYTE *)v157 = v98 + 1;
    v97[v98 + 2] = 0;
    sub_22E3BB0B8((uint64_t)&v157);
    v84 = 1;
  }
  if (*(_WORD *)(a1 + 32) == 65)
  {
    v99 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v99 + 312) = v81;
    *(_DWORD *)(v99 + 316) = 1471;
    if (*(char *)(v99 + 311) < 0)
    {
      **(_BYTE **)(v99 + 288) = 0;
      *(_QWORD *)(v99 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v99 + 288) = 0;
      *(_BYTE *)(v99 + 311) = 0;
    }
    v102 = (unsigned __int8 *)(v99 + 320);
    v157 = (void *)(v99 + 320);
    *(_QWORD *)&v158 = 0;
    *((_QWORD *)&v158 + 1) = v99;
    LOWORD(v159) = 1;
    *(_BYTE *)(v99 + 320) = 0;
    *(_DWORD *)(v99 + 664) = 0;
    v103 = *(unsigned int *)(v99 + 776);
    if ((_DWORD)v103)
    {
      v104 = *(_QWORD *)(v99 + 768);
      v105 = 56 * v103;
      do
      {
        if (*(char *)(v104 + v105 - 9) < 0)
          operator delete(*(void **)(v104 + v105 - 32));
        v105 -= 56;
      }
      while (v105);
      v102 = (unsigned __int8 *)v157;
      *(_DWORD *)(v99 + 776) = 0;
      if (!v102)
      {
        v102 = (unsigned __int8 *)sub_22E3B8AAC(v158);
        v157 = v102;
      }
    }
    else
    {
      *(_DWORD *)(v99 + 776) = 0;
    }
    v102[*v102 + 1] = 2;
    v106 = v157;
    v107 = *(unsigned __int8 *)v157;
    *(_BYTE *)v157 = v107 + 1;
    v106[v107 + 2] = v80 == 132;
    sub_22E3BB0B8((uint64_t)&v157);
    LOWORD(v157) = 62;
    goto LABEL_216;
  }
  if (v80 == 132)
    v100 = 6;
  else
    v100 = 7;
  if (v80 == 132)
    v101 = "delete";
  else
    v101 = "default";
  if (sub_22E8847B4(a1, 0x3Eu, 16, v101, v100))
  {
    LOWORD(v157) = 62;
LABEL_216:
    sub_22E885940(a1, (unsigned __int16 *)&v157, 1, 0);
  }
LABEL_217:
  LOWORD(v157) = 0;
  v158 = 0uLL;
  v108 = *(_QWORD *)(v128 + 8);
  if (v108)
  {
    v109 = *(int ***)v108;
    v110 = *(unsigned int *)(v108 + 8);
  }
  else
  {
    v109 = 0;
    v110 = 0;
  }
  v77 = sub_22EA2F1D0(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v55, v109, v110, &v157, v84);
  if ((_BYTE)v157)
  {
    if (!v84)
      sub_22F2F173C(a1);
    goto LABEL_223;
  }
  if (!*(_BYTE *)(v55 + 2048))
  {
    sub_22EA7E84C(*(_QWORD **)(v55 + 1688), *(_QWORD *)(v55 + 2040), (unsigned int *)v77);
    *(_BYTE *)(v55 + 2048) = 1;
  }
  v111 = *(uint64_t **)v55;
  if (!*(_BYTE *)(*(_QWORD *)v55 + 584))
  {
    sub_22EA7E84C((_QWORD *)v111[28], v111[72], 0);
    *((_BYTE *)v111 + 584) = 1;
  }
  if (v84)
  {
    sub_22F329AB0(*(unsigned int **)(a1 + 88), v77, v81, v84);
    if (v77)
      v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 64))(v77);
    else
      v123 = 0;
    sub_22EA30A38(*(_QWORD *)(a1 + 88), v77, v123, 0);
LABEL_223:
    v79 = 0;
    goto LABEL_249;
  }
  if (v77)
  {
    if ((*(_DWORD *)(v77 + 28) & 0x7F) == 0x1D
      && (v112 = *(_QWORD *)(v77 + 56),
          v113 = (*(_DWORD *)(v112 + 12) & 0x1FFFFFFF) - 1,
          v114 = v112 + 16,
          (*(_BYTE *)(*(_QWORD *)(v114 + 8 * v113) + 29) & 2) != 0)
      && (*(_BYTE *)(*(_QWORD *)v114 + 29) & 2) != 0)
    {
      ++*(_DWORD *)(a1 + 952);
      v79 = 1;
    }
    else
    {
      v79 = 0;
    }
    if (!*(_BYTE *)(a1 + 2625) || !sub_22EA30968(*(_QWORD *)(a1 + 88), v77))
      goto LABEL_239;
  }
  else
  {
    v79 = 0;
    if (!*(_BYTE *)(a1 + 2625))
      goto LABEL_239;
  }
  if (sub_22E87A070(a1))
  {
    sub_22E885CF4(a1);
    v142[0] = 0;
    sub_22F31E348(*(_QWORD *)(a1 + 88), v77);
    v116 = sub_22EA30A38(*(_QWORD *)(a1 + 88), v77, 0, 0);
    goto LABEL_248;
  }
LABEL_239:
  v115 = *(unsigned __int16 *)(a1 + 32);
  if (v115 == 61)
  {
    sub_22E8338EC(a1, v77);
    if (*(_WORD *)(a1 + 32) != 23)
    {
      sub_22E885CF4(a1);
      v142[0] = 0;
      sub_22EA30A38(*(_QWORD *)(a1 + 88), v77, 0, 0);
      goto LABEL_249;
    }
    goto LABEL_245;
  }
  if (v115 != 151)
  {
    sub_22EAB2DB0(*(_QWORD **)(a1 + 88), v77);
LABEL_245:
    if (a4)
      sub_22E80F20C(a1, a4, v77, 0, 1);
    v116 = sub_22E8798D0(a1, v77, v142);
    goto LABEL_248;
  }
  v116 = sub_22E879A28(a1, v77, v142);
LABEL_248:
  v77 = v116;
LABEL_249:
  if (v142[0])
    sub_22E885CF4(v142[0]);
LABEL_251:
  *(_DWORD *)(a1 + 952) -= v79;
  sub_22E836E3C((uint64_t)v131);
  return v77;
}

uint64_t sub_22E88A8D8(uint64_t a1, int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v3 = *(unsigned __int16 *)(a1 + 32);
  v4 = v3 > 0x12;
  v5 = (1 << v3) & 0x76000;
  if (v4 || v5 == 0)
  {
    v13 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v13 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v13 + 316) = 20;
    if (*(char *)(v13 + 311) < 0)
    {
      **(_BYTE **)(v13 + 288) = 0;
      *(_QWORD *)(v13 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 288) = 0;
      *(_BYTE *)(v13 + 311) = 0;
    }
    v31 = v13 + 320;
    v32 = 0;
    v33 = v13;
    v9 = 1;
    v34 = 1;
    *(_BYTE *)(v13 + 320) = 0;
    *(_DWORD *)(v13 + 664) = 0;
    v22 = *(unsigned int *)(v13 + 776);
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v13 + 768);
      v24 = 56 * v22;
      do
      {
        if (*(char *)(v23 + v24 - 9) < 0)
          operator delete(*(void **)(v23 + v24 - 32));
        v24 -= 56;
      }
      while (v24);
      LODWORD(v22) = *(unsigned __int8 *)(v13 + 320);
    }
    *(_DWORD *)(v13 + 776) = 0;
    *(_BYTE *)(v13 + 321 + v22) = 2;
    *(_QWORD *)(v13 + 336 + 8 * v22) = 0;
    v25 = (v22 + 1);
    *(_BYTE *)(v13 + 321 + v25) = 1;
    *(_BYTE *)(v13 + 320) = v22 + 2;
    *(_QWORD *)(v13 + 336 + 8 * v25) = "'asm'";
    goto LABEL_32;
  }
  v8 = sub_22E83E898(a1, 0);
  v9 = v8;
  if ((v8 & 1) == 0)
  {
    v10 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    v11 = *(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if ((v11 & 0x1C0000) != 0)
    {
      v12 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v12 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 316) = 1436;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      v14 = (unsigned __int8 *)(v12 + 320);
      v31 = v12 + 320;
      v32 = 0;
      v33 = v12;
      v34 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v15 = *(unsigned int *)(v12 + 776);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v12 + 768);
        v17 = 56 * v15;
        do
        {
          if (*(char *)(v16 + v17 - 9) < 0)
            operator delete(*(void **)(v16 + v17 - 32));
          v17 -= 56;
        }
        while (v17);
        LODWORD(v15) = *v14;
      }
      *(_DWORD *)(v12 + 776) = 0;
      v18 = (*v10 & 0x1C0000) == 0x40000;
      v14[v15 + 1] = 2;
      *(_BYTE *)(v12 + 320) = v15 + 1;
      *(_QWORD *)&v14[8 * v15 + 16] = v18;
LABEL_23:
      sub_22F0D4E74((uint64_t)v10);
      v20 = v19;
      v21 = v12 + 656;
      v9 = 1;
      sub_22E4D6448(v21, v20, 1);
LABEL_32:
      sub_22E3BB0B8((uint64_t)&v31);
      return v9;
    }
    if (a2 && !(v10[4] * ((v11 >> 21) & 7)))
    {
      v12 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v12 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 316) = 1436;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      v27 = (unsigned __int8 *)(v12 + 320);
      v31 = v12 + 320;
      v32 = 0;
      v33 = v12;
      v34 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v28 = *(unsigned int *)(v12 + 776);
      if ((_DWORD)v28)
      {
        v29 = *(_QWORD *)(v12 + 768);
        v30 = 56 * v28;
        do
        {
          if (*(char *)(v29 + v30 - 9) < 0)
            operator delete(*(void **)(v29 + v30 - 32));
          v30 -= 56;
        }
        while (v30);
        LODWORD(v28) = *v27;
      }
      *(_DWORD *)(v12 + 776) = 0;
      v27[v28 + 1] = 2;
      *(_BYTE *)(v12 + 320) = v28 + 1;
      *(_QWORD *)&v27[8 * v28 + 16] = 2;
      goto LABEL_23;
    }
  }
  return v9;
}

double sub_22E88ABAC(uint64_t a1, int *a2, int a3)
{
  _QWORD *v6;
  double result;
  _QWORD *v8;

  v6 = *(_QWORD **)(a1 + 8);
  if (v6[353] == v6[354])
    sub_22E80F2F4((uint64_t)v6, a1 + 16, 1);
  else
    --v6[352];
  *(_WORD *)(a1 + 32) = 399;
  *(_QWORD *)(a1 + 24) = sub_22E95AA60(*(_QWORD *)(a1 + 88), a2);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  if (a3)
  {
    v8 = *(_QWORD **)(a1 + 8);
    if (v8[352])
    {
      if (v8[353] != v8[354])
        *(_QWORD *)&result = sub_22F162E18((uint64_t)v8, a1 + 16).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_22E88AC5C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  __int16 v38;
  _WORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  BOOL v44;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  _QWORD *v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  int v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  _WORD *v62;
  __int128 v63;
  void *v64[2];
  __int128 v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a1 + 32);
  v63 = 0u;
  *(_OWORD *)v64 = 0u;
  v5 = v4;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
    v6 = 0;
    if ((sub_22E8408AC(a1, (uint64_t)&v63, 0, 0, 0, 0, 0, 0, 0, 0) & 1) != 0)
      goto LABEL_12;
    v5 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v5 != 5
    || (v7 = v63, v8 = DWORD1(v63), v9 = *((_QWORD *)&v63 + 1), (_DWORD)v63) && DWORD1(v63) && !*((_QWORD *)&v63 + 1))
  {
    v10 = sub_22E88B28C(a1, (uint64_t)&v63, v4 != 399) == 0;
    v11 = 3;
LABEL_9:
    if (v10)
      v6 = v11;
    else
      v6 = 0;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a1 + 24);
  v62 = (_WORD *)v13;
  v14 = *(_QWORD *)(a1 + 2336);
  v15 = *(unsigned int *)(a1 + 2344);
  if ((_DWORD)v15)
  {
    v54 = 8 * v15;
    v16 = *(_QWORD **)(a1 + 2336);
    while (*v16 != v13)
    {
      ++v16;
      v54 -= 8;
      if (!v54)
      {
        v16 = (_QWORD *)(v14 + 8 * v15);
        break;
      }
    }
  }
  else
  {
    v16 = *(_QWORD **)(a1 + 2336);
  }
  if (v15 == ((uint64_t)v16 - v14) >> 3)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v18 + 2816);
    if (v19 >= *(unsigned int *)(v18 + 2784))
    {
      v20 = sub_22F162D2C(v18, 1u);
      v7 = v63;
      v8 = DWORD1(v63);
      v9 = *((_QWORD *)&v63 + 1);
    }
    else
    {
      v20 = *(_QWORD *)(v18 + 2776) + 24 * v19;
    }
    v21 = *(_OWORD *)v20;
    v61 = *(_QWORD *)(v20 + 16);
    v60 = v21;
    if (v8)
      v22 = v7 == 0;
    else
      v22 = 1;
    if (v22 && v9 == 0)
      v24 = a2;
    else
      v24 = 0;
    v25 = sub_22EA02430(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v63, (uint64_t *)&v62, v17, (uint64_t)&v60, v24);
    v27 = v26;
    if ((_DWORD)v25 == 11 && sub_22F2F0E30(a1, 1) == 1)
    {
      v66 = v61;
      v65 = v60;
      LOWORD(v66) = 0;
      if (DWORD1(v63))
        v28 = (_DWORD)v63 == 0;
      else
        v28 = 1;
      if (v28 && *((_QWORD *)&v63 + 1) == 0)
        v30 = a2;
      else
        v30 = 0;
      v25 = sub_22EA02430(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v63, (uint64_t *)&v62, v17, (uint64_t)&v65, v30);
      v27 = v31;
    }
    v6 = 0;
    v32 = (__int128 *)(a1 + 16);
    switch((int)v25)
    {
      case 1:
        goto LABEL_12;
      case 2:
        v39 = v62;
        *(_QWORD *)(a1 + 24) = v62;
        *(_WORD *)(a1 + 32) = *v39 & 0x1FF;
        v40 = *(_QWORD **)(a1 + 8);
        v41 = v40[352];
        if (v41 && v40[353] != v40[354])
        {
          v42 = v40[347] + 24 * v41;
          v43 = *v32;
          *(_QWORD *)(v42 - 8) = *(_QWORD *)(a1 + 32);
          *(_OWORD *)(v42 - 24) = v43;
        }
        goto LABEL_95;
      case 3:
        if ((sub_22E822180(a1) & 1) != 0)
          goto LABEL_70;
        if (DWORD1(v63))
          v44 = (_DWORD)v63 == 0;
        else
          v44 = 1;
        if (!v44 || *((_QWORD *)&v63 + 1) != 0)
          v17 = v63;
        v46 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v46 + 56) + 1) & 0x40) == 0)
          goto LABEL_121;
        v47 = *(_QWORD *)(v46 + 2816);
        v48 = v47 >= *(unsigned int *)(v46 + 2784) ? sub_22F162D2C(v46, 1u) : *(_QWORD *)(v46 + 2776) + 24 * v47;
        if (*(_WORD *)(v48 + 16) != 46
          || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 32 > 2)
        {
          goto LABEL_121;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v55 = *(_DWORD *)(a1 + 40);
        LODWORD(v65) = 0;
        v56 = sub_22F2EA184(a1, v55, v27, 0, &v65);
        if (v57 || !v56)
        {
          v56 = v27;
          if (*(_WORD *)(a1 + 32) == 1)
            goto LABEL_21;
        }
        v27 = v56;
LABEL_121:
        *(_WORD *)(a1 + 32) = 400;
        *(_QWORD *)(a1 + 24) = v27;
        v58 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 20) = v58;
LABEL_122:
        v59 = *(_QWORD **)(a1 + 8);
        if (v59[352] && v59[353] != v59[354])
          sub_22F162E18((uint64_t)v59, a1 + 16);
LABEL_125:
        v6 = 4;
        goto LABEL_12;
      case 4:
        if ((sub_22E822180(a1) & 1) != 0)
          goto LABEL_70;
        *(_WORD *)(a1 + 32) = 402;
        *(_QWORD *)(a1 + 24) = v27;
LABEL_92:
        *(_DWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 20) = v17;
        v51 = *(_QWORD **)(a1 + 8);
        if (v51[352] && v51[353] != v51[354])
          sub_22F162E18((uint64_t)v51, a1 + 16);
LABEL_95:
        if (DWORD1(v63))
          v52 = (_DWORD)v63 == 0;
        else
          v52 = 1;
        if (!v52 || *((_QWORD *)&v63 + 1))
          sub_22E88ABAC(a1, (int *)&v63, v4 != 399);
        goto LABEL_125;
      case 5:
      case 6:
        if ((_DWORD)v25 == 5)
          v38 = 403;
        else
          v38 = 404;
        *(_WORD *)(a1 + 32) = v38;
        *(_QWORD *)(a1 + 24) = v62;
        goto LABEL_92;
      case 7:
        *(_WORD *)(a1 + 32) = 405;
        *(_QWORD *)(a1 + 24) = v27;
        *(_DWORD *)(a1 + 20) = v17;
        if (DWORD1(v63))
          v50 = (_DWORD)v63 == 0;
        else
          v50 = 1;
        if (!v50 || *((_QWORD *)&v63 + 1))
          *(_DWORD *)v32 = v63;
        goto LABEL_122;
      case 8:
        if ((unsigned __int16)v61 != 46)
        {
          if (DWORD1(v63))
            v53 = (_DWORD)v63 == 0;
          else
            v53 = 1;
          if (!v53 || *((_QWORD *)&v63 + 1))
            sub_22E88ABAC(a1, (int *)&v63, v4 != 399);
          v6 = 2;
          goto LABEL_12;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        LODWORD(v65) = 0;
        *((_QWORD *)&v65 + 1) = v62;
        v67 = v17;
        v68 = v17;
        v33 = 2;
LABEL_46:
        v34 = a1;
        v35 = v27;
        v36 = 1;
        v37 = 0;
LABEL_90:
        v10 = sub_22E880230(v34, v35, v33, (uint64_t)&v63, 0, (uint64_t)&v65, v36, v37) == 0;
        v11 = 4;
        break;
      case 9:
      case 10:
      case 11:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        LODWORD(v65) = 0;
        *((_QWORD *)&v65 + 1) = v62;
        v67 = v17;
        v68 = v17;
        v33 = *(_DWORD *)((char *)&unk_22F4622A0 + (((v25 << 32) - 0x900000000) >> 30));
        goto LABEL_46;
      case 12:
        LODWORD(v65) = 0;
        *((_QWORD *)&v65 + 1) = v62;
        v67 = v17;
        v68 = v17;
        if ((unsigned __int16)v61 == 46)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
        v34 = a1;
        v35 = v27;
        v33 = 6;
        v36 = 0;
        v37 = 1;
        goto LABEL_90;
      default:
LABEL_70:
        if (DWORD1(v63))
          v49 = (_DWORD)v63 == 0;
        else
          v49 = 1;
        if (!v49 || *((_QWORD *)&v63 + 1))
          sub_22E88ABAC(a1, (int *)&v63, v4 != 399);
        v6 = 3;
        goto LABEL_12;
    }
    goto LABEL_9;
  }
  if ((sub_22E88B28C(a1, (uint64_t)&v63, v4 != 399) & 1) != 0)
  {
LABEL_21:
    v6 = 0;
  }
  else if (*(_WORD *)(a1 + 32) == 400)
  {
    v6 = 4;
  }
  else
  {
    v6 = 1;
  }
LABEL_12:
  if (HIDWORD(v64[1]))
    free(v64[0]);
  return v6;
}

uint64_t sub_22E88B28C(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int16 *)(a1 + 32);
  if (v6 != 5)
    goto LABEL_36;
  v7 = *(_QWORD **)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = (uint64_t *)v7[1611];
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 2816);
  if (v12 >= *(unsigned int *)(v11 + 2784))
    v13 = sub_22F162D2C(v11, 1u);
  else
    v13 = *(_QWORD *)(v11 + 2776) + 24 * v12;
  v14 = sub_22EA003D8(v7, v8, v9, v10, a2, 0, *(unsigned __int16 *)(v13 + 16) == 25, 0, 0, 1u, 1u, 0);
  if (!v14)
  {
    v20 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v20 + 56) + 1) & 1) == 0)
      return 0;
    v21 = *(_QWORD *)(v20 + 2816);
    if (v21 >= *(unsigned int *)(v20 + 2784))
      v22 = sub_22F162D2C(v20, 1u);
    else
      v22 = *(_QWORD *)(v20 + 2776) + 24 * v21;
    if (*(_WORD *)(v22 + 16) == 46)
    {
      v28 = 0;
      v37 = 0;
      v29 = *(unsigned __int16 *)(a1 + 32);
      if ((v29 - 7) >= 6)
      {
        v28 = 0;
        if ((v29 - 13) >= 6 && v29 != 1)
          v28 = *(_QWORD *)(a1 + 24);
      }
      v30 = *(_DWORD *)(a1 + 16);
      v38 = 0;
      v39 = v28;
      v40 = v30;
      v41 = v30;
      v36 = 0;
      v31 = sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, 0, &v38, 0, 0, (unint64_t *)&v37, &v36, 0);
      if (v31)
      {
        v32 = v31;
        if (v31 != 5 || sub_22F2F0E30(a1, 1) != 1)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (sub_22E880230(a1, v37, v32, a2, 0, (uint64_t)&v38, 1, 0))
            return 1;
        }
      }
    }
    v6 = *(unsigned __int16 *)(a1 + 32);
LABEL_36:
    if (v6 == 401 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32) == 2)
    {
      sub_22E881648(a1, a2, 0);
    }
    else
    {
      if (*(_DWORD *)(a2 + 4))
        v34 = *(_DWORD *)a2 == 0;
      else
        v34 = 1;
      if (!v34 || *(_QWORD *)(a2 + 8) != 0)
        sub_22E88ABAC(a1, (int *)a2, a3);
    }
    return 0;
  }
  v15 = v14;
  v16 = *(_DWORD *)a2;
  if ((!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4)) && !*(_QWORD *)(a2 + 8))
    v16 = *(_DWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v17 + 56) + 1) & 0x40) != 0)
  {
    v18 = *(_QWORD *)(v17 + 2816);
    v19 = v18 >= *(unsigned int *)(v17 + 2784) ? sub_22F162D2C(v17, 1u) : *(_QWORD *)(v17 + 2776) + 24 * v18;
    if (*(_WORD *)(v19 + 16) == 46
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 32 <= 2)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v23 = *(_DWORD *)(a1 + 40);
      v38 = 0;
      v24 = sub_22F2EA184(a1, v23, v15, 0, &v38);
      if (v25 || !v24)
      {
        v24 = v15;
        if (*(_WORD *)(a1 + 32) == 1)
          return 0;
      }
      v15 = v24;
    }
  }
  *(_WORD *)(a1 + 32) = 400;
  *(_QWORD *)(a1 + 24) = v15;
  v26 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v16;
  *(_DWORD *)(a1 + 20) = v26;
  v27 = *(_QWORD **)(a1 + 8);
  if (v27[352])
  {
    if (v27[353] != v27[354])
      sub_22F162E18((uint64_t)v27, a1 + 16);
  }
  return 0;
}

uint64_t sub_22E88B624(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v5 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v5 + 316) = 1837;
  if (*(char *)(v5 + 311) < 0)
  {
    **(_BYTE **)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v5 + 288) = 0;
    *(_BYTE *)(v5 + 311) = 0;
  }
  v17 = (unsigned __int8 *)(v5 + 320);
  v18 = 0;
  v19 = v5;
  v20 = 1;
  *(_BYTE *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 664) = 0;
  v6 = *(unsigned int *)(v5 + 776);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v5 + 768);
    v8 = 56 * v6;
    do
    {
      if (*(char *)(v7 + v8 - 9) < 0)
        operator delete(*(void **)(v7 + v8 - 32));
      v8 -= 56;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 776) = 0;
  sub_22F1413E0(v4, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)__p);
  if (v16 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v16 >= 0)
    v10 = v16 & 0x7F;
  else
    v10 = (size_t)__p[1];
  sub_22E3B89A8(&v17, v9, v10);
  v11 = v17;
  if (!v17)
  {
    v11 = (unsigned __int8 *)sub_22E3B8AAC(v18);
    v17 = v11;
  }
  v11[*v11 + 1] = 2;
  v12 = v17;
  v13 = *v17;
  *v17 = v13 + 1;
  *(_QWORD *)&v12[8 * v13 + 16] = a2;
  if (v16 < 0)
    operator delete(__p[0]);
  sub_22E3BB0B8((uint64_t)&v17);
  if (a2)
    **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFFFFBFFFFFE00 | 0x400000005;
  *(_WORD *)(a1 + 32) = 5;
  return 1;
}

uint64_t sub_22E88B7AC(uint64_t a1)
{
  int v2;
  _OWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  _QWORD v51[3];
  __int16 v52;
  _QWORD v53[3];
  __int16 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[3];
  __int16 v58;

  v2 = *(unsigned __int16 *)(a1 + 32);
  if (v2 != 152)
  {
    v55 = 0u;
    v56 = 0u;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) == 0
      || (sub_22E8408AC(a1, (uint64_t)&v55, 0, 0, 0, 0, 0, 0, 0, 0) & 1) == 0)
    {
      v7 = sub_22E88B28C(a1, (uint64_t)&v55, v2 != 399);
      goto LABEL_87;
    }
    goto LABEL_7;
  }
  v3 = (_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  if ((**(_BYTE **)(v4 + 56) & 0x10) != 0)
  {
    v5 = *(_QWORD *)(v4 + 2816);
    if (v5 >= *(unsigned int *)(v4 + 2784))
    {
      v6 = sub_22F162D2C(v4, 1u);
      v4 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v6 = *(_QWORD *)(v4 + 2776) + 24 * v5;
    }
    if (*(_WORD *)(v6 + 16) == 106)
    {
      sub_22F18FB4C(v4, (unsigned int *)&v55);
      v7 = sub_22E88B7AC(a1);
      sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
      *v3 = v55;
      *(_QWORD *)(a1 + 32) = v56;
      if ((v7 & 1) == 0)
      {
        v8 = *(_DWORD *)(a1 + 16);
        v9 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v9 + 312) = v8;
        *(_DWORD *)(v9 + 316) = 1953;
        if (*(char *)(v9 + 311) < 0)
        {
          **(_BYTE **)(v9 + 288) = 0;
          *(_QWORD *)(v9 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v9 + 288) = 0;
          *(_BYTE *)(v9 + 311) = 0;
        }
        v57[0] = v9 + 320;
        v57[1] = 0;
        v57[2] = v9;
        v58 = 1;
        *(_BYTE *)(v9 + 320) = 0;
        *(_DWORD *)(v9 + 664) = 0;
        v25 = *(unsigned int *)(v9 + 776);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD *)(v9 + 768);
          v27 = 56 * v25;
          do
          {
            if (*(char *)(v26 + v27 - 9) < 0)
              operator delete(*(void **)(v26 + v27 - 32));
            v27 -= 56;
          }
          while (v27);
        }
        *(_DWORD *)(v9 + 776) = 0;
        sub_22E3BB0B8((uint64_t)v57);
      }
      return v7;
    }
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(v4, (unsigned int *)(a1 + 16));
  v10 = *(unsigned int *)(a1 + 40);
  v55 = 0u;
  v56 = 0u;
  v7 = 1;
  if ((sub_22E8408AC(a1, (uint64_t)&v55, 0, 0, 0, 0, 1, 0, 0, 0) & 1) == 0)
  {
    if (DWORD1(v55))
      v11 = (_DWORD)v55 == 0;
    else
      v11 = 1;
    v12 = *(unsigned __int16 *)(a1 + 32);
    if (!v11 || *((_QWORD *)&v55 + 1))
    {
      if (v12 == 401)
      {
        v20 = *(_QWORD *)(a1 + 24);
        v21 = *(_DWORD *)(v20 + 32);
        if (v21 > 5 || ((1 << v21) & 0x35) == 0)
        {
          v37 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v37 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v37 + 316) = 1757;
          if (*(char *)(v37 + 311) < 0)
          {
            **(_BYTE **)(v37 + 288) = 0;
            *(_QWORD *)(v37 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v37 + 288) = 0;
            *(_BYTE *)(v37 + 311) = 0;
          }
          v47 = v37 + 320;
          v48 = 0;
          v49 = v37;
          v50 = 1;
          *(_BYTE *)(v37 + 320) = 0;
          *(_DWORD *)(v37 + 664) = 0;
          v42 = *(unsigned int *)(v37 + 776);
          if ((_DWORD)v42)
          {
            v43 = *(_QWORD *)(v37 + 768);
            v44 = 56 * v42;
            do
            {
              if (*(char *)(v43 + v44 - 9) < 0)
                operator delete(*(void **)(v43 + v44 - 32));
              v44 -= 56;
            }
            while (v44);
          }
          *(_DWORD *)(v37 + 776) = 0;
          v46 = *(unsigned int *)(a1 + 16);
          LODWORD(v45) = *(_DWORD *)(a1 + 20);
          if ((_DWORD)v45)
            v45 = v45;
          else
            v45 = v46;
          v7 = 1;
          sub_22E4D6448(v37 + 656, v46 | (v45 << 32), 1);
          sub_22E3BB0B8((uint64_t)&v47);
          goto LABEL_87;
        }
        if (v21 && !*(_BYTE *)(v20 + 48))
        {
          v16 = sub_22ED63018(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v10, (uint64_t)&v55, *(_DWORD *)v20, *(_QWORD *)(v20 + 24), *(_QWORD *)(v20 + 8), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 36), v20 + 56, *(unsigned int *)(v20 + 44), *(_DWORD *)(v20 + 40));
        }
        else
        {
          v16 = 0;
          v17 = 1;
        }
      }
      else
      {
        if (v12 != 5)
        {
          v23 = *(_DWORD *)(a1 + 16);
          v24 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v24 + 312) = v23;
          *(_DWORD *)(v24 + 316) = 1543;
          if (*(char *)(v24 + 311) < 0)
          {
            **(_BYTE **)(v24 + 288) = 0;
            *(_QWORD *)(v24 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v24 + 288) = 0;
            *(_BYTE *)(v24 + 311) = 0;
          }
          v47 = v24 + 320;
          v48 = 0;
          v49 = v24;
          v50 = 1;
          *(_BYTE *)(v24 + 320) = 0;
          *(_DWORD *)(v24 + 664) = 0;
          v31 = *(unsigned int *)(v24 + 776);
          if ((_DWORD)v31)
          {
            v32 = *(_QWORD *)(v24 + 768);
            v33 = 56 * v31;
            do
            {
              if (*(char *)(v32 + v33 - 9) < 0)
                operator delete(*(void **)(v32 + v33 - 32));
              v33 -= 56;
            }
            while (v33);
          }
          *(_DWORD *)(v24 + 776) = 0;
          v7 = 1;
          sub_22E4D6448(v24 + 656, v55, 1);
          sub_22E3BB0B8((uint64_t)&v47);
          goto LABEL_87;
        }
        v16 = sub_22ED71588(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v10, (uint64_t)&v55, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16));
      }
      if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28 || (v38 = *(_DWORD *)(a1 + 20)) == 0)
        v38 = *(_DWORD *)v3;
      *(_WORD *)(a1 + 32) = 400;
      if (v17)
        v39 = 0;
      else
        v39 = v16;
      *(_QWORD *)(a1 + 24) = v39;
      *(_DWORD *)(a1 + 16) = v10;
      *(_DWORD *)(a1 + 20) = v38;
      v40 = *(_QWORD **)(a1 + 8);
      if (v40[352] && v40[353] != v40[354])
        sub_22F162E18((uint64_t)v40, a1 + 16);
      goto LABEL_86;
    }
    switch(v12)
    {
      case 5:
        goto LABEL_25;
      case 407:
        goto LABEL_26;
      case 401:
LABEL_25:
        if ((sub_22E88B7AC(a1) & 1) == 0 && *(unsigned __int16 *)(a1 + 32) - 399 <= 0x28)
        {
LABEL_26:
          if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x20) != 0)
            v13 = 1953;
          else
            v13 = 1522;
          v14 = *(_DWORD *)(a1 + 16);
          v15 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v15 + 312) = v14;
          *(_DWORD *)(v15 + 316) = v13;
          if (*(char *)(v15 + 311) < 0)
          {
            **(_BYTE **)(v15 + 288) = 0;
            *(_QWORD *)(v15 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v15 + 288) = 0;
            *(_BYTE *)(v15 + 311) = 0;
          }
          v53[0] = v15 + 320;
          v53[1] = 0;
          v53[2] = v15;
          v54 = 1;
          *(_BYTE *)(v15 + 320) = 0;
          *(_DWORD *)(v15 + 664) = 0;
          v28 = *(unsigned int *)(v15 + 776);
          if ((_DWORD)v28)
          {
            v29 = *(_QWORD *)(v15 + 768);
            v30 = 56 * v28;
            do
            {
              if (*(char *)(v29 + v30 - 9) < 0)
                operator delete(*(void **)(v29 + v30 - 32));
              v30 -= 56;
            }
            while (v30);
          }
          *(_DWORD *)(v15 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v53);
LABEL_86:
          v7 = 0;
          goto LABEL_87;
        }
        break;
    }
    if ((*(_WORD *)(a1 + 34) & 0x400) == 0)
    {
      v18 = *(_DWORD *)(a1 + 16);
      v19 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v19 + 312) = v18;
      *(_DWORD *)(v19 + 316) = 1522;
      if (*(char *)(v19 + 311) < 0)
      {
        **(_BYTE **)(v19 + 288) = 0;
        *(_QWORD *)(v19 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v19 + 288) = 0;
        *(_BYTE *)(v19 + 311) = 0;
      }
      v51[0] = v19 + 320;
      v51[1] = 0;
      v51[2] = v19;
      v52 = 1;
      *(_BYTE *)(v19 + 320) = 0;
      *(_DWORD *)(v19 + 664) = 0;
      v34 = *(unsigned int *)(v19 + 776);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v19 + 768);
        v36 = 56 * v34;
        do
        {
          if (*(char *)(v35 + v36 - 9) < 0)
            operator delete(*(void **)(v35 + v36 - 32));
          v36 -= 56;
        }
        while (v36);
      }
      *(_DWORD *)(v19 + 776) = 0;
      sub_22E3BB0B8((uint64_t)v51);
    }
LABEL_7:
    v7 = 1;
  }
LABEL_87:
  if (HIDWORD(v56))
    free((void *)v56);
  return v7;
}

uint64_t sub_22E88BDA8(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  __int128 v7;
  void *v8[2];

  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v3 = sub_22E8408AC(a1, (uint64_t)&v7, 0, 0, a2, 0, 0, 0, 0, 0);
  if ((v3 & 1) == 0)
  {
    v4 = !DWORD1(v7) || (_DWORD)v7 == 0;
    if (!v4 || *((_QWORD *)&v7 + 1) != 0)
      sub_22E88ABAC(a1, (int *)&v7, 1);
  }
  if (HIDWORD(v8[1]))
    free(v8[0]);
  return v3;
}

uint64_t sub_22E88BE44(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19[3];
  __int16 v20;

  result = 0;
  v3 = *(unsigned __int16 *)(a1 + 32);
  v4 = (v3 - 29);
  if (v4 <= 0x23)
  {
    if (((1 << (v3 - 29)) & 0x84B195225) != 0)
    {
      v5 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v5 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v5 + 316) = 1583;
      if (*(char *)(v5 + 311) < 0)
      {
        **(_BYTE **)(v5 + 288) = 0;
        *(_QWORD *)(v5 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v5 + 288) = 0;
        *(_BYTE *)(v5 + 311) = 0;
      }
      v6 = (unsigned __int8 *)(v5 + 320);
      v19[0] = v5 + 320;
      v19[1] = 0;
      v19[2] = v5;
      v20 = 1;
      *(_BYTE *)(v5 + 320) = 0;
      *(_DWORD *)(v5 + 664) = 0;
      v7 = *(unsigned int *)(v5 + 776);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v5 + 768);
        v9 = 56 * v7;
        do
        {
          if (*(char *)(v8 + v9 - 9) < 0)
            operator delete(*(void **)(v8 + v9 - 32));
          v9 -= 56;
        }
        while (v9);
        LODWORD(v7) = *v6;
      }
      *(_DWORD *)(v5 + 776) = 0;
      v6[v7 + 1] = 4;
      *(_BYTE *)(v5 + 320) = v7 + 1;
      *(_QWORD *)&v6[8 * v7 + 16] = v3;
      v10 = *(unsigned int *)(a1 + 16);
      v13 = 0;
      v14 = 0;
      v16 = 0;
      v17 = 0x100000000000000;
      v18 = 0;
      v11 = v10 | (v10 << 32);
      v12 = 1;
      __p = (void *)61;
      sub_22E6D82D0(v19, &v11);
      if (SHIBYTE(v17) < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)v19);
    }
    else if (v4 != 34)
    {
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E88BFB8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned int v12;
  _QWORD v13[3];
  __int16 v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;

  *((_BYTE *)a2 + 4) = *(unsigned __int16 *)(a1 + 32) == 381;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  *a2 = *(_DWORD *)(a1 + 40);
  v15 = (_BYTE *)(a1 + 944);
  v16 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v17 = a1;
  v18 = 1441813;
  v19 = 62;
  v21 = 0;
  v22 = 0;
  v20 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v15))
  {
    v4 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v4 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v4 + 316) = 1510;
    if (*(char *)(v4 + 311) < 0)
    {
      **(_BYTE **)(v4 + 288) = 0;
      *(_QWORD *)(v4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 288) = 0;
      *(_BYTE *)(v4 + 311) = 0;
    }
    v6 = (unsigned __int8 *)(v4 + 320);
    v13[0] = v4 + 320;
    v13[1] = 0;
    v13[2] = v4;
    v5 = 1;
    v14 = 1;
    *(_BYTE *)(v4 + 320) = 0;
    *(_DWORD *)(v4 + 664) = 0;
    v7 = *(unsigned int *)(v4 + 776);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(v4 + 768);
      v9 = 56 * v7;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
      LODWORD(v7) = *v6;
    }
    *(_DWORD *)(v4 + 776) = 0;
    if (*((_BYTE *)a2 + 4))
      v10 = "__if_exists";
    else
      v10 = "__if_not_exists";
    v6[v7 + 1] = 1;
    *(_BYTE *)(v4 + 320) = v7 + 1;
    *(_QWORD *)&v6[8 * v7 + 16] = v10;
    sub_22E3BB0B8((uint64_t)v13);
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      sub_22E8408AC(a1, (uint64_t)(a2 + 2), 0, 0, 0, 0, 0, 0, 0, 0);
    if (a2[2] && a2[3] && !*((_QWORD *)a2 + 2))
    {
      LOWORD(v13[0]) = HIWORD(v18);
      v5 = 1;
      sub_22E885940(v17, (unsigned __int16 *)v13, 1, 2);
      sub_22E811E8C((uint64_t)&v15);
    }
    else
    {
      LODWORD(v13[0]) = 0;
      if (sub_22E842CDC(a1, (uint64_t)(a2 + 2), 0, 0, 0, 1, 1, 0, (unsigned int *)v13, (uint64_t)(a2 + 10)))
      {
        v23 = HIWORD(v18);
        v5 = 1;
        sub_22E885940(v17, &v23, 1, 2);
        sub_22E811E8C((uint64_t)&v15);
      }
      else if ((sub_22E811E8C((uint64_t)&v15) & 1) != 0)
      {
        v5 = 1;
      }
      else
      {
        v12 = sub_22F332414(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *a2, *((unsigned __int8 *)a2 + 4), (uint64_t)(a2 + 2), (uint64_t)(a2 + 10));
        v5 = 1;
        switch(v12)
        {
          case 0u:
            v12 = *((_BYTE *)a2 + 4) == 0;
            goto LABEL_29;
          case 1u:
            v12 = *((unsigned __int8 *)a2 + 4);
            goto LABEL_29;
          case 2u:
LABEL_29:
            a2[18] = v12;
            goto LABEL_30;
          case 3u:
            break;
          default:
LABEL_30:
            v5 = 0;
            break;
        }
      }
    }
  }
  *v15 = v16;
  return v5;
}

uint64_t sub_22E88C298(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  __int16 v22;

  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 == 5)
  {
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(unsigned int *)(a1 + 16);
      v11 = *(unsigned int *)(a3 + 8);
      if (v11 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(a3 + 8);
      }
      v12 = (_QWORD *)(*(_QWORD *)a3 + 16 * v11);
      *v12 = v9;
      v12[1] = v10;
      ++*(_DWORD *)(a3 + 8);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 25)
        return 0;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v8 = *(unsigned __int16 *)(a1 + 32);
      if (v8 != 5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    if (v8 == 3)
    {
      v13 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v13 + 752))
      {
        *(_BYTE *)(v13 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v13 + 48) + 6) = 1;
      }
      v14 = 1;
      *(_WORD *)(a1 + 32) = 1;
      sub_22F3131C8(*(_QWORD *)(a1 + 88), a2, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v15 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v15 + 316) = 1608;
      if (*(char *)(v15 + 311) < 0)
      {
        **(_BYTE **)(v15 + 288) = 0;
        *(_QWORD *)(v15 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v15 + 288) = 0;
        *(_BYTE *)(v15 + 311) = 0;
      }
      v16 = (unsigned __int8 *)(v15 + 320);
      v21[0] = v15 + 320;
      v21[1] = 0;
      v21[2] = v15;
      v22 = 1;
      *(_BYTE *)(v15 + 320) = 0;
      *(_DWORD *)(v15 + 664) = 0;
      v17 = *(unsigned int *)(v15 + 776);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v15 + 768);
        v19 = 56 * v17;
        do
        {
          if (*(char *)(v18 + v19 - 9) < 0)
            operator delete(*(void **)(v18 + v19 - 32));
          v19 -= 56;
        }
        while (v19);
        LODWORD(v17) = *v16;
      }
      *(_DWORD *)(v15 + 776) = 0;
      v16[v17 + 1] = 2;
      *(_BYTE *)(v15 + 320) = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = a4;
      sub_22E3BB0B8((uint64_t)v21);
      LOWORD(v21[0]) = 62;
      v14 = 1;
      sub_22E885940(a1, (unsigned __int16 *)v21, 1, 0);
    }
  }
  return v14;
}

uint64_t sub_22E88C4A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  __int16 v18;
  _QWORD v19[3];
  __int16 v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 96);
  *(_DWORD *)(v3 + 312) = *(_DWORD *)(v2 + 16);
  *(_DWORD *)(v3 + 316) = 1458;
  if (*(char *)(v3 + 311) < 0)
  {
    **(_BYTE **)(v3 + 288) = 0;
    *(_QWORD *)(v3 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 288) = 0;
    *(_BYTE *)(v3 + 311) = 0;
  }
  v4 = (unsigned __int8 *)(v3 + 320);
  v19[0] = v3 + 320;
  v19[1] = 0;
  v19[2] = v3;
  v20 = 1;
  *(_BYTE *)(v3 + 320) = 0;
  *(_DWORD *)(v3 + 664) = 0;
  v5 = *(unsigned int *)(v3 + 776);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v3 + 768);
    v7 = 56 * v5;
    do
    {
      if (*(char *)(v6 + v7 - 9) < 0)
        operator delete(*(void **)(v6 + v7 - 32));
      v7 -= 56;
    }
    while (v7);
    LODWORD(v5) = *v4;
  }
  *(_DWORD *)(v3 + 776) = 0;
  v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 56) + 184);
  v4[v5 + 1] = 3;
  *(_BYTE *)(v3 + 320) = v5 + 1;
  *(_QWORD *)&v4[8 * v5 + 16] = v8;
  sub_22E3BB0B8((uint64_t)v19);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 96);
  *(_DWORD *)(v10 + 312) = *(_DWORD *)(v9 + 16);
  *(_DWORD *)(v10 + 316) = 1861;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  v17[0] = v10 + 320;
  v17[1] = 0;
  v17[2] = v10;
  v18 = 1;
  *(_BYTE *)(v10 + 320) = 0;
  *(_DWORD *)(v10 + 664) = 0;
  v11 = *(unsigned int *)(v10 + 776);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(v10 + 768);
    v13 = 56 * v11;
    do
    {
      if (*(char *)(v12 + v13 - 9) < 0)
        operator delete(*(void **)(v12 + v13 - 32));
      v13 -= 56;
    }
    while (v13);
  }
  *(_DWORD *)(v10 + 776) = 0;
  sub_22E3BB0B8((uint64_t)v17);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(v14 + 8);
  if (*(_QWORD *)(v15 + 752))
  {
    *(_BYTE *)(v15 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v15 + 48) + 6) = 1;
  }
  *(_WORD *)(v14 + 32) = 1;
  return 1;
}

uint64_t sub_22E88C650(uint64_t a1, int a2, char *__s, int a4)
{
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned __int16 v17;

  v8 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 16);
  v9 = *(unsigned __int16 *)(a1 + 24);
  if (__s)
    v10 = strlen(__s);
  else
    v10 = 0;
  if (sub_22E8847B4(v8, v9, a2, __s, v10))
  {
    if (a4)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = a4;
      v14 = 1;
      sub_22E885940(v16, &v17, 1, 1);
      return v14;
    }
    return 1;
  }
  v11 = *(unsigned __int16 *)(a1 + 24);
  if (v11 == 21)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = (unsigned __int16 *)(v12 + 80);
  }
  else if (v11 == 19)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = (unsigned __int16 *)(v12 + 82);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = (unsigned __int16 *)(v12 + 84);
  }
  if (*v13 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 56) + 184))
  {
    sub_22E88C4A0(a1);
    return 1;
  }
  return 0;
}

uint64_t sub_22E88C758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_WORD *)(v2 + 32) == 438)
  {
    v3 = *(_QWORD *)(v2 + 96);
    *(_DWORD *)(v3 + 312) = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v3 + 316) = 1601;
    if (*(char *)(v3 + 311) < 0)
    {
      **(_BYTE **)(v3 + 288) = 0;
      *(_QWORD *)(v3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 288) = 0;
      *(_BYTE *)(v3 + 311) = 0;
    }
    v4 = (unsigned __int8 *)(v3 + 320);
    v24 = v3 + 320;
    v25 = 0;
    v26 = v3;
    v27 = 1;
    *(_BYTE *)(v3 + 320) = 0;
    *(_DWORD *)(v3 + 664) = 0;
    v5 = *(unsigned int *)(v3 + 776);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(v3 + 768);
      v7 = 56 * v5;
      do
      {
        if (*(char *)(v6 + v7 - 9) < 0)
          operator delete(*(void **)(v6 + v7 - 32));
        v7 -= 56;
      }
      while (v7);
LABEL_19:
      LODWORD(v5) = *v4;
    }
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 96);
    *(_DWORD *)(v3 + 312) = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v3 + 316) = 15;
    if (*(char *)(v3 + 311) < 0)
    {
      **(_BYTE **)(v3 + 288) = 0;
      *(_QWORD *)(v3 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 288) = 0;
      *(_BYTE *)(v3 + 311) = 0;
    }
    v4 = (unsigned __int8 *)(v3 + 320);
    v24 = v3 + 320;
    v25 = 0;
    v26 = v3;
    v27 = 1;
    *(_BYTE *)(v3 + 320) = 0;
    *(_DWORD *)(v3 + 664) = 0;
    v5 = *(unsigned int *)(v3 + 776);
    if ((_DWORD)v5)
    {
      v8 = *(_QWORD *)(v3 + 768);
      v9 = 56 * v5;
      do
      {
        if (*(char *)(v8 + v9 - 9) < 0)
          operator delete(*(void **)(v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
      goto LABEL_19;
    }
  }
  *(_DWORD *)(v3 + 776) = 0;
  v10 = *(unsigned __int16 *)(a1 + 26);
  v4[v5 + 1] = 4;
  *(_BYTE *)(v3 + 320) = v5 + 1;
  *(_QWORD *)&v4[8 * v5 + 16] = v10;
  sub_22E3BB0B8((uint64_t)&v24);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
  *(_DWORD *)(v11 + 312) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v11 + 316) = 104;
  if (*(char *)(v11 + 311) < 0)
  {
    **(_BYTE **)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v11 + 288) = 0;
    *(_BYTE *)(v11 + 311) = 0;
  }
  v12 = (unsigned __int8 *)(v11 + 320);
  v24 = v11 + 320;
  v25 = 0;
  v26 = v11;
  v27 = 1;
  *(_BYTE *)(v11 + 320) = 0;
  *(_DWORD *)(v11 + 664) = 0;
  v13 = *(unsigned int *)(v11 + 776);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v11 + 768);
    v15 = 56 * v13;
    do
    {
      if (*(char *)(v14 + v15 - 9) < 0)
        operator delete(*(void **)(v14 + v15 - 32));
      v15 -= 56;
    }
    while (v15);
    LODWORD(v13) = *v12;
  }
  *(_DWORD *)(v11 + 776) = 0;
  v16 = *(unsigned __int16 *)(a1 + 24);
  v12[v13 + 1] = 4;
  *(_BYTE *)(v11 + 320) = v13 + 1;
  *(_QWORD *)&v12[8 * v13 + 16] = v16;
  sub_22E3BB0B8((uint64_t)&v24);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(unsigned __int16 *)(v17 + 32);
  v19 = v18 > 0x18;
  v20 = (1 << v18) & 0x1500000;
  if (v19 || v20 == 0)
  {
    LODWORD(v24) = *(_DWORD *)(a1 + 26);
    if (sub_22E885940(v17, (unsigned __int16 *)&v24, 2, 3))
    {
      v23 = *(_QWORD *)(a1 + 16);
      if (*(unsigned __int16 *)(v23 + 32) == *(unsigned __int16 *)(a1 + 26))
        *(_DWORD *)(a1 + 52) = sub_22E80F0F0(v23, 0);
    }
  }
  return 1;
}

void sub_22E88C9EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E88CA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E9051E8(*(_QWORD *)(a1 + 8), a3);
  return 0;
}

void sub_22E88CA20(uint64_t a1)
{
  uint64_t v1;
  unsigned int **v3;
  uint64_t v4;
  unsigned int *v5;

  v1 = *(unsigned int *)(a1 + 2200);
  if ((_DWORD)v1 && (*(_WORD *)(a1 + 32) == 1 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1048)))
  {
    v3 = *(unsigned int ***)(a1 + 2192);
    v4 = 8 * v1;
    do
    {
      v5 = *v3++;
      sub_22E886514(v5);
      v4 -= 8;
    }
    while (v4);
    *(_DWORD *)(a1 + 2200) = 0;
  }
}

void sub_22E88CA88()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E88CA9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FAA5498;
  result[1] = v3;
  return result;
}

uint64_t sub_22E88CAD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FAA5498;
  a2[1] = v2;
  return result;
}

unint64_t sub_22E88CAEC(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int *a4)
{
  return sub_22E827BD4(*(_QWORD *)(a1 + 8), *a2, a2[1], *a3, a3[1], *a4);
}

uint64_t sub_22E88CB0C(uint64_t result, char a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int **v10;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 **v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  unsigned int *v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  _BOOL4 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  char v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t i;
  int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  BOOL v101;
  char v102;
  int v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int *v111;
  int v112;
  void *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  unsigned int *v124;
  _QWORD *v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  unsigned int *v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  BOOL v157;
  unsigned int *v158;
  uint64_t v159;
  const void **v160;
  const void **v161;
  _QWORD **v162;
  _QWORD **v163;
  _QWORD *v164;
  _BYTE *v165;
  char v166;
  uint64_t v167;
  void **v168;
  void **v169;
  void *v170;
  char v171;
  char *v172;
  char *v173;
  int v174;
  _QWORD *v175;
  _QWORD *v176;
  _BYTE *v177;
  BOOL v178;
  uint64_t v179;
  _DWORD *v180;
  char *v183;
  char *v184;
  int64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  void *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  __int16 v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t *v207;
  unsigned __int8 *v208;
  int v209;
  unsigned __int8 *v210;
  void **v211;
  uint64_t *v212;
  _BYTE *v213;
  uint64_t k;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  unsigned __int16 *v218;
  int v219;
  _BYTE *v220;
  _BYTE *v221;
  void *v222;
  _BYTE *v223;
  void **v224;
  char *v225;
  void **v226;
  void **v227;
  char *v228;
  int v229;
  unsigned int v230;
  _BYTE *v231;
  uint64_t v232;
  _BOOL4 v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  size_t v246;
  unsigned __int16 *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  size_t v251;
  BOOL v252;
  const char *v253;
  size_t v254;
  char *v255;
  void **v256;
  char *v257;
  uint64_t v258;
  const char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  unsigned int *v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t *v278;
  int v280;
  unint64_t v281;
  uint64_t v282;
  unsigned int *v283;
  uint64_t (*v284)(uint64_t);
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t *j;
  uint64_t v289;
  int *v290;
  int *v291;
  uint64_t v292;
  int v293;
  unsigned int *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  unsigned __int8 *v313;
  unsigned int v314;
  int v315;
  BOOL v316;
  char v317;
  char v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  uint64_t *v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  int v340;
  void *v341;
  uint64_t (*v342)(unint64_t);
  unsigned int v343;
  unsigned int *v344;
  uint64_t v345;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  char v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  const void **v354;
  const void **v355;
  _DWORD *v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int8 *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  uint64_t v373;
  unsigned int *v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  int v385;
  uint64_t v386;
  unsigned int v387;
  __int128 *v388;
  char v389;
  uint64_t v390;
  _BYTE *v391;
  _BYTE *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  __int128 *v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  BOOL v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t (*v414)(unint64_t);
  unsigned int v415;
  uint64_t v416;
  unsigned int *v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  unsigned __int8 *v425;
  unsigned __int8 **v426;
  unsigned __int8 *v427;
  _BYTE *v428;
  uint64_t v429;
  char v430;
  int v431;
  char v432;
  char v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int v438;
  llvm::APInt *v439;
  int v440;
  BOOL v441;
  uint64_t *v442;
  unsigned int v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int *v447;
  uint64_t *v448;
  int v449;
  uint64_t **v450;
  unsigned int **v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454[24];
  _QWORD v455[2];
  char v456;
  char *v457;
  char *v458;
  __int128 v459;
  void **v460;
  char v461;
  void *v462;
  size_t v463;
  uint64_t v464;
  int *v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  uint64_t v469;
  _BYTE *v470;
  _QWORD *v471;
  int v472;
  uint64_t v473;
  _BYTE v474[20];
  __int128 v475;
  __int128 v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD v479[6];
  _QWORD v480[4];
  void *__p[4];
  _BYTE v482[18];
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  void *v486;
  uint64_t v487;
  unsigned int *v488;
  uint64_t v489;
  uint64_t *v490;
  unint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  int v495;
  __int128 v496;
  __int128 v497;
  _QWORD v498[9];
  unsigned int *v499;
  _BYTE *v500;
  void *v501;
  uint64_t v502;
  int v503;
  _BYTE v504[128];
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int16 v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  __int16 v512;
  uint64_t v513;
  __int16 v514;
  uint64_t v515;
  uint64_t v516;

  v516 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)result + 104);
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 128) + 24) & 1) != 0)
    return result;
  v10 = (unsigned int **)result;
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 128) + 24) & 0x10) != 0)
  {
    result = (uint64_t)sub_22F1E361C(*(_QWORD **)(*(_QWORD *)result + 112), a4[6]);
    if ((_DWORD)result != 3 && (_DWORD)result != 0)
      return result;
  }
  v12 = sub_22EFCAE04((uint64_t)a4);
  result = sub_22EFC7ADC(v12);
  if ((result & 1) != 0)
    return result;
  if (sub_22E9038B8((uint64_t)*v10))
    return (uint64_t)sub_22E88FA88(*v10, *(_QWORD *)(a3 + 432), *(_DWORD *)(a3 + 440));
  v13 = a2;
  v437 = (*(uint64_t (**)(int *))(*(_QWORD *)a4 + 64))(a4);
  v464 = 0;
  v465 = a4;
  v466 = 0u;
  v467 = 0u;
  v468 = 0u;
  v469 = 0;
  memset(v474, 0, 14);
  v473 = 0x1000000010000;
  v475 = 0u;
  v476 = 0u;
  v477 = v479;
  v478 = 0x400000000;
  v479[4] = v480;
  v479[5] = 0;
  v480[0] = 0;
  v480[1] = 1;
  v480[2] = 0;
  v480[3] = 0;
  v470 = &v474[4];
  v471 = 0;
  v472 = 16842753;
  if ((a2 & 0xE) != 0)
  {
    *(_QWORD *)&v468 = -1;
    *((_QWORD *)&v468 + 1) = -1;
    *((_QWORD *)&v467 + 1) = -1;
    v14 = 0xFFFFFFFFFFFLL;
  }
  else
  {
    v468 = xmmword_22F4622C0;
    v14 = 0x20000000000;
  }
  v469 = v14;
  LOBYTE(v455[0]) = 0;
  v456 = 0;
  v452 = (uint64_t)a4;
  v15 = (*(uint64_t (**)(int *))(*(_QWORD *)a4 + 16))(a4);
  if (sub_22E88FAF4(v5, v15))
  {
    v16 = *v10;
    v455[0] = &off_24FAA56C0;
    v455[1] = v16;
    v456 = 1;
    v471 = v455;
  }
  v446 = a3;
  v17 = *(_DWORD *)(a3 + 440);
  v451 = v10;
  v453 = v5;
  if (v17)
  {
    v18 = *(_QWORD *)(a3 + 432);
    v19 = v18 + 40 * v17;
    do
    {
      v21 = (unsigned __int8 **)(v18 + 32);
      v20 = *(_QWORD *)(v18 + 32);
      if ((v20 & 4) != 0)
      {
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        v21 = *(unsigned __int8 ***)v23;
        v22 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
      }
      else
      {
        v22 = (uint64_t)&v21[v20 > 7];
      }
      while (v21 != (unsigned __int8 **)v22)
      {
        v24 = *v21++;
        sub_22EEB588C((uint64_t)&v464, v24);
      }
      v18 += 40;
    }
    while (v18 != v19);
    if (sub_22EEB5AAC((uint64_t)&v464))
    {
      v25 = *(_DWORD *)(v446 + 440);
      v10 = v451;
      if (v25)
      {
        v26 = *(_QWORD *)(v446 + 432);
        v27 = v26 + 40 * v25;
        do
        {
          v29 = (unsigned __int8 **)(v26 + 32);
          v28 = *(_QWORD *)(v26 + 32);
          if ((v28 & 4) != 0)
          {
            v31 = v28 & 0xFFFFFFFFFFFFFFF8;
            v29 = *(unsigned __int8 ***)v31;
            v30 = *(_QWORD *)v31 + 8 * *(unsigned int *)(v31 + 8);
          }
          else
          {
            v30 = (uint64_t)&v29[v28 > 7];
          }
          while (v29 != (unsigned __int8 **)v30)
          {
            v32 = sub_22EEB59A4((uint64_t)&v464, *v29);
            v33 = sub_22F34C2D0((uint64_t)&v464);
            if (v32)
              v34 = v33 == 0;
            else
              v34 = 1;
            if (!v34)
            {
              v35 = (_QWORD *)v33;
              v36 = (uint64_t *)sub_22EEB5AAC((uint64_t)&v464);
              if (!sub_22F34CE40(v35, *v36, v32))
                goto LABEL_40;
            }
            ++v29;
          }
          sub_22E90379C(*v451, *(_DWORD *)(v26 + 24), v26, 0, (uint64_t)v454);
          sub_22E903BEC(v454);
LABEL_40:
          v26 += 40;
          v5 = v453;
        }
        while (v26 != v27);
      }
    }
    else
    {
      v10 = v451;
      sub_22E88FA88(*v451, *(_QWORD *)(v446 + 432), *(_DWORD *)(v446 + 440));
    }
  }
  v38 = v452;
  if ((v13 & 1) == 0)
    goto LABEL_260;
  v39 = *(_DWORD *)(v452 + 28);
  v40 = v39 & 0x7E;
  if ((v39 & 0x7F) == 1)
  {
    v41 = 0;
    v438 = 0;
    v42 = 3761;
    v43 = 4053;
    v440 = 3355;
    v44 = 1;
    goto LABEL_98;
  }
  if ((v40 - 54) > 3
    || (*(_QWORD *)(v452 + 40) & 7) != 6
    || *(_DWORD *)(*(_QWORD *)(v452 + 40) & 0xFFFFFFFFFFFFFFF8) != 42)
  {
    goto LABEL_71;
  }
  v45 = *(_WORD *)(v452 + 80) & 0x7F;
  v46 = -40;
  if (v45 <= 0x46)
  {
    if (v45 <= 0x18)
    {
      if (v45 == 16)
      {
LABEL_52:
        v46 = -48;
        goto LABEL_64;
      }
      if (((1 << v45) & 0x1066) != 0)
        goto LABEL_64;
      if (v45 == 24)
        goto LABEL_52;
    }
    if (v45 == 70)
    {
LABEL_62:
      v46 = -64;
      goto LABEL_64;
    }
    goto LABEL_60;
  }
  if (v45 == 83)
    goto LABEL_64;
  if (v45 == 71)
  {
    v46 = -56;
    goto LABEL_64;
  }
  if (v45 != 81)
  {
LABEL_60:
    if (v45 - 52 >= 6)
    {
      if (v45 - 33 >= 5)
        goto LABEL_52;
      goto LABEL_62;
    }
    v46 = -72;
  }
LABEL_64:
  v47 = *(_QWORD *)(v452 + 72 + v46 + 16);
  v48 = (_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF8);
  if ((v47 & 4) != 0)
    v48 = (_QWORD *)*v48;
  if (v48)
    v49 = v48 - 8;
  else
    v49 = 0;
  v50 = v49[16];
  if (v50 && ((*(unsigned __int16 *)(v50 + 8) | (*(unsigned __int8 *)(v50 + 10) << 16)) & 0x100000) != 0)
  {
    v41 = 0;
    v438 = 0;
    v42 = 6719;
    v43 = 4054;
    v440 = 6553;
    v44 = 2;
    goto LABEL_98;
  }
LABEL_71:
  v41 = *(_DWORD *)(v452 + 24);
  if (*(_DWORD *)(v446 + 12))
  {
    v43 = 0;
    v42 = 6716;
    v440 = 6550;
    v44 = 3;
    goto LABEL_98;
  }
  if (sub_22E6A2F54(v452))
  {
    v42 = 6720;
    v51 = 6554;
LABEL_77:
    v440 = v51;
    v44 = 4;
    goto LABEL_79;
  }
  if (sub_22E88FFC4(v452))
  {
    v42 = 6717;
    v51 = 6551;
    goto LABEL_77;
  }
  v44 = 0;
  v42 = 6718;
  v440 = 6552;
LABEL_79:
  if ((*(_DWORD *)(v452 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v452 + 32))(v452);
    v52 = (*(_BYTE *)(v53 + 82) & 0xC) != 0 || sub_22EFD7260(v53) != 0;
  }
  else
  {
    v52 = 0;
  }
  v39 = *(_DWORD *)(v452 + 28);
  v40 = v39 & 0x7E;
  if ((v40 - 58) < 0xFFFFFFFA)
  {
    v54 = 0;
    goto LABEL_94;
  }
  v55 = *(_QWORD *)(v452 + 144) & 6;
  v56 = (_DWORD *)(*(_QWORD *)(v452 + 144) & 0xFFFFFFFFFFFFFFF8);
  if (v55 == 4 && v56)
  {
    v56 += 4;
LABEL_93:
    v54 = ((((*v56 >> 1) & 3) + 1) & 5) != 0;
    goto LABEL_94;
  }
  v54 = 0;
  if (v55 == 2 && v56)
    goto LABEL_93;
LABEL_94:
  if (v52 || v54)
    v57 = 0;
  else
    v57 = 7019;
  v438 = v57;
  v43 = 6555;
LABEL_98:
  v58 = *v10;
  v443 = v43;
  v449 = *(_DWORD *)(v446 + 12);
  if ((v40 - 58) >= 0xFFFFFFFA)
  {
    if (*(_BYTE *)v437 == 11)
    {
      v62 = *(_QWORD *)(v437 + 56) != 0;
    }
    else
    {
      v64 = *(_QWORD *)(*(_QWORD *)(v452 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v64 || *(unsigned __int8 *)(v64 + 16) - 27 <= 0xFFFFFFFD)
        v64 = sub_22F10CF48(v64);
      v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v65)
        v66 = *(_DWORD *)(v65 + 16) == 11;
      else
        v66 = 0;
      v62 = v66 && (*(_DWORD *)(v65 + 16) & 0xFF80000) == 86507520;
    }
    v63 = sub_22EFC0BA0(v452);
    goto LABEL_127;
  }
  v59 = v39 & 0x7F;
  if (v59 != 1)
  {
    if (v59 == 24)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v452 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v60)
        v61 = *(_DWORD *)(v60 + 16) == 11;
      else
        v61 = 0;
      v62 = v61 && (*(_DWORD *)(v60 + 16) & 0xFF80000) == 86507520;
      v63 = sub_22E47260C(v452);
LABEL_127:
      v70 = v63;
      goto LABEL_132;
    }
    goto LABEL_131;
  }
  v67 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
  if ((!v67 || *(unsigned __int8 *)(v67 + 16) - 27 <= 0xFFFFFFFD)
    && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
     || (v67 = sub_22F10CF48(v67)) == 0))
  {
LABEL_131:
    v70 = 0;
    v62 = 0;
    goto LABEL_132;
  }
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v68)
    v69 = *(_DWORD *)(v68 + 16) == 11;
  else
    v69 = 0;
  v62 = v69 && (*(_DWORD *)(v68 + 16) & 0xFF80000) == 86507520;
  v70 = *(_BYTE *)(v67 + 19) & 1;
LABEL_132:
  v71 = *((_QWORD *)v58 + 13);
  switch(v44)
  {
    case 0:
      if (v62)
      {
        v76 = *(_QWORD *)(v71 + 32);
        v38 = v452;
        if ((v70 & 1) != 0
          && sub_22F1CF68C(*(_QWORD *)(v71 + 32), 0x1A7Eu, v41, *((_QWORD *)v58 + 13)) != 1)
        {
          break;
        }
        v73 = v76;
        v74 = 7018;
        v72 = v41;
      }
      else
      {
        v77 = *(_QWORD *)(v71 + 32);
        v38 = v452;
        if (sub_22F1CF68C(v77, 0x1A3Eu, v41, *((_QWORD *)v58 + 13)) != 1)
          break;
        if (!v70)
          goto LABEL_259;
        v73 = v77;
        v74 = 6782;
        v72 = v41;
      }
      goto LABEL_150;
    case 3:
      v38 = v452;
      if (v62
        || (v75 = *(_QWORD *)(v71 + 32), sub_22F1CF68C(v75, 0x1A3Eu, v41, *((_QWORD *)v58 + 13)) == 1))
      {
        if ((v70 & 1) == 0)
          goto LABEL_259;
      }
      else
      {
        if (sub_22F1CF68C(v75, 0x1A3Cu, v41, v71) == 1)
          v104 = v70;
        else
          v104 = 1;
        if ((v104 & 1) == 0)
          goto LABEL_259;
      }
      break;
    case 4:
      v38 = v452;
      if (v62)
        goto LABEL_259;
      v72 = v41;
      v73 = *(_QWORD *)(v71 + 32);
      v74 = 6554;
LABEL_150:
      if (sub_22F1CF68C(v73, v74, v72, v71) == 1)
        goto LABEL_259;
      break;
    default:
      v38 = v452;
      if ((v62 & (v70 ^ 1) & 1) != 0)
        goto LABEL_259;
      break;
  }
  sub_22F0D5A50(v437);
  v79 = v78;
  sub_22F0D60E4(v437);
  v81 = v80;
  v82 = *(_DWORD *)(v38 + 28);
  v83 = v38;
  if (((v82 & 0x7Eu) - 58 > 0xFFFFFFF9 || (v82 & 0x7F) == 0x1D && (v83 = *(_QWORD *)(v38 + 48)) != 0)
    && (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83) + 84) & 0x10) != 0
    && sub_22E631558(v83))
  {
    goto LABEL_259;
  }
  v84 = sub_22EEB5AAC((uint64_t)&v464);
  if (!v84)
    goto LABEL_259;
  v85 = v84;
  v435 = v81;
  v86 = *(_DWORD *)(v84 + 24);
  *(_QWORD *)&v496 = &v497;
  *((_QWORD *)&v496 + 1) = 0x600000000;
  sub_22E47EDD0((uint64_t)&v496, (v86 + 63) >> 6, 0);
  LODWORD(v498[4]) = v86;
  v87 = sub_22EEE2C98(*(_QWORD *)v85, &v496, 0, 0);
  if (!BYTE1(v472) && v87 != *(_DWORD *)(v85 + 24))
  {
    v105 = *(_QWORD *)(v85 + 40);
    v106 = *(_QWORD *)(v85 + 48);
    while (v105 != v106)
    {
      v107 = *(_QWORD **)v105;
      if (((*(_QWORD *)(v496 + (((unint64_t)*(unsigned int *)(*(_QWORD *)v105 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(*(_QWORD *)v105 + 48)) & 1) == 0
        && v107[7] == v107[8]
        && (v107[4] & 0xFFFFFFFFFFFFFFF8) != 0
        && *(_BYTE *)(v107[4] & 0xFFFFFFFFFFFFFFF8) == 6)
      {
        sub_22EEE2C98((uint64_t)v107, &v496, 0, 0);
      }
      v105 += 8;
    }
  }
  v434 = v42;
  v88 = *(_QWORD *)(v85 + 8);
  v89 = *(uint64_t **)(v88 + 56);
  v90 = *(uint64_t **)(v88 + 64);
  *(_QWORD *)&v505 = v89;
  *((_QWORD *)&v505 + 1) = v90;
  LODWORD(v506) = 255;
  *((_QWORD *)&v506 + 1) = v88;
  if (v89 != v90)
  {
    while (sub_22EED1DA0((char *)&v506, *v89, v88))
    {
      v89 += 2;
      *(_QWORD *)&v505 = v89;
      if (v89 == v90)
        goto LABEL_202;
    }
  }
  if (v89 == v90)
  {
LABEL_202:
    v103 = 4;
    v92 = (__int128 *)v496;
    v38 = v452;
    goto LABEL_222;
  }
  v430 = 0;
  v431 = v79;
  v91 = 0;
  v432 = 0;
  v433 = 0;
  v92 = (__int128 *)v496;
  v93 = *v89;
LABEL_164:
  if (((*(_QWORD *)((char *)v92 + (((unint64_t)*(unsigned int *)(v93 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v93 + 48)) & 1) == 0)
    goto LABEL_180;
  if ((*(_BYTE *)(v93 + 104) & 1) != 0)
  {
LABEL_179:
    v91 = 1;
    goto LABEL_180;
  }
  for (i = *(_QWORD *)v93; ; i += 16)
  {
    if (i == *(_QWORD *)(v93 + 8))
    {
      if ((*(_QWORD *)(v93 + 32) & 0xFFFFFFFFFFFFFFF8) == 0
        || (v95 = *(unsigned __int8 *)(*(_QWORD *)(v93 + 32) & 0xFFFFFFFFFFFFFFF8), v95 != 6) && v95 != 90)
      {
        v433 = 1;
        goto LABEL_180;
      }
      goto LABEL_179;
    }
    if ((*(_QWORD *)i & 3 | (4 * (*(_DWORD *)(i + 8) & 3u))) - 9 > 0xFFFFFFFC)
      break;
  }
  v96 = *(unsigned __int8 *)(*(_QWORD *)i & 0xFFFFFFFFFFFFFFFCLL);
  if (v96 > 0x58)
  {
    if (v96 != 89)
    {
      if (v96 == 93)
      {
LABEL_188:
        v432 = 1;
        goto LABEL_180;
      }
      if (v96 != 134)
        goto LABEL_191;
    }
LABEL_190:
    v430 = 1;
    goto LABEL_180;
  }
  switch(v96)
  {
    case 2u:
      v432 = 1;
      goto LABEL_190;
    case 6u:
      goto LABEL_179;
    case 0xAu:
      goto LABEL_188;
  }
LABEL_191:
  v100 = *(_QWORD **)(v93 + 80);
  v99 = *(_QWORD **)(v93 + 88);
  if (v100 != v99)
  {
    while (*v100 != v88)
    {
      v100 += 2;
      if (v100 == v99)
      {
        v100 = *(_QWORD **)(v93 + 88);
        break;
      }
    }
  }
  v101 = v100 == v99;
  v102 = !v101;
  v433 |= v102;
  v91 |= v101;
LABEL_180:
  v97 = v89 + 2;
  while (1)
  {
    *(_QWORD *)&v505 = v97;
    if (v97 == v90)
      break;
    v98 = *v97;
    v97 += 2;
    v93 = v98;
    if ((sub_22EED1DA0((char *)&v506, v98, v88) & 1) == 0)
    {
      v89 = v97 - 2;
      goto LABEL_164;
    }
  }
  if ((v432 & 1) != 0)
  {
    v38 = v452;
    v79 = v431;
    if ((v433 & 1) != 0)
      v103 = 2;
    else
      v103 = 1;
  }
  else
  {
    v79 = v431;
    if (((v91 | v430) & 1) != 0)
      v103 = 2;
    else
      v103 = 3;
    v38 = v452;
    if ((v433 & 1) == 0)
      v103 = 4;
  }
LABEL_222:
  if (v92 != &v497)
    free(v92);
  if (v103 == 4)
  {
    if (((!v62 | v70) & 1) != 0 || !v438)
      goto LABEL_259;
    v112 = *(_DWORD *)(v38 + 28);
    if ((v112 & 0x7Eu) - 52 >= 6)
      v113 = 0;
    else
      v113 = (void *)v38;
    v486 = v113;
    if (v113)
    {
      sub_22E8FCA40(v58, v79, v438, 0, (uint64_t)&v496);
      LODWORD(v505) = 0;
      v114 = sub_22E8900C4((uint64_t)&v496, (int *)&v505);
      sub_22E890024(v114, (uint64_t *)&v486);
    }
    else if ((v112 & 0x7F) == 0x18)
    {
      sub_22E8FCA40(v58, v79, v438, 0, (uint64_t)&v496);
      LODWORD(__p[0]) = 1;
      v117 = sub_22E8900C4((uint64_t)&v496, (int *)__p);
      v118 = v117;
      if (*(_BYTE *)(v117 + 80))
      {
        v119 = *(unsigned __int8 **)(v117 + 32);
        if (!v119)
        {
          v119 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v118 + 40));
          *(_QWORD *)(v118 + 32) = v119;
        }
        v119[*v119 + 1] = 11;
        v120 = *(_BYTE **)(v118 + 32);
        v121 = *v120;
        *v120 = v121 + 1;
        *(_QWORD *)&v120[8 * v121 + 16] = v38;
      }
      else if (*(_BYTE *)(v117 + 92))
      {
        v422 = (uint64_t *)(*(_QWORD *)v117 + 12784);
        v423 = *(_QWORD *)(v117 + 16);
        if (v423)
          v423 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v423 + 32))(v423);
        *(_QWORD *)&v505 = v423;
        v424 = sub_22F2F1D6C(v422, (uint64_t *)&v505)[1] + 32 * *(unsigned int *)(v118 + 88);
        v427 = *(unsigned __int8 **)(v424 + 8);
        v426 = (unsigned __int8 **)(v424 + 8);
        v425 = v427;
        if (!v427)
        {
          v425 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v426[1]);
          *v426 = v425;
        }
        v425[*v425 + 1] = 11;
        v428 = *v426;
        v429 = **v426;
        *v428 = v429 + 1;
        v38 = v452;
        *(_QWORD *)&v428[8 * v429 + 16] = v452;
      }
    }
    else
    {
      sub_22E8FCA40(v58, v79, v438, 0, (uint64_t)&v496);
    }
LABEL_257:
    v116 = (unsigned int *)&v496;
    goto LABEL_258;
  }
  if (v103 == 3)
  {
    if (!v70)
    {
      if (v62)
        goto LABEL_259;
      v110 = v435;
      if (!v449)
      {
        v115 = v58;
        v108 = v440;
        goto LABEL_247;
      }
      v111 = v58;
      v108 = v440;
      goto LABEL_235;
    }
    v109 = v435;
LABEL_233:
    v110 = v109;
    if (!v449)
    {
      v115 = v58;
      v108 = v443;
      goto LABEL_247;
    }
    v111 = v58;
    v108 = v443;
LABEL_235:
    sub_22E8FCA40(v111, v110, v108, 0, (uint64_t)&v496);
    v486 = *(void **)(*(_QWORD *)(v446 + 176) + 48);
    sub_22E8901B8((uint64_t)&v496, (uint64_t *)&v486);
    goto LABEL_257;
  }
  v108 = v434;
  v109 = v435;
  if (v103 != 2)
    goto LABEL_259;
  if (v70)
    goto LABEL_233;
  if (!v62)
  {
    v110 = v435;
    if (v449)
    {
      v111 = v58;
      goto LABEL_235;
    }
    v115 = v58;
LABEL_247:
    sub_22E8FCA40(v115, v110, v108, 0, (uint64_t)&v505);
    v116 = (unsigned int *)&v505;
LABEL_258:
    sub_22E903BEC(v116);
  }
LABEL_259:
  v10 = v451;
  v5 = v453;
LABEL_260:
  if ((v13 & 2) != 0)
  {
    if ((*(_DWORD *)(v38 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
      goto LABEL_269;
    v122 = *(_QWORD *)(v38 + 144) & 6;
    v123 = (_DWORD *)(*(_QWORD *)(v38 + 144) & 0xFFFFFFFFFFFFFFF8);
    if (v122 == 4 && v123)
    {
      v123 += 4;
      goto LABEL_268;
    }
    if (v122 == 2 && v123)
    {
LABEL_268:
      if (((((*v123 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
        goto LABEL_269;
    }
    else
    {
LABEL_269:
      v124 = *v10;
      v125 = (_QWORD *)*((_QWORD *)*v10 + 14);
      v126 = (*(uint64_t (**)(int *))(*(_QWORD *)v465 + 16))(v465);
      if (sub_22F1E3734(v125, v126))
      {
        *(_QWORD *)&v496 = off_24FAA54E0;
        *((_QWORD *)&v496 + 1) = v124;
        *(_QWORD *)&v497 = 0;
        sub_22EEE2EB0((uint64_t)&v464, *((_QWORD *)v124 + 10), (uint64_t)&v496);
      }
    }
  }
  if ((v13 & 4) != 0)
  {
    v280 = v465[6];
    v281 = (unint64_t)(*(uint64_t (**)(int *))(*(_QWORD *)v465 + 16))(v465) >> 32;
    v282 = v38;
    v283 = *v10;
    LOBYTE(v487) = 0;
    v486 = &off_24FAA5510;
    v488 = v283;
    v489 = (uint64_t)&v489;
    v490 = &v489;
    v491 = 0;
    v492 = v280;
    v493 = v281;
    v494 = 0;
    LOBYTE(v495) = 0;
    v284 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v282 + 16);
    v285 = v284(v282);
    v286 = *(_QWORD *)(v5 + 32);
    if (sub_22F1CF68C(v286, 0x1B8Du, v285, v5) != 1)
      LOBYTE(v487) = 1;
    v287 = v284(v452);
    if (sub_22F1CF68C(v286, 0x1B8Eu, v287, v5) != 1)
      LOBYTE(v495) = 1;
    sub_22F356078((uint64_t)&v464, (uint64_t)&v486, (uint64_t *)v283 + 1519);
    *(_QWORD *)&v496 = *((_QWORD *)v488 + 14);
    sub_22E892B64((uint64_t)v490, (uint64_t)&v489, v491, (_QWORD **)&v496);
    for (j = v490; j != &v489; j = (uint64_t *)j[1])
    {
      sub_22E90379C(v488, *((_DWORD *)j + 4), (uint64_t)(j + 3), 0, (uint64_t)&v496);
      sub_22E903BEC((unsigned int *)&v496);
      v289 = *((unsigned int *)j + 14);
      if ((_DWORD)v289)
      {
        v290 = (int *)j[6];
        v291 = &v290[8 * v289];
        do
        {
          v292 = (uint64_t)(v290 + 2);
          v293 = *v290;
          v290 += 8;
          sub_22E90379C(v488, v293, v292, 0, (uint64_t)&v505);
          sub_22E903BEC((unsigned int *)&v505);
        }
        while (v290 != v291);
      }
    }
    v486 = &off_24FAA5510;
    sub_22F2F1FB8(&v489);
    v10 = v451;
    v38 = v452;
  }
  if ((v13 & 8) != 0)
  {
    v294 = *v10;
    *(_QWORD *)&v505 = &off_24FAA55A8;
    *((_QWORD *)&v505 + 1) = v294;
    *(_QWORD *)&v506 = &v506;
    *((_QWORD *)&v506 + 1) = &v506;
    *(_QWORD *)&v507 = 0;
    v497 = 0u;
    memset(v498, 0, 24);
    v496 = 0u;
    v498[4] = &v505;
    sub_22EEE0680((uint64_t)&v496, (uint64_t)&v464);
    sub_22F2F2028((uint64_t)&v496);
    *(_QWORD *)&v505 = &off_24FAA55A8;
    sub_22F2F1FB8((uint64_t *)&v506);
  }
  v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
  v128 = *(_QWORD *)(v5 + 32);
  if (sub_22F1CF68C(v128, 0x1BB5u, v127, v5) != 1
    || sub_22F1CF68C(v128, 0x1B53u, v127, v5) != 1
    || sub_22F1CF68C(v128, 0x1A41u, v127, v5) != 1
    || sub_22F1CF68C(v128, 0x1BB2u, v127, v5) != 1)
  {
    v129 = sub_22EEB5AAC((uint64_t)&v464);
    if (v129)
    {
      v130 = (_DWORD *)v129;
      v131 = *v10;
      *(_QWORD *)&v496 = &off_24FAA5608;
      *((_QWORD *)&v496 + 1) = v131;
      v497 = 0uLL;
      LODWORD(v498[0]) = 0;
      memset(&v498[1], 0, 44);
      v499 = 0;
      v498[7] = 0;
      v498[8] = 0;
      *(_QWORD *)&v505 = 0;
      v132 = sub_22EFCAE04(v38);
      sub_22EF09370(v132, v130, (uint64_t)&v464, (uint64_t)&v496, &v505);
      if (*((_BYTE *)*v10 + 200))
      {
        v133 = v505;
        if ((_DWORD)v505)
        {
          v134 = *((_DWORD *)v10 + 17) + v505;
          ++*((_DWORD *)v10 + 16);
          *((_DWORD *)v10 + 17) = v134;
          if (*((_DWORD *)v10 + 18) > v133)
            v133 = *((_DWORD *)v10 + 18);
          v135 = DWORD1(v505);
          v136 = *((_DWORD *)v10 + 19) + DWORD1(v505);
          *((_DWORD *)v10 + 18) = v133;
          *((_DWORD *)v10 + 19) = v136;
          v137 = *((_DWORD *)v10 + 20);
          if (v137 <= v135)
            v137 = v135;
          *((_DWORD *)v10 + 20) = v137;
        }
      }
      sub_22E88FBC0((uint64_t)&v496);
    }
  }
  v138 = v38;
  v139 = *(_QWORD *)v38;
  v140 = *(_QWORD *)(v5 + 32);
  if ((**((_QWORD **)*v10 + 9) & 0x4100) == 0x4000)
  {
    v141 = 0;
    v142 = (*(uint64_t (**)(uint64_t))(v139 + 16))(v138);
    while (sub_22F1CF68C(v140, dword_22F462B8C[v141], v142, v5) == 1)
    {
      if (++v141 == 3)
      {
        v143 = 0;
        while (sub_22F1CF68C(v140, dword_22F462B98[v143], v142, v5) == 1)
        {
          if (++v143 == 3)
            goto LABEL_303;
        }
        break;
      }
    }
    v144 = sub_22EEB5AAC((uint64_t)&v464);
    v139 = *(_QWORD *)v452;
    v140 = *(_QWORD *)(v5 + 32);
    if (v144)
    {
      v10 = v451;
      v145 = *v451;
      v146 = v451[2];
      *(_QWORD *)&v496 = &off_24FAA5640;
      *((_QWORD *)&v496 + 1) = v145;
      *(_QWORD *)&v497 = v146;
      v147 = (*(uint64_t (**)(uint64_t))(v139 + 16))(v452);
      v148 = 0;
      v149 = v147;
      do
        v150 = sub_22F1CF68C(v140, dword_22F462B98[v148], v149, v5);
      while (v150 == 1 && v148++ != 2);
      sub_22EEBB02C((uint64_t)&v464, (uint64_t)&v496, v150 != 1);
      v139 = *(_QWORD *)v452;
      v140 = *(_QWORD *)(v5 + 32);
    }
    else
    {
LABEL_303:
      v10 = v451;
    }
  }
  v152 = (*(uint64_t (**)(uint64_t))(v139 + 16))(v452);
  v153 = sub_22F1CF68C(v140, 0x1B9Fu, v152, v453);
  v154 = v152;
  v155 = v453;
  v156 = sub_22F1CF68C(v140, 0x1BA0u, v154, v453);
  v157 = v153 == 1 && v156 == 1;
  if (v157 && (*(_BYTE *)(v446 + 9) & 2) == 0)
    goto LABEL_522;
  v158 = *v10;
  LOBYTE(v496) = 0;
  *((_QWORD *)&v496 + 1) = &v498[1];
  *(_QWORD *)&v497 = &v498[1];
  *((_QWORD *)&v497 + 1) = 8;
  LODWORD(v498[0]) = 0;
  v439 = (llvm::APInt *)v158;
  v499 = v158;
  v500 = v504;
  v501 = v504;
  v502 = 16;
  v503 = 0;
  v159 = sub_22EEB575C(&v464, &v505);
  sub_22E8997E4((uint64_t)&v496, v159, 0);
  if (!(_BYTE)v496 || v153 == 1 && HIDWORD(v497) == LODWORD(v498[0]))
    goto LABEL_517;
  v160 = (const void **)sub_22EEB5AAC((uint64_t)&v464);
  if (!v160)
    goto LABEL_517;
  v161 = v160;
  v506 = 0u;
  v507 = 0u;
  v505 = 0u;
  sub_22E3BA850((uint64_t)&v500, *v160);
  v486 = (void *)*v161;
  sub_22E8A74D4(&v505, &v486);
  v162 = (_QWORD **)v161[5];
  v163 = (_QWORD **)v161[6];
  while (v162 != v163)
  {
    v164 = *v162;
    v486 = v164;
    v165 = (_BYTE *)v164[3];
    if (v165 && (*v165 & 0xFE) == 0x62)
    {
      sub_22E3BA850((uint64_t)&v500, v164);
      if (v166)
        sub_22E8A74D4(&v505, &v486);
    }
    ++v162;
  }
  while (*((_QWORD *)&v507 + 1))
  {
    v167 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v505 + 1) + (((unint64_t)v507 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v507 & 0x1FF));
    --*((_QWORD *)&v507 + 1);
    *(_QWORD *)&v507 = v507 + 1;
    if ((unint64_t)v507 >= 0x400)
    {
      operator delete(**((void ***)&v505 + 1));
      *((_QWORD *)&v505 + 1) += 8;
      *(_QWORD *)&v507 = v507 - 512;
    }
    v168 = *(void ***)(v167 + 80);
    v169 = *(void ***)(v167 + 88);
    while (v168 != v169)
    {
      v170 = *v168;
      v486 = v170;
      if (v170)
      {
        sub_22E3BA850((uint64_t)&v500, v170);
        if (v171)
          sub_22E8A74D4(&v505, &v486);
      }
      v168 += 2;
    }
  }
  sub_22E8A77E8((uint64_t)&v505);
  v172 = (char *)v161[5];
  v173 = (char *)v161[6];
  if (v173 == v172)
    goto LABEL_502;
  if (v153 == 1)
    v174 = 7072;
  else
    v174 = 7071;
  v436 = v174;
  v444 = (char *)v161[5];
  while (2)
  {
    v176 = (_QWORD *)*((_QWORD *)v173 - 1);
    v173 -= 8;
    v175 = v176;
    v177 = (_BYTE *)v176[3];
    if (!v177 || (*v177 & 0xFE) != 0x62)
      goto LABEL_469;
    if (v465)
      v178 = (v465[7] & 0x7Eu) - 58 >= 0xFFFFFFFA;
    else
      v178 = 0;
    if (v178)
    {
      v179 = *((_QWORD *)v465 + 18) & 6;
      v180 = (_DWORD *)(*((_QWORD *)v465 + 18) & 0xFFFFFFFFFFFFFFF8);
      if (v179 != 4 || v180 == 0)
      {
        if (v179 != 2 || v180 == 0)
          goto LABEL_352;
      }
      else
      {
        v180 += 4;
      }
      v441 = ((((*v180 >> 1) & 3) + 1) & 5) != 0;
    }
    else
    {
LABEL_352:
      v441 = 0;
    }
    v183 = (char *)v175[7];
    v184 = (char *)v175[8];
    memset(__p, 0, sizeof(__p));
    *(_OWORD *)v482 = 0u;
    v185 = v184 - v183;
    v186 = (v184 - v183) >> 4;
    if (v184 == v183)
    {
      v194 = 0;
    }
    else
    {
      if (((v186 + 1) & 0x1FF) != 0)
        v187 = ((unint64_t)(v186 + 1) >> 9) + 1;
      else
        v187 = (unint64_t)(v186 + 1) >> 9;
      if (v187)
      {
        v460 = &__p[3];
        v457 = (char *)operator new(8 * v187);
        v458 = v457;
        *(_QWORD *)&v459 = v457;
        *((_QWORD *)&v459 + 1) = &v457[8 * v187];
        do
        {
          v462 = operator new(0x1000uLL);
          sub_22F2D2D80((uint64_t)&v457, &v462);
          --v187;
        }
        while (v187);
        v188 = __p[1];
        v189 = __p[2];
        while (v189 != v188)
        {
          sub_22F2D2EA4((void **)&v457, --v189);
          v188 = __p[1];
        }
        v190 = __p[0];
        v191 = v458;
        __p[0] = v457;
        __p[1] = v458;
        *(_OWORD *)&__p[2] = v459;
        if (v190)
        {
          operator delete(v190);
          v192 = *(_QWORD *)v482;
          v193 = (char *)__p[2];
          v191 = (char *)__p[1];
        }
        else
        {
          v192 = *(_QWORD *)v482;
          v193 = (char *)v459;
        }
        v185 = *(_QWORD *)&v482[8];
        v195 = v192 + *(_WORD *)&v482[8];
        v194 = &v191[8 * ((unint64_t)(v192 + *(_QWORD *)&v482[8]) >> 9)];
        if (v193 != v191)
        {
          v196 = *(_QWORD *)v194 + 8 * (v195 & 0x1FF);
          goto LABEL_371;
        }
      }
      else
      {
        v194 = 0;
        v185 = 0;
      }
    }
    v196 = 0;
LABEL_371:
    if (v184 == v183)
    {
      v199 = v196;
      v198 = v194;
    }
    else
    {
      v197 = v186 + ((v196 - *(_QWORD *)v194) >> 3);
      if (v197 < 1)
      {
        v200 = 511 - v197;
        LOWORD(v197) = ~(511 - v197);
        v198 = &v194[-8 * (v200 >> 9)];
      }
      else
      {
        v198 = &v194[8 * ((unint64_t)v197 >> 9)];
      }
      v199 = *(_QWORD *)v198 + 8 * (v197 & 0x1FF);
    }
    if (v196 != v199)
    {
      do
      {
        v201 = v199;
        if (v194 != v198)
          v201 = *(_QWORD *)v194 + 4096;
        if (v196 == v201)
        {
          v201 = v196;
        }
        else
        {
          v202 = (_QWORD *)v196;
          do
          {
            v203 = *(_QWORD *)v183;
            v183 += 16;
            *v202++ = v203;
          }
          while (v202 != (_QWORD *)v201);
        }
        v185 += (v201 - v196) >> 3;
        if (v194 == v198)
          break;
        v204 = *((_QWORD *)v194 + 1);
        v194 += 8;
        v196 = v204;
      }
      while (v204 != v199);
      *(_QWORD *)&v482[8] = v185;
    }
    if (!v185)
    {
      sub_22E8A77E8((uint64_t)__p);
      goto LABEL_468;
    }
    v205 = 0;
    v206 = 0;
    while (2)
    {
      v207 = *(uint64_t **)(*(_QWORD *)((char *)__p[1] + ((*(_QWORD *)v482 >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * (*(_WORD *)v482 & 0x1FF));
      *(_QWORD *)&v482[8] = v185 - 1;
      if (++*(_QWORD *)v482 >= 0x400uLL)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)v482 -= 512;
      }
      if (!v207 || (v207[4] & 0xFFFFFFFFFFFFFFF8) != 0 && *(_BYTE *)(v207[4] & 0xFFFFFFFFFFFFFFF8) == 100)
        goto LABEL_443;
      v208 = (unsigned __int8 *)v207[3];
      if (!v208)
      {
LABEL_406:
        v211 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v500, v207);
        if (v501 == v500)
          v212 = (uint64_t *)((char *)&v502 + 4);
        else
          v212 = &v502;
        if (v211 == (void **)((char *)v501 + 8 * *(unsigned int *)v212))
        {
          v215 = *v207;
          v216 = v207[1];
          while (v215 != v216)
          {
            if ((*(_QWORD *)v215 & 3 | (4 * (*(_DWORD *)(v215 + 8) & 3u))) - 9 >= 0xFFFFFFFD)
            {
              v217 = sub_22E8A7378((_BYTE *)(*(_QWORD *)v215 & 0xFFFFFFFFFFFFFFFCLL));
              if (v217)
              {
                v221 = v217;
                if (!v441)
                {
                  sub_22E8FCA40(v499, *((_DWORD *)v217 + 1), 0x1BC0u, 0, (uint64_t)&v505);
                  sub_22E903BEC((unsigned int *)&v505);
                }
                v222 = v221;
                goto LABEL_435;
              }
            }
            v215 += 16;
          }
        }
        else
        {
          v213 = (_BYTE *)(v207[4] & 0xFFFFFFFFFFFFFFF8);
          if (!v213)
          {
            for (k = *v207; k != v207[1]; k += 16)
            {
              if ((*(_QWORD *)k & 3 | (4 * (*(_DWORD *)(k + 8) & 3u))) - 9 >= 0xFFFFFFFD)
              {
                v213 = (_BYTE *)(*(_QWORD *)k & 0xFFFFFFFFFFFFFFFCLL);
                goto LABEL_433;
              }
            }
            v218 = (unsigned __int16 *)v207[3];
            if (v218 && (v219 = *(unsigned __int8 *)v218, (v219 & 0xFE) == 0x62))
            {
              if (v219 == 98)
                v220 = *(_BYTE **)&v218[4 * (((unint64_t)*v218 >> 8) & 1) + 16];
              else
                v220 = (_BYTE *)*((_QWORD *)v218 + 3);
              if ((*v220 & 0xFE) == 0x62)
                v213 = 0;
              else
                v213 = v220;
            }
            else
            {
              v213 = 0;
            }
          }
LABEL_433:
          v223 = sub_22E8A7378(v213);
          if (v223)
          {
            v222 = v223;
LABEL_435:
            v224 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)((char *)&v496 + 8), v222);
            if ((_QWORD)v497 == *((_QWORD *)&v496 + 1))
              v225 = (char *)&v497 + 12;
            else
              v225 = (char *)&v497 + 8;
            if (v224 != (void **)(v497 + 8 * *(unsigned int *)v225))
            {
              *v224 = (void *)-2;
              ++LODWORD(v498[0]);
            }
            ++v206;
          }
          else if (v213)
          {
            ++v205;
          }
          else
          {
            v226 = (void **)v207[7];
            v227 = (void **)v207[8];
            while (v226 != v227)
            {
              v228 = (char *)*v226;
              v226 += 2;
              v457 = v228;
              sub_22E8A74D4(__p, &v457);
            }
          }
        }
        goto LABEL_443;
      }
      v209 = *v208;
      if ((v209 & 0xFE) != 0x62)
        goto LABEL_403;
      if (v209 != 99)
      {
        if (v209 == 98)
        {
          v210 = &v208[8 * (HIBYTE(*(unsigned __int16 *)v208) & 1) + 32];
          v209 = *(_WORD *)v208;
          goto LABEL_401;
        }
        goto LABEL_402;
      }
      v210 = v208 + 24;
LABEL_401:
      if (*(_QWORD *)v210 != v175[3])
      {
LABEL_403:
        if (v209 == 235 && *((_QWORD *)v208 + 2) == v175[3] && v207[1] == *v207)
          goto LABEL_443;
        goto LABEL_406;
      }
LABEL_402:
      if (v207[1] != *v207)
        goto LABEL_403;
LABEL_443:
      v185 = *(_QWORD *)&v482[8];
      if (*(_QWORD *)&v482[8])
        continue;
      break;
    }
    sub_22E8A77E8((uint64_t)__p);
    v172 = v444;
    if (v205)
    {
      sub_22F0D5A50((uint64_t)v177);
      sub_22E8FCA40(v439, v229, v436, 0, (uint64_t)&v486);
      sub_22E903BEC((unsigned int *)&v486);
      v172 = v444;
      if (!v206)
      {
        sub_22F0D5A50((uint64_t)v177);
        v172 = v444;
        if ((v230 & 0x80000000) == 0)
        {
          v231 = (_BYTE *)(v175[4] & 0xFFFFFFFFFFFFFFF8);
          v232 = v175[1];
          v233 = *v175 == v232;
          if (*v175 != v232 || v231)
          {
LABEL_458:
            v237 = !v233 || v231 == 0;
            if (v237 || *v231 != 3)
              goto LABEL_472;
            v238 = v230;
          }
          else
          {
            while (1)
            {
              v234 = v175[10];
              if (((v175[11] - v234) & 0xFFFFFFFF0) != 0x10)
                break;
              v175 = *(_QWORD **)v234;
              v231 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)v234 + 32) & 0xFFFFFFFFFFFFFFF8);
              v235 = v175[1];
              v233 = *v175 == v235;
              if (*v175 != v235 || v231 != 0)
                goto LABEL_458;
            }
LABEL_472:
            v239 = *((_QWORD *)v439 + 10);
            LOWORD(__p[0]) = 19;
            v238 = v230;
            __p[1] = 0;
            LOWORD(__p[2]) = 19;
            __p[3] = 0;
            v240 = sub_22E3CB704((llvm::StringMapImpl *)(v239 + 544), "fallthrough", 0xBuLL);
            *(_WORD *)v482 = 5;
            *(_QWORD *)&v482[8] = v240;
            *(_WORD *)&v482[16] = 20;
            v483 = 0;
            v484 = 20;
            v485 = 0;
            LOWORD(v505) = 19;
            *((_QWORD *)&v505 + 1) = 0;
            LOWORD(v506) = 19;
            *((_QWORD *)&v506 + 1) = 0;
            v241 = sub_22E3CB704((llvm::StringMapImpl *)(v239 + 544), "clang", 5uLL);
            LOWORD(v507) = 5;
            *((_QWORD *)&v507 + 1) = v241;
            v508 = 71;
            v509 = 0;
            v242 = sub_22E3CB704((llvm::StringMapImpl *)(v239 + 544), "fallthrough", 0xBuLL);
            LOWORD(v510) = 5;
            v511 = v242;
            v512 = 20;
            v513 = 0;
            v514 = 20;
            v243 = v239;
            v515 = 0;
            v244 = **(_QWORD **)(v239 + 56) & 0x808;
            if (v244)
            {
              v245 = sub_22F18DFA4(v239, v238, (unsigned __int16 *)__p, 5);
              if (!v246)
              {
                v247 = (unsigned __int16 *)&v505;
                v248 = v239;
                v249 = v238;
                v250 = 7;
LABEL_477:
                v245 = sub_22F18DFA4(v248, v249, v247, v250);
              }
            }
            else
            {
              v245 = sub_22F18DFA4(v239, v238, (unsigned __int16 *)&v505, 7);
              if (!v246)
              {
                v247 = (unsigned __int16 *)__p;
                v248 = v239;
                v249 = v238;
                v250 = 5;
                goto LABEL_477;
              }
            }
            v251 = v246;
            v252 = v246 == 0;
            if (v246)
              v253 = (const char *)v245;
            else
              v253 = "[[fallthrough]]";
            if (v252)
              v254 = 15;
            else
              v254 = v251;
            v255 = (char *)(v251 | v244);
            if (v251 | v244)
            {
              v462 = (void *)v253;
              v463 = v254;
              __p[0] = &__p[3];
              *(_OWORD *)&__p[1] = xmmword_22F44E300;
              if (v254 < 0x41)
              {
                v255 = 0;
                goto LABEL_494;
              }
              v259 = v253;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v253 = v259;
              v255 = (char *)__p[1];
              v256 = (void **)__p[0];
              v254 = v251;
            }
            else
            {
              if ((**(_QWORD **)(v243 + 56) & 0x100) != 0)
                v253 = "[[clang::fallthrough]]";
              else
                v253 = "__attribute__((fallthrough))";
              if ((**(_QWORD **)(v243 + 56) & 0x100) != 0)
                v254 = 22;
              else
                v254 = 28;
              v462 = (void *)v253;
              v463 = v254;
              __p[0] = &__p[3];
              *(_OWORD *)&__p[1] = xmmword_22F44E300;
LABEL_494:
              v256 = &__p[3];
            }
            memcpy(&v255[(_QWORD)v256], v253, v254);
            v257 = (char *)__p[1] + v254;
            __p[1] = v257;
            if (__p[2] < v257 + 2)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v257 = (char *)__p[1];
            }
            *(_WORD *)((char *)__p[0] + (unint64_t)v257) = 8251;
            __p[1] = (char *)__p[1] + 2;
            sub_22E8FCA40(v439, v238, 0x1635u, 0, (uint64_t)&v505);
            v258 = sub_22F2F2210((uint64_t)&v505, (uint64_t)&v462);
            sub_22E729148(__p[0], (size_t)__p[1], v238, 0, (uint64_t)&v457);
            sub_22E890748(v258, &v457);
            if (v461 < 0)
              operator delete(*((void **)&v459 + 1));
            sub_22E903BEC((unsigned int *)&v505);
            if (__p[0] != &__p[3])
              free(__p[0]);
          }
          sub_22E8FCA40(v439, v238, 0x1634u, 0, (uint64_t)&v505);
          BYTE4(__p[2]) = 0;
          *(void **)((char *)&__p[1] + 4) = 0;
          __p[0] = (void *)(v238 | (v238 << 32));
          LOBYTE(__p[1]) = 0;
          *(_QWORD *)v482 = 0;
          *(_QWORD *)&v482[7] = 0;
          strcpy((char *)&__p[3], "break; ");
          *(_WORD *)&v482[15] = 7;
          sub_22E890748((uint64_t)&v505, __p);
          if ((v482[15] & 0x80000000) != 0)
            operator delete(__p[3]);
          sub_22E903BEC((unsigned int *)&v505);
LABEL_468:
          v172 = v444;
        }
      }
    }
LABEL_469:
    if (v173 != v172)
      continue;
    break;
  }
LABEL_502:
  if ((_QWORD)v497 == *((_QWORD *)&v496 + 1))
    v260 = (char *)&v497 + 12;
  else
    v260 = (char *)&v497 + 8;
  v261 = *(unsigned int *)v260;
  if ((_DWORD)v261)
  {
    v262 = 8 * v261;
    v263 = (unint64_t *)v497;
    v10 = v451;
    v155 = v453;
    while (*v263 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v263;
      v262 -= 8;
      if (!v262)
        goto LABEL_517;
    }
  }
  else
  {
    v263 = (unint64_t *)v497;
    v10 = v451;
    v155 = v453;
  }
  v264 = v497 + 8 * v261;
  if (v263 != (unint64_t *)v264)
  {
    v265 = *v263;
LABEL_513:
    sub_22E8FCA40(v439, *(_DWORD *)(v265 + 4), 0xD1Cu, 0, (uint64_t)&v505);
    sub_22E903BEC((unsigned int *)&v505);
    v266 = v263 + 1;
    while (v266 != (unint64_t *)v264)
    {
      v267 = *v266++;
      v265 = v267;
      if (v267 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v263 = v266 - 1;
        goto LABEL_513;
      }
    }
  }
LABEL_517:
  if (v501 != v500)
    free(v501);
  if ((_QWORD)v497 != *((_QWORD *)&v496 + 1))
    free((void *)v497);
  v139 = *(_QWORD *)v452;
  v140 = *(_QWORD *)(v155 + 32);
LABEL_522:
  v268 = *v10;
  if ((*(_WORD *)(*((_QWORD *)*v10 + 9) + 148) & 8) == 0)
  {
    v269 = v452;
    goto LABEL_645;
  }
  v269 = v452;
  v270 = (*(uint64_t (**)(uint64_t))(v139 + 16))(v452);
  if (sub_22F1CF68C(v140, 0x183Cu, v270, v155) == 1)
    goto LABEL_645;
  v450 = (uint64_t **)sub_22EEB5DA4((uint64_t)&v464);
  v271 = *((_QWORD *)v268 + 11);
  *(_QWORD *)&v496 = &v497;
  *((_QWORD *)&v496 + 1) = 0x800000000;
  v272 = *(_DWORD *)(v446 + 704);
  if (v272 <= 1)
  {
    if (v272)
    {
      v273 = v446 + 712;
      v274 = 8;
    }
    else
    {
      v273 = *(_QWORD *)(v446 + 712);
      v274 = *(unsigned int *)(v446 + 720);
    }
    v278 = (uint64_t *)(v273 + (v274 << 6));
    v277 = v278;
    goto LABEL_553;
  }
  if ((v272 & 1) != 0)
  {
    v275 = (uint64_t *)(v446 + 712);
    v277 = (uint64_t *)(v446 + 1224);
LABEL_532:
    v272 = *(_DWORD *)(v446 + 704) & 1;
    v278 = v275;
    while ((*v278 & 0xFFFFFFFFFFFFFFFBLL) == 0 && v278[1] == 0)
    {
      v278 += 8;
      if (v278 == v277)
      {
        v278 = v277;
        break;
      }
    }
LABEL_553:
    if (!v272)
    {
      v275 = *(uint64_t **)(v446 + 712);
      LODWORD(v295) = *(_DWORD *)(v446 + 720);
      goto LABEL_557;
    }
    v275 = (uint64_t *)(v446 + 712);
    v295 = 8;
  }
  else
  {
    v275 = *(uint64_t **)(v446 + 712);
    v276 = *(unsigned int *)(v446 + 720);
    if ((_DWORD)v276)
    {
      v277 = &v275[8 * v276];
      goto LABEL_532;
    }
    LODWORD(v295) = 0;
    v277 = *(uint64_t **)(v446 + 712);
    v278 = v277;
LABEL_557:
    v295 = v295;
  }
  v296 = &v275[8 * v295];
  if (v278 == v296)
    goto LABEL_644;
  v445 = v271;
  while (2)
  {
    v297 = *((unsigned int *)v278 + 6);
    if (!(_DWORD)v297)
      goto LABEL_572;
    v298 = 0;
    v299 = v278[2];
    v300 = 8 * v297;
    while (1)
    {
      v301 = *(_QWORD *)(v299 + v298);
      if ((v301 & 2) != 0)
        break;
      v298 += 8;
      if (v300 == v298)
        goto LABEL_572;
    }
    if (v298)
    {
LABEL_569:
      *(_QWORD *)&v505 = *(_QWORD *)(v299 + v298) & 0xFFFFFFFFFFFFFFFCLL;
      *((_QWORD *)&v505 + 1) = v278;
      *(_QWORD *)&v506 = v277;
      v305 = v496;
      if (DWORD2(v496) >= HIDWORD(v496))
      {
        if ((unint64_t)v496 <= (unint64_t)&v505
          && (unint64_t)v496 + 24 * DWORD2(v496) > (unint64_t)&v505)
        {
          v321 = (char *)&v505 - v496;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v305 = v496;
          v306 = &v321[v496];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v306 = (char *)&v505;
          v305 = v496;
        }
      }
      else
      {
        v306 = (char *)&v505;
      }
      v307 = v305 + 24 * DWORD2(v496);
      v308 = *(_OWORD *)v306;
      *(_QWORD *)(v307 + 16) = *((_QWORD *)v306 + 2);
      *(_OWORD *)v307 = v308;
      ++DWORD2(v496);
      goto LABEL_572;
    }
    v302 = (char *)(v299 + 8);
    v303 = v300 - 8;
    while (v303)
    {
      v304 = *v302;
      v302 += 8;
      v303 -= 8;
      if ((v304 & 2) != 0)
        goto LABEL_569;
    }
    v313 = (unsigned __int8 *)(v301 & 0xFFFFFFFFFFFFFFFCLL);
    while (2)
    {
      v314 = *v313;
      if (v314 > 0xD)
      {
        if (v314 == 14 || v314 == 92 || v314 == 236)
          goto LABEL_604;
        goto LABEL_590;
      }
      if (v314 == 5)
        goto LABEL_604;
      if (v314 != 13)
      {
LABEL_590:
        v313 = (unsigned __int8 *)sub_22F3EFCCC(v450, (uint64_t)v313);
        if (!v313)
          goto LABEL_572;
        continue;
      }
      break;
    }
    LOWORD(v505) = 0;
    *((_QWORD *)&v505 + 1) = 0;
    LODWORD(v506) = 0;
    if (sub_22F00554C(*((_QWORD *)v313 + 2), (uint64_t)&v505, v445, 0, 0))
    {
      v315 = v507;
      if (v507 > 0x40)
        v316 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)&v506 + 8)) == v315;
      else
        v316 = *((_QWORD *)&v506 + 1) == 0;
      v318 = v316;
      v317 = v318 ^ 1;
    }
    else
    {
      v317 = 1;
    }
    if (v506 >= 2)
      sub_22EF53BC0((uint64_t *)&v506);
    if ((v317 & 1) == 0)
      goto LABEL_572;
LABEL_604:
    v319 = *v278;
    if ((*v278 & 4) != 0)
    {
      v320 = v319 & 0xFFFFFFFFFFFFFFF8;
      if ((v319 & 0xFFFFFFFFFFFFFFF8) == 0)
        v320 = v278[1];
      if (!v320
        || (*(_DWORD *)(v320 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9
        || !sub_22E3CB5E0(v320)
        || (*(_DWORD *)(v320 + 28) & 0x7F) == 0x40)
      {
        goto LABEL_569;
      }
    }
LABEL_572:
    v309 = v278 + 8;
    while (v309 != v277)
    {
      v310 = *v309;
      v311 = v309[1];
      v309 += 8;
      if ((v310 & 0xFFFFFFFFFFFFFFFBLL) != 0 || v311 != 0)
      {
        v278 = v309 - 8;
        goto LABEL_580;
      }
    }
    v278 = v277;
LABEL_580:
    if (v278 != v296)
      continue;
    break;
  }
  v322 = (uint64_t *)v496;
  if (!DWORD2(v496))
    goto LABEL_642;
  *(_QWORD *)&v505 = *((_QWORD *)v268 + 14);
  sub_22E8A790C(v496, (uint64_t *)(v496 + 24 * DWORD2(v496)), (_QWORD **)&v505, 126 - 2 * __clz(DWORD2(v496)), 1);
  if ((*(_DWORD *)(v446 + 8) & 7) == 1)
    v323 = 2;
  else
    v323 = (*(_DWORD *)(v446 + 8) & 7) == 2 ? 3 : (*(_DWORD *)(v452 + 28) & 0x7F) == 24;
  v322 = (uint64_t *)v496;
  if (!DWORD2(v496))
    goto LABEL_642;
  v324 = v496 + 24 * DWORD2(v496);
  while (2)
  {
    v326 = *v322;
    v325 = v322[1];
    v327 = *(_QWORD *)(v325 + 8);
    if ((*(_QWORD *)v325 & 4) != 0)
      v328 = 6204;
    else
      v328 = 6203;
    v486 = *(void **)(v325 + 8);
    v329 = *(_DWORD *)(v327 + 28) & 0x7F;
    if ((v329 - 60) >= 7)
    {
      if (v329 == 24)
      {
        v330 = 2;
        goto LABEL_635;
      }
      if (v329 != 25)
      {
        v330 = 3;
        goto LABEL_635;
      }
      if (!sub_22E8A78AC(v327))
      {
        v330 = 1;
        goto LABEL_635;
      }
    }
    else
    {
      v330 = 0;
LABEL_635:
      sub_22F0D5A50(v326);
      sub_22E8FCA40(v268, v331, v328, 0, (uint64_t)&v505);
      LODWORD(v457) = v330;
      v332 = sub_22E8900C4((uint64_t)&v505, (int *)&v457);
      v333 = sub_22E890024(v332, (uint64_t *)&v486);
      LODWORD(v462) = v323;
      v334 = sub_22E8900C4(v333, (int *)&v462);
      sub_22F0D4E74(v326);
      __p[0] = v335;
      sub_22E8906A0(v334, (uint64_t *)__p);
      sub_22E903BEC((unsigned int *)&v505);
      v336 = *(unsigned int *)(v325 + 24);
      if ((_DWORD)v336)
      {
        v337 = *(_QWORD **)(v325 + 16);
        v338 = 8 * v336;
        do
        {
          v339 = *v337 & 0xFFFFFFFFFFFFFFFCLL;
          if (v326 != v339)
          {
            sub_22F0D5A50(v339);
            sub_22E8FCA40(v268, v340, 0x1540u, 0, (uint64_t)&v505);
            sub_22F0D4E74(*v337 & 0xFFFFFFFFFFFFFFFCLL);
            __p[0] = v341;
            sub_22E8906A0((uint64_t)&v505, (uint64_t *)__p);
            sub_22E903BEC((unsigned int *)&v505);
          }
          ++v337;
          v338 -= 8;
        }
        while (v338);
      }
    }
    v322 += 3;
    if (v322 != (uint64_t *)v324)
      continue;
    break;
  }
  v322 = (uint64_t *)v496;
LABEL_642:
  if (v322 != (uint64_t *)&v497)
    free(v322);
LABEL_644:
  v269 = v452;
  v155 = v453;
  v139 = *(_QWORD *)v452;
  v140 = *(_QWORD *)(v453 + 32);
LABEL_645:
  v342 = *(uint64_t (**)(unint64_t))(v139 + 16);
  v343 = v342(v269);
  if (sub_22F1CF68C(v140, 0x1A15u, v343, v155) != 1
    && (*(_DWORD *)(v269 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v344 = *v451;
    v345 = (*(uint64_t (**)(unint64_t))(v139 + 32))(v269);
    if (*(_QWORD *)(v345 + 144) < 8uLL || (*(_QWORD *)(v345 + 144) & 6) == 2)
    {
      v347 = v345;
      v348 = (_QWORD *)sub_22EEB5AAC((uint64_t)&v464);
      if (v348)
      {
        v349 = v348[1];
        if (*(_QWORD *)(v349 + 56) != *(_QWORD *)(v349 + 64))
        {
          v447 = v344;
          v350 = 0;
          *(_QWORD *)&v496 = v498;
          *((_QWORD *)&v496 + 1) = v498;
          *(_QWORD *)&v497 = 16;
          DWORD2(v497) = 0;
          HIDWORD(v505) = 16;
          *(_QWORD *)&v505 = &v506;
          v351 = *(_DWORD *)(v349 + 48);
          *(_QWORD *)&v506 = *v348;
          v352 = 1;
          do
          {
            v353 = *(_QWORD *)(v505 + 8 * v352-- - 8);
            DWORD2(v505) = v352;
            v354 = *(const void ***)(v353 + 80);
            v355 = *(const void ***)(v353 + 88);
            if (v354 != v355)
            {
              while (1)
              {
                v356 = *v354;
                if (*v354)
                {
                  sub_22E3BA850((uint64_t)&v496, *v354);
                  if (v357)
                  {
                    if (v351 == v356[12])
                    {
                      v350 = 0;
                      v155 = v453;
                      goto LABEL_684;
                    }
                    v359 = *(_QWORD *)v356;
                    v358 = *((_QWORD *)v356 + 1);
                    while (v358 != v359)
                    {
                      v361 = *(_QWORD *)(v358 - 16);
                      v358 -= 16;
                      v360 = v361;
                      if ((v361 & 3 | (4 * (*(_DWORD *)(v358 + 8) & 3u))) == 6)
                      {
                        v362 = (unsigned int *)(v360 & 0xFFFFFFFFFFFFFFFCLL);
                        if ((*(_BYTE *)(v360 & 0xFFFFFFFFFFFFFFFCLL) + 113) >= 0xFBu)
                        {
                          v363 = sub_22EFFA604(*(unsigned __int8 **)((char *)v362 + *((unsigned __int8 *)v362 + 3)));
                          if (v363)
                          {
                            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v363 + 32))(v363) == v347)
                            {
                              v364 = *v362;
                              v365 = sub_22EFFA6B0(*(unsigned __int8 **)((char *)v362 + (v364 >> 24)));
                              if (*v365 != 161
                                || (v365[2] & 4) == 0
                                || (v366 = *((_QWORD *)v365 + 4)) == 0
                                || (v367 = *(_QWORD *)(v366 + 16)) == 0
                                || (*(_QWORD *)(v366 + 8) & 6) != 4
                                || *(_BYTE *)(v367 + 16) != 46)
                              {
                                if (v364 != 140
                                  || *(unsigned __int8 *)sub_22F060ED0((uint64_t)v362) == 133
                                  || (v368 = sub_22F060FB4((uint64_t)v362),
                                      v369 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v368 + 32))(v368),
                                      (*(_BYTE *)(v369 + 82) & 0xC) == 0)
                                  && !sub_22EFD7260(v369))
                                {
                                  v350 = 1;
                                  goto LABEL_679;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    v370 = DWORD2(v505);
                    if (DWORD2(v505) >= (unint64_t)HIDWORD(v505))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v370 = DWORD2(v505);
                    }
                    *(_QWORD *)(v505 + 8 * v370) = v356;
                    ++DWORD2(v505);
                  }
                }
LABEL_679:
                v354 += 2;
                if (v354 == v355)
                {
                  v352 = DWORD2(v505);
                  v155 = v453;
                  break;
                }
              }
            }
          }
          while (v352);
LABEL_684:
          if ((__int128 *)v505 != &v506)
            free((void *)v505);
          v269 = v452;
          if (*((_QWORD *)&v496 + 1) != (_QWORD)v496)
            free(*((void **)&v496 + 1));
          if ((v350 & 1) != 0)
          {
            sub_22F0D5A50(v437);
            sub_22E8FCA40(v447, v371, 0x1A15u, 0, (uint64_t)&v496);
            sub_22E903BEC((unsigned int *)&v496);
          }
        }
      }
    }
    v342 = *(uint64_t (**)(unint64_t))(*(_QWORD *)v269 + 16);
    v140 = *(_QWORD *)(v155 + 32);
  }
  v372 = v342(v269);
  if (sub_22F1CF68C(v140, 0x1B8Fu, v372, v155) != 1
    && (*(_DWORD *)(v269 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA
    && (*(_BYTE *)(*((_QWORD *)*v451 + 9) + 1) & 1) != 0)
  {
    v373 = *(_QWORD *)(*(_QWORD *)(v269 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v373 || *(_BYTE *)(v373 + 16) != 26)
      v373 = sub_22F10CF48(v373);
    if (!sub_22F113A44(v373) || sub_22E4725AC(v269))
    {
      v374 = *v451;
      v375 = sub_22EEB5AAC((uint64_t)&v464);
      if (v375)
      {
        v376 = v375;
        if (*(_QWORD *)(*(_QWORD *)(v375 + 8) + 56) != *(_QWORD *)(*(_QWORD *)(v375 + 8) + 64))
        {
          v377 = *(_DWORD *)(v375 + 24);
          v486 = &v488;
          v487 = 0x600000000;
          sub_22E47EDD0((uint64_t)&v486, (v377 + 63) >> 6, 0);
          v495 = v377;
          sub_22EEE2C98(*(_QWORD *)v376, &v486, 0, 0);
          v378 = *(uint64_t **)(v376 + 40);
          v442 = *(uint64_t **)(v376 + 48);
          if (v378 != v442)
          {
            while (1)
            {
              v448 = v378;
              v379 = (uint64_t *)*v378;
              if (((*(_QWORD *)((char *)v486 + (((unint64_t)*(unsigned int *)(*v378 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(*v378 + 48)) & 1) != 0)
                break;
LABEL_757:
              v378 = v448 + 1;
              if (v448 + 1 == v442)
                goto LABEL_758;
            }
            v381 = *v379;
            v380 = v379[1];
            while (1)
            {
              while (1)
              {
LABEL_704:
                if (v380 == v381)
                  goto LABEL_757;
                v383 = *(_QWORD *)(v380 - 16);
                v380 -= 16;
                v382 = v383;
                if ((unint64_t)((v383 & 3 | (4 * (*(_DWORD *)(v380 + 8) & 3u))) - 9) >= 0xFFFFFFFD)
                {
                  v384 = v382 & 0xFFFFFFFFFFFFFFFCLL;
                  if (*(unsigned __int8 *)(v382 & 0xFFFFFFFFFFFFFFFCLL) == 134)
                  {
                    *(_QWORD *)&v496 = &v497;
                    *((_QWORD *)&v496 + 1) = 0x1000000000;
                    v385 = *(_DWORD *)(v376 + 24);
                    *(_QWORD *)&v505 = &v506;
                    *((_QWORD *)&v505 + 1) = 0x600000000;
                    sub_22E47EDD0((uint64_t)&v505, (v385 + 63) >> 6, 0);
                    v510 = v385;
                    v386 = DWORD2(v496);
                    if (DWORD2(v496) >= (unint64_t)HIDWORD(v496))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v386 = DWORD2(v496);
                    }
                    *(_QWORD *)(v496 + 8 * v386) = v379;
                    v178 = __CFADD__(DWORD2(v496), 1);
                    v387 = ++DWORD2(v496);
                    v388 = (__int128 *)v505;
                    v389 = 1;
                    *(_QWORD *)(v505 + (((unint64_t)*((unsigned int *)v379 + 12) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v379 + 12);
                    if (!v178)
                    {
                      while (1)
                      {
                        v390 = *(_QWORD *)(v496 + 8 * v387-- - 8);
                        DWORD2(v496) = v387;
                        v392 = *(_BYTE **)(v390 + 80);
                        v391 = *(_BYTE **)(v390 + 88);
                        if (v392 != v391)
                          break;
LABEL_726:
                        if (!v387)
                        {
                          v389 = 1;
                          v388 = (__int128 *)v505;
                          goto LABEL_729;
                        }
                      }
                      while (1)
                      {
                        if ((v392[8] & 2) == 0)
                        {
                          v393 = *(_QWORD *)v392;
                          v394 = *(unsigned int *)(*(_QWORD *)v392 + 48);
                          v388 = (__int128 *)v505;
                          if (((*(_QWORD *)(v505 + ((v394 >> 3) & 0x1FFFFFF8)) >> v394) & 1) == 0)
                          {
                            if ((_DWORD)v394 == *(_DWORD *)(*(_QWORD *)(v376 + 8) + 48))
                            {
                              v389 = 0;
                              break;
                            }
                            v395 = *(_QWORD *)(v393 + 24);
                            if (v395 && *(_BYTE *)v395 == 4)
                            {
                              v396 = *(_QWORD *)(v395 + 16);
                              if (!v396
                                || (v397 = *(_QWORD *)(v396 + 48), v397 < 0x10)
                                || (v398 = *(_QWORD *)(v384 + 16)) == 0
                                || (sub_22EB15E40((uint64_t)v374, v397, *(_QWORD *)(v398 + 8)) & 1) != 0)
                              {
LABEL_725:
                                v387 = DWORD2(v496);
                                goto LABEL_726;
                              }
                            }
                            else
                            {
                              v399 = DWORD2(v496);
                              if (DWORD2(v496) >= (unint64_t)HIDWORD(v496))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                v399 = DWORD2(v496);
                              }
                              *(_QWORD *)(v496 + 8 * v399) = v393;
                              ++DWORD2(v496);
                              *(_QWORD *)(v505
                                        + (((unint64_t)*(unsigned int *)(*(_QWORD *)v392 + 48) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(*(_QWORD *)v392 + 48);
                            }
                          }
                        }
                        v392 += 16;
                        if (v392 == v391)
                          goto LABEL_725;
                      }
                    }
LABEL_729:
                    if (v388 != &v506)
                      free(v388);
                    if ((__int128 *)v496 != &v497)
                      free((void *)v496);
                    if ((v389 & 1) == 0)
                    {
                      v400 = *(_DWORD *)(v384 + 4);
                      *(_QWORD *)&v505 = v452;
                      v401 = sub_22F1E361C(*((_QWORD **)v374 + 14), v400);
                      if (v401 == 3 || !v401)
                      {
                        v402 = *(_QWORD *)(v452 + 56);
                        v403 = v402 & 0xFFFFFFFFFFFFFFF8;
                        if ((v402 & 4) != 0)
                          v403 = *(_QWORD *)(v403 + 32);
                        if (v403)
                          break;
                      }
                    }
                  }
                }
              }
              sub_22E8FCA40(v374, v400, 0x1B8Fu, 0, (uint64_t)&v496);
              sub_22E890024((uint64_t)&v496, (uint64_t *)&v505);
              sub_22E903BEC((unsigned int *)&v496);
              v404 = v505;
              if ((*(_BYTE *)(*((_QWORD *)v374 + 9) + 1) & 2) == 0)
                break;
              if ((*(_DWORD *)(v505 + 28) & 0x7F) != 0x39)
              {
                if ((*(_QWORD *)(v505 + 40) & 7) != 6)
                  break;
                v413 = *(_DWORD *)(*(_QWORD *)(v505 + 40) & 0xFFFFFFFFFFFFFFF8);
                if (v413 != 4 && v413 != 2)
                  break;
              }
              v406 = *(_QWORD *)(v505 + 56);
              v407 = (_QWORD *)(v406 & 0xFFFFFFFFFFFFFFF8);
              if ((v406 & 4) != 0)
                v407 = (_QWORD *)v407[4];
              v408 = *(_QWORD *)(*v407 & 0xFFFFFFFFFFFFFFF0);
              if (v408)
                v409 = *(_BYTE *)(v408 + 16) == 26;
              else
                v409 = 0;
              if (v409)
                goto LABEL_751;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v408 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
              {
                v410 = sub_22F10CF48(v408);
                if (v410)
                {
                  v408 = v410;
                  v404 = v505;
LABEL_751:
                  sub_22E8FCA40(v374, *(_DWORD *)(v404 + 24), 0x17EFu, 0, (uint64_t)&v496);
                  LOBYTE(v457) = (*(_DWORD *)(v505 + 28) & 0x7F) != 57;
                  v411 = sub_22E894E38((uint64_t)&v496, (unsigned __int8 *)&v457);
                  LOBYTE(v462) = (*(_QWORD *)(v408 + 16) & 0x3C0000000000000) == 0;
                  v412 = sub_22E894E38(v411, (unsigned __int8 *)&v462);
                  __p[0] = (void *)sub_22EFC17CC(v505);
                  v405 = (__int128 *)v412;
LABEL_752:
                  sub_22E8906A0((uint64_t)v405, (uint64_t *)__p);
                  sub_22E903BEC((unsigned int *)&v496);
                  goto LABEL_704;
                }
              }
            }
            sub_22E8FCA40(v374, *(_DWORD *)(v505 + 24), 0x17F0u, 0, (uint64_t)&v496);
            __p[0] = (void *)sub_22EFC17CC(v505);
            v405 = &v496;
            goto LABEL_752;
          }
LABEL_758:
          if (v486 != &v488)
            free(v486);
          v269 = v452;
          v155 = v453;
        }
      }
    }
  }
  v414 = *(uint64_t (**)(unint64_t))(*(_QWORD *)v269 + 16);
  v415 = v414(v269);
  v416 = *(_QWORD *)(v155 + 32);
  if (sub_22F1CF68C(v416, 0x1BC3u, v415, v155) != 1
    || sub_22F1CF68C(v416, 0x1BC4u, v415, v155) != 1)
  {
    v417 = *v451;
    *(_QWORD *)&v496 = &off_24FAA5690;
    *((_QWORD *)&v496 + 1) = v417;
    sub_22EEE3F04(v269, (uint64_t)&v496);
    v414 = *(uint64_t (**)(unint64_t))(*(_QWORD *)v269 + 16);
  }
  v418 = v414(v269);
  if (sub_22E88FAF4(v155, v418))
    sub_22EEB5AAC((uint64_t)&v464);
  if (*((_BYTE *)*v451 + 200) && v474[12])
  {
    ++*((_DWORD *)v451 + 12);
    v419 = sub_22EEB5AAC((uint64_t)&v464);
    if (v419)
    {
      v420 = *(_DWORD *)(v419 + 24);
      v421 = *((_DWORD *)v451 + 14) + v420;
      if (*((_DWORD *)v451 + 15) > v420)
        v420 = *((_DWORD *)v451 + 15);
      *((_DWORD *)v451 + 14) = v421;
      *((_DWORD *)v451 + 15) = v420;
    }
    else
    {
      ++*((_DWORD *)v451 + 13);
    }
  }
  return (uint64_t)sub_22EEB789C(&v464);
}

unsigned int *sub_22E88FA88(unsigned int *result, uint64_t a2, unsigned int a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6[24];

  if (a3)
  {
    v4 = result;
    v5 = 40 * a3;
    do
    {
      sub_22E90379C(v4, *(_DWORD *)(a2 + 24), a2, 0, (uint64_t)v6);
      result = sub_22E903BEC(v6);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return result;
}

BOOL sub_22E88FAF4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  return sub_22F1CF68C(v4, 0x1B7Cu, a2, a1) != 1 || sub_22F1CF68C(v4, 0x18D2u, a2, a1) != 1;
}

_QWORD *sub_22E88FB60(_QWORD *a1)
{
  *a1 = &off_24FAA5510;
  sub_22F2F1FB8(a1 + 3);
  return a1;
}

_QWORD *sub_22E88FB90(_QWORD *a1)
{
  *a1 = &off_24FAA55A8;
  sub_22F2F1FB8(a1 + 2);
  return a1;
}

uint64_t sub_22E88FBC0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char **v23;
  uint64_t *v24;
  uint64_t *j;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char **v39;
  void *v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[11];
  void *v47;
  uint64_t v48;
  _QWORD v49[10];

  v49[8] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24FAA5608;
  v43 = a1 + 16;
  v2 = *(uint64_t **)(a1 + 40);
  for (i = *(uint64_t **)(a1 + 48); v2 != i; v2 += 2)
  {
    v5 = *v2;
    v4 = v2[1];
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    v8 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)v7)
      v9 = (v2[1] & 4) == 0;
    else
      v9 = 1;
    if (v9)
    {
LABEL_7:
      v10 = 126 - 2 * __clz(v7);
      if ((_DWORD)v7)
        v11 = v10;
      else
        v11 = 0;
      sub_22E89535C(v8, v8 + (v7 << 6), v11, 1);
      v12 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v12)
      {
        v13 = (v12 << 6) - 64;
        v14 = *(_QWORD *)v6 + 16;
        do
        {
          v15 = (_QWORD *)(v14 - 16);
          if ((v4 & 4) != 0)
          {
            *(_QWORD *)v46 = *v15;
            *(_WORD *)&v46[8] = 0;
            v46[10] = 0;
            v47 = v49;
            v48 = 0x200000000;
          }
          else
          {
            v16 = *v15;
            *(_DWORD *)&v46[7] = *(_DWORD *)(v14 - 9);
            *(_QWORD *)v46 = v16;
            v47 = v49;
            v48 = 0x200000000;
            if (*(_DWORD *)(v14 + 8))
              sub_22F252404((uint64_t)&v47, v14);
          }
          v17 = sub_22E893F80(*(_QWORD *)(a1 + 8), v5, (uint64_t *)v46, 0);
          if (v47 != v49)
            free(v47);
          if (v13)
            v18 = v17;
          else
            v18 = 1;
          v13 -= 64;
          v14 += 64;
        }
        while (v18 != 1);
      }
    }
    else
    {
      v19 = (_BYTE *)(v8 + 10);
      v20 = v7 << 6;
      while (!*v19 && !*(v19 - 2) && !*(v19 - 1))
      {
        v19 += 64;
        v20 -= 64;
        if (!v20)
          goto LABEL_7;
      }
      v21 = *(_QWORD *)(a1 + 8);
      v22 = (unsigned __int8 *)sub_22EFBC5B4(*v2);
      *(_QWORD *)v46 = sub_22EFFBBCC(v22);
      *(_WORD *)&v46[8] = 0;
      v46[10] = 1;
      v47 = v49;
      v48 = 0x200000000;
      sub_22E893F80(v21, v5, (uint64_t *)v46, 1);
      if (v47 != v49)
        free(v47);
    }
    if (v6)
    {
      v23 = sub_22E899278((char **)(v4 & 0xFFFFFFFFFFFFFFF8));
      MEMORY[0x2348A0E9C](v23, 0x1080C40F47FB52ALL);
    }
  }
  sub_22E7FE5CC(v43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v24 = *(uint64_t **)(a1 + 88);
  for (j = *(uint64_t **)(a1 + 96); v24 != j; v24 += 2)
  {
    v26 = *v24;
    v27 = v24[1] & 0xFFFFFFFFFFFFFFF8;
    v28 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v28)
      v29 = (v24[1] & 4) == 0;
    else
      v29 = 1;
    if (v29)
    {
LABEL_39:
      if ((_DWORD)v28)
      {
        v30 = *(uint64_t **)v27;
        v31 = *(_QWORD **)(a1 + 8);
        sub_22F0D5A50(**(_QWORD **)v27);
        sub_22E8FCA40(v31, v32, 0x1BB2u, 0, (uint64_t)v46);
        v45 = *(_QWORD *)(v26 + 40);
        v33 = sub_22E894538((uint64_t)v46, &v45);
        sub_22F0D4E74(*v30);
        v44 = v34;
        sub_22E8906A0(v33, &v44);
        sub_22E903BEC((unsigned int *)v46);
      }
    }
    else
    {
      v35 = (_BYTE *)(*(_QWORD *)v27 + 10);
      v36 = v28 << 6;
      while (!*v35 && !*(v35 - 2) && !*(v35 - 1))
      {
        v35 += 64;
        v36 -= 64;
        if (!v36)
          goto LABEL_39;
      }
      v37 = *(_QWORD *)(a1 + 8);
      v38 = (unsigned __int8 *)sub_22EFBC5B4(*v24);
      *(_QWORD *)v46 = sub_22EFFBBCC(v38);
      *(_WORD *)&v46[8] = 0;
      v46[10] = 1;
      v47 = v49;
      v48 = 0x200000000;
      sub_22E893F80(v37, v26, (uint64_t *)v46, 1);
      if (v47 != v49)
        free(v47);
    }
    if (v27)
    {
      v39 = sub_22E899278((char **)v27);
      MEMORY[0x2348A0E9C](v39, 0x1080C40F47FB52ALL);
    }
  }
  sub_22E7FE5CC(a1 + 64);
  v40 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = v40;
  if (v40)
    operator delete(v40);
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(16 * *(unsigned int *)(a1 + 80)));
  v41 = *(void **)(a1 + 40);
  if (v41)
  {
    *(_QWORD *)(a1 + 48) = v41;
    operator delete(v41);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(16 * *(unsigned int *)(a1 + 32)));
  return a1;
}

BOOL sub_22E88FFC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 396)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E890024(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E890494((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E890494((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

uint64_t sub_22E8900C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *a2;
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (!v5)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
    }
    v5[*v5 + 1] = 2;
    v6 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v9 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v15 = v10;
    v11 = sub_22F2F1D6C(v9, &v15)[1] + 32 * *(unsigned int *)(a1 + 88);
    v14 = *(unsigned __int8 **)(v11 + 8);
    v13 = (_QWORD *)(v11 + 8);
    v12 = v14;
    v4 = *a2;
    if (!v14)
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      *v13 = v12;
    }
    v12[*v12 + 1] = 2;
    v6 = (_BYTE *)*v13;
  }
  v7 = *v6;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v4;
  return a1;
}

uint64_t sub_22E8901B8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E890258((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E890258((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

unsigned __int8 **sub_22E890258(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 9;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

uint64_t sub_22E8902B8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 32 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 32 * v8);
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_22E890354(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2F1E7C(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E890414(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 3);
        if (v6)
        {
          v7 = *((_QWORD *)v4 - 2);
          if (v7)
          {
            sub_22E3BB10C(v7, v6);
            *((_QWORD *)v4 - 3) = 0;
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 **sub_22E890494(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 11;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

void sub_22E8904F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22E89050C(unsigned int *result, unsigned int a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31[22];
  char v32;
  __int16 v33;
  unsigned int v34[24];
  uint64_t v35;
  uint64_t v36;

  LODWORD(v6) = a4;
  v7 = result;
  v8 = HIDWORD(a4);
  v35 = a6;
  v36 = a5;
  v9 = result[4];
  if (!v9
    || ((v10 = result[5]) != 0 ? (v11 = (_DWORD)a4 == 0) : (v11 = 1),
        !v11 ? (v12 = HIDWORD(a4) == 0) : (v12 = 1),
        !v12 ? (v13 = v9 == (_DWORD)a4) : (v13 = 0),
        v13 ? (v14 = v10 == HIDWORD(a4)) : (v14 = 0),
        !v14))
  {
    *((_QWORD *)result + 2) = a4;
    v15 = a2 > 2 ? 7101 : dword_22F462BA4[a2];
    sub_22E8FCA40(*((_QWORD **)result + 1), a3, v15, 0, (uint64_t)v34);
    v16 = sub_22E8906A0((uint64_t)v34, &v36);
    sub_22E8906A0(v16, &v35);
    result = sub_22E903BEC(v34);
    if ((_DWORD)v6)
    {
      result = (unsigned int *)sub_22F141A3C(v8, 0, *(_QWORD **)(*((_QWORD *)v7 + 1) + 112), *(_DWORD **)(*((_QWORD *)v7 + 1) + 72));
      if ((_DWORD)result)
      {
        v17 = result;
        v6 = v6;
        sub_22E8FCA40(*((_QWORD **)v7 + 1), v6, 0x1805u, 0, (uint64_t)v34);
        v30 = 0;
        v29 = 0;
        v27 = v6 | (v6 << 32);
        v28 = 0;
        strcpy(v31, "/* DISABLES CODE */ (");
        v32 = 0;
        v33 = 21;
        v18 = sub_22E890748((uint64_t)v34, &v27);
        v22 = 0;
        v21 = 0;
        v24 = 0;
        v25 = 0x100000000000000;
        v19 = v17 | ((unint64_t)v17 << 32);
        v20 = 0;
        __p = (void *)41;
        v26 = 0;
        sub_22E890748(v18, &v19);
        if (SHIBYTE(v25) < 0)
          operator delete(__p);
        if ((char)v33 < 0)
          operator delete(*(void **)v31);
        return sub_22E903BEC(v34);
      }
    }
  }
  return result;
}

uint64_t sub_22E8906A0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = (uint64_t *)(a1 + 32);
    v4 = *a2;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v7 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v9 = v8;
    v3 = (uint64_t *)(sub_22F2F1D6C(v7, &v9)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
    v4 = *a2;
  }
  v10 = v4;
  v11 = 1;
  sub_22E8907D4(v3, (uint64_t)&v10);
  return a1;
}

uint64_t sub_22E890748(uint64_t a1, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = (uint64_t *)(a1 + 32);
  }
  else
  {
    v7 = a2;
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v3 = (uint64_t *)(sub_22F2F1D6C(v5, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
    a2 = v7;
  }
  sub_22E6D82D0(v3, a2);
  return a1;
}

uint64_t sub_22E8907D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  if (!v4)
  {
    v4 = sub_22E3B8AAC(a1[1]);
    *a1 = v4;
  }
  return sub_22E4D6448(v4 + 336, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
}

void sub_22E890818(_QWORD *a1)
{
  *a1 = &off_24FAA5510;
  sub_22F2F1FB8(a1 + 3);
  JUMPOUT(0x2348A0E9CLL);
}

char **sub_22E890858(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v7 = a4 | ((unint64_t)a4 << 32);
  v8 = sub_22E3B8AAC(v6);
  sub_22E4D6448(v8 + 336, v7, 1);
  if (v8)
  {
    v9 = (_OWORD *)sub_22E3B8AAC(v6);
    sub_22E78D4E8(v9, v8);
    sub_22E3BB10C(v6, v8);
  }
  else
  {
    v9 = 0;
  }
  sub_22E892110(&v14, a1);
  v10 = operator new(0x60uLL);
  *v10 = 0;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = a4;
  *((_DWORD *)v10 + 10) = 6329;
  v10[3] = v9;
  v10[4] = v6;
  v10[6] = v10 + 8;
  v10[7] = 0x100000000;
  if (v15)
    sub_22E892224((unint64_t)(v10 + 6), (uint64_t)&v14);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a1 + 24);
  *v10 = v12;
  v10[1] = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  ++v11[2];
  return sub_22E89277C(&v14);
}

char **sub_22E89098C(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, int a7)
{
  int v8;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  int v26;
  _OWORD *v27;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;

  v8 = a6;
  v33 = *MEMORY[0x24BDAC8D0];
  if (!a6)
    v8 = *(_DWORD *)(a1 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v30 = 0;
  v31 = v14;
  v32 = 7095;
  sub_22E3B89A8(&v30, __src, __len);
  sub_22E3B89A8(&v30, a4, a5);
  v15 = v32;
  v16 = v31;
  if (v30)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v31);
    sub_22E78D4E8(v17, (uint64_t)v30);
    if (v30 && v31)
      sub_22E3BB10C(v31, (unint64_t)v30);
    if (a7)
      goto LABEL_8;
LABEL_17:
    sub_22E892110(&v30, a1);
    goto LABEL_18;
  }
  v17 = 0;
  if (!a7)
    goto LABEL_17;
LABEL_8:
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v23 = 0;
  v24 = v18;
  v25 = 6147;
  sub_22E3B89A8(&v23, __src, __len);
  v26 = a7;
  v29 = v25;
  v27 = 0;
  v28 = v24;
  if (v23)
  {
    v27 = (_OWORD *)sub_22E3B8AAC(v24);
    sub_22E78D4E8(v27, (uint64_t)v23);
  }
  sub_22E8927F0(&v30, a1, (uint64_t)&v26);
  if (v27 && v28)
  {
    sub_22E3BB10C(v28, (unint64_t)v27);
    v27 = 0;
  }
  if (v23 && v24)
    sub_22E3BB10C(v24, (unint64_t)v23);
LABEL_18:
  v19 = operator new(0x60uLL);
  *v19 = 0;
  v19[1] = 0;
  *((_DWORD *)v19 + 4) = v8;
  *((_DWORD *)v19 + 10) = v15;
  v19[3] = v17;
  v19[4] = v16;
  v19[6] = v19 + 8;
  v19[7] = 0x100000000;
  if ((_DWORD)v31)
    sub_22E892224((unint64_t)(v19 + 6), (uint64_t)&v30);
  v21 = *(_QWORD *)(a1 + 24);
  v20 = (_QWORD *)(a1 + 24);
  *v19 = v21;
  v19[1] = v20;
  *(_QWORD *)(v21 + 8) = v19;
  *v20 = v19;
  ++v20[2];
  return sub_22E89277C((char **)&v30);
}

char **sub_22E890B8C(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, int a7, int a8, int a9)
{
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v17 = a9;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a9)
    v17 = *(_DWORD *)(a1 + 48);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v31 = 0;
  v32 = v18;
  v33 = 7096;
  sub_22E3B89A8(&v31, __src, __len);
  sub_22E3B89A8(&v31, a4, a5);
  v19 = v31;
  if (!v31)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v32);
    v31 = v19;
  }
  v19[*v19 + 1] = 2;
  v20 = v31;
  v21 = *v31;
  *v31 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = a7;
  v20[(v21 + 1) + 1] = 2;
  v22 = v31;
  v23 = *v31;
  *v31 = v23 + 1;
  *(_QWORD *)&v22[8 * v23 + 16] = a6;
  v24 = v33;
  v25 = v32;
  v26 = (_OWORD *)sub_22E3B8AAC(v32);
  sub_22E78D4E8(v26, (uint64_t)v31);
  if (v31 && v32)
    sub_22E3BB10C(v32, (unint64_t)v31);
  sub_22E892994(&v31, a1, a8, __src, __len);
  v27 = operator new(0x60uLL);
  *v27 = 0;
  v27[1] = 0;
  *((_DWORD *)v27 + 4) = v17;
  *((_DWORD *)v27 + 10) = v24;
  v27[3] = v26;
  v27[4] = v25;
  v27[6] = v27 + 8;
  v27[7] = 0x100000000;
  if ((_DWORD)v32)
    sub_22E892224((unint64_t)(v27 + 6), (uint64_t)&v31);
  v29 = *(_QWORD *)(a1 + 24);
  v28 = (_QWORD *)(a1 + 24);
  *v27 = v29;
  v27[1] = v28;
  *(_QWORD *)(v29 + 8) = v27;
  *v28 = v27;
  ++v28[2];
  return sub_22E89277C((char **)&v31);
}

char **sub_22E890D6C(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, int a7)
{
  int v7;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v7 = a7;
  v25 = *MEMORY[0x24BDAC8D0];
  if (!a7)
    v7 = *(_DWORD *)(a1 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v22 = 0;
  v23 = v14;
  v24 = 6522;
  sub_22E3B89A8(&v22, __src, __len);
  sub_22E3B89A8(&v22, a4, a5);
  v15 = v24;
  v16 = v23;
  if (v22)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v23);
    sub_22E78D4E8(v17, (uint64_t)v22);
    if (v22 && v23)
      sub_22E3BB10C(v23, (unint64_t)v22);
  }
  else
  {
    v17 = 0;
  }
  sub_22E892994(&v22, a1, a6, __src, __len);
  v18 = operator new(0x60uLL);
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = v7;
  *((_DWORD *)v18 + 10) = v15;
  v18[3] = v17;
  v18[4] = v16;
  v18[6] = v18 + 8;
  v18[7] = 0x100000000;
  if ((_DWORD)v23)
    sub_22E892224((unint64_t)(v18 + 6), (uint64_t)&v22);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(a1 + 24);
  *v18 = v20;
  v18[1] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  ++v19[2];
  return sub_22E89277C((char **)&v22);
}

char **sub_22E890EE4(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, int a7, unsigned int a8)
{
  int v8;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v8 = a7;
  v27 = *MEMORY[0x24BDAC8D0];
  if (a8 > 3)
  {
    v15 = 0;
    if (a7)
      goto LABEL_6;
  }
  else
  {
    v15 = dword_22F4622D0[a8];
    if (a7)
      goto LABEL_6;
  }
  v8 = *(_DWORD *)(a1 + 52);
LABEL_6:
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v24 = 0;
  v25 = v16;
  v26 = v15;
  sub_22E3B89A8(&v24, __src, __len);
  sub_22E3B89A8(&v24, a4, a5);
  v17 = v26;
  v18 = v25;
  if (v24)
  {
    v19 = (_OWORD *)sub_22E3B8AAC(v25);
    sub_22E78D4E8(v19, (uint64_t)v24);
    if (v24 && v25)
      sub_22E3BB10C(v25, (unint64_t)v24);
  }
  else
  {
    v19 = 0;
  }
  sub_22E892994(&v24, a1, a6, __src, __len);
  v20 = operator new(0x60uLL);
  *v20 = 0;
  v20[1] = 0;
  *((_DWORD *)v20 + 4) = v8;
  *((_DWORD *)v20 + 10) = v17;
  v20[3] = v19;
  v20[4] = v18;
  v20[6] = v20 + 8;
  v20[7] = 0x100000000;
  if ((_DWORD)v25)
    sub_22E892224((unint64_t)(v20 + 6), (uint64_t)&v24);
  v22 = *(_QWORD *)(a1 + 24);
  v21 = (_QWORD *)(a1 + 24);
  *v20 = v22;
  v20[1] = v21;
  *(_QWORD *)(v22 + 8) = v20;
  *v21 = v20;
  ++v21[2];
  return sub_22E89277C((char **)&v24);
}

char **sub_22E891078(_QWORD *a1, void *a2, size_t a3, void *a4, size_t a5, int a6, int a7)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char **result;
  int v22;
  _OWORD *v23;
  char **v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1[2] + 88) + 2128;
  v26 = 0;
  v27 = v14;
  v28 = 6704;
  sub_22E3B89A8(&v26, a2, a3);
  sub_22E3B89A8(&v26, a4, a5);
  v15 = v28;
  v16 = v27;
  if (v26)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v27);
    sub_22E78D4E8(v17, (uint64_t)v26);
    if (v26 && v27)
      sub_22E3BB10C(v27, (unint64_t)v26);
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(a1[2] + 88) + 2128;
  v26 = 0;
  v27 = v18;
  v28 = 5703;
  sub_22E3B89A8(&v26, a2, a3);
  sub_22E3B89A8(&v26, a4, a5);
  v22 = a7;
  v25 = v28;
  v23 = 0;
  v24 = (char **)v27;
  if (v26)
  {
    v23 = (_OWORD *)sub_22E3B8AAC(v27);
    sub_22E78D4E8(v23, (uint64_t)v26);
    if (v26)
    {
      if (v27)
        sub_22E3BB10C(v27, (unint64_t)v26);
    }
  }
  sub_22E8927F0(&v26, (uint64_t)a1, (uint64_t)&v22);
  v19 = operator new(0x60uLL);
  *v19 = 0;
  v19[1] = 0;
  *((_DWORD *)v19 + 4) = a6;
  *((_DWORD *)v19 + 10) = v15;
  v19[3] = v17;
  v19[4] = v16;
  v19[6] = v19 + 8;
  v19[7] = 0x100000000;
  if ((_DWORD)v27)
    sub_22E892224((unint64_t)(v19 + 6), (uint64_t)&v26);
  v20 = a1[3];
  *v19 = v20;
  v19[1] = a1 + 3;
  *(_QWORD *)(v20 + 8) = v19;
  a1[3] = v19;
  ++a1[5];
  result = sub_22E89277C((char **)&v26);
  if (v23)
  {
    result = v24;
    if (v24)
      return (char **)sub_22E3BB10C((unint64_t)v24, (unint64_t)v23);
  }
  return result;
}

char **sub_22E89126C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a5 == 1)
    v11 = 7156;
  else
    v11 = 7152;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v13 = (_BYTE *)sub_22E3B8AAC(v12);
  v14 = v13 + 1;
  v15 = *v13;
  v14[v15] = 11;
  *v13 = v15 + 2;
  *(_QWORD *)&v13[8 * v15 + 16] = a4;
  v16 = (v15 + 1);
  v14[v16] = 2;
  *(_QWORD *)&v13[8 * v16 + 16] = a6;
  v17 = (_OWORD *)sub_22E3B8AAC(v12);
  sub_22E78D4E8(v17, (uint64_t)v13);
  sub_22E3BB10C(v12, (unint64_t)v13);
  sub_22E892110(&v22, a1);
  v18 = operator new(0x60uLL);
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = a7;
  *((_DWORD *)v18 + 10) = v11;
  v18[3] = v17;
  v18[4] = v12;
  v18[6] = v18 + 8;
  v18[7] = 0x100000000;
  if (v23)
    sub_22E892224((unint64_t)(v18 + 6), (uint64_t)&v22);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(a1 + 24);
  *v18 = v20;
  v18[1] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  ++v19[2];
  return sub_22E89277C(&v22);
}

char **sub_22E8913D0(uint64_t a1, void *a2, size_t a3, uint64_t a4, unsigned int a5, void *a6, size_t a7, int a8, int a9, uint64_t a10)
{
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char **result;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _OWORD *v64;
  char **v65;
  int v66;
  int v67;
  void *__src;
  uint64_t v69;
  int v70;
  int v71;
  _OWORD *v72;
  char **v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (a10)
  {
    if (a5 > 4)
      v16 = 0;
    else
      v16 = dword_22F462BB0[a5];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
    v75 = 0;
    v76 = v18;
    v77 = v16;
    sub_22E3B89A8(&v75, a2, a3);
    v19 = v75;
    if (!v75)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC(v76);
      v75 = v19;
    }
    v19[*v19 + 1] = 11;
    v20 = v75;
    v21 = *v75;
    *v75 = v21 + 1;
    *(_QWORD *)&v20[8 * v21 + 16] = a4;
    sub_22E3B89A8(&v75, a6, a7);
    v22 = v75;
    if (!v75)
    {
      v22 = (unsigned __int8 *)sub_22E3B8AAC(v76);
      v75 = v22;
    }
    v22[*v22 + 1] = 2;
    v23 = v75;
    v24 = *v75;
    *v75 = v24 + 1;
    *(_QWORD *)&v23[8 * v24 + 16] = a8;
    v25 = v77;
    v26 = v76;
    v27 = (_OWORD *)sub_22E3B8AAC(v76);
    sub_22E78D4E8(v27, (uint64_t)v75);
    if (v75 && v76)
      sub_22E3BB10C(v76, (unint64_t)v75);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
    v75 = 0;
    v76 = v28;
    v77 = 5644;
    sub_22E3B89A8(&v75, *(void **)a10, *(_QWORD *)(a10 + 8));
    v67 = a9;
    v70 = v77;
    __src = 0;
    v69 = v76;
    if (v75)
    {
      __src = (void *)sub_22E3B8AAC(v76);
      sub_22E78D4E8(__src, (uint64_t)v75);
      if (v75)
      {
        if (v76)
          sub_22E3BB10C(v76, (unint64_t)v75);
      }
    }
    if (a5 == 1 && *(_BYTE *)(a1 + 64))
    {
      v29 = *(_DWORD *)(a4 + 24);
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
      v31 = *(_QWORD *)(a4 + 40);
      v32 = (_BYTE *)sub_22E3B8AAC(v30);
      v33 = *v32;
      v32[v33 + 1] = 10;
      *v32 = v33 + 1;
      *(_QWORD *)&v32[8 * v33 + 16] = v31;
      v63 = v29;
      v66 = 5657;
      v65 = (char **)v30;
      v64 = (_OWORD *)sub_22E3B8AAC(v30);
      sub_22E78D4E8(v64, (uint64_t)v32);
      sub_22E3BB10C(v30, (unint64_t)v32);
      v75 = (unsigned __int8 *)&v77;
      v76 = 0x100000000;
      sub_22E892AD4((unint64_t)&v75, (unint64_t)&v67);
      sub_22E892AD4((unint64_t)&v75, (unint64_t)&v63);
      if (*(_BYTE *)(a1 + 64))
      {
        v34 = *(_QWORD *)(a1 + 56);
        if (v34)
        {
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64))(v34);
          sub_22F0D5A50(v35);
          v37 = v36;
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
          v39 = *(_QWORD *)(a1 + 56);
          v40 = (_BYTE *)sub_22E3B8AAC(v38);
          v41 = *v40;
          v40[v41 + 1] = 11;
          *v40 = v41 + 1;
          *(_QWORD *)&v40[8 * v41 + 16] = v39;
          v71 = v37;
          v74 = 6126;
          v73 = (char **)v38;
          v72 = (_OWORD *)sub_22E3B8AAC(v38);
          sub_22E78D4E8(v72, (uint64_t)v40);
          sub_22E3BB10C(v38, (unint64_t)v40);
          sub_22E8928F4((unint64_t)&v75, (unint64_t)&v71);
          if (v72)
          {
            if (v73)
              sub_22E3BB10C((unint64_t)v73, (unint64_t)v72);
          }
        }
      }
      v42 = operator new(0x60uLL);
      *v42 = 0;
      v42[1] = 0;
      *((_DWORD *)v42 + 4) = a9;
      *((_DWORD *)v42 + 10) = v25;
      v42[3] = v27;
      v42[4] = v26;
      v42[6] = v42 + 8;
      v42[7] = 0x100000000;
      if ((_DWORD)v76)
        sub_22E892224((unint64_t)(v42 + 6), (uint64_t)&v75);
      v43 = *(_QWORD *)(a1 + 24);
      *v42 = v43;
      v42[1] = a1 + 24;
      *(_QWORD *)(v43 + 8) = v42;
      *(_QWORD *)(a1 + 24) = v42;
      ++*(_QWORD *)(a1 + 40);
      result = sub_22E89277C((char **)&v75);
      if (v64)
      {
        result = v65;
        if (v65)
          result = (char **)sub_22E3BB10C((unint64_t)v65, (unint64_t)v64);
      }
    }
    else
    {
      sub_22E8927F0(&v75, a1, (uint64_t)&v67);
      v45 = operator new(0x60uLL);
      *v45 = 0;
      v45[1] = 0;
      *((_DWORD *)v45 + 4) = a9;
      *((_DWORD *)v45 + 10) = v25;
      v45[3] = v27;
      v45[4] = v26;
      v45[6] = v45 + 8;
      v45[7] = 0x100000000;
      if ((_DWORD)v76)
        sub_22E892224((unint64_t)(v45 + 6), (uint64_t)&v75);
      v46 = *(_QWORD *)(a1 + 24);
      *v45 = v46;
      v45[1] = a1 + 24;
      *(_QWORD *)(v46 + 8) = v45;
      *(_QWORD *)(a1 + 24) = v45;
      ++*(_QWORD *)(a1 + 40);
      result = sub_22E89277C((char **)&v75);
    }
    v47 = __src;
    if (!__src)
      return result;
    result = (char **)v69;
    if (!v69)
      return result;
    return (char **)sub_22E3BB10C((unint64_t)result, (unint64_t)v47);
  }
  if (a5 > 4)
    v17 = 0;
  else
    v17 = dword_22F462BC4[a5];
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v75 = 0;
  v76 = v48;
  v77 = v17;
  sub_22E3B89A8(&v75, a2, a3);
  v49 = v75;
  if (!v75)
  {
    v49 = (unsigned __int8 *)sub_22E3B8AAC(v76);
    v75 = v49;
  }
  v49[*v49 + 1] = 11;
  v50 = v75;
  v51 = *v75;
  *v75 = v51 + 1;
  *(_QWORD *)&v50[8 * v51 + 16] = a4;
  sub_22E3B89A8(&v75, a6, a7);
  v52 = v75;
  if (!v75)
  {
    v52 = (unsigned __int8 *)sub_22E3B8AAC(v76);
    v75 = v52;
  }
  v52[*v52 + 1] = 2;
  v53 = v75;
  v54 = *v75;
  *v75 = v54 + 1;
  *(_QWORD *)&v53[8 * v54 + 16] = a8;
  v55 = v77;
  v56 = v76;
  v57 = (_OWORD *)sub_22E3B8AAC(v76);
  sub_22E78D4E8(v57, (uint64_t)v75);
  if (v75 && v76)
    sub_22E3BB10C(v76, (unint64_t)v75);
  if (a5 == 1 && *(_BYTE *)(a1 + 64))
  {
    v58 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
    v71 = *(_DWORD *)(a4 + 24);
    v74 = 5657;
    v72 = 0;
    v73 = (char **)v58;
    sub_22E8927F0(&v75, a1, (uint64_t)&v71);
    v59 = operator new(0x60uLL);
    *v59 = 0;
    v59[1] = 0;
    *((_DWORD *)v59 + 4) = a9;
    *((_DWORD *)v59 + 10) = v55;
    v59[3] = v57;
    v59[4] = v56;
    v59[6] = v59 + 8;
    v59[7] = 0x100000000;
    if ((_DWORD)v76)
      sub_22E892224((unint64_t)(v59 + 6), (uint64_t)&v75);
    v60 = *(_QWORD *)(a1 + 24);
    *v59 = v60;
    v59[1] = a1 + 24;
    *(_QWORD *)(v60 + 8) = v59;
    *(_QWORD *)(a1 + 24) = v59;
    ++*(_QWORD *)(a1 + 40);
    result = sub_22E89277C((char **)&v75);
    v47 = v72;
    if (v72)
    {
      result = v73;
      if (v73)
        return (char **)sub_22E3BB10C((unint64_t)result, (unint64_t)v47);
    }
  }
  else
  {
    sub_22E892110(&v75, a1);
    v61 = operator new(0x60uLL);
    *v61 = 0;
    v61[1] = 0;
    *((_DWORD *)v61 + 4) = a9;
    *((_DWORD *)v61 + 10) = v55;
    v61[3] = v57;
    v61[4] = v56;
    v61[6] = v61 + 8;
    v61[7] = 0x100000000;
    if ((_DWORD)v76)
      sub_22E892224((unint64_t)(v61 + 6), (uint64_t)&v75);
    v62 = *(_QWORD *)(a1 + 24);
    *v61 = v62;
    v61[1] = a1 + 24;
    *(_QWORD *)(v62 + 8) = v61;
    *(_QWORD *)(a1 + 24) = v61;
    ++*(_QWORD *)(a1 + 40);
    return sub_22E89277C((char **)&v75);
  }
  return result;
}

char **sub_22E891A44(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7, int a8)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v22 = 0;
  v23 = v14;
  v24 = 6185;
  sub_22E3B89A8(&v22, a2, a3);
  sub_22E3B89A8(&v22, a4, a5);
  sub_22E3B89A8(&v22, a6, a7);
  v15 = v24;
  v16 = v23;
  if (v22)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v23);
    sub_22E78D4E8(v17, (uint64_t)v22);
    if (v22 && v23)
      sub_22E3BB10C(v23, (unint64_t)v22);
  }
  else
  {
    v17 = 0;
  }
  sub_22E892110(&v22, a1);
  v18 = operator new(0x60uLL);
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = a8;
  *((_DWORD *)v18 + 10) = v15;
  v18[3] = v17;
  v18[4] = v16;
  v18[6] = v18 + 8;
  v18[7] = 0x100000000;
  if ((_DWORD)v23)
    sub_22E892224((unint64_t)(v18 + 6), (uint64_t)&v22);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(a1 + 24);
  *v18 = v20;
  v18[1] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  ++v19[2];
  return sub_22E89277C((char **)&v22);
}

char **sub_22E891BA4(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v21 = 6606;
  v10 = (unsigned __int8 *)sub_22E3B8AAC(v20);
  v19 = v10;
  v11 = *v10;
  v10[v11 + 1] = 11;
  *v10 = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = a2;
  sub_22E3B89A8(&v19, a3, a4);
  v12 = v21;
  v13 = v20;
  if (v19)
  {
    v14 = (_OWORD *)sub_22E3B8AAC(v20);
    sub_22E78D4E8(v14, (uint64_t)v19);
    if (v19 && v20)
      sub_22E3BB10C(v20, (unint64_t)v19);
  }
  else
  {
    v14 = 0;
  }
  sub_22E892110(&v19, a1);
  v15 = operator new(0x60uLL);
  *v15 = 0;
  v15[1] = 0;
  *((_DWORD *)v15 + 4) = a5;
  *((_DWORD *)v15 + 10) = v12;
  v15[3] = v14;
  v15[4] = v13;
  v15[6] = v15 + 8;
  v15[7] = 0x100000000;
  if ((_DWORD)v20)
    sub_22E892224((unint64_t)(v15 + 6), (uint64_t)&v19);
  v17 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)(a1 + 24);
  *v15 = v17;
  v15[1] = v16;
  *(_QWORD *)(v17 + 8) = v15;
  *v16 = v15;
  ++v16[2];
  return sub_22E89277C((char **)&v19);
}

char **sub_22E891D10(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7, int a8)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v22 = 0;
  v23 = v14;
  v24 = 6603;
  sub_22E3B89A8(&v22, a2, a3);
  sub_22E3B89A8(&v22, a4, a5);
  sub_22E3B89A8(&v22, a6, a7);
  v15 = v24;
  v16 = v23;
  if (v22)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v23);
    sub_22E78D4E8(v17, (uint64_t)v22);
    if (v22 && v23)
      sub_22E3BB10C(v23, (unint64_t)v22);
  }
  else
  {
    v17 = 0;
  }
  sub_22E892110(&v22, a1);
  v18 = operator new(0x60uLL);
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = a8;
  *((_DWORD *)v18 + 10) = v15;
  v18[3] = v17;
  v18[4] = v16;
  v18[6] = v18 + 8;
  v18[7] = 0x100000000;
  if ((_DWORD)v23)
    sub_22E892224((unint64_t)(v18 + 6), (uint64_t)&v22);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(a1 + 24);
  *v18 = v20;
  v18[1] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  ++v19[2];
  return sub_22E89277C((char **)&v22);
}

char **sub_22E891E70(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7, int a8)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v22 = 0;
  v23 = v14;
  v24 = 6186;
  sub_22E3B89A8(&v22, a2, a3);
  sub_22E3B89A8(&v22, a4, a5);
  sub_22E3B89A8(&v22, a6, a7);
  v15 = v24;
  v16 = v23;
  if (v22)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v23);
    sub_22E78D4E8(v17, (uint64_t)v22);
    if (v22 && v23)
      sub_22E3BB10C(v23, (unint64_t)v22);
  }
  else
  {
    v17 = 0;
  }
  sub_22E892110(&v22, a1);
  v18 = operator new(0x60uLL);
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = a8;
  *((_DWORD *)v18 + 10) = v15;
  v18[3] = v17;
  v18[4] = v16;
  v18[6] = v18 + 8;
  v18[7] = 0x100000000;
  if ((_DWORD)v23)
    sub_22E892224((unint64_t)(v18 + 6), (uint64_t)&v22);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(a1 + 24);
  *v18 = v20;
  v18[1] = v19;
  *(_QWORD *)(v20 + 8) = v18;
  *v19 = v18;
  ++v19[2];
  return sub_22E89277C((char **)&v22);
}

char **sub_22E891FD0(uint64_t a1, void *a2, size_t a3, int a4)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88) + 2128;
  v14 = 0;
  v15 = v6;
  v16 = 6187;
  sub_22E3B89A8(&v14, a2, a3);
  v7 = v16;
  v8 = v15;
  if (v14)
  {
    v9 = (_OWORD *)sub_22E3B8AAC(v15);
    sub_22E78D4E8(v9, (uint64_t)v14);
    if (v14 && v15)
      sub_22E3BB10C(v15, (unint64_t)v14);
  }
  else
  {
    v9 = 0;
  }
  sub_22E892110(&v14, a1);
  v10 = operator new(0x60uLL);
  *v10 = 0;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = a4;
  *((_DWORD *)v10 + 10) = v7;
  v10[3] = v9;
  v10[4] = v8;
  v10[6] = v10 + 8;
  v10[7] = 0x100000000;
  if ((_DWORD)v15)
    sub_22E892224((unint64_t)(v10 + 6), (uint64_t)&v14);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = (_QWORD *)(a1 + 24);
  *v10 = v12;
  v10[1] = v11;
  *(_QWORD *)(v12 + 8) = v10;
  *v11 = v10;
  ++v11[2];
  return sub_22E89277C((char **)&v14);
}

uint64_t sub_22E892100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t sub_22E892108(uint64_t result)
{
  *(_QWORD *)(result + 56) = 0;
  return result;
}

double sub_22E892110(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double result;
  int v13;
  _OWORD *v14;
  unint64_t v15;
  int v16;

  if (*(_BYTE *)(a2 + 64) && (v4 = *(_QWORD *)(a2 + 56)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    sub_22F0D5A50(v5);
    v7 = v6;
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88) + 2128;
    v9 = *(_QWORD *)(a2 + 56);
    v10 = (_BYTE *)sub_22E3B8AAC(v8);
    v11 = *v10;
    v10[v11 + 1] = 11;
    *v10 = v11 + 1;
    *(_QWORD *)&v10[8 * v11 + 16] = v9;
    v13 = v7;
    v16 = 6126;
    v15 = v8;
    v14 = (_OWORD *)sub_22E3B8AAC(v8);
    sub_22E78D4E8(v14, (uint64_t)v10);
    sub_22E3BB10C(v8, (unint64_t)v10);
    *a1 = a1 + 2;
    a1[1] = 0x100000000;
    sub_22E8925C0((uint64_t)a1, (uint64_t)&v13);
    if (v14)
    {
      if (v15)
        sub_22E3BB10C(v15, (unint64_t)v14);
    }
  }
  else
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x100000000;
    a1[1] = 0x100000000;
  }
  return result;
}

unint64_t sub_22E892224(unint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_22E892440((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v9 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v10 = 0;
        do
        {
          sub_22E8924D4((uint64_t)&v9[v10], (uint64_t)&v4[v10]);
          v10 += 32;
        }
        while (32 * v5 != v10);
        v6 = *(unsigned int *)(a1 + 8);
        v11 = &v9[v10];
        v9 = *(char **)a1;
      }
      else
      {
        v11 = *(char **)a1;
      }
      for (i = &v9[32 * v6]; i != v11; i -= 32)
      {
        v13 = *((_QWORD *)i - 3);
        if (v13)
        {
          v14 = *((_QWORD *)i - 2);
          if (v14)
          {
            sub_22E3BB10C(v14, v13);
            *((_QWORD *)i - 3) = 0;
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v15 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v15)
      {
        v16 = *(char **)a2;
        v17 = 32 * v15;
        do
        {
          v18 = &v16[v17];
          v19 = *(_QWORD *)&v16[v17 - 24];
          if (v19)
          {
            v20 = *((_QWORD *)v18 - 2);
            if (v20)
            {
              sub_22E3BB10C(v20, v19);
              *((_QWORD *)v18 - 3) = 0;
            }
          }
          v17 -= 32;
        }
        while (v17);
      }
      goto LABEL_45;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v21 = *(char **)a1;
        v22 = 32 * v6;
        do
        {
          v23 = &v21[v22];
          v24 = *(_QWORD *)&v21[v22 - 24];
          if (v24)
          {
            v25 = *((_QWORD *)v23 - 2);
            if (v25)
            {
              sub_22E3BB10C(v25, v24);
              *((_QWORD *)v23 - 3) = 0;
            }
          }
          v22 -= 32;
        }
        while (v22);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2F1F4C(a1);
    }
    else if ((_DWORD)v6)
    {
      v7 = *(char **)a1;
      v8 = 32 * v6;
      do
      {
        sub_22E8924D4((uint64_t)v7, (uint64_t)v4);
        v4 += 32;
        v7 += 32;
        v8 -= 32;
      }
      while (v8);
      goto LABEL_36;
    }
    v6 = 0;
LABEL_36:
    v26 = *(char **)a2;
    v27 = *(unsigned int *)(a2 + 8);
    if (v6 != v27)
    {
      v28 = &v26[32 * v27];
      v29 = *(_QWORD *)a1 + 32 * v6;
      v30 = &v26[32 * v6];
      do
      {
        *(_DWORD *)v29 = *(_DWORD *)v30;
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 16) = 0;
        *(_DWORD *)(v29 + 24) = *((_DWORD *)v30 + 6);
        *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
        *((_QWORD *)v30 + 1) = 0;
        v30 += 32;
        v29 += 32;
      }
      while (v30 != v28);
    }
    *(_DWORD *)(a1 + 8) = v5;
    v31 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v31)
    {
      v32 = 32 * v31;
      do
      {
        v33 = &v26[v32];
        v34 = *(_QWORD *)&v26[v32 - 24];
        if (v34)
        {
          v35 = *((_QWORD *)v33 - 2);
          if (v35)
          {
            sub_22E3BB10C(v35, v34);
            *((_QWORD *)v33 - 3) = 0;
          }
        }
        v32 -= 32;
      }
      while (v32);
    }
LABEL_45:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double sub_22E892440(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    do
    {
      v7 = &v4[v6];
      v8 = *(_QWORD *)&v4[v6 - 24];
      if (v8)
      {
        v9 = *((_QWORD *)v7 - 2);
        if (v9)
        {
          sub_22E3BB10C(v9, v8);
          *((_QWORD *)v7 - 3) = 0;
        }
      }
      v6 -= 32;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_22E8924D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      sub_22E3BB10C(v5, v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

unint64_t sub_22E89252C(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(_QWORD *)result + 32 * v2;
    v5 = *(_QWORD *)result;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v5;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(v5 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      v5 += 32;
      a2 += 32;
    }
    while (v5 != v4);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = 32 * v6;
      do
      {
        v8 = v3 + v7;
        v9 = *(_QWORD *)(v3 + v7 - 24);
        if (v9)
        {
          result = *(_QWORD *)(v8 - 16);
          if (result)
          {
            result = sub_22E3BB10C(result, v9);
            *(_QWORD *)(v8 - 24) = 0;
          }
        }
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

void sub_22E8925C0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;

  if (*(_DWORD *)(a1 + 12))
  {
    if (!*(_DWORD *)(a1 + 8))
    {
LABEL_5:
      v6 = *(_DWORD **)a1;
      *v6 = *(_DWORD *)a2;
      sub_22E78D434((uint64_t)(v6 + 2), (uint64_t *)(a2 + 8));
      goto LABEL_21;
    }
    v4 = *(_DWORD **)a1;
    *v4 = *(_DWORD *)a2;
    sub_22E892708((uint64_t)(v4 + 2), a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5 != 1)
    {
      if (!(_DWORD)v5)
        goto LABEL_5;
      v14 = *(_DWORD **)a1;
      v15 = 8 * v5;
      do
      {
        v16 = &v14[v15];
        v17 = *(_QWORD *)&v14[v15 - 6];
        if (v17)
        {
          v18 = *((_QWORD *)v16 - 2);
          if (v18)
          {
            sub_22E3BB10C(v18, v17);
            *((_QWORD *)v16 - 3) = 0;
          }
        }
        v15 -= 8;
      }
      while (v15 != 8);
    }
  }
  else
  {
    v7 = (_DWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    *v7 = *(_DWORD *)a2;
    sub_22E78D434((uint64_t)(v7 + 2), (uint64_t *)(a2 + 8));
    v8 = *(_DWORD **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      do
      {
        v11 = (char *)&v8[v10];
        v12 = *(_QWORD *)&v8[v10 - 6];
        if (v12)
        {
          v13 = *((_QWORD *)v11 - 2);
          if (v13)
          {
            sub_22E3BB10C(v13, v12);
            *((_QWORD *)v11 - 3) = 0;
          }
        }
        v10 -= 8;
      }
      while (v10 * 4);
      v8 = *(_DWORD **)a1;
    }
    if (v8 != (_DWORD *)(a1 + 16))
      free(v8);
    *(_QWORD *)a1 = v7;
    *(_DWORD *)(a1 + 12) = 0;
  }
LABEL_21:
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t sub_22E892708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)a2;
  v5 = *(_OWORD **)a1;
  if (v4)
  {
    if (!v5)
    {
      v5 = (_OWORD *)sub_22E3B8AAC(*(_QWORD *)(a1 + 8));
      *(_QWORD *)a1 = v5;
      v4 = *(_QWORD *)a2;
    }
    sub_22E78D4E8(v5, v4);
  }
  else if (v5)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      sub_22E3BB10C(v6, (unint64_t)v5);
      *(_QWORD *)a1 = 0;
    }
  }
  return a1;
}

char **sub_22E89277C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      v5 = &v2[v4];
      v6 = *(_QWORD *)&v2[v4 - 24];
      if (v6)
      {
        v7 = *((_QWORD *)v5 - 2);
        if (v7)
        {
          sub_22E3BB10C(v7, v6);
          *((_QWORD *)v5 - 3) = 0;
        }
      }
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22E8927F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  unint64_t v15;
  int v16;

  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  sub_22E8925C0((uint64_t)a1, a3);
  if (*(_BYTE *)(a2 + 64))
  {
    v5 = *(_QWORD *)(a2 + 56);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
      sub_22F0D5A50(v6);
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88) + 2128;
      v10 = *(_QWORD *)(a2 + 56);
      v11 = (_BYTE *)sub_22E3B8AAC(v9);
      v12 = *v11;
      v11[v12 + 1] = 11;
      *v11 = v12 + 1;
      *(_QWORD *)&v11[8 * v12 + 16] = v10;
      v13 = v8;
      v16 = 6126;
      v15 = v9;
      v14 = (_OWORD *)sub_22E3B8AAC(v9);
      sub_22E78D4E8(v14, (uint64_t)v11);
      sub_22E3BB10C(v9, (unint64_t)v11);
      sub_22E8928F4((unint64_t)a1, (unint64_t)&v13);
      if (v14)
      {
        if (v15)
          sub_22E3BB10C(v15, (unint64_t)v14);
      }
    }
  }
}

__n128 sub_22E8928F4(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 32 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_22F2F1F4C(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_22F2F1F4C(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 32 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v6 = *(_DWORD *)v2;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(v2 + 24);
  result = *(__n128 *)(v2 + 8);
  *(__n128 *)(v6 + 8) = result;
  *(_QWORD *)(v2 + 8) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22E892994(_QWORD *a1, uint64_t a2, int a3, void *__src, size_t __len)
{
  uint64_t v8;
  double result;
  unsigned __int8 *v10;
  unint64_t v11;
  int v12;
  int v13;
  _OWORD *v14;
  unint64_t v15;
  int v16;

  if (!a3)
    return sub_22E892110(a1, a2);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 88) + 2128;
  v10 = 0;
  v11 = v8;
  v12 = 5704;
  sub_22E3B89A8(&v10, __src, __len);
  v13 = a3;
  v16 = v12;
  v14 = 0;
  v15 = v11;
  if (v10)
  {
    v14 = (_OWORD *)sub_22E3B8AAC(v11);
    sub_22E78D4E8(v14, (uint64_t)v10);
  }
  sub_22E8927F0(a1, a2, (uint64_t)&v13);
  if (v14 && v15)
  {
    sub_22E3BB10C(v15, (unint64_t)v14);
    v14 = 0;
  }
  if (v10)
  {
    if (v11)
      sub_22E3BB10C(v11, (unint64_t)v10);
  }
  return result;
}

unsigned __int8 **sub_22E892A74(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 10;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

uint64_t sub_22E892AD4(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 32 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_22F2F1F4C(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_22F2F1F4C(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (_DWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  *v6 = *(_DWORD *)v2;
  result = sub_22E78D434((uint64_t)(v6 + 2), (uint64_t *)(v2 + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_22E892B64(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *(uint64_t **)a2;
      if (sub_22F1E3C34(*a4, *(_DWORD *)(*(_QWORD *)a2 + 16), *(_DWORD *)(a1 + 16)))
      {
        v8 = *v7;
        *(_QWORD *)(v8 + 8) = v7[1];
        *(_QWORD *)v7[1] = v8;
        v9 = *(_QWORD *)v4;
        *(_QWORD *)(v9 + 8) = v7;
        *v7 = v9;
        *(_QWORD *)v4 = v7;
        v7[1] = v4;
        return v7;
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (a3 >> 1) + 1;
      v13 = a1;
      do
      {
        v13 = *(_QWORD *)(v13 + 8);
        --v12;
      }
      while (v12 > 1);
      v14 = sub_22E892B64(a1, v13, a3 >> 1, a4);
      v4 = sub_22E892B64(v13, a2, a3 - v11, a4);
      if (sub_22F1E3C34(*a4, *(_DWORD *)(v4 + 16), *(_DWORD *)(v14 + 16)))
      {
        for (i = *(_QWORD *)(v4 + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          if (!sub_22F1E3C34(*a4, *(_DWORD *)(i + 16), *(_DWORD *)(v14 + 16)))
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v17 = *(_QWORD *)i;
        v18 = *(_QWORD *)v4;
        *(_QWORD *)(v18 + 8) = *(_QWORD *)(*(_QWORD *)i + 8);
        **(_QWORD **)(v17 + 8) = v18;
        v19 = *(_QWORD *)v14;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v19 + 8) = v4;
        *(_QWORD *)v4 = v19;
        *(_QWORD *)v14 = v17;
        *(_QWORD *)(v17 + 8) = v14;
      }
      else
      {
        v16 = *(uint64_t **)(v14 + 8);
        i = v4;
        v4 = v14;
      }
      if (v16 != (uint64_t *)i && i != a2)
      {
        v20 = i;
        do
        {
          if (sub_22F1E3C34(*a4, *(_DWORD *)(i + 16), *((_DWORD *)v16 + 4)))
          {
            for (j = *(_QWORD *)(i + 8); j != a2; j = *(_QWORD *)(j + 8))
            {
              if (!sub_22F1E3C34(*a4, *(_DWORD *)(j + 16), *((_DWORD *)v16 + 4)))
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v23 = *(_QWORD *)j;
            v24 = *(_QWORD *)i;
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(*(_QWORD *)j + 8);
            **(_QWORD **)(v23 + 8) = v24;
            if (v20 == i)
              v20 = j;
            v25 = *v16;
            v22 = (uint64_t *)v16[1];
            *(_QWORD *)(v25 + 8) = i;
            *(_QWORD *)i = v25;
            *v16 = v23;
            *(_QWORD *)(v23 + 8) = v16;
            i = j;
          }
          else
          {
            v22 = (uint64_t *)v16[1];
          }
          v26 = v22 == (uint64_t *)v20 || i == a2;
          v16 = v22;
        }
        while (!v26);
      }
    }
  }
  return (uint64_t *)v4;
}

uint64_t sub_22E892D64(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  sub_22E89277C((char **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      sub_22E3BB10C(v3, v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  return a1;
}

void sub_22E892DA4(_QWORD *a1)
{
  *a1 = &off_24FAA55A8;
  sub_22F2F1FB8(a1 + 2);
  JUMPOUT(0x2348A0E9CLL);
}

void *sub_22E892DE4(_QWORD *a1)
{
  _QWORD *v2;
  void *result;
  uint64_t i;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  unsigned int v10[24];
  unsigned int v11[24];
  _QWORD *v12;

  v2 = a1 + 2;
  v12 = *(_QWORD **)(a1[1] + 112);
  result = sub_22E892B64(a1[3], (uint64_t)(a1 + 2), a1[4], &v12);
  for (i = a1[3]; (_QWORD *)i != v2; i = *(_QWORD *)(i + 8))
  {
    sub_22E90379C((_QWORD *)a1[1], *(_DWORD *)(i + 16), i + 24, 0, (uint64_t)v11);
    result = sub_22E903BEC(v11);
    v5 = *(unsigned int *)(i + 56);
    if ((_DWORD)v5)
    {
      v6 = *(int **)(i + 48);
      v7 = &v6[8 * v5];
      do
      {
        v8 = (uint64_t)(v6 + 2);
        v9 = *v6;
        v6 += 8;
        sub_22E90379C((_QWORD *)a1[1], v9, v8, 0, (uint64_t)v10);
        result = sub_22E903BEC(v10);
      }
      while (v6 != v7);
    }
  }
  return result;
}

char **sub_22E892EA8(uint64_t a1, int a2, void *__src, size_t __len)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  _OWORD *v9;
  unsigned __int8 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t i;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v20 = 0;
  v21 = v6;
  v22 = 6710;
  sub_22E3B89A8(&v20, __src, __len);
  v7 = v22;
  v8 = v21;
  if (v20)
  {
    v9 = (_OWORD *)sub_22E3B8AAC(v21);
    v10 = v20;
    v11 = *((_OWORD *)v20 + 1);
    *v9 = *(_OWORD *)v20;
    v9[1] = v11;
    v12 = *((_OWORD *)v10 + 5);
    v14 = *((_OWORD *)v10 + 2);
    v13 = *((_OWORD *)v10 + 3);
    v9[4] = *((_OWORD *)v10 + 4);
    v9[5] = v12;
    v9[2] = v14;
    v9[3] = v13;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v9 + i), (const std::string *)&v10[i]);
    sub_22E78D560((uint64_t)(v9 + 21), (uint64_t)(v10 + 336));
    sub_22E78D658((uint64_t)(v9 + 28), (uint64_t *)v10 + 56);
    if (v20 && v21)
      sub_22E3BB10C(v21, (unint64_t)v20);
  }
  else
  {
    v9 = 0;
  }
  v20 = (unsigned __int8 *)&v22;
  v21 = 0x100000000;
  v16 = operator new(0x60uLL);
  v16[4] = a2;
  v16[10] = v7;
  *((_QWORD *)v16 + 3) = v9;
  *((_QWORD *)v16 + 4) = v8;
  *((_QWORD *)v16 + 6) = v16 + 16;
  *((_QWORD *)v16 + 7) = 0x100000000;
  v18 = *(_QWORD *)(a1 + 16);
  v17 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v17;
  *(_QWORD *)(v18 + 8) = v16;
  *v17 = v16;
  ++v17[2];
  return sub_22E89277C((char **)&v20);
}

char **sub_22E893024(uint64_t a1, int a2, void *__src, size_t __len, void *a5, size_t a6, void *a7, size_t a8)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  unsigned __int8 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t i;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v28 = 0;
  v29 = v14;
  v30 = 6873;
  sub_22E3B89A8(&v28, __src, __len);
  sub_22E3B89A8(&v28, a5, a6);
  sub_22E3B89A8(&v28, a7, a8);
  v15 = v30;
  v16 = v29;
  if (v28)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v29);
    v18 = v28;
    v19 = *((_OWORD *)v28 + 1);
    *v17 = *(_OWORD *)v28;
    v17[1] = v19;
    v20 = *((_OWORD *)v18 + 5);
    v22 = *((_OWORD *)v18 + 2);
    v21 = *((_OWORD *)v18 + 3);
    v17[4] = *((_OWORD *)v18 + 4);
    v17[5] = v20;
    v17[2] = v22;
    v17[3] = v21;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v17 + i), (const std::string *)&v18[i]);
    sub_22E78D560((uint64_t)(v17 + 21), (uint64_t)(v18 + 336));
    sub_22E78D658((uint64_t)(v17 + 28), (uint64_t *)v18 + 56);
    if (v28 && v29)
      sub_22E3BB10C(v29, (unint64_t)v28);
  }
  else
  {
    v17 = 0;
  }
  v28 = (unsigned __int8 *)&v30;
  v29 = 0x100000000;
  v24 = operator new(0x60uLL);
  v24[4] = a2;
  v24[10] = v15;
  *((_QWORD *)v24 + 3) = v17;
  *((_QWORD *)v24 + 4) = v16;
  *((_QWORD *)v24 + 6) = v24 + 16;
  *((_QWORD *)v24 + 7) = 0x100000000;
  v26 = *(_QWORD *)(a1 + 16);
  v25 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v24 = v26;
  *((_QWORD *)v24 + 1) = v25;
  *(_QWORD *)(v26 + 8) = v24;
  *v25 = v24;
  ++v25[2];
  return sub_22E89277C((char **)&v28);
}

char **sub_22E8931D0(uint64_t a1, int a2, void *__src, size_t __len, void *a5, size_t a6)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v24 = 0;
  v25 = v10;
  v26 = 6874;
  sub_22E3B89A8(&v24, __src, __len);
  sub_22E3B89A8(&v24, a5, a6);
  v11 = v26;
  v12 = v25;
  if (v24)
  {
    v13 = (_OWORD *)sub_22E3B8AAC(v25);
    v14 = v24;
    v15 = *((_OWORD *)v24 + 1);
    *v13 = *(_OWORD *)v24;
    v13[1] = v15;
    v16 = *((_OWORD *)v14 + 5);
    v18 = *((_OWORD *)v14 + 2);
    v17 = *((_OWORD *)v14 + 3);
    v13[4] = *((_OWORD *)v14 + 4);
    v13[5] = v16;
    v13[2] = v18;
    v13[3] = v17;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v13 + i), (const std::string *)&v14[i]);
    sub_22E78D560((uint64_t)(v13 + 21), (uint64_t)(v14 + 336));
    sub_22E78D658((uint64_t)(v13 + 28), (uint64_t *)v14 + 56);
    if (v24 && v25)
      sub_22E3BB10C(v25, (unint64_t)v24);
  }
  else
  {
    v13 = 0;
  }
  v24 = (unsigned __int8 *)&v26;
  v25 = 0x100000000;
  v20 = operator new(0x60uLL);
  v20[4] = a2;
  v20[10] = v11;
  *((_QWORD *)v20 + 3) = v13;
  *((_QWORD *)v20 + 4) = v12;
  *((_QWORD *)v20 + 6) = v20 + 16;
  *((_QWORD *)v20 + 7) = 0x100000000;
  v22 = *(_QWORD *)(a1 + 16);
  v21 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v21;
  *(_QWORD *)(v22 + 8) = v20;
  *v21 = v20;
  ++v21[2];
  return sub_22E89277C((char **)&v24);
}

char **sub_22E893364(uint64_t a1, int a2, void *__src, size_t __len)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  _OWORD *v9;
  unsigned __int8 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t i;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v20 = 0;
  v21 = v6;
  v22 = 6961;
  sub_22E3B89A8(&v20, __src, __len);
  v7 = v22;
  v8 = v21;
  if (v20)
  {
    v9 = (_OWORD *)sub_22E3B8AAC(v21);
    v10 = v20;
    v11 = *((_OWORD *)v20 + 1);
    *v9 = *(_OWORD *)v20;
    v9[1] = v11;
    v12 = *((_OWORD *)v10 + 5);
    v14 = *((_OWORD *)v10 + 2);
    v13 = *((_OWORD *)v10 + 3);
    v9[4] = *((_OWORD *)v10 + 4);
    v9[5] = v12;
    v9[2] = v14;
    v9[3] = v13;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v9 + i), (const std::string *)&v10[i]);
    sub_22E78D560((uint64_t)(v9 + 21), (uint64_t)(v10 + 336));
    sub_22E78D658((uint64_t)(v9 + 28), (uint64_t *)v10 + 56);
    if (v20 && v21)
      sub_22E3BB10C(v21, (unint64_t)v20);
  }
  else
  {
    v9 = 0;
  }
  v20 = (unsigned __int8 *)&v22;
  v21 = 0x100000000;
  v16 = operator new(0x60uLL);
  v16[4] = a2;
  v16[10] = v7;
  *((_QWORD *)v16 + 3) = v9;
  *((_QWORD *)v16 + 4) = v8;
  *((_QWORD *)v16 + 6) = v16 + 16;
  *((_QWORD *)v16 + 7) = 0x100000000;
  v18 = *(_QWORD *)(a1 + 16);
  v17 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v17;
  *(_QWORD *)(v18 + 8) = v16;
  *v17 = v16;
  ++v17[2];
  return sub_22E89277C((char **)&v20);
}

char **sub_22E8934E0(uint64_t a1, int a2, void *__src, size_t __len, void *a5, size_t a6)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v24 = 0;
  v25 = v10;
  v26 = 6962;
  sub_22E3B89A8(&v24, __src, __len);
  sub_22E3B89A8(&v24, a5, a6);
  v11 = v26;
  v12 = v25;
  if (v24)
  {
    v13 = (_OWORD *)sub_22E3B8AAC(v25);
    v14 = v24;
    v15 = *((_OWORD *)v24 + 1);
    *v13 = *(_OWORD *)v24;
    v13[1] = v15;
    v16 = *((_OWORD *)v14 + 5);
    v18 = *((_OWORD *)v14 + 2);
    v17 = *((_OWORD *)v14 + 3);
    v13[4] = *((_OWORD *)v14 + 4);
    v13[5] = v16;
    v13[2] = v18;
    v13[3] = v17;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v13 + i), (const std::string *)&v14[i]);
    sub_22E78D560((uint64_t)(v13 + 21), (uint64_t)(v14 + 336));
    sub_22E78D658((uint64_t)(v13 + 28), (uint64_t *)v14 + 56);
    if (v24 && v25)
      sub_22E3BB10C(v25, (unint64_t)v24);
  }
  else
  {
    v13 = 0;
  }
  v24 = (unsigned __int8 *)&v26;
  v25 = 0x100000000;
  v20 = operator new(0x60uLL);
  v20[4] = a2;
  v20[10] = v11;
  *((_QWORD *)v20 + 3) = v13;
  *((_QWORD *)v20 + 4) = v12;
  *((_QWORD *)v20 + 6) = v20 + 16;
  *((_QWORD *)v20 + 7) = 0x100000000;
  v22 = *(_QWORD *)(a1 + 16);
  v21 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v21;
  *(_QWORD *)(v22 + 8) = v20;
  *v21 = v20;
  ++v21[2];
  return sub_22E89277C((char **)&v24);
}

char **sub_22E893674(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, int a6)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  _OWORD *v13;
  unsigned __int8 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v24 = 0;
  v25 = v10;
  v26 = 7146;
  sub_22E3B89A8(&v24, a2, a3);
  sub_22E3B89A8(&v24, a4, a5);
  v11 = v26;
  v12 = v25;
  if (v24)
  {
    v13 = (_OWORD *)sub_22E3B8AAC(v25);
    v14 = v24;
    v15 = *((_OWORD *)v24 + 1);
    *v13 = *(_OWORD *)v24;
    v13[1] = v15;
    v16 = *((_OWORD *)v14 + 5);
    v18 = *((_OWORD *)v14 + 2);
    v17 = *((_OWORD *)v14 + 3);
    v13[4] = *((_OWORD *)v14 + 4);
    v13[5] = v16;
    v13[2] = v18;
    v13[3] = v17;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v13 + i), (const std::string *)&v14[i]);
    sub_22E78D560((uint64_t)(v13 + 21), (uint64_t)(v14 + 336));
    sub_22E78D658((uint64_t)(v13 + 28), (uint64_t *)v14 + 56);
    if (v24 && v25)
      sub_22E3BB10C(v25, (unint64_t)v24);
  }
  else
  {
    v13 = 0;
  }
  v24 = (unsigned __int8 *)&v26;
  v25 = 0x100000000;
  v20 = operator new(0x60uLL);
  v20[4] = a6;
  v20[10] = v11;
  *((_QWORD *)v20 + 3) = v13;
  *((_QWORD *)v20 + 4) = v12;
  *((_QWORD *)v20 + 6) = v20 + 16;
  *((_QWORD *)v20 + 7) = 0x100000000;
  v22 = *(_QWORD *)(a1 + 16);
  v21 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = v21;
  *(_QWORD *)(v22 + 8) = v20;
  *v21 = v20;
  ++v21[2];
  return sub_22E89277C((char **)&v24);
}

char **sub_22E893800(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, void *a6, size_t a7, int a8)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  _OWORD *v17;
  unsigned __int8 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t i;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v28 = 0;
  v29 = v14;
  v30 = 7145;
  sub_22E3B89A8(&v28, a2, a3);
  sub_22E3B89A8(&v28, a4, a5);
  sub_22E3B89A8(&v28, a6, a7);
  v15 = v30;
  v16 = v29;
  if (v28)
  {
    v17 = (_OWORD *)sub_22E3B8AAC(v29);
    v18 = v28;
    v19 = *((_OWORD *)v28 + 1);
    *v17 = *(_OWORD *)v28;
    v17[1] = v19;
    v20 = *((_OWORD *)v18 + 5);
    v22 = *((_OWORD *)v18 + 2);
    v21 = *((_OWORD *)v18 + 3);
    v17[4] = *((_OWORD *)v18 + 4);
    v17[5] = v20;
    v17[2] = v22;
    v17[3] = v21;
    for (i = 96; i != 336; i += 24)
      std::string::operator=((std::string *)((char *)v17 + i), (const std::string *)&v18[i]);
    sub_22E78D560((uint64_t)(v17 + 21), (uint64_t)(v18 + 336));
    sub_22E78D658((uint64_t)(v17 + 28), (uint64_t *)v18 + 56);
    if (v28 && v29)
      sub_22E3BB10C(v29, (unint64_t)v28);
  }
  else
  {
    v17 = 0;
  }
  v28 = (unsigned __int8 *)&v30;
  v29 = 0x100000000;
  v24 = operator new(0x60uLL);
  v24[4] = a8;
  v24[10] = v15;
  *((_QWORD *)v24 + 3) = v17;
  *((_QWORD *)v24 + 4) = v16;
  *((_QWORD *)v24 + 6) = v24 + 16;
  *((_QWORD *)v24 + 7) = 0x100000000;
  v26 = *(_QWORD *)(a1 + 16);
  v25 = (_QWORD *)(a1 + 16);
  *(_QWORD *)v24 = v26;
  *((_QWORD *)v24 + 1) = v25;
  *(_QWORD *)(v26 + 8) = v24;
  *v25 = v24;
  ++v25[2];
  return sub_22E89277C((char **)&v28);
}

uint64_t sub_22E8939A4(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      v6 = sub_22F2F206C(result);
      result = MEMORY[0x2348A0E9C](v6, 0x1060C40194CB704);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void sub_22E893A10(uint64_t a1)
{
  sub_22E88FBC0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E893A34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = sub_22E893AE0((_QWORD *)(a1 + 16), a2);
  return sub_22E893C7C(*v4 & 0xFFFFFFFFFFFFFFF8, a3);
}

uint64_t sub_22E893A64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = sub_22E893AE0((_QWORD *)(a1 + 64), a2);
  return sub_22E893C7C(*v4 & 0xFFFFFFFFFFFFFFF8, a3);
}

uint64_t *sub_22E893A94(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *result;

  v4 = sub_22E893AE0((_QWORD *)(a1 + 16), a2);
  *v4 |= 4uLL;
  result = sub_22E893AE0((_QWORD *)(a1 + 64), a2);
  *result |= 4uLL;
  return result;
}

uint64_t *sub_22E893AE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;

  v24 = a2;
  v25 = 0;
  sub_22E54DCBC((uint64_t)a1, &v24, &v25, (uint64_t)&v22);
  v4 = v22;
  if (v23)
  {
    v8 = (char *)a1[4];
    v7 = a1[5];
    if ((unint64_t)v8 < v7)
    {
      *(_QWORD *)v8 = a2;
      *((_QWORD *)v8 + 1) = 0;
      v16 = v8 + 16;
    }
    else
    {
      v9 = (char *)a1[3];
      v10 = (v8 - v9) >> 4;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60)
        abort();
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 3 > v11)
        v11 = v12 >> 3;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 60)
          sub_22E3B3F8C();
        v14 = (char *)operator new(16 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[16 * v10];
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = 0;
      v16 = v15 + 16;
      if (v8 != v9)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v8 - 1);
          v15 -= 16;
          v8 -= 16;
        }
        while (v8 != v9);
        v8 = (char *)a1[3];
      }
      a1[3] = v15;
      a1[4] = v16;
      a1[5] = &v14[16 * v13];
      if (v8)
        operator delete(v8);
    }
    a1[4] = v16;
    v6 = a1[3];
    v5 = (((unint64_t)v16 - v6) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v22 + 8);
    v6 = a1[3];
  }
  v17 = v6 + 16 * v5;
  v19 = *(_QWORD *)(v17 + 8);
  v18 = (uint64_t *)(v17 + 8);
  if (v19 <= 7)
  {
    v20 = operator new();
    *(_QWORD *)v20 = v20 + 16;
    *(_QWORD *)(v20 + 8) = 0x200000000;
    *v18 = *v18 & 7 | v20;
  }
  return v18;
}

uint64_t sub_22E893C7C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + (v4 << 6);
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = (uint64_t)a2 - v5;
      sub_22F2F20FC(a1);
      v5 = *(_QWORD *)a1;
      v2 = (uint64_t *)(*(_QWORD *)a1 + v11);
    }
    else
    {
      sub_22F2F20FC(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  v7 = *v2;
  *(_DWORD *)(v6 + 7) = *(_DWORD *)((char *)v2 + 7);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 24) = 0x200000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  result = v6 + 16;
  if (*((_DWORD *)v2 + 6))
    result = sub_22F252404(result, (uint64_t)(v2 + 2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22E893D34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1 + (v2 << 6);
    v4 = (_QWORD *)(a2 + 16);
    v5 = *a1 + 16;
    v6 = 0x200000000;
    do
    {
      v7 = v5 - 16;
      v8 = *(_QWORD *)(v5 - 16);
      *(_DWORD *)((char *)v4 - 9) = *(_DWORD *)(v5 - 9);
      *(v4 - 2) = v8;
      *v4 = v4 + 2;
      v4[1] = v6;
      if (*(_DWORD *)(v5 + 8))
      {
        v17 = a1;
        v19 = v5;
        v14 = v3;
        v15 = v4;
        v16 = v6;
        v13 = v5 - 16;
        sub_22E893E14(v4, v5);
        v7 = v13;
        v3 = v14;
        v6 = v16;
        a1 = v17;
        v5 = v19;
        v4 = v15;
      }
      v4 += 8;
      v5 += 64;
    }
    while (v7 + 64 != v3);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = v9 << 6;
      do
      {
        v12 = *(void **)(v10 + v11 - 48);
        if ((void *)(v10 + v11 - 32) != v12)
        {
          v18 = v11;
          v20 = v10;
          free(v12);
          v11 = v18;
          v10 = v20;
        }
        v11 -= 64;
      }
      while (v11);
    }
  }
}

_QWORD *sub_22E893E14(_QWORD *result, uint64_t a2)
{
  const void *v3;
  const void *v4;
  _DWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  const void *v15;
  unsigned int *v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (result != (_QWORD *)a2)
  {
    v4 = (const void *)(a2 + 16);
    v3 = *(const void **)a2;
    if (v3 != v4)
    {
      v15 = v4;
      v11 = a2;
      v18 = result;
      v8 = result + 2;
      v7 = (void *)*result;
      if (v7 != v8)
      {
        free(v7);
        v3 = *(const void **)v11;
      }
      result = v18;
      *v18 = v3;
      v5 = (_DWORD *)(v11 + 8);
      v18[1] = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v15;
      *(_DWORD *)(v11 + 12) = 0;
      goto LABEL_7;
    }
    v5 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    if (*((_DWORD *)result + 2) >= v6)
    {
      if ((_DWORD)v6)
      {
        v20 = result;
        v14 = *(_DWORD *)(a2 + 8);
        v17 = (_DWORD *)(a2 + 8);
        memmove((void *)*result, v3, 16 * v6);
        v5 = v17;
        result = v20;
        LODWORD(v6) = v14;
      }
      *((_DWORD *)result + 2) = v6;
LABEL_7:
      *v5 = 0;
      return result;
    }
    v10 = *((unsigned int *)result + 2);
    v16 = (unsigned int *)(a2 + 8);
    v12 = (_QWORD *)a2;
    v19 = result;
    v13 = *(_DWORD *)(a2 + 8);
    if (*((_DWORD *)result + 3) >= v6)
    {
      if ((_DWORD)v10)
      {
        memmove((void *)*result, v3, 16 * v10);
        goto LABEL_15;
      }
    }
    else
    {
      *((_DWORD *)result + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
LABEL_15:
    v9 = *v16;
    if (v10 != v9)
      memcpy((void *)(*v19 + 16 * v10), (const void *)(*v12 + 16 * v10), *v12 + 16 * v9 - (*v12 + 16 * v10));
    v5 = v16;
    result = v19;
    *((_DWORD *)v19 + 2) = v13;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_22E893F80(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  size_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  size_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _BYTE v45[12];
  void *__p;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50[12];

  v7 = *a3;
  if (*(unsigned __int8 *)*a3 != 161)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 10
      && !sub_22E49C868(a2))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(v7 + 16) + 24), 0x1BB1u, 0, (uint64_t)v50);
      v43 = *(_QWORD *)(a2 + 40);
      v30 = sub_22E894538((uint64_t)v50, &v43);
      v31 = 0;
      v32 = *(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v32 & 8) != 0)
        v31 = (*(_WORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0;
      LOBYTE(v40) = v31;
      sub_22E894E38(v30, (unsigned __int8 *)&v40);
      sub_22E903BEC((unsigned int *)v50);
LABEL_11:
      v15 = *(_QWORD *)(a2 + 48);
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 10
        && !sub_22E49C868(a2))
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1559u, 0, (uint64_t)v50);
        v40 = *(void **)(a2 + 40);
        v28 = sub_22E894538((uint64_t)v50, (uint64_t *)&v40);
        v29 = *(unsigned int *)(a2 + 24);
        *(_QWORD *)v45 = 0;
        v45[8] = 0;
        v47 = 0;
        v48 = 0x800000000000000;
        v43 = v29 | (v29 << 32);
        v44 = 0;
        __p = (void *)0x206B636F6C625F5FLL;
        v49 = 0;
        sub_22E890748(v28, &v43);
        if (SHIBYTE(v48) < 0)
          operator delete(__p);
      }
      else
      {
        if (!sub_22EFBC5B4(a2))
        {
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
          if ((v20 & 0x8000000000000000) == 0)
          {
            v21 = v15 & 7 | v16;
            v22 = sub_22F141A3C(HIDWORD(v20), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
            sub_22EC36FF4((_QWORD *)a1, v21, v22, (uint64_t)&v40);
            v23 = v42;
            if (v42 >= 0)
              v24 = v42 & 0x7F;
            else
              v24 = v41;
            if (v24)
            {
              sub_22E8FCA40((_QWORD *)a1, v22, 0x1818u, 0, (uint64_t)v50);
              v39 = *(_QWORD *)(a2 + 40);
              v25 = sub_22E894538((uint64_t)v50, &v39);
              if (v42 >= 0)
                v26 = &v40;
              else
                v26 = v40;
              if (v42 >= 0)
                v27 = v42 & 0x7F;
              else
                v27 = v41;
              sub_22E729148(v26, v27, v22, 0, (uint64_t)&v43);
              sub_22E890748(v25, &v43);
              if (SHIBYTE(v48) < 0)
                operator delete(__p);
              sub_22E903BEC((unsigned int *)v50);
              v23 = v42;
            }
            if (v23 < 0)
            {
              operator delete(v40);
              if (v24)
                return 1;
            }
            else if (v24)
            {
              return 1;
            }
          }
        }
        v17 = *(_QWORD *)(a2 + 56);
        if ((v17 & 4) != 0 && (v37 = v17 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v37 + 16)))
          v18 = **(int ***)(v37 + 24);
        else
          v18 = (int *)(a2 + 64);
        sub_22E8FCA40((_QWORD *)a1, *v18, 0x1816u, 0, (uint64_t)v50);
        v43 = *(_QWORD *)(a2 + 40);
        sub_22E894538((uint64_t)v50, &v43);
      }
LABEL_17:
      sub_22E903BEC((unsigned int *)v50);
      return 1;
    }
    v11 = a1;
    v12 = a2;
    v13 = (uint64_t)a3;
    v14 = 1;
LABEL_10:
    sub_22E8945D8(v11, v12, v13, v14);
    goto LABEL_11;
  }
  v9 = (unsigned __int8 *)sub_22EFBC5B4(a2);
  if (!v9)
  {
LABEL_6:
    v11 = a1;
    v12 = a2;
    v13 = (uint64_t)a3;
    v14 = 0;
    goto LABEL_10;
  }
  v10 = v9;
  if ((a4 & 1) != 0 || (unsigned __int8 *)v7 != sub_22EFFA6B0(v9))
  {
    v43 = *(_QWORD *)(a1 + 88);
    v44 = 0;
    *(_QWORD *)&v45[4] = v7;
    sub_22E894394((uint64_t)&v43, v10);
    if (v44)
    {
      if ((*(_BYTE *)(v7 + 2) & 4) != 0)
      {
        *(_OWORD *)v50 = *(_OWORD *)(v7 + 32);
        v33 = sub_22F0AB0EC(v50);
      }
      else
      {
        v33 = *(_DWORD *)(v7 + 4);
      }
      sub_22E8FCA40((_QWORD *)a1, v33, 0x1BB3u, 0, (uint64_t)v50);
      v40 = *(void **)(a2 + 40);
      v34 = sub_22E894538((uint64_t)v50, (uint64_t *)&v40);
      v38 = *(_DWORD *)(a2 + 24);
      v35 = sub_22F2F2168(v34, &v38);
      sub_22F0D4E74(v7);
      v39 = v36;
      sub_22E8906A0(v35, &v39);
      goto LABEL_17;
    }
    goto LABEL_6;
  }
  return 0;
}

void sub_22E894394(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  if (!*(_BYTE *)(a1 + 8))
    sub_22E894ED8(a1, (uint64_t)a2);
}

void sub_22E8944DC()
{
  uint64_t v0;
  uint64_t *v1;

  if ((sub_22EFFA934(v0, *v1) & 1) == 0)
    JUMPOUT(0x22E894484);
  JUMPOUT(0x22E89448CLL);
}

uint64_t sub_22E894538(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E892A74((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E892A74((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

void sub_22E8945D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD *v5;
  int v7;
  int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  char v85;
  __int16 v86;
  char v87;
  uint64_t v88;
  char v89;
  void *__p;
  _QWORD v91[3];
  int v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  _QWORD *v97;
  __int128 v98;
  unsigned __int8 v99;
  _BYTE v100[15];
  uint64_t v101;

  v5 = (_QWORD *)a2;
  v101 = *MEMORY[0x24BDAC8D0];
  v99 = a4;
  if (*(_BYTE *)(a3 + 10))
  {
    sub_22F0D5A50(*(_QWORD *)a3);
    v8 = v7;
    v9 = (_QWORD *)a1;
    v10 = 7093;
    goto LABEL_3;
  }
  if (*(unsigned __int8 *)(a3 + 8) | *(unsigned __int8 *)(a3 + 9))
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1B53u, 0, (uint64_t)&v97);
    v84 = v5[5];
    v58 = sub_22E894538((uint64_t)&v97, (uint64_t *)&v84);
    v59 = sub_22E894E38(v58, &v99);
    if (*(_BYTE *)(a3 + 9))
      v60 = 4;
    else
      v60 = 5;
    if (*(unsigned __int8 *)(a3 + 10) | *(unsigned __int8 *)(a3 + 8))
      v61 = 5;
    else
      v61 = v60;
    *(_DWORD *)v100 = v61;
    v62 = sub_22E8900C4(v59, (int *)v100);
    v63 = v5[2];
    v64 = v63 & 0xFFFFFFFFFFFFFFF8;
    if ((v63 & 4) != 0)
      v64 = *(_QWORD *)(v64 + 8);
    v76 = v64;
    v65 = sub_22E894FB4(v62, (uint64_t *)&v76);
    v94 = (char *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    sub_22E8906A0(v65, (uint64_t *)&v94);
    sub_22E903BEC((unsigned int *)&v97);
    sub_22F0D5A50(*(_QWORD *)a3);
    sub_22E8FCA40((_QWORD *)a1, v66, 0x1802u, 0, (uint64_t)&v97);
    v12 = sub_22E894E38((uint64_t)&v97, &v99);
    sub_22F0D4E74(*(_QWORD *)a3);
    v84 = v67;
    v14 = (uint64_t *)&v84;
    goto LABEL_4;
  }
  v15 = *(unsigned int *)(a3 + 24);
  if (!(_DWORD)v15)
    goto LABEL_83;
  v74 = 0;
  v16 = 16 * v15;
  v17 = (unsigned int *)(*(_QWORD *)(a3 + 16) + 8);
  do
  {
    v18 = *(_QWORD *)a3;
    v19 = (unsigned __int8 *)*((_QWORD *)v17 - 1);
    v96 = 0;
    v94 = 0;
    v95 = 0;
    v93 = 0;
    v92 = -1;
    v20 = "true";
    if (!*v17)
      v20 = "false";
    v21 = "1";
    if (!*v17)
      v21 = "0";
    if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
      v22 = v20;
    else
      v22 = v21;
    v85 = 0;
    v84 = 0;
    v88 = 0;
    v89 = 0;
    memset(v91, 0, 17);
    __p = 0;
    v77 = 0;
    v76 = 0;
    v78 = 0;
    v79 = 0;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v83 = 0;
    if (v19)
    {
      v23 = *v19;
      if (v23 <= 0x61)
      {
        if (*v19 > 0xCu)
        {
          if (v23 == 13)
          {
            v75 = v18;
            v96 = 2;
            v94 = "do";
            v95 = 2;
            v36 = *((_QWORD *)v19 + 2);
            goto LABEL_44;
          }
          if (v23 == 14)
          {
            v75 = v18;
            v96 = 1;
            v94 = "for";
            v95 = 3;
            sub_22F0D4E74(*((_QWORD *)v19 + 3));
            v93 = v39;
            v92 = 1;
            if (*v17)
            {
              memset(v91, 0, 17);
              v84 = v39;
              v85 = 1;
              __p = 0;
              v88 = 0;
              v89 = 0;
              goto LABEL_64;
            }
LABEL_52:
            v69 = v39;
LABEL_53:
            v40 = strlen(v22);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v43 = v40 | 7;
              v71 = v43 + 1;
              v42 = operator new(v43 + 1);
              *(_QWORD *)&v98 = v41;
              *((_QWORD *)&v98 + 1) = v71 | 0x8000000000000000;
              v97 = v42;
            }
            else
            {
              HIBYTE(v98) = v40;
              v42 = &v97;
              if (!v41)
                goto LABEL_61;
            }
            v72 = v42;
            memcpy(v42, v22, v41);
            v42 = v72;
LABEL_61:
            *((_BYTE *)v42 + v41) = 0;
            v44 = v97;
            *(_QWORD *)v100 = v98;
            *(_QWORD *)&v100[7] = *(_QWORD *)((char *)&v98 + 7);
            v45 = HIBYTE(v98);
            v84 = v69;
            v85 = 1;
            v86 = (__int16)v97;
            v87 = BYTE2(v97);
            v88 = 0;
            v89 = 0;
            if (SHIBYTE(v91[1]) < 0)
              operator delete(__p);
            __p = v44;
            v91[0] = *(_QWORD *)v100;
            *(_QWORD *)((char *)v91 + 7) = *(_QWORD *)&v100[7];
            *(_WORD *)((char *)&v91[1] + 7) = v45;
            goto LABEL_64;
          }
          if (v23 != 16)
            goto LABEL_67;
          v75 = v18;
          v96 = 0;
          v94 = "if";
          v95 = 2;
          v32 = v19 + 16;
          sub_22F0D4E74(*(_QWORD *)&v19[8 * ((*(unsigned __int16 *)v19 >> 13) & 1)
                                      + 16
                                      + 8 * ((*(unsigned __int16 *)v19 >> 12) & 1)]);
          v93 = v33;
          v92 = 0;
          v34 = *(unsigned __int16 *)v19;
          v35 = ((v34 >> 13) & 1) + ((v34 >> 12) & 1);
          if ((v34 & 0x800) != 0)
            v31 = *(_QWORD *)&v32[8 * (v35 + 2)];
          else
            v31 = 0;
          v30 = *(_QWORD *)&v32[8 * (v35 + 1)];
LABEL_49:
          sub_22E895054(a1, (uint64_t)v19, v30, v31, *v17 != 0, (uint64_t)&v84, (uint64_t)&v76);
          goto LABEL_64;
        }
        if (v23 != 5 || *v17 == 1)
          goto LABEL_67;
        v75 = v18;
        v96 = 1;
        v94 = "for";
        v95 = 3;
        v28 = sub_22F3F2E44((uint64_t)v19);
      }
      else
      {
        if (*v19 > 0x6Fu)
        {
          if (v23 == 112)
          {
            if (((*(_DWORD *)v19 >> 18) & 0x3Fu) - 19 > 1)
              goto LABEL_67;
            v75 = v18;
            v96 = 0;
            v94 = sub_22EFFBA38((*(_DWORD *)v19 >> 18) & 0x3F);
            v95 = v24;
            v70 = *((_QWORD *)v19 + 2);
            sub_22F0D4E74(v70);
            v93 = v25;
            v92 = 0;
            v26 = *(_DWORD *)v19 & 0xFC0000;
            if (v26 == 5242880)
            {
              if (!*v17)
              {
LABEL_24:
                sub_22F0D5A50(v70);
                v84 = v27 | ((unint64_t)*((unsigned int *)v19 + 1) << 32);
                v85 = 1;
                v88 = 0;
                v89 = 0;
                memset(v91, 0, 17);
                __p = 0;
LABEL_64:
                sub_22E8FCA40((_QWORD *)a1, v93, 0x1B53u, 0, (uint64_t)&v97);
                *(_QWORD *)v100 = *(_QWORD *)(a2 + 40);
                v46 = sub_22E894538((uint64_t)&v97, (uint64_t *)v100);
                v47 = sub_22E894E38(v46, &v99);
                v48 = sub_22E89519C(v47, &v96);
                v49 = sub_22F2F2210(v48, (uint64_t)&v94);
                v50 = sub_22E89519C(v49, v17);
                sub_22E8906A0(v50, (uint64_t *)&v93);
                sub_22E903BEC((unsigned int *)&v97);
                sub_22F0D5A50(v75);
                sub_22E8FCA40((_QWORD *)a1, v51, 0x1802u, 0, (uint64_t)&v97);
                v52 = sub_22E894E38((uint64_t)&v97, &v99);
                sub_22F0D4E74(v75);
                *(_QWORD *)v100 = v53;
                sub_22E8906A0(v52, (uint64_t *)v100);
                sub_22E903BEC((unsigned int *)&v97);
                if (v92 != -1)
                {
                  sub_22E8FCA40((_QWORD *)a1, v84, 0x17FFu, 0, (uint64_t)&v97);
                  v54 = sub_22E8900C4((uint64_t)&v97, &v92);
                  v55 = sub_22F2F2210(v54, (uint64_t)&v94);
                  v56 = sub_22E89519C(v55, v17);
                  v57 = sub_22E890748(v56, &v84);
                  sub_22E890748(v57, &v76);
                  sub_22E903BEC((unsigned int *)&v97);
                }
                v74 = 1;
                goto LABEL_67;
              }
            }
            else if (v26 == 4980736 && *v17)
            {
              goto LABEL_24;
            }
            sub_22F0D4E74((uint64_t)v19);
            goto LABEL_52;
          }
          if (v23 != 236)
            goto LABEL_67;
          v75 = v18;
          v96 = 1;
          v94 = "while";
          v95 = 5;
          v36 = *(_QWORD *)&v19[8 * (((unint64_t)*(unsigned __int16 *)v19 >> 8) & 1) + 16];
LABEL_44:
          sub_22F0D4E74(v36);
          v69 = v38;
          v93 = v38;
          v92 = 1;
          goto LABEL_53;
        }
        if (v23 != 98)
        {
          if (v23 == 99)
          {
            v75 = v18;
            v96 = 3;
            v94 = "default";
            v95 = 7;
            v93 = *((unsigned int *)v19 + 1) | ((unint64_t)*((unsigned int *)v19 + 1) << 32);
            goto LABEL_64;
          }
          if (v23 != 103)
            goto LABEL_67;
          v75 = v18;
          v96 = 0;
          v94 = "?:";
          v95 = 2;
          sub_22F0D4E74(*((_QWORD *)v19 + 3));
          v93 = v29;
          v92 = 0;
          v30 = *((_QWORD *)v19 + 4);
          v31 = *((_QWORD *)v19 + 5);
          goto LABEL_49;
        }
        v75 = v18;
        v96 = 3;
        v94 = "case";
        v95 = 4;
        v28 = *((_QWORD *)v19 + 3);
      }
      sub_22F0D4E74(v28);
      v93 = v37;
      goto LABEL_64;
    }
LABEL_67:
    if (SHIBYTE(v82) < 0)
      operator delete(v80);
    if (SHIBYTE(v91[1]) < 0)
      operator delete(__p);
    v17 += 4;
    v16 -= 16;
  }
  while (v16);
  v5 = (_QWORD *)a2;
  if ((v74 & 1) == 0)
  {
LABEL_83:
    sub_22F0D5A50(*(_QWORD *)a3);
    v8 = v68;
    v9 = (_QWORD *)a1;
    v10 = 6721;
LABEL_3:
    sub_22E8FCA40(v9, v8, v10, 0, (uint64_t)&v97);
    v84 = v5[5];
    v11 = sub_22E894538((uint64_t)&v97, (uint64_t *)&v84);
    v12 = sub_22E894E38(v11, &v99);
    sub_22F0D4E74(*(_QWORD *)a3);
    v76 = v13;
    v14 = (uint64_t *)&v76;
LABEL_4:
    sub_22E8906A0(v12, v14);
    sub_22E903BEC((unsigned int *)&v97);
  }
}

uint64_t sub_22E894E38(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E89523C((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E89523C((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

void sub_22E894ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22E894394(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22E894FB4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E89529C((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E89529C((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

void sub_22E895054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void **v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  if (!a5)
  {
    if (a4)
    {
      sub_22F0D5A50(a2);
      v21 = v20;
      sub_22F0D5A50(a4);
      *(_QWORD *)a6 = v21 | (unint64_t)(v22 << 32);
      *(_BYTE *)(a6 + 8) = 0;
    }
    else
    {
      sub_22F0D4E74(a2);
      *(_QWORD *)a6 = v23;
      *(_BYTE *)(a6 + 8) = 1;
    }
    v19 = a6 + 24;
    *(_QWORD *)(a6 + 12) = 0;
    *(_BYTE *)(a6 + 20) = 0;
    if ((*(char *)(a6 + 47) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  sub_22F0D5A50(a2);
  v13 = v12;
  sub_22F0D5A50(a3);
  *(_QWORD *)a6 = v13 | (unint64_t)(v14 << 32);
  *(_BYTE *)(a6 + 8) = 0;
  v15 = (void **)(a6 + 24);
  *(_QWORD *)(a6 + 12) = 0;
  *(_BYTE *)(a6 + 20) = 0;
  if (*(char *)(a6 + 47) < 0)
    operator delete(*v15);
  *v15 = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_BYTE *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  if (a4)
  {
    sub_22F0D60E4(a3);
    v17 = sub_22F141A3C(v16, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    sub_22F0D60E4(a4);
    *(_QWORD *)a7 = v17 | (unint64_t)(v18 << 32);
    *(_BYTE *)(a7 + 8) = 1;
    v19 = a7 + 24;
    *(_QWORD *)(a7 + 12) = 0;
    *(_BYTE *)(a7 + 20) = 0;
    if ((*(char *)(a7 + 47) & 0x80000000) == 0)
    {
LABEL_12:
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      *(_BYTE *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 16) = 0;
      return;
    }
LABEL_11:
    operator delete(*(void **)v19);
    goto LABEL_12;
  }
}

uint64_t sub_22E89519C(uint64_t a1, unsigned int *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E8952FC((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E8952FC((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

unsigned __int8 **sub_22E89523C(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 2;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

unsigned __int8 **sub_22E89529C(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 13;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

unsigned __int8 **sub_22E8952FC(unsigned __int8 **a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 3;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

void sub_22E89535C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int64_t v140;
  int64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  _BOOL4 v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  _BOOL4 v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  _BOOL4 v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v243;
  _QWORD *i;
  uint64_t v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  _QWORD *v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v273;
  unint64_t v276;
  _BYTE v278[11];
  _BYTE v279[11];
  _BYTE v280[11];
  void *v281;
  uint64_t v282;
  _BYTE v283[32];
  _BYTE v284[11];
  void *v285;
  uint64_t v286;
  _QWORD v287[6];

  v287[4] = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v273 = (uint64_t *)(a2 - 64);
  v4 = a1;
  while (2)
  {
    v5 = a2 - v4;
    v6 = (uint64_t)(a2 - v4) >> 6;
    a1 = v4;
    switch(v6)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_BYTE *)(a2 - 54))
        {
          v114 = 4;
          v115 = v4;
        }
        else
        {
          v115 = v4;
          if (*(_BYTE *)(a2 - 56))
          {
            v114 = 3;
          }
          else if (*(_BYTE *)(a2 - 55))
          {
            v114 = 2;
          }
          else
          {
            v114 = *(_DWORD *)(a2 - 40) != 0;
          }
        }
        if (*(_BYTE *)(v115 + 10))
        {
          v263 = 4;
        }
        else if (*(_BYTE *)(v115 + 8))
        {
          v263 = 3;
        }
        else if (*(_BYTE *)(v115 + 9))
        {
          v263 = 2;
        }
        else
        {
          v263 = *(_DWORD *)(v115 + 24) != 0;
        }
        if (v114 == v263)
        {
          sub_22F0D5A50(*v273);
          v265 = v264;
          sub_22F0D5A50(*(_QWORD *)v115);
          if (v265 >= v266)
            return;
        }
        else
        {
          if (*(_BYTE *)(a2 - 54))
          {
            v267 = 4;
          }
          else if (*(_BYTE *)(a2 - 56))
          {
            v267 = 3;
          }
          else if (*(_BYTE *)(a2 - 55))
          {
            v267 = 2;
          }
          else
          {
            v267 = *(_DWORD *)(a2 - 40) != 0;
          }
          if (*(_BYTE *)(v115 + 10))
          {
            v268 = 4;
          }
          else if (*(_BYTE *)(v115 + 8))
          {
            v268 = 3;
          }
          else if (*(_BYTE *)(v115 + 9))
          {
            v268 = 2;
          }
          else
          {
            v268 = *(_DWORD *)(v115 + 24) != 0;
          }
          if (v267 <= v268)
            return;
        }
        v269 = *(_QWORD *)v4;
        *(_DWORD *)&v284[7] = *(_DWORD *)(v4 + 7);
        *(_QWORD *)v284 = v269;
        v285 = v287;
        v286 = 0x200000000;
        if (*(_DWORD *)(v4 + 24))
          sub_22E893E14(&v285, v4 + 16);
        v270 = *v273;
        *(_DWORD *)(v4 + 7) = *(_DWORD *)(a2 - 57);
        *(_QWORD *)v4 = v270;
        sub_22E893E14((_QWORD *)(v4 + 16), a2 - 48);
        v271 = *(_QWORD *)v284;
        *(_DWORD *)(a2 - 57) = *(_DWORD *)&v284[7];
        *v273 = v271;
        sub_22E893E14((_QWORD *)(a2 - 48), (uint64_t)&v285);
        if (v285 != v287)
          free(v285);
        return;
      case 3:
        sub_22E897E24(v4, v4 + 64, (uint64_t)v273);
        return;
      case 4:
        sub_22E898D14(v4, v4 + 64, v4 + 128, (uint64_t)v273);
        return;
      case 5:
        sub_22E897718(v4, v4 + 64, v4 + 128, v4 + 192, (uint64_t)v273);
        return;
      default:
        if (v5 <= 1535)
        {
          if ((a4 & 1) != 0)
          {
            if (v4 == a2)
              return;
            v116 = (uint64_t *)(v4 + 64);
            if (v4 + 64 == a2)
              return;
            v117 = 0;
            v118 = v4;
            while (1)
            {
              v119 = v118;
              v118 = (unint64_t)v116;
              if (*(_BYTE *)(v119 + 74))
              {
                v120 = 4;
              }
              else if (*(_BYTE *)(v119 + 72))
              {
                v120 = 3;
              }
              else
              {
                v120 = *(_BYTE *)(v119 + 73) ? 2 : *(_DWORD *)(v119 + 88) != 0;
              }
              if (*(_BYTE *)(v119 + 10))
              {
                v121 = 4;
              }
              else if (*(_BYTE *)(v119 + 8))
              {
                v121 = 3;
              }
              else
              {
                v121 = *(_BYTE *)(v119 + 9) ? 2 : *(_DWORD *)(v119 + 24) != 0;
              }
              if (v120 != v121)
                break;
              sub_22F0D5A50(*v116);
              v123 = v122;
              sub_22F0D5A50(*(_QWORD *)v119);
              if (v123 >= v124)
                goto LABEL_407;
LABEL_364:
              v127 = *(_QWORD *)v118;
              *(_DWORD *)&v284[7] = *(_DWORD *)(v118 + 7);
              *(_QWORD *)v284 = v127;
              v285 = v287;
              v286 = 0x200000000;
              if (*(_DWORD *)(v119 + 88))
                sub_22E893E14(&v285, v119 + 80);
              *(_QWORD *)v118 = *(_QWORD *)v119;
              *(_DWORD *)(v118 + 7) = *(_DWORD *)(v119 + 7);
              v128 = (_QWORD *)(v119 + 16);
              sub_22E893E14((_QWORD *)(v118 + 16), v119 + 16);
              if (v119 == a1)
              {
                v119 = a1;
                goto LABEL_405;
              }
              v129 = v117;
              do
              {
                if (v284[10])
                {
                  v130 = 4;
                }
                else if (v284[8])
                {
                  v130 = 3;
                }
                else if (v284[9])
                {
                  v130 = 2;
                }
                else
                {
                  v130 = v286 != 0;
                }
                v131 = a1 + v129;
                if (*(_BYTE *)(a1 + v129 - 54))
                {
                  v132 = 4;
                }
                else if (*(_BYTE *)(a1 + v129 - 56))
                {
                  v132 = 3;
                }
                else if (*(_BYTE *)(a1 + v129 - 55))
                {
                  v132 = 2;
                }
                else
                {
                  v132 = *(_DWORD *)(a1 + v129 - 40) != 0;
                }
                v133 = (uint64_t *)(v131 - 64);
                if (v130 == v132)
                {
                  sub_22F0D5A50(*(uint64_t *)v284);
                  v135 = v134;
                  sub_22F0D5A50(*v133);
                  if (v135 >= v136)
                    goto LABEL_405;
                  goto LABEL_401;
                }
                if (v284[10])
                {
                  v137 = 4;
                  if (*(_BYTE *)(a1 + v129 - 54))
                    goto LABEL_393;
                }
                else if (v284[8])
                {
                  v137 = 3;
                  if (*(_BYTE *)(a1 + v129 - 54))
                    goto LABEL_393;
                }
                else if (v284[9])
                {
                  v137 = 2;
                  if (*(_BYTE *)(a1 + v129 - 54))
                    goto LABEL_393;
                }
                else
                {
                  v137 = v286 != 0;
                  if (*(_BYTE *)(a1 + v129 - 54))
                  {
LABEL_393:
                    v138 = 4;
                    goto LABEL_400;
                  }
                }
                if (*(_BYTE *)(a1 + v129 - 56))
                {
                  v138 = 3;
                }
                else if (*(_BYTE *)(a1 + v129 - 55))
                {
                  v138 = 2;
                }
                else
                {
                  v138 = *(_DWORD *)(a1 + v129 - 40) != 0;
                }
LABEL_400:
                if (v137 <= v138)
                {
                  v119 = a1 + v129;
                  v128 = (_QWORD *)(a1 + v129 + 16);
                  goto LABEL_405;
                }
LABEL_401:
                *(_QWORD *)v131 = *v133;
                *(_DWORD *)(v131 + 7) = *(_DWORD *)(v131 - 57);
                v128 = (_QWORD *)(v119 - 48);
                sub_22E893E14((_QWORD *)(a1 + v129 + 16), a1 + v129 - 48);
                v119 -= 64;
                v129 -= 64;
              }
              while (v129);
              v119 = a1;
              v128 = (_QWORD *)(a1 + 16);
LABEL_405:
              v139 = *(_QWORD *)v284;
              *(_DWORD *)(v119 + 7) = *(_DWORD *)&v284[7];
              *(_QWORD *)v119 = v139;
              sub_22E893E14(v128, (uint64_t)&v285);
              if (v285 != v287)
                free(v285);
LABEL_407:
              v116 = (uint64_t *)(v118 + 64);
              v117 += 64;
              if (v118 + 64 == a2)
                return;
            }
            if (*(_BYTE *)(v119 + 74))
            {
              v125 = 4;
              if (!*(_BYTE *)(v119 + 10))
                goto LABEL_358;
            }
            else if (*(_BYTE *)(v119 + 72))
            {
              v125 = 3;
              if (!*(_BYTE *)(v119 + 10))
              {
LABEL_358:
                if (*(_BYTE *)(v119 + 8))
                {
                  v126 = 3;
                }
                else if (*(_BYTE *)(v119 + 9))
                {
                  v126 = 2;
                }
                else
                {
                  v126 = *(_DWORD *)(v119 + 24) != 0;
                }
LABEL_363:
                if (v125 <= v126)
                  goto LABEL_407;
                goto LABEL_364;
              }
            }
            else if (*(_BYTE *)(v119 + 73))
            {
              v125 = 2;
              if (!*(_BYTE *)(v119 + 10))
                goto LABEL_358;
            }
            else
            {
              v125 = *(_DWORD *)(v119 + 88) != 0;
              if (!*(_BYTE *)(v119 + 10))
                goto LABEL_358;
            }
            v126 = 4;
            goto LABEL_363;
          }
          if (v4 == a2)
            return;
          v243 = (uint64_t *)(v4 + 64);
          if (v4 + 64 == a2)
            return;
          for (i = (_QWORD *)(v4 + 80); ; i += 8)
          {
            v245 = a1;
            a1 = (uint64_t)v243;
            if (*(_BYTE *)(v245 + 74))
            {
              v246 = 4;
            }
            else if (*(_BYTE *)(v245 + 72))
            {
              v246 = 3;
            }
            else if (*(_BYTE *)(v245 + 73))
            {
              v246 = 2;
            }
            else
            {
              v246 = *(_DWORD *)(v245 + 88) != 0;
            }
            if (*(_BYTE *)(v245 + 10))
            {
              v247 = 4;
            }
            else if (*(_BYTE *)(v245 + 8))
            {
              v247 = 3;
            }
            else if (*(_BYTE *)(v245 + 9))
            {
              v247 = 2;
            }
            else
            {
              v247 = *(_DWORD *)(v245 + 24) != 0;
            }
            if (v246 == v247)
            {
              sub_22F0D5A50(*v243);
              v249 = v248;
              sub_22F0D5A50(*(_QWORD *)v245);
              if (v249 < v250)
                goto LABEL_713;
              goto LABEL_752;
            }
            if (*(_BYTE *)(v245 + 74))
            {
              v251 = 4;
              if (*(_BYTE *)(v245 + 10))
                goto LABEL_705;
            }
            else if (*(_BYTE *)(v245 + 72))
            {
              v251 = 3;
              if (*(_BYTE *)(v245 + 10))
                goto LABEL_705;
            }
            else if (*(_BYTE *)(v245 + 73))
            {
              v251 = 2;
              if (*(_BYTE *)(v245 + 10))
                goto LABEL_705;
            }
            else
            {
              v251 = *(_DWORD *)(v245 + 88) != 0;
              if (*(_BYTE *)(v245 + 10))
              {
LABEL_705:
                v252 = 4;
                goto LABEL_712;
              }
            }
            if (*(_BYTE *)(v245 + 8))
            {
              v252 = 3;
            }
            else if (*(_BYTE *)(v245 + 9))
            {
              v252 = 2;
            }
            else
            {
              v252 = *(_DWORD *)(v245 + 24) != 0;
            }
LABEL_712:
            if (v251 > v252)
            {
LABEL_713:
              v253 = *(_QWORD *)a1;
              *(_DWORD *)&v284[7] = *(_DWORD *)(a1 + 7);
              *(_QWORD *)v284 = v253;
              v285 = v287;
              v286 = 0x200000000;
              if (*(_DWORD *)(v245 + 88))
                sub_22E893E14(&v285, v245 + 80);
              v254 = i;
              while (2)
              {
                *(v254 - 2) = *(v254 - 10);
                *(_DWORD *)((char *)v254 - 9) = *(_DWORD *)((char *)v254 - 73);
                sub_22E893E14(v254, (uint64_t)(v254 - 8));
                if (v284[10])
                {
                  v255 = 4;
                }
                else if (v284[8])
                {
                  v255 = 3;
                }
                else if (v284[9])
                {
                  v255 = 2;
                }
                else
                {
                  v255 = v286 != 0;
                }
                if (*((_BYTE *)v254 - 134))
                {
                  v256 = 4;
                }
                else if (*((_BYTE *)v254 - 136))
                {
                  v256 = 3;
                }
                else if (*((_BYTE *)v254 - 135))
                {
                  v256 = 2;
                }
                else
                {
                  v256 = *((_DWORD *)v254 - 30) != 0;
                }
                if (v255 == v256)
                {
                  sub_22F0D5A50(*(uint64_t *)v284);
                  v258 = v257;
                  sub_22F0D5A50(*(v254 - 18));
                  if (v258 >= v259)
                    goto LABEL_750;
LABEL_749:
                  v254 -= 8;
                  continue;
                }
                break;
              }
              if (v284[10])
              {
                v260 = 4;
                if (!*((_BYTE *)v254 - 134))
                  goto LABEL_743;
LABEL_741:
                v261 = 4;
              }
              else
              {
                if (v284[8])
                {
                  v260 = 3;
                  if (!*((_BYTE *)v254 - 134))
                    goto LABEL_743;
                  goto LABEL_741;
                }
                if (v284[9])
                {
                  v260 = 2;
                  if (*((_BYTE *)v254 - 134))
                    goto LABEL_741;
                }
                else
                {
                  v260 = v286 != 0;
                  if (*((_BYTE *)v254 - 134))
                    goto LABEL_741;
                }
LABEL_743:
                if (*((_BYTE *)v254 - 136))
                {
                  v261 = 3;
                }
                else if (*((_BYTE *)v254 - 135))
                {
                  v261 = 2;
                }
                else
                {
                  v261 = *((_DWORD *)v254 - 30) != 0;
                }
              }
              if (v260 <= v261)
              {
LABEL_750:
                v262 = *(_QWORD *)v284;
                *(_DWORD *)((char *)v254 - 73) = *(_DWORD *)&v284[7];
                *(v254 - 10) = v262;
                sub_22E893E14(v254 - 8, (uint64_t)&v285);
                if (v285 != v287)
                  free(v285);
                goto LABEL_752;
              }
              goto LABEL_749;
            }
LABEL_752:
            v243 = (uint64_t *)(a1 + 64);
            if (a1 + 64 == a2)
              return;
          }
        }
        if (!a3)
        {
          if (v4 == a2)
            return;
          v140 = (unint64_t)(v6 - 2) >> 1;
          v141 = v140;
          while (1)
          {
            v142 = v141;
            if (v140 < v141)
              goto LABEL_555;
            v143 = (2 * v141) | 1;
            v144 = a1 + (v143 << 6);
            if (2 * v141 + 2 < v6)
              break;
LABEL_447:
            if (*(_BYTE *)(v144 + 10))
            {
              v155 = 4;
            }
            else if (*(_BYTE *)(v144 + 8))
            {
              v155 = 3;
            }
            else if (*(_BYTE *)(v144 + 9))
            {
              v155 = 2;
            }
            else
            {
              v155 = *(_DWORD *)(v144 + 24) != 0;
            }
            v156 = a1 + (v142 << 6);
            v157 = *(unsigned __int8 *)(v156 + 10);
            if (*(_BYTE *)(v156 + 10))
            {
              v158 = 4;
            }
            else if (*(_BYTE *)(v156 + 8))
            {
              v158 = 3;
            }
            else
            {
              v159 = a1 + (v142 << 6);
              if (*(_BYTE *)(v159 + 9))
                v158 = 2;
              else
                v158 = *(_DWORD *)(v159 + 24) != 0;
            }
            v160 = a1 + (v142 << 6);
            if (v155 == v158)
            {
              sub_22F0D5A50(*(_QWORD *)v144);
              v162 = v161;
              sub_22F0D5A50(*(_QWORD *)v160);
              if (v162 >= v163)
                goto LABEL_480;
              goto LABEL_555;
            }
            if (*(_BYTE *)(v144 + 10))
            {
              v164 = 4;
              if (v157)
                goto LABEL_472;
            }
            else if (*(_BYTE *)(v144 + 8))
            {
              v164 = 3;
              if (v157)
                goto LABEL_472;
            }
            else if (*(_BYTE *)(v144 + 9))
            {
              v164 = 2;
              if (v157)
                goto LABEL_472;
            }
            else
            {
              v164 = *(_DWORD *)(v144 + 24) != 0;
              if (v157)
              {
LABEL_472:
                v165 = 4;
                goto LABEL_479;
              }
            }
            v166 = a1 + (v142 << 6);
            if (*(_BYTE *)(v166 + 8))
            {
              v165 = 3;
            }
            else if (*(_BYTE *)(v166 + 9))
            {
              v165 = 2;
            }
            else
            {
              v165 = *(_DWORD *)(a1 + (v142 << 6) + 24) != 0;
            }
LABEL_479:
            if (v164 <= v165)
            {
LABEL_480:
              v167 = *(_QWORD *)v160;
              *(_DWORD *)&v284[7] = *(_DWORD *)(v160 + 7);
              *(_QWORD *)v284 = v167;
              v285 = v287;
              v286 = 0x200000000;
              v168 = a1 + (v142 << 6);
              if (*(_DWORD *)(v168 + 24))
                sub_22E893E14(&v285, v168 + 16);
              v169 = *(_QWORD *)v144;
              *(_DWORD *)(v160 + 7) = *(_DWORD *)(v144 + 7);
              *(_QWORD *)v160 = v169;
              v170 = (_QWORD *)(v144 + 16);
              sub_22E893E14((_QWORD *)(v168 + 16), v144 + 16);
              if (v140 < v143)
              {
LABEL_483:
                v171 = v144;
LABEL_553:
                v192 = *(_QWORD *)v284;
                *(_DWORD *)(v171 + 7) = *(_DWORD *)&v284[7];
                *(_QWORD *)v171 = v192;
                sub_22E893E14(v170, (uint64_t)&v285);
                if (v285 != v287)
                  free(v285);
                goto LABEL_555;
              }
              while (2)
              {
                v172 = 2 * v143;
                v143 = (2 * v143) | 1;
                v171 = a1 + (v143 << 6);
                v173 = v172 + 2;
                if (v172 + 2 >= v6)
                  goto LABEL_519;
                if (*(_BYTE *)(v171 + 10))
                {
                  v174 = 4;
                }
                else
                {
                  v175 = a1 + (v143 << 6);
                  if (*(_BYTE *)(v175 + 8))
                  {
                    v174 = 3;
                  }
                  else if (*(_BYTE *)(v175 + 9))
                  {
                    v174 = 2;
                  }
                  else
                  {
                    v174 = *(_DWORD *)(a1 + (v143 << 6) + 24) != 0;
                  }
                }
                if (*(_BYTE *)(v171 + 74))
                {
                  v176 = 4;
                }
                else if (*(_BYTE *)(v171 + 72))
                {
                  v176 = 3;
                }
                else if (*(_BYTE *)(v171 + 73))
                {
                  v176 = 2;
                }
                else
                {
                  v176 = *(_DWORD *)(v171 + 88) != 0;
                }
                if (v174 == v176)
                {
                  sub_22F0D5A50(*(_QWORD *)v171);
                  v178 = v177;
                  sub_22F0D5A50(*(_QWORD *)(v171 + 64));
                  v180 = v178 < v179;
LABEL_517:
                  if (v180)
                  {
                    v171 += 64;
                    v143 = v173;
                  }
LABEL_519:
                  if (*(_BYTE *)(v171 + 10))
                  {
                    v184 = 4;
                  }
                  else if (*(_BYTE *)(v171 + 8))
                  {
                    v184 = 3;
                  }
                  else if (*(_BYTE *)(v171 + 9))
                  {
                    v184 = 2;
                  }
                  else
                  {
                    v184 = *(_DWORD *)(v171 + 24) != 0;
                  }
                  if (v284[10])
                  {
                    v185 = 4;
                  }
                  else if (v284[8])
                  {
                    v185 = 3;
                  }
                  else if (v284[9])
                  {
                    v185 = 2;
                  }
                  else
                  {
                    v185 = v286 != 0;
                  }
                  if (v184 == v185)
                  {
                    sub_22F0D5A50(*(_QWORD *)v171);
                    v187 = v186;
                    sub_22F0D5A50(*(uint64_t *)v284);
                    if (v187 < v188)
                      goto LABEL_483;
                    goto LABEL_552;
                  }
                  if (*(_BYTE *)(v171 + 10))
                  {
                    v189 = 4;
                    if (!v284[10])
                      goto LABEL_546;
LABEL_544:
                    v190 = 4;
                  }
                  else
                  {
                    if (*(_BYTE *)(v171 + 8))
                    {
                      v189 = 3;
                      if (!v284[10])
                        goto LABEL_546;
                      goto LABEL_544;
                    }
                    if (*(_BYTE *)(v171 + 9))
                    {
                      v189 = 2;
                      if (v284[10])
                        goto LABEL_544;
                    }
                    else
                    {
                      v189 = *(_DWORD *)(v171 + 24) != 0;
                      if (v284[10])
                        goto LABEL_544;
                    }
LABEL_546:
                    if (v284[8])
                    {
                      v190 = 3;
                    }
                    else if (v284[9])
                    {
                      v190 = 2;
                    }
                    else
                    {
                      v190 = v286 != 0;
                    }
                  }
                  if (v189 > v190)
                    goto LABEL_483;
LABEL_552:
                  v191 = *(_QWORD *)v171;
                  *(_DWORD *)(v144 + 7) = *(_DWORD *)(v171 + 7);
                  *(_QWORD *)v144 = v191;
                  v170 = (_QWORD *)(v171 + 16);
                  sub_22E893E14((_QWORD *)(v144 + 16), v171 + 16);
                  v144 = v171;
                  if (v140 < v143)
                    goto LABEL_553;
                  continue;
                }
                break;
              }
              if (*(_BYTE *)(v171 + 10))
              {
                v181 = 4;
                if (!*(_BYTE *)(v171 + 74))
                  goto LABEL_511;
LABEL_509:
                v183 = 4;
              }
              else
              {
                v182 = a1 + (v143 << 6);
                if (*(_BYTE *)(v182 + 8))
                {
                  v181 = 3;
                  if (!*(_BYTE *)(v171 + 74))
                    goto LABEL_511;
                  goto LABEL_509;
                }
                if (*(_BYTE *)(v182 + 9))
                {
                  v181 = 2;
                  if (*(_BYTE *)(v171 + 74))
                    goto LABEL_509;
                }
                else
                {
                  v181 = *(_DWORD *)(a1 + (v143 << 6) + 24) != 0;
                  if (*(_BYTE *)(v171 + 74))
                    goto LABEL_509;
                }
LABEL_511:
                if (*(_BYTE *)(v171 + 72))
                {
                  v183 = 3;
                }
                else if (*(_BYTE *)(v171 + 73))
                {
                  v183 = 2;
                }
                else
                {
                  v183 = *(_DWORD *)(v171 + 88) != 0;
                }
              }
              v180 = v181 > v183;
              goto LABEL_517;
            }
LABEL_555:
            v141 = v142 - 1;
            if (!v142)
            {
              while (1)
              {
                v193 = a1;
                *(_DWORD *)&v280[7] = *(_DWORD *)(a1 + 7);
                *(_QWORD *)v280 = *(_QWORD *)a1;
                v281 = v283;
                v282 = 0x200000000;
                if (*(_DWORD *)(a1 + 24))
                  sub_22E893E14(&v281, a1 + 16);
                v194 = 0;
                do
                {
                  v195 = v194 + 1;
                  v196 = v193 + ((v194 + 1) << 6);
                  v197 = (2 * v194) | 1;
                  v198 = 2 * v194 + 2;
                  if (v198 >= v6)
                    goto LABEL_594;
                  if (*(_BYTE *)(v196 + 10))
                  {
                    v199 = 4;
                  }
                  else
                  {
                    v200 = v193 + (v195 << 6);
                    if (*(_BYTE *)(v200 + 8))
                    {
                      v199 = 3;
                    }
                    else if (*(_BYTE *)(v200 + 9))
                    {
                      v199 = 2;
                    }
                    else
                    {
                      v199 = *(_DWORD *)(v193 + (v195 << 6) + 24) != 0;
                    }
                  }
                  if (*(_BYTE *)(v196 + 74))
                  {
                    v201 = 4;
                  }
                  else if (*(_BYTE *)(v196 + 72))
                  {
                    v201 = 3;
                  }
                  else if (*(_BYTE *)(v196 + 73))
                  {
                    v201 = 2;
                  }
                  else
                  {
                    v201 = *(_DWORD *)(v196 + 88) != 0;
                  }
                  if (v199 == v201)
                  {
                    sub_22F0D5A50(*(_QWORD *)v196);
                    v203 = v202;
                    sub_22F0D5A50(*(_QWORD *)(v196 + 64));
                    v205 = v203 < v204;
                    goto LABEL_592;
                  }
                  if (*(_BYTE *)(v196 + 10))
                  {
                    v206 = 4;
                    if (!*(_BYTE *)(v196 + 74))
                      goto LABEL_586;
                  }
                  else
                  {
                    v207 = v193 + (v195 << 6);
                    if (*(_BYTE *)(v207 + 8))
                    {
                      v206 = 3;
                      if (!*(_BYTE *)(v196 + 74))
                        goto LABEL_586;
                    }
                    else if (*(_BYTE *)(v207 + 9))
                    {
                      v206 = 2;
                      if (!*(_BYTE *)(v196 + 74))
                        goto LABEL_586;
                    }
                    else
                    {
                      v206 = *(_DWORD *)(v193 + (v195 << 6) + 24) != 0;
                      if (!*(_BYTE *)(v196 + 74))
                      {
LABEL_586:
                        if (*(_BYTE *)(v196 + 72))
                        {
                          v208 = 3;
                        }
                        else if (*(_BYTE *)(v196 + 73))
                        {
                          v208 = 2;
                        }
                        else
                        {
                          v208 = *(_DWORD *)(v196 + 88) != 0;
                        }
                        goto LABEL_591;
                      }
                    }
                  }
                  v208 = 4;
LABEL_591:
                  v205 = v206 > v208;
LABEL_592:
                  if (v205)
                  {
                    v196 += 64;
                    v197 = v198;
                  }
LABEL_594:
                  v209 = *(_QWORD *)v196;
                  *(_DWORD *)(v193 + 7) = *(_DWORD *)(v196 + 7);
                  *(_QWORD *)v193 = v209;
                  sub_22E893E14((_QWORD *)(v193 + 16), v196 + 16);
                  v193 = v196;
                  v194 = v197;
                }
                while (v197 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
                v210 = (uint64_t *)(a2 - 64);
                if (v196 == a2 - 64)
                {
                  *(_DWORD *)(v196 + 7) = *(_DWORD *)&v280[7];
                  *(_QWORD *)v196 = *(_QWORD *)v280;
                  sub_22E893E14((_QWORD *)(v196 + 16), (uint64_t)&v281);
                  goto LABEL_672;
                }
                v211 = *v210;
                *(_DWORD *)(v196 + 7) = *(_DWORD *)(a2 - 57);
                *(_QWORD *)v196 = v211;
                sub_22E893E14((_QWORD *)(v196 + 16), a2 - 48);
                *(_DWORD *)(a2 - 57) = *(_DWORD *)&v280[7];
                *v210 = *(_QWORD *)v280;
                sub_22E893E14((_QWORD *)(a2 - 48), (uint64_t)&v281);
                v212 = v196 - a1 + 64;
                if (v212 >= 65)
                {
                  v213 = ((unint64_t)v212 >> 6) - 2;
                  v214 = v213 >> 1;
                  v215 = a1 + (v213 >> 1 << 6);
                  if (*(_BYTE *)(v215 + 10))
                  {
                    v216 = 4;
                  }
                  else if (*(_BYTE *)(v215 + 8))
                  {
                    v216 = 3;
                  }
                  else
                  {
                    v217 = a1 + (v214 << 6);
                    if (*(_BYTE *)(v217 + 9))
                      v216 = 2;
                    else
                      v216 = *(_DWORD *)(v217 + 24) != 0;
                  }
                  if (*(_BYTE *)(v196 + 10))
                  {
                    v218 = 4;
                  }
                  else if (*(_BYTE *)(v196 + 8))
                  {
                    v218 = 3;
                  }
                  else if (*(_BYTE *)(v196 + 9))
                  {
                    v218 = 2;
                  }
                  else
                  {
                    v218 = *(_DWORD *)(v196 + 24) != 0;
                  }
                  if (v216 == v218)
                  {
                    sub_22F0D5A50(*(_QWORD *)v215);
                    v220 = v219;
                    sub_22F0D5A50(*(_QWORD *)v196);
                    if (v220 >= v221)
                      goto LABEL_672;
LABEL_631:
                    v225 = *(_QWORD *)v196;
                    *(_DWORD *)&v284[7] = *(_DWORD *)(v196 + 7);
                    *(_QWORD *)v284 = v225;
                    v285 = v287;
                    v286 = 0x200000000;
                    if (*(_DWORD *)(v196 + 24))
                      sub_22E893E14(&v285, v196 + 16);
                    v226 = *(_QWORD *)v215;
                    *(_DWORD *)(v196 + 7) = *(_DWORD *)(v215 + 7);
                    *(_QWORD *)v196 = v226;
                    v227 = (_QWORD *)(a1 + (v214 << 6) + 16);
                    sub_22E893E14((_QWORD *)(v196 + 16), (uint64_t)v227);
                    if (v213 < 2)
                    {
LABEL_634:
                      v228 = v215;
LABEL_670:
                      v241 = *(_QWORD *)v284;
                      *(_DWORD *)(v228 + 7) = *(_DWORD *)&v284[7];
                      *(_QWORD *)v228 = v241;
                      sub_22E893E14(v227, (uint64_t)&v285);
                      if (v285 != v287)
                        free(v285);
                      goto LABEL_672;
                    }
                    v229 = a1;
                    while (2)
                    {
                      v230 = v214 - 1;
                      v214 = (v214 - 1) >> 1;
                      v228 = v229 + (v214 << 6);
                      if (*(_BYTE *)(v228 + 10))
                      {
                        v231 = 4;
                      }
                      else if (*(_BYTE *)(v228 + 8))
                      {
                        v231 = 3;
                      }
                      else
                      {
                        v232 = a1 + (v214 << 6);
                        if (*(_BYTE *)(v232 + 9))
                          v231 = 2;
                        else
                          v231 = *(_DWORD *)(v232 + 24) != 0;
                      }
                      if (v284[10])
                      {
                        v233 = 4;
                      }
                      else if (v284[8])
                      {
                        v233 = 3;
                      }
                      else if (v284[9])
                      {
                        v233 = 2;
                      }
                      else
                      {
                        v233 = v286 != 0;
                      }
                      if (v231 == v233)
                      {
                        sub_22F0D5A50(*(_QWORD *)v228);
                        v235 = v234;
                        sub_22F0D5A50(*(uint64_t *)v284);
                        if (v235 >= v236)
                          goto LABEL_634;
                        goto LABEL_669;
                      }
                      if (*(_BYTE *)(v228 + 10))
                      {
                        v237 = 4;
                        if (!v284[10])
                          goto LABEL_663;
LABEL_661:
                        v239 = 4;
                      }
                      else
                      {
                        v238 = a1 + (v214 << 6);
                        if (*(_BYTE *)(v238 + 8))
                        {
                          v237 = 3;
                          if (!v284[10])
                            goto LABEL_663;
                          goto LABEL_661;
                        }
                        if (*(_BYTE *)(v238 + 9))
                        {
                          v237 = 2;
                          if (v284[10])
                            goto LABEL_661;
                        }
                        else
                        {
                          v237 = *(_DWORD *)(a1 + (v214 << 6) + 24) != 0;
                          if (v284[10])
                            goto LABEL_661;
                        }
LABEL_663:
                        if (v284[8])
                        {
                          v239 = 3;
                        }
                        else if (v284[9])
                        {
                          v239 = 2;
                        }
                        else
                        {
                          v239 = v286 != 0;
                        }
                      }
                      if (v237 <= v239)
                        goto LABEL_634;
LABEL_669:
                      v240 = *(_QWORD *)v228;
                      *(_DWORD *)(v215 + 7) = *(_DWORD *)(v228 + 7);
                      *(_QWORD *)v215 = v240;
                      v229 = a1;
                      v227 = (_QWORD *)(a1 + (v214 << 6) + 16);
                      sub_22E893E14((_QWORD *)(v215 + 16), (uint64_t)v227);
                      v215 = v228;
                      if (v230 <= 1)
                        goto LABEL_670;
                      continue;
                    }
                  }
                  if (*(_BYTE *)(v215 + 10))
                  {
                    v222 = 4;
                    if (!*(_BYTE *)(v196 + 10))
                      goto LABEL_625;
LABEL_623:
                    v224 = 4;
                  }
                  else
                  {
                    v223 = a1 + (v214 << 6);
                    if (*(_BYTE *)(v223 + 8))
                    {
                      v222 = 3;
                      if (!*(_BYTE *)(v196 + 10))
                        goto LABEL_625;
                      goto LABEL_623;
                    }
                    if (*(_BYTE *)(v223 + 9))
                    {
                      v222 = 2;
                      if (*(_BYTE *)(v196 + 10))
                        goto LABEL_623;
                    }
                    else
                    {
                      v222 = *(_DWORD *)(a1 + (v214 << 6) + 24) != 0;
                      if (*(_BYTE *)(v196 + 10))
                        goto LABEL_623;
                    }
LABEL_625:
                    if (*(_BYTE *)(v196 + 8))
                    {
                      v224 = 3;
                    }
                    else if (*(_BYTE *)(v196 + 9))
                    {
                      v224 = 2;
                    }
                    else
                    {
                      v224 = *(_DWORD *)(v196 + 24) != 0;
                    }
                  }
                  if (v222 > v224)
                    goto LABEL_631;
                }
LABEL_672:
                if (v281 != v283)
                  free(v281);
                a2 -= 64;
                if (v6-- <= 2)
                  return;
              }
            }
          }
          if (*(_BYTE *)(v144 + 10))
          {
            v145 = 4;
          }
          else
          {
            v146 = a1 + (v143 << 6);
            if (*(_BYTE *)(v146 + 8))
            {
              v145 = 3;
            }
            else if (*(_BYTE *)(v146 + 9))
            {
              v145 = 2;
            }
            else
            {
              v145 = *(_DWORD *)(a1 + (v143 << 6) + 24) != 0;
            }
          }
          if (*(_BYTE *)(v144 + 74))
          {
            v147 = 4;
          }
          else if (*(_BYTE *)(v144 + 72))
          {
            v147 = 3;
          }
          else if (*(_BYTE *)(v144 + 73))
          {
            v147 = 2;
          }
          else
          {
            v147 = *(_DWORD *)(v144 + 88) != 0;
          }
          if (v145 == v147)
          {
            sub_22F0D5A50(*(_QWORD *)v144);
            v149 = v148;
            sub_22F0D5A50(*(_QWORD *)(v144 + 64));
            v151 = v149 < v150;
            goto LABEL_445;
          }
          if (*(_BYTE *)(v144 + 10))
          {
            v152 = 4;
            if (!*(_BYTE *)(v144 + 74))
              goto LABEL_439;
          }
          else
          {
            v153 = a1 + (v143 << 6);
            if (*(_BYTE *)(v153 + 8))
            {
              v152 = 3;
              if (!*(_BYTE *)(v144 + 74))
              {
LABEL_439:
                if (*(_BYTE *)(v144 + 72))
                {
                  v154 = 3;
                }
                else if (*(_BYTE *)(v144 + 73))
                {
                  v154 = 2;
                }
                else
                {
                  v154 = *(_DWORD *)(v144 + 88) != 0;
                }
                goto LABEL_444;
              }
            }
            else if (*(_BYTE *)(v153 + 9))
            {
              v152 = 2;
              if (!*(_BYTE *)(v144 + 74))
                goto LABEL_439;
            }
            else
            {
              v152 = *(_DWORD *)(a1 + (v143 << 6) + 24) != 0;
              if (!*(_BYTE *)(v144 + 74))
                goto LABEL_439;
            }
          }
          v154 = 4;
LABEL_444:
          v151 = v152 > v154;
LABEL_445:
          if (v151)
          {
            v144 += 64;
            v143 = 2 * v142 + 2;
          }
          goto LABEL_447;
        }
        v7 = (unint64_t)v6 >> 1;
        v8 = v4 + ((unint64_t)v6 >> 1 << 6);
        if ((unint64_t)v5 <= 0x2000)
        {
          sub_22E897E24(v8, v4, (uint64_t)v273);
        }
        else
        {
          sub_22E897E24(v4, v8, (uint64_t)v273);
          sub_22E897E24(v4 + 64, v8 - 64, a2 - 128);
          sub_22E897E24(v4 + 128, v4 + 64 + (v7 << 6), a2 - 192);
          sub_22E897E24(v8 - 64, v8, v4 + 64 + (v7 << 6));
          v9 = *(_QWORD *)v4;
          *(_DWORD *)&v284[7] = *(_DWORD *)(v4 + 7);
          *(_QWORD *)v284 = v9;
          v285 = v287;
          v286 = 0x200000000;
          if (*(_DWORD *)(v4 + 24))
            sub_22E893E14(&v285, v4 + 16);
          v10 = *(_QWORD *)v8;
          *(_DWORD *)(v4 + 7) = *(_DWORD *)(v8 + 7);
          *(_QWORD *)v4 = v10;
          sub_22E893E14((_QWORD *)(v4 + 16), v4 + 16 + (v7 << 6));
          v11 = *(_QWORD *)v284;
          *(_DWORD *)(v8 + 7) = *(_DWORD *)&v284[7];
          *(_QWORD *)v8 = v11;
          sub_22E893E14((_QWORD *)(v4 + 16 + (v7 << 6)), (uint64_t)&v285);
          if (v285 != v287)
            free(v285);
        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_49;
        if (*(_BYTE *)(v4 - 54))
        {
          v12 = 4;
        }
        else if (*(_BYTE *)(v4 - 56))
        {
          v12 = 3;
        }
        else if (*(_BYTE *)(v4 - 55))
        {
          v12 = 2;
        }
        else
        {
          v12 = *(_DWORD *)(v4 - 40) != 0;
        }
        if (*(_BYTE *)(v4 + 10))
        {
          v13 = 4;
        }
        else if (*(_BYTE *)(v4 + 8))
        {
          v13 = 3;
        }
        else if (*(_BYTE *)(v4 + 9))
        {
          v13 = 2;
        }
        else
        {
          v13 = *(_DWORD *)(v4 + 24) != 0;
        }
        if (v12 == v13)
        {
          sub_22F0D5A50(*(_QWORD *)(v4 - 64));
          v15 = v14;
          sub_22F0D5A50(*(_QWORD *)v4);
          if (v15 >= v16)
            goto LABEL_29;
          goto LABEL_49;
        }
        if (*(_BYTE *)(v4 - 54))
        {
          v18 = 4;
          if (*(_BYTE *)(v4 + 10))
            goto LABEL_41;
        }
        else if (*(_BYTE *)(v4 - 56))
        {
          v18 = 3;
          if (*(_BYTE *)(v4 + 10))
            goto LABEL_41;
        }
        else if (*(_BYTE *)(v4 - 55))
        {
          v18 = 2;
          if (*(_BYTE *)(v4 + 10))
            goto LABEL_41;
        }
        else
        {
          v18 = *(_DWORD *)(v4 - 40) != 0;
          if (*(_BYTE *)(v4 + 10))
          {
LABEL_41:
            v19 = 4;
            goto LABEL_48;
          }
        }
        if (*(_BYTE *)(v4 + 8))
        {
          v19 = 3;
        }
        else if (*(_BYTE *)(v4 + 9))
        {
          v19 = 2;
        }
        else
        {
          v19 = *(_DWORD *)(v4 + 24) != 0;
        }
LABEL_48:
        if (v18 <= v19)
        {
LABEL_29:
          *(_DWORD *)&v278[7] = *(_DWORD *)(v4 + 7);
          *(_QWORD *)v278 = *(_QWORD *)v4;
          v281 = v283;
          v282 = 0x200000000;
          if (*(_DWORD *)(v4 + 24))
            sub_22E893E14(&v281, v4 + 16);
          if (v278[10])
          {
            v17 = 4;
          }
          else if (v278[8])
          {
            v17 = 3;
          }
          else if (v278[9])
          {
            v17 = 2;
          }
          else
          {
            v17 = v282 != 0;
          }
          v64 = *(unsigned __int8 *)(a2 - 54);
          if (*(_BYTE *)(a2 - 54))
          {
            v65 = 4;
          }
          else if (*(_BYTE *)(a2 - 56))
          {
            v65 = 3;
          }
          else if (*(_BYTE *)(a2 - 55))
          {
            v65 = 2;
          }
          else
          {
            v65 = *(_DWORD *)(a2 - 40) != 0;
          }
          if (v17 == v65)
          {
            v66 = *(_QWORD *)v278;
            sub_22F0D5A50(*(uint64_t *)v278);
            v68 = v67;
            sub_22F0D5A50(*v273);
            if (v68 >= v69)
              goto LABEL_224;
          }
          else
          {
            if (v278[10])
            {
              v70 = 4;
            }
            else if (v278[8])
            {
              v70 = 3;
            }
            else if (v278[9])
            {
              v70 = 2;
            }
            else
            {
              v70 = v282 != 0;
            }
            if (*(_BYTE *)(a2 - 54))
            {
              v71 = 4;
            }
            else if (*(_BYTE *)(a2 - 56))
            {
              v71 = 3;
            }
            else if (*(_BYTE *)(a2 - 55))
            {
              v71 = 2;
            }
            else
            {
              v71 = *(_DWORD *)(a2 - 40) != 0;
            }
            if (v70 <= v71)
            {
LABEL_224:
              v4 += 64;
              v79 = a2;
              if (a1 + 64 < a2)
              {
                if (v278[9])
                  v80 = 2;
                else
                  v80 = v282 != 0;
                if (v278[8])
                  v81 = 3;
                else
                  v81 = v80;
                if (v278[10])
                  v82 = 4;
                else
                  v82 = v81;
                while (*(_BYTE *)(v4 + 10))
                {
                  if (v278[10])
                    goto LABEL_244;
LABEL_247:
                  v4 += 64;
                  v79 = a2;
                  if (v4 >= a2)
                    goto LABEL_250;
                }
                if (*(_BYTE *)(v4 + 8))
                {
                  if (v82 != 3)
                  {
                    v83 = 3;
                    goto LABEL_246;
                  }
                }
                else if (*(_BYTE *)(v4 + 9))
                {
                  if (v82 != 2)
                  {
                    v83 = 2;
LABEL_246:
                    if (v82 > v83)
                      goto LABEL_249;
                    goto LABEL_247;
                  }
                }
                else
                {
                  v83 = *(_DWORD *)(v4 + 24) != 0;
                  if (v82 != v83)
                    goto LABEL_246;
                }
LABEL_244:
                sub_22F0D5A50(*(uint64_t *)v278);
                v85 = v84;
                sub_22F0D5A50(*(_QWORD *)v4);
                if (v85 < v86)
                  goto LABEL_249;
                goto LABEL_247;
              }
LABEL_250:
              v87 = v79;
              if (v4 < v79)
              {
                if (v278[9])
                  v88 = 2;
                else
                  v88 = v282 != 0;
                if (v278[8])
                  v89 = 3;
                else
                  v89 = v88;
                if (v278[10])
                  v90 = 4;
                else
                  v90 = v89;
                v91 = a2 - 56;
                if (!v64)
                  goto LABEL_264;
                while (v278[10])
                {
LABEL_262:
                  sub_22F0D5A50(*(uint64_t *)v278);
                  v93 = v92;
                  sub_22F0D5A50(*(_QWORD *)(v91 - 8));
                  if (v93 >= v94)
                    break;
                  while (1)
                  {
                    v95 = *(unsigned __int8 *)(v91 - 62);
                    v91 -= 64;
                    if (v95)
                      break;
LABEL_264:
                    if (*(_BYTE *)v91)
                    {
                      if (v90 == 3)
                        goto LABEL_262;
                      v96 = 3;
                    }
                    else if (*(_BYTE *)(v91 + 1))
                    {
                      if (v90 == 2)
                        goto LABEL_262;
                      v96 = 2;
                    }
                    else
                    {
                      v96 = *(_DWORD *)(v91 + 16) != 0;
                      if (v90 == v96)
                        goto LABEL_262;
                    }
                    if (v90 <= v96)
                      goto LABEL_272;
                  }
                }
LABEL_272:
                v87 = v91 - 8;
              }
              if (v4 >= v87)
              {
                v111 = a1;
                goto LABEL_315;
              }
LABEL_274:
              v97 = *(_QWORD *)v4;
              *(_DWORD *)&v284[7] = *(_DWORD *)(v4 + 7);
              *(_QWORD *)v284 = v97;
              v285 = v287;
              v286 = 0x200000000;
              if (*(_DWORD *)(v4 + 24))
                sub_22E893E14(&v285, v4 + 16);
              v98 = *(_QWORD *)v87;
              *(_DWORD *)(v4 + 7) = *(_DWORD *)(v87 + 7);
              *(_QWORD *)v4 = v98;
              sub_22E893E14((_QWORD *)(v4 + 16), v87 + 16);
              v99 = *(_QWORD *)v284;
              *(_DWORD *)(v87 + 7) = *(_DWORD *)&v284[7];
              *(_QWORD *)v87 = v99;
              sub_22E893E14((_QWORD *)(v87 + 16), (uint64_t)&v285);
              if (v285 != v287)
                free(v285);
              if (v278[9])
                v100 = 2;
              else
                v100 = v282 != 0;
              if (v278[8])
                v101 = 3;
              else
                v101 = v100;
              if (v278[10])
                v102 = 4;
              else
                v102 = v101;
              do
              {
                while (1)
                {
                  v4 += 64;
                  if (!*(_BYTE *)(v4 + 10))
                    break;
                  if (v278[10])
                  {
LABEL_297:
                    sub_22F0D5A50(*(uint64_t *)v278);
                    v105 = v104;
                    sub_22F0D5A50(*(_QWORD *)v4);
                    if (v105 < v106)
                      goto LABEL_309;
                  }
                }
                if (*(_BYTE *)(v4 + 8))
                {
                  if (v102 == 3)
                    goto LABEL_297;
                  v103 = 3;
                }
                else if (*(_BYTE *)(v4 + 9))
                {
                  if (v102 == 2)
                    goto LABEL_297;
                  v103 = 2;
                }
                else
                {
                  v103 = *(_DWORD *)(v4 + 24) != 0;
                  if (v102 == v103)
                    goto LABEL_297;
                }
              }
              while (v102 <= v103);
              while (1)
              {
                while (1)
                {
LABEL_309:
                  v87 -= 64;
                  if (*(_BYTE *)(v87 + 10))
                  {
                    if (!v278[10])
                      goto LABEL_312;
                    goto LABEL_311;
                  }
                  if (*(_BYTE *)(v87 + 8))
                    break;
                  if (*(_BYTE *)(v87 + 9))
                  {
                    if (v102 != 2)
                    {
                      v107 = 2;
                      goto LABEL_308;
                    }
                  }
                  else
                  {
                    v107 = *(_DWORD *)(v87 + 24) != 0;
                    if (v102 != v107)
                      goto LABEL_308;
                  }
LABEL_311:
                  sub_22F0D5A50(*(uint64_t *)v278);
                  v109 = v108;
                  sub_22F0D5A50(*(_QWORD *)v87);
                  if (v109 >= v110)
                  {
LABEL_312:
                    v111 = a1;
                    if (v4 >= v87)
                    {
LABEL_315:
                      v112 = (uint64_t *)(v4 - 64);
                      if (v4 - 64 != v111)
                      {
                        v113 = *v112;
                        *(_DWORD *)(v111 + 7) = *(_DWORD *)(v4 - 57);
                        *(_QWORD *)v111 = v113;
                        sub_22E893E14((_QWORD *)(v111 + 16), v4 - 48);
                      }
                      *(_DWORD *)(v4 - 57) = *(_DWORD *)&v278[7];
                      *v112 = *(_QWORD *)v278;
                      sub_22E893E14((_QWORD *)(v4 - 48), (uint64_t)&v281);
                      if (v281 != v283)
                        free(v281);
                      goto LABEL_168;
                    }
                    goto LABEL_274;
                  }
                }
                if (v102 == 3)
                  goto LABEL_311;
                v107 = 3;
LABEL_308:
                if (v102 <= v107)
                  goto LABEL_312;
              }
            }
            v66 = *(_QWORD *)v278;
          }
          if (v278[9])
            v72 = 2;
          else
            v72 = v282 != 0;
          if (v278[8])
            v73 = 3;
          else
            v73 = v72;
          if (v278[10])
            v74 = 4;
          else
            v74 = v73;
          for (v4 += 64; !*(_BYTE *)(v4 + 10); v4 += 64)
          {
            if (*(_BYTE *)(v4 + 8))
            {
              if (v74 == 3)
                goto LABEL_220;
              v75 = 3;
            }
            else if (*(_BYTE *)(v4 + 9))
            {
              if (v74 == 2)
                goto LABEL_220;
              v75 = 2;
            }
            else
            {
              v75 = *(_DWORD *)(v4 + 24) != 0;
              if (v74 == v75)
                goto LABEL_220;
            }
            if (v74 > v75)
            {
LABEL_249:
              v79 = a2;
              goto LABEL_250;
            }
LABEL_223:
            ;
          }
          if (!v278[10])
            goto LABEL_223;
LABEL_220:
          sub_22F0D5A50(v66);
          v77 = v76;
          sub_22F0D5A50(*(_QWORD *)v4);
          if (v77 < v78)
            goto LABEL_249;
          goto LABEL_223;
        }
LABEL_49:
        *(_DWORD *)&v279[7] = *(_DWORD *)(v4 + 7);
        *(_QWORD *)v279 = *(_QWORD *)v4;
        v281 = v283;
        v282 = 0x200000000;
        v20 = *(_DWORD *)(v4 + 24);
        if (v20)
        {
          sub_22E893E14(&v281, v4 + 16);
          v20 = v282;
        }
        v21 = 0;
        v22 = v20 != 0;
        if (v279[9])
          v22 = 2;
        if (v279[8])
          v23 = 3;
        else
          v23 = v22;
        if (v279[10])
          v24 = 4;
        else
          v24 = v23;
        while (1)
        {
          v25 = v4 + v21;
          if (*(_BYTE *)(v4 + v21 + 74))
          {
            v26 = 4;
            v27 = v23;
            v28 = 4;
            if (!v279[10])
              goto LABEL_65;
            goto LABEL_61;
          }
          if (*(_BYTE *)(v25 + 72))
          {
            v26 = 3;
            v27 = v24;
            v28 = 3;
            if (v24 != 3)
              goto LABEL_65;
            goto LABEL_61;
          }
          if (!*(_BYTE *)(v4 + v21 + 73))
            break;
          v26 = 2;
          v27 = v24;
          v28 = 2;
          if (v24 != 2)
            goto LABEL_65;
LABEL_61:
          sub_22F0D5A50(*(_QWORD *)(v25 + 64));
          v30 = v29;
          sub_22F0D5A50(*(uint64_t *)v279);
          v27 = v28;
          if (v30 >= v31)
            goto LABEL_73;
LABEL_67:
          v21 += 64;
        }
        v26 = *(_DWORD *)(v4 + v21 + 88) != 0;
        v27 = v24;
        v28 = v24;
        if (v24 == v26)
          goto LABEL_61;
LABEL_65:
        if (!v279[10] && v23 < v26)
          goto LABEL_67;
LABEL_73:
        v276 = v4 + v21 + 64;
        v32 = a2 - 64;
        if (v21)
        {
          while (2)
          {
            if (*(_BYTE *)(v32 + 10))
            {
              if (v27 != 4)
              {
                v33 = 4;
                goto LABEL_86;
              }
LABEL_84:
              sub_22F0D5A50(*(_QWORD *)v32);
              v35 = v34;
              sub_22F0D5A50(*(uint64_t *)v279);
              if (v35 < v36)
                goto LABEL_113;
            }
            else
            {
              if (*(_BYTE *)(v32 + 8))
              {
                if (v27 == 3)
                  goto LABEL_84;
                v33 = 3;
              }
              else if (*(_BYTE *)(v32 + 9))
              {
                if (v27 == 2)
                  goto LABEL_84;
                v33 = 2;
              }
              else
              {
                v33 = *(_DWORD *)(v32 + 24) != 0;
                if (v27 == v33)
                  goto LABEL_84;
              }
LABEL_86:
              if (!v279[10] && v23 < v33)
                goto LABEL_113;
            }
            v32 -= 64;
            continue;
          }
        }
        v32 = a2;
        v37 = v4 + 64;
        if (v276 >= a2)
          goto LABEL_114;
        v32 = a2 - 64;
        while (2)
        {
          if (*(_BYTE *)(v32 + 10))
          {
            if (v27 != 4)
            {
              v38 = 4;
              goto LABEL_107;
            }
LABEL_101:
            sub_22F0D5A50(*(_QWORD *)v32);
            v40 = v39;
            sub_22F0D5A50(*(uint64_t *)v279);
            v37 = v4 + v21 + 64;
            if (v40 < v41 || v276 >= v32)
              goto LABEL_114;
LABEL_112:
            v32 -= 64;
            continue;
          }
          break;
        }
        if (*(_BYTE *)(v32 + 8))
        {
          if (v27 == 3)
            goto LABEL_101;
          v38 = 3;
        }
        else if (*(_BYTE *)(v32 + 9))
        {
          if (v27 == 2)
            goto LABEL_101;
          v38 = 2;
        }
        else
        {
          v38 = *(_DWORD *)(v32 + 24) != 0;
          if (v27 == v38)
            goto LABEL_101;
        }
LABEL_107:
        if (v23 >= v38 || v279[10] != 0)
        {
          v37 = v4 + v21 + 64;
          if (v276 >= v32)
            goto LABEL_114;
          goto LABEL_112;
        }
LABEL_113:
        v37 = v4 + v21 + 64;
LABEL_114:
        v4 = v37;
        if (v37 >= v32)
          goto LABEL_160;
        v44 = v32;
        while (2)
        {
          v45 = *(_QWORD *)v4;
          *(_DWORD *)&v284[7] = *(_DWORD *)(v4 + 7);
          *(_QWORD *)v284 = v45;
          v285 = v287;
          v286 = 0x200000000;
          if (*(_DWORD *)(v4 + 24))
            sub_22E893E14(&v285, v4 + 16);
          v46 = *(_QWORD *)v44;
          *(_DWORD *)(v4 + 7) = *(_DWORD *)(v44 + 7);
          *(_QWORD *)v4 = v46;
          sub_22E893E14((_QWORD *)(v4 + 16), v44 + 16);
          v47 = *(_QWORD *)v284;
          *(_DWORD *)(v44 + 7) = *(_DWORD *)&v284[7];
          *(_QWORD *)v44 = v47;
          sub_22E893E14((_QWORD *)(v44 + 16), (uint64_t)&v285);
          if (v285 != v287)
            free(v285);
          if (v279[9])
            v48 = 2;
          else
            v48 = v282 != 0;
          if (v279[8])
            v49 = 3;
          else
            v49 = v48;
          if (v279[10])
            v50 = 4;
          else
            v50 = v49;
          while (2)
          {
            while (2)
            {
              v4 += 64;
              if (*(_BYTE *)(v4 + 10))
              {
                v51 = 4;
                v52 = v49;
                v53 = 4;
                if (!v279[10])
                  break;
                goto LABEL_131;
              }
              if (*(_BYTE *)(v4 + 8))
              {
                v51 = 3;
                v52 = v50;
                v53 = 3;
                if (v50 != 3)
                  break;
                goto LABEL_131;
              }
              if (*(_BYTE *)(v4 + 9))
              {
                v51 = 2;
                v52 = v50;
                v53 = 2;
                if (v50 != 2)
                  break;
                goto LABEL_131;
              }
              v51 = *(_DWORD *)(v4 + 24) != 0;
              v52 = v50;
              v53 = v50;
              if (v50 == v51)
              {
LABEL_131:
                sub_22F0D5A50(*(_QWORD *)v4);
                v55 = v54;
                sub_22F0D5A50(*(uint64_t *)v279);
                v52 = v53;
                if (v55 >= v56)
                  goto LABEL_143;
                continue;
              }
              break;
            }
            if (!v279[10] && v49 < v51)
              continue;
            break;
          }
LABEL_143:
          v44 -= 64;
          while (2)
          {
            if (!*(_BYTE *)(v44 + 10))
            {
              if (*(_BYTE *)(v44 + 8))
              {
                if (v52 != 3)
                {
                  v57 = 3;
                  goto LABEL_156;
                }
              }
              else if (*(_BYTE *)(v44 + 9))
              {
                if (v52 != 2)
                {
                  v57 = 2;
                  goto LABEL_156;
                }
              }
              else
              {
                v57 = *(_DWORD *)(v44 + 24) != 0;
                if (v52 != v57)
                  goto LABEL_156;
              }
LABEL_154:
              sub_22F0D5A50(*(_QWORD *)v44);
              v59 = v58;
              sub_22F0D5A50(*(uint64_t *)v279);
              if (v59 < v60)
                break;
              goto LABEL_158;
            }
            if (v52 == 4)
              goto LABEL_154;
            v57 = 4;
LABEL_156:
            if (v279[10] || v49 >= v57)
            {
LABEL_158:
              v44 -= 64;
              continue;
            }
            break;
          }
          if (v4 < v44)
            continue;
          break;
        }
LABEL_160:
        v61 = (uint64_t *)(v4 - 64);
        if (v4 - 64 != a1)
        {
          v62 = *v61;
          *(_DWORD *)(a1 + 7) = *(_DWORD *)(v4 - 57);
          *(_QWORD *)a1 = v62;
          sub_22E893E14((_QWORD *)(a1 + 16), v4 - 48);
        }
        *(_DWORD *)(v4 - 57) = *(_DWORD *)&v279[7];
        *v61 = *(_QWORD *)v279;
        sub_22E893E14((_QWORD *)(v4 - 48), (uint64_t)&v281);
        if (v281 != v283)
          free(v281);
        if (v276 < v32)
        {
LABEL_167:
          sub_22E89535C(a1, v4 - 64, a3, a4 & 1);
LABEL_168:
          a4 = 0;
          continue;
        }
        v63 = sub_22E8986B8(a1, v4 - 64);
        if (!sub_22E8986B8(v4, a2))
        {
          if (v63)
            continue;
          goto LABEL_167;
        }
        a2 = v4 - 64;
        if (!v63)
          goto LABEL_2;
        return;
    }
  }
}

void sub_22E897718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE v42[11];
  _BYTE v43[11];
  _BYTE v44[11];
  _BYTE v45[11];
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x24BDAC8D0];
  sub_22E898D14(a1, a2, a3, a4);
  if (*(_BYTE *)(a5 + 10))
  {
    v10 = 4;
  }
  else if (*(_BYTE *)(a5 + 8))
  {
    v10 = 3;
  }
  else if (*(_BYTE *)(a5 + 9))
  {
    v10 = 2;
  }
  else
  {
    v10 = *(_DWORD *)(a5 + 24) != 0;
  }
  if (*(_BYTE *)(a4 + 10))
  {
    v11 = 4;
  }
  else if (*(_BYTE *)(a4 + 8))
  {
    v11 = 3;
  }
  else if (*(_BYTE *)(a4 + 9))
  {
    v11 = 2;
  }
  else
  {
    v11 = *(_DWORD *)(a4 + 24) != 0;
  }
  if (v10 != v11)
  {
    if (*(_BYTE *)(a5 + 10))
    {
      v15 = 4;
      if (!*(_BYTE *)(a4 + 10))
        goto LABEL_28;
    }
    else if (*(_BYTE *)(a5 + 8))
    {
      v15 = 3;
      if (!*(_BYTE *)(a4 + 10))
      {
LABEL_28:
        if (*(_BYTE *)(a4 + 8))
        {
          v16 = 3;
        }
        else if (*(_BYTE *)(a4 + 9))
        {
          v16 = 2;
        }
        else
        {
          v16 = *(_DWORD *)(a4 + 24) != 0;
        }
LABEL_33:
        if (v15 <= v16)
          return;
        goto LABEL_34;
      }
    }
    else if (*(_BYTE *)(a5 + 9))
    {
      v15 = 2;
      if (!*(_BYTE *)(a4 + 10))
        goto LABEL_28;
    }
    else
    {
      v15 = *(_DWORD *)(a5 + 24) != 0;
      if (!*(_BYTE *)(a4 + 10))
        goto LABEL_28;
    }
    v16 = 4;
    goto LABEL_33;
  }
  sub_22F0D5A50(*(_QWORD *)a5);
  v13 = v12;
  sub_22F0D5A50(*(_QWORD *)a4);
  if (v13 >= v14)
    return;
LABEL_34:
  *(_QWORD *)v42 = *(_QWORD *)a4;
  *(_DWORD *)&v42[7] = *(_DWORD *)(a4 + 7);
  v46 = v48;
  v47 = 0x200000000;
  if (*(_DWORD *)(a4 + 24))
    sub_22E893E14(&v46, a4 + 16);
  v17 = *(_QWORD *)a5;
  *(_DWORD *)(a4 + 7) = *(_DWORD *)(a5 + 7);
  *(_QWORD *)a4 = v17;
  sub_22E893E14((_QWORD *)(a4 + 16), a5 + 16);
  *(_QWORD *)a5 = *(_QWORD *)v42;
  *(_DWORD *)(a5 + 7) = *(_DWORD *)&v42[7];
  sub_22E893E14((_QWORD *)(a5 + 16), (uint64_t)&v46);
  if (v46 != v48)
    free(v46);
  if (*(_BYTE *)(a4 + 10))
  {
    v18 = 4;
  }
  else if (*(_BYTE *)(a4 + 8))
  {
    v18 = 3;
  }
  else if (*(_BYTE *)(a4 + 9))
  {
    v18 = 2;
  }
  else
  {
    v18 = *(_DWORD *)(a4 + 24) != 0;
  }
  if (*(_BYTE *)(a3 + 10))
  {
    v19 = 4;
  }
  else if (*(_BYTE *)(a3 + 8))
  {
    v19 = 3;
  }
  else if (*(_BYTE *)(a3 + 9))
  {
    v19 = 2;
  }
  else
  {
    v19 = *(_DWORD *)(a3 + 24) != 0;
  }
  if (v18 == v19)
  {
    sub_22F0D5A50(*(_QWORD *)a4);
    v21 = v20;
    sub_22F0D5A50(*(_QWORD *)a3);
    if (v21 >= v22)
      return;
  }
  else
  {
    if (*(_BYTE *)(a4 + 10))
    {
      v23 = 4;
    }
    else if (*(_BYTE *)(a4 + 8))
    {
      v23 = 3;
    }
    else if (*(_BYTE *)(a4 + 9))
    {
      v23 = 2;
    }
    else
    {
      v23 = *(_DWORD *)(a4 + 24) != 0;
    }
    if (*(_BYTE *)(a3 + 10))
    {
      v24 = 4;
    }
    else if (*(_BYTE *)(a3 + 8))
    {
      v24 = 3;
    }
    else if (*(_BYTE *)(a3 + 9))
    {
      v24 = 2;
    }
    else
    {
      v24 = *(_DWORD *)(a3 + 24) != 0;
    }
    if (v23 <= v24)
      return;
  }
  *(_QWORD *)v43 = *(_QWORD *)a3;
  *(_DWORD *)&v43[7] = *(_DWORD *)(a3 + 7);
  v46 = v48;
  v47 = 0x200000000;
  if (*(_DWORD *)(a3 + 24))
    sub_22E893E14(&v46, a3 + 16);
  v25 = *(_QWORD *)a4;
  *(_DWORD *)(a3 + 7) = *(_DWORD *)(a4 + 7);
  *(_QWORD *)a3 = v25;
  sub_22E893E14((_QWORD *)(a3 + 16), a4 + 16);
  *(_QWORD *)a4 = *(_QWORD *)v43;
  *(_DWORD *)(a4 + 7) = *(_DWORD *)&v43[7];
  sub_22E893E14((_QWORD *)(a4 + 16), (uint64_t)&v46);
  if (v46 != v48)
    free(v46);
  if (*(_BYTE *)(a3 + 10))
  {
    v26 = 4;
  }
  else if (*(_BYTE *)(a3 + 8))
  {
    v26 = 3;
  }
  else if (*(_BYTE *)(a3 + 9))
  {
    v26 = 2;
  }
  else
  {
    v26 = *(_DWORD *)(a3 + 24) != 0;
  }
  if (*(_BYTE *)(a2 + 10))
  {
    v27 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v27 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v27 = 2;
  }
  else
  {
    v27 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (v26 == v27)
  {
    sub_22F0D5A50(*(_QWORD *)a3);
    v29 = v28;
    sub_22F0D5A50(*(_QWORD *)a2);
    if (v29 >= v30)
      return;
  }
  else
  {
    if (*(_BYTE *)(a3 + 10))
    {
      v31 = 4;
    }
    else if (*(_BYTE *)(a3 + 8))
    {
      v31 = 3;
    }
    else if (*(_BYTE *)(a3 + 9))
    {
      v31 = 2;
    }
    else
    {
      v31 = *(_DWORD *)(a3 + 24) != 0;
    }
    if (*(_BYTE *)(a2 + 10))
    {
      v32 = 4;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      v32 = 3;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      v32 = 2;
    }
    else
    {
      v32 = *(_DWORD *)(a2 + 24) != 0;
    }
    if (v31 <= v32)
      return;
  }
  *(_QWORD *)v44 = *(_QWORD *)a2;
  *(_DWORD *)&v44[7] = *(_DWORD *)(a2 + 7);
  v46 = v48;
  v47 = 0x200000000;
  if (*(_DWORD *)(a2 + 24))
    sub_22E893E14(&v46, a2 + 16);
  v33 = *(_QWORD *)a3;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)(a3 + 7);
  *(_QWORD *)a2 = v33;
  sub_22E893E14((_QWORD *)(a2 + 16), a3 + 16);
  *(_QWORD *)a3 = *(_QWORD *)v44;
  *(_DWORD *)(a3 + 7) = *(_DWORD *)&v44[7];
  sub_22E893E14((_QWORD *)(a3 + 16), (uint64_t)&v46);
  if (v46 != v48)
    free(v46);
  if (*(_BYTE *)(a2 + 10))
  {
    v34 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v34 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v34 = 2;
  }
  else
  {
    v34 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v35 = 4;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v35 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v35 = 2;
  }
  else
  {
    v35 = *(_DWORD *)(a1 + 24) != 0;
  }
  if (v34 == v35)
  {
    sub_22F0D5A50(*(_QWORD *)a2);
    v37 = v36;
    sub_22F0D5A50(*(_QWORD *)a1);
    if (v37 >= v38)
      return;
  }
  else
  {
    if (*(_BYTE *)(a2 + 10))
    {
      v39 = 4;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      v39 = 3;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      v39 = 2;
    }
    else
    {
      v39 = *(_DWORD *)(a2 + 24) != 0;
    }
    if (*(_BYTE *)(a1 + 10))
    {
      v40 = 4;
    }
    else if (*(_BYTE *)(a1 + 8))
    {
      v40 = 3;
    }
    else if (*(_BYTE *)(a1 + 9))
    {
      v40 = 2;
    }
    else
    {
      v40 = *(_DWORD *)(a1 + 24) != 0;
    }
    if (v39 <= v40)
      return;
  }
  *(_QWORD *)v45 = *(_QWORD *)a1;
  *(_DWORD *)&v45[7] = *(_DWORD *)(a1 + 7);
  v46 = v48;
  v47 = 0x200000000;
  if (*(_DWORD *)(a1 + 24))
    sub_22E893E14(&v46, a1 + 16);
  v41 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(_QWORD *)a1 = v41;
  sub_22E893E14((_QWORD *)(a1 + 16), a2 + 16);
  *(_QWORD *)a2 = *(_QWORD *)v45;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)&v45[7];
  sub_22E893E14((_QWORD *)(a2 + 16), (uint64_t)&v46);
  if (v46 != v48)
    free(v46);
}

void sub_22E897E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE v49[11];
  _BYTE v50[11];
  _BYTE v51[11];
  _BYTE v52[11];
  _BYTE v53[11];
  void *v54;
  uint64_t v55;
  _QWORD v56[5];

  v56[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(a2 + 10);
  if (*(_BYTE *)(a2 + 10))
  {
    v7 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v7 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v7 = 2;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v8 = 4;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v8 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v8 = 2;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 24) != 0;
  }
  if (v7 == v8)
  {
    sub_22F0D5A50(*(_QWORD *)a2);
    v10 = v9;
    sub_22F0D5A50(*(_QWORD *)a1);
    if (v10 >= v11)
      goto LABEL_17;
LABEL_57:
    if (*(_BYTE *)(a3 + 10))
    {
      v20 = 4;
      if (!v6)
        goto LABEL_67;
    }
    else if (*(_BYTE *)(a3 + 8))
    {
      v20 = 3;
      if (!v6)
      {
LABEL_67:
        if (*(_BYTE *)(a2 + 8))
        {
          v21 = 3;
        }
        else if (*(_BYTE *)(a2 + 9))
        {
          v21 = 2;
        }
        else
        {
          v21 = *(_DWORD *)(a2 + 24) != 0;
        }
LABEL_72:
        if (v20 == v21)
        {
          sub_22F0D5A50(*(_QWORD *)a3);
          v23 = v22;
          sub_22F0D5A50(*(_QWORD *)a2);
          if (v23 >= v24)
            goto LABEL_74;
        }
        else
        {
          if (*(_BYTE *)(a3 + 10))
          {
            v27 = 4;
          }
          else if (*(_BYTE *)(a3 + 8))
          {
            v27 = 3;
          }
          else if (*(_BYTE *)(a3 + 9))
          {
            v27 = 2;
          }
          else
          {
            v27 = *(_DWORD *)(a3 + 24) != 0;
          }
          if (v6)
          {
            v30 = 4;
          }
          else if (*(_BYTE *)(a2 + 8))
          {
            v30 = 3;
          }
          else if (*(_BYTE *)(a2 + 9))
          {
            v30 = 2;
          }
          else
          {
            v30 = *(_DWORD *)(a2 + 24) != 0;
          }
          if (v27 <= v30)
          {
LABEL_74:
            *(_QWORD *)v49 = *(_QWORD *)a1;
            *(_DWORD *)&v49[7] = *(_DWORD *)(a1 + 7);
            v54 = v56;
            v55 = 0x200000000;
            if (*(_DWORD *)(a1 + 24))
              sub_22E893E14(&v54, a1 + 16);
            v25 = *(_QWORD *)a2;
            *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
            *(_QWORD *)a1 = v25;
            sub_22E893E14((_QWORD *)(a1 + 16), a2 + 16);
            *(_QWORD *)a2 = *(_QWORD *)v49;
            *(_DWORD *)(a2 + 7) = *(_DWORD *)&v49[7];
            sub_22E893E14((_QWORD *)(a2 + 16), (uint64_t)&v54);
            if (v54 != v56)
              free(v54);
            if (*(_BYTE *)(a3 + 10))
            {
              v26 = 4;
            }
            else if (*(_BYTE *)(a3 + 8))
            {
              v26 = 3;
            }
            else if (*(_BYTE *)(a3 + 9))
            {
              v26 = 2;
            }
            else
            {
              v26 = *(_DWORD *)(a3 + 24) != 0;
            }
            if (*(_BYTE *)(a2 + 10))
            {
              v29 = 4;
            }
            else if (*(_BYTE *)(a2 + 8))
            {
              v29 = 3;
            }
            else if (*(_BYTE *)(a2 + 9))
            {
              v29 = 2;
            }
            else
            {
              v29 = *(_DWORD *)(a2 + 24) != 0;
            }
            if (v26 == v29)
            {
              sub_22F0D5A50(*(_QWORD *)a3);
              v34 = v33;
              sub_22F0D5A50(*(_QWORD *)a2);
              if (v34 >= v35)
                return;
            }
            else
            {
              if (*(_BYTE *)(a3 + 10))
              {
                v36 = 4;
              }
              else if (*(_BYTE *)(a3 + 8))
              {
                v36 = 3;
              }
              else if (*(_BYTE *)(a3 + 9))
              {
                v36 = 2;
              }
              else
              {
                v36 = *(_DWORD *)(a3 + 24) != 0;
              }
              if (*(_BYTE *)(a2 + 10))
              {
                v44 = 4;
              }
              else if (*(_BYTE *)(a2 + 8))
              {
                v44 = 3;
              }
              else if (*(_BYTE *)(a2 + 9))
              {
                v44 = 2;
              }
              else
              {
                v44 = *(_DWORD *)(a2 + 24) != 0;
              }
              if (v36 <= v44)
                return;
            }
            *(_QWORD *)v52 = *(_QWORD *)a2;
            *(_DWORD *)&v52[7] = *(_DWORD *)(a2 + 7);
            v54 = v56;
            v55 = 0x200000000;
            if (*(_DWORD *)(a2 + 24))
              sub_22E893E14(&v54, a2 + 16);
            v46 = *(_QWORD *)a3;
            *(_DWORD *)(a2 + 7) = *(_DWORD *)(a3 + 7);
            *(_QWORD *)a2 = v46;
            sub_22E893E14((_QWORD *)(a2 + 16), a3 + 16);
            *(_QWORD *)a3 = *(_QWORD *)v52;
            *(_DWORD *)(a3 + 7) = *(_DWORD *)&v52[7];
            v47 = (_QWORD *)(a3 + 16);
LABEL_180:
            sub_22E893E14(v47, (uint64_t)&v54);
            v38 = v54;
            if (v54 == v56)
              return;
            goto LABEL_181;
          }
        }
        *(_QWORD *)v51 = *(_QWORD *)a1;
        *(_DWORD *)&v51[7] = *(_DWORD *)(a1 + 7);
        v54 = v56;
        v55 = 0x200000000;
        if (*(_DWORD *)(a1 + 24))
          sub_22E893E14(&v54, a1 + 16);
        v37 = *(_QWORD *)a3;
        *(_DWORD *)(a1 + 7) = *(_DWORD *)(a3 + 7);
        *(_QWORD *)a1 = v37;
        sub_22E893E14((_QWORD *)(a1 + 16), a3 + 16);
        *(_QWORD *)a3 = *(_QWORD *)v51;
        *(_DWORD *)(a3 + 7) = *(_DWORD *)&v51[7];
        sub_22E893E14((_QWORD *)(a3 + 16), (uint64_t)&v54);
        v38 = v54;
        if (v54 != v56)
        {
LABEL_181:
          free(v38);
          return;
        }
        return;
      }
    }
    else if (*(_BYTE *)(a3 + 9))
    {
      v20 = 2;
      if (!v6)
        goto LABEL_67;
    }
    else
    {
      v20 = *(_DWORD *)(a3 + 24) != 0;
      if (!v6)
        goto LABEL_67;
    }
    v21 = 4;
    goto LABEL_72;
  }
  if (*(_BYTE *)(a2 + 10))
  {
    v13 = 4;
    if (!*(_BYTE *)(a1 + 10))
      goto LABEL_41;
LABEL_34:
    v15 = 4;
    goto LABEL_56;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    if (*(_BYTE *)(a2 + 9))
    {
      v13 = 2;
      if (!*(_BYTE *)(a1 + 10))
        goto LABEL_41;
    }
    else
    {
      v13 = *(_DWORD *)(a2 + 24) != 0;
      if (!*(_BYTE *)(a1 + 10))
        goto LABEL_41;
    }
    goto LABEL_34;
  }
  v13 = 3;
  if (*(_BYTE *)(a1 + 10))
    goto LABEL_34;
LABEL_41:
  if (*(_BYTE *)(a1 + 8))
  {
    v15 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v15 = 2;
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 24) != 0;
  }
LABEL_56:
  if (v13 > v15)
    goto LABEL_57;
LABEL_17:
  if (*(_BYTE *)(a3 + 10))
  {
    v12 = 4;
    if (!v6)
      goto LABEL_36;
  }
  else if (*(_BYTE *)(a3 + 8))
  {
    v12 = 3;
    if (!v6)
    {
LABEL_36:
      if (*(_BYTE *)(a2 + 8))
      {
        v14 = 3;
      }
      else if (*(_BYTE *)(a2 + 9))
      {
        v14 = 2;
      }
      else
      {
        v14 = *(_DWORD *)(a2 + 24) != 0;
      }
      goto LABEL_46;
    }
  }
  else if (*(_BYTE *)(a3 + 9))
  {
    v12 = 2;
    if (!v6)
      goto LABEL_36;
  }
  else
  {
    v12 = *(_DWORD *)(a3 + 24) != 0;
    if (!v6)
      goto LABEL_36;
  }
  v14 = 4;
LABEL_46:
  if (v12 == v14)
  {
    sub_22F0D5A50(*(_QWORD *)a3);
    v17 = v16;
    sub_22F0D5A50(*(_QWORD *)a2);
    if (v17 >= v18)
      return;
  }
  else
  {
    if (*(_BYTE *)(a3 + 10))
    {
      v19 = 4;
    }
    else if (*(_BYTE *)(a3 + 8))
    {
      v19 = 3;
    }
    else if (*(_BYTE *)(a3 + 9))
    {
      v19 = 2;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 24) != 0;
    }
    if (v6)
    {
      v28 = 4;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      v28 = 3;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      v28 = 2;
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 24) != 0;
    }
    if (v19 <= v28)
      return;
  }
  *(_QWORD *)v50 = *(_QWORD *)a2;
  *(_DWORD *)&v50[7] = *(_DWORD *)(a2 + 7);
  v54 = v56;
  v55 = 0x200000000;
  if (*(_DWORD *)(a2 + 24))
    sub_22E893E14(&v54, a2 + 16);
  v31 = *(_QWORD *)a3;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)(a3 + 7);
  *(_QWORD *)a2 = v31;
  sub_22E893E14((_QWORD *)(a2 + 16), a3 + 16);
  *(_QWORD *)a3 = *(_QWORD *)v50;
  *(_DWORD *)(a3 + 7) = *(_DWORD *)&v50[7];
  sub_22E893E14((_QWORD *)(a3 + 16), (uint64_t)&v54);
  if (v54 != v56)
    free(v54);
  if (*(_BYTE *)(a2 + 10))
  {
    v32 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v32 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v32 = 2;
  }
  else
  {
    v32 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v39 = 4;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v39 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v39 = 2;
  }
  else
  {
    v39 = *(_DWORD *)(a1 + 24) != 0;
  }
  if (v32 == v39)
  {
    sub_22F0D5A50(*(_QWORD *)a2);
    v41 = v40;
    sub_22F0D5A50(*(_QWORD *)a1);
    if (v41 >= v42)
      return;
    goto LABEL_177;
  }
  if (*(_BYTE *)(a2 + 10))
  {
    v43 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v43 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v43 = 2;
  }
  else
  {
    v43 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v45 = 4;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v45 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v45 = 2;
  }
  else
  {
    v45 = *(_DWORD *)(a1 + 24) != 0;
  }
  if (v43 > v45)
  {
LABEL_177:
    *(_QWORD *)v53 = *(_QWORD *)a1;
    *(_DWORD *)&v53[7] = *(_DWORD *)(a1 + 7);
    v54 = v56;
    v55 = 0x200000000;
    if (*(_DWORD *)(a1 + 24))
      sub_22E893E14(&v54, a1 + 16);
    v48 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
    *(_QWORD *)a1 = v48;
    sub_22E893E14((_QWORD *)(a1 + 16), a2 + 16);
    *(_QWORD *)a2 = *(_QWORD *)v53;
    *(_DWORD *)(a2 + 7) = *(_DWORD *)&v53[7];
    v47 = (_QWORD *)(a2 + 16);
    goto LABEL_180;
  }
}

BOOL sub_22E8986B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[11];
  _BYTE v39[11];
  void *v40;
  uint64_t v41;
  _QWORD v42[5];

  v2 = a2;
  v42[4] = *MEMORY[0x24BDAC8D0];
  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_BYTE *)(a2 - 54))
      {
        v6 = 4;
      }
      else if (*(_BYTE *)(a2 - 56))
      {
        v6 = 3;
      }
      else if (*(_BYTE *)(a2 - 55))
      {
        v6 = 2;
      }
      else
      {
        v6 = *(_DWORD *)(a2 - 40) != 0;
      }
      v29 = (uint64_t *)(a2 - 64);
      if (*(_BYTE *)(a1 + 10))
      {
        v30 = 4;
      }
      else if (*(_BYTE *)(a1 + 8))
      {
        v30 = 3;
      }
      else if (*(_BYTE *)(a1 + 9))
      {
        v30 = 2;
      }
      else
      {
        v30 = *(_DWORD *)(a1 + 24) != 0;
      }
      if (v6 == v30)
      {
        sub_22F0D5A50(*v29);
        v32 = v31;
        sub_22F0D5A50(*(_QWORD *)a1);
        if (v32 >= v33)
          return 1;
        goto LABEL_120;
      }
      if (*(_BYTE *)(a2 - 54))
      {
        v34 = 4;
      }
      else if (*(_BYTE *)(a2 - 56))
      {
        v34 = 3;
      }
      else if (*(_BYTE *)(a2 - 55))
      {
        v34 = 2;
      }
      else
      {
        v34 = *(_DWORD *)(a2 - 40) != 0;
      }
      if (*(_BYTE *)(a1 + 10))
      {
        v35 = 4;
      }
      else if (*(_BYTE *)(a1 + 8))
      {
        v35 = 3;
      }
      else if (*(_BYTE *)(a1 + 9))
      {
        v35 = 2;
      }
      else
      {
        v35 = *(_DWORD *)(a1 + 24) != 0;
      }
      if (v34 > v35)
      {
LABEL_120:
        *(_QWORD *)v39 = *(_QWORD *)a1;
        *(_DWORD *)&v39[7] = *(_DWORD *)(a1 + 7);
        v40 = v42;
        v41 = 0x200000000;
        if (*(_DWORD *)(a1 + 24))
          sub_22E893E14(&v40, a1 + 16);
        v36 = *v29;
        *(_DWORD *)(a1 + 7) = *(_DWORD *)(v2 - 57);
        *(_QWORD *)a1 = v36;
        sub_22E893E14((_QWORD *)(a1 + 16), v2 - 48);
        *v29 = *(_QWORD *)v39;
        *(_DWORD *)(v2 - 57) = *(_DWORD *)&v39[7];
        sub_22E893E14((_QWORD *)(v2 - 48), (uint64_t)&v40);
        if (v40 != v42)
          free(v40);
        return 1;
      }
      return result;
    case 3:
      sub_22E897E24(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      sub_22E898D14(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_22E897718(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      v7 = a1 + 128;
      sub_22E897E24(a1, a1 + 64, a1 + 128);
      v8 = a1 + 192;
      if (a1 + 192 == v2)
        return 1;
      v9 = 0;
      v10 = 0;
      v37 = v2;
      break;
  }
LABEL_6:
  if (*(_BYTE *)(v8 + 10))
  {
    v11 = 4;
  }
  else if (*(_BYTE *)(v8 + 8))
  {
    v11 = 3;
  }
  else if (*(_BYTE *)(v8 + 9))
  {
    v11 = 2;
  }
  else
  {
    v11 = *(_DWORD *)(v8 + 24) != 0;
  }
  if (*(_BYTE *)(v7 + 10))
  {
    v12 = 4;
  }
  else if (*(_BYTE *)(v7 + 8))
  {
    v12 = 3;
  }
  else if (*(_BYTE *)(v7 + 9))
  {
    v12 = 2;
  }
  else
  {
    v12 = *(_DWORD *)(v7 + 24) != 0;
  }
  if (v11 == v12)
  {
    sub_22F0D5A50(*(_QWORD *)v8);
    v14 = v13;
    sub_22F0D5A50(*(_QWORD *)v7);
    if (v14 >= v15)
      goto LABEL_84;
    goto LABEL_39;
  }
  if (*(_BYTE *)(v8 + 10))
  {
    v16 = 4;
    if (!*(_BYTE *)(v7 + 10))
      goto LABEL_33;
  }
  else if (*(_BYTE *)(v8 + 8))
  {
    v16 = 3;
    if (!*(_BYTE *)(v7 + 10))
    {
LABEL_33:
      if (*(_BYTE *)(v7 + 8))
      {
        v17 = 3;
      }
      else if (*(_BYTE *)(v7 + 9))
      {
        v17 = 2;
      }
      else
      {
        v17 = *(_DWORD *)(v7 + 24) != 0;
      }
LABEL_38:
      if (v16 <= v17)
        goto LABEL_84;
LABEL_39:
      *(_QWORD *)v38 = *(_QWORD *)v8;
      *(_DWORD *)&v38[7] = *(_DWORD *)(v8 + 7);
      v40 = v42;
      v41 = 0x200000000;
      if (*(_DWORD *)(v8 + 24))
        sub_22E893E14(&v40, v8 + 16);
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_DWORD *)(v8 + 7) = *(_DWORD *)(v7 + 7);
      v18 = (_QWORD *)(v7 + 16);
      sub_22E893E14((_QWORD *)(v8 + 16), v7 + 16);
      if (v7 == a1)
      {
        v7 = a1;
        goto LABEL_81;
      }
      v19 = v9;
      while (1)
      {
        if (v38[10])
        {
          v20 = 4;
        }
        else if (v38[8])
        {
          v20 = 3;
        }
        else if (v38[9])
        {
          v20 = 2;
        }
        else
        {
          v20 = v41 != 0;
        }
        v21 = a1 + v19;
        if (*(_BYTE *)(a1 + v19 + 74))
        {
          v22 = 4;
        }
        else if (*(_BYTE *)(a1 + v19 + 72))
        {
          v22 = 3;
        }
        else if (*(_BYTE *)(a1 + v19 + 73))
        {
          v22 = 2;
        }
        else
        {
          v22 = *(_DWORD *)(a1 + v19 + 88) != 0;
        }
        v23 = (uint64_t *)(v21 + 64);
        if (v20 == v22)
        {
          sub_22F0D5A50(*(uint64_t *)v38);
          v25 = v24;
          sub_22F0D5A50(*v23);
          if (v25 >= v26)
            goto LABEL_80;
          goto LABEL_76;
        }
        if (v38[10])
        {
          v27 = 4;
          if (*(_BYTE *)(a1 + v19 + 74))
            goto LABEL_68;
        }
        else if (v38[8])
        {
          v27 = 3;
          if (*(_BYTE *)(a1 + v19 + 74))
            goto LABEL_68;
        }
        else if (v38[9])
        {
          v27 = 2;
          if (*(_BYTE *)(a1 + v19 + 74))
            goto LABEL_68;
        }
        else
        {
          v27 = v41 != 0;
          if (*(_BYTE *)(a1 + v19 + 74))
          {
LABEL_68:
            v28 = 4;
            goto LABEL_75;
          }
        }
        if (*(_BYTE *)(a1 + v19 + 72))
        {
          v28 = 3;
        }
        else if (*(_BYTE *)(a1 + v19 + 73))
        {
          v28 = 2;
        }
        else
        {
          v28 = *(_DWORD *)(a1 + v19 + 88) != 0;
        }
LABEL_75:
        if (v27 <= v28)
        {
          v18 = (_QWORD *)(a1 + v19 + 144);
          v7 = a1 + v19 + 128;
LABEL_80:
          v2 = v37;
LABEL_81:
          *(_DWORD *)(v7 + 7) = *(_DWORD *)&v38[7];
          *(_QWORD *)v7 = *(_QWORD *)v38;
          sub_22E893E14(v18, (uint64_t)&v40);
          if (v40 != v42)
            free(v40);
          if (++v10 == 8)
            return v8 + 64 == v2;
LABEL_84:
          v7 = v8;
          v9 += 64;
          v8 += 64;
          if (v8 == v2)
            return 1;
          goto LABEL_6;
        }
LABEL_76:
        *(_QWORD *)(v21 + 128) = *v23;
        *(_DWORD *)(v21 + 135) = *(_DWORD *)(v21 + 71);
        v18 = (_QWORD *)(v7 - 48);
        sub_22E893E14((_QWORD *)(a1 + v19 + 144), a1 + v19 + 80);
        v19 -= 64;
        v7 -= 64;
        if (v19 == -128)
        {
          v18 = (_QWORD *)(a1 + 16);
          v7 = a1;
          goto LABEL_80;
        }
      }
    }
  }
  else if (*(_BYTE *)(v8 + 9))
  {
    v16 = 2;
    if (!*(_BYTE *)(v7 + 10))
      goto LABEL_33;
  }
  else
  {
    v16 = *(_DWORD *)(v8 + 24) != 0;
    if (!*(_BYTE *)(v7 + 10))
      goto LABEL_33;
  }
  v17 = 4;
  goto LABEL_38;
}

void sub_22E898D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[11];
  _BYTE v33[11];
  _BYTE v34[11];
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  sub_22E897E24(a1, a2, a3);
  if (*(_BYTE *)(a4 + 10))
  {
    v8 = 4;
  }
  else if (*(_BYTE *)(a4 + 8))
  {
    v8 = 3;
  }
  else if (*(_BYTE *)(a4 + 9))
  {
    v8 = 2;
  }
  else
  {
    v8 = *(_DWORD *)(a4 + 24) != 0;
  }
  if (*(_BYTE *)(a3 + 10))
  {
    v9 = 4;
  }
  else if (*(_BYTE *)(a3 + 8))
  {
    v9 = 3;
  }
  else if (*(_BYTE *)(a3 + 9))
  {
    v9 = 2;
  }
  else
  {
    v9 = *(_DWORD *)(a3 + 24) != 0;
  }
  if (v8 != v9)
  {
    if (*(_BYTE *)(a4 + 10))
    {
      v13 = 4;
      if (!*(_BYTE *)(a3 + 10))
        goto LABEL_28;
    }
    else if (*(_BYTE *)(a4 + 8))
    {
      v13 = 3;
      if (!*(_BYTE *)(a3 + 10))
      {
LABEL_28:
        if (*(_BYTE *)(a3 + 8))
        {
          v14 = 3;
        }
        else if (*(_BYTE *)(a3 + 9))
        {
          v14 = 2;
        }
        else
        {
          v14 = *(_DWORD *)(a3 + 24) != 0;
        }
LABEL_33:
        if (v13 <= v14)
          return;
        goto LABEL_34;
      }
    }
    else if (*(_BYTE *)(a4 + 9))
    {
      v13 = 2;
      if (!*(_BYTE *)(a3 + 10))
        goto LABEL_28;
    }
    else
    {
      v13 = *(_DWORD *)(a4 + 24) != 0;
      if (!*(_BYTE *)(a3 + 10))
        goto LABEL_28;
    }
    v14 = 4;
    goto LABEL_33;
  }
  sub_22F0D5A50(*(_QWORD *)a4);
  v11 = v10;
  sub_22F0D5A50(*(_QWORD *)a3);
  if (v11 >= v12)
    return;
LABEL_34:
  *(_QWORD *)v32 = *(_QWORD *)a3;
  *(_DWORD *)&v32[7] = *(_DWORD *)(a3 + 7);
  v35 = v37;
  v36 = 0x200000000;
  if (*(_DWORD *)(a3 + 24))
    sub_22E893E14(&v35, a3 + 16);
  v15 = *(_QWORD *)a4;
  *(_DWORD *)(a3 + 7) = *(_DWORD *)(a4 + 7);
  *(_QWORD *)a3 = v15;
  sub_22E893E14((_QWORD *)(a3 + 16), a4 + 16);
  *(_QWORD *)a4 = *(_QWORD *)v32;
  *(_DWORD *)(a4 + 7) = *(_DWORD *)&v32[7];
  sub_22E893E14((_QWORD *)(a4 + 16), (uint64_t)&v35);
  if (v35 != v37)
    free(v35);
  if (*(_BYTE *)(a3 + 10))
  {
    v16 = 4;
  }
  else if (*(_BYTE *)(a3 + 8))
  {
    v16 = 3;
  }
  else if (*(_BYTE *)(a3 + 9))
  {
    v16 = 2;
  }
  else
  {
    v16 = *(_DWORD *)(a3 + 24) != 0;
  }
  if (*(_BYTE *)(a2 + 10))
  {
    v17 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v17 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v17 = 2;
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (v16 == v17)
  {
    sub_22F0D5A50(*(_QWORD *)a3);
    v19 = v18;
    sub_22F0D5A50(*(_QWORD *)a2);
    if (v19 >= v20)
      return;
  }
  else
  {
    if (*(_BYTE *)(a3 + 10))
    {
      v21 = 4;
    }
    else if (*(_BYTE *)(a3 + 8))
    {
      v21 = 3;
    }
    else if (*(_BYTE *)(a3 + 9))
    {
      v21 = 2;
    }
    else
    {
      v21 = *(_DWORD *)(a3 + 24) != 0;
    }
    if (*(_BYTE *)(a2 + 10))
    {
      v22 = 4;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      v22 = 3;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      v22 = 2;
    }
    else
    {
      v22 = *(_DWORD *)(a2 + 24) != 0;
    }
    if (v21 <= v22)
      return;
  }
  *(_QWORD *)v33 = *(_QWORD *)a2;
  *(_DWORD *)&v33[7] = *(_DWORD *)(a2 + 7);
  v35 = v37;
  v36 = 0x200000000;
  if (*(_DWORD *)(a2 + 24))
    sub_22E893E14(&v35, a2 + 16);
  v23 = *(_QWORD *)a3;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)(a3 + 7);
  *(_QWORD *)a2 = v23;
  sub_22E893E14((_QWORD *)(a2 + 16), a3 + 16);
  *(_QWORD *)a3 = *(_QWORD *)v33;
  *(_DWORD *)(a3 + 7) = *(_DWORD *)&v33[7];
  sub_22E893E14((_QWORD *)(a3 + 16), (uint64_t)&v35);
  if (v35 != v37)
    free(v35);
  if (*(_BYTE *)(a2 + 10))
  {
    v24 = 4;
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v24 = 3;
  }
  else if (*(_BYTE *)(a2 + 9))
  {
    v24 = 2;
  }
  else
  {
    v24 = *(_DWORD *)(a2 + 24) != 0;
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v25 = 4;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v25 = 3;
  }
  else if (*(_BYTE *)(a1 + 9))
  {
    v25 = 2;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 24) != 0;
  }
  if (v24 == v25)
  {
    sub_22F0D5A50(*(_QWORD *)a2);
    v27 = v26;
    sub_22F0D5A50(*(_QWORD *)a1);
    if (v27 >= v28)
      return;
  }
  else
  {
    if (*(_BYTE *)(a2 + 10))
    {
      v29 = 4;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      v29 = 3;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      v29 = 2;
    }
    else
    {
      v29 = *(_DWORD *)(a2 + 24) != 0;
    }
    if (*(_BYTE *)(a1 + 10))
    {
      v30 = 4;
    }
    else if (*(_BYTE *)(a1 + 8))
    {
      v30 = 3;
    }
    else if (*(_BYTE *)(a1 + 9))
    {
      v30 = 2;
    }
    else
    {
      v30 = *(_DWORD *)(a1 + 24) != 0;
    }
    if (v29 <= v30)
      return;
  }
  *(_QWORD *)v34 = *(_QWORD *)a1;
  *(_DWORD *)&v34[7] = *(_DWORD *)(a1 + 7);
  v35 = v37;
  v36 = 0x200000000;
  if (*(_DWORD *)(a1 + 24))
    sub_22E893E14(&v35, a1 + 16);
  v31 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(_QWORD *)a1 = v31;
  sub_22E893E14((_QWORD *)(a1 + 16), a2 + 16);
  *(_QWORD *)a2 = *(_QWORD *)v34;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)&v34[7];
  sub_22E893E14((_QWORD *)(a2 + 16), (uint64_t)&v35);
  if (v35 != v37)
    free(v35);
}

char **sub_22E899278(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
      {
        v7 = v4;
        v8 = v2;
        free(v5);
        v4 = v7;
        v2 = v8;
      }
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22E8992F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22E89930C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  unsigned int v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  unsigned int v14[25];
  unsigned __int8 v15;
  uint64_t v16;

  v16 = a2;
  v15 = a6;
  if (a5)
    v8 = 6358;
  else
    v8 = 6325;
  v9 = *(_QWORD **)(a1 + 8);
  sub_22F0D5A50(a3);
  sub_22E8FCA40(v9, v10, v8, 0, (uint64_t)v14);
  sub_22E890024((uint64_t)v14, &v16);
  sub_22E903BEC(v14);
  v11 = *(_QWORD **)(a1 + 8);
  sub_22F0D5A50(a4);
  sub_22E8FCA40(v11, v12, 0x155Bu, 0, (uint64_t)v14);
  sub_22E894E38((uint64_t)v14, &v15);
  return sub_22E903BEC(v14);
}

unsigned int *sub_22E8993C4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0 && (v9 = v4 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v9 + 16)))
    v5 = **(int ***)(v9 + 24);
  else
    v5 = (int *)(a2 + 64);
  if (a3)
    v6 = 6359;
  else
    v6 = 6326;
  sub_22E8FCA40(v3, *v5, v6, 0, (uint64_t)v11);
  v7 = sub_22E890024((uint64_t)v11, &v12);
  v10 = 0;
  sub_22E894E38(v7, &v10);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22E899448(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v9;
  unsigned int v10[24];
  uint64_t v11;

  v11 = a2;
  if (a4)
    v4 = 6359;
  else
    v4 = 6326;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  sub_22E8FCA40(v5, v6, v4, 0, (uint64_t)v10);
  v7 = sub_22E890024((uint64_t)v10, &v11);
  v9 = 1;
  sub_22E894E38(v7, &v9);
  return sub_22E903BEC(v10);
}

unint64_t sub_22E8994CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t i;
  unint64_t result;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30[24];
  int v31;
  _OWORD *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;

  if (a7)
    v12 = 6360;
  else
    v12 = 6327;
  sub_22F0D5A50(a4);
  v14 = v13;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2128;
  v16 = (unsigned __int8 *)sub_22E3B8AAC(v15);
  v17 = *v16;
  v18 = v16 + 1;
  v18[v17] = 11;
  *(_QWORD *)&v16[8 * v17 + 16] = a2;
  v19 = (v17 + 1);
  v18[v19] = 2;
  *(_QWORD *)&v16[8 * v19 + 16] = a6;
  v20 = (v17 + 2);
  v18[v20] = 3;
  *(_QWORD *)&v16[8 * v20 + 16] = a5;
  *v16 = v17 + 3;
  v31 = v14;
  v34 = v12;
  v33 = v15;
  v21 = (_OWORD *)sub_22E3B8AAC(v15);
  v32 = v21;
  v22 = *((_OWORD *)v16 + 5);
  v24 = *((_OWORD *)v16 + 2);
  v23 = *((_OWORD *)v16 + 3);
  v21[4] = *((_OWORD *)v16 + 4);
  v21[5] = v22;
  v21[2] = v24;
  v21[3] = v23;
  v25 = *((_OWORD *)v16 + 1);
  *v21 = *(_OWORD *)v16;
  v21[1] = v25;
  for (i = 96; i != 336; i += 24)
    std::string::operator=((std::string *)((char *)v21 + i), (const std::string *)&v16[i]);
  sub_22E78D560((uint64_t)(v21 + 21), (uint64_t)(v16 + 336));
  sub_22E78D658((uint64_t)(v21 + 28), (uint64_t *)v16 + 56);
  sub_22E3BB10C(v15, (unint64_t)v16);
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7F) == 1)
  {
    v28 = *(_QWORD *)(a1 + 16);
    v35 = a3;
    v29 = sub_22F2F22EC(v28, &v35);
    result = sub_22F2F22A4((unint64_t)(v29 + 1), (uint64_t)&v31);
  }
  else
  {
    sub_22E90379C(*(_QWORD **)(a1 + 8), v14, (uint64_t)&v32, 0, (uint64_t)v30);
    result = (unint64_t)sub_22E903BEC(v30);
  }
  if (v32)
  {
    result = v33;
    if (v33)
      return sub_22E3BB10C(v33, (unint64_t)v32);
  }
  return result;
}

int32x2_t sub_22E899688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  unsigned int v12[24];
  uint64_t v13;

  v2 = a2;
  v4 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v13 = a2;
  v5 = sub_22F2F22EC(v3, &v13);
  v6 = *((unsigned int *)v5 + 4);
  if ((_DWORD)v6)
  {
    v7 = (int *)v5[1];
    v8 = &v7[8 * v6];
    do
    {
      v9 = (uint64_t)(v7 + 2);
      v10 = *v7;
      v7 += 8;
      sub_22E90379C(v4, v10, v9, 0, (uint64_t)v12);
      sub_22E903BEC(v12);
    }
    while (v7 != v8);
    v2 = v13;
  }
  return sub_22F2F25AC(v3, v2);
}

int32x2_t sub_22E899710(uint64_t a1, uint64_t a2)
{
  return sub_22F2F25AC(*(_QWORD *)(a1 + 16), a2);
}

_QWORD *sub_22E899718(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 88 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2F2414((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(88 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E8997E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];

  v18[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v18[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v17 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v18[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v17) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v12 = &v18[v8];
          v7 = v17;
          v13 = &v18[v17 - 1];
          v14 = (_DWORD)v8 == (_DWORD)v17 || v12 >= v13;
          if (!v14)
          {
            v15 = v12 + 1;
            do
            {
              v16 = *(v15 - 1);
              *(v15 - 1) = *v13;
              *v13-- = v16;
              v14 = v15++ >= v13;
            }
            while (!v14);
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E8A52C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E8A52C8(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E8A5408(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E8A5350(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E8A5408(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E8A60C4(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E8A5408(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F462BD8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22E8A5408(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22E8997E4(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E8997E4(a1, v23, 0);
          case 0xE:
            result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E8A52C8(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6DC4((uint64_t)&v76, v74);
            result = sub_22E8A5350(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22E8A6188(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22E8A60C4(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22E8A5B60(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E8997E4(a1, v23, 0);
          case 0x12:
            return sub_22E8A52C8(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22E8997E4(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22E8A5B60(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22E8A52C8(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22E8A6188(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22E8997E4(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22E8A5B60(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22E8A52C8(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22E8A5408(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22E8A5408(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_124;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            while (1)
            {
              if (!*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16)
                && v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22E8A5B60(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              if (v51 == ++v50)
              {
                v48 = *(_QWORD *)(v47 + 16);
LABEL_124:
                if ((v48 & 0x3C0000000000000) == 0x80000000000000)
                {
                  v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
                  v55 = *v52;
                  v54 = (unint64_t *)(v52 + 2);
                  v53 = v55;
                  if (v55)
                  {
                    v56 = 8 * v53;
                    while ((sub_22E8A5B60(a1, *v54) & 1) != 0)
                    {
                      ++v54;
                      v56 -= 8;
                      if (!v56)
                        goto LABEL_129;
                    }
                    return 0;
                  }
                }
LABEL_129:
                v57 = sub_22F257D3C(v47);
                if (!v57)
                  return 1;
                result = sub_22E8997E4(a1, v57, 0);
                if ((_DWORD)result)
                  return 1;
                return result;
              }
            }
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22E8997E4(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22E8997E4(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22E8A5B60(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22E8A5408(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F462BD8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F462BD8
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22E8A5408(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22E8A5408(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22E8A5FF8(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22E8A5B60(a1, v24);
          case 0x2E:
            result = sub_22E8A60C4(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22E8A6188(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22E8A5B60(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _DWORD v45[2];
  uint64_t v46;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E8997E4(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E8997E4(a1, v13, 0);
      case 14:
        result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22E8A5FF8(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 15:
        result = sub_22E8A60C4(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E8997E4(a1, v13, 0);
      case 18:
        return sub_22E8A6124(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22E8997E4(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22E8A6124(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = v20 - 1;
        do
        {
          result = sub_22E8A5FF8(a1, v21);
          v18 = v22-- != 0;
          v23 = v18;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v23 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E8997E4(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E8A6124(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22E8A5B60(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v24 = *(_QWORD *)(v4 + 16);
        v25 = (unsigned __int16)(v24 >> 38);
        if (!(unsigned __int16)(v24 >> 38))
          goto LABEL_81;
        v26 = 8 * v25;
        v27 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E8997E4(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22E8997E4(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v34 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E8A5B60(a1, v34);
          if (!(_DWORD)result)
            return result;
        }
        v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v35)
          return 1;
        v36 = (uint64_t *)(v4 + 48);
        v37 = 8 * v35 - 8;
        do
        {
          v38 = *v36++;
          result = sub_22E8A5B60(a1, v38);
          if ((_DWORD)result)
            v39 = v37 == 0;
          else
            v39 = 1;
          v37 -= 8;
        }
        while (!v39);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v40 = *(_DWORD *)(v4 + 20);
        v46 = *(_QWORD *)(v4 + 40);
        v45[0] = 8;
        v45[1] = v40;
        return sub_22E8A5FF8(a1, (uint64_t)v45);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22E8A60C4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v41 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v41)
          return 1;
        v42 = v4 + 40;
        v43 = v41 - 1;
        do
        {
          result = sub_22E8A5FF8(a1, v42);
          v18 = v43-- != 0;
          v44 = v18;
          if (!(_DWORD)result)
            break;
          v42 += 24;
        }
        while ((v44 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22E8A5B60(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22E8A5B60(a1, *v27) & 1) == 0)
      return 0;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = (unsigned __int16)(v24 >> 38);
LABEL_81:
  if ((v24 & 0x3C0000000000000) == 0x80000000000000)
  {
    v28 = (_DWORD *)((v4 + 40 + 8 * v25 + 4 * ((v24 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v28;
    v30 = v28 + 2;
    v29 = v31;
    if (v31)
    {
      v32 = 8 * v29;
      while ((sub_22E8A5B60(a1, *v30) & 1) != 0)
      {
        ++v30;
        v32 -= 8;
        if (!v32)
          goto LABEL_86;
      }
      return 0;
    }
  }
LABEL_86:
  v33 = sub_22F257D3C(v4);
  if (!v33)
    return 1;
  v14 = v33;
LABEL_49:
  result = sub_22E8997E4(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E8A5FF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E8A5B60(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E8A60C4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E8997E4(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E8A5FF8(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E8A60C4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E8A6124(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E8A6124(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E8A6124(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E8A6124(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E8A5B60(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22E8A6188(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E8A5408(a1, *v6, v6 + 1);
      else
        result = sub_22E8A5B60(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E8A52C8(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E8A60C4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E8997E4(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E8A5FF8(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E8A62A0(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;

  v2 = *(_DWORD **)(a2 + 24);
  if (!v2)
    return 1;
  v5 = *v2;
  v4 = (uint64_t *)(v2 + 4);
  v3 = v5;
  if (!v5)
    return 1;
  v7 = &v4[v3];
  while (2)
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_10;
    switch(*(_DWORD *)(v8 + 8))
    {
      case 3:
        v89 = (_QWORD *)(v8 + 24);
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24 + 8 * *(unsigned int *)(v8 + 16)), 0);
        if (!(_DWORD)result)
          return result;
        v90 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v90)
          goto LABEL_10;
        v91 = 8 * v90;
        while ((sub_22E8997E4(a1, *v89, 0) & 1) != 0)
        {
          ++v89;
          v91 -= 8;
          if (!v91)
            goto LABEL_10;
        }
        return 0;
      case 4:
      case 7:
      case 0xC:
      case 0x13:
      case 0x15:
      case 0x23:
      case 0x3C:
      case 0x3D:
      case 0x46:
      case 0x4B:
        v10 = *(_QWORD *)(v8 + 16);
        goto LABEL_9;
      case 5:
        v141 = (_QWORD *)(v8 + 24);
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24 + 8 * *(unsigned int *)(v8 + 16)), 0);
        if (!(_DWORD)result)
          return result;
        v142 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v142)
          goto LABEL_10;
        v143 = 8 * v142;
        while ((sub_22E8997E4(a1, *v141, 0) & 1) != 0)
        {
          ++v141;
          v143 -= 8;
          if (!v143)
            goto LABEL_10;
        }
        return 0;
      case 6:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0);
        if (!(_DWORD)result)
          return result;
        v138 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v138)
          goto LABEL_10;
        v139 = (_QWORD *)(v8 + 40);
        v140 = 8 * v138;
        while ((sub_22E8997E4(a1, *v139, 0) & 1) != 0)
        {
          ++v139;
          v140 -= 8;
          if (!v140)
            goto LABEL_10;
        }
        return 0;
      case 0xE:
        v92 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v92)
          goto LABEL_10;
        v93 = v8 + 24;
        v94 = 8 * v92;
        v95 = (_QWORD *)(v8 + 24);
        do
        {
          if ((sub_22E8997E4(a1, *v95, 0) & 1) == 0)
            return 0;
          ++v95;
          v94 -= 8;
        }
        while (v94);
        v96 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v96)
          goto LABEL_10;
        v97 = 8 * v96;
        v98 = (_QWORD *)(v93 + 8 * v96);
        do
        {
          if ((sub_22E8997E4(a1, *v98, 0) & 1) == 0)
            return 0;
          ++v98;
          v97 -= 8;
        }
        while (v97);
        v99 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v99)
          goto LABEL_10;
        v100 = (_QWORD *)(v93 + 8 * v99 + 8 * v99);
        v101 = 8 * v99;
        do
        {
          if ((sub_22E8997E4(a1, *v100, 0) & 1) == 0)
            return 0;
          ++v100;
          v101 -= 8;
        }
        while (v101);
        v102 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v102)
          goto LABEL_10;
        v103 = (_QWORD *)(v93 + 8 * v102 + 8 * v102 + 8 * v102);
        v104 = 8 * v102;
        while ((sub_22E8997E4(a1, *v103, 0) & 1) != 0)
        {
          ++v103;
          v104 -= 8;
          if (!v104)
            goto LABEL_10;
        }
        return 0;
      case 0xF:
        v175 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v175)
          goto LABEL_10;
        v176 = v8 + 24;
        v177 = 8 * v175;
        v178 = (_QWORD *)(v8 + 24);
        do
        {
          if ((sub_22E8997E4(a1, *v178, 0) & 1) == 0)
            return 0;
          ++v178;
          v177 -= 8;
        }
        while (v177);
        v179 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v179)
          goto LABEL_10;
        v180 = 8 * v179;
        v181 = (_QWORD *)(v176 + 8 * v179);
        do
        {
          if ((sub_22E8997E4(a1, *v181, 0) & 1) == 0)
            return 0;
          ++v181;
          v180 -= 8;
        }
        while (v180);
        v182 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v182)
          goto LABEL_10;
        v183 = (_QWORD *)(v176 + 8 * v182 + 8 * v182);
        v184 = 8 * v182;
        do
        {
          if ((sub_22E8997E4(a1, *v183, 0) & 1) == 0)
            return 0;
          ++v183;
          v184 -= 8;
        }
        while (v184);
        v185 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v185)
          goto LABEL_10;
        v186 = (_QWORD *)(v176 + 8 * v185 + 8 * v185 + 8 * v185);
        v187 = 8 * v185;
        while ((sub_22E8997E4(a1, *v186, 0) & 1) != 0)
        {
          ++v186;
          v187 -= 8;
          if (!v187)
            goto LABEL_10;
        }
        return 0;
      case 0x12:
        v188 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v188)
          goto LABEL_10;
        v189 = (_QWORD *)(v8 + 40);
        v190 = 8 * v188;
        while ((sub_22E8997E4(a1, *v189, 0) & 1) != 0)
        {
          ++v189;
          v190 -= 8;
          if (!v190)
            goto LABEL_10;
        }
        return 0;
      case 0x14:
      case 0x58:
        v10 = *(_QWORD *)(v8 + 24);
        goto LABEL_9;
      case 0x16:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 16), 0);
        if (!(_DWORD)result)
          return result;
        v10 = *(_QWORD *)(v8 + 40);
        goto LABEL_9;
      case 0x18:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 16), 0);
        if (!(_DWORD)result)
          return result;
        v10 = *(_QWORD *)(v8 + 48);
        goto LABEL_9;
      case 0x1A:
        v197 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v197)
          goto LABEL_10;
        v198 = (_QWORD *)(v8 + 24);
        v199 = 8 * v197;
        while ((sub_22E8997E4(a1, *v198, 0) & 1) != 0)
        {
          ++v198;
          v199 -= 8;
          if (!v199)
            goto LABEL_10;
        }
        return 0;
      case 0x1B:
      case 0x1C:
      case 0x21:
      case 0x24:
      case 0x34:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3E:
      case 0x4E:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 16), 0);
        if (!(_DWORD)result)
          return result;
        v10 = *(_QWORD *)(v8 + 32);
        goto LABEL_9;
      case 0x1D:
        v44 = v8 + 40;
        v45 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v45)
          goto LABEL_75;
        v46 = 8 * v45;
        v47 = (_QWORD *)(v8 + 40);
        do
        {
          if ((sub_22E8997E4(a1, *v47, 0) & 1) == 0)
            return 0;
          ++v47;
          v46 -= 8;
        }
        while (v46);
LABEL_75:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0);
        if (!(_DWORD)result)
          return result;
        v48 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v48)
          goto LABEL_10;
        v49 = 8 * v48;
        v50 = (_QWORD *)(v44 + 8 * v48);
        do
        {
          if ((sub_22E8997E4(a1, *v50, 0) & 1) == 0)
            return 0;
          ++v50;
          v49 -= 8;
        }
        while (v49);
        v51 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v51)
          goto LABEL_10;
        v52 = (_QWORD *)(v44 + 8 * v51 + 8 * v51);
        v53 = 8 * v51;
        while ((sub_22E8997E4(a1, *v52, 0) & 1) != 0)
        {
          ++v52;
          v53 -= 8;
          if (!v53)
            goto LABEL_10;
        }
        return 0;
      case 0x1E:
        v86 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v86)
          goto LABEL_10;
        v87 = (_QWORD *)(v8 + 24);
        v88 = 8 * v86;
        while ((sub_22E8997E4(a1, *v87, 0) & 1) != 0)
        {
          ++v87;
          v88 -= 8;
          if (!v88)
            goto LABEL_10;
        }
        return 0;
      case 0x1F:
        v191 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v191)
          goto LABEL_10;
        v192 = (_QWORD *)(v8 + 104);
        v193 = 8 * v191;
        while ((sub_22E8997E4(a1, *v192, 0) & 1) != 0)
        {
          ++v192;
          v193 -= 8;
          if (!v193)
            goto LABEL_10;
        }
        return 0;
      case 0x22:
        v203 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v203)
          goto LABEL_10;
        v204 = (_QWORD *)(v8 + 80);
        v205 = 8 * v203;
        while ((sub_22E8997E4(a1, *v204, 0) & 1) != 0)
        {
          ++v204;
          v205 -= 8;
          if (!v205)
            goto LABEL_10;
        }
        return 0;
      case 0x25:
        if (!sub_22E8A52C8(a1, *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64)))
          return 0;
        v212 = *(_OWORD *)(v8 + 72);
        v213 = *(_QWORD *)(v8 + 88);
        if (!sub_22E8A5350(a1, (uint64_t *)&v212))
          return 0;
        v60 = v8 + 96;
        v61 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v61)
          goto LABEL_101;
        v62 = 8 * v61;
        v63 = (_QWORD *)(v8 + 96);
        do
        {
          if ((sub_22E8997E4(a1, *v63, 0) & 1) == 0)
            return 0;
          ++v63;
          v62 -= 8;
        }
        while (v62);
LABEL_101:
        if (!sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0)
          || !sub_22E8997E4(a1, *(_QWORD *)(v8 + 40), 0))
        {
          return 0;
        }
        v64 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v64)
          goto LABEL_10;
        v65 = 8 * v64;
        v66 = (_QWORD *)(v60 + 8 * v64);
        do
        {
          if ((sub_22E8997E4(a1, *v66, 0) & 1) == 0)
            return 0;
          ++v66;
          v65 -= 8;
        }
        while (v65);
        v67 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v67)
          goto LABEL_10;
        v68 = (_QWORD *)(v60 + 8 * v67 + 8 * v67);
        v69 = 8 * v67;
        do
        {
          if ((sub_22E8997E4(a1, *v68, 0) & 1) == 0)
            return 0;
          ++v68;
          v69 -= 8;
        }
        while (v69);
        v70 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v70)
          goto LABEL_10;
        v71 = (_QWORD *)(v60 + 8 * v70 + 8 * v70 + 8 * v70);
        v72 = 8 * v70;
        do
        {
          if ((sub_22E8997E4(a1, *v71, 0) & 1) == 0)
            return 0;
          ++v71;
          v72 -= 8;
        }
        while (v72);
        v73 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v73)
          goto LABEL_10;
        v74 = (_QWORD *)(v60 + 8 * v73 + 8 * v73 + 8 * v73 + 8 * v73);
        v75 = 8 * v73;
        do
        {
          if ((sub_22E8997E4(a1, *v74, 0) & 1) == 0)
            return 0;
          ++v74;
          v75 -= 8;
        }
        while (v75);
        v76 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v76)
          goto LABEL_10;
        v77 = (_QWORD *)(v60 + 8 * v76 + 8 * v76 + 8 * v76 + 8 * v76 + 8 * v76);
        v78 = 8 * v76;
        while ((sub_22E8997E4(a1, *v77, 0) & 1) != 0)
        {
          ++v77;
          v78 -= 8;
          if (!v78)
            goto LABEL_10;
        }
        return 0;
      case 0x27:
        v172 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v172)
          goto LABEL_10;
        v173 = (_QWORD *)(v8 + 24);
        v174 = 8 * v172;
        while ((sub_22E8997E4(a1, *v173, 0) & 1) != 0)
        {
          ++v173;
          v174 -= 8;
          if (!v174)
            goto LABEL_10;
        }
        return 0;
      case 0x29:
        v57 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v57)
          goto LABEL_10;
        v58 = (_QWORD *)(v8 + 32);
        v59 = 8 * v57;
        while ((sub_22E8997E4(a1, *v58, 0) & 1) != 0)
        {
          ++v58;
          v59 -= 8;
          if (!v59)
            goto LABEL_10;
        }
        return 0;
      case 0x2A:
        v54 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v54)
          goto LABEL_10;
        v55 = (_QWORD *)(v8 + 80);
        v56 = 8 * v54;
        while ((sub_22E8997E4(a1, *v55, 0) & 1) != 0)
        {
          ++v55;
          v56 -= 8;
          if (!v56)
            goto LABEL_10;
        }
        return 0;
      case 0x2B:
        v105 = v8 + 64;
        v106 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v106)
          goto LABEL_167;
        v107 = 8 * v106;
        v108 = (_QWORD *)(v8 + 64);
        do
        {
          if ((sub_22E8997E4(a1, *v108, 0) & 1) == 0)
            return 0;
          ++v108;
          v107 -= 8;
        }
        while (v107);
LABEL_167:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0);
        if (!(_DWORD)result)
          return result;
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 40), 0);
        if (!(_DWORD)result)
          return result;
        v109 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v109)
          goto LABEL_10;
        v110 = 8 * v109;
        v111 = (_QWORD *)(v105 + 8 * v109);
        do
        {
          if ((sub_22E8997E4(a1, *v111, 0) & 1) == 0)
            return 0;
          ++v111;
          v110 -= 8;
        }
        while (v110);
        v112 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v112)
          goto LABEL_10;
        v113 = (_QWORD *)(v105 + 8 * v112 + 8 * v112);
        v114 = 8 * v112;
        do
        {
          if ((sub_22E8997E4(a1, *v113, 0) & 1) == 0)
            return 0;
          ++v113;
          v114 -= 8;
        }
        while (v114);
        v115 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v115)
          goto LABEL_10;
        v116 = (_QWORD *)(v105 + 8 * v115 + 8 * v115 + 8 * v115);
        v117 = 8 * v115;
        do
        {
          if ((sub_22E8997E4(a1, *v116, 0) & 1) == 0)
            return 0;
          ++v116;
          v117 -= 8;
        }
        while (v117);
        v118 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v118)
          goto LABEL_10;
        v119 = (_QWORD *)(v105 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118);
        v120 = 8 * v118;
        while ((sub_22E8997E4(a1, *v119, 0) & 1) != 0)
        {
          ++v119;
          v120 -= 8;
          if (!v120)
            goto LABEL_10;
        }
        return 0;
      case 0x2C:
        v121 = v8 + 64;
        v122 = *(unsigned int *)(v8 + 16);
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 64 + 8 * v122 + 8 * v122 + 8 * v122 + 8 * v122 + 8 * v122), 0);
        if (!(_DWORD)result)
          return result;
        result = sub_22E8997E4(a1, *(_QWORD *)(v121+ 8 * *(unsigned int *)(v8 + 16)+ 8 * *(unsigned int *)(v8 + 16)+ 8 * *(unsigned int *)(v8 + 16)+ 8 * *(unsigned int *)(v8 + 16)+ 8 * *(unsigned int *)(v8 + 16)+ 8), 0);
        if (!(_DWORD)result)
          return result;
        v123 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v123)
          goto LABEL_194;
        v124 = 8 * v123;
        v125 = (_QWORD *)(v8 + 64);
        do
        {
          if ((sub_22E8997E4(a1, *v125, 0) & 1) == 0)
            return 0;
          ++v125;
          v124 -= 8;
        }
        while (v124);
LABEL_194:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0);
        if (!(_DWORD)result)
          return result;
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 40), 0);
        if (!(_DWORD)result)
          return result;
        v126 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v126)
          goto LABEL_10;
        v127 = 8 * v126;
        v128 = (_QWORD *)(v121 + 8 * v126);
        do
        {
          if ((sub_22E8997E4(a1, *v128, 0) & 1) == 0)
            return 0;
          ++v128;
          v127 -= 8;
        }
        while (v127);
        v129 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v129)
          goto LABEL_10;
        v130 = (_QWORD *)(v121 + 8 * v129 + 8 * v129);
        v131 = 8 * v129;
        do
        {
          if ((sub_22E8997E4(a1, *v130, 0) & 1) == 0)
            return 0;
          ++v130;
          v131 -= 8;
        }
        while (v131);
        v132 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v132)
          goto LABEL_10;
        v133 = (_QWORD *)(v121 + 8 * v132 + 8 * v132 + 8 * v132);
        v134 = 8 * v132;
        do
        {
          if ((sub_22E8997E4(a1, *v133, 0) & 1) == 0)
            return 0;
          ++v133;
          v134 -= 8;
        }
        while (v134);
        v135 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v135)
          goto LABEL_10;
        v136 = (_QWORD *)(v121 + 8 * v135 + 8 * v135 + 8 * v135 + 8 * v135);
        v137 = 8 * v135;
        while ((sub_22E8997E4(a1, *v136, 0) & 1) != 0)
        {
          ++v136;
          v137 -= 8;
          if (!v137)
            goto LABEL_10;
        }
        return 0;
      case 0x2E:
        v194 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v194)
          goto LABEL_10;
        v195 = (_QWORD *)(v8 + 136);
        v196 = 8 * v194;
        while ((sub_22E8997E4(a1, *v195, 0) & 1) != 0)
        {
          ++v195;
          v196 -= 8;
          if (!v196)
            goto LABEL_10;
        }
        return 0;
      case 0x35:
        v11 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v11)
          goto LABEL_10;
        v12 = 8 * v11;
        v13 = (_QWORD *)(v8 + 24);
        do
        {
          if ((sub_22E8997E4(a1, *v13, 0) & 1) == 0)
            return 0;
          ++v13;
          v12 -= 8;
        }
        while (v12);
        v14 = *(unsigned int *)(v8 + 16);
        v15 = (uint64_t *)(v8 + 24 + 8 * v14);
        v212 = (unint64_t)v15;
        if ((_DWORD)v14)
        {
          v16 = 0;
          v17 = &v15[v14];
          while (1)
          {
            if ((v16 & 3) != 0)
            {
              if ((v16 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                v18 = (_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 40);
              else
                v18 = (_QWORD *)sub_22F3AC1A8(*v15);
              if ((sub_22E8997E4(a1, *v18, 0) & 1) == 0)
                return 0;
              if (v16 < 4)
                sub_22F3F2FE0((uint64_t)&v212, 1);
              else
                sub_22F0D8720((uint64_t)&v212);
            }
            else
            {
              if (!sub_22E8997E4(a1, *v15, 0))
                return 0;
              *(_QWORD *)&v212 = v15 + 1;
            }
            v16 = *((_QWORD *)&v212 + 1);
            v15 = (uint64_t *)v212;
            if ((uint64_t *)v212 == v17 && *((_QWORD *)&v212 + 1) == 0)
              goto LABEL_10;
          }
        }
        goto LABEL_10;
      case 0x3F:
        v79 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v79)
          goto LABEL_10;
        v80 = v8 + 24;
        v81 = 8 * v79;
        v82 = (_QWORD *)(v8 + 24);
        do
        {
          if ((sub_22E8997E4(a1, *v82, 0) & 1) == 0)
            return 0;
          ++v82;
          v81 -= 8;
        }
        while (v81);
        v83 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v83)
          goto LABEL_10;
        v84 = 8 * v83;
        v85 = (_QWORD *)(v80 + 8 * v83);
        while ((sub_22E8997E4(a1, *v85, 0) & 1) != 0)
        {
          ++v85;
          v84 -= 8;
          if (!v84)
            goto LABEL_10;
        }
        return 0;
      case 0x42:
        if (!sub_22E8A52C8(a1, *(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72)))
          return 0;
        v212 = *(_OWORD *)(v8 + 80);
        v213 = *(_QWORD *)(v8 + 96);
        if (!sub_22E8A5350(a1, (uint64_t *)&v212))
          return 0;
        v144 = v8 + 104;
        v145 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v145)
          goto LABEL_231;
        v146 = 8 * v145;
        v147 = (_QWORD *)(v8 + 104);
        do
        {
          if ((sub_22E8997E4(a1, *v147, 0) & 1) == 0)
            return 0;
          ++v147;
          v146 -= 8;
        }
        while (v146);
LABEL_231:
        if (!sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0)
          || !sub_22E8997E4(a1, *(_QWORD *)(v8 + 40), 0))
        {
          return 0;
        }
        v148 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v148)
          goto LABEL_249;
        v149 = 8 * v148;
        v150 = (_QWORD *)(v144 + 8 * v148);
        do
        {
          if ((sub_22E8997E4(a1, *v150, 0) & 1) == 0)
            return 0;
          ++v150;
          v149 -= 8;
        }
        while (v149);
        v151 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v151)
          goto LABEL_249;
        v152 = (_QWORD *)(v144 + 8 * v151 + 8 * v151);
        v153 = 8 * v151;
        do
        {
          if ((sub_22E8997E4(a1, *v152, 0) & 1) == 0)
            return 0;
          ++v152;
          v153 -= 8;
        }
        while (v153);
        v154 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v154)
          goto LABEL_249;
        v155 = (_QWORD *)(v144 + 8 * v154 + 8 * v154 + 8 * v154);
        v156 = 8 * v154;
        do
        {
          if ((sub_22E8997E4(a1, *v155, 0) & 1) == 0)
            return 0;
          ++v155;
          v156 -= 8;
        }
        while (v156);
        v157 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v157)
        {
LABEL_249:
          if (*(_DWORD *)(v8 + 48) == 1)
          {
            v160 = *(unsigned int *)(v8 + 16);
            if ((_DWORD)v160)
            {
              v161 = (_QWORD *)(v144 + 8 * v160 + 8 * v160 + 8 * v160 + 8 * v160 + 8 * v160);
              v162 = 8 * v160;
              do
              {
                if ((sub_22E8997E4(a1, *v161, 0) & 1) == 0)
                  return 0;
                ++v161;
                v162 -= 8;
              }
              while (v162);
              v163 = *(unsigned int *)(v8 + 16);
              if ((_DWORD)v163)
              {
                v164 = (_QWORD *)(v144 + 8 * v163 + 8 * v163 + 8 * v163 + 8 * v163 + 8 * v163 + 8 * v163);
                v165 = 8 * v163;
                do
                {
                  if ((sub_22E8997E4(a1, *v164, 0) & 1) == 0)
                    return 0;
                  ++v164;
                  v165 -= 8;
                }
                while (v165);
                v166 = *(unsigned int *)(v8 + 16);
                if ((_DWORD)v166)
                {
                  v167 = (_QWORD *)(v144 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166);
                  v168 = 8 * v166;
                  while ((sub_22E8997E4(a1, *v167, 0) & 1) != 0)
                  {
                    ++v167;
                    v168 -= 8;
                    if (!v168)
                      goto LABEL_10;
                  }
                  return 0;
                }
              }
            }
          }
LABEL_10:
          if (++v4 == v7)
            return 1;
          continue;
        }
        v158 = (_QWORD *)(v144 + 8 * v157 + 8 * v157 + 8 * v157 + 8 * v157);
        v159 = 8 * v157;
        while ((sub_22E8997E4(a1, *v158, 0) & 1) != 0)
        {
          ++v158;
          v159 -= 8;
          if (!v159)
            goto LABEL_249;
        }
        return 0;
      case 0x47:
        result = sub_22E8997E4(a1, *(_QWORD *)(v8 + 16), 0);
        if (!(_DWORD)result)
          return result;
        v10 = *(_QWORD *)(v8 + 64);
LABEL_9:
        if ((sub_22E8997E4(a1, v10, 0) & 1) != 0)
          goto LABEL_10;
        return 0;
      case 0x49:
        v206 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v206)
          goto LABEL_10;
        v207 = (_QWORD *)(v8 + 24);
        v208 = 8 * v206;
        while ((sub_22E8997E4(a1, *v207, 0) & 1) != 0)
        {
          ++v207;
          v208 -= 8;
          if (!v208)
            goto LABEL_10;
        }
        return 0;
      case 0x4C:
        v169 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v169)
          goto LABEL_10;
        v170 = (_QWORD *)(v8 + 24);
        v171 = 8 * v169;
        while ((sub_22E8997E4(a1, *v170, 0) & 1) != 0)
        {
          ++v170;
          v171 -= 8;
          if (!v171)
            goto LABEL_10;
        }
        return 0;
      case 0x4D:
        if (!sub_22E8A52C8(a1, *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64)))
          return 0;
        v212 = *(_OWORD *)(v8 + 72);
        v213 = *(_QWORD *)(v8 + 88);
        if (!sub_22E8A5350(a1, (uint64_t *)&v212))
          return 0;
        v28 = v8 + 96;
        v29 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v29)
          goto LABEL_52;
        v30 = 8 * v29;
        v31 = (_QWORD *)(v8 + 96);
        do
        {
          if ((sub_22E8997E4(a1, *v31, 0) & 1) == 0)
            return 0;
          ++v31;
          v30 -= 8;
        }
        while (v30);
LABEL_52:
        if (!sub_22E8997E4(a1, *(_QWORD *)(v8 + 24), 0)
          || !sub_22E8997E4(a1, *(_QWORD *)(v8 + 40), 0))
        {
          return 0;
        }
        v32 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v32)
          goto LABEL_10;
        v33 = 8 * v32;
        v34 = (_QWORD *)(v28 + 8 * v32);
        do
        {
          if ((sub_22E8997E4(a1, *v34, 0) & 1) == 0)
            return 0;
          ++v34;
          v33 -= 8;
        }
        while (v33);
        v35 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v35)
          goto LABEL_10;
        v36 = (_QWORD *)(v28 + 8 * v35 + 8 * v35);
        v37 = 8 * v35;
        do
        {
          if ((sub_22E8997E4(a1, *v36, 0) & 1) == 0)
            return 0;
          ++v36;
          v37 -= 8;
        }
        while (v37);
        v38 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v38)
          goto LABEL_10;
        v39 = (_QWORD *)(v28 + 8 * v38 + 8 * v38 + 8 * v38);
        v40 = 8 * v38;
        do
        {
          if ((sub_22E8997E4(a1, *v39, 0) & 1) == 0)
            return 0;
          ++v39;
          v40 -= 8;
        }
        while (v40);
        v41 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v41)
          goto LABEL_10;
        v42 = (_QWORD *)(v28 + 8 * v41 + 8 * v41 + 8 * v41 + 8 * v41);
        v43 = 8 * v41;
        while ((sub_22E8997E4(a1, *v42, 0) & 1) != 0)
        {
          ++v42;
          v43 -= 8;
          if (!v43)
            goto LABEL_10;
        }
        return 0;
      case 0x51:
        v20 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v20)
          goto LABEL_10;
        v21 = (_QWORD *)(v8 + 104);
        v22 = 8 * v20;
        while ((sub_22E8997E4(a1, *v21, 0) & 1) != 0)
        {
          ++v21;
          v22 -= 8;
          if (!v22)
            goto LABEL_10;
        }
        return 0;
      case 0x59:
        v209 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v209)
          goto LABEL_10;
        v210 = (_QWORD *)(v8 + 80);
        v211 = 8 * v209;
        while ((sub_22E8997E4(a1, *v210, 0) & 1) != 0)
        {
          ++v210;
          v211 -= 8;
          if (!v211)
            goto LABEL_10;
        }
        return 0;
      case 0x5A:
        v200 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v200)
          goto LABEL_10;
        v201 = (_QWORD *)(v8 + 80);
        v202 = 8 * v200;
        while ((sub_22E8997E4(a1, *v201, 0) & 1) != 0)
        {
          ++v201;
          v202 -= 8;
          if (!v202)
            goto LABEL_10;
        }
        return 0;
      case 0x5B:
        v23 = *(unsigned int *)(v8 + 16);
        if (!(_DWORD)v23)
          goto LABEL_10;
        v24 = 0;
        v25 = v8 + 24;
        v26 = 2 * v23;
        while (1)
        {
          v27 = *(_QWORD *)(v25 + 8 * (v24 + 1));
          result = sub_22E8997E4(a1, *(_QWORD *)(v25 + 8 * v24), 0);
          if (!(_DWORD)result)
            return result;
          if ((sub_22E8997E4(a1, v27, 0) & 1) == 0)
            return 0;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_10;
        }
      default:
        goto LABEL_10;
    }
  }
}

_BYTE *sub_22E8A7378(_BYTE *result)
{
  unint64_t v1;
  unint64_t v2;
  _BYTE *i;
  uint64_t v4;

  if (!result || *result != 101)
    return 0;
  v1 = *(unsigned int *)result;
  v2 = v1 >> 8;
  if (v1 >= 0x100)
  {
    v4 = 8 * v2;
    for (i = result + 16; *(_WORD *)(*(_QWORD *)i + 32) != 39; i += 8)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  else
  {
    i = result + 16;
  }
  if (i == &result[8 * v2 + 16])
    return 0;
  return result;
}

uint64_t sub_22E8A73DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E8997E4(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E8997E4(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22E8A74D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_22E8A7558((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_22E8A7558(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *i;
  char *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_44:
      sub_22E3B3F8C();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v43 = operator new(0x1000uLL);
      sub_22F2D2D80(a1, &v43);
      return;
    }
    *(_QWORD *)&v43 = operator new(0x1000uLL);
    sub_22F2D2EA4((void **)a1, &v43);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_44;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v45 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_44;
  *(_QWORD *)&v43 = operator new(8 * v38);
  *((_QWORD *)&v43 + 1) = v43 + v28;
  *(_QWORD *)&v44 = v43 + v28;
  *((_QWORD *)&v44 + 1) = v43 + 8 * v38;
  v42 = operator new(0x1000uLL);
  sub_22F2D2D80((uint64_t)&v43, &v42);
  for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_22F2D2EA4((void **)&v43, i))
    --i;
  v40 = *(char **)a1;
  v41 = v44;
  *(_OWORD *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v41;
  if (v40)
    operator delete(v40);
}

uint64_t sub_22E8A77E8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_22E8A78AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 190)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E8A790C(uint64_t a1, uint64_t *a2, _QWORD **a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  int v58;
  _QWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  _QWORD *v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  int v106;
  int v107;
  _QWORD *v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  int v115;
  int v116;
  _BOOL4 v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  int v129;
  int v130;
  _BOOL4 v131;
  _QWORD *v132;
  int v133;
  int v134;
  int v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  int v144;
  int v145;
  __int128 *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  int v153;
  int v154;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  int v160;
  int v161;
  _OWORD *v163;
  uint64_t *v164;
  _QWORD *v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  _OWORD *v170;
  _OWORD *v171;
  _QWORD *v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  int64_t v180;
  __int128 *v181;
  unint64_t v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;

__n128 sub_22E8A8470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6)
{
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  __n128 result;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  sub_22E8A89D8(a1, a2, a3, a4, a6);
  v12 = *a6;
  sub_22F0D5A50(*(_QWORD *)a5);
  v14 = v13;
  sub_22F0D5A50(*(_QWORD *)a4);
  if (sub_22F1E3C34(v12, v14, v15))
  {
    v17 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v17;
    v18 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a5 + 8) = v18;
    v19 = *a6;
    sub_22F0D5A50(*(_QWORD *)a4);
    v21 = v20;
    sub_22F0D5A50(*(_QWORD *)a3);
    if (sub_22F1E3C34(v19, v21, v22))
    {
      v23 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v23;
      v24 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a4 + 8) = v24;
      v25 = *a6;
      sub_22F0D5A50(*(_QWORD *)a3);
      v27 = v26;
      sub_22F0D5A50(*(_QWORD *)a2);
      if (sub_22F1E3C34(v25, v27, v28))
      {
        v29 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v29;
        v30 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a3 + 8) = v30;
        v31 = *a6;
        sub_22F0D5A50(*(_QWORD *)a2);
        v33 = v32;
        sub_22F0D5A50(*(_QWORD *)a1);
        if (sub_22F1E3C34(v31, v33, v34))
        {
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v35;
          result = *(__n128 *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(__n128 *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

__n128 sub_22E8A8604(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  __n128 result;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  __n128 v27;
  _QWORD *v28;
  int v29;
  int v30;
  int v31;

  v8 = *a4;
  sub_22F0D5A50(*(_QWORD *)a2);
  v10 = v9;
  sub_22F0D5A50(*(_QWORD *)a1);
  LOBYTE(v8) = sub_22F1E3C34(v8, v10, v11);
  v12 = *a4;
  sub_22F0D5A50(*(_QWORD *)a3);
  v14 = v13;
  sub_22F0D5A50(*(_QWORD *)a2);
  v16 = sub_22F1E3C34(v12, v14, v15);
  if ((v8 & 1) != 0)
  {
    v18 = (__n128 *)(a1 + 8);
    v19 = *(_QWORD *)a1;
    if (v16)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v19;
      v27 = *v18;
      *v18 = *(__n128 *)(a2 + 8);
      *(__n128 *)(a2 + 8) = v27;
      v28 = *a4;
      sub_22F0D5A50(*(_QWORD *)a3);
      v30 = v29;
      sub_22F0D5A50(*(_QWORD *)a2);
      if (!sub_22F1E3C34(v28, v30, v31))
        return result;
      v18 = (__n128 *)(a2 + 8);
      v19 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v19;
    result = *v18;
    *v18 = *(__n128 *)(a3 + 8);
    *(__n128 *)(a3 + 8) = result;
  }
  else if (v16)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v20;
    v21 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = v21;
    v22 = *a4;
    sub_22F0D5A50(*(_QWORD *)a2);
    v24 = v23;
    sub_22F0D5A50(*(_QWORD *)a1);
    if (sub_22F1E3C34(v22, v24, v25))
    {
      v26 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v26;
      result = *(__n128 *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(__n128 *)(a2 + 8) = result;
    }
  }
  return result;
}

BOOL sub_22E8A87A0(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v4;
  unint64_t v6;
  _BOOL8 result;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      sub_22F0D5A50(*(_QWORD *)(a2 - 24));
      v10 = v9;
      sub_22F0D5A50(*(_QWORD *)a1);
      if (sub_22F1E3C34(v8, v10, v11))
      {
        v12 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(v4 - 24);
        *(_QWORD *)(v4 - 24) = v12;
        v13 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v4 - 16);
        *(_OWORD *)(v4 - 16) = v13;
      }
      return 1;
    case 3uLL:
      sub_22E8A8604(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_22E8A89D8(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_22E8A8470(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v14 = (uint64_t *)(a1 + 48);
      sub_22E8A8604(a1, a1 + 24, a1 + 48, a3);
      v15 = a1 + 72;
      if (a1 + 72 == v4)
        return 1;
      v16 = 0;
      v17 = 0;
      v30 = v4;
      break;
  }
  while (1)
  {
    v18 = *a3;
    sub_22F0D5A50(*(_QWORD *)v15);
    v20 = v19;
    sub_22F0D5A50(*v14);
    if (sub_22F1E3C34(v18, v20, v21))
    {
      v22 = *(_QWORD *)v15;
      v31 = *(_OWORD *)(v15 + 8);
      v23 = v16;
      while (1)
      {
        v24 = a1 + v23;
        *(_QWORD *)(v24 + 72) = *(_QWORD *)(a1 + v23 + 48);
        *(_OWORD *)(v24 + 80) = *(_OWORD *)(a1 + v23 + 56);
        if (v23 == -48)
          break;
        v25 = *a3;
        sub_22F0D5A50(v22);
        v27 = v26;
        sub_22F0D5A50(*(_QWORD *)(v24 + 24));
        v23 -= 24;
        if (!sub_22F1E3C34(v25, v27, v28))
        {
          v29 = (_QWORD *)(a1 + v23 + 72);
          goto LABEL_12;
        }
      }
      v29 = (_QWORD *)a1;
LABEL_12:
      v4 = v30;
      *v29 = v22;
      *(_OWORD *)(v24 + 56) = v31;
      if (++v17 == 8)
        return v15 + 24 == v30;
    }
    v14 = (uint64_t *)v15;
    v16 += 24;
    v15 += 24;
    if (v15 == v4)
      return 1;
  }
}

__n128 sub_22E8A89D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  __n128 result;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  sub_22E8A8604(a1, a2, a3, a5);
  v10 = *a5;
  sub_22F0D5A50(*(_QWORD *)a4);
  v12 = v11;
  sub_22F0D5A50(*(_QWORD *)a3);
  if (sub_22F1E3C34(v10, v12, v13))
  {
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v15;
    v16 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = v16;
    v17 = *a5;
    sub_22F0D5A50(*(_QWORD *)a3);
    v19 = v18;
    sub_22F0D5A50(*(_QWORD *)a2);
    if (sub_22F1E3C34(v17, v19, v20))
    {
      v21 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v21;
      v22 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = v22;
      v23 = *a5;
      sub_22F0D5A50(*(_QWORD *)a2);
      v25 = v24;
      sub_22F0D5A50(*(_QWORD *)a1);
      if (sub_22F1E3C34(v23, v25, v26))
      {
        v27 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v27;
        result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

unsigned int *sub_22E8A8B18(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  unsigned int v40[25];
  unsigned int v41;
  uint64_t v42;

  v42 = 0;
  v41 = 0;
  v6 = *a2;
  if (v6 == 107)
  {
    v7 = (uint64_t *)(a2 + 24);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_DWORD *)(v8 + 16);
    if (v8)
      v10 = v9 == 11;
    else
      v10 = 0;
    if (v10)
    {
      v13 = (uint64_t *)(a2 + 16);
      v14 = (uint64_t *)(a2 + 24);
      if (((*(_DWORD *)(v8 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_34;
    }
    else if (v8 && v9 == 44)
    {
      v11 = sub_22F114198(*(_QWORD *)(v8 + 24));
      if ((*(_BYTE *)(v11 + 74) & 1) == 0 && *(_QWORD *)(v11 + 128) <= 7uLL)
      {
        v13 = (uint64_t *)(a2 + 16);
        v14 = v7;
        goto LABEL_34;
      }
      v12 = sub_22F114198(*(_QWORD *)(v8 + 24));
      v13 = (uint64_t *)(a2 + 16);
      v14 = v7;
      if ((*(_QWORD *)(v12 + 72) & 0x8000000000) != 0)
      {
LABEL_34:
        sub_22EFF605C(*v14);
        v26 = v25;
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v28 = *(_DWORD *)(v27 + 16);
        if (v27)
          v29 = v28 == 11;
        else
          v29 = 0;
        if (v29)
        {
          if (((*(_DWORD *)(v27 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          {
LABEL_46:
            sub_22F0D4E74(*v7);
            v42 = v31;
            v32 = 2;
LABEL_55:
            v41 = v32;
            goto LABEL_56;
          }
        }
        else if (v27 && v28 == 44)
        {
          v30 = sub_22F114198(*(_QWORD *)(v27 + 24));
          if ((*(_BYTE *)(v30 + 74) & 1) == 0 && *(_QWORD *)(v30 + 128) <= 7uLL
            || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v27 + 24)) + 72) & 0x8000000000) != 0)
          {
            goto LABEL_46;
          }
        }
        else if (v28 != 9)
        {
          goto LABEL_46;
        }
        v7 = v13;
        goto LABEL_46;
      }
    }
    else
    {
      v13 = (uint64_t *)(a2 + 16);
      v14 = (uint64_t *)(a2 + 24);
      if (v9 != 9)
        goto LABEL_34;
    }
    v14 = v13;
    goto LABEL_34;
  }
  if ((v6 & 0xFE) == 0x70)
  {
    v15 = (*(_DWORD *)a2 >> 18) & 0x3F;
    v16 = v15 > 0x1A;
    v17 = (1 << v15) & 0x6000060;
    if (!v16 && v17 != 0)
    {
      v19 = (uint64_t *)(a2 + 24);
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v21 = *(_DWORD *)(v20 + 16);
      if (v20)
        v22 = v21 == 11;
      else
        v22 = 0;
      if (v22)
      {
        if (((*(_DWORD *)(v20 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        {
LABEL_53:
          v24 = *v19;
          goto LABEL_54;
        }
      }
      else if (v20 && v21 == 44)
      {
        v23 = sub_22F114198(*(_QWORD *)(v20 + 24));
        if ((*(_BYTE *)(v23 + 74) & 1) == 0 && *(_QWORD *)(v23 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v20 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_53;
        }
      }
      else if (v21 != 9)
      {
        goto LABEL_53;
      }
      v19 = (uint64_t *)(a2 + 16);
      goto LABEL_53;
    }
LABEL_48:
    v26 = 0;
    goto LABEL_56;
  }
  if (v6 == 233)
  {
    if ((a2[2] & 0x70) == 0)
    {
      v24 = *((_QWORD *)a2 + 2);
LABEL_54:
      sub_22EFF605C(v24);
      v26 = v33;
      sub_22F0D4E74(v24);
      v42 = v34;
      v32 = 1;
      goto LABEL_55;
    }
    goto LABEL_48;
  }
  if ((v6 + 21) < 0x7Bu)
    goto LABEL_48;
  sub_22EFF605C((uint64_t)a2);
  v26 = v38;
  sub_22F0D4E74((uint64_t)a2);
  v42 = v39;
LABEL_56:
  if (a3)
    v35 = 6150;
  else
    v35 = 7107;
  sub_22E8FCA40(*(_QWORD **)(a1 + 8), v26, v35, 0, (uint64_t)v40);
  v36 = sub_22E89519C((uint64_t)v40, &v41);
  sub_22E8906A0(v36, &v42);
  return sub_22E903BEC(v40);
}

uint64_t sub_22E8A8E54(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (v2)
  {
    v4 = 88 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_22E89277C(v5);
      v5 += 11;
      v4 -= 88;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 88 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

void sub_22E8A8ECC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8A8EE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8[24];
  uint64_t v9;
  unsigned __int8 v10;

  v10 = a3;
  result = sub_22E8A903C(a2);
  if ((result & 1) == 0)
  {
    sub_22F0D4E74(a2);
    v9 = v6;
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(a2 + 4), 0x1B7Cu, 0, (uint64_t)v8);
    v7 = sub_22E8906A0((uint64_t)v8, &v9);
    sub_22E894E38(v7, &v10);
    return (uint64_t)sub_22E903BEC(v8);
  }
  return result;
}

uint64_t sub_22E8A8F58(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8[24];
  uint64_t v9;
  unsigned __int8 v10;

  v10 = a3;
  result = sub_22E8A903C(a2);
  if ((result & 1) == 0)
  {
    sub_22F0D4E74(a2);
    v9 = v6;
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(a2 + 4), 0x18D1u, 0, (uint64_t)v8);
    v7 = sub_22E8906A0((uint64_t)v8, &v9);
    sub_22E894E38(v7, &v10);
    return (uint64_t)sub_22E903BEC(v8);
  }
  return result;
}

uint64_t sub_22E8A8FD0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6[24];
  uint64_t v7;

  result = sub_22E8A903C(a2);
  if ((result & 1) == 0)
  {
    sub_22F0D4E74(a2);
    v7 = v5;
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(a2 + 4), 0x18D2u, 0, (uint64_t)v6);
    sub_22E8906A0((uint64_t)v6, &v7);
    return (uint64_t)sub_22E903BEC(v6);
  }
  return result;
}

uint64_t sub_22E8A903C(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_22EFF605C(a1);
  if ((v2 & 0x80000000) == 0)
  {
    sub_22F0D492C(a1);
    v11 = v13;
    v3 = v15;
    v12 = v14;
    v4 = v16;
    v6 = *((_QWORD *)&v13 + 1);
    v5 = (uint64_t *)v13;
    if ((_QWORD)v13 == v15 && *((_QWORD *)&v13 + 1) == v16)
      return 0;
    while (1)
    {
      v8 = (unsigned __int8 **)v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (unsigned __int8 **)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (unsigned __int8 **)sub_22F3AC1A8(*v5);
      }
      v9 = *v8;
      if (v9)
      {
        if (*v9 - 102 <= 0x84 && (sub_22E8A903C() & 1) != 0)
          break;
      }
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v11);
        else
          sub_22F3F2FE0((uint64_t)&v11, 1);
      }
      else
      {
        *(_QWORD *)&v11 = v5 + 1;
      }
      v6 = *((_QWORD *)&v11 + 1);
      v5 = (uint64_t *)v11;
      if (v11 == __PAIR128__(v4, v3))
        return 0;
    }
  }
  return 1;
}

void sub_22E8A913C(_QWORD *a1, _WORD *a2)
{
  uint64_t v3;
  const char **v4;
  uint64_t *v5;
  const char *v6;
  size_t v7;
  void *v8;
  __int16 *v9;
  llvm::raw_ostream *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  void *v14;
  size_t v15;
  llvm::raw_ostream *v16;
  const char *p_p;
  llvm::raw_ostream *v18;
  _WORD *v19;
  __int16 v20;
  void *__p;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = MEMORY[0x24BED83D8] + 16;
  v31 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  if (*a2)
  {
    v3 = 16 * (unsigned __int16)*a2;
    v4 = (const char **)(a2 + 20);
    do
    {
      switch(*((_DWORD *)v4 - 2))
      {
        case 2:
          if ((unint64_t)(v26 - (_QWORD)v27) > 1)
          {
            *(_WORD *)v27 = 9083;
            v27 += 2;
            v16 = (llvm::raw_ostream *)&v23;
          }
          else
          {
            v16 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v23, "{#");
          }
          sub_22E8A913C(&__p, *v4);
          if (v22 >= 0)
            p_p = (const char *)&__p;
          else
            p_p = (const char *)__p;
          v18 = (llvm::raw_ostream *)llvm::raw_ostream::write(v16, p_p);
          v19 = (_WORD *)*((_QWORD *)v18 + 4);
          if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
          {
            *v19 = 32035;
            *((_QWORD *)v18 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v18, "#}");
          }
          if (v22 < 0)
            operator delete(__p);
          break;
        case 3:
        case 6:
          if ((unint64_t)(v26 - (_QWORD)v27) > 1)
          {
            *(_WORD *)v27 = 9020;
            v27 += 2;
            v5 = &v23;
          }
          else
          {
            v5 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v23, "<#");
          }
          v6 = *v4;
          if (*v4)
          {
            v7 = strlen(*v4);
            v8 = (void *)v5[4];
            if (v7 <= v5[3] - (uint64_t)v8)
            {
              if (v7)
              {
                memcpy(v8, v6, v7);
                v5[4] += v7;
              }
            }
            else
            {
              v5 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v5, v6);
            }
          }
          v9 = (__int16 *)v5[4];
          if ((unint64_t)(v5[3] - (_QWORD)v9) <= 1)
          {
            v10 = (llvm::raw_ostream *)v5;
            v11 = "#>";
            goto LABEL_18;
          }
          v20 = 15907;
          goto LABEL_41;
        case 4:
        case 5:
          if ((unint64_t)(v26 - (_QWORD)v27) > 1)
          {
            *(_WORD *)v27 = 9051;
            v27 += 2;
            v5 = &v23;
          }
          else
          {
            v5 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v23, "[#");
          }
          v12 = *v4;
          if (*v4)
          {
            v13 = strlen(*v4);
            v14 = (void *)v5[4];
            if (v13 <= v5[3] - (uint64_t)v14)
            {
              if (v13)
              {
                memcpy(v14, v12, v13);
                v5[4] += v13;
              }
            }
            else
            {
              v5 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v5, v12);
            }
          }
          v9 = (__int16 *)v5[4];
          if ((unint64_t)(v5[3] - (_QWORD)v9) <= 1)
          {
            v10 = (llvm::raw_ostream *)v5;
            v11 = "#]";
            goto LABEL_18;
          }
          v20 = 23843;
LABEL_41:
          *v9 = v20;
          v5[4] += 2;
          break;
        default:
          if (!*v4)
            break;
          v15 = strlen(*v4);
          if (v15 <= v26 - (uint64_t)v27)
          {
            if (v15)
            {
              memcpy(v27, *v4, v15);
              v27 += v15;
            }
          }
          else
          {
            v10 = (llvm::raw_ostream *)&v23;
            v11 = *v4;
LABEL_18:
            llvm::raw_ostream::write(v10, v11);
          }
          break;
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
}

uint64_t sub_22E8A94E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  _DWORD *v30;
  const char *v31;
  size_t v32;
  unsigned int v33;
  llvm::raw_ostream *v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unsigned int *v40;
  const void *v41;
  size_t v42;
  unsigned int v43;
  void *v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  unsigned int *v52;
  const void *v53;
  size_t v54;
  unsigned int v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  const char *v59;
  size_t v60;
  const char *v61[4];
  __int16 v62;
  _BYTE v63[24];
  uint64_t v64;
  char *v65;
  const char **v66;
  unint64_t v67;
  void *v68;
  __int128 v69;
  _BYTE v70[128];
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[4];

  v73[2] = *MEMORY[0x24BDAC8D0];
  v67 = a2;
  if ((*(_WORD *)(a2 + 8) & 0x7Fu) - 13 > 0x3D)
    return 0;
  v4 = a2;
  v6 = sub_22F2F2BE4(a1, (uint64_t *)&v67);
  v2 = v6[1];
  if (v6[2])
    return v2;
  if (v2)
    return 0;
  v7 = v6;
  v8 = 0;
  v71 = v73;
  v72 = 0x200000000;
  do
  {
    v9 = *(_WORD *)(v4 + 8) & 0x7F;
    v10 = v9 > 0x18 || ((1 << v9) & 0x1000006) == 0;
    if (!v10 || (v9 - 52) < 6)
      break;
    if ((v9 - 13) <= 0x3D)
    {
      switch(v9)
      {
        case 16:
        case 24:
          v12 = -48;
          break;
        case 71:
          v12 = -56;
          break;
        case 70:
          v12 = -64;
          break;
        default:
          v13 = (v9 - 33) >= 5 ? -48 : -64;
          v12 = (v9 - 52) >= 6 ? v13 : -72;
          break;
      }
      v14 = *(_QWORD *)(v4 + v12 + 40);
      if (v14 >= 8 && (v14 & 7) == 0)
      {
        if (v8 >= HIDWORD(v72))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = v72;
        }
        v71[v8] = v4;
        v8 = v72 + 1;
        LODWORD(v72) = v72 + 1;
        v9 = *(_WORD *)(v4 + 8) & 0x7F;
      }
    }
    v15 = -40;
    if (v9 > 70)
    {
      if (v9 != 83)
      {
        if (v9 == 71)
        {
          v15 = -56;
        }
        else if (v9 != 81)
        {
          goto LABEL_44;
        }
      }
    }
    else
    {
      if (v9 > 0x18)
        goto LABEL_43;
      if (v9 == 16)
        goto LABEL_36;
      if (((1 << v9) & 0x1066) != 0)
        goto LABEL_50;
      if (v9 == 24)
      {
LABEL_36:
        v15 = -48;
      }
      else
      {
LABEL_43:
        if (v9 != 70)
        {
LABEL_44:
          v16 = v9 - 52;
          if ((v9 - 33) >= 5)
            v17 = -48;
          else
            v17 = -64;
          if (v16 >= 6)
            v15 = v17;
          else
            v15 = -72;
          goto LABEL_50;
        }
        v15 = -64;
      }
    }
LABEL_50:
    v18 = *(_QWORD *)(v4 + v15 + 16);
    v4 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 4) != 0)
      v4 = *(_QWORD *)v4;
  }
  while (v4);
  v67 = v4;
  v68 = v70;
  v69 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v63, (uint64_t)&v68);
  if (!(_DWORD)v72)
  {
LABEL_131:
    v56 = *(_QWORD *)(a1 + 24);
    v58 = *v66;
    v57 = v66[1];
    v62 = 261;
    v61[0] = v58;
    v61[1] = v57;
    v59 = sub_22F2F27DC(v56, v61);
    v60 = strlen(v59);
    v7[1] = v59;
    v7[2] = v60;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v63);
    if (v68 != v70)
      free(v68);
    v2 = v7[1];
    goto LABEL_129;
  }
  v19 = 8 * v72;
  v20 = (char *)(v71 - 1);
  v21 = 1;
  while (2)
  {
    v22 = *(_QWORD *)&v20[v19];
    if ((v21 & 1) == 0)
    {
      if ((unint64_t)(v64 - (_QWORD)v65) > 1)
      {
        *(_WORD *)v65 = 14906;
        v65 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v63, "::");
      }
    }
    v23 = *(_WORD *)(v22 + 8);
    if ((v23 & 0x7F) == 0x14 && v22 != 0)
    {
      v46 = sub_22F3B55B8(v22 - 48);
      v22 = v46 + 48;
      if (v46)
        v47 = v46 + 48;
      else
        v47 = 0;
      v23 = *(_WORD *)(v47 + 8);
    }
    if ((v23 & 0x7F) != 0x13)
    {
      v35 = *(_WORD *)(v22 + 8) & 0x7F;
      v36 = -40;
      if (v35 > 0x46)
      {
        if (v35 != 83)
        {
          if (v35 == 71)
          {
            v36 = -56;
          }
          else if (v35 != 81)
          {
            goto LABEL_108;
          }
        }
      }
      else
      {
        if (v35 <= 0x18)
        {
          if (v35 == 16)
          {
LABEL_79:
            v36 = -48;
            goto LABEL_113;
          }
          if (((1 << v35) & 0x1066) != 0)
            goto LABEL_113;
          if (v35 == 24)
            goto LABEL_79;
        }
        if (v35 != 70)
        {
LABEL_108:
          if (v35 - 52 < 6)
          {
            v36 = -72;
          }
          else
          {
            v36 = -64;
            if (v35 - 33 >= 5)
              v36 = -48;
          }
          goto LABEL_113;
        }
        v36 = -64;
      }
LABEL_113:
      v48 = *(_QWORD *)(v22 + v36 + 40);
      v49 = v48 & 7;
      v50 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (v49)
        v51 = 1;
      else
        v51 = v50 == 0;
      if (!v51)
      {
        v52 = *(unsigned int **)(v50 + 16);
        v55 = *v52;
        v53 = v52 + 4;
        v54 = v55;
        if (v55 <= (unint64_t)(v64 - (_QWORD)v65))
        {
          if (v54)
          {
            memcpy(v65, v53, v54);
            v65 += v54;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v63, (const char *)v53);
        }
      }
      goto LABEL_121;
    }
    v25 = *(_QWORD *)(v22 + 56);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 40);
      v27 = v26 & 7;
      v28 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (v27)
        v29 = 1;
      else
        v29 = v28 == 0;
      if (!v29)
      {
        v30 = *(_DWORD **)(v28 + 16);
        v33 = *v30;
        v31 = (const char *)(v30 + 4);
        v32 = v33;
        if (v33 > (unint64_t)(v64 - (_QWORD)v65))
        {
          v34 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v63, v31);
          goto LABEL_83;
        }
        if (v32)
        {
          memcpy(v65, v31, v32);
          v65 += v32;
        }
      }
      v34 = (llvm::raw_ostream *)v63;
LABEL_83:
      v37 = (_BYTE *)*((_QWORD *)v34 + 4);
      if ((unint64_t)v37 >= *((_QWORD *)v34 + 3))
      {
        v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34);
      }
      else
      {
        *((_QWORD *)v34 + 4) = v37 + 1;
        *v37 = 40;
      }
      v38 = *(_QWORD *)(v22 - 8) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v22 - 8) & 7) == 0 && v38 != 0)
      {
        v40 = *(unsigned int **)(v38 + 16);
        v43 = *v40;
        v41 = v40 + 4;
        v42 = v43;
        v44 = (void *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v43 <= *((_QWORD *)v34 + 3) - (_QWORD)v44)
        {
          if (v42)
          {
            memcpy(v44, v41, v42);
            *((_QWORD *)v34 + 4) += v42;
          }
        }
        else
        {
          v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34, (const char *)v41);
        }
      }
      v45 = (_BYTE *)*((_QWORD *)v34 + 4);
      if ((unint64_t)v45 >= *((_QWORD *)v34 + 3))
      {
        llvm::raw_ostream::write(v34);
      }
      else
      {
        *((_QWORD *)v34 + 4) = v45 + 1;
        *v45 = 41;
      }
LABEL_121:
      v21 = 0;
      v19 -= 8;
      if (!v19)
        goto LABEL_131;
      continue;
    }
    break;
  }
  v7[1] = 0xFFFFFFFFLL;
  v7[2] = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v63);
  if (v68 != v70)
    free(v68);
  v2 = 0;
LABEL_129:
  if (v71 != v73)
    free(v71);
  return v2;
}

uint64_t sub_22E8A9AD8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 0;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9B38(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 1;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9B9C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 2;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9C00(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 3;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9C64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 4;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9CC8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 5;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9D2C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 60))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 56);
  }
  v5 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v4);
  *v5 = 6;
  v5[1] = a2;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

uint64_t sub_22E8A9D90(uint64_t a1, int a2, const char *a3)
{
  uint64_t result;
  __int128 v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;

  result = sub_22F2F26F8((uint64_t)&v8, a2, a3);
  v5 = v8;
  v6 = *(_DWORD *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    v7 = v8;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v7;
    v6 = *(_DWORD *)(a1 + 56);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v6) = v5;
  ++*(_DWORD *)(a1 + 56);
  return result;
}

uint64_t sub_22E8A9E04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;

  if (*(_DWORD *)a1 == 4)
  {
    v3 = sub_22EFC3B90(*(_QWORD *)(a1 + 8));
    v2 = 0;
    if (v3)
    {
LABEL_5:
      v2 = (v2 + 1);
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v3)
          break;
        if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_5;
      }
    }
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      v5 = (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v5 = 0;
    if (v5)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
      return (*(_DWORD *)(*(_QWORD *)(v4 + 128) + 16) + v2);
    }
  }
  else if (*(_DWORD *)a1 == 3)
  {
    return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 12) & 0x1FFFFFFF;
  }
  else
  {
    v7 = sub_22F2F29D8((unsigned int *)a1);
    if (v7 && *(_BYTE *)(v7 + 16) == 26)
      return (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38);
    else
      return 0;
  }
  return v2;
}

unint64_t sub_22E8A9EE4(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  if (*(_DWORD *)a1 == 3)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    if ((*(_DWORD *)(v12 + 12) & 0x1FFFFFFFu) > a2)
    {
      result = 0;
      v13 = *(_QWORD *)(v12 + 8 * a2 + 16);
      if (v13 && (*(_DWORD *)(v13 + 28) & 0x7F) == 0x3B)
        return *(_QWORD *)(v13 + 48);
      return result;
    }
    return 0;
  }
  if (*(_DWORD *)a1 != 4)
  {
    result = sub_22F2F29D8((unsigned int *)a1);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16) == 26 && v2 < (unsigned __int16)(*(_QWORD *)(result + 16) >> 38))
      return *(_QWORD *)(result + 8 * v2 + 40);
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v5 = 0;
  if (v5)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 128) + 16);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
    v7 = *(_QWORD *)(v4 + 128);
    if (v6 > v2)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if ((v8 & 1) != 0)
        v8 = sub_22EFCF510(*(_QWORD *)(v4 + 128));
      v9 = **(_QWORD **)(v8 + 24 * v2 + 16);
      v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
        v10 = (unint64_t)sub_22F10D2BC(v9);
      return v10 & 0xFFFFFFFFFFFFFFF0;
    }
    v2 -= *(_DWORD *)(v7 + 16);
    v4 = *(_QWORD *)(a1 + 8);
  }
  result = sub_22EFC3B90(v4);
  if (result)
  {
    if (v2)
    {
LABEL_21:
      --v2;
      while (1)
      {
        result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!result)
          break;
        if ((*(_DWORD *)(result + 28) & 0x7Fu) - 49 <= 2)
        {
          if (v2)
            goto LABEL_21;
          return *(_QWORD *)(result + 48);
        }
      }
    }
    else
    {
      return *(_QWORD *)(result + 48);
    }
  }
  return result;
}

unint64_t sub_22E8AA070(uint64_t a1, unsigned int a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  result = 0;
  v4 = a2;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v5 = (uint64_t *)(a1 + 8);
      goto LABEL_6;
    case 1:
      v5 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 48);
LABEL_6:
      v7 = *v5;
      if (!*v5)
        return 0;
      result = *(_QWORD *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (result)
        v8 = *(_BYTE *)(result + 16) == 26;
      else
        v8 = 0;
      if (v8)
        goto LABEL_12;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        return 0;
      result = sub_22F10CF48(result);
      if (result)
      {
LABEL_12:
        if (v4 >= (unsigned __int16)(*(_QWORD *)(result + 16) >> 38))
          return 0;
        else
          return *(_QWORD *)(*(_QWORD *)(v7 + 120) + 8 * v4);
      }
      return result;
    case 3:
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      if ((*(_DWORD *)(v6 + 12) & 0x1FFFFFFFu) <= a2)
        return 0;
      return *(_QWORD *)(v6 + 8 * a2 + 16);
    case 4:
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
        v10 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_26;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
      v11 = *(_DWORD *)(*(_QWORD *)(v9 + 128) + 16);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
      v12 = *(_QWORD *)(v9 + 128);
      if (v11 <= v4)
      {
        v4 -= *(_DWORD *)(v12 + 16);
        v9 = *(_QWORD *)(a1 + 8);
LABEL_26:
        result = sub_22EFC3B90(v9);
        if (result)
        {
          while (1)
          {
            if (!v4)
              return result;
            --v4;
            do
            {
              result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!result)
                return result;
            }
            while ((*(_DWORD *)(result + 28) & 0x7Fu) - 49 > 2);
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(v12 + 24);
        if ((v13 & 1) != 0)
          v13 = sub_22EFCF510(*(_QWORD *)(v9 + 128));
        v14 = **(_QWORD **)(v13 + 24 * v4 + 16);
        v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
          v15 = (unint64_t)sub_22F10D2BC(v14);
        return sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
      }
      return result;
    default:
      return result;
  }
}

void sub_22E8AA23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __n128 a6)
{
  uint64_t v7;
  _QWORD *v10;
  const std::nothrow_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  llvm::raw_ostream *v30;
  const char *v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  _WORD *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  _WORD *v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  llvm::raw_ostream *v63;
  _WORD *v64;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  uint64_t v67;
  char v68;
  char *v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  const void *v74;
  size_t v75;
  unsigned int v76;
  void *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _WORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int64x2_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int64x2_t v101;
  char *v102;
  __int128 v103;
  llvm::raw_ostream *v104;
  _WORD *v105;
  uint64_t v106;
  int64x2_t v107;
  std::string::size_type v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  BOOL v112;
  const std::string::value_type *v113;
  uint64_t v114;
  std::string::size_type v115;
  uint64_t i;
  char v117;
  BOOL v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string::size_type v121;
  const char *v122;
  llvm::raw_ostream *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  llvm::raw_ostream *v128;
  uint64_t v129;
  const char *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  size_t v135;
  size_t v136;
  llvm::raw_ostream *v137;
  _OWORD *v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  unsigned int *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int64x2_t v148;
  _QWORD v149[2];
  _OWORD v150[2];
  int v151;
  _QWORD v152[3];
  __int128 v153;
  __int128 v154;
  _BYTE v155[32];
  _QWORD *v156;
  uint64_t v157;

  v7 = a4;
  v157 = *MEMORY[0x24BDAC8D0];
  v146 = a5;
  v10 = (_QWORD *)(a4 + 96 * a5);
  if (a5)
  {
    v11 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v12 = a5;
    while (1)
    {
      v13 = operator new(96 * v12, v11);
      if (v13)
        break;
      v112 = v12 > 1;
      v12 >>= 1;
      if (!v112)
        goto LABEL_5;
    }
    v14 = v13;
    sub_22E8ABAB4(v7, v10, v146, (uint64_t)v13, v12, a6);
    operator delete(v14);
  }
  else
  {
LABEL_5:
    sub_22E8ABAB4(v7, v10, v146, 0, 0, a6);
  }
  if (*(_QWORD *)(a3 + 8) >= 0x10uLL)
  {
    v137 = *(llvm::raw_ostream **)(a1 + 16);
    v138 = (_OWORD *)*((_QWORD *)v137 + 4);
    if (*((_QWORD *)v137 + 3) - (_QWORD)v138 > 0xFuLL)
    {
      *v138 = *(_OWORD *)"PREFERRED-TYPE: ";
      *((_QWORD *)v137 + 4) += 16;
    }
    else
    {
      v137 = (llvm::raw_ostream *)llvm::raw_ostream::write(v137, "PREFERRED-TYPE: ");
    }
    v139 = sub_22F40B69C((uint64_t **)v137, *(_QWORD *)(a3 + 8));
    v140 = v139[4];
    if (v140 >= v139[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v139);
    }
    else
    {
      v139[4] = (uint64_t *)((char *)v140 + 1);
      *(_BYTE *)v140 = 10;
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 872);
  if (v15)
  {
    v16 = *(unsigned int **)(v15 + 16);
    v17 = *v16;
    v143 = v16 + 4;
    if (!a5)
      return;
LABEL_12:
    v18 = 0;
    v141 = a1 + 24;
    v144 = v17;
    v145 = v7;
    while (1)
    {
      if (!v17)
        goto LABEL_15;
      v19 = v7 + 96 * v18;
      v20 = *(_OWORD *)(v19 + 16);
      v150[0] = *(_OWORD *)v19;
      v150[1] = v20;
      v151 = *(_DWORD *)(v19 + 32);
      memset(v152, 0, sizeof(v152));
      sub_22E6C6020(v152, *(_QWORD *)(v19 + 40), *(_QWORD *)(v19 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 3));
      v21 = *(_OWORD *)(v19 + 80);
      v153 = *(_OWORD *)(v19 + 64);
      v154 = v21;
      LOBYTE(v19) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, _OWORD *))(*(_QWORD *)a1 + 16))(a1, v143, v17, v150);
      *(_QWORD *)v155 = v152;
      sub_22E6C60B8((void ***)v155);
      if ((v19 & 1) == 0)
      {
LABEL_15:
        v22 = *(llvm::raw_ostream **)(a1 + 16);
        v23 = *((_QWORD *)v22 + 4);
        if ((unint64_t)(*((_QWORD *)v22 + 3) - v23) > 0xB)
        {
          *(_DWORD *)(v23 + 8) = 540692047;
          *(_QWORD *)v23 = *(_QWORD *)"COMPLETION: ";
          *((_QWORD *)v22 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v22, "COMPLETION: ");
        }
        v24 = (unint64_t *)(v7 + 96 * v18);
        switch(*((_DWORD *)v24 + 6))
        {
          case 0:
            (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)*v24 + 88))(*v24, *(_QWORD *)(a1 + 16));
            v67 = v7 + 96 * v18;
            v70 = *(_BYTE *)(v67 + 64);
            v69 = (char *)(v67 + 64);
            v68 = v70;
            v148 = 0uLL;
            v149[0] = 0;
            if ((v70 & 1) != 0)
            {
              v156 = v149;
              v78 = (char *)operator new(0x18uLL);
              *(_QWORD *)v78 = 0x6E6564646948;
              v78[23] = 6;
              v71 = (unint64_t)(v78 + 24);
              v148.i64[0] = (uint64_t)v78;
              v148.i64[1] = (uint64_t)(v78 + 24);
              v149[0] = v78 + 24;
              memset(v155, 0, sizeof(v155));
              sub_22E3B8B94((uint64_t)v155);
              v148.i64[1] = v71;
              v68 = *v69;
            }
            else
            {
              v71 = 0;
            }
            if ((v68 & 2) == 0)
              goto LABEL_105;
            v79 = v18;
            v80 = v149[0];
            if (v71 >= v149[0])
            {
              v85 = v148.i64[0];
              v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v148.i64[0]) >> 3);
              v87 = v86 + 1;
              if (v86 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_182;
              if (0x5555555555555556 * ((v149[0] - v148.i64[0]) >> 3) > v87)
                v87 = 0x5555555555555556 * ((v149[0] - v148.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v149[0] - v148.i64[0]) >> 3) >= 0x555555555555555)
                v88 = 0xAAAAAAAAAAAAAAALL;
              else
                v88 = v87;
              v156 = v149;
              if (v88)
              {
                if (v88 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_183;
                v89 = (char *)operator new(24 * v88);
              }
              else
              {
                v89 = 0;
              }
              v90 = &v89[24 * v86];
              *(_QWORD *)v90 = 0x657361426E49;
              v90[23] = 6;
              if (v71 == v85)
              {
                v91 = vdupq_n_s64(v71);
                v92 = &v89[24 * v86];
              }
              else
              {
                v92 = &v89[24 * v86];
                do
                {
                  *(_OWORD *)(v92 - 24) = *(_OWORD *)(v71 - 24);
                  *((_QWORD *)v92 - 1) = *(_QWORD *)(v71 - 8);
                  v92 -= 24;
                  *(_QWORD *)(v71 - 16) = 0;
                  *(_QWORD *)(v71 - 8) = 0;
                  *(_QWORD *)(v71 - 24) = 0;
                  v71 -= 24;
                }
                while (v71 != v85);
                v91 = v148;
                v80 = v149[0];
              }
              v71 = (unint64_t)(v90 + 24);
              v148.i64[0] = (uint64_t)v92;
              v148.i64[1] = (uint64_t)(v90 + 24);
              *(int64x2_t *)&v155[8] = v91;
              v149[0] = &v89[24 * v88];
              *(_QWORD *)&v155[24] = v80;
              *(_QWORD *)v155 = v91.i64[0];
              sub_22E3B8B94((uint64_t)v155);
              v18 = v79;
            }
            else
            {
              *(_QWORD *)v71 = 0x657361426E49;
              *(_BYTE *)(v71 + 23) = 6;
              v71 += 24;
              v18 = v79;
            }
            v148.i64[1] = v71;
LABEL_105:
            if (*(_DWORD *)(v7 + 96 * v18 + 32) == 3)
            {
              v93 = v18;
              v94 = v149[0];
              if (v71 >= v149[0])
              {
                v95 = v148.i64[0];
                v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v148.i64[0]) >> 3);
                v97 = v96 + 1;
                if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_182:
                  abort();
                if (0x5555555555555556 * ((v149[0] - v148.i64[0]) >> 3) > v97)
                  v97 = 0x5555555555555556 * ((v149[0] - v148.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v149[0] - v148.i64[0]) >> 3) >= 0x555555555555555)
                  v98 = 0xAAAAAAAAAAAAAAALL;
                else
                  v98 = v97;
                v156 = v149;
                if (v98)
                {
                  if (v98 > 0xAAAAAAAAAAAAAAALL)
LABEL_183:
                    sub_22E3B3F8C();
                  v99 = (char *)operator new(24 * v98);
                }
                else
                {
                  v99 = 0;
                }
                v100 = &v99[24 * v96];
                strcpy(v100, "Inaccessible");
                v100[23] = 12;
                if (v71 == v95)
                {
                  v101 = vdupq_n_s64(v71);
                  v102 = &v99[24 * v96];
                }
                else
                {
                  v102 = &v99[24 * v96];
                  do
                  {
                    v103 = *(_OWORD *)(v71 - 24);
                    *((_QWORD *)v102 - 1) = *(_QWORD *)(v71 - 8);
                    *(_OWORD *)(v102 - 24) = v103;
                    v102 -= 24;
                    *(_QWORD *)(v71 - 16) = 0;
                    *(_QWORD *)(v71 - 8) = 0;
                    *(_QWORD *)(v71 - 24) = 0;
                    v71 -= 24;
                  }
                  while (v71 != v95);
                  v101 = v148;
                  v94 = v149[0];
                }
                v71 = (unint64_t)(v100 + 24);
                v148.i64[0] = (uint64_t)v102;
                v148.i64[1] = (uint64_t)(v100 + 24);
                *(int64x2_t *)&v155[8] = v101;
                v149[0] = &v99[24 * v98];
                *(_QWORD *)&v155[24] = v94;
                *(_QWORD *)v155 = v101.i64[0];
                sub_22E3B8B94((uint64_t)v155);
              }
              else
              {
                strcpy((char *)v71, "Inaccessible");
                *(_QWORD *)(v71 + 13) = *(_QWORD *)v155;
                *(_WORD *)(v71 + 21) = *(_WORD *)&v155[8];
                *(_BYTE *)(v71 + 23) = 12;
                v71 += 24;
              }
              v148.i64[1] = v71;
              v18 = v93;
            }
            if (v148.i64[0] != v71)
            {
              v104 = *(llvm::raw_ostream **)(a1 + 16);
              v105 = (_WORD *)*((_QWORD *)v104 + 4);
              v106 = v18;
              if (*((_QWORD *)v104 + 3) - (_QWORD)v105 > 1uLL)
              {
                *v105 = 10272;
                *((_QWORD *)v104 + 4) += 2;
              }
              else
              {
                v104 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), " (");
              }
              v107 = v148;
              memset(v155, 0, 24);
              if (v148.i64[0] != v148.i64[1])
              {
                v108 = -1 - 0x5555555555555555 * ((v148.i64[1] - v148.i64[0]) >> 3);
                v109 = v148.i64[0];
                do
                {
                  if (*(char *)(v109 + 23) < 0)
                    v110 = *(_QWORD *)(v109 + 8);
                  else
                    v110 = *(unsigned __int8 *)(v109 + 23);
                  v108 += v110;
                  v109 += 24;
                }
                while (v109 != v148.i64[1]);
                std::string::reserve((std::string *)v155, v108);
                v111 = *(_BYTE *)(v107.i64[0] + 23);
                v112 = v111 < 0;
                v113 = v111 >= 0
                     ? (const std::string::value_type *)v107.i64[0]
                     : *(const std::string::value_type **)v107.i64[0];
                v114 = v111 & 0x7F;
                v115 = v112 ? *(_QWORD *)(v107.i64[0] + 8) : v114;
                std::string::append((std::string *)v155, v113, v115);
                for (i = v107.i64[0] + 24; v107.i64[0] + 24 != v107.i64[1]; i = v107.i64[0] + 24)
                {
                  std::string::append((std::string *)v155, ",", 1uLL);
                  v117 = *(_BYTE *)(i + 23);
                  v118 = v117 < 0;
                  if (v117 >= 0)
                    v119 = (const std::string::value_type *)i;
                  else
                    v119 = *(const std::string::value_type **)i;
                  v120 = v117 & 0x7F;
                  if (v118)
                    v121 = *(_QWORD *)(i + 8);
                  else
                    v121 = v120;
                  std::string::append((std::string *)v155, v119, v121);
                }
              }
              if (v155[23] >= 0)
                v122 = v155;
              else
                v122 = *(const char **)v155;
              v123 = (llvm::raw_ostream *)llvm::raw_ostream::write(v104, v122);
              v124 = (_BYTE *)*((_QWORD *)v123 + 4);
              if (*((_BYTE **)v123 + 3) == v124)
              {
                llvm::raw_ostream::write(v123, ")");
              }
              else
              {
                *v124 = 41;
                ++*((_QWORD *)v123 + 4);
              }
              v18 = v106;
              if ((v155[23] & 0x80000000) != 0)
                operator delete(*(void **)v155);
            }
            *(_QWORD *)v155 = &v148;
            sub_22E3B3CC8((void ***)v155);
            v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            v126 = sub_22F3129B8(v24, *(_QWORD **)(a2 + 88), *(_QWORD *)(a2 + 80), a3, v125, v141, (*(unsigned __int8 *)(a1 + 8) >> 4) & 1);
            if (v126)
            {
              v127 = v126;
              v128 = *(llvm::raw_ostream **)(a1 + 16);
              v129 = *((_QWORD *)v128 + 4);
              if ((unint64_t)(*((_QWORD *)v128 + 3) - v129) > 2)
              {
                *(_BYTE *)(v129 + 2) = 32;
                *(_WORD *)v129 = 14880;
                *((_QWORD *)v128 + 4) += 3;
              }
              else
              {
                v128 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), " : ");
              }
              sub_22E8A913C(v155, (_WORD *)v127);
              if (v155[23] >= 0)
                v130 = v155;
              else
                v130 = *(const char **)v155;
              llvm::raw_ostream::write(v128, v130);
              if ((v155[23] & 0x80000000) != 0)
                operator delete(*(void **)v155);
              v131 = *(const char **)(v127 + 24);
              if (v131)
              {
                v132 = *(_QWORD *)(a1 + 16);
                v133 = *(_QWORD *)(v132 + 32);
                if ((unint64_t)(*(_QWORD *)(v132 + 24) - v133) > 2)
                {
                  *(_BYTE *)(v133 + 2) = 32;
                  *(_WORD *)v133 = 14880;
                  v134 = (void *)(*(_QWORD *)(v132 + 32) + 3);
                  *(_QWORD *)(v132 + 32) = v134;
                }
                else
                {
                  v132 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), " : ");
                  v134 = *(void **)(v132 + 32);
                }
                v135 = strlen(v131);
                v136 = v135;
                if (v135 <= *(_QWORD *)(v132 + 24) - (_QWORD)v134)
                {
                  if (v135)
                  {
                    memcpy(v134, v131, v135);
                    *(_QWORD *)(v132 + 32) += v136;
                  }
                }
                else
                {
                  v30 = (llvm::raw_ostream *)v132;
                  v31 = v131;
LABEL_21:
                  llvm::raw_ostream::write(v30, v31);
                }
              }
            }
LABEL_30:
            v147 = v18;
            v36 = v7 + 96 * v18;
            v38 = *(_QWORD *)(v36 + 40);
            v37 = *(_QWORD *)(v36 + 48);
            while (v38 != v37)
            {
              v39 = *(_DWORD *)(v38 + 4);
              v40 = *(_QWORD **)(a2 + 112);
              v41 = sub_22E677168((uint64_t)v40, *(_DWORD *)v38);
              v42 = sub_22E677168((uint64_t)v40, v39);
              v43 = v42;
              v44 = HIDWORD(v42);
              if (*(_BYTE *)(v38 + 8))
              {
                v45 = sub_22F1415D0(v39, (uint64_t)v155, v40, *(_DWORD **)(a2 + 72), 0);
                v46 = *(_DWORD *)&v155[4];
                if (v45)
                  v46 = 0;
                LODWORD(v44) = v46 + v44;
              }
              v47 = *(llvm::raw_ostream **)(a1 + 16);
              v48 = *((_QWORD *)v47 + 4);
              if ((unint64_t)(*((_QWORD *)v47 + 3) - v48) > 0x11)
              {
                *(_WORD *)(v48 + 16) = 14964;
                *(_OWORD *)v48 = *(_OWORD *)" (requires fix-it:";
                v49 = (_WORD *)(*((_QWORD *)v47 + 4) + 18);
                *((_QWORD *)v47 + 4) = v49;
              }
              else
              {
                v47 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), " (requires fix-it:");
                v49 = (_WORD *)*((_QWORD *)v47 + 4);
              }
              if (*((_QWORD *)v47 + 3) - (_QWORD)v49 > 1uLL)
              {
                *v49 = 31520;
                *((_QWORD *)v47 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v47, " {");
              }
              sub_22F1E33FC((uint64_t)v40, v41, SHIDWORD(v41), 0);
              v50 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v51 = (_BYTE *)*((_QWORD *)v50 + 4);
              if ((unint64_t)v51 >= *((_QWORD *)v50 + 3))
              {
                llvm::raw_ostream::write(v50);
              }
              else
              {
                *((_QWORD *)v50 + 4) = v51 + 1;
                *v51 = 58;
              }
              sub_22F1E2E38((uint64_t)v40, v41, HIDWORD(v41), 0);
              v52 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v53 = (_BYTE *)*((_QWORD *)v52 + 4);
              if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
              {
                llvm::raw_ostream::write(v52);
              }
              else
              {
                *((_QWORD *)v52 + 4) = v53 + 1;
                *v53 = 45;
              }
              sub_22F1E33FC((uint64_t)v40, v43, v44, 0);
              v54 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v55 = (_BYTE *)*((_QWORD *)v54 + 4);
              if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
              {
                llvm::raw_ostream::write(v54);
              }
              else
              {
                *((_QWORD *)v54 + 4) = v55 + 1;
                *v55 = 58;
              }
              sub_22F1E2E38((uint64_t)v40, v43, v44, 0);
              v56 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v57 = (_BYTE *)*((_QWORD *)v56 + 4);
              if (*((_BYTE **)v56 + 3) == v57)
              {
                v56 = (llvm::raw_ostream *)llvm::raw_ostream::write(v56, "}");
                v58 = *((_QWORD *)v56 + 4);
              }
              else
              {
                *v57 = 125;
                v58 = *((_QWORD *)v56 + 4) + 1;
                *((_QWORD *)v56 + 4) = v58;
              }
              if ((unint64_t)(*((_QWORD *)v56 + 3) - v58) > 4)
              {
                *(_BYTE *)(v58 + 4) = 34;
                *(_DWORD *)v58 = 544175136;
                *((_QWORD *)v56 + 4) += 5;
              }
              else
              {
                v56 = (llvm::raw_ostream *)llvm::raw_ostream::write(v56, " to \"");
              }
              v61 = *(const char **)(v38 + 24);
              v60 = v38 + 24;
              v59 = v61;
              if (*(char *)(v60 + 23) >= 0)
                v62 = (const char *)v60;
              else
                v62 = v59;
              v63 = (llvm::raw_ostream *)llvm::raw_ostream::write(v56, v62);
              v64 = (_WORD *)*((_QWORD *)v63 + 4);
              if (*((_QWORD *)v63 + 3) - (_QWORD)v64 > 1uLL)
              {
                *v64 = 10530;
                *((_QWORD *)v63 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v63, "\")");
              }
              v38 = v60 + 32;
            }
            v65 = *(llvm::raw_ostream **)(a1 + 16);
            v66 = (_BYTE *)*((_QWORD *)v65 + 4);
            if ((unint64_t)v66 >= *((_QWORD *)v65 + 3))
            {
              llvm::raw_ostream::write(v65);
            }
            else
            {
              *((_QWORD *)v65 + 4) = v66 + 1;
              *v66 = 10;
            }
            v17 = v144;
            v7 = v145;
            v18 = v147;
            break;
          case 1:
            v25 = v7 + 96 * v18;
            v26 = *(const char **)(v25 + 8);
            if (!v26)
              goto LABEL_30;
            v27 = *(_QWORD *)(a1 + 16);
            v28 = strlen(*(const char **)(v25 + 8));
            v29 = *(void **)(v27 + 32);
            if (v28 > *(_QWORD *)(v27 + 24) - (_QWORD)v29)
            {
              v30 = *(llvm::raw_ostream **)(a1 + 16);
              v31 = v26;
              goto LABEL_21;
            }
            if (v28)
            {
              memcpy(v29, v26, v28);
              *(_QWORD *)(v27 + 32) += v28;
            }
            goto LABEL_30;
          case 2:
            v72 = *(_QWORD *)(a1 + 16);
            v73 = *(unsigned int **)(*(_QWORD *)(v7 + 96 * v18 + 8) + 16);
            v76 = *v73;
            v74 = v73 + 4;
            v75 = v76;
            v77 = *(void **)(v72 + 32);
            if ((unint64_t)v76 <= *(_QWORD *)(v72 + 24) - (_QWORD)v77)
            {
              if (v75)
              {
                memcpy(v77, v74, v75);
                *(_QWORD *)(v72 + 32) += v75;
              }
            }
            else
            {
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v74);
            }
            v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            v82 = sub_22F3129B8((unint64_t *)(v7 + 96 * v18), *(_QWORD **)(a2 + 88), *(_QWORD *)(a2 + 80), a3, v81, v141, (*(unsigned __int8 *)(a1 + 8) >> 4) & 1);
            if (!v82)
              goto LABEL_30;
            v83 = (_WORD *)v82;
            v32 = *(llvm::raw_ostream **)(a1 + 16);
            v84 = *((_QWORD *)v32 + 4);
            if ((unint64_t)(*((_QWORD *)v32 + 3) - v84) > 2)
            {
              *(_BYTE *)(v84 + 2) = 32;
              *(_WORD *)v84 = 14880;
              *((_QWORD *)v32 + 4) += 3;
            }
            else
            {
              v32 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), " : ");
            }
            v34 = v83;
LABEL_25:
            sub_22E8A913C(v155, v34);
            if (v155[23] >= 0)
              v35 = v155;
            else
              v35 = *(const char **)v155;
            llvm::raw_ostream::write(v32, v35);
            if ((v155[23] & 0x80000000) != 0)
              operator delete(*(void **)v155);
            goto LABEL_30;
          case 3:
            v32 = *(llvm::raw_ostream **)(a1 + 16);
            v33 = *((_QWORD *)v32 + 4);
            if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) > 9)
            {
              *(_WORD *)(v33 + 8) = 8250;
              *(_QWORD *)v33 = *(_QWORD *)"Pattern : ";
              *((_QWORD *)v32 + 4) += 10;
            }
            else
            {
              v32 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), "Pattern : ");
            }
            v34 = *(_WORD **)(v7 + 96 * v18 + 8);
            goto LABEL_25;
          default:
            goto LABEL_30;
        }
      }
      if (++v18 == v146)
        return;
    }
  }
  v143 = 0;
  v17 = 0;
  if (a5)
    goto LABEL_12;
}

void sub_22E8AB0E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  _WORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  uint64_t v19;
  const char **v20;
  int v21;
  llvm::raw_ostream *v22;
  const char *v23;
  size_t v24;
  void *v25;
  __int16 *v26;
  llvm::raw_ostream *v27;
  const char *v28;
  const char *v29;
  size_t v30;
  void *v31;
  size_t v32;
  __int16 v33;
  void **v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  int v53;
  void **v54;

  v45 = a6;
  v9 = *(llvm::raw_ostream **)(a1 + 16);
  v10 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 0x12)
  {
    *(_DWORD *)(v10 + 15) = 540689231;
    *(_OWORD *)v10 = *(_OWORD *)"OPENING_PAREN_LOC: ";
    *((_QWORD *)v9 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v9, "OPENING_PAREN_LOC: ");
  }
  sub_22F422CEC(&v45, *(llvm::raw_ostream **)(a1 + 16), *(_QWORD **)(a2 + 112));
  v11 = *(llvm::raw_ostream **)(a1 + 16);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, "\n");
    if (a5)
    {
LABEL_5:
      v13 = 0;
      v38 = a5;
      v37 = MEMORY[0x24BED83D8] + 16;
      do
      {
        v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v15 = sub_22E9B721C(a4 + 16 * v13, a3, (_QWORD *)a2, v14, a1 + 24, (*(unsigned __int8 *)(a1 + 8) >> 4) & 1, a7);
        if (v15)
        {
          v16 = (_WORD *)v15;
          v17 = *(llvm::raw_ostream **)(a1 + 16);
          v18 = *((_QWORD *)v17 + 4);
          if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 9)
          {
            *(_WORD *)(v18 + 8) = 8250;
            *(_QWORD *)v18 = *(_QWORD *)"OVERLOAD: ";
            *((_QWORD *)v17 + 4) += 10;
          }
          else
          {
            v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), "OVERLOAD: ");
          }
          __p[0] = 0;
          __p[1] = 0;
          v44 = 0;
          v47 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 1;
          v49 = 0;
          v50 = 0;
          v48 = 0;
          v46 = v37;
          v54 = __p;
          llvm::raw_ostream::SetBufferAndMode();
          if (*v16)
          {
            v19 = 16 * (unsigned __int16)*v16;
            v20 = (const char **)(v16 + 20);
            do
            {
              v21 = *((_DWORD *)v20 - 2);
              if ((v21 - 4) < 2)
              {
                if ((unint64_t)(v49 - (_QWORD)v50) > 1)
                {
                  *(_WORD *)v50 = 9051;
                  v50 += 2;
                  v22 = (llvm::raw_ostream *)&v46;
                }
                else
                {
                  v22 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "[#");
                }
                v29 = *v20;
                if (*v20)
                {
                  v30 = strlen(*v20);
                  v31 = (void *)*((_QWORD *)v22 + 4);
                  if (v30 <= *((_QWORD *)v22 + 3) - (_QWORD)v31)
                  {
                    if (v30)
                    {
                      memcpy(v31, v29, v30);
                      *((_QWORD *)v22 + 4) += v30;
                    }
                  }
                  else
                  {
                    v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v22, v29);
                  }
                }
                v26 = (__int16 *)*((_QWORD *)v22 + 4);
                if (*((_QWORD *)v22 + 3) - (_QWORD)v26 > 1uLL)
                {
                  v33 = 23843;
LABEL_42:
                  *v26 = v33;
                  *((_QWORD *)v22 + 4) += 2;
                  goto LABEL_32;
                }
                v27 = v22;
                v28 = "#]";
                goto LABEL_31;
              }
              if (v21 != 2)
              {
                if (v21 == 6)
                {
                  if ((unint64_t)(v49 - (_QWORD)v50) > 1)
                  {
                    *(_WORD *)v50 = 9020;
                    v50 += 2;
                    v22 = (llvm::raw_ostream *)&v46;
                  }
                  else
                  {
                    v22 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "<#");
                  }
                  v23 = *v20;
                  if (*v20)
                  {
                    v24 = strlen(*v20);
                    v25 = (void *)*((_QWORD *)v22 + 4);
                    if (v24 <= *((_QWORD *)v22 + 3) - (_QWORD)v25)
                    {
                      if (v24)
                      {
                        memcpy(v25, v23, v24);
                        *((_QWORD *)v22 + 4) += v24;
                      }
                    }
                    else
                    {
                      v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(v22, v23);
                    }
                  }
                  v26 = (__int16 *)*((_QWORD *)v22 + 4);
                  if (*((_QWORD *)v22 + 3) - (_QWORD)v26 > 1uLL)
                  {
                    v33 = 15907;
                    goto LABEL_42;
                  }
                  v27 = v22;
                  v28 = "#>";
                  goto LABEL_31;
                }
                if (*v20)
                {
                  v32 = strlen(*v20);
                  if (v32 <= v49 - (uint64_t)v50)
                  {
                    if (v32)
                    {
                      memcpy(v50, *v20, v32);
                      v50 += v32;
                    }
                    goto LABEL_32;
                  }
                  v27 = (llvm::raw_ostream *)&v46;
                  v28 = *v20;
LABEL_31:
                  llvm::raw_ostream::write(v27, v28);
                }
              }
LABEL_32:
              v20 += 2;
              v19 -= 16;
            }
            while (v19);
          }
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v46);
          if (v44 >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          v35 = (llvm::raw_ostream *)llvm::raw_ostream::write(v17, (const char *)v34);
          v36 = (_BYTE *)*((_QWORD *)v35 + 4);
          if (*((_BYTE **)v35 + 3) == v36)
          {
            llvm::raw_ostream::write(v35, "\n");
          }
          else
          {
            *v36 = 10;
            ++*((_QWORD *)v35 + 4);
          }
          if (SHIBYTE(v44) < 0)
            operator delete(__p[0]);
        }
        ++v13;
      }
      while (v13 != v38);
    }
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)v11 + 4);
    if (a5)
      goto LABEL_5;
  }
}

uint64_t sub_22E8AB5B4(uint64_t result, char a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  signed int v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  int v28;
  __int128 v29;

  v3 = result;
  v4 = *(_DWORD *)(result + 24);
  if (v4 == 3)
  {
    v5 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
      goto LABEL_67;
  }
  else
  {
    if (v4)
      goto LABEL_67;
    v5 = *(_QWORD *)result;
  }
  if (!v5 || (v6 = v5, (*(_DWORD *)(v5 + 28) & 0x7F) != 0x53))
  {
    v7 = *(_QWORD *)(v5 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_26;
        if (i == 24)
        {
LABEL_13:
          v10 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_26;
          }
          v10 = -64;
        }
      }
LABEL_26:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 15088);
  v15 = *(void **)(v14 + 224);
  v16 = *(_QWORD *)(v14 + 232);
  v29 = *(_OWORD *)(v14 + 240);
  v17 = sub_22EFC93E8(v5, v15, v16, (uint64_t *)&v29, 0, 0);
  if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x43)
  {
    v18 = *(_QWORD *)(v5 + 16);
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 4) != 0)
      v19 = *(_QWORD *)v19;
    v20 = *(_WORD *)(v19 + 8) & 0x7F;
    v21 = -40;
    if (v20 > 0x46)
    {
      switch(v20)
      {
        case 'S':
          goto LABEL_51;
        case 'G':
          v21 = -56;
          goto LABEL_51;
        case 'Q':
LABEL_51:
          v22 = *(void **)(v14 + 224);
          v23 = *(_QWORD *)(v14 + 232);
          v29 = *(_OWORD *)(v14 + 240);
          v24 = sub_22EFC93E8(v19 + v21, v22, v23, (uint64_t *)&v29, 0, 0);
          if (v17 <= v24)
            v17 = v24;
          goto LABEL_53;
      }
    }
    else
    {
      if (v20 <= 0x18)
      {
        if (v20 == 16)
        {
LABEL_39:
          v21 = -48;
          goto LABEL_51;
        }
        if (((1 << v20) & 0x1066) != 0)
          goto LABEL_51;
        if (v20 == 24)
          goto LABEL_39;
      }
      if (v20 == 70)
      {
LABEL_49:
        v21 = -64;
        goto LABEL_51;
      }
    }
    if (v20 - 52 >= 6)
    {
      if (v20 - 33 >= 5)
        goto LABEL_39;
      goto LABEL_49;
    }
    v21 = -72;
    goto LABEL_51;
  }
LABEL_53:
  if (v17 <= 3)
    *(_DWORD *)(v3 + 32) = dword_22F462DE0[v17];
  v25 = *(_DWORD **)v3;
  if (*(_QWORD *)v3
    && (v25[7] & 0x7Eu) - 58 >= 0xFFFFFFFA
    && (*(_BYTE *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 32))(v25) + 82) & 0x40) != 0)
  {
    *(_DWORD *)(v3 + 32) = 2;
  }
  v26 = *(_DWORD **)v3;
  result = sub_22E9B8178(*(_QWORD *)v3);
  *(_DWORD *)(v3 + 28) = result;
  if ((_DWORD)result == 1)
  {
    if ((v26[7] & 0x7F) == 0x17)
      v27 = 13;
    else
      v27 = 72;
    if ((v26[7] & 0x7F) == 0x16)
      v28 = 11;
    else
      v28 = v27;
    *(_DWORD *)(v3 + 28) = v28;
  }
LABEL_67:
  if ((a2 & 1) == 0)
    *(_DWORD *)(v3 + 32) = 3;
  return result;
}

uint64_t sub_22E8AB8B8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 3)
  {
    v4 = *(_WORD **)(a1 + 8);
    v5 = (unsigned __int16)*v4;
    if (!*v4)
      return 0;
    v6 = v4 + 20;
    v7 = 16 * v5;
    while (*((_DWORD *)v6 - 2))
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
        return 0;
    }
    v3 = *v6;
    if (*v6)
      goto LABEL_5;
    return v3;
  }
  if (v2 == 2)
  {
    v8 = *(_QWORD *)(a1 + 8);
    return *(_QWORD *)(v8 + 16) + 16;
  }
  if (v2 != 1)
  {
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v8 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (((v15 & 7) != 0 || v8 == 0) && ((v15 & 7) != 1 || v8 == 0))
    {
      v3 = a2;
      sub_22EFC683C(&v15, &v13);
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      *(_OWORD *)v3 = v13;
      v11 = HIBYTE(v14);
      *(_QWORD *)(v3 + 16) = v14;
      if (v11 < 0)
        return *(_QWORD *)v3;
      return v3;
    }
    return *(_QWORD *)(v8 + 16) + 16;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_5:
    strlen((const char *)v3);
  return v3;
}

uint64_t sub_22E8AB9E0(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  int v10;
  void *__s1;
  size_t v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  __s1 = (void *)sub_22E8AB8B8(a1, (uint64_t)v16);
  v13 = v3;
  v4 = (const void *)sub_22E8AB8B8(a2, (uint64_t)__p);
  v6 = v5;
  v7 = llvm::StringRef::compare_insensitive();
  if (!v7)
  {
    if (v6 >= v13)
      v8 = v13;
    else
      v8 = v6;
    if (v8 && (v9 = memcmp(__s1, v4, v8)) != 0)
    {
      v7 = (v9 >> 31) | 1;
    }
    else
    {
      if (v13 < v6)
        v10 = -1;
      else
        v10 = 1;
      if (v13 == v6)
        v7 = 0;
      else
        v7 = v10;
    }
  }
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return v7 >> 31;
}

void sub_22E8ABAB4(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  uint64_t v39;
  _QWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  int v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  _QWORD *v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  _OWORD *v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  void **v74;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v8 = a2 - 12;
      if (sub_22E8AB9E0((uint64_t)(a2 - 12), a1))
      {
        v9 = *(_OWORD *)(a1 + 16);
        v67 = *(_OWORD *)a1;
        v68 = v9;
        v69 = *(_DWORD *)(a1 + 32);
        v10 = *(_QWORD *)(a1 + 56);
        v66 = *(_OWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        v11 = *(_OWORD *)(a1 + 80);
        v72 = *(_OWORD *)(a1 + 64);
        v73 = v11;
        v13 = *(_OWORD *)v8;
        v12 = *((_OWORD *)a2 - 5);
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 16);
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a1 + 16) = v12;
        sub_22E6C58D4((void **)(a1 + 40));
        v15 = *(_OWORD *)(a2 - 7);
        v14 = a2 - 7;
        *(_OWORD *)(a1 + 40) = v15;
        *(_QWORD *)(a1 + 56) = v14[2];
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        v16 = *(_OWORD *)(v14 + 5);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(v14 + 3);
        *(_OWORD *)(a1 + 80) = v16;
        v17 = v68;
        *(_OWORD *)v8 = v67;
        *((_OWORD *)v8 + 1) = v17;
        *((_DWORD *)v8 + 8) = v69;
        sub_22E6C58D4((void **)v14);
        *(_OWORD *)v14 = v66;
        v14[2] = v10;
        v71 = 0;
        v70 = 0uLL;
        v18 = v73;
        *(_OWORD *)(v14 + 3) = v72;
        *(_OWORD *)(v14 + 5) = v18;
        v74 = (void **)&v70;
        sub_22E6C60B8(&v74);
      }
    }
    else
    {
      v19 = a3;
      if ((uint64_t)a3 <= 0)
      {
        if ((_QWORD *)a1 != a2)
        {
          v25 = a1 + 96;
          if ((_QWORD *)(a1 + 96) != a2)
          {
            v26 = 0;
            v27 = a1;
            do
            {
              v28 = v25;
              if (sub_22E8AB9E0(v25, v27))
              {
                v29 = *(_OWORD *)(v28 + 16);
                v67 = *(_OWORD *)v28;
                v68 = v29;
                v69 = *(_DWORD *)(v28 + 32);
                v70 = *(_OWORD *)(v27 + 136);
                v71 = *(_QWORD *)(v27 + 152);
                *(_QWORD *)(v27 + 136) = 0;
                *(_QWORD *)(v27 + 144) = 0;
                *(_QWORD *)(v27 + 152) = 0;
                v30 = *(_OWORD *)(v27 + 176);
                v31 = v26;
                v72 = *(_OWORD *)(v27 + 160);
                v73 = v30;
                while (1)
                {
                  v32 = a1 + v31;
                  v33 = *(_OWORD *)(a1 + v31 + 16);
                  *(_OWORD *)(v32 + 96) = *(_OWORD *)(a1 + v31);
                  *(_OWORD *)(v32 + 112) = v33;
                  *(_DWORD *)(v32 + 128) = *(_DWORD *)(a1 + v31 + 32);
                  sub_22E6C58D4((void **)(a1 + v31 + 136));
                  *(_OWORD *)(v32 + 136) = *(_OWORD *)(v32 + 40);
                  *(_QWORD *)(v32 + 152) = *(_QWORD *)(v32 + 56);
                  *(_QWORD *)(v32 + 48) = 0;
                  *(_QWORD *)(v32 + 56) = 0;
                  *(_QWORD *)(v32 + 40) = 0;
                  v34 = *(_OWORD *)(a1 + v31 + 80);
                  *(_OWORD *)(v32 + 160) = *(_OWORD *)(v32 + 64);
                  *(_OWORD *)(v32 + 176) = v34;
                  if (!v31)
                    break;
                  v31 -= 96;
                  if ((sub_22E8AB9E0((uint64_t)&v67, v31 + a1) & 1) == 0)
                  {
                    v35 = a1 + v31 + 96;
                    goto LABEL_18;
                  }
                }
                v35 = a1;
LABEL_18:
                v36 = v68;
                *(_OWORD *)v35 = v67;
                *(_OWORD *)(v35 + 16) = v36;
                *(_DWORD *)(v35 + 32) = v69;
                sub_22E6C58D4((void **)(v35 + 40));
                *(_OWORD *)(v35 + 40) = v70;
                *(_QWORD *)(v35 + 56) = v71;
                v71 = 0;
                v70 = 0uLL;
                v37 = v73;
                *(_OWORD *)(v32 + 64) = v72;
                *(_OWORD *)(v32 + 80) = v37;
                v74 = (void **)&v70;
                sub_22E6C60B8(&v74);
              }
              v25 = v28 + 96;
              v26 += 96;
              v27 = v28;
            }
            while ((_QWORD *)(v28 + 96) != a2);
          }
        }
      }
      else
      {
        v22 = a3 >> 1;
        v23 = (_QWORD *)(a1 + 96 * (a3 >> 1));
        v24 = a3 >> 1;
        if ((uint64_t)v19 <= a5)
        {
          v38 = sub_22E8ABF50(a1, v23, v24, a4, a6);
          v39 = a4 + 96 * v22;
          sub_22E8ABF50(a1 + 96 * (v19 >> 1), a2, v19 - (v19 >> 1), v39, v38);
          v40 = (_QWORD *)(a4 + 96 * v19);
          v41 = (_OWORD *)(a1 + 64);
          v42 = v39;
          v43 = a4;
          while ((_QWORD *)v42 != v40)
          {
            v44 = v41 - 4;
            v45 = sub_22E8AB9E0(v42, v43);
            v46 = (void **)v41 - 3;
            if (v45)
            {
              v47 = *(_OWORD *)v42;
              v48 = *(_OWORD *)(v42 + 16);
              *((_DWORD *)v41 - 8) = *(_DWORD *)(v42 + 32);
              *v44 = v47;
              *(v41 - 3) = v48;
              sub_22E6C58D4(v46);
              *(_OWORD *)((char *)v41 - 24) = *(_OWORD *)(v42 + 40);
              *((_QWORD *)v41 - 1) = *(_QWORD *)(v42 + 56);
              *(_QWORD *)(v42 + 40) = 0;
              *(_QWORD *)(v42 + 48) = 0;
              *(_QWORD *)(v42 + 56) = 0;
              v49 = *(_OWORD *)(v42 + 80);
              *v41 = *(_OWORD *)(v42 + 64);
              v41[1] = v49;
              v42 += 96;
            }
            else
            {
              v50 = *(_OWORD *)v43;
              v51 = *(_OWORD *)(v43 + 16);
              *((_DWORD *)v41 - 8) = *(_DWORD *)(v43 + 32);
              *v44 = v50;
              *(v41 - 3) = v51;
              sub_22E6C58D4(v46);
              *(_OWORD *)((char *)v41 - 24) = *(_OWORD *)(v43 + 40);
              *((_QWORD *)v41 - 1) = *(_QWORD *)(v43 + 56);
              *(_QWORD *)(v43 + 40) = 0;
              *(_QWORD *)(v43 + 48) = 0;
              *(_QWORD *)(v43 + 56) = 0;
              v52 = *(_OWORD *)(v43 + 80);
              *v41 = *(_OWORD *)(v43 + 64);
              v41[1] = v52;
              v43 += 96;
            }
            v41 += 6;
            if (v43 == v39)
            {
              if ((_QWORD *)v42 != v40)
              {
                v53 = 0;
                do
                {
                  v54 = (_QWORD *)(v42 + v53);
                  v55 = &v41[v53 / 0x10];
                  v56 = *(_OWORD *)(v42 + v53);
                  v57 = *(_OWORD *)(v42 + v53 + 16);
                  *((_DWORD *)v55 - 8) = *(_DWORD *)(v42 + v53 + 32);
                  *(v55 - 4) = v56;
                  *(v55 - 3) = v57;
                  sub_22E6C58D4((void **)&v41[v53 / 0x10 - 1] - 1);
                  *(_OWORD *)((char *)v55 - 24) = *(_OWORD *)(v42 + v53 + 40);
                  *((_QWORD *)v55 - 1) = *(_QWORD *)(v42 + v53 + 56);
                  v54[5] = 0;
                  v54[6] = 0;
                  v54[7] = 0;
                  v58 = *(_OWORD *)(v42 + v53 + 80);
                  *v55 = *(_OWORD *)(v42 + v53 + 64);
                  v55[1] = v58;
                  v53 += 96;
                }
                while (v54 + 12 != v40);
              }
              goto LABEL_34;
            }
          }
          if (v43 != v39)
          {
            v59 = 0;
            do
            {
              v60 = &v41[v59 / 0x10];
              v61 = (_QWORD *)(v43 + v59);
              v62 = *(_OWORD *)(v43 + v59);
              v63 = *(_OWORD *)(v43 + v59 + 16);
              *((_DWORD *)v60 - 8) = *(_DWORD *)(v43 + v59 + 32);
              *(v60 - 4) = v62;
              *(v60 - 3) = v63;
              sub_22E6C58D4((void **)&v41[v59 / 0x10 - 1] - 1);
              *(_OWORD *)((char *)v60 - 24) = *(_OWORD *)(v43 + v59 + 40);
              *((_QWORD *)v60 - 1) = *(_QWORD *)(v43 + v59 + 56);
              v61[5] = 0;
              v61[6] = 0;
              v61[7] = 0;
              v64 = *(_OWORD *)(v43 + v59 + 80);
              *v60 = *(_OWORD *)(v43 + v59 + 64);
              v60[1] = v64;
              v59 += 96;
            }
            while (v61 + 12 != (_QWORD *)v39);
          }
LABEL_34:
          if (a4)
          {
            v65 = a4 + 40;
            do
            {
              *(_QWORD *)&v67 = v65;
              sub_22E6C60B8((void ***)&v67);
              v65 += 96;
              --v19;
            }
            while (v19);
          }
        }
        else
        {
          sub_22E8ABAB4(a1, v23, v24, a4, a5);
          sub_22E8ABAB4(a1 + 96 * (v19 >> 1), a2, v19 - (v19 >> 1), a4, a5);
          sub_22E8AC440(a1, a1 + 96 * (v19 >> 1), a2, v19 >> 1, v19 - (v19 >> 1), a4, a5);
        }
      }
    }
  }
}

__n128 sub_22E8ABF50(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  int v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  int v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  if (a3)
  {
    v8 = a1;
    if (a3 == 2)
    {
      v12 = (__int128 *)(a2 - 12);
      v13 = sub_22E8AB9E0((uint64_t)(a2 - 12), a1);
      v14 = (_QWORD *)(a4 + 40);
      v15 = (_OWORD *)(a4 + 64);
      v16 = (_OWORD *)(a4 + 96);
      v17 = (_QWORD *)(a4 + 136);
      if (v13)
      {
        v18 = *v12;
        v19 = *((_OWORD *)a2 - 5);
        *(_DWORD *)(a4 + 32) = *((_DWORD *)a2 - 16);
        *(_OWORD *)a4 = v18;
        *(_OWORD *)(a4 + 16) = v19;
        *(_QWORD *)(a4 + 48) = 0;
        *(_QWORD *)(a4 + 56) = 0;
        *v14 = 0;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 - 7);
        *(_QWORD *)(a4 + 56) = *(a2 - 5);
        *(a2 - 7) = 0;
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        v20 = *((_OWORD *)a2 - 1);
        *v15 = *((_OWORD *)a2 - 2);
        *(_OWORD *)(a4 + 80) = v20;
        v21 = *(_OWORD *)v8;
        v22 = *(_OWORD *)(v8 + 16);
        *(_DWORD *)(a4 + 128) = *(_DWORD *)(v8 + 32);
        *v16 = v21;
        *(_OWORD *)(a4 + 112) = v22;
        *(_QWORD *)(a4 + 144) = 0;
        *(_QWORD *)(a4 + 152) = 0;
        *v17 = 0;
        *(_OWORD *)(a4 + 136) = *(_OWORD *)(v8 + 40);
        *(_QWORD *)(a4 + 152) = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        result = *(__n128 *)(v8 + 64);
        v23 = *(_OWORD *)(v8 + 80);
      }
      else
      {
        v45 = *(_OWORD *)v8;
        v46 = *(_OWORD *)(v8 + 16);
        *(_DWORD *)(a4 + 32) = *(_DWORD *)(v8 + 32);
        *(_OWORD *)a4 = v45;
        *(_OWORD *)(a4 + 16) = v46;
        *(_QWORD *)(a4 + 48) = 0;
        *(_QWORD *)(a4 + 56) = 0;
        *v14 = 0;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(v8 + 40);
        *(_QWORD *)(a4 + 56) = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        v47 = *(_OWORD *)(v8 + 80);
        *v15 = *(_OWORD *)(v8 + 64);
        *(_OWORD *)(a4 + 80) = v47;
        v48 = *v12;
        v49 = *((_OWORD *)a2 - 5);
        *(_DWORD *)(a4 + 128) = *((_DWORD *)a2 - 16);
        *v16 = v48;
        *(_OWORD *)(a4 + 112) = v49;
        *(_QWORD *)(a4 + 144) = 0;
        *(_QWORD *)(a4 + 152) = 0;
        *v17 = 0;
        *(_OWORD *)(a4 + 136) = *(_OWORD *)(a2 - 7);
        *(_QWORD *)(a4 + 152) = *(a2 - 5);
        *(a2 - 7) = 0;
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        result = *((__n128 *)a2 - 2);
        v23 = *((_OWORD *)a2 - 1);
      }
      *(__n128 *)(a4 + 160) = result;
      *(_OWORD *)(a4 + 176) = v23;
    }
    else if (a3 == 1)
    {
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 32);
      *(_OWORD *)a4 = v9;
      *(_OWORD *)(a4 + 16) = v10;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      result = *(__n128 *)(a1 + 64);
      v11 = *(_OWORD *)(a1 + 80);
      *(__n128 *)(a4 + 64) = result;
      *(_OWORD *)(a4 + 80) = v11;
    }
    else if ((uint64_t)a3 > 8)
    {
      v50 = (_QWORD *)(a1 + 96 * (a3 >> 1));
      sub_22E8ABAB4(a1, v50, a3 >> 1, a4, a3 >> 1);
      sub_22E8ABAB4(v8 + 96 * (a3 >> 1), a2, a3 - (a3 >> 1), a4 + 96 * (a3 >> 1), a3 - (a3 >> 1));
      v51 = a4 + 64;
      v52 = (uint64_t)v50;
      while ((_QWORD *)v52 != a2)
      {
        v53 = (_OWORD *)(v51 - 64);
        v54 = sub_22E8AB9E0(v52, v8);
        v55 = (_QWORD *)(v51 - 24);
        if (v54)
        {
          v56 = *(_OWORD *)v52;
          v57 = *(_OWORD *)(v52 + 16);
          *(_DWORD *)(v51 - 32) = *(_DWORD *)(v52 + 32);
          *v53 = v56;
          *(_OWORD *)(v51 - 48) = v57;
          *(_QWORD *)(v51 - 16) = 0;
          *(_QWORD *)(v51 - 8) = 0;
          *v55 = 0;
          *(_OWORD *)(v51 - 24) = *(_OWORD *)(v52 + 40);
          *(_QWORD *)(v51 - 8) = *(_QWORD *)(v52 + 56);
          *(_QWORD *)(v52 + 40) = 0;
          *(_QWORD *)(v52 + 48) = 0;
          *(_QWORD *)(v52 + 56) = 0;
          result = *(__n128 *)(v52 + 64);
          v58 = *(_OWORD *)(v52 + 80);
          *(__n128 *)v51 = result;
          *(_OWORD *)(v51 + 16) = v58;
          v52 += 96;
        }
        else
        {
          v59 = *(_OWORD *)v8;
          v60 = *(_OWORD *)(v8 + 16);
          *(_DWORD *)(v51 - 32) = *(_DWORD *)(v8 + 32);
          *v53 = v59;
          *(_OWORD *)(v51 - 48) = v60;
          *(_QWORD *)(v51 - 16) = 0;
          *(_QWORD *)(v51 - 8) = 0;
          *v55 = 0;
          *(_OWORD *)(v51 - 24) = *(_OWORD *)(v8 + 40);
          *(_QWORD *)(v51 - 8) = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 40) = 0;
          *(_QWORD *)(v8 + 48) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          result = *(__n128 *)(v8 + 64);
          v61 = *(_OWORD *)(v8 + 80);
          *(__n128 *)v51 = result;
          *(_OWORD *)(v51 + 16) = v61;
          v8 += 96;
        }
        v51 += 96;
        if ((_QWORD *)v8 == v50)
        {
          if ((_QWORD *)v52 != a2)
          {
            v62 = 0;
            do
            {
              v63 = (_QWORD *)(v52 + v62);
              v64 = v51 + v62;
              v65 = *(_OWORD *)(v52 + v62);
              v66 = *(_OWORD *)(v52 + v62 + 16);
              *(_DWORD *)(v64 - 32) = *(_DWORD *)(v52 + v62 + 32);
              *(_OWORD *)(v64 - 64) = v65;
              *(_OWORD *)(v64 - 48) = v66;
              *(_QWORD *)(v64 - 16) = 0;
              *(_QWORD *)(v64 - 8) = 0;
              *(_QWORD *)(v64 - 24) = 0;
              *(_OWORD *)(v64 - 24) = *(_OWORD *)(v52 + v62 + 40);
              *(_QWORD *)(v64 - 8) = *(_QWORD *)(v52 + v62 + 56);
              v63[5] = 0;
              v63[6] = 0;
              v63[7] = 0;
              result = *(__n128 *)(v52 + v62 + 64);
              v67 = *(_OWORD *)(v52 + v62 + 80);
              *(__n128 *)v64 = result;
              *(_OWORD *)(v64 + 16) = v67;
              v62 += 96;
            }
            while (v63 + 12 != a2);
          }
          return result;
        }
      }
      if ((_QWORD *)v8 != v50)
      {
        v68 = 0;
        do
        {
          v69 = v51 + v68;
          v70 = (_QWORD *)(v8 + v68);
          v71 = *(_OWORD *)(v8 + v68);
          v72 = *(_OWORD *)(v8 + v68 + 16);
          *(_DWORD *)(v69 - 32) = *(_DWORD *)(v8 + v68 + 32);
          *(_OWORD *)(v69 - 64) = v71;
          *(_OWORD *)(v69 - 48) = v72;
          *(_QWORD *)(v69 - 16) = 0;
          *(_QWORD *)(v69 - 8) = 0;
          *(_QWORD *)(v69 - 24) = 0;
          *(_OWORD *)(v69 - 24) = *(_OWORD *)(v8 + v68 + 40);
          *(_QWORD *)(v69 - 8) = *(_QWORD *)(v8 + v68 + 56);
          v70[5] = 0;
          v70[6] = 0;
          v70[7] = 0;
          result = *(__n128 *)(v8 + v68 + 64);
          v73 = *(_OWORD *)(v8 + v68 + 80);
          *(__n128 *)v69 = result;
          *(_OWORD *)(v69 + 16) = v73;
          v68 += 96;
        }
        while (v70 + 12 != v50);
      }
    }
    else if ((_QWORD *)a1 != a2)
    {
      v24 = *(_OWORD *)a1;
      v25 = *(_OWORD *)(a1 + 16);
      *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 32);
      *(_OWORD *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v25;
      *(_QWORD *)(a4 + 48) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      result = *(__n128 *)(a1 + 64);
      v26 = *(_OWORD *)(a1 + 80);
      *(__n128 *)(a4 + 64) = result;
      *(_OWORD *)(a4 + 80) = v26;
      v27 = a1 + 96;
      if ((_QWORD *)(a1 + 96) != a2)
      {
        v28 = 0;
        v29 = a4;
        do
        {
          v30 = v27;
          v31 = (_OWORD *)(v29 + 96);
          if (sub_22E8AB9E0(v27, v29))
          {
            v32 = *(_OWORD *)(v29 + 16);
            *v31 = *(_OWORD *)v29;
            *(_OWORD *)(v29 + 112) = v32;
            *(_DWORD *)(v29 + 128) = *(_DWORD *)(v29 + 32);
            *(_OWORD *)(v29 + 136) = *(_OWORD *)(v29 + 40);
            *(_QWORD *)(v29 + 152) = *(_QWORD *)(v29 + 56);
            *(_QWORD *)(v29 + 40) = 0;
            *(_QWORD *)(v29 + 48) = 0;
            *(_QWORD *)(v29 + 56) = 0;
            v33 = *(_OWORD *)(v29 + 80);
            v34 = a4;
            *(_OWORD *)(v29 + 160) = *(_OWORD *)(v29 + 64);
            *(_OWORD *)(v29 + 176) = v33;
            if (v29 != a4)
            {
              v35 = v28;
              while (1)
              {
                v34 = a4 + v35;
                if (!sub_22E8AB9E0(v30, a4 + v35 - 96))
                  break;
                v36 = *(_OWORD *)(a4 + v35 - 80);
                *(_OWORD *)v34 = *(_OWORD *)(a4 + v35 - 96);
                *(_OWORD *)(v34 + 16) = v36;
                *(_DWORD *)(v34 + 32) = *(_DWORD *)(a4 + v35 - 64);
                sub_22E6C58D4((void **)(v34 + 40));
                *(_OWORD *)(v34 + 40) = *(_OWORD *)(v34 - 56);
                *(_QWORD *)(v34 + 56) = *(_QWORD *)(v34 - 40);
                *(_QWORD *)(v34 - 48) = 0;
                *(_QWORD *)(v34 - 40) = 0;
                *(_QWORD *)(v34 - 56) = 0;
                v37 = *(_OWORD *)(v34 - 16);
                *(_OWORD *)(v34 + 64) = *(_OWORD *)(v34 - 32);
                *(_OWORD *)(v34 + 80) = v37;
                v35 -= 96;
                if (!v35)
                {
                  v34 = a4;
                  break;
                }
              }
            }
            v38 = *(_OWORD *)v30;
            v39 = *(_OWORD *)(v30 + 16);
            *(_DWORD *)(v34 + 32) = *(_DWORD *)(v30 + 32);
            *(_OWORD *)v34 = v38;
            *(_OWORD *)(v34 + 16) = v39;
            sub_22E6C58D4((void **)(v34 + 40));
            v40 = (_QWORD *)(v8 + 136);
            *(_OWORD *)(v34 + 40) = *(_OWORD *)(v8 + 136);
            *(_QWORD *)(v34 + 56) = *(_QWORD *)(v8 + 152);
            v41 = v34 + 64;
          }
          else
          {
            v42 = *(_OWORD *)v30;
            v43 = *(_OWORD *)(v30 + 16);
            *(_DWORD *)(v29 + 128) = *(_DWORD *)(v30 + 32);
            *v31 = v42;
            *(_OWORD *)(v29 + 112) = v43;
            *(_QWORD *)(v29 + 144) = 0;
            *(_QWORD *)(v29 + 152) = 0;
            *(_QWORD *)(v29 + 136) = 0;
            v40 = (_QWORD *)(v8 + 136);
            *(_OWORD *)(v29 + 136) = *(_OWORD *)(v8 + 136);
            *(_QWORD *)(v29 + 152) = *(_QWORD *)(v8 + 152);
            v41 = v29 + 160;
          }
          *v40 = 0;
          v40[1] = 0;
          v40[2] = 0;
          result = *(__n128 *)(v8 + 160);
          v44 = *(_OWORD *)(v8 + 176);
          v27 = v30 + 96;
          *(__n128 *)v41 = result;
          *(_OWORD *)(v41 + 16) = v44;
          v28 += 96;
          v29 += 96;
          v8 = v30;
        }
        while ((_QWORD *)(v30 + 96) != a2);
      }
    }
  }
  return result;
}

void sub_22E8AC440(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void **v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  _OWORD *v96;
  int v97;
  void **v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  _OWORD *v123;
  _QWORD *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t i;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  void **v152[2];

  v137 = a5;
  if (!a5)
    return;
  while (a4 > a7 && v137 > a7)
  {
    if (!a4)
      return;
    v13 = 0;
    v14 = -a4;
    while (1)
    {
      v15 = a1 + v13;
      if ((sub_22E8AB9E0(a2, a1 + v13) & 1) != 0)
        break;
      v13 += 96;
      if (__CFADD__(v14++, 1))
        return;
    }
    v17 = -v14;
    v18 = v137;
    v135 = a3;
    v136 = a6;
    v139 = a2;
    if (-v14 >= v137)
    {
      if (v14 == -1)
      {
        v105 = (__int128 *)(a1 + v13);
        v106 = *v105;
        v107 = v105[1];
        v146 = *((_DWORD *)v105 + 8);
        v144 = v106;
        v145 = v107;
        v108 = *((_QWORD *)v105 + 7);
        v143 = *(__int128 *)((char *)v105 + 40);
        *((_QWORD *)v105 + 5) = 0;
        *((_QWORD *)v105 + 6) = 0;
        *((_QWORD *)v105 + 7) = 0;
        v109 = v105[5];
        v150 = v105[4];
        v151 = v109;
        v110 = *(_OWORD *)a2;
        v111 = *(_OWORD *)(a2 + 16);
        *((_DWORD *)v105 + 8) = *(_DWORD *)(a2 + 32);
        *v105 = v110;
        v105[1] = v111;
        sub_22E6C58D4((void **)v105 + 5);
        *(__int128 *)((char *)v105 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)v105 + 7) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        v112 = *(_OWORD *)(a2 + 80);
        v105[4] = *(_OWORD *)(a2 + 64);
        v105[5] = v112;
        v113 = v146;
        v114 = v145;
        *(_OWORD *)a2 = v144;
        *(_OWORD *)(a2 + 16) = v114;
        *(_DWORD *)(a2 + 32) = v113;
        sub_22E6C58D4((void **)(a2 + 40));
        *(_OWORD *)(a2 + 40) = v143;
        *(_QWORD *)(a2 + 56) = v108;
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v115 = v151;
        *(_OWORD *)(a2 + 64) = v150;
        *(_OWORD *)(a2 + 80) = v115;
        v152[0] = (void **)&v147;
        sub_22E6C60B8(v152);
        return;
      }
      if (v14 > 0)
        v17 = 1 - v14;
      v21 = v17 >> 1;
      v22 = a1 + 96 * (v17 >> 1) + v13;
      v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 5);
      if (a3 == (_QWORD *)a2)
      {
        v20 = (uint64_t)a3;
      }
      else
      {
        v129 = v17 >> 1;
        v20 = a2;
        do
        {
          v30 = v29 >> 1;
          v31 = v29;
          v32 = v20 + 96 * (v29 >> 1);
          v33 = v20;
          v34 = v22;
          v35 = sub_22E8AB9E0(v32, v22);
          v20 = v33;
          v22 = v34;
          v36 = v32 + 96;
          if (v35)
            v29 = v31 + ~(v31 >> 1);
          else
            v29 = v30;
          if (v35)
            v20 = v36;
        }
        while (v29);
        a2 = v139;
        v29 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v139) >> 5);
        a6 = v136;
        v18 = v137;
        v21 = v129;
        a3 = v135;
      }
      goto LABEL_38;
    }
    if (v137 >= 0)
      v19 = v137;
    else
      v19 = v137 + 1;
    v133 = v19 >> 1;
    v20 = a2 + 96 * (v19 >> 1);
    v21 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - v13) >> 5);
    if (v15 != a2)
    {
      v131 = a7;
      v22 = a1 + v13;
      do
      {
        v23 = v21 >> 1;
        v24 = v22 + 96 * (v21 >> 1);
        v25 = v20;
        v26 = v21;
        v27 = v22;
        v28 = sub_22E8AB9E0(v20, v24);
        v20 = v25;
        if (v28)
          v22 = v27;
        else
          v22 = v24 + 96;
        if (v28)
          v21 = v23;
        else
          v21 = v26 + ~(v26 >> 1);
      }
      while (v21);
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a1 - v13) >> 5);
      a3 = v135;
      a6 = v136;
      a7 = v131;
      v29 = v133;
      v18 = v137;
      a2 = v139;
LABEL_38:
      if (v22 == a2)
      {
        v22 = v20;
      }
      else if (a2 == v20)
      {
        v20 = a2;
        a2 = v22;
      }
      else
      {
        v140 = v20;
        v130 = v21;
        v132 = a7;
        v134 = v29;
        v37 = 0;
        v38 = a2;
        for (i = v22; ; v22 = i)
        {
          v39 = v22 + v37;
          v40 = v139 + v37;
          v41 = *(_OWORD *)(v22 + v37);
          v42 = *(_OWORD *)(v22 + v37 + 16);
          v146 = *(_DWORD *)(v22 + v37 + 32);
          v144 = v41;
          v145 = v42;
          v43 = *(_QWORD *)(v22 + v37 + 56);
          v44 = (void **)(v22 + v37 + 40);
          v141 = *(_OWORD *)v44;
          *v44 = 0;
          *(_QWORD *)(v39 + 48) = 0;
          *(_QWORD *)(v39 + 56) = 0;
          v45 = *(_OWORD *)(v22 + v37 + 80);
          v150 = *(_OWORD *)(v22 + v37 + 64);
          v151 = v45;
          v46 = *(_OWORD *)(v139 + v37);
          v47 = *(_OWORD *)(v139 + v37 + 16);
          *(_DWORD *)(v39 + 32) = *(_DWORD *)(v139 + v37 + 32);
          *(_OWORD *)v39 = v46;
          *(_OWORD *)(v39 + 16) = v47;
          sub_22E6C58D4(v44);
          *(_OWORD *)v44 = *(_OWORD *)(v139 + v37 + 40);
          *(_QWORD *)(v39 + 56) = *(_QWORD *)(v139 + v37 + 56);
          *(_QWORD *)(v40 + 40) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v40 + 56) = 0;
          v48 = *(_OWORD *)(v139 + v37 + 80);
          *(_OWORD *)(v39 + 64) = *(_OWORD *)(v139 + v37 + 64);
          *(_OWORD *)(v39 + 80) = v48;
          v49 = v144;
          v50 = v145;
          *(_DWORD *)(v40 + 32) = v146;
          *(_OWORD *)v40 = v49;
          *(_OWORD *)(v40 + 16) = v50;
          sub_22E6C58D4((void **)(v139 + v37 + 40));
          *(_OWORD *)(v40 + 40) = v141;
          *(_QWORD *)(v40 + 56) = v43;
          v147 = 0;
          v148 = 0;
          v149 = 0;
          v51 = v151;
          *(_OWORD *)(v40 + 64) = v150;
          *(_OWORD *)(v40 + 80) = v51;
          v152[0] = (void **)&v147;
          sub_22E6C60B8(v152);
          v52 = v39 + 96;
          v20 = v140;
          if (v139 + v37 + 96 == v140)
            break;
          if (v52 == v38)
            v38 = v40 + 96;
          v37 += 96;
        }
        if (v52 == v38)
        {
          v18 = v137;
          a2 = i;
          v22 = v38;
          a3 = v135;
          a6 = v136;
          a7 = v132;
          v29 = v134;
          v21 = v130;
        }
        else
        {
          v53 = v52;
          v54 = v38;
          do
          {
            while (1)
            {
              v55 = *(_OWORD *)v53;
              v56 = *(_OWORD *)(v53 + 16);
              v146 = *(_DWORD *)(v53 + 32);
              v144 = v55;
              v145 = v56;
              v57 = *(_QWORD *)(v53 + 56);
              v142 = *(_OWORD *)(v53 + 40);
              *(_QWORD *)(v53 + 40) = 0;
              *(_QWORD *)(v53 + 48) = 0;
              *(_QWORD *)(v53 + 56) = 0;
              v58 = *(_OWORD *)(v53 + 80);
              v150 = *(_OWORD *)(v53 + 64);
              v151 = v58;
              v59 = *(_OWORD *)v38;
              v60 = *(_OWORD *)(v38 + 16);
              *(_DWORD *)(v53 + 32) = *(_DWORD *)(v38 + 32);
              *(_OWORD *)v53 = v59;
              *(_OWORD *)(v53 + 16) = v60;
              sub_22E6C58D4((void **)(v53 + 40));
              *(_OWORD *)(v53 + 40) = *(_OWORD *)(v38 + 40);
              *(_QWORD *)(v53 + 56) = *(_QWORD *)(v38 + 56);
              *(_QWORD *)(v38 + 40) = 0;
              *(_QWORD *)(v38 + 48) = 0;
              *(_QWORD *)(v38 + 56) = 0;
              v61 = *(_OWORD *)(v38 + 80);
              *(_OWORD *)(v53 + 64) = *(_OWORD *)(v38 + 64);
              *(_OWORD *)(v53 + 80) = v61;
              v62 = v146;
              v63 = v145;
              *(_OWORD *)v38 = v144;
              *(_OWORD *)(v38 + 16) = v63;
              *(_DWORD *)(v38 + 32) = v62;
              sub_22E6C58D4((void **)(v38 + 40));
              *(_OWORD *)(v38 + 40) = v142;
              *(_QWORD *)(v38 + 56) = v57;
              v147 = 0;
              v148 = 0;
              v149 = 0;
              v64 = v151;
              *(_OWORD *)(v38 + 64) = v150;
              *(_OWORD *)(v38 + 80) = v64;
              v152[0] = (void **)&v147;
              sub_22E6C60B8(v152);
              v20 = v140;
              v53 += 96;
              v38 += 96;
              if (v38 == v140)
                break;
              if (v53 == v54)
                v54 = v38;
            }
            v38 = v54;
          }
          while (v53 != v54);
          v18 = v137;
          v22 = v52;
          a2 = i;
          v29 = v134;
          a3 = v135;
          v21 = v130;
          a7 = v132;
          a6 = v136;
        }
      }
      goto LABEL_56;
    }
    v15 = a2;
    v22 = a2 + 96 * (v19 >> 1);
    v29 = v19 >> 1;
LABEL_56:
    a4 = -(uint64_t)v21 - v14;
    if ((uint64_t)(v29 + v21) >= (uint64_t)(v18 - (v29 + v21) - v14))
    {
      v69 = v22;
      v70 = v21;
      sub_22E8AC440(v22);
      v68 = v29;
      a4 = v70;
      a3 = (_QWORD *)v69;
    }
    else
    {
      v65 = v15;
      v66 = v20;
      v15 = v22;
      v67 = v18 - v29;
      sub_22E8AC440(v65);
      v68 = v67;
      a2 = v66;
    }
    v137 = v68;
    a1 = v15;
    if (!v68)
      return;
  }
  if (a4 <= v137)
  {
    if (a1 == a2)
      return;
    v86 = 0;
    v72 = 0;
    do
    {
      v87 = a6 + v86;
      v88 = (_QWORD *)(a1 + v86);
      v89 = *(_OWORD *)(a1 + v86);
      v90 = *(_OWORD *)(a1 + v86 + 16);
      *(_DWORD *)(v87 + 32) = *(_DWORD *)(a1 + v86 + 32);
      *(_OWORD *)v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_QWORD *)(v87 + 48) = 0;
      *(_QWORD *)(v87 + 56) = 0;
      *(_QWORD *)(v87 + 40) = 0;
      *(_OWORD *)(v87 + 40) = *(_OWORD *)(a1 + v86 + 40);
      *(_QWORD *)(v87 + 56) = *(_QWORD *)(a1 + v86 + 56);
      v88[5] = 0;
      v88[6] = 0;
      v88[7] = 0;
      v91 = *(_OWORD *)(a1 + v86 + 80);
      *(_OWORD *)(v87 + 64) = *(_OWORD *)(a1 + v86 + 64);
      *(_OWORD *)(v87 + 80) = v91;
      ++v72;
      v86 += 96;
    }
    while (v88 + 12 != (_QWORD *)a2);
    if (v86)
    {
      v92 = a6 + v86;
      v93 = a6 + v86 - 96;
      v94 = (_OWORD *)(a1 + 64);
      v95 = a6;
      while ((_QWORD *)a2 != a3)
      {
        v96 = v94 - 4;
        v97 = sub_22E8AB9E0(a2, v95);
        v98 = (void **)v94 - 3;
        if (v97)
        {
          v99 = *(_OWORD *)a2;
          v100 = *(_OWORD *)(a2 + 16);
          *((_DWORD *)v94 - 8) = *(_DWORD *)(a2 + 32);
          *v96 = v99;
          *(v94 - 3) = v100;
          sub_22E6C58D4(v98);
          *(_OWORD *)((char *)v94 - 24) = *(_OWORD *)(a2 + 40);
          *((_QWORD *)v94 - 1) = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 56) = 0;
          v101 = *(_OWORD *)(a2 + 80);
          *v94 = *(_OWORD *)(a2 + 64);
          v94[1] = v101;
          a2 += 96;
        }
        else
        {
          v102 = *(_OWORD *)v95;
          v103 = *(_OWORD *)(v95 + 16);
          *((_DWORD *)v94 - 8) = *(_DWORD *)(v95 + 32);
          *v96 = v102;
          *(v94 - 3) = v103;
          sub_22E6C58D4(v98);
          *(_OWORD *)((char *)v94 - 24) = *(_OWORD *)(v95 + 40);
          *((_QWORD *)v94 - 1) = *(_QWORD *)(v95 + 56);
          *(_QWORD *)(v95 + 40) = 0;
          *(_QWORD *)(v95 + 48) = 0;
          *(_QWORD *)(v95 + 56) = 0;
          v104 = *(_OWORD *)(v95 + 80);
          *v94 = *(_OWORD *)(v95 + 64);
          v94[1] = v104;
          v95 += 96;
        }
        v94 += 6;
        if (v92 == v95)
          goto LABEL_98;
      }
      if (v92 != v95)
      {
        v122 = 0;
        do
        {
          v123 = &v94[v122 / 0x10];
          v124 = (_QWORD *)(v95 + v122);
          v125 = *(_OWORD *)(v95 + v122);
          v126 = *(_OWORD *)(v95 + v122 + 16);
          *((_DWORD *)v123 - 8) = *(_DWORD *)(v95 + v122 + 32);
          *(v123 - 4) = v125;
          *(v123 - 3) = v126;
          sub_22E6C58D4((void **)&v94[v122 / 0x10 - 1] - 1);
          *(_OWORD *)((char *)v123 - 24) = *(_OWORD *)(v95 + v122 + 40);
          *((_QWORD *)v123 - 1) = *(_QWORD *)(v95 + v122 + 56);
          v124[5] = 0;
          v124[6] = 0;
          v124[7] = 0;
          v127 = *(_OWORD *)(v95 + v122 + 80);
          *v123 = *(_OWORD *)(v95 + v122 + 64);
          v123[1] = v127;
          v122 += 96;
        }
        while ((_QWORD *)v93 != v124);
      }
    }
  }
  else
  {
    if ((_QWORD *)a2 == a3)
      return;
    v71 = 0;
    v72 = 0;
    do
    {
      v73 = a6 + v71;
      v74 = (_QWORD *)(a2 + v71);
      v75 = *(_OWORD *)(a2 + v71);
      v76 = *(_OWORD *)(a2 + v71 + 16);
      *(_DWORD *)(v73 + 32) = *(_DWORD *)(a2 + v71 + 32);
      *(_OWORD *)v73 = v75;
      *(_OWORD *)(v73 + 16) = v76;
      *(_QWORD *)(v73 + 48) = 0;
      *(_QWORD *)(v73 + 56) = 0;
      *(_QWORD *)(v73 + 40) = 0;
      *(_OWORD *)(v73 + 40) = *(_OWORD *)(a2 + v71 + 40);
      *(_QWORD *)(v73 + 56) = *(_QWORD *)(a2 + v71 + 56);
      v74[5] = 0;
      v74[6] = 0;
      v74[7] = 0;
      v77 = *(_OWORD *)(a2 + v71 + 80);
      *(_OWORD *)(v73 + 64) = *(_OWORD *)(a2 + v71 + 64);
      *(_OWORD *)(v73 + 80) = v77;
      ++v72;
      v71 += 96;
    }
    while (v74 + 12 != a3);
    if (v71)
    {
      v78 = a6 + v71;
      v79 = a3 - 5;
      while (a2 != a1)
      {
        v80 = sub_22E8AB9E0(v78 - 96, a2 - 96);
        if (v80)
          v81 = a2 - 96;
        else
          v81 = v78 - 96;
        if (v80)
          v82 = a2;
        else
          v82 = v78;
        v83 = *(_DWORD *)(v81 + 32);
        v84 = *(_OWORD *)(v81 + 16);
        if (v80)
          a2 -= 96;
        else
          v78 -= 96;
        *(_OWORD *)(v79 - 7) = *(_OWORD *)v81;
        *(_OWORD *)(v79 - 5) = v84;
        *((_DWORD *)v79 - 6) = v83;
        sub_22E6C58D4((void **)v79 - 2);
        *((_OWORD *)v79 - 1) = *(_OWORD *)(v82 - 56);
        *v79 = *(_QWORD *)(v82 - 40);
        *(_QWORD *)(v82 - 56) = 0;
        *(_QWORD *)(v82 - 48) = 0;
        *(_QWORD *)(v82 - 40) = 0;
        v85 = *(_OWORD *)(v82 - 32);
        *(_OWORD *)(v79 + 3) = *(_OWORD *)(v82 - 16);
        *(_OWORD *)(v79 + 1) = v85;
        v79 -= 12;
        if (v78 == a6)
          goto LABEL_98;
      }
      if (v78 != a6)
      {
        v116 = 0;
        do
        {
          v117 = v78 + v116;
          v118 = &v79[v116 / 8];
          v119 = *(_OWORD *)(v78 + v116 - 96);
          v120 = *(_OWORD *)(v78 + v116 - 80);
          *((_DWORD *)v118 - 6) = *(_DWORD *)(v78 + v116 - 64);
          *(_OWORD *)(v118 - 5) = v120;
          *(_OWORD *)(v118 - 7) = v119;
          sub_22E6C58D4((void **)&v79[v116 / 8 - 2]);
          *((_OWORD *)v118 - 1) = *(_OWORD *)(v78 + v116 - 56);
          *v118 = *(_QWORD *)(v78 + v116 - 40);
          *(_QWORD *)(v117 - 56) = 0;
          *(_QWORD *)(v117 - 48) = 0;
          *(_QWORD *)(v117 - 40) = 0;
          v121 = *(_OWORD *)(v78 + v116 - 32);
          *(_OWORD *)(v118 + 3) = *(_OWORD *)(v78 + v116 - 16);
          *(_OWORD *)(v118 + 1) = v121;
          v116 -= 96;
        }
        while (v78 + v116 != a6);
      }
    }
  }
LABEL_98:
  if (a6)
  {
    v128 = a6 + 40;
    do
    {
      *(_QWORD *)&v144 = v128;
      sub_22E6C60B8((void ***)&v144);
      v128 += 96;
      --v72;
    }
    while (v72);
  }
}

uint64_t sub_22E8ACD1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v11;

  v7 = a4;
  result = (uint64_t)sub_22F0AB7EC((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
  if (*(_DWORD *)a1)
    goto LABEL_12;
  for (i = v7; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_14;
      v11 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v11 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v7 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_11;
    }
    if (v11 == 24)
      goto LABEL_15;
    if (v11 == 26)
      break;
    if (((1 << v11) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_14:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_14;
LABEL_15:
  v7 = i;
LABEL_11:
  result = sub_22F115668(v7);
  *(_DWORD *)a1 = result;
LABEL_12:
  *(_DWORD *)(a1 + 4) = a6;
  return result;
}

void sub_22E8ACE30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6[2];

  v6[0] = a2;
  v6[1] = a3;
  if (a2)
  {
    *(_QWORD *)a1 = sub_22F0AB0EC(v6);
    sub_22F0ABBC8(a1 + 8, a2, a3);
  }
  else
  {
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_22E8ACE94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  if (v3)
    return sub_22F0ABC50(v2, a2);
  else
    return 0;
}

void sub_22E8ACEBC(__int16 a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, uint64_t a15, uint64_t *a16, uint64_t *a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,int a25,uint64_t a26,unint64_t a27,unsigned __int8 a28,int a29,int a30,uint64_t a31)
{
  _WORD *v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _WORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  void **v58;
  size_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 24) = 0;
  *(_DWORD *)a9 = 3;
  *(_DWORD *)(a9 + 4) = a23;
  *(_DWORD *)(a9 + 8) = a25;
  v34 = (_WORD *)(a9 + 32);
  v35 = *(_WORD *)(a9 + 32) & 0xFC00;
  if (a2)
    v36 = 4;
  else
    v36 = 0;
  v37 = v36 | a1 | (2 * (a6 != 0));
  *(_DWORD *)(a9 + 36) = a3;
  *(_DWORD *)(a9 + 40) = a6;
  *(_DWORD *)(a9 + 44) = a7;
  *(_DWORD *)(a9 + 48) = a5;
  if (a8)
    v38 = 8;
  else
    v38 = 0;
  *(_DWORD *)(a9 + 60) = a12;
  *(_QWORD *)(a9 + 64) = a15;
  *(_DWORD *)(a9 + 52) = 0;
  *(_DWORD *)(a9 + 56) = a10;
  *v34 = (v37 | v38) & 0xFF0F | (16 * (a14 & 0xF)) | (((a28 | a27) != 0) << 9) | v35;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 104) = a27;
  *(_DWORD *)(a9 + 112) = a30;
  *(_QWORD *)(a9 + 80) = 0;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 72) = 0;
  if (a31)
  {
    if ((*(_BYTE *)(a31 + 3) & 0xFE) != 0
      || (v43 = *(_QWORD *)(a31 + 32), v43 >= 8)
      && (((v44 = v43 & 0xFFFFFFFFFFFFFFF8, (v43 & 4) == 0) || !v44) && (v43 & 4) == 0 || *(_DWORD *)(v44 + 8)))
    {
      v39 = operator new();
      v40 = *(_QWORD *)(a31 + 40);
      *(_QWORD *)v39 &= 0xFFFFFF8000000000;
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 40) = v40;
      *(_QWORD *)(v39 + 216) = 0;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_OWORD *)(v39 + 96) = 0u;
      *(_OWORD *)(v39 + 112) = 0u;
      *(_OWORD *)(v39 + 128) = 0u;
      *(_OWORD *)(v39 + 144) = 0u;
      *(_OWORD *)(v39 + 160) = 0u;
      *(_OWORD *)(v39 + 176) = 0u;
      *(_OWORD *)(v39 + 192) = 0u;
      *(_DWORD *)(v39 + 208) = 0;
      *(_QWORD *)(a9 + 80) = v39;
      v68 = a9;
      sub_22E8AD29C(a31, (uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))sub_22E8AEE64, (uint64_t)&v68);
      sub_22E82103C(*(_QWORD *)(a9 + 80) + 24, a31 + 24);
      sub_22E8D1C2C(*(_QWORD *)(a9 + 80) + 40, a31 + 40);
      v41 = *(_QWORD *)(a31 + 48);
      if ((v41 & 4) != 0)
      {
        v42 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v42)
          *(_DWORD *)(v42 + 8) = 0;
      }
      else
      {
        *(_QWORD *)(a31 + 48) = 0;
      }
    }
  }
  if (a5)
  {
    if (a5 > 0x10 || (*(_WORD *)(a26 + 1088) & 0x100) != 0)
    {
      v49 = 32 * a5;
      v50 = (_QWORD *)operator new[]();
      *v50 = 32;
      v50[1] = a5;
      v51 = v50 + 5;
      do
      {
        *((_DWORD *)v51 - 4) = 0;
        *v51 = 0;
        v51 += 4;
        v49 -= 32;
      }
      while (v49);
      *(_QWORD *)(a9 + 72) = v50 + 2;
      v46 = (_WORD *)(a9 + 32);
    }
    else
    {
      v46 = (_WORD *)(a26 + 1088);
      *(_QWORD *)(a9 + 72) = a26 + 1168;
      v47 = 32 * a5;
      v48 = (_QWORD *)(a26 + 1192);
      do
      {
        *((_DWORD *)v48 - 4) = 0;
        *v48 = 0;
        v48 += 4;
        v47 -= 32;
      }
      while (v47);
      *v34 &= ~0x100u;
    }
    v52 = 0;
    *v46 |= 0x100u;
    if (a5 <= 1)
      v53 = 1;
    else
      v53 = a5;
    v54 = 32 * v53;
    do
    {
      v55 = *(_QWORD *)(a9 + 72) + v52;
      v56 = *(_OWORD *)(a4 + v52);
      *(_QWORD *)(v55 + 16) = *(_QWORD *)(a4 + v52 + 16);
      *(_OWORD *)v55 = v56;
      v57 = *(_QWORD *)(a4 + v52 + 24);
      *(_QWORD *)(a4 + v52 + 24) = 0;
      v58 = *(void ***)(v55 + 24);
      *(_QWORD *)(v55 + 24) = v57;
      if (v58)
      {
        if (*v58 != v58 + 2)
          free(*v58);
        MEMORY[0x2348A0E9C](v58, 0x1080C4070FE8099);
      }
      v52 += 32;
    }
    while (v54 != v52);
  }
  if ((a14 - 6) < 3)
    goto LABEL_44;
  if (a14 == 11)
  {
    a19 = a20;
LABEL_44:
    *(_QWORD *)(a9 + 96) = a19;
    goto LABEL_45;
  }
  if (a14 == 2 && a18)
  {
    v61 = 16 * a18;
    *(_DWORD *)(a9 + 52) = a18;
    v62 = (void *)operator new[]();
    bzero(v62, v61);
    v63 = 0;
    *(_QWORD *)(a9 + 96) = v62;
    do
    {
      v64 = *a16++;
      *(_QWORD *)(*(_QWORD *)(a9 + 96) + v63) = v64;
      v65 = *a17++;
      *(_QWORD *)(*(_QWORD *)(a9 + 96) + v63 + 8) = v65;
      v63 += 16;
    }
    while (v61 != v63);
  }
LABEL_45:
  if (a22)
  {
    *(_DWORD *)(a9 + 52) = a22;
    v66 = operator new[]();
    v67 = 0;
    *(_QWORD *)(a9 + 96) = v66;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a9 + 96) + 8 * v67) = *(_QWORD *)(a21 + 8 * v67);
      ++v67;
    }
    while (a22 != v67);
  }
}

uint64_t sub_22E8AD29C(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t (*v4)(uint64_t, uint64_t, const char *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0x2000000) != 0)
  {
    result = a2(a3, 1, "const", 5, *(unsigned int *)(result + 144));
    v4 = a2;
    v6 = *(_QWORD *)v5;
  }
  if ((v6 & 0x8000000) != 0)
  {
    result = a2(a3, 4, "volatile", 8, *(unsigned int *)(v5 + 152));
    v4 = a2;
    v6 = *(_QWORD *)v5;
  }
  if ((v6 & 0x4000000) != 0)
  {
    result = a2(a3, 2, "restrict", 8, *(unsigned int *)(v5 + 148));
    v4 = a2;
    v6 = *(_QWORD *)v5;
  }
  if ((v6 & 0x10000000) != 0)
  {
    result = a2(a3, 8, "unaligned", 9, *(unsigned int *)(v5 + 160));
    v4 = a2;
    v6 = *(_QWORD *)v5;
  }
  if ((v6 & 0x80000000) != 0)
  {
    v7 = "coherent(system)";
    v8 = *(unsigned int *)(v5 + 204);
    v9 = a3;
    v10 = 64;
    return v4(v9, v10, v7, 16, v8);
  }
  if ((v6 & 0x40000000) != 0)
  {
    v7 = "coherent(device)";
    v8 = *(unsigned int *)(v5 + 204);
    v9 = a3;
    v10 = 32;
    return v4(v9, v10, v7, 16, v8);
  }
  return result;
}

uint64_t sub_22E8AD3D4(uint64_t result, int a2, __int128 *a3, unint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  __int128 v10;

  *(_DWORD *)(result + 88) = a2;
  *(_DWORD *)(result + 92) = a5;
  *(_DWORD *)(result + 104) = *(_DWORD *)(result + 104) & 0x80000000 | a4 & 0x7FFFFFFF;
  *(_DWORD *)(result + 76) = a5;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = a2;
  *(_DWORD *)(result + 68) = a5;
  if (a4)
  {
    v6 = result;
    v7 = 16 * a4;
    if (a4 > 0x10 || (v8 = *(_WORD *)(result + 1088), (v8 & 0x100) != 0))
    {
      result = operator new[]();
      v9 = 0;
      do
      {
        *(_DWORD *)(result + v9 + 8) = 0;
        v9 += 16;
      }
      while (v7 != v9);
      *(_QWORD *)(v6 + 96) = result;
      *(_DWORD *)(v6 + 104) |= 0x80000000;
    }
    else
    {
      result += 1168;
      *(_QWORD *)(v6 + 96) = v6 + 1168;
      *(_DWORD *)(v6 + 104) = a4 & 0x7FFFFFFF;
      *(_WORD *)(v6 + 1088) = v8 | 0x100;
    }
    do
    {
      v10 = *a3++;
      *(_OWORD *)result = v10;
      result += 16;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

BOOL sub_22E8AD4A8(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  char v3;
  int v4;
  _DWORD *v5;
  int v6;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v1)
  {
LABEL_5:
    v5 = *(_DWORD **)a1;
    v6 = (**(_DWORD **)a1 >> 12) & 0x3F;
    result = 0;
    if (((1 << ((*v5 >> 12) & 0x3F)) & 0x7FFFE0FFFFFFFLL) != 0)
      return result;
    if (((1 << v6) & 0x130000000) != 0)
    {
      v8 = *((_QWORD *)v5 + 1);
      if (v8 < 0x10)
        return 0;
      v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 16) == 57)
          v8 = *(_QWORD *)(v9 + 8);
      }
      if (v8 < 0x10)
        return 0;
    }
    else
    {
      v10 = *((_QWORD *)v5 + 1);
      if (!v10)
        return 0;
      v8 = *(_QWORD *)(v10 + 8);
    }
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2;
  }
  v2 = *(int **)(a1 + 112);
  while (1)
  {
    v4 = *v2;
    v2 += 30;
    v3 = v4;
    if (v4 != 6)
      return ((1 << v3) & 0xB7) == 0;
    if (!--v1)
      goto LABEL_5;
  }
}

BOOL sub_22E8AD59C(uint64_t a1)
{
  if ((**(_QWORD **)a1 & 7) == 3)
    return 1;
  if (*(_DWORD *)(a1 + 40) == 1)
    return (*(_DWORD *)(a1 + 48) - 1) < 4;
  return 0;
}

BOOL sub_22E8AD5E0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 40) & 0xFFFFFFFD) == 4;
}

uint64_t sub_22E8AD5F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  LODWORD(v2) = (*a1 & 0x1F) != 0;
  if ((*a1 & 0xFE000000) != 0)
    LODWORD(v2) = v2 | 4;
  if ((v1 & 0x3F3C0) == 0 && (v1 & 0xC00) == 0)
    v2 = v2;
  else
    v2 = v2 | 2;
  if ((v1 & 0x500000000) != 0 || a1[2] | v1 & 0xA00000000)
    return v2 | 8;
  return v2;
}

uint64_t sub_22E8AD658(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _QWORD *a5, int *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;

  v12 = *(_QWORD *)(a2 + 72);
  if ((*(_DWORD *)(v12 + 52) & 0x40000000) != 0
    && !sub_22F420564(a2 + 24, (uint64_t)"cl_clang_storage_class_specifiers", 33, v12)
    && a3 <= 6)
  {
    if (((1 << a3) & 0x4C) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
      if ((v18 & 0x100000000) == 0 && v18 <= 0x77)
      {
        *a6 = 53;
        v15 = off_24FAA5778[(int)a3 - 2];
LABEL_7:
        *a5 = v15;
        return 1;
      }
    }
    else if (((1 << a3) & 0x30) != 0)
    {
      v14 = 53;
LABEL_5:
      *a6 = v14;
      v15 = "auto";
      if (a3 == 5)
        v15 = "register";
      goto LABEL_7;
    }
  }
  v13 = *(_QWORD *)(a2 + 72);
  if ((a3 & 0xFFFFFFFE) == 4 && (*(_QWORD *)(v13 + 100) & 0x2000000000) != 0)
  {
    v14 = 3901;
    goto LABEL_5;
  }
  v16 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 7) == 0)
    goto LABEL_28;
  if ((v16 & 0x3F000) != 0 || (*(_BYTE *)(v13 + 1) & 1) == 0)
    goto LABEL_25;
  if (a3 != 4)
  {
    if ((*(_QWORD *)a1 & 7) == 4)
    {
      v19 = (v16 >> 12) & 0x3F;
      if (!v19)
      {
        v21 = *(_DWORD *)(a1 + 96);
        *(_DWORD *)(a1 + 120) = v21;
        *(_DWORD *)(a1 + 132) = v21;
        v16 = v16 & 0xFFFFFFFFFFDC0FFFLL | 0x21000;
        goto LABEL_28;
      }
      if (v19 == 50)
      {
LABEL_28:
        result = 0;
        *(_QWORD *)a1 = v16 & 0xFFFFFFFFFFFFFFF8 | a3 & 7;
        *(_DWORD *)(a1 + 96) = a4;
        return result;
      }
      *a5 = sub_22F2F2CB0(v19);
      *a6 = 3658;
      v16 = *(_QWORD *)a1;
    }
LABEL_25:
    if ((v16 & 0x20) == 0 || a3 != 1 || (v16 & 7) != 2)
    {
      *a5 = off_24FAA5810[v16 & 7];
      if ((v16 & 7) == a3)
        v20 = 94;
      else
        v20 = 3658;
LABEL_32:
      *a6 = v20;
      return 1;
    }
    goto LABEL_28;
  }
  result = (v16 >> 12) & 0x3F;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 50)
      return 0;
    *a5 = sub_22F2F2CB0(result);
    v20 = 3658;
    goto LABEL_32;
  }
  *(_DWORD *)(a1 + 120) = a4;
  *(_DWORD *)(a1 + 132) = a4;
  *(_QWORD *)a1 = v16 & 0xFFFFFFFFFFDC0FFFLL | 0x21000;
  return result;
}

uint64_t sub_22E8AD898(unint64_t *a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *a1;
  v6 = (*a1 >> 12) & 0x3F;
  if (v6)
  {
    if (v6 == 50)
    {
      return 0;
    }
    else
    {
      *a4 = sub_22F2F2CB0((*a1 >> 12) & 0x3F);
      *a5 = 3658;
      return 1;
    }
  }
  else
  {
    *((_DWORD *)a1 + 30) = a3;
    *((_DWORD *)a1 + 33) = a3;
    if (a2 == 19 && (v5 & 0x140000) == 0x40000)
    {
      v7 = 0;
      v8 = v5 | 0x100000;
    }
    else
    {
      v7 = 0;
      v8 = v5 & 0xFFFFFFFFFFDC0FFFLL | ((a2 & 0x3F) << 12);
    }
    *a1 = v8;
  }
  return v7;
}

uint64_t sub_22E8AD940(unint64_t *a1, int a2, int a3, _QWORD *a4, int *a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v5 = *a1;
  v6 = *a1 >> 6;
  if (!(*a1 >> 6))
  {
    *((_DWORD *)a1 + 26) = a3;
LABEL_9:
    v8 = 0;
    *a1 = v5 & 0xFFFFFFFFFFFFFF3FLL | ((a2 & 3) << 6);
    *((_DWORD *)a1 + 27) = a3;
    return v8;
  }
  if (a2 == 3 && (_DWORD)v6 == 2)
    goto LABEL_9;
  *a4 = off_24FAA57A0[v6 - 1];
  if ((_DWORD)v6 == a2)
    v7 = 94;
  else
    v7 = 3658;
  *a5 = v7;
  return 1;
}

uint64_t sub_22E8AD9B4(unint64_t *a1, char a2, int a3, int a4, uint64_t *a5, _DWORD *a6, unint64_t a7, unsigned __int8 a8)
{
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;

  v9 = *a1;
  result = (*a1 >> 12) & 0x3F;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 50)
    {
      return 0;
    }
    else
    {
      *a5 = sub_22F2F2CB0(result);
      *a6 = 3658;
      return 1;
    }
  }
  else
  {
    v11 = v9 & 0xFFFFFFFFFFDC0FFFLL;
    *((_DWORD *)a1 + 30) = a3;
    *((_DWORD *)a1 + 33) = a4;
    v12 = 0x200000;
    if (((a7 != 0) & a8) == 0)
      v12 = 0;
    *a1 = v12 | ((a2 & 0x3F) << 12) | v11;
    a1[1] = a7;
  }
  return result;
}

uint64_t sub_22E8ADA48(unint64_t *a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *a1;
  v6 = (*a1 >> 12) & 0x3F;
  if (v6 == 50)
    return 0;
  if ((v5 & 0xC0000) == 0x40000 && v6 == 0)
  {
    v7 = 0;
    v9 = 0x80000;
    if (!a2)
      v9 = 0;
    *a1 = v5 & 0xFFFFFFFFFFF7FFFFLL | v9;
    *((_DWORD *)a1 + 30) = a3;
    *((_DWORD *)a1 + 33) = a3;
  }
  else
  {
    *a4 = sub_22F2F2CB0((*a1 >> 12) & 0x3F);
    *a5 = 3674;
    return 1;
  }
  return v7;
}

uint64_t sub_22E8ADAD8(unint64_t *a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *a1;
  v6 = (*a1 >> 12) & 0x3F;
  if (v6 == 50)
    return 0;
  if ((v5 & 0x140000) == 0x40000 && v6 == 0)
  {
    v7 = 0;
    v9 = 0x100000;
    if (!a2)
      v9 = 0;
    *a1 = v5 & 0xFFFFFFFFFFEFFFFFLL | v9;
    *((_DWORD *)a1 + 30) = a3;
    *((_DWORD *)a1 + 33) = a3;
  }
  else
  {
    *a4 = sub_22F2F2CB0((*a1 >> 12) & 0x3F);
    *a5 = 3692;
    return 1;
  }
  return v7;
}

BOOL sub_22E8ADB6C(_DWORD *a1, char a2, int a3, const char **a4, int *a5, uint64_t *a6)
{
  int v6;
  uint64_t v8;
  int v10;

  v6 = a2 & (*a1 >> 25);
  if (v6)
  {
    v8 = *a6;
    *a4 = sub_22F2F2F58(a2);
    if ((v8 & 1) != 0)
      v10 = 131;
    else
      v10 = 94;
    *a5 = v10;
  }
  else
  {
    sub_22E8ADBD8((uint64_t)a1, a2, a3);
  }
  return v6 != 0;
}

uint64_t sub_22E8ADBD8(uint64_t a1, int a2, int a3)
{
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFF01FFFFFFLL | *(_QWORD *)a1 & 0xFE000000 | (a2 << 25);
  if (a2 == 1)
  {
    *(_DWORD *)(a1 + 144) = a3;
  }
  else if (a2 > 7)
  {
    if (a2 > 31)
    {
      *(_DWORD *)(a1 + 204) = a3;
    }
    else if (a2 == 8)
    {
      *(_DWORD *)(a1 + 160) = a3;
    }
    else
    {
      *(_DWORD *)(a1 + 156) = a3;
    }
  }
  else if (a2 == 4)
  {
    *(_DWORD *)(a1 + 152) = a3;
  }
  else
  {
    *(_DWORD *)(a1 + 148) = a3;
  }
  return 0;
}

void sub_22E8ADC50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  const char *v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  _BYTE *v39;
  _QWORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[96];
  _BYTE v67[96];
  _BYTE v68[96];
  _BYTE v69[96];
  unsigned int v70[24];
  unsigned int v71[24];
  _BYTE v72[96];
  _BYTE v73[96];
  _BYTE v74[96];
  _BYTE v75[96];
  unsigned int v76[24];
  unsigned int v77[24];
  unsigned int v78[24];
  _BYTE v79[32];
  uint64_t v80;
  uint64_t v81;
  char v82;
  void *v83;
  __int128 v84;
  void *__p[9];
  unsigned int v86[6];
  uint64_t v87;
  _DWORD v88[14];
  _DWORD v89[14];
  _DWORD v90[14];
  _DWORD v91[14];
  _DWORD v92[14];
  _DWORD v93[14];
  _DWORD v94[28];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = *(_WORD *)(a1 + 208) & 0xFC00 | (*(_QWORD *)a1 >> 4) & 0xC0 | (((*(_QWORD *)a1 >> 6) & 3) << 8) | (*(_QWORD *)a1 >> 12) & 0x3F;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a1 + 208) & 0xFC00 | (*(_QWORD *)a1 >> 4) & 0xC0 | (((*(_QWORD *)a1 >> 6) & 3) << 8) | (*(_QWORD *)a1 >> 12) & 0x3F;
  v6 = a1 + 32;
  v7 = *(_QWORD *)(a1 + 32);
  if ((v7 & 4) != 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    v6 = *(_QWORD *)v9;
    v8 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
  }
  else
  {
    v8 = v6 + 8 * (v7 > 7);
  }
  while (1)
  {
    if (v6 == v8)
    {
      v10 = 0;
      goto LABEL_9;
    }
    if (*(_WORD *)(*(_QWORD *)v6 + 28) == 265)
      break;
    v6 += 8;
  }
  v10 = 1024;
LABEL_9:
  *(_WORD *)(a1 + 208) = v10 | v5 & 0xFBFF;
  v11 = (v4 >> 12) & 0x3F;
  if (v11 == 50)
    return;
  if (v11 != 34 || (v4 & 0xFE1C0300) == 0 && (v4 & 0xCC0) == 0)
  {
    if ((v4 & 0x40000) == 0)
      goto LABEL_59;
LABEL_14:
    if ((~(_BYTE)v4 & 0xC0) == 0
      && ((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 15088)
                                                                   + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "vsx", 3) & 1) == 0&& (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) & 0x80000000000) == 0)
    {
      sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0xE74u, 0, (uint64_t)v78);
      sub_22E903BEC(v78);
    }
    if ((*(_QWORD *)a1 & 0x3F000) == 0x8000
      && ((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 15088)
                                                                   + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "power8-vector", 13) & 1) == 0)
    {
      sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xE71u, 0, (uint64_t)v77);
      sub_22E903BEC(v77);
    }
    v12 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x100000) != 0)
    {
      if ((v12 & 0xC00) != 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 116), 0xE6Cu, 0, (uint64_t)v86);
        v83 = off_24FAA57B8[(*(_QWORD *)a1 >> 10) & 3];
        sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
        sub_22E903BEC(v86);
        v12 = *(_QWORD *)a1;
      }
      v15 = (v12 >> 12) & 0x3F;
      if (v15 > 8 || ((1 << v15) & 0x185) == 0 || (v12 & 0x80000) != 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xE6Cu, 0, (uint64_t)v86);
        if ((*(_QWORD *)a1 & 0x80000) != 0)
          v16 = "__pixel";
        else
          v16 = (char *)sub_22F2F2CB0((*(_QWORD *)a1 >> 12) & 0x3F);
        v83 = v16;
        sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
        sub_22E903BEC(v86);
        v12 = *(_QWORD *)a1;
      }
      if ((v12 & 0x3F000) == 0x8000
        && ((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 15088)
                                                                     + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "power10-vector", 14) & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xE6Du, 0, (uint64_t)v76);
        sub_22E903BEC(v76);
      }
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD *)a1 >> 6;
      if (v18 > 3 || v18 == 2)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0xE6Cu, 0, (uint64_t)v86);
        v83 = off_24FAA57D0[*(_QWORD *)a1 >> 6];
        sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
        sub_22E903BEC(v86);
        v17 = *(_QWORD *)a1;
      }
      v19 = (v17 >> 12) & 0x3F;
      if (v19 <= 8 && ((1 << v19) & 0x184) != 0 || (v17 & 0xC0) != 0)
        *(_QWORD *)a1 = v17 & 0xFFFFFFFFFFFFF3FFLL | 0x800;
      goto LABEL_57;
    }
    v13 = (v12 >> 12) & 0x3F;
    if (v13 == 15)
    {
      if ((*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) & 0x80000000000) != 0
        && ((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 15088)
                                                                     + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "arch12", 6) & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xE70u, 0, (uint64_t)v73);
        v14 = (unsigned int *)v73;
        goto LABEL_56;
      }
    }
    else
    {
      if (v13 != 16)
      {
        if ((v12 & 0xC0) != 0x80)
          goto LABEL_57;
        if ((*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) & 0x80000000000) != 0
          || !(*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88)
                                                                                          + 15088)
                                                                            + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "vsx", 3)|| *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088) + 68) == 21)
        {
          sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0xE72u, 0, (uint64_t)v72);
          v14 = (unsigned int *)v72;
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0x1BFAu, 0, (uint64_t)v86);
          v83 = (void *)sub_22F2F2CB0((*(_DWORD *)a1 >> 12) & 0x3F);
          sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
          v14 = v86;
        }
        goto LABEL_56;
      }
      if ((v12 & 0x80) != 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0xE73u, 0, (uint64_t)v75);
        v14 = (unsigned int *)v75;
        goto LABEL_56;
      }
      if (((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 88) + 15088)
                                                                     + 568))(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088), "vsx", 3) & 1) == 0&& (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 8) & 0x80000000000) == 0)
      {
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xE6Fu, 0, (uint64_t)v74);
        v14 = (unsigned int *)v74;
LABEL_56:
        sub_22E903BEC(v14);
      }
    }
LABEL_57:
    v4 = *(_QWORD *)a1;
    if ((*(_QWORD *)a1 & 0x80000) != 0)
    {
      v4 = v4 & 0xFFFFFFFFFFDC033FLL | 0x7840;
      *(_QWORD *)a1 = v4;
    }
    goto LABEL_59;
  }
  v46 = 0;
  v47 = *(_DWORD *)(a1 + 104);
  *(_QWORD *)&v79[4] = *(_QWORD *)(a1 + 112);
  v48 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)v79 = v47;
  *(_DWORD *)&v79[12] = v48;
  *(_OWORD *)&v79[16] = *(_OWORD *)(a1 + 144);
  LODWORD(v80) = *(_DWORD *)(a1 + 160);
  do
  {
    v49 = &v86[v46];
    *((_BYTE *)v49 + 8) = 0;
    *(_QWORD *)v49 = 0;
    *(_QWORD *)(v49 + 3) = 0;
    *((_BYTE *)v49 + 20) = 0;
    *((_QWORD *)v49 + 4) = 0;
    *((_QWORD *)v49 + 5) = 0;
    *((_QWORD *)v49 + 3) = 0;
    v46 += 14;
    *((_BYTE *)v49 + 48) = 0;
  }
  while (v46 != 126);
  v50 = 0;
  v51 = 0;
  v52 = &v87;
  do
  {
    v53 = *(unsigned int *)&v79[v50];
    if ((_DWORD)v53)
    {
      if (!v51 || sub_22F1E3C34(*(_QWORD **)(a2 + 112), *(_DWORD *)&v79[v50], v51))
        v51 = v53;
      *(v52 - 3) = v53 | (v53 << 32);
      *((_BYTE *)v52 - 16) = 1;
      *(uint64_t *)((char *)v52 - 12) = 0;
      *((_BYTE *)v52 - 4) = 0;
      if (*((char *)v52 + 23) < 0)
        operator delete((void *)*v52);
      *v52 = 0;
      v52[1] = 0;
      *((_BYTE *)v52 + 24) = 0;
      v52[2] = 0;
    }
    v50 += 4;
    v52 += 7;
  }
  while (v50 != 36);
  *(_QWORD *)a1 &= 0xFFFFFFFF01E3F03FLL;
  sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0xC53u, 0, (uint64_t)&v83);
  v54 = sub_22E890748((uint64_t)&v83, v86);
  v55 = sub_22E890748(v54, v88);
  v56 = sub_22E890748(v55, v89);
  v57 = sub_22E890748(v56, v90);
  v58 = sub_22E890748(v57, v91);
  v59 = sub_22E890748(v58, v92);
  v60 = sub_22E890748(v59, v93);
  sub_22E890748(v60, v94);
  sub_22E903BEC((unsigned int *)&v83);
  v61 = 63;
  do
  {
    if (SHIBYTE(__p[v61 + 7]) < 0)
      operator delete(__p[v61 + 5]);
    v61 -= 7;
  }
  while (v61 * 8);
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x40000) != 0)
    goto LABEL_14;
LABEL_59:
  if ((v4 & 0xC00) == 0)
  {
LABEL_62:
    LODWORD(v21) = v4;
    v22 = v4;
    goto LABEL_63;
  }
  v20 = (v4 >> 12) & 0x3F;
  if (v20 > 0xD)
    goto LABEL_155;
  if (((1 << v20) & 0x338C) != 0)
    goto LABEL_62;
  if (v20)
  {
LABEL_155:
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 116), 0xE63u, 0, (uint64_t)v86);
    v83 = (void *)sub_22F2F2CB0((*(_DWORD *)a1 >> 12) & 0x3F);
    sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
    sub_22E903BEC(v86);
    v21 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFF3FFLL;
  }
  else
  {
    v21 = v4 & 0xFFFFFFFFFFFC0FFFLL | 0x7000;
  }
  *(_QWORD *)a1 = v21;
  v22 = v21;
LABEL_63:
  v23 = v21 >> 6;
  if (v23 == 3)
    goto LABEL_66;
  if (v23 != 2)
  {
    if (v23 != 1)
      goto LABEL_76;
LABEL_66:
    v24 = (v21 >> 12) & 0x3F;
    if (v24 == 7)
      goto LABEL_76;
    if (v24)
    {
      if ((v4 & 0x3E000) != 0xC000 || (v21 & 0xC0) == 0xC0)
        goto LABEL_127;
      goto LABEL_76;
    }
LABEL_74:
    v26 = v22 & 0xFFFFFFFFFFFC0FFFLL;
LABEL_75:
    v22 = v26 | 0x7000;
    *(_QWORD *)a1 = v22;
    goto LABEL_76;
  }
  v25 = (v21 >> 12) & 0x3F;
  if (v25 == 16 || v25 == 7)
    goto LABEL_76;
  if (!v25)
    goto LABEL_74;
  if ((v4 & 0x3E000) != 0xC000)
  {
LABEL_127:
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 104), 0xE75u, 0, (uint64_t)v86);
    *(_DWORD *)v79 = *(_DWORD *)a1 >> 6;
    v45 = sub_22E8900C4((uint64_t)v86, (int *)v79);
    v83 = (void *)sub_22F2F2CB0((*(_DWORD *)a1 >> 12) & 0x3F);
    sub_22E8AECC4(v45, (uint64_t *)&v83);
    sub_22E903BEC(v86);
    v26 = *(_QWORD *)a1 & 0xFFFFFFFFFF5C0FFFLL;
    goto LABEL_75;
  }
LABEL_76:
  if ((v22 & 0x300) == 0)
    goto LABEL_90;
  v27 = (v22 >> 12) & 0x3F;
  if (v27 > 0x12)
    goto LABEL_156;
  if (((1 << v27) & 0x78800) != 0)
    goto LABEL_90;
  if (((1 << v27) & 0x284) == 0)
  {
    if (!v27)
    {
      sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 112), 0x14D5u, 0, (uint64_t)v86);
      v28 = sub_22F141A3C(*(unsigned int *)(a1 + 112), 0, *(_QWORD **)(a2 + 112), *(_DWORD **)(a2 + 72));
      *(_QWORD *)((char *)&v84 + 4) = 0;
      BYTE12(v84) = 0;
      v83 = (void *)(v28 | ((unint64_t)v28 << 32));
      LOBYTE(v84) = 0;
      __p[1] = 0;
      *(void **)((char *)&__p[1] + 7) = 0;
      strcpy((char *)__p, " double");
      *(_WORD *)((char *)&__p[2] + 7) = 7;
      sub_22E890748((uint64_t)v86, &v83);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      sub_22E903BEC(v86);
      v22 = *(_QWORD *)a1 & 0xFFFFFFFFFFFC0FFFLL | 0x10000;
      goto LABEL_89;
    }
LABEL_156:
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 112), 0xE37u, 0, (uint64_t)v86);
    v83 = (void *)sub_22F2F2CB0((*(_DWORD *)a1 >> 12) & 0x3F);
    sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
    sub_22E903BEC(v86);
    v22 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFCFFLL;
LABEL_89:
    *(_QWORD *)a1 = v22;
    goto LABEL_90;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) == 0)
  {
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0x149Fu, 0, (uint64_t)v71);
    sub_22E903BEC(v71);
    v22 = *(_QWORD *)a1;
  }
LABEL_90:
  if ((v22 & 0x18) != 0 && ((v22 & 7) == 7 || ((1 << (v22 & 7)) & 0x4D) == 0))
  {
    if (sub_22F1E3C34(*(_QWORD **)(a2 + 112), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 96)))
    {
      sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 96), 0xE4Au, 0, (uint64_t)v86);
      v83 = *(char **)((char *)off_24FAA57F0 + (*(_QWORD *)a1 & 0x18));
      v43 = sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
      v44 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 100), 0xE4Au, 0, (uint64_t)v86);
      v83 = off_24FAA5810[*(_QWORD *)a1 & 7];
      v43 = sub_22E8AECC4((uint64_t)v86, (uint64_t *)&v83);
      v44 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)v79 = v44;
    *(_DWORD *)&v79[4] = v44;
    sub_22E8906A0(v43, (uint64_t *)v79);
    sub_22E903BEC(v86);
    v22 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFE7;
    *(_QWORD *)a1 = v22;
    *(_DWORD *)(a1 + 100) = 0;
  }
  v29 = **(_QWORD **)(a2 + 72);
  if ((v29 & 0x100) != 0 && (v22 & 0x3F007) == 4)
  {
    v22 = v22 & 0xFFFFFFFFFFFC0FF8 | 0x21000;
    *(_QWORD *)a1 = v22;
    v30 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 132) = v30;
    *(_DWORD *)(a1 + 120) = v30;
    *(_DWORD *)(a1 + 96) = 0;
    v29 = **(_QWORD **)(a2 + 72);
  }
  if ((v29 & 0x200) == 0 && (v22 & 0x3F000) == 0x21000)
  {
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0x143Cu, 0, (uint64_t)v70);
    sub_22E903BEC(v70);
    v29 = **(_QWORD **)(a2 + 72);
    v22 = *(_QWORD *)a1;
  }
  if ((v29 & 0x300) == 0x100 && (v22 & 7) == 4)
  {
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 96), 0x1896u, 0, (uint64_t)v86);
    v31 = *(unsigned int *)(a1 + 96);
    *(_QWORD *)((char *)&v84 + 4) = 0;
    BYTE12(v84) = 0;
    memset(__p, 0, 25);
    v83 = (void *)(v31 | (v31 << 32));
    LOBYTE(v84) = 1;
    sub_22E890748((uint64_t)v86, &v83);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v86);
    v22 = *(_QWORD *)a1;
  }
  v32 = (v22 >> 12) & 0x3F;
  if (v32 == 4)
  {
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0x1913u, 0, (uint64_t)v69);
    v34 = (unsigned int *)v69;
  }
  else
  {
    if (v32 - 5 >= 2)
      goto LABEL_112;
    sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(a1 + 120), 0x193Fu, 0, (uint64_t)v86);
    if ((*(_QWORD *)a1 & 0x3F000) == 0x5000)
      v33 = "char16_t";
    else
      v33 = "char32_t";
    sub_22F2F30F4((uint64_t)v86, (uint64_t)v33);
    v34 = v86;
  }
  sub_22E903BEC(v34);
LABEL_112:
  v35 = *(_QWORD *)a1;
  v36 = (*(_QWORD *)a1 >> 37) & 3;
  switch((_DWORD)v36)
  {
    case 3:
      v37 = *(_DWORD *)(a1 + 196);
      v38 = (unsigned int *)v66;
      v39 = v66;
      v40 = (_QWORD *)a2;
      v41 = 6427;
      goto LABEL_118;
    case 2:
      v37 = *(_DWORD *)(a1 + 196);
      v38 = (unsigned int *)v67;
      v39 = v67;
      v40 = (_QWORD *)a2;
      v41 = 126;
      goto LABEL_118;
    case 1:
      v37 = *(_DWORD *)(a1 + 196);
      v38 = (unsigned int *)v68;
      v39 = v68;
      v40 = (_QWORD *)a2;
      v41 = 6433;
LABEL_118:
      sub_22E8FCA40(v40, v37, v41, 0, (uint64_t)v39);
      sub_22E903BEC(v38);
      v35 = *(_QWORD *)a1;
      break;
  }
  if ((v35 & 0x1000000000) == 0)
    return;
  if ((v35 & 0x1F) != 0)
  {
    v83 = __p;
    v84 = xmmword_22F44E330;
    v79[8] = 0;
    *(_QWORD *)v79 = 0;
    *(_QWORD *)&v79[12] = 0;
    v79[20] = 0;
    v81 = 0;
    *(_QWORD *)&v79[24] = 0;
    v80 = 0;
    v82 = 0;
    __asm { BR              X10 }
  }
  if ((v35 & 0x400000000) != 0)
  {
    LOBYTE(__p[3]) = 0;
    *(_QWORD *)v79 = "virtual";
    *(_QWORD *)&v79[8] = 7;
    v62 = *(unsigned int *)(a1 + 168);
    __p[1] = 0;
    *(void **)((char *)&__p[1] + 7) = 0;
    v63 = (void *)(v62 | (v62 << 32));
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 16);
    if (!v42)
      return;
    LOBYTE(__p[3]) = 0;
    *(_QWORD *)v79 = "explicit";
    *(_QWORD *)&v79[8] = 8;
    v62 = *(unsigned int *)(a1 + 172);
    v64 = v62;
    if (v42 >= 4)
      v64 = *(unsigned int *)(a1 + 180);
    *(void **)((char *)&__p[1] + 7) = 0;
    __p[1] = 0;
    v63 = (void *)(v62 | (v64 << 32));
  }
  v83 = v63;
  LOBYTE(v84) = 1;
  __p[0] = 0;
  *(_QWORD *)((char *)&v84 + 4) = 0;
  BYTE12(v84) = 0;
  *(_WORD *)((char *)&__p[2] + 7) = 0;
  sub_22E8FCA40((_QWORD *)a2, v62, 0x18u, 0, (uint64_t)v86);
  v65 = sub_22F2F2210((uint64_t)v86, (uint64_t)v79);
  sub_22E890748(v65, &v83);
  sub_22E903BEC(v86);
  *(_QWORD *)a1 &= ~0x400000000uLL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

uint64_t sub_22E8AECC4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E8AEE74((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E8AEE74((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

uint64_t sub_22E8AED64(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v12;

  v3 = *(_QWORD *)(a1 + 32);
  v1 = a1 + 32;
  v2 = v3;
  if ((v3 & 4) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    v1 = *(_QWORD *)v5;
    v4 = *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8);
  }
  else
  {
    v4 = v1 + 8 * (v2 > 7);
  }
  if (v1 == v4)
    return 0;
  while (1)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v1 + 72) + 8);
    if (v6 <= 0x154)
      break;
    v7 = v6 - 341;
    v8 = v7 > 0xD;
    v9 = (1 << v7) & 0x2BC7;
    if (!v8 && v9 != 0)
      return *(unsigned int *)(*(_QWORD *)v1 + 16);
LABEL_23:
    v1 += 8;
    if (v1 == v4)
      return 0;
  }
  if (v6 - 161 > 0x3A || ((1 << (v6 + 95)) & 0x400004000000011) == 0)
  {
    v12 = v6 - 234 > 3 || v6 == 235;
    if (v12 && v6 != 14)
      goto LABEL_23;
  }
  return *(unsigned int *)(*(_QWORD *)v1 + 16);
}

uint64_t sub_22E8AEE20(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  v4 = 0;
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 28) = a2;
  *(_QWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 8) = a3;
  do
  {
    *(_DWORD *)(result + 12 + v4) = *(_DWORD *)(a4 + v4);
    v5 = *(_DWORD *)(a4 + v4);
    if (v5)
      *(_DWORD *)(result + 28) = v5;
    v4 += 4;
  }
  while (v4 != 12);
  return result;
}

uint64_t sub_22E8AEE64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_22E8ADBD8(*(_QWORD *)(*(_QWORD *)a1 + 80), a2, a5);
}

unsigned __int8 **sub_22E8AEE74(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 1;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

unint64_t sub_22E8AEED4(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(_BYTE *)result)
  {
    if (*(_BYTE *)result == 1)
    {
      v2 = *(_QWORD *)(result + 40);
      if (v2)
      {
        result = *(_QWORD *)(result + 48);
        if (result)
        {
          result = sub_22E3BB10C(result, v2);
          *(_QWORD *)(v1 + 40) = 0;
        }
      }
    }
  }
  else
  {
    v3 = *(_QWORD *)(result + 40);
    if (v3)
      MEMORY[0x2348A0E84](v3, 0x1000C8077774924);
    result = *(_QWORD *)(v1 + 56);
    if (result)
      JUMPOUT(0x2348A0E84);
  }
  return result;
}

uint64_t sub_22E8AEF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(a2 + 74) & 0x80) != 0)
  {
    while ((*(_DWORD *)(a2 + 72) & 0xE000) != 0x4000)
    {
      v8 = sub_22EFC3B90(a2);
      if (v8)
      {
LABEL_6:
        v9 = v8;
        while (1)
        {
          v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v8)
            break;
          if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_6;
        }
      }
      else
      {
        v9 = 0;
      }
      v10 = *(unsigned int *)(a3 + 8);
      if (v10 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
      ++*(_DWORD *)(a3 + 8);
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v12 || *(_BYTE *)(v12 + 16) != 45)
      {
        result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), v11);
        if (!result)
          return result;
        if (*(_BYTE *)(result + 16) == 4)
        {
          v13 = *(_QWORD *)(result + 40);
          if (v13)
          {
            v14 = a4;
            sub_22E8AF4BC((uint64_t)&v14, v13, 0);
            return 1;
          }
        }
        return 0;
      }
      result = sub_22F114198(*(_QWORD *)(v12 + 24));
      a2 = result;
      if (!result)
        return result;
    }
  }
  return 0;
}

uint64_t sub_22E8AF0A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int *v43;
  _QWORD v44[3];
  uint64_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[3];
  int v50;
  const void *v51[2];
  void *__dst;
  uint64_t v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x24BDAC8D0];
  v11 = sub_22EF5C728(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 48));
  if (*(_BYTE *)(v11 + 16) == 4)
    v13 = v11;
  else
    v13 = 0;
  v43 = *(int **)(v13 + 40);
  if (!a6)
  {
    v14 = *a1;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v45 = v14;
    v49[0] = v51;
    v49[1] = v51;
    v49[2] = 2;
    v50 = 0;
    __dst = v54;
    v12.n128_u64[0] = 0x100000000;
    v53 = 0x100000000;
    goto LABEL_17;
  }
  v45 = *(_QWORD *)a6;
  v46 = 0;
  v47 = 0;
  llvm::deallocate_buffer(0, 0);
  v15 = *(unsigned int *)(a6 + 24);
  v48 = v15;
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    v46 = (void *)MEMORY[0x23489D23C](16 * v15, 8);
    v47 = *(_QWORD *)(a6 + 16);
    memcpy(v46, *(const void **)(a6 + 8), v16);
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)v49, v51, (const llvm::SmallPtrSetImplBase *)(a6 + 32));
  __dst = v54;
  v12.n128_u64[0] = 0x100000000;
  v53 = 0x100000000;
  v17 = *(_DWORD *)(a6 + 88);
  if (v17 && &v45 != (uint64_t *)a6)
  {
    if (v17 < 2)
    {
      v18 = *(unsigned int *)(a6 + 88);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(unsigned int *)(a6 + 88);
      if (!(_DWORD)v18)
        goto LABEL_16;
    }
    memcpy(__dst, *(const void **)(a6 + 80), 16 * v18);
LABEL_16:
    LODWORD(v53) = v17;
  }
LABEL_17:
  v19 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v19)
  {
    v22 = *(uint64_t **)a3;
    v23 = *(_QWORD *)a3 + 8 * v19;
    v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    v21 = 1;
    do
    {
      v25 = *v22;
      if ((_DWORD)v53)
      {
        v26 = __dst;
        v27 = 16 * v53;
        while (*v26 != v25)
        {
          v26 += 2;
          v27 -= 16;
          if (!v27)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v28 = *(_DWORD *)(v25 + 28);
        if ((v28 & 0x7F) - 52 >= 0xFFFFFFFD && v25 != 0)
        {
          if (v24 == 39)
          {
            v30 = (unsigned int *)a4;
            if ((*(_BYTE *)(a4 + 1) & 3) != 0)
            {
              v31 = *a1;
              if (*(_QWORD *)(*a1 + 1296) == *(_QWORD *)(*a1 + 1288))
              {
                v32 = 0;
                v33 = 24;
              }
              else
              {
                v32 = *(_QWORD *)(v31 + 1296);
                if (HIDWORD(v32))
                  v33 = 32;
                else
                  v33 = 24;
              }
              v34 = *(_QWORD *)(a4 + 8);
              v30 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v31 + 88) + 2032, v33, 3);
              sub_22F003694(v30, v34, 4, a4, 0, v32, 0);
              v28 = *(_DWORD *)(v25 + 28);
              v21 = 1;
            }
          }
          else
          {
            v30 = (unsigned int *)a4;
          }
          v35 = *(_DWORD *)(v25 + 68) & 1;
          v36 = *(_QWORD *)(*a1 + 88);
          v37 = *(_QWORD *)(v25 + 48);
          memset(v44, 0, sizeof(v44));
          v38 = sub_22EFFAF50(v36, (uint64_t)v30, v24 == 39, 0, 0, 0, 0, v25, (v28 >> 13) & 3 | (unint64_t)v25, (uint64_t)v44, 0, v37, 1, 0, v35, SHIWORD(v35), 0);
          v39 = sub_22EB1A358(*a1, v38, 0) & 0xFFFFFFFFFFFFFFFELL;
          if (!v39)
            goto LABEL_46;
          v40 = sub_22F3C2E98(*(_QWORD *)(*a1 + 88), v39);
          v41 = *(unsigned int *)(a5 + 8);
          if (v41 >= *(unsigned int *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v41 = *(unsigned int *)(a5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v41) = v40;
          ++*(_DWORD *)(a5 + 8);
          sub_22E8BBCA0((uint64_t)&v45, v25, v40);
        }
      }
      ++v22;
    }
    while (v22 != (uint64_t *)v23);
  }
  sub_22F2F34EC(&v45, v43, v12);
  if ((v20 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v21 = sub_22EB1A358(*a1, v20 & 0xFFFFFFFFFFFFFFFELL, 0);
  else
    v21 = 1;
LABEL_46:
  if (__dst != v54)
    free(__dst);
  sub_22F2F4694((uint64_t)&v45);
  return v21;
}

uint64_t sub_22E8AF4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E8BAD7C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;

  v6 = 64;
  v5 = a2;
  v7 = 0;
  v2 = sub_22E4634B4(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    v4 = v2;
    MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
    v2 = v4;
  }
  return v2 >> 31;
}

uint64_t sub_22E8BADE8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v5;

  v1 = (*(_DWORD *)(*(_QWORD *)a1 + 16) >> 19) & 0x1FF;
  v2 = 7;
  v3 = 4;
  if ((v1 - 173) >= 5)
  {
    v5 = v1 == 168 || (v1 - 181) < 0x25 || v1 == 179;
    if (v5)
      v3 = 4;
    else
      v3 = 1;
    if (v5)
      v2 = 7;
    else
      v2 = 3;
  }
  return (((v3 + 7) & -v3) + v2) & 0x1C;
}

uint64_t sub_22E8BAE44(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E8BAF90((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E8BAF90((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

uint64_t sub_22E8BAEE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  *(_DWORD *)(a1 + 128) = a4;
  sub_22EFC6D6C(a1 + 136, a3);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = a5;
  *(_DWORD *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = a6 != 0;
  *(_BYTE *)(a1 + 161) = a6 == 2;
  *(_BYTE *)(a1 + 162) = 1;
  *(_BYTE *)(a1 + 163) = a6 == 0;
  *(_WORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 166) = 0;
  sub_22EC56024(a1);
  return a1;
}

unsigned __int8 **sub_22E8BAF90(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 5;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

uint64_t sub_22E8BAFF0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 163))
  {
    if (*(_DWORD *)a1 == 5)
    {
      sub_22EC64D18(*(_QWORD **)(a1 + 112), a1);
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      v5 = *(_QWORD *)(a1 + 112);
      if ((*(_DWORD *)(*(_QWORD *)(v5 + 72) + 52) & 0x400000) != 0)
        sub_22E90B5FC(v5, a1);
    }
  }
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    v6 = sub_22EC6CBD0(v2);
    MEMORY[0x2348A0E9C](v6, 0x10E0C409F09D3C3);
  }
  v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 24))
    free(v3);
  return a1;
}

uint64_t sub_22E8BB094(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v2 == 26)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = 24;
    if ((v3 & 0x3C0000000000000) == 0)
      v4 = 16;
    goto LABEL_9;
  }
  if (v2 != 25)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = 16;
LABEL_9:
    v5 = ((v3 >> 35) & 0x7FFF8) + v4;
    return sub_22EEB5360(a1, a2, v5, 8);
  }
  v5 = 16;
  return sub_22EEB5360(a1, a2, v5, 8);
}

BOOL sub_22E8BB0E8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  __int16 v3;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  v3 = *(_WORD *)(v2 + 8);
  if ((v3 & 0x7F) == 0x21)
    v3 = *(_WORD *)(sub_22EFCBB30(v2) + 8);
  return (v3 & 0x7Eu) - 34 < 4;
}

uint64_t sub_22E8BB138(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  int v21;

  if ((*(_DWORD *)(a4 + 96) & 0x600) != 0x200)
  {
    v14 = sub_22EFBC5B4(a4);
    if (v14 && (*(_BYTE *)v14 & 0xFE) == 0xAC)
      v14 = *(_QWORD *)(v14 + 16);
    v13 = (uint64_t *)(v14 + 8);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a4 + 48);
  v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 16);
    if ((v12 & 0xFE) == 0x28)
    {
LABEL_7:
      if ((v12 & 0x100000) != 0)
      {
        do
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v11)
          {
            v21 = *(_DWORD *)(v11 + 16);
            if ((v21 & 0xFE) == 0x28)
              continue;
          }
          v11 = sub_22F10CF48(v11);
          v21 = *(_DWORD *)(v11 + 16);
        }
        while ((v21 & 0x100000) != 0);
      }
      v13 = (uint64_t *)(v11 + 32);
LABEL_11:
      v10 = *v13;
      goto LABEL_12;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v11 = sub_22F10CF48(v11);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 16);
      goto LABEL_7;
    }
  }
LABEL_12:
  v15 = sub_22EFBC5B4(a4);
  if ((*(_BYTE *)v15 & 0xFE) == 0xAC)
    v15 = *(_QWORD *)(v15 + 16);
  v16 = *(_DWORD *)v15;
  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(a2);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = v16 & 0x1F00 | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_DWORD *)a1 = v18;
  *(_DWORD *)(a1 + 4) = a3;
  v19 = sub_22EFBC5B4(a4);
  if ((*(_BYTE *)v19 & 0xFE) == 0xAC)
    v19 = *(_QWORD *)(v19 + 16);
  *(_DWORD *)a1 = *(_DWORD *)v19 & 0x3E000 | v18;
  return a1;
}

void *sub_22E8BB2D8(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 16)));
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 4;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v5, 8);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_22F2F3E34((unsigned int *)a1, a2);
}

uint64_t sub_22E8BB370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *(__int128 **)a2;
        v8 = *(_OWORD **)a1;
        v9 = 16 * v4;
        do
        {
          v10 = *v7++;
          *v8++ = v10;
          v9 -= 16;
        }
        while (v9);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v11 = *(__int128 **)a2;
          v12 = *(_OWORD **)a1;
          v13 = 16 * v5;
          do
          {
            v14 = *v11++;
            *v12++ = v14;
            v13 -= 16;
          }
          while (v13);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = 0;
        v6 = *(unsigned int *)(a2 + 8);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22E8BB45C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_22E8BB608(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * v4, *(_QWORD *)a1);
        v7 = v6;
        v8 = *(_QWORD *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v8 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1;
      }
      if (v8 + 40 * v5 != v7)
      {
        v9 = (_QWORD *)(v8 + 40 * v5 - 8);
        do
        {
          sub_22E8BB820(v9);
          v10 = *(v9 - 4);
          if (v10)
          {
            v11 = *(v9 - 3);
            if (v11)
            {
              sub_22E3BB10C(v11, v10);
              *(v9 - 4) = 0;
            }
          }
          v12 = v9 - 4;
          v9 -= 5;
        }
        while (v12 != (_QWORD *)v7);
      }
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v13 = *(_QWORD *)a1;
        v14 = 40 * v5;
        do
        {
          v15 = v13 + v14;
          sub_22E8BB820((_QWORD *)(v13 + v14 - 8));
          v16 = *(_QWORD *)(v13 + v14 - 40);
          if (v16)
          {
            v17 = *(_QWORD *)(v15 - 32);
            if (v17)
            {
              sub_22E3BB10C(v17, v16);
              *(_QWORD *)(v15 - 40) = 0;
            }
          }
          v14 -= 40;
        }
        while (v14);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2F3FD8(a1);
    }
    else if ((_DWORD)v5)
    {
      sub_22E8BB608(*(_QWORD *)a2, *(_QWORD *)a2 + 40 * v5, *(_QWORD *)a1);
      goto LABEL_24;
    }
    v5 = 0;
LABEL_24:
    v18 = *(unsigned int *)(a2 + 8);
    if (v5 != v18)
    {
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)a1;
      v21 = 40 * v5;
      v22 = 40 * v18;
      do
      {
        v23 = sub_22E78D434(v20 + v21, (uint64_t *)(v19 + v21));
        *(_DWORD *)(v23 + 24) = *(_DWORD *)(v19 + v21 + 24);
        sub_22F2F3F4C((uint64_t *)(v23 + 32), (uint64_t *)(v19 + v21 + 32));
        v20 += 40;
        v22 -= 40;
        v19 += 40;
      }
      while (v21 != v22);
    }
LABEL_27:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22E8BB608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_22E892708(a3, v4);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v4 + 24);
    sub_22E8BB67C((unint64_t *)(a3 + 32), (unint64_t *)(v4 + 32));
    a3 += 40;
    v4 += 40;
  }
  while (v4 != v5);
  return v5;
}

unint64_t *sub_22E8BB67C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;

  if (a1 == a2)
    return a1;
  v4 = *a2;
  if (*a2 < 8)
    goto LABEL_3;
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v8)
          *(_DWORD *)(v8 + 8) = 0;
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
LABEL_26:
      sub_22F24C890(v7 & 0xFFFFFFFFFFFFFFF8, v5);
      return a1;
    }
  }
  else
  {
    v7 = *a1;
    if ((*a1 & 4) != 0)
    {
      if ((v4 & 4) != 0)
        goto LABEL_26;
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
      if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = 0;
      }
      else
      {
        v15 = v4 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = v15;
        v10 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v5;
      ++*(_DWORD *)(v9 + 8);
      return a1;
    }
    if ((v4 & 4) == 0)
    {
LABEL_17:
      *a1 = v5;
      return a1;
    }
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 == 1)
  {
    v5 = **(_QWORD **)v5 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_17;
  }
  v11 = (_QWORD *)operator new();
  v12 = (unint64_t)v11;
  v13 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v11 = v11 + 2;
  v11[1] = 0x400000000;
  if (*(_DWORD *)(v13 + 8))
    sub_22F24C890((uint64_t)v11, v13);
  *a1 = v12 | 4;
  return a1;
}

unint64_t *sub_22E8BB7E0(unint64_t *a1)
{
  unint64_t v2;

  sub_22E8BB820(a1 + 4);
  if (*a1)
  {
    v2 = a1[1];
    if (v2)
    {
      sub_22E3BB10C(v2, *a1);
      *a1 = 0;
    }
  }
  return a1;
}

_QWORD *sub_22E8BB820(_QWORD *result)
{
  void **v1;
  _QWORD *v2;
  unint64_t v3;

  if ((*result & 4) != 0)
  {
    v1 = (void **)(*result & 0xFFFFFFFFFFFFFFF8);
    if (v1)
    {
      v2 = result;
      v3 = *result & 0xFFFFFFFFFFFFFFF8;
      if (*v1 != v1 + 2)
        free(*v1);
      MEMORY[0x2348A0E9C](v3, 0x1080C40ED926357);
      return v2;
    }
  }
  return result;
}

void sub_22E8BB87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v7;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 8;
  }
  else
  {
    v1 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = (char *)(v2 + (v1 << 6));
  v4 = (_QWORD *)(v2 + 32);
  do
  {
    v5 = (char *)(v4 - 4);
    if ((*(v4 - 4) & 0xFFFFFFFFFFFFFFFBLL) != 0 || *(v4 - 3) != 0)
    {
      v7 = (_QWORD *)*(v4 - 2);
      if (v4 != v7)
        free(v7);
    }
    v4 += 8;
  }
  while (v5 + 64 != v3);
}

uint64_t sub_22E8BB8FC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 28);
  v5 = *(_DWORD *)(result + 16);
  if (v5 >= *(_DWORD *)(result + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v3 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v5) = (v4 >> 13) & 3 | a2;
  ++*(_DWORD *)(v3 + 16);
  *(_DWORD *)v3 = 2;
  return result;
}

uint64_t sub_22E8BB974(uint64_t result, unint64_t a2, __int128 *a3)
{
  _OWORD **v4;
  _DWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = (_OWORD **)result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v5 = (_DWORD *)(result + 8);
    v8 = *(unsigned int *)(result + 8);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *(unsigned int *)(result + 8);
    if (v9)
    {
      v10 = *(_OWORD **)result;
      do
      {
        v11 = *a3;
        v12 = a3[1];
        v13 = a3[2];
        *(_OWORD *)((char *)v10 + 44) = *(__int128 *)((char *)a3 + 44);
        v10[1] = v12;
        v10[2] = v13;
        *v10 = v11;
        v10 += 4;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v14 = v8 - a2;
    if (v8 < a2)
    {
      v15 = (_OWORD *)(*(_QWORD *)result + (v8 << 6));
      do
      {
        v16 = *a3;
        v17 = a3[1];
        v18 = a3[3];
        v15[2] = a3[2];
        v15[3] = v18;
        *v15 = v16;
        v15[1] = v17;
        v15 += 4;
      }
      while (!__CFADD__(v14++, 1));
    }
  }
  else
  {
    v20 = *a3;
    v21 = a3[1];
    v22 = a3[2];
    v23 = a3[3];
    *(_DWORD *)(result + 8) = 0;
    v5 = (_DWORD *)(result + 8);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *v4;
    v7 = a2;
    do
    {
      *v6 = v20;
      v6[1] = v21;
      v6[2] = v22;
      v6[3] = v23;
      v6 += 4;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

unint64_t sub_22E8BBA74(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v1 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) - 27 > 0xFFFFFFFD;
  else
    v3 = 0;
  if (!v3)
  {
    v13 = v1;
    v2 = sub_22F10CF48(v2);
    v1 = v13;
  }
  if ((*(_DWORD *)(v1 + 28) & 0x7F) != 0x53)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
          goto LABEL_14;
        }
        if (i == 81)
          goto LABEL_14;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_13;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_14;
          if (i == 24)
          {
LABEL_13:
            v7 = -48;
            goto LABEL_14;
          }
        }
        if (i == 70)
        {
          v7 = -64;
          goto LABEL_14;
        }
      }
      v9 = i - 52;
      if ((i - 33) >= 5)
        v10 = -48;
      else
        v10 = -64;
      if (v9 >= 6)
        v7 = v10;
      else
        v7 = -72;
LABEL_14:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v1 = v5 - 40;
  }
  v11 = *(_QWORD *)(v1 + 88);
  v14 = *(_QWORD *)(v2 + 24);
  return sub_22F1133DC(&v14, v11);
}

uint64_t sub_22E8BBBD0(uint64_t a1)
{
  uint64_t result;
  int v2;
  int v3;

  result = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (result)
  {
    v2 = *(_DWORD *)(result + 16);
    if ((v2 & 0xFE) == 0x28)
    {
LABEL_8:
      if (v2 == 40)
        return 1;
      if ((v2 & 0x100000) != 0)
      {
        do
        {
          result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
          if (result)
          {
            v3 = *(_DWORD *)(result + 16);
            if ((v3 & 0xFE) == 0x28)
              continue;
          }
          result = sub_22F10CF48(result);
          v3 = *(_DWORD *)(result + 16);
        }
        while ((v3 & 0x100000) != 0);
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2)
        return 1;
      else
        return 2;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
  {
    v2 = *(_DWORD *)(result + 16);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_22E8BBCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = a3;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8)
  {
    v3 = 80;
LABEL_7:
    a2 = *(_QWORD *)(a2 + v3);
    goto LABEL_8;
  }
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v3 = 112;
    goto LABEL_7;
  }
LABEL_8:
  v5 = a2;
  return sub_22F2F4658(a1 + 80, &v5, &v6);
}

uint64_t sub_22E8BBD0C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_22E8BBD84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v24[64];
  void *v25;
  void *v26;
  __int128 v27;
  _BYTE v28[16];
  char v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v33 = v35;
  v34 = 0x400000000;
  v30 = v32;
  v31 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v26 = v28;
  v27 = xmmword_22F44E350;
  v29 = 0;
  v9 = *(unsigned int *)(*(_QWORD *)(a2 + 16) + 24);
  v10 = *(_QWORD *)(v4 + 72);
  v11 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22E8C36C8(a1, v9, v10, v11, 0, v8, (uint64_t)&v30, (uint64_t)&v33, (uint64_t)&v26))
  {
    v12 = *a1;
LABEL_5:
    sub_22F32F928(v12);
    v13 = 1;
    goto LABEL_15;
  }
  v14 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(v7 + 24));
  sub_22E4913B4(v7, (uint64_t)v24);
  if (v29)
  {
    sub_22F24FB88(&v26, v31);
    v15 = v26;
  }
  else
  {
    v15 = 0;
  }
  v25 = v15;
  *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v14, (unint64_t *)v30, v31, 0, 0, (uint64_t)v24);
  if ((_DWORD)v34)
    sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v33, v34);
  if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
  {
    *(_BYTE *)(v5 + 1408) = 0;
    *(_QWORD *)(v5 + 1416) = v14;
  }
  v16 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
  v22 = sub_22F2FC7D4(a1, v16, 0, v17, v18, v19, v20, v21);
  v12 = *a1;
  if ((v22 & 1) != 0)
    goto LABEL_5;
  v13 = sub_22EB4ADC8(v12, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL));
LABEL_15:
  if (v26 != v28)
    free(v26);
  if (v30 != v32)
    free(v30);
  if (v33 != v35)
    free(v33);
  return v13;
}

uint64_t sub_22E8BC010(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4 == 1)
    goto LABEL_15;
  if (v4)
  {
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_15:
      v10 = *a2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = a2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(a2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)a2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)a2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = a2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(a2 + 40);
        return sub_22E8C4A6C((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22F2FAD70(a1, *((_QWORD *)a2 + 1));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *((_QWORD *)a2 + 2);
  v46 = v21;
  v48 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v46, &v48)
    && v48 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = *((_QWORD *)v48 + 1);
  }
  if (!v21)
    return 1;
  v43 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v26 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v26 <= 3)
      ? (v27 = v26 == 2)
      : (v27 = 1),
        v27))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v47 = 1;
      v46 = 0;
      v45 = 3;
      v44 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v47, (int *)&v44, (__int16 *)(v22 + 1693), &v46, &v45);
      v28 = *(unsigned int *)(v22 + 3696);
      v29 = v28 - 2;
      v30 = *(_QWORD *)(v22 + 3688);
      v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
      if (v31 == 5)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
        v32 = 1;
      }
      else if (v31 == 2)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
        v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
      }
      else
      {
        v32 = 0;
        *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
      }
      v33 = v30 + 576 * v28;
      *(_BYTE *)(v33 - 3) = v32;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v33 - 496));
      }
      v24 = 0;
      v23 = *a2;
    }
  }
  v34 = v23 == 119;
  if (v23 == 119)
    v35 = a2;
  else
    v35 = 0;
  v36 = (unsigned __int8 **)(v35 + 48);
  if (v34)
    v37 = v36;
  else
    v37 = (unsigned __int8 **)(a2 + 40);
  if (sub_22E8C47DC((uint64_t *)a1, v37, *((_DWORD *)a2 + 8), 1, (uint64_t)&v48, &v43))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v25 = 1;
    goto LABEL_51;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  if (*a2 != 119)
  {
    v38 = *((_DWORD *)a2 + 1);
    goto LABEL_58;
  }
  v39 = **((_QWORD **)a2 + 5);
  for (i = v39; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_72;
      v41 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v41 <= 0x39)
        break;
LABEL_67:
      if (sub_22F115668(i))
        v39 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_74;
    }
    if (v41 == 24)
      goto LABEL_73;
    if (v41 == 26)
      break;
    if (((1 << v41) & 0x20000000200003CLL) == 0)
      goto LABEL_67;
LABEL_72:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_72;
LABEL_73:
  v39 = i;
LABEL_74:
  v38 = sub_22F115668(v39);
LABEL_58:
  v25 = sub_22F300FB4((uint64_t *)a1, v20, v38, v21, (*(_DWORD *)a2 >> 18) & 1, (uint64_t)v48, v49, (*(_DWORD *)a2 & 0x80000) != 0, (*(_DWORD *)a2 & 0x100000) != 0, (*(_DWORD *)a2 & 0x200000) != 0, (*(_DWORD *)a2 & 0x400000) != 0, v42, (*(_DWORD *)a2 >> 23) & 7, *((_QWORD *)a2 + 3));
LABEL_51:
  if (v48 != v50)
    free(v48);
  return v25;
}

uint64_t sub_22E8BC480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16)
    && (v6 = *(_QWORD *)(a2 + 16), v7 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7))
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
    && !*(_QWORD *)(v7 + 8))
  {
    return 1;
  }
  else
  {
    return sub_22EBC2B50(*(_QWORD *)a1, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 1, (*(_DWORD *)a2 >> 19) & 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
}

uint64_t sub_22E8BC520(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v21 = sub_22F2F34EC(a1, v4);
    if ((v21 & 1) != 0)
      return 1;
    v5 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6 || (*(_BYTE *)(v6 + 1) & 0x20) == 0)
    v6 = *(_QWORD *)(a2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v7 = *a1;
  v35 = 7;
  v36 = v6;
  sub_22EE7377C(v7, (uint64_t)&v35, (uint64_t)v37);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = v8 != 0;
  v10 = v8 != 0;
  v11 = v8 - 1;
  if (v10)
    v12 = v11;
  else
    v12 = 0;
  v13 = *a1;
  v14 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v15 = *(_QWORD *)(a2 + 40);
  if (v15)
  {
    v16 = sub_22F2F34EC(a1, v15);
    if ((v16 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_QWORD *)(a2 + 48);
  if (!v17)
  {
    v34 = v5;
    v18 = 0;
LABEL_13:
    v19 = *(_DWORD *)(a2 + 16);
    if (!v19)
    {
      v20 = *(_QWORD *)(a2 + 40);
      if (v20 && (*(_BYTE *)(v20 + 1) & 0x20) != 0)
      {
        sub_22F0D5A50(v20);
        v19 = v23;
      }
      else
      {
        v19 = *(_DWORD *)(a2 + 20);
      }
    }
    v24 = v12 | (v9 << 32);
    v25 = v16 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(_DWORD *)(a2 + 56);
    v27 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v29 = *(_DWORD *)(a2 + 20);
    v28 = *(_DWORD *)(a2 + 24);
    if (!v28)
    {
      v30 = *(_QWORD *)(a2 + 40);
      if (!v30 || (v28 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v30 + 1) & 0x20) == 0))
      {
        v31 = *(_QWORD *)(a2 + 48);
        v32 = v25;
        sub_22F0D60E4(v31);
        v25 = v32;
      }
    }
    v22 = sub_22F34AF2C(*a1, v34, v19, v25, v26, v29, v27, v28, v24);
    goto LABEL_30;
  }
  v18 = sub_22F2F34EC(a1, v17);
  if ((v18 & 1) == 0)
  {
    v34 = v5;
    goto LABEL_13;
  }
LABEL_22:
  v22 = 1;
LABEL_30:
  *(_DWORD *)(v13 + 11992) = v14;
  if (v37[0] != v38)
    free(v37[0]);
  return v22;
}

uint64_t sub_22E8BC720(uint64_t a1, unsigned int *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F3010F0((uint64_t *)a1, *((uint64_t **)a2 + 4));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a2;
  if ((*a2 & 0x80000) == 0)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v10 = *a2;
    goto LABEL_7;
  }
  v9 = *((_QWORD *)a2 + 7);
  if (!v9)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_6;
  }
  v29 = sub_22F2F34EC(a1, v9);
  if ((v29 & 1) != 0)
    return 1;
  v10 = *a2;
  v7 = v29 & 0xFFFFFFFFFFFFFFFELL;
  v8 = 1;
LABEL_7:
  v32 = 0;
  v35 = v37;
  v36 = 0x800000000;
  v11 = a2 + 14;
  if ((v10 & 0x1800000) != 0)
    v12 = ((v10 >> 19) & 1) + 1;
  else
    v12 = (v10 >> 19) & 1;
  v13 = 1;
  if ((sub_22E8C47DC((uint64_t *)a1, (unsigned __int8 **)&v11[2 * v12], a2[1], 1, (uint64_t)&v35, &v32) & 1) != 0)
    goto LABEL_38;
  v14 = *a2;
  if ((v14 & 0x1800000) == 0 || (v15 = *(unsigned __int8 **)&v11[2 * ((v14 >> 19) & 1)]) == 0)
  {
    v16 = 0;
LABEL_16:
    if (*((_QWORD *)a2 + 2)
      && (v33 = *((_QWORD *)a2 + 2), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8)
      || *((_QWORD *)a2 + 3)
      && (v33 = *((_QWORD *)a2 + 3), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8))
    {
      v13 = 1;
      goto LABEL_38;
    }
    v17 = *v5;
    if ((v6 & 0x80000) == 0)
    {
      v18 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), *v5);
      if (v18)
      {
        v19 = v18;
        v20 = *(unsigned __int8 *)(v18 + 16);
        if (v20 == 3)
        {
          v25 = *(_QWORD *)(v18 + 48);
          if (v25)
            goto LABEL_31;
        }
        else if (v20 == 2)
        {
          v21 = *(_QWORD *)(*(_QWORD *)a1 + 88);
          v31 = v18 + 40;
          v22 = sub_22EF67C8C(v21);
          v23 = a2[10];
          v24 = sub_22E3CD3D4(v21 + 2032, 32, 3);
          v25 = sub_22EFF8F1C(v24, v21, v31, v22, v23);
LABEL_31:
          v17 = *(_QWORD *)(v19 + 32);
          v8 = 1;
          v7 = v25;
        }
      }
    }
    v26 = *a2;
    if ((*a2 & 0x2000000) != 0)
    {
      v28 = (v26 >> 19) & 1;
      if ((v26 & 0x1800000) != 0)
        ++v28;
      v27 = *(_QWORD *)&v11[2 * v28 + 2 * a2[1]];
    }
    else
    {
      v27 = 0;
    }
    v13 = sub_22EBBD504(*(_QWORD *)a1, a2[10] | ((unint64_t)a2[10] << 32), (v26 >> 18) & 1, a2[10], (uint64_t)v35, v36, a2[10], v27, v17, v5, v7, v8, *((_QWORD *)a2 + 6), (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_38;
  }
  v13 = 1;
  v16 = sub_22E8C4A6C((uint64_t *)a1, v15, 1);
  if ((v16 & 1) == 0)
    goto LABEL_16;
LABEL_38:
  if (v35 != v37)
    free(v35);
  return v13;
}

uint64_t sub_22E8BCA04(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  void *v26[2];
  __int128 v27;
  void *v28[2];
  char v29;
  unint64_t v30;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v30 = 0;
  v29 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v30, &v29);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v30;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22E8C1D88((uint64_t *)a1, v8, v9, v30, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  sub_22E8ACE30((uint64_t)&v27, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v18 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v19 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v27, v30, 0);
      if (!v19)
        goto LABEL_40;
      v20 = v19;
      if (v19 >= 0x10)
      {
        v21 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if (v21 && *(_BYTE *)(v21 + 16) == 57)
          v20 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v20 = 0;
      }
      v22 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v20, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v22 & 0xFFFFFFFFFFFFFFFELL;
      v18 = sub_22F115668(*v22);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v24 = sub_22F2FB528((uint64_t *)a1, *(_QWORD *)v16, v16 + 8, v7, 0, (uint64_t)&v27);
      if (!v24)
        goto LABEL_40;
      v16 = (unint64_t)v24 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v24;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v18 = sub_22F115668(v17);
  }
  v23 = *(uint64_t **)(a2 + 48);
  if (!v23)
    goto LABEL_31;
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  if ((unint64_t)*v23 <= 0xF)
    goto LABEL_31;
  v23 = sub_22F2FB528((uint64_t *)a1, *v23, (uint64_t)(v23 + 1), v7, 0, (uint64_t)&v25);
  if (HIDWORD(v26[1]))
    free(v26[0]);
  if (v23)
  {
LABEL_31:
    v13 = sub_22E8CA220((uint64_t *)a1, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 28), *(_BYTE *)(a2 + 24) & 1, (uint64_t)&v27, v23, *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 60), v16, v18);
    goto LABEL_32;
  }
LABEL_40:
  v13 = 1;
LABEL_32:
  if (HIDWORD(v28[1]))
    free(v28[0]);
  return v13;
}

