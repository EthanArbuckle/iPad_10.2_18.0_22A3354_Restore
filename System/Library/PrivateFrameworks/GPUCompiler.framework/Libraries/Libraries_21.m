uint64_t sub_22EE47620(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v4 = *v3;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    sub_22EFC8E88(a1);
  return v4;
}

void sub_22EE4768C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;

  if (*(_BYTE *)(a3 + 35))
  {
    v22 = 4;
    v21 = 0;
    v20 = 3;
    *(_QWORD *)v19 = *(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, &v22, v19, (__int16 *)(a1 + 1693), &v21, &v20);
    v11 = *(unsigned int *)(a1 + 3696);
    v12 = v11 - 2;
    v13 = *(_QWORD *)(a1 + 3688);
    v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
    if (v14 == 5)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
      v15 = 1;
    }
    else if (v14 == 2)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
      v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
    }
    else
    {
      v15 = 0;
      *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
    }
    v16 = v13 + 576 * v11;
    *(_BYTE *)(v16 - 3) = v15;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v16 - 496));
    }
    v17 = sub_22EE0A68C(a1, *(_QWORD *)(a3 + 40), a2, v10);
    if ((v17 & 1) == 0)
      sub_22EA498D8((_QWORD *)a1, a4, (_OWORD *)a3, v17 & 0xFFFFFFFFFFFFFFFELL, a5);
    sub_22EB48E64(a1);
  }
  else
  {
    v18 = sub_22EE03524(a1, *(uint64_t **)(a3 + 40), a2, *(_DWORD *)(a3 + 16), 0, 0);
    if (v18)
      sub_22F31FA2C(a1, a4, (_OWORD *)a3, v18, a5);
  }
}

unint64_t sub_22EE47854(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v36[24];
  unsigned int v37[24];
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[34];

  v43[32] = *MEMORY[0x24BDAC8D0];
  v38 = a3;
  v9 = *(_QWORD *)(a1 + 216);
  v10 = a5 + 72;
  v11 = *(_QWORD *)(a1 + 3200);
  if (!a5)
    v10 = 0;
  *(_QWORD *)(a1 + 3200) = 0;
  v12 = *(_QWORD *)(a1 + 10288);
  v13 = *(_DWORD *)(a1 + 1944);
  v14 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v10;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v41 = 0;
  v39 = 3;
  v40 = 4;
  *(_QWORD *)v37 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v40, (int *)v37, (__int16 *)(a1 + 1693), (uint64_t *)&v41, &v39);
  v16 = *(unsigned int *)(a1 + 3696);
  v17 = v16 - 2;
  v18 = *(_QWORD *)(a1 + 3688);
  v19 = *(_DWORD *)(v18 + 576 * (v16 - 2));
  if (v19 == 5)
  {
    *(_BYTE *)(v18 + 576 * v16 - 4) = *(_BYTE *)(v18 + 576 * v17 + 572);
    v20 = 1;
  }
  else if (v19 == 2)
  {
    *(_BYTE *)(v18 + 576 * v16 - 4) = 1;
    v20 = *(_BYTE *)(v18 + 576 * v17 + 573) != 0;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)(v18 + 576 * v16 - 4) = 0;
  }
  v21 = v18 + 576 * v16;
  *(_BYTE *)(v21 - 3) = v20;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v21 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v21 - 496));
  }
  v22 = sub_22EE0A68C(a1, a4, a2, v15);
  sub_22EB48E64(a1);
  if (v9)
  {
    *(_QWORD *)(a1 + 216) = v9;
    *(_QWORD *)(a1 + 3200) = v11;
    *(_QWORD *)(a1 + 10288) = v12;
    *(_DWORD *)(a1 + 1944) = v13;
    *(_DWORD *)(a1 + 2192) = v14;
  }
  if ((v22 & 1) != 0)
    return 0;
  v28 = v22 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(v28 + 1) & 0x80) != 0)
    goto LABEL_14;
  v29 = sub_22ED025A8(a1);
  if ((v29 & 1) != 0)
    return 0;
  v28 = v29 & 0xFFFFFFFFFFFFFFFELL;
LABEL_14:
  v41 = (char *)v43;
  v42 = 0x800000000;
  if ((*(_BYTE *)(a4 + 2) & 1) != 0
    && (*(_BYTE *)(v28 + 2) & 1) == 0
    && !sub_22F00B7D0(v28, a5, (uint64_t)&v41, v23, v24, v25, v26, v27))
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 16), 0xAD4u, 0, (uint64_t)v37);
    sub_22E8FB3C4((uint64_t)v37, &v38);
    sub_22E903BEC(v37);
    if ((_DWORD)v42)
    {
      v30 = (int *)v41;
      v31 = &v41[32 * v42];
      do
      {
        v32 = (uint64_t)(v30 + 2);
        v33 = *v30;
        v30 += 8;
        sub_22E90379C((_QWORD *)a1, v33, v32, 0, (uint64_t)v36);
        sub_22E903BEC(v36);
      }
      while (v30 != (int *)v31);
    }
    v28 = 0;
  }
  sub_22E89277C(&v41);
  return v28;
}

uint64_t sub_22EE47B0C(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int j;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int k;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v63 = 0;
  v61 = 3;
  v62 = 6;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v62, (int *)&v60, (__int16 *)(v4 + 1693), &v63, &v61);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a1[1];
  v12 = sub_22EFFA6B0(a2);
  if (*v12 == 161 && (v14 = *((_QWORD *)v12 + 2)) != 0 && (*(_DWORD *)(v14 + 28) & 0x7F) == 0x40)
  {
    v16 = *(_QWORD *)v11;
    v15 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)v15)
      v17 = *(_QWORD *)v15 + 72;
    else
      v17 = 0;
    v18 = *(_QWORD *)(v16 + 216);
    v19 = *(_QWORD *)(v16 + 3200);
    *(_QWORD *)(v16 + 3200) = 0;
    v58 = *(_QWORD *)(v16 + 10288);
    v59 = v19;
    v57 = *(_DWORD *)(v16 + 1944);
    v20 = *(_DWORD *)(v16 + 2192);
    *(_QWORD *)(v16 + 216) = v17;
    *(_QWORD *)(v16 + 10288) = 0;
    *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
    *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
    v63 = v16;
    v64 = 1;
    for (i = 16; i != 80; i += 16)
      *(uint64_t *)((char *)&v63 + i) = -4096;
    v67 = &v69;
    v13.n128_u64[0] = 0x100000000;
    v68 = 0x100000000;
    v70 = *(_QWORD *)(v16 + 12024);
    v71 = 0;
    v72 = 0;
    *(_QWORD *)(v16 + 12024) = &v63;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(_BYTE *)(v22 + 16) == 26;
    else
      v23 = 0;
    if (v23
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v22 = sub_22F10CF48(v22)) != 0)
    {
      v24 = (unsigned __int16)(*(_QWORD *)(v22 + 16) >> 38);
    }
    else
    {
      v24 = 0;
    }
    v25 = (*(_DWORD *)(v14 + 96) >> 20);
    if (v25 == 255)
    {
      v26 = v14;
      if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
      {
        v27 = *(_QWORD *)(v14 + 16);
        v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 4) != 0)
          v28 = *(_QWORD *)v28;
        for (j = *(_WORD *)(v28 + 8) & 0x7F; j != 83; j = *(_WORD *)(v28 + 8) & 0x7F)
        {
          v30 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v30 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_35;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_34;
            if (j == 16)
              goto LABEL_28;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_41;
            if (j == 24)
            {
LABEL_28:
              v30 = -48;
            }
            else
            {
LABEL_34:
              if (j != 70)
              {
LABEL_35:
                v31 = j - 52;
                if ((j - 33) >= 5)
                  v32 = -48;
                else
                  v32 = -64;
                if (v31 >= 6)
                  v30 = v32;
                else
                  v30 = -72;
                goto LABEL_41;
              }
              v30 = -64;
            }
          }
LABEL_41:
          v33 = *(_QWORD *)(v28 + v30 + 16);
          v28 = v33 & 0xFFFFFFFFFFFFFFF8;
          if ((v33 & 4) != 0)
            v28 = *(_QWORD *)v28;
        }
        v26 = v28 - 40;
      }
      v25 = sub_22F36F2CC(*(_QWORD *)(v26 + 88), v14);
    }
    if (v24 > v25)
    {
      v44 = **(_QWORD **)(v11 + 8);
      v45 = (*(_DWORD *)(v14 + 96) >> 20);
      if (v45 == 255)
      {
        v46 = v14;
        if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
        {
          v47 = *(_QWORD *)(v14 + 16);
          v48 = v47 & 0xFFFFFFFFFFFFFFF8;
          if ((v47 & 4) != 0)
            v48 = *(_QWORD *)v48;
          for (k = *(_WORD *)(v48 + 8) & 0x7F; k != 83; k = *(_WORD *)(v48 + 8) & 0x7F)
          {
            v50 = -40;
            if (k > 70)
            {
              if (k == 71)
              {
                v50 = -56;
              }
              else if (k != 81)
              {
                goto LABEL_73;
              }
            }
            else
            {
              if (k > 0x18)
                goto LABEL_72;
              if (k == 16)
                goto LABEL_66;
              if (((1 << k) & 0x1066) != 0)
                goto LABEL_79;
              if (k == 24)
              {
LABEL_66:
                v50 = -48;
              }
              else
              {
LABEL_72:
                if (k != 70)
                {
LABEL_73:
                  v51 = k - 52;
                  if ((k - 33) >= 5)
                    v52 = -48;
                  else
                    v52 = -64;
                  if (v51 >= 6)
                    v50 = v52;
                  else
                    v50 = -72;
                  goto LABEL_79;
                }
                v50 = -64;
              }
            }
LABEL_79:
            v53 = *(_QWORD *)(v48 + v50 + 16);
            v48 = v53 & 0xFFFFFFFFFFFFFFF8;
            if ((v53 & 4) != 0)
              v48 = *(_QWORD *)v48;
          }
          v46 = v48 - 40;
        }
        v45 = sub_22F36F2CC(*(_QWORD *)(v46 + 88), v14);
      }
      sub_22EE0A7A4((uint64_t)&v63, v14, *(_QWORD *)(*(_QWORD *)(v44 + 120) + 8 * v45));
    }
    v38 = sub_22EE0A68C(*(_QWORD *)v11, (unint64_t)a2, *(_QWORD *)(v11 + 16), v13);
    if (!(_BYTE)v71)
    {
      if ((_DWORD)v68)
      {
        v54 = 0;
        v55 = 8 * v68;
        do
        {
          v56 = *(void ***)((char *)v67 + v54);
          if (v56)
          {
            if (*v56 != v56 + 2)
              free(*v56);
            MEMORY[0x2348A0E9C](v56, 0x1080C40ED926357);
          }
          v54 += 8;
        }
        while (v55 != v54);
      }
      *(_QWORD *)(v63 + 12024) = v70;
      LOBYTE(v71) = 1;
    }
    if (v67 != &v69)
      free(v67);
    if ((v64 & 1) == 0)
      llvm::deallocate_buffer(v65, (void *)(16 * v66));
    if (v18)
    {
      *(_QWORD *)(v16 + 216) = v18;
      *(_QWORD *)(v16 + 3200) = v59;
      *(_QWORD *)(v16 + 10288) = v58;
      *(_DWORD *)(v16 + 1944) = v57;
      *(_DWORD *)(v16 + 2192) = v20;
    }
  }
  else
  {
    v34 = **(_QWORD **)(v11 + 24);
    v35 = *(_QWORD *)v11;
    v36 = sub_22EFBAEF8(**(_QWORD **)(v11 + 8));
    sub_22EBBBB24((uint64_t)&v63, v35, v34, 0, v36);
    v38 = sub_22EE0A68C(*(_QWORD *)v11, (unint64_t)a2, *(_QWORD *)(v11 + 16), v37);
    if ((_BYTE)v65)
      *(_QWORD *)(v63 + 10288) = v64;
  }
  if ((v38 & 1) == 0)
  {
    v39 = *a1;
    v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
    if (v40)
    {
      sub_22EFF605C(v40);
      v42 = v41;
    }
    else
    {
      v42 = 0;
    }
    v38 = sub_22EBCF22C(v39, v40, v42, 0, 0);
  }
  sub_22EB48E64(v4);
  return v38;
}

uint64_t sub_22EE48168(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int j;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int k;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v63 = 0;
  v61 = 3;
  v62 = 6;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v62, (int *)&v60, (__int16 *)(v4 + 1693), &v63, &v61);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(uint64_t **)a1;
  v12 = sub_22EFFA6B0(a2);
  if (*v12 == 161 && (v14 = *((_QWORD *)v12 + 2)) != 0 && (*(_DWORD *)(v14 + 28) & 0x7F) == 0x40)
  {
    v15 = v11[2];
    v16 = *v11;
    v17 = *v11 + 72;
    if (!*v11)
      v17 = 0;
    v18 = *(_QWORD *)(v15 + 216);
    v19 = *(_QWORD *)(v15 + 3200);
    *(_QWORD *)(v15 + 3200) = 0;
    v58 = *(_QWORD *)(v15 + 10288);
    v59 = v19;
    v57 = *(_DWORD *)(v15 + 1944);
    v20 = *(_DWORD *)(v15 + 2192);
    *(_QWORD *)(v15 + 216) = v17;
    *(_QWORD *)(v15 + 10288) = 0;
    *(_DWORD *)(v15 + 1944) = *(_DWORD *)(v15 + 1904);
    *(_DWORD *)(v15 + 2192) = *(_DWORD *)(v15 + 1960);
    v63 = v15;
    v64 = 1;
    for (i = 16; i != 80; i += 16)
      *(uint64_t *)((char *)&v63 + i) = -4096;
    v67 = &v69;
    v13.n128_u64[0] = 0x100000000;
    v68 = 0x100000000;
    v70 = *(_QWORD *)(v15 + 12024);
    v71 = 0;
    v72 = 0;
    *(_QWORD *)(v15 + 12024) = &v63;
    v22 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(_BYTE *)(v22 + 16) == 26;
    else
      v23 = 0;
    if (v23
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v22 = sub_22F10CF48(v22)) != 0)
    {
      v24 = (unsigned __int16)(*(_QWORD *)(v22 + 16) >> 38);
    }
    else
    {
      v24 = 0;
    }
    v25 = (*(_DWORD *)(v14 + 96) >> 20);
    if (v25 == 255)
    {
      v26 = v14;
      if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
      {
        v27 = *(_QWORD *)(v14 + 16);
        v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 4) != 0)
          v28 = *(_QWORD *)v28;
        for (j = *(_WORD *)(v28 + 8) & 0x7F; j != 83; j = *(_WORD *)(v28 + 8) & 0x7F)
        {
          v30 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v30 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_34;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_33;
            if (j == 16)
              goto LABEL_27;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_40;
            if (j == 24)
            {
LABEL_27:
              v30 = -48;
            }
            else
            {
LABEL_33:
              if (j != 70)
              {
LABEL_34:
                v31 = j - 52;
                if ((j - 33) >= 5)
                  v32 = -48;
                else
                  v32 = -64;
                if (v31 >= 6)
                  v30 = v32;
                else
                  v30 = -72;
                goto LABEL_40;
              }
              v30 = -64;
            }
          }
LABEL_40:
          v33 = *(_QWORD *)(v28 + v30 + 16);
          v28 = v33 & 0xFFFFFFFFFFFFFFF8;
          if ((v33 & 4) != 0)
            v28 = *(_QWORD *)v28;
        }
        v26 = v28 - 40;
      }
      v25 = sub_22F36F2CC(*(_QWORD *)(v26 + 88), v14);
    }
    if (v24 > v25)
    {
      v44 = *v11;
      v45 = (*(_DWORD *)(v14 + 96) >> 20);
      if (v45 == 255)
      {
        v46 = v14;
        if ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
        {
          v47 = *(_QWORD *)(v14 + 16);
          v48 = v47 & 0xFFFFFFFFFFFFFFF8;
          if ((v47 & 4) != 0)
            v48 = *(_QWORD *)v48;
          for (k = *(_WORD *)(v48 + 8) & 0x7F; k != 83; k = *(_WORD *)(v48 + 8) & 0x7F)
          {
            v50 = -40;
            if (k > 70)
            {
              if (k == 71)
              {
                v50 = -56;
              }
              else if (k != 81)
              {
                goto LABEL_72;
              }
            }
            else
            {
              if (k > 0x18)
                goto LABEL_71;
              if (k == 16)
                goto LABEL_65;
              if (((1 << k) & 0x1066) != 0)
                goto LABEL_78;
              if (k == 24)
              {
LABEL_65:
                v50 = -48;
              }
              else
              {
LABEL_71:
                if (k != 70)
                {
LABEL_72:
                  v51 = k - 52;
                  if ((k - 33) >= 5)
                    v52 = -48;
                  else
                    v52 = -64;
                  if (v51 >= 6)
                    v50 = v52;
                  else
                    v50 = -72;
                  goto LABEL_78;
                }
                v50 = -64;
              }
            }
LABEL_78:
            v53 = *(_QWORD *)(v48 + v50 + 16);
            v48 = v53 & 0xFFFFFFFFFFFFFFF8;
            if ((v53 & 4) != 0)
              v48 = *(_QWORD *)v48;
          }
          v46 = v48 - 40;
        }
        v45 = sub_22F36F2CC(*(_QWORD *)(v46 + 88), v14);
      }
      sub_22EE0A7A4((uint64_t)&v63, v14, *(_QWORD *)(*(_QWORD *)(v44 + 120) + 8 * v45));
    }
    v38 = sub_22EE0A68C(v11[2], (unint64_t)a2, v11[3], v13);
    if (!(_BYTE)v71)
    {
      if ((_DWORD)v68)
      {
        v54 = 0;
        v55 = 8 * v68;
        do
        {
          v56 = *(void ***)((char *)v67 + v54);
          if (v56)
          {
            if (*v56 != v56 + 2)
              free(*v56);
            MEMORY[0x2348A0E9C](v56, 0x1080C40ED926357);
          }
          v54 += 8;
        }
        while (v55 != v54);
      }
      *(_QWORD *)(v63 + 12024) = v70;
      LOBYTE(v71) = 1;
    }
    if (v67 != &v69)
      free(v67);
    if ((v64 & 1) == 0)
      llvm::deallocate_buffer(v65, (void *)(16 * v66));
    if (v18)
    {
      *(_QWORD *)(v15 + 216) = v18;
      *(_QWORD *)(v15 + 3200) = v59;
      *(_QWORD *)(v15 + 10288) = v58;
      *(_DWORD *)(v15 + 1944) = v57;
      *(_DWORD *)(v15 + 2192) = v20;
    }
  }
  else
  {
    v35 = v11[1];
    v34 = v11[2];
    v36 = sub_22EFBAEF8(*v11);
    sub_22EBBBB24((uint64_t)&v63, v34, v35, 0, v36);
    v38 = sub_22EE0A68C(v11[2], (unint64_t)a2, v11[3], v37);
    if ((_BYTE)v65)
      *(_QWORD *)(v63 + 10288) = v64;
  }
  if ((v38 & 1) == 0)
  {
    v39 = *(_QWORD *)(a1 + 8);
    v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
    if (v40)
    {
      sub_22EFF605C(v40);
      v42 = v41;
    }
    else
    {
      v42 = 0;
    }
    v38 = sub_22EBCF22C(v39, v40, v42, 0, 0);
  }
  sub_22EB48E64(v4);
  return v38;
}

_QWORD *sub_22EE487AC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  v2 = a1 + 1;
  v4 = (_QWORD *)*a1;
  *v2 = *(_QWORD *)(*a1 + 12240);
  v4[1530] = v3;
  v5 = a1[2];
  a1[2] = v4[1531];
  v4[1531] = v5;
  v6 = a1[3];
  a1[3] = v4[1532];
  v4[1532] = v6;
  v7 = a1[4];
  v8 = a1[5];
  v9 = v4[1534];
  a1[4] = v4[1533];
  v4[1533] = v7;
  a1[5] = v9;
  v4[1534] = v8;
  v10 = a1[6];
  a1[6] = v4[1535];
  v4[1535] = v10;
  sub_22E78E5D4((uint64_t)v2);
  return a1;
}

uint64_t sub_22EE48830(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x1000000000;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_BYTE *)(a1 + 328) = a3;
  if (a3)
  {
    *(_QWORD *)(a1 + 280) = a2[1520];
    a2[1520] = 0;
    v5 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = a2[1521];
    a2[1521] = v5;
    v6 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = a2[1522];
    a2[1522] = v6;
    v7 = *(_QWORD *)(a1 + 304);
    v8 = a2[1524];
    *(_QWORD *)(a1 + 304) = a2[1523];
    a2[1523] = v7;
    *(_QWORD *)(a1 + 312) = v8;
    a2[1524] = 0;
    v9 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = a2[1525];
    a2[1525] = v9;
    sub_22EE488E4(v4, (uint64_t)(a2 + 1296));
  }
  return a1;
}

uint64_t sub_22EE488E4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (result != a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_QWORD *)result == result + 16 || *(_QWORD *)a2 == a2 + 16)
    {
      if (*(_DWORD *)(result + 12) < *(_DWORD *)(a2 + 8))
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v3 + 8);
      if (*(_DWORD *)(a2 + 12) < v7)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *(_DWORD *)(v3 + 8);
      }
      v8 = *(_DWORD *)(a2 + 8);
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = v7;
      if ((_DWORD)v9)
      {
        v10 = 0;
        do
        {
          v11 = (uint64_t *)(*(_QWORD *)v3 + v10);
          v12 = (uint64_t *)(*(_QWORD *)a2 + v10);
          v13 = *v11;
          *v11 = *v12;
          *v12 = v13;
          LODWORD(v13) = *((_DWORD *)v11 + 2);
          *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
          *((_DWORD *)v12 + 2) = v13;
          v10 += 16;
        }
        while (16 * v9 != v10);
        v7 = *(_DWORD *)(v3 + 8);
        v8 = *(_DWORD *)(a2 + 8);
      }
      v14 = v7 - v8;
      if (v7 <= v8)
      {
        v15 = v8 - v7;
        if (v8 > v7)
        {
          if ((_DWORD)v9 != v8)
          {
            result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 16 * v7), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v8 - (*(_QWORD *)a2 + 16 * v9));
            v7 = *(_DWORD *)(v3 + 8);
          }
          *(_DWORD *)(v3 + 8) = v15 + v7;
          *(_DWORD *)(a2 + 8) = v9;
        }
      }
      else
      {
        if ((_DWORD)v9 != v7)
        {
          result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + 16 * v8), (const void *)(*(_QWORD *)v3 + 16 * v9), *(_QWORD *)v3 + 16 * v7 - (*(_QWORD *)v3 + 16 * v9));
          v8 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v14 + v8;
        *(_DWORD *)(v3 + 8) = v9;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

unint64_t *sub_22EE48A80(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int32 v14;
  uint64_t v16;
  int64x2_t v17;
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;

  v2 = (unint64_t *)a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v6 == 24)
      goto LABEL_13;
    if (v6 == 26)
      break;
    if (((1 << v6) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v4 = i;
LABEL_14:
  sub_22F115668(v4);
  v7 = *v2;
  if (*v2 >= 0x10)
  {
    v16 = (uint64_t)v18;
    v17 = vdupq_n_s64(0x20uLL);
    v19 = 0;
    v8 = sub_22F11598C(v7);
    if (v17.i64[0] < (unint64_t)v8)
      sub_22EEB52C0(&v16, v8);
    v9 = sub_22EE48CA8(a1, (uint64_t)&v16, v7);
    if (v9 > 0xF)
    {
      v11 = v9;
      v12 = (*a1)[11];
      v13 = v17.i64[0] - v17.i64[1];
      v14 = v17.i32[0] - v17.i32[2];
      if (v17.i32[0] == v17.i32[2])
        v14 = sub_22F11598C(v11);
      v2 = (unint64_t *)sub_22E3CD3D4(v12 + 2032, v14 + 8, 3);
      *v2 = v11;
      v10 = (_BYTE *)v16;
      memcpy(v2 + 1, (const void *)(v16 + v17.i64[1]), v13);
    }
    else
    {
      v2 = 0;
      v10 = (_BYTE *)v16;
    }
    if (v10 != v18 && v10)
      MEMORY[0x2348A0E84](v10, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22EE48CA8(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v5 = sub_22EE48CA8(a1, a2);
  v6 = 0;
  if (v5 >= 0x10)
  {
    v7 = sub_22E8C1750(a1, v5, a3);
    if (v7 >= 0x10)
      return v7;
    else
      return 0;
  }
  return v6;
}

void sub_22EE4D3A0(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EE4D628(a1, a2);
        break;
      case 0x67:
        sub_22EE4D6C8(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EE4D78C(a1, a2);
        break;
      case 0x6C:
        sub_22EE4D844((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EE4DA0C((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22EE4DA74((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EE4DA7C(a1, a2);
        break;
      case 0x70:
        sub_22EE4DB88(a1, a2);
        break;
      case 0x71:
        sub_22EE4DD1C(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22EE4DDEC(a1, a2);
        break;
      case 0x73:
        sub_22EE4E064((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EE4E14C(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EE4E1A8((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EE4E7AC((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22EE4EAEC((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EE4EC6C((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22EE4EFD4(a1, a2);
        break;
      case 0x7D:
        sub_22EE4F200((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22EE4F310(a1, a2);
        break;
      case 0x7F:
        sub_22EE4F79C(a1, a2);
        break;
      case 0x81:
        sub_22EE4F910((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EE4FE50((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EE5012C((uint64_t)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22EE501D4(a1, a2);
        break;
      case 0x87:
        sub_22EE50240(a1, a2);
        break;
      case 0x88:
        sub_22EE503B8(a1, a2);
        break;
      case 0x89:
        sub_22EE50650((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EE50828(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22EE50A10(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EE50B7C(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22EE50B80(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EE512C0(a1, a2);
        break;
      case 0x90:
        sub_22EE5132C(a1, a2);
        break;
      case 0x91:
        sub_22EE513D0(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EE5148C();
        break;
      case 0x98:
        sub_22EE51490(a1, a2);
        break;
      case 0x99:
        sub_22EE51534((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EE51560(a1, a2);
        break;
      case 0x9C:
        sub_22EE51624(a1, a2);
        break;
      case 0x9D:
        sub_22EE516F0(a1, a2);
        break;
      case 0x9E:
        sub_22EE51814((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EE518AC(a1, a2);
        break;
      case 0xA0:
        sub_22EE51900(a1, a2);
        break;
      case 0xA1:
        sub_22EE5194C(a1, a2);
        break;
      case 0xA2:
        sub_22EE51C6C(a1, a2);
        break;
      case 0xA3:
        sub_22EE51CDC(a1, a2);
        break;
      case 0xA4:
        sub_22EE51CE8((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EE5214C(a1, a2);
        break;
      case 0xA7:
        sub_22EE522D4((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EE523E8((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EE52414((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22EE524A8(a1, a2);
        break;
      case 0xB1:
        sub_22EE526D0((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EE52798((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22EE5281C(a1, a2);
        break;
      case 0xB6:
        sub_22EE52A34(a1, a2);
        break;
      case 0xB7:
        sub_22EE542C4((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EE543D0(a1, a2);
        break;
      case 0xB9:
        sub_22EE54484((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EE54570((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EE54584((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EE54648(a1, a2);
        break;
      case 0xBD:
        sub_22EE54C0C(a1, a2);
        break;
      case 0xBF:
        sub_22EE54F04(a1, a2);
        break;
      case 0xC0:
        sub_22EE55024((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EE551B0(a1, a2);
        break;
      case 0xC4:
        sub_22EE555CC(a1, a2);
        break;
      case 0xC6:
        sub_22EE55630((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EE55720(a1, a2);
        break;
      case 0xC8:
        sub_22EE5581C(a1, a2);
        break;
      case 0xC9:
        sub_22EE55BEC(a1, a2);
        break;
      case 0xCA:
        sub_22EE55CD4((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EE55D3C(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EE56038((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22EE56178(a1, a2);
        break;
      case 0xD1:
        sub_22EE56218(a1, a2);
        break;
      case 0xD2:
        sub_22EE5641C((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EE56480(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EE56848((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EE56C54(a1, a2);
        break;
      case 0xD6:
        sub_22EE56CD0((_QWORD **)a1, a2);
        break;
      case 0xD7:
        sub_22EE56D38(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EE56E34(a1, a2);
        break;
      case 0xDA:
        sub_22EE56EAC(a1, a2);
        break;
      case 0xDB:
        sub_22EE57010(a1, a2);
        break;
      case 0xDC:
        sub_22EE575E4((uint64_t)a1, a2);
        break;
      case 0xDD:
        sub_22EE57658(a1, a2);
        break;
      case 0xDE:
        sub_22EE578BC(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22EE57DA8(a1, a2);
        break;
      case 0xE4:
        sub_22EE57F54((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EE58014((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EE580C8(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22EE58720(a1, a2);
        break;
      case 0xE9:
        sub_22EE588F8(a1, a2);
        break;
      case 0xEA:
        sub_22EE5899C((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22EE4D628(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE4D6C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE4D78C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == (_QWORD)v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(_DWORD *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, (uint64_t *)&v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EE4D844(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 48));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(_QWORD *)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v19, v16, (__int16 *)(v6 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(v6 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(v6 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EE4DA0C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EE58A40((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EE4DA74(uint64_t a1, uint64_t a2)
{
  return sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EE4DA7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EE58A94(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EE4DB88(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EE4DD1C(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EE4DB88(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EE4DDEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EE59244(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EE58A40((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EE5970C(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EE4E064(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EE4E14C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EE4E1A8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EE58D28((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EE58A40(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EE58A94((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22EE4E7AC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EE64EA4((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EE58A94((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EE4EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EE4EC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EE4D3A0(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE58A40(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EE5E9EC((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EE5F198(&v30, a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EE657BC(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EE4EFD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EE4D3A0(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EE4D3A0(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EE4F200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22EE58A40(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22EE4F310(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE64EA4(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EE4D3A0(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EE58D28(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EE4F79C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EE4F910(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EE5E9EC((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22EE5F3A0((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22EE5F3A0((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22EE4FE50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EE4D3A0(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EE5012C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = (uint64_t *)sub_22EE48A80(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EE501D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EE50240(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EE4D3A0(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EE48A80(a1, v4 & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EE503B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE64EA4(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EE58A94(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EE50650(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EE48A80(a1, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = (uint64_t)*a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v5 + 1704);
    sub_22EB4DDB8(v5 + 3688, &v19, v16, (__int16 *)(v5 + 1693), &v18, &v17);
    v6 = *(unsigned int *)(v5 + 3696);
    v7 = v6 - 2;
    v8 = *(_QWORD *)(v5 + 3688);
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)(v5 + 1693) = 0;
    if (*(_DWORD *)(v5 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EE50828(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22EE50A10(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE50828(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EE50B80(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EE4D3A0(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v60 = v62;
      v61 = 0x800000000;
      v10 = 1;
      if ((sub_22EE58A94(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v60, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v60, v61, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v60, v61, v11, 0);
        v10 = v13;
      }
      if (v60 != v62)
        free(v60);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EE4D3A0(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EE65A5C(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EE4D3A0(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EE4D3A0(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v59 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v60, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v60 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v59;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v56 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v56 + 520) = v46;
        *(_DWORD *)(v56 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v59;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v57 = sub_22EB2D0B8();
              if ((v57 & 1) != 0)
                v10 = 1;
              else
                v10 = v57;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v60 = v62;
      v61 = 0x1000000000;
      v51 = *v36;
      v58 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v60, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v62[0] = v53 | 3;
          LODWORD(v61) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v58;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v54 = sub_22EFFBA54(v30);
        v55 = sub_22ED1767C(*a1, v31, v54, (uint64_t)&v60, v33, (uint64_t)v34, v52, 1, 0);
        if ((v55 & 1) != 0)
          v10 = 1;
        else
          v10 = v55;
      }
      else
      {
        sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C();
      }
      v27 = v58;
LABEL_79:
      if (v60 != v62)
        free(v60);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EE512C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EE5132C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE4D3A0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE513D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EE64EA4(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE4D3A0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EE51490(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EE51534(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EE4D3A0(a1, v3);
}

uint64_t sub_22EE51560(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EE51624(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22EE48A80(a1, v4);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *(_DWORD *)(v8 + 11992) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EE516F0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EE657BC((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EE51814(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EE48A80(a1, *(_QWORD *)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EE518AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EE51900(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE5194C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22EE5E9EC(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22EE5F198((__n128 *)v31, (uint64_t)a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22EE657BC((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22EE51C6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE56480(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE51CDC(uint64_t *a1, uint64_t a2)
{
  return sub_22EE65A5C(a1, a2, 0, 0);
}

uint64_t sub_22EE51CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EE4D3A0(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22EE4D3A0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22EE4D3A0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22EE4D3A0(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EE5214C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EE522D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EE523E8(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EE4D3A0(a1, v3);
}

uint64_t sub_22EE52414(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE4D3A0(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EE524A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(_QWORD *)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EE48A80(a1, v12);
        if (!v13)
          break;
        v14 = (void *)v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EE4D3A0(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EE526D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EE52798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22EE58A40(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22EE5281C(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EE58A94(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EE52A34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  __n128 *v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  size_t v65;
  unsigned __int32 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  void **v75;
  uint64_t j;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  unint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char v111;
  void *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  char v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  BOOL v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v195;
  unsigned __int8 *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  char v202[8];
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  int v208[2];
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned __int8 v212[24];
  char v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  int v220;
  int v221;
  void **v222;
  char v223;
  int v224;
  void *v225;
  uint64_t v226;
  int v227;
  void **v228;
  uint64_t v229;
  unint64_t v230;
  unsigned __int8 *v231;
  void *v232;
  uint64_t v233;
  _BYTE v234[32];
  unint64_t v235;
  int64x2_t v236;
  _QWORD v237[5];
  void *v238;
  uint64_t v239;
  _BYTE v240[105];
  void *v241;
  __int128 v242;
  _BYTE v243[16];
  char v244;
  void *v245[2];
  _BYTE v246[32];
  unint64_t *v247;
  uint64_t v248;
  _BYTE v249[32];
  void *v250[2];
  _QWORD v251[6];

  v2 = a2;
  v251[4] = *MEMORY[0x24BDAC8D0];
  v238 = v240;
  v239 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v239)
    {
      if (v6 <= HIDWORD(v239))
      {
        v10 = (char *)v238;
      }
      else
      {
        v225 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v238 != v240)
          free(v238);
        v238 = v10;
        HIDWORD(v239) = (_DWORD)v225;
        v7 = v239;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v238 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v239) = (unint64_t)v5 >> 4;
  }
  v250[0] = 0;
  v250[0] = (void *)sub_22F3C64D0(v2);
  v12 = (_QWORD *)sub_22F3C650C(v2);
  v13 = v250[0];
  v211 = v2;
  if (v250[0] != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v250[0];
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v238 + 88 * (((uint64_t)v15 - v16) >> 4);
        v247 = 0;
        v18 = (unint64_t *)(*(_QWORD *)v250[0] & 0xFFFFFFFFFFFFFFF8);
        v247 = v18;
        v235 = (unint64_t)a1;
        v236.i64[0] = (uint64_t)&v247;
        v236.i64[1] = (uint64_t)v17;
        v237[0] = v250;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v225 = &v227;
          v226 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v216 = 7;
          v217 = v22;
          sub_22EE7377C(v21, (uint64_t)&v216, (uint64_t)&v225);
          sub_22EE65D40((uint64_t)&v235);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v225 != &v227)
            free(v225);
          v2 = v211;
        }
        else
        {
          sub_22EE65D40((uint64_t)&v235);
        }
      }
      v13 = (char *)v250[0] + 16;
      v250[0] = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v214 = *a1;
  LOBYTE(v215) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v235 = (unint64_t)v237;
  v236 = vdupq_n_s64(0x20uLL);
  v237[4] = 0;
  v232 = v234;
  v233 = 0x400000000;
  v218 = v29;
  v219 = v30;
  v247 = (unint64_t *)v249;
  v248 = 0x400000000;
  v245[0] = v246;
  v245[1] = (void *)0x400000000;
  v241 = v243;
  v242 = xmmword_22F44E350;
  v244 = 0;
  v206 = v23;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v36 = v29;
    v32 = v29;
    while (1)
    {
      if ((v29 & 0xF) != 0)
        goto LABEL_63;
      v37 = *(unsigned __int8 *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v37 > 0x39)
      {
LABEL_58:
        if (sub_22F115668(v29))
          v36 = v29;
        v29 = sub_22F115B7C(v29);
        if (!v29)
          goto LABEL_65;
      }
      else
      {
        if (v37 == 24)
          goto LABEL_64;
        if (v37 == 26)
        {
          if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
          {
LABEL_64:
            v36 = v29;
LABEL_65:
            sub_22F115668(v36);
            if (*(_BYTE *)(v218 + 16) == 25)
              v38 = 0;
            else
              v38 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
            v2 = v211;
            v39 = (uint64_t)(v219 + 4);
            v40 = v218 + 40;
            if ((*(_BYTE *)(v32 + 23) & 4) != 0)
              v41 = sub_22E47E270(v32);
            else
              v41 = 0;
            if ((sub_22EE59244(a1, v39, v38, v40, v41, (uint64_t)&v247, (uint64_t)v245, (uint64_t)&v241) & 1) == 0)
            {
              sub_22E47EE80(&v218);
              v200 = sub_22EE48CA8(a1, &v235);
              if (v200 >= 0x10)
                goto LABEL_82;
            }
LABEL_121:
            v62 = 0;
            goto LABEL_122;
          }
        }
        else if (((1 << v37) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_58;
        }
LABEL_63:
        v29 = sub_22F115B7C(v29);
      }
    }
  }
  sub_22E47EE80(&v218);
  v31 = sub_22EE48CA8(a1, &v235);
  if (v31 < 0x10)
    goto LABEL_121;
  v200 = v31;
  v32 = v29;
  v33 = v218;
  for (i = v218; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_51;
      v35 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v35 <= 0x39)
        break;
LABEL_46:
      if (sub_22F115668(i))
        v33 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_75;
    }
    if (v35 == 24)
      goto LABEL_74;
    if (v35 == 26)
      break;
    if (((1 << v35) & 0x20000000200003CLL) == 0)
      goto LABEL_46;
LABEL_51:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_51;
LABEL_74:
  v33 = i;
LABEL_75:
  sub_22F115668(v33);
  if (*(_BYTE *)(v218 + 16) == 25)
    v42 = 0;
  else
    v42 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
  v2 = v211;
  v43 = (uint64_t)(v219 + 4);
  v44 = v218 + 40;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v45 = sub_22E47E270(v29);
  else
    v45 = 0;
  if ((sub_22EE59244(a1, v43, v42, v44, v45, (uint64_t)&v247, (uint64_t)v245, (uint64_t)&v241) & 1) != 0)
    goto LABEL_121;
LABEL_82:
  sub_22E4913B4(v32, (uint64_t)&v225);
  v46 = v32;
  v198 = v32;
  while (2)
  {
    while (2)
    {
      if ((v32 & 0xF) != 0)
        goto LABEL_93;
      v47 = *(unsigned __int8 *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v47 > 0x39)
      {
LABEL_88:
        if (sub_22F115668(v32))
          v46 = v32;
        v32 = sub_22F115B7C(v32);
        if (!v32)
          goto LABEL_95;
        continue;
      }
      break;
    }
    if (v47 == 24)
      break;
    if (v47 != 26)
    {
      if (((1 << v47) & 0x20000000200003CLL) != 0)
        goto LABEL_93;
      goto LABEL_88;
    }
    if ((*(_BYTE *)(v32 + 23) & 0x10) == 0)
    {
LABEL_93:
      v32 = sub_22F115B7C(v32);
      continue;
    }
    break;
  }
  v46 = v32;
LABEL_95:
  v207 = sub_22F115668(v46);
  v48 = v227;
  if ((v227 - 6) > 2)
  {
    v60 = 0;
    v2 = v211;
    v54 = (_QWORD *)v198;
    goto LABEL_111;
  }
  v49 = *a1;
  v250[0] = 0;
  v220 = 3;
  v221 = 4;
  v222 = (void **)*(unsigned int *)(v49 + 1704);
  sub_22EB4DDB8(v49 + 3688, &v221, (int *)&v222, (__int16 *)(v49 + 1693), (uint64_t *)v250, &v220);
  v50 = *(unsigned int *)(v49 + 3696);
  v51 = v50 - 2;
  v52 = *(_QWORD *)(v49 + 3688);
  v53 = *(_DWORD *)(v52 + 576 * (v50 - 2));
  v2 = v211;
  v54 = (_QWORD *)v198;
  if (v53 == 5)
  {
    *(_BYTE *)(v52 + 576 * v50 - 4) = *(_BYTE *)(v52 + 576 * v51 + 572);
    v55 = 1;
  }
  else if (v53 == 2)
  {
    *(_BYTE *)(v52 + 576 * v50 - 4) = 1;
    v55 = *(_BYTE *)(v52 + 576 * v51 + 573) != 0;
  }
  else
  {
    v55 = 0;
    *(_BYTE *)(v52 + 576 * v50 - 4) = 0;
  }
  v56 = v52 + 576 * v50;
  *(_BYTE *)(v56 - 3) = v55;
  *(_WORD *)(v49 + 1693) = 0;
  if (*(_DWORD *)(v49 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v49 + 1776), (llvm::SmallPtrSetImplBase *)(v56 - 560));
    sub_22EAEAE08(v49 + 1840, (uint64_t *)(v56 - 496));
  }
  v57 = sub_22EE4D3A0(a1, v230);
  if ((v57 & 1) != 0
    || (LODWORD(v250[0]) = v227,
        v58 = sub_22EB14270((uint64_t *)*a1, (unsigned __int8 *)(v57 & 0xFFFFFFFFFFFFFFFELL), (int *)v250),
        (v58 & 1) != 0))
  {
    sub_22EB48E64(v49);
    goto LABEL_121;
  }
  v60 = v230 != ((unint64_t)v58 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v250[0]) != v227;
  v230 = (unint64_t)v58 & 0xFFFFFFFFFFFFFFFELL;
  v227 = (int)v250[0];
  sub_22EB48E64(v49);
  v48 = v227;
LABEL_111:
  if (v48 == 2)
  {
    if (v229)
    {
      v75 = v228;
      v209 = v207 | ((unint64_t)v207 << 32);
      for (j = 8 * v229; j; j -= 8)
      {
        v77 = *v75;
        v78 = *(_QWORD *)((unint64_t)*v75 & 0xFFFFFFFFFFFFFFF0);
        if (v78 && *(_BYTE *)(v78 + 16) == 36
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
          && (v78 = sub_22F10CF48(v78)) != 0)
        {
          v250[0] = v251;
          v250[1] = (void *)0x200000000;
          v79 = *(_QWORD *)(v78 + 32);
          v222 = v250;
          v223 = 0;
          v224 = -1;
          sub_22EE72E1C((uint64_t)&v222, v79);
          v80 = *(_DWORD *)(v78 + 20);
          v81 = *a1;
          v82 = *(_DWORD *)(*a1 + 11992);
          *(_DWORD *)(*a1 + 11992) = -1;
          v83 = sub_22EE58A40((uint64_t)a1, *(_QWORD *)(v78 + 32));
          if (v83 >= 0x10)
          {
            LODWORD(v84) = v80 - 1;
            if (v80)
              v84 = v84;
            else
              v84 = 0;
            v85 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v83, v84 | ((unint64_t)(v80 != 0) << 32));
            v86 = v233;
            if (v233 >= (unint64_t)HIDWORD(v233))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v86 = v233;
            }
            *((_QWORD *)v232 + v86) = v85;
            LODWORD(v233) = v233 + 1;
          }
          *(_DWORD *)(v81 + 11992) = v82;
          if (v250[0] != v251)
            free(v250[0]);
          if (v83 < 0x10)
          {
LABEL_181:
            v62 = 0;
            v2 = v211;
            goto LABEL_122;
          }
          v60 = 1;
        }
        else
        {
          v250[0] = (void *)sub_22EE58A40((uint64_t)a1, (unint64_t)v77);
          if (v250[0] < (void *)0x10 || (sub_22EB14454(*a1, (unint64_t *)v250, v209) & 1) != 0)
            goto LABEL_181;
          v87 = v250[0];
          if (v77 != v250[0])
            v60 = 1;
          v88 = v233;
          if (v233 >= (unint64_t)HIDWORD(v233))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v88 = v233;
          }
          *((_QWORD *)v232 + v88) = v87;
          LODWORD(v233) = v233 + 1;
        }
        ++v75;
      }
    }
    v228 = (void **)v232;
    v229 = v233;
    if (!(_DWORD)v233)
      v227 = 1;
    v2 = v211;
    v54 = (_QWORD *)v198;
  }
  if (v244)
  {
    sub_22F24FB88(&v241, v248);
    if (v241)
    {
      v89 = v231;
      v61 = v200;
      if (v231)
      {
        if (*(_BYTE *)(v218 + 16) == 25)
        {
          if ((_DWORD)v248)
            v60 = 1;
          goto LABEL_188;
        }
        v195 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
        if (v195 == v248)
        {
          if (!(unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38))
            goto LABEL_188;
          v196 = (unsigned __int8 *)v241;
          while (*v89 == *v196)
          {
            ++v89;
            ++v196;
            if (!--v195)
              goto LABEL_188;
          }
        }
      }
      v60 = 1;
LABEL_188:
      v231 = (unsigned __int8 *)v241;
      goto LABEL_189;
    }
  }
  v61 = v200;
  if (v231)
  {
    v231 = 0;
    v60 = 1;
  }
LABEL_189:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v90 = v248;
    goto LABEL_199;
  }
  v90 = v248;
  if (v61 == v54[3] && (v91 = (unsigned __int16)(v54[2] >> 38), v91 == v248))
  {
    v92 = v218;
    if ((unsigned __int16)(v54[2] >> 38))
    {
      v93 = v54 + 5;
      v94 = v247;
      v95 = 8 * v91;
      while (*v93 == *v94)
      {
        ++v93;
        ++v94;
        v95 -= 8;
        if (!v95)
          goto LABEL_196;
      }
      goto LABEL_199;
    }
LABEL_196:
    if (v60)
      goto LABEL_199;
LABEL_200:
    v96 = sub_22E8BB094((uint64_t)&v235, v92);
    v98 = 0;
    v99 = v219;
    *v97 = *v219;
    v97[1] = v99[1];
    v97[2] = v99[2];
    if (v218)
    {
      v100 = 0;
      if (*(_BYTE *)(v218 + 16) == 26)
      {
        v101 = *(_QWORD *)(v218 + 16);
        if ((v101 & 0x3C0000000000000) != 0)
        {
          v102 = (unsigned __int16)(v101 >> 38);
          if (*(_QWORD *)(v218 + 16) == 25)
            v102 = 0;
          v100 = *(_QWORD *)&v99[2 * v102 + 4];
          v98 = v100 & 0xFFFFFFFF00000000;
          v100 = v100;
        }
        else
        {
          v98 = 0;
          v100 = 0;
        }
      }
    }
    else
    {
      v100 = 0;
    }
    if (v96)
    {
      if (*(_BYTE *)(v96 + 16) == 26)
      {
        v103 = *(_QWORD *)(v96 + 16);
        if ((v103 & 0x3C0000000000000) != 0)
        {
          v104 = v100 | v98;
          if (*(_QWORD *)(v96 + 16) == 25)
            v105 = 0;
          else
            v105 = (unsigned __int16)(v103 >> 38);
          *(_QWORD *)&v97[2 * v105 + 4] = v104;
          v99 = v219;
        }
      }
    }
    v97[3] = v99[3];
    if (*(_BYTE *)(v96 + 16) != 25)
    {
      v106 = *(_QWORD *)(v96 + 16);
      if ((v106 & 0x3FFFC000000000) != 0)
      {
        v107 = 0;
        v108 = (unsigned __int16)(v106 >> 38);
        do
        {
          *(_QWORD *)&v97[2 * v107 + 4] = *((_QWORD *)v245[0] + v107);
          ++v107;
        }
        while (v108 != v107);
      }
    }
    v62 = v92;
  }
  else
  {
LABEL_199:
    v92 = sub_22EE80544((_QWORD *)*a1, v61, v247, v90, 0, 0, (uint64_t)&v225);
    v62 = 0;
    if (v92 >= 0x10)
      goto LABEL_200;
  }
LABEL_122:
  if (v241 != v243)
    free(v241);
  if (v245[0] != v246)
    free(v245[0]);
  if (v247 != (unint64_t *)v249)
    free(v247);
  if (v62 >= 0x10)
  {
    v64 = *(_QWORD *)(*a1 + 88);
    v65 = v236.i64[0] - v236.i64[1];
    v66 = v236.i32[0] - v236.i32[2];
    if (v236.i32[0] == v236.i32[2])
      v66 = sub_22F11598C(v62);
    v63 = (unint64_t *)sub_22E3CD3D4(v64 + 2032, v66 + 8, 3);
    *v63 = v62;
    memcpy(v63 + 1, (const void *)(v235 + v236.i64[1]), v65);
  }
  else
  {
    v63 = 0;
  }
  if (v232 != v234)
    free(v232);
  if ((_QWORD *)v235 != v237 && v235)
    MEMORY[0x2348A0E84]();
  if (v62 < 0x10)
  {
    v67 = 1;
    goto LABEL_309;
  }
  v68 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v68 & 4) != 0 && (v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    *(_QWORD *)v208 = sub_22EE4D3A0(a1, v69);
  else
    *(_QWORD *)v208 = 0;
  v70 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v70 > 3 || v70 == 2)
    goto LABEL_231;
  v72 = *(_QWORD *)(*a1 + 216);
  v73 = *(_WORD *)(v72 + 8) & 0x7F;
  if (v73 == 16 || v73 == 83)
    goto LABEL_232;
  v74 = -40;
  if ((*(_WORD *)(v72 + 8) & 0x7Fu) > 0x46)
  {
    if (v73 == 71)
    {
      v74 = -56;
    }
    else if (v73 != 81)
    {
LABEL_223:
      if (v73 - 52 < 6)
      {
        v74 = -72;
      }
      else
      {
        v74 = -48;
        if (v73 - 33 < 5)
          v74 = -64;
      }
    }
  }
  else
  {
    if (v73 > 0x18)
      goto LABEL_222;
    if (((1 << v73) & 0x1066) == 0)
    {
      if (v73 == 24)
      {
        v74 = -48;
      }
      else
      {
LABEL_222:
        if (v73 != 70)
          goto LABEL_223;
        v74 = -64;
      }
    }
  }
  v109 = *(_QWORD *)(v72 + v74 + 16);
  v110 = (_QWORD *)(v109 & 0xFFFFFFFFFFFFFFF8);
  if ((v109 & 4) != 0)
    v110 = (_QWORD *)*v110;
  if ((sub_22EFC7ADC((unint64_t)v110) & 1) == 0)
LABEL_232:
    v111 = 2;
  else
LABEL_231:
    v111 = 0;
  v112 = (void *)sub_22F3C61E8(v2);
  v113 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v63, v111, (*(_DWORD *)v2 >> 18) & 3);
  v225 = v112;
  sub_22F25E108(a1 + 1, &v225)[1] = v113;
  v114 = *a1;
  v115 = v2;
  v116 = *(_QWORD *)(v2 + 16);
  v117 = sub_22F3C6220(v115);
  v118 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v117 + 16))(v117) >> 32;
  if (*(_BYTE *)(*v63 + 16) == 25)
    v119 = 0;
  else
    v119 = (unsigned __int16)(*(_QWORD *)(*v63 + 16) >> 38);
  v120 = sub_22F3C6220(v211);
  v121 = sub_22F3366E8(v114, (uint64_t)v113, v116, v63, v118, v63 + 3, v119, *(_DWORD *)(v120 + 80) >> 30, *(_QWORD *)v208 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(v206 + 1488) = v121;
  sub_22F3C6220(v211);
  v225 = (void *)sub_22F3C6220(v211);
  v199 = a1 + 1;
  sub_22F25E108(a1 + 1, &v225)[1] = v121;
  v122 = *a1;
  v212[0] = 0;
  v213 = 0;
  v210 = v121;
  sub_22EC52964(v122, v113, v121, v212);
  if (v213)
    v213 = 0;
  v123 = *a1;
  v124 = v121;
  v125 = v121 + 72;
  if (!v121)
    v125 = 0;
  v205 = *(_QWORD *)(v123 + 216);
  v126 = *(_QWORD *)(v123 + 3200);
  *(_QWORD *)(v123 + 3200) = 0;
  v201 = *(_QWORD *)(v123 + 10288);
  *(_QWORD *)v202 = v126;
  v203 = *(_DWORD *)(v123 + 1944);
  v204 = *(_DWORD *)(v123 + 2192);
  *(_QWORD *)(v123 + 216) = v125;
  *(_DWORD *)(v123 + 1944) = *(_DWORD *)(v123 + 1904);
  *(_DWORD *)(v123 + 2192) = *(_DWORD *)(v123 + 1960);
  v127 = *(_QWORD *)(v211 + 16);
  v128 = (*(_DWORD *)v211 >> 18) & 3;
  v129 = *(_DWORD *)(v211 + 24);
  v130 = (*(_DWORD *)v211 >> 20) & 1;
  v131 = (*(_DWORD *)v211 >> 21) & 1;
  v132 = sub_22F3C66E8(v211);
  v133 = v211;
  sub_22EC52B9C(v123, v206, v124, v127, v128, v129, v130, v131, v132);
  v134 = sub_22F3C64D0(v211);
  v135 = sub_22F3C650C(v211);
  if (v134 == v135)
  {
    *(_DWORD *)(v206 + 1508) = *(_DWORD *)(v206 + 1272);
    v136 = *a1;
    LODWORD(v250[0]) = 6;
    v225 = 0;
    LODWORD(v247) = 3;
    v235 = *(unsigned int *)(v136 + 1704);
    sub_22EB4DDB8(v136 + 3688, (int *)v250, (int *)&v235, (__int16 *)(v136 + 1693), (uint64_t *)&v225, (int *)&v247);
    v137 = *(unsigned int *)(v136 + 3696);
    v138 = v137 - 2;
    v139 = *(_QWORD *)(v136 + 3688);
    v140 = *(_DWORD *)(v139 + 576 * (v137 - 2));
    if (v140 == 5)
    {
      *(_BYTE *)(v139 + 576 * v137 - 4) = *(_BYTE *)(v139 + 576 * v138 + 572);
      v142 = 1;
      v141 = v205;
    }
    else
    {
      v141 = v205;
      if (v140 == 2)
      {
        *(_BYTE *)(v139 + 576 * v137 - 4) = 1;
        v142 = *(_BYTE *)(v139 + 576 * v138 + 573) != 0;
      }
      else
      {
        v142 = 0;
        *(_BYTE *)(v139 + 576 * v137 - 4) = 0;
      }
    }
    v143 = v139 + 576 * v137;
    *(_BYTE *)(v143 - 3) = v142;
    *(_WORD *)(v136 + 1693) = 0;
    if (*(_DWORD *)(v136 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v136 + 1776), (llvm::SmallPtrSetImplBase *)(v143 - 560));
      sub_22EAEAE08(v136 + 1840, (uint64_t *)(v143 - 496));
    }
  }
  else
  {
    v144 = v135;
    v145 = 0;
    do
    {
      v146 = *(_QWORD *)v134;
      if ((*(_QWORD *)v134 & 1) != 0)
        break;
      if ((v146 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v134 + 8), 1, 1, 0, (v146 >> 1) & 1);
      }
      else if (v146 >= 4)
      {
        if (sub_22F3C6428(v133, (_QWORD *)v134))
        {
          v153 = sub_22F3C64D0(v133);
          v154 = (char *)v238 + 88 * ((v134 - v153) >> 4);
          v155 = *(_QWORD *)v134 & 0xFFFFFFFFFFFFFFF8;
          v225 = &v227;
          v226 = 0x400000000;
          v156 = *((unsigned int *)v154 + 4);
          if ((_DWORD)v156)
          {
            v158 = (_QWORD *)*((_QWORD *)v154 + 1);
            v197 = &v158[2 * v156];
            while ((*v158 & 1) == 0)
            {
              v159 = v158[1];
              if (v159 < 0x10)
                break;
              v160 = *(_QWORD *)(v155 + 40);
              v161 = (v160 & 7) != 0 ? 0 : v160 & 0xFFFFFFFFFFFFFFF8;
              v162 = sub_22EC5313C(*a1, *(_DWORD *)(v155 + 24), v159, *(_DWORD *)v154, v161, (*(_BYTE *)(v155 + 96) >> 5) & 3, *v158 & 0xFFFFFFFFFFFFFFFELL);
              if (!v162)
                break;
              v163 = v162;
              v164 = v226;
              if (v226 >= (unint64_t)HIDWORD(v226))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v164 = v226;
              }
              *((_QWORD *)v225 + v164) = v163;
              LODWORD(v226) = v226 + 1;
              sub_22F336D2C(*a1, v206, v163);
              v158 += 2;
              if (v158 == v197)
                goto LABEL_273;
            }
LABEL_298:
            if (v225 != &v227)
              free(v225);
            *(_DWORD *)(v206 + 1508) = *(_DWORD *)(v206 + 1272);
            v184 = *a1;
            LODWORD(v250[0]) = 6;
            v225 = 0;
            LODWORD(v247) = 3;
            v235 = *(unsigned int *)(v184 + 1704);
            sub_22EB4DDB8(v184 + 3688, (int *)v250, (int *)&v235, (__int16 *)(v184 + 1693), (uint64_t *)&v225, (int *)&v247);
            v185 = *(unsigned int *)(v184 + 3696);
            v186 = v185 - 2;
            v187 = *(_QWORD *)(v184 + 3688);
            v188 = *(_DWORD *)(v187 + 576 * (v185 - 2));
            v133 = v211;
            v141 = v205;
            if (v188 == 5)
            {
              *(_BYTE *)(v187 + 576 * v185 - 4) = *(_BYTE *)(v187 + 576 * v186 + 572);
              v189 = 1;
            }
            else if (v188 == 2)
            {
              *(_BYTE *)(v187 + 576 * v185 - 4) = 1;
              v189 = *(_BYTE *)(v187 + 576 * v186 + 573) != 0;
            }
            else
            {
              v189 = 0;
              *(_BYTE *)(v187 + 576 * v185 - 4) = 0;
            }
            v190 = v187 + 576 * v185;
            *(_BYTE *)(v190 - 3) = v189;
            *(_WORD *)(v184 + 1693) = 0;
            if (*(_DWORD *)(v184 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v184 + 1776), (llvm::SmallPtrSetImplBase *)(v190 - 560));
              sub_22EAEAE08(v184 + 1840, (uint64_t *)(v190 - 496));
            }
            goto LABEL_305;
          }
LABEL_273:
          if ((v145 & 1) != 0)
            goto LABEL_298;
          v235 = v155;
          v157 = *(_QWORD *)v225;
          sub_22F25E108(v199, &v235)[1] = v157;
          if (v225 != &v227)
            free(v225);
          v145 = 0;
        }
        else
        {
          v147 = *(_QWORD *)v134;
          if ((*(_QWORD *)v134 & 2) != 0)
            v148 = 1;
          else
            v148 = 2;
          if ((*(_QWORD *)v134 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v149 = 2;
          else
            v149 = v148;
          if (v147 < 4)
            v149 = 2;
          if ((v147 & 1) != 0)
            v150 = 0;
          else
            v150 = v149;
          v151 = *(_DWORD *)(v134 + 12);
          v152 = v147 & 0xFFFFFFFFFFFFFFF8;
          v235 = v147 & 0xFFFFFFFFFFFFFFF8;
          v225 = 0;
          if (sub_22E793870(v199, &v235, &v225)
            && v225 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v152 = *((_QWORD *)v225 + 1);
          }
          if (v152 && (*(_BYTE *)(v152 + 28) & 0x80) == 0)
            sub_22F32FC30(*a1, v152, *(_DWORD *)(v134 + 8), v150, v151);
          else
            v145 = 1;
        }
        v133 = v211;
      }
      v134 += 16;
    }
    while (v134 != v144);
    *(_DWORD *)(v206 + 1508) = *(_DWORD *)(v206 + 1272);
    v165 = *a1;
    LODWORD(v250[0]) = 6;
    v225 = 0;
    LODWORD(v247) = 3;
    v235 = *(unsigned int *)(v165 + 1704);
    sub_22EB4DDB8(v165 + 3688, (int *)v250, (int *)&v235, (__int16 *)(v165 + 1693), (uint64_t *)&v225, (int *)&v247);
    v166 = *(unsigned int *)(v165 + 3696);
    v167 = v166 - 2;
    v168 = *(_QWORD *)(v165 + 3688);
    v169 = *(_DWORD *)(v168 + 576 * (v166 - 2));
    if (v169 == 5)
    {
      v170 = v145;
      *(_BYTE *)(v168 + 576 * v166 - 4) = *(_BYTE *)(v168 + 576 * v167 + 572);
      v171 = 1;
      v141 = v205;
    }
    else
    {
      v141 = v205;
      v170 = v145;
      if (v169 == 2)
      {
        *(_BYTE *)(v168 + 576 * v166 - 4) = 1;
        v171 = *(_BYTE *)(v168 + 576 * v167 + 573) != 0;
      }
      else
      {
        v171 = 0;
        *(_BYTE *)(v168 + 576 * v166 - 4) = 0;
      }
    }
    v172 = v168 + 576 * v166;
    *(_BYTE *)(v172 - 3) = v171;
    *(_WORD *)(v165 + 1693) = 0;
    if (!*(_DWORD *)(v165 + 1848))
    {
      if ((v170 & 1) == 0)
        goto LABEL_294;
      goto LABEL_305;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v165 + 1776), (llvm::SmallPtrSetImplBase *)(v172 - 560));
    sub_22EAEAE08(v165 + 1840, (uint64_t *)(v172 - 496));
    if ((v170 & 1) != 0)
    {
LABEL_305:
      LOBYTE(v215) = 0;
      goto LABEL_306;
    }
  }
LABEL_294:
  sub_22F3C638C(v133);
  v178 = sub_22EE5970C(a1, *(__n128 **)(v133 + 8 * *(unsigned __int16 *)(v133 + 4) + 32), 0, v173, v174, v175, v176, v177);
  LOBYTE(v215) = 0;
  if ((v178 & 1) != 0)
  {
LABEL_306:
    if (v141)
    {
      *(_QWORD *)(v123 + 216) = v141;
      *(_QWORD *)(v123 + 3200) = *(_QWORD *)v202;
      *(_QWORD *)(v123 + 10288) = v201;
      *(_DWORD *)(v123 + 1944) = v203;
      *(_DWORD *)(v123 + 2192) = v204;
    }
    v67 = 1;
    sub_22F336DD4(*a1, *(unsigned int *)(v133 + 16), 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v225, v206);
    v179 = v178 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v210, v179, 1);
    if (v141)
    {
      *(_QWORD *)(v123 + 216) = v141;
      *(_QWORD *)(v123 + 3200) = *(_QWORD *)v202;
      *(_QWORD *)(v123 + 10288) = v201;
      *(_DWORD *)(v123 + 1944) = v203;
      *(_DWORD *)(v123 + 2192) = v204;
    }
    v180 = *a1;
    v181 = *(unsigned int *)(v133 + 16);
    sub_22F0D60E4(v179);
    sub_22EC54548(v180, v181, v182, (uint64_t)&v225);
    v67 = v183;
    sub_22F2F43D0((uint64_t)&v225);
  }
LABEL_309:
  sub_22F2F446C((uint64_t)&v214);
  v191 = (char *)v238;
  if ((_DWORD)v239)
  {
    v192 = 88 * v239;
    do
    {
      v193 = *(char **)&v191[v192 - 80];
      if (&v191[v192 - 64] != v193)
        free(v193);
      v192 -= 88;
    }
    while (v192);
    v191 = (char *)v238;
  }
  if (v191 != v240)
    free(v191);
  return v67;
}

uint64_t sub_22EE542C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EE5E9EC((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EE543D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, (uint64_t *)&v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EE54484(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EE54570(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EE4D3A0(a1, v3);
}

uint64_t sub_22EE54584(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EE54648(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EE5E9EC(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EE657BC((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22EE5F198((__n128 *)v51, (uint64_t)a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EE54C0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EE4D3A0(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 16));
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EE58A94(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(_QWORD **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EE54F04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE4D3A0(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EE4D3A0(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EE4D3A0(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EE55024(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EE4D3A0(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EE551B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = (_QWORD *)*a1;
  v6 = *(_DWORD *)(*a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(_QWORD *)(v41 + 32);
LABEL_9:
        v20 = sub_22EE48A80(v59, v19);
        v21 = sub_22EE58A40((uint64_t)v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*v59, v21, v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22EE4D3A0(v59, v56);
      v55 = v25;
      v28 = sub_22EE4D3A0(v59, v25);
      v29 = v26;
      v30 = sub_22EE4D3A0(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = (_QWORD *)*v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108(v59 + 1, v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22EE555CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EE48A80(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EE55630(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EE55720(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EE5581C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EE58A94(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v40, &v36) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EE4D3A0(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v36))
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v22 = (_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v23 = *v22;
          v22 = (_QWORD *)(*v22 + 40);
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v22, v23, *(unsigned int *)(a2 + 32));
LABEL_52:
        v20 = v24;
        v35 = v37;
        if (v37 == v39)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(_QWORD *)(a2 + 40);
      v15 = sub_22EE48A80(a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v36)
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v24 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v37, v38, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v37 = v39;
  v38 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v37);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v25 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v25 = (uint64_t *)(*v6 + 40);
  v26 = *v25;
  v27 = (int *)v37;
  v28 = v38;
  v29 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v31 = *v6;
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 32);
  v33 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v31 + 58) & 2) != 0)
    v34 = sub_22EC2DA20(v33, 0, v29, v8, v26, v31, v32);
  else
    v34 = sub_22EC2F730(v33, 0, v29, v8, v26, v31, v32, v30, v27, v28, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
  v20 = v34;
  v35 = v37;
  if (v37 != v39)
LABEL_53:
    free(v35);
LABEL_28:
  if (v40 != v42)
    free(v40);
  return v20;
}

uint64_t sub_22EE55BEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EE55CD4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EE55D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22EE4D3A0(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22EE4D3A0(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22EE4D3A0(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22EE4D3A0(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EE56038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EE4D3A0(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EE56178(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EE56218(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EE4D3A0(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EE5641C(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EE4D3A0(a1, a2[2]);
}

uint64_t sub_22EE56480(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EE5E9EC(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EE657BC((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EE56848(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EE4D3A0(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE58A40(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EE5E9EC((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EE657BC(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EE56C54(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

unint64_t sub_22EE56CD0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EE56D38(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EE58A94(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EE56E34(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EE4D3A0(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EE56EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EE4D3A0(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EE57010(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EE59244(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22EE4D3A0(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1);
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22EE4D3A0(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22EE48A80(a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22EE575E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 32));
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 32) != v4)
        return sub_22F3C109C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EE57658(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EE58A94(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EE578BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EE5FE84(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EE5FBA0((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EE57DA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EE5E680(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EE57F54(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EE4D3A0(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EE58014(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EE4D3A0(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EE580C8(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned __int32 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  size_t v39;
  unsigned __int32 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  void *v54[2];
  _BYTE v55[32];
  uint64_t v56;
  int64x2_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD v62[6];

  v2 = a1;
  v62[4] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v48 = vdupq_n_s64(0x20uLL);
  v49 = (uint64_t)(a2 + 6);
  v50 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v56 = (uint64_t)v58;
      v57 = vdupq_n_s64(0x20uLL);
      v59 = 0;
      v10 = sub_22F11598C(v9);
      if (v57.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v56, v10);
      v11 = sub_22EE48CA8(v2, &v56);
      if (v11 >= 0x10)
      {
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v61;
          v15 = HIDWORD(v61);
        }
        else
        {
          v22 = *(_QWORD *)(*v2 + 88);
          v23 = v57.i64[0] - v57.i64[1];
          v24 = v57.i32[0] - v57.i32[2];
          if (v57.i32[0] == v57.i32[2])
            v24 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v22 + 2032, v24 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, (const void *)(v56 + v57.i64[1]), v23);
          v14 = v61;
          v15 = HIDWORD(v61);
          v5 = 1;
        }
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v61;
        }
        v60[v14] = (uint64_t)v7;
        LODWORD(v61) = v61 + 1;
        v12 = 4;
      }
      else
      {
        v12 = 1;
      }
      if ((_BYTE *)v56 != v58 && v56)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v16 = *(_QWORD *)(v9 + 32);
    if (v16 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v32 = *(_QWORD *)((char *)&unk_22F49A180
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v32 = 1;
    v52 = *(_QWORD *)(v9 + 32);
    v53 = ((unint64_t)v8 + v32 + 3) & -v32;
    v54[0] = v55;
    v54[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v16, v53, (uint64_t)v54);
    v46 = *(_DWORD *)(v9 + 20);
    LODWORD(v18) = v46 - 1;
    if (v46)
      v18 = v18;
    else
      v18 = 0;
    v47 = v18;
    v19 = v16;
    for (i = v16; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v21 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v21 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v19 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v21 == 24)
        goto LABEL_42;
      if (v21 == 26)
        break;
      if (((1 << v21) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v19 = i;
LABEL_43:
    sub_22F115668(v19);
    sub_22F1167E8(&v52);
    v2 = a1;
    v25 = *a1;
    v26 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v56 = (uint64_t)v58;
    v57 = v48;
    v59 = 0;
    v27 = sub_22F11598C(*v7);
    if (v57.i64[0] < (unint64_t)v27)
      sub_22EEB52C0(&v56, v27);
    v28 = sub_22EE48CA8(a1, &v56);
    if (v28 < 0x10)
    {
LABEL_46:
      v12 = 1;
      goto LABEL_47;
    }
    v29 = v28;
    v30 = v16;
    while (2)
    {
      while (2)
      {
        if ((v30 & 0xF) != 0)
          goto LABEL_67;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v31 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v30))
            v16 = v30;
          v30 = sub_22F115B7C(v30);
          if (!v30)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v31 == 24)
        break;
      if (v31 != 26)
      {
        if (((1 << v31) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v30 + 23) & 0x10) == 0)
      {
LABEL_67:
        v30 = sub_22F115B7C(v30);
        continue;
      }
      break;
    }
    v16 = v30;
LABEL_69:
    v33 = sub_22F115668(v16);
    v34 = sub_22F1167E8(&v52);
    v2 = a1;
    v35 = sub_22F34AE9C((_QWORD *)*a1, v29, v33 | ((unint64_t)v34 << 32), *v8, v47 | ((unint64_t)(v46 != 0) << 32));
    if (v35 < 0x10)
      goto LABEL_46;
    v36 = v35;
    sub_22EEB5360((uint64_t)&v56, v35, 4uLL, 4);
    *v37 = *v8;
    v38 = *(_QWORD *)(*a1 + 88);
    v39 = v57.i64[0] - v57.i64[1];
    v40 = v57.i32[0] - v57.i32[2];
    if (v57.i32[0] == v57.i32[2])
      v40 = sub_22F11598C(v36);
    v41 = (_QWORD *)sub_22E3CD3D4(v38 + 2032, v40 + 8, 3);
    *v41 = v36;
    memcpy(v41 + 1, (const void *)(v56 + v57.i64[1]), v39);
    v42 = v61;
    if (v61 >= (unint64_t)HIDWORD(v61))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v61;
    }
    v60[v42] = (uint64_t)v41;
    LODWORD(v61) = v61 + 1;
    v12 = 4;
LABEL_47:
    if ((_BYTE *)v56 != v58 && v56)
      MEMORY[0x2348A0E84]();
    *(_DWORD *)(v25 + 11992) = v26;
    if (v54[0] != v55)
      free(v54[0]);
    v5 = 1;
    v6 = (_DWORD *)v49;
    v3 = v50;
LABEL_53:
    if (v12 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v43 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v60, v61, a2[5]);
        else
          v43 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v43 = 1;
LABEL_81:
  if (v60 != v62)
    free(v60);
  return v43;
}

uint64_t sub_22EE58720(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = sub_22EE48A80(a1, v9);
    if (v10)
    {
      v11 = (unint64_t *)v10;
      v12 = *a1;
      if (v9 != v10 || *(_DWORD *)(v12 + 11992) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EE65A5C(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EE588F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EE65A5C(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22EE4D3A0(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EE5899C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE48A80(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

unint64_t sub_22EE58A40(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EE48A80(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

uint64_t sub_22EE58A94(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EE4D3A0(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EE4D3A0(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EE58D28(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EE58D28(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EE4D3A0(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EE4D3A0(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EE58A94(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EE59244(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EE58A40(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EE58A40((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EE59E08(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F49A180
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EE59E08(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

uint64_t sub_22EE5970C(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EE5A324(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EE5A854(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EE5AA50(a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EE5AB78(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EE5AE3C(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EE5AFC4(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EE5B1DC(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EE5B1E4(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EE5B238(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EE5B520(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EE5B5C8(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EE5B79C((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EE5BAC4(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EE5BB3C(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EE5BD60((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EE5BD6C(a1, a2);
      break;
    case 0x16u:
      result = sub_22EE5BDD8(a1, a2);
      break;
    case 0x17u:
      result = sub_22EE5BE44(a1, a2);
      break;
    case 0x18u:
      result = sub_22EE5BEB0(a1, a2);
      break;
    case 0x19u:
      result = sub_22EE5BF1C(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EE5BF8C(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EE5BFF8(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EE5C064(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EE5C0D0(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EE5C13C(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EE5C1A8(a1, a2);
      break;
    case 0x20u:
      result = sub_22EE5C214(a1, a2);
      break;
    case 0x21u:
      result = sub_22EE5C280(a1, a2);
      break;
    case 0x22u:
      result = sub_22EE5C2EC(a1, a2);
      break;
    case 0x23u:
      result = sub_22EE5C358(a1, a2);
      break;
    case 0x24u:
      result = sub_22EE5C3C4(a1, a2);
      break;
    case 0x25u:
      result = sub_22EE5C430(a1, a2);
      break;
    case 0x26u:
      result = sub_22EE5C49C(a1, a2);
      break;
    case 0x27u:
      result = sub_22EE5C508(a1, a2);
      break;
    case 0x28u:
      result = sub_22EE5C574(a1, a2);
      break;
    case 0x29u:
      result = sub_22EE5C5E0(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EE5C64C(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EE5C6B8(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EE5C724(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EE5C790(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EE5C7FC(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EE5C868(a1, a2);
      break;
    case 0x30u:
      result = sub_22EE5C8D4(a1, a2);
      break;
    case 0x31u:
      result = sub_22EE5C940(a1, a2);
      break;
    case 0x32u:
      result = sub_22EE5C9AC(a1, a2);
      break;
    case 0x33u:
      result = sub_22EE5CA18(a1, a2);
      break;
    case 0x34u:
      result = sub_22EE5CA84(a1, a2);
      break;
    case 0x35u:
      result = sub_22EE5CAF0(a1, a2);
      break;
    case 0x36u:
      result = sub_22EE5CB5C(a1, a2);
      break;
    case 0x37u:
      result = sub_22EE5CBC8(a1, a2);
      break;
    case 0x38u:
      result = sub_22EE5CC34(a1, a2);
      break;
    case 0x39u:
      result = sub_22EE5CCA0(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EE5CD0C(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EE5CD78(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EE5CDE4(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EE5CE50(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EE5CEBC(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EE5CF28(a1, a2);
      break;
    case 0x42u:
      result = sub_22EE5CF94(a1, a2);
      break;
    case 0x43u:
      result = sub_22EE5D000(a1, a2);
      break;
    case 0x44u:
      result = sub_22EE5D06C(a1, a2);
      break;
    case 0x45u:
      result = sub_22EE5D0D8(a1, a2);
      break;
    case 0x46u:
      result = sub_22EE5D144(a1, a2);
      break;
    case 0x47u:
      result = sub_22EE5D1B0(a1, a2);
      break;
    case 0x48u:
      result = sub_22EE5D21C(a1, a2);
      break;
    case 0x49u:
      result = sub_22EE5D288(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EE5D2F4(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EE5D360(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EE5D3CC(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EE5D438(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EE5D4A4(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EE5D510(a1, a2);
      break;
    case 0x50u:
      result = sub_22EE5D57C(a1, a2);
      break;
    case 0x51u:
      result = sub_22EE5D5E8(a1, a2);
      break;
    case 0x52u:
      result = sub_22EE5D654(a1, a2);
      break;
    case 0x53u:
      result = sub_22EE5D6C0(a1, a2);
      break;
    case 0x54u:
      result = sub_22EE5D72C(a1, a2);
      break;
    case 0x55u:
      result = sub_22EE5D798(a1, a2);
      break;
    case 0x56u:
      result = sub_22EE5D804(a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EE5D8F0(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EE5D95C((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EE5DA10((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EE5DA88(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EE5DCB0(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EE5DD1C(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EE5DE10(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EE5DE60(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EE5DECC(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EE5DF14(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EE5DFC8(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EE5E1D8(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EE5E228(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EE5E350(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EE4D3A0(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EE5E4A8((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EE5E554((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

unint64_t sub_22EE59E08(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  char v53[8];
  int64x2_t v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v13 = (uint64_t *)sub_22EE48A80(a1, v7);
    if (v13)
      goto LABEL_14;
    return 0;
  }
  *(_QWORD *)v53 = v55;
  v54 = vdupq_n_s64(0x20uLL);
  v56 = 0;
  v9 = sub_22F11598C(v8);
  if (v54.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v53, v9);
  v10 = (int *)(v7 + 1);
  v11 = sub_22EE48CA8(a1, v53);
  if (v11 < 0x10)
  {
LABEL_8:
    v12 = 0;
    v13 = 0;
    goto LABEL_9;
  }
  v32 = v11;
  v33 = *(_QWORD *)(v8 + 32);
  v51 = v33;
  if (v33 >= 0x10 && (v33 & 0xF) == 0)
    v50 = *(_QWORD *)((char *)&unk_22F49A180
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v50 = 1;
  v35 = *(_QWORD *)(v8 + 32);
  v52[0] = v35;
  v52[1] = ((unint64_t)v7 + v50 + 11) & -v50;
  while (1)
  {
    while (1)
    {
      if ((v35 & 0xF) != 0)
        goto LABEL_71;
      v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v36 <= 0x39)
        break;
LABEL_66:
      v37 = v35;
      v38 = sub_22F115668(v35);
      v39 = v51;
      if (v38)
        v39 = v37;
      v51 = v39;
      v35 = sub_22F115B7C(v37);
      if (!v35)
        goto LABEL_79;
    }
    if (v36 == 24)
      goto LABEL_78;
    if (v36 == 26)
      break;
    if (((1 << v36) & 0x20000000200003CLL) == 0)
      goto LABEL_66;
LABEL_71:
    v35 = sub_22F115B7C(v35);
  }
  if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
    goto LABEL_71;
LABEL_78:
  v51 = v35;
LABEL_79:
  v42 = sub_22F115668(v51);
  v43 = sub_22F1167E8(v52);
  v44 = sub_22F34AE9C((_QWORD *)*a1, v32, v42 | ((unint64_t)v43 << 32), *v10, a3);
  if (v44 < 0x10)
    goto LABEL_8;
  v45 = v44;
  sub_22EEB5360((uint64_t)v53, v44, 4uLL, 4);
  *v46 = *v10;
  v47 = *(_QWORD *)(*a1 + 88);
  v48 = v54.i64[0] - v54.i64[1];
  v49 = v54.i32[0] - v54.i32[2];
  if (v54.i32[0] == v54.i32[2])
    v49 = sub_22F11598C(v45);
  v13 = (uint64_t *)sub_22E3CD3D4(v47 + 2032, v49 + 8, 3);
  *v13 = v45;
  memcpy(v13 + 1, (const void *)(*(_QWORD *)v53 + v54.i64[1]), v48);
  v12 = 1;
LABEL_9:
  if (*(_BYTE **)v53 != v55 && *(_QWORD *)v53)
    MEMORY[0x2348A0E84]();
  if ((v12 & 1) == 0 || !v13)
    return 0;
LABEL_14:
  if (v13 != (uint64_t *)v7)
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    v18 = *(_QWORD *)(a2 + 40);
    if ((v18 & 7) != 0)
      v19 = 0;
    else
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    v20 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v17, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v19, *v13, (uint64_t)v13, *(_BYTE *)(a2 + 96) & 7, 0);
    v14 = v20;
    v21 = *(_DWORD *)(a2 + 96);
    if ((v21 & 0x1000) != 0)
      v22 = 0;
    else
      v22 = v21 & 0xFE000;
    v23 = (v21 >> 20);
    if (v23 == 255)
    {
      v24 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
        {
          v28 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v28 = -56;
              goto LABEL_48;
            }
            if (i == 81)
              goto LABEL_48;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_35;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_48;
              if (i == 24)
              {
LABEL_35:
                v28 = -48;
                goto LABEL_48;
              }
            }
            if (i == 70)
            {
              v28 = -64;
              goto LABEL_48;
            }
          }
          v29 = i - 52;
          if ((i - 33) >= 5)
            v30 = -48;
          else
            v30 = -64;
          if (v29 >= 6)
            v28 = v30;
          else
            v28 = -72;
LABEL_48:
          v31 = *(_QWORD *)(v26 + v28 + 16);
          v26 = v31 & 0xFFFFFFFFFFFFFFF8;
          if ((v31 & 4) != 0)
            v26 = *(_QWORD *)v26;
        }
        v24 = v26 - 40;
      }
      v23 = sub_22F36F2CC(*(_QWORD *)(v24 + 88), a2);
      v40 = (unsigned int *)(v14 + 96);
      v41 = *(_DWORD *)(v14 + 96) & 0xFFF01FFF | v22;
      *(_DWORD *)(v14 + 96) = v41;
      if (v23 >= 0xFF)
      {
        sub_22F3AC2B8(v14, v23);
LABEL_77:
        *(_QWORD *)v53 = a2;
        sub_22F25E108(a1 + 1, v53)[1] = v14;
        return v14;
      }
    }
    else
    {
      v40 = (unsigned int *)(v20 + 96);
      v41 = *(_DWORD *)(v20 + 96) & 0xFFF01FFF | v22;
    }
    *v40 = v41 & 0xF00FFFFF | (v23 << 20);
    goto LABEL_77;
  }
  return a2;
}

uint64_t sub_22EE5A324(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EE4D3A0(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EE4D3A0(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EE4D3A0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EE5A854(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EE4D3A0(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EE5AA50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 32);
    if (!sub_22EE48A80(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0(*(_QWORD *)(*a1 + 216), v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *(_DWORD *)(v9 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EE5AB78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE5970C(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EE5AE3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE5B1DC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EE5AA50(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EE5AFC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EE58A40((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EE5970C(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EE5B1DC(uint64_t *a1, uint64_t a2)
{
  return sub_22EE5E680(a1, a2, 0);
}

uint64_t sub_22EE5B1E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EE5B238(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EE5970C(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EE5970C(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EE5970C(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EE5970C(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EE5B520(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EE5B5C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EE5E8E8((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE5B79C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EE5970C(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EE5E8E8((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EE5970C(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EE5970C(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EE5BAC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EE5BB3C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE5E9EC(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EE5F198((__n128 *)&v19, (uint64_t)a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22EE5B1DC(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EE5BD60(uint64_t a1, uint64_t a2)
{
  return sub_22EE5970C(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EE5BD6C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BDD8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BE44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BEB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BF1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BF8C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5BFF8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C064(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C0D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C13C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C1A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C214(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C280(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C2EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C358(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C3C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C430(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C49C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C508(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C574(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C5E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C64C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C6B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C724(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C790(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C7FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C868(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C8D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C940(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5C9AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CA18(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CA84(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CAF0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CB5C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CBC8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CC34(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CCA0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CD0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CD78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CDE4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CE50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CEBC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CF28(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5CF94(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D000(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D06C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D0D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D144(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D1B0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D21C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D288(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D2F4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D360(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D3CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D438(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D4A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D510(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D57C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D5E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D654(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D6C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D72C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D798(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE605C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE5D804(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
LABEL_6:
      v7 = (uint64_t *)sub_22EE48A80(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EE58A40((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8((_QWORD *)*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8(*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EE5D8F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EE5D95C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE5970C(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE5DA10(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EE5DA88(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EE5970C(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EE5970C(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EE5DCB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EE5DD1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EE5DE10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE58D28(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EE5DE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE5B1DC(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE5DECC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE5B1DC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE5DF14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EE5B1DC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EE5DECC(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EE5DE60(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EE5DFC8(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EE4D3A0(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EE4D3A0(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EE5970C(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EE5E1D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE5E228(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EE5970C(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EE5E8E8((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EE5970C(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EE5E350(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EE5970C(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EE5E4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EE5970C(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE5E554(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EE5E8E8((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EE5970C(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EE5E680(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EE5970C(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22EE5E8E8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EE4D3A0(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

unint64_t sub_22EE5E9EC(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EE5F3A0(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

__n128 sub_22EE5F198(__n128 *a1, uint64_t a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870((uint64_t *)(a2 + 8), &v23, &v24)
      && v24 != *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
    {
      v19 = *(_QWORD *)(v24 + 8);
    }
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = a3[1].n128_i64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EE58A40(a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = (_QWORD *)sub_22EE48A80(a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

_QWORD *sub_22EE5F3A0(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EE602D8((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EE5F76C((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EE48CA8(a1, &v41);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EE5F76C(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EE5FBA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EE5FE84(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EE48A80(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EE58A40((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EE5E9EC((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EE4D3A0(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22EE602D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EE605C0(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EE60D18(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EE60E9C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EE60EE8(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EE61060((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EE611E4((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EE61230((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EE6127C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EE613C8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EE61514(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EE616A8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EE616F4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EE6174C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EE617A4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EE617F4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EE61844((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EE61990((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EE61A14(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EE61A60((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EE61BAC((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EE61D00(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EE6217C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EE621C8((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EE62320((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EE6236C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EE623C0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EE627FC((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EE62948((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EE62ADC((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EE62C34((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EE62D8C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EE62F1C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EE633F4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EE63440((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EE6358C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EE635D8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EE63624((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EE63670((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EE636BC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EE63714(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EE6377C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EE637C8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EE63914(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EE63D58((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EE63DA4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EE63E08((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EE63F54((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EE63FA0((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EE64138(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EE64574((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EE645C0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EE64A3C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EE64A88((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EE64BE0((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EE64D38(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EE5970C(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EE5F198(&v26, (uint64_t)a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EE60D18(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EE4D3A0(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EE4D3A0(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EE60E9C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE60EE8(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE4D3A0(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EE61060(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EE4D3A0(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EE611E4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE61230(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE6127C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EE613C8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EE61514(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EE4D3A0(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EE4D3A0(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE616A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE616F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE6174C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE617A4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE617F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE61844(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE61990(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EE4D3A0(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EE61A14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE61A60(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EE4D3A0(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EE61BAC(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EE61D00(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE4D3A0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE5E9EC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EE5F198(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EE6217C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EE621C8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EE62320(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE6236C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE623C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0]
      || (sub_22EE5F198((__n128 *)v42, (uint64_t)a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EE627FC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE62948(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EE4D3A0(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EE62ADC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EE62C34(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE62D8C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE4D3A0(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EE62F1C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EE4D3A0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE5E9EC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EE5F198((__n128 *)&v57, (uint64_t)a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EE633F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE63440(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE6358C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE635D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE63624(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE63670(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE636BC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE4D3A0(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE63714(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EE6377C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE637C8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE63914(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0]
      && (sub_22EE5F198((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36)
                  && v36 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
                {
                  v20 = v36[1];
                }
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EE63D58(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE63DA4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE63E08(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE63F54(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EE63FA0(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EE4D3A0(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EE64138(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0]
      || (sub_22EE5F198((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EE64574(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE645C0(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE4D3A0(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE5E9EC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EE5F198(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EE64A3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE4D3A0(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EE64A88(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EE64BE0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE4D3A0(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EE64D38(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EE4D3A0(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EE4D3A0(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_22EE64EA4(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EE48A80(a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F49A180
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EE65194(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return (uint64_t)v2;
}

unint64_t sub_22EE65194(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EE5E9EC(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EE657BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EE65A5C(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EE5E9EC(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EE5F198(&v18, (uint64_t)a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EE657BC((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EE65C30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EE48A80((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EE4D3A0(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EE65CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE65D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE65D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE65D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EE65D24()
{
  JUMPOUT(0x22EE65D2CLL);
}

unint64_t sub_22EE65D40(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EE58D28(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

unint64_t sub_22EE65EB0(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  int *v11;

  v8 = sub_22EE48CA8(a1, a2);
  result = 0;
  if (v8 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v8 == *(_QWORD *)(a3 + 32)
      || (a3 = sub_22EE7E490(*a1, v8, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4), result = 0, a3 >= 0x10))
    {
      v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
      if (!v10 || (*(_DWORD *)(v10 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v10);
      sub_22EEB5360(a2, a3, 4uLL, 4);
      *v11 = *a4;
      return a3;
    }
  }
  return result;
}

uint64_t sub_22EE65FC4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t i64;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  _OWORD *v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  _OWORD *v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;

  if (!*(_BYTE *)(a1 + 328))
    goto LABEL_5;
  sub_22EE488E4(*(_QWORD *)a1 + 10368, a1 + 8);
  v2 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 8352) != 1 || (*(_QWORD *)(v2[9] + 20) & 0x8000000000000) == 0)
  {
    v3 = v2[1520];
    v2[1520] = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v3;
    v4 = v2[1521];
    v2[1521] = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v4;
    v5 = v2[1522];
    v2[1522] = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v5;
    v6 = v2[1523];
    v2[1523] = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v6;
    v7 = v2[1524];
    v2[1524] = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v7;
    v8 = v2[1525];
    v2[1525] = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v8;
    goto LABEL_5;
  }
  v11 = v2[1520];
  v2[1520] = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v11;
  v12 = v2[1521];
  v2[1521] = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v12;
  v13 = v2[1522];
  v2[1522] = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v13;
  v14 = v2[1523];
  v2[1523] = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v14;
  v15 = v2[1524];
  v2[1524] = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v15;
  v16 = v2[1525];
  v2[1525] = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v16;
  v17 = *(int64x2_t **)a1;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 12200);
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 12192);
  v20 = v19 + v18;
  v21 = *(_QWORD *)(*(_QWORD *)a1 + 12168);
  v22 = (v19 + v18) >> 8;
  v23 = (char *)(v21 + 8 * v22);
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 12176);
  if (v24 == v21)
    v25 = 0;
  else
    v25 = *(_QWORD *)v23 + 16 * v20;
  v26 = *(_QWORD *)(a1 + 312);
  v27 = *(_QWORD *)(a1 + 288);
  v28 = (char *)(v27 + 8 * (v26 >> 8));
  if (*(_QWORD *)(a1 + 296) == v27)
  {
    v29 = 0;
    v32 = 0;
    v31 = (char *)(v27 + 8 * ((v26 + v16) >> 8));
  }
  else
  {
    v29 = *(_QWORD *)v28 + 16 * v26;
    v30 = v26 + v16;
    v31 = (char *)(v27 + 8 * (v30 >> 8));
    v32 = *(_QWORD *)v31 + 16 * v30;
  }
  if (v32 == v29)
    v33 = 0;
  else
    v33 = ((v32 - *(_QWORD *)v31) >> 4) + 32 * (v31 - v28) - ((v29 - *(_QWORD *)v28) >> 4);
  v34 = v19 >> 8;
  v35 = (char *)(v21 + 8 * (v19 >> 8));
  if (v24 == v21)
    v36 = 0;
  else
    v36 = *(_QWORD *)v35 + 16 * v19;
  i64 = (uint64_t)v17[760].i64;
  if (v25 == v36)
    v38 = 0;
  else
    v38 = ((v25 - *(_QWORD *)v23) >> 4) + 32 * (v23 - v35) - ((v36 - *(_QWORD *)v35) >> 4);
  if (v38 < v18 - v38)
  {
    if (v33 > v19)
    {
      sub_22E9087B8(i64, v33 - v19);
      v21 = v17[760].i64[1];
      v19 = v17[762].u64[0];
      v24 = v17[761].i64[0];
      v34 = v19 >> 8;
    }
    v39 = (uint64_t *)(v21 + 8 * v34);
    if (v24 == v21)
      v40 = 0;
    else
      v40 = *v39 + 16 * v19;
    if (v33 <= v38)
    {
      v46 = v40;
      v47 = (uint64_t *)(v21 + 8 * v34);
LABEL_70:
      if (v33)
      {
        v65 = v33 + ((v40 - *v39) >> 4);
        if (v65 < 1)
        {
          v68 = 255 - v65;
          v66 = &v39[-(v68 >> 8)];
          v67 = *v66 + 16 * ~(_BYTE)v68;
        }
        else
        {
          v66 = &v39[(unint64_t)v65 >> 8];
          v67 = *v66 + 16 * v65;
        }
        if (v67 != v40)
        {
          v69 = v66;
          v70 = v67;
          do
          {
            if (v46 == *v47)
            {
              v71 = *--v47;
              v46 = v71 + 4096;
            }
            if (v70 == *v69)
            {
              v72 = *--v69;
              v70 = v72 + 4096;
            }
            *(_OWORD *)(v46 - 16) = *(_OWORD *)(v70 - 16);
            v46 -= 16;
            v17[762] = vaddq_s64(v17[762], (int64x2_t)xmmword_22F463B30);
            v70 -= 16;
          }
          while (v70 != v40);
        }
        if (v33 < v38)
        {
          v73 = v38 + ((v40 - *v39) >> 4);
          if (v73 < 1)
          {
            v76 = 255 - v73;
            v74 = &v39[-(v76 >> 8)];
            v75 = *v74 + 16 * ~(_BYTE)v76;
          }
          else
          {
            v74 = &v39[(unint64_t)v73 >> 8];
            v75 = *v74 + 16 * v73;
          }
          v109 = v39;
          v110 = (uint64_t *)v40;
          sub_22E909140(v66, v67, v74, v75, (uint64_t)&v109);
          v39 = v109;
          v40 = (uint64_t)v110;
        }
        if (v31 == v28)
        {
          v82 = v29;
        }
        else
        {
          v78 = *(_QWORD *)v28;
          v77 = (uint64_t *)(v28 + 8);
          v79 = v78 + 4096;
          v80 = v29;
          while (1)
          {
            sub_22E9091D0(v80, v79, v39, v40, &v109);
            v39 = v110;
            v40 = (uint64_t)v111;
            if (v77 == (uint64_t *)v31)
              break;
            v81 = *v77++;
            v80 = v81;
            v79 = v81 + 4096;
          }
          v82 = *(_QWORD *)v31;
        }
        sub_22E9091D0(v82, v32, v39, v40, &v109);
      }
      goto LABEL_5;
    }
    if (v38 >= v33 >> 1)
    {
      v45 = v33 - v38 + ((v29 - *(_QWORD *)v28) >> 4);
      if (v45 >= 1)
      {
        v28 += 8 * ((unint64_t)v45 >> 8);
        goto LABEL_50;
      }
      v56 = 255 - v45;
      v57 = ~(_BYTE)v56;
      v28 -= 8 * (v56 >> 8);
    }
    else
    {
      if (!v38)
      {
        v28 = v31;
        v54 = v32;
        goto LABEL_60;
      }
      v45 = ((v32 - *(_QWORD *)v31) >> 4) - v38;
      if (v45 >= 1)
      {
        v28 = &v31[8 * ((unint64_t)v45 >> 8)];
LABEL_50:
        v54 = *(_QWORD *)v28 + 16 * v45;
LABEL_60:
        if (v54 == v29)
        {
          v46 = v40;
          v47 = v39;
        }
        else
        {
          v61 = v28;
          v62 = v54;
          v47 = v39;
          v46 = v40;
          do
          {
            if (v46 == *v47)
            {
              v63 = *--v47;
              v46 = v63 + 4096;
            }
            if (v62 == *(_QWORD *)v61)
            {
              v64 = *((_QWORD *)v61 - 1);
              v61 -= 8;
              v62 = v64 + 4096;
            }
            *(_OWORD *)(v46 - 16) = *(_OWORD *)(v62 - 16);
            v46 -= 16;
            v17[762] = vaddq_s64(v17[762], (int64x2_t)xmmword_22F463B30);
            v62 -= 16;
          }
          while (v62 != v29);
        }
        v33 = v38;
        v29 = v54;
        goto LABEL_70;
      }
      v60 = 255 - v45;
      v57 = ~(_BYTE)v60;
      v28 = &v31[-8 * (v60 >> 8)];
    }
    v54 = *(_QWORD *)v28 + 16 * v57;
    goto LABEL_60;
  }
  v41 = 32 * (v24 - v21) - 1;
  if (v24 == v21)
    v41 = 0;
  v42 = v41 - v20;
  if (v33 > v42)
  {
    sub_22E908C20(i64, v33 - v42);
    v18 = v17[762].i64[1];
    v21 = v17[760].i64[1];
    v24 = v17[761].i64[0];
    v20 = v17[762].i64[0] + v18;
    v22 = v20 >> 8;
  }
  v43 = (uint64_t *)(v21 + 8 * v22);
  if (v24 == v21)
    v44 = 0;
  else
    v44 = *v43 + 16 * v20;
  v48 = v18 - v38;
  v49 = v18 - v38 >= v33;
  v50 = v18 - v38 - v33;
  if (!v49)
  {
    if (v48 >= v33 >> 1)
    {
      v51 = v50 + ((v32 - *(_QWORD *)v31) >> 4);
      if (v51 >= 1)
      {
        v31 += 8 * ((unint64_t)v51 >> 8);
        goto LABEL_53;
      }
      v58 = 255 - v51;
      v59 = ~(_BYTE)v58;
      v31 -= 8 * (v58 >> 8);
    }
    else
    {
      if (!v48)
      {
        v31 = v28;
        v55 = v29;
        goto LABEL_95;
      }
      v51 = v48 + ((v29 - *(_QWORD *)v28) >> 4);
      if (v51 >= 1)
      {
        v31 = &v28[8 * ((unint64_t)v51 >> 8)];
LABEL_53:
        v55 = *(_QWORD *)v31 + 16 * v51;
LABEL_95:
        if (v55 == v32)
        {
          v52 = (_OWORD *)v44;
          v53 = v43;
        }
        else
        {
          v84 = v31;
          v85 = (_OWORD *)v55;
          v53 = v43;
          v52 = (_OWORD *)v44;
          do
          {
            *v52++ = *v85;
            if ((_OWORD *)((char *)v52 - *v53) == (_OWORD *)4096)
            {
              v86 = (_OWORD *)v53[1];
              ++v53;
              v52 = v86;
            }
            if ((_OWORD *)((char *)++v85 - *(_QWORD *)v84) == (_OWORD *)4096)
            {
              v87 = (_OWORD *)*((_QWORD *)v84 + 1);
              v84 += 8;
              v85 = v87;
            }
            ++v17[762].i64[1];
          }
          while (v85 != (_OWORD *)v32);
        }
        v33 = v48;
        v32 = v55;
        goto LABEL_105;
      }
      v83 = 255 - v51;
      v59 = ~(_BYTE)v83;
      v31 = &v28[-8 * (v83 >> 8)];
    }
    v55 = *(_QWORD *)v31 + 16 * v59;
    goto LABEL_95;
  }
  v52 = (_OWORD *)v44;
  v53 = v43;
LABEL_105:
  if (v33)
  {
    v88 = ((v44 - *v43) >> 4) - v33;
    if (v88 < 1)
    {
      v91 = 255 - v88;
      v89 = &v43[-(v91 >> 8)];
      v90 = *v89 + 16 * ~(_BYTE)v91;
    }
    else
    {
      v89 = &v43[(unint64_t)v88 >> 8];
      v90 = *v89 + 16 * v88;
    }
    if (v90 != v44)
    {
      v92 = v89;
      v93 = (_OWORD *)v90;
      do
      {
        *v52++ = *v93;
        if ((_OWORD *)((char *)v52 - *v53) == (_OWORD *)4096)
        {
          v94 = (_OWORD *)v53[1];
          ++v53;
          v52 = v94;
        }
        if ((_OWORD *)((char *)++v93 - *v92) == (_OWORD *)4096)
        {
          v95 = (_OWORD *)v92[1];
          ++v92;
          v93 = v95;
        }
        ++v17[762].i64[1];
      }
      while (v93 != (_OWORD *)v44);
    }
    if (v33 < v48)
    {
      v96 = ((v44 - *v43) >> 4) - v48;
      if (v96 < 1)
      {
        v99 = 255 - v96;
        v97 = &v43[-(v99 >> 8)];
        v98 = *v97 + 16 * ~(_BYTE)v99;
      }
      else
      {
        v97 = &v43[(unint64_t)v96 >> 8];
        v98 = *v97 + 16 * v96;
      }
      sub_22E909260(v97, v98, v89, v90, v43, v44, (uint64_t)&v109);
      v43 = v111;
      v44 = v112;
    }
    if (v28 == v31)
    {
      v108 = v29;
      v107 = v32;
      v104 = v43;
      v105 = v44;
    }
    else
    {
      v102 = *(_QWORD *)v31;
      v101 = (uint64_t *)(v31 - 8);
      v100 = v102;
      v103 = v32;
      v104 = v43;
      v105 = v44;
      while (1)
      {
        sub_22E909328(v100, v103, v104, v105, &v109);
        v104 = v110;
        v105 = (uint64_t)v111;
        if (v101 == (uint64_t *)v28)
          break;
        v106 = *v101--;
        v100 = v106;
        v103 = v106 + 4096;
      }
      v107 = *(_QWORD *)v28 + 4096;
      v108 = v29;
    }
    sub_22E909328(v108, v107, v104, v105, &v109);
  }
LABEL_5:
  sub_22E78E5D4(a1 + 280);
  v9 = *(void **)(a1 + 8);
  if (v9 != (void *)(a1 + 24))
    free(v9);
  return a1;
}

uint64_t sub_22EE667EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 155; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 155);
  return result;
}

unint64_t sub_22EE6684C(unint64_t **a1)
{
  unint64_t result;

  result = sub_22EE0C33C((uint64_t *)a1[1], *a1[2]);
  **a1 = result;
  return result;
}

uint64_t sub_22EE66880(uint64_t a1)
{
  uint64_t result;

  result = sub_22EE0CEDC(*(_QWORD *)(a1 + 8), **(unsigned __int8 ***)(a1 + 16), *(_QWORD *)(a1 + 24), 0);
  **(_QWORD **)a1 = result;
  return result;
}

void sub_22EE668B8(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v4 = **a1;
  v6[0] = sub_22E8FCD8C(v3[11], v3[10]);
  v6[1] = v5;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v4 + 96))(v4, &v7, v6, 1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

uint64_t sub_22EE66964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v3 = a3;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (!a2 || v5 != 42)
  {
    v10 = *(_DWORD *)(a3 + 28);
    v11 = v10 & 0x7F;
    if (a2 && v5 == 74)
    {
      switch(v11)
      {
        case 45:
          v7 = *(_QWORD *)(a3 + 48);
          v8 = 1;
          break;
        case 13:
          v7 = sub_22F3684DC(a1, a3);
          v8 = 0;
          break;
        case 74:
          v8 = *(_DWORD *)(a3 + 60) != 0;
          v7 = sub_22F3684DC(a1, a3);
          break;
        default:
          return 0;
      }
      v9 = *(_DWORD *)(a2 + 60);
      goto LABEL_29;
    }
    if (v5 != v11)
      return 0;
    if ((v5 - 38) >= 0xFFFFFFFD)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      do
      {
        v19 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
        v15 = v18 == v19;
        if (v18 == v19)
          break;
        v20 = *(_QWORD *)(v19 + 136);
        if ((v20 & 4) == 0)
          break;
        v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if (!v21)
          break;
        v3 = *v21 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v3);
      return v15;
    }
    v12 = v10 & 0x7E;
    if ((v12 - 58) >= 0xFFFFFFFA)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      do
      {
        v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
        v15 = v22 == v23;
        if (v22 == v23)
          break;
        v3 = sub_22EFBF824(v23);
      }
      while (v3);
      return v15;
    }
    if (v5 == 33)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      do
      {
        v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
        v15 = v13 == v14;
        if (v13 == v14)
          break;
        v16 = *(_QWORD **)(v14 + 144);
        if (!v16)
          break;
        v3 = *v16 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v3);
      return v15;
    }
    if (v5 == 64 || (v5 - 67) < 0xFFFFFFF9)
    {
      if (v5 != 37)
      {
        if (v5 == 29)
          goto LABEL_66;
        if (v5 == 28)
        {
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          do
          {
            v30 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
            v15 = v29 == v30;
            if (v29 == v30)
              break;
            v3 = *(_QWORD *)sub_22EFE9368(v30) & 0xFFFFFFFFFFFFFFF8;
          }
          while (v3);
          return v15;
        }
        goto LABEL_74;
      }
    }
    else
    {
      v24 = *(_QWORD *)(a3 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if ((v24 & 4) != 0)
        v25 = *(_QWORD *)v25;
      if ((*(_WORD *)(v25 + 8) & 0x7Eu) - 34 <= 3)
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        do
        {
          v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
          v15 = v26 == v27;
          if (v26 == v27)
            break;
          v28 = (_QWORD *)sub_22EFBE104(v27);
          if (!v28)
            break;
          v3 = *v28 & 0xFFFFFFFFFFFFFFF8;
        }
        while (v3);
        return v15;
      }
      if (v5 != 37)
      {
        if (v5 == 29)
        {
LABEL_66:
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          do
          {
            v32 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
            v15 = v31 == v32;
            if (v31 == v32)
              break;
            v3 = *(_QWORD *)sub_22EFE9368(v32) & 0xFFFFFFFFFFFFFFF8;
          }
          while (v3);
          return v15;
        }
LABEL_74:
        if ((v5 - 52) >= 0xFFFFFFFD)
        {
          if (!*(_QWORD *)(a3 + 40))
          {
            v7 = sub_22F3686A8(a1, a3);
            if (!v7)
              return 0;
            goto LABEL_85;
          }
        }
        else if (v5 == 13)
        {
          v7 = sub_22F3684DC(a1, a3);
          if (!v7)
            return 0;
          goto LABEL_85;
        }
        if (v12 != 46)
        {
          v35 = *(_QWORD *)(a2 + 40);
          if (v35)
            return v35 == *(_QWORD *)(a3 + 40);
          return 0;
        }
        v7 = sub_22F368610(a1, a3);
        if (!v7)
          return 0;
LABEL_85:
        if (v7 == a2)
          return 1;
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
        return v37 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      }
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    do
    {
      v34 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
      v15 = v33 == v34;
      if (v33 == v34)
        break;
      v3 = *(_QWORD *)(*(_QWORD *)(v34 + 104) + 200) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v3);
    return v15;
  }
  v6 = *(_DWORD *)(a3 + 28) & 0x7F;
  if (a3 && v6 == 42)
  {
    v8 = *(_DWORD *)(a3 + 64) != 0;
    v7 = sub_22F3684DC(a1, a3);
    goto LABEL_8;
  }
  if (a3 && v6 == 45)
  {
    v7 = *(_QWORD *)(a3 + 48);
    v8 = 1;
LABEL_8:
    v9 = *(_DWORD *)(a2 + 64);
LABEL_29:
    if (v8 != (v9 == 0) && v7 != 0)
      goto LABEL_85;
    return 0;
  }
  v15 = 0;
  if (a3 && v6 == 13)
  {
    v7 = sub_22F3684DC(a1, a3);
    v8 = 0;
    goto LABEL_8;
  }
  return v15;
}

uint64_t sub_22EE66D9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;

  sub_22EE44C50(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2, 1, *(unsigned __int8 *)(a1 + 24), 1);
  result = sub_22EFBF86C(a2, &v4, 0);
  if ((_DWORD)result)
    *(_QWORD *)(a2 + 80) &= ~0x100000000uLL;
  return result;
}

uint64_t sub_22EE66E00(uint64_t a1, int a2, int a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52[12];
  unsigned int v53[8];
  _BYTE v54[56];
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[32];
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  char *v64;
  uint64_t v65;
  _BYTE v66[16];
  char *v67;
  uint64_t v68;
  _QWORD v69[10];

  v69[8] = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 0;
  v7 = a5;
  v67 = (char *)v69;
  v68 = 0x400000000;
  v12 = sub_22F3091B0(a1);
  if (!v12)
    goto LABEL_29;
  v13 = v12;
  v49 = a3;
  v14 = a4;
  do
  {
    v15 = *(unsigned int *)(v13 + 1528);
    if (!(_DWORD)v15)
      goto LABEL_26;
    v16 = *(uint64_t **)(v13 + 1520);
    v17 = 8 * v15;
    while (1)
    {
      v18 = *v16;
      v19 = *(_QWORD *)v14;
      v20 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)v14 & 4) != 0 || !v20)
        break;
      if (v18 && (*(_DWORD *)(v18 + 28) & 0x7F) == 0x26 && *(_QWORD *)(v18 + 48) == v20)
        goto LABEL_23;
LABEL_20:
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_26;
    }
    if (v18)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (v21)
      goto LABEL_20;
    if (v18 == v20)
      goto LABEL_23;
    v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 32))(v20);
    if (v22 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18))
      goto LABEL_20;
    v19 = *(_QWORD *)v14;
LABEL_23:
    v23 = *((_QWORD *)v14 + 1);
    v24 = v68;
    if (v68 >= (unint64_t)HIDWORD(v68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v68;
    }
    v25 = &v67[16 * v24];
    *(_QWORD *)v25 = v19;
    *((_QWORD *)v25 + 1) = v23;
    LODWORD(v68) = v68 + 1;
LABEL_26:
    v14 += 16;
  }
  while (v14 != &a4[16 * v7]);
  if ((_DWORD)v68)
  {
    a4 = v67;
    LODWORD(v7) = v68;
    a3 = v49;
    goto LABEL_29;
  }
  v43 = *(_DWORD *)(a1 + 1904);
  a3 = v49;
  while (2)
  {
    if (v43)
    {
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * --v43);
      v45 = *(_QWORD *)(v44 + 360);
      if (!v45)
      {
LABEL_72:
        if (v44 == v13)
          goto LABEL_73;
        continue;
      }
      v46 = (unsigned __int8 *)(*(_QWORD *)(v44 + 352) + 1);
      v47 = 2 * v45;
      while (1)
      {
        v48 = *v46;
        v46 += 2;
        if (v48)
          break;
        v47 -= 2;
        if (!v47)
          goto LABEL_72;
      }
LABEL_29:
      v64 = v66;
      v65 = 0x400000000;
      v61 = v63;
      v62 = 0x400000000;
      v56 = v60;
      v57 = v60;
      v58 = 4;
      v59 = 0;
      v7 = v7;
      if ((_DWORD)v7)
      {
        v26 = a4 + 8;
        while (1)
        {
          v27 = *((_QWORD *)v26 - 1);
          v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
          if ((v27 & 4) != 0 || !v28)
            goto LABEL_35;
          if (v28[1] != (v27 & 0xFFFFFFFFFFFFFFF0))
            break;
LABEL_41:
          v33 = *v26;
          if (*v26)
          {
            v34 = v65;
            if (v65 >= (unint64_t)HIDWORD(v65))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v34 = v65;
            }
            *(_DWORD *)&v64[4 * v34] = v33;
            LODWORD(v65) = v65 + 1;
          }
          v26 += 4;
          if (!--v7)
            goto LABEL_46;
        }
        v28 = (_QWORD *)v28[4];
LABEL_35:
        v29 = v28[5];
        if ((v29 & 7) == 0)
        {
          v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          if ((v29 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            sub_22E3BA850((uint64_t)&v56, (const void *)(v29 & 0xFFFFFFFFFFFFFFF8));
            if (v31)
            {
              v32 = v62;
              if (v62 >= (unint64_t)HIDWORD(v62))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v32 = v62;
              }
              *((_QWORD *)v61 + v32) = v30;
              LODWORD(v62) = v62 + 1;
            }
          }
        }
        goto LABEL_41;
      }
LABEL_46:
      sub_22E8FCA40((_QWORD *)a1, a2, 0x13C2u, 0, (uint64_t)v52);
      v51 = a3;
      v35 = sub_22E8900C4((uint64_t)v52, &v51);
      v50 = v62;
      v36 = sub_22E8900C4(v35, &v50);
      v37 = *(_OWORD *)(v36 + 9);
      *(_OWORD *)v53 = *(_OWORD *)v36;
      *(_OWORD *)((char *)&v53[2] + 1) = v37;
      v54[0] = 0;
      v54[48] = 0;
      if (*(_BYTE *)(v36 + 80))
        sub_22E907424((uint64_t)v54, v36 + 32);
      v55 = *(_QWORD *)(v36 + 88);
      sub_22E903BEC((unsigned int *)v52);
      if (v62 >= 2)
        v38 = 2;
      else
        v38 = v62;
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 8 * v38;
        do
        {
          sub_22E8BAE44((uint64_t)v53, (uint64_t *)((char *)v61 + v39));
          v39 += 8;
        }
        while (v40 != v39);
      }
      if ((_DWORD)v65)
      {
        v41 = 0;
        v42 = 4 * v65;
        do
        {
          LODWORD(v52[0]) = *(_DWORD *)&v64[v41];
          HIDWORD(v52[0]) = v52[0];
          sub_22E8906A0((uint64_t)v53, v52);
          v41 += 4;
        }
        while (v42 != v41);
      }
      sub_22E903BEC(v53);
      if (v57 != v56)
        free(v57);
      if (v61 != v63)
        free(v61);
      if (v64 != v66)
        free(v64);
      v5 = 1;
    }
    else
    {
LABEL_73:
      v5 = 0;
      *(_BYTE *)(v13 + 1516) = 1;
    }
    break;
  }
  if (v67 != (char *)v69)
    free(v67);
  return v5;
}

uint64_t sub_22EE67290(uint64_t a1, int a2, unint64_t *a3, int a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  char *v10;
  void **v12;
  char v13;
  int v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if ((*(_BYTE *)(*(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
    return 0;
  v15 = v17;
  v16 = 0x200000000;
  v12 = &v15;
  v13 = 0;
  v14 = -1;
  if (v5 >= 0x10)
  {
    sub_22EE74F64((uint64_t)&v12, v5, (uint64_t)(a3 + 1));
    v10 = (char *)v15;
    v9 = v16;
  }
  else
  {
    v9 = 0;
    v10 = (char *)v17;
  }
  v6 = sub_22EE66E00(a1, a2, a4, v10, v9);
  if (v15 != v17)
    free(v15);
  return v6;
}

uint64_t sub_22EE67384(uint64_t a1, unint64_t a2, int a3)
{
  int v7;
  unsigned int v8;
  void **v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 1) & 0x20) == 0)
    return 0;
  v12 = v14;
  v13 = 0x200000000;
  v9 = &v12;
  v10 = 0;
  v11 = -1;
  sub_22EE6745C((uint64_t)&v9, a2);
  sub_22F0D5A50(a2);
  v8 = sub_22EE66E00(a1, v7, a3, (char *)v12, v13);
  if (v12 != v14)
    free(v12);
  return v8;
}

uint64_t sub_22EE6745C(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v12;
  _QWORD v13[10];

  v13[8] = *MEMORY[0x24BDAC8D0];
  if (a2
    && (*(unsigned __int8 *)a2 - 102 <= 0x84 && (*(_BYTE *)(a2 + 1) & 0x20) != 0 || *(_BYTE *)(a1 + 8)))
  {
    v13[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v12 = 0x800000001;
    v2 = 1;
    do
    {
      v3 = v2;
      v4 = &v13[v2];
      v5 = *(v4 - 1);
      if ((v5 & 4) != 0)
      {
        v2 = v3 - 1;
        LODWORD(v12) = v3 - 1;
      }
      else
      {
        *(v4 - 1) = v5 | 4;
        v6 = *(unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFF8) - 1;
        if (v6 <= 0xEB)
          __asm { BR              X9 }
        v2 = v12;
        if ((_DWORD)v3 != (_DWORD)v12)
        {
          v7 = &v13[v12 - 1];
          if (&v13[v3] < v7)
          {
            v8 = &v13[v3 + 1];
            do
            {
              v9 = *(v8 - 1);
              *(v8 - 1) = *v7;
              *v7-- = v9;
            }
            while (v8++ < v7);
          }
        }
      }
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_22EE72930(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  __int128 *v6;
  uint64_t v7;
  void **v8;
  unsigned int *v9;
  uint64_t v10;
  _BYTE *v11;
  __int128 v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int128 *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 1) & 0x20) == 0)
    return 0;
  v19 = (__int128 *)v21;
  v20 = 0x200000000;
  v13 = (void **)&v19;
  LOBYTE(v14) = 0;
  HIDWORD(v14) = -1;
  sub_22EE6745C((uint64_t)&v13, a2);
  sub_22F34B190((uint64_t)&v13, (const void **)(a2 + 40), (const void **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16)));
  v16 = v18;
  v17 = 0x200000000;
  if ((_DWORD)v20)
  {
    v6 = v19;
    v7 = 16 * v20;
    do
    {
      v12 = *v6;
      v8 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v13, (void *)(v12 & ((uint64_t)((_QWORD)v12 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8));
      if (v14 == v13)
        v9 = (unsigned int *)&v15 + 1;
      else
        v9 = (unsigned int *)&v15;
      if (v8 != &v14[*v9])
      {
        v10 = v17;
        if (v17 >= (unint64_t)HIDWORD(v17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v17;
        }
        *((_OWORD *)v16 + v10) = v12;
        LODWORD(v17) = v17 + 1;
      }
      ++v6;
      v7 -= 16;
    }
    while (v7);
    v11 = v16;
    if ((_DWORD)v17)
    {
      v2 = sub_22EE66E00(a1, *(_DWORD *)(a2 + 4), 21, (char *)v16, v17);
      v11 = v16;
    }
    else
    {
      v2 = 0;
    }
    if (v11 != v18)
      free(v11);
  }
  else
  {
    v2 = 0;
  }
  if (v14 != v13)
    free(v14);
  if (v19 != (__int128 *)v21)
    free(v19);
  return v2;
}

uint64_t sub_22EE72B18(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v7;
  void **v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4 || (sub_22F0AAC5C(v4) & 1) == 0)
    return 0;
  v12 = v14;
  v13 = 0x200000000;
  v9 = &v12;
  v10 = 0;
  v11 = -1;
  sub_22EE72BF4((uint64_t)&v9, *(_QWORD *)(a2 + 8));
  v7 = sub_22EE66E00(a1, *(_DWORD *)a2, a3, (char *)v12, v13);
  if (v12 != v14)
    free(v12);
  return v7;
}

uint64_t sub_22EE72BF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EE72BF4(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EE72E1C(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EE72C58(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  char v17;
  int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *a2 & 7;
  v8 = v7;
  if ((_DWORD)v7 == 7)
  {
    v9 = *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      v9 = 3;
    v8 = v9 | 8;
  }
  if (v8 > 0xB)
    goto LABEL_15;
  v10 = 1 << v8;
  if ((v10 & 0xF47) != 0)
    return 0;
  if ((v10 & 0x38) == 0)
  {
LABEL_15:
    v19 = v21;
    v20 = 0x200000000;
    v16 = &v19;
    v17 = 0;
    v18 = -1;
    if ((v7 - 3) > 2)
    {
      v15 = 0;
LABEL_19:
      sub_22EE72E1C((uint64_t)&v16, v15);
      v11 = sub_22EE66E00(a1, *((_DWORD *)a2 + 2), a3, (char *)v19, v20);
      if (v19 != v21)
        free(v19);
      return v11;
    }
    v14 = v6 & 0xFFFFFFFFFFFFFFF8;
LABEL_17:
    v15 = *(_QWORD *)(v14 + 8);
    goto LABEL_19;
  }
  if ((v7 - 3) > 2 || (v13 = (unint64_t *)a2[2]) == 0)
  {
    v14 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
      return 0;
    v19 = v21;
    v20 = 0x200000000;
    v16 = &v19;
    v17 = 0;
    v18 = -1;
    goto LABEL_17;
  }
  return sub_22EE67290(a1, *((_DWORD *)a2 + 2), v13, a3);
}

uint64_t sub_22EE72E1C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  uint64_t v19;
  uint64_t j;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _DWORD v42[2];
  uint64_t v43;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    if ((v5 & 0x100) != 0 || *(_BYTE *)(a1 + 8))
    {
      result = 1;
      switch(*(_DWORD *)(v4 + 16))
      {
        case 0u:
        case 1u:
        case 4u:
        case 6u:
        case 7u:
        case 8u:
        case 0xAu:
        case 0xCu:
        case 0x1Du:
        case 0x20u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
          goto LABEL_7;
        case 2u:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 19) & 2) == 0)
            return 1;
          v14 = *(_QWORD *)(v4 + 56);
          if (!v14)
            return 1;
          goto LABEL_51;
        case 3u:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v14 = *(_QWORD *)(v4 + 48);
          if (v14)
            goto LABEL_51;
          return 1;
        case 5u:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v13 = *(_QWORD *)(v4 + 40);
          return sub_22EE6745C(a1, v13);
        case 0xDu:
        case 0x30u:
          v13 = *(_QWORD *)(v4 + 24);
          return sub_22EE6745C(a1, v13);
        case 0xEu:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 24));
          if (!(_DWORD)result)
            return result;
          v15 = *(_QWORD *)(v4 + 40);
          if (!v15)
            return 1;
          if ((sub_22EFC78D8(*(_QWORD *)(v4 + 40)) & 1) == 0)
          {
            result = sub_22EE757EC(a1, v15);
            if (!(_DWORD)result)
              return result;
          }
          v16 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v16)
            return 1;
          for (i = v4 + 48; ; i += 24)
          {
            v18 = *(_DWORD *)i;
            if (*(_DWORD *)i == 1)
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
                goto LABEL_66;
            }
            else if (v18 == 7)
            {
              if (**(unsigned __int8 **)(i + 8) != 213)
                goto LABEL_66;
            }
            else if (((1 << v18) & 0x13D) != 0)
            {
LABEL_66:
              result = sub_22EE7C060(a1, i);
              if (!(_DWORD)result)
                return result;
            }
            result = 1;
            if (!--v16)
              return result;
          }
        case 0xFu:
          result = sub_22EE733F4(a1, *(_QWORD *)(v4 + 40));
          if ((_DWORD)result)
            goto LABEL_21;
          return result;
        case 0x10u:
          v7 = *(_QWORD *)(v4 + 40);
          goto LABEL_24;
        case 0x11u:
          v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
          return sub_22EE6745C(a1, v13);
        case 0x12u:
          return sub_22EE72BF4(a1, *(_QWORD *)(v4 + 32));
        case 0x13u:
          v7 = *(_QWORD *)(v4 + 40);
          if (!v7)
            goto LABEL_25;
LABEL_24:
          result = sub_22EE6745C(a1, v7);
          if (!(_DWORD)result)
            return result;
LABEL_25:
          v6 = (unint64_t *)(v4 + 48);
          goto LABEL_8;
        case 0x14u:
          result = sub_22EE72BF4(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v19 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v19)
            return 1;
          for (j = v4 + 48; ; j += 24)
          {
            v21 = *(_DWORD *)j;
            if (*(_DWORD *)j == 1)
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
                goto LABEL_82;
            }
            else if (v21 == 7)
            {
              if (**(unsigned __int8 **)(j + 8) != 213)
                goto LABEL_82;
            }
            else if (((1 << v21) & 0x13D) != 0)
            {
LABEL_82:
              result = sub_22EE7C060(a1, j);
              if (!(_DWORD)result)
                return result;
            }
            result = 1;
            if (!--v19)
              return result;
          }
        case 0x15u:
          v8 = *(_QWORD *)(v4 + 48);
          if (v8)
          {
            result = sub_22EE6745C(a1, v8);
            if (!(_DWORD)result)
              return result;
          }
          goto LABEL_33;
        case 0x16u:
          goto LABEL_36;
        case 0x17u:
          v9 = *(_QWORD *)(v4 + 64);
          if (!v9)
            goto LABEL_7;
          goto LABEL_37;
        case 0x18u:
          v10 = *(_QWORD *)(v4 + 32);
          if (v10)
          {
            result = sub_22EE72BF4(a1, v10);
            if (!(_DWORD)result)
              return result;
          }
LABEL_33:
          v6 = (unint64_t *)(v4 + 40);
          goto LABEL_8;
        case 0x19u:
        case 0x1Cu:
        case 0x31u:
LABEL_21:
          v6 = (unint64_t *)(v4 + 24);
          goto LABEL_8;
        case 0x1Au:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 24));
          if (!(_DWORD)result)
            return result;
          v22 = *(_QWORD *)(v4 + 16);
          v23 = (unsigned __int16)(v22 >> 38);
          if (!(unsigned __int16)(v22 >> 38))
            goto LABEL_93;
          v24 = 8 * v23;
          v25 = (_QWORD *)(v4 + 40);
          do
          {
            if ((sub_22EE72E1C(a1, *v25) & 1) == 0)
              return 0;
            ++v25;
            v24 -= 8;
          }
          while (v24);
          v22 = *(_QWORD *)(v4 + 16);
          v23 = (unsigned __int16)(v22 >> 38);
LABEL_93:
          if ((v22 & 0x3C0000000000000) == 0x80000000000000)
          {
            v26 = (_DWORD *)((v4 + 40 + 8 * v23 + 4 * ((v22 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
            v29 = *v26;
            v28 = v26 + 2;
            v27 = v29;
            if (v29)
            {
              v30 = 8 * v27;
              while ((sub_22EE72E1C(a1, *v28) & 1) != 0)
              {
                ++v28;
                v30 -= 8;
                if (!v30)
                  goto LABEL_98;
              }
              return 0;
            }
          }
LABEL_98:
          v31 = sub_22F257D3C(v4);
          if (v31)
          {
            v14 = v31;
LABEL_51:
            result = sub_22EE6745C(a1, v14);
            if (!(_DWORD)result)
              return result;
          }
          return 1;
        case 0x1Eu:
          v11 = *(_QWORD *)(v4 + 48);
          if (v11)
          {
            result = sub_22EE6745C(a1, v11);
            if (!(_DWORD)result)
              return result;
          }
LABEL_36:
          v9 = *(_QWORD *)(v4 + 56);
          if (!v9)
            goto LABEL_7;
LABEL_37:
          result = sub_22EE6745C(a1, v9);
          if (!(_DWORD)result)
            return result;
LABEL_7:
          v6 = (unint64_t *)(v4 + 32);
LABEL_8:
          a2 = *v6;
          if (*v6 < 0x10)
            return 1;
          continue;
        case 0x1Fu:
          v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
          goto LABEL_42;
        case 0x21u:
          v32 = *(_QWORD *)(v4 + 24);
          if (*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) != v4)
          {
            result = sub_22EE72E1C(a1, v32);
            if (!(_DWORD)result)
              return result;
          }
          v33 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
          if (!v33)
            return 1;
          v34 = (uint64_t *)(v4 + 48);
          v35 = 8 * v33 - 8;
          do
          {
            v36 = *v34++;
            result = sub_22EE72E1C(a1, v36);
            if ((_DWORD)result)
              v37 = v35 == 0;
            else
              v37 = 1;
            v35 -= 8;
          }
          while (!v37);
          return result;
        case 0x28u:
          while ((v5 & 0x100000) != 0)
          {
            v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v4)
            {
              v5 = *(_DWORD *)(v4 + 16);
              if ((v5 & 0xFE) == 0x28)
                continue;
            }
            v4 = sub_22F10CF48(v4);
            v5 = *(_DWORD *)(v4 + 16);
          }
          goto LABEL_7;
        case 0x29u:
          while ((v5 & 0x100000) != 0)
          {
            v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v4)
            {
              v5 = *(_DWORD *)(v4 + 16);
              if ((v5 & 0xFE) == 0x28)
                continue;
            }
            v4 = sub_22F10CF48(v4);
            v5 = *(_DWORD *)(v4 + 16);
          }
          goto LABEL_7;
        case 0x2Au:
          v38 = *(_DWORD *)(v4 + 20);
          v43 = *(_QWORD *)(v4 + 40);
          v42[0] = 8;
          v42[1] = v38;
          return sub_22EE7C060(a1, (uint64_t)v42);
        case 0x2Bu:
          v6 = (unint64_t *)(v4 + 8);
          goto LABEL_8;
        case 0x2Eu:
          result = sub_22EE733F4(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v39 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v39)
            return 1;
          v40 = v4 + 40;
          break;
        case 0x2Fu:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 33) & 0x80) == 0)
            return result;
          sub_22EE7BD8C((_DWORD *)a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), 0);
          return 1;
        case 0x33u:
          v12 = *(_QWORD *)(v4 + 24);
LABEL_42:
          result = sub_22EE72E1C(a1, v12);
          if (!(_DWORD)result)
            return result;
          goto LABEL_7;
        default:
          return result;
      }
      while (1)
      {
        v41 = *(_DWORD *)v40;
        if (*(_DWORD *)v40 == 1)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
            goto LABEL_119;
        }
        else if (v41 == 7)
        {
          if (**(unsigned __int8 **)(v40 + 8) != 213)
            goto LABEL_119;
        }
        else if (((1 << v41) & 0x13D) != 0)
        {
LABEL_119:
          result = sub_22EE7C060(a1, v40);
          if (!(_DWORD)result)
            return result;
        }
        v40 += 24;
        result = 1;
        if (!--v39)
          return result;
      }
    }
    return 1;
  }
}

uint64_t sub_22EE733F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = a2;
  v4 = sub_22F0F08CC(&v7);
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) == 0x20 && *(_BYTE *)(v4 + 80))
    sub_22EE7BE24(a1, v4, 0);
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 6 && v5)
    return (sub_22EE72BF4(a1, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0;
  if ((a2 & 6) != 4)
    return 1;
  if (!v5)
    return 1;
  result = sub_22EE72BF4(a1, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EE734A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v8;
  void **v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)a2 || (sub_22F0EEB00(a2) & 1) == 0)
    return 0;
  v12 = v14;
  v13 = 0x200000000;
  v9 = &v12;
  v10 = 0;
  v11 = -1;
  sub_22EE735B0((uint64_t)&v9, (unsigned int *)a2);
  if ((*(_DWORD *)a2 - 5) > 1)
    sub_22F0EFE08(a2);
  else
    v8 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v6 = sub_22EE66E00(a1, v8, a3, (char *)v12, v13);
  if (v12 != v14)
    free(v12);
  return v6;
}

uint64_t sub_22EE735B0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a2;
  if ((_DWORD)v3 != 1)
    __asm { BR              X10 }
  v4 = *((_QWORD *)a2 + 1);
  if (*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
    return 1;
  v6 = (unint64_t *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v6)
    return sub_22EE72E1C(a1, v4);
  v9 = *v6;
  v8 = (uint64_t)(v6 + 1);
  v7 = v9;
  if ((v9 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0) && !*(_BYTE *)(a1 + 8))
    return 1;
  return sub_22EE74F64(a1, v7, v8);
}

uint64_t sub_22EE736B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v2 = (uint64_t *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFFCLL);
  if (*v2 && !sub_22EE7384C(v0, *v2, v2[1]))
    JUMPOUT(0x22EE735F4);
  return sub_22EE733F4(v0, *(_QWORD *)(v1 + 8));
}

void sub_22EE736F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(unsigned int *)(v1 + 4);
  if (!(_DWORD)v2)
LABEL_13:
    JUMPOUT(0x22EE735F4);
  v3 = *(_QWORD *)(v1 + 8);
  while (1)
  {
    v4 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_8;
    }
    else if (v4 == 7)
    {
      if (**(unsigned __int8 **)(v3 + 8) != 213)
        goto LABEL_8;
    }
    else if (((1 << v4) & 0x13D) != 0)
    {
LABEL_8:
      if (!sub_22EE7C060(v0, v3))
        goto LABEL_13;
    }
    v3 += 24;
    if (!--v2)
      goto LABEL_13;
  }
}

uint64_t sub_22EE7377C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  int v7;

  v5 = a3;
  v6 = 0;
  v7 = -1;
  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
      return result;
    return sub_22EE7C060((uint64_t)&v5, a2);
  }
  if (v3 != 7)
  {
    if (((1 << v3) & 0x13D) == 0)
      return result;
    return sub_22EE7C060((uint64_t)&v5, a2);
  }
  if (**(unsigned __int8 **)(a2 + 8) != 213)
    return sub_22EE7C060((uint64_t)&v5, a2);
  return result;
}

uint64_t sub_22EE73804(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  int v7;

  v5 = a4;
  v6 = 0;
  v7 = -1;
  if (a2 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
    return sub_22EE74F64((uint64_t)&v5, a2, a3);
  return result;
}

uint64_t sub_22EE7384C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EE7384C(a1, v5), (_DWORD)result))
  {
    if (!*(_QWORD *)(a2 + 16) || (*(_BYTE *)(a2 + 8) & 4) == 0)
      return 1;
    v7 = sub_22F0AB4E0((uint64_t)v9);
    if ((v7 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0) && !*(_BYTE *)(a1 + 8))
      return 1;
    result = sub_22EE74F64(a1, v7, v8);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EE738E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  unint64_t v13;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (unint64_t *)a2[2];
      if (v6)
      {
        if ((v9 = *v6, v8 = v6 + 1, v7 = v9, v9 >= 0x10)
          && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
          || *(_BYTE *)(a1 + 8))
        {
          if ((sub_22EE74F64(a1, v7, v8) & 1) == 0)
            return 0;
        }
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_18;
  v11 = v2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_DWORD *)v11;
  if (*(_DWORD *)v11 >= 3u)
    v12 = 3;
  if (v12)
LABEL_18:
    v13 = 0;
  else
    v13 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EE733F4(a1, v13);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EE739C0(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12[24];

  if (!a2)
    return 1;
  if ((*(_BYTE *)(a2 + 1) & 0x20) != 0)
  {
    v8 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
    return sub_22EDA4684(v8, *(_QWORD *)(a1[11] + 16832), (_DWORD *)a2, a3, a4);
  }
  else
  {
    sub_22E8FCA40(a1, a3, 0x1191u, 0, (uint64_t)v12);
    sub_22F0D4E74(a2);
    v11 = v10;
    sub_22E8906A0((uint64_t)v12, &v11);
    sub_22E903BEC(v12);
    sub_22EBBCB14((uint64_t)a1, (_DWORD *)a2, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)v12);
    return 1;
  }
}

uint64_t sub_22EE73A98(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _BYTE *a7, _BYTE *a8, uint64_t a9)
{
  uint64_t v12;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  _DWORD v60[2];
  uint64_t v61;
  unsigned int v62[25];
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;

  *a7 = 1;
  *a8 = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v65) = 0;
  BYTE4(v65) = 0;
  if (!a5)
    return 0;
  v12 = a4;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a4 + 16 * a5;
  while (2)
  {
    v18 = *((_DWORD *)a6 + 20);
    v19 = v18 + *((_DWORD *)a6 + 2);
    v20 = *a6;
    while (1)
    {
      v21 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)v12 & 4) != 0 || !v21)
        break;
      v22 = *(_QWORD *)(v21 + 8);
      if (v22 == (*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF0))
      {
        v24 = 0;
      }
      else
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 40);
        if ((v23 & 7) != 0)
          v24 = 0;
        else
          v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      }
      v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v26 = v25 & 0x7FFF;
      v27 = HIWORD(v25);
LABEL_21:
      v64 = v24;
      v31 = v18 > v26 || v26 >= v19;
      if (v31
        || (v32 = v19 + ~v26, *(_QWORD *)(v20 + 16 * v32 + 8) <= (unint64_t)v27)
        || (v33 = (_DWORD *)(*(_QWORD *)(v20 + 16 * v32) + 24 * v27), !*v33))
      {
        *a7 = 0;
        goto LABEL_59;
      }
      v34 = v33[1];
      v63 = v34;
      v35 = a1[1503];
      if (!v35)
        goto LABEL_55;
      while (1)
      {
        v36 = *(_QWORD *)(v35 + 120);
        if (v36)
          break;
        if (*(_BYTE *)(v35 + 113))
        {
          v35 = *(_QWORD *)(v35 + 104);
          if (v35)
            continue;
        }
        goto LABEL_55;
      }
      if ((*(_DWORD *)(v36 + 28) & 0x7F) == 0x3B)
      {
        v40 = *(_DWORD *)(v36 + 68);
LABEL_37:
        v38 = v40 & 0xFFFFF;
        v39 = v40 >> 20;
        goto LABEL_38;
      }
      if ((*(_DWORD *)(v36 + 28) & 0x7F) != 0x26)
      {
        v40 = *(_DWORD *)(v36 + 64);
        goto LABEL_37;
      }
      v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 48)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v38 = v37 & 0x7FFF;
      v39 = HIWORD(v37);
LABEL_38:
      if (v26 != v38 || v27 != v39)
        goto LABEL_55;
      *a8 = 1;
      if (!v16)
        BYTE4(v65) = 1;
      LODWORD(v65) = v34;
      v15 = *(_DWORD *)(v12 + 8);
      v12 += 16;
      v16 = 1;
      if (v12 == v17)
        goto LABEL_61;
    }
    v28 = *(_DWORD *)(v21 + 28) & 0x7F;
    if ((v28 - 60) >= 7)
    {
      if (v28 == 59)
      {
        v29 = *(_DWORD *)(v21 + 68);
      }
      else
      {
        if (v28 == 38)
        {
          v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 48)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 32) & 0x7FFF;
          v27 = HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 32));
          goto LABEL_18;
        }
        v29 = *(_DWORD *)(v21 + 64);
      }
      v26 = v29 & 0xFFFFF;
      v27 = v29 >> 20;
LABEL_18:
      v30 = *(_QWORD *)(v21 + 40);
      if ((v30 & 7) != 0)
        v24 = 0;
      else
        v24 = v30 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_21;
    }
    v57 = v16;
    v58 = a8;
    v59 = a2;
    v42 = *(_QWORD *)(v21 + 40);
    if ((v42 & 7) != 0)
      v24 = 0;
    else
      v24 = v42 & 0xFFFFFFFFFFFFFFF8;
    v64 = v24;
    v43 = (_QWORD *)sub_22EE12BE0(a1[1503], v21);
    if ((*v43 & 4) == 0)
    {
      *a7 = 0;
      a8 = v58;
      a2 = v59;
      v16 = v57;
      goto LABEL_59;
    }
    v34 = *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 8);
    v63 = v34;
    a8 = v58;
    a2 = v59;
    v16 = v57;
LABEL_55:
    if (*(_BYTE *)(a9 + 4))
    {
      if (v34 != *(_DWORD *)a9)
      {
        if ((v14 & 1) != 0)
        {
          sub_22E8FCA40(a1, a2, 0x118Du, 0, (uint64_t)v62);
          v50 = sub_22E8BAE44((uint64_t)v62, (uint64_t *)&v66);
          v51 = sub_22E8BAE44(v50, (uint64_t *)&v64);
          v52 = sub_22E89519C(v51, (unsigned int *)a9);
          v53 = sub_22E89519C(v52, &v63);
          LODWORD(v61) = v67;
          HIDWORD(v61) = v67;
          v48 = sub_22E8906A0(v53, &v61);
          v60[0] = *(_DWORD *)(v12 + 8);
          v60[1] = v60[0];
          v54 = (uint64_t *)v60;
LABEL_75:
          sub_22E8906A0(v48, v54);
          sub_22E903BEC(v62);
          return 1;
        }
        sub_22E8FCA40(a1, a2, 0x118Eu, 0, (uint64_t)v62);
        v55 = sub_22E8BAE44((uint64_t)v62, (uint64_t *)&v64);
        v56 = sub_22E89519C(v55, (unsigned int *)a9);
        v48 = sub_22E89519C(v56, &v63);
        LODWORD(v61) = *(_DWORD *)(v12 + 8);
        HIDWORD(v61) = v61;
LABEL_74:
        v54 = &v61;
        goto LABEL_75;
      }
    }
    else
    {
      *(_DWORD *)a9 = v34;
      v14 = 1;
      *(_BYTE *)(a9 + 4) = 1;
      v66 = v24;
      v67 = *(_DWORD *)(v12 + 8);
    }
LABEL_59:
    v12 += 16;
    if (v12 != v17)
      continue;
    break;
  }
  if (v16)
  {
LABEL_61:
    if (!*(_BYTE *)(a9 + 4) || *(_DWORD *)a9 >= v65)
    {
      result = 0;
      *(_QWORD *)a9 = v65;
      return result;
    }
    v44 = a1[1503];
    if (v44)
    {
      while (1)
      {
        v45 = *(_QWORD *)(v44 + 120);
        if (v45)
          break;
        if (*(_BYTE *)(v44 + 113))
        {
          v44 = *(_QWORD *)(v44 + 104);
          if (v44)
            continue;
        }
        goto LABEL_67;
      }
    }
    else
    {
LABEL_67:
      v45 = 0;
    }
    v64 = v45;
    sub_22E8FCA40(a1, a2, 0x118Fu, 0, (uint64_t)v62);
    v46 = sub_22E890024((uint64_t)v62, (uint64_t *)&v64);
    v47 = sub_22E89519C(v46, (unsigned int *)&v65);
    v48 = sub_22E89519C(v47, (unsigned int *)a9);
    LODWORD(v61) = v15;
    HIDWORD(v61) = v15;
    goto LABEL_74;
  }
  return 0;
}

uint64_t sub_22EE73EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v28;
  char v29;
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 32);
  v31 = v33;
  v32 = 0x200000000;
  v28 = &v31;
  v29 = 0;
  v30 = -1;
  sub_22EE72E1C((uint64_t)&v28, v5);
  if ((_DWORD)v32)
  {
    v6 = 0;
    v7 = 16 * v32;
    while (1)
    {
      v8 = *(_QWORD *)((char *)v31 + v6);
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) == 0 && v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        goto LABEL_6;
      }
      v14 = *(_DWORD *)(v9 + 28) & 0x7F;
      if ((v14 - 67) < 0xFFFFFFF9)
        break;
      v15 = *(_QWORD *)sub_22EE12BE0(*(_QWORD *)(a1 + 12024), v9);
      if ((v15 & 4) == 0)
        goto LABEL_25;
      v16 = (int *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_23:
      v6 += 16;
      if (v7 == v6)
      {
        v23 = *v16;
        v24 = v23 & 0xFFFFFF00;
        v25 = v23;
        v26 = 0x100000000;
        goto LABEL_26;
      }
    }
    if (v14 == 59)
    {
      v17 = *(_DWORD *)(v9 + 68);
    }
    else
    {
      if (v14 == 38)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_6:
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 32);
        v12 = v11 & 0x7FFF;
        v13 = HIWORD(v11);
LABEL_16:
        v18 = *(_DWORD *)(a3 + 80);
        v19 = v18 + *(_DWORD *)(a3 + 8);
        if (v18 > v12 || v12 >= v19)
          goto LABEL_25;
        v21 = v19 + ~v12;
        if (*(_QWORD *)(*(_QWORD *)a3 + 16 * v21 + 8) <= (unint64_t)v13)
          goto LABEL_25;
        v22 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16 * v21) + 24 * v13);
        if (!*v22)
          goto LABEL_25;
        v16 = v22 + 1;
        goto LABEL_23;
      }
      v17 = *(_DWORD *)(v9 + 64);
    }
    v12 = v17 & 0xFFFFF;
    v13 = v17 >> 20;
    goto LABEL_16;
  }
LABEL_25:
  v25 = 0;
  v26 = 0;
  v24 = 0;
LABEL_26:
  if (v31 != v33)
    free(v31);
  return v26 | v25 | v24;
}

BOOL sub_22EE740E0(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;

  v3 = *(_DWORD **)a2;
  v4 = (**(_DWORD **)a2 >> 12) & 0x3F;
  if (v4 <= 0x25)
  {
    if (((1 << v4) & 0x2130000000) != 0)
    {
      v5 = *((_QWORD *)v3 + 1);
      if (v5 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
        return 1;
    }
    else if (((1 << v4) & 0xC0000200) != 0)
    {
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 1) & 0x20) != 0)
          return 1;
      }
    }
  }
  v7 = *(unsigned int *)(a2 + 120);
  if (!(_DWORD)v7)
  {
LABEL_36:
    v23 = *(_QWORD *)(a2 + 1136);
    return v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0;
  }
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)(a2 + 112);
    v10 = *(_DWORD *)(v9 + 120 * v8);
    if (v10 == 5)
    {
      v12 = *(_QWORD *)(v9 + 120 * v8 + 48);
      if (v12 && (sub_22F0AAC5C(v12) & 1) != 0)
        return 1;
      goto LABEL_35;
    }
    if (v10 != 3)
    {
      if (v10 == 2)
      {
        v11 = *(_QWORD *)(v9 + 120 * v8 + 40);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 1) & 0x20) != 0)
            return 1;
        }
      }
      goto LABEL_35;
    }
    v13 = v9 + 120 * v8;
    v14 = *(unsigned int *)(v13 + 48);
    if ((_DWORD)v14)
      break;
LABEL_24:
    v18 = *(_WORD *)(v13 + 32);
    v16 = v13 + 32;
    v17 = v18;
    v19 = v18 >> 4;
    if (v19 == 2)
    {
      v20 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD **)(v9 + 120 * v8 + 96);
        while ((*(_BYTE *)(*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
        {
          v21 += 2;
          if (!--v20)
            goto LABEL_32;
        }
        return 1;
      }
    }
    else if ((v19 - 6) <= 2 && (*(_BYTE *)(*(_QWORD *)(v9 + 120 * v8 + 96) + 1) & 0x20) != 0)
    {
      return 1;
    }
LABEL_32:
    if ((v17 & 0x200) != 0)
    {
      v22 = *(_QWORD *)(v16 + 72);
      if (v22 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
        return 1;
    }
LABEL_35:
    if (++v8 == v7)
      goto LABEL_36;
  }
  v15 = *(_QWORD *)(v9 + 120 * v8 + 72) + 16;
  while ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
  {
    v15 += 32;
    if (!--v14)
      goto LABEL_24;
  }
  return 1;
}

uint64_t sub_22EE742C0(_QWORD *a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  void **v26;
  uint64_t v27;
  int v28;
  uint64_t (**v29)();
  int v30;
  char v31;
  uint64_t v32;
  _BYTE v33[11];
  unsigned int v34[4];
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  _QWORD v48[2];
  uint64_t v49;
  __int16 v50;
  int v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v39 = v41;
  v40 = 0x800000000;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = a1;
  v46 = a4;
  v47 = a5;
  sub_22EFC6D6C((uint64_t)v48, a4);
  v48[1] = 0;
  v49 = 0;
  v50 = 0;
  v51 = 257;
  v52 = 0;
  sub_22EC56024((uint64_t)&v38);
  sub_22EC63520((uint64_t)a1, (uint64_t)&v38, a2, 0, 0);
  if (v38 < 2)
  {
    v31 = 1;
    v30 = 16843009;
    memset(v33, 0, sizeof(v33));
    v32 = 0;
    v29 = &off_24FAB92D0;
    sub_22EC6AB20((uint64_t)a1, &v46, v49, a2, 0, (uint64_t)&v29, 1, 0, (uint64_t)v34, 0, 0, 1u);
    v12 = 0;
    if (*(_QWORD *)v34)
    {
      v27 = a1[11] + 2128;
      v28 = 4710;
      v19 = (void **)sub_22E3B8AAC(v27);
      v26 = v19;
      v20 = *(unsigned __int8 *)v19;
      *((_BYTE *)v19 + v20 + 1) = 5;
      *(_BYTE *)v19 = v20 + 1;
      v19[v20 + 2] = (void *)a4;
      v21 = a1[11] + 2128;
      v23 = 0;
      v24 = v21;
      v25 = 5978;
      sub_22EC6BF44((uint64_t)a1, (uint64_t)v34, (uint64_t)&v26, (uint64_t)&v23, 1);
      if (v23 && v24)
        sub_22E3BB10C(v24, v23);
      if (v26 && v27)
        sub_22E3BB10C(v27, (unint64_t)v26);
      v12 = sub_22F2E6D78((uint64_t)v34);
    }
    v26 = (void **)&v37;
    sub_22E8D19C8(&v26);
    if (v35 != &v36)
      free(v35);
  }
  else
  {
    if ((_DWORD)v38 == 5)
    {
      sub_22EC64D18(a1, (uint64_t)&v38);
      goto LABEL_17;
    }
    if ((_DWORD)v38 != 2)
      goto LABEL_15;
    v12 = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = *(_DWORD *)(v12 + 28) & 0x7F;
    v14 = v13 > 0x2F;
    v15 = (1 << v13) & 0xC00000060000;
    if (v14 || v15 == 0)
    {
LABEL_13:
      if ((sub_22EFC78D8(v12) & 1) != 0)
      {
        sub_22EB24348((uint64_t)a1, a3, v12, 1);
        v17 = sub_22F0622F8(a1[11], a3, v12, a5, a6, 0, 0, 0);
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    v12 = sub_22EFBAEA4(*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFFCLL);
  }
  if (v12)
    goto LABEL_13;
LABEL_15:
  sub_22E8FCA40(a1, a5, 0x1265u, 0, (uint64_t)v34);
  v29 = (uint64_t (**)())a4;
  sub_22E8BAE44((uint64_t)v34, (uint64_t *)&v29);
  sub_22E903BEC(v34);
LABEL_17:
  v17 = 1;
LABEL_18:
  if (BYTE1(v51))
  {
    if ((_DWORD)v38 == 5)
    {
      sub_22EC64D18(v45, (uint64_t)&v38);
    }
    else if (v43 && (*(_DWORD *)(v45[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v45, (uint64_t)&v38);
    }
  }
  if (v42)
  {
    v22 = sub_22EC6CBD0(v42);
    MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
  }
  if (v39 != v41)
    free(v39);
  return v17;
}

void sub_22EE7465C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EE746B4()
{
  uint64_t v0;

  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 24) = 0;
}

uint64_t sub_22EE74920(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int **v7;
  _DWORD *v8;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v2 = *a2;
  v3 = 0;
  LOBYTE(v4) = 0;
  v5 = 0;
  switch(*a2)
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
    case 6u:
    case 8u:
      return v3 | v5 | v4;
    case 1u:
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
      if (!v6 || *(_BYTE *)(v6 + 16) != 42)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 42)
          goto LABEL_34;
        v6 = sub_22F10CF48(v6);
        if (!v6)
          goto LABEL_34;
      }
      v7 = (int **)(v6 + 40);
      v2 = *(_DWORD *)(v6 + 20);
      goto LABEL_16;
    case 5u:
      v8 = (_DWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF8);
      if ((*((_QWORD *)a2 + 1) & 6) != 2 || v8 == 0)
        goto LABEL_34;
      v10 = *v8;
      if ((~*v8 & 3) != 0)
        goto LABEL_34;
      v7 = (int **)(v8 + 6);
      v2 = v10 >> 2;
      goto LABEL_16;
    case 7u:
      v11 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v12 = *v11;
      if (v12 == 174)
      {
        v4 = *((unsigned int *)v11 + 7);
        if (!(_DWORD)v4)
        {
LABEL_33:
          v5 = v4 & 0xFFFFFF00;
          v3 = 0x100000000;
          return v3 | v5 | v4;
        }
        v17 = v11 + 32;
        v18 = 8 * v4;
        while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        {
          v17 += 8;
          v18 -= 8;
          if (!v18)
            goto LABEL_33;
        }
      }
      else if (v12 == 227)
      {
        v7 = (int **)(v11 + 24);
        v2 = *((_DWORD *)v11 + 8);
LABEL_16:
        if (v2)
        {
          v13 = *v7;
          v14 = (uint64_t)&(*v7)[6 * v2];
          do
          {
LABEL_19:
            v15 = *v13;
            v16 = *((_QWORD *)v13 + 1);
            if (*v13 == 1)
            {
              if (*(_BYTE *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
                goto LABEL_34;
            }
            else if (v15 == 7)
            {
              if (*(unsigned __int8 *)v16 == 213)
                goto LABEL_34;
            }
            else
            {
              LOBYTE(v4) = 0;
              v3 = 0;
              v5 = 0;
              if (((1 << v15) & 0x13D) == 0)
                return v3 | v5 | v4;
            }
            v13 += 6;
          }
          while (v13 != (int *)v14);
        }
        v5 = v2 & 0xFFFFFF00;
        v3 = 0x100000000;
        LOBYTE(v4) = v2;
        return v3 | v5 | v4;
      }
LABEL_34:
      v3 = 0;
      LOBYTE(v4) = 0;
      v5 = 0;
      return v3 | v5 | v4;
    default:
      v14 = 0;
      v13 = 0;
      goto LABEL_19;
  }
}

uint64_t sub_22EE74AF4(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, __int16 a5, unsigned int a6, unsigned __int8 *a7, int a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int *v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[18];

  v38[16] = *MEMORY[0x24BDAC8D0];
  sub_22EE74DF0((unsigned __int8 *)a1, a4);
  sub_22EE74DF0((unsigned __int8 *)a1, a7);
  if (a4 && a7)
  {
    if (((a4[1] ^ a7[1]) & 0x20) == 0)
    {
      sub_22EBBCB14(a1, a4, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v36);
      sub_22EBBCB14(a1, a7, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v36);
      if ((*(_DWORD *)a4 & 0x2000) != 0)
        v16 = 3489;
      else
        v16 = 4497;
      sub_22E8FCA40((_QWORD *)a1, a6, v16, 0, (uint64_t)&v36);
      sub_22F0D4E74((uint64_t)a4);
      v35 = v17;
      v18 = sub_22E8906A0((uint64_t)&v36, &v35);
      sub_22F0D4E74((uint64_t)a7);
      v34 = v19;
      v20 = &v34;
      v21 = (void **)v18;
      goto LABEL_13;
    }
  }
  else
  {
    if (a4)
      v22 = (uint64_t)a4;
    else
      v22 = (uint64_t)a7;
    sub_22EBBCB14(a1, a4, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v36);
    sub_22EBBCB14(a1, a7, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v36);
    if ((*(_BYTE *)(v22 + 1) & 0x20) == 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a6, 0x1191u, 0, (uint64_t)&v36);
      sub_22F0D4E74(v22);
      v35 = v23;
      v21 = &v36;
      v20 = &v35;
LABEL_13:
      sub_22E8906A0((uint64_t)v21, v20);
      sub_22E903BEC((unsigned int *)&v36);
      return 1;
    }
  }
  v24 = sub_22EB45EB4(a5);
  v36 = v38;
  v37 = 0x1000000000;
  v25 = a6;
  sub_22EB47EE8((_QWORD *)a1, a2, a6, v24, (uint64_t)&v36);
  if (!(_DWORD)v37)
  {
    v27 = 0;
    goto LABEL_18;
  }
  v31 = (*(_QWORD *)(a1 + 88) + 16 * (int)dword_22F4A2BC4[v24] + 15280) | 6;
  v32 = a6;
  sub_22EFC6D6C((uint64_t)&v33, v31);
  v26 = sub_22ED166A0(a1, 0, 0, 0, (uint64_t)&v31, (uint64_t)&v36, 1);
  if ((v26 & 1) == 0)
  {
    v27 = (unint64_t)v26 & 0xFFFFFFFFFFFFFFFELL;
LABEL_18:
    v28 = 1;
    goto LABEL_20;
  }
  v27 = 0;
  v28 = 0;
LABEL_20:
  if (v36 != v38)
    free(v36);
  if (v28)
  {
    v30 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    return sub_22F34B0D0(v30, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), v27, a3, (uint64_t)a4, v24, v25, (uint64_t)a7, a8, 0);
  }
  return 1;
}

unsigned __int8 *sub_22EE74DF0(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unsigned int v29[24];

  if (a2)
  {
    v2 = result;
    result = sub_22EFFEB40(a2);
    v3 = result;
    v4 = *result;
    if (v4 == 141)
    {
      if (*((_DWORD *)result + 4) != 2 || (*(_QWORD *)result & 0x3E00000000) == 0x2A00000000)
        return result;
    }
    else
    {
      v5 = v4 & 0xFE;
      if (v5 != 112 && v5 != 102)
        return result;
    }
    sub_22EFF605C((uint64_t)result);
    sub_22E8FCA40(v2, v6, 0xD9Eu, 0, (uint64_t)v29);
    sub_22F0D4E74((uint64_t)v3);
    v28 = v7;
    v8 = sub_22E8906A0((uint64_t)v29, &v28);
    sub_22F0D5A50((uint64_t)v3);
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v26 = 0x100000000000000;
    v20 = v9 | ((unint64_t)v9 << 32);
    v21 = 0;
    v24 = (void *)40;
    v27 = 0;
    v10 = sub_22E890748(v8, &v20);
    sub_22F0D60E4((uint64_t)v3);
    v14 = 0;
    v15 = 0;
    v17 = 0;
    v18 = 0x100000000000000;
    v12 = v11 | ((unint64_t)v11 << 32);
    v13 = 0;
    __p = (void *)41;
    v19 = 0;
    sub_22E890748(v10, &v12);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    if (SHIBYTE(v26) < 0)
      operator delete(v24);
    return (unsigned __int8 *)sub_22E903BEC(v29);
  }
  return result;
}

uint64_t sub_22EE74F64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t **v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  if (a2)
  {
    v4 = a2;
    while (1)
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F49AB70
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_7;
      }
      result = 1;
      switch(*(_BYTE *)(v6 + 16))
      {
        case 0:
        case 1:
        case 0x16:
        case 0x17:
        case 0x36:
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 < 0x10 || (v4 & 0xF) != 0)
            goto LABEL_30;
          v10 = v4 & 0xFFFFFFFFFFFFFFF0;
          v11 = *(_QWORD *)((char *)&unk_22F49AB70
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          v12 = a3 + v11 - 1;
          goto LABEL_45;
        case 2:
        case 3:
        case 4:
        case 5:
          v27 = *(_QWORD *)(v4 + 32);
          if (v27 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
            v79 = *(_QWORD *)((char *)&unk_22F49AB70
                            + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0)
                                                                           + 16) << 56) >> 53));
          else
            v79 = 1;
          if (v27 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v27, (a3 + v79 + 15) & -v79);
            if (!(_DWORD)result)
              return result;
          }
          v29 = *(_QWORD *)(a3 + 8);
          return sub_22EE6745C(a1, v29);
        case 6:
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 < 0x10 || (v4 & 0xF) != 0)
          {
            a3 += 12;
            goto LABEL_30;
          }
          v10 = v4 & 0xFFFFFFFFFFFFFFF0;
          v11 = *(_QWORD *)((char *)&unk_22F49AB70
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          v12 = a3 + v11 + 11;
          goto LABEL_45;
        case 7:
        case 0x25:
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 < 0x10 || (v4 & 0xF) != 0)
          {
            a3 += 8;
            goto LABEL_30;
          }
          v10 = v4 & 0xFFFFFFFFFFFFFFF0;
          v11 = *(_QWORD *)((char *)&unk_22F49AB70
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          v12 = a3 + v11 + 7;
          goto LABEL_45;
        case 8:
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 < 0x10 || (v4 & 0xF) != 0)
          {
            ++a3;
            goto LABEL_30;
          }
          v10 = v4 & 0xFFFFFFFFFFFFFFF0;
          v11 = *(_QWORD *)((char *)&unk_22F49AB70
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
          v12 = v11 + a3;
          goto LABEL_45;
        case 0xA:
        case 0x20:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
          v4 = *(_QWORD *)(v4 + 32);
          goto LABEL_11;
        case 0xC:
        case 0x37:
        case 0x38:
          goto LABEL_86;
        case 0xD:
        case 0x30:
          v29 = *(_QWORD *)(v4 + 24);
          return sub_22EE6745C(a1, v29);
        case 0xE:
          result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 24));
          if (!(_DWORD)result)
            return result;
          if (!*(_QWORD *)(v4 + 40))
            return 1;
          result = sub_22EE7384C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
          if (!(_DWORD)result)
            return result;
          v31 = *(_DWORD *)(a3 + 28);
          v80 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
          v81 = v31;
          sub_22EFC6D6C((uint64_t)&v82, v80);
          result = sub_22EE738E8(a1, &v80);
          if (!(_DWORD)result)
            return result;
          v32 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v32)
            return 1;
          v33 = v4 + 48;
          v34 = (uint64_t *)(a3 + 56);
          v35 = v32 - 1;
          do
          {
            v36 = *v34++;
            v83 = *(_OWORD *)v33;
            v84 = *(_QWORD *)(v33 + 16);
            v85 = v36;
            result = sub_22EE735B0(a1, &v83);
            v37 = v35-- != 0;
            v38 = v37;
            if (!(_DWORD)result)
              break;
            v33 += 24;
          }
          while ((v38 & 1) != 0);
          return result;
        case 0xF:
          result = sub_22EE733F4(a1, *(_QWORD *)(v4 + 40));
          if (!(_DWORD)result)
            return result;
          v30 = *(_QWORD *)(v4 + 24);
          return sub_22EE72E1C(a1, v30);
        case 0x10:
          v39 = *(_QWORD *)(v4 + 40);
          goto LABEL_106;
        case 0x11:
          v29 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
          return sub_22EE6745C(a1, v29);
        case 0x12:
          return sub_22EE7384C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
        case 0x13:
          v39 = *(_QWORD *)(v4 + 40);
          if (!v39)
            goto LABEL_107;
LABEL_106:
          result = sub_22EE6745C(a1, v39);
          if (!(_DWORD)result)
            return result;
LABEL_107:
          v30 = *(_QWORD *)(v4 + 48);
          return sub_22EE72E1C(a1, v30);
        case 0x14:
          v40 = *(_QWORD *)(a3 + 8);
          if (v40)
          {
            v41 = *(_QWORD *)(v4 + 32);
            if (v41)
            {
              result = sub_22EE7384C(a1, v41, v40);
              if (!(_DWORD)result)
                return result;
            }
          }
          v42 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v42)
            return 1;
          v43 = v4 + 48;
          v44 = (uint64_t *)(a3 + 32);
          v45 = v42 - 1;
          do
          {
            v46 = *v44++;
            v83 = *(_OWORD *)v43;
            v84 = *(_QWORD *)(v43 + 16);
            v85 = v46;
            result = sub_22EE735B0(a1, &v83);
            v37 = v45-- != 0;
            v47 = v37;
            if (!(_DWORD)result)
              break;
            v43 += 24;
          }
          while ((v47 & 1) != 0);
          return result;
        case 0x15:
          v48 = *(_QWORD *)(v4 + 48);
          if (v48)
          {
            result = sub_22EE6745C(a1, v48);
            if (!(_DWORD)result)
              return result;
          }
          v30 = *(_QWORD *)(v4 + 40);
          return sub_22EE72E1C(a1, v30);
        case 0x18:
          v19 = *(_QWORD *)(v4 + 32);
          if (v19)
          {
            result = sub_22EE7384C(a1, v19, *(_QWORD *)(a3 + 8));
            if (!(_DWORD)result)
              return result;
          }
          v4 = *(_QWORD *)(v4 + 40);
          if (v4 < 0x10 || (v4 & 0xF) != 0)
            goto LABEL_70;
          goto LABEL_66;
        case 0x19:
          *(_QWORD *)&v83 = v4;
          *((_QWORD *)&v83 + 1) = a3;
          v49 = *(_QWORD *)(v4 + 24);
          v50 = sub_22E47EE80(&v83);
          if ((v49 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
            && !*(_BYTE *)(a1 + 8))
          {
            return 1;
          }
          return sub_22EE74F64(a1, v49, v50);
        case 0x1A:
          *(_QWORD *)&v83 = v4;
          *((_QWORD *)&v83 + 1) = a3;
          v51 = *(_QWORD *)(v4 + 24);
          v52 = sub_22E47EE80(&v83);
          if (v51 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v51, v52);
            if (!(_DWORD)result)
              return result;
          }
          v53 = v83;
          v54 = *(_QWORD *)(v83 + 16);
          if (*(_BYTE *)(v83 + 16) == 25 || (v54 & 0x3FFFC000000000) == 0)
            goto LABEL_143;
          v56 = 0;
          v57 = (unsigned __int16)(v54 >> 38);
          do
          {
            v58 = *((_QWORD *)&v83 + 1) + 8 * v56;
            v59 = *(_QWORD *)(v58 + 16);
            if (v59)
            {
              if ((sub_22EFC78D8(*(_QWORD *)(v58 + 16)) & 1) == 0 && (sub_22EE757EC(a1, v59) & 1) == 0)
                return 0;
            }
            else if (v56 < (unsigned __int16)(*(_QWORD *)(v53 + 16) >> 38))
            {
              result = sub_22EE72E1C(a1, *(_QWORD *)(v53 + 40 + 8 * v56));
              if (!(_DWORD)result)
                return result;
            }
            ++v56;
          }
          while (v57 != v56);
          v54 = *(_QWORD *)(v53 + 16);
LABEL_143:
          if ((v54 & 0x3C0000000000000) == 0x80000000000000)
          {
            v60 = (_DWORD *)((v53 + 8 * (unsigned __int16)(v54 >> 38) + 4 * ((v54 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
            v63 = *v60;
            v62 = v60 + 2;
            v61 = v63;
            if (v63)
            {
              v64 = 8 * v61;
              while ((sub_22EE72E1C(a1, *v62) & 1) != 0)
              {
                ++v62;
                v64 -= 8;
                if (!v64)
                  goto LABEL_148;
              }
              return 0;
            }
          }
LABEL_148:
          v65 = sub_22F257D3C(v53);
          if (!v65)
            return 1;
          result = sub_22EE6745C(a1, v65);
          if ((_DWORD)result)
            return 1;
          return result;
        case 0x1C:
          v4 = *(_QWORD *)(v4 + 24);
LABEL_11:
          if (v4 >= 0x10 && (v4 & 0xF) == 0)
          {
            v10 = v4 & 0xFFFFFFFFFFFFFFF0;
            v11 = *(_QWORD *)((char *)&unk_22F49AB70
                            + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                           + 16) << 56) >> 53));
            v12 = a3 + v11 + 3;
LABEL_45:
            a3 = v12 & -v11;
          }
          else
          {
            a3 += 4;
LABEL_30:
            if (v4 < 0x10)
              goto LABEL_47;
            v10 = v4 & 0xFFFFFFFFFFFFFFF0;
          }
          if ((*(_BYTE *)(*(_QWORD *)v10 + 17) & 1) != 0)
            goto LABEL_7;
LABEL_47:
          if (!*(_BYTE *)(a1 + 8))
            return result;
          goto LABEL_7;
        case 0x1D:
        case 0x1E:
          result = sub_22EE6745C(a1, *(_QWORD *)(a3 + 16));
          if (!(_DWORD)result)
            return result;
          result = sub_22EE6745C(a1, *(_QWORD *)(a3 + 24));
          if (!(_DWORD)result)
            return result;
LABEL_86:
          v30 = *(_QWORD *)(v4 + 32);
          return sub_22EE72E1C(a1, v30);
        case 0x1F:
          v21 = *(unint64_t **)(a3 + 8);
          if (v21)
          {
            v24 = *v21;
            v23 = v21 + 1;
            v22 = v24;
            if ((v24 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
               || *(_BYTE *)(a1 + 8))
              && (sub_22EE74F64(a1, v22, v23) & 1) == 0)
            {
              return 0;
            }
          }
          else
          {
            result = sub_22EE72E1C(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
            if (!(_DWORD)result)
              return result;
          }
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 >= 0x10 && (v4 & 0xF) == 0)
          {
LABEL_66:
            v25 = v4 & 0xFFFFFFFFFFFFFFF0;
            v26 = *(_QWORD *)((char *)&unk_22F49AB70
                            + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                           + 16) << 56) >> 53));
            a3 = (a3 + v26 + 15) & -v26;
            goto LABEL_67;
          }
LABEL_70:
          a3 += 16;
          if (v4 >= 0x10)
          {
            v25 = v4 & 0xFFFFFFFFFFFFFFF0;
LABEL_67:
            if ((*(_BYTE *)(*(_QWORD *)v25 + 17) & 1) != 0)
              goto LABEL_7;
          }
          if (!*(_BYTE *)(a1 + 8))
            return 1;
LABEL_7:
          if (!v4)
            return 1;
          break;
        case 0x21:
          v66 = *(_QWORD *)(v4 + 24);
          v67 = *(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0);
          if (v67 != v4)
          {
            v68 = 1;
            if (v66 >= 0x10 && (v66 & 0xF) == 0)
              v68 = *(_QWORD *)((char *)&unk_22F49AB70
                              + ((uint64_t)((unint64_t)*(unsigned int *)(v67 + 16) << 56) >> 53));
            if (v66 >= 0x10 && (*(_BYTE *)(v67 + 17) & 1) != 0 || *(_BYTE *)(a1 + 8))
            {
              result = sub_22EE74F64(a1, v66, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v68- 1) & -v68);
              if (!(_DWORD)result)
                return result;
            }
          }
          v69 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
          if (!(_DWORD)v69)
            return 1;
          v70 = (unint64_t **)(a3 + 24);
          do
          {
            v71 = **v70;
            if (v71 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
              || *(_BYTE *)(a1 + 8))
            {
              result = sub_22EE74F64(a1, v71, *v70 + 1);
              if (!(_DWORD)result)
                break;
            }
            ++v70;
            result = 1;
            --v69;
          }
          while (v69);
          return result;
        case 0x2A:
          v72 = *(_DWORD *)(v4 + 20);
          *((_QWORD *)&v83 + 1) = *(_QWORD *)(v4 + 40);
          LODWORD(v83) = 8;
          DWORD1(v83) = v72;
          return sub_22EE7C060(a1, (uint64_t)&v83);
        case 0x2B:
          v30 = *(_QWORD *)(v4 + 8);
          return sub_22EE72E1C(a1, v30);
        case 0x2E:
          result = sub_22EE733F4(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v73 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v73)
            return 1;
          v74 = v4 + 40;
          v75 = (uint64_t *)(a3 + 16);
          v76 = v73 - 1;
          do
          {
            v77 = *v75++;
            v83 = *(_OWORD *)v74;
            v84 = *(_QWORD *)(v74 + 16);
            v85 = v77;
            result = sub_22EE735B0(a1, &v83);
            v37 = v76-- != 0;
            v78 = v37;
            if (!(_DWORD)result)
              break;
            v74 += 24;
          }
          while ((v78 & 1) != 0);
          return result;
        case 0x2F:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 33) & 0x80) == 0)
            return result;
          sub_22EE7BD8C((_DWORD *)a1, v4, *(_DWORD *)a3);
          return 1;
        case 0x31:
        case 0x33:
          v15 = *(unint64_t **)(a3 + 16);
          v16 = *v15;
          a3 = (uint64_t)(v15 + 1);
          v4 = v16;
          goto LABEL_30;
        case 0x39:
          goto LABEL_4;
        default:
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_22EE757EC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unsigned int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t **v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t **v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t **v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  BOOL v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  BOOL v189;
  uint64_t v190;
  uint64_t **v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t **v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t **v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t **v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t **v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  BOOL v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  BOOL v250;
  uint64_t v251;
  uint64_t **v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  BOOL v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t **v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t **v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned int v291;
  uint64_t v292;
  _DWORD *v293;
  uint64_t v294;
  uint64_t *v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  BOOL v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  BOOL v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t **v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  BOOL v329;
  uint64_t v330;
  uint64_t **v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t **v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t **v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t **v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t **v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t **v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t **v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t **v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t **v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t **v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t **v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t **v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t **v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unsigned int v438;
  uint64_t v439;
  uint64_t **v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  BOOL v445;
  uint64_t v446;
  uint64_t **v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t **v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t **v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t **v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t **v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t **v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t **v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t **v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t **v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t **v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t **v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t i;
  uint64_t v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  BOOL v507;
  uint64_t v508;
  uint64_t **v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t **v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t **v520;
  uint64_t *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  uint64_t **v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t **v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t **v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t **v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t **v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  uint64_t **v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t **v564;
  uint64_t *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t **v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t **v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  BOOL v583;
  uint64_t **v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  BOOL v588;
  BOOL v589;
  BOOL v590;
  int *v591;
  BOOL v592;
  BOOL v593;
  BOOL v594;
  BOOL v595;
  BOOL v596;
  BOOL v597;
  uint64_t **v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  uint64_t v610;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EE79DBC(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if (((*(unsigned __int16 *)(*v8 + 32) | (*(unsigned __int8 *)(*v8 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v8), (_DWORD)result))
        {
          ++v8;
          continue;
        }
        break;
      }
      return result;
    case 1:
      v263 = *(unint64_t **)(a2 + 96);
      if (v263)
      {
        if ((v266 = *v263, v265 = (uint64_t)(v263 + 1), v264 = v266, v266 >= 0x10)
          && (*(_BYTE *)(*(_QWORD *)(v264 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
          || *(_BYTE *)(a1 + 8))
        {
          result = sub_22EE74F64(a1, v264, v265);
          if (!(_DWORD)result)
            return result;
        }
      }
      v267 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EE6745C(a1, v267);
      if (!(_DWORD)result)
        return result;
      v268 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v268)
        goto LABEL_505;
      v269 = 16 * v268;
      v270 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v270)
        {
          result = sub_22EE6745C(a1, *v270);
          if (!(_DWORD)result)
            break;
        }
        v270 += 2;
        v269 -= 16;
        if (!v269)
        {
LABEL_505:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v272 = *v271;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
            }
            else
            {
              v274 = 0;
            }
            while (v272 != (uint64_t *)v274)
            {
              if (((*(unsigned __int16 *)(*v272 + 32) | (*(unsigned __int8 *)(*v272 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v272);
                if (!(_DWORD)result)
                  return result;
              }
              ++v272;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v231 = *v230;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v233 = *(_QWORD *)v232 + 8 * *(unsigned int *)(v232 + 8);
      }
      else
      {
        v233 = 0;
      }
      while (2)
      {
        if (v231 == (uint64_t *)v233)
          return 1;
        if (((*(unsigned __int16 *)(*v231 + 32) | (*(unsigned __int8 *)(*v231 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v231), (_DWORD)result))
        {
          ++v231;
          continue;
        }
        break;
      }
      return result;
    case 3:
      v245 = *(_QWORD *)(a2 + 40);
      if (!v245 || (sub_22EFC78D8(*(_QWORD *)(a2 + 40)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v245);
        if (!(_DWORD)result)
          return result;
      }
      v246 = *(_QWORD *)(a2 + 48);
      if (!v246)
        goto LABEL_467;
      v247 = *(unsigned int *)(v246 + 8);
      if (!(_DWORD)v247)
        goto LABEL_467;
      v248 = (unsigned int *)(v246 + 16);
      while ((sub_22EE735B0(a1, v248) & 1) != 0)
      {
        v248 += 8;
        if (!--v247)
        {
LABEL_467:
          v249 = *(_DWORD *)v4 & 0x7F;
          v250 = v249 > 0x39 || ((1 << v249) & 0x3F0003E01011066) == 0;
          if (v250
            && (v249 - 70 <= 0xD ? (v589 = ((1 << (v249 - 70)) & 0x2803) == 0) : (v589 = 1), v589 && v249 - 19 > 4))
          {
            v251 = 0;
          }
          else
          {
            v251 = sub_22EFCAE04(a2);
          }
          result = sub_22EE7A124(a1, v251);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v253 = *v252;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v255 = *(_QWORD *)v254 + 8 * *(unsigned int *)(v254 + 8);
            }
            else
            {
              v255 = 0;
            }
            while (v253 != (uint64_t *)v255)
            {
              if (((*(unsigned __int16 *)(*v253 + 32) | (*(unsigned __int8 *)(*v253 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v253);
                if (!(_DWORD)result)
                  return result;
              }
              ++v253;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v178 = *v177;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v180 = *(_QWORD *)v179 + 8 * *(unsigned int *)(v179 + 8);
      }
      else
      {
        v180 = 0;
      }
      while (2)
      {
        if (v178 == (uint64_t *)v180)
          return 1;
        if (((*(unsigned __int16 *)(*v178 + 32) | (*(unsigned __int8 *)(*v178 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v178), (_DWORD)result))
        {
          ++v178;
          continue;
        }
        break;
      }
      return result;
    case 5:
      result = sub_22EE7A124(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v317 = *v316;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v319 = *(_QWORD *)v318 + 8 * *(unsigned int *)(v318 + 8);
      }
      else
      {
        v319 = 0;
      }
      while (2)
      {
        if (v317 == (uint64_t *)v319)
          return 1;
        if (((*(unsigned __int16 *)(*v317 + 32) | (*(unsigned __int8 *)(*v317 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v317), (_DWORD)result))
        {
          ++v317;
          continue;
        }
        break;
      }
      return result;
    case 6:
      result = sub_22EE7A124(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v348 = *v347;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v350 = *(_QWORD *)v349 + 8 * *(unsigned int *)(v349 + 8);
      }
      else
      {
        v350 = 0;
      }
      while (2)
      {
        if (v348 == (uint64_t *)v350)
          return 1;
        if (((*(unsigned __int16 *)(*v348 + 32) | (*(unsigned __int8 *)(*v348 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v348), (_DWORD)result))
        {
          ++v348;
          continue;
        }
        break;
      }
      return result;
    case 7:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v256 = *(_DWORD *)v4 & 0x7F;
      v257 = v256 > 0x39 || ((1 << v256) & 0x3F0003E01011066) == 0;
      v258 = !v257 || v256 - 70 <= 0xD && ((1 << (v256 - 70)) & 0x2803) != 0 || v256 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if (((*(unsigned __int16 *)(*v260 + 32) | (*(unsigned __int8 *)(*v260 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v260), (_DWORD)result))
        {
          ++v260;
          continue;
        }
        break;
      }
      return result;
    case 8:
      v359 = *(_QWORD *)(a2 + 40);
      v360 = (unint64_t *)(v359 & 0xFFFFFFFFFFFFFFF8);
      if ((v359 & 4) != 0 && v360)
      {
        v363 = *v360;
        v362 = (uint64_t)(v360 + 1);
        v361 = v363;
        if ((v363 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v361 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
           || *(_BYTE *)(a1 + 8))
          && (sub_22EE74F64(a1, v361, v362) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if ((v359 & 4) != 0)
          v513 = 0;
        else
          v513 = v359 & 0xFFFFFFFFFFFFFFF8;
        if (!v513 || (sub_22EFC78D8(v513) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v513);
          if (!(_DWORD)result)
            return result;
        }
      }
      v514 = *(_DWORD *)v4 & 0x7F;
      if (v514 <= 0x39 && ((1 << v514) & 0x3F0003E01011066) != 0
        || v514 - 70 <= 0xD && ((1 << (v514 - 70)) & 0x2803) != 0
        || v514 - 19 <= 4)
      {
        v515 = sub_22EFCAE04(a2);
      }
      else
      {
        v515 = 0;
      }
      result = sub_22EE7A124(a1, v515);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(v4 + 1) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v517 = *v516;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v519 = *(_QWORD *)v518 + 8 * *(unsigned int *)(v518 + 8);
        }
        else
        {
          v519 = 0;
        }
        while (1)
        {
          if (v517 == (uint64_t *)v519)
            return 1;
          if (((*(unsigned __int16 *)(*v517 + 32) | (*(unsigned __int8 *)(*v517 + 34) << 16)) & 0x20000) == 0)
          {
            result = sub_22EE7A1CC(a1, *v517);
            if (!(_DWORD)result)
              break;
          }
          ++v517;
        }
      }
      return result;
    case 9:
      v208 = *(_QWORD *)(a2 + 48);
      v209 = (unint64_t *)(v208 & 0xFFFFFFFFFFFFFFF8);
      if ((v208 & 4) != 0 && v209)
      {
        v212 = *v209;
        v211 = (uint64_t)(v209 + 1);
        v210 = v212;
        if ((v212 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v210 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
           || *(_BYTE *)(a1 + 8))
          && (sub_22EE74F64(a1, v210, v211) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if ((v208 & 4) != 0)
          v498 = 0;
        else
          v498 = v208 & 0xFFFFFFFFFFFFFFF8;
        if (!v498 || (sub_22EFC78D8(v498) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v498);
          if (!(_DWORD)result)
            return result;
        }
      }
      v499 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v499)
      {
        for (i = 0; i != v499; ++i)
        {
          v501 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v502 = *(_DWORD *)(v501 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v502)
          {
            v503 = (uint64_t *)(v501 + 16);
            v504 = 8 * v502;
            do
            {
              v505 = *v503;
              if (!*v503 || (sub_22EFC78D8(*v503) & 1) == 0)
              {
                result = sub_22EE757EC(a1, v505);
                if (!(_DWORD)result)
                  return result;
              }
              ++v503;
              v504 -= 8;
            }
            while (v504);
          }
        }
      }
      v506 = *(_DWORD *)v4 & 0x7F;
      v507 = v506 > 0x39 || ((1 << v506) & 0x3F0003E01011066) == 0;
      if (v507 && (v506 - 70 <= 0xD ? (v596 = ((1 << (v506 - 70)) & 0x2803) == 0) : (v596 = 1), v596 && v506 - 19 > 4))
        v508 = 0;
      else
        v508 = sub_22EFCAE04(a2);
      result = sub_22EE7A124(a1, v508);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(v4 + 1) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v510 = *v509;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v512 = *(_QWORD *)v511 + 8 * *(unsigned int *)(v511 + 8);
        }
        else
        {
          v512 = 0;
        }
        while (1)
        {
          if (v510 == (uint64_t *)v512)
            return 1;
          if (((*(unsigned __int16 *)(*v510 + 32) | (*(unsigned __int8 *)(*v510 + 34) << 16)) & 0x20000) == 0)
          {
            result = sub_22EE7A1CC(a1, *v510);
            if (!(_DWORD)result)
              break;
          }
          ++v510;
        }
      }
      return result;
    case 10:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v356 = *v355;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v358 = *(_QWORD *)v357 + 8 * *(unsigned int *)(v357 + 8);
      }
      else
      {
        v358 = 0;
      }
      while (2)
      {
        if (v356 == (uint64_t *)v358)
          return 1;
        if (((*(unsigned __int16 *)(*v356 + 32) | (*(unsigned __int8 *)(*v356 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v356), (_DWORD)result))
        {
          ++v356;
          continue;
        }
        break;
      }
      return result;
    case 11:
      return (sub_22EE79E00(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EE7A124(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v205 = *v204;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v207 = *(_QWORD *)v206 + 8 * *(unsigned int *)(v206 + 8);
      }
      else
      {
        v207 = 0;
      }
      while (2)
      {
        if (v205 == (uint64_t *)v207)
          return 1;
        if (((*(unsigned __int16 *)(*v205 + 32) | (*(unsigned __int8 *)(*v205 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v205), (_DWORD)result))
        {
          ++v205;
          continue;
        }
        break;
      }
      return result;
    case 13:
      if (!sub_22EE7384C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v339 = *(_DWORD *)(a2 + 24);
      v340 = *(_QWORD *)(a2 + 80);
      v608 = *(_QWORD *)(a2 + 40);
      v609 = v339;
      v610 = v340;
      if (!sub_22EE738E8(a1, &v608))
        return 0;
      if ((v341 = *(_DWORD *)v4 & 0x7F, v341 <= 0x39) && ((1 << v341) & 0x3F0003E01011066) != 0
        || v341 - 70 <= 0xD && ((1 << (v341 - 70)) & 0x2803) != 0
        || v341 - 19 <= 4)
      {
        v342 = sub_22EFCAE04(a2);
      }
      else
      {
        v342 = 0;
      }
      if (!sub_22EE7A124(a1, v342))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v344 = *v343;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v346 = *(_QWORD *)v345 + 8 * *(unsigned int *)(v345 + 8);
      }
      else
      {
        v346 = 0;
      }
      while (2)
      {
        if (v344 == (uint64_t *)v346)
          return 1;
        if (((*(unsigned __int16 *)(*v344 + 32) | (*(unsigned __int8 *)(*v344 + 34) << 16)) & 0x20000) != 0
          || sub_22EE7A1CC(a1, *v344))
        {
          ++v344;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v146 = *v145;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v148 = *(_QWORD *)v147 + 8 * *(unsigned int *)(v147 + 8);
      }
      else
      {
        v148 = 0;
      }
      while (2)
      {
        if (v146 == (uint64_t *)v148)
          return 1;
        if (((*(unsigned __int16 *)(*v146 + 32) | (*(unsigned __int8 *)(*v146 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v146), (_DWORD)result))
        {
          ++v146;
          continue;
        }
        break;
      }
      return result;
    case 15:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v235 = *v234;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v237 = *(_QWORD *)v236 + 8 * *(unsigned int *)(v236 + 8);
      }
      else
      {
        v237 = 0;
      }
      while (2)
      {
        if (v235 == (uint64_t *)v237)
          return 1;
        if (((*(unsigned __int16 *)(*v235 + 32) | (*(unsigned __int8 *)(*v235 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v235), (_DWORD)result))
        {
          ++v235;
          continue;
        }
        break;
      }
      return result;
    case 16:
      result = sub_22EE7A124(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v128 = *v127;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v130 = *(_QWORD *)v129 + 8 * *(unsigned int *)(v129 + 8);
      }
      else
      {
        v130 = 0;
      }
      while (2)
      {
        if (v128 == (uint64_t *)v130)
          return 1;
        if (((*(unsigned __int16 *)(*v128 + 32) | (*(unsigned __int8 *)(*v128 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v128), (_DWORD)result))
        {
          ++v128;
          continue;
        }
        break;
      }
      return result;
    case 17:
      result = sub_22EE7384C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v283 = *v282;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v285 = *(_QWORD *)v284 + 8 * *(unsigned int *)(v284 + 8);
      }
      else
      {
        v285 = 0;
      }
      while (2)
      {
        if (v283 == (uint64_t *)v285)
          return 1;
        if (((*(unsigned __int16 *)(*v283 + 32) | (*(unsigned __int8 *)(*v283 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v283), (_DWORD)result))
        {
          ++v283;
          continue;
        }
        break;
      }
      return result;
    case 18:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v352 = *v351;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v354 = *(_QWORD *)v353 + 8 * *(unsigned int *)(v353 + 8);
      }
      else
      {
        v354 = 0;
      }
      while (2)
      {
        if (v352 == (uint64_t *)v354)
          return 1;
        if (((*(unsigned __int16 *)(*v352 + 32) | (*(unsigned __int8 *)(*v352 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v352), (_DWORD)result))
        {
          ++v352;
          continue;
        }
        break;
      }
      return result;
    case 19:
      v390 = *(_QWORD *)(a2 + 112);
      if (!v390)
        goto LABEL_727;
      v391 = *(unsigned int *)(v390 + 8);
      if (!(_DWORD)v391)
        goto LABEL_727;
      v392 = (uint64_t *)(v390 + 16);
      v393 = 8 * v391;
      while ((sub_22EE79F24(a1, *v392) & 1) != 0)
      {
        ++v392;
        v393 -= 8;
        if (!v393)
        {
LABEL_727:
          result = sub_22EE7A124(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v395 = *v394;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v397 = *(_QWORD *)v396 + 8 * *(unsigned int *)(v396 + 8);
            }
            else
            {
              v397 = 0;
            }
            while (v395 != (uint64_t *)v397)
            {
              if (((*(unsigned __int16 *)(*v395 + 32) | (*(unsigned __int8 *)(*v395 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v395);
                if (!(_DWORD)result)
                  return result;
              }
              ++v395;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EE7A124(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v302 = *v301;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v304 = *(_QWORD *)v303 + 8 * *(unsigned int *)(v303 + 8);
      }
      else
      {
        v304 = 0;
      }
      while (2)
      {
        if (v302 == (uint64_t *)v304)
          return 1;
        if (((*(unsigned __int16 *)(*v302 + 32) | (*(unsigned __int8 *)(*v302 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v302), (_DWORD)result))
        {
          ++v302;
          continue;
        }
        break;
      }
      return result;
    case 21:
      result = sub_22EE7A124(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v336 = *v335;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v338 = *(_QWORD *)v337 + 8 * *(unsigned int *)(v337 + 8);
      }
      else
      {
        v338 = 0;
      }
      while (2)
      {
        if (v336 == (uint64_t *)v338)
          return 1;
        if (((*(unsigned __int16 *)(*v336 + 32) | (*(unsigned __int8 *)(*v336 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v336), (_DWORD)result))
        {
          ++v336;
          continue;
        }
        break;
      }
      return result;
    case 22:
      v382 = *(_QWORD *)(a2 + 112);
      if (!v382)
        goto LABEL_711;
      v383 = *(unsigned int *)(v382 + 8);
      if (!(_DWORD)v383)
        goto LABEL_711;
      v384 = (uint64_t *)(v382 + 16);
      v385 = 8 * v383;
      while ((sub_22EE79F24(a1, *v384) & 1) != 0)
      {
        ++v384;
        v385 -= 8;
        if (!v385)
        {
LABEL_711:
          v386 = (unint64_t *)sub_22F259044(a2);
          if (v386)
          {
            if ((v387 = *v386, *v386 >= 0x10) && (*(_BYTE *)(*(_QWORD *)(v387 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
              || *(_BYTE *)(a1 + 8))
            {
              result = sub_22EE74F64(a1, v387, (uint64_t)(v386 + 1));
              if (!(_DWORD)result)
                return result;
            }
          }
          v388 = *(_QWORD *)(a2 + 120);
          if (!v388)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v388 = *(_QWORD *)(a2 + 120);
          }
          if (v388 < 8)
            v389 = 0;
          else
            v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
          if (v389 == a2)
          {
            v602 = sub_22F2590A8(a2);
            v603 = sub_22F25910C(a2);
            v604 = sub_22F259178(a2);
            v605 = sub_22F2591DC(a2);
            if (v602 != v603 && v604 != v605)
            {
              v606 = v604 + 4;
              v607 = v602 + 8;
              do
              {
                if (v607 == v603)
                  break;
                v607 += 8;
                v30 = v606 == v605;
                v606 += 4;
              }
              while (!v30);
            }
          }
          result = sub_22EE7A124(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v573 = *v572;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v575 = *(_QWORD *)v574 + 8 * *(unsigned int *)(v574 + 8);
            }
            else
            {
              v575 = 0;
            }
            while (v573 != (uint64_t *)v575)
            {
              if (((*(unsigned __int16 *)(*v573 + 32) | (*(unsigned __int8 *)(*v573 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v573);
                if (!(_DWORD)result)
                  return result;
              }
              ++v573;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v416 = *(_QWORD *)(a2 + 104);
      if (!v416)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v416 = *(_QWORD *)(a2 + 104);
      }
      if (v416 < 8)
        v417 = 0;
      else
        v417 = *(_QWORD *)(v416 & 0xFFFFFFFFFFFFFFF8);
      if (v417 == a2)
      {
        v576 = sub_22F259248(a2);
        v578 = v577;
        v579 = sub_22F2592CC(a2);
        if (v576 != v578 && v579 != v580)
        {
          v581 = v579 + 4;
          v582 = v576 + 8;
          do
          {
            if (v582 == v578)
              break;
            v582 += 8;
            v30 = v581 == v580;
            v581 += 4;
          }
          while (!v30);
        }
      }
      result = sub_22EE7A124(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v521 = *v520;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v523 = *(_QWORD *)v522 + 8 * *(unsigned int *)(v522 + 8);
      }
      else
      {
        v523 = 0;
      }
      while (2)
      {
        if (v521 == (uint64_t *)v523)
          return 1;
        if (((*(unsigned __int16 *)(*v521 + 32) | (*(unsigned __int8 *)(*v521 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v521), (_DWORD)result))
        {
          ++v521;
          continue;
        }
        break;
      }
      return result;
    case 24:
      v217 = *(unint64_t **)(a2 + 88);
      if (v217)
      {
        if ((v220 = *v217, v219 = (uint64_t)(v217 + 1), v218 = v220, v220 >= 0x10)
          && (*(_BYTE *)(*(_QWORD *)(v218 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
          || *(_BYTE *)(a1 + 8))
        {
          result = sub_22EE74F64(a1, v218, v219);
          if (!(_DWORD)result)
            return result;
        }
      }
      v221 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v221)
        goto LABEL_419;
      v222 = *(uint64_t **)(a2 + 96);
      v223 = 8 * v221;
      while (1)
      {
        v224 = *v222;
        if (!*v222 || (sub_22EFC78D8(*v222) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v224);
          if (!(_DWORD)result)
            break;
        }
        ++v222;
        v223 -= 8;
        if (!v223)
        {
LABEL_419:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v225 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EE6745C(a1, v225);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v227 = *v226;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v229 = *(_QWORD *)v228 + 8 * *(unsigned int *)(v228 + 8);
            }
            else
            {
              v229 = 0;
            }
            while (v227 != (uint64_t *)v229)
            {
              if (((*(unsigned __int16 *)(*v227 + 32) | (*(unsigned __int8 *)(*v227 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v227);
                if (!(_DWORD)result)
                  return result;
              }
              ++v227;
            }
          }
          return 1;
        }
      }
      return result;
    case 25:
      v213 = *(unint64_t **)(a2 + 64);
      if (v213)
      {
        v216 = *v213;
        v215 = (uint64_t)(v213 + 1);
        v214 = v216;
        if ((v216 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
           || *(_BYTE *)(a1 + 8))
          && (sub_22EE74F64(a1, v214, v215) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        result = sub_22EE72E1C(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v544 = *v543;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v546 = *(_QWORD *)v545 + 8 * *(unsigned int *)(v545 + 8);
      }
      else
      {
        v546 = 0;
      }
      while (1)
      {
        if (v544 == (uint64_t *)v546)
          return 1;
        if (((*(unsigned __int16 *)(*v544 + 32) | (*(unsigned __int8 *)(*v544 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v544);
          if (!(_DWORD)result)
            break;
        }
        ++v544;
      }
      return result;
    case 26:
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v444 = *(_DWORD *)v4 & 0x7F;
      v445 = v444 > 0x39 || ((1 << v444) & 0x3F0003E01011066) == 0;
      v446 = !v445 || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0 || v444 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v446);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v448 = *v447;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v450 = *(_QWORD *)v449 + 8 * *(unsigned int *)(v449 + 8);
      }
      else
      {
        v450 = 0;
      }
      while (2)
      {
        if (v448 == (uint64_t *)v450)
          return 1;
        if (((*(unsigned __int16 *)(*v448 + 32) | (*(unsigned __int8 *)(*v448 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v448), (_DWORD)result))
        {
          ++v448;
          continue;
        }
        break;
      }
      return result;
    case 27:
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      if ((v117 = *(_DWORD *)v4 & 0x7F, v117 <= 0x39) && ((1 << v117) & 0x3F0003E01011066) != 0
        || v117 - 70 <= 0xD && ((1 << (v117 - 70)) & 0x2803) != 0
        || v117 - 19 <= 4)
      {
        v118 = sub_22EFCAE04(a2);
      }
      else
      {
        v118 = 0;
      }
      result = sub_22EE7A124(a1, v118);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v120 = *v119;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v122 = *(_QWORD *)v121 + 8 * *(unsigned int *)(v121 + 8);
      }
      else
      {
        v122 = 0;
      }
      while (2)
      {
        if (v120 == (uint64_t *)v122)
          return 1;
        if (((*(unsigned __int16 *)(*v120 + 32) | (*(unsigned __int8 *)(*v120 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v120), (_DWORD)result))
        {
          ++v120;
          continue;
        }
        break;
      }
      return result;
    case 28:
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v418 = *(_QWORD *)(a2 + 48);
      if (!v418 || (sub_22EFC78D8(*(_QWORD *)(a2 + 48)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v418);
        if (!(_DWORD)result)
          return result;
      }
      if ((v419 = *(_DWORD *)v4 & 0x7F, v419 <= 0x39) && ((1 << v419) & 0x3F0003E01011066) != 0
        || v419 - 70 <= 0xD && ((1 << (v419 - 70)) & 0x2803) != 0
        || v419 - 19 <= 4)
      {
        v420 = sub_22EFCAE04(a2);
      }
      else
      {
        v420 = 0;
      }
      result = sub_22EE7A124(a1, v420);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v422 = *v421;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v424 = *(_QWORD *)v423 + 8 * *(unsigned int *)(v423 + 8);
      }
      else
      {
        v424 = 0;
      }
      while (2)
      {
        if (v422 == (uint64_t *)v424)
          return 1;
        if (((*(unsigned __int16 *)(*v422 + 32) | (*(unsigned __int8 *)(*v422 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v422), (_DWORD)result))
        {
          ++v422;
          continue;
        }
        break;
      }
      return result;
    case 29:
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v425 = *(_QWORD *)(a2 + 48);
      if (!v425 || (sub_22EFC78D8(*(_QWORD *)(a2 + 48)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v425);
        if (!(_DWORD)result)
          return result;
      }
      if ((v426 = *(_DWORD *)v4 & 0x7F, v426 <= 0x39) && ((1 << v426) & 0x3F0003E01011066) != 0
        || v426 - 70 <= 0xD && ((1 << (v426 - 70)) & 0x2803) != 0
        || v426 - 19 <= 4)
      {
        v427 = sub_22EFCAE04(a2);
      }
      else
      {
        v427 = 0;
      }
      result = sub_22EE7A124(a1, v427);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v429 = *v428;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v431 = *(_QWORD *)v430 + 8 * *(unsigned int *)(v430 + 8);
      }
      else
      {
        v431 = 0;
      }
      while (2)
      {
        if (v429 == (uint64_t *)v431)
          return 1;
        if (((*(unsigned __int16 *)(*v429 + 32) | (*(unsigned __int8 *)(*v429 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v429), (_DWORD)result))
        {
          ++v429;
          continue;
        }
        break;
      }
      return result;
    case 30:
      v364 = *(_QWORD *)(a2 + 48);
      if (!v364 || (sub_22EFC78D8(*(_QWORD *)(a2 + 48)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v364);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v365 = *(_DWORD *)v4 & 0x7F, v365 <= 0x39) && ((1 << v365) & 0x3F0003E01011066) != 0
        || v365 - 70 <= 0xD && ((1 << (v365 - 70)) & 0x2803) != 0
        || v365 - 19 <= 4)
      {
        v366 = sub_22EFCAE04(a2);
      }
      else
      {
        v366 = 0;
      }
      result = sub_22EE7A124(a1, v366);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v368 = *v367;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v370 = *(_QWORD *)v369 + 8 * *(unsigned int *)(v369 + 8);
      }
      else
      {
        v370 = 0;
      }
      while (2)
      {
        if (v368 == (uint64_t *)v370)
          return 1;
        if (((*(unsigned __int16 *)(*v368 + 32) | (*(unsigned __int8 *)(*v368 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v368), (_DWORD)result))
        {
          ++v368;
          continue;
        }
        break;
      }
      return result;
    case 31:
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v275 = *(_QWORD *)(a2 + 48);
      if (!v275 || (sub_22EFC78D8(*(_QWORD *)(a2 + 48)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v275);
        if (!(_DWORD)result)
          return result;
      }
      if ((v276 = *(_DWORD *)v4 & 0x7F, v276 <= 0x39) && ((1 << v276) & 0x3F0003E01011066) != 0
        || v276 - 70 <= 0xD && ((1 << (v276 - 70)) & 0x2803) != 0
        || v276 - 19 <= 4)
      {
        v277 = sub_22EFCAE04(a2);
      }
      else
      {
        v277 = 0;
      }
      result = sub_22EE7A124(a1, v277);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v279 = *v278;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v281 = *(_QWORD *)v280 + 8 * *(unsigned int *)(v280 + 8);
      }
      else
      {
        v281 = 0;
      }
      while (2)
      {
        if (v279 == (uint64_t *)v281)
          return 1;
        if (((*(unsigned __int16 *)(*v279 + 32) | (*(unsigned __int8 *)(*v279 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v279), (_DWORD)result))
        {
          ++v279;
          continue;
        }
        break;
      }
      return result;
    case 32:
      v371 = *(_QWORD *)(a2 + 48);
      if (!v371 || (sub_22EFC78D8(*(_QWORD *)(a2 + 48)) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v371);
        if (!(_DWORD)result)
          return result;
      }
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v591 = sub_22F259350(a2);
        result = sub_22EE735B0(a1, (unsigned int *)v591);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EE7A714(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v372 = *(_DWORD *)v4 & 0x7F, v372 <= 0x39) && ((1 << v372) & 0x3F0003E01011066) != 0
        || v372 - 70 <= 0xD && ((1 << (v372 - 70)) & 0x2803) != 0
        || v372 - 19 <= 4)
      {
        v373 = sub_22EFCAE04(a2);
      }
      else
      {
        v373 = 0;
      }
      result = sub_22EE7A124(a1, v373);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v375 = *v374;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v377 = *(_QWORD *)v376 + 8 * *(unsigned int *)(v376 + 8);
      }
      else
      {
        v377 = 0;
      }
      while (2)
      {
        if (v375 == (uint64_t *)v377)
          return 1;
        if (((*(unsigned __int16 *)(*v375 + 32) | (*(unsigned __int8 *)(*v375 + 34) << 16)) & 0x20000) != 0
          || (result = sub_22EE7A1CC(a1, *v375), (_DWORD)result))
        {
          ++v375;
          continue;
        }
        break;
      }
      return result;
    case 33:
      v149 = *(_QWORD *)(a2 + 120);
      if ((v149 & 4) == 0)
        goto LABEL_278;
      v150 = 0;
      while (1)
      {
        v151 = v149 & 0xFFFFFFFFFFFFFFF8;
        if (v150 >= *(unsigned int *)(v151 + 16))
          break;
        sub_22EE7A714(a1, *(_QWORD *)(*(_QWORD *)(v151 + 24) + 8 * v150++));
        v149 = *(_QWORD *)(a2 + 120);
        if ((v149 & 4) == 0)
        {
LABEL_278:
          v152 = 0;
          v153 = 0;
          goto LABEL_1068;
        }
      }
      v152 = *(_QWORD *)v151;
      v153 = *(_QWORD *)(v151 + 8);
LABEL_1068:
      result = sub_22EE7384C(a1, v152, v153);
      if (!(_DWORD)result)
        return result;
      v547 = *(_QWORD *)(a2 + 128);
      if ((v547 & 4) != 0)
      {
        v548 = (unint64_t *)(v547 & 0xFFFFFFFFFFFFFFF8);
        if ((v547 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((v551 = *v548, v550 = (uint64_t)(v548 + 1), v549 = v551, v551 >= 0x10)
            && (*(_BYTE *)(*(_QWORD *)(v549 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v549, v550);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      result = sub_22EE7A124(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v553 = *v552;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v555 = *(_QWORD *)v554 + 8 * *(unsigned int *)(v554 + 8);
      }
      else
      {
        v555 = 0;
      }
      if (v553 == (uint64_t *)v555)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v553 + 32) | (*(unsigned __int8 *)(*v553 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v553);
          if (!(_DWORD)result)
            break;
        }
        if (++v553 == (uint64_t *)v555)
          return 1;
      }
      return result;
    case 34:
      result = sub_22EE7A7BC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EE7A124(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v124 = *v123;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v126 = *(_QWORD *)v125 + 8 * *(unsigned int *)(v125 + 8);
      }
      else
      {
        v126 = 0;
      }
      if (v124 == (uint64_t *)v126)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v124 + 32) | (*(unsigned __int8 *)(*v124 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v124);
          if (!(_DWORD)result)
            break;
        }
        if (++v124 == (uint64_t *)v126)
          return 1;
      }
      return result;
    case 35:
      result = sub_22EE7A830(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EE7A124(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v102 = *v101;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v104 = *(_QWORD *)v103 + 8 * *(unsigned int *)(v103 + 8);
      }
      else
      {
        v104 = 0;
      }
      if (v102 == (uint64_t *)v104)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v102 + 32) | (*(unsigned __int8 *)(*v102 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v102);
          if (!(_DWORD)result)
            break;
        }
        if (++v102 == (uint64_t *)v104)
          return 1;
      }
      return result;
    case 36:
      v105 = *(unint64_t ***)(a2 + 160);
      if (v105)
      {
        v106 = *v105;
        if (*v105)
        {
          if ((v109 = *v106, v108 = (uint64_t)(v106 + 1), v107 = v109, v109 >= 0x10)
            && (*(_BYTE *)(*(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v107, v108);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      v110 = *(_QWORD *)(a2 + 120);
      if ((v110 & 4) != 0)
      {
        v524 = (uint64_t *)(v110 & 0xFFFFFFFFFFFFFFF8);
        v111 = *v524;
        v112 = v524[1];
      }
      else
      {
        v111 = 0;
        v112 = 0;
      }
      result = sub_22EE7384C(a1, v111, v112);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EE7A124(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v526 = *v525;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v528 = *(_QWORD *)v527 + 8 * *(unsigned int *)(v527 + 8);
      }
      else
      {
        v528 = 0;
      }
      if (v526 == (uint64_t *)v528)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v526 + 32) | (*(unsigned __int8 *)(*v526 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v526);
          if (!(_DWORD)result)
            break;
        }
        if (++v526 == (uint64_t *)v528)
          return 1;
      }
      return result;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_114;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_114;
      v65 = (uint64_t *)(v63 + 16);
      v66 = 8 * v64;
      while (1)
      {
        v67 = *v65;
        if (!*v65 || (sub_22EFC78D8(*v65) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v67);
          if (!(_DWORD)result)
            return result;
        }
        ++v65;
        v66 -= 8;
        if (!v66)
        {
LABEL_114:
          v68 = *(_QWORD *)(a2 + 192);
          v69 = *(unsigned int *)(v68 + 8);
          if ((_DWORD)v69)
          {
            v70 = (unsigned int *)(v68 + 16);
            while ((sub_22EE735B0(a1, v70) & 1) != 0)
            {
              v70 += 8;
              if (!--v69)
                goto LABEL_118;
            }
            return 0;
          }
LABEL_118:
          result = sub_22EE7A830(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EE7A124(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v72 = *v71;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v74 = *(_QWORD *)v73 + 8 * *(unsigned int *)(v73 + 8);
            }
            else
            {
              v74 = 0;
            }
            if (v72 != (uint64_t *)v74)
            {
              while (1)
              {
                if (((*(unsigned __int16 *)(*v72 + 32) | (*(unsigned __int8 *)(*v72 + 34) << 16)) & 0x20000) == 0)
                {
                  result = sub_22EE7A1CC(a1, *v72);
                  if (!(_DWORD)result)
                    break;
                }
                if (++v72 == (uint64_t *)v74)
                  return 1;
              }
              return result;
            }
          }
          return 1;
        }
      }
    case 38:
      v432 = *(_QWORD *)(a2 + 48);
      if (v432)
      {
        result = sub_22EE72E1C(a1, v432 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EE79DBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v433 = *(_QWORD *)(a2 + 72);
      if (v433 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v434 = (unint64_t *)(v433 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v434)
          v434 = (unint64_t *)v434[1];
        if ((v437 = *v434, v436 = (uint64_t)(v434 + 1), v435 = v437, v437 >= 0x10)
          && (*(_BYTE *)(*(_QWORD *)(v435 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
          || *(_BYTE *)(a1 + 8))
        {
          result = sub_22EE74F64(a1, v435, v436);
          if (!(_DWORD)result)
            return result;
        }
      }
      if ((v438 = *(_DWORD *)v4 & 0x7F, v438 <= 0x39) && ((1 << v438) & 0x3F0003E01011066) != 0
        || v438 - 70 <= 0xD && ((1 << (v438 - 70)) & 0x2803) != 0
        || v438 - 19 <= 4)
      {
        v439 = sub_22EFCAE04(a2);
      }
      else
      {
        v439 = 0;
      }
      result = sub_22EE7A124(a1, v439);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v441 = *v440;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v443 = *(_QWORD *)v442 + 8 * *(unsigned int *)(v442 + 8);
      }
      else
      {
        v443 = 0;
      }
      if (v441 == (uint64_t *)v443)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v441 + 32) | (*(unsigned __int8 *)(*v441 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v441);
          if (!(_DWORD)result)
            break;
        }
        if (++v441 == (uint64_t *)v443)
          return 1;
      }
      return result;
    case 39:
      return (sub_22EE79F24(a1, a2) & 1) != 0;
    case 40:
      v181 = *(_QWORD *)(a2 + 80);
      v182 = (unint64_t *)(v181 & 0xFFFFFFFFFFFFFFF8);
      if ((v181 & 4) != 0)
        v182 = (unint64_t *)*v182;
      v185 = *v182;
      v184 = (uint64_t)(v182 + 1);
      v183 = v185;
      if ((v185 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v183 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
        && !*(_BYTE *)(a1 + 8))
      {
        goto LABEL_1106;
      }
      result = sub_22EE74F64(a1, v183, v184);
      if (!(_DWORD)result)
        return result;
      if ((v186 = *(_DWORD *)v4 & 0x7F, v186 <= 0x39) && ((1 << v186) & 0x3F0003E01011066) != 0
        || v186 - 70 <= 0xD && ((1 << (v186 - 70)) & 0x2803) != 0
        || v186 - 19 <= 4)
      {
        v187 = sub_22EFCAE04(a2);
      }
      else
      {
LABEL_1106:
        v187 = 0;
      }
      result = sub_22EE7A124(a1, v187);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v565 = *v564;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v567 = *(_QWORD *)v566 + 8 * *(unsigned int *)(v566 + 8);
      }
      else
      {
        v567 = 0;
      }
      if (v565 == (uint64_t *)v567)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v565 + 32) | (*(unsigned __int8 *)(*v565 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v565);
          if (!(_DWORD)result)
            break;
        }
        if (++v565 == (uint64_t *)v567)
          return 1;
      }
      return result;
    case 41:
      v286 = *(_QWORD *)(a2 + 80);
      v287 = (unint64_t *)(v286 & 0xFFFFFFFFFFFFFFF8);
      if ((v286 & 4) != 0)
        v287 = (unint64_t *)*v287;
      v290 = *v287;
      v289 = (uint64_t)(v287 + 1);
      v288 = v290;
      if ((v290 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v288 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
        && !*(_BYTE *)(a1 + 8))
      {
        goto LABEL_1119;
      }
      result = sub_22EE74F64(a1, v288, v289);
      if (!(_DWORD)result)
        return result;
      if ((v291 = *(_DWORD *)v4 & 0x7F, v291 <= 0x39) && ((1 << v291) & 0x3F0003E01011066) != 0
        || v291 - 70 <= 0xD && ((1 << (v291 - 70)) & 0x2803) != 0
        || v291 - 19 <= 4)
      {
        v292 = sub_22EFCAE04(a2);
      }
      else
      {
LABEL_1119:
        v292 = 0;
      }
      result = sub_22EE7A124(a1, v292);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v569 = *v568;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v571 = *(_QWORD *)v570 + 8 * *(unsigned int *)(v570 + 8);
      }
      else
      {
        v571 = 0;
      }
      if (v569 == (uint64_t *)v571)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v569 + 32) | (*(unsigned __int8 *)(*v569 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v569);
          if (!(_DWORD)result)
            break;
        }
        if (++v569 == (uint64_t *)v571)
          return 1;
      }
      return result;
    case 42:
      if (*(_DWORD *)(a2 + 64))
        return 1;
      result = sub_22EE7384C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((v402 = *(_DWORD *)v4 & 0x7F, v402 <= 0x39) && ((1 << v402) & 0x3F0003E01011066) != 0
        || (v402 - 70 <= 0xD ? (v597 = ((1 << (v402 - 70)) & 0x2803) == 0) : (v597 = 1), !v597 || v402 - 19 <= 4))
      {
        v403 = sub_22EFCAE04(a2);
      }
      else
      {
        v403 = 0;
      }
      result = sub_22EE7A124(a1, v403);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v405 = *v404;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v407 = *(_QWORD *)v406 + 8 * *(unsigned int *)(v406 + 8);
      }
      else
      {
        v407 = 0;
      }
      if (v405 == (uint64_t *)v407)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v405 + 32) | (*(unsigned __int8 *)(*v405 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v405);
          if (!(_DWORD)result)
            break;
        }
        if (++v405 == (uint64_t *)v407)
          return 1;
      }
      return result;
    case 43:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v40 = *v39;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v42 = *(_QWORD *)v41 + 8 * *(unsigned int *)(v41 + 8);
      }
      else
      {
        v42 = 0;
      }
      if (v40 == (uint64_t *)v42)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v40 + 32) | (*(unsigned __int8 *)(*v40 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v40);
          if (!(_DWORD)result)
            break;
        }
        if (++v40 == (uint64_t *)v42)
          return 1;
      }
      return result;
    case 44:
      result = sub_22EE7384C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v138 = *(_DWORD *)v4 & 0x7F;
      v139 = v138 > 0x39 || ((1 << v138) & 0x3F0003E01011066) == 0;
      v140 = !v139 || v138 - 70 <= 0xD && ((1 << (v138 - 70)) & 0x2803) != 0 || v138 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v140);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v142 = *v141;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v144 = *(_QWORD *)v143 + 8 * *(unsigned int *)(v143 + 8);
      }
      else
      {
        v144 = 0;
      }
      if (v142 == (uint64_t *)v144)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v142 + 32) | (*(unsigned __int8 *)(*v142 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v142);
          if (!(_DWORD)result)
            break;
        }
        if (++v142 == (uint64_t *)v144)
          return 1;
      }
      return result;
    case 45:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v379 = *v378;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v381 = *(_QWORD *)v380 + 8 * *(unsigned int *)(v380 + 8);
      }
      else
      {
        v381 = 0;
      }
      if (v379 == (uint64_t *)v381)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v379 + 32) | (*(unsigned __int8 *)(*v379 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v379);
          if (!(_DWORD)result)
            break;
        }
        if (++v379 == (uint64_t *)v381)
          return 1;
      }
      return result;
    case 46:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v468 = *v467;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v470 = *(_QWORD *)v469 + 8 * *(unsigned int *)(v469 + 8);
      }
      else
      {
        v470 = 0;
      }
      if (v468 == (uint64_t *)v470)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v468 + 32) | (*(unsigned __int8 *)(*v468 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v468);
          if (!(_DWORD)result)
            break;
        }
        if (++v468 == (uint64_t *)v470)
          return 1;
      }
      return result;
    case 47:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v80 = *v79;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v82 = *(_QWORD *)v81 + 8 * *(unsigned int *)(v81 + 8);
      }
      else
      {
        v82 = 0;
      }
      if (v80 == (uint64_t *)v82)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v80 + 32) | (*(unsigned __int8 *)(*v80 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v80);
          if (!(_DWORD)result)
            break;
        }
        if (++v80 == (uint64_t *)v82)
          return 1;
      }
      return result;
    case 48:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v155 = *v154;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v157 = *(_QWORD *)v156 + 8 * *(unsigned int *)(v156 + 8);
      }
      else
      {
        v157 = 0;
      }
      if (v155 == (uint64_t *)v157)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v155 + 32) | (*(unsigned __int8 *)(*v155 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v155);
          if (!(_DWORD)result)
            break;
        }
        if (++v155 == (uint64_t *)v157)
          return 1;
      }
      return result;
    case 49:
      result = sub_22EE7A8CC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v176 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v556 = v176 & 0xFFFFFFFFFFFFFFFCLL;
        v557 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v557 && (_DWORD)v557 != 3)
          v556 = *(_QWORD *)(v556 + 8);
        if ((sub_22EE6745C(a1, v556) & 1) == 0)
          return 0;
      }
      else if ((v176 & 3) != 0 && (v176 & 3) != 3)
      {
        result = sub_22EE6745C(a1, v176 & 0xFFFFFFFFFFFFFFFCLL);
        if (!(_DWORD)result)
          return result;
      }
      v558 = *(_DWORD *)v4 & 0x7F;
      if (v558 <= 0x39 && ((1 << v558) & 0x3F0003E01011066) != 0
        || v558 - 70 <= 0xD && ((1 << (v558 - 70)) & 0x2803) != 0
        || v558 - 19 <= 4)
      {
        v559 = sub_22EFCAE04(a2);
      }
      else
      {
        v559 = 0;
      }
      result = sub_22EE7A124(a1, v559);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(v4 + 1) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v561 = *v560;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v563 = *(_QWORD *)v562 + 8 * *(unsigned int *)(v562 + 8);
        }
        else
        {
          v563 = 0;
        }
        if (v561 == (uint64_t *)v563)
          return 1;
        while (1)
        {
          if (((*(unsigned __int16 *)(*v561 + 32) | (*(unsigned __int8 *)(*v561 + 34) << 16)) & 0x20000) == 0)
          {
            result = sub_22EE7A1CC(a1, *v561);
            if (!(_DWORD)result)
              break;
          }
          if (++v561 == (uint64_t *)v563)
            return 1;
        }
      }
      return result;
    case 50:
      result = sub_22EE7A8CC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v32 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v32 = *(_QWORD *)(v32 + 8);
        result = sub_22EE6745C(a1, v32);
        if (!(_DWORD)result)
          return result;
      }
      if ((v33 = *(_DWORD *)v4 & 0x7F, v33 <= 0x39) && ((1 << v33) & 0x3F0003E01011066) != 0
        || (v33 - 70 <= 0xD ? (v592 = ((1 << (v33 - 70)) & 0x2803) == 0) : (v592 = 1), !v592 || v33 - 19 <= 4))
      {
        v34 = sub_22EFCAE04(a2);
      }
      else
      {
        v34 = 0;
      }
      result = sub_22EE7A124(a1, v34);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v36 = *v35;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v38 = *(_QWORD *)v37 + 8 * *(unsigned int *)(v37 + 8);
      }
      else
      {
        v38 = 0;
      }
      if (v36 == (uint64_t *)v38)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v36 + 32) | (*(unsigned __int8 *)(*v36 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v36);
          if (!(_DWORD)result)
            break;
        }
        if (++v36 == (uint64_t *)v38)
          return 1;
      }
      return result;
    case 51:
      result = sub_22EE7A8CC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v483 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v483 = *(_QWORD *)(v483 + 8);
        result = sub_22EE6745C(a1, v483);
        if (!(_DWORD)result)
          return result;
      }
      if ((v484 = *(_DWORD *)v4 & 0x7F, v484 <= 0x39) && ((1 << v484) & 0x3F0003E01011066) != 0
        || (v484 - 70 <= 0xD ? (v593 = ((1 << (v484 - 70)) & 0x2803) == 0) : (v593 = 1), !v593 || v484 - 19 <= 4))
      {
        v485 = sub_22EFCAE04(a2);
      }
      else
      {
        v485 = 0;
      }
      result = sub_22EE7A124(a1, v485);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v487 = *v486;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v489 = *(_QWORD *)v488 + 8 * *(unsigned int *)(v488 + 8);
      }
      else
      {
        v489 = 0;
      }
      if (v487 == (uint64_t *)v489)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v487 + 32) | (*(unsigned __int8 *)(*v487 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v487);
          if (!(_DWORD)result)
            break;
        }
        if (++v487 == (uint64_t *)v489)
          return 1;
      }
      return result;
    case 52:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v464 = *v463;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v466 = *(_QWORD *)v465 + 8 * *(unsigned int *)(v465 + 8);
      }
      else
      {
        v466 = 0;
      }
      if (v464 == (uint64_t *)v466)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v464 + 32) | (*(unsigned __int8 *)(*v464 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v464);
          if (!(_DWORD)result)
            break;
        }
        if (++v464 == (uint64_t *)v466)
          return 1;
      }
      return result;
    case 53:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v76 = *v75;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v78 = *(_QWORD *)v77 + 8 * *(unsigned int *)(v77 + 8);
      }
      else
      {
        v78 = 0;
      }
      if (v76 == (uint64_t *)v78)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v76 + 32) | (*(unsigned __int8 *)(*v76 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v76);
          if (!(_DWORD)result)
            break;
        }
        if (++v76 == (uint64_t *)v78)
          return 1;
      }
      return result;
    case 54:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v452 = *v451;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v454 = *(_QWORD *)v453 + 8 * *(unsigned int *)(v453 + 8);
      }
      else
      {
        v454 = 0;
      }
      if (v452 == (uint64_t *)v454)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v452 + 32) | (*(unsigned __int8 *)(*v452 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v452);
          if (!(_DWORD)result)
            break;
        }
        if (++v452 == (uint64_t *)v454)
          return 1;
      }
      return result;
    case 55:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v460 = *v459;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v462 = *(_QWORD *)v461 + 8 * *(unsigned int *)(v461 + 8);
      }
      else
      {
        v462 = 0;
      }
      if (v460 == (uint64_t *)v462)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v460 + 32) | (*(unsigned __int8 *)(*v460 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v460);
          if (!(_DWORD)result)
            break;
        }
        if (++v460 == (uint64_t *)v462)
          return 1;
      }
      return result;
    case 56:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v84 = *v83;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v86 = *(_QWORD *)v85 + 8 * *(unsigned int *)(v85 + 8);
      }
      else
      {
        v86 = 0;
      }
      if (v84 == (uint64_t *)v86)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v84 + 32) | (*(unsigned __int8 *)(*v84 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v84);
          if (!(_DWORD)result)
            break;
        }
        if (++v84 == (uint64_t *)v86)
          return 1;
      }
      return result;
    case 57:
      result = sub_22EE7A9B8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      if (v399 == (uint64_t *)v401)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v399 + 32) | (*(unsigned __int8 *)(*v399 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v399);
          if (!(_DWORD)result)
            break;
        }
        if (++v399 == (uint64_t *)v401)
          return 1;
      }
      return result;
    case 58:
      result = sub_22EE7A8CC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v158 = *(_DWORD *)v4 & 0x7F;
      v159 = v158 > 0x39 || ((1 << v158) & 0x3F0003E01011066) == 0;
      v160 = !v159 || v158 - 70 <= 0xD && ((1 << (v158 - 70)) & 0x2803) != 0 || v158 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v160);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v162 = *v161;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v164 = *(_QWORD *)v163 + 8 * *(unsigned int *)(v163 + 8);
      }
      else
      {
        v164 = 0;
      }
      if (v162 == (uint64_t *)v164)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v162 + 32) | (*(unsigned __int8 *)(*v162 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v162);
          if (!(_DWORD)result)
            break;
        }
        if (++v162 == (uint64_t *)v164)
          return 1;
      }
      return result;
    case 59:
      result = sub_22EE7A8CC(a1, a2);
      if (!(_DWORD)result)
        return result;
      v408 = *(_QWORD *)(a2 + 72);
      if (v408 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v409 = v408 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v409)
          v409 = *(_QWORD *)(v409 + 8);
        result = sub_22EE6745C(a1, v409);
        if (!(_DWORD)result)
          return result;
      }
      if ((v410 = *(_DWORD *)v4 & 0x7F, v410 <= 0x39) && ((1 << v410) & 0x3F0003E01011066) != 0
        || v410 - 70 <= 0xD && ((1 << (v410 - 70)) & 0x2803) != 0
        || v410 - 19 <= 4)
      {
        v411 = sub_22EFCAE04(a2);
      }
      else
      {
        v411 = 0;
      }
      result = sub_22EE7A124(a1, v411);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v413 = *v412;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v415 = *(_QWORD *)v414 + 8 * *(unsigned int *)(v414 + 8);
      }
      else
      {
        v415 = 0;
      }
      if (v413 == (uint64_t *)v415)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v413 + 32) | (*(unsigned __int8 *)(*v413 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v413);
          if (!(_DWORD)result)
            break;
        }
        if (++v413 == (uint64_t *)v415)
          return 1;
      }
      return result;
    case 60:
      result = sub_22EE7ADD0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v188 = *(_DWORD *)v4 & 0x7F;
      v189 = v188 > 0x39 || ((1 << v188) & 0x3F0003E01011066) == 0;
      v190 = !v189 || v188 - 70 <= 0xD && ((1 << (v188 - 70)) & 0x2803) != 0 || v188 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v190);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v192 = *v191;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v194 = *(_QWORD *)v193 + 8 * *(unsigned int *)(v193 + 8);
      }
      else
      {
        v194 = 0;
      }
      if (v192 == (uint64_t *)v194)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v192 + 32) | (*(unsigned __int8 *)(*v192 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v192);
          if (!(_DWORD)result)
            break;
        }
        if (++v192 == (uint64_t *)v194)
          return 1;
      }
      return result;
    case 61:
      result = sub_22EE7ADD0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v305)
        goto LABEL_568;
      v306 = (uint64_t *)(a2 + 104);
      v307 = 8 * v305;
      while (1)
      {
        v308 = *v306;
        if (!*v306 || (sub_22EFC78D8(*v306) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v308);
          if (!(_DWORD)result)
            break;
        }
        ++v306;
        v307 -= 8;
        if (!v307)
        {
LABEL_568:
          v309 = *(_DWORD *)v4 & 0x7F;
          v310 = v309 > 0x39 || ((1 << v309) & 0x3F0003E01011066) == 0;
          if (v310
            && (v309 - 70 <= 0xD ? (v594 = ((1 << (v309 - 70)) & 0x2803) == 0) : (v594 = 1), v594 && v309 - 19 > 4))
          {
            v311 = 0;
          }
          else
          {
            v311 = sub_22EFCAE04(a2);
          }
          result = sub_22EE7A124(a1, v311);
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v313 = *v312;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
            }
            else
            {
              v315 = 0;
            }
            if (v313 == (uint64_t *)v315)
              return 1;
            while (1)
            {
              if (((*(unsigned __int16 *)(*v313 + 32) | (*(unsigned __int8 *)(*v313 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v313);
                if (!(_DWORD)result)
                  break;
              }
              if (++v313 == (uint64_t *)v315)
                return 1;
            }
          }
          return result;
        }
      }
      return result;
    case 62:
      result = sub_22EE7ADD0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v328 = *(_DWORD *)v4 & 0x7F;
      v329 = v328 > 0x39 || ((1 << v328) & 0x3F0003E01011066) == 0;
      v330 = !v329 || v328 - 70 <= 0xD && ((1 << (v328 - 70)) & 0x2803) != 0 || v328 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v330);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v332 = *v331;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v334 = *(_QWORD *)v333 + 8 * *(unsigned int *)(v333 + 8);
      }
      else
      {
        v334 = 0;
      }
      if (v332 == (uint64_t *)v334)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v332 + 32) | (*(unsigned __int8 *)(*v332 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v332);
          if (!(_DWORD)result)
            break;
        }
        if (++v332 == (uint64_t *)v334)
          return 1;
      }
      return result;
    case 63:
      result = sub_22EE7ADD0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v238 = *(_DWORD *)v4 & 0x7F;
      v239 = v238 > 0x39 || ((1 << v238) & 0x3F0003E01011066) == 0;
      v240 = !v239 || v238 - 70 <= 0xD && ((1 << (v238 - 70)) & 0x2803) != 0 || v238 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v240);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v242 = *v241;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v244 = *(_QWORD *)v243 + 8 * *(unsigned int *)(v243 + 8);
      }
      else
      {
        v244 = 0;
      }
      if (v242 == (uint64_t *)v244)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v242 + 32) | (*(unsigned __int8 *)(*v242 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v242);
          if (!(_DWORD)result)
            break;
        }
        if (++v242 == (uint64_t *)v244)
          return 1;
      }
      return result;
    case 64:
      result = sub_22EE7ADD0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v195 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v195 != 1024)
        goto LABEL_370;
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8);
      if (!(_DWORD)result)
        return result;
      v195 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_370:
      if (v195 != 1024 && v195 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v196 = sub_22EFBC5B4(a2);
        v197 = v196;
        if (v196 && (*(_BYTE *)v196 & 0xFE) == 0xAC)
          v197 = *(_QWORD *)(v196 + 16);
        result = sub_22EE6745C(a1, v197);
        if (!(_DWORD)result)
          return result;
      }
      if ((v198 = *(_DWORD *)v4 & 0x7F, v198 <= 0x39) && ((1 << v198) & 0x3F0003E01011066) != 0
        || v198 - 70 <= 0xD && ((1 << (v198 - 70)) & 0x2803) != 0
        || v198 - 19 <= 4)
      {
        v199 = sub_22EFCAE04(a2);
      }
      else
      {
        v199 = 0;
      }
      result = sub_22EE7A124(a1, v199);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      if (v201 == (uint64_t *)v203)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v201 + 32) | (*(unsigned __int8 *)(*v201 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v201);
          if (!(_DWORD)result)
            break;
        }
        if (++v201 == (uint64_t *)v203)
          return 1;
      }
      return result;
    case 65:
      v320 = *(unint64_t ***)(a2 + 120);
      if (v320)
      {
        v321 = *v320;
        if (*v320)
        {
          if ((v324 = *v321, v323 = (uint64_t)(v321 + 1), v322 = v324, v324 >= 0x10)
            && (*(_BYTE *)(*(_QWORD *)(v322 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v322, v323);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      v325 = *(_QWORD *)(a2 + 56);
      if ((v325 & 4) != 0)
      {
        v529 = (uint64_t *)(v325 & 0xFFFFFFFFFFFFFFF8);
        v326 = *v529;
        v327 = v529[1];
      }
      else
      {
        v326 = 0;
        v327 = 0;
      }
      result = sub_22EE7384C(a1, v326, v327);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v530 = *(_DWORD *)v4 & 0x7F;
      if (v530 <= 0x39 && ((1 << v530) & 0x3F0003E01011066) != 0
        || v530 - 70 <= 0xD && ((1 << (v530 - 70)) & 0x2803) != 0
        || v530 - 19 <= 4)
      {
        v531 = sub_22EFCAE04(a2);
      }
      else
      {
        v531 = 0;
      }
      result = sub_22EE7A124(a1, v531);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v533 = *v532;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v535 = *(_QWORD *)v534 + 8 * *(unsigned int *)(v534 + 8);
      }
      else
      {
        v535 = 0;
      }
      if (v533 == (uint64_t *)v535)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v533 + 32) | (*(unsigned __int8 *)(*v533 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v533);
          if (!(_DWORD)result)
            break;
        }
        if (++v533 == (uint64_t *)v535)
          return 1;
      }
      return result;
    case 66:
      v43 = *(_QWORD *)(a2 + 424);
      if (!v43)
        goto LABEL_74;
      v44 = *(_DWORD *)(v43 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v44)
        goto LABEL_74;
      v45 = (uint64_t *)(v43 + 16);
      v46 = 8 * v44;
      while (1)
      {
        v47 = *v45;
        if (!*v45 || (sub_22EFC78D8(*v45) & 1) == 0)
        {
          result = sub_22EE757EC(a1, v47);
          if (!(_DWORD)result)
            return result;
        }
        ++v45;
        v46 -= 8;
        if (!v46)
        {
LABEL_74:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = (unsigned int *)(v48 + 16);
            while ((sub_22EE735B0(a1, v50) & 1) != 0)
            {
              v50 += 8;
              if (!--v49)
                goto LABEL_78;
            }
            return 0;
          }
LABEL_78:
          result = sub_22EE7ADD0(a1, a2);
          if ((_DWORD)result)
          {
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v595 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v595 = 1), v595 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EE7A124(a1, v53);
            if ((_DWORD)result)
            {
              if ((*(_BYTE *)(v4 + 1) & 1) == 0)
                return 1;
              sub_22EFC8E88(a2);
              v55 = *v54;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
              }
              else
              {
                v57 = 0;
              }
              if (v55 == (uint64_t *)v57)
                return 1;
              while (1)
              {
                if (((*(unsigned __int16 *)(*v55 + 32) | (*(unsigned __int8 *)(*v55 + 34) << 16)) & 0x20000) == 0)
                {
                  result = sub_22EE7A1CC(a1, *v55);
                  if (!(_DWORD)result)
                    break;
                }
                if (++v55 == (uint64_t *)v57)
                  return 1;
              }
            }
          }
          return result;
        }
      }
    case 67:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v131 = *(_DWORD *)v4 & 0x7F;
      v132 = v131 > 0x39 || ((1 << v131) & 0x3F0003E01011066) == 0;
      v133 = !v132 || v131 - 70 <= 0xD && ((1 << (v131 - 70)) & 0x2803) != 0 || v131 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EE7A124(a1, v133);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v135 = *v134;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v137 = *(_QWORD *)v136 + 8 * *(unsigned int *)(v136 + 8);
      }
      else
      {
        v137 = 0;
      }
      if (v135 == (uint64_t *)v137)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v135 + 32) | (*(unsigned __int8 *)(*v135 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v135);
          if (!(_DWORD)result)
            break;
        }
        if (++v135 == (uint64_t *)v137)
          return 1;
      }
      return result;
    case 68:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v495 = *v494;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v497 = *(_QWORD *)v496 + 8 * *(unsigned int *)(v496 + 8);
      }
      else
      {
        v497 = 0;
      }
      if (v495 == (uint64_t *)v497)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v495 + 32) | (*(unsigned __int8 *)(*v495 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v495);
          if (!(_DWORD)result)
            break;
        }
        if (++v495 == (uint64_t *)v497)
          return 1;
      }
      return result;
    case 69:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v114 = *v113;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v116 = *(_QWORD *)v115 + 8 * *(unsigned int *)(v115 + 8);
      }
      else
      {
        v116 = 0;
      }
      if (v114 == (uint64_t *)v116)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v114 + 32) | (*(unsigned __int8 *)(*v114 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v114);
          if (!(_DWORD)result)
            break;
        }
        if (++v114 == (uint64_t *)v116)
          return 1;
      }
      return result;
    case 70:
      v20 = *(_DWORD **)(a2 + 56);
      v23 = *v20;
      v22 = (uint64_t *)(v20 + 4);
      v21 = v23;
      if (!v23)
        return (sub_22EE72E1C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v24 = 8 * v21;
      while ((sub_22EE7AE2C(a1, *v22) & 1) != 0)
      {
        ++v22;
        v24 -= 8;
        if (!v24)
          return (sub_22EE72E1C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 88));
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EE72E1C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EE6745C(a1, v62);
        if ((_DWORD)result)
          return (sub_22EE72E1C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v456 = *v455;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v458 = *(_QWORD *)v457 + 8 * *(unsigned int *)(v457 + 8);
      }
      else
      {
        v458 = 0;
      }
      if (v456 == (uint64_t *)v458)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v456 + 32) | (*(unsigned __int8 *)(*v456 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v456);
          if (!(_DWORD)result)
            break;
        }
        if (++v456 == (uint64_t *)v458)
          return 1;
      }
      return result;
    case 73:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v472 = *v471;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v474 = *(_QWORD *)v473 + 8 * *(unsigned int *)(v473 + 8);
      }
      else
      {
        v474 = 0;
      }
      if (v472 == (uint64_t *)v474)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v472 + 32) | (*(unsigned __int8 *)(*v472 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v472);
          if (!(_DWORD)result)
            break;
        }
        if (++v472 == (uint64_t *)v474)
          return 1;
      }
      return result;
    case 74:
      if (*(_DWORD *)(a2 + 60))
        return 1;
      if (!sub_22EE7384C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v475 = *(_DWORD *)(a2 + 24);
      v476 = *(_QWORD *)(a2 + 80);
      v608 = *(_QWORD *)(a2 + 40);
      v609 = v475;
      v610 = v476;
      if (!sub_22EE738E8(a1, &v608))
        return 0;
      if ((v477 = *(_DWORD *)v4 & 0x7F, v477 <= 0x39) && ((1 << v477) & 0x3F0003E01011066) != 0
        || v477 - 70 <= 0xD && ((1 << (v477 - 70)) & 0x2803) != 0
        || v477 - 19 <= 4)
      {
        v478 = sub_22EFCAE04(a2);
      }
      else
      {
        v478 = 0;
      }
      if (!sub_22EE7A124(a1, v478))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v480 = *v479;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v482 = *(_QWORD *)v481 + 8 * *(unsigned int *)(v481 + 8);
      }
      else
      {
        v482 = 0;
      }
      while (2)
      {
        if (v480 == (uint64_t *)v482)
          return 1;
        if (((*(unsigned __int16 *)(*v480 + 32) | (*(unsigned __int8 *)(*v480 + 34) << 16)) & 0x20000) != 0
          || sub_22EE7A1CC(a1, *v480))
        {
          ++v480;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v87 = *(unsigned int **)(a2 + 40);
      v88 = *v87;
      v89 = v87[1];
      if (!(_DWORD)v89)
        goto LABEL_160;
      v90 = &v87[2 * v88 + 4];
      v91 = 8 * v89;
      while ((sub_22EE6745C(a1, *(_QWORD *)v90) & 1) != 0)
      {
        v90 += 2;
        v91 -= 8;
        if (!v91)
        {
          v87 = *(unsigned int **)(a2 + 40);
          v88 = *v87;
LABEL_160:
          if ((_DWORD)v88)
          {
            v92 = (uint64_t *)(v87 + 4);
            v93 = 8 * v88;
            while ((sub_22EE7AE2C(a1, *v92) & 1) != 0)
            {
              ++v92;
              v93 -= 8;
              if (!v93)
                goto LABEL_164;
            }
            return 0;
          }
LABEL_164:
          v94 = *(_DWORD *)v4 & 0x7F;
          v95 = v94 > 0x39 || ((1 << v94) & 0x3F0003E01011066) == 0;
          if (v95 && (v94 - 70 <= 0xD ? (v590 = ((1 << (v94 - 70)) & 0x2803) == 0) : (v590 = 1), v590 && v94 - 19 > 4))
            v96 = 0;
          else
            v96 = sub_22EFCAE04(a2);
          result = sub_22EE7A124(a1, v96);
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v98 = *v97;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v100 = *(_QWORD *)v99 + 8 * *(unsigned int *)(v99 + 8);
            }
            else
            {
              v100 = 0;
            }
            if (v98 == (uint64_t *)v100)
              return 1;
            while (1)
            {
              if (((*(unsigned __int16 *)(*v98 + 32) | (*(unsigned __int8 *)(*v98 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v98);
                if (!(_DWORD)result)
                  break;
              }
              if (++v98 == (uint64_t *)v100)
                return 1;
            }
          }
          return result;
        }
      }
      return 0;
    case 76:
      v293 = *(_DWORD **)(a2 + 40);
      v296 = *v293;
      v295 = (uint64_t *)(v293 + 4);
      v294 = v296;
      if (!v296)
        goto LABEL_1168;
      v297 = 8 * v294;
      while ((sub_22EE7AE2C(a1, *v295) & 1) != 0)
      {
        ++v295;
        v297 -= 8;
        if (!v297)
        {
          v298 = *(_DWORD *)v4 & 0x7F;
          v299 = v298 > 0x39 || ((1 << v298) & 0x3F0003E01011066) == 0;
          if (v299
            && (v298 - 70 <= 0xD ? (v588 = ((1 << (v298 - 70)) & 0x2803) == 0) : (v588 = 1), v588 && v298 - 19 > 4))
          {
LABEL_1168:
            v300 = 0;
          }
          else
          {
            v300 = sub_22EFCAE04(a2);
          }
          result = sub_22EE7A124(a1, v300);
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v599 = *v598;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v601 = *(_QWORD *)v600 + 8 * *(unsigned int *)(v600 + 8);
            }
            else
            {
              v601 = 0;
            }
            if (v599 == (uint64_t *)v601)
              return 1;
            while (1)
            {
              if (((*(unsigned __int16 *)(*v599 + 32) | (*(unsigned __int8 *)(*v599 + 34) << 16)) & 0x20000) == 0)
              {
                result = sub_22EE7A1CC(a1, *v599);
                if (!(_DWORD)result)
                  break;
              }
              if (++v599 == (uint64_t *)v601)
                return 1;
            }
          }
          return result;
        }
      }
      return 0;
    case 77:
      v25 = *(unsigned int **)(a2 + 40);
      v26 = v25[1];
      if (!(_DWORD)v26)
        goto LABEL_1152;
      v27 = &v25[2 * *v25 + 4];
      v28 = 8 * v26;
      do
      {
        if ((sub_22EE6745C(a1, *(_QWORD *)v27) & 1) == 0)
          return 0;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      v29 = *(_DWORD *)v4 & 0x7F;
      v30 = v29 > 0x39 || ((1 << v29) & 0x3F0003E01011066) == 0;
      if (v30 && (v29 - 70 <= 0xD ? (v583 = ((1 << (v29 - 70)) & 0x2803) == 0) : (v583 = 1), v583 && v29 - 19 > 4))
LABEL_1152:
        v31 = 0;
      else
        v31 = sub_22EFCAE04(a2);
      result = sub_22EE7A124(a1, v31);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v585 = *v584;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v587 = *(_QWORD *)v586 + 8 * *(unsigned int *)(v586 + 8);
      }
      else
      {
        v587 = 0;
      }
      if (v585 == (uint64_t *)v587)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v585 + 32) | (*(unsigned __int8 *)(*v585 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v585);
          if (!(_DWORD)result)
            break;
        }
        if (++v585 == (uint64_t *)v587)
          return 1;
      }
      return result;
    case 78:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v491 = *v490;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v493 = *(_QWORD *)v492 + 8 * *(unsigned int *)(v492 + 8);
      }
      else
      {
        v493 = 0;
      }
      if (v491 == (uint64_t *)v493)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v491 + 32) | (*(unsigned __int8 *)(*v491 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v491);
          if (!(_DWORD)result)
            break;
        }
        if (++v491 == (uint64_t *)v493)
          return 1;
      }
      return result;
    case 79:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v17 = *v16;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v19 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
      }
      else
      {
        v19 = 0;
      }
      if (v17 == (uint64_t *)v19)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v17 + 32) | (*(unsigned __int8 *)(*v17 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v17);
          if (!(_DWORD)result)
            break;
        }
        if (++v17 == (uint64_t *)v19)
          return 1;
      }
      return result;
    case 80:
      result = sub_22EE7A124(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v59 + 32) | (*(unsigned __int8 *)(*v59 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v59);
          if (!(_DWORD)result)
            break;
        }
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return result;
    case 81:
      v171 = sub_22EFCAE04(a2);
      result = sub_22EE7A124(a1, v171);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      if (v173 == (uint64_t *)v175)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v173 + 32) | (*(unsigned __int8 *)(*v173 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v173);
          if (!(_DWORD)result)
            break;
        }
        if (++v173 == (uint64_t *)v175)
          return 1;
      }
      return result;
    case 82:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL);
      if (!(_DWORD)result)
        return result;
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v165 = *(_DWORD *)v4 & 0x7F, v165 <= 0x39) && ((1 << v165) & 0x3F0003E01011066) != 0
        || v165 - 70 <= 0xD && ((1 << (v165 - 70)) & 0x2803) != 0
        || v165 - 19 <= 4)
      {
        v166 = sub_22EFCAE04(a2);
      }
      else
      {
        v166 = 0;
      }
      result = sub_22EE7A124(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = operator new(v13 - v12);
        memmove(v15, v12, v14);
        v14 = (int64_t)v15 + 8 * (v14 >> 3);
      }
      if (v14 - (_QWORD)v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EE7A124(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != (void *)v14)
        {
          v536 = (uint64_t *)v15;
          do
          {
            v537 = *v536;
            if ((*(_DWORD *)(*v536 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*v536 + 28) & 0x7Fu) - 35 > 2
               || (v538 = *(_QWORD *)(v537 + 128)) == 0
               || ((*(unsigned __int16 *)(v538 + 8) | (*(unsigned __int8 *)(v538 + 10) << 16)) & 0x100000) == 0)
              && (sub_22EFC78D8(*v536) & 1) == 0
              && !sub_22EE757EC(a1, v537))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            ++v536;
          }
          while (v536 != (uint64_t *)v14);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v540 = *v539;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v542 = *(_QWORD *)v541 + 8 * *(unsigned int *)(v541 + 8);
      }
      else
      {
        v542 = 0;
      }
      if (v540 == (uint64_t *)v542)
        return 1;
      while (1)
      {
        if (((*(unsigned __int16 *)(*v540 + 32) | (*(unsigned __int8 *)(*v540 + 34) << 16)) & 0x20000) == 0)
        {
          result = sub_22EE7A1CC(a1, *v540);
          if (!(_DWORD)result)
            break;
        }
        if (++v540 == (uint64_t *)v542)
          return 1;
      }
      return result;
    default:
      return 1;
  }
  while (1)
  {
    if (((*(unsigned __int16 *)(*v168 + 32) | (*(unsigned __int8 *)(*v168 + 34) << 16)) & 0x20000) == 0)
    {
      result = sub_22EE7A1CC(a1, *v168);
      if (!(_DWORD)result)
        break;
    }
    if (++v168 == (uint64_t *)v170)
      return 1;
  }
  return result;
}

uint64_t sub_22EE79DBC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EE6745C(a1, *(_QWORD *)(a2 + 152)) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EE7A084(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EE79E00(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 40));
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EE7A124(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == (uint64_t *)v12)
      {
        return 1;
      }
      else
      {
        do
        {
          if (((*(unsigned __int16 *)(*v10 + 32) | (*(unsigned __int8 *)(*v10 + 34) << 16)) & 0x20000) == 0)
          {
            result = sub_22EE7A1CC(a1, *v10);
            if (!(_DWORD)result)
              break;
          }
          ++v10;
          result = 1;
        }
        while (v10 != (uint64_t *)v12);
      }
    }
  }
  return result;
}

uint64_t sub_22EE79F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_8;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  if (((v8 = *v5, v7 = (uint64_t)(v5 + 1), v6 = v8, v8 < 0x10)
     || (*(_BYTE *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
    && !*(_BYTE *)(a1 + 8)
    || (result = sub_22EE74F64(a1, v6, v7), (_DWORD)result))
  {
LABEL_8:
    v10 = *(_DWORD *)(a2 + 28) & 0x7F;
    v11 = v10 > 0x39 || ((1 << v10) & 0x3F0003E01011066) == 0;
    if (v11 && (v10 - 70 <= 0xD ? (v13 = ((1 << (v10 - 70)) & 0x2803) == 0) : (v13 = 1), v13 && v10 - 19 > 4))
      v12 = 0;
    else
      v12 = sub_22EFCAE04(a2);
    result = sub_22EE7A124(a1, v12);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v15 = *v14;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v17 = *(_QWORD *)v16 + 8 * *(unsigned int *)(v16 + 8);
      }
      else
      {
        v17 = 0;
      }
      if (v15 == (uint64_t *)v17)
      {
        return 1;
      }
      else
      {
        do
        {
          if (((*(unsigned __int16 *)(*v15 + 32) | (*(unsigned __int8 *)(*v15 + 34) << 16)) & 0x20000) == 0)
          {
            result = sub_22EE7A1CC(a1, *v15);
            if (!(_DWORD)result)
              break;
          }
          ++v15;
          result = 1;
        }
        while (v15 != (uint64_t *)v17);
      }
    }
  }
  return result;
}

uint64_t sub_22EE7A084(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EE7384C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EE738E8(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = (unsigned int *)(v5 + 16);
        v8 = v6 - 1;
        do
        {
          result = sub_22EE735B0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 8;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EE7A124(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0)
      && (sub_22EFC78D8(v4) & 1) == 0)
    {
      result = sub_22EE757EC(a1, v4);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EE7A1CC(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EE7A26C()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
    JUMPOUT(0x22EE7A20CLL);
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EE6745C(v0, *v3) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EE7A258);
    v6 = *(unint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EE6745C(v0, v8))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EE7A258);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(unint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EE6745C(v0, *v3) & 1) == 0)
          JUMPOUT(0x22EE7A39CLL);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EE7A258);
    v6 = *(unint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EE6745C(v0, v8))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EE7A258);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EE7A258);
    v3 = *(unint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EE6745C(v0, v5))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EE7A25CLL);
}

void sub_22EE7A618()
{
  JUMPOUT(0x22EE7A224);
}

void sub_22EE7A620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;

  if (sub_22EE6745C(v0, *(_QWORD *)(v1 + 40)))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(unint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EE6745C(v0, *v3) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EE7A39CLL);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(unint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EE6745C(v0, *v6) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(unint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EE6745C(v0, *v9) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(unint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EE6745C(v0, *v12) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EE7A258);
    v15 = *(unint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EE6745C(v0, v17))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EE7A25CLL);
}

uint64_t sub_22EE7A714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = (uint64_t *)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      if (!*v7 || (sub_22EFC78D8(*v7) & 1) == 0)
      {
        result = sub_22EE757EC(a1, v8);
        if (!(_DWORD)result)
          break;
      }
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v10 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v10)
      return 1;
    result = sub_22EE6745C(a1, v10);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EE7A7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EE7A714(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EE7384C(a1, v7, v8);
}

uint64_t sub_22EE7A830(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = sub_22EE7A7BC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v5;
      v8 = v6;
      while (1)
      {
        if (!*(_DWORD *)(v7 + 8))
        {
          if ((v9 = *(unint64_t **)(v7 + 16), v12 = *v9, v11 = (uint64_t)(v9 + 1), v10 = v12, v12 >= 0x10)
            && (*(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
            || *(_BYTE *)(a1 + 8))
          {
            result = sub_22EE74F64(a1, v10, v11);
            if (!(_DWORD)result)
              break;
          }
        }
        v7 += 24;
        if (v7 == v8)
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EE7A8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EE7A714(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EE7384C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        goto LABEL_12;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
LABEL_12:
      v14 = *v11;
      v13 = (uint64_t)(v11 + 1);
      v12 = v14;
      return (v14 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
          && !*(_BYTE *)(a1 + 8)
          || (sub_22EE74F64(a1, v12, v13) & 1) != 0;
    }
    result = sub_22EE72E1C(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EE7A9B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EE7A714(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EE7384C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v47 = *(_QWORD *)(a2 + 40);
    v48 = v10;
    v49 = v11;
    result = sub_22EE738E8(a1, &v47);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = (unsigned int *)(v14 + 16);
            while ((sub_22EE735B0(a1, v16) & 1) != 0)
            {
              v16 += 8;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = v17 & 4;
      v19 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v19 = (unint64_t *)v19[4];
      if (v19)
      {
        if ((v22 = *v19, v21 = (uint64_t)(v19 + 1), v20 = v22, v22 >= 0x10)
          && (*(_BYTE *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0
          || *(_BYTE *)(a1 + 8))
        {
          result = sub_22EE74F64(a1, v20, v21);
          if (!(_DWORD)result)
            return result;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = v17 & 4;
        }
      }
      if (!v18
        || (v23 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EE6745C(a1, v23), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v24 = sub_22EFD7ED0(a2);
          v25 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v24 != v25)
          {
            v26 = *(_QWORD *)v24;
            v27 = *(_WORD *)(*(_QWORD *)v24 + 28);
            if ((v27 & 4) != 0)
            {
              v28 = *(_QWORD *)v26 & 6;
              if ((v27 & 1) != 0 || v28 || !*(_DWORD *)(v26 + 16))
              {
                v29 = (unint64_t *)(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8);
                if (v28 || v29 == 0)
                  goto LABEL_46;
                v33 = *v29;
                v32 = (uint64_t)(v29 + 1);
                v31 = v33;
                if ((v33 < 0x10 || (*(_BYTE *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
                  && !*(_BYTE *)(a1 + 8))
                {
                  goto LABEL_46;
                }
                result = sub_22EE74F64(a1, v31, v32);
                if (!(_DWORD)result)
                  return result;
                if ((*(_WORD *)(v26 + 28) & 4) != 0)
                {
LABEL_46:
                  result = sub_22EE6745C(a1, *(_QWORD *)(v26 + 8));
                  if (!(_DWORD)result)
                    return result;
                }
              }
            }
            v24 += 8;
          }
        }
        v34 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_79;
        v35 = *(_WORD *)(a2 + 80) & 0x7F;
        v36 = -40;
        if (v35 > 0x46)
        {
          if (v35 == 83)
            goto LABEL_69;
          if (v35 == 71)
          {
            v36 = -56;
            goto LABEL_69;
          }
          if (v35 != 81)
          {
LABEL_64:
            v37 = v35 - 52;
            v38 = v35 - 33 >= 5;
            v39 = -48;
            if (!v38)
              v39 = -64;
            if (v37 >= 6)
              v36 = v39;
            else
              v36 = -72;
          }
        }
        else
        {
          if (v35 > 0x18)
            goto LABEL_63;
          if (v35 == 16)
          {
LABEL_55:
            v36 = -48;
            goto LABEL_69;
          }
          if (((1 << v35) & 0x1066) == 0)
          {
            if (v35 == 24)
              goto LABEL_55;
LABEL_63:
            if (v35 == 70)
            {
              v36 = -64;
              goto LABEL_69;
            }
            goto LABEL_64;
          }
        }
LABEL_69:
        v40 = *(_QWORD *)(a2 + 72 + v36 + 16);
        v41 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8);
        if ((v40 & 4) != 0)
          v41 = (_QWORD *)*v41;
        if (v41)
        {
          v42 = v41[8];
          if (v42)
          {
            if (((*(unsigned __int16 *)(v42 + 8) | (*(unsigned __int8 *)(v42 + 10) << 16)) & 0x100000) != 0)
            {
              v43 = sub_22EFD462C((unint64_t)(v41 - 8));
              if (v43)
              {
                if ((*(_DWORD *)(v43 + 28) & 0x7F) != 0x1D || (v43 = *(_QWORD *)(v43 + 48)) != 0)
                {
                  if (v43 == a2
                    || (v44 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v43 + 32))(v43),
                        v44 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v34)
                      return 1;
LABEL_80:
                    v45 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EE6745C(a1, v45);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v46 = *(_QWORD *)(a2 + 88);
                    if (v46)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v46 + 28) & 0x7E) == 0x2E && (sub_22EFC78D8(v46) & 1) == 0)
                        {
                          result = sub_22EE757EC(a1, v46);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v46 = *(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v46);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_79:
        if (!v34)
          return 1;
        goto LABEL_80;
      }
    }
  }
  return result;
}

uint64_t sub_22EE7ADD0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EE7A8CC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EE6745C(a1, v5);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EE7AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)));
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EE6745C(a1, *v85) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)));
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EE6745C(a1, *v137) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24));
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EE6745C(a1, *v135) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EE6745C(a1, *i) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EE6745C(a1, *j) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EE6745C(a1, *v96) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EE6745C(a1, *v99) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EE6745C(a1, *k) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EE6745C(a1, *m) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EE6745C(a1, *v179) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EE6745C(a1, *v182) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EE6745C(a1, *v185) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 0x16:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 0x18:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EE6745C(a1, *v194) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EE6745C(a1, *v43) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EE6745C(a1, *n) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EE6745C(a1, *v48) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EE6745C(a1, *v83) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EE6745C(a1, *v188) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EE6745C(a1, *v200) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EE7384C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EE738E8(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EE6745C(a1, *v59) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EE6745C(a1, *(_QWORD *)(a2 + 24))
            && sub_22EE6745C(a1, *(_QWORD *)(a2 + 40)))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EE6745C(a1, *ii) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EE6745C(a1, *v64) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EE6745C(a1, *v67) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EE6745C(a1, *v70) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EE6745C(a1, *v73) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EE6745C(a1, *v169) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EE6745C(a1, *v54) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EE6745C(a1, *v51) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EE6745C(a1, *v104) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 40));
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EE6745C(a1, *jj) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EE6745C(a1, *v109) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EE6745C(a1, *v112) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EE6745C(a1, *v115) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118));
      if (!(_DWORD)result)
        return result;
      result = sub_22EE6745C(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8));
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EE6745C(a1, *v121) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 40));
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EE6745C(a1, *kk) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EE6745C(a1, *v126) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EE6745C(a1, *v129) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EE6745C(a1, *v132) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EE6745C(a1, *v191) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EE6745C(a1, *mm) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EE6745C(a1, *v14) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EE6745C(a1, *v11))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EE6745C(a1, *nn) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EE6745C(a1, *i1) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EE7384C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EE738E8(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EE6745C(a1, *v143) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EE6745C(a1, *(_QWORD *)(a2 + 24))
            && sub_22EE6745C(a1, *(_QWORD *)(a2 + 40)))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EE6745C(a1, *v146) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EE6745C(a1, *v148) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EE6745C(a1, *v151) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EE6745C(a1, *v154) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EE6745C(a1, *v157) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EE6745C(a1, *v160) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EE6745C(a1, *v163) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EE6745C(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EE6745C(a1, v5) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EE6745C(a1, *v203) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EE6745C(a1, *v166) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EE7384C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EE738E8(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EE6745C(a1, *v27) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EE6745C(a1, *(_QWORD *)(a2 + 24))
            && sub_22EE6745C(a1, *(_QWORD *)(a2 + 40)))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EE6745C(a1, *i2) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EE6745C(a1, *v32) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EE6745C(a1, *v35) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EE6745C(a1, *v38) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EE6745C(a1, *v17) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EE6745C(a1, *v206) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EE6745C(a1, *v197) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EE6745C(a1, *(_QWORD *)(v21 + 8 * v20));
    if (!(_DWORD)result)
      break;
    if ((sub_22EE6745C(a1, v23) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

_DWORD *sub_22EE7BD8C(_DWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 32) & 0x7FFFu) < result[3])
  {
    v3 = *(_QWORD *)result;
    v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v5 = a3;
    v6 = *(_DWORD *)(*(_QWORD *)result + 8);
    if (v6 >= *(_DWORD *)(*(_QWORD *)result + 12))
    {
      result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(v3 + 8);
    }
    v7 = (unint64_t *)(*(_QWORD *)v3 + 16 * v6);
    *v7 = v4;
    v7[1] = v5;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

uint64_t sub_22EE7BE24(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && (v6 - 67) >= 0xFFFFFFF9)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    if (v8)
      v9 = (*(_WORD *)(v8 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
    else
      v9 = 0;
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 72);
      v11 = v10 & 6;
      v12 = v10 & 0xFFFFFFFFFFFFFFF8;
      if (!v11 && v12 != 0)
      {
        result = sub_22EFE90A8(*(_QWORD *)(v12 + 56));
        if (result >= *(_DWORD *)(v5 + 12))
          return result;
      }
    }
LABEL_25:
    v16 = *(_QWORD *)v5;
    v17 = a2 | 4;
    v18 = *(_DWORD *)(v16 + 8);
    if (v18 >= *(_DWORD *)(v16 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(v16 + 8);
    }
    v19 = (uint64_t *)(*(_QWORD *)v16 + 16 * v18);
    *v19 = v17;
    v19[1] = a3;
    ++*(_DWORD *)(v16 + 8);
    return result;
  }
  if (a2 && v6 == 38)
  {
    v14 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 32);
    v15 = 0x7FFF;
  }
  else
  {
    if (a2 && v6 == 59)
      v14 = (_DWORD *)(a2 + 68);
    else
      v14 = (_DWORD *)(a2 + 64);
    v15 = 0xFFFFF;
  }
  if (*(_DWORD *)(result + 12) > (*v14 & v15))
    goto LABEL_25;
  return result;
}

uint64_t sub_22EE7BF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  if (!a2)
    return 1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = *(uint64_t **)(a2 + 24);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 16);
  v12 = 0;
  v13 = 0;
  v11 = v5;
  if (v5 == v4)
    return 1;
  v7 = 0;
  while (1)
  {
    if ((v7 & 3) == 0)
    {
      result = sub_22EE6745C(a1, *v5);
      if (!(_DWORD)result)
        return result;
      v11 = v5 + 1;
      goto LABEL_18;
    }
    v8 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v7 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v5));
    if ((sub_22EE6745C(a1, *v8) & 1) == 0)
      return 0;
    if (v7 < 4)
      sub_22F3F2FE0((uint64_t)&v11, 1);
    else
      sub_22F0D8720((uint64_t)&v11);
LABEL_18:
    v5 = v11;
    v7 = v12;
    if (v11 == v4 && v12 == 0)
      return 1;
  }
}

uint64_t sub_22EE7C060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int *v6;
  int v7;

  v2 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      return sub_22EE72E1C(a1, *(_QWORD *)(a2 + 8));
    case 5:
    case 6:
      return sub_22EE733F4(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return sub_22EE6745C(a1, *(_QWORD *)(a2 + 8));
    case 8:
      v5 = *(unsigned int *)(a2 + 4);
      if (!(_DWORD)v5)
        return v2;
      v6 = *(int **)(a2 + 8);
      break;
    default:
      return v2;
  }
  while (1)
  {
    v7 = *v6;
    if (*v6 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        goto LABEL_13;
    }
    else if (v7 == 7)
    {
      if (**((unsigned __int8 **)v6 + 1) == 213)
        goto LABEL_13;
    }
    else if (((1 << v7) & 0x13D) == 0)
    {
      goto LABEL_13;
    }
    if (!sub_22EE7C060(a1, v6))
      return 0;
LABEL_13:
    v6 += 6;
    if (!--v5)
      return 1;
  }
}

void sub_22EE7C19C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EE7C1B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return sub_22EFC78D8(result);
  return result;
}

__n128 sub_22EE7C1D4@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB92D0;
  *a2 = v4;
  return result;
}

unint64_t sub_22EE7C22C(_QWORD *a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unint64_t a6, unsigned int a7, unsigned int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, char a15)
{
  unint64_t v17;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t *v64;
  int v65;
  unint64_t *v66;
  unint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unint64_t *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::string v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  _BYTE v118[12];
  char v119;
  void *__p;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t *v124;
  unint64_t v125[12];
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  _QWORD v130[6];

  v17 = a2;
  v130[4] = *MEMORY[0x24BDAC8D0];
  if (!a6)
    goto LABEL_9;
  v21 = a4 | ((unint64_t)a7 << 32);
  v126 = v21;
  v127 = a2;
  v22 = sub_22E4EBB74(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v22 || (v25 = v22, !sub_22F272660(v22)))
  {
    sub_22E8FCA40(a1, a3, 0x1025u, 0, (uint64_t)v125);
    v23 = sub_22E8901B8((uint64_t)v125, &v127);
    sub_22E8906A0(v23, (uint64_t *)&v126);
    goto LABEL_4;
  }
  v26 = (uint64_t *)sub_22F272660(v25);
  v124 = v26;
  v27 = sub_22F3B4828(v26);
  if (!v27)
  {
    sub_22E8FCA40(a1, a3, 0x1026u, 0, (uint64_t)v125);
    v128 = (uint64_t *)v26[5];
    v28 = sub_22E894538((uint64_t)v125, (uint64_t *)&v128);
    goto LABEL_20;
  }
  v103 = v27;
  v102 = v26;
  if (sub_22F409CF8(v25))
  {
    sub_22E8FCA40(a1, a3, 0x1027u, 0, (uint64_t)v125);
    v28 = sub_22E8901B8((uint64_t)v125, &v127);
LABEL_20:
    v119 = 0;
    *(_QWORD *)&v118[4] = 0;
    v121 = 0;
    v122 = 0;
    __p = 0;
    v123 = 0;
    v117 = v21;
    v118[0] = 1;
    sub_22E890748(v28, &v117);
    if (SHIBYTE(v122) < 0)
      operator delete(__p);
LABEL_4:
    sub_22E903BEC((unsigned int *)v125);
    if (a15)
      v17 = 0;
    else
      v17 = v127;
    if (!a15)
      goto LABEL_9;
    goto LABEL_8;
  }
  v128 = v130;
  v129 = 0x400000000;
  v105 = *(unsigned int *)(v103 + 8);
  v116 = *(_DWORD *)(v103 + 8);
  if (!(_DWORD)a6)
  {
    v79 = 0;
LABEL_147:
    if (v79 == (_DWORD)v105)
    {
      v79 = v105;
      goto LABEL_149;
    }
    sub_22E8FCA40(a1, a3, 0x1028u, 0, (uint64_t)v125);
    LOBYTE(v113) = a6 < *(unsigned int *)(v103 + 8);
    v80 = sub_22E894E38((uint64_t)v125, (unsigned __int8 *)&v113);
    v81 = v102;
    v117 = v102[5];
    v82 = sub_22E894538(v80, (uint64_t *)&v117);
    LODWORD(v114.__r_.__value_.__l.__data_) = v129;
    v83 = sub_22E89519C(v82, (unsigned int *)&v114);
    LODWORD(v115) = v105;
    sub_22E89519C(v83, (unsigned int *)&v115);
LABEL_152:
    sub_22E903BEC((unsigned int *)v125);
    sub_22E8FCA40(a1, *((_DWORD *)v81 + 6), 0x1771u, 0, (uint64_t)v125);
    sub_22E9AEF84((uint64_t)v125, (uint64_t *)&v124);
    goto LABEL_153;
  }
  v29 = 0;
  v109 = 0;
  while (1)
  {
    v30 = *(unint64_t **)(a5 + 8 * v29);
    v115 = *v30;
    v106 = (uint64_t *)v30;
    v125[0] = *v30;
    v125[1] = (unint64_t)(v30 + 1);
    v110 = v30 + 1;
    v112 = v29;
    v31 = sub_22F116A3C(v125);
    if (!v31)
      goto LABEL_71;
    v33 = v31;
    if ((v31 & 0xF) != 0 || *(_BYTE *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 16) != 7)
    {
      LODWORD(v107) = 0;
      v101 = 0;
    }
    else
    {
      if (*(_QWORD *)v32)
        v34 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      else
        v34 = 0;
      v107 = v34;
      if (((*(_DWORD *)(v31 + 16) >> 19) - 37) >= 0xFFFFFFFC)
      {
        v115 = *(_QWORD *)(v31 + 32);
        v35 = v31;
        while (1)
        {
          if ((v35 & 0xF) != 0)
            goto LABEL_44;
          v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v36 > 0x39)
          {
LABEL_39:
            if (sub_22F115668(v35))
              v33 = v35;
            v35 = sub_22F115B7C(v35);
            if (!v35)
              goto LABEL_60;
          }
          else
          {
            if (v36 == 24)
              goto LABEL_59;
            if (v36 == 26)
            {
              if ((*(_BYTE *)(v35 + 23) & 0x10) != 0)
              {
LABEL_59:
                v33 = v35;
LABEL_60:
                v39 = sub_22F115668(v33);
                sub_22E8FCA40(a1, v39, 0x101Fu, 0, (uint64_t)v125);
                v40 = sub_22E8901B8((uint64_t)v125, (uint64_t *)&v115);
                v119 = 0;
                *(_QWORD *)&v118[4] = 0;
                v121 = 0;
                v122 = 0;
                __p = 0;
                v123 = 0;
                v117 = v107;
                v118[0] = 1;
                sub_22E890748(v40, &v117);
                if (SHIBYTE(v122) < 0)
                {
                  v41 = __p;
                  goto LABEL_62;
                }
                goto LABEL_70;
              }
            }
            else if (((1 << v36) & 0x20000000200003CLL) == 0)
            {
              goto LABEL_39;
            }
LABEL_44:
            v35 = sub_22F115B7C(v35);
          }
        }
      }
      v101 = v34 & 0xFFFFFFFF00000000;
    }
    for (i = v31; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_58;
        v38 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v38 <= 0x39)
          break;
LABEL_53:
        if (sub_22F115668(i))
          v33 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_64;
      }
      if (v38 == 24)
        goto LABEL_63;
      if (v38 == 26)
        break;
      if (((1 << v38) & 0x20000000200003CLL) == 0)
        goto LABEL_53;
LABEL_58:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_58;
LABEL_63:
    v33 = i;
LABEL_64:
    v42 = sub_22F115668(v33);
    sub_22E8FCA40(a1, v42, 0x1023u, 0, (uint64_t)v125);
    v43 = sub_22E8901B8((uint64_t)v125, (uint64_t *)&v115);
    v44 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v44 & 8) != 0)
    {
      v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v45 = 0;
      v46 = 0;
    }
    v113 = v45 | v46 | (v44 | v115) & 7;
    sub_22F40B554(&v113, &v114);
    v47 = sub_22F2F3734(v43, (void **)&v114.__r_.__value_.__l.__data_);
    v119 = 0;
    *(_QWORD *)&v118[4] = 0;
    v121 = 0;
    v122 = 0;
    __p = 0;
    v123 = 0;
    v117 = v101 | v107;
    v118[0] = 1;
    sub_22E890748(v47, &v117);
    if (SHIBYTE(v122) < 0)
      operator delete(__p);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    {
      v41 = (void *)v114.__r_.__value_.__r.__words[0];
LABEL_62:
      operator delete(v41);
    }
LABEL_70:
    sub_22E903BEC((unsigned int *)v125);
LABEL_71:
    v48 = *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v48 + 8) & 0xF) != 0)
      v48 = (unint64_t)sub_22F10D2BC(v115);
    v49 = v112;
    v50 = v48 & 0xFFFFFFFFFFFFFFF0;
    v115 = v48 & 0xFFFFFFFFFFFFFFF0;
    v51 = v129;
    if (v129 >= (unint64_t)HIDWORD(v129))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v51 = v129;
    }
    v128[v51] = v50;
    LODWORD(v129) = v129 + 1;
    v52 = *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0);
    if (!v52 || *(_BYTE *)(v52 + 16) != 36)
    {
      v53 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36 ? sub_22F10CF48(v52) : 0;
      if (!(v109 & 1 | (v53 != 0)))
      {
        if (v112 < v105)
        {
          v109 = 0;
          v54 = *(_QWORD *)(v103 + 16 + 8 * v112);
          goto LABEL_84;
        }
        sub_22E8FCA40(a1, a3, 0x1028u, 0, (uint64_t)v125);
        LOBYTE(v113) = 0;
        v84 = sub_22E894E38((uint64_t)v125, (unsigned __int8 *)&v113);
        v81 = v102;
        v117 = v102[5];
        v85 = sub_22E894538(v84, (uint64_t *)&v117);
        LODWORD(v114.__r_.__value_.__l.__data_) = a6;
        v86 = sub_22E89519C(v85, (unsigned int *)&v114);
        sub_22E89519C(v86, &v116);
        goto LABEL_152;
      }
    }
    v54 = 0;
    v109 = 1;
LABEL_84:
    v55 = *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0);
    if (!v55 || *(_BYTE *)(v55 + 16) != 32)
      break;
LABEL_88:
    if (v54)
    {
      v117 = *(_QWORD *)((*(_QWORD *)(v54 + 80) & 0xFFFFFFFFFFFFFFF8)
                       + ((2 * *(_QWORD *)(v54 + 80)) & 8));
      v57 = *(_QWORD *)(v117 & 0xFFFFFFFFFFFFFFF0);
      if (!v57 || *(_BYTE *)(v57 + 16) != 32)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
          v57 = sub_22F10CF48(*(_QWORD *)(v117 & 0xFFFFFFFFFFFFFFF0));
        else
          v57 = 0;
      }
      if (sub_22E5761BC(v55))
      {
        if (sub_22E5761BC(v57))
        {
LABEL_96:
          v58 = 4;
          goto LABEL_117;
        }
      }
      else if ((sub_22EF6ED94(a1[11], v57, v55) & 1) != 0)
      {
        goto LABEL_96;
      }
      v59 = *v106;
      v60 = *v106;
      v61 = v110;
      v62 = v110;
      v108 = v54;
LABEL_99:
      v111 = v61;
      while (1)
      {
        if ((v60 & 0xF) == 0)
        {
          v63 = *(unsigned __int8 *)(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v63 > 0x39)
            goto LABEL_108;
          if (v63 == 24)
          {
LABEL_128:
            v59 = v60;
            v54 = v108;
            goto LABEL_113;
          }
          if (v63 == 26)
          {
            if ((*(_BYTE *)(v60 + 23) & 0x10) != 0)
              goto LABEL_128;
          }
          else if (((1 << v63) & 0x20000000200003CLL) == 0)
          {
LABEL_108:
            v65 = sub_22F115668(v60);
            if (v65)
              v59 = v60;
            v66 = v111;
            if (v65)
              v66 = v62;
            v60 = sub_22F115B7C(v60);
            v62 = v67;
            v61 = v66;
            v54 = v108;
            if (!v60)
              goto LABEL_113;
            goto LABEL_99;
          }
        }
        v60 = sub_22F115B7C(v60);
        v62 = v64;
      }
    }
LABEL_125:
    v29 = v49 + 1;
    if (v29 == a6)
    {
      v79 = v129;
      if ((v109 & 1) != 0)
      {
LABEL_149:
        v104 = sub_22EF667E8(a1[11], v127, v128, v79, 0, 0, 0);
        goto LABEL_156;
      }
      goto LABEL_147;
    }
  }
  v56 = *(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)v56 + 16) == 32)
  {
    v55 = sub_22F10CF48(*(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0));
    if (v55)
      goto LABEL_88;
    v55 = *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF0);
    v56 = *(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  if (*(_BYTE *)(*(_QWORD *)v56 + 16) != 10)
  {
    if ((*(_BYTE *)(v55 + 17) & 4) != 0)
      goto LABEL_125;
    v88 = *v106;
    v89 = *v106;
    while (1)
    {
      if ((v89 & 0xF) != 0)
        goto LABEL_171;
      v90 = *(unsigned __int8 *)(*(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v90 > 0x39)
      {
LABEL_166:
        if (sub_22F115668(v89))
          v88 = v89;
        v89 = sub_22F115B7C(v89);
        if (!v89)
          goto LABEL_173;
      }
      else
      {
        if (v90 == 24)
          goto LABEL_172;
        if (v90 == 26)
        {
          if ((*(_BYTE *)(v89 + 23) & 0x10) != 0)
          {
LABEL_172:
            v88 = v89;
LABEL_173:
            v91 = sub_22F115668(v88);
            sub_22E8FCA40(a1, v91, 0x1022u, 0, (uint64_t)v125);
            v92 = sub_22E8901B8((uint64_t)v125, (uint64_t *)&v115);
            v93 = *v106;
            v94 = v110;
            v117 = v93;
            *(_QWORD *)v118 = v110;
            v95 = v93;
            while (1)
            {
              if ((v95 & 0xF) != 0)
                goto LABEL_186;
              v96 = *(unsigned __int8 *)(*(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0) + 16);
              if (v96 <= 0x39)
              {
                if (v96 == 24)
                  goto LABEL_187;
                if (v96 == 26)
                {
                  if ((*(_BYTE *)(v95 + 23) & 0x10) != 0)
                  {
LABEL_187:
                    v93 = v95;
LABEL_188:
                    LODWORD(v114.__r_.__value_.__l.__data_) = sub_22F115668(v93);
                    HIDWORD(v114.__r_.__value_.__r.__words[0]) = sub_22F1167E8((uint64_t *)&v117);
                    sub_22E8906A0(v92, (uint64_t *)&v114);
LABEL_153:
                    sub_22E903BEC((unsigned int *)v125);
                    v87 = v127;
                    if (a15)
                      v87 = 0;
                    v104 = v87;
                    goto LABEL_156;
                  }
LABEL_186:
                  v95 = sub_22F115B7C(v95);
                  v94 = v100;
                  continue;
                }
                if (((1 << v96) & 0x20000000200003CLL) != 0)
                  goto LABEL_186;
              }
              v97 = sub_22F115668(v95);
              if (v97)
                v93 = v95;
              v98 = v110;
              if (v97)
                v98 = v94;
              v110 = v98;
              v95 = sub_22F115B7C(v95);
              v94 = v99;
              if (!v95)
                goto LABEL_188;
            }
          }
        }
        else if (((1 << v90) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_166;
        }
LABEL_171:
        v89 = sub_22F115B7C(v89);
      }
    }
  }
  if (!v54)
    goto LABEL_125;
  v117 = *(_QWORD *)((*(_QWORD *)(v54 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v54 + 80)) & 8));
  if ((sub_22F40AB34(*(_QWORD *)(v117 & 0xFFFFFFFFFFFFFFF0), a1[11]) & 1) != 0)
  {
    v58 = 4;
    goto LABEL_116;
  }
  v59 = *v106;
  v72 = *v106;
  v73 = v110;
  do
  {
LABEL_130:
    if ((v72 & 0xF) != 0)
      goto LABEL_142;
    v74 = *(unsigned __int8 *)(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v74 <= 0x39)
    {
      if (v74 == 24)
        goto LABEL_143;
      if (v74 == 26)
      {
        if ((*(_BYTE *)(v72 + 23) & 0x10) != 0)
        {
LABEL_143:
          v59 = v72;
          break;
        }
LABEL_142:
        v72 = sub_22F115B7C(v72);
        v73 = v78;
        goto LABEL_130;
      }
      if (((1 << v74) & 0x20000000200003CLL) != 0)
        goto LABEL_142;
    }
    v75 = sub_22F115668(v72);
    if (v75)
      v59 = v72;
    v76 = v110;
    if (v75)
      v76 = v73;
    v110 = v76;
    v72 = sub_22F115B7C(v72);
    v73 = v77;
  }
  while (v72);
LABEL_113:
  v68 = sub_22F115668(v59);
  sub_22E8FCA40(a1, v68, 0x101Eu, 0, (uint64_t)v125);
  v69 = sub_22E8901B8((uint64_t)v125, (uint64_t *)&v115);
  v70 = sub_22E8901B8(v69, (uint64_t *)&v117);
  v114.__r_.__value_.__r.__words[0] = *(_QWORD *)(v54 + 40);
  sub_22E894538(v70, (uint64_t *)&v114);
  sub_22E903BEC((unsigned int *)v125);
  sub_22E8FCA40(a1, *(_DWORD *)(v54 + 24), 0x16F3u, 0, (uint64_t)v125);
  v114.__r_.__value_.__r.__words[0] = *(_QWORD *)(v54 + 40);
  sub_22E894538((uint64_t)v125, (uint64_t *)&v114);
  sub_22E903BEC((unsigned int *)v125);
  v71 = v127;
  if (a15)
    v71 = 0;
  v104 = v71;
  v58 = 1;
LABEL_116:
  v49 = v112;
LABEL_117:
  if (v58 == 4)
    goto LABEL_125;
LABEL_156:
  if (v128 != v130)
    free(v128);
  v17 = v104;
  if (a15)
  {
LABEL_8:
    if (v17 >= 0x10)
      goto LABEL_9;
    return 0;
  }
LABEL_9:
  if (!a10)
    return v17;
  LOBYTE(v128) = 0;
  v17 = sub_22EF66DE0(a1[11], v17, a9, a10, &v128, 0);
  if (!(_BYTE)v128)
  {
LABEL_13:
    if (!a15 || v17 > 0xF)
      return v17;
    return 0;
  }
  sub_22E8FCA40(a1, a3, 0xE5Cu, 0, (uint64_t)v125);
  v117 = __PAIR64__(a13, a8);
  sub_22E8906A0((uint64_t)v125, (uint64_t *)&v117);
  sub_22E903BEC((unsigned int *)v125);
  if (a15)
  {
    v17 = 0;
    goto LABEL_13;
  }
  return v17;
}

unint64_t sub_22EE7D030(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;

  v5 = sub_22E3CD3D4(a1 + 8360, 32, 4);
  v6 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  if (a2 >= 0x10)
    v7 = a2;
  else
    v7 = v5 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v5 = v5;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = v6 | *(_DWORD *)(v5 + 16) & 0xFFF80000 | 0x39;
  *(_QWORD *)(v5 + 24) = a3;
  return v5 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22EE7D0A4(_QWORD *a1, uint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5, unint64_t *a6, unsigned int a7, unsigned int a8, unsigned int a9, uint64_t *a10, uint64_t a11, int *a12, uint64_t a13, unsigned int a14)
{
  unint64_t v14;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[6];

  v68[4] = *MEMORY[0x24BDAC8D0];
  if (a4 < 0x10)
    return 0;
  v14 = a4;
  v21 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v22 = a4;
  if (!v21)
    goto LABEL_7;
  v22 = a4;
  if (*(_BYTE *)(v21 + 16) != 57)
    goto LABEL_7;
  v22 = *(_QWORD *)(v21 + 8);
  if (v22 < 0x10)
    return 0;
  v23 = *(uint64_t **)(v21 + 24);
  if (!v23)
LABEL_7:
    v23 = sub_22EF579A8(a1[11], v22, a3);
  v63 = a5;
  v62 = a3;
  v66 = v68;
  v67 = 0x400000000;
  v25 = a7;
  if (a7)
  {
    v26 = 0;
    while (1)
    {
      v27 = *a6;
      if (*a6 < 0x10)
        break;
      v28 = 0;
      v29 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
      if (v29 && *(_BYTE *)(v29 + 16) == 57)
      {
        v27 = *(_QWORD *)(v29 + 8);
        v28 = *(_QWORD *)(v29 + 24);
      }
      if (v27 < 0x10)
        break;
      if (v26 >= HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = v67;
      }
      *((_QWORD *)v66 + v26) = v28;
      v26 = v67 + 1;
      LODWORD(v67) = v67 + 1;
      ++a6;
      if (!--v25)
        goto LABEL_20;
    }
    LODWORD(v67) = 0;
  }
LABEL_20:
  v61 = v23;
  v30 = v23 + 1;
  v31 = *v23;
  v64 = v31;
  v65 = (uint64_t)(v23 + 1);
  for (i = v31; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_31;
      v33 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v33 <= 0x39)
        break;
LABEL_26:
      if (sub_22F115668(i))
        v31 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_33;
    }
    if (v33 == 24)
      goto LABEL_32;
    if (v33 == 26)
      break;
    if (((1 << v33) & 0x20000000200003CLL) == 0)
      goto LABEL_26;
LABEL_31:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_31;
LABEL_32:
  v31 = i;
LABEL_33:
  v34 = sub_22F115668(v31);
  sub_22F1167E8((uint64_t *)&v64);
  v35 = sub_22EE7C22C(a1, v22, v34, v63, (uint64_t)v66, v67, a8, a9, a10, a11, v59, v60, a14, 0, 0);
  if (v35 != v22)
  {
    v36 = v35;
    v37 = a1[11];
    v38 = sub_22F11598C(v35);
    v39 = (_QWORD *)sub_22E3CD3D4(v37 + 2032, v38 + 8, 3);
    *v39 = v36;
    v40 = (uint64_t)(v39 + 1);
    if ((v36 & 0xF) == 0 && v36 && *(_BYTE *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      *(_DWORD *)v40 = 0;
      v41 = *(_QWORD *)(v36 + 32);
      v44 = 1;
      if (v41 >= 0x10 && (v41 & 0xF) == 0)
        v44 = *(_QWORD *)((char *)&unk_22F49B4F0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      v40 = (v40 + v44 + 3) & -v44;
    }
    else
    {
      v41 = v36;
    }
    if ((*(_WORD *)(v41 + 18) & 0x3F8) != 0)
    {
      *(_DWORD *)v40 = v63;
      *(_DWORD *)(v40 + 4) = a8;
      if ((_DWORD)v67)
      {
        v42 = 0;
        v43 = 8 * v67;
        do
        {
          *(_QWORD *)(v40 + 24 + v42) = *(_QWORD *)((char *)v66 + v42);
          v42 += 8;
        }
        while (v43 != v42);
      }
    }
    else
    {
      *(_QWORD *)v40 = 0;
    }
    if ((*(_BYTE *)(v41 + 19) & 0xFC) != 0)
    {
      *(_DWORD *)(v40 + 8) = a9;
      *(_DWORD *)(v40 + 12) = a14;
      v45 = a11;
      if ((_DWORD)a11)
      {
        v46 = v40 + 24;
        do
        {
          v47 = *a12++;
          *(_DWORD *)(v46 + 8 * ((*(_QWORD *)(v41 + 16) >> 19) & 0x7FLL)) = v47;
          v46 += 4;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      *(_QWORD *)(v40 + 8) = 0;
    }
    *(_BYTE *)(v40 + 16) = 1;
    if (v41 == v22)
    {
      v48 = *(_QWORD *)(v41 + 24);
      v49 = ((HIWORD(*(_DWORD *)(v41 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v41 + 16) >> 26) + 31) & 0x7F8;
      v50 = 1;
      if (v48 >= 0x10 && (v48 & 0xF) == 0)
        v50 = *(_QWORD *)((char *)&unk_22F49B4F0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      v64 = v48;
      v65 = (v40 + v49 + v50 - 1) & -v50;
      sub_22F1164A8(&v64, *v61, v30);
    }
    else
    {
      v51 = *(_QWORD *)(v41 + 24);
      v52 = ((HIWORD(*(_DWORD *)(v41 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v41 + 16) >> 26) + 31) & 0x7F8;
      v53 = 1;
      if (v51 < 0x10)
      {
        v54 = v62;
      }
      else
      {
        v54 = v62;
        if ((v51 & 0xF) == 0)
          v53 = *(_QWORD *)((char *)&unk_22F49B4F0
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      }
      sub_22F115E94(a1[11], v51, (_QWORD *)((v40 + v52 + v53 - 1) & -v53), v54);
    }
    v55 = sub_22E3CD3D4((uint64_t)(a1 + 1045), 32, 4);
    v56 = *(_DWORD *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v14 = v55 & 0xFFFFFFFFFFFFFFF0;
    if (v36 >= 0x10)
      v57 = v36;
    else
      v57 = v55 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v55 = v55;
    *(_QWORD *)(v55 + 8) = v57;
    *(_DWORD *)(v55 + 16) = v56 | *(_DWORD *)(v55 + 16) & 0xFFF80000 | 0x39;
    *(_QWORD *)(v55 + 24) = v39;
  }
  if (v66 != v68)
    free(v66);
  return v14;
}

unint64_t sub_22EE7D634(unint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 0xF)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
    if (v3 && *(_BYTE *)(v3 + 16) == 57)
    {
      result = *(_QWORD *)(v3 + 8);
      v2 = *(_QWORD *)(v3 + 24);
    }
  }
  else
  {
    v2 = 0;
    result = 0;
  }
  if (a2)
    *a2 = v2;
  return result;
}

uint64_t sub_22EE7D678(_QWORD *a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v17;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24[12];
  uint64_t v25[11];

  if (a2 < 0x10)
    return 0;
  v25[9] = v5;
  v25[10] = v6;
  v10 = a4 & 0xFFFFFFFF00000000;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE;
  if (v13 == 40)
    v14 = a4 & 0xFFFFF9FA;
  else
    v14 = a4;
  if ((v14 & 2) == 0)
    goto LABEL_29;
  v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v17 != 32 && v17 != 39 && v13 != 40 && v17 != 31)
  {
    v20 = *(_DWORD *)(v12 + 16);
    if ((v20 & 0x400) == 0 && (v20 & 0x1800FF) != 0x10000E)
    {
      v21 = 4984;
      v19 = a2;
LABEL_26:
      v25[0] = v19;
      if (a5)
        a3 = *(_DWORD *)(a5 + 148);
      sub_22E8FCA40(a1, a3, v21, 0, (uint64_t)v24);
      sub_22E8901B8((uint64_t)v24, v25);
      sub_22E903BEC((unsigned int *)v24);
      v14 &= ~2u;
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  v19 = a2;
  if (v17 != 32)
  {
    if (*(_BYTE *)(v12 + 16) == 31)
    {
LABEL_18:
      v19 = *(_QWORD *)(v12 + 32);
      goto LABEL_24;
    }
    if (v17 == 31)
    {
      v12 = sub_22F10CF48(v12);
      if (v12)
        goto LABEL_18;
      v12 = *v11;
    }
    v19 = sub_22F10ACF8(v12);
  }
LABEL_24:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 27 >= 0xFFFFFFFE)
  {
    v21 = 4983;
    goto LABEL_26;
  }
LABEL_29:
  if (((v10 | v14) & 0xCFFFFFFF8) == 0)
    return v14 & 7 | a2;
  v22 = a1[11];
  v24[0] = v10 | v14;
  v23 = sub_22E491354((unsigned int *)v24, a2);
  return sub_22EF5DBC4(v22, v23, v24[0]);
}

uint64_t sub_22EE7D830(_QWORD *a1, unint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  int v5;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (a2 < 0x10)
    return 0;
  v5 = a3;
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    v9 = a4 & 0xFFFFFF8A;
  else
    v9 = a4;
  if (*(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) == 6 || (v9 & 0x10) == 0)
  {
    v11 = v9 & 0xFFFFFF8F;
    v12 = (v9 >> 9) & 3;
    if (v12 <= 1)
      v13 = 1;
    else
      v13 = (v9 >> 9) & 3;
    v14 = v9 & 0xFFFFF98F | (v13 << 9);
    if ((v9 & 0x20) != 0)
      v11 = v14;
    if (((v9 >> 9) & 3) != 3)
      v12 = 2;
    v15 = v9 & 0xFFFFF98F | (v12 << 9);
    if ((v9 & 0x40) != 0)
      v16 = v15;
    else
      v16 = v11;
    v17 = a1;
  }
  else
  {
    if ((v8 & 0xF) != 0)
    {
      v26 = a5;
      v7 = (unint64_t)sub_22F10D2BC(a2);
      a5 = v26;
      v18 = v27;
    }
    else if ((a2 & 8) != 0)
    {
      v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a2 & 7;
      v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v18 = a2 & 7;
    }
    if (a5)
      v19 = *(_DWORD *)(a5 + 156);
    else
      v19 = v5;
    a2 = sub_22EE7D9BC(a1, v7 & 0xFFFFFFFFFFFFFFF0, v19);
    if (a2 < 0x10)
      return a2;
    v21 = v9 & 0xFFFFFF87 | v18;
    v22 = (v21 >> 9) & 3;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    if ((v9 & 0x20) != 0)
      v24 = v9 & 0xFFFFF987 | v18 & 0xFFFFF9FF | ((v23 & 3) << 9);
    else
      v24 = v9 & 0xFFFFFF87 | v18;
    if (((v21 >> 9) & 3) != 3)
      LOBYTE(v22) = 2;
    LODWORD(v25) = v9 & 0xFFFFF987 | v18 & 0xFFFFF9FF | ((v22 & 3) << 9);
    if ((v9 & 0x40) != 0)
      v25 = v25;
    else
      v25 = v24;
    v16 = v18 & 0xFFFFFFFF00000000 | v25;
    a3 = v5;
    v17 = a1;
    a5 = 0;
  }
  return sub_22EE7D678(v17, a2, a3, v16, a5);
}

unint64_t sub_22EE7D9BC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v5;
  int v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t (**v13)();
  int v14;
  int *v15;
  int v16;
  uint64_t v17;

  v3 = a2;
  v17 = a2;
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v6 & 0x400) != 0 || (v6 & 0x1800FF) == 0x10000E)
    return sub_22F36A8C0(a1[11], v3);
  v16 = 0;
  v13 = off_24FAB9368;
  v14 = 2771;
  v15 = &v16;
  if ((sub_22EE8B0B0((uint64_t)a1, a3, a2) & 1) == 0)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE;
    if ((v8 - 2) <= 3)
    {
      v9 = 1;
LABEL_15:
      v16 = v9;
      sub_22E8FCA40(a1, a3, 0xAD3u, 0, (uint64_t)&v13);
      v11 = sub_22E8900C4((uint64_t)&v13, &v16);
      sub_22E8901B8(v11, &v17);
      sub_22E903BEC((unsigned int *)&v13);
      return 0;
    }
    v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v10 - 25) <= 1)
    {
      v9 = 2;
      goto LABEL_15;
    }
    if (v8 == 40)
    {
      v9 = 3;
      goto LABEL_15;
    }
    if (v10 == 6)
    {
      v9 = 4;
      goto LABEL_15;
    }
    if ((v3 & 0xF) != 0 || (v5[1] & 0xF) != 0)
    {
      v9 = 5;
      goto LABEL_15;
    }
    if (sub_22F111384(*v5))
    {
      v9 = 6;
      goto LABEL_15;
    }
    if ((sub_22F111968((unint64_t *)&v17, a1[11]) & 1) == 0)
    {
      v9 = 7;
      goto LABEL_15;
    }
    v3 = v17;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
    {
      v9 = 8;
      goto LABEL_15;
    }
    return sub_22F36A8C0(a1[11], v3);
  }
  return 0;
}

unint64_t sub_22EE7DB70(uint64_t a1, unint64_t a2)
{
  return sub_22EF5F41C(*(_QWORD *)(a1 + 88), a2);
}

uint64_t sub_22EE7DB78(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  void *__p[2];
  char v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a2;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 26;
  else
    v6 = 0;
  if (!v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    v5 = result;
    if (!result)
      return result;
  }
  if ((sub_22E47E1B0(v5) & 0xCFFFFFFFFLL) == 0 && (*(_BYTE *)(v5 + 20) & 3) == 0)
    return 0;
  sub_22E8FCA40(a1, a3, 0x1205u, 0, (uint64_t)v11);
  v8 = sub_22E8901B8((uint64_t)v11, &v12);
  sub_22EE7DC78(v5, 0, (uint64_t)__p);
  sub_22F2F3734(v8, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_22E903BEC(v11);
  return 1;
}

void sub_22EE7DC78(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = sub_22E47E1B0(a1);
  sub_22F40B554(&v15, (std::string *)a3);
  if (a2)
  {
    v6 = *(_BYTE *)(a3 + 23);
    v7 = v6;
    v8 = v6 & 0x7F;
    if (v7 < 0)
      v8 = *(_QWORD *)(a3 + 8);
    if (v8)
      std::string::push_back((std::string *)a3, 32);
    std::string::append((std::string *)a3, "thread");
  }
  if ((*(_DWORD *)(a1 + 20) & 3) == 2)
  {
    v12 = *(_BYTE *)(a3 + 23);
    v13 = v12;
    v14 = v12 & 0x7F;
    if (v13 < 0)
      v14 = *(_QWORD *)(a3 + 8);
    if (v14)
      std::string::push_back((std::string *)a3, 32);
    std::string::append((std::string *)a3, "&&");
  }
  else if ((*(_DWORD *)(a1 + 20) & 3) == 1)
  {
    v9 = *(_BYTE *)(a3 + 23);
    v10 = v9;
    v11 = v9 & 0x7F;
    if (v10 < 0)
      v11 = *(_QWORD *)(a3 + 8);
    if (v11)
      std::string::push_back((std::string *)a3, 32);
    std::string::push_back((std::string *)a3, 38);
  }
}

unint64_t sub_22EE7DDA0(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  int v21;
  unsigned int v22;
  uint64_t v23;
  void *__p[2];
  char v25;
  unsigned int v26[24];
  uint64_t v27;
  uint64_t v28;

  v7 = a1;
  v27 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v21 = a4;
    v22 = 3556;
LABEL_29:
    sub_22E8FCA40(a1, v21, v22, 0, (uint64_t)v26);
    v28 = a5;
    if (a5)
    {
      sub_22EFC683C(&v28, __p);
    }
    else
    {
      v25 = 9;
      strcpy((char *)__p, "type name");
    }
    v23 = sub_22F2F3734((uint64_t)v26, __p);
    sub_22E8901B8(v23, &v27);
    if (v25 < 0)
      operator delete(__p[0]);
    goto LABEL_25;
  }
  v9 = a2;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
  {
    v10 = a1[9];
    if ((*(_DWORD *)(v10 + 52) & 0x40000000) != 0
      && !sub_22F420564((uint64_t)(a1 + 3), (uint64_t)"__cl_clang_function_pointers", 28, v10))
    {
      v18 = a4;
      v17 = v7;
      v19 = 4399;
      goto LABEL_24;
    }
  }
  if ((*(_WORD *)(v7[9] + 96) & 0x40) != 0)
  {
    v18 = a4;
    v17 = v7;
    v19 = 3540;
    goto LABEL_24;
  }
  if ((sub_22EE7E080(v7, v9, a4, 1) & 1) != 0)
    return 0;
  v11 = v7[9];
  if ((*(_WORD *)(v11 + 148) & 2) != 0)
  {
    v9 = sub_22EE7E288((uint64_t)v7, v9, a4, 0);
    v27 = v9;
    v11 = v7[9];
  }
  if ((*(_DWORD *)(v11 + 52) & 0x40000000) != 0)
  {
    v9 = sub_22EE7E40C((uint64_t)v7, v9);
    v27 = v9;
    v11 = v7[9];
  }
  if ((*(_BYTE *)(v11 + 104) & 0x20) != 0)
  {
    v12 = sub_22E53C624(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
    v13 = v7[9];
    if (v12)
    {
      if ((*(_QWORD *)(v13 + 116) & 0x10000000000000) == 0)
        goto LABEL_36;
      if ((*(_QWORD *)(v13 + 124) & 0x100000) == 0)
      {
        v14 = v12;
        if (sub_22F10C9BC(v12) != 2 && sub_22F10C9BC(v14) != 3)
        {
          v13 = v7[9];
          goto LABEL_17;
        }
LABEL_36:
        a1 = v7;
        v21 = a4;
        v22 = 3845;
        goto LABEL_29;
      }
    }
LABEL_17:
    if ((*(_BYTE *)(v13 + 122) & 8) != 0
      || !sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
    {
      v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v15 & 8) != 0)
      {
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        if ((v16 & 0x600) != 0 && (v16 & 0xFFFFF800) != 0x5800)
        {
          v17 = v7;
          v18 = a4;
          v19 = 3799;
LABEL_24:
          sub_22E8FCA40(v17, v18, v19, 0, (uint64_t)v26);
          LODWORD(__p[0]) = 0;
          sub_22E8900C4((uint64_t)v26, (int *)__p);
LABEL_25:
          sub_22E903BEC(v26);
          return 0;
        }
      }
      return sub_22EF5B848(v7[11], v9, a3);
    }
    goto LABEL_36;
  }
  return sub_22EF5B848(v7[11], v9, a3);
}

uint64_t sub_22EE7E080(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;
  void *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  BOOL v28;
  unsigned int v29[4];
  void *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  char v35;
  uint64_t v36;

  v36 = a2;
  v8 = a2 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (!v10)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    v9 = result;
    if (!result)
      return result;
  }
  if ((sub_22E47E1B0(v9) & 0xCFFFFFFFFLL) == 0 && (*(_BYTE *)(v9 + 20) & 3) == 0)
    return 0;
  sub_22E8FCA40(a1, a3, 0xBE7u, 0, (uint64_t)v29);
  if (v33)
  {
    v21 = v31;
    if (!v31)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(v32);
      v31 = v21;
    }
    v19 = a4;
    v21[*v21 + 1] = 2;
    v20 = v31;
    goto LABEL_21;
  }
  if (v35)
  {
    v12 = v30;
    v13 = (uint64_t *)(*(_QWORD *)v29 + 12784);
    if (v30)
      v12 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 32))(v30);
    __p[0] = v12;
    v14 = sub_22F2F1D6C(v13, (uint64_t *)__p);
    v15 = v14[1] + 32 * v34;
    v18 = *(unsigned __int8 **)(v15 + 8);
    v17 = (unsigned __int8 **)(v15 + 8);
    v16 = v18;
    if (!v18)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v17[1]);
      *v17 = v16;
    }
    v19 = a4;
    v16[*v16 + 1] = 2;
    v20 = *v17;
LABEL_21:
    v22 = *v20;
    *v20 = v22 + 1;
    *(_QWORD *)&v20[8 * v22 + 16] = v19;
  }
  v23 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16);
  if (v23 == 37)
    v23 = *(unsigned __int8 *)(*(_QWORD *)(sub_22F10D47C(a2) & 0xFFFFFFFFFFFFFFF0) + 16);
  v28 = (v23 - 25) < 2;
  v24 = sub_22E894E38((uint64_t)v29, (unsigned __int8 *)&v28);
  v25 = sub_22E8901B8(v24, &v36);
  sub_22EE7DC78(v9, 0, (uint64_t)__p);
  sub_22F2F3734(v25, __p);
  if (v27 < 0)
    operator delete(__p[0]);
  sub_22E903BEC(v29);
  return 1;
}

uint64_t sub_22EE7E288(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;

  v6 = a2;
  v28 = a2;
  v27 = a4;
  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F40ACB8(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
  {
    v9 = v8[1];
    if ((v9 & 8) == 0 || (*(_WORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
    {
      if (((v9 | v6) & 1) != 0 || sub_22F114FB4(*v8))
      {
        v10 = 64;
LABEL_7:
        v11 = *(_QWORD *)(a1 + 88);
        v23 = v10;
        v12 = sub_22E491354((unsigned int *)&v23, v6);
        return sub_22EF5DBC4(v11, v12, v23);
      }
      v14 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
      if (v14 > 3 || v14 == 2)
      {
        v16 = *(_QWORD *)(a1 + 3200);
        if (v16)
        {
          LOWORD(v23) = 2;
          HIDWORD(v23) = a3;
          v24 = 2662;
          v26 = v6;
          v25 = a4;
          v17 = (_OWORD *)sub_22E90D2A8(v16 + 8, (unint64_t)&v23, 1);
          v18 = (_OWORD *)(*(_QWORD *)(v16 + 8) + 80 * *(unsigned int *)(v16 + 16));
          *v18 = *v17;
          v19 = v17[4];
          v21 = v17[1];
          v20 = v17[2];
          v18[3] = v17[3];
          v18[4] = v19;
          v18[1] = v21;
          v18[2] = v20;
          ++*(_DWORD *)(v16 + 16);
          v10 = 128;
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a1, a3, 0xA66u, 0, (uint64_t)&v23);
          v22 = sub_22E8901B8((uint64_t)&v23, &v28);
          sub_22E894E38(v22, &v27);
          sub_22E903BEC((unsigned int *)&v23);
          v10 = 128;
          v6 = v28;
        }
        goto LABEL_7;
      }
    }
  }
  return v6;
}

uint64_t sub_22EE7E40C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v3 == 14)
    return a2;
  v4 = *(_DWORD *)(v2 + 16) & 0x400;
  if ((v3 & 0xFF800FF) == 0x6F0000B || v4 != 0)
    return a2;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0 && (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
    return a2;
  v8 = *(_QWORD *)(a1 + 88);
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 2000) + 64) & 0x100000000) != 0)
    v9 = 5;
  else
    v9 = 4;
  return sub_22EF5DD84(v8, a2, v9);
}

unint64_t sub_22EE7E490(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v22;
  int v23;
  _BYTE v24[96];
  _BYTE v25[96];

  v6 = a2;
  v8 = a2 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    if (v9 && *(_BYTE *)(v9 + 16) == 40)
    {
      v11 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    }
    else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
    {
      v11 = sub_22F10CF48(v9);
      v9 = *(_QWORD *)v8;
    }
    else
    {
      v11 = 0;
    }
    v10 = v11 != 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = (*(_DWORD *)(v12 + 16) & 0xFF800FF) == 86507531;
  else
    v13 = 0;
  if (v13)
  {
    sub_22E8FCA40(a1, a4, 0x1234u, 0, (uint64_t)v25);
    v20 = (unsigned int *)v25;
LABEL_30:
    sub_22E903BEC(v20);
    return 0;
  }
  if ((*(_WORD *)(a1[9] + 96) & 0x40) != 0)
  {
    v18 = a4;
    v17 = a1;
    v19 = 3540;
    goto LABEL_29;
  }
  if ((sub_22EE7E080(a1, v6, a4, 2) & 1) != 0)
    return 0;
  v14 = a1[9];
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
     - 25 <= 1
    && (*(_DWORD *)(v14 + 52) & 0x40000000) != 0)
  {
    if (!sub_22F420564((uint64_t)(a1 + 3), (uint64_t)"__cl_clang_function_pointers", 28, v14))
    {
      v17 = a1;
      v18 = a4;
      v19 = 4399;
      goto LABEL_29;
    }
    v14 = a1[9];
  }
  if ((*(_WORD *)(v14 + 148) & 2) != 0)
  {
    v6 = sub_22EE7E288((uint64_t)a1, v6, a4, 1);
    v14 = a1[9];
  }
  if ((*(_DWORD *)(v14 + 52) & 0x40000000) != 0)
  {
    v6 = sub_22EE7E40C((uint64_t)a1, v6);
    v14 = a1[9];
  }
  if ((*(_BYTE *)(v14 + 104) & 0x20) != 0)
  {
    v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v15 & 8) != 0)
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      if ((v16 & 0x600) != 0 && (v16 & 0xFFFFF800) != 0x5800)
      {
        v17 = a1;
        v18 = a4;
        v19 = 3799;
LABEL_29:
        sub_22E8FCA40(v17, v18, v19, 0, (uint64_t)v24);
        v23 = 1;
        sub_22E8900C4((uint64_t)v24, &v23);
        v20 = (unsigned int *)v24;
        goto LABEL_30;
      }
    }
  }
  v22 = a1[11];
  if (v10)
    return sub_22EF5F8C4(v22, v6, a3);
  else
    return sub_22EF5FB8C(v22, v6);
}

uint64_t sub_22EE7E71C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *a2;
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (!v5)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
    }
    v5[*v5 + 1] = 3;
    v6 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v9 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v15 = v10;
    v11 = sub_22F2F1D6C(v9, &v15)[1] + 32 * *(unsigned int *)(a1 + 88);
    v14 = *(unsigned __int8 **)(v11 + 8);
    v13 = (_QWORD *)(v11 + 8);
    v12 = v14;
    v4 = *a2;
    if (!v14)
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      *v13 = v12;
    }
    v12[*v12 + 1] = 3;
    v6 = (_BYTE *)*v13;
  }
  v7 = *v6;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v4;
  return a1;
}

unint64_t sub_22EE7E810(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t (***v15)();
  unint64_t v16;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int v63;
  int v65;
  int v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  unint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  int v101;
  void *v102;
  const void *v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  int v110;
  uint64_t v111;
  void *v112;
  void *__dst[2];
  unint64_t v114;
  unsigned int v115[24];
  unsigned int v116[24];
  unint64_t v117;
  unsigned int v118;
  char v119;
  uint64_t (**v120)();
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  char v128;
  unint64_t v129;
  _BYTE v130[24];
  _QWORD v131[6];

  v12 = a1;
  v131[5] = *MEMORY[0x24BDAC8D0];
  v129 = a2;
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      v34 = a6;
      v35 = 3552;
      goto LABEL_89;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFF800FF) == 0x528000B
      || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 4)
    {
      sub_22E8FCA40(a1, a6, 0xA91u, 0, (uint64_t)&v120);
      *(_DWORD *)v130 = 0;
      goto LABEL_12;
    }
    v120 = (uint64_t (**)())&unk_24FAB6EF8;
    v121 = 2715;
    v18 = sub_22EAB2EB4((uint64_t)a1, a6, a2, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))&v120);
    if ((v18 & 1) != 0)
      return 0;
    if (*(_DWORD *)(*(_QWORD *)(v12[11] + 15088) + 148) == 11)
    {
      v19 = *(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0);
      v20 = v19 && *(_BYTE *)(v19 + 16) == 31;
      if ((v20
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v19 = sub_22F10CF48(v19)) != 0)
        && (*(_BYTE *)(*(_QWORD *)(v19 + 40) + 17) & 4) == 0)
      {
        sub_22EE8B180(v12, a6);
      }
    }
  }
  else
  {
    v121 = 2705;
    v120 = (uint64_t (**)())&unk_24FAB79A8;
    if ((sub_22EE8B0B0((uint64_t)a1, a6, a2) & 1) != 0)
      return 0;
  }
  v13 = *(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F111384(v13))
  {
    sub_22E8FCA40(v12, a6, 0xA91u, 0, (uint64_t)&v120);
    *(_DWORD *)v130 = 1;
LABEL_12:
    v15 = (uint64_t (***)())sub_22E8900C4((uint64_t)&v120, (int *)v130);
LABEL_13:
    sub_22E8901B8((uint64_t)v15, (uint64_t *)&v129);
LABEL_14:
    sub_22E903BEC((unsigned int *)&v120);
    return 0;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(v21 + 16);
  if ((v22 - 25) <= 1)
  {
    v34 = a6;
    a1 = v12;
    v35 = 3551;
    goto LABEL_89;
  }
  if (v22 == 45)
  {
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v21 + 24)) + 74) & 0x80) != 0)
    {
      sub_22E8FCA40(v12, a6, 0x147Bu, 0, (uint64_t)&v120);
      sub_22E8901B8((uint64_t)&v120, (uint64_t *)&v129);
      sub_22E903BEC((unsigned int *)&v120);
    }
  }
  else if ((v22 - 33) <= 1)
  {
    sub_22E8FCA40(v12, a6, 0xFE8u, 0, (uint64_t)&v120);
    v15 = &v120;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v12[9] + 104) & 0x20) != 0)
  {
    v23 = sub_22E53C624(*(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0));
    v24 = v12[9];
    if (v23)
    {
      if ((*(_QWORD *)(v24 + 116) & 0x10000000000000) == 0)
        goto LABEL_88;
      if ((*(_QWORD *)(v24 + 124) & 0x100000) == 0)
      {
        v25 = v23;
        if (sub_22F10C9BC(v23) != 2 && sub_22F10C9BC(v25) != 3)
        {
          v24 = v12[9];
          goto LABEL_40;
        }
LABEL_88:
        v34 = a6;
        a1 = v12;
        v35 = 3844;
LABEL_89:
        sub_22E8FCA40(a1, v34, v35, 0, (uint64_t)&v120);
        __dst[0] = a7;
        if (a7)
        {
          sub_22EFC683C((uint64_t *)__dst, v130);
        }
        else
        {
          v130[23] = 9;
          strcpy(v130, "type name");
        }
        v48 = sub_22F2F3734((uint64_t)&v120, (void **)v130);
        sub_22E8901B8(v48, (uint64_t *)&v129);
        if ((v130[23] & 0x80000000) != 0)
          operator delete(*(void **)v130);
        goto LABEL_14;
      }
    }
LABEL_40:
    if ((*(_BYTE *)(v24 + 122) & 8) != 0
      || !sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
    {
      goto LABEL_42;
    }
    goto LABEL_88;
  }
LABEL_42:
  if (a4)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0);
    v27 = (*(_DWORD *)(v26 + 16) & 0xFE00000u) < 0x8180001 || v26 == 0;
    if (v27 || *(_DWORD *)(v26 + 16) != 11)
      goto LABEL_53;
    v29 = sub_22EB19A28(v12);
    if ((v29 & 1) != 0)
      return 0;
    a4 = v29 & 0xFFFFFFFFFFFFFFFELL;
    if ((v29 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_53:
      if ((*(_BYTE *)(a4 + 1) & 3) != 0)
      {
        v30 = sub_22EB1A358(v12, a4, 0);
        if ((v30 & 1) != 0)
          return 0;
        a4 = v30 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (a4
        && (*(_QWORD *)v12[9] & 0x200) == 0
        && (*(_BYTE *)(a4 + 1) & 0x80) == 0
        && (sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
      {
        sub_22F0D5A50(a4);
        sub_22E8FCA40(v12, v49, 0xAA1u, 0, (uint64_t)&v120);
        *(_QWORD *)v130 = *(_QWORD *)(a4 + 8);
        v50 = sub_22E8901B8((uint64_t)&v120, (uint64_t *)v130);
        sub_22F0D4E74(a4);
        __dst[0] = v51;
        sub_22E8906A0(v50, (uint64_t *)__dst);
        goto LABEL_14;
      }
    }
  }
  v31 = v12[9];
  if ((*(_DWORD *)(v31 + 52) & 0x40000000) != 0)
  {
    v33 = 4428;
    goto LABEL_68;
  }
  if ((*(_BYTE *)(v31 + 104) & 0x20) != 0)
  {
    v33 = 3905;
    goto LABEL_68;
  }
  if ((*(_BYTE *)v31 & 1) != 0)
  {
    v36 = 0;
    v33 = 7164;
  }
  else
  {
    sub_22EE03478((uint64_t)v12);
    if (v32)
    {
      v33 = 5147;
LABEL_68:
      v36 = 1;
      goto LABEL_69;
    }
    if (*(_DWORD *)(v31 + 72))
    {
      v52 = sub_22ECB1B04(v12[1536]);
      if (v52)
      {
        v53 = *(_DWORD *)(v52 + 960) - 36;
        if (v53 <= 0x29 && ((1 << v53) & 0x34000000C03) != 0 && *(_BYTE *)(v52 + 1081))
        {
          v33 = 4431;
          goto LABEL_68;
        }
      }
    }
    v36 = 0;
    v33 = 5403;
  }
LABEL_69:
  v37 = v12[11];
  v38 = sub_22EF67C8C(v37);
  v118 = sub_22EF5CDF0(v37, *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0));
  if (v118 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v117);
  else
    v117 = 0;
  v119 = 1;
  if (!a4)
  {
    if ((_DWORD)a3 != 2)
    {
      v39 = sub_22EF6096C(v12[11], v129, a3, a5, 0, 0, 0);
      goto LABEL_113;
    }
    sub_22E8FCA40(v12, a6, v33, 0, (uint64_t)v116);
    sub_22E903BEC(v116);
    if ((v36 & 1) == 0)
    {
      v40 = v12[11];
      v41 = v129;
      v42 = 0;
      v43 = 2;
LABEL_112:
      v39 = sub_22EF60740(v40, v41, v42, v43, a5, a6);
      goto LABEL_113;
    }
    goto LABEL_137;
  }
  if ((*(_DWORD *)a4 & 0x18000) == 0)
  {
    v44 = v12[9];
    if ((*(_BYTE *)(v44 + 1) & 4) != 0)
    {
      if ((v36 & 1) != 0 || !sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0)))
      {
        v46 = sub_22EF67C8C(v12[11]);
        v47 = sub_22ED02FD4(v12, a4, v46, &v117, 3);
        goto LABEL_105;
      }
      v44 = v12[9];
    }
    v45 = 0;
    LOBYTE(v121) = 0;
    v120 = off_24FAB9308;
    v122 = v33;
    LOWORD(v123) = v36;
    if ((*(_BYTE *)(v44 + 238) & 0x10) != 0)
    {
      if ((*(_BYTE *)(v44 + 3) & 0x80) != 0)
        v45 = 1;
      else
        v45 = (*(_DWORD *)(v44 + 52) >> 30) & 1;
    }
    v47 = sub_22EB4CB24(v12, a4, &v117, &v120, v45);
    if (BYTE1(v123))
      v47 = 0;
LABEL_105:
    if ((v47 & 1) != 0)
      goto LABEL_137;
    if (v47 <= 1)
    {
LABEL_111:
      v40 = v12[11];
      v41 = v129;
      v42 = (_DWORD *)a4;
      v43 = a3;
      goto LABEL_112;
    }
    v54 = *(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v54 + 17) & 4) == 0
      && (sub_22F1110EC(v54, 0) & 1) == 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 5)
    {
      sub_22E8FCA40(v12, a6, v33, 0, (uint64_t)v115);
      sub_22E903BEC(v115);
      if ((v36 & 1) == 0)
        goto LABEL_111;
LABEL_137:
      v16 = 0;
      goto LABEL_138;
    }
    if (!v119)
    {
      v73 = v118 - 1;
      v74 = &v117;
      if (v118 >= 0x41)
        v74 = (unint64_t *)(v117 + 8 * (v73 >> 6));
      if (((*v74 >> v73) & 1) != 0)
      {
        if (!a7)
        {
          sub_22F0D5A50(a4);
          sub_22E8FCA40(v12, v75, 0x1385u, 0, (uint64_t)&v120);
          sub_22F0D4E74(a4);
          *(_QWORD *)v130 = v76;
          sub_22E8906A0((uint64_t)&v120, (uint64_t *)v130);
LABEL_136:
          sub_22E903BEC((unsigned int *)&v120);
          goto LABEL_137;
        }
        sub_22F0D5A50(a4);
        sub_22E8FCA40(v12, v110, 0xC50u, 0, (uint64_t)&v120);
        __dst[0] = a7;
        sub_22EFC683C((uint64_t *)__dst, v130);
        v111 = sub_22F2F3734((uint64_t)&v120, (void **)v130);
        sub_22F0D4E74(a4);
        __dst[0] = v112;
        sub_22E8906A0(v111, (uint64_t *)__dst);
        if ((v130[23] & 0x80000000) == 0)
          goto LABEL_136;
        v109 = *(void **)v130;
LABEL_205:
        operator delete(v109);
        goto LABEL_136;
      }
    }
    if (sub_22E42E5EC((uint64_t)&v117, 0))
    {
      sub_22F0D5A50(a4);
      v66 = v65;
      sub_22EE03478((uint64_t)v12);
      if (v67 || (*(_QWORD *)(v12[9] + 100) & 0x2000000000) != 0)
        v68 = 5021;
      else
        v68 = 5389;
      sub_22E8FCA40(v12, v66, v68, 0, (uint64_t)&v120);
      LODWORD(__dst[0]) = 0;
      v77 = sub_22E8900C4((uint64_t)&v120, (int *)__dst);
      sub_22F0D4E74(a4);
      *(_QWORD *)v130 = v78;
      sub_22E8906A0(v77, (uint64_t *)v130);
      sub_22E903BEC((unsigned int *)&v120);
    }
    v79 = *(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v79 + 17) & 0xC) != 0
      || (sub_22F1110EC(v79, 0) & 1) != 0
      || (v87 = v129,
          v88 = *(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0),
          LOBYTE(v120) = 0,
          (v89 = sub_22F110500((uint64_t)&v120, v88)) != 0)
      && *(_QWORD *)(v89 + 24) <= 0xFuLL
      && (*(_BYTE *)(v89 + 17) & 4) == 0)
    {
      v80 = v118;
      if (v118 > 0x40)
        v81 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v117);
      else
        v81 = v118 + __clz(v117) - 64;
      v82 = v80 - v81;
    }
    else
    {
      v82 = sub_22F10B100(v12[11], v87, (llvm::APInt *)&v117);
    }
    v83 = v12[11];
    v84 = sub_22EF67C8C(v83);
    v85 = sub_22EF5CDF0(v83, *(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFF0));
    if (v85 >= 0x3D)
      v86 = 61;
    else
      v86 = v85;
    if (v82 <= v86)
    {
      v39 = sub_22EF5FE30(v12[11], v129, (const llvm::APInt *)&v117, (unsigned __int8 *)a4, a3, a5);
      goto LABEL_113;
    }
    sub_22F0D5A50(a4);
    sub_22E8FCA40(v12, v101, 0xAA7u, 0, (uint64_t)&v120);
    *(_QWORD *)v130 = v131;
    *(_OWORD *)&v130[8] = xmmword_22F455490;
    llvm::APInt::toString();
    v102 = *(void **)&v130[8];
    if (*(_QWORD *)&v130[8] >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    v103 = *(const void **)v130;
    if (*(_QWORD *)&v130[8] >= 0x17uLL)
    {
      v105 = (*(_QWORD *)&v130[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&v130[8] | 7) != 0x17)
        v105 = *(_QWORD *)&v130[8] | 7;
      v106 = v105 + 1;
      v104 = (void **)operator new(v105 + 1);
      __dst[1] = v102;
      v114 = v106 | 0x8000000000000000;
      __dst[0] = v104;
    }
    else
    {
      HIBYTE(v114) = v130[8];
      v104 = __dst;
      if (!*(_QWORD *)&v130[8])
        goto LABEL_199;
    }
    memmove(v104, v103, (size_t)v102);
LABEL_199:
    *((_BYTE *)v102 + (_QWORD)v104) = 0;
    if (*(_QWORD **)v130 != v131)
      free(*(void **)v130);
    v107 = sub_22F2F3734((uint64_t)&v120, __dst);
    sub_22F0D4E74(a4);
    *(_QWORD *)v130 = v108;
    sub_22E8906A0(v107, (uint64_t *)v130);
    if ((SHIBYTE(v114) & 0x80000000) == 0)
      goto LABEL_136;
    v109 = __dst[0];
    goto LABEL_205;
  }
  v39 = sub_22EF6042C(v12[11], v129, (unsigned __int8 *)a4, a3, a5, a6);
LABEL_113:
  v16 = v39;
  v129 = v39;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5
    && !*(_BYTE *)(*(_QWORD *)(v12[11] + 15088) + 82))
  {
    v69 = v12[9];
    v70 = 5148;
    if ((*(_BYTE *)(v69 + 68) & 0x20) != 0)
    {
      if ((*(_WORD *)(v69 + 96) & 0x80) != 0)
        v70 = 3146;
      else
        v70 = 5148;
    }
    sub_22F308EA4(v12, a6, v70, 0, (uint64_t)&v120);
    v71 = v12[9];
    if ((*(_BYTE *)(v71 + 68) & 0x20) != 0 && (*(_WORD *)(v71 + 96) & 0x80) != 0)
    {
      v90 = v12[27];
      v91 = (*(_WORD *)(v90 + 8) & 0x7E) - 52;
      if (v90)
        v92 = v90 - 72;
      else
        v92 = 0;
      if (v91 >= 6)
        v93 = 0;
      else
        v93 = v92;
      v72 = sub_22E9FDFC4((uint64_t)v12, v93, 0);
    }
    else
    {
      v72 = 4;
    }
    *(_DWORD *)v130 = v72;
    sub_22E8900C4((uint64_t)&v120, (int *)v130);
    sub_22E903BEC((unsigned int *)&v120);
    v16 = v129;
  }
  v55 = v12[9];
  if ((*(_QWORD *)v55 & 1) == 0
    && a5 | a3
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 5)
  {
    if ((*(_QWORD *)v55 & 0x100) != 0)
      v56 = 2987;
    else
      v56 = 5183;
    sub_22E8FCA40(v12, a6, v56, 0, (uint64_t)&v120);
    if (v126)
    {
      v57 = v124;
      if (!v124)
      {
        v57 = (unsigned __int8 *)sub_22E3B8AAC(v125);
        v124 = v57;
      }
      v58 = (int)a3;
      v57[*v57 + 1] = 2;
      v59 = v124;
    }
    else
    {
      if (!v128)
        goto LABEL_127;
      v94 = v123;
      v95 = (uint64_t *)(v120 + 1598);
      if (v123)
        v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 32))(v123);
      *(_QWORD *)v130 = v94;
      v96 = sub_22F2F1D6C(v95, (uint64_t *)v130);
      v97 = v96[1] + 32 * v127;
      v100 = *(unsigned __int8 **)(v97 + 8);
      v99 = (unsigned __int8 **)(v97 + 8);
      v98 = v100;
      if (!v100)
      {
        v98 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v99[1]);
        *v99 = v98;
      }
      v58 = (int)a3;
      v98[*v98 + 1] = 2;
      v59 = *v99;
    }
    v60 = *v59;
    *v59 = v60 + 1;
    *(_QWORD *)&v59[8 * v60 + 16] = v58;
LABEL_127:
    sub_22E903BEC((unsigned int *)&v120);
    v55 = v12[9];
    v16 = v129;
  }
  if ((*(_DWORD *)(v55 + 52) & 0x40000000) != 0)
  {
    *(_QWORD *)v130 = sub_22EF5BA38(v12[11], v16);
    v63 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v130 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    if (v63 != 10 && v63 != 38 && (v63 & 0xFF800FF) != 116391947)
    {
      v61.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v130 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
      v62.i32[0] = 264241407;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8(v61, v62), 0), (int32x4_t)xmmword_22F45AEA0))) & 1) == 0&& (v63 & 0xFE000FF) != 0x100000B)
      {
        v16 = v129;
        goto LABEL_138;
      }
    }
    sub_22E8FCA40(v12, a6, 0x113Bu, 0, (uint64_t)&v120);
    sub_22E8901B8((uint64_t)&v120, (uint64_t *)v130);
    goto LABEL_136;
  }
LABEL_138:
  if (v118 >= 0x41 && v117)
    MEMORY[0x2348A0E84](v117, 0x1000C8000313F17);
  return v16;
}

unint64_t sub_22EE7F62C(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unsigned int v41;
  char v42;
  unsigned int v43[24];
  uint64_t v44;

  v44 = a2;
  v9 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(v10 + 17) & 4) == 0
    && ((v12 = *(_DWORD *)(*(_QWORD *)v11 + 16), v12 == 11)
      ? (v13 = (v12 & 0xFF80000) == 87031808)
      : (v13 = 1),
        v13
     || ((v14 = (v12 >> 19) & 0x1FE, v15 = v14 - 166, v16 = v14 - 210, v15 >= 0x14) ? (v17 = v16 > 7) : (v17 = 0), v17))
    || (*(_DWORD *)(*(_QWORD *)v11 + 16) & 0xFEu) - 2 <= 3)
  {
    sub_22E8FCA40(a1, a5, 0xB04u, 0, (uint64_t)v43);
    sub_22E8901B8((uint64_t)v43, &v44);
    sub_22E903BEC(v43);
    return 0;
  }
  if ((*(_DWORD *)a3 & 0x18000) == 0)
  {
    sub_22F00905C((uint64_t)a3, a1[11], 0, (uint64_t)&v40);
    if (!v42)
    {
      sub_22E8FCA40(a1, a5, 0xAE5u, 0, (uint64_t)v43);
      v29 = sub_22F2F30F4((uint64_t)v43, (uint64_t)"vector_size");
      v39 = 1;
      v30 = sub_22E8900C4(v29, &v39);
      sub_22F0D4E74((uint64_t)a3);
      v38 = v31;
      v28 = (unsigned int *)v30;
      goto LABEL_26;
    }
    v20 = *v9;
    if ((*(_BYTE *)(v20 + 17) & 4) != 0)
    {
      v32 = sub_22F36B994(a1[11], a2, a3, a5, 0);
    }
    else
    {
      v21 = v41;
      if (v41 > 0x40)
        v22 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v40);
      else
        v22 = v41 + __clz((unint64_t)v40) - 64;
      if (v21 - v22 >= 0x3E)
        goto LABEL_37;
      v23 = v40;
      if (v21 < 0x41)
        v23 = (unint64_t *)&v40;
      v24 = 8 * *v23;
      v25 = sub_22EF5CDF0(a1[11], v20);
      if (!v24)
      {
        v33 = a5;
        v34 = a1;
        v35 = 2867;
LABEL_38:
        sub_22E8FCA40(v34, v33, v35, 0, (uint64_t)v43);
        sub_22F0D4E74((uint64_t)a3);
        v38 = v36;
        v37 = sub_22E8906A0((uint64_t)v43, &v38);
        sub_22F2F30F4(v37, (uint64_t)"vector");
        goto LABEL_27;
      }
      if (!v25 || (v26 = v24 / v25, v24 % v25))
      {
        sub_22E8FCA40(a1, a5, 0xB01u, 0, (uint64_t)v43);
        sub_22F0D4E74((uint64_t)a3);
        v38 = v27;
        v28 = v43;
LABEL_26:
        sub_22E8906A0((uint64_t)v28, &v38);
LABEL_27:
        sub_22E903BEC(v43);
        v18 = 0;
LABEL_28:
        if (v42 && v41 >= 0x41)
        {
          if (v40)
            MEMORY[0x2348A0E84](v40, 0x1000C8000313F17);
        }
        return v18;
      }
      if (HIDWORD(v26))
      {
LABEL_37:
        v33 = a5;
        v34 = a1;
        v35 = 2850;
        goto LABEL_38;
      }
      v32 = sub_22F36B7E4(a1[11], a2, v26, 0);
    }
    v18 = v32;
    goto LABEL_28;
  }
  return sub_22F36B994(a1[11], a2, a3, a5, 0);
}

unint64_t sub_22EE7F938(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v23;
  int v24;
  int v25;
  _QWORD *v26;
  unsigned int v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  unsigned int v44;
  char v45;
  unsigned int v46[24];
  uint64_t v47;

  v47 = a2;
  v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v11 + 17) & 4) != 0)
    goto LABEL_23;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_DWORD *)(v12 + 16);
  if (v12)
    v14 = v13 == 11;
  else
    v14 = 0;
  if (v14)
  {
    if (((*(_DWORD *)(v12 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_23;
  }
  else if (v12 && v13 == 44)
  {
    v15 = sub_22F114198(*(_QWORD *)(v12 + 24));
    if ((*(_BYTE *)(v15 + 74) & 1) != 0 || *(_QWORD *)(v15 + 128) > 7uLL)
    {
      v16 = sub_22F114198(*(_QWORD *)(v12 + 24));
      v11 = *v10;
      if ((*(_BYTE *)(v16 + 76) & 0x80) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = *v10;
    }
  }
  else if (v13 == 9)
  {
    goto LABEL_23;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(_DWORD *)(v17 + 16) == 11;
  else
    v18 = 0;
  if (v18 && ((*(_DWORD *)(v17 + 16) >> 19) & 0x1FEu) - 210 < 8)
  {
LABEL_23:
    v19 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v19)
      v20 = (*(_DWORD *)(v19 + 16) & 0xFF800FF) == 87031819;
    else
      v20 = 0;
    if (v20)
    {
      v21 = a1[9];
      if ((*(_DWORD *)(v21 + 52) & 0x40000000) != 0
        && !sub_22F420564((uint64_t)(a1 + 3), (uint64_t)"cl_APPLE_BOOL_vec", 17, v21))
      {
        v25 = a5;
        v26 = a1;
        v27 = 5135;
        goto LABEL_35;
      }
    }
    if ((*(_DWORD *)a3 & 0x18000) != 0)
      return sub_22EF63908(a1[11], a2, a3, a4, a5);
    sub_22F00905C((uint64_t)a3, a1[11], 0, (uint64_t)&v43);
    if (v45)
    {
      v23 = v44;
      if (v44 > 0x40)
        v24 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v43);
      else
        v24 = v44 + __clz((unint64_t)v43) - 64;
      if (v23 - v24 >= 0x21)
      {
        v35 = a5;
        v36 = a1;
        v37 = 2850;
      }
      else
      {
        v33 = v43;
        if (v23 < 0x41)
          v33 = (unint64_t *)&v43;
        v34 = *(unsigned int *)v33;
        if ((_DWORD)v34)
        {
          v28 = sub_22EF63724(a1[11], v47, v34, a4);
          goto LABEL_46;
        }
        v35 = a5;
        v36 = a1;
        v37 = 2867;
      }
      sub_22E8FCA40(v36, v35, v37, 0, (uint64_t)v46);
      sub_22F0D4E74((uint64_t)a3);
      v42 = v38;
      v39 = sub_22E8906A0((uint64_t)v46, &v42);
      sub_22F2F30F4(v39, (uint64_t)"vector");
    }
    else
    {
      sub_22E8FCA40(a1, a5, 0xAE5u, 0, (uint64_t)v46);
      v29 = "packed_vector_type";
      if (!(_DWORD)a4)
        v29 = "ext_vector_type";
      v42 = (uint64_t)v29;
      v30 = sub_22E8AECC4((uint64_t)v46, &v42);
      v41 = 1;
      v31 = sub_22E8900C4(v30, &v41);
      sub_22F0D4E74((uint64_t)a3);
      v40 = v32;
      sub_22E8906A0(v31, &v40);
    }
    sub_22E903BEC(v46);
    v28 = 0;
LABEL_46:
    if (v45 && v44 >= 0x41)
    {
      if (v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
    }
    return v28;
  }
  v25 = a5;
  v26 = a1;
  v27 = 2820;
LABEL_35:
  sub_22E8FCA40(v26, v25, v27, 0, (uint64_t)v46);
  sub_22E8901B8((uint64_t)v46, &v47);
  sub_22E903BEC(v46);
  return 0;
}

unint64_t sub_22EE7FCAC(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned int v35[24];
  uint64_t v36;

  v36 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0 || sub_22E99600C(a2))
  {
    if ((*(_DWORD *)a3 & 0x8000) != 0 || *(_DWORD *)a4 & 0x18000 | *(_DWORD *)a3 & 0x10000)
      return sub_22EF63B24(a1[11], a2, a3, a4, a5);
    sub_22F00905C((uint64_t)a3, a1[11], 0, (uint64_t)&v32);
    sub_22F00905C((uint64_t)a4, a1[11], 0, (uint64_t)&v29);
    sub_22F0D4E74((uint64_t)a3);
    v28 = v12;
    sub_22F0D4E74((uint64_t)a4);
    v27 = v13;
    if (v34 | v31)
    {
      if (!v34)
      {
        sub_22E8FCA40(a1, a5, 0xAE5u, 0, (uint64_t)v35);
        v14 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix_type");
        v26 = 1;
        v15 = sub_22E8900C4(v14, &v26);
LABEL_11:
        v16 = &v28;
LABEL_15:
        sub_22E8906A0(v15, v16);
        goto LABEL_16;
      }
      if (!v31)
      {
        sub_22E8FCA40(a1, a5, 0xAE5u, 0, (uint64_t)v35);
        v19 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix_type");
        v26 = 1;
        v15 = sub_22E8900C4(v19, &v26);
        goto LABEL_14;
      }
      v20 = (uint64_t *)&v32;
      if (v33 >= 0x41)
        v20 = v32;
      v21 = *v20;
      v22 = (uint64_t *)&v29;
      if (v30 >= 0x41)
        v22 = v29;
      v23 = *v22;
      if (v21 | *v22)
      {
        if (!(_DWORD)v21)
        {
          sub_22E8FCA40(a1, a5, 0xB33u, 0, (uint64_t)v35);
          v15 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix");
          goto LABEL_11;
        }
        if ((_DWORD)v23)
        {
          if ((unint64_t)v21 - 1 >= 0xFFFFF)
          {
            sub_22E8FCA40(a1, a5, 0xB22u, 0, (uint64_t)v35);
            v24 = sub_22E8906A0((uint64_t)v35, &v28);
            sub_22F2F30F4(v24, (uint64_t)"matrix row");
          }
          else
          {
            if ((unint64_t)*v22 - 1 < 0xFFFFF)
            {
              v11 = sub_22F36BBA8(a1[11], a2, v21, v23);
LABEL_17:
              if (v31 && v30 >= 0x41 && v29)
                MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
              if (v34 && v33 >= 0x41)
              {
                if (v32)
                  MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
              }
              return v11;
            }
            sub_22E8FCA40(a1, a5, 0xB22u, 0, (uint64_t)v35);
            v25 = sub_22E8906A0((uint64_t)v35, &v27);
            sub_22F2F30F4(v25, (uint64_t)"matrix column");
          }
LABEL_16:
          sub_22E903BEC(v35);
          v11 = 0;
          goto LABEL_17;
        }
        sub_22E8FCA40(a1, a5, 0xB33u, 0, (uint64_t)v35);
        v15 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix");
LABEL_14:
        v16 = &v27;
        goto LABEL_15;
      }
      sub_22E8FCA40(a1, a5, 0xB33u, 0, (uint64_t)v35);
      v18 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix");
    }
    else
    {
      sub_22E8FCA40(a1, a5, 0xAE5u, 0, (uint64_t)v35);
      v17 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"matrix_type");
      v26 = 1;
      v18 = sub_22E8900C4(v17, &v26);
    }
    v15 = sub_22E8906A0(v18, &v28);
    goto LABEL_14;
  }
  sub_22E8FCA40(a1, a5, 0xB00u, 0, (uint64_t)v35);
  sub_22E8901B8((uint64_t)v35, &v36);
  sub_22E903BEC(v35);
  return 0;
}

uint64_t sub_22EE80084(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  unsigned int v42[24];
  uint64_t v43;

  v43 = a2;
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 < 4
    || (v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
        (v7 - 25) <= 1))
  {
    sub_22E8FCA40(a1, a3, 0xDB9u, 0, (uint64_t)v42);
    LOBYTE(v33) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0)
                                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                                   + 16)
                - 25 < 2;
    v8 = (unsigned int *)sub_22E894E38((uint64_t)v42, (unsigned __int8 *)&v33);
LABEL_4:
    sub_22E8901B8((uint64_t)v8, &v43);
LABEL_5:
    sub_22E903BEC(v42);
    return 1;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x690000B
    && (*(_BYTE *)(a1[9] + 68) & 0x10) == 0)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 80))(*(_QWORD *)(a1[11] + 15088)))
    {
      sub_22E8FCA40(a1, a3, 0x119Fu, 0, (uint64_t)v42);
      v41 = 1;
      v12 = sub_22E8900C4((uint64_t)v42, &v41);
      v36 = 0;
      v35 = 0;
      v38 = 0;
      v39 = 0x100000000000000;
      v33 = a3 | ((unint64_t)a3 << 32);
      v34 = 0;
      __p = (void *)42;
LABEL_24:
      v40 = 0;
      sub_22E890748(v12, &v33);
      if (SHIBYTE(v39) < 0)
        operator delete(__p);
      goto LABEL_5;
    }
    v6 = *v5;
    v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if ((v7 - 33) <= 1)
  {
    sub_22E8FCA40(a1, a3, 0x1034u, 0, (uint64_t)v42);
    v41 = 0;
    v11 = sub_22E8900C4((uint64_t)v42, &v41);
    v12 = sub_22E8901B8(v11, &v43);
    v36 = 0;
    v35 = 0;
    v38 = 0;
    v39 = 0x100000000000000;
    v33 = a3 | ((unint64_t)a3 << 32);
    v34 = 0;
    __p = (void *)42;
    goto LABEL_24;
  }
  v13 = v5[1];
  if ((v13 & 8) != 0 && (*(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) != 0)
  {
    sub_22E8FCA40(a1, a3, 0x11F7u, 0, (uint64_t)v42);
    v14 = sub_22E8901B8((uint64_t)v42, &v43);
    v15 = 0;
    v16 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v17 != 39)
    {
      v18 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v16 + 16) == 32
         || v17 == 32 && (v18 = sub_22F10CF48(*(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0))) != 0)
        && sub_22E509ED0(v18))
      {
        v15 = 0;
      }
      else
      {
        v15 = *(_BYTE *)(v16 + 16) != 32
           && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
            || (v16 = sub_22F10CF48(v16)) == 0)
           || !sub_22E509F54(v16);
      }
    }
    LODWORD(v33) = v15;
    v21 = sub_22E8900C4(v14, (int *)&v33);
    v41 = 0;
    sub_22E8900C4(v21, &v41);
    goto LABEL_5;
  }
  v19 = a2;
  if ((*(_BYTE *)(a1[9] + 104) & 0x20) != 0)
  {
    v20 = sub_22F10C618(v6);
    v19 = a2;
    if (v20)
    {
      sub_22E8FCA40(a1, a3, 0xF19u, 0, (uint64_t)v42);
      v8 = v42;
      goto LABEL_4;
    }
  }
  while (1)
  {
    v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if (v23)
      v24 = (*(_DWORD *)(v23 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v24 = 0;
    if (v24)
    {
      v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_35;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v31 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v22 = sub_22F10CF48(v23);
    v23 = v31;
    if (!v22)
      break;
LABEL_35:
    v19 = *(_QWORD *)(v22 + 32);
  }
  v25 = sub_22F10C2A4(v23);
  if (v25 && (*(_DWORD *)(v25 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v25 + 76) & 1) != 0)
  {
LABEL_63:
    sub_22F31DBEC((uint64_t)a1, a2, a3, 1, 6);
    goto LABEL_53;
  }
  v26 = a2;
  while (2)
  {
    v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = (*(_DWORD *)(v27 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v28 = 0;
    if (v28)
    {
      v29 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
LABEL_51:
      v26 = *(_QWORD *)(v29 + 32);
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v32 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
    v29 = sub_22F10CF48(v27);
    v27 = v32;
    if (v29)
      goto LABEL_51;
  }
  v30 = sub_22F10C2A4(v27);
  if (v30 && (*(_DWORD *)(v30 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v30 + 76) & 2) != 0)
    goto LABEL_63;
LABEL_53:
  if (((a2 & 4) != 0 || (v5[1] & 4) != 0) && (*(_BYTE *)(a1[9] + 1) & 0x10) != 0)
  {
    sub_22E8FCA40(a1, a3, 0x196Du, 0, (uint64_t)v42);
    sub_22E8901B8((uint64_t)v42, &v43);
    sub_22E903BEC(v42);
  }
  return 0;
}

unint64_t sub_22EE80544(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  unsigned int v44[24];
  _BYTE v45[96];
  unint64_t v46;
  uint64_t v47;

  v7 = a5;
  v47 = a2;
  v11 = a5;
  v12 = sub_22EE80084(a1, a2, a5);
  v32 = a4;
  v13 = a4;
  v34 = (uint64_t *)a3;
  if ((_DWORD)a4)
  {
    v31 = v11 | (v7 << 32);
    while (1)
    {
      v46 = sub_22EF69F90(a1[11], *a3);
      v14 = v46 & 0xFFFFFFFFFFFFFFF0;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v16 = *(_DWORD *)(v15 + 16) & 0xFF800FF;
      if (v15 && v16 == 86507531)
        break;
      if (v15)
        v18 = v16 == 110100491;
      else
        v18 = 0;
      if (v18 && (*(_BYTE *)(a1[9] + 68) & 0x10) == 0)
      {
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 80))(*(_QWORD *)(a1[11] + 15088)))
        {
          sub_22E8FCA40(a1, v11, 0x119Fu, 0, (uint64_t)v44);
          v43 = 0;
          v28 = sub_22E8900C4((uint64_t)v44, &v43);
          v38 = 0;
          v37 = 0;
          v40 = 0;
          v41 = 0x100000000000000;
          __p = (void *)42;
          v35 = v31;
          v36 = 0;
          v42 = 0;
          sub_22E890748(v28, &v35);
          if (SHIBYTE(v41) < 0)
            operator delete(__p);
          v26 = v44;
          goto LABEL_24;
        }
        v14 = v46 & 0xFFFFFFFFFFFFFFF0;
      }
      v19 = *(_QWORD *)(v14 + 8);
      if ((v19 & 8) != 0 && (*(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) != 0)
      {
        v20 = v7;
        sub_22E8FCA40(a1, v11, 0x11F7u, 0, (uint64_t)v44);
        v21 = sub_22E8901B8((uint64_t)v44, &v47);
        v22 = *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0);
        v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v12 = 1;
        LODWORD(v24) = 1;
        if (v23 != 39)
        {
          v25 = *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v22 + 16) == 32
             || v23 == 32 && (v25 = sub_22F10CF48(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0))) != 0)
            && sub_22E509ED0(v25))
          {
            LODWORD(v24) = 1;
          }
          else
          {
            if (*(_BYTE *)(v22 + 16) == 32)
              goto LABEL_37;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
            {
              LODWORD(v24) = 0;
              goto LABEL_39;
            }
            v24 = sub_22F10CF48(v22);
            v22 = v24;
            if (v24)
LABEL_37:
              LODWORD(v24) = sub_22E509F54(v22);
          }
        }
LABEL_39:
        LODWORD(v35) = v24 ^ 1;
        v29 = sub_22E8900C4(v21, (int *)&v35);
        v43 = 1;
        sub_22E8900C4(v29, &v43);
        sub_22E903BEC(v44);
        v7 = v20;
      }
LABEL_25:
      v27 = v46;
      if (((v46 & 4) != 0 || (*(_BYTE *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
        && (*(_BYTE *)(a1[9] + 1) & 0x10) != 0)
      {
        sub_22E8FCA40(a1, v11, 0x196Cu, 0, (uint64_t)v44);
        sub_22E8901B8((uint64_t)v44, (uint64_t *)&v46);
        sub_22E903BEC(v44);
        v27 = v46;
      }
      *a3++ = v27;
      if (!--v13)
        goto LABEL_40;
    }
    sub_22E8FCA40(a1, v11, 0x119Du, 0, (uint64_t)v45);
    v26 = (unsigned int *)v45;
LABEL_24:
    sub_22E903BEC(v26);
    v12 = 1;
    goto LABEL_25;
  }
LABEL_40:
  if (*(_QWORD *)(a7 + 64))
  {
    v44[0] = v7;
    sub_22EE808F4((uint64_t)a1, (uint64_t)v34, v32, a7);
  }
  if ((*(_WORD *)a7 & 0x40) != 0)
  {
    sub_22F3205EC(a1, v11, v47);
    if ((v12 & 1) != 0)
      return 0;
  }
  else if ((v12 & 1) != 0)
  {
    return 0;
  }
  return sub_22EF63D8C(a1[11], v47, v34, v32, (__int128 *)a7, 0);
}

void sub_22EE808F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    __asm { BR              X9 }
}

unint64_t sub_22EE80BC8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v20;
  void *__p[2];
  char v22;
  _BYTE v23[96];
  _BYTE v24[96];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = a2;
  v25 = a3;
  v26 = a2;
  if (sub_22EB14770((uint64_t)a1, a2))
  {
    sub_22E8FCA40(a1, a4, 0xCC6u, 0, (uint64_t)v24);
    v10 = (unsigned int *)v24;
LABEL_34:
    sub_22E903BEC(v10);
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    sub_22E8FCA40(a1, a4, 0xDE2u, 0, (uint64_t)v23);
    v27 = a5;
    if (a5)
    {
      sub_22EFC683C(&v27, __p);
    }
    else
    {
      v22 = 9;
      strcpy((char *)__p, "type name");
    }
    v20 = sub_22F2F3734((uint64_t)v23, __p);
    sub_22E8901B8(v20, &v26);
LABEL_31:
    if (v22 < 0)
      operator delete(__p[0]);
    goto LABEL_33;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x528000B)
  {
    sub_22E8FCA40(a1, a4, 0xDE3u, 0, (uint64_t)v23);
    v27 = a5;
    if (a5)
    {
      sub_22EFC683C(&v27, __p);
    }
    else
    {
      v22 = 9;
      strcpy((char *)__p, "type name");
    }
    sub_22F2F3734((uint64_t)v23, __p);
    goto LABEL_31;
  }
  v11 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*v11 + 17) & 4) == 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
  {
    sub_22E8FCA40(a1, a4, 0xEC5u, 0, (uint64_t)v23);
    sub_22E8901B8((uint64_t)v23, &v25);
    goto LABEL_33;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
  {
    v12 = a1[9];
    if ((*(_DWORD *)(v12 + 52) & 0x40000000) != 0
      && !sub_22F420564((uint64_t)(a1 + 3), (uint64_t)"__cl_clang_function_pointers", 28, v12))
    {
      v16 = a4;
      v17 = a1;
      v18 = 4399;
      goto LABEL_17;
    }
  }
  if ((*(_WORD *)(a1[9] + 96) & 0x40) != 0)
  {
    v16 = a4;
    v17 = a1;
    v18 = 3540;
LABEL_17:
    sub_22E8FCA40(v17, v16, v18, 0, (uint64_t)v23);
    LODWORD(__p[0]) = 0;
    sub_22E8900C4((uint64_t)v23, (int *)__p);
LABEL_33:
    v10 = (unsigned int *)v23;
    goto LABEL_34;
  }
  v13 = a5 & 7;
  if (v13 == 3)
  {
    v15 = 1;
  }
  else
  {
    if (v13 == 7)
    {
      v14 = *(_DWORD *)(a5 & 0xFFFFFFFFFFFFFFF8);
      if (v14 >= 3)
        v14 = 3;
      v13 = v14 | 8;
    }
    v15 = v13 == 4;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    sub_22EE80EC8(a1, &v26, 0, v15, a4);
    v8 = v26;
  }
  return sub_22F36A6C0(a1[11], v8, *v11);
}

void sub_22EE80EC8(_QWORD *a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  int v25;
  _QWORD v26[2];
  unsigned int v27[24];
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[3];

  v31[1] = *MEMORY[0x24BDAC8D0];
  sub_22EE8A960(&v28, *a2);
  v10 = (uint64_t)v29;
  v11 = v29[2];
  if (*((_BYTE *)v29 + 16) == 26)
    v12 = (v11 >> 59) & 1;
  else
    v12 = 0;
  v13 = (v11 >> 19) & 0x1F;
  v14 = sub_22EF72F20(a1[11], v12, a3 ^ 1u, 0);
  if (v13 == v14)
    goto LABEL_15;
  v15 = v14;
  v16 = a1[11];
  if (*(_DWORD *)(*(_QWORD *)(v16 + 15088) + 148) == 11 && a4 != 0)
  {
    if (v13 != 1)
    {
      sub_22E8FCA40(a1, a5, 0x18C5u, 0, (uint64_t)v27);
      v26[0] = sub_22F40A550(v13);
      v26[1] = v20;
      v21 = sub_22F2F2210((uint64_t)v27, (uint64_t)v26);
      v25 = 2;
      sub_22E8900C4(v21, &v25);
      sub_22E903BEC(v27);
    }
    goto LABEL_20;
  }
  v18 = sub_22EF72F20(v16, v12, a3, 0);
  if (v13 == (_DWORD)v18 && (_DWORD)v18 != v15)
  {
    v24 = sub_22F34BA4C(v18, *a2);
    if ((v24 & 1) == 0)
    {
LABEL_20:
      v22 = sub_22EF5F1F4(a1[11], v10, (unsigned __int16)(*(_QWORD *)(v10 + 16) >> 19) & 0x1FE0u | v15);
      if (v29 == v22)
      {
        v23 = v28;
      }
      else
      {
        v29 = v22;
        v23 = sub_22EE95C30(&v28, a1[11], v28, 0);
      }
      *a2 = sub_22F36A110(a1[11], *a2, v23);
    }
  }
LABEL_15:
  if (v30 != v31)
    free(v30);
}

void sub_22EE810A4(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char **v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v35[25];
  int v36;
  _DWORD v37[14];
  _DWORD v38[14];
  _DWORD v39[8];
  _DWORD v40[56];
  void *v41;
  __int128 v42;
  _BYTE v43[32];
  const char *v44;
  int v45;
  int v46;
  const char *v47;
  int v48;
  int v49;
  const char *v50;
  int v51;
  int v52;
  const char *v53;
  int v54;
  int v55;
  const char *v56;
  int v57;
  int v58;
  const char *v59;
  int v60;
  int v61;
  const char *v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return;
  v12 = 0;
  v44 = "const";
  v45 = 1;
  v46 = a5;
  v47 = "volatile";
  v48 = 4;
  v49 = a6;
  v50 = "restrict";
  v51 = 2;
  v52 = a7;
  v53 = "__unaligned";
  v54 = 8;
  v55 = a9;
  v56 = "_Atomic";
  v57 = 16;
  v58 = a8;
  v59 = "coherent(device)";
  v60 = 32;
  v61 = a11;
  v62 = "coherent(system)";
  v63 = 64;
  v64 = a11;
  v41 = v43;
  v42 = xmmword_22F44E330;
  v36 = 0;
  do
  {
    v13 = &v37[v12];
    *((_BYTE *)v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 3) = 0;
    *((_BYTE *)v13 + 20) = 0;
    *((_QWORD *)v13 + 4) = 0;
    *((_QWORD *)v13 + 5) = 0;
    *((_QWORD *)v13 + 3) = 0;
    v12 += 14;
    *((_BYTE *)v13 + 48) = 0;
  }
  while (v12 != 98);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = &(&v44)[v14];
    if (((uint64_t)(&v44)[v14 + 1] & a3) == 0)
      goto LABEL_25;
    v18 = v42;
    if ((_QWORD)v42)
    {
      if ((unint64_t)(v42 + 1) > *((_QWORD *)&v42 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v18 = v42;
      }
      *((_BYTE *)v41 + v18) = 32;
      v19 = v42 + 1;
      *(_QWORD *)&v42 = v42 + 1;
    }
    else
    {
      v19 = 0;
    }
    v20 = *v17;
    if (*v17)
      v21 = strlen(*v17);
    else
      v21 = 0;
    if (*((_QWORD *)&v42 + 1) < v21 + v19)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v19 = v42;
      if (!v21)
        goto LABEL_18;
LABEL_17:
      memcpy((char *)v41 + v19, v20, v21);
      v19 = v42;
      goto LABEL_18;
    }
    if (v21)
      goto LABEL_17;
LABEL_18:
    *(_QWORD *)&v42 = v19 + v21;
    v22 = *(unsigned int *)((char *)&v46 + v14 * 8);
    if ((_DWORD)v22)
    {
      v23 = &v37[14 * v15];
      *(_QWORD *)v23 = v22 | (v22 << 32);
      *((_BYTE *)v23 + 8) = 1;
      v24 = v23 + 6;
      *(_QWORD *)(v23 + 3) = 0;
      *((_BYTE *)v23 + 20) = 0;
      if (*((char *)v23 + 47) < 0)
        operator delete(*(void **)v24);
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_BYTE *)v24 + 24) = 0;
      *((_QWORD *)v24 + 2) = 0;
      if (!v16 || sub_22F1E3C34(*(_QWORD **)(a1 + 112), v22, v16))
        v16 = v22;
    }
    v36 = ++v15;
LABEL_25:
    v14 += 2;
  }
  while (v14 != 14);
  if (v16)
    v25 = v16;
  else
    v25 = a4;
  sub_22E8FCA40((_QWORD *)a1, v25, a2, 0, (uint64_t)v35);
  v26 = sub_22F2F2210((uint64_t)v35, (uint64_t)&v41);
  v27 = sub_22E89519C(v26, (unsigned int *)&v36);
  v28 = sub_22E890748(v27, v37);
  v29 = sub_22E890748(v28, v38);
  v30 = sub_22E890748(v29, v39);
  sub_22E890748(v30, v40);
  sub_22E903BEC(v35);
  v31 = 98;
  do
  {
    if (SHIBYTE(v35[v31 + 23]) < 0)
      operator delete(*(void **)&v35[v31 + 18]);
    v31 -= 14;
  }
  while (v31 * 4);
  if (v41 != v43)
    free(v41);
}

BOOL sub_22EE8140C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1[1620];
  if (v3)
    return v3 == a2;
  if ((*(_BYTE *)(a2 + 73) & 0xE0) != 0)
    return 0;
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v7 = *(uint64_t **)v6;
    v8 = *(unsigned int *)(v6 + 8);
    v9 = *(uint64_t **)v6;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      v9 = *(uint64_t **)v6;
      while (*(_WORD *)(*v9 + 32) != 253)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_13;
      }
    }
    if (v9 != &v7[v8])
    {
      do
      {
        v12 = *v7++;
        v11 = v12;
      }
      while (*(_WORD *)(v12 + 32) != 253);
      goto LABEL_21;
    }
  }
LABEL_13:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v14 = *(uint64_t **)v13;
    v15 = *(unsigned int *)(v13 + 8);
    v16 = *(uint64_t **)v13;
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      v16 = *(uint64_t **)v13;
      while (*(_WORD *)(*v16 + 32) != 254)
      {
        ++v16;
        v17 -= 8;
        if (!v17)
          goto LABEL_22;
      }
    }
    if (v16 != &v14[v15])
    {
      do
      {
        v18 = *v14++;
        v11 = v18;
      }
      while (*(_WORD *)(v18 + 32) != 254);
LABEL_21:
      v19 = *(_QWORD *)(v11 + 40);
      goto LABEL_23;
    }
  }
LABEL_22:
  v19 = 0;
LABEL_23:
  v20 = a1[1618];
  if (!v20)
  {
    v20 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "NSError", 7uLL);
    a1[1618] = v20;
  }
  if (v19 != v20)
    return 0;
  a1[1620] = a2;
  return 1;
}

_QWORD *sub_22EE8156C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[4];
  _QWORD v48[4];
  _BYTE v49[136];
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v41 = a1;
  v42 = a2;
  v43 = *(_DWORD *)(a2 + 120);
  v44 = 1;
  v45 = v47;
  v46 = 0x200000000;
  v47[2] = v48;
  v47[3] = 0x200000000;
  v48[2] = v49;
  v48[3] = 0x800000000;
  v49[128] = 1;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v39 = 0;
  v10 = sub_22EE8184C((uint64_t)&v41, &v39, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v12 = *(_DWORD *)(a2 + 80);
  if (v12 <= 0x12 && ((1 << v12) & 0x4000E) != 0 && (*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
  {
    v13 = *(unsigned int *)(v42 + 120);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = v41;
      v18 = *(unsigned int **)(v42 + 112);
      v19 = v18;
      do
      {
        v21 = *v19;
        v19 += 30;
        v20 = v21;
        if (v21 <= 7)
        {
          if (((1 << v20) & 3) != 0)
          {
            ++v16;
            v15 = v14;
          }
          else
          {
            if (((1 << v20) & 0xAC) != 0)
              goto LABEL_34;
            if (v20 == 4)
            {
              if (v16 != 1)
                goto LABEL_34;
              v15 = v14;
              goto LABEL_26;
            }
          }
        }
        ++v14;
      }
      while (v13 != v14);
      if (v16 != 2)
      {
        if (v16 == 1)
        {
          v22 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v23 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v24 == 10 || v24 == 32 || sub_22F115064(v23))
          {
            v25 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
            if ((v25 & 8) == 0 || (*(_WORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
            {
              v26 = sub_22F114FB4(*v22);
              v27 = *(_QWORD *)(v17 + 88);
              v28 = 256;
              if (v26)
                v28 = 64;
              v40 = v28;
              v29 = sub_22E491354((unsigned int *)&v40, v11);
              v11 = sub_22EF5DBC4(v27, v29, v40);
            }
          }
        }
        goto LABEL_34;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 33 > 1)
        goto LABEL_34;
LABEL_26:
      if ((v18[30 * v15] | 4) == 4)
      {
        v30 = v15;
        v31 = &v18[30 * v15];
        v34 = *((_QWORD *)v31 + 3);
        v32 = v31 + 6;
        v33 = v34;
        if ((v34 & 4) != 0)
        {
          v36 = v33 & 0xFFFFFFFFFFFFFFF8;
          v32 = *(_DWORD **)v36;
          v35 = *(_QWORD *)v36 + 8 * *(unsigned int *)(v36 + 8);
        }
        else
        {
          v35 = (uint64_t)&v32[2 * (v33 > 7)];
        }
        while (v32 != (_DWORD *)v35)
        {
          if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v32 + 72) + 8) == 329)
            goto LABEL_34;
          v32 += 2;
        }
        sub_22EE92668(v41, v42, 4, v30);
      }
    }
  }
LABEL_34:
  v37 = sub_22EE83D58((int *)&v41, v11, v39);
  sub_22EE89CC0((uint64_t)&v41);
  return v37;
}

unint64_t sub_22EE8184C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  _BOOL8 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  char v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  int v89;
  _QWORD *v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _DWORD **v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unsigned int *v113;
  uint64_t v114;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint8x16_t v133;
  __int32 v134;
  BOOL v135;
  _BOOL4 v136;
  int v137;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int **v143;
  uint64_t v144;
  int *v145;
  uint64_t v146;
  char v147;
  int v148;
  uint64_t v149;
  int *v150;
  char v151;
  int v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  unsigned int v174;
  unint64_t v175;
  _BOOL4 v177;
  uint64_t *v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  BOOL v208;
  uint64_t v209;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  int v219;
  int v220;
  BOOL v221;
  _QWORD *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  _WORD *v235;
  uint64_t v236;
  char v237;
  int v238;
  uint64_t v239;
  int v240;
  BOOL v241;
  int v242;
  unint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  char v251;
  int v252;
  uint64_t v253;
  char v254;
  char v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  BOOL v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int *v268;
  char v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  void *v275;
  unsigned int v276;
  int v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t **v291;
  uint64_t **v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295[24];
  unint64_t v296;
  int v297;
  int v298[24];
  uint64_t v299[12];
  uint64_t v300[12];
  unint64_t v301;
  void *v302;
  uint64_t v303[2];
  uint64_t v304[2];
  uint64_t v305[31];
  uint64_t v306;
  void *v307;
  _BYTE v308[12];
  char v309;
  _BYTE __p[23];
  __int16 v311;
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a1;
  v9 = *(uint64_t ***)(a1 + 8);
  v296 = 0;
  *a2 = 0;
  switch(*((_DWORD *)v9 + 10))
  {
    case 0:
    case 1:
    case 3:
    case 7:
    case 8:
      v291 = v9;
      v293 = v10;
      v11 = *(_QWORD **)a1;
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)v12;
      v14 = *(_DWORD *)(v12 + 64);
      if (!v14)
        v14 = *(_DWORD *)(v13 + 88);
      break;
    case 2:
      v20 = (unint64_t)v9[6];
      if (v20 >= 0x10)
      {
        v21 = 0;
        v23 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 57)
        {
          v20 = *(_QWORD *)(v23 + 8);
          v21 = *(_QWORD *)(v23 + 24);
        }
      }
      else
      {
        v21 = 0;
        v20 = 0;
      }
      v22 = 0;
      *a2 = v21;
      goto LABEL_17;
    case 4:
    case 5:
    case 6:
      v296 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 16392);
      sub_22EE8CA40((uint64_t *)a1, (uint64_t *)&v296, 0, (uint64_t)(*v9 + 3));
      goto LABEL_391;
    case 9:
      v22 = 0;
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 16832);
LABEL_17:
      v296 = v20;
      goto LABEL_393;
    default:
      goto LABEL_391;
  }
  v15 = v11[11];
  v301 = 0;
  v16 = *(_QWORD *)v13;
  switch((*(_QWORD *)v13 >> 12) & 0x3F)
  {
    case 0u:
      v57 = (_QWORD *)v11[9];
      v58 = *(_DWORD *)(v12 + 80);
      if ((*v57 & 0x400) != 0)
      {
        if (v58 == 17)
        {
          v50 = sub_22EF67C08(v15);
LABEL_222:
          v301 = v50;
          goto LABEL_307;
        }
      }
      else if (v58 == 17)
      {
        goto LABEL_258;
      }
      v81 = (v16 & 0x3FFC0) == 0 && v58 == 16;
      if (!v81
        || (v82 = *(_QWORD *)(v15 + 16832), (v83 = *(_DWORD *)(v12 + 120)) != 0)
        && (v83 != 1 || **(_DWORD **)(v12 + 112) != 3))
      {
        if ((v57[1] & 0x100000000) != 0)
        {
          if (sub_22E8AD5F4((uint64_t *)v13))
            goto LABEL_303;
          sub_22E8FCA40(v11, v14, 0x14A9u, 0, (uint64_t)&v302);
          v300[0] = *(_QWORD *)(v13 + 88);
          v94 = sub_22E8906A0((uint64_t)&v302, v300);
          v95 = *(unsigned int *)(v13 + 88);
          *(_QWORD *)&v308[4] = 0;
          v309 = 0;
          v307 = (void *)(v95 | (v95 << 32));
          v308[0] = 0;
          memset(&__p[4], 0, 19);
          strcpy(__p, "int");
          v311 = 3;
          sub_22E890748(v94, &v307);
          if ((char)v311 < 0)
            operator delete(*(void **)__p);
        }
        else
        {
          if ((v16 & 0x3FFC0) != 0)
            goto LABEL_303;
          if ((v16 & 0x400000) == 0 && (*v57 & 0x100) != 0)
          {
            v89 = v14;
            v90 = v11;
            v91 = 3931;
LABEL_286:
            sub_22E8FCA40(v90, v89, v91, 0, (uint64_t)&v302);
            v307 = *(void **)(v13 + 88);
            sub_22E8906A0((uint64_t)&v302, (uint64_t *)&v307);
            sub_22E903BEC((unsigned int *)&v302);
            *(_WORD *)(v12 + 1088) |= 1u;
            goto LABEL_303;
          }
          v114 = v57[7];
          v116 = (v114 & 0x100000000) == 0 && v114 < 0xC8;
          v89 = v14;
          if ((v16 & 0x400000) != 0 && !v116)
          {
            v90 = v11;
            v91 = 3920;
            goto LABEL_286;
          }
          sub_22E8FCA40(v11, v14, 0x14ABu, 0, (uint64_t)&v302);
          v307 = *(void **)(v13 + 88);
          sub_22E8906A0((uint64_t)&v302, (uint64_t *)&v307);
        }
        sub_22E903BEC((unsigned int *)&v302);
LABEL_303:
        v121 = *(_DWORD *)v13 >> 6;
        if ((*(_DWORD *)v13 & 0xC00) == 0x800)
          __asm { BR              X10 }
        __asm { BR              X10 }
      }
      v307 = &v308[8];
      *(_QWORD *)v308 = 0x200000000;
      v85 = v13 + 32;
      v84 = *(_QWORD *)(v13 + 32);
      v287 = v14;
      if ((v84 & 4) != 0)
      {
        v96 = v84 & 0xFFFFFFFFFFFFFFF8;
        v85 = *(_QWORD *)v96;
        v86 = *(_QWORD *)v96 + 8 * *(unsigned int *)(v96 + 8);
      }
      else
      {
        v86 = v85 + 8 * (v84 > 7);
      }
      v97 = (_DWORD **)v12;
      if (v85 != v86)
      {
        v98 = 0;
        do
        {
          v99 = *(_QWORD *)v85;
          if ((*(_BYTE *)(*(_QWORD *)v85 + 50) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(v99 + 72) + 11) & 0x80) != 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v99 + 16), 0x18ACu, 0, (uint64_t)&v302);
            sub_22E8D2984((uint64_t)&v302, (uint64_t *)v99);
            sub_22E903BEC((unsigned int *)&v302);
            v100 = *(unsigned int *)v308;
            if (*(unsigned int *)v308 >= (unint64_t)*(unsigned int *)&v308[4])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v100 = *(unsigned int *)v308;
            }
            *((_QWORD *)v307 + v100) = v99;
            v98 = ++*(_DWORD *)v308;
          }
          v85 += 8;
        }
        while (v85 != v86);
        v97 = (_DWORD **)v12;
        if (v98)
        {
          v101 = (uint64_t *)v307;
          v102 = 8 * v98;
          do
          {
            v103 = *v101++;
            sub_22E817D2C((_QWORD *)(*(_QWORD *)v12 + 24), v103);
            v102 -= 8;
          }
          while (v102);
        }
      }
      v104 = *v97;
      LODWORD(v302) = **v97 >> 25;
      sub_22EE8FD58((unsigned int *)v11, v104, (int *)&v302, v82, -1, 0x18ADu);
      v105 = *v97;
      *(_QWORD *)v105 = *(_QWORD *)*v97 & 0xFFFFFFFF01FFFFFFLL;
      *((_QWORD *)v105 + 25) = 0;
      *((_QWORD *)v105 + 18) = 0;
      *((_QWORD *)v105 + 19) = 0;
      v105[40] = 0;
      if (v307 != &v308[8])
        free(v307);
      v14 = v287;
LABEL_258:
      v37 = *(_QWORD *)(v15 + 16832);
LABEL_306:
      v301 = v37;
LABEL_307:
      v122 = v301 & 0xFFFFFFFFFFFFFFF0;
      if ((*(_BYTE *)(*(_QWORD *)(v301 & 0xFFFFFFFFFFFFFFF0) + 17) & 0x10) != 0)
        *(_WORD *)(v12 + 1088) |= 1u;
      v123 = v11[9];
      if ((*(_DWORD *)(v123 + 52) & 0x40000000) != 0)
      {
        v124 = *(_QWORD *)(v123 + 56);
        if ((v124 & 0x100000000) != 0)
        {
          if (*(_DWORD *)(v123 + 64) == 100)
            LODWORD(v124) = 200;
          else
            LODWORD(v124) = 300;
        }
        v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v122 + 8) & 0xFFFFFFFFFFFFFFF0);
        v126 = *(_DWORD *)(v125 + 16);
        v127 = v126 & 0xFF800FF;
        v129 = (v126 & 0xFF800FF) == 0x108000B || v127 == 17825803;
        if (v125)
        {
          *(int8x8_t *)v130.i8 = vand_s8((int8x8_t)vdup_n_s32(v126), (int8x8_t)0xFF000FF0FC000FFLL);
          v130.i64[1] = __PAIR64__(v130.u32[1], v127);
          v131 = vdupq_laneq_s32(v130, 2);
          v130.i32[3] = v126 & 0xFF800FF;
          v132 = vdupq_n_s32(v127);
          v133 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v130, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v131, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v131, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v131, (int32x4_t)xmmword_22F45AEE0)));
          v133.i8[0] = vmaxvq_u8(v133);
          v134 = v133.i32[0];
          *(int8x8_t *)v133.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v132, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v132, (int32x4_t)xmmword_22F45AF00)));
          v133.i8[0] = vmaxv_u8(*(uint8x8_t *)v133.i8);
          if ((v134 | v133.i32[0]) & 1 | ((v126 & 0xFF800FF) == 16777227 || v129))
            goto LABEL_335;
        }
        v135 = v125 && *(_DWORD *)(v125 + 16) == 11;
        v136 = v135;
        v137 = v126 & 0xFF80000;
        if (v136 && v137 == 18350080)
          goto LABEL_335;
        v48 = v137 == 116391936;
        v139 = !v136;
        if (!v48)
          v139 = 1;
        if ((v139 & 1) == 0)
        {
LABEL_335:
          if ((_DWORD)v124 == 300)
          {
            if (!sub_22F420778((uint64_t)(v11 + 3), (uint64_t)"__opencl_c_images", 17, v123))
            {
              sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x1142u, 0, (uint64_t)&v302);
              LODWORD(v299[0]) = 0;
              v285 = sub_22E8900C4((uint64_t)&v302, (int *)v299);
              v286 = sub_22E8901B8(v285, (uint64_t *)&v301);
              sub_22F2F30F4(v286, (uint64_t)"__opencl_c_images");
LABEL_566:
              sub_22E903BEC((unsigned int *)&v302);
              *(_WORD *)(v12 + 1088) |= 1u;
              goto LABEL_338;
            }
            v122 = v301 & 0xFFFFFFFFFFFFFFF0;
          }
        }
        v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v122 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v140
          && (*(_DWORD *)(v140 + 16) & 0xFF800FF) == 0xB8000B
          && !sub_22F420778((uint64_t)(v11 + 3), (uint64_t)"cl_khr_3d_image_writes", 22, v11[9]))
        {
          sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x1142u, 0, (uint64_t)&v302);
          v298[0] = 0;
          v259 = sub_22E8900C4((uint64_t)&v302, v298);
          v260 = sub_22E8901B8(v259, (uint64_t *)&v301);
          v261 = "cl_khr_3d_image_writes and __opencl_c_3d_image_writes";
          if ((_DWORD)v124 != 300)
            v261 = "cl_khr_3d_image_writes";
          v299[0] = (uint64_t)v261;
          sub_22E8AECC4(v260, v299);
          goto LABEL_566;
        }
      }
LABEL_338:
      v141 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 & 0x800000) != 0 && (v141 & 0x3E000) != 0xC000)
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 128), 0xE62u, 0, (uint64_t)&v302);
        v299[0] = sub_22F2F2CB0((*(_DWORD *)v13 >> 12) & 0x3F);
        sub_22E8AECC4((uint64_t)&v302, v299);
        sub_22E903BEC((unsigned int *)&v302);
        v141 = *(_QWORD *)v13;
      }
      if ((v141 & 0x300) == 0x200)
      {
        if ((*(_QWORD *)(v11[9] + 8) & 0x40000000000000) != 0)
        {
          sub_22E8FCA40(v11, *(_DWORD *)(v13 + 112), 0x1485u, 0, (uint64_t)v299);
          sub_22E903BEC((unsigned int *)v299);
        }
        v244 = sub_22F369F4C(v15, v301);
      }
      else
      {
        if ((v141 & 0x40000) == 0)
          goto LABEL_343;
        v245 = sub_22EF5CDF0(v15, *(_QWORD *)(v301 & 0xFFFFFFFFFFFFFFF0));
        if ((*(_QWORD *)v13 & 0x100000) != 0)
          v246 = 4;
        else
          v246 = 2;
        if ((*(_QWORD *)v13 & 0x80000) != 0)
          v247 = 3;
        else
          v247 = v246;
        v244 = sub_22F36B7E4(v15, v301, 0x80 / v245, v247);
      }
      v301 = v244;
LABEL_343:
      if ((*(_QWORD *)v13 & 0x300) == 0x100)
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 112), 0xDEAu, 0, (uint64_t)v298);
        sub_22E903BEC((unsigned int *)v298);
      }
      if (*(_DWORD *)(v12 + 80) != 16)
        goto LABEL_371;
      v142 = *(_QWORD *)(a1 + 8);
      v143 = (int **)(v142 + 112);
      v144 = *(unsigned int *)(v142 + 120);
      if (!(_DWORD)v144)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v301 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
          goto LABEL_371;
        goto LABEL_357;
      }
      v145 = *v143;
      v146 = *(unsigned int *)(v142 + 120);
      while (1)
      {
        v148 = *v145;
        v145 += 30;
        v147 = v148;
        if (v148 != 6)
          break;
        if (!--v146)
          goto LABEL_357;
      }
      if (((1 << v147) & 0xB7) != 0)
      {
LABEL_357:
        v290 = v13;
        v154 = v11;
        v155 = v12;
        v156 = v14;
        sub_22E8ACEBC(1, 0, 0, 0, 0, 0, 0, 1, (uint64_t)&v302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0,
          0,
          0,
          *(_DWORD *)(v142 + 72),
          0,
          *(_DWORD *)(v142 + 72),
          v142,
          0,
          0,
          0,
          0,
          0);
        v157 = *(_DWORD *)(v142 + 120);
        v158 = sub_22E828CF0(v142 + 112, (unint64_t)&v302, 1);
        v159 = v158;
        v160 = *(_QWORD *)(v142 + 112);
        v161 = *(_DWORD *)(v142 + 120);
        v162 = v160 + 120 * v161;
        v163 = v162 + 32;
        if (v157)
        {
          *(_QWORD *)v162 = *(_QWORD *)(v162 - 120);
          *(_DWORD *)(v162 + 8) = *(_DWORD *)(v162 - 112);
          *(_OWORD *)(v160 + 120 * v161 + 16) = *(_OWORD *)(v162 - 104);
          *(_QWORD *)(v162 - 96) = 0;
          v164 = *(_OWORD *)(v162 - 72);
          *(_OWORD *)v163 = *(_OWORD *)(v162 - 88);
          *(_OWORD *)(v162 + 48) = v164;
          *(_QWORD *)(v162 + 112) = *(_QWORD *)(v162 - 8);
          v165 = *(_OWORD *)(v162 - 24);
          v166 = *(_OWORD *)(v162 - 56);
          *(_OWORD *)(v162 + 80) = *(_OWORD *)(v162 - 40);
          *(_OWORD *)(v162 + 96) = v165;
          *(_OWORD *)(v162 + 64) = v166;
          v167 = *(_QWORD *)(v142 + 112);
          v168 = *(_DWORD *)(v142 + 120);
          v169 = v167 + 120 * v168 - 120;
          if (v169 != v160)
          {
            v170 = v167 + 120 * v168 - 120;
            do
            {
              v171 = *(_QWORD *)(v170 - 120);
              v170 -= 120;
              *(_QWORD *)v169 = v171;
              *(_DWORD *)(v169 + 8) = *(_DWORD *)(v169 - 112);
              *(_QWORD *)(v169 + 16) = *(_QWORD *)(v169 - 104);
              sub_22EBD0370((uint64_t *)(v169 + 24), (uint64_t *)(v169 - 96));
              v172 = *(_OWORD *)(v169 - 40);
              *(_OWORD *)(v169 + 64) = *(_OWORD *)(v169 - 56);
              *(_OWORD *)(v169 + 80) = v172;
              *(_OWORD *)(v169 + 96) = *(_OWORD *)(v169 - 24);
              *(_QWORD *)(v169 + 112) = *(_QWORD *)(v169 - 8);
              v173 = *(_OWORD *)(v169 - 72);
              *(_OWORD *)(v169 + 32) = *(_OWORD *)(v169 - 88);
              *(_OWORD *)(v169 + 48) = v173;
              v169 = v170;
            }
            while (v170 != v160);
            v168 = *(_DWORD *)(v142 + 120);
            v167 = *(_QWORD *)(v142 + 112);
          }
          v174 = v168 + 1;
          *(_DWORD *)(v142 + 120) = v174;
          v175 = v167 + 120 * v174;
          v177 = v159 >= v160 && v159 < v175;
          v178 = (uint64_t *)(v159 + 120 * v177);
          v179 = *v178;
          *(_DWORD *)(v160 + 8) = *((_DWORD *)v178 + 2);
          *(_QWORD *)v160 = v179;
          *(_QWORD *)(v160 + 16) = v178[2];
          sub_22E853918((unint64_t *)(v160 + 24), (unint64_t *)v178 + 3);
          v180 = *((_OWORD *)v178 + 3);
          *(_OWORD *)(v160 + 32) = *((_OWORD *)v178 + 2);
          *(_OWORD *)(v160 + 48) = v180;
          v182 = *((_OWORD *)v178 + 5);
          v181 = *((_OWORD *)v178 + 6);
          v183 = *((_OWORD *)v178 + 4);
          *(_QWORD *)(v160 + 112) = v178[14];
          *(_OWORD *)(v160 + 80) = v182;
          *(_OWORD *)(v160 + 96) = v181;
          *(_OWORD *)(v160 + 64) = v183;
        }
        else
        {
          v184 = *(_QWORD *)v158;
          *(_DWORD *)(v162 + 8) = *(_DWORD *)(v158 + 8);
          *(_QWORD *)v162 = v184;
          v185 = v160 + 120 * v161;
          *(_QWORD *)(v185 + 16) = *(_QWORD *)(v158 + 16);
          sub_22E828D58((uint64_t *)(v185 + 24), (uint64_t *)(v158 + 24));
          v186 = *(_OWORD *)(v159 + 48);
          *(_OWORD *)v163 = *(_OWORD *)(v159 + 32);
          *(_OWORD *)(v163 + 16) = v186;
          v187 = *(_OWORD *)(v159 + 64);
          v188 = *(_OWORD *)(v159 + 80);
          v189 = *(_OWORD *)(v159 + 96);
          *(_QWORD *)(v163 + 80) = *(_QWORD *)(v159 + 112);
          *(_OWORD *)(v163 + 48) = v188;
          *(_OWORD *)(v163 + 64) = v189;
          *(_OWORD *)(v163 + 32) = v187;
          ++*(_DWORD *)(v142 + 120);
        }
        v14 = v156;
        sub_22E80F94C(v305);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(v142 + 120);
        v12 = v155;
        v11 = v154;
        v13 = v290;
        goto LABEL_371;
      }
      v149 = 0;
      v150 = *v143;
      while (1)
      {
        v152 = *v150;
        v150 += 30;
        v151 = v152;
        if (v152 != 6)
          break;
        if (v144 == ++v149)
        {
          v153 = 0;
          goto LABEL_559;
        }
      }
      if (((1 << v151) & 0xB7) != 0)
        v153 = 0;
      else
        v153 = v149;
LABEL_559:
      LOWORD((*v143)[30 * v153 + 8]) |= 1u;
LABEL_371:
      v190 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 & 0x400000) == 0)
      {
        sub_22EE8CA40((uint64_t *)a1, (uint64_t *)&v301, 0, v13 + 24);
        v190 = *(_QWORD *)v13;
      }
      v191 = v190 >> 25;
      v297 = v190 >> 25;
      v192 = v301;
      if (v190 >> 25)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v301 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1)
        {
          if ((*(_QWORD *)v11[9] & 0x100) != 0)
            v193 = 7066;
          else
            v193 = 7067;
          sub_22EE8FD58((unsigned int *)v11, (_DWORD *)v13, &v297, v301, 5, v193);
          v191 = v297;
          v192 = v301;
        }
        if (v191
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v192 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28)
        {
          sub_22EE8FD58((unsigned int *)v11, (_DWORD *)v13, &v297, v192, 21, 0x1B9Du);
          v192 = v301;
          v191 = v297;
        }
        if ((*(_WORD *)v11[9] & 0x101) != 0)
          goto LABEL_383;
        v243 = *(_QWORD *)((v192 & 0xFFFFFFFFFFFFFFF0) + 8) | v192;
        if ((v191 & v243 & 7) == 0)
          goto LABEL_383;
        if ((v191 & 1) != 0 && (v243 & 1) != 0)
        {
          sub_22E8FCA40(v11, *(_DWORD *)(v13 + 144), 0x5Au, 0, (uint64_t)&v302);
          sub_22F2F30F4((uint64_t)&v302, (uint64_t)"const");
          sub_22E903BEC((unsigned int *)&v302);
          v192 = v301;
          if ((v191 & 4) != 0)
            goto LABEL_491;
        }
        else if ((v191 & 4) != 0)
        {
LABEL_491:
          if ((v192 & 4) != 0 || (*(_BYTE *)((v192 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 152), 0x5Au, 0, (uint64_t)&v302);
            sub_22F2F30F4((uint64_t)&v302, (uint64_t)"volatile");
            sub_22E903BEC((unsigned int *)&v302);
            v192 = v301;
          }
        }
LABEL_383:
        v192 = sub_22EE7D830(v11, v192, v14, v191, v13);
        if (v192 <= 0xF)
        {
          *(_WORD *)(v12 + 1088) |= 1u;
          v192 = v301;
        }
      }
      v296 = v192;
      v9 = v291;
      if (((_BYTE)v291[136] & 1) != 0)
      {
        v22 = 0;
        v10 = v293;
      }
      else
      {
        v194 = **v291;
        v195 = v194 & 0x3F000;
        v196 = v194 & 0x200000;
        v197 = v195 == 204800 || v196 == 0;
        v10 = v293;
        if (v197)
        {
LABEL_391:
          v22 = 0;
        }
        else
        {
          v22 = (*v291)[1];
          *(_DWORD *)(v22 + 72) |= 0x40000u;
        }
      }
LABEL_393:
      v198 = (unint64_t)v9[138];
      if (v198 >= 8 && ((v198 & 4) == 0 || (v199 = v198 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v199 + 8)))
      {
        v294 = v10;
        v200 = *(_QWORD *)(a1 + 8);
        v302 = *(void **)(v200 + 1096);
        sub_22E828D58(v303, (uint64_t *)(v200 + 1104));
        if ((v303[0] & 4) != 0)
        {
          v202 = *(uint64_t **)(v303[0] & 0xFFFFFFFFFFFFFFF8);
          v201 = &v202[*(unsigned int *)((v303[0] & 0xFFFFFFFFFFFFFFF8) + 8)];
        }
        else
        {
          v201 = &v303[v303[0] > 7uLL];
          v202 = v303;
        }
        for (; v202 != v201; ++v202)
        {
          v203 = *v202;
          v204 = *(unsigned __int16 *)(*v202 + 28) | (*(unsigned __int8 *)(*v202 + 30) << 16);
          if ((v204 & 0x5FFFF) == 0x50011)
            continue;
          v205 = v204 & 0x70000;
          if (v205 == 0x10000 || v205 == 0x20000)
            continue;
          v206 = *(unsigned __int16 *)(*(_QWORD *)(v203 + 72) + 8);
          if (v206 > 0x148)
          {
            if ((v206 - 363 > 0x39 || ((1 << (v206 - 107)) & 0x204400000C06009) == 0)
              && (v206 - 430 > 0x1F || ((1 << (v206 + 82)) & 0x88000021) == 0))
            {
              if (v206 != 329)
                continue;
LABEL_438:
              v292 = v9;
              v214 = *(_QWORD *)(a1 + 8);
              v215 = *(unsigned int *)(v214 + 120);
              if ((_DWORD)v215)
              {
                v216 = 0;
                v217 = *(int **)(v214 + 112);
                v218 = 0xFFFFFFFFLL;
                do
                {
                  v220 = *v217;
                  v217 += 30;
                  v219 = v220;
                  if (v220)
                    v221 = v219 == 4;
                  else
                    v221 = 1;
                  if (v221)
                  {
                    v218 = v216;
                  }
                  else if (v219 == 3)
                  {
                    goto LABEL_457;
                  }
                  ++v216;
                }
                while (v215 != v216);
              }
              else
              {
                v218 = 0xFFFFFFFFLL;
              }
              if (sub_22EE8FF94(a1, v203, (uint64_t *)&v296))
              {
                sub_22EE92570(a1, v224, v225);
                sub_22F34BDFC(*(_QWORD *)v214 + 24, (_QWORD *)(v214 + 1096), v203);
                goto LABEL_462;
              }
LABEL_457:
              v226 = (_QWORD *)(v214 + 1096);
              if (v218 != 0xFFFFFFFFLL)
              {
                v227 = *(_QWORD *)(v214 + 112);
                sub_22E817D2C(v226, v203);
                sub_22E828580(v227 + 120 * v218 + 24, v203);
LABEL_462:
                v9 = v292;
                continue;
              }
              sub_22E817D2C(v226, v203);
              v223 = *(unsigned int *)(a1 + 64);
              if (v223 >= *(unsigned int *)(a1 + 68))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v223 = *(unsigned int *)(a1 + 64);
              }
              v9 = v292;
LABEL_452:
              *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v223) = v203;
              ++*(_DWORD *)(a1 + 64);
              continue;
            }
          }
          else if (*(unsigned __int16 *)(*(_QWORD *)(v203 + 72) + 8) <= 0x68u)
          {
            v213 = v206 - 25 > 0x2D || ((1 << (v206 - 25)) & 0x200000080003) == 0;
            if (v213 && v206 - 1 >= 2)
              continue;
          }
          else if (*(unsigned __int16 *)(*(_QWORD *)(v203 + 72) + 8) > 0xFEu)
          {
            if (*(unsigned __int16 *)(*(_QWORD *)(v203 + 72) + 8) > 0x122u)
            {
              if (v206 != 291)
              {
                if (v206 == 321)
                  goto LABEL_438;
                continue;
              }
            }
            else if (v206 != 255 && v206 != 272)
            {
              continue;
            }
          }
          else
          {
            v207 = v206 - 105;
            v208 = v207 > 0x20;
            v209 = (1 << v207) & 0x100140001;
            if (v208 || v209 == 0)
              continue;
          }
          v222 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 1096);
          if (!sub_22EE925F0(a1, *v202, v222, (uint64_t *)&v296))
          {
            sub_22E817D2C(v222, v203);
            v223 = *(unsigned int *)(a1 + 64);
            if (v223 >= *(unsigned int *)(a1 + 68))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v223 = *(unsigned int *)(a1 + 64);
            }
            goto LABEL_452;
          }
        }
        sub_22E80F94C(v303);
        v10 = v294;
      }
      v228 = *(_QWORD *)(v296 & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v302) = 0;
      v229 = sub_22F110500((uint64_t)&v302, v228);
      if (!v229)
        goto LABEL_604;
      v230 = v229;
      v231 = *(_DWORD *)(v229 + 16);
      if (v231 == 14)
      {
        v232 = *((unsigned int *)v9 + 30);
        if ((_DWORD)v232)
        {
          v233 = v9[14];
          v234 = 120 * v232;
          v235 = v233 + 4;
          v236 = v234;
          while (*((_DWORD *)v235 - 8) != 3 || (*v235 & 0x200) == 0)
          {
            v235 += 60;
            v236 -= 120;
            if (!v236)
            {
              v237 = 0;
LABEL_473:
              v231 = *(_DWORD *)(v230 + 16);
              goto LABEL_479;
            }
          }
          while (*(_DWORD *)v233 != 3 || (v233[4] & 0x200) == 0)
          {
            v233 += 15;
            v234 -= 120;
            if (!v234)
              goto LABEL_604;
          }
          v256 = v233[13];
          if (v256 >= 0x10)
          {
            v257 = *(_QWORD *)(v256 & 0xFFFFFFFFFFFFFFF0);
            if (v257 && *(_BYTE *)(v257 + 16) == 57)
            {
              v258 = *(_QWORD *)(v257 + 8);
              if (v258 < 0x10)
                goto LABEL_604;
              v257 = *(_QWORD *)(v258 & 0xFFFFFFFFFFFFFFF0);
            }
            LOBYTE(v302) = 0;
            v230 = sub_22F110500((uint64_t)&v302, v257);
            v237 = 1;
            if (v230)
              goto LABEL_473;
          }
LABEL_604:
          if (!v22)
            return v296;
          goto LABEL_605;
        }
      }
      v237 = 0;
LABEL_479:
      v238 = v231;
      if (v231 == 14)
        v239 = v230;
      else
        v239 = 0;
      v240 = -1;
      v298[0] = -1;
      v241 = (v231 & 0x180000) != 0x100000 && v231 == 14;
      v242 = 6431;
      switch(*((_DWORD *)v9 + 20))
      {
        case 1:
          if (v238 != 14 || (**(_QWORD **)(v10 + 72) & 0x1000) == 0 || (*(_BYTE *)(v239 + 18) & 0x18) != 0)
            goto LABEL_486;
          if ((*(_BYTE *)(*(_QWORD *)(v10 + 12888) + 9) & 2) == 0)
          {
            v240 = 21;
            goto LABEL_569;
          }
          v265 = *(_QWORD *)(v10 + 1952) + 56 * *(unsigned int *)(v10 + 1960) - 56;
          goto LABEL_583;
        case 2:
        case 3:
LABEL_486:
          v240 = 0;
          v298[0] = 0;
          goto LABEL_587;
        case 4:
          v240 = 18;
          goto LABEL_569;
        case 5:
          goto LABEL_544;
        case 6:
          if (v238 == 15)
            goto LABEL_587;
          v255 = !v241;
          if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 0x20) == 0)
            v255 = 1;
          if ((v255 & 1) == 0 && (*(_DWORD *)(v239 + 16) & 0x180000) != 0x80000)
            goto LABEL_586;
LABEL_544:
          v240 = 15;
          goto LABEL_569;
        case 7:
          v248 = **v9;
          if ((v248 & 7) == 3)
            goto LABEL_585;
          v249 = *((unsigned int *)v9 + 30);
          if (!(_DWORD)v249)
            goto LABEL_573;
          v250 = (int *)v9[14];
          break;
        case 0xC:
          v253 = **(_QWORD **)(v10 + 72);
          if (v238 == 15 && (v253 & 0x1000) == 0)
          {
            v240 = 19;
            goto LABEL_569;
          }
          if ((v253 & 0x800) != 0)
            goto LABEL_586;
          v240 = 8;
          goto LABEL_569;
        case 0xD:
          v254 = v238 == 15 || v241;
          if ((v254 & 1) != 0)
            goto LABEL_586;
          v240 = 17;
          goto LABEL_569;
        case 0xE:
        case 0xF:
          v240 = 7;
          goto LABEL_569;
        case 0x10:
          v240 = 9;
          goto LABEL_569;
        case 0x12:
          if (v238 == 14 && (**(_QWORD **)(v10 + 72) & 0x400) != 0 && (*(_BYTE *)(v239 + 18) & 0x18) == 0)
          {
            v264 = sub_22E904A34(v10, 0);
            if (v264)
              v265 = v264 + 1424;
            else
              v265 = 0;
LABEL_583:
            if ((v237 & 1) == 0)
              v296 = sub_22EE8F87C((_QWORD **)a1, v296, 0, v239, v265);
            goto LABEL_585;
          }
          v240 = 16;
LABEL_569:
          v298[0] = v240;
          goto LABEL_587;
        case 0x13:
          if ((*(_DWORD *)&v241 & ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 4) >> 2) & 1) != 0)
            goto LABEL_548;
          v240 = 14;
          goto LABEL_571;
        case 0x14:
        case 0x15:
          if ((*(_DWORD *)&v241 & ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 4) >> 2) & 1) != 0)
          {
LABEL_548:
            v242 = 6391;
            goto LABEL_586;
          }
          v240 = 13;
LABEL_571:
          v298[0] = v240;
          v242 = 6391;
          goto LABEL_587;
        case 0x16:
          if (v238 != 15 || *((_DWORD *)v9 + 30) || sub_22E8AD5F4(*v9) != 2)
            goto LABEL_531;
          goto LABEL_585;
        case 0x17:
LABEL_531:
          v240 = 10;
          goto LABEL_532;
        case 0x18:
        case 0x19:
          v240 = 12;
          goto LABEL_569;
        case 0x1A:
          v240 = 22;
          goto LABEL_569;
        default:
          goto LABEL_587;
      }
      while (1)
      {
        v252 = *v250;
        v250 += 30;
        v251 = v252;
        if (v252 != 6)
          break;
        if (!--v249)
          goto LABEL_573;
      }
      if (((1 << v251) & 0xB7) != 0)
      {
LABEL_573:
        v262 = *(_QWORD *)(v10 + 216);
        if ((*(_WORD *)(v262 + 8) & 0x7Fu) - 19 > 4)
        {
          switch((unsigned __int16)*(_DWORD *)(v262 + 8) >> 13)
          {
            case 0:
              v263 = (**(_QWORD **)(v10 + 72) & 0x100) == 0;
              v240 = 1;
              goto LABEL_629;
            case 1:
              break;
            case 2:
              v263 = (**(_QWORD **)(v10 + 72) & 0x100) == 0;
              v240 = 3;
LABEL_629:
              if (v263)
                ++v240;
              goto LABEL_633;
            case 3:
              v240 = 5;
              goto LABEL_633;
            default:
              v240 = -1;
              if ((v248 & 0x1000000000) != 0)
                goto LABEL_634;
              goto LABEL_533;
          }
        }
        v240 = 6;
LABEL_633:
        v298[0] = v240;
        if ((v248 & 0x1000000000) != 0)
        {
LABEL_634:
          v240 = 20;
LABEL_532:
          v298[0] = v240;
        }
LABEL_533:
        v242 = 6431;
        goto LABEL_587;
      }
LABEL_585:
      v242 = 6431;
LABEL_586:
      v240 = -1;
LABEL_587:
      v266 = *v9;
      if ((**v9 & 7) == 1)
      {
        v240 = 11;
        v298[0] = 11;
      }
      v267 = *((unsigned int *)v9 + 30);
      if ((_DWORD)v267)
      {
        v268 = (int *)v9[14];
        while (1)
        {
          v270 = *v268;
          v268 += 30;
          v269 = v270;
          if (v270 != 6)
            break;
          if (!--v267)
            goto LABEL_595;
        }
        if (((1 << v269) & 0xB7) == 0
          && (*(_DWORD *)&v241 & ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 2) >> 1) & 1) == 0)
        {
          v240 = 13;
          v298[0] = 13;
        }
      }
LABEL_595:
      LODWORD(v266) = *((_DWORD *)v266 + 30);
      LODWORD(v307) = (_DWORD)v266;
      HIDWORD(v307) = (_DWORD)v266;
      if (*((_DWORD *)v9 + 10) == 2)
      {
        v266 = v9[8];
        v307 = v266;
      }
      if (v240 == -1)
      {
        if (v238 == 14)
        {
          v271 = *((_DWORD *)v9 + 20);
          if (v271 != 17)
          {
            if (v271 == 18)
              v272 = 6392;
            else
              v272 = v242;
            sub_22E8FCA40((_QWORD *)v10, (int)v266, v272, 0, (uint64_t)&v302);
            sub_22E8906A0((uint64_t)&v302, (uint64_t *)&v307);
            sub_22E903BEC((unsigned int *)&v302);
          }
        }
        goto LABEL_604;
      }
      LODWORD(v301) = 0;
      if (v238 == 14)
      {
        v276 = *(_DWORD *)(v230 + 16);
        v277 = (v276 >> 19) & 3;
        if (v277 == 2 || v277 == 1)
          LODWORD(v301) = (v276 >> 19) & 3;
      }
      else
      {
        LODWORD(v301) = 3;
        LOBYTE(v276) = *(_BYTE *)(v230 + 16);
      }
      if (v276 == 15)
        v279 = *(_QWORD *)(v230 + 40);
      else
        v279 = 0;
      v300[0] = v279;
      sub_22E8FCA40((_QWORD *)v10, (int)v266, 0xB49u, 0, (uint64_t)&v302);
      v280 = sub_22E89519C((uint64_t)&v302, (unsigned int *)&v301);
      v281 = sub_22E8900C4(v280, v298);
      v297 = sub_22F31CFF0(v10, v279);
      v282 = sub_22E8900C4(v281, &v297);
      v299[0] = v230 & 0xFFFFFFFFFFFFFFF0;
      v283 = sub_22E8901B8(v282, v299);
      sub_22E8906A0(v283, (uint64_t *)&v307);
      sub_22E903BEC((unsigned int *)&v302);
      v284 = sub_22F0F08CC(v300);
      if (v284)
      {
        sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v284 + 24), 0x17D6u, 0, (uint64_t)v295);
        sub_22E903BEC(v295);
      }
      v296 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 16480);
      *((_WORD *)v9 + 544) |= 1u;
      if (v22)
      {
LABEL_605:
        if ((**(_QWORD **)(v10 + 72) & 0x100) != 0 && (*(_BYTE *)(v22 + 74) & 1) != 0)
        {
          v273 = *((_DWORD *)v9 + 20) - 1;
          if (v273 <= 0x19 && ((0x3667C3Fu >> v273) & 1) != 0)
          {
            sub_22E8FCA40((_QWORD *)v10, *(_DWORD *)(v22 + 24), dword_22F49B400[v273], 0, (uint64_t)&v302);
            v274 = *(_QWORD *)(v22 + 48);
            if (v274)
              v275 = (void *)(v274 & 0xFFFFFFFFFFFFFFF0);
            else
              v275 = (void *)sub_22EF6462C(*(_QWORD *)(v10 + 88), v22);
            v307 = v275;
            sub_22E8901B8((uint64_t)&v302, (uint64_t *)&v307);
            sub_22E903BEC((unsigned int *)&v302);
            *((_WORD *)v9 + 544) |= 1u;
          }
        }
      }
      return v296;
    case 1u:
      v37 = *(_QWORD *)(v15 + 16392);
      goto LABEL_306;
    case 2u:
      v56 = (v16 >> 10) & 3;
      if (v56 == 1)
      {
        v37 = *(_QWORD *)(v15 + 16464);
      }
      else if (v56)
      {
        v37 = *(_QWORD *)(v15 + 16512);
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16408);
      }
      goto LABEL_306;
    case 3u:
      v49 = (v16 >> 10) & 3;
      if (!v49)
        goto LABEL_69;
      if (v49 == 1)
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 116), 0x151Du, 0, (uint64_t)&v302);
        v307 = (void *)sub_22F2F2CB0((*(_DWORD *)v13 >> 12) & 0x3F);
        sub_22E8AECC4((uint64_t)&v302, (uint64_t *)&v307);
        sub_22E903BEC((unsigned int *)&v302);
LABEL_69:
        v37 = *(_QWORD *)(v15 + 16416);
      }
      else
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 116), 0x151Du, 0, (uint64_t)&v302);
        v307 = (void *)sub_22F2F2CB0((*(_DWORD *)v13 >> 12) & 0x3F);
        sub_22E8AECC4((uint64_t)&v302, (uint64_t *)&v307);
        sub_22E903BEC((unsigned int *)&v302);
        v37 = *(_QWORD *)(v15 + 16528);
      }
      goto LABEL_306;
    case 4u:
      v37 = *(_QWORD *)(v15 + 16440);
      goto LABEL_306;
    case 5u:
      v37 = *(_QWORD *)(v15 + 16448);
      goto LABEL_306;
    case 6u:
      v37 = *(_QWORD *)(v15 + 16456);
      goto LABEL_306;
    case 7u:
      goto LABEL_303;
    case 8u:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 48))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        v62 = v11[9];
        if ((*(_BYTE *)(v62 + 104) & 4) == 0 && (*(_WORD *)(v62 + 96) & 0x80) == 0)
        {
          v63 = *(_QWORD *)(v62 + 72);
          if (!(_DWORD)v63 || (v63 & 0x800000000) == 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
            sub_22F2F30F4((uint64_t)&v302, (uint64_t)"__int128");
            sub_22E903BEC((unsigned int *)&v302);
          }
        }
      }
      if ((*(_QWORD *)v13 & 0xC00) == 0x800)
        v37 = *(_QWORD *)(v15 + 16552);
      else
        v37 = *(_QWORD *)(v15 + 16504);
      goto LABEL_306;
    case 9u:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 56))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
        sub_22F2F30F4((uint64_t)&v302, (uint64_t)"_BitInt");
        sub_22E903BEC((unsigned int *)&v302);
      }
      v72 = sub_22F34B490(v11, (*(_QWORD *)v13 & 0xC00) == 2048, *(unsigned __int8 **)(v13 + 8), *(_DWORD *)(v13 + 88));
      goto LABEL_180;
    case 0xAu:
      v37 = *(_QWORD *)(v15 + 16792);
      goto LABEL_306;
    case 0xBu:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 96))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        v46 = v11[9];
        if ((*(_BYTE *)(v46 + 68) & 0x20) == 0)
        {
          v47 = *(_QWORD *)(v46 + 72);
          v48 = !(_DWORD)v47 || (v47 & 0x800000000) == 0;
          if (v48)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
            sub_22F2F30F4((uint64_t)&v302, (uint64_t)"_Float16");
            sub_22E903BEC((unsigned int *)&v302);
          }
        }
      }
      v37 = *(_QWORD *)(v15 + 16808);
      goto LABEL_306;
    case 0xCu:
      v68 = v16 >> 6;
      if (v68)
      {
        if (v68 == 2)
        {
          v55 = *(_QWORD *)(v15 + 16616);
        }
        else
        {
          if (v68 != 1)
            goto LABEL_175;
          v55 = *(_QWORD *)(v15 + 16600);
        }
      }
      else
      {
        v55 = *(_QWORD *)(v15 + 16608);
      }
      goto LABEL_217;
    case 0xDu:
      v54 = v16 >> 6;
      if (v54)
      {
        if (v54 == 2)
        {
          v55 = *(_QWORD *)(v15 + 16664);
        }
        else
        {
          if (v54 != 1)
          {
LABEL_175:
            v55 = 0;
            goto LABEL_218;
          }
          v55 = *(_QWORD *)(v15 + 16648);
        }
      }
      else
      {
        v55 = *(_QWORD *)(v15 + 16656);
      }
LABEL_217:
      v301 = v55;
LABEL_218:
      v93 = *(_QWORD *)v13;
      if ((*(_QWORD *)v13 & 0xC00) == 0x800)
      {
        v55 = sub_22EF67D20(v15, v55);
        v301 = v55;
        v93 = *(_QWORD *)v13;
      }
      if ((v93 & 0x800000) == 0)
        goto LABEL_307;
      v50 = sub_22EF74250(v15, v55);
      goto LABEL_222;
    case 0xEu:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 104))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        v51 = v11[9];
        v52 = *(_QWORD *)(v51 + 72);
        v53 = !(_DWORD)v52 || (v52 & 0x800000000) == 0;
        if (v53 && (*(_BYTE *)(v51 + 104) & 4) == 0)
        {
          sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
          v307 = (void *)sub_22F2F2CB0((*(_DWORD *)v13 >> 12) & 0x3F);
          sub_22E8AECC4((uint64_t)&v302, (uint64_t *)&v307);
          sub_22E903BEC((unsigned int *)&v302);
        }
      }
      v37 = *(_QWORD *)(v15 + 16800);
      goto LABEL_306;
    case 0xFu:
      v37 = *(_QWORD *)(v15 + 16560);
      goto LABEL_306;
    case 0x10u:
      v48 = (v16 & 0xC0) == 128;
      v59 = 16568;
      if (v48)
        v59 = 16576;
      v301 = *(_QWORD *)(v15 + v59);
      v60 = v11[9];
      if ((*(_DWORD *)(v60 + 52) & 0x40000000) == 0)
        goto LABEL_96;
      if (sub_22F420778((uint64_t)(v11 + 3), (uint64_t)"cl_khr_fp64", 11, v60))
      {
        if (sub_22F420564((uint64_t)(v11 + 3), (uint64_t)"cl_khr_fp64", 11, v11[9]))
        {
LABEL_96:
          v61 = v11[9];
          if ((*(_BYTE *)(v61 + 104) & 0x20) != 0 && (*(_BYTE *)(v61 + 127) & 8) == 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x21u, 0, (uint64_t)v300);
            sub_22E903BEC((unsigned int *)v300);
LABEL_182:
            *(_WORD *)(v12 + 1088) |= 1u;
          }
          goto LABEL_307;
        }
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x14C7u, 0, (uint64_t)&v307);
        v113 = (unsigned int *)&v307;
      }
      else
      {
        sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x1142u, 0, (uint64_t)&v302);
        LODWORD(v300[0]) = 0;
        v108 = sub_22E8900C4((uint64_t)&v302, (int *)v300);
        v109 = sub_22E8901B8(v108, (uint64_t *)&v301);
        v110 = v11[9];
        v111 = *(_QWORD *)(v110 + 56);
        if ((v111 & 0x100000000) != 0)
        {
          if (*(_DWORD *)(v110 + 64) == 100)
            LODWORD(v111) = 200;
          else
            LODWORD(v111) = 300;
        }
        if ((_DWORD)v111 == 300)
          v112 = "cl_khr_fp64 and __opencl_c_fp64";
        else
          v112 = "cl_khr_fp64";
        v307 = v112;
        sub_22E8AECC4(v109, (uint64_t *)&v307);
        v113 = (unsigned int *)&v302;
      }
      sub_22E903BEC(v113);
      goto LABEL_96;
    case 0x11u:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 88))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        v65 = v11[9];
        if ((*(_BYTE *)(v65 + 104) & 4) == 0)
        {
          v66 = *(_QWORD *)(v65 + 72);
          if (!(_DWORD)v66 || (v66 & 0x800000000) == 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
            sub_22F2F30F4((uint64_t)&v302, (uint64_t)"__float128");
            sub_22E903BEC((unsigned int *)&v302);
          }
        }
      }
      v37 = *(_QWORD *)(v15 + 16584);
      goto LABEL_306;
    case 0x12u:
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 120))(*(_QWORD *)(v15 + 15088)) & 1) == 0)
      {
        v69 = v11[9];
        if ((*(_BYTE *)(v69 + 104) & 4) == 0)
        {
          v70 = *(_QWORD *)(v69 + 72);
          if (!(_DWORD)v70 || (v70 & 0x800000000) == 0)
          {
            sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0x132Bu, 0, (uint64_t)&v302);
            sub_22F2F30F4((uint64_t)&v302, (uint64_t)"__ibm128");
            sub_22E903BEC((unsigned int *)&v302);
          }
        }
      }
      v37 = *(_QWORD *)(v15 + 16592);
      goto LABEL_306;
    case 0x13u:
      v37 = *(_QWORD *)(v15 + 16400);
      goto LABEL_306;
    case 0x14u:
    case 0x15u:
    case 0x16u:
      sub_22E8FCA40(v11, *(_DWORD *)(v13 + 120), 0xC4Eu, 0, (uint64_t)&v307);
      sub_22E903BEC((unsigned int *)&v307);
      goto LABEL_181;
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
      v17 = *(_QWORD *)(v13 + 8);
      if (!v17 || (*(_DWORD *)(v17 + 28) & 0x7Fu) - 33 >= 5)
        goto LABEL_181;
      LODWORD(v302) = *(_DWORD *)(v13 + 132);
      sub_22EB17F48(v11, v17, &v302, 1, 0, 0, 0, 0);
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
        v19 = v18 & 0xFFFFFFFFFFFFFFF0;
      else
        v19 = sub_22EF6462C(v15, v17);
      v301 = v19;
      switch((*(_QWORD *)v13 >> 12) & 0x3F)
      {
        case 0x17u:
          v79 = 0;
          v80 = 4;
          break;
        case 0x18u:
          v79 = 0;
          v80 = 2;
          break;
        case 0x19u:
          v79 = 0;
          v80 = 0;
          break;
        case 0x1Au:
          v79 = 0;
          v80 = 3;
          break;
        case 0x1Bu:
          v79 = 0;
          v80 = 1;
          break;
        case 0x1Cu:
          v79 = 0;
          v80 = 5;
          break;
        default:
          v80 = 6;
          v79 = 1;
          break;
      }
      if (v19 >= 0x10)
      {
        v92 = *(_QWORD *)(v13 + 64);
        if (v92)
          v79 = 0;
        if ((v79 & 1) == 0)
          v19 = sub_22EF65684(v11[11], v80, v92, v19, v17 & ((uint64_t)(*(_QWORD *)v13 << 42) >> 63));
      }
      v301 = v19;
      goto LABEL_307;
    case 0x1Cu:
      v41 = *(_QWORD *)(v13 + 8);
      if (v41 >= 0x10)
      {
        v42 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
        if (v42 && *(_BYTE *)(v42 + 16) == 57)
          v41 = *(_QWORD *)(v42 + 8);
        v301 = v41;
        if (v41 > 0xF)
          goto LABEL_307;
      }
      goto LABEL_182;
    case 0x1Du:
      v107 = *(_QWORD *)(v13 + 8);
      if (v107 >= 0x10)
      {
        v118 = *(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0);
        if (v118 && *(_BYTE *)(v118 + 16) == 57)
          v107 = *(_QWORD *)(v118 + 8);
      }
      else
      {
        v107 = 0;
      }
      v301 = v107;
      v119 = *(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(v119 + 16) & 0x400) == 0
        && ((*(_DWORD *)(v119 + 16) & 0xFE) == 0x2C
         || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v119 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
         && (v119 = sub_22F10CF48(v119)) != 0))
      {
        v120 = sub_22F114198(*(_QWORD *)(v119 + 24));
        LODWORD(v302) = *(_DWORD *)(v13 + 120);
        sub_22EB17F48(v11, v120, &v302, 1, 0, 0, 0, 0);
        v107 = v301;
      }
      v50 = sub_22F36D25C(v15, v107);
      goto LABEL_222;
    case 0x1Eu:
      v72 = sub_22EE8C264((uint64_t)v11, *(_QWORD *)(v13 + 8));
      goto LABEL_180;
    case 0x1Fu:
      v72 = sub_22EE8C8BC((uint64_t)v11, *(unsigned __int8 **)(v13 + 8), 1, a4, a5, a6, a7, a8);
      goto LABEL_180;
    case 0x20u:
      v106 = *(_QWORD *)(v13 + 8);
      if (v106 >= 0x10)
      {
        v117 = *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0);
        if (v117 && *(_BYTE *)(v117 + 16) == 57)
          v106 = *(_QWORD *)(v117 + 8);
      }
      else
      {
        v106 = 0;
      }
      v72 = sub_22F34BC1C(v11, v106, a3, *(_DWORD *)(v13 + 120));
      goto LABEL_180;
    case 0x21u:
    case 0x22u:
      v24 = (v16 & 0x3F000) == 139264;
      v307 = &v308[8];
      *(_QWORD *)v308 = 0x800000000;
      if ((*(_BYTE *)(v13 + 3) & 1) != 0)
      {
        v27 = *(_QWORD *)(v13 + 8);
        if (v27)
        {
          v289 = v13;
          v302 = *(void **)(v27 + 24);
          v288 = sub_22F0F08CC((uint64_t *)&v302);
          v302 = v304;
          v303[0] = 0x800000000;
          v306 = 0;
          v306 = *(_QWORD *)(v27 + 36);
          v28 = *(unsigned int *)(v27 + 44);
          v300[0] = v27 + 56;
          v300[1] = v28;
          v29 = v11;
          sub_22ED58288((uint64_t)v11, (uint64_t)v300, (uint64_t)&v302);
          v30 = (uint64_t *)v302;
          if (LODWORD(v303[0]))
          {
            v31 = v24;
            v32 = 32 * LODWORD(v303[0]);
            do
            {
              v33 = sub_22E4EF088((uint64_t)&v307, (unint64_t)v30, 1);
              v34 = (char *)v307 + 24 * *(unsigned int *)v308;
              v35 = *(_OWORD *)v33;
              *((_QWORD *)v34 + 2) = *(_QWORD *)(v33 + 16);
              *(_OWORD *)v34 = v35;
              ++*(_DWORD *)v308;
              v30 += 4;
              v32 -= 32;
            }
            while (v32);
            v30 = (uint64_t *)v302;
            v24 = v31;
          }
          if (v30 != v304)
            free(v30);
          v88 = v307;
          v25 = *(_DWORD *)v308;
          v11 = v29;
          v13 = v289;
          v26 = v288;
LABEL_236:
          v301 = sub_22EF67944(v11[11], 0, v24, 0, 0, v26, (uint64_t)v88, v25, 0);
          if (v307 != &v308[8])
            free(v307);
          goto LABEL_307;
        }
        v25 = 0;
        v26 = 0;
        *(_WORD *)(v12 + 1088) |= 1u;
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      v88 = &v308[8];
      goto LABEL_236;
    case 0x23u:
      v50 = sub_22EF67944(v15, 0, 2, 0, 0, 0, 0, 0, 0);
      goto LABEL_222;
    case 0x24u:
      v37 = *(_QWORD *)(v15 + 16856);
      goto LABEL_306;
    case 0x25u:
      v75 = *(_QWORD *)(v13 + 8);
      if (v75 >= 0x10)
      {
        v87 = *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0);
        if (v87 && *(_BYTE *)(v87 + 16) == 57)
          v75 = *(_QWORD *)(v87 + 8);
      }
      else
      {
        v75 = 0;
      }
      v72 = sub_22EE7D9BC(v11, v75, *(_DWORD *)(v13 + 120));
LABEL_180:
      v301 = v72;
      if (v72 <= 0xF)
        goto LABEL_181;
      goto LABEL_307;
    case 0x26u:
      v76 = sub_22EE8FCF4(v13 + 24);
      if (v76)
      {
        if (v76 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17112);
        }
        else
        {
          if (v76 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17016);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16920);
      }
      goto LABEL_306;
    case 0x27u:
      v44 = sub_22EE8FCF4(v13 + 24);
      if (v44)
      {
        if (v44 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17120);
        }
        else
        {
          if (v44 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17024);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16928);
      }
      goto LABEL_306;
    case 0x28u:
      v74 = sub_22EE8FCF4(v13 + 24);
      if (v74)
      {
        if (v74 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17128);
        }
        else
        {
          if (v74 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17032);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16936);
      }
      goto LABEL_306;
    case 0x29u:
      v39 = sub_22EE8FCF4(v13 + 24);
      if (v39)
      {
        if (v39 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17136);
        }
        else
        {
          if (v39 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17040);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16944);
      }
      goto LABEL_306;
    case 0x2Au:
      v43 = sub_22EE8FCF4(v13 + 24);
      if (v43)
      {
        if (v43 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17144);
        }
        else
        {
          if (v43 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17048);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16952);
      }
      goto LABEL_306;
    case 0x2Bu:
      v73 = sub_22EE8FCF4(v13 + 24);
      if (v73)
      {
        if (v73 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17152);
        }
        else
        {
          if (v73 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17056);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16960);
      }
      goto LABEL_306;
    case 0x2Cu:
      v38 = sub_22EE8FCF4(v13 + 24);
      if (v38)
      {
        if (v38 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17160);
        }
        else
        {
          if (v38 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17064);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16968);
      }
      goto LABEL_306;
    case 0x2Du:
      v45 = sub_22EE8FCF4(v13 + 24);
      if (v45)
      {
        if (v45 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17168);
        }
        else
        {
          if (v45 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17072);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16976);
      }
      goto LABEL_306;
    case 0x2Eu:
      v36 = sub_22EE8FCF4(v13 + 24);
      if (v36)
      {
        if (v36 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17176);
        }
        else
        {
          if (v36 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17080);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16984);
      }
      goto LABEL_306;
    case 0x2Fu:
      v78 = sub_22EE8FCF4(v13 + 24);
      if (v78)
      {
        if (v78 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17184);
        }
        else
        {
          if (v78 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17088);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 16992);
      }
      goto LABEL_306;
    case 0x30u:
      v40 = sub_22EE8FCF4(v13 + 24);
      if (v40)
      {
        if (v40 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17192);
        }
        else
        {
          if (v40 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17096);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 17000);
      }
      goto LABEL_306;
    case 0x31u:
      v77 = sub_22EE8FCF4(v13 + 24);
      if (v77)
      {
        if (v77 == 4)
        {
          v37 = *(_QWORD *)(v15 + 17200);
        }
        else
        {
          if (v77 != 2)
            goto LABEL_307;
          v37 = *(_QWORD *)(v15 + 17104);
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 17008);
      }
      goto LABEL_306;
    case 0x32u:
LABEL_181:
      v301 = *(_QWORD *)(v15 + 16480);
      goto LABEL_182;
    default:
      goto LABEL_307;
  }
}

_QWORD *sub_22EE83D58(int *a1, unint64_t a2, unint64_t *a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t **v25;
  unsigned int v26;
  int v27;
  int *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t i;
  _QWORD *v39;
  int v40;
  int v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int *v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t *j;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _DWORD *v106;
  int v107;
  int v108;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *k;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _DWORD *v123;
  int v124;
  int v125;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  BOOL v143;
  BOOL v144;
  int v145;
  uint64_t v146;
  int8x16_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  __int16 v158;
  __int16 *v159;
  __int16 v160;
  uint64_t v161;
  unsigned int *v162;
  int *v163;
  uint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __int16 *v176;
  int8x16_t v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  int v185;
  __int16 v186;
  uint64_t *v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v191;
  int v192;
  _BYTE *v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  BOOL v203;
  const char *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  BOOL v213;
  unint64_t v214;
  unint64_t v215;
  char v216;
  int v217;
  unsigned int v220;
  unint64_t v222;
  char v223;
  int v224;
  unsigned int v227;
  const char *v229;
  uint64_t *v230;
  unsigned int v231;
  unsigned int v232;
  int *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  BOOL v238;
  BOOL v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  uint8x16_t v243;
  __int32 v244;
  BOOL v245;
  BOOL v246;
  int v247;
  BOOL v248;
  unsigned __int8 v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  int v256;
  int v257;
  _QWORD *v258;
  unsigned int v259;
  uint64_t *v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BOOL8 v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  _BOOL8 v270;
  uint64_t v271;
  char v272;
  uint64_t *v273;
  int *v274;
  void *v275;
  unsigned int *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  _BYTE *v289;
  uint64_t *v290;
  void *v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  uint64_t *v299;
  int *v300;
  unint64_t v301;
  char v302;
  _BYTE *v303;
  char v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  _DWORD *v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  unsigned int v325;
  uint64_t v326;
  BOOL v327;
  uint64_t v328;
  _BYTE *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  BOOL v346;
  uint64_t *v347;
  uint64_t *v348;
  uint64_t *v349;
  __int16 v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  int v355;
  int v356;
  int v357;
  BOOL v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t *v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  int v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int v377;
  __int16 v378;
  int v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  int v383;
  uint64_t *v385;
  unsigned int v386;
  _DWORD *v387;
  unsigned int v388;
  BOOL v389;
  uint64_t v391;
  int *v392;
  char v393;
  int v394;
  uint64_t *v395;
  unint64_t v396;
  uint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unsigned int v402;
  BOOL v403;
  unsigned int v404;
  unsigned int v405;
  BOOL v406;
  BOOL v408;
  unsigned __int16 v409;
  __int16 v410;
  int v411;
  unsigned __int16 *v412;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t v416;
  _BOOL4 v417;
  unint64_t *v418;
  uint64_t v419;
  unint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t *v424;
  int v425;
  unint64_t *v426;
  unint64_t *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  _DWORD *v431;
  unint64_t v432;
  size_t v433;
  unsigned int v434;
  _BYTE *v435;
  uint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t *v440;
  unsigned int *v441;
  uint64_t v442;
  BOOL v443;
  uint64_t v444;
  unsigned int v445;
  BOOL v446;
  uint64_t *v448;
  unsigned int v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  unint64_t v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t *v471;
  unint64_t v472;
  uint64_t *v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  uint64_t *v483;
  _DWORD *v484;
  int v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t *v490;
  unint64_t *v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t *v497;
  int *v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  size_t v504;
  uint64_t v505;
  char v506;
  uint64_t *v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  BOOL v513;
  unsigned int *v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  unsigned __int16 v520;
  uint64_t v521;
  void *v522;
  uint64_t v523;
  unsigned int v524;
  BOOL v525;
  uint64_t v526;
  _BYTE *v527;
  uint64_t v529;
  uint64_t v530;
  BOOL v531;
  uint64_t *v532;
  int v533;
  uint64_t v534;
  unsigned int v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _BOOL4 v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  int v559;
  unsigned __int8 *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t *v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  uint64_t v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  unsigned __int8 *v574;
  unsigned __int8 **v575;
  unsigned __int8 *v576;
  _BYTE *v577;
  uint64_t v578;
  uint64_t v579;
  char v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  const void *v584;
  size_t v585;
  _BYTE *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  unsigned int v602;
  unint64_t v603;
  int v604;
  char v605;
  uint64_t v606;
  uint64_t **v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  int v614;
  int v615;
  unsigned int v616;
  int v617;
  unsigned int *v618;
  unint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  unsigned int v622;
  _QWORD *v623;
  __n128 v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  int *v629;
  int v630;
  int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t *v645;
  unint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v653;
  uint64_t v654;
  uint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v664;
  uint64_t v665;
  unsigned int v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unsigned int v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  unsigned int v681;
  unint64_t v682;
  _BOOL4 v683;
  uint64_t *v684;
  int v685;
  uint64_t v686;
  uint64_t *v687;
  _QWORD *v688;
  uint64_t v689;
  unsigned __int8 *v690;
  _QWORD *v691;
  unsigned __int8 *v692;
  uint64_t v693;
  _BYTE *v694;
  unsigned __int8 *v695;
  uint64_t v696;
  unint64_t v697;
  BOOL v698;
  uint64_t v699;
  int *v700;
  char v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  unsigned int v716;
  uint64_t v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  unsigned int v721;
  unint64_t v722;
  BOOL v723;
  _BYTE *v724;
  int v725;
  int v726;
  int64x2_t v727;
  uint64_t v728;
  int8x16_t v729;
  unint64_t *v730;
  unint64_t *v731;
  _BOOL4 v732;
  unint64_t *v733;
  int v734;
  int v735;
  uint64_t *v736;
  int v737;
  int *v738;
  uint64_t v739;
  unint64_t v740;
  int v741;
  void *v742;
  uint64_t v743;
  uint64_t v744;
  BOOL v745;
  uint64_t *v746;
  int *v747;
  unint64_t v748;
  __int16 *v749;
  unsigned int *v750;
  unsigned int v751;
  uint64_t **v752;
  char v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  _BYTE v757[96];
  unsigned int v758[24];
  unsigned int v759[24];
  unsigned int v760[24];
  unsigned int v761[8];
  _BYTE v762[96];
  _BYTE v763[96];
  _BYTE __dst[24];
  __int128 v765;
  __int128 v766;
  __int128 v767;
  int v768;
  unsigned int v769[24];
  unsigned int v770[25];
  unsigned __int16 v771;
  unsigned int v772[24];
  unsigned int v773[24];
  unsigned int v774[24];
  unsigned int v775[24];
  unsigned int v776[24];
  unsigned int v777[24];
  unsigned int v778[24];
  int *v779[9];
  int v780;
  uint64_t v781;
  char v782;
  int v783;
  unint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unsigned int v787;
  uint64_t v788;
  uint64_t v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  uint64_t v795;
  void *v796;
  uint64_t v797;
  _BYTE v798[16];
  void *v799;
  uint64_t v800;
  _BYTE v801[16];
  void *v802;
  uint64_t v803;
  _BYTE v804[7];
  char v805;
  void *v806;
  __int128 v807;
  _BYTE v808[16];
  _BYTE v809[24];
  _BYTE __p[24];
  char v811;
  char v812;
  unsigned int v813;
  char v814;
  _BYTE v815[24];
  _BYTE v816[24];
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  __int16 v827;
  _BYTE v828[5];
  uint64_t v829;

  v4 = a1;
  v829 = *MEMORY[0x24BDAC8D0];
  v784 = a2;
  v6 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 1);
  v744 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v746 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  if (*(_DWORD *)(v5 + 40))
    v742 = 0;
  else
    v742 = *(void **)(v5 + 48);
  v7 = **(_QWORD **)v5 & 7;
  v752 = (uint64_t **)*((_QWORD *)a1 + 1);
  if (v7 != 1)
    LODWORD(v7) = (*(_DWORD *)(v5 + 80) & 0xFFFFFFFE) == 24;
  v737 = v7;
  v8 = a2 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
      || (v12 = sub_22F10CF48(v9), v9 = *(_QWORD *)v8, !v12))
    {
      v753 = 0;
      if (v9)
        goto LABEL_22;
      goto LABEL_24;
    }
    if (*(_BYTE *)(v9 + 16) != 26)
      v9 = sub_22F10CF48(v9);
  }
  v10 = sub_22E47E1B0(v9);
  v9 = *(_QWORD *)v8;
  if ((v10 & 0xCFFFFFFFFLL) != 0)
  {
    v11 = 1;
  }
  else
  {
    if (v9 && *(_BYTE *)(v9 + 16) == 26)
    {
      v13 = *(_QWORD *)v8;
    }
    else
    {
      v13 = sub_22F10CF48(v9);
      v9 = *(_QWORD *)v8;
    }
    v11 = (*(_BYTE *)(v13 + 20) & 3) != 0;
  }
  v753 = v11;
  if (v9)
  {
LABEL_22:
    if (*(_BYTE *)(v9 + 16) == 26)
      goto LABEL_23;
  }
LABEL_24:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
    || (v14 = sub_22F10CF48(v9), v9 = *(_QWORD *)v8, !v14))
  {
    v732 = 0;
    goto LABEL_29;
  }
  if (*(_BYTE *)(v9 + 16) != 26)
    v9 = sub_22F10CF48(v9);
LABEL_23:
  v732 = (sub_22E47E1B0(v9) & 0xFFFFF800) != 0;
  v9 = *(_QWORD *)v8;
LABEL_29:
  v731 = a3;
  if (v9 && (v15 = *(_DWORD *)(v9 + 16), (v15 & 0xFE) == 0xE))
  {
    v16 = v9;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0xE)
      goto LABEL_80;
    v17 = sub_22F10CF48(v9);
    if (!v17)
      goto LABEL_80;
    v16 = v17;
    v9 = *(_QWORD *)v8;
    v15 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  }
  if (v15 == 14)
  {
    v18 = *(unsigned __int8 *)(v16 + 16) == 15;
LABEL_40:
    if ((v15 & 0x180000) != 0x80000 && !v18)
      goto LABEL_80;
    goto LABEL_46;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 14)
  {
    v19 = sub_22F10CF48(v9);
    v20 = *(unsigned __int8 *)(v16 + 16);
    v18 = v20 == 15;
    if (v19)
    {
      v15 = *(_DWORD *)(v19 + 16);
      goto LABEL_40;
    }
  }
  else
  {
    v20 = *(unsigned __int8 *)(v16 + 16);
  }
  if (v20 != 15)
    goto LABEL_80;
  v18 = 1;
LABEL_46:
  v21 = *((unsigned int *)v752 + 30);
  if (!(_DWORD)v21)
    goto LABEL_80;
  v22 = 0;
  v23 = v752[14];
  v24 = 1;
  v25 = v752;
  while (2)
  {
    v26 = v21 + ~(_DWORD)v22;
    *(_DWORD *)v809 = 0;
    switch(LODWORD(v23[15 * v26]))
    {
      case 1:
        if (v18)
          v30 = 3179;
        else
          v30 = 3156;
        v33 = 1;
        goto LABEL_74;
      case 2:
        if (v18)
          v30 = 3179;
        else
          v30 = 3156;
        v33 = 2;
LABEL_74:
        *(_DWORD *)v809 = v33;
        goto LABEL_78;
      case 3:
        if (!v18)
        {
          if ((**v752 & 7) == 1)
          {
LABEL_62:
            v30 = 3157;
            goto LABEL_79;
          }
          v27 = *((_DWORD *)v752 + 20);
          v28 = (int *)v23;
          v29 = v21;
          if ((v27 - 7) >= 4)
          {
            v30 = 3157;
            v28 = (int *)v23;
            v29 = v21;
            if (v27)
              goto LABEL_79;
          }
          while (1)
          {
            v32 = *v28;
            v28 += 30;
            v31 = v32;
            if (v32 != 6)
              break;
            if (!--v29)
              goto LABEL_62;
          }
          v30 = 3157;
          if (((1 << v31) & 0xB7) != 0)
            goto LABEL_79;
          if ((_DWORD)v29 != v24)
            goto LABEL_78;
LABEL_57:
          ++v22;
          ++v24;
          if (v22 == v21)
            goto LABEL_80;
          continue;
        }
        v34 = 3;
LABEL_77:
        *(_DWORD *)v809 = v34;
        v30 = 3179;
LABEL_78:
        v25 = v752;
LABEL_79:
        sub_22E8FCA40((_QWORD *)v6, HIDWORD(v23[15 * v26]), v30, 0, (uint64_t)v815);
        sub_22E89519C((uint64_t)v815, (unsigned int *)v809);
        sub_22E903BEC((unsigned int *)v815);
        *((_WORD *)v25 + 544) |= 1u;
LABEL_80:
        v783 = 0;
        v782 = 0;
        v35 = *(_QWORD *)(v6 + 80);
        v36 = *(_DWORD *)(v35 + 856);
        if (v36)
          sub_22EE92874((_QWORD *)v6, *(_DWORD *)(v35 + 856));
        v781 = 0;
        v780 = -1;
        v747 = v4;
        v754 = v6;
        if (v737)
        {
          HIDWORD(v781) = 1;
          sub_22F114E70(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0));
          if (v37)
          {
            for (i = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v90 + 40))
            {
              v90 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
              if (!v90)
                break;
              if (((*(_DWORD *)(v90 + 16) >> 19) - 37) > 0xFFFFFFFB)
                goto LABEL_229;
            }
            LODWORD(v781) = v781 + 1;
          }
LABEL_229:
          v91 = *((unsigned int *)v752 + 30);
          if ((_DWORD)v91)
          {
            v92 = v781;
            v93 = (int *)v752[14];
            do
            {
              v95 = *v93;
              v93 += 30;
              v94 = v95;
              if ((v95 - 4) < 2 || !v94)
                LODWORD(v781) = ++v92;
              --v91;
            }
            while (v91);
          }
          goto LABEL_235;
        }
        v39 = (_QWORD *)*((_QWORD *)v4 + 1);
        v40 = *((_DWORD *)v39 + 20);
        v41 = 0;
        switch(v40)
        {
          case 0:
          case 4:
            goto LABEL_92;
          case 1:
          case 2:
          case 3:
          case 20:
          case 21:
            v42 = *((_WORD *)v39 + 544);
            v41 = 1;
            if (v36)
              goto LABEL_87;
            goto LABEL_92;
          case 7:
            v42 = *((_WORD *)v39 + 544);
            if ((v42 & 0x40) != 0)
            {
              HIDWORD(v781) = 0;
              goto LABEL_235;
            }
            v41 = 0;
            if (!v36)
              goto LABEL_92;
LABEL_87:
            if ((v42 & 0x80) != 0)
              goto LABEL_88;
LABEL_92:
            HIDWORD(v781) = 2;
            v43 = v784;
            if ((*(_BYTE *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
              goto LABEL_235;
            v44 = *((unsigned int *)v752 + 30);
            if ((_DWORD)v44)
            {
              v45 = 0;
              v46 = (int *)v752[14];
              v47 = -1;
              while (2)
              {
                v48 = *v46;
                v46 += 30;
                switch(v48)
                {
                  case 0:
                    if (v45 <= 1)
                    {
                      ++v45;
                      goto LABEL_103;
                    }
                    goto LABEL_235;
                  case 1:
                    if (!v45)
                      v47 = 1;
                    goto LABEL_103;
                  case 2:
                    if (!v45)
                      v47 = 0;
                    goto LABEL_103;
                  case 4:
                  case 5:
                    if (v36 && !v45)
                      goto LABEL_130;
                    goto LABEL_235;
                  default:
LABEL_103:
                    if (!--v44)
                      goto LABEL_107;
                    continue;
                }
              }
            }
            v45 = 0;
            v47 = -1;
LABEL_107:
            v49 = 0;
            if (v45 <= 2)
              v50 = 2 - v45;
            else
              v50 = 0;
            break;
          case 19:
            HIDWORD(v781) = 2;
            goto LABEL_235;
          default:
            goto LABEL_235;
        }
        while (1)
        {
          v51 = v43 & 0xFFFFFFFFFFFFFFF0;
          v52 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
          v53 = *(unsigned __int8 *)(v52 + 16);
          if (!v52 || v53 != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
              goto LABEL_121;
            v52 = sub_22F10CF48(v52);
            if (!v52)
              break;
          }
          v4 = v747;
          if (v50 == v49)
            goto LABEL_235;
          v43 = *(_QWORD *)(v52 + 32);
          ++v49;
        }
        v52 = *(_QWORD *)v51;
        v53 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16);
LABEL_121:
        v54 = v45 + v49;
        if (v53 == 10)
          goto LABEL_128;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
          goto LABEL_125;
        if (sub_22F10CF48(v52))
          goto LABEL_128;
        v52 = *(_QWORD *)v51;
        v53 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16);
LABEL_125:
        if (v53 == 31)
        {
LABEL_128:
          v4 = v747;
          if (!v36 || v54)
            goto LABEL_235;
LABEL_130:
          v780 = v47;
          if (!HIBYTE(v783))
            HIBYTE(v783) = 1;
          BYTE2(v783) = 0;
          BYTE1(v783) = (v40 & 0xFFFFFFFE) == 2;
          goto LABEL_235;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
        {
          if (sub_22F10CF48(v52))
            goto LABEL_128;
          v52 = *(_QWORD *)v51;
          v53 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16);
        }
        if (v53 == 32)
          goto LABEL_145;
        v55 = *(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0);
        v56 = *(unsigned __int8 *)(v55 + 16);
        if (v56 != 32)
          goto LABEL_138;
        v52 = sub_22F10CF48(v52);
        if (v52)
        {
LABEL_145:
          v58 = v45 + v49;
          v54 = v58 + 1;
          v59 = sub_22F31179C(v52);
          if (v59)
          {
            v60 = v58 - 1;
            v61 = *(_QWORD *)(v59 + 40);
            if ((v61 & 7) != 0)
              v62 = 0;
            else
              v62 = v61 & 0xFFFFFFFFFFFFFFF8;
            v63 = *(_QWORD *)(v6 + 12944);
            if (!v63)
            {
              v63 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v6 + 80) + 544), "NSError", 7uLL);
              *(_QWORD *)(v6 + 12944) = v63;
            }
            v65 = v62 == v63 && v60 == 0 && v49 == 0;
            v4 = v747;
            if (v65)
              goto LABEL_171;
          }
          else
          {
            v4 = v747;
          }
        }
        else
        {
          v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v51 + 8) & 0xFFFFFFFFFFFFFFF0);
          v56 = *(unsigned __int8 *)(v55 + 16);
LABEL_138:
          v4 = v747;
          if (v56 == 34)
          {
            v66 = *(_QWORD *)(sub_22F272660(v55) + 40);
            if ((v66 & 7) != 0)
              v67 = 0;
            else
              v67 = v66 & 0xFFFFFFFFFFFFFFF8;
            v68 = *(_QWORD *)(v6 + 12944);
            if (!v68)
            {
              v68 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v6 + 80) + 544), "NSError", 7uLL);
              *(_QWORD *)(v6 + 12944) = v68;
            }
            v70 = v67 != v68 || v54 != 2 || v49 >= 2;
            v4 = v747;
            if (!v70)
              goto LABEL_171;
          }
          else
          {
            if (!v54)
              goto LABEL_235;
            if (v56 == 45)
            {
              v57 = sub_22F114198(*(_QWORD *)(v55 + 24));
              if (v54 == 2 && v49 <= 1)
              {
                if (!sub_22EE8140C((_QWORD *)v6, v57))
                  goto LABEL_179;
LABEL_171:
                if (v36 && ((v41 ^ 1) & 1) == 0)
                {
LABEL_88:
                  BYTE2(v783) = 1;
                  if (!HIBYTE(v783))
                    HIBYTE(v783) = 1;
                }
                goto LABEL_235;
              }
            }
          }
        }
        if (v54 != 2)
        {
          if (v54 != 1 || !v36)
            goto LABEL_235;
          goto LABEL_130;
        }
LABEL_179:
        if (v41)
        {
          v71 = *((unsigned int *)v752 + 30);
          if ((_DWORD)v71)
          {
            v72 = (uint64_t)(v752[14] + 3);
            while (*(_DWORD *)(v72 - 24) == 6)
            {
              v72 += 120;
              if (!--v71)
                goto LABEL_235;
            }
            v73 = v752 + 138;
            v74 = (unint64_t)v752[138];
            if ((v74 & 4) != 0)
            {
              v76 = *(uint64_t ***)(v74 & 0xFFFFFFFFFFFFFFF8);
              v75 = &v76[*(unsigned int *)((v74 & 0xFFFFFFFFFFFFFFF8) + 8)];
            }
            else
            {
              v75 = &v73[v74 > 7];
              v76 = v752 + 138;
            }
            while (v76 != v75)
            {
              if (*((_WORD *)*v76 + 14) == 50)
                goto LABEL_222;
              ++v76;
            }
            if ((v74 & 4) != 0)
            {
              v78 = v74 & 0xFFFFFFFFFFFFFFF8;
              v73 = *(uint64_t ***)v78;
              v77 = *(_QWORD *)v78 + 8 * *(unsigned int *)(v78 + 8);
            }
            else
            {
              v77 = (uint64_t)&v73[v74 > 7];
            }
            while (v73 != (uint64_t **)v77)
            {
              if (*((_WORD *)*v73 + 14) == 49)
                goto LABEL_222;
              ++v73;
            }
            v79 = *(_QWORD *)v72;
            if ((*(_QWORD *)v72 & 4) != 0)
            {
              v81 = *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8);
              v80 = v81 + 8 * *(unsigned int *)((v79 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              v80 = v72 + 8 * (v79 > 7);
              v81 = v72;
            }
            v4 = v747;
            if (v81 == v80)
            {
LABEL_203:
              if ((v79 & 4) != 0)
              {
                v83 = v79 & 0xFFFFFFFFFFFFFFF8;
                v72 = *(_QWORD *)v83;
                v82 = *(_QWORD *)v83 + 8 * *(unsigned int *)(v83 + 8);
              }
              else
              {
                v82 = v72 + 8 * (v79 > 7);
              }
              v4 = v747;
              if (v72 == v82)
              {
LABEL_209:
                v84 = (uint64_t)(*v752 + 4);
                v85 = *(_QWORD *)v84;
                if ((*(_QWORD *)v84 & 4) != 0)
                {
                  v87 = *(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF8);
                  v86 = v87 + 8 * *(unsigned int *)((v85 & 0xFFFFFFFFFFFFFFF8) + 8);
                }
                else
                {
                  v86 = v84 + 8 * (v85 > 7);
                  v87 = (uint64_t)(*v752 + 4);
                }
                v4 = v747;
                if (v87 == v86)
                {
LABEL_215:
                  if ((v85 & 4) != 0)
                  {
                    v89 = v85 & 0xFFFFFFFFFFFFFFF8;
                    v84 = *(_QWORD *)v89;
                    v88 = *(_QWORD *)v89 + 8 * *(unsigned int *)(v89 + 8);
                  }
                  else
                  {
                    v88 = v84 + 8 * (v85 > 7);
                  }
                  v4 = v747;
                  if (v84 == v88)
                    goto LABEL_235;
                  while (*(_WORD *)(*(_QWORD *)v84 + 28) != 49)
                  {
                    v84 += 8;
                    if (v84 == v88)
                      goto LABEL_235;
                  }
                }
                else
                {
                  while (*(_WORD *)(*(_QWORD *)v87 + 28) != 50)
                  {
                    v87 += 8;
                    if (v87 == v86)
                      goto LABEL_215;
                  }
                }
              }
              else
              {
                while (*(_WORD *)(*(_QWORD *)v72 + 28) != 49)
                {
                  v72 += 8;
                  if (v72 == v82)
                    goto LABEL_209;
                }
              }
            }
            else
            {
              while (*(_WORD *)(*(_QWORD *)v81 + 28) != 50)
              {
                v81 += 8;
                if (v81 == v80)
                  goto LABEL_203;
              }
            }
LABEL_222:
            if (!HIBYTE(v783))
              HIBYTE(v783) = 1;
            BYTE2(v783) = 1;
            LOBYTE(v783) = 1;
          }
        }
LABEL_235:
        v779[0] = (int *)&v781;
        v779[1] = (int *)((char *)&v783 + 2);
        v779[2] = (int *)&v782;
        v779[3] = (int *)((char *)&v783 + 1);
        v779[4] = (int *)v6;
        v779[5] = v4;
        v779[6] = &v780;
        v779[7] = &v783;
        v779[8] = (int *)&v781 + 1;
        if (!*(_DWORD *)(v6 + 10680))
        {
          sub_22F114E70(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0));
          if (v96)
          {
            v97 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
            for (j = (uint64_t *)(v97 & 0xFFFFFFFFFFFFFFF0);
                  ;
                  j = (uint64_t *)(*(_QWORD *)(v99 + 40) & 0xFFFFFFFFFFFFFFF0))
            {
              v99 = sub_22F10D774(*j);
              if (!v99)
                break;
              if (((*(_DWORD *)(v99 + 16) >> 19) - 37) > 0xFFFFFFFB)
                goto LABEL_261;
            }
            v100 = sub_22F10D4DC(v97);
            if (v100)
            {
              v101 = v100;
              v102 = sub_22EF6D84C(*(_QWORD *)(v6 + 88));
              while (1)
              {
                v103 = *(_QWORD *)(v101 + 24);
                if (v103 == v102)
                  break;
                v104 = *(_QWORD *)(v103 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(v103 + 40) & 7) == 0 && v104 != 0)
                {
                  v106 = *(_DWORD **)(v104 + 16);
                  if (*v106 == 7)
                  {
                    v107 = v106[4];
                    v108 = *(_DWORD *)((char *)v106 + 19);
                    if (v107 == 1818190198 && v108 == 1953720684)
                      break;
                  }
                }
                v101 = sub_22F10D4DC(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v103 + 80) & 0xFFFFFFFFFFFFFFF8)
                                                           + ((2 * *(_QWORD *)(v103 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0));
                if (!v101)
                  goto LABEL_254;
              }
              if ((_DWORD)v781)
                LODWORD(v781) = v781 - 1;
            }
            else
            {
LABEL_254:
              v110 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16);
              if (v110 == 10)
                v111 = 1;
              else
                v111 = 2 * (v110 == 31);
              v112 = sub_22EE928DC(v779, v111, *((_DWORD *)*v752 + 30), *((_DWORD *)*v752 + 23), (uint64_t)(*v752 + 3), *v752 + 5);
              if (v112)
              {
                sub_22EE924EC(v744, v112, BYTE2(v783));
                v784 = sub_22EE90E74((uint64_t)v4, v113, v784, v784);
              }
            }
          }
LABEL_261:
          if (HIDWORD(v781) == 2)
          {
            v114 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              for (k = (uint64_t *)(v114 & 0xFFFFFFFFFFFFFFF0);
                    ;
                    k = (uint64_t *)(*(_QWORD *)(v116 + 40) & 0xFFFFFFFFFFFFFFF0))
              {
                v116 = sub_22F10D774(*k);
                if (!v116)
                  break;
                if (((*(_DWORD *)(v116 + 16) >> 19) - 37) > 0xFFFFFFFB)
                  goto LABEL_290;
              }
              v117 = sub_22F10D4DC(v114);
              if (v117)
              {
                v118 = v117;
                v119 = sub_22EF6D84C(*(_QWORD *)(v6 + 88));
                while (1)
                {
                  v120 = *(_QWORD *)(v118 + 24);
                  if (v120 == v119)
                    break;
                  v121 = *(_QWORD *)(v120 + 40) & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_QWORD *)(v120 + 40) & 7) == 0 && v121 != 0)
                  {
                    v123 = *(_DWORD **)(v121 + 16);
                    if (*v123 == 7)
                    {
                      v124 = v123[4];
                      v125 = *(_DWORD *)((char *)v123 + 19);
                      if (v124 == 1818190198 && v125 == 1953720684)
                        break;
                    }
                  }
                  v118 = sub_22F10D4DC(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v120 + 80) & 0xFFFFFFFFFFFFFFF8)
                                                             + ((2 * *(_QWORD *)(v120 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0));
                  if (!v118)
                    goto LABEL_280;
                }
              }
              else
              {
LABEL_280:
                v127 = *((_DWORD *)v752 + 20);
                if (v127 <= 0x12 && ((1 << v127) & 0x4000E) != 0)
                {
                  v128 = 120 * *((unsigned int *)v752 + 30) - 120;
                  while (1)
                  {
                    v129 = v128 - 120;
                    if (v128 == -120)
                      break;
                    v130 = *(_DWORD *)((char *)v752[14] + v128);
                    v389 = v130 > 5;
                    v131 = (1 << v130) & 0x27;
                    v132 = v389 || v131 == 0;
                    v128 = v129;
                    if (!v132)
                      goto LABEL_290;
                  }
                  sub_22EE92AC0((_QWORD *)v6, 3u, *((_DWORD *)*v752 + 30), 0);
                }
              }
            }
          }
        }
LABEL_290:
        v133 = v4[4];
        v134 = (_QWORD *)*((_QWORD *)v4 + 1);
        if (v133 == *((_DWORD *)v134 + 30))
          v135 = *v134 + 24;
        else
          v135 = v134[14] + 120 * v133 + 16;
        v138 = *(_QWORD *)(v135 + 8);
        v136 = v135 + 8;
        v137 = v138;
        if ((v138 & 4) != 0)
        {
          v140 = v137 & 0xFFFFFFFFFFFFFFF8;
          v136 = *(_QWORD *)v140;
          v139 = *(_QWORD *)v140 + 8 * *(unsigned int *)(v140 + 8);
        }
        else
        {
          v139 = v136 + 8 * (v137 > 7);
        }
        v141 = v752;
        if (v136 == v139)
        {
          v745 = 0;
        }
        else
        {
          v142 = v136 + 8;
          do
          {
            v143 = *(unsigned __int16 *)(*(_QWORD *)(v142 - 8) + 28) == 280;
            v144 = *(_WORD *)(*(_QWORD *)(v142 - 8) + 28) == 280 || v142 == v139;
            v142 += 8;
          }
          while (!v144);
          v745 = v143;
        }
        v145 = *((_DWORD *)v752 + 30);
        if (v145)
        {
          v146 = 0;
          v728 = v6 + 24;
          v730 = (unint64_t *)(v752 + 138);
          v727 = vdupq_n_s64(0x20uLL);
          v147.i64[1] = 16;
          v147.i64[0] = 264241407;
          v729 = v147;
          v148 = v145 - 1;
          v149 = *((_DWORD *)v752 + 30);
          v743 = v149;
          while (2)
          {
            v751 = v149;
            v150 = v145 - v146;
            v151 = v145 - v146 - 1;
            v4[4] = v151;
            v755 = v141[14];
            v750 = (unsigned int *)&v755[15 * v151];
            v152 = *v750;
            v753 &= v152 == 6;
            switch((int)v152)
            {
              case 0:
                v6 = v754;
                if ((*((_BYTE *)v746 + 1) & 1) != 0 && sub_22EB14770(v754, v784))
                {
                  sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0xCC6u, 0, (uint64_t)v778);
                  sub_22E903BEC(v778);
                  *((_WORD *)v141 + 544) |= 1u;
                }
                if ((v746[13] & 0x20) == 0
                  || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 25 < 2)
                {
                  goto LABEL_456;
                }
                v153 = (uint64_t)(*v141 + 4);
                v154 = *(_QWORD *)v153;
                if ((*(_QWORD *)v153 & 4) != 0)
                {
                  v215 = v154 & 0xFFFFFFFFFFFFFFF8;
                  v153 = *(_QWORD *)v215;
                  v155 = *(_QWORD *)v215 + 8 * *(unsigned int *)(v215 + 8);
                }
                else
                {
                  v155 = v153 + 8 * (v154 > 7);
                }
                if (v153 == v155)
                  goto LABEL_455;
                v216 = 0;
                do
                {
                  while (1)
                  {
                    v217 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v153 + 72) + 8);
                    if (((v217 - 342) > 0xC || ((1 << (v217 - 86)) & 0x15E3) == 0)
                      && ((v217 - 161) > 0x3A
                       || ((1 << (v217 + 95)) & 0x400004000000011) == 0))
                    {
                      v220 = v217 - 234;
                      if (v220 > 3 || v220 == 1)
                        break;
                    }
                    v153 += 8;
                    v216 = 1;
                    if (v153 == v155)
                      goto LABEL_456;
                  }
                  v153 += 8;
                }
                while (v153 != v155);
                if ((v216 & 1) == 0)
                {
LABEL_455:
                  sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xF2Bu, 0, (uint64_t)v815);
                  *(_DWORD *)v809 = 0;
                  sub_22E8900C4((uint64_t)v815, (int *)v809);
                  sub_22E903BEC((unsigned int *)v815);
                  *((_WORD *)v141 + 544) |= 1u;
                }
LABEL_456:
                v230 = &v755[15 * v151];
                v231 = *((_DWORD *)v230 + 1);
                v232 = *((_DWORD *)v230 + 2);
                v233 = (int *)v230 + 1;
                sub_22EE928DC(v779, 0, v231, v232, (uint64_t)(v233 + 3), (uint64_t *)(*((_QWORD *)v4 + 1) + 1112));
                if ((*((_BYTE *)v746 + 1) & 0x40) != 0 && sub_22E4EBB74(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)))
                {
                  v251 = sub_22F36CC4C(v744, v784);
                }
                else
                {
                  v234 = v784;
                  if ((*((_DWORD *)v746 + 13) & 0x40000000) != 0)
                  {
                    v235 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    v236 = *(_DWORD *)(v235 + 16);
                    v237 = v236 & 0xFF800FF;
                    v238 = (v236 & 0xFF800FF) == 0x108000B || v237 == 17825803;
                    v239 = v238;
                    if (v235)
                    {
                      *(int8x8_t *)v240.i8 = vand_s8((int8x8_t)vdup_n_s32(v236), (int8x8_t)0xFF000FF0FC000FFLL);
                      v240.i64[1] = __PAIR64__(v240.u32[1], v237);
                      v241 = vdupq_laneq_s32(v240, 2);
                      v240.i32[3] = v236 & 0xFF800FF;
                      v242 = vdupq_n_s32(v237);
                      v243 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v240, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v241, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v241, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v241, (int32x4_t)xmmword_22F45AEE0)));
                      v243.i8[0] = vmaxvq_u8(v243);
                      v244 = v243.i32[0];
                      *(int8x8_t *)v243.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v242, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v242, (int32x4_t)xmmword_22F45AF00)));
                      v243.i8[0] = vmaxv_u8(*(uint8x8_t *)v243.i8);
                      if ((v244 | v243.i32[0]) & 1 | ((v236 & 0xFF800FF) == 16777227 || v239))
                        goto LABEL_480;
                    }
                    v245 = (v236 & 0xFF800FF) == 0x118000B || v237 == 116391947;
                    v246 = v245;
                    if (v235 && v246
                      || ((v247 = *(_DWORD *)(v235 + 16), v247 != 38)
                        ? (v248 = v247 == 10)
                        : (v248 = 1),
                          v248))
                    {
LABEL_480:
                      sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0x1140u, 0, (uint64_t)v815);
                      sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                      sub_22E903BEC((unsigned int *)v815);
                      *((_WORD *)v141 + 544) |= 1u;
                      v234 = v784;
                    }
                  }
                  v249 = v741;
                  v741 &= 0xFFFFFFE0;
                  v250 = v249 & 0xE0;
                  v740 = v740 & 0xFFFFFFFF00000000 | v250;
                  v251 = sub_22EE7DDA0((_QWORD *)v754, v234, v250, *v233, (uint64_t)v742);
                }
                v252 = v251;
                v784 = v251;
                if ((v755[15 * v151 + 4] & 0x7F) == 0)
                  goto LABEL_1119;
                v253 = sub_22EE7D830((_QWORD *)v754, v251, *v233, v755[15 * v151 + 4] & 0x7F, 0);
                goto LABEL_549;
              case 1:
                v6 = v754;
                if ((*((_BYTE *)v746 + 1) & 1) != 0 && sub_22EB14770(v754, v784))
                {
                  sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0xCC6u, 0, (uint64_t)v777);
                  sub_22E903BEC(v777);
                  *((_WORD *)v141 + 544) |= 1u;
                }
                v179 = v784;
                if ((v746[13] & 0x20) == 0
                  || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 25 < 2)
                {
                  goto LABEL_487;
                }
                v180 = (uint64_t)(*v141 + 4);
                v181 = *(_QWORD *)v180;
                if ((*(_QWORD *)v180 & 4) != 0)
                {
                  v222 = v181 & 0xFFFFFFFFFFFFFFF8;
                  v180 = *(_QWORD *)v222;
                  v182 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
                }
                else
                {
                  v182 = v180 + 8 * (v181 > 7);
                }
                if (v180 == v182)
                  goto LABEL_485;
                v223 = 0;
                do
                {
                  while (1)
                  {
                    v224 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v180 + 72) + 8);
                    if (((v224 - 342) > 0xC || ((1 << (v224 - 86)) & 0x15E3) == 0)
                      && ((v224 - 161) > 0x3A
                       || ((1 << (v224 + 95)) & 0x400004000000011) == 0))
                    {
                      v227 = v224 - 234;
                      if (v227 > 3 || v227 == 1)
                        break;
                    }
                    v180 += 8;
                    v223 = 1;
                    if (v180 == v182)
                      goto LABEL_487;
                  }
                  v180 += 8;
                }
                while (v180 != v182);
                if ((v223 & 1) == 0)
                {
LABEL_485:
                  if ((*((_BYTE *)v746 + 121) & 0x20) == 0)
                  {
                    sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xF2Bu, 0, (uint64_t)v815);
                    *(_DWORD *)v809 = 1;
                    sub_22E8900C4((uint64_t)v815, (int *)v809);
                    sub_22E903BEC((unsigned int *)v815);
                    *((_WORD *)v141 + 544) |= 1u;
                    v179 = v784;
                  }
                }
LABEL_487:
                v254 = &v755[15 * v151];
                v256 = *((_DWORD *)v254 + 1);
                v255 = (uint64_t)v254 + 4;
                v252 = sub_22EE7E490((_QWORD *)v754, v179, (*(unsigned __int8 *)(v255 + 28) >> 1) & 1, v256);
                v784 = v252;
                if ((*(_BYTE *)(v255 + 28) & 1) != 0)
                {
                  v257 = *(_DWORD *)v255;
                  v258 = (_QWORD *)v754;
                  v259 = 2;
LABEL_489:
                  v252 = sub_22EE7D830(v258, v252, v257, v259, 0);
                  v784 = v252;
                }
                v141 = v752;
                goto LABEL_1119;
              case 2:
                if ((*((_BYTE *)v746 + 1) & 1) != 0 && sub_22EB14770(v754, v784))
                {
                  sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0xCC6u, 0, (uint64_t)v776);
                  sub_22E903BEC(v776);
                  *((_WORD *)v141 + 544) |= 1u;
                }
                v156 = 120 * v148 - 120;
                v157 = &v755[15 * v151];
                v160 = *((_WORD *)v157 + 16);
                v159 = (__int16 *)(v157 + 4);
                LOBYTE(v158) = v160;
                v748 = *((_QWORD *)v159 + 1);
                if ((v160 & 0x100) != 0)
                {
                  v184 = *((_DWORD *)v141 + 20);
                  if (v184 <= 0x12 && ((1 << v184) & 0x4000E) != 0)
                  {
                    v161 = 2;
                  }
                  else
                  {
                    sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xAA4u, 0, (uint64_t)v775);
                    sub_22E903BEC(v775);
                    v161 = 0;
                    *((_WORD *)v141 + 544) |= 1u;
                    v158 = *v159;
                  }
                }
                else
                {
                  if ((v158 & 0x80) != 0)
                  {
                    v185 = 1;
                    v161 = 1;
                    goto LABEL_371;
                  }
                  v161 = 0;
                }
                if ((v158 & 0x7F) == 0)
                  goto LABEL_386;
                v185 = 0;
LABEL_371:
                v198 = *((_DWORD *)v752 + 20);
                if ((v198 - 1) < 4 || v198 == 18)
                {
                  v141 = v752;
                }
                else
                {
                  sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xAA6u, 0, (uint64_t)v815);
                  v229 = "type qualifier";
                  if (v185)
                    v229 = "'static'";
                  *(_QWORD *)v809 = v229;
                  if (v185)
                    v161 = 0;
                  else
                    v161 = v161;
                  sub_22E8AECC4((uint64_t)v815, (uint64_t *)v809);
                  sub_22E903BEC((unsigned int *)v815);
                  *v159 &= 0xFF80u;
                  v141 = v752;
                  *((_WORD *)v752 + 544) |= 1u;
                }
                v199 = 120 * v148 - 120;
                while (1)
                {
                  v200 = v199 - 120;
                  if (v199 == -120)
                    break;
                  v201 = *(_DWORD *)((char *)v141[14] + v199);
                  v389 = v201 > 5;
                  v202 = (1 << v201) & 0x27;
                  v203 = v389 || v202 == 0;
                  v199 = v200;
                  if (!v203)
                  {
                    sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xAA5u, 0, (uint64_t)v815);
                    v204 = "type qualifier";
                    if ((_DWORD)v161 == 1)
                      v204 = "'static'";
                    *(_QWORD *)v809 = v204;
                    if ((_DWORD)v161 == 1)
                      v161 = 0;
                    else
                      v161 = v161;
                    sub_22E8AECC4((uint64_t)v815, (uint64_t *)v809);
                    sub_22E903BEC((unsigned int *)v815);
                    *v159 &= 0xFF80u;
                    *((_WORD *)v141 + 544) |= 1u;
                    break;
                  }
                }
LABEL_386:
                v205 = v784;
                v206 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
                v815[0] = 0;
                v207 = sub_22F110500((uint64_t)v815, v206);
                if (v207)
                {
                  v208 = *(_DWORD *)(v207 + 16);
                  if (v208 == 14 && *((_DWORD *)v141 + 20) != 18)
                  {
                    if ((v208 & 0x180000) == 0x80000)
                    {
                      v4 = v747;
                      v6 = v754;
                    }
                    else
                    {
                      v6 = v754;
                      sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xDDEu, 0, (uint64_t)v815);
                      *(_QWORD *)__dst = v742;
                      v4 = v747;
                      if (v742)
                      {
                        sub_22EFC683C((uint64_t *)__dst, v809);
                      }
                      else
                      {
                        v809[23] = 9;
                        strcpy(v809, "type name");
                      }
                      v319 = sub_22F2F3734((uint64_t)v815, (void **)v809);
                      sub_22E8901B8(v319, (uint64_t *)&v784);
                      if ((v809[23] & 0x80000000) != 0)
                        operator delete(*(void **)v809);
                      sub_22E903BEC((unsigned int *)v815);
                    }
                    goto LABEL_1120;
                  }
                }
                if (HIDWORD(v781) == 2)
                {
                  v209 = sub_22EE92488((uint64_t)&v755[15 * v151 + 2]);
                  if ((_DWORD)v161 != 1 && !v209)
                  {
                    v210 = *((_DWORD *)v141 + 20);
                    if (v210 <= 0x12 && ((1 << v210) & 0x4000E) != 0)
                    {
                      while (v156 != -120)
                      {
                        v211 = *(_DWORD *)((char *)v141[14] + v156);
                        v389 = v211 > 5;
                        v212 = (1 << v211) & 0x27;
                        v213 = v389 || v212 == 0;
                        v156 -= 120;
                        if (!v213)
                          goto LABEL_571;
                      }
                      sub_22EE92AC0((_QWORD *)v754, 3u, HIDWORD(v755[15 * v151]), 0);
                      v205 = v784;
                    }
                  }
                }
LABEL_571:
                v307 = v205;
                v6 = v754;
                v252 = sub_22EE7E810((_QWORD *)v754, v307, v161, v748, *v159 & 0x7F, *(uint64_t *)((char *)&v755[15 * v151] + 4), v742);
                v784 = v252;
                v4 = v747;
                goto LABEL_1119;
              case 3:
                v176 = (__int16 *)&v755[15 * v151 + 4];
                v178 = sub_22EAE7478((uint64_t)v176) || LODWORD(v755[15 * v151 + 7]) != 0;
                v753 = v178;
                v186 = *((_WORD *)v141 + 544);
                v749 = (__int16 *)&v755[15 * v151 + 4];
                if ((v186 & 1) != 0)
                  goto LABEL_620;
                v187 = *v141;
                v188 = **v141;
                if ((v188 & 0x3F000) == 0x32000)
                  goto LABEL_620;
                v189 = (v188 >> 12) & 0x3F;
                if (v189 - 33 <= 2 && (v151 | *v176 & 0x200) == 0)
                {
                  v297 = *((_DWORD *)v187 + 30);
                  if ((*(_BYTE *)(*(_QWORD *)(v754 + 72) + 1) & 4) == 0)
                  {
                    if (v189 == 33)
                      v298 = 2884;
                    else
                      v298 = 3187;
                    sub_22E8FCA40((_QWORD *)v754, v297, v298, 0, (uint64_t)v774);
                    sub_22E903BEC(v774);
                    v784 = *(_QWORD *)(v744 + 16480);
                    v186 = *((_WORD *)v141 + 544);
                    goto LABEL_569;
                  }
                  sub_22E8FCA40((_QWORD *)v754, v297, 0x18F7u, 0, (uint64_t)v773);
                  sub_22E903BEC(v773);
LABEL_620:
                  if (((_WORD)v141[136] & 1) != 0)
                  {
                    v323 = v784;
                    v324 = v746;
                  }
                  else
                  {
                    v323 = v784;
                    v324 = v746;
                    if ((**v141 & 0x3F000) != 0x32000
                      && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16) & 0xFEu)
                        - 2 < 4
                       || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 16)
                        - 25 <= 1)
                      && *((_DWORD *)v141 + 10) != 2)
                    {
                      if (v151)
                      {
                        v325 = 3513;
                      }
                      else if (*((_DWORD *)v141 + 20) == 16)
                      {
                        v325 = 2957;
                      }
                      else
                      {
                        v325 = 3513;
                      }
                      sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), v325, 0, (uint64_t)v815);
                      v809[0] = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 16)
                              - 25 < 2;
                      v336 = sub_22E894E38((uint64_t)v815, v809);
                      sub_22E8901B8(v336, (uint64_t *)&v784);
                      sub_22E903BEC((unsigned int *)v815);
                      v323 = *(_QWORD *)(v744 + 16480);
                      v784 = v323;
                      *((_WORD *)v141 + 544) |= 1u;
                    }
                  }
                  v326 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v323 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (v326)
                    v327 = (*(_DWORD *)(v326 + 16) & 0xFF800FF) == 110100491;
                  else
                    v327 = 0;
                  if (!v327)
                  {
LABEL_638:
                    v330 = *(_QWORD *)((v784 & 0xFFFFFFFFFFFFFFF0) + 8);
                    if ((v330 & 8) == 0 || (*(_BYTE *)((v330 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) == 0)
                      goto LABEL_658;
                    sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0x11F7u, 0, (uint64_t)v815);
                    v331 = sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                    v332 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
                    v333 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v332 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                    if (v333 == 39
                      || ((v334 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v332 + 16) == 32)
                       || v333 == 32 && (v334 = sub_22F10CF48(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0))) != 0)
                      && sub_22E509ED0(v334))
                    {
                      LODWORD(v335) = 1;
                    }
                    else
                    {
                      if (*(_BYTE *)(v332 + 16) == 32)
                        goto LABEL_649;
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v332 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
                      {
                        LODWORD(v335) = 0;
                        goto LABEL_657;
                      }
                      v335 = sub_22F10CF48(v332);
                      v332 = v335;
                      if (v335)
LABEL_649:
                        LODWORD(v335) = sub_22E509F54(v332);
                    }
LABEL_657:
                    *(_DWORD *)v809 = v335 ^ 1;
                    v337 = sub_22E8900C4(v331, (int *)v809);
                    *(_DWORD *)__dst = 0;
                    sub_22E8900C4(v337, (int *)__dst);
                    sub_22E903BEC((unsigned int *)v815);
                    v176 = (__int16 *)&v755[15 * v151 + 4];
LABEL_658:
                    if ((*((_DWORD *)v324 + 13) & 0x40000000) != 0)
                    {
                      v338 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                       + 16);
                      v339 = v338;
                      if (v338 == 10
                        || (v177.i32[0] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16),
                            (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8(v177, v729), 0), (int32x4_t)xmmword_22F45AEA0))) & 1) != 0)|| (v338 & 0xFE000FF) == 0x100000B|| ((v357 = v338 & 0xFF800FF, v339 != 38) ? (v358 = v357 == 116391947) : (v358 = 1), v358))
                      {
                        sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0x113Au, 0, (uint64_t)v815);
                        v340 = sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                        *(_DWORD *)v809 = 1;
                        sub_22E8900C4(v340, (int *)v809);
                        sub_22E903BEC((unsigned int *)v815);
                        *((_WORD *)v141 + 544) |= 1u;
                      }
                      if ((*v176 & 2) != 0
                        && !sub_22F420564(v728, (uint64_t)"__cl_clang_variadic_functions", 29, *(_QWORD *)(v754 + 72)))
                      {
                        if (*((_DWORD *)v141 + 10)
                          || (v440 = v141[6]) == 0
                          || ((v441 = (unsigned int *)v440[2], v442 = *v441, v442 != 6)
                           || (v441[4] == 1852404336 ? (v443 = *((unsigned __int16 *)v441 + 10) == 26228) : (v443 = 0),
                               !v443 || (v444 = v324[7], (v444 & 0x100000000) == 0) && v444 <= 0x77))
                          && ((v442 & 0xFFFFFFFE) == 0 || *((_WORD *)v441 + 8) != 24415))
                        {
                          sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0x114Bu, 0, (uint64_t)v772);
                          sub_22E903BEC(v772);
                          *((_WORD *)v141 + 544) |= 1u;
                        }
                      }
                    }
                    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 16)
                       - 33 > 1)
                      goto LABEL_663;
                    if (!v731)
                    {
                      v374 = *((_DWORD *)*v141 + 30);
                      v375 = *((unsigned int *)*v141 + 23);
                      goto LABEL_830;
                    }
                    v418 = v731 + 1;
                    v419 = *v731;
                    v420 = v731 + 1;
                    v421 = *v731;
                    while (1)
                    {
                      v733 = v420;
                      while (1)
                      {
                        if ((v421 & 0xF) != 0)
                          goto LABEL_823;
                        v422 = *(unsigned __int8 *)(*(_QWORD *)(v421 & 0xFFFFFFFFFFFFFFF0) + 16);
                        if (v422 > 0x39)
                          goto LABEL_824;
                        if (v422 == 24)
                        {
LABEL_1138:
                          v419 = v421;
                          v324 = v746;
                          goto LABEL_829;
                        }
                        if (v422 != 26)
                          break;
                        if ((*(_BYTE *)(v421 + 23) & 0x10) != 0)
                          goto LABEL_1138;
LABEL_823:
                        v421 = sub_22F115B7C(v421);
                        v418 = v423;
                      }
                      if (((1 << v422) & 0x20000000200003CLL) != 0)
                        goto LABEL_823;
LABEL_824:
                      v424 = v418;
                      v425 = sub_22F115668(v421);
                      if (v425)
                        v419 = v421;
                      v426 = v733;
                      if (v425)
                        v426 = v424;
                      v421 = sub_22F115B7C(v421);
                      v418 = v427;
                      v420 = v426;
                      v324 = v746;
                      if (!v421)
                      {
LABEL_829:
                        v374 = sub_22F115668(v419);
                        *(_QWORD *)v815 = *v731;
                        *(_QWORD *)&v815[8] = v731 + 1;
                        v375 = sub_22F1167E8((uint64_t *)v815);
LABEL_830:
                        v428 = sub_22F141A3C(v375, 0, *(_QWORD **)(v754 + 112), *(_DWORD **)(v754 + 72));
                        sub_22E8FCA40((_QWORD *)v754, v374, 0x1034u, 0, (uint64_t)v815);
                        *(_DWORD *)__dst = 0;
                        v429 = sub_22E8900C4((uint64_t)v815, (int *)__dst);
                        v430 = sub_22E8901B8(v429, (uint64_t *)&v784);
                        v809[20] = 0;
                        *(_QWORD *)&v809[12] = 0;
                        *(_QWORD *)&__p[8] = 0;
                        *(_QWORD *)&__p[16] = 0x100000000000000;
                        *(_QWORD *)__p = 42;
                        *(_DWORD *)v809 = v428;
                        *(_DWORD *)&v809[4] = v428;
                        v809[8] = 0;
                        v811 = 0;
                        sub_22E890748(v430, v809);
                        if ((__p[23] & 0x80000000) != 0)
                          operator delete(*(void **)__p);
                        sub_22E903BEC((unsigned int *)v815);
                        v784 = sub_22F36CC4C(v744, v784);
                        if (v731)
                        {
                          *(_QWORD *)v815 = v816;
                          *(int64x2_t *)&v815[8] = v727;
                          *((_QWORD *)&v817 + 1) = 0;
                          sub_22EEB4368((uint64_t)v815, *v731, (uint64_t)(v731 + 1));
                          sub_22EEB5360((uint64_t)v815, v784, 4uLL, 4);
                          *v431 = v428;
                          v432 = v784;
                          v433 = *(_QWORD *)&v815[8] - *(_QWORD *)&v815[16];
                          v434 = *(_DWORD *)&v815[8] - *(_DWORD *)&v815[16];
                          if (*(_DWORD *)&v815[8] == *(_DWORD *)&v815[16])
                            v434 = sub_22F11598C(v784);
                          v731 = (unint64_t *)sub_22E3CD3D4(v744 + 2032, v434 + 8, 3);
                          *v731 = v432;
                          v435 = *(_BYTE **)v815;
                          memcpy(v731 + 1, (const void *)(*(_QWORD *)v815 + *(_QWORD *)&v815[16]), v433);
                          if (v435 != v816 && v435)
                            MEMORY[0x2348A0E84](v435, 0x1000C8077774924);
                        }
                        else
                        {
                          v731 = 0;
                        }
                        *((_WORD *)v141 + 544) |= 1u;
                        v176 = (__int16 *)&v755[15 * v151 + 4];
LABEL_663:
                        if ((*(_BYTE *)(*(_QWORD *)(v754 + 72) + 104) & 0x20) != 0
                          && sub_22F10C618(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0)))
                        {
                          sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0xF19u, 0, (uint64_t)v815);
                          sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                          sub_22E903BEC((unsigned int *)v815);
                          *((_WORD *)v141 + 544) |= 1u;
                        }
                        v341 = v784;
                        v342 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
                        v343 = *(_QWORD *)((v784 & 0xFFFFFFFFFFFFFFF0) + 8) | v784;
                        if ((v343 & 7) != 0
                          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v342 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6)
                        {
                          if ((*(_BYTE *)(*(_QWORD *)(v754 + 72) + 1) & 1) != 0)
                          {
                            if ((*(_BYTE *)(v342 + 17) & 4) == 0)
                            {
                              v345 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v342 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 16);
                              if (v345 != 45)
                                goto LABEL_678;
                            }
                          }
                          else
                          {
                            v344 = *(_QWORD *)(*(_QWORD *)(v342 + 8) & 0xFFFFFFFFFFFFFFF0);
                            v345 = *(_DWORD *)(v344 + 16);
                            if (v344)
                              v346 = (v345 & 0xFF800FF) == 86507531;
                            else
                              v346 = 0;
                            if (v346 && ((_WORD)v141[136] & 0xC) == 4)
                            {
                              sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xDBAu, 0, (uint64_t)v815);
                              sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                              sub_22E903BEC((unsigned int *)v815);
                              goto LABEL_697;
                            }
LABEL_678:
                            v347 = v141[14];
                            v348 = &v347[15 * v151];
                            v350 = *((_WORD *)v348 + 16);
                            v349 = v348 + 4;
                            if ((v350 & 0x200) != 0)
                            {
                              v355 = v784 & 7;
                              v356 = *((_DWORD *)v349 + 20);
                              goto LABEL_696;
                            }
                            v351 = v751;
                            while (*((_DWORD *)v141 + 30) != v351)
                            {
                              v352 = v351;
                              v353 = v347[15 * v351++];
                              if (v353 != 6)
                              {
                                if ((v353 - 1) >= 5 && v353 != 7)
                                {
                                  v436 = &v347[15 * v352];
                                  sub_22EE810A4(v754, 0x1B18u, v436[4] & 0x7F, 0, *((_DWORD *)v436 + 9), *((_DWORD *)v436 + 10), *((_DWORD *)v436 + 11), *((_DWORD *)v436 + 12), *((_DWORD *)v436 + 13), 0, *((_DWORD *)v436 + 14));
                                  goto LABEL_697;
                                }
                                v355 = v343 & 7 | (16 * (v345 == 6));
                                v356 = *((_DWORD *)v141 + 16);
LABEL_696:
                                sub_22EE810A4(v754, 0x1B18u, v355, v356, 0, 0, 0, 0, 0, 0, 0);
                                goto LABEL_697;
                              }
                            }
                            if (*((_DWORD *)v141 + 10) != 2)
                              sub_22EE810A4(v754, 0x1B18u, *(_DWORD *)*v141 >> 25, *((_DWORD *)v141 + 16), *((_DWORD *)*v141 + 36), *((_DWORD *)*v141 + 38), *((_DWORD *)*v141 + 37), *((_DWORD *)*v141 + 39), *((_DWORD *)*v141 + 40), 0, *((_DWORD *)*v141 + 51));
LABEL_697:
                            v341 = v784;
                            if (((v784 & 4) != 0 || (*(_BYTE *)((v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
                              && (*(_BYTE *)(*(_QWORD *)(v754 + 72) + 1) & 0x10) != 0)
                            {
                              sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0x196Du, 0, (uint64_t)v815);
                              sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                              sub_22E903BEC((unsigned int *)v815);
                              v341 = v784;
                            }
                          }
                        }
                        v359 = *(_QWORD *)((v341 & 0xFFFFFFFFFFFFFFF0) + 8);
                        if ((v359 & 8) != 0 && (*(_WORD *)((v359 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
                        {
                          if (v150 < *((_DWORD *)v141 + 30))
                          {
                            v360 = (uint64_t)&v141[14][15 * v150];
                            v361 = *(_DWORD *)(v360 + 8);
                            *(_QWORD *)v815 = *(_QWORD *)v360;
                            *(_DWORD *)&v815[8] = v361;
                            *(_QWORD *)&v815[16] = *(_QWORD *)(v360 + 16);
                            v362 = sub_22E828D58((uint64_t *)v816, (uint64_t *)(v360 + 24));
                            v363 = *(_OWORD *)(v360 + 48);
                            *(_OWORD *)&v816[8] = *(_OWORD *)(v360 + 32);
                            v817 = v363;
                            v364 = *(_OWORD *)(v360 + 64);
                            v365 = *(_OWORD *)(v360 + 80);
                            v366 = *(_OWORD *)(v360 + 96);
                            v821 = *(_QWORD *)(v360 + 112);
                            v819 = v365;
                            v820 = v366;
                            v818 = v364;
                            if ((v816[0] & 4) != 0)
                            {
                              v368 = *(uint64_t **)(*(_QWORD *)v816 & 0xFFFFFFFFFFFFFFF8);
                              v367 = &v368[*(unsigned int *)((*(_QWORD *)v816 & 0xFFFFFFFFFFFFFFF8) + 8)];
                            }
                            else
                            {
                              v367 = &v362[*(_QWORD *)v816 > 7uLL];
                              v368 = v362;
                            }
                            v141 = v752;
                            if (v368 == v367)
                            {
LABEL_710:
                              sub_22E80F94C(v362);
                            }
                            else
                            {
                              while (*(_WORD *)(*(_QWORD *)(*v368 + 72) + 8) != 329)
                              {
                                if (++v368 == v367)
                                  goto LABEL_710;
                              }
                              v373 = *(_DWORD *)(*v368 + 16);
                              sub_22E80F94C(v362);
                              if (v373)
                              {
LABEL_722:
                                if (v373 < 0)
                                  v373 = sub_22F1E25A4(*(_QWORD **)(v754 + 112), v373);
                                sub_22E8FCA40((_QWORD *)v754, v373, 0x1837u, 0, (uint64_t)v815);
                                v376 = *(_QWORD *)((v784 & 0xFFFFFFFFFFFFFFF0) + 8);
                                if ((v376 & 8) != 0)
                                  v377 = *(_DWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                                else
                                  v377 = 0;
                                v176 = (__int16 *)&v755[15 * v151 + 4];
                                *(_DWORD *)v809 = (v377 >> 6) & 7;
                                sub_22E8900C4((uint64_t)v815, (int *)v809);
                                sub_22E903BEC((unsigned int *)v815);
                                goto LABEL_728;
                              }
                            }
                          }
                          v369 = (uint64_t)(*v141 + 4);
                          v370 = *(_QWORD *)v369;
                          if ((*(_QWORD *)v369 & 4) != 0)
                          {
                            v372 = v370 & 0xFFFFFFFFFFFFFFF8;
                            v369 = *(_QWORD *)v372;
                            v371 = *(_QWORD *)v372 + 8 * *(unsigned int *)(v372 + 8);
                          }
                          else
                          {
                            v371 = v369 + 8 * (v370 > 7);
                          }
                          while (1)
                          {
                            if (v369 == v371)
                              goto LABEL_728;
                            if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v369 + 72) + 8) == 329)
                              break;
                            v369 += 8;
                          }
                          v373 = *(_DWORD *)(*(_QWORD *)v369 + 16);
                          if (v373)
                            goto LABEL_722;
                        }
LABEL_728:
                        v6 = v754;
                        if ((*((_BYTE *)v324 + 1) & 1) != 0 && (*((_BYTE *)*v141 + 2) & 0x20) != 0)
                        {
                          v437 = (*v141)[1];
                          if ((*(_BYTE *)(v437 + 74) & 1) != 0)
                          {
                            sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(v437 + 24), 0x1325u, 0, (uint64_t)v815);
                            v438 = *(_QWORD *)(v437 + 48);
                            if (v438)
                              v439 = v438 & 0xFFFFFFFFFFFFFFF0;
                            else
                              v439 = sub_22EF6462C(v744, v437);
                            *(_QWORD *)v809 = v439;
                            sub_22E8901B8((uint64_t)v815, (uint64_t *)v809);
                            sub_22E903BEC((unsigned int *)v815);
                          }
                        }
                        v378 = *v176;
                        v379 = v737;
                        if ((*v176 & 0xF0) == 0)
                          v379 = 0;
                        if (v379 == 1 && (*((_BYTE *)v324 + 1) & 8) == 0)
                        {
                          sub_22E8FCA40((_QWORD *)v754, v755[15 * v151 + 8], 0xCE6u, 0, (uint64_t)v815);
                          v809[0] = ((_DWORD)v141[10] & 0xFFFFFFFE) == 24;
                          sub_22E894E38((uint64_t)v815, v809);
                          sub_22E903BEC((unsigned int *)v815);
                          v378 = *v749;
                        }
                        if ((v378 & 4) == 0)
                          goto LABEL_755;
                        v380 = v784;
                        v381 = (uint64_t *)(v784 & 0xFFFFFFFFFFFFFFF0);
                        v382 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        v383 = *(_DWORD *)(v382 + 16);
                        if (v382 && (v383 & 0xFF800FF) == 86507531)
                          goto LABEL_755;
                        v385 = &v755[15 * v151];
                        v388 = *((_DWORD *)v385 + 12);
                        v387 = v385 + 6;
                        v386 = v388;
                        v389 = v383 != 45 && v386 > 1;
                        if (v389)
                          goto LABEL_755;
                        if ((v383 & 0xFE) == 0x28 && v386 != 1)
                          goto LABEL_755;
                        v391 = *((unsigned int *)v141 + 30);
                        if (!(_DWORD)v391)
                          goto LABEL_755;
                        v392 = (int *)v141[14];
                        while (1)
                        {
                          v394 = *v392;
                          v392 += 30;
                          v393 = v394;
                          if (v394 != 6)
                            break;
                          if (!--v391)
                            goto LABEL_755;
                        }
                        if (((1 << v393) & 0xB7) != 0 || ((_WORD)v141[136] & 0xC) != 0)
                          goto LABEL_755;
                        v445 = *(_WORD *)(*(_QWORD *)(v754 + 216) + 8) & 0x7F;
                        v446 = v445 > 0x18 || ((1 << v445) & 0x1000006) == 0;
                        if (v446 && v445 - 52 > 5)
                          goto LABEL_755;
                        if ((*(_BYTE *)*v141 & 7) != 0 || *((_DWORD *)v141 + 20) == 11)
                          goto LABEL_755;
                        v448 = &v755[15 * v151];
                        v799 = *(void **)((char *)v448 + 4);
                        v738 = (int *)v448 + 1;
                        if (*v387)
                          v449 = 6876;
                        else
                          v449 = 6533;
                        sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v448 + 1), v449, 0, (uint64_t)v815);
                        sub_22E8906A0((uint64_t)v815, (uint64_t *)&v799);
                        sub_22E903BEC((unsigned int *)v815);
                        v450 = *((_DWORD *)v141 + 420);
                        if (v450 && !*((_DWORD *)v141 + 10) && v141[6])
                        {
                          v451 = *(_QWORD *)(v754 + 112);
                          LODWORD(v802) = *((_DWORD *)v141 + 420);
                          v803 = v451;
                          v725 = v450;
                          v726 = *((_DWORD *)v141 + 16);
                          LODWORD(v806) = v726;
                          *(_QWORD *)&v807 = v451;
                          v734 = sub_22F1DFF28((uint64_t)&v802);
                          if (v734 != sub_22F1DFF28((uint64_t)&v806)
                            || (v735 = sub_22F423C68(v451, v725, 0),
                                v735 != sub_22F423C68(v451, v726, 0)))
                          {
                            if (*((_DWORD *)v141 + 10))
                              v452 = 0;
                            else
                              v452 = (uint64_t)v141[6];
                            *(_QWORD *)v815 = 0;
                            *(_QWORD *)&v815[8] = v816;
                            *(_QWORD *)&v815[16] = 0x800000000;
                            v820 = 0uLL;
                            *((_QWORD *)&v819 + 1) = 0;
                            v821 = v754;
                            v822 = v452;
                            v823 = 0;
                            sub_22EFC6D6C((uint64_t)&v824, v452);
                            v825 = 0;
                            v826 = 0;
                            v827 = 0;
                            *(_DWORD *)v828 = 257;
                            v828[4] = 0;
                            sub_22EC56024((uint64_t)v815);
                            if (sub_22EC63520(v754, v815, *(_QWORD *)(v754 + 12888), 0, 0))
                            {
                              sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 420), 0x15C0u, 0, (uint64_t)v809);
                              v453 = *((unsigned int *)v141 + 420);
                              *(_QWORD *)&__dst[12] = 0;
                              __dst[20] = 0;
                              *(_QWORD *)&v766 = 0x100000000000000;
                              v765 = 0x3BuLL;
                              BYTE8(v766) = 0;
                              *(_QWORD *)__dst = v453 | (v453 << 32);
                              __dst[8] = 1;
                              v454 = sub_22E890748((uint64_t)v809, __dst);
                              if (*((_DWORD *)v141 + 10))
                                v455 = 0;
                              else
                                v455 = v141[6];
                              v796 = v455;
                              sub_22E8BAE44(v454, (uint64_t *)&v796);
                              if (SBYTE7(v766) < 0)
                                operator delete((void *)v765);
                              sub_22E903BEC((unsigned int *)v809);
                            }
                            v828[1] = 0;
                            if (*((_QWORD *)&v819 + 1))
                            {
                              v592 = sub_22EC6CBD0(*((uint64_t *)&v819 + 1));
                              MEMORY[0x2348A0E9C](v592, 0x10E0C409F09D3C3);
                            }
                            if (*(_BYTE **)&v815[8] != v816)
                              free(*(void **)&v815[8]);
                          }
                          v6 = v754;
                        }
                        if (*v387)
                        {
                          v456 = *(_QWORD *)(v755[15 * v151 + 9] + 16);
                          v457 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v456 + 16))(v456);
                          v458 = v457;
                          v459 = sub_22F141A3C(HIDWORD(v457), 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
                          sub_22E8FCA40((_QWORD *)v6, v458, 0x1526u, 0, (uint64_t)v815);
                          v809[20] = 0;
                          *(_QWORD *)&v809[12] = 0;
                          *(_QWORD *)&__p[8] = 0;
                          *(_QWORD *)&__p[16] = 0x100000000000000;
                          *(_QWORD *)__p = 40;
                          *(_DWORD *)v809 = v458;
                          *(_DWORD *)&v809[4] = v458;
                          v809[8] = 0;
                          v811 = 0;
                          v460 = sub_22E890748((uint64_t)v815, v809);
                          __dst[20] = 0;
                          *(_QWORD *)&__dst[12] = 0;
                          *(_QWORD *)&v766 = 0x100000000000000;
                          v765 = 0x29uLL;
                          *(_DWORD *)__dst = v459;
                          *(_DWORD *)&__dst[4] = v459;
                          __dst[8] = 0;
                          BYTE8(v766) = 0;
                          sub_22E890748(v460, __dst);
                          if (SBYTE7(v766) < 0)
                            operator delete((void *)v765);
LABEL_891:
                          if ((__p[23] & 0x80000000) != 0)
                            operator delete(*(void **)__p);
                          sub_22E903BEC((unsigned int *)v815);
LABEL_755:
                          v395 = &v755[15 * v151];
                          v398 = v395[3];
                          v397 = v395 + 3;
                          v396 = v398;
                          if ((v398 & 4) != 0)
                          {
                            v400 = v396 & 0xFFFFFFFFFFFFFFF8;
                            v397 = *(uint64_t **)v400;
                            v399 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
                          }
                          else
                          {
                            v399 = (uint64_t)&v397[v396 > 7];
                          }
                          v4 = v747;
                          while (2)
                          {
                            if (v397 == (uint64_t *)v399)
                            {
                              if ((*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 1) != 0)
                              {
                                v412 = (unsigned __int16 *)&v755[15 * v151 + 4];
                                if (!v151)
                                  goto LABEL_799;
                                v413 = v148 - 1;
                                do
                                {
                                  v414 = v141[14][15 * v413];
                                  if (!(_DWORD)v413)
                                    break;
                                  --v413;
                                }
                                while (v414 == 6);
                                if (v414 == 6)
                                {
LABEL_799:
                                  v415 = *((_DWORD *)v141 + 20);
                                  if (v415 == 17)
                                  {
                                    v411 = 1;
                                  }
                                  else if (v415 == 7)
                                  {
                                    v411 = 0;
                                    if ((**v141 & 0x1000000000) == 0)
                                    {
                                      v416 = **v141 & 7;
                                      if (v416 != 1)
                                      {
                                        if (v416 == 3)
                                          v417 = 1;
                                        else
                                          v417 = *((_DWORD *)v141 + 10) == 1
                                              && (*((_DWORD *)v141 + 12) - 1) < 4;
                                        v411 = !v417;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v411 = 0;
                                  }
                                }
                                else
                                {
                                  v411 = v414 == 5;
                                }
                              }
                              else
                              {
                                v411 = 0;
                                v412 = (unsigned __int16 *)&v755[15 * v151 + 4];
                              }
                              v409 = sub_22EF72F20(*(_QWORD *)(v6 + 88), (*v412 >> 1) & 1, v411, 0);
                              v461 = *(_QWORD *)(v6 + 72);
                              if ((*(_DWORD *)(v461 + 52) & 0x40000000) != 0)
                              {
                                v463 = (uint64_t)(*v141 + 4);
                                v464 = *(_QWORD *)v463;
                                if ((*(_QWORD *)v463 & 4) != 0)
                                {
                                  v466 = v464 & 0xFFFFFFFFFFFFFFF8;
                                  v463 = *(_QWORD *)v466;
                                  v465 = *(_QWORD *)v466 + 8 * *(unsigned int *)(v466 + 8);
                                }
                                else
                                {
                                  v465 = v463 + 8 * (v464 > 7);
                                }
                                while (1)
                                {
                                  if (v463 == v465)
                                    goto LABEL_920;
                                  if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v463 + 72) + 8) == 351)
                                    break;
                                  v463 += 8;
                                }
                                v409 = 13;
                              }
                              else if ((*(_BYTE *)(v461 + 68) & 0x20) != 0)
                              {
                                v462 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 15088);
                                if (*(char *)(v462 + 55) < 0)
                                {
                                  sub_22E3BB2B4(v815, *(void **)(v462 + 32), *(_QWORD *)(v462 + 40));
                                }
                                else
                                {
                                  *(_OWORD *)v815 = *(_OWORD *)(v462 + 32);
                                  *(_QWORD *)&v815[16] = *(_QWORD *)(v462 + 48);
                                }
                                *(_OWORD *)v816 = *(_OWORD *)(v462 + 56);
                                *(_QWORD *)&v816[16] = *(_QWORD *)(v462 + 72);
                                if ((*(_DWORD *)v816 & 0xFFFFFFFE) == 0x3A)
                                {
                                  v141 = v752;
                                  v467 = (uint64_t)(*v752 + 4);
                                  v468 = *(_QWORD *)v467;
                                  if ((*(_QWORD *)v467 & 4) != 0)
                                  {
                                    v470 = v468 & 0xFFFFFFFFFFFFFFF8;
                                    v467 = *(_QWORD *)v470;
                                    v469 = *(_QWORD *)v470 + 8 * *(unsigned int *)(v470 + 8);
                                  }
                                  else
                                  {
                                    v469 = v467 + 8 * (v468 > 7);
                                  }
                                  while (1)
                                  {
                                    if (v467 == v469)
                                      goto LABEL_917;
                                    if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v467 + 72) + 8) == 58)
                                      break;
                                    v467 += 8;
                                  }
                                  v409 = 13;
                                }
                                else
                                {
                                  v141 = v752;
                                }
LABEL_917:
                                if ((v815[23] & 0x80000000) != 0)
                                  operator delete(*(void **)v815);
                                v461 = *(_QWORD *)(v6 + 72);
                              }
LABEL_920:
                              if ((*(_BYTE *)(v461 + 104) & 0x20) != 0)
                              {
                                v471 = *v141;
                                v474 = v471[4];
                                v473 = v471 + 4;
                                v472 = v474;
                                if ((v474 & 4) != 0)
                                {
                                  v476 = v472 & 0xFFFFFFFFFFFFFFF8;
                                  v473 = *(uint64_t **)v476;
                                  v475 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
                                }
                                else
                                {
                                  v475 = (uint64_t)&v473[v472 > 7];
                                }
                                while (1)
                                {
                                  if (v473 == (uint64_t *)v475)
                                    goto LABEL_928;
                                  v477 = sub_22EE93418(*v473);
                                  if (HIDWORD(v477))
                                    break;
                                  ++v473;
                                }
                                v409 = v477;
LABEL_928:
                                v478 = (uint64_t *)(v752 + 138);
                                v479 = *v730;
                                if ((*v730 & 4) != 0)
                                {
                                  v481 = v479 & 0xFFFFFFFFFFFFFFF8;
                                  v478 = *(uint64_t **)v481;
                                  v480 = *(_QWORD *)v481 + 8 * *(unsigned int *)(v481 + 8);
                                }
                                else
                                {
                                  v480 = (uint64_t)&v730[v479 > 7];
                                }
                                while (1)
                                {
                                  if (v478 == (uint64_t *)v480)
                                    goto LABEL_935;
                                  v482 = sub_22EE93418(*v478);
                                  if (HIDWORD(v482))
                                    break;
                                  ++v478;
                                }
                                v409 = v482;
LABEL_935:
                                v141 = v752;
                              }
LABEL_936:
                              v771 = v409;
                              v483 = &v755[15 * v151];
                              v485 = *((_DWORD *)v483 + 12);
                              v484 = v483 + 6;
                              if (v485)
                              {
LABEL_937:
                                v486 = v755[15 * v151 + 9];
                                if (!*(_QWORD *)(v486 + 16))
                                {
                                  sub_22E8FCA40((_QWORD *)v6, *(_DWORD *)(v486 + 8), 0xDDCu, 0, (uint64_t)v769);
                                  sub_22E903BEC(v769);
                                  *((_WORD *)v141 + 544) |= 1u;
                                  if ((*(_WORD *)v746 & 0x108) != 0
                                    || (v746[1] & 0x200000000) != 0
                                    || (*((_DWORD *)v746 + 13) & 0x40000000) != 0)
                                  {
                                    v487 = *(_QWORD *)(v744 + 16480);
LABEL_942:
                                    v784 = v487;
                                    goto LABEL_1118;
                                  }
LABEL_947:
                                  v487 = sub_22F369930(v744, v784, &v771);
                                  goto LABEL_942;
                                }
                              }
                              else
                              {
                                v488 = *v746;
                                if ((*v749 & 2) != 0)
                                {
                                  if ((v488 & 0x100) == 0)
                                  {
                                    v489 = *v730;
                                    if ((*v730 & 4) != 0)
                                    {
                                      v492 = v489 & 0xFFFFFFFFFFFFFFF8;
                                      v491 = *(unint64_t **)(v489 & 0xFFFFFFFFFFFFFFF8);
                                      v490 = &v491[*(unsigned int *)(v492 + 8)];
                                    }
                                    else
                                    {
                                      v490 = &v730[v489 > 7];
                                      v491 = (unint64_t *)(v752 + 138);
                                    }
                                    while (v491 != v490)
                                    {
                                      if (*(_WORD *)(*v491 + 28) == 357)
                                        goto LABEL_962;
                                      ++v491;
                                    }
                                    v493 = (uint64_t)(*v141 + 4);
                                    v494 = *(_QWORD *)v493;
                                    if ((*(_QWORD *)v493 & 4) != 0)
                                    {
                                      v496 = v494 & 0xFFFFFFFFFFFFFFF8;
                                      v493 = *(_QWORD *)v496;
                                      v495 = *(_QWORD *)v496 + 8 * *(unsigned int *)(v496 + 8);
                                    }
                                    else
                                    {
                                      v495 = v493 + 8 * (v494 > 7);
                                    }
                                    while (v493 != v495)
                                    {
                                      if (*(_WORD *)(*(_QWORD *)v493 + 28) == 357)
                                        goto LABEL_962;
                                      v493 += 8;
                                    }
                                    sub_22E8FCA40((_QWORD *)v6, v755[15 * v151 + 5], 0xCD8u, 0, (uint64_t)v770);
                                    sub_22E903BEC(v770);
                                    if (*v484)
                                      goto LABEL_937;
                                  }
                                }
                                else if ((v488 & 0x108) == 0
                                       && (v746[1] & 0x200000000) == 0
                                       && (*((_DWORD *)v746 + 13) & 0x40000000) == 0)
                                {
                                  goto LABEL_947;
                                }
                              }
LABEL_962:
                              __dst[2] &= 0xFCu;
                              *(_OWORD *)&__dst[4] = 0uLL;
                              v765 = 0u;
                              v766 = 0u;
                              v767 = 0u;
                              v768 = 0;
                              *(_WORD *)__dst = v771;
                              __dst[2] = __dst[2] & 0xFE | ((*(_BYTE *)v749 & 2) != 0);
                              v768 = v755[15 * v151 + 5];
                              __dst[2] |= BYTE1(v755[15 * v151 + 4]) & 2;
                              v497 = &v755[15 * v151];
                              v498 = (int *)v497[10];
                              v736 = v497 + 10;
                              if (v498)
                              {
                                v499 = *v498;
                                v500 = (*v498 >> 25) & 0xF;
                                *(_DWORD *)&__dst[4] = v500;
                                if (v499 < 0)
                                {
                                  v501 = 1024;
LABEL_967:
                                  *(_DWORD *)&__dst[4] = v501 | v500;
                                }
                                else if ((v499 & 0x40000000) != 0)
                                {
                                  v501 = 512;
                                  goto LABEL_967;
                                }
                              }
                              if ((*v749 & 8) != 0)
                                v502 = 1;
                              else
                                v502 = 2;
                              if (LODWORD(v755[15 * v151 + 7]))
                                v503 = v502;
                              else
                                v503 = 0;
                              *(_DWORD *)&__dst[12] = v503;
                              *(_QWORD *)v815 = &v815[16];
                              *(_QWORD *)&v815[8] = 0x1000000000;
                              v504 = *v484;
                              if (v504 >= 0x11)
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                                v504 = *v484;
                              }
                              v806 = v808;
                              v807 = xmmword_22F44E350;
                              sub_22E47EFD8((size_t *)&v806, v504, 0);
                              v739 = *v484;
                              if (!(_DWORD)v739)
                                goto LABEL_1042;
                              v505 = 0;
                              v506 = 0;
                              v507 = &v755[15 * v151 + 9];
                              while (2)
                              {
                                v508 = *(_QWORD *)(*v507 + 32 * v505 + 16);
                                v509 = *(_QWORD *)(v508 + 48);
                                v802 = (void *)v509;
                                v510 = *(_QWORD *)(v509 & 0xFFFFFFFFFFFFFFF0);
                                v511 = *(_QWORD *)(*(_QWORD *)(v510 + 8) & 0xFFFFFFFFFFFFFFF0);
                                v512 = *(_DWORD *)(v511 + 16) & 0xFF800FF;
                                if (v511)
                                  v513 = v512 == 86507531;
                                else
                                  v513 = 0;
                                if (v513)
                                {
                                  if (*v484 != 1 || (*v749 & 2) != 0)
                                  {
                                    sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(*v507 + 32 * v505 + 8), 0x1420u, 0, (uint64_t)v763);
                                    v514 = (unsigned int *)v763;
                                  }
                                  else
                                  {
                                    if (!*(_QWORD *)(*v507 + 32 * v505))
                                    {
                                      v6 = v754;
                                      if ((v509 & 0xF) != 0
                                        || (*(_BYTE *)((v509 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
                                      {
                                        sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0x1421u, 0, (uint64_t)v761);
                                        sub_22E903BEC(v761);
                                      }
                                      if ((v506 & 1) != 0)
                                      {
                                        v524 = *(_DWORD *)&v815[8];
                                        goto LABEL_1041;
                                      }
LABEL_1042:
                                      v802 = v804;
                                      v803 = 0x400000000;
                                      v799 = v801;
                                      v800 = 0x200000000;
                                      v796 = v798;
                                      v797 = 0x200000000;
                                      v532 = &v755[15 * v151 + 4];
                                      v533 = *v749 >> 4;
                                      if (v533 == 2)
                                      {
                                        v534 = HIDWORD(v755[15 * v151 + 6]);
                                        v4 = v747;
                                        if (v534 < 3)
                                        {
                                          v535 = 2;
                                        }
                                        else
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                          v535 = HIDWORD(v797);
                                        }
                                        if (v535 >= v534)
                                        {
                                          if ((_DWORD)v534)
                                            goto LABEL_1052;
                                          v536 = 0;
                                          v141 = v752;
                                        }
                                        else
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_1052:
                                          v537 = 0;
                                          v538 = &v755[15 * v151 + 12];
                                          do
                                          {
                                            v539 = *(_QWORD *)(*v538 + v537);
                                            v540 = v800;
                                            if (v800 >= (unint64_t)HIDWORD(v800))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v540 = v800;
                                            }
                                            *((_QWORD *)v799 + v540) = v539;
                                            LODWORD(v800) = v800 + 1;
                                            v541 = *(_QWORD *)(*v538 + v537 + 8);
                                            v542 = v797;
                                            if (v797 >= (unint64_t)HIDWORD(v797))
                                            {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                              v542 = v797;
                                            }
                                            *((_QWORD *)v796 + v542) = v541;
                                            LODWORD(v797) = v797 + 1;
                                            v537 += 16;
                                            --v534;
                                          }
                                          while (v534);
                                          v536 = 0;
                                          v141 = v752;
                                          v532 = &v755[15 * v151 + 4];
                                        }
                                      }
                                      else
                                      {
                                        v4 = v747;
                                        if ((v533 - 6) > 2)
                                          v536 = 0;
                                        else
                                          v536 = v755[15 * v151 + 12];
                                      }
                                      if ((**v141 & 7) == 1)
                                        v543 = 0;
                                      else
                                        v543 = (0x781u >> *((_DWORD *)v141 + 20)) & 1;
                                      sub_22EADEDCC(v6, v543, *(_WORD *)v532 >> 4, (unint64_t *)v799, v800, (int *)v796, v797, v536, (uint64_t)&v802, (uint64_t)&__dst[16]);
                                      v544 = *(_QWORD *)(*(_QWORD *)v4 + 72);
                                      if ((*(_BYTE *)(v544 + 60) & 1) != 0 || (*(_BYTE *)(v544 + 104) & 0x20) != 0)
                                      {
                                        v545 = (_QWORD *)*((_QWORD *)v4 + 1);
                                        if (*((_DWORD *)v545 + 2) && *((_DWORD *)v545 + 3))
                                        {
                                          v546 = v545[2];
LABEL_1068:
                                          if (*(_QWORD *)(v546 + 16) && (*(_QWORD *)(v546 + 8) & 6) == 4)
                                          {
LABEL_1070:
                                            v547 = *v736;
                                            if (*v736)
                                            {
                                              v550 = *(_QWORD *)(v547 + 32);
                                              v549 = (uint64_t *)(v547 + 32);
                                              v548 = v550;
                                              if ((v550 & 4) != 0)
                                              {
                                                v554 = v548 & 0xFFFFFFFFFFFFFFF8;
                                                v549 = *(uint64_t **)v554;
                                                v551 = *(_QWORD *)v554 + 8 * *(unsigned int *)(v554 + 8);
                                              }
                                              else
                                              {
                                                v551 = (uint64_t)&v549[v548 > 7];
                                              }
                                              v553 = v732;
                                              if (v549 == (uint64_t *)v551)
                                              {
                                                LODWORD(v552) = 0;
                                              }
                                              else
                                              {
                                                v555 = 0;
                                                do
                                                {
                                                  v556 = *v549;
                                                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v747 + 72) + 60) & 1) != 0)
                                                  {
                                                    v558 = *(unsigned __int16 *)(v556 + 28) - 341;
                                                    if (v558 >= 0xE)
                                                      v557 = 0;
                                                    else
                                                      v557 = dword_22F49B498[(__int16)v558];
                                                  }
                                                  else
                                                  {
                                                    v557 = sub_22E826B78(*v549);
                                                  }
                                                  v552 = v557;
                                                  if (sub_22EE8A0C4((_QWORD *)v754, v555, v557, *(_DWORD *)(v556 + 16)))
                                                  {
                                                    *((_WORD *)v752 + 544) |= 1u;
                                                    v552 = v555;
                                                  }
                                                  if ((_DWORD)v557)
                                                    v553 = 1;
                                                  else
                                                    v553 = *(unsigned __int16 *)(*(_QWORD *)(v556 + 72) + 8) == 234;
                                                  ++v549;
                                                  v555 = v552;
                                                }
                                                while (v549 != (uint64_t *)v551);
                                              }
                                            }
                                            else
                                            {
                                              LODWORD(v552) = 0;
                                              v553 = v732;
                                            }
                                            v732 = v553;
                                            v141 = v752;
                                            v6 = v754;
                                            if ((__dst[5] & 6) != 0 && (_DWORD)v552 != 11)
                                            {
                                              sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(*v736 + 204), 0xED1u, 0, (uint64_t)v809);
                                              if (v812)
                                              {
                                                v560 = *(unsigned __int8 **)&__p[8];
                                                if (!*(_QWORD *)&__p[8])
                                                {
                                                  v560 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&__p[16]);
                                                  *(_QWORD *)&__p[8] = v560;
                                                }
                                                v560[*v560 + 1] = 6;
                                                v561 = *(_QWORD *)&__p[8];
                                                v562 = **(_BYTE **)&__p[8];
                                                **(_BYTE **)&__p[8] = v562 + 1;
                                                *(_QWORD *)(v561 + 8 * v562 + 16) = v552;
                                              }
                                              else if (v814)
                                              {
                                                v570 = *(_QWORD *)v809;
                                                v571 = *(_QWORD *)&v809[16];
                                                if (*(_QWORD *)&v809[16])
                                                  v571 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v809[16]
                                                                                           + 32))(*(_QWORD *)&v809[16]);
                                                v785 = v571;
                                                v572 = sub_22F2F1D6C((uint64_t *)(v570 + 12784), &v785);
                                                v573 = v572[1] + 32 * v813;
                                                v576 = *(unsigned __int8 **)(v573 + 8);
                                                v575 = (unsigned __int8 **)(v573 + 8);
                                                v574 = v576;
                                                if (!v576)
                                                {
                                                  v574 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v575[1]);
                                                  *v575 = v574;
                                                }
                                                v574[*v574 + 1] = 6;
                                                v577 = *v575;
                                                v578 = **v575;
                                                *v577 = v578 + 1;
                                                *(_QWORD *)&v577[8 * v578 + 16] = v552;
                                                v141 = v752;
                                              }
                                              sub_22E903BEC((unsigned int *)v809);
                                              *((_WORD *)v141 + 544) |= 1u;
                                            }
                                            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v747 + 72) + 104) & 0x20) == 0
                                              || (_DWORD)v552)
                                            {
                                              if (!(_DWORD)v552)
                                              {
                                                if ((*(_DWORD *)(*(_QWORD *)(v754 + 72) + 52) & 0x40000000) != 0)
                                                {
                                                  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v754 + 88) + 2000) + 68) & 1) != 0)
                                                    LODWORD(v552) = 5;
                                                  else
                                                    LODWORD(v552) = 4;
                                                }
                                                else
                                                {
                                                  LODWORD(v552) = 0;
                                                }
                                              }
                                              *(_DWORD *)&__dst[4] = *(_WORD *)&__dst[4] & 0x7FF | ((_DWORD)v552 << 11) | ((_DWORD)v552 == 13);
                                            }
                                            v4 = v747;
                                            goto LABEL_1108;
                                          }
                                        }
                                        else
                                        {
                                          v546 = v545[2];
                                          if (v546)
                                            goto LABEL_1068;
                                        }
                                        v559 = *((_DWORD *)v545 + 20);
                                        if (v559 == 17 || v559 == 7)
                                          goto LABEL_1070;
                                      }
LABEL_1108:
                                      v784 = sub_22EF63D8C(v744, v784, *(uint64_t **)v815, *(unsigned int *)&v815[8], (__int128 *)__dst, 0);
                                      if (v796 != v798)
                                        free(v796);
                                      if (v799 != v801)
                                        free(v799);
                                      if (v802 != v804)
                                        free(v802);
                                      if (v806 != v808)
                                        free(v806);
                                      if (*(_BYTE **)v815 != &v815[16])
                                        free(*(void **)v815);
LABEL_1118:
                                      v252 = v784;
                                      goto LABEL_1119;
                                    }
                                    sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(*v507 + 32 * v505 + 8), 0x119Du, 0, (uint64_t)v762);
                                    v514 = (unsigned int *)v762;
                                  }
                                  sub_22E903BEC(v514);
                                  v802 = *(void **)(v744 + 16480);
                                  *(_QWORD *)(v508 + 48) = v802;
                                  goto LABEL_988;
                                }
                                if (v511)
                                  v525 = v512 == 110100491;
                                else
                                  v525 = 0;
                                if (v525)
                                {
                                  v526 = *(_QWORD *)(v754 + 72);
                                  if ((*(_DWORD *)(v526 + 52) & 0x40000000) != 0)
                                  {
                                    if (!sub_22F420564(v728, (uint64_t)"cl_khr_fp16", 11, v526))
                                    {
                                      sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(v508 + 24), 0x1138u, 0, (uint64_t)v809);
                                      v529 = sub_22E8901B8((uint64_t)v809, (uint64_t *)&v802);
                                      LODWORD(v799) = 0;
                                      sub_22E8900C4(v529, (int *)&v799);
                                      sub_22E903BEC((unsigned int *)v809);
                                      *((_WORD *)v141 + 544) |= 1u;
                                      sub_22EFC77E8(v508, 1);
                                    }
                                    goto LABEL_988;
                                  }
                                  if ((*(_BYTE *)(v526 + 68) & 0x10) != 0
                                    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v754 + 88)
                                                                                        + 15088)
                                                                          + 80))(*(_QWORD *)(*(_QWORD *)(v754 + 88)
                                                                                             + 15088)) & 1) != 0)
                                  {
                                    goto LABEL_988;
                                  }
                                  sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(v508 + 24), 0x119Fu, 0, (uint64_t)v809);
                                  LODWORD(v799) = 0;
                                  v527 = v809;
                                }
                                else
                                {
                                  if ((*v749 & 1) == 0)
                                  {
                                    if (sub_22F1124D8(v510))
                                    {
                                      v802 = (void *)sub_22EF6A4D4((uint64_t *)v744, (uint64_t)v802);
                                      goto LABEL_1035;
                                    }
                                    v530 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v802 & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0);
                                    if (v530)
                                      v531 = (*(_DWORD *)(v530 + 16) & 0xFF800FF) == 110624779;
                                    else
                                      v531 = 0;
                                    if (v531)
                                    {
                                      v802 = *(void **)(v744 + 16568);
LABEL_1035:
                                      *(_DWORD *)(v508 + 96) |= 0x800u;
                                    }
LABEL_988:
                                    if (sub_22E53B49C(v508))
                                    {
                                      *((_BYTE *)v806 + v505) |= 0x80u;
                                      v506 = 1;
                                    }
                                    if ((*((_WORD *)v746 + 74) & 2) != 0 && sub_22F24EBE4(v508))
                                    {
                                      *((_BYTE *)v806 + v505) |= 0x10u;
                                      v506 = 1;
                                    }
                                    if ((*(_BYTE *)(v508 + 29) & 1) != 0)
                                    {
                                      sub_22EFC8E88(v508);
                                      v516 = *(uint64_t **)v515;
                                      v517 = *(unsigned int *)(v515 + 8);
                                      v518 = *(uint64_t **)v515;
                                      if ((_DWORD)v517)
                                      {
                                        v521 = 8 * v517;
                                        v518 = *(uint64_t **)v515;
                                        while (*(unsigned __int16 *)(*v518 + 32) - 73 >= 4)
                                        {
                                          ++v518;
                                          v521 -= 8;
                                          if (!v521)
                                            goto LABEL_1001;
                                        }
                                      }
                                      if (v518 != &v516[v517])
                                      {
                                        do
                                        {
                                          v519 = *v516++;
                                          v520 = *(_WORD *)(v519 + 32);
                                        }
                                        while (v520 - 73 > 3);
                                        *((_BYTE *)v806 + v505) = *((_BYTE *)v806 + v505) & 0xF0 | (77 - v520);
                                        v506 = 1;
                                      }
                                    }
LABEL_1001:
                                    if (sub_22E484F44(v508))
                                    {
                                      *((_BYTE *)v806 + v505) |= 0x20u;
                                      v506 = 1;
                                    }
                                    if (sub_22F24DBE4(v508))
                                    {
                                      *((_BYTE *)v806 + v505) |= 0x40u;
                                      v506 = 1;
                                    }
                                    v522 = v802;
                                    v523 = *(unsigned int *)&v815[8];
                                    if (*(unsigned int *)&v815[8] >= (unint64_t)*(unsigned int *)&v815[12])
                                    {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                      v523 = *(unsigned int *)&v815[8];
                                    }
                                    *(_QWORD *)(*(_QWORD *)v815 + 8 * v523) = v522;
                                    v524 = ++*(_DWORD *)&v815[8];
                                    ++v505;
                                    v141 = v752;
                                    if (v505 == v739)
                                    {
                                      v6 = v754;
                                      if ((v506 & 1) == 0)
                                        goto LABEL_1042;
LABEL_1041:
                                      *((_QWORD *)&v767 + 1) = v806;
                                      *(_QWORD *)v809 = &v755[15 * v151 + 4];
                                      sub_22EE808F4(v6, *(uint64_t *)v815, v524, (uint64_t)__dst);
                                      goto LABEL_1042;
                                    }
                                    continue;
                                  }
                                  if (*(_DWORD *)(v511 + 16) != 10
                                    || (*(_DWORD *)(*(_QWORD *)(v754 + 72) + 52) & 0x40000000) == 0)
                                  {
                                    goto LABEL_988;
                                  }
                                  sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)(v508 + 24), 0x1138u, 0, (uint64_t)v809);
                                  v527 = (_BYTE *)sub_22E8901B8((uint64_t)v809, (uint64_t *)&v802);
                                  LODWORD(v799) = 1;
                                }
                                break;
                              }
                              sub_22E8900C4((uint64_t)v527, (int *)&v799);
                              sub_22E903BEC((unsigned int *)v809);
                              *((_WORD *)v141 + 544) |= 1u;
                              goto LABEL_988;
                            }
                            v401 = *v397;
                            v402 = *(unsigned __int16 *)(*(_QWORD *)(*v397 + 72) + 8);
                            if (v402 <= 0x16A)
                            {
                              if (v402 - 105 <= 0x20 && ((1 << (v402 - 105)) & 0x100140001) != 0)
                                goto LABEL_783;
                              v408 = v402 > 0x2C || ((1 << v402) & 0x100000000006) == 0;
                              if (!v408 || v402 == 255)
                                goto LABEL_783;
                            }
                            else
                            {
                              v403 = v402 - 363 > 0x39
                                  || ((1 << (v402 - 107)) & 0x204400000406009) == 0;
                              if (!v403
                                || ((v404 = v402 - 430, v389 = v404 > 0x1F, v405 = (1 << v404) & 0x88000021, !v389)
                                  ? (v406 = v405 == 0)
                                  : (v406 = 1),
                                    !v406))
                              {
LABEL_783:
                                *(_DWORD *)v815 = 0;
                                if ((sub_22EA4B588(v6, v401, v815, 0) & 1) == 0)
                                {
                                  v409 = *(_WORD *)v815;
                                  v410 = *v749;
                                  if (*(_DWORD *)v815 == 30)
                                  {
                                    if ((v410 & 2) != 0)
                                      goto LABEL_936;
                                  }
                                  else if ((v410 & 2) == 0
                                         || *(_DWORD *)v815 > 0x1Cu
                                         || ((1 << v815[0]) & 0x1FF0F13E) == 0)
                                  {
                                    goto LABEL_936;
                                  }
                                }
                              }
                            }
                            ++v397;
                            continue;
                          }
                        }
                        v579 = sub_22F10C2A4(*v381);
                        if (v579)
                        {
                          v588 = v579;
                          if ((*(_DWORD *)(v579 + 28) & 0x7Fu) - 35 <= 2)
                          {
                            if (*(_QWORD *)(v579 + 128)
                              || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v579 + 104) + 96), *(_QWORD *)(v579 + 104)),
                                  *(_QWORD *)(v588 + 128)))
                            {
                              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v588 + 104) + 96), *(_QWORD *)(v588 + 104));
                              if ((**(_QWORD **)(v588 + 128) & 0x200) != 0
                                || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v588 + 104) + 96), *(_QWORD *)(v588 + 104)),
                                    (*(_WORD *)(*(_QWORD *)(v588 + 128) + 8) & 0x80) != 0))
                              {
                                sub_22E8FCA40((_QWORD *)v6, *v738, 0x15BFu, 0, (uint64_t)v815);
                                *(_QWORD *)&v809[12] = 0;
                                v809[20] = 0;
                                memset(__p, 0, sizeof(__p));
                                v811 = 0;
                                *(_QWORD *)v809 = v799;
                                v809[8] = 1;
                                sub_22E890748((uint64_t)v815, v809);
                                goto LABEL_891;
                              }
                            }
                          }
                        }
                        sub_22EC36FF4((_QWORD *)v6, v380, (int)v799, (uint64_t)&v802);
                        v580 = v805;
                        v581 = v803;
                        v582 = v805 & 0x7F;
                        if (v805 >= 0)
                          v583 = v805 & 0x7F;
                        else
                          v583 = v803;
                        if (!v583 && (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 2) != 0)
                        {
                          MEMORY[0x2348A0C14](&v802, "{}");
                          v580 = v805;
                          v581 = v803;
                          v582 = v805 & 0x7F;
                        }
                        if (v580 >= 0)
                          v581 = v582;
                        if (v581)
                        {
                          sub_22E8FCA40((_QWORD *)v6, *v738, 0x15C1u, 0, (uint64_t)v815);
                          if (v805 >= 0)
                            v584 = &v802;
                          else
                            v584 = v802;
                          if (v805 >= 0)
                            v585 = v805 & 0x7F;
                          else
                            v585 = v803;
                          *(_QWORD *)&v809[12] = 0;
                          v809[20] = 0;
                          memset(__p, 0, sizeof(__p));
                          v811 = 0;
                          *(_QWORD *)v809 = v799;
                          v809[8] = 1;
                          if (v585 >= 0x7FFFFFFFFFFFFFF8)
                            abort();
                          if (v585 >= 0x17)
                          {
                            v589 = (v585 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v585 | 7) != 0x17)
                              v589 = v585 | 7;
                            v590 = v589 + 1;
                            v586 = operator new(v589 + 1);
                            *(_QWORD *)&__dst[16] = v590 | 0x8000000000000000;
                            *(_QWORD *)__dst = v586;
                            *(_QWORD *)&__dst[8] = v585;
                          }
                          else
                          {
                            __dst[23] = v585;
                            v586 = __dst;
                            if (!v585)
                            {
LABEL_1179:
                              v586[v585] = 0;
                              *(_OWORD *)__p = *(_OWORD *)__dst;
                              *(_QWORD *)&__p[16] = *(_QWORD *)&__dst[16];
                              sub_22E890748((uint64_t)v815, v809);
                              if ((__p[23] & 0x80000000) != 0)
                                operator delete(*(void **)__p);
                              sub_22E903BEC((unsigned int *)v815);
                              v580 = v805;
                              v6 = v754;
                              goto LABEL_1182;
                            }
                          }
                          memmove(v586, v584, v585);
                          goto LABEL_1179;
                        }
LABEL_1182:
                        if (v580 < 0)
                          operator delete(v802);
                        goto LABEL_755;
                      }
                    }
                  }
                  v328 = *(_QWORD *)(v754 + 72);
                  if ((*(_DWORD *)(v328 + 52) & 0x40000000) != 0)
                  {
                    if (sub_22F420564(v728, (uint64_t)"cl_khr_fp16", 11, v328))
                      goto LABEL_638;
                    sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0x113Au, 0, (uint64_t)v815);
                    v329 = (_BYTE *)sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                    *(_DWORD *)v809 = 0;
                  }
                  else
                  {
                    if ((*(_BYTE *)(v328 + 68) & 0x10) != 0
                      || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v754 + 88) + 15088) + 80))(*(_QWORD *)(*(_QWORD *)(v754 + 88) + 15088)) & 1) != 0)
                    {
                      goto LABEL_638;
                    }
                    sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 16), 0x119Fu, 0, (uint64_t)v815);
                    *(_DWORD *)v809 = 1;
                    v329 = v815;
                  }
                  sub_22E8900C4((uint64_t)v329, (int *)v809);
                  sub_22E903BEC((unsigned int *)v815);
                  *((_WORD *)v141 + 544) |= 1u;
                  goto LABEL_638;
                }
                if ((*v176 & 0x200) == 0)
                  goto LABEL_620;
                v191 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
                v192 = *(_DWORD *)(v191 + 16);
                if (v192 == 37)
                {
                  sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 18), 0x131Cu, 0, (uint64_t)v815);
                  v193 = (_BYTE *)sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                  v194 = v141[9];
LABEL_363:
                  *(_QWORD *)v809 = v194;
LABEL_364:
                  sub_22E8906A0((uint64_t)v193, (uint64_t *)v809);
                  sub_22E903BEC((unsigned int *)v815);
                  v186 = *((_WORD *)v141 + 544) | 1;
                  *((_WORD *)v141 + 544) = v186;
                  goto LABEL_365;
                }
                if (*((_DWORD *)v141 + 10) == 9)
                {
                  if (v784 != *(_QWORD *)(v744 + 16832))
                  {
                    sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v187 + 22), 0xC7Du, 0, (uint64_t)v815);
                    *(_QWORD *)v809 = v141[9];
                    v193 = v815;
                    goto LABEL_364;
                  }
                }
                else if (*((_DWORD *)v141 + 20) != 17
                       && ((v784 & 0xF) != 0
                        || (v192 & 0x1800FF) != 0xE
                        || (*(_QWORD *)((v784 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFLL) != 0
                        || *(_QWORD *)(v191 + 40)))
                {
                  sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v187 + 30), 0x131Du, 0, (uint64_t)v815);
                  v193 = (_BYTE *)sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
                  v194 = (uint64_t *)(*v141)[11];
                  goto LABEL_363;
                }
LABEL_365:
                v195 = v755[15 * v151 + 13];
                if (v195 < 0x10)
                {
                  v731 = 0;
LABEL_568:
                  v784 = *(_QWORD *)(v744 + 16480);
LABEL_569:
                  *((_WORD *)v141 + 544) = v186 | 1;
                  goto LABEL_620;
                }
                v731 = 0;
                v306 = *(_QWORD *)(v195 & 0xFFFFFFFFFFFFFFF0);
                if (v306 && *(_BYTE *)(v306 + 16) == 57)
                {
                  v195 = *(_QWORD *)(v306 + 8);
                  v731 = *(unint64_t **)(v306 + 24);
                }
                v784 = v195;
                if (v195 <= 0xF)
                  goto LABEL_568;
                v311 = *(_QWORD *)(v195 & 0xFFFFFFFFFFFFFFF0);
                v815[0] = 0;
                v312 = sub_22F110500((uint64_t)v815, v311);
                if (!v312)
                  goto LABEL_619;
                v313 = v312;
                if (*(_BYTE *)(v312 + 16) != 14)
                  goto LABEL_619;
                v314 = *((_DWORD *)v141 + 20);
                if (v314 == 18)
                {
                  v320 = sub_22E904A34(v754, 0);
                  if (v320)
                  {
                    v315 = v320 + 1424;
                    v195 = v784;
                    goto LABEL_618;
                  }
                }
                else if (v314 == 1)
                {
                  v315 = *(_QWORD *)(v754 + 1952) + 56 * *(unsigned int *)(v754 + 1960) - 56;
LABEL_618:
                  v321 = sub_22EE8F87C((_QWORD **)v4, v195, (void **)v731, v313, v315);
                  v731 = v322;
                  v784 = v321;
                }
LABEL_619:
                v176 = (__int16 *)&v755[15 * v151 + 4];
                goto LABEL_620;
              case 4:
                v6 = v754;
                if ((*(uint64_t *)((char *)v746 + 20) & 0x20000000000) == 0)
                {
                  sub_22E8FCA40((_QWORD *)v754, HIDWORD(v755[15 * v151]), 0xB8Eu, 0, (uint64_t)v815);
                  *(_DWORD *)v809 = (*((_DWORD *)v746 + 13) >> 30) & 1;
                  sub_22E89519C((uint64_t)v815, (unsigned int *)v809);
                  sub_22E903BEC((unsigned int *)v815);
                }
                v299 = &v755[15 * v151];
                v300 = (int *)v299 + 1;
                sub_22EE928DC(v779, 1u, *((_DWORD *)v299 + 1), *((_DWORD *)v299 + 2), (uint64_t)(v299 + 2), (uint64_t *)(*((_QWORD *)v4 + 1) + 1112));
                v301 = sub_22F34B664((_QWORD *)v754, v784, *((_DWORD *)v752 + 16));
                v784 = v301;
                v304 = *((_BYTE *)v299 + 32);
                v303 = v299 + 4;
                v302 = v304;
                v305 = *((_DWORD *)v746 + 13);
                v259 = v304 & 0x7F;
                if ((v304 & 0x7F) != 0)
                {
                  if ((v305 & 0x40000000) == 0)
                  {
                    v252 = v301;
                    goto LABEL_594;
                  }
                }
                else if ((v305 & 0x40000000) == 0)
                {
                  v141 = v752;
                  goto LABEL_1118;
                }
                v316 = v302 | 1;
                *v303 = v316;
                v252 = v784;
                v259 = v316 & 0x7F;
LABEL_594:
                v257 = *v300;
                v258 = (_QWORD *)v754;
                goto LABEL_489;
              case 5:
                v162 = (unsigned int *)&v755[15 * v151];
                v163 = (int *)(v162 + 1);
                sub_22EE928DC(v779, 2u, v162[1], v162[2], (uint64_t)(v162 + 4), (uint64_t *)(*((_QWORD *)v4 + 1) + 1112));
                v165 = v162[10];
                v164 = (uint64_t)(v162 + 10);
                v6 = v754;
                if (v165 && *(_DWORD *)(v164 + 4) && !*(_QWORD *)(v164 + 8))
                  goto LABEL_576;
                v166 = *(_QWORD *)(v164 + 8);
                if (!v166 || (sub_22F0AAC5C(v166) & 4) == 0)
                {
                  v167 = sub_22E958204(v754, v164, 0);
                  if (!v167 || (*(_WORD *)(v167 + 8) & 0x7Fu) - 35 > 2)
                  {
                    sub_22E8FCA40((_QWORD *)v754, *(_DWORD *)v164, 0xDE1u, 0, (uint64_t)v815);
                    if (!*((_DWORD *)v141 + 10) && (v260 = v141[6]) != 0)
                    {
                      v308 = (_DWORD *)v260[2];
                      v309 = *v308;
                      v261 = (const char *)(v308 + 4);
                      v262 = v309;
                    }
                    else
                    {
                      v261 = "type name";
                      v262 = 9;
                    }
                    *(_QWORD *)v809 = v261;
                    *(_QWORD *)&v809[8] = v262;
                    v310 = sub_22F2F2210((uint64_t)v815, (uint64_t)v809);
                    *(_QWORD *)__dst = *(_QWORD *)v164;
                    sub_22E8906A0(v310, (uint64_t *)__dst);
                    sub_22E903BEC((unsigned int *)v815);
LABEL_576:
                    *((_WORD *)v141 + 544) |= 1u;
LABEL_577:
                    v214 = v784;
                    goto LABEL_578;
                  }
                }
                v168 = *(_QWORD *)(v164 + 8);
                v169 = *(_QWORD *)(v168 + 16);
                if (!v169)
                  goto LABEL_577;
                v170 = *(_QWORD *)(v168 + 8);
                v171 = v170 & 0xFFFFFFFFFFFFFFF8;
                v172 = (v170 >> 1) & 3;
                if (v172 - 2 >= 2)
                {
                  if (v172 == 1)
                    goto LABEL_577;
                  if ((v170 & 6) != 0)
                    v587 = 0;
                  else
                    v587 = v169;
                  v174 = sub_22EF65A30(v744, 6, v171, v587, 0);
                  goto LABEL_332;
                }
                v173 = v169 & (v170 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0;
                if (v171 && *(_BYTE *)(v169 + 16) == 46)
                {
                  v174 = sub_22EF65684(v744, 6, v171, v173, 0);
LABEL_332:
                  v173 = v174;
                }
                if (v173 < 0x10)
                  goto LABEL_577;
                if (*((_DWORD *)v141 + 10))
                  v175 = 0;
                else
                  v175 = (uint64_t)v141[6];
                v214 = sub_22EE80BC8((_QWORD *)v754, v784, v173, *v163, v175);
                v784 = v214;
LABEL_578:
                if (v214 > 0xF)
                {
                  if ((*(_BYTE *)(v164 - 8) & 0x7F) == 0)
                    goto LABEL_1118;
                  v252 = sub_22EE7D830((_QWORD *)v754, v214, *v163, *(_BYTE *)(v164 - 8) & 0x7F, 0);
                  v784 = v252;
                }
                else
                {
                  v252 = *(_QWORD *)(v744 + 16480);
                  v784 = v252;
                  *((_WORD *)v141 + 544) |= 1u;
                }
LABEL_1119:
                if (v252 <= 0xF)
                {
LABEL_1120:
                  *((_WORD *)v141 + 544) |= 1u;
                  v784 = *(_QWORD *)(v744 + 16480);
                }
                sub_22EE8CA40((uint64_t *)v4, (uint64_t *)&v784, 1, (uint64_t)&v755[15 * v151 + 2]);
                if (*v750 != 6)
                {
                  if (v745)
                  {
                    v563 = *(_QWORD *)v750;
                    v787 = v750[2];
                    v786 = v563;
                    v788 = v755[15 * v151 + 2];
                    v564 = &v755[15 * v151];
                    v565 = sub_22E828D58(&v789, v564 + 3);
                    v566 = *((_OWORD *)v564 + 3);
                    v790 = *((_OWORD *)v564 + 2);
                    v791 = v566;
                    v567 = *((_OWORD *)v564 + 4);
                    v568 = *((_OWORD *)v564 + 5);
                    v569 = *((_OWORD *)v564 + 6);
                    v795 = v564[14];
                    v793 = v568;
                    v794 = v569;
                    v792 = v567;
                    LODWORD(v564) = v786 & 0xFFFFFFFD;
                    sub_22E80F94C(v565);
                    if ((_DWORD)v564)
                    {
                      sub_22E8FCA40((_QWORD *)v6, HIDWORD(v755[15 * v151]), 0x1A73u, 0, (uint64_t)v760);
                      sub_22E903BEC(v760);
                    }
                  }
                  v745 = *((_BYTE *)v4 + 264) != 0;
                  v141 = v752;
                }
                v149 = v751 - 1;
                ++v146;
                --v148;
                v145 = v743;
                if (v146 == v743)
                  break;
                continue;
              case 6:
                v183 = v784;
                if (v146)
                {
                  v6 = v754;
                  goto LABEL_548;
                }
                v802 = (void *)v784;
                v6 = v754;
                if (*(_DWORD *)(v754 + 10680) > *(_DWORD *)(v754 + 11956))
                  goto LABEL_548;
                v196 = *((unsigned int *)v141 + 30);
                if ((*(_BYTE *)(*(_QWORD *)(v754 + 72) + 1) & 1) == 0)
                  goto LABEL_369;
                v197 = 0;
                if (((1 << *((_DWORD *)v141 + 20)) & 0x7BFF0FF) != 0)
                  goto LABEL_496;
                if (((_WORD)v752[136] & 1) != 0)
                  goto LABEL_369;
                v317 = **v752;
                if ((v317 & 0x3F000) == 0x32000)
                  goto LABEL_369;
                v197 = 0;
                if (*((_DWORD *)v752 + 10) || !v752[6])
                  goto LABEL_496;
                if (sub_22E8AD5F4(*v752) != 2)
                  goto LABEL_369;
                v318 = *(_QWORD *)(v183 & 0xFFFFFFFFFFFFFFF0);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v318 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
                {
                  if ((v317 & 0xFE000000) != 0)
                  {
LABEL_369:
                    v197 = 0;
                    goto LABEL_496;
                  }
                }
                else
                {
                  v197 = 0;
                  if ((v317 & 0xFE000000) != 0 || (*(_DWORD *)(v318 + 16) & 0x400) == 0)
                  {
LABEL_496:
                    v263 = (v196 - 1);
                    if ((_DWORD)v196)
                    {
                      v264 = 120 * v196;
                      v265 = 1;
                      v266 = v197;
                      v267 = v755;
                      v268 = 120 * v263;
                      v141 = v752;
                      while (1)
                      {
                        v269 = 0;
                        v270 = 0;
                        switch(*(_DWORD *)v267)
                        {
                          case 0:
                            goto LABEL_501;
                          case 1:
                          case 4:
                          case 5:
                          case 7:
                            goto LABEL_507;
                          case 2:
                            v270 = (v267[5] != 0) & v266;
                            goto LABEL_506;
                          case 3:
                            if (*((_DWORD *)v752 + 20) == 13)
                            {
                              v4 = v747;
LABEL_548:
                              v253 = sub_22EF5F41C(*(_QWORD *)(v6 + 88), v183);
LABEL_549:
                              v252 = v253;
                              v784 = v253;
                              goto LABEL_1119;
                            }
                            v270 = 0;
LABEL_506:
                            v269 = v265;
LABEL_507:
                            v267 += 15;
                            v268 -= 120;
                            v266 = v270;
                            v265 = v269;
                            v264 -= 120;
                            if (!v264)
                            {
                              if (v270)
                                goto LABEL_509;
LABEL_537:
                              v290 = &v755[15 * v263];
                              v291 = *(void **)((char *)v290 + 4);
                              v274 = (int *)v290 + 1;
                              v276 = (unsigned int *)(v274 + 1);
                              v806 = v291;
                              goto LABEL_538;
                            }
                            break;
                          case 6:
                            if (!v268)
                              goto LABEL_502;
LABEL_501:
                            v269 = 0;
                            goto LABEL_503;
                          default:
LABEL_502:
                            v269 = v265;
LABEL_503:
                            v270 = v266;
                            goto LABEL_507;
                        }
                      }
                    }
                    LOBYTE(v269) = 1;
                    v141 = v752;
                    if (!v197)
                      goto LABEL_537;
LABEL_509:
                    if (*((_DWORD *)v141 + 10))
                      v271 = 0;
                    else
                      v271 = (uint64_t)v141[6];
                    *(_QWORD *)v815 = 0;
                    *(_QWORD *)&v815[8] = v816;
                    *(_QWORD *)&v815[16] = 0x800000000;
                    v820 = 0uLL;
                    *((_QWORD *)&v819 + 1) = 0;
                    v821 = v754;
                    v822 = v271;
                    v823 = 0;
                    sub_22EFC6D6C((uint64_t)&v824, v271);
                    v825 = 0;
                    v826 = 0;
                    v827 = 0;
                    v828[0] = 1;
                    *(_DWORD *)&v828[1] = 1;
                    sub_22EC56024((uint64_t)v815);
                    v272 = sub_22EC63520(v754, v815, *(_QWORD *)(v754 + 12888), 0, 0);
                    v828[1] = 0;
                    if (*((_QWORD *)&v819 + 1))
                    {
                      v591 = sub_22EC6CBD0(*((uint64_t *)&v819 + 1));
                      MEMORY[0x2348A0E9C](v591, 0x10E0C409F09D3C3);
                    }
                    if (*(_BYTE **)&v815[8] != v816)
                      free(*(void **)&v815[8]);
                    v273 = &v755[15 * v263];
                    v275 = *(void **)((char *)v273 + 4);
                    v274 = (int *)v273 + 1;
                    v276 = (unsigned int *)(v274 + 1);
                    v806 = v275;
                    if ((v272 & 1) != 0)
                    {
                      sub_22E8FCA40((_QWORD *)v754, *v274, 0x1ADDu, 0, (uint64_t)v815);
                      v277 = sub_22E8906A0((uint64_t)v815, (uint64_t *)&v806);
                      if (*((_DWORD *)v141 + 10))
                        v278 = 0;
                      else
                        v278 = v141[6];
                      *(_QWORD *)v809 = v278;
                      sub_22E8BAE44(v277, (uint64_t *)v809);
                      sub_22E903BEC((unsigned int *)v815);
                      v279 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v802 & 0xFFFFFFFFFFFFFFF0));
                      v4 = v747;
                      if (!v279
                        || (v280 = v279, (*(_DWORD *)(v279 + 28) & 0x7Fu) - 35 > 2)
                        || !*(_QWORD *)(v279 + 128)
                        && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v279 + 104) + 96), *(_QWORD *)(v279 + 104)),
                            !*(_QWORD *)(v280 + 128))
                        || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v280 + 104) + 96), *(_QWORD *)(v280 + 104)),
                            (**(_QWORD **)(v280 + 128) & 0x100000000000) == 0))
                      {
                        sub_22E8FCA40((_QWORD *)v754, *v274, 0x17A4u, 0, (uint64_t)v815);
                        v281 = *v274;
                        v809[20] = 0;
                        *(_QWORD *)&v809[12] = 0;
                        __p[9] = 0;
                        *(_WORD *)&__p[10] = 0;
                        *(_DWORD *)&__p[12] = 0;
                        *(_QWORD *)&__p[16] = 0x800000000000000;
                        *(_QWORD *)v809 = v281 | (v281 << 32);
                        v809[8] = 0;
                        strcpy(__p, " varname");
                        v811 = 0;
                        v282 = sub_22E890748((uint64_t)v815, v809);
                        v283 = sub_22E8901B8(v282, (uint64_t *)&v802);
                        if (*((_DWORD *)v141 + 10))
                          v284 = 0;
                        else
                          v284 = v141[6];
                        *(_QWORD *)__dst = v284;
                        sub_22E8BAE44(v283, (uint64_t *)__dst);
                        if ((__p[23] & 0x80000000) != 0)
                          operator delete(*(void **)__p);
                        sub_22E903BEC((unsigned int *)v815);
                      }
                      sub_22E8FCA40((_QWORD *)v754, *((_DWORD *)v141 + 18), 0x160Fu, 0, (uint64_t)v815);
                      v285 = *((unsigned int *)v141 + 18);
                      *(_QWORD *)&v809[12] = 0;
                      v809[20] = 0;
                      *(_QWORD *)&__p[8] = 0;
                      *(_QWORD *)&__p[16] = 0x100000000000000;
                      *(_QWORD *)__p = 40;
                      *(_QWORD *)v809 = v285 | (v285 << 32);
                      v809[8] = 0;
                      v811 = 0;
                      v286 = sub_22E890748((uint64_t)v815, v809);
                      v287 = sub_22F141A3C(*((unsigned int *)v141 + 19), 0, *(_QWORD **)(v754 + 112), *(_DWORD **)(v754 + 72));
                      *(_QWORD *)&__dst[12] = 0;
                      __dst[20] = 0;
                      *(_QWORD *)&v766 = 0x100000000000000;
                      v765 = 0x29uLL;
                      *(_DWORD *)__dst = v287;
                      *(_DWORD *)&__dst[4] = v287;
                      __dst[8] = 0;
                      BYTE8(v766) = 0;
                      sub_22E890748(v286, __dst);
                      if (SBYTE7(v766) < 0)
                        operator delete((void *)v765);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      sub_22E903BEC((unsigned int *)v815);
                      sub_22E8FCA40((_QWORD *)v754, *v274, 0x17B7u, 0, (uint64_t)v815);
                      v288 = *v274;
                      v809[20] = 0;
                      *(_QWORD *)&v809[12] = 0;
                      memset(__p, 0, sizeof(__p));
                      v811 = 0;
                      *(_QWORD *)v809 = v288 | (v288 << 32);
                      v809[8] = 1;
                      v289 = v815;
                    }
                    else
                    {
LABEL_538:
                      v292 = (unint64_t)v141[2];
                      v293 = v269 & (v292 != 0);
                      v4 = v747;
                      if (v293 == 1)
                      {
                        while (*(_QWORD *)(v292 + 16))
                        {
                          v292 = *(_QWORD *)(v292 + 8) & 0xFFFFFFFFFFFFFFF8;
                          if (!v292)
                            goto LABEL_541;
                        }
                        goto LABEL_547;
                      }
LABEL_541:
                      sub_22E8FCA40((_QWORD *)v754, *v274, 0x1B23u, 0, (uint64_t)v815);
                      v289 = (_BYTE *)sub_22E8906A0((uint64_t)v815, (uint64_t *)&v806);
                      v294 = *v274;
                      v809[20] = 0;
                      *(_QWORD *)&v809[12] = 0;
                      memset(__p, 0, sizeof(__p));
                      v811 = 0;
                      *(_QWORD *)v809 = v294 | (v294 << 32);
                      v809[8] = 1;
                    }
                    v295 = sub_22E890748((uint64_t)v289, v809);
                    v296 = *v276;
                    __dst[20] = 0;
                    *(_QWORD *)&__dst[12] = 0;
                    *(_QWORD *)&v766 = 0;
                    v765 = 0uLL;
                    BYTE8(v766) = 0;
                    *(_QWORD *)__dst = v296 | (v296 << 32);
                    __dst[8] = 1;
                    sub_22E890748(v295, __dst);
                    if (SBYTE7(v766) < 0)
                      operator delete((void *)v765);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    sub_22E903BEC((unsigned int *)v815);
LABEL_547:
                    v183 = v784;
                    goto LABEL_548;
                  }
                }
                v197 = *((_DWORD *)v752 + 420) == 0;
                goto LABEL_496;
              case 7:
                v6 = v754;
                v784 = sub_22F36C098(*(_QWORD *)(v754 + 88), v784, 1);
                sub_22EE8CA40((uint64_t *)v4, (uint64_t *)&v784, 0, (uint64_t)(*v141 + 3));
                goto LABEL_1118;
              default:
                v6 = v754;
                goto LABEL_1118;
            }
            break;
          }
        }
        if (v745)
        {
          sub_22E8FCA40((_QWORD *)v6, *(_DWORD *)(*((_QWORD *)v4 + 1) + 72), 0x1A73u, 0, (uint64_t)v759);
          sub_22E903BEC(v759);
        }
        v593 = *v746;
        if ((*v746 & 0x108) == 0 && (v746[1] & 0x200000000) == 0)
        {
          __dst[0] = 0;
          v594 = *((unsigned int *)v141 + 30);
          if ((_DWORD)v594)
          {
            v595 = 120 * v594;
            v596 = (uint64_t)(v752[14] + 4);
            do
            {
              v597 = *(_DWORD *)(v596 - 32);
              if (v597 == 3)
              {
                if ((*(_WORD *)v596 & 1) == 0
                  && !(*(_WORD *)v596 & 2 | *(_DWORD *)(v596 + 16))
                  && *(_DWORD *)(v596 + 4))
                {
                  sub_22E8FCA40((_QWORD *)v6, *(_DWORD *)(v596 - 28), 0x1B5Bu, 0, (uint64_t)v815);
                  v598 = sub_22E894E38((uint64_t)v815, __dst);
                  v599 = *(unsigned int *)(v596 + 12);
                  v809[20] = 0;
                  *(_QWORD *)&v809[12] = 0;
                  *(_QWORD *)&__p[8] = 0;
                  *(_QWORD *)&__p[16] = 0x400000000000000;
                  *(_QWORD *)__p = 1684631414;
                  *(_QWORD *)v809 = v599 | (v599 << 32);
                  v809[8] = 0;
                  v811 = 0;
                  sub_22E890748(v598, v809);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  sub_22E903BEC((unsigned int *)v815);
                }
                __dst[0] = 0;
              }
              else if (v597 == 4)
              {
                __dst[0] = 1;
              }
              v596 += 120;
              v595 -= 120;
            }
            while (v595);
            v593 = *v746;
          }
        }
        if ((v593 & 0x100) != 0)
        {
          v600 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
          v601 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v600 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if ((v601 - 25) <= 1)
          {
            if (*(_BYTE *)(v600 + 16) != 26)
            {
              if (v601 == 26)
                v600 = sub_22F10CF48(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0));
              else
                v600 = 0;
            }
            if (*((_DWORD *)v752 + 10) == 9)
            {
              v602 = 2;
              goto LABEL_1222;
            }
            if (v752[2])
            {
              v603 = sub_22E958204(v6, (uint64_t)(v752 + 1), 0);
              if (!v603 || (*(_WORD *)(v603 + 8) & 0x7Eu) - 34 < 4)
              {
                if ((v753 & 1) == 0)
                {
                  v602 = 1;
                  goto LABEL_1230;
                }
LABEL_1224:
                v605 = v737;
                if ((**v752 & 7) != 3)
                  v605 = 1;
                v602 = 1;
                if ((v605 & 1) != 0)
                  goto LABEL_1230;
LABEL_1229:
                if (((_DWORD)v752[10] & 0xFFFFFFFE) == 0x16)
                  goto LABEL_1230;
                v679 = *((_DWORD *)v752 + 18);
                v680 = *((unsigned int *)v752 + 30);
                if ((_DWORD)v680)
                {
                  v684 = v752[14] + 10;
                  while (1)
                  {
                    v685 = *((_DWORD *)v684 - 20);
                    if (v685 != 6)
                      break;
                    v684 += 15;
                    if (!--v680)
                      goto LABEL_1388;
                  }
                  if (((1 << v685) & 0xB7) != 0)
                  {
                    v683 = 0;
                    v681 = 0;
                    v682 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v809 = &v809[16];
                    *(_QWORD *)&v809[8] = 0x400000000;
                    if (*((_DWORD *)v684 - 6))
                    {
                      *(_DWORD *)&v809[16] = *((_DWORD *)v684 - 6);
                      *(_DWORD *)&v809[8] = 1;
                    }
                    if (sub_22EAE7478((uint64_t)(v684 - 6)))
                    {
                      v711 = *v684;
                      *(_QWORD *)v815 = v809;
                      sub_22E8AD29C(v711, (uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))sub_22EE935DC, (uint64_t)v815);
                    }
                    if (sub_22EAE7478((uint64_t)(v684 - 6)))
                    {
                      v713 = *v684 + 32;
                      v712 = *(_QWORD *)v713;
                      if ((*(_QWORD *)v713 & 4) != 0)
                      {
                        v715 = v712 & 0xFFFFFFFFFFFFFFF8;
                        v713 = *(_QWORD *)v715;
                        v714 = *(_QWORD *)v715 + 8 * *(unsigned int *)(v715 + 8);
                      }
                      else
                      {
                        v714 = v713 + 8 * (v712 > 7);
                      }
                      if (v713 == v714)
                      {
                        v683 = 0;
                        v716 = 0;
                      }
                      else
                      {
                        do
                        {
                          v717 = *(_QWORD *)v713;
                          v718 = *(_DWORD *)(*(_QWORD *)v713 + 16);
                          v719 = *(unsigned int *)&v809[8];
                          if (*(unsigned int *)&v809[8] >= (unint64_t)*(unsigned int *)&v809[12])
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v719 = *(unsigned int *)&v809[8];
                          }
                          *(_DWORD *)(*(_QWORD *)v809 + 4 * v719) = v718;
                          ++*(_DWORD *)&v809[8];
                          v720 = *(unsigned __int16 *)(*(_QWORD *)(v717 + 72) + 8);
                          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v747 + 72) + 60) & 1) != 0)
                          {
                            v721 = *(unsigned __int16 *)(v717 + 28) - 341;
                            if (v721 >= 0xE)
                              v716 = 0;
                            else
                              v716 = dword_22F49B498[(__int16)v721];
                          }
                          else
                          {
                            v716 = sub_22E826B78(v717);
                          }
                          v713 += 8;
                        }
                        while (v713 != v714);
                        v683 = v720 == 234;
                      }
                      sub_22E4913B4(v600, (uint64_t)v815);
                      if (*(_DWORD *)&v815[4] <= 0x7FFu && v716)
                        *(_DWORD *)&v815[4] |= v716 << 11;
                      v722 = sub_22EF63D8C(v744, *(_QWORD *)(v600 + 24), (uint64_t *)(v600 + 40), (unsigned __int16)(*(_QWORD *)(v600 + 16) >> 38), (__int128 *)v815, 0);
                      v600 = *(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF0);
                      if (v600)
                        v723 = *(_BYTE *)(v600 + 16) == 26;
                      else
                        v723 = 0;
                      if (!v723)
                      {
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v600 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                          v600 = sub_22F10CF48(*(_QWORD *)(v722 & 0xFFFFFFFFFFFFFFF0));
                        else
                          v600 = 0;
                      }
                      v4 = v747;
                      v6 = v754;
                    }
                    else
                    {
                      v683 = 0;
                    }
                    v724 = *(_BYTE **)v809;
                    if (*(_DWORD *)&v809[8])
                    {
                      *(_QWORD *)v815 = *(_QWORD *)(v6 + 112);
                      sub_22EE93638(*(uint64_t *)v809, (int *)(*(_QWORD *)v809 + 4 * *(unsigned int *)&v809[8]), (_QWORD **)v815, 126 - 2 * __clz(*(unsigned int *)&v809[8]), 1);
                      v724 = *(_BYTE **)v809;
                      v679 = **(_DWORD **)v809;
                      v682 = (unint64_t)*(unsigned int *)(*(_QWORD *)v809 + 4 * *(unsigned int *)&v809[8] - 4) << 32;
                      v681 = **(_DWORD **)v809;
                    }
                    else
                    {
                      v681 = 0;
                      v682 = 0;
                    }
                    if (v724 != &v809[16])
                      free(v724);
                  }
                }
                else
                {
LABEL_1388:
                  v681 = 0;
                  v682 = 0;
                  v683 = 0;
                }
                sub_22E8FCA40((_QWORD *)v6, v679, 0xE5Fu, 0, (uint64_t)v815);
                if ((_BYTE)v819)
                {
                  v695 = *(unsigned __int8 **)&v816[8];
                  if (!*(_QWORD *)&v816[8])
                  {
                    v695 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v816[16]);
                    *(_QWORD *)&v816[8] = v695;
                  }
                  v693 = v602;
                  v695[*v695 + 1] = 2;
                  v694 = *(_BYTE **)&v816[8];
LABEL_1405:
                  v696 = *v694;
                  *v694 = v696 + 1;
                  *(_QWORD *)&v694[8 * v696 + 16] = v693;
                }
                else if (BYTE12(v819))
                {
                  v686 = *(_QWORD *)&v815[16];
                  v687 = (uint64_t *)(*(_QWORD *)v815 + 12784);
                  if (*(_QWORD *)&v815[16])
                    v686 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v815[16] + 32))(*(_QWORD *)&v815[16]);
                  *(_QWORD *)v809 = v686;
                  v688 = sub_22F2F1D6C(v687, (uint64_t *)v809);
                  v689 = v688[1] + 32 * DWORD2(v819);
                  v692 = *(unsigned __int8 **)(v689 + 8);
                  v691 = (_QWORD *)(v689 + 8);
                  v690 = v692;
                  if (!v692)
                  {
                    v690 = (unsigned __int8 *)sub_22E3B8AAC(v691[1]);
                    *v691 = v690;
                  }
                  v693 = v602;
                  v690[*v690 + 1] = 2;
                  v694 = (_BYTE *)*v691;
                  goto LABEL_1405;
                }
                v697 = *((unsigned int *)v752 + 30);
                if ((_DWORD)v697)
                {
                  v699 = 0;
                  v700 = (int *)v752[14];
                  v698 = 1;
                  while (1)
                  {
                    v702 = *v700;
                    v700 += 30;
                    v701 = v702;
                    if (v702 != 6)
                      break;
                    v698 = ++v699 < v697;
                    if (v697 == v699)
                      goto LABEL_1413;
                  }
                  if (((1 << v701) & 0xB7) != 0)
                  {
LABEL_1413:
                    LOBYTE(v697) = 0;
                    goto LABEL_1414;
                  }
                  LOBYTE(v697) = 1;
                }
                else
                {
                  v698 = 0;
                }
LABEL_1414:
                LOBYTE(v802) = v698 & v697;
                v703 = sub_22E894E38((uint64_t)v815, (unsigned __int8 *)&v802);
                v704 = sub_22E8901B8(v703, (uint64_t *)&v784);
                sub_22EE7DC78(v600, v683, (uint64_t)__dst);
                v705 = sub_22F2F3734(v704, (void **)__dst);
                v809[20] = 0;
                *(_QWORD *)&v809[12] = 0;
                memset(__p, 0, sizeof(__p));
                v811 = 0;
                *(_QWORD *)v809 = v682 | v681;
                v809[8] = 1;
                sub_22E890748(v705, v809);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                sub_22E903BEC((unsigned int *)v815);
                sub_22E4913B4(v600, (uint64_t)v815);
                *(_DWORD *)&v815[4] = *(_WORD *)&v815[4] & 0x7F8;
                *(_DWORD *)&v815[12] = 0;
                v706 = sub_22EF63D8C(v744, *(_QWORD *)(v600 + 24), (uint64_t *)(v600 + 40), (unsigned __int16)(*(_QWORD *)(v600 + 16) >> 38), (__int128 *)v815, 0);
                v784 = v706;
                v707 = *((unsigned int *)v752 + 30);
                if ((_DWORD)v707)
                {
                  v708 = v706;
                  v709 = 0;
                  v710 = 120 * v707;
                  do
                  {
                    if (LODWORD(v752[14][v709 / 8]) != 6)
                      break;
                    v709 += 120;
                    v708 = sub_22EF5F41C(*(_QWORD *)(v6 + 88), v708);
                    v784 = v708;
                  }
                  while (v710 != v709);
                }
                goto LABEL_1230;
              }
LABEL_1221:
              v602 = 0;
            }
            else
            {
              v604 = *((_DWORD *)v752 + 20);
              if (v604 != 17 && v604 != 7)
                goto LABEL_1221;
              v602 = (*((_BYTE *)*v752 + 4) & 0x10) == 0;
            }
LABEL_1222:
            if ((v753 & 1) != 0)
            {
              if (v602 == 1)
                goto LABEL_1224;
              if ((v737 & 1) == 0)
                goto LABEL_1229;
            }
LABEL_1230:
            if ((v746[13] & 0x20) != 0 && !v732 && v602 == 1 && (**v752 & 7) != 3)
            {
              v606 = (*((_DWORD *)v752 + 19) + 1);
              sub_22E8FCA40((_QWORD *)v6, *((_DWORD *)v752 + 19) + 1, 0x1A49u, 0, (uint64_t)v815);
              v809[20] = 0;
              *(_QWORD *)&v809[12] = 0;
              *(_QWORD *)v809 = v606 | (v606 << 32);
              v809[8] = 0;
              memset(&__p[6], 0, 17);
              qmemcpy(__p, "thread", 6);
              __p[23] = 6;
              v811 = 0;
              sub_22E890748((uint64_t)v815, v809);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              sub_22E903BEC((unsigned int *)v815);
            }
          }
        }
        v607 = v752;
        sub_22EE8CA40((uint64_t *)v4, (uint64_t *)&v784, 2, (uint64_t)(v752 + 137));
        v608 = v784;
        v609 = v4[16];
        if ((_DWORD)v609)
        {
          v610 = (uint64_t *)*((_QWORD *)v4 + 7);
          v611 = 8 * v609;
          do
          {
            v612 = *v610++;
            sub_22EE91BF4(*(_QWORD **)v4, v612, v608);
            v611 -= 8;
          }
          while (v611);
          v608 = v784;
          v607 = v752;
        }
        if ((**v607 & 0x6000000000) == 0x2000000000
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v608 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) != 0x28
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v608 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFF800FF) != 0x528000B
          && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v608 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
           - 25 >= 2)
        {
          v608 |= 1uLL;
          v784 = v608;
        }
        if (((v608 & 4) != 0 || (*(_BYTE *)((v608 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
          && (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 0x10) != 0)
        {
          v614 = *((_DWORD *)v607 + 20);
          if (v614 == 18 || v614 == 1)
          {
            sub_22E8FCA40((_QWORD *)v6, *((_DWORD *)v607 + 16), 0x196Cu, 0, (uint64_t)v815);
            sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
            sub_22E903BEC((unsigned int *)v815);
          }
        }
        v615 = *((_DWORD *)v607 + 421);
        if (v615)
        {
          v616 = *((_DWORD *)v607 + 20);
          if (v616 <= 0x1A)
          {
            v617 = 1 << v616;
            if ((v617 & 0x3FBEFFD) != 0)
            {
              sub_22E8FCA40((_QWORD *)v6, *((_DWORD *)v607 + 421), 0xCD9u, 0, (uint64_t)v757);
              v618 = (unsigned int *)v757;
              goto LABEL_1258;
            }
            if ((v617 & 0x4040002) != 0)
            {
              v670 = v784;
              v671 = *(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v671 + 17) & 1) != 0
                || (*((_BYTE *)v746 + 1) & 0x10) != 0
                && (v815[0] = 0, (v672 = sub_22F110500((uint64_t)v815, v671)) != 0)
                && *(_BYTE *)(v672 + 16) == 14)
              {
                v673 = v744;
                v674 = v670;
                goto LABEL_1386;
              }
              sub_22E8FCA40((_QWORD *)v6, v615, 0xDBEu, 0, (uint64_t)v815);
              v676 = sub_22E8901B8((uint64_t)v815, (uint64_t *)&v784);
              *(_QWORD *)v809 = v607[9];
              sub_22E8906A0(v676, (uint64_t *)v809);
              v618 = (unsigned int *)v815;
LABEL_1258:
              sub_22E903BEC(v618);
              *((_DWORD *)v607 + 421) = 0;
            }
            else
            {
              v674 = v784;
              if ((*(_BYTE *)(*(_QWORD *)(v784 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
              {
                v673 = v744;
LABEL_1386:
                v784 = sub_22EF663B4(v673, v674, 0);
              }
              else
              {
                if ((*v746 & 0x200) != 0)
                  v677 = 129;
                else
                  v677 = 93;
                sub_22E8FCA40((_QWORD *)v6, *((_DWORD *)v607 + 421), v677, 0, (uint64_t)v758);
                sub_22E903BEC(v758);
              }
            }
          }
        }
        if (((_WORD)v607[136] & 1) != 0)
        {
          v619 = v784;
          return sub_22EF579A8(v744, v619, 0);
        }
        v619 = v784;
        if ((**v607 & 0x3F000) == 0x32000)
          return sub_22EF579A8(v744, v619, 0);
        v620 = (_QWORD *)*((_QWORD *)v4 + 1);
        v756 = *(_QWORD *)v4;
        v621 = *(_QWORD *)(*(_QWORD *)v4 + 88);
        v622 = sub_22F11598C(v784);
        v623 = (_QWORD *)sub_22E3CD3D4(v621 + 2032, v622 + 8, 3);
        *v623 = v619;
        v625 = (uint64_t)(v623 + 1);
        v626 = v619 & 0xFFFFFFFFFFFFFFF0;
        if ((v619 & 0xF) != 0)
        {
          v619 = *(_QWORD *)v626;
          if ((*(_QWORD *)v626 & 0xFFFFFFFFFFFFFFF0) != 0)
            v675 = *(_QWORD *)((char *)&unk_22F49B4F0
                             + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v626 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 16) << 56) >> 53));
          else
            v675 = 1;
          v625 = (v625 + v675 - 1) & -v675;
        }
        if (*(_BYTE *)(*(_QWORD *)v626 + 16) == 36)
        {
          *(_DWORD *)v625 = *((_DWORD *)v620 + 421);
          v627 = sub_22F115B7C(v619);
          v619 = v627;
          v625 = v628;
          if ((v627 & 0xF) != 0)
          {
            v619 = *(_QWORD *)(v627 & 0xFFFFFFFFFFFFFFF0);
            if ((v619 & 0xFFFFFFFFFFFFFFF0) != 0)
              v678 = *(_QWORD *)((char *)&unk_22F49B4F0
                               + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 16) << 56) >> 53));
            else
              v678 = 1;
            v625 = (v628 + v678 - 1) & -v678;
          }
        }
        if (*((_DWORD *)v620 + 30))
        {
          if ((v619 & 0xF) != 0)
            goto LABEL_1266;
          if (*(_BYTE *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) != 6 || !v619)
            goto LABEL_1282;
          v629 = (int *)v620[14];
          v630 = *v629;
          v631 = v629[12];
          if (v630)
            v631 = 0;
          *(_DWORD *)(v625 + 4) = 0;
          *(_DWORD *)(v625 + 8) = 0;
          *(_DWORD *)v625 = v631;
          v619 = *(_QWORD *)(v619 + 32);
          if (v619 >= 0x10 && (v619 & 0xF) == 0)
          {
            v632 = *(_QWORD *)((char *)&unk_22F49B4F0
                             + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 16) << 56) >> 53));
            v625 = (v625 + v632 + 11) & -v632;
            goto LABEL_1275;
          }
          if ((v619 & 0xF) == 0)
          {
            v625 += 12;
            goto LABEL_1275;
          }
          v619 = *(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0);
          v665 = (v619 & 0xFFFFFFFFFFFFFFF0) != 0
               ? *(_QWORD *)((char *)&unk_22F49B4F0
                           + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                          + 16) << 56) >> 53))
               : 1;
          v625 = (v625 + v665 + 11) & -v665;
          if ((v619 & 0xF) == 0)
          {
LABEL_1282:
            do
            {
LABEL_1275:
              if (!v619 || *(_BYTE *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) != 28)
                break;
              *(_QWORD *)v815 = 0;
              v633 = sub_22F24C318(*((_QWORD *)v4 + 30), v4[64], v619, v815);
              v634 = *(_QWORD *)v815;
              if (!v633)
                v634 = *((_QWORD *)v4 + 30) + 16 * v4[64];
              *(_DWORD *)v625 = *(_DWORD *)(v634 + 8);
              v619 = *(_QWORD *)(v619 + 24);
              v635 = v619 & 0xF;
              if (v619 < 0x10 || (v619 & 0xF) != 0)
              {
                if ((v619 & 0xF) != 0)
                {
                  v619 = *(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0);
                  v637 = (v619 & 0xFFFFFFFFFFFFFFF0) != 0
                       ? *(_QWORD *)((char *)&unk_22F49B4F0
                                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 16) << 56) >> 53))
                       : 1;
                  v625 = (v625 + v637 + 3) & -v637;
                  v635 = v619 & 0xF;
                }
                else
                {
                  v625 += 4;
                }
              }
              else
              {
                v636 = *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53));
                v625 = (v625 + v636 + 3) & -v636;
              }
            }
            while (!v635);
          }
LABEL_1266:
          if ((v619 & 0xF) == 0)
          {
            do
            {
              if (!v619 || *(_BYTE *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) != 7)
                break;
              sub_22EE941A0(v619, (_QWORD *)v625, (uint64_t)v4, v624);
              v619 = *(_QWORD *)(v619 + 32);
              v639 = v619 & 0xF;
              if (v619 >= 0x10 && v639 == 0)
              {
                v639 = 0;
                v641 = *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53));
                v625 = (v625 + v641 + 7) & -v641;
              }
              else if ((v619 & 0xF) != 0)
              {
                v619 = *(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0);
                v638 = (v619 & 0xFFFFFFFFFFFFFFF0) != 0
                     ? *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53))
                     : 1;
                v625 = (v625 + v638 + 7) & -v638;
                v639 = v619 & 0xF;
              }
              else
              {
                v625 += 8;
              }
            }
            while (!v639);
          }
          if ((v619 & 0xF) == 0)
          {
            do
            {
              if (!v619 || *(_BYTE *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) != 16)
                break;
              v644 = v620[14];
              v647 = *(_QWORD *)(v644 + 24);
              v645 = (uint64_t *)(v644 + 24);
              v646 = v647;
              if ((v647 & 4) != 0)
              {
                v649 = v646 & 0xFFFFFFFFFFFFFFF8;
                v645 = *(uint64_t **)v649;
                v648 = *(_QWORD *)v649 + 8 * *(unsigned int *)(v649 + 8);
              }
              else
              {
                v648 = (uint64_t)&v645[v646 > 7];
              }
              while (1)
              {
                if (v645 == (uint64_t *)v648)
                  goto LABEL_1322;
                v650 = *v645;
                if (*(_WORD *)(*(_QWORD *)(*v645 + 72) + 8) == 14)
                  break;
                ++v645;
              }
              *(_DWORD *)(v625 + 16) = *(_DWORD *)(v650 + 16);
              *(_QWORD *)v625 = *(_QWORD *)(v650 + 80) & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v625 + 8) = 0;
LABEL_1322:
              v619 = *(_QWORD *)(v619 + 48);
              v651 = v625 + 23;
              v643 = v619 & 0xF;
              if (v619 >= 0x10 && v643 == 0)
              {
                v643 = 0;
                v653 = *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53));
                v625 = (v651 + v653) & -v653;
              }
              else if ((v619 & 0xF) != 0)
              {
                v619 = *(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0);
                v642 = (v619 & 0xFFFFFFFFFFFFFFF0) != 0
                     ? *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53))
                     : 1;
                v625 = (v651 + v642) & -v642;
                v643 = v619 & 0xF;
              }
              else
              {
                v625 += 24;
              }
            }
            while (!v643);
          }
          if ((v619 & 0xF) == 0)
          {
            if (v619
              && *(unsigned __int8 *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) - 31 >= 0xFFFFFFFE)
            {
              v654 = v620[14];
              v657 = *(_QWORD *)(v654 + 24);
              v655 = (uint64_t *)(v654 + 24);
              v656 = v657;
              if ((v657 & 4) != 0)
              {
                v659 = v656 & 0xFFFFFFFFFFFFFFF8;
                v655 = *(uint64_t **)v659;
                v658 = *(_QWORD *)v659 + 8 * *(unsigned int *)(v659 + 8);
              }
              else
              {
                v658 = (uint64_t)&v655[v656 > 7];
              }
              while (1)
              {
                if (v655 == (uint64_t *)v658)
                  goto LABEL_1344;
                v660 = *v655;
                if (*(_WORD *)(*(_QWORD *)(*v655 + 72) + 8) == 142)
                  break;
                ++v655;
              }
              *(_DWORD *)v625 = *(_DWORD *)(v660 + 16);
              *(_QWORD *)(v625 + 16) = *(_QWORD *)(v660 + 80) & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v625 + 24) = *(_QWORD *)(v660 + 88) & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v625 + 4) = 0;
            }
            do
            {
LABEL_1344:
              if (!v619 || (*(_DWORD *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0)
                break;
              v619 = *(_QWORD *)(v619 + 32);
              v662 = v619 & 0xF;
              if (v619 >= 0x10 && v662 == 0)
              {
                v662 = 0;
                v664 = *(_QWORD *)((char *)&unk_22F49B4F0
                                 + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                + 16) << 56) >> 53));
                v625 = (v625 + v664 - 1) & -v664;
              }
              else if ((v619 & 0xF) != 0)
              {
                v619 = *(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0);
                if ((v619 & 0xFFFFFFFFFFFFFFF0) != 0)
                  v661 = *(_QWORD *)((char *)&unk_22F49B4F0
                                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v619 & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 16) << 56) >> 53));
                else
                  v661 = 1;
                v625 = (v625 + v661 - 1) & -v661;
                v662 = v619 & 0xF;
              }
            }
            while (!v662);
          }
          __asm { BR              X9 }
        }
        if (v731)
        {
          v667 = sub_22F11598C(*v731);
          memcpy((void *)v625, v731 + 1, v667);
        }
        else
        {
          v668 = *(_QWORD *)(v756 + 88);
          v669 = *v620;
          *(_QWORD *)v815 = v756;
          *(_QWORD *)&v815[8] = v668;
          *(_QWORD *)&v815[16] = v4;
          *(_QWORD *)v816 = v669;
          sub_22EE942FC((uint64_t)v815, v619);
        }
        return v623;
      case 6:
        if (!v18)
          goto LABEL_57;
        v34 = 4;
        goto LABEL_77;
      default:
        if (v18)
          v30 = 3179;
        else
          v30 = 3156;
        goto LABEL_78;
    }
  }
}

uint64_t sub_22EE89CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  if (!*(_BYTE *)(a1 + 20))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = *(_QWORD *)(v2 + 32);
    if ((v3 & 4) != 0)
    {
      if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
        *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
    }
    else
    {
      *(_QWORD *)(v2 + 32) = 0;
    }
    v4 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a1 + 24);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        sub_22E828580(**(_QWORD **)(a1 + 8) + 32, v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 240), (void *)(16 * *(unsigned int *)(a1 + 256)));
  v8 = *(void **)(a1 + 88);
  if (v8 != (void *)(a1 + 104))
    free(v8);
  v9 = *(void **)(a1 + 56);
  if (v9 != (void *)(a1 + 72))
    free(v9);
  v10 = *(void **)(a1 + 24);
  if (v10 != (void *)(a1 + 40))
    free(v10);
  return a1;
}

_QWORD *sub_22EE89D90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  _QWORD *v27;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[4];
  _QWORD v38[4];
  _BYTE v39[136];
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v31 = a1;
  v32 = a2;
  v33 = *(_DWORD *)(a2 + 120);
  v34 = 1;
  v35 = v37;
  v36 = 0x200000000;
  v37[2] = v38;
  v37[3] = 0x200000000;
  v38[2] = v39;
  v38[3] = 0x800000000;
  v39[128] = 1;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v30 = 0;
  v10 = sub_22EE8184C((uint64_t)&v31, &v30, a3, a4, a5, a6, a7, a8);
  v29 = v10;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) != 0)
  {
    v11 = v10;
    v12 = sub_22F36D988(*(_QWORD *)(a1 + 88), a3);
    if (v12)
    {
      v13 = v32;
      v14 = *(unsigned int *)(v32 + 120);
      if ((_DWORD)v14)
      {
        v15 = v12;
        v16 = 0;
        v17 = 0;
        v18 = v31;
        v19 = -1;
        v20 = *(unsigned int **)(v32 + 112);
        do
        {
          v21 = *v20;
          v20 += 30;
          v22 = v21 - 3;
          if (v21 >= 3)
          {
            switch(v22)
            {
              case 0u:
              case 2u:
              case 4u:
                goto LABEL_19;
              case 1u:
                if (v19 == -1)
                  goto LABEL_19;
                v23 = v31;
                v24 = v15;
                break;
              default:
                goto LABEL_7;
            }
            goto LABEL_12;
          }
          v17 |= v19 != -1;
          v19 = v16;
LABEL_7:
          ++v16;
        }
        while (v14 != v16);
        if (v19 != -1)
        {
          if (*(_DWORD *)(*(_QWORD *)(v32 + 112) + 120 * v19)
            || (v25 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0),
                v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
                v26 == 10)
            || v26 == 32
            || sub_22F115064(*v25))
          {
            sub_22EE95B04(v18, (uint64_t *)&v29, v15);
            goto LABEL_19;
          }
          if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
               - 33 < 2) & v17) != 1)
            goto LABEL_19;
          v23 = v31;
          v13 = v32;
          v24 = v15;
          LODWORD(v16) = v19;
LABEL_12:
          sub_22EE92668(v23, v13, v24, v16);
        }
      }
    }
  }
LABEL_19:
  v27 = sub_22EE83D58((int *)&v31, v29, v30);
  sub_22EE89CC0((uint64_t)&v31);
  return v27;
}

unint64_t sub_22EE89FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  int v18;
  unint64_t result;
  unint64_t v20;

  v10 = sub_22EE8156C(a1, a3, a3, a4, a5, a6, a7, a8);
  if ((*(_WORD *)(a3 + 1088) & 1) != 0)
    return 0;
  if ((**(_QWORD **)a3 & 0x3F000) == 0x32000)
    return 0;
  v11 = v10;
  v12 = *v10;
  v13 = *(_DWORD *)(a3 + 80);
  v14 = v13 > 0x19;
  v15 = (1 << v13) & 0x3000008;
  if (v14 || v15 == 0)
    sub_22EA7DCEC((unsigned int *)a1, a3);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    sub_22EAA474C(a1, a3);
  v17 = sub_22E3CD3D4(a1 + 8360, 32, 4);
  v18 = *(_DWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16);
  result = v17 & 0xFFFFFFFFFFFFFFF0;
  if (v12 >= 0x10)
    v20 = v12;
  else
    v20 = v17 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v17 = v17;
  *(_QWORD *)(v17 + 8) = v20;
  *(_DWORD *)(v17 + 16) = v18 & 0x1F00 | *(_DWORD *)(v17 + 16) & 0xFFF80000 | 0x39;
  *(_QWORD *)(v17 + 24) = v11;
  return result;
}

BOOL sub_22EE8A0C4(_QWORD *a1, int a2, int a3, int a4)
{
  _BOOL8 v4;
  unsigned int *v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE v9[96];
  _BYTE v10[96];

  if (!a2)
    return 0;
  v4 = a2 != a3;
  if (a2 == a3)
  {
    v5 = (unsigned int *)v9;
    v6 = v9;
    v7 = 6249;
  }
  else
  {
    v5 = (unsigned int *)v10;
    v6 = v10;
    v7 = 2778;
  }
  sub_22E8FCA40(a1, a4, v7, 0, (uint64_t)v6);
  sub_22E903BEC(v5);
  return v4;
}

uint64_t sub_22EE8A134(_QWORD *a1, _DWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  _BOOL8 v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  char v27;
  unsigned int v28[24];
  _DWORD *v29;
  unsigned int v30;
  char v31;
  char v32;

  if ((*(_BYTE *)(a3 + 2) & 1) != 0)
  {
    *a2 = 0;
    return 1;
  }
  sub_22F00905C(a3, a1[11], 0, (uint64_t)&v29);
  if (v32)
  {
    LODWORD(v8) = v30;
    if (v31)
      goto LABEL_4;
    v12 = &v29[2 * ((v30 - 1) >> 6)];
    if (v30 < 0x41)
      v12 = &v29;
    if (((*v12 >> (v30 - 1)) & 1) == 0)
    {
      v31 = 1;
LABEL_4:
      v26 = v30;
      if (v30 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v25);
        v8 = v26;
        v27 = 1;
        if (v26 > 0x40)
        {
          *v25 = 2097124;
          bzero(v25 + 1, (((unint64_t)(v8 + 63) >> 3) - 8) & 0xFFFFFFF8);
LABEL_9:
          if (v31)
            v10 = llvm::APInt::compare((llvm::APInt *)&v29, (const llvm::APInt *)&v25);
          else
            v10 = llvm::APInt::compareSigned((llvm::APInt *)&v29, (const llvm::APInt *)&v25);
          v11 = v10 < 1;
          if (v10 < 1)
          {
            v18 = &v29;
            if (v30 >= 0x41)
              v18 = v29;
            *a2 = *v18 + 27;
          }
          else
          {
            sub_22E8FCA40(a1, a4, 0xADCu, 0, (uint64_t)v28);
            v15 = &v25;
            if (v26 >= 0x41)
              v15 = v25;
            v24 = *v15;
            v16 = sub_22E89519C((uint64_t)v28, &v24);
            sub_22F0D4E74(a3);
            v23 = v17;
            sub_22E8906A0(v16, &v23);
            sub_22E903BEC(v28);
          }
          if (v26 >= 0x41 && v25)
            MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
          goto LABEL_30;
        }
      }
      else
      {
        v27 = 1;
      }
      if ((_DWORD)v8)
        v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
      else
        LODWORD(v9) = 0;
      v25 = (_QWORD *)(v9 & 0x1FFFE4);
      goto LABEL_9;
    }
    sub_22E8FCA40(a1, a4, 0xADBu, 0, (uint64_t)v28);
    sub_22F0D4E74(a3);
    v25 = v13;
    v14 = v28;
  }
  else
  {
    sub_22E8FCA40(a1, a4, 0xAE5u, 0, (uint64_t)v28);
    v19 = sub_22F2F30F4((uint64_t)v28, (uint64_t)"'address_space'");
    LODWORD(v23) = 1;
    v20 = sub_22E8900C4(v19, (int *)&v23);
    sub_22F0D4E74(a3);
    v25 = v21;
    v14 = (unsigned int *)v20;
  }
  sub_22E8906A0((uint64_t)v14, (uint64_t *)&v25);
  sub_22E903BEC(v28);
  v11 = 0;
LABEL_30:
  if (v32 && v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  return v11;
}

uint64_t sub_22EE8A418(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, unsigned int a6, int a7, int a8, char a9)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *i;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 v52;
  unsigned int v53;
  __int16 v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  void *__p[2];
  uint64_t v62;
  char v63;
  unsigned int v64[24];
  __int128 __dst;
  uint64_t v66;

  if (a2)
    sub_22EE92874(a1, a6);
  v53 = a6;
  v15 = *a4;
  v16 = *(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_DWORD *)(v16 + 16);
  if (v16)
    v18 = *(_DWORD *)(v16 + 16) == 7;
  else
    v18 = 0;
  if (!v18)
  {
    v19 = *a4;
LABEL_19:
    v23 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v24 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    for (i = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF0); ; i = (uint64_t *)(*(_QWORD *)(v29 + 40) & 0xFFFFFFFFFFFFFFF0))
    {
      v29 = sub_22F10D774(*i);
      if (!v29)
        goto LABEL_28;
      v28 = (*(_DWORD *)(v29 + 16) >> 19) - 33;
      if (v28 < 4)
        break;
    }
    if (a2)
    {
      v48 = 0x3010200u >> (8 * v28);
      if (a5 != v48)
      {
        sub_22E8FCA40(a1, v53, 0x30u, 0, (uint64_t)v64);
        LOBYTE(v57) = a5;
        BYTE1(v57) = a7;
        v49 = sub_22F2F3884((uint64_t)v64, (__int16 *)&v57);
        LOWORD(__dst) = v48;
        sub_22F2F3884(v49, (__int16 *)&__dst);
        sub_22E903BEC(v64);
        v50 = sub_22F10D4DC(*v23);
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 24);
          v57 = *(_QWORD *)((*(_QWORD *)(v51 + 80) & 0xFFFFFFFFFFFFFFF8)
                          + ((2 * *(_QWORD *)(v51 + 80)) & 8));
          v52 = sub_22F114F34(&v57);
          if (v52 >= 0x100u && v48 == v52)
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v51 + 24), 0x16EBu, 0, (uint64_t)v64);
            LOWORD(__dst) = v48;
            v26 = v64;
            goto LABEL_21;
          }
        }
        return 1;
      }
    }
LABEL_28:
    sub_22F114E70(v24);
    if ((v30 & 1) == 0
      && (!a8 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 >= 4))
    {
      if (!a2)
        return 1;
      sub_22E8FCA40(a1, v53, 0xFE7u, 0, (uint64_t)v64);
      LOBYTE(v57) = a5;
      BYTE1(v57) = a7;
      v47 = sub_22F2F3884((uint64_t)v64, (__int16 *)&v57);
      sub_22E8901B8(v47, a4);
      goto LABEL_52;
    }
    if (a7)
    {
      v31 = *v23;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      {
        v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v34 != 39 && v34 != 32)
          goto LABEL_45;
        v32 = *(_QWORD *)(sub_22F10ACF8(v31) & 0xFFFFFFFFFFFFFFF0);
        if (!v32)
          goto LABEL_45;
      }
      else
      {
        v32 = sub_22F10CEE8(v31);
        if (!v32)
          goto LABEL_45;
      }
      v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v36 = v35 > 0x27;
      v37 = (1 << v35) & 0x8180000000;
      if (!v36 && v37 != 0)
      {
        sub_22E8FCA40(a1, v53, 0xFE6u, 0, (uint64_t)v64);
        LOBYTE(v57) = a5;
        BYTE1(v57) = 1;
        v42 = sub_22F2F3884((uint64_t)v64, (__int16 *)&v57);
        sub_22E8901B8(v42, a4);
        sub_22E903BEC(v64);
        sub_22E8FCA40(a1, v53, 0x16ECu, 0, (uint64_t)v64);
        v56 = a5;
        v43 = sub_22F2F3884((uint64_t)v64, &v56);
        v44 = sub_22E8901B8(v43, a4);
        v45 = qword_22F49B4D0[(char)a5];
        v46 = off_24FAB94C0[(char)a5];
        v60 = 0;
        v59 = 0;
        v63 = 0;
        v57 = v53 | ((unint64_t)v53 << 32);
        v58 = 1;
        HIBYTE(v66) = v45;
        memcpy(&__dst, v46, v45);
        *((_BYTE *)&__dst + v45) = 0;
        *(_OWORD *)__p = __dst;
        v62 = v66;
        sub_22E890748(v44, &v57);
        if (SHIBYTE(v62) < 0)
          operator delete(__p[0]);
        goto LABEL_52;
      }
    }
LABEL_45:
    if (a2)
    {
      sub_22EE924EC(a1[11], a3, a5);
      v40 = sub_22EE90E74(a2, v39, *a4, *a4);
    }
    else
    {
      v40 = sub_22F369798(a1[11], dword_22F46A4D0[(char)a5], *a4, *a4);
    }
    v41 = v40;
    result = 0;
    *a4 = v41;
    return result;
  }
  v19 = *a4;
  while (1)
  {
    v20 = (v17 >> 19) - 33;
    if (v20 <= 3)
      break;
LABEL_13:
    v19 = *(_QWORD *)(v16 + 32);
    v16 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_DWORD *)(v16 + 16);
    if (v16)
      v22 = *(_DWORD *)(v16 + 16) == 7;
    else
      v22 = 0;
    if (!v22)
      goto LABEL_19;
  }
  v21 = 0x3010200u >> (8 * v20);
  if (a5 == v21)
  {
    if (a2)
    {
      sub_22E8FCA40(a1, a6, 0x89u, 0, (uint64_t)v64);
      LOBYTE(__dst) = a5;
      BYTE1(__dst) = a7;
      v27 = sub_22F2F3884((uint64_t)v64, (__int16 *)&__dst);
      v60 = 0;
      v59 = 0;
      __p[1] = 0;
      v62 = 0;
      __p[0] = 0;
      v63 = 0;
      v57 = a6 | ((unint64_t)a6 << 32);
      v58 = 1;
      sub_22E890748(v27, &v57);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      sub_22E903BEC(v64);
    }
    goto LABEL_19;
  }
  if ((a9 & 1) != 0)
  {
    v15 = sub_22EE95BBC(a1[11], v15);
    *a4 = v15;
    goto LABEL_13;
  }
  sub_22E8FCA40(a1, a6, 0x30u, 0, (uint64_t)v64);
  LOBYTE(v57) = a5;
  BYTE1(v57) = a7;
  v26 = (unsigned int *)sub_22F2F3884((uint64_t)v64, (__int16 *)&v57);
  LOWORD(__dst) = v21;
LABEL_21:
  sub_22F2F3884((uint64_t)v26, (__int16 *)&__dst);
LABEL_52:
  sub_22E903BEC(v64);
  return 1;
}

_QWORD *sub_22EE8A960(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  uint64_t v13;

  *a1 = a2;
  a1[2] = a1 + 5;
  *(_OWORD *)(a1 + 3) = xmmword_22F44E360;
  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_DWORD *)(v3 + 16);
  if (v4 - 25 >= 2)
  {
    v6 = 0;
    do
    {
      if (v4 > 0x1Eu)
      {
        switch(v4)
        {
          case 0x1Fu:
            v8 = *(_QWORD *)(v3 + 32);
            v9 = v6 + 1;
            v10 = a1[4];
            v11 = 7;
            goto LABEL_34;
          case 0x27u:
            v8 = *(_QWORD *)(v3 + 32);
            v9 = v6 + 1;
            v10 = a1[4];
            v11 = 4;
            goto LABEL_34;
          case 0x25u:
            v8 = *(_QWORD *)(v3 + 32);
            v9 = v6 + 1;
            v10 = a1[4];
            v11 = 2;
            goto LABEL_34;
        }
      }
      else
      {
        if (v4 - 4 < 2 || v4 == 2)
        {
          v8 = *(_QWORD *)(v3 + 32);
          v9 = v6 + 1;
          v10 = a1[4];
          v11 = 3;
          goto LABEL_34;
        }
        if (v4 == 10)
        {
          v8 = *(_QWORD *)(v3 + 32);
          v9 = v6 + 1;
          v10 = a1[4];
          v11 = 5;
          goto LABEL_34;
        }
      }
      if ((v4 & 0xFE) == 0x28)
      {
        if ((v4 & 0x100000) != 0)
        {
          do
          {
            while (1)
            {
              v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v3)
                break;
              v12 = *(_DWORD *)(v3 + 16);
              if ((v12 & 0xFE) != 0x28)
                break;
              if ((v12 & 0x100000) == 0)
                goto LABEL_26;
            }
            v3 = sub_22F10CF48(v3);
          }
          while ((*(_DWORD *)(v3 + 16) & 0x100000) != 0);
LABEL_26:
          v6 = a1[3];
        }
        v8 = *(_QWORD *)(v3 + 32);
        v9 = v6 + 1;
        v10 = a1[4];
        v11 = 6;
      }
      else if (v4 == 28)
      {
        v8 = *(_QWORD *)(v3 + 24);
        v9 = v6 + 1;
        v10 = a1[4];
        v11 = 8;
      }
      else if (v4 == 7)
      {
        v8 = *(_QWORD *)(v3 + 40);
        v9 = v6 + 1;
        v10 = a1[4];
        v11 = 1;
      }
      else
      {
        v13 = sub_22F10CF48(v3);
        if (v3 == v13)
        {
          v3 = 0;
          break;
        }
        v11 = 0;
        v8 = v13 & 0xFFFFFFFFFFFFFFF0;
        v6 = a1[3];
        v10 = a1[4];
        v9 = v6 + 1;
      }
LABEL_34:
      if (v9 > v10)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v6 = a1[3];
      }
      *(_BYTE *)(a1[2] + v6) = v11;
      v6 = a1[3] + 1;
      a1[3] = v6;
      v3 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
      v4 = *(_DWORD *)(v3 + 16);
    }
    while (v4 - 25 > 1);
  }
  a1[1] = v3;
  return a1;
}

uint64_t sub_22EE8AB8C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int j;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD v45[3];
  int v46;
  unint64_t v47;
  _QWORD v48[2];
  int v49;
  uint64_t vars0;

  v3 = result;
  v4 = (unsigned __int8 *)a2;
  do
  {
    v5 = (uint64_t)v4;
    v6 = *v4;
    if (v6 > 0xD5)
    {
      if (v6 == 233)
      {
        if ((*(_DWORD *)v4 & 0x7C0000) != 0x300000)
          return result;
        v6 = *(_DWORD *)v4;
        v8 = v4 + 16;
      }
      else
      {
        if (v6 != 214)
          break;
        v8 = v4 + 24;
      }
    }
    else if (v6 == 155)
    {
      if ((**((_DWORD **)v4 + 2) & 0x18000) != 0)
        return result;
      v8 = v4 + 24;
      if (!*(_BYTE *)(v5 + 48))
        v8 = (unsigned __int8 *)(v5 + 32);
      v6 = 155;
    }
    else
    {
      if (v6 != 176)
        break;
      v7 = *((unsigned int *)v4 + 5);
      if ((_DWORD)v7 == -1)
        return result;
      v8 = &v4[8 * v7 + 40];
      v6 = 176;
    }
    v4 = *(unsigned __int8 **)v8;
  }
  while (v4 != (unsigned __int8 *)v5);
  if (v6 != 161)
    return result;
  v9 = *(_QWORD *)(v5 + 16);
  v10 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 60 >= 7 ? 0 : *(_QWORD *)(v5 + 16);
  v47 = v10;
  if (!v10)
    return result;
  result = sub_22EFBC2B0(v10);
  if ((result & 0xFFFFFFFD) == 0)
    return result;
  if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x53)
  {
    v11 = *(_QWORD *)(v10 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
    {
      v14 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v14 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_37;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_36;
        if (i == 16)
          goto LABEL_30;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_43;
        if (i == 24)
        {
LABEL_30:
          v14 = -48;
        }
        else
        {
LABEL_36:
          if (i != 70)
          {
LABEL_37:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v14 = v16;
            else
              v14 = -72;
            goto LABEL_43;
          }
          v14 = -64;
        }
      }
LABEL_43:
      v17 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v12 = *(_QWORD *)v12;
    }
    v9 = v12 - 40;
  }
  v18 = *(_QWORD *)(v10 + 80);
  if (v18)
  {
    v19 = 0;
    v20 = *(_QWORD *)(v9 + 88);
    v21 = *(_QWORD *)(v10 + 80);
    do
    {
      if (sub_22EFBBF74(v21, v20) == 2)
        goto LABEL_106;
      if ((*(_BYTE *)(v21 + 72) & 3) != 0)
      {
        if (v19)
          break;
        v19 = 1;
      }
      v22 = sub_22E3CD31C((uint64_t *)(v21 + 72), v21);
      if (v22 == v18)
        break;
      v21 = v22;
    }
    while (v22);
  }
  sub_22EFF605C(a2);
  v46 = v23;
  v45[0] = v3;
  v45[1] = &v46;
  v45[2] = &v47;
  v49 = v23;
  v48[0] = v3;
  v48[1] = &v49;
  v26 = *(_QWORD *)off_255E04E38(&off_255E04E38, v24);
  if (!v26)
    goto LABEL_62;
  v27 = (uint64_t)&vars0 - v26;
  if (v27 < 0)
    v27 = -v27;
  if ((unint64_t)(v27 - 8126464) <= 0x40000)
    sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v48, (uint64_t)sub_22EEB421C, (uint64_t)v45);
  else
LABEL_62:
    sub_22EE46380(v3, v25, v10, 0, 0, 0);
  v28 = v47;
  if (!v47 || (v29 = v47, (*(_DWORD *)(v47 + 28) & 0x7F) != 0x53))
  {
    v30 = *(_QWORD *)(v47 + 16);
    v31 = v30 & 0xFFFFFFFFFFFFFFF8;
    if ((v30 & 4) != 0)
      v31 = *(_QWORD *)v31;
    for (j = *(_WORD *)(v31 + 8) & 0x7F; j != 83; j = *(_WORD *)(v31 + 8) & 0x7F)
    {
      v33 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v33 = -56;
          goto LABEL_84;
        }
        if (j == 81)
          goto LABEL_84;
      }
      else
      {
        if (j <= 0x18)
        {
          if (j == 16)
            goto LABEL_71;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_84;
          if (j == 24)
          {
LABEL_71:
            v33 = -48;
            goto LABEL_84;
          }
        }
        if (j == 70)
        {
          v33 = -64;
          goto LABEL_84;
        }
      }
      v34 = j - 52;
      if ((j - 33) >= 5)
        v35 = -48;
      else
        v35 = -64;
      if (v34 >= 6)
        v33 = v35;
      else
        v33 = -72;
LABEL_84:
      v36 = *(_QWORD *)(v31 + v33 + 16);
      v31 = v36 & 0xFFFFFFFFFFFFFFF8;
      if ((v36 & 4) != 0)
        v31 = *(_QWORD *)v31;
    }
    v29 = v31 - 40;
  }
  v37 = *(_QWORD *)(v47 + 80);
  if (!v37)
  {
    v21 = 0;
    goto LABEL_102;
  }
  v38 = 0;
  v39 = *(_QWORD *)(v29 + 88);
  v40 = *(_QWORD *)(v47 + 80);
  while (1)
  {
    if (sub_22EFBBF74(v40, v39) == 2)
    {
      v21 = v40;
      goto LABEL_101;
    }
    if ((*(_BYTE *)(v40 + 72) & 3) != 0)
      break;
LABEL_97:
    v41 = sub_22E3CD31C((uint64_t *)(v40 + 72), v40);
    v21 = 0;
    if (v41 != v37)
    {
      v40 = v41;
      if (v41)
        continue;
    }
    goto LABEL_101;
  }
  if (!v38)
  {
    v38 = 1;
    goto LABEL_97;
  }
  v21 = 0;
LABEL_101:
  v28 = v47;
LABEL_102:
  result = sub_22EFBE4A0(v28);
  if (v21 && !(_DWORD)result)
  {
    v42 = v47;
    v43 = sub_22EFBC2B0(v47);
    sub_22EFBEC04(v42, v43, v46);
    goto LABEL_106;
  }
  if (v21)
  {
LABEL_106:
    result = sub_22EFF6F50(v5, v21);
    v44 = *(_QWORD *)(v21 + 48);
    *(_QWORD *)(v5 + 8) = v44;
    *(_QWORD *)(a2 + 8) = v44;
  }
  return result;
}

uint64_t sub_22EE8B05C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 4)
  {
    sub_22EE8AB8C(a1, a2);
    return *(_QWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_22EE8B0B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_22EE8B180(a1, a2);
  if ((v5 & 1) == 0
    && ((v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0)) != 0 && (*(_DWORD *)(v6 + 16) & 0xFE) == 0x2C
     || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
     && (v6 = sub_22F10CF48(v6)) != 0)
    && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 74) & 0x20) == 0)
  {
    v8 = sub_22F114198(*(_QWORD *)(v6 + 24));
    *(_DWORD *)(v8 + 72) |= 0x200000u;
    v9 = *(_QWORD *)(a1 + 96);
    v10 = sub_22F114198(*(_QWORD *)(v6 + 24));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, v10);
  }
  return v5;
}

uint64_t sub_22EE8B180(uint64_t a1, unsigned int a2, uint64_t a3, int a4, void (***a5)(_QWORD, uint64_t, _QWORD, uint64_t))
{
  void (***v5)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL4 v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned int v55[24];
  __int128 v56;
  _DWORD *v57;
  _QWORD *v58;
  unint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  void (***v68)(_QWORD, uint64_t, _QWORD, uint64_t);
  unsigned int v69;
  unint64_t v70;
  unint64_t *v71;
  unsigned int v72;
  uint64_t vars0;

  v5 = a5;
  v69 = a2;
  v68 = a5;
  v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 31;
  else
    v12 = 0;
  if (v12
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
    && (v11 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0))) != 0)
  {
    v13 = *(_QWORD *)(v11 + 40);
    if ((*(_BYTE *)(v13 + 17) & 4) == 0)
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 0x4000) != 0)
      {
        v14 = sub_22F10C2A4(v13);
        v15 = (*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v14;
        if ((*(_BYTE *)(v15 + 74) & 2) == 0)
        {
          v16 = *(_QWORD *)(v11 + 40) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)&v56 = &unk_24FAB6EF8;
          DWORD2(v56) = 3783;
          if ((sub_22EE8B0B0(a1, a2, v16) & 1) != 0)
            return 1;
        }
      }
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 148) == 11)
      {
        sub_22EE8B180(a1, a2);
        v34 = sub_22F40AE38(v11);
        v35 = sub_22E6939D8(v34);
        if (!sub_22E693748(v35))
        {
          v36 = *(_DWORD *)(a1 + 244);
          if (v36 == 3)
          {
            v38 = 0;
            v37 = 3;
          }
          else if (v36 == 2)
          {
            v38 = 0;
            v37 = 1;
          }
          else if (v36)
          {
            v38 = 0;
            v37 = 0;
          }
          else
          {
            v37 = sub_22F097C40(v35);
            v38 = 1;
          }
          v47 = *(unsigned int *)(a1 + 280);
          LODWORD(v48) = v47;
          if (!(_DWORD)v47)
          {
            v48 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v35 + 16))(v35);
            v47 = HIDWORD(v48);
          }
          v49 = *(_QWORD *)(a1 + 88);
          v56 = 0uLL;
          v57 = (_DWORD *)(v48 | (v47 << 32));
          LODWORD(v58) = 0;
          WORD2(v58) = 478;
          BYTE6(v58) = (((v37 & 0xF) << 19) | 0x40000u) >> 16;
          v50 = sub_22F38996C(v49, v38, &v56);
          sub_22EFCA95C(v35, v50);
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 112))(*(_QWORD *)(a1 + 96), v35);
        }
      }
    }
  }
  v67 = 0;
  if ((sub_22F1110EC(*v10, (uint64_t *)&v67) & 1) != 0)
  {
    v17 = 1;
  }
  else if (a4 == 1)
  {
    v17 = 0;
  }
  else
  {
    v17 = sub_22F111384(*v10);
  }
  if (v67 && (*(_DWORD *)(v67 + 28) & 0x7F) != 0x21)
    sub_22ED65E9C(a1, a2, v67);
  if ((v17 & 1) != 0)
  {
    if (v67)
    {
      if ((*(_DWORD *)(v67 + 28) & 0x7Fu) - 33 >= 5)
        v18 = 0;
      else
        v18 = v67;
      if ((*(_DWORD *)(v67 + 28) & 0x7F) == 0x16)
        v19 = v67;
      else
        v19 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    if (!(v18 | v19))
    {
LABEL_88:
      if (v5)
      {
        (**v5)(v5, a1, v69, a3);
        if (v18)
        {
          if ((*(_BYTE *)(v18 + 28) & 0x80) == 0)
          {
            v41 = *(_DWORD *)(v18 + 24);
            if (v41)
            {
              if ((*(_DWORD *)(v18 + 72) & 0x20000) != 0)
                v42 = 113;
              else
                v42 = 102;
              sub_22E8FCA40((_QWORD *)a1, v41, v42, 0, (uint64_t)&v56);
              v43 = *(_QWORD *)(v18 + 48);
              if (v43)
                v44 = v43 & 0xFFFFFFFFFFFFFFF0;
              else
                v44 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v18);
              v70 = v44;
              sub_22E8901B8((uint64_t)&v56, (uint64_t *)&v70);
              sub_22E903BEC((unsigned int *)&v56);
            }
          }
        }
        if (v19)
        {
          if ((*(_BYTE *)(v19 + 28) & 0x80) == 0)
          {
            v45 = *(_DWORD *)(v19 + 24);
            if (v45)
            {
              sub_22E8FCA40((_QWORD *)a1, v45, 0x1609u, 0, (uint64_t)v55);
              sub_22E903BEC(v55);
            }
          }
        }
        v46 = *(_QWORD *)(a1 + 8);
        if (v46)
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 376))(v46, v69, a3);
      }
      return 1;
    }
    if ((*(_BYTE *)(v67 + 28) & 0x80) != 0)
      return 1;
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16048);
    if (v25)
    {
      if (v18 && (*(_WORD *)(v18 + 72) & 0x80) != 0)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 136))(v25, v18);
      if (v19 && (*(_WORD *)(v19 + 56) & 0x80) != 0)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v25 + 144))(v25, v19);
      if ((sub_22F1110EC(*v10, 0) & 1) == 0)
      {
        v30 = a2;
        v31 = a1;
        return sub_22EE8B180(v31, v30);
      }
    }
    if (!v18 || (*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 > 2)
      goto LABEL_88;
    v66 = v18;
    v65 = 0;
    if ((sub_22EFC7ADC(v18 + 64) & 1) != 0)
      goto LABEL_87;
    if ((*(_DWORD *)(v66 + 28) & 0x7E) == 0x24)
      v27 = v66;
    else
      v27 = 0;
    v64 = v27;
    if (v27)
    {
      if ((*(_BYTE *)(v27 + 180) & 7) == 0)
      {
        *(_QWORD *)&v56 = &v65;
        *((_QWORD *)&v56 + 1) = a1;
        v57 = &v69;
        v58 = &v64;
        v59 = (unint64_t *)&v68;
        LODWORD(v63) = v69;
        v70 = a1;
        v71 = &v63;
        v28 = *(_QWORD *)off_255E04E38(&off_255E04E38, v26);
        if (!v28)
          goto LABEL_68;
        v29 = (uint64_t)&vars0 - v28;
        if (v29 < 0)
          v29 = -v29;
        if ((unint64_t)(v29 - 8126464) > 0x40000)
        {
LABEL_68:
          sub_22EEB4240((uint64_t)&v56);
LABEL_69:
          if (!v68 || !v65)
          {
            if ((sub_22F1110EC(*v10, 0) & 1) == 0)
            {
              v30 = v69;
              v31 = a1;
              return sub_22EE8B180(v31, v30);
            }
            goto LABEL_87;
          }
          return 1;
        }
        v54 = sub_22EEB4240;
        goto LABEL_122;
      }
    }
    else
    {
      v39 = *(_QWORD *)(v66 + 136);
      if ((v39 & 4) != 0)
      {
        v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFF8);
        if (v40)
        {
          v51 = *v40;
          v63 = v51 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_BYTE *)(v66 + 74) & 2) == 0 && (v51 & 0xFFFFFFFFFFFFFFF8) != 0 && (v51 & 6) != 2)
          {
            *(_QWORD *)&v56 = &v65;
            *((_QWORD *)&v56 + 1) = a1;
            v57 = &v69;
            v58 = &v66;
            v59 = &v63;
            v60 = &v68;
            v72 = v69;
            v70 = a1;
            v71 = (unint64_t *)&v72;
            v52 = *(_QWORD *)off_255E04E38(&off_255E04E38, v26);
            if (!v52)
              goto LABEL_119;
            v53 = (uint64_t)&vars0 - v52;
            if (v53 < 0)
              v53 = -v53;
            if ((unint64_t)(v53 - 8126464) > 0x40000)
            {
LABEL_119:
              sub_22EEB428C((uint64_t)&v56);
              goto LABEL_69;
            }
            v54 = sub_22EEB428C;
LABEL_122:
            sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v70, (uint64_t)v54, (uint64_t)&v56);
            goto LABEL_69;
          }
        }
      }
    }
LABEL_87:
    v5 = v68;
    goto LABEL_88;
  }
  v70 = 0;
  if (!v67)
    return 0;
  if ((sub_22EE8B858(a1, v67, &v70, 1) & 1) != 0)
  {
    if (v67)
    {
      v20 = *(_QWORD **)(a1 + 11968);
      v21 = *(_QWORD **)(a1 + 11976);
      if (v20 != v21)
      {
        BYTE4(v56) = 0;
        v58 = (_QWORD *)v67;
        v59 = 0;
        LODWORD(v60) = 0;
        v61 = 0;
        v62 = 0;
        LODWORD(v56) = 21;
        v57 = (_DWORD *)v67;
        DWORD2(v56) = a2;
        do
        {
          if (*v20)
            (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*v20 + 32))(*v20, a1, &v56);
          ++v20;
        }
        while (v20 != v21);
        v22 = *(_QWORD **)(a1 + 11968);
        v23 = *(_QWORD **)(a1 + 11976);
        while (v22 != v23)
        {
          if (*v22)
            (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*v22 + 40))(*v22, a1, &v56);
          ++v22;
        }
      }
    }
    return 0;
  }
  if (v5)
  {
    sub_22EE03478(a1);
    v33 = v32 == 0;
    if (v70)
      sub_22F338924(a1, a2, v70, 1, v32 == 0);
  }
  else
  {
    v33 = 0;
  }
  return !v33;
}

uint64_t sub_22EE8B858(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v6;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int i;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200200000000000) == 0)
    return 1;
  v6 = a2;
  v8 = *(_DWORD *)(a2 + 28);
  v9 = v8 & 0x7F;
  if ((v9 - 33) <= 4 && (*(_BYTE *)(a2 + 74) & 2) != 0)
    return 1;
  if ((v9 - 38) >= 0xFFFFFFFD)
  {
    v11 = sub_22EFD57F4(a2);
    if (v11)
      v6 = v11;
    v12 = *(_QWORD *)(v6 + 128);
    if (v12
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104)),
          (v12 = *(_QWORD *)(v6 + 128)) != 0))
    {
      v6 = *(_QWORD *)(v12 + 88);
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  if (v9 != 33)
  {
    if ((v8 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v23 = sub_22EFC20FC(a2, 1);
      if (!v23)
        v23 = v6;
      v33 = 0;
      if (sub_22EFBF86C(v23, &v33, 0))
        v6 = v33;
      else
        v6 = 0;
      goto LABEL_79;
    }
    if ((v9 - 67) < 0xFFFFFFF9)
      goto LABEL_79;
    v13 = sub_22EFBD3B0(a2);
    if (v13)
      v14 = v13;
    else
      v14 = v6;
    if (!v14 || (v15 = v14, (*(_DWORD *)(v14 + 28) & 0x7F) != 0x53))
    {
      v16 = *(_QWORD *)(v14 + 16);
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v17 = *(_QWORD *)v17;
      for (i = *(_WORD *)(v17 + 8) & 0x7F; i != 83; i = *(_WORD *)(v17 + 8) & 0x7F)
      {
        v19 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v19 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_37;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_36;
          if (i == 16)
            goto LABEL_30;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_43;
          if (i == 24)
          {
LABEL_30:
            v19 = -48;
          }
          else
          {
LABEL_36:
            if (i != 70)
            {
LABEL_37:
              v20 = i - 52;
              if ((i - 33) >= 5)
                v21 = -48;
              else
                v21 = -64;
              if (v20 >= 6)
                v19 = v21;
              else
                v19 = -72;
              goto LABEL_43;
            }
            v19 = -64;
          }
        }
LABEL_43:
        v22 = *(_QWORD *)(v17 + v19 + 16);
        v17 = v22 & 0xFFFFFFFFFFFFFFF8;
        if ((v22 & 4) != 0)
          v17 = *(_QWORD *)v17;
      }
      v15 = v17 - 40;
    }
    v27 = *(_QWORD *)(v14 + 80);
    if (v27)
    {
      v28 = 0;
      v29 = *(_QWORD *)(v15 + 88);
      v30 = *(_QWORD *)(v14 + 80);
      while (sub_22EFBBF74(v30, v29) != 2)
      {
        if ((*(_BYTE *)(v30 + 72) & 3) != 0)
        {
          if (v28)
            goto LABEL_77;
          v28 = 1;
        }
        v31 = sub_22E3CD31C((uint64_t *)(v30 + 72), v30);
        v6 = 0;
        if (v31 != v27)
        {
          v30 = v31;
          if (v31)
            continue;
        }
        goto LABEL_79;
      }
      v6 = v30;
      goto LABEL_79;
    }
LABEL_77:
    v6 = 0;
    goto LABEL_79;
  }
  v10 = sub_22EFC3A1C(a2);
  if (v10)
    v6 = v10;
  if (a4 && ((*(_BYTE *)(v6 + 77) & 2) != 0 || (**(_BYTE **)(a1 + 72) & 0x10) != 0))
  {
    v24 = 0;
    *a3 = 0;
    v25 = v6;
    while ((*(_BYTE *)(v25 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v25) & 1) == 0)
    {
      if ((*(_BYTE *)(v25 + 74) & 1) != 0
        || (*(uint64_t (**)(unint64_t))(*(_QWORD *)v25 + 32))(v25) == v25 && !*a3)
      {
        *a3 = v25;
      }
      if ((*(_BYTE *)(v25 + 96) & 3) != 0)
      {
        if (v24)
          return 0;
        v24 = 1;
      }
      v25 = sub_22E3CD31C((uint64_t *)(v25 + 96), v25);
      result = 0;
      if (v25 == v6 || !v25)
        return result;
    }
    return 1;
  }
  v6 = sub_22EFC3500(v6);
LABEL_79:
  *a3 = v6;
  if ((*(_BYTE *)(v6 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v6) & 1) != 0)
    return 1;
  if ((~*(_DWORD *)(v6 + 8) & 6) != 0)
  {
    if (!sub_22EC621E8(a1, v6))
      goto LABEL_89;
LABEL_85:
    if (!*(_DWORD *)(a1 + 10680) && (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000000) == 0)
    {
      v32 = *(_QWORD *)(v6 + 8);
      if ((v32 & 4) != 0)
        *(_QWORD *)(v6 + 8) = v32 & 0xFFFFFFFFFFFFFFF9 | 2;
    }
    return 1;
  }
  if ((sub_22EC62498(a1, v6) & 1) != 0)
    goto LABEL_85;
LABEL_89:
  result = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16048);
  if (!result)
    return result;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 128))(result, v6);
  if ((*(_BYTE *)(v6 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v6) & 1) == 0)
  {
    if ((~*(_DWORD *)(v6 + 8) & 6) != 0)
    {
      result = sub_22EC621E8(a1, v6);
      if (!(_DWORD)result)
        return result;
    }
    else if ((sub_22EC62498(a1, v6) & 1) == 0)
    {
      return 0;
    }
    goto LABEL_85;
  }
  return 1;
}

uint64_t sub_22EE8BC8C(_QWORD *a1, unsigned int a2, unint64_t a3, void (***a4)(_QWORD, _QWORD *, _QWORD, unint64_t))
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t (**v50)();
  int v51;
  unint64_t *v52;
  _BYTE v53[96];
  uint64_t v54;
  unint64_t v55;

  v55 = a3;
  v8 = sub_22EF5BA38(a1[11], a3);
  if (!sub_22EE8B180(a1, a2)
    || ((v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v10 = (*(_DWORD *)(v9 + 16) & 0xFF800FF) == 86507531)
      : (v10 = 0),
        v10))
  {
    v11 = a3 & 0xFFFFFFFFFFFFFFF0;
    if (sub_22F111D3C(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0), a1[11]))
      return 0;
  }
  else
  {
    v11 = a3 & 0xFFFFFFFFFFFFFFF0;
  }
  (**a4)(a4, a1, a2, a3);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5)
    return 1;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  result = 1;
  if (v13 && *(_BYTE *)(v13 + 16) == 45)
  {
    v54 = sub_22F114198(*(_QWORD *)(v13 + 24));
    v50 = off_24FAB9340;
    v51 = 5836;
    v52 = &v55;
    if ((sub_22EE8B0B0((uint64_t)a1, a2, v8) & 1) == 0)
    {
      v14 = *(_QWORD *)(v54 + 128);
      if (v14
        && ((*(unsigned __int16 *)(v14 + 8) | (*(unsigned __int8 *)(v14 + 10) << 16)) & 0x100000) != 0
        && (*(_BYTE *)(a1[9] + 1) & 8) == 0)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v54 + 24), 0x16CDu, 0, (uint64_t)v53);
        v15 = (unsigned int *)v53;
LABEL_63:
        sub_22E903BEC(v15);
        return 1;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v54 + 104) + 96), *(_QWORD *)(v54 + 104));
      if (*(_DWORD *)(*(_QWORD *)(v54 + 128) + 20))
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v54 + 24), 0x16D2u, 0, (uint64_t)&v50);
        v16 = (unsigned __int16)*(_DWORD *)(v54 + 72) >> 13;
        if ((unsigned __int16)*(_DWORD *)(v54 + 72) >> 13)
        {
          if (v16 == 3)
            v16 = 2;
          else
            v16 = 1;
        }
        LODWORD(v49) = v16;
        v21 = sub_22E89519C((uint64_t)&v50, (unsigned int *)&v49);
        v22 = v54;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v54 + 104) + 96), *(_QWORD *)(v54 + 104));
        LODWORD(v48) = *(_DWORD *)(*(_QWORD *)(v22 + 128) + 20);
        sub_22E89519C(v21, (unsigned int *)&v48);
        sub_22E903BEC((unsigned int *)&v50);
        v23 = sub_22E483108(v54);
        if ((int *)v23 != v24)
        {
          v25 = (int *)v23;
          v26 = v24;
          do
          {
            sub_22E8FCA40(a1, *v25, 0x1579u, 0, (uint64_t)&v50);
            v27 = *(_QWORD *)v25;
            v25 += 6;
            v49 = v27;
            sub_22E8906A0((uint64_t)&v50, (uint64_t *)&v49);
            sub_22E903BEC((unsigned int *)&v50);
          }
          while (v25 != v26);
        }
        return 1;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v54 + 104) + 96), *(_QWORD *)(v54 + 104));
      if ((**(_QWORD **)(v54 + 128) & 0x80) == 0 && (sub_22E49F8B4(v54) & 1) == 0 && !sub_22E49F698(v54))
      {
        v44 = *(_DWORD *)(v54 + 24);
        v45 = a1;
        v46 = 5838;
LABEL_59:
        sub_22E8FCA40(v45, v44, v46, 0, (uint64_t)&v50);
        sub_22E890024((uint64_t)&v50, &v54);
LABEL_62:
        v15 = (unsigned int *)&v50;
        goto LABEL_63;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v54 + 104) + 96), *(_QWORD *)(v54 + 104));
      if ((*(_WORD *)(*(_QWORD *)(v54 + 128) + 8) & 0x20) != 0)
      {
        v28 = sub_22E46A3A0(v54);
        if (v28 != v29)
        {
          v30 = v28;
          v31 = v29;
          while (1)
          {
            v32 = *(_QWORD *)(**(_QWORD **)(v30 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v32 + 8) & 0xF) != 0)
              v32 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v30 + 16));
            if (!sub_22F111D3C(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0), a1[11]))
              break;
            v30 += 24;
            if (v30 == v31)
              goto LABEL_45;
          }
          sub_22E8FCA40(a1, *(_DWORD *)v30, 0x16CAu, 0, (uint64_t)&v50);
          v41 = sub_22E890024((uint64_t)&v50, &v54);
          v42 = *(_QWORD *)(**(_QWORD **)(v30 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 8) & 0xF) != 0)
            v42 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v30 + 16));
          v49 = v42 & 0xFFFFFFFFFFFFFFF0;
          v43 = sub_22E8901B8(v41, (uint64_t *)&v49);
          v48 = *(_QWORD *)v30;
          sub_22E8906A0(v43, &v48);
          goto LABEL_62;
        }
LABEL_45:
        v33 = sub_22EFC3B90(v54);
        if (v33)
        {
          v34 = v33;
          v49 = v33;
          v35 = (_QWORD *)(v33 + 48);
          if (sub_22F111D3C(*(_QWORD *)(*(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFFFF0), a1[11]))
          {
LABEL_47:
            if ((*v35 & 4) == 0 && (*(_BYTE *)((*v35 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
            {
              while (1)
              {
                v34 = *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v34)
                  return 1;
                if ((*(_DWORD *)(v34 + 28) & 0x7Fu) - 49 <= 2)
                {
                  v49 = v34;
                  v35 = (_QWORD *)(v34 + 48);
                  if (sub_22F111D3C(*(_QWORD *)(*(_QWORD *)(v34 + 48) & 0xFFFFFFFFFFFFFFF0), a1[11]))
                    goto LABEL_47;
                  break;
                }
              }
            }
          }
          sub_22E8FCA40(a1, *(_DWORD *)(v34 + 24), 0x16CBu, 0, (uint64_t)&v50);
          v36 = sub_22E890024((uint64_t)&v50, &v54);
          v37 = sub_22E890024(v36, (uint64_t *)&v49);
          v48 = *(_QWORD *)(v49 + 48);
          v38 = sub_22E8901B8(v37, &v48);
          v39 = *(_QWORD *)(v49 + 48);
          if ((v39 & 4) != 0)
            LOBYTE(v40) = 1;
          else
            v40 = (*(unsigned __int8 *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
          v47 = v40;
          sub_22E894E38(v38, &v47);
          goto LABEL_62;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1[9] + 1) & 0x10) != 0)
        {
          if ((sub_22F3B1A64(v54) & 1) != 0)
            return 1;
        }
        else
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v54 + 104) + 96), *(_QWORD *)(v54 + 104));
          if ((**(_QWORD **)(v54 + 128) & 0x100000000000) != 0)
            return 1;
        }
        v17 = sub_22EFD10F8(v54);
        if (v17)
        {
          v18 = v17;
          if ((*(_BYTE *)(a1[9] + 1) & 0x10) == 0)
          {
            v19 = *(_DWORD *)(v17 + 24);
            if (sub_22E692064(v17))
              v20 = 5841;
            else
              v20 = 5840;
            sub_22E8FCA40(a1, v19, v20, 0, (uint64_t)&v50);
            sub_22E890024((uint64_t)&v50, &v54);
            sub_22E903BEC((unsigned int *)&v50);
            if (!sub_22E692064(v18))
              sub_22EABBAB4(a1, v18, 5, 0, 1);
            return 1;
          }
          v44 = *(_DWORD *)(v17 + 24);
          v45 = a1;
          v46 = 5839;
          goto LABEL_59;
        }
      }
    }
    return 1;
  }
  return result;
}

unint64_t sub_22EE8C264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;

  if ((*(_BYTE *)(a2 + 1) & 0x80) == 0
    && ((v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0 && (*(_DWORD *)(v4 + 16) & 0xFE) == 0x2C
     || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
     && (v4 = sub_22F10CF48(v4)) != 0))
  {
    v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
    sub_22EFF605C(a2);
    v8 = v6;
    sub_22EB17F48(a1, v5, &v8, 1, 0, 0, 0, 0);
  }
  return sub_22EF67558(*(_QWORD *)(a1 + 88), (unsigned __int8 *)a2);
}

unint64_t sub_22EE8C328(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  unint64_t v7;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  char v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[16];
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[2];

  v7 = (unint64_t)a3;
  v35[1] = *MEMORY[0x24BDAC8D0];
  v33 = v35;
  v34 = 0x100000000;
  v17 = 0;
  v18 = 0;
  v16 = a1;
  v19 = 0;
  v20 = v24;
  v21 = v24;
  v22 = 2;
  v23 = 0;
  v24[2] = &v33;
  if (a5)
    v10 = 2;
  else
    v10 = 0;
  v25 = v10 | a4;
  v26 = a6;
  v27 = v31;
  v28 = v31;
  v29 = 1;
  v30 = 0;
  v31[8] = 0;
  v32 = 0;
  v11 = sub_22EE8C500(&v16, a3);
  if (v28 != v27)
    free(v28);
  if (v21 != v20)
    free(v21);
  llvm::deallocate_buffer(v17, (void *)(16 * v19));
  if ((v11 & 1) == 0)
    v7 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v12 = sub_22EB1A358(a1, v7, 0);
  if ((v12 & 1) == 0)
    v7 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v13 || *(_BYTE *)(v13 + 16) != 39 || (*(_BYTE *)(v13 + 40) & 7) != 4)
    a2 = sub_22F369668(*(_QWORD *)(a1 + 88), a2, 4);
  v14 = sub_22F3691BC(*(_QWORD *)(a1 + 88), a2, v7, a4, (uint64_t)v33, v34);
  if (v33 != v35)
    free(v33);
  return v14;
}

uint64_t sub_22EE8C500(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t result;

  v4 = *a2;
  if (v4 > 0xA8)
  {
    if (*a2 <= 0xB4u)
    {
      if (v4 != 169 && v4 != 170)
        return sub_22EE967F8(a1, (uint64_t)a2);
    }
    else if (v4 != 181)
    {
      if (v4 == 214)
      {
        result = sub_22EE9E100((uint64_t)a1, (uint64_t)a2);
        if (!result)
          return sub_22EE9E204(a1, (uint64_t)a2);
        return result;
      }
      if (v4 == 233)
        return sub_22EE9621C((uint64_t)a1, (uint64_t)a2);
      return sub_22EE967F8(a1, (uint64_t)a2);
    }
    return (uint64_t)a2;
  }
  if (*a2 > 0x8Fu)
  {
    switch(v4)
    {
      case 0x90u:
        return sub_22EE96118((_QWORD **)a1, (uint64_t)a2);
      case 0x99u:
        return sub_22EE96858((uint64_t)a1, a2);
      case 0xA1u:
        return sub_22EE9656C((uint64_t)a1, (uint64_t)a2);
    }
    return sub_22EE967F8(a1, (uint64_t)a2);
  }
  if (v4 != 112)
  {
    if (v4 == 138)
      return sub_22EE95FAC((uint64_t)a1, (uint64_t)a2);
    return sub_22EE967F8(a1, (uint64_t)a2);
  }
  a1[18] = a2;
  result = sub_22EE9E100((uint64_t)a1, (uint64_t)a2);
  if (!result)
    return sub_22EE9E26C(a1, (uint64_t)a2);
  return result;
}

uint64_t sub_22EE8C654(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;

  if ((*(_DWORD *)a2 & 0x8000) != 0)
    return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832);
  v4 = *(_DWORD *)a2;
  v5 = (unsigned __int8 *)a2;
  if (v4 == 153)
  {
    v5 = *(unsigned __int8 **)(a2 + 16);
    v4 = *v5;
  }
  if (v4 > 204)
  {
    switch(v4)
    {
      case 205:
        v14 = *((_QWORD *)v5 + 2);
        if ((v14 & 4) == 0)
          return *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 56);
        break;
      case 216:
        return *((_QWORD *)v5 + 1);
      case 226:
        return sub_22F0623A0((uint64_t)v5, *(_QWORD *)(a1 + 88));
    }
  }
  else
  {
    switch(v4)
    {
      case 161:
        v8 = *((_QWORD *)v5 + 2);
        result = *(_QWORD *)(v8 + 48);
        if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x48)
        {
          v9 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
            v9 = (unint64_t)sub_22F10D2BC(result);
          return v9 & 0xFFFFFFFFFFFFFFF0;
        }
        return result;
      case 188:
        v6 = *((_QWORD *)v5 + 3);
        if (v6)
        {
          v10 = (*(_DWORD *)(v6 + 28) & 0x7F) - 49;
          v11 = v10 > 0x11;
          v12 = (1 << v10) & 0x3F807;
          if (!v11 && v12 != 0)
            return *(_QWORD *)(v6 + 48);
        }
        break;
      case 199:
        v6 = *((_QWORD *)v5 + 2);
        return *(_QWORD *)(v6 + 48);
    }
  }
  if (!sub_22E904A34(a1, 0))
    return sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
  v15 = *v5;
  if (v15 != 214)
    return sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
  while (1)
  {
    if (v15 > 213)
    {
      if (v15 == 233)
      {
        v15 = *(_DWORD *)v5;
        if ((*(_DWORD *)v5 & 0x7C0000) != 0x300000)
          break;
        v17 = v5 + 16;
      }
      else
      {
        if (v15 != 214)
          break;
        v17 = v5 + 24;
      }
    }
    else if (v15 == 155)
    {
      if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
        return sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
      v17 = v5 + 24;
      if (!v5[48])
        v17 = v5 + 32;
      v15 = 155;
    }
    else
    {
      if (v15 != 176)
        break;
      v16 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v16 == -1)
        return sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
      v17 = &v5[8 * v16 + 40];
      v15 = 176;
    }
    v18 = *(unsigned __int8 **)v17;
    if (v18 == v5)
      break;
    v15 = *v18;
    v5 = v18;
  }
  if (v15 == 161
    && (v19 = *((_QWORD *)v5 + 2)) != 0
    && (*(_DWORD *)(v19 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
    && (v20 = sub_22F32D7C0(a1, v19, *((_DWORD *)v5 + 1)), v20 >= 0x10))
  {
    return sub_22EF5F8C4(*(_QWORD *)(a1 + 88), v20, 1);
  }
  else
  {
    return sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
  }
}

unint64_t sub_22EE8C8BC(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v14[24];

  if (a3
    && !*(_DWORD *)(a1 + 10680)
    && (a2[1] & 0x40) == 0
    && sub_22F0005B0((unint64_t)a2, *(_QWORD *)(a1 + 88), 0, a4, a5, a6, a7, a8))
  {
    sub_22EFF605C((uint64_t)a2);
    sub_22E8FCA40((_QWORD *)a1, v13, 0x1B4Bu, 0, (uint64_t)v14);
    sub_22E903BEC(v14);
  }
  v10 = *(_QWORD *)(a1 + 88);
  v11 = sub_22EE8C654(a1, (uint64_t)a2);
  return sub_22EF67788(v10, a2, v11);
}

unsigned int *sub_22EE8C964@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xAA1u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

uint64_t sub_22EE8C9F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16) ^ 1;
  return sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 12), 0, a4);
}

uint64_t sub_22EE8CA18@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  return sub_22E8FCA40(a1, a2, 0x151Cu, 0, a3);
}

void sub_22EE8CA2C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t *sub_22EE8CA40(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  _WORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint8x16_t v39;
  __int32 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BOOL4 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _DWORD *v75;
  _DWORD *v76;
  int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  char v89;
  __int16 v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  _QWORD *v107;
  __int16 v108;
  __int16 v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int *v117;
  int v118;
  int *v119;
  _QWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  char v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  _QWORD *v160;
  int v161;
  int v162;
  unsigned int v163;
  _QWORD *v164;
  _QWORD *v165;
  unsigned int v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  __int128 v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  _DWORD *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  BOOL v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  char v195;
  uint64_t v196;
  BOOL v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  int *v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  void **v205;
  size_t v206;
  unint64_t first_not_of;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unsigned int v211;
  int v212;
  unsigned int *v214;
  uint64_t v215;
  uint64_t v216;
  _BOOL4 v217;
  unsigned int v218;
  int v219;
  BOOL v220;
  int v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  _QWORD *v232;
  unsigned int *v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  BOOL v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t i;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  unint64_t v260;
  int v261;
  int v262;
  _DWORD *v263;
  char v264;
  uint64_t v265;
  unsigned __int8 *v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  char *v271;
  int v272;
  uint64_t v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  _BYTE *v279;
  const void *v280;
  __int128 *v281;
  unint64_t v282;
  unint64_t v283;
  void *v284;
  __int128 *v285;
  uint64_t v286;
  int v287;
  int v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  uint64_t v292;
  unsigned int v293;
  __int16 v294;
  int v295;
  uint64_t v296;
  char v297;
  int v298;
  char *v299;
  int v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  __int128 *v309;
  unsigned int v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  BOOL v316;
  BOOL v317;
  BOOL v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v328;
  uint64_t v329;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  char v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  BOOL v354;
  BOOL v355;
  BOOL v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  int v370;
  _QWORD *v371;
  unsigned int v372;
  int v373;
  uint64_t v374;
  unsigned int *v375;
  unsigned int v376;
  uint64_t v377;
  __int16 v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int8 *v383;
  char v384;
  _DWORD *v385;
  char v386;
  _QWORD *v387;
  char v388;
  int v389;
  int v390;
  uint64_t v391;
  uint64_t *v392;
  BOOL v393;
  uint64_t *v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  int v402;
  unsigned __int8 *v403;
  _OWORD v404[2];
  __int128 v405;
  __int128 v406;
  _QWORD v407[2];
  __int128 v408;
  __int128 v409;
  int64_t v410;
  void *v411[3];
  _BYTE __p[23];
  __int16 v413;
  void *v414;
  uint64_t v415;
  _QWORD v416[23];

  v416[20] = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)result + 264) = 0;
  v5 = *(_QWORD *)(a4 + 8);
  if (v5 < 8)
    return result;
  v7 = (unsigned int *)result;
  if ((v5 & 4) != 0)
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      if (!*(_DWORD *)(v8 + 8))
        return result;
    }
  }
  v9 = sub_22E828D58((uint64_t *)&v395, (uint64_t *)(a4 + 8));
  v394 = v9;
  if ((v395 & 4) != 0)
  {
    v14 = *(uint64_t **)(v395 & 0xFFFFFFFFFFFFFFF8);
    v13 = &v14[*(unsigned int *)((v395 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v13 = &v9[v395 > 7];
    v14 = v9;
  }
  if (v14 == v13)
    return sub_22E80F94C(v394);
  while (1)
  {
    v15 = *v14;
    if ((*(_BYTE *)(*v14 + 50) & 1) != 0)
      goto LABEL_394;
    v16 = *(unsigned __int16 *)(v15 + 28) | (*(unsigned __int8 *)(v15 + 30) << 16);
    if ((v16 & 0x5FFFF) == 0x50011 || (v17 = v16 & 0x70000, v17 == 0x20000) || v17 == 0x10000)
    {
      if (sub_22F1ACCD4(*v14))
      {
        if (a3 == 1)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v15 + 72) + 8);
          v19 = (v18 & 0x80000000) != 0 ? 6612 : 6395;
          sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), v19, 0, (uint64_t)&v414);
          sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
          sub_22E903BEC((unsigned int *)&v414);
          if ((v18 & 0x80000000) == 0)
            goto LABEL_394;
        }
      }
      else if (a3 != 1)
      {
        v20 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8);
        v21 = (v20 - 341) > 0xD || ((1 << (v20 - 85)) & 0x281F) == 0;
        if (v21 && v20 != 14)
          goto LABEL_394;
      }
    }
    v23 = *(_WORD **)(v15 + 72);
    if (v23[4] != 255)
      break;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 72) + 133) & 0x20) != 0)
    {
      if ((*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v23 + 56))(v23, v15) != 1)
        break;
      v24 = *(_QWORD **)v7;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 72) + 132) & 0x80) != 0)
        break;
      v25 = v15;
      v26 = 37;
      v27 = 45;
    }
    else
    {
      v24 = *(_QWORD **)v7;
      v25 = v15;
      v26 = 36;
      v27 = 44;
    }
    sub_22EE8FEF4(v24, v25, v26, v27);
    *(_QWORD *)(v15 + 48) |= 0x10000uLL;
LABEL_394:
    if (++v14 == v13)
      return sub_22E80F94C(v394);
  }
  v28 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8);
  if (v28 > 0x153)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x18Du)
    {
      switch(*(_WORD *)(*(_QWORD *)(v15 + 72) + 8))
      {
        case 0x154:
          v29 = *(_QWORD **)v7;
          v30 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0);
          v32 = *(_DWORD *)(v31 + 16);
          v33 = v32 & 0xFF800FF;
          v35 = (v32 & 0xFF800FF) == 0x108000B || v33 == 17825803;
          if (!v31)
            goto LABEL_296;
          *(int8x8_t *)v36.i8 = vand_s8((int8x8_t)vdup_n_s32(v32), (int8x8_t)0xFF000FF0FC000FFLL);
          v36.i64[1] = __PAIR64__(v36.u32[1], v33);
          v37 = vdupq_laneq_s32(v36, 2);
          v36.i32[3] = v32 & 0xFF800FF;
          v38 = vdupq_n_s32(v33);
          v39 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v36, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v37, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v37, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v37, (int32x4_t)xmmword_22F45AEE0)));
          v39.i8[0] = vmaxvq_u8(v39);
          v40 = v39.i32[0];
          *(int8x8_t *)v39.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v38, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v38, (int32x4_t)xmmword_22F45AF00)));
          v39.i8[0] = vmaxv_u8(*(uint8x8_t *)v39.i8);
          if (!((v40 | v39.i32[0]) & 1 | ((v32 & 0xFF800FF) == 16777227 || v35)))
          {
LABEL_296:
            v190 = v33 != 18350091 || v31 == 0;
            if (v190 && *(_DWORD *)(v31 + 16) != 38)
            {
              v60 = *(_DWORD *)(v15 + 16);
              v57 = *(_QWORD **)v7;
              v61 = 4406;
              goto LABEL_77;
            }
          }
          v41 = sub_22F10D4DC(v30);
          if (v41)
          {
            v42 = v41;
            v43 = *(_QWORD *)(v41 + 24);
            v44 = *(_QWORD *)((*(_QWORD *)(v43 + 80) & 0xFFFFFFFFFFFFFFF8)
                            + ((2 * *(_QWORD *)(v43 + 80)) & 8));
            memset(v411, 0, sizeof(v411));
            v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v46 = *(unsigned __int8 *)(v45 + 16);
            if (v46 == 38)
            {
              v47 = sub_22EAA0538(v43);
              v48 = "read_only";
              if (v47)
              {
                v49 = *(_QWORD *)(v42 + 24);
                if ((*(_BYTE *)(v49 + 29) & 1) == 0)
                  goto LABEL_599;
                sub_22EFC8E88(v49);
                v51 = *(uint64_t **)v50;
                v52 = *(unsigned int *)(v50 + 8);
                v53 = *(uint64_t **)v50;
                if ((_DWORD)v52)
                {
                  v348 = 8 * v52;
                  v53 = *(uint64_t **)v50;
                  while (*(_WORD *)(*v53 + 32) != 491)
                  {
                    ++v53;
                    v348 -= 8;
                    if (!v348)
                      goto LABEL_599;
                  }
                }
                if (v53 == &v51[v52])
                {
LABEL_599:
                  v54 = 0;
                }
                else
                {
                  do
                  {
                    v55 = *v51++;
                    v54 = v55;
                  }
                  while (*(_WORD *)(v55 + 32) != 491);
                }
                v48 = sub_22F3998C4(v54);
              }
            }
            else
            {
              if (v46 != 11)
                v45 = 0;
              v48 = off_24FAB93A0[((unint64_t)*(unsigned int *)(v45 + 16) >> 19) & 0x1FF];
            }
            MEMORY[0x2348A0C14](v411, v48);
            v203 = *(unsigned int **)(*(_QWORD *)v15 + 16);
            v204 = *v203;
            *(_QWORD *)&v408 = v203 + 4;
            *((_QWORD *)&v408 + 1) = v204;
            if (SHIBYTE(v411[2]) >= 0)
              v205 = v411;
            else
              v205 = (void **)v411[0];
            if (SHIBYTE(v411[2]) >= 0)
              v206 = HIBYTE(v411[2]) & 0x7F;
            else
              v206 = (size_t)v411[1];
            first_not_of = llvm::StringRef::find_first_not_of();
            if (first_not_of >= *((_QWORD *)&v408 + 1))
              v208 = *((_QWORD *)&v408 + 1);
            else
              v208 = first_not_of;
            if (v206 == *((_QWORD *)&v408 + 1) - v208
              && (*((_QWORD *)&v408 + 1) <= first_not_of || !memcmp(v205, (const void *)(v408 + v208), v206)))
            {
              sub_22E8FCA40(v29, *(_DWORD *)(v15 + 16), 0x83u, 0, (uint64_t)&v414);
              v257 = sub_22F2F2210((uint64_t)&v414, (uint64_t)&v408);
              *(_QWORD *)&v404[0] = *(_QWORD *)(v15 + 16);
              sub_22E8906A0(v257, (uint64_t *)v404);
            }
            else
            {
              sub_22E8FCA40(v29, *(_DWORD *)(v15 + 16), 0x113Du, 0, (uint64_t)&v414);
            }
            sub_22E903BEC((unsigned int *)&v414);
            sub_22E8FCA40(v29, *(_DWORD *)(*(_QWORD *)(v42 + 24) + 56), 0x171Du, 0, (uint64_t)v404);
            sub_22E90749C((uint64_t)v404, v411);
            sub_22E903BEC((unsigned int *)v404);
            if (SHIBYTE(v411[2]) < 0)
              operator delete(v411[0]);
            goto LABEL_386;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 38
            || (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 72) + 56))(*(_QWORD *)(v15 + 72), v15) != 2)
          {
            goto LABEL_386;
          }
          v200 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
          if (!v200 || *(_BYTE *)(v200 + 16) != 38)
            v200 = sub_22F10CF48(v200);
          v188 = sub_22F36C098(v29[11], *(_QWORD *)(v200 + 32), 0);
          goto LABEL_300;
        case 0x155:
        case 0x156:
        case 0x157:
        case 0x158:
        case 0x159:
        case 0x15B:
        case 0x15C:
        case 0x15D:
        case 0x15E:
        case 0x160:
        case 0x162:
          goto LABEL_74;
        case 0x169:
          v135 = *(_QWORD **)v7;
          v136 = a2;
          v137 = v15;
          v138 = 1;
          goto LABEL_259;
        case 0x16B:
        case 0x16E:
        case 0x178:
        case 0x179:
        case 0x181:
        case 0x182:
          goto LABEL_229;
        case 0x170:
          v232 = *(_QWORD **)v7;
          v382 = *(_QWORD *)(*(_QWORD *)v7 + 88);
          v233 = *(unsigned int **)(*(_QWORD *)v15 + 16);
          v234 = *v233;
          v407[0] = v233 + 4;
          v407[1] = v234;
          v235 = *(_QWORD *)(v15 + 48);
          if ((unsigned __int16)v235 - 5 <= 0xFFFFFFFB)
          {
            sub_22E8FCA40(v232, *(_DWORD *)(v15 + 16), 0x11F5u, 0, (uint64_t)&v414);
            sub_22F2F2210((uint64_t)&v414, (uint64_t)v407);
            goto LABEL_143;
          }
          v248 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v248 && *(_BYTE *)(v248 + 16) == 39 && (*(_BYTE *)(v248 + 40) & 6) == 2)
          {
            *(_QWORD *)(v15 + 48) = v235 | 0x10000;
            sub_22E8FCA40(v232, *(_DWORD *)(v15 + 16), 0xD6Du, 0, (uint64_t)v404);
            sub_22E903BEC((unsigned int *)v404);
            LOWORD(v235) = *(_WORD *)(v15 + 48);
          }
          v387 = v232;
          if ((v235 & 0xFFFE) != 0)
            v249 = *(_QWORD *)(v15 + 88) & 0xFFFFFFFFFFFFFFFCLL;
          else
            v249 = 0;
          if ((unsigned __int16)v235 < 3uLL)
            v258 = 0;
          else
            v258 = *(_QWORD *)(v15 + 96) & 0xFFFFFFFFFFFFFFFCLL;
          if ((v235 & 0xFFFC) != 0)
            v259 = (unsigned __int8 *)(*(_QWORD *)(v15 + 104) & 0xFFFFFFFFFFFFFFFCLL);
          else
            v259 = 0;
          v260 = *(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFFCLL;
          v403 = v259;
          v402 = 0;
          if (sub_22F30C8B4(v387, v260, &v402))
            goto LABEL_184;
          v401 = 0;
          v400 = 0;
          v261 = sub_22F30CAA8(v387, v249, 0, &v401);
          v262 = v261 & sub_22F30CAA8(v387, v258, 1, &v400);
          v398 = 0;
          v399 = 0;
          v397 = 0;
          v263 = v403;
          if (!v403)
          {
            if ((v262 & 1) == 0)
              goto LABEL_184;
            v342 = 0;
            v343 = 0;
            v344 = 0;
            v390 = 0;
            goto LABEL_607;
          }
          if (*v403 != 225)
          {
            sub_22EFF605C((uint64_t)v403);
            sub_22E8FCA40(v387, v373, 0x11F4u, 0, (uint64_t)&v414);
            sub_22F2F37E0((uint64_t)&v414, (uint64_t *)&v403);
            sub_22E903BEC((unsigned int *)&v414);
            goto LABEL_184;
          }
          v264 = v262 ^ 1;
          v414 = v416;
          v415 = 0x400000000;
          v12 = *((unsigned int *)v403 + 4);
          if (!(_DWORD)v12)
          {
            v390 = 0;
            v344 = 0;
            v347 = 0;
            v346 = 0;
            goto LABEL_605;
          }
          v380 = v262 ^ 1;
          v265 = 0;
          v393 = 0;
          v266 = v403 + 20;
          v381 = -v12;
          v383 = v403 + 20;
          v385 = v403;
          v391 = *((unsigned int *)v403 + 4);
          break;
        case 0x17C:
        case 0x17D:
          goto LABEL_153;
        default:
          goto LABEL_192;
      }
      while (2)
      {
        v267 = (*v263 >> 21) & 7;
        if (v12 <= (int)v265 + 1)
          v268 = (v265 + 1);
        else
          v268 = v12;
        while (1)
        {
          v269 = v265;
          if (v267 == 4)
            v270 = *(_DWORD *)&v266[4 * v263[1] + 4 * v265];
          else
            v270 = v267 == 2
                 ? *(unsigned __int16 *)&v266[4 * v263[1] + 2 * v265]
                 : v266[4 * v263[1] + v265];
          if (v270 != 32)
            break;
          v265 = (v265 + 1);
          if ((_DWORD)v268 == (_DWORD)v265)
          {
            v388 = 0;
            v411[0] = __p;
            *(_OWORD *)&v411[1] = xmmword_22F44E330;
            v265 = v268;
            goto LABEL_471;
          }
        }
        v411[0] = __p;
        *(_OWORD *)&v411[1] = xmmword_22F44E330;
        if (v265 >= v12)
        {
          v388 = 0;
          v268 = v265;
        }
        else
        {
          v271 = 0;
          v272 = 0;
          v273 = v265;
          while (1)
          {
            v274 = (*v263 >> 21) & 7;
            if (v274 == 4)
              v275 = *(unsigned int *)&v266[4 * v263[1] + 4 * v269];
            else
              v275 = v274 == 2
                   ? *(unsigned __int16 *)&v266[4 * v263[1] + 2 * v269]
                   : v266[4 * v263[1] + v269];
            if (v275 == 44 || v275 <= 0x7F && (word_22F4ADB24[v275] & 7) != 0)
              break;
            if (v271 + 1 > v411[2])
            {
              v389 = v272;
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v272 = v389;
              v266 = v383;
              v263 = v385;
              v12 = v391;
              v271 = (char *)v411[1];
            }
            *((_BYTE *)v411[0] + (unint64_t)v271) = v275;
            v271 = (char *)++v411[1];
            v272 |= v275 > 0x7F;
            ++v269;
            v273 = (v273 + 1);
            if (v12 == v269)
            {
              v268 = v265;
              v265 = v12;
              goto LABEL_470;
            }
          }
          v268 = v265;
          v265 = v273;
LABEL_470:
          v388 = v272;
        }
LABEL_471:
        v276 = (uint64_t)v263;
        v277 = sub_22EFF9E30((uint64_t)v263, v268, *(uint64_t **)(v382 + 1992), *(_DWORD **)(v382 + 2000), *(_QWORD *)(v382 + 15088), 0, 0);
        v278 = sub_22EFF9E30(v276, v265, *(uint64_t **)(v382 + 1992), *(_DWORD **)(v382 + 2000), *(_QWORD *)(v382 + 15088), 0, 0);
        LOBYTE(v408) = v393;
        BYTE1(v408) = v388 & 1;
        *(_QWORD *)((char *)&v408 + 4) = v277 | (unint64_t)(v278 << 32);
        v279 = v411[1];
        if (v411[1] >= (void *)0x7FFFFFFFFFFFFFF8)
          abort();
        v280 = v411[0];
        if (v411[1] >= (void *)0x17)
        {
          v282 = ((unint64_t)v411[1] & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)v411[1] | 7) != 0x17)
            v282 = (unint64_t)v411[1] | 7;
          v283 = v282 + 1;
          v284 = v411[0];
          v285 = (__int128 *)operator new(v282 + 1);
          v280 = v284;
          v281 = v285;
          v410 = v283 | 0x8000000000000000;
          *(_QWORD *)&v409 = v285;
          *((_QWORD *)&v409 + 1) = v279;
        }
        else
        {
          HIBYTE(v410) = v411[1];
          v281 = &v409;
          if (!v411[1])
          {
LABEL_479:
            v279[(_QWORD)v281] = 0;
            sub_22EE91F70((uint64_t)&v414, (unint64_t)&v408);
            v12 = v391;
            if (v265 >= v391)
            {
              v393 = 1;
            }
            else
            {
              v286 = 0;
              v11 = (uint64_t)v385;
              v287 = (*v385 >> 21) & 7;
              v288 = v265;
              v289 = &v383[4 * v265];
              v290 = &v383[2 * v265];
              v291 = &v383[v265];
              while (1)
              {
                if (v287 == 4)
                {
                  v292 = v385[1];
                  v293 = *(_DWORD *)&v289[4 * v292 + 4 * v286];
                }
                else
                {
                  v292 = v385[1];
                  v293 = v287 == 2 ? *(unsigned __int16 *)&v290[4 * v292 + 2 * v286] : v291[4 * v292 + v286];
                }
                if (v293 > 0x7F)
                  break;
                if (v287 == 4)
                {
                  LOBYTE(v294) = v289[4 * v292 + 4 * v286];
                }
                else if (v287 == 2)
                {
                  v294 = *(_WORD *)&v290[4 * v292 + 2 * v286];
                }
                else
                {
                  LOBYTE(v294) = v291[4 * v292 + v286];
                }
                if ((word_22F4ADB24[v294] & 7) == 0)
                  break;
                ++v286;
                if (!(v381 + v265 + v286))
                {
                  v393 = 1;
                  v265 = v391;
                  goto LABEL_504;
                }
              }
              if (v287 == 4)
              {
                v295 = *(_DWORD *)&v383[4 * v265 + 4 * v292 + 4 * v286];
              }
              else if (v287 == 2)
              {
                v295 = *(unsigned __int16 *)&v383[4 * v292 + 2 * v265 + 2 * v286];
              }
              else
              {
                v295 = v383[4 * v292 + v265 + v286];
              }
              v393 = v295 != 44;
              if (v295 == 44)
                v288 = v265 + 1;
              v265 = (v288 + v286);
            }
LABEL_504:
            if (SHIBYTE(v410) < 0)
            {
              operator delete((void *)v409);
              v12 = v391;
            }
            if (v411[0] != __p)
            {
              free(v411[0]);
              v12 = v391;
            }
            v266 = v383;
            v263 = v385;
            if (v265 >= v12)
            {
              v296 = v415;
              v297 = v393;
              if (!(_DWORD)v415)
                v297 = 1;
              if ((v297 & 1) == 0)
              {
                v298 = sub_22EFF9E30((uint64_t)v385, v265, *(uint64_t **)(v382 + 1992), *(_DWORD **)(v382 + 2000), *(_QWORD *)(v382 + 15088), 0, 0);
                LOWORD(v411[0]) = 0;
                HIDWORD(v411[0]) = v298;
                LODWORD(v411[1]) = v298;
                *(_QWORD *)__p = 0;
                *(_QWORD *)&__p[8] = 0;
                v411[2] = 0;
                sub_22EE91F70((uint64_t)&v414, (unint64_t)v411);
                if ((__p[15] & 0x80000000) != 0)
                  operator delete(v411[2]);
                v296 = v415;
              }
              v299 = (char *)v414;
              if (v296)
              {
                v392 = a2;
                v384 = 0;
                v386 = 0;
                v300 = 0;
                v390 = 0;
                v301 = (char *)v414 + 40 * v296;
                v302 = (char *)v414 + 16;
                v303 = v380;
                do
                {
                  v305 = v302 - 16;
                  v304 = *((_QWORD *)v302 - 2);
                  DWORD2(v408) = *((_DWORD *)v302 - 2);
                  *(_QWORD *)&v408 = v304;
                  if (v302[23] < 0)
                  {
                    v307 = v303;
                    sub_22E3BB2B4(&v409, *(void **)v302, *((_QWORD *)v302 + 1));
                    v303 = v307;
                  }
                  else
                  {
                    v306 = *(_OWORD *)v302;
                    v410 = *((_QWORD *)v302 + 2);
                    v409 = v306;
                  }
                  if ((_BYTE)v408)
                  {
                    sub_22E8FCA40(v387, SDWORD1(v408), 0x11F2u, 0, (uint64_t)v411);
                    sub_22E8906A0((uint64_t)v411, (uint64_t *)((char *)&v408 + 4));
                    sub_22E903BEC((unsigned int *)v411);
                    v303 = 1;
                  }
                  if (BYTE1(v408))
                  {
                    sub_22E8FCA40(v387, SDWORD1(v408), 0x11F1u, 0, (uint64_t)v411);
                    sub_22E8906A0((uint64_t)v411, (uint64_t *)((char *)&v408 + 4));
                    sub_22E903BEC((unsigned int *)v411);
                    v303 = 1;
                  }
                  v308 = HIBYTE(v410) & 0x7F;
                  if (v410 < 0)
                    v308 = *((_QWORD *)&v409 + 1);
                  if (v308)
                  {
                    v309 = &v409;
                    if (v410 < 0)
                      v309 = (__int128 *)v409;
                    switch(v308)
                    {
                      case 5:
                        v310 = bswap32(*(_DWORD *)v309);
                        if (v310 == 1937011305)
                        {
                          v311 = *((unsigned __int8 *)v309 + 4) - 112;
                        }
                        else if (v310 < 0x73747269)
                        {
                          v311 = -1;
                        }
                        else
                        {
                          v311 = 1;
                        }
                        if (v311)
                          goto LABEL_572;
                        v324 = 1;
                        goto LABEL_579;
                      case 6:
                      case 7:
                      case 8:
                      case 9:
                      case 10:
                      case 12:
                        goto LABEL_572;
                      case 11:
                        v328 = *(_QWORD *)v309;
                        v329 = *(_QWORD *)((char *)v309 + 3);
                        if (v328 != 0x6E696F702D617369 || v329 != 0x7265746E696F702DLL)
                          goto LABEL_572;
                        if ((v384 & 1) != 0)
                        {
                          sub_22E8FCA40(v387, SDWORD1(v408), 0x11FAu, 0, (uint64_t)v411);
                          v396 = 1;
                          v331 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v331, (uint64_t *)((char *)&v408 + 4));
                          sub_22E903BEC((unsigned int *)v411);
                          sub_22E8FCA40(v387, v398, 0x179Fu, 0, (uint64_t)v411);
                          v396 = 1;
                          v332 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v332, &v398);
                          sub_22E903BEC((unsigned int *)v411);
                          v303 = 1;
                        }
                        v398 = *(_QWORD *)((char *)&v408 + 4);
                        v384 = 1;
                        break;
                      case 13:
                        v321 = *(_QWORD *)v309;
                        v322 = *(_QWORD *)((char *)v309 + 5);
                        if (v321 != 0x646E612D6E676973 || v322 != 0x687475612D646E61)
                          goto LABEL_572;
                        v324 = 3;
                        goto LABEL_579;
                      case 14:
                        v325 = *(_QWORD *)v309;
                        v326 = *(_QWORD *)((char *)v309 + 6);
                        if (v325 != 0x646E612D6E676973 || v326 != 0x70697274732D646ELL)
                          goto LABEL_572;
                        v324 = 2;
LABEL_579:
                        v390 = v324;
                        if (v300)
                        {
                          sub_22E8FCA40(v387, SDWORD1(v408), 0x11FAu, 0, (uint64_t)v411);
                          v396 = 0;
                          v334 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v334, (uint64_t *)((char *)&v408 + 4));
                          sub_22E903BEC((unsigned int *)v411);
                          sub_22E8FCA40(v387, v399, 0x179Fu, 0, (uint64_t)v411);
                          v396 = 0;
                          v335 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v335, &v399);
                          sub_22E903BEC((unsigned int *)v411);
                          v303 = 1;
                        }
                        v399 = *(_QWORD *)((char *)&v408 + 4);
                        v300 = 1;
                        break;
                      default:
                        if (v308 != 25
                          || ((v312 = *(_QWORD *)v309,
                               v313 = *((_QWORD *)v309 + 1),
                               v314 = *((_QWORD *)v309 + 2),
                               v315 = *((unsigned __int8 *)v309 + 24),
                               v312 == 0x69746E6568747561)
                            ? (v316 = v313 == 0x756E2D7365746163)
                            : (v316 = 0),
                              v316 ? (v317 = v314 == 0x65756C61762D6C6CLL) : (v317 = 0),
                              v317 ? (v318 = v315 == 115) : (v318 = 0),
                              !v318))
                        {
LABEL_572:
                          sub_22E8FCA40(v387, SDWORD1(v408), 0x11FFu, 0, (uint64_t)v411);
                          sub_22E90749C((uint64_t)v411, &v409);
                          goto LABEL_573;
                        }
                        if ((v386 & 1) != 0)
                        {
                          sub_22E8FCA40(v387, SDWORD1(v408), 0x11FAu, 0, (uint64_t)v411);
                          v396 = 1;
                          v319 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v319, (uint64_t *)((char *)&v408 + 4));
                          sub_22E903BEC((unsigned int *)v411);
                          sub_22E8FCA40(v387, v397, 0x179Fu, 0, (uint64_t)v411);
                          v396 = 1;
                          v320 = sub_22E8900C4((uint64_t)v411, &v396);
                          sub_22E8906A0(v320, &v397);
                          sub_22E903BEC((unsigned int *)v411);
                          v303 = 1;
                        }
                        v397 = *(_QWORD *)((char *)&v408 + 4);
                        v386 = 1;
                        break;
                    }
                  }
                  else
                  {
                    sub_22E8FCA40(v387, SDWORD1(v408), 0x11EDu, 0, (uint64_t)v411);
                    sub_22E8906A0((uint64_t)v411, (uint64_t *)((char *)&v408 + 4));
LABEL_573:
                    sub_22E903BEC((unsigned int *)v411);
                    v303 = 1;
                  }
                  if (SHIBYTE(v410) < 0)
                  {
                    v333 = v303;
                    operator delete((void *)v409);
                    v303 = v333;
                  }
                  v302 += 40;
                }
                while (v305 + 40 != v301);
                v344 = v300;
                LOBYTE(v380) = v303;
                v299 = (char *)v414;
                if ((_DWORD)v415)
                {
                  v345 = 40 * v415;
                  do
                  {
                    if (v299[v345 - 1] < 0)
                      operator delete(*(void **)&v299[v345 - 24]);
                    v345 -= 40;
                  }
                  while (v345);
                  v299 = (char *)v414;
                }
                a2 = v392;
                v346 = v384;
              }
              else
              {
                v346 = 0;
                v386 = 0;
                v344 = 0;
                v390 = 0;
              }
              if (v299 != (char *)v416)
                free(v299);
              v264 = v380;
              v347 = v386;
LABEL_605:
              if ((v264 & 1) != 0)
                goto LABEL_184;
              v343 = v347 & 1;
              v342 = v346 & 1;
LABEL_607:
              v349 = *(_QWORD *)(*(_QWORD *)v15 + 16);
              if (*(_DWORD *)v349 == 27
                && ((v350 = *(_QWORD *)(v349 + 16),
                     v351 = *(_QWORD *)(v349 + 24),
                     v352 = *(_QWORD *)(v349 + 32),
                     v353 = *(_QWORD *)(v349 + 35),
                     v350 == 0x7475617274705F5FLL)
                  ? (v354 = v351 == 0x6972747365725F68)
                  : (v354 = 0),
                    v354 ? (v355 = v352 == 0x746E695F64657463) : (v355 = 0),
                    v355 ? (v356 = v353 == 0x727470746E695F64) : (v356 = 0),
                    v356))
              {
                if (sub_22F40AAC0(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0), v382))
                  goto LABEL_627;
                v370 = *(_DWORD *)(v15 + 16);
                v371 = v387;
                v372 = 4603;
              }
              else
              {
                v357 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
                v358 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v357 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                if (v358 == 39
                  || ((v359 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v357 + 16) == 32)
                   || v358 == 32 && (v359 = sub_22F10CF48(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0))) != 0)
                  && sub_22E509ED0(v359)
                  || (*(_BYTE *)(v357 + 16) == 32
                   || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v357 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                   && (v357 = sub_22F10CF48(v357)) != 0)
                  && sub_22E509F54(v357))
                {
LABEL_627:
                  v360 = *a2;
                  v361 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFF0) + 8);
                  if ((v361 & 8) == 0 || (*(_BYTE *)((v361 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) == 0)
                  {
                    if ((*(_QWORD *)(v387[9] + 8) & 0x4000000000000000) != 0)
                    {
                      v362 = 4 * v390;
                      if (v401)
                        v363 = 3;
                      else
                        v363 = 1;
                      v364 = v363 | (v402 << 6);
                      if (!v344)
                        v362 = 12;
                      if (v342)
                        v365 = 16;
                      else
                        v365 = 0;
                      if (v343)
                        v366 = 32;
                      else
                        v366 = 0;
                      v367 = v366 | v365 | v362 | (v400 << 16) | v364;
                      if ((v367 & 0xC) != 0)
                      {
                        v368 = v387[11];
                        v414 = (void *)(v367 << 32);
                        v369 = sub_22E491354((unsigned int *)&v414, v360);
                        v360 = sub_22EF5DBC4(v368, v369, (uint64_t)v414);
                      }
                      *a2 = v360;
                      goto LABEL_386;
                    }
                    sub_22F30C83C(v387, *(_DWORD *)(v15 + 16), *(_QWORD *)(v15 + 16));
LABEL_99:
                    *(_QWORD *)(v15 + 48) |= 0x10000uLL;
                    goto LABEL_386;
                  }
                  sub_22E8FCA40(v387, *(_DWORD *)(v15 + 16), 0x11F9u, 0, (uint64_t)&v414);
                  v374 = sub_22E8901B8((uint64_t)&v414, a2);
                  v375 = *(unsigned int **)(*(_QWORD *)v15 + 16);
                  v376 = *v375;
                  v411[0] = v375 + 4;
                  v411[1] = (void *)v376;
                  sub_22F2F2210(v374, (uint64_t)v411);
LABEL_646:
                  sub_22E903BEC((unsigned int *)&v414);
                  goto LABEL_99;
                }
                v370 = *(_DWORD *)(v15 + 16);
                v371 = v387;
                v372 = 4600;
              }
              sub_22E8FCA40(v371, v370, v372, 0, (uint64_t)&v414);
              sub_22E8901B8((uint64_t)&v414, a2);
              goto LABEL_646;
            }
            continue;
          }
        }
        break;
      }
      memmove(v281, v280, (size_t)v279);
      goto LABEL_479;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x1CDu)
    {
      v66 = v28 + 114;
      if (v28 - 398 > 0x3F)
        goto LABEL_192;
      if (((1 << v66) & 0x8800002100408800) == 0)
      {
        if (((1 << v66) & 0x780000000000) != 0)
        {
          sub_22F114E70(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0));
          if ((v67 & 1) == 0)
          {
            v68 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v68 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 >= 4)
            {
              *(_QWORD *)&v404[0] = *a2;
              v69 = (_QWORD *)*((_QWORD *)v7 + 1);
              v414 = v7;
              v415 = v15;
              v416[0] = v404;
              v70 = v7[4];
              v71 = v70 + 1;
              v72 = 120 * v70;
              while (1)
              {
                do
                {
                  if (!v72)
                    goto LABEL_353;
                  v73 = v69[14];
                  v74 = *(_DWORD *)(v73 + v72 - 120);
                  --v71;
                  v72 -= 120;
                }
                while (v74 > 7);
                if (((1 << v74) & 0x31) != 0)
                  break;
                if (((1 << v74) & 0x82) != 0)
                  goto LABEL_353;
                if (v74 == 3)
                {
                  v75 = sub_22EE91B6C(v73, v71, 0);
                  if (!v75)
                    goto LABEL_353;
                  v76 = v75;
                  v77 = 1;
LABEL_352:
                  if (sub_22EE9211C((uint64_t *)&v414, v76, v77))
                    goto LABEL_388;
                  goto LABEL_353;
                }
              }
              v76 = (_DWORD *)(v73 + v72);
              v77 = 0;
              goto LABEL_352;
            }
          }
LABEL_353:
          v210 = (_QWORD *)*((_QWORD *)v7 + 1);
          v211 = *((_DWORD *)v210 + 20);
          v197 = v211 > 0x12;
          v212 = (1 << v211) & 0x4000E;
          if (v197 || v212 == 0)
          {
            v217 = 0;
          }
          else
          {
            v214 = (unsigned int *)(v210 + 15);
            if (a3 == 1)
              v214 = v7 + 4;
            v215 = 120 * *v214 - 120;
            do
            {
              v216 = v215 - 120;
              v217 = v215 == -120;
              if (v215 == -120)
                break;
              v218 = *(_DWORD *)(v210[14] + v215);
              v197 = v218 > 5;
              v219 = (1 << v218) & 0x27;
              v220 = v197 || v219 == 0;
              v215 = v216;
            }
            while (v220);
          }
          v221 = sub_22EE8A418(*(_QWORD **)v7, (uint64_t)v7, v15, a2, (0x3010200u >> ((8 * *(_BYTE *)(*(_QWORD *)(v15 + 72) + 8) + 56) & 0xF8)) & 3, *(_DWORD *)(v15 + 16), (~(*(unsigned __int16 *)(v15 + 28) | (*(unsigned __int8 *)(v15 + 30) << 16)) & 0x70000) == 0, v217, 0);
          v209 = *(_QWORD *)(v15 + 48);
          if (v221)
            v209 |= 0x10000uLL;
LABEL_387:
          *(_QWORD *)(v15 + 48) = v209 | 0x20000;
LABEL_388:
          v10 = *a2;
          if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) == 7)
          {
            v11 = *(_QWORD *)(v15 + 32);
            if (v11)
            {
              v229 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFF0) + 8);
              if (((v229 & 8) == 0 || (*(_WORD *)((v229 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1F0) == 0)
                && (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) | 8) != 0x149)
              {
                v230 = sub_22F369C08(*(_QWORD *)(*(_QWORD *)v7 + 88), v10, v11);
                *a2 = v230;
                v231 = *(_DWORD *)(v15 + 40);
                v414 = *(void **)(v230 & 0xFFFFFFFFFFFFFFF0);
                *((_DWORD *)sub_22F29449C((uint64_t)(v7 + 60), (uint64_t *)&v414) + 2) = v231;
              }
            }
          }
          goto LABEL_394;
        }
        if (((1 << v66) & 0x4000000000001) != 0)
        {
LABEL_153:
          if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) > 0x18Du)
          {
            if (v28 == 398)
              v109 = 32;
            else
              v109 = 37;
          }
          else
          {
            if (v28 == 380)
            {
              v108 = 28;
              LOBYTE(v109) = 28;
LABEL_211:
              v139 = *(_QWORD **)v7;
              v140 = *(_QWORD *)(*(_QWORD *)v7 + 88);
              *(_QWORD *)(v15 + 48) |= 0x20000uLL;
              v141 = sub_22E3CD3D4(v140 + 2032, 40, 3);
              v142 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)v141 = *(_OWORD *)v15;
              *(_OWORD *)(v141 + 16) = v142;
              v143 = *(_BYTE *)(v141 + 34);
              *(_WORD *)(v141 + 32) = v108;
              *(_BYTE *)(v141 + 34) = v143 & 0xE0;
              v405 = 0u;
              v406 = 0u;
              memset(v404, 0, sizeof(v404));
              v144 = *a2;
              v145 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
              if (v145)
              {
                v146 = *(_DWORD *)(v145 + 16);
                if (v146 == 7)
                {
                  v147 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
                  do
                  {
                    *(_QWORD *)((char *)v404 + (((unint64_t)(v146 >> 19) >> 3) & 0x3F8)) |= 1 << (v146 >> 19);
                    v144 = *(_QWORD *)(v147 + 32);
                    v147 = *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0);
                    v146 = *(_DWORD *)(v147 + 16);
                    if (v147)
                      v148 = *(_DWORD *)(v147 + 16) == 7;
                    else
                      v148 = 0;
                  }
                  while (v148);
                }
              }
              v149 = 1 << v109;
              if ((*(_QWORD *)&v404[0] & (1 << v109)) != 0)
              {
                sub_22E8FCA40(v139, *(_DWORD *)(v15 + 16), 0x197Cu, 0, (uint64_t)&v414);
                sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
LABEL_314:
                sub_22E903BEC((unsigned int *)&v414);
                goto LABEL_388;
              }
              v150 = *(_QWORD *)&v404[0] | v149;
              if ((~(LODWORD(v404[0]) | v149) & 0x30000000) == 0)
              {
                sub_22E8FCA40(v139, *(_DWORD *)(v15 + 16), 0xB34u, 0, (uint64_t)&v414);
                v227 = sub_22F2F30F4((uint64_t)&v414, (uint64_t)"'__ptr32'");
                sub_22F2F30F4(v227, (uint64_t)"'__ptr64'");
                goto LABEL_314;
              }
              if ((~v150 & 0x2100000000) == 0)
              {
                sub_22E8FCA40(v139, *(_DWORD *)(v15 + 16), 0xB34u, 0, (uint64_t)&v414);
                v228 = sub_22F2F30F4((uint64_t)&v414, (uint64_t)"'__sptr'");
                sub_22F2F30F4(v228, (uint64_t)"'__uptr'");
                goto LABEL_314;
              }
              if (*(_BYTE *)(*(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
                {
                  sub_22E8FCA40(v139, *(_DWORD *)(v15 + 16), 0xB0Du, 0, (uint64_t)&v414);
                  sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
                }
                else
                {
                  sub_22E8FCA40(v139, *(_DWORD *)(v15 + 16), 0xB18u, 0, (uint64_t)&v414);
                  v199 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
                  LODWORD(v411[0]) = 0;
                  sub_22E8900C4(v199, (int *)v411);
                }
                goto LABEL_314;
              }
              v151 = *(unsigned __int8 *)(*(_QWORD *)(v139[11] + 15088)
                                        + *(_QWORD *)(**(_QWORD **)(v139[11] + 15088) - 24));
              if (v151 == 64)
              {
                if ((v150 & 0x10000000) != 0)
                {
                  if ((v150 & 0x2000000000) != 0)
                    v153 = 25;
                  else
                    v153 = 24;
                  goto LABEL_375;
                }
              }
              else if (v151 == 32)
              {
                if ((v150 & 0x20000000) == 0)
                {
                  v152 = sub_22F10ACF8(v145);
                  if ((v150 & 0x2000000000) != 0)
                  {
                    v153 = 25;
                    goto LABEL_376;
                  }
                  goto LABEL_377;
                }
                v153 = 26;
LABEL_375:
                v152 = sub_22F10ACF8(v145);
LABEL_376:
                v223 = v139[11];
                v224 = sub_22EF5DEB0(v223, v152);
                v152 = sub_22EF5DD84(v223, v224, v153);
LABEL_377:
                v225 = *a2;
                v226 = sub_22EF5B848(v139[11], v152, 0);
                *a2 = sub_22EE90E74((uint64_t)v7, v141, v225, v226);
                *(_QWORD *)(v15 + 48) |= 0x20000uLL;
                goto LABEL_388;
              }
              v152 = sub_22F10ACF8(v145);
              goto LABEL_377;
            }
            v109 = 29;
          }
          v108 = v109;
          goto LABEL_211;
        }
LABEL_192:
        v125 = *(unsigned __int16 *)(v15 + 28) | (*(unsigned __int8 *)(v15 + 30) << 16);
        v126 = v125 & 0x70000;
        v127 = v125 & 0x5FFFF;
        v130 = v126 == 0x10000 || v127 == 327697 || v126 == 0x20000;
        if (a3 == 1 && v130)
        {
          sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), 6u, 0, (uint64_t)&v414);
          sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
          goto LABEL_325;
        }
        goto LABEL_388;
      }
LABEL_229:
      *(_QWORD *)(v15 + 48) |= 0x20000uLL;
      if (a3)
      {
        if (!sub_22EE90F00((uint64_t)v7, v15, a2))
        {
          v154 = (_QWORD *)*((_QWORD *)v7 + 1);
          v155 = v7[4];
          v156 = 120 * v155 - 120;
          do
          {
            v157 = v156 - 120;
            if (v156 == -120)
            {
              sub_22EE91BF4(*(_QWORD **)v7, v15, *a2);
              goto LABEL_388;
            }
            v158 = v154[14];
            v159 = *(_DWORD *)(v158 + v156);
            v156 -= 120;
          }
          while (v159 != 3);
          if (v155 == *((_DWORD *)v154 + 30))
            v160 = (_QWORD *)(*v154 + 24);
          else
            v160 = (_QWORD *)(v158 + 120 * v155 + 16);
          sub_22E817D2C(v160, v15);
          sub_22E828580(v158 + v157 + 144, v15);
        }
      }
      else
      {
        sub_22EE92570((uint64_t)v7, v10, v11);
        v161 = *(unsigned __int16 *)(v15 + 28) | (*(unsigned __int8 *)(v15 + 30) << 16);
        if ((v161 & 0x5FFFF) == 0x50011 || (v162 = v161 & 0x70000, v162 == 0x20000) || v162 == 0x10000)
        {
          v163 = v7[4];
          v164 = (_QWORD *)*((_QWORD *)v7 + 1);
          if (v163 == *((_DWORD *)v164 + 30))
            v165 = (_QWORD *)(*v164 + 24);
          else
            v165 = (_QWORD *)(v164[14] + 120 * v163 + 16);
          sub_22E817D2C(v165, v15);
          sub_22E828580((uint64_t)(v164 + 138), v15);
        }
        else
        {
          v166 = v7[4];
          v167 = (_QWORD *)*((_QWORD *)v7 + 1);
          if (v166 == *((_DWORD *)v167 + 30))
            v168 = (_QWORD *)(*v167 + 24);
          else
            v168 = (_QWORD *)(v167[14] + 120 * v166 + 16);
          if (!sub_22EE925F0((uint64_t)v7, v15, v168, a2))
          {
            v189 = v7[16];
            if (v189 >= v7[17])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v189 = v7[16];
            }
            *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v189) = v15;
            ++v7[16];
          }
        }
      }
      goto LABEL_388;
    }
    if (v28 != 462)
    {
      if (v28 == 479)
        goto LABEL_388;
      if (v28 == 480)
      {
        v97 = *(unsigned __int16 *)(v15 + 28) | (*(unsigned __int8 *)(v15 + 30) << 16);
        v98 = v97 & 0x70000;
        v99 = v97 & 0x5FFFF;
        v102 = v98 == 0x10000 || v99 == 327697 || v98 == 0x20000;
        if (a3 != 1 || !v102)
          goto LABEL_388;
        sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), 0x92u, 0, (uint64_t)&v414);
        v103 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
        *(_QWORD *)&v404[0] = *(_QWORD *)(v15 + 16);
        sub_22E8906A0(v103, (uint64_t *)v404);
        goto LABEL_314;
      }
      goto LABEL_192;
    }
    v120 = *(_QWORD **)v7;
    if (*(_WORD *)(v15 + 48) == 1)
    {
      v188 = sub_22EE7F62C(v120, *a2, (unsigned __int8 *)(*(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFFCLL), v12, *(_DWORD *)(v15 + 16));
      if (v188 >= 0x10)
        goto LABEL_300;
      goto LABEL_347;
    }
LABEL_298:
    sub_22E8FCA40(v120, *(_DWORD *)(v15 + 16), 0xB31u, 0, (uint64_t)&v414);
    v191 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
    LODWORD(v404[0]) = 1;
LABEL_345:
    sub_22E8900C4(v191, (int *)v404);
LABEL_346:
    sub_22E903BEC((unsigned int *)&v414);
LABEL_347:
    v209 = *(_QWORD *)(v15 + 48) | 0x10000;
    goto LABEL_387;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) > 0x8Eu)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x10Fu)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0xC6u)
      {
        if (v28 == 143)
          goto LABEL_386;
        if (v28 == 161 || v28 == 165)
        {
LABEL_74:
          v63 = *(_QWORD **)v7;
          v64 = *(_QWORD *)(*(_QWORD *)v7 + 72);
          v65 = *(_QWORD *)(v64 + 100);
          if ((v65 & 0x2000000000) == 0
            && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 <= 1)
          {
            v60 = *(_DWORD *)(v15 + 16);
            v57 = *(_QWORD **)v7;
            v61 = 2777;
LABEL_77:
            sub_22E8FCA40(v57, v60, v61, 0, (uint64_t)&v414);
LABEL_143:
            sub_22E903BEC((unsigned int *)&v414);
LABEL_144:
            *(_QWORD *)(v15 + 48) |= 0x10000uLL;
            goto LABEL_386;
          }
          if (v28 == 234)
            goto LABEL_386;
          if (v28 == 14)
          {
            if (*(_WORD *)(v15 + 48) != 1)
            {
              sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), 0xB31u, 0, (uint64_t)&v414);
              v104 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
              LODWORD(v404[0]) = 1;
              sub_22E8900C4(v104, (int *)v404);
              goto LABEL_143;
            }
            v78 = (unsigned __int8 *)(*(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFFCLL);
            LODWORD(v404[0]) = 0;
            if ((sub_22EE8A134(v63, v404, (uint64_t)v78, *(_DWORD *)(v15 + 16)) & 1) != 0)
            {
              v79 = sub_22E3CD3D4(v63[11] + 2032, 40, 3);
              v80 = v404[0];
              v81 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)v79 = *(_OWORD *)v15;
              *(_OWORD *)(v79 + 16) = v81;
              v82 = *(_BYTE *)(v79 + 34);
              *(_WORD *)(v79 + 32) = 0;
              *(_BYTE *)(v79 + 34) = v82 & 0xE0;
              *(_DWORD *)(v79 + 36) = v80;
              if ((v78[2] & 1) != 0)
              {
                v414 = (void *)sub_22EE90E74((uint64_t)v7, v79, *a2, *a2);
                v188 = sub_22F34B8AC(v63, (uint64_t *)&v414, v80, v78, *(_DWORD *)(v15 + 16));
              }
              else
              {
                v83 = sub_22F34B8AC(v63, a2, v80, v78, *(_DWORD *)(v15 + 16));
                if (v83 <= 0xF)
                  goto LABEL_99;
                v188 = sub_22EE90E74((uint64_t)v7, v79, *a2, v83);
              }
              if (v188 < 0x10)
                goto LABEL_144;
LABEL_300:
              *a2 = v188;
              goto LABEL_386;
            }
LABEL_184:
            *(_QWORD *)(v15 + 48) |= 0x10000uLL;
            goto LABEL_386;
          }
          v95 = *(_WORD *)(v15 + 28);
          if ((~(*(unsigned __int8 *)(v15 + 30) << 16) & 0x50000) != 0)
          {
            if ((v65 & 0x400000000) == 0)
              goto LABEL_146;
            LODWORD(v105) = v28 - 343;
            if (v105 >= 0xC)
              goto LABEL_179;
            v105 = (__int16)v105;
            v106 = &unk_22F49B468;
          }
          else
          {
            if ((*(_DWORD *)(v64 + 52) & 0x40000000) == 0)
            {
              if ((v65 & 0x2000000000) != 0)
              {
                v96 = sub_22E826B78(v15);
                goto LABEL_180;
              }
LABEL_179:
              v96 = 0;
LABEL_180:
              v123 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v123 & 8) != 0)
                v124 = *(_DWORD *)((v123 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              else
                v124 = 0;
              if (!sub_22EE8A0C4(v63, v124, v96, *(_DWORD *)(v15 + 16)))
              {
                *a2 = sub_22EF5DD84(v63[11], *a2, v96);
                goto LABEL_386;
              }
              goto LABEL_184;
            }
LABEL_146:
            LOWORD(v105) = v95 - 341;
            if ((unsigned __int16)(v95 - 341) >= 0xEu)
              goto LABEL_179;
            v105 = (__int16)v105;
            v106 = &unk_22F49B498;
          }
          v96 = v106[v105];
          goto LABEL_180;
        }
        goto LABEL_192;
      }
      v62 = v28 - 199;
      if (v62 > 0x38)
        goto LABEL_192;
      if (((1 << (v28 + 57)) & 0x6800100001) != 0)
        goto LABEL_74;
      if (v62 != 56)
        goto LABEL_192;
      goto LABEL_229;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x129u)
    {
      switch(*(_WORD *)(*(_QWORD *)(v15 + 72) + 8))
      {
        case 0x110:
          goto LABEL_229;
        case 0x111:
        case 0x114:
        case 0x115:
        case 0x116:
        case 0x117:
          goto LABEL_192;
        case 0x112:
          v91 = *(_QWORD **)v7;
          v92 = a2;
          v93 = v15;
          v94 = 6;
          goto LABEL_206;
        case 0x113:
          v91 = *(_QWORD **)v7;
          v92 = a2;
          v93 = v15;
          v94 = 5;
LABEL_206:
          sub_22EE90B34(v92, v93, v91, v94);
          goto LABEL_386;
        case 0x118:
          v131 = *(_QWORD *)(*(_QWORD *)v7 + 88);
          *(_QWORD *)(v15 + 48) |= 0x20000uLL;
          v132 = sub_22E3CD3D4(v131 + 2032, 40, 3);
          v133 = *(_OWORD *)(v15 + 16);
          *(_OWORD *)v132 = *(_OWORD *)v15;
          *(_OWORD *)(v132 + 16) = v133;
          v134 = *(_BYTE *)(v132 + 34);
          *(_WORD *)(v132 + 32) = 12;
          *(_BYTE *)(v132 + 34) = v134 & 0xE0;
          *a2 = sub_22EE90E74((uint64_t)v7, v132, *a2, *a2);
          *(_QWORD *)(v15 + 48) |= 0x20000uLL;
          *((_BYTE *)v7 + 264) = 1;
          goto LABEL_388;
        default:
          if (v28 != 291)
            goto LABEL_192;
          goto LABEL_229;
      }
    }
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x143u)
    {
      if (v28 != 298)
      {
        if (v28 == 321)
          goto LABEL_158;
        goto LABEL_192;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 72) + 1) & 1) == 0)
        goto LABEL_388;
      goto LABEL_229;
    }
    if (v28 != 324)
    {
      if (v28 == 329)
      {
LABEL_158:
        if ((sub_22EE8FF94((uint64_t)v7, v15, a2) & 1) != 0)
          goto LABEL_386;
        v110 = *a2;
        v111 = (_QWORD *)*((_QWORD *)v7 + 1);
        v112 = v7[4];
        v113 = v112 - 1;
        v114 = v7[4];
        while (1)
        {
          do
          {
            if (v113 == -1)
              goto LABEL_288;
            v115 = v114;
            v116 = v111[14];
            v117 = (int *)(v116 + 120 * v113);
            v118 = *v117;
            --v114;
            --v113;
          }
          while (*v117 > 7);
          if (((1 << v118) & 0xA2) != 0)
            goto LABEL_288;
          if (((1 << v118) & 0x11) != 0)
            break;
          if (v118 == 3)
          {
            if ((_DWORD)v112 != *((_DWORD *)v111 + 30)
              || *(_WORD *)(*(_QWORD *)(v15 + 72) + 8) != 329
              || (v119 = sub_22EE91B6C(v116, v115, 1)) == 0)
            {
LABEL_288:
              sub_22EE91BF4(*(_QWORD **)v7, v15, v110);
              goto LABEL_386;
            }
            v117 = v119;
LABEL_384:
            v222 = (_QWORD *)(*v111 + 24);
            goto LABEL_385;
          }
        }
        if ((_DWORD)v112 == *((_DWORD *)v111 + 30))
        {
          if (*(_WORD *)(*(_QWORD *)(v15 + 72) + 8) == 329)
            v201 = sub_22EE91B6C(v116, v114, 1);
          else
            v201 = 0;
          if (v201)
            v117 = v201;
          goto LABEL_384;
        }
        v222 = (_QWORD *)(v116 + 120 * v112 + 16);
LABEL_385:
        sub_22E817D2C(v222, v15);
        sub_22E828580((uint64_t)(v117 + 6), v15);
        goto LABEL_386;
      }
      goto LABEL_192;
    }
    v169 = *(_QWORD **)v7;
    if ((a3 - 1) <= 1)
    {
      sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), 0x1000u, 0, (uint64_t)&v414);
      v170 = *(unsigned int *)(v15 + 16);
      BYTE4(v404[1]) = 0;
      *(_QWORD *)((char *)v404 + 12) = 0;
      v405 = 0uLL;
      *((_QWORD *)&v404[1] + 1) = 0;
      LOBYTE(v406) = 0;
      *(_QWORD *)&v404[0] = v170 | (v170 << 32);
      BYTE8(v404[0]) = 1;
      v171 = sub_22E890748((uint64_t)&v414, v404);
      v172 = *(unsigned int *)(**((_QWORD **)v7 + 1) + 88);
      *(void **)((char *)&v411[1] + 4) = 0;
      BYTE4(v411[2]) = 0;
      v411[0] = (void *)(v172 | (v172 << 32));
      LOBYTE(v411[1]) = 0;
      *(_QWORD *)&__p[10] = 0;
      *(_QWORD *)&__p[15] = 0;
      strcpy(__p, "__kindof ");
      v413 = 9;
      sub_22E890748(v171, v411);
      if ((char)v413 < 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v405) < 0)
        operator delete(*((void **)&v404[1] + 1));
      sub_22E903BEC((unsigned int *)&v414);
      v169 = *(_QWORD **)v7;
    }
    v173 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
    v174 = *(unsigned __int8 *)(v173 + 16);
    if (v174 == 32)
      goto LABEL_308;
    if (v174 == 35)
    {
      v175 = v169[11];
      *(_QWORD *)(v15 + 48) |= 0x20000uLL;
      v86 = sub_22E3CD3D4(v175 + 2032, 40, 3);
      v87 = v86;
      v176 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v86 = *(_OWORD *)v15;
      *(_OWORD *)(v86 + 16) = v176;
      v89 = *(_BYTE *)(v86 + 34);
      v90 = 15;
      goto LABEL_257;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      v173 = sub_22F10CF48(v173);
      if (v173)
      {
LABEL_308:
        v196 = *(_QWORD *)(*(_QWORD *)(v173 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v196)
          v197 = *(unsigned __int8 *)(v196 + 16) - 35 > 0xFFFFFFFD;
        else
          v197 = 0;
        if (v197)
        {
          v198 = 0;
          goto LABEL_401;
        }
        v196 = sub_22F10CF48(v196);
        v198 = 0;
LABEL_400:
        if (!v196)
        {
          sub_22E8FCA40(v169, *(_DWORD *)(v15 + 16), 0xFFFu, 0, (uint64_t)&v414);
          sub_22E8901B8((uint64_t)&v414, a2);
          sub_22E903BEC((unsigned int *)&v414);
          *(_QWORD *)(v15 + 48) |= 0x10000uLL;
          goto LABEL_388;
        }
LABEL_401:
        v237 = *(_QWORD *)(v196 + 16);
        v236 = *(_QWORD *)(v196 + 24);
        v240 = (v237 & 0xFC000000) != 0
            || ((v238 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v236 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
              ? (v239 = *(_DWORD *)(v238 + 16) == 11)
              : (v239 = 0),
                !v239)
            || (*(_DWORD *)(v238 + 16) & 0xFF80000) != 114819072;
        v241 = sub_22EF667E8(v169[11], v236, (uint64_t *)(v196 + 48), (v237 >> 19) & 0x7F, (uint64_t *)(v196 + 48 + 8 * ((v237 >> 19) & 0x7F)), v237 >> 26, v240);
        if ((v198 & 1) == 0)
        {
          v241 = sub_22F36CC4C(v169[11], v241);
          for (i = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v255 + 40))
          {
            v255 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
            if (!v255)
              break;
            v256 = (*(_DWORD *)(v255 + 16) >> 19) - 33;
            if (v256 < 4)
            {
              sub_22EE924EC(v169[11], v15, (0x3010200u >> (8 * v256)) & 3);
              v378 = *(_WORD *)(v377 + 32);
              *(_BYTE *)(v377 + 34) |= 4u;
              *(_WORD *)(v377 + 32) = v378;
              v241 = sub_22EE90E74((uint64_t)v7, v377, v241, v241);
              break;
            }
          }
        }
        v242 = v169[11];
        *(_QWORD *)(v15 + 48) |= 0x20000uLL;
        v243 = sub_22E3CD3D4(v242 + 2032, 40, 3);
        v244 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)v243 = *(_OWORD *)v15;
        *(_OWORD *)(v243 + 16) = v244;
        v245 = *(_BYTE *)(v243 + 34);
        *(_WORD *)(v243 + 32) = 15;
        *(_BYTE *)(v243 + 34) = v245 & 0xE0;
        *a2 = sub_22EE90E74((uint64_t)v7, v243, *a2, v241);
        goto LABEL_388;
      }
      v173 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
    }
    v196 = sub_22E4EBB74(v173);
    v198 = 1;
    goto LABEL_400;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) > 0x2Bu)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) > 0x88u)
    {
      if (v28 != 137)
      {
        if (v28 == 142)
        {
          v107 = *(_QWORD **)v7;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 72) + 204) & 8) != 0)
          {
            if (*(_WORD *)(v15 + 48) == 2)
            {
              v188 = sub_22EE7FCAC(v107, *a2, (unsigned __int8 *)(*(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFFCLL), (unsigned __int8 *)(*(_QWORD *)(v15 + 88) & 0xFFFFFFFFFFFFFFFCLL), *(_DWORD *)(v15 + 16));
              if (v188 < 0x10)
                goto LABEL_386;
              goto LABEL_300;
            }
            sub_22E8FCA40(v107, *(_DWORD *)(v15 + 16), 0xB31u, 0, (uint64_t)&v414);
            v202 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
            LODWORD(v404[0]) = 2;
            sub_22E8900C4(v202, (int *)v404);
          }
          else
          {
            sub_22E8FCA40(v107, *(_DWORD *)(v15 + 16), 0xB9Du, 0, (uint64_t)&v414);
          }
LABEL_325:
          sub_22E903BEC((unsigned int *)&v414);
          goto LABEL_386;
        }
        goto LABEL_192;
      }
      goto LABEL_229;
    }
    v84 = v28 - 70;
    if (v84 > 0x3B)
      goto LABEL_187;
    if (((1 << (v28 - 70)) & 0xA0000800000001) != 0)
      goto LABEL_229;
    if (v84 == 31)
    {
      v135 = *(_QWORD **)v7;
      v136 = a2;
      v137 = v15;
      v138 = 0;
LABEL_259:
      sub_22EE90A98(v136, v137, v135, v138);
      goto LABEL_386;
    }
    if (v84 != 59)
    {
LABEL_187:
      if (v28 != 44)
        goto LABEL_192;
      goto LABEL_229;
    }
    if (a3 != 1 || !sub_22E8AD4A8(*((_QWORD *)v7 + 1)))
      goto LABEL_388;
    v85 = *(_QWORD *)(*(_QWORD *)v7 + 88);
    *(_QWORD *)(v15 + 48) |= 0x20000uLL;
    v86 = sub_22E3CD3D4(v85 + 2032, 40, 3);
    v87 = v86;
    v88 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v86 = *(_OWORD *)v15;
    *(_OWORD *)(v86 + 16) = v88;
    v89 = *(_BYTE *)(v86 + 34);
    v90 = 57;
LABEL_257:
    *(_WORD *)(v86 + 32) = v90;
    *(_BYTE *)(v86 + 34) = v89 & 0xE0;
    *a2 = sub_22EE90E74((uint64_t)v7, v87, *a2, *a2);
    goto LABEL_388;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) > 0x18u)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(v15 + 72) + 8) <= 0x1Eu)
    {
      if (v28 - 25 >= 2)
      {
        if (v28 == 30)
        {
          v56 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
          v57 = *(_QWORD **)v7;
          if ((*(_DWORD *)(v56 + 16) & 0x780000) != 0x280000
            || v56 == 0
            || *(_DWORD *)(v56 + 16) - 55 >= 2)
          {
            v60 = *(_DWORD *)(v15 + 16);
            v61 = 2794;
            goto LABEL_77;
          }
          v192 = v57[11];
          *(_QWORD *)(v15 + 48) |= 0x20000uLL;
          v193 = sub_22E3CD3D4(v192 + 2032, 40, 3);
          v194 = *(_OWORD *)(v15 + 16);
          *(_OWORD *)v193 = *(_OWORD *)v15;
          *(_OWORD *)(v193 + 16) = v194;
          v195 = *(_BYTE *)(v193 + 34);
          *(_WORD *)(v193 + 32) = 1;
          *(_BYTE *)(v193 + 34) = v195 & 0xE0;
          goto LABEL_299;
        }
        goto LABEL_192;
      }
      goto LABEL_229;
    }
    if (v28 != 31)
    {
      if (v28 != 41)
        goto LABEL_192;
      v120 = *(_QWORD **)v7;
      if (*(_WORD *)(v15 + 48) != 1)
        goto LABEL_298;
      v121 = (_DWORD *)(*(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFFCLL);
      if (*(unsigned __int8 *)v121 == 225)
      {
        v250 = v120[11];
        v251 = &v121[v121[1] + 5];
        v252 = ((*v121 >> 21) & 7u) * v121[4];
        v253 = sub_22E3CD3D4(v250 + 2032, 48, 3);
        sub_22F3801A4(v253, v250, (_OWORD *)v15, v251, v252);
        v188 = sub_22F36C7EC(*(_QWORD *)(*(_QWORD *)v7 + 88), v253, *a2);
        goto LABEL_300;
      }
      sub_22E8FCA40(v120, *(_DWORD *)(v15 + 16), 0xAE5u, 0, (uint64_t)&v414);
      v122 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
      LODWORD(v404[0]) = 2;
      sub_22E8900C4(v122, (int *)v404);
      goto LABEL_346;
    }
    v177 = *(_QWORD **)v7;
    v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 88) + 15088);
    if (((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v178 + 568))(v178, "sve", 3) & 1) == 0)
    {
      sub_22E8FCA40(v177, *(_DWORD *)(v15 + 16), 0xB28u, 0, (uint64_t)&v414);
      v247 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
      sub_22F2F30F4(v247, (uint64_t)"'sve'");
      goto LABEL_346;
    }
    v179 = v177[9];
    v180 = *(_DWORD *)(v179 + 216);
    if (!v180 || v180 != *(_DWORD *)(v179 + 220))
    {
      sub_22E8FCA40(v177, *(_DWORD *)(v15 + 16), 0xAE9u, 0, (uint64_t)&v414);
      sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
      goto LABEL_346;
    }
    if (*(_WORD *)(v15 + 48) != 1)
    {
      sub_22E8FCA40(v177, *(_DWORD *)(v15 + 16), 0xB31u, 0, (uint64_t)&v414);
      v191 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
      LODWORD(v404[0]) = 1;
      goto LABEL_345;
    }
    DWORD2(v404[0]) = 32;
    *(_QWORD *)&v404[0] = 0;
    BYTE12(v404[0]) = 1;
    if (sub_22EE91E28(v177, v15, (uint64_t)v404))
    {
      v181 = v404;
      if (DWORD2(v404[0]) >= 0x41)
        v181 = *(_DWORD **)&v404[0];
      LODWORD(v411[0]) = *v181;
      if (LODWORD(v411[0]) == *(_DWORD *)(v177[9] + 216) << 7)
      {
        v182 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
        v183 = *(_QWORD *)(*(_QWORD *)(v182 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v183
          && *(_DWORD *)(v183 + 16) == 11
          && ((v184 = ((*(_DWORD *)(v183 + 16) >> 19) & 0x1FF) - 48,
               v197 = v184 > 0x30,
               v185 = (1 << v184) & 0x1000000000FFFLL,
               !v197)
            ? (v186 = v185 == 0)
            : (v186 = 1),
              !v186))
        {
          v336 = sub_22F1113D8(v182, v177[11]);
          v337 = sub_22EF5CDF0(v177[11], *(_QWORD *)(v336 & 0xFFFFFFFFFFFFFFF0));
          if ((*(_DWORD *)(v183 + 16) & 0xFF80000) == 0x3000000)
          {
            v338 = sub_22EF5CDF0(v177[11], *(_QWORD *)(*(_QWORD *)(v177[11] + 16408) & 0xFFFFFFFFFFFFFFF0));
            v339 = sub_22EF5CDF0(v177[11], *(_QWORD *)(*(_QWORD *)(v177[11] + 16408) & 0xFFFFFFFFFFFFFFF0));
            v340 = 8;
            v341 = LODWORD(v411[0]) / (unint64_t)(v339 * v338);
          }
          else
          {
            v340 = 7;
            v341 = LODWORD(v411[0]) / v337;
          }
          LODWORD(v411[0]) = v341;
          *a2 = sub_22F36B7E4(v177[11], v336, v341, v340);
        }
        else
        {
          sub_22E8FCA40(v177, *(_DWORD *)(v15 + 16), 0xB03u, 0, (uint64_t)&v414);
          v187 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
          sub_22E8901B8(v187, a2);
          sub_22E903BEC((unsigned int *)&v414);
          *(_QWORD *)(v15 + 48) |= 0x10000uLL;
        }
      }
      else
      {
        sub_22E8FCA40(v177, *(_DWORD *)(v15 + 16), 0xAECu, 0, (uint64_t)&v414);
        v246 = sub_22E89519C((uint64_t)&v414, (unsigned int *)v411);
        LODWORD(v408) = *(_DWORD *)(v177[9] + 216) << 7;
        sub_22E89519C(v246, (unsigned int *)&v408);
        sub_22E903BEC((unsigned int *)&v414);
        *(_QWORD *)(v15 + 48) |= 0x10000uLL;
      }
    }
    if (DWORD2(v404[0]) >= 0x41 && *(_QWORD *)&v404[0])
      MEMORY[0x2348A0E84](*(_QWORD *)&v404[0], 0x1000C8000313F17);
LABEL_386:
    v209 = *(_QWORD *)(v15 + 48);
    goto LABEL_387;
  }
  if (v28 - 1 < 2)
    goto LABEL_229;
  if (v28 != 11)
  {
    if (v28 == 14)
      goto LABEL_74;
    goto LABEL_192;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    if (*(_WORD *)(v15 + 48) == 1)
    {
      v415 = 0;
      v414 = 0;
      if (sub_22EA472B0(*(_QWORD *)v7, v15, 0, (uint64_t *)&v414, 0))
      {
        v193 = sub_22F37BB20(*(_QWORD *)(*(_QWORD *)v7 + 88), v414, v415, (_OWORD *)v15);
LABEL_299:
        v188 = sub_22EE90E74((uint64_t)v7, v193, *a2, *a2);
        goto LABEL_300;
      }
    }
    else
    {
      sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v15 + 16), 0xB31u, 0, (uint64_t)&v414);
      v379 = sub_22E8D2984((uint64_t)&v414, (uint64_t *)v15);
      LODWORD(v404[0]) = 1;
      sub_22E8900C4(v379, (int *)v404);
      sub_22E903BEC((unsigned int *)&v414);
      *(_QWORD *)(v15 + 48) |= 0x10000uLL;
    }
  }
  return sub_22E80F94C(v394);
}

unint64_t sub_22EE8F87C(_QWORD **a1, unint64_t a2, void **a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  int *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int32 v48;
  void **v49;
  void *v50;
  uint64_t v51;
  unsigned __int32 v52;
  unint64_t v53;
  void **v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v63;
  __n128 v67;
  uint64_t v68;
  _OWORD v69[2];
  __n128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[256];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = (int *)a1[1];
  v63 = *(_DWORD *)(a5 + 4);
  v9 = *(_DWORD *)(a5 + 16);
  v10 = v8[421];
  v11 = (*a1)[11];
  v12 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80));
  v13 = 0;
  if (v12)
    v14 = v12 + 40;
  else
    v14 = 0;
  v15 = *(_DWORD *)(*(_QWORD *)v8 + 120);
  v16 = v8[16];
  if (!v8[10])
    v13 = *((_QWORD *)v8 + 6);
  v17 = sub_22E8FCBA8((uint64_t)v7, v13);
  v18 = sub_22EFEAF4C(v11, v14, v15, v16, v63, v9, v17, 0, v10 != 0, *(_QWORD *)(a4 + 40) != 0, 0);
  *(_DWORD *)(v18 + 28) |= 0x200u;
  v19 = *(_DWORD *)(a5 + 16);
  if (v19 >= *(_DWORD *)(a5 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(a5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8 * v19) = v18;
  ++*(_DWORD *)(a5 + 16);
  v20 = (uint64_t *)a3;
  if (!*(_QWORD *)(a4 + 40))
    goto LABEL_40;
  if (!a3)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v8 + 8);
    v78 = v80;
    v79 = 0x800000000;
    v81 = 0;
    if (*(_DWORD *)(v21 + 36)
      && (v22 = *(unsigned int *)(v21 + 44),
          *(_QWORD *)&v72 = v21 + 56,
          *((_QWORD *)&v72 + 1) = v22,
          sub_22ED58288((uint64_t)v7, (uint64_t)&v72, (uint64_t)&v78),
          !v8[421])
      && (_DWORD)v79)
    {
      v23 = v78;
      v24 = 32 * v79;
      while (1)
      {
        v25 = v23[1];
        v69[0] = *v23;
        v69[1] = v25;
        if (sub_22EE734A8((uint64_t)v7, (uint64_t)v69, 20))
          break;
        v23 += 2;
        v24 -= 32;
        if (!v24)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      if (*(_QWORD *)(*(_QWORD *)v8 + 64))
      {
        v26 = sub_22F0ABC50((uint64_t *)(*(_QWORD *)v8 + 64), v7[11]);
        v27 = v51;
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
      v52 = *(_DWORD *)(v21 + 4);
      v67.n128_u64[0] = *(_QWORD *)(v21 + 8);
      v67.n128_u32[2] = v52;
      sub_22EFC6D6C((uint64_t)&v68, v67.n128_i64[0]);
      *(_QWORD *)&v72 = *(_QWORD *)(v21 + 24);
      v53 = sub_22F0F08CC((uint64_t *)&v72);
      if (*(_DWORD *)(v21 + 36))
        v54 = &v78;
      else
        v54 = 0;
      sub_22F34561C((uint64_t)v7, v26, v27, &v67, v53, (uint64_t)v54, v18, v8[421]);
    }
    v50 = v78;
    if (v78 != v80)
      goto LABEL_39;
    goto LABEL_40;
  }
  v78 = *a3;
  v79 = (uint64_t)(a3 + 1);
  sub_22F116CD8((uint64_t *)&v78);
  v30 = v28;
  v31 = v29;
  v78 = v80;
  v32 = *(_QWORD *)(v29 + 40);
  v79 = 0x800000000;
  v81 = v32;
  if (!*(_DWORD *)(v28 + 20))
  {
    v33 = v32;
LABEL_27:
    v45 = *(_QWORD *)(v31 + 8);
    v46 = *(_QWORD *)(v31 + 16);
    v47 = *(_QWORD *)(v30 + 40);
    v48 = *(_DWORD *)(v31 + 28);
    v70.n128_u64[0] = *(_QWORD *)(v47 + 40);
    v70.n128_u32[2] = v48;
    sub_22EFC6D6C((uint64_t)&v71, v70.n128_i64[0]);
    if (v33)
      v49 = &v78;
    else
      v49 = 0;
    sub_22F34561C((uint64_t)v7, v45, v46, &v70, v47, (uint64_t)v49, v18, v8[421]);
    goto LABEL_31;
  }
  v34 = 0;
  v35 = 0;
  v36 = (__int128 *)(v28 + 48);
  v37 = v29 + 56;
  do
  {
    if (!v8[421] && (v35 & 1) == 0)
    {
      v38 = *(_QWORD *)(v37 + 8 * v34);
      v39 = *((_QWORD *)v36 + 2);
      v75 = *v36;
      v76 = v39;
      v77 = v38;
      v35 = sub_22EE734A8((uint64_t)v7, (uint64_t)&v75, 20);
    }
    v40 = *(_QWORD *)(v37 + 8 * v34);
    v41 = *((_QWORD *)v36 + 2);
    v72 = *v36;
    v73 = v41;
    v74 = v40;
    v42 = (_OWORD *)sub_22E78DF7C((uint64_t)&v78, (unint64_t)&v72, 1);
    v43 = (char *)v78 + 32 * v79;
    v44 = v42[1];
    *v43 = *v42;
    v43[1] = v44;
    LODWORD(v79) = v79 + 1;
    ++v34;
    v36 = (__int128 *)((char *)v36 + 24);
  }
  while (v34 < *(unsigned int *)(v30 + 20));
  v20 = (uint64_t *)a3;
  if ((v35 & 1) == 0)
  {
    v33 = *(_DWORD *)(v31 + 40);
    goto LABEL_27;
  }
LABEL_31:
  v50 = v78;
  if (v78 != v80)
LABEL_39:
    free(v50);
LABEL_40:
  v55 = *(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0;
  v56 = sub_22F347374(*a1, a2, v55);
  v57 = sub_22F10D774(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v57)
  {
    v58 = *((unsigned int *)a1 + 24);
    if ((_DWORD)v58)
    {
      v59 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
      v60 = a1[11];
      v61 = 16 * v58;
      do
      {
        if (*v60 == v57)
          *v60 = v59;
        v60 += 2;
        v61 -= 16;
      }
      while (v61);
    }
    *((_BYTE *)a1 + 232) = 0;
  }
  if (v20)
    sub_22F3473DC(v7, v20, v55);
  return v56;
}

uint64_t sub_22EE8FCF4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  v2 = v3;
  if ((v3 & 4) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    v1 = *(_QWORD *)v5;
    v4 = *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8);
  }
  else
  {
    v4 = v1 + 8 * (v2 > 7);
  }
  while (1)
  {
    if (v1 == v4)
      return 0;
    v6 = *(_WORD **)(*(_QWORD *)v1 + 72);
    if (v6[4] == 340)
      break;
    v1 += 8;
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 56))(*(_QWORD *)(*(_QWORD *)v1 + 72));
}

unsigned int *sub_22EE8FD58(unsigned int *result, _DWORD *a2, int *a3, uint64_t a4, int a5, unsigned int a6)
{
  unsigned int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const char *v30;
  unsigned int v31[24];
  uint64_t v32;
  _DWORD v33[12];
  uint64_t v34;

  v9 = result;
  v10 = 0;
  v34 = *MEMORY[0x24BDAC8D0];
  v32 = a4;
  v11 = a2[36];
  v12 = a2[37];
  v33[0] = 1;
  v33[1] = v11;
  v33[2] = 2;
  v33[3] = v12;
  v13 = a2[38];
  v14 = a2[39];
  v33[4] = 4;
  v33[5] = v13;
  v33[6] = 16;
  v33[7] = v14;
  v15 = a2[51];
  v33[8] = 64;
  v33[9] = v15;
  v33[10] = 32;
  v33[11] = v15;
  do
  {
    v16 = v33[v10];
    if ((v16 & a5) != 0)
    {
      v17 = *a3;
      if (v9[2670] <= v9[2989] && (*a3 & v16) != 0)
      {
        v19 = v33[v10 + 1];
        sub_22E8FCA40(v9, v33[v10 + 1], a6, 0, (uint64_t)v31);
        v30 = sub_22F2F2F58(v16);
        v20 = sub_22E8AECC4((uint64_t)v31, (uint64_t *)&v30);
        v21 = sub_22E8901B8(v20, &v32);
        v25 = 0;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        __p = 0;
        v29 = 0;
        v22 = v19 | (v19 << 32);
        v23 = 1;
        sub_22E890748(v21, &v22);
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
        result = sub_22E903BEC(v31);
        v17 = *a3;
      }
      *a3 = v17 & ~v16;
    }
    v10 += 2;
  }
  while (v10 != 12);
  return result;
}

unsigned int *sub_22EE8FEF4(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12[24];

  *(_QWORD *)(a2 + 48) |= 0x10000uLL;
  if ((*(_QWORD *)(a1[9] + 100) & 0x4000000000) != 0)
    a4 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 16), 0xEDEu, 0, (uint64_t)v12);
  v11 = *(_QWORD *)(a2 + 16);
  v6 = sub_22E8906A0((uint64_t)v12, &v11);
  v10 = *(_QWORD *)a2;
  v7 = sub_22E8BAE44(v6, &v10);
  v9 = *(_QWORD *)sub_22F1D5FAC(a4);
  sub_22E8AECC4(v7, &v9);
  return sub_22E903BEC(v12);
}

uint64_t sub_22EE8FF94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v55;
  int v56;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  signed int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  _BYTE *v111;
  uint64_t v112;
  char v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  _QWORD *v118;
  unsigned __int8 *v119;
  int v120;
  int v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;

  if (*(_WORD *)(*(_QWORD *)(a2 + 72) + 8) == 321)
  {
    v6 = *a3;
    v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    v8 = v7 > 0x27;
    v9 = (1 << v7) & 0x8100000400;
    if (!v8 && v9 != 0)
    {
      v11 = *(_QWORD **)a1;
      v12 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v12 & 8) != 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) != 0)
      {
        v13 = *(_DWORD *)(a2 + 16);
        v14 = *(_QWORD **)a1;
        v15 = 2822;
LABEL_9:
        sub_22E8FCA40(v14, v13, v15, 0, (uint64_t)&v125);
LABEL_24:
        sub_22E903BEC(&v125);
LABEL_25:
        *(_QWORD *)(a2 + 48) |= 0x10000uLL;
        return 1;
      }
      if (!*(_WORD *)(a2 + 48) || (v26 = *(_QWORD *)(a2 + 80), (v26 & 2) == 0))
      {
        v24 = *(_DWORD *)(a2 + 16);
        v25 = *(_QWORD **)a1;
        goto LABEL_23;
      }
      if ((*(_WORD *)(a2 + 48) & 0xFFFE) != 0)
      {
        sub_22E8FCA40(*(_QWORD **)a1, *(_DWORD *)(a2 + 16), 0xB31u, 0, (uint64_t)&v125);
        v39 = sub_22E8D2984((uint64_t)&v125, (uint64_t *)a2);
        v28 = 1;
        LODWORD(v122) = 1;
        sub_22E8900C4(v39, (int *)&v122);
        sub_22E903BEC(&v125);
        *(_QWORD *)(a2 + 48) |= 0x10000uLL;
        return v28;
      }
      v40 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      v122 = (const char *)v40;
      v41 = *(_QWORD *)(v40 + 16);
      if (*(_DWORD *)v41 == 6)
      {
        v55 = *(_DWORD *)(v41 + 16);
        v56 = *(unsigned __int16 *)(v41 + 20);
        if (v55 == 1869771891 && v56 == 26478)
        {
          v42 = 2;
LABEL_148:
          *a3 = sub_22F369084(v11[11], v6, v42);
          if (*(_DWORD *)(a2 + 16))
          {
            v69 = sub_22E3CD3D4(v11[11] + 2032, 48, 3);
            v106 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v69 = *(_OWORD *)a2;
            *(_OWORD *)(v69 + 16) = v106;
            v107 = *(_BYTE *)(v69 + 34);
            *(_WORD *)(v69 + 32) = 13;
            *(_BYTE *)(v69 + 34) = v107 & 0xE0;
            *(_QWORD *)(v69 + 40) = v40;
            v74 = *a3;
            v73 = a1;
            v72 = v6;
LABEL_98:
            *a3 = sub_22EE90E74(v73, v69, v72, v74);
          }
          return 1;
        }
      }
      else if (*(_DWORD *)v41 == 4 && *(_DWORD *)(v41 + 16) == 1801545079)
      {
        v42 = 1;
        goto LABEL_148;
      }
      sub_22E8FCA40(v11, *(_DWORD *)(a2 + 16), 0x188Cu, 0, (uint64_t)&v125);
      v49 = sub_22E8D2984((uint64_t)&v125, (uint64_t *)a2);
      v50 = (uint64_t *)&v122;
LABEL_71:
      sub_22E8BAE44(v49, v50);
      goto LABEL_24;
    }
    return 0;
  }
  v16 = *a3 & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)v16;
  v18 = *(_DWORD *)(*(_QWORD *)v16 + 16);
  if ((v18 & 0x400) != 0
    || (LOBYTE(v125) = 0, (v19 = sub_22F110500((uint64_t)&v125, v17)) != 0)
    && *(_QWORD *)(v19 + 24) <= 0xFuLL
    && (*(_BYTE *)(v19 + 17) & 4) == 0)
  {
    v20 = 0;
    goto LABEL_15;
  }
  if (v18 == 39)
    goto LABEL_30;
  v29 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)v29 + 16) == 39)
  {
    v17 = sub_22F10CF48(v17);
    if (v17)
    {
LABEL_30:
      v28 = 0;
      v30 = (uint64_t *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
      v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v31 == 10 || v31 == 32)
        return v28;
      if (sub_22F115064(*v30) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        return 0;
      v20 = 1;
      goto LABEL_62;
    }
    v17 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
    v29 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  v20 = 0;
  v51 = *(unsigned __int8 *)(*(_QWORD *)v29 + 16);
  if (v51 != 10 && v51 != 32)
  {
    v20 = 0;
    v28 = 0;
    if (!sub_22F115064(v17))
      return v28;
  }
LABEL_62:
  v52 = *(_DWORD *)(a1 + 16);
  v53 = *(_QWORD *)(a1 + 8);
  if (v52 == *(_DWORD *)(v53 + 120) && sub_22EE91B6C(*(_QWORD *)(v53 + 112), v52, 1))
    return 0;
LABEL_15:
  v21 = *(_QWORD *)a1;
  v22 = *(_DWORD *)(a2 + 16);
  if (v22 < 0)
    v22 = sub_22F1E25A4(*(_QWORD **)(v21 + 112), *(_DWORD *)(a2 + 16));
  if (!*(_WORD *)(a2 + 48) || (v23 = *(_QWORD *)(a2 + 80), (v23 & 2) == 0))
  {
    v24 = v22;
    v25 = (_QWORD *)v21;
LABEL_23:
    sub_22E8FCA40(v25, v24, 0xAE5u, 0, (uint64_t)&v125);
    v27 = sub_22E8D2984((uint64_t)&v125, (uint64_t *)a2);
    LODWORD(v122) = 2;
    sub_22E8900C4(v27, (int *)&v122);
    goto LABEL_24;
  }
  v32 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  v124 = v32;
  v33 = *(int **)(v32 + 16);
  v34 = *v33;
  if (*v33 == 13)
  {
    v43 = *((_QWORD *)v33 + 2);
    v44 = *(_QWORD *)((char *)v33 + 21);
    if (v43 != 0x656C65726F747561 || v44 != 0x676E697361656C65)
      goto LABEL_57;
    v35 = 0;
    v38 = 0;
    v37 = 4;
    goto LABEL_74;
  }
  if (v34 == 6)
  {
    v46 = v33[4];
    v47 = *((unsigned __int16 *)v33 + 10);
    if (v46 != 1869771891 || v47 != 26478)
      goto LABEL_57;
    v35 = 0;
    v38 = 0;
    v37 = 2;
LABEL_74:
    v36 = 1;
    goto LABEL_75;
  }
  if (v34 != 4)
    goto LABEL_57;
  if (v33[4] == 1701736302)
  {
    v38 = 0;
    v35 = 1;
    v36 = 1;
    v37 = 1;
    goto LABEL_75;
  }
  if (v33[4] != 1801545079)
  {
LABEL_57:
    sub_22E8FCA40((_QWORD *)v21, v22, 0x188Cu, 0, (uint64_t)&v125);
    v49 = sub_22E8D2984((uint64_t)&v125, (uint64_t *)a2);
    v50 = &v124;
    goto LABEL_71;
  }
  v35 = 0;
  v36 = 0;
  v37 = 3;
  v38 = 1;
LABEL_75:
  if (v36)
  {
    if ((*(_WORD *)(*(_QWORD *)(v21 + 72) + 148) & 2) == 0 && v35 == 0)
      return 1;
  }
  v59 = *a3;
  if ((*a3 & 8) != 0)
  {
    v61 = *(_QWORD **)(*a3 & 0xFFFFFFFFFFFFFFF0);
    v60 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) | *a3 & 7;
  }
  else
  {
    v60 = *a3 & 7;
    v61 = (_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
  }
  v62 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v62 & 8) == 0 || (v63 = (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7) == 0)
  {
    v121 = v38;
LABEL_95:
    v67 = (uint64_t)v61;
    if (!v20)
      goto LABEL_96;
LABEL_116:
    v82 = *(unsigned int **)(*(_QWORD *)a2 + 16);
    v83 = *v82;
    v122 = (const char *)(v82 + 4);
    v123 = v83;
    switch(v37)
    {
      case 4:
        v122 = "__autoreleasing";
        v84 = 15;
        break;
      case 3:
        v122 = "__weak";
        v84 = 6;
        break;
      case 2:
        v122 = "__strong";
        v84 = 8;
        break;
      default:
        goto LABEL_156;
    }
    v123 = v84;
LABEL_156:
    sub_22E8FCA40((_QWORD *)v21, v22, 0x1B96u, 0, (uint64_t)&v125);
    v108 = sub_22F2F2210((uint64_t)&v125, (uint64_t)&v122);
    v109 = v108;
    if (*(_BYTE *)(v108 + 80))
    {
      v110 = *(unsigned __int8 **)(v108 + 32);
      if (!v110)
      {
        v110 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v109 + 40));
        *(_QWORD *)(v109 + 32) = v110;
      }
      v110[*v110 + 1] = 2;
      v111 = *(_BYTE **)(v109 + 32);
    }
    else
    {
      if (!*(_BYTE *)(v108 + 92))
      {
LABEL_162:
        sub_22E8901B8(v109, a3);
        sub_22E903BEC(&v125);
        if ((*(_WORD *)(*(_QWORD *)(v21 + 72) + 148) & 2) != 0)
          v113 = 0;
        else
          v113 = v35;
        if ((v113 & 1) != 0)
          goto LABEL_97;
        v77 = *a3;
        v76 = *a3;
        if (v22)
          goto LABEL_124;
        goto LABEL_125;
      }
      v114 = (uint64_t *)(*(_QWORD *)v108 + 12784);
      v115 = *(_QWORD *)(v108 + 16);
      if (v115)
        v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 32))(v115);
      v129 = v115;
      v116 = sub_22F2F1D6C(v114, &v129)[1] + 32 * *(unsigned int *)(v109 + 88);
      v119 = *(unsigned __int8 **)(v116 + 8);
      v118 = (_QWORD *)(v116 + 8);
      v117 = v119;
      if (!v119)
      {
        v117 = (unsigned __int8 *)sub_22E3B8AAC(v118[1]);
        *v118 = v117;
      }
      v117[*v117 + 1] = 2;
      v111 = (_BYTE *)*v118;
    }
    v112 = *v111;
    *v111 = v112 + 1;
    *(_QWORD *)&v111[8 * v112 + 16] = 2;
    goto LABEL_162;
  }
  while (1)
  {
    v64 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
    v65 = *(_DWORD *)(v64 + 16);
    if (!v64 || v65 != 7)
      break;
    if (*(_DWORD *)(v64 + 16) >> 19 == 60)
    {
      sub_22E8FCA40((_QWORD *)v21, v22, 0xAD5u, 0, (uint64_t)&v125);
      sub_22E8901B8((uint64_t)&v125, a3);
      v85 = &v125;
      goto LABEL_121;
    }
LABEL_93:
    v59 = *(_QWORD *)(v64 + 32);
  }
  if (v64 && v65 == 37)
    goto LABEL_93;
  v121 = v38;
  if (v63 == v37)
    goto LABEL_95;
  v120 = v37;
  do
  {
    v67 = (uint64_t)v61;
    v78 = sub_22F10D19C((uint64_t)v61);
    v61 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF0);
    if ((v78 & 8) != 0)
    {
      v61 = (_QWORD *)*v61;
      v79 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v78 & 7;
    }
    else
    {
      v79 = v78 & 7;
    }
    LODWORD(v80) = v60 & 0xFFFFF9FF | v79;
    v81 = (v60 >> 9) & 3;
    if ((int)((v79 >> 9) & 3) > v81)
      LOBYTE(v81) = (v79 >> 9) & 3;
    if ((v60 & 0x600) != 0)
      v80 = v60 & 0xFFFFF9FF | v79 & 0xFFFFF9FF | ((v81 & 3) << 9);
    else
      v80 = v80;
    if ((v60 & 0xC00000000) != 0)
      v79 = v60;
    v60 = v79 & 0xFFFFFFFF00000000 | v80;
  }
  while (!v67 || (_QWORD *)v67 != v61);
  v60 = v79 & 0xFFFFFFFF00000000 | v80 & 0xFFFFFFFFFFFFFE3FLL;
  v37 = v120;
  if (v20)
    goto LABEL_116;
LABEL_96:
  if (!((v35 ^ 1) & 1 | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v21 + 72) + 148) >> 1) & 1))
  {
LABEL_97:
    v68 = *(_QWORD *)(v21 + 88);
    *(_QWORD *)(a2 + 48) |= 0x20000uLL;
    v69 = sub_22E3CD3D4(v68 + 2032, 40, 3);
    v70 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v69 = *(_OWORD *)a2;
    *(_OWORD *)(v69 + 16) = v70;
    v71 = *(_BYTE *)(v69 + 34);
    *(_WORD *)(v69 + 32) = 14;
    *(_BYTE *)(v69 + 34) = v71 & 0xE0;
    v72 = *a3;
    v73 = a1;
    v74 = *a3;
    goto LABEL_98;
  }
  v75 = v60 | (v37 << 6);
  v76 = *a3;
  if (v60 & 0xC00000000 | v75 & 0xCFFFFFFF8)
    v77 = sub_22EF5DBC4(*(_QWORD *)(v21 + 88), v67, v60 & 0xFFFFFFFF00000000 | v75);
  else
    v77 = v67 & 0xFFFFFFFFFFFFFFF0 | v60 & 7;
  *a3 = v77;
  if (v22)
  {
LABEL_124:
    v86 = sub_22E3CD3D4(*(_QWORD *)(v21 + 88) + 2032, 48, 3);
    v87 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v86 = *(_OWORD *)a2;
    *(_OWORD *)(v86 + 16) = v87;
    v88 = *(_BYTE *)(v86 + 34);
    *(_WORD *)(v86 + 32) = 60;
    *(_BYTE *)(v86 + 34) = v88 & 0xE0;
    *(_QWORD *)(v86 + 40) = v32;
    v77 = sub_22EE90E74(a1, v86, v76, *a3);
    *a3 = v77;
  }
LABEL_125:
  if (!v121)
    return 1;
  if (!(v20 & 1 | ((*(unsigned __int16 *)(*(_QWORD *)(v21 + 72) + 148) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 + 72) + 150) << 16)) >> 3) & 1))
  {
    if ((*(_WORD *)(*(_QWORD *)(v21 + 72) + 148) & 0x10) != 0)
    {
      v100 = *(_QWORD *)(v21 + 3200);
      if (v100)
      {
        if (v22 < 0)
        {
          v22 = sub_22F1E22F0(*(_QWORD **)(v21 + 112), v22);
          v100 = *(_QWORD *)(v21 + 3200);
        }
        LOWORD(v125) = 2;
        v126 = v22;
        v128 = v77;
        v127 = 6846;
        v101 = (_OWORD *)sub_22E90D2A8(v100 + 8, (unint64_t)&v125, 1);
        v102 = (_OWORD *)(*(_QWORD *)(v100 + 8) + 80 * *(unsigned int *)(v100 + 16));
        *v102 = *v101;
        v103 = v101[4];
        v105 = v101[1];
        v104 = v101[2];
        v102[3] = v101[3];
        v102[4] = v103;
        v102[1] = v105;
        v102[2] = v104;
        ++*(_DWORD *)(v100 + 16);
      }
      else
      {
        sub_22E8FCA40((_QWORD *)v21, v22, 0x1ABEu, 0, (uint64_t)&v125);
        sub_22E903BEC(&v125);
      }
      *a3 = v76;
      return 1;
    }
    if ((*(_WORD *)(*(_QWORD *)(v21 + 72) + 148) & 4) != 0)
      v93 = 2682;
    else
      v93 = 2684;
    v13 = v22;
    v94 = *(_QWORD *)(v21 + 3200);
    if (v94)
    {
      if (v22 < 0)
      {
        v22 = sub_22F1E22F0(*(_QWORD **)(v21 + 112), v22);
        v94 = *(_QWORD *)(v21 + 3200);
      }
      LOWORD(v125) = 2;
      v126 = v22;
      v127 = v93;
      v128 = v77;
      v95 = (_OWORD *)sub_22E90D2A8(v94 + 8, (unint64_t)&v125, 1);
      v96 = (_OWORD *)(*(_QWORD *)(v94 + 8) + 80 * *(unsigned int *)(v94 + 16));
      *v96 = *v95;
      v97 = v95[4];
      v99 = v95[1];
      v98 = v95[2];
      v96[3] = v95[3];
      v96[4] = v97;
      v96[1] = v99;
      v96[2] = v98;
      ++*(_DWORD *)(v94 + 16);
      goto LABEL_25;
    }
    v14 = (_QWORD *)v21;
    v15 = v93;
    goto LABEL_9;
  }
  v89 = *(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0);
  if (v89 && *(_BYTE *)(v89 + 16) == 32)
    goto LABEL_132;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v90 = sub_22F10CF48(*(_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF0));
    if (v90)
    {
      v89 = v90;
LABEL_132:
      v91 = sub_22F31179C(v89);
      if (v91 && sub_22EFDABBC(v91))
      {
        sub_22E8FCA40((_QWORD *)v21, v22, 0xA78u, 0, (uint64_t)&v125);
        sub_22E903BEC(&v125);
        v92 = sub_22F31179C(v89);
        sub_22E8FCA40((_QWORD *)v21, *(_DWORD *)(v92 + 24), 0x1569u, 0, (uint64_t)&v122);
        v85 = (unsigned int *)&v122;
LABEL_121:
        sub_22E903BEC(v85);
      }
    }
  }
  return 1;
}

unsigned int *sub_22EE90A98(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unsigned int *result;
  uint64_t v7;
  int v8;
  unsigned int v9[24];

  if (*(_WORD *)(a2 + 48) == 1)
  {
    result = (unsigned int *)sub_22EE7F938(a3, *a1, (unsigned __int8 *)(*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFFCLL), a4, *(_DWORD *)(a2 + 16));
    if ((unint64_t)result >= 0x10)
      *a1 = (uint64_t)result;
  }
  else
  {
    sub_22E8FCA40(a3, *(_DWORD *)(a2 + 16), 0xB31u, 0, (uint64_t)v9);
    v7 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a2);
    v8 = 1;
    sub_22E8900C4(v7, &v8);
    return sub_22E903BEC(v9);
  }
  return result;
}

uint64_t sub_22EE90B34(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int isArch64Bit;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int **v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  if (((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a3[11] + 15088) + 568))(*(_QWORD *)(a3[11] + 15088), "neon", 4) & 1) == 0&& ((*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a3[11] + 15088) + 568))(*(_QWORD *)(a3[11] + 15088), "mve", 3) & 1) == 0)
  {
    sub_22E8FCA40(a3, *(_DWORD *)(a2 + 16), 0xB28u, 0, (uint64_t)__p);
    v27 = sub_22E8D2984((uint64_t)__p, (uint64_t *)a2);
    sub_22F2F30F4(v27, (uint64_t)"'neon' or 'mve'");
    goto LABEL_13;
  }
  if (*(_WORD *)(a2 + 48) != 1)
  {
    sub_22E8FCA40(a3, *(_DWORD *)(a2 + 16), 0xB31u, 0, (uint64_t)__p);
    v12 = sub_22E8D2984((uint64_t)__p, (uint64_t *)a2);
    LODWORD(v28) = 1;
    sub_22E8900C4(v12, (int *)&v28);
LABEL_13:
    result = (uint64_t)sub_22E903BEC((unsigned int *)__p);
    *(_QWORD *)(a2 + 48) |= 0x10000uLL;
    return result;
  }
  v29 = 32;
  v28 = 0;
  v30 = 1;
  result = sub_22EE91E28(a3, a2, (uint64_t)&v28);
  if (!(_DWORD)result)
    goto LABEL_41;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 11;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_39;
  v11 = *(_QWORD *)(a3[11] + 15088);
  if (*(char *)(v11 + 55) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v11 + 32), *(_QWORD *)(v11 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v11 + 32);
    v32 = *(_QWORD *)(v11 + 48);
  }
  v33 = *(_OWORD *)(v11 + 56);
  v34 = *(_QWORD *)(v11 + 72);
  if ((_DWORD)a4 == 6)
  {
    v13 = (*(_DWORD *)(v9 + 16) >> 19) & 0x1FF;
    if ((v33 - 3) > 2)
    {
      v14 = v13 - 179;
      if (v14 < 6)
      {
        v15 = 37;
        goto LABEL_27;
      }
    }
    else
    {
      v14 = v13 - 168;
      if (v14 < 9)
      {
        v15 = 417;
LABEL_27:
        LODWORD(v19) = (v15 >> v14) & 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
    isArch64Bit = llvm::Triple::isArch64Bit((llvm::Triple *)__p);
    if ((_DWORD)v33 == 5)
      v17 = 1;
    else
      v17 = isArch64Bit;
    v18 = *(_DWORD *)(v9 + 16);
    if (v17 == 1 && (v18 & 0xFF80000) == 0x6A00000)
    {
      LOBYTE(v19) = 1;
      goto LABEL_31;
    }
    v20 = ((v18 >> 19) & 0x1FF) - 168;
    if (v20 < 0x30)
    {
      v19 = (0x8C000001E9E1uLL >> v20) & 1;
      goto LABEL_31;
    }
  }
  LOBYTE(v19) = 0;
LABEL_31:
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    if ((v19 & 1) != 0)
      goto LABEL_33;
LABEL_39:
    v24 = *(_DWORD *)(a2 + 16);
    v25 = a3;
    v26 = 2820;
    goto LABEL_40;
  }
  operator delete(__p[0]);
  if ((v19 & 1) == 0)
    goto LABEL_39;
LABEL_33:
  v21 = sub_22EF5CDF0(a3[11], *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0));
  v22 = (unsigned int **)&v28;
  if (v29 >= 0x41)
    v22 = v28;
  v23 = *(unsigned int *)v22;
  if ((_DWORD)v23 * v21 != 64 && (_DWORD)v23 * v21 != 128)
  {
    v24 = *(_DWORD *)(a2 + 16);
    v25 = a3;
    v26 = 2795;
LABEL_40:
    sub_22E8FCA40(v25, v24, v26, 0, (uint64_t)__p);
    sub_22E8901B8((uint64_t)__p, a1);
    result = (uint64_t)sub_22E903BEC((unsigned int *)__p);
    *(_QWORD *)(a2 + 48) |= 0x10000uLL;
    goto LABEL_41;
  }
  result = sub_22F36B7E4(a3[11], *a1, v23, a4);
  *a1 = result;
LABEL_41:
  if (v29 >= 0x41)
  {
    result = (uint64_t)v28;
    if (v28)
      return MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
  }
  return result;
}

unint64_t sub_22EE90E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;

  v6 = sub_22F369798(*(_QWORD *)(*(_QWORD *)a1 + 88), *(unsigned __int16 *)(a2 + 32), a3, a4);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(a1 + 96);
  if (v8 >= *(_DWORD *)(a1 + 100))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 96);
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 16 * v8);
  *v9 = v7;
  v9[1] = a2;
  ++*(_DWORD *)(a1 + 96);
  *(_BYTE *)(a1 + 232) = 0;
  return v6;
}

BOOL sub_22EE90F00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unsigned int *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  __int16 v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  _DWORD *v71;
  unsigned int v72;
  int v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  unsigned int v85;
  _BYTE v86[96];
  char *v87;
  uint64_t v88;
  _BYTE v89[96];
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD v97[2];

  v97[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a1;
  sub_22EE8A960(&v94, *a3);
  v7 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8);
  if (v7 <= 0x10F)
  {
    switch(v7)
    {
      case 0x19u:
        if ((sub_22EA47F54(v6, a2) & 1) == 0)
        {
          if (sub_22E8D2A78(a2, v6, 0))
          {
            v8 = (uint64_t)v95;
            if (v95)
            {
              LOWORD(v9) = ((unsigned __int16)HIWORD(*((_DWORD *)v95 + 4)) >> 3) | 0x80;
              goto LABEL_45;
            }
LABEL_82:
            v14 = 0;
            goto LABEL_123;
          }
          goto LABEL_33;
        }
        goto LABEL_122;
      case 0x1Au:
        if ((*(_WORD *)(v6[9] + 148) & 0x100) == 0)
        {
          sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0x1A72u, 0, (uint64_t)v89);
          v10 = (unsigned int *)v89;
          goto LABEL_32;
        }
        if ((sub_22EA47F54(v6, a2) & 1) != 0)
          goto LABEL_122;
        if (!sub_22E8D2A78(a2, v6, 0))
          goto LABEL_33;
        v8 = (uint64_t)v95;
        if (v95)
        {
          LOWORD(v9) = ((unsigned __int16)HIWORD(*((_DWORD *)v95 + 4)) >> 3) | 0x800;
          goto LABEL_45;
        }
        goto LABEL_122;
      case 0x46u:
        v8 = (uint64_t)v95;
        if (!v95)
          goto LABEL_82;
        if ((*(_BYTE *)(v6[9] + 197) & 1) != 0)
        {
          v9 = (v95[2] >> 19) & 0xFFFLL | 0x1000;
          goto LABEL_45;
        }
        sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0x1875u, 0, (uint64_t)&v90);
        sub_22E8D2984((uint64_t)&v90, (uint64_t *)a2);
        goto LABEL_14;
    }
LABEL_51:
    if (!v95)
      goto LABEL_82;
    v85 = 0;
    if ((sub_22EA4B588((uint64_t)v6, a2, &v85, 0) & 1) == 0)
    {
      v22 = v95;
      v23 = (*((_DWORD *)v95 + 4) >> 19) & 0x1F;
      v24 = v6[11];
      v25 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8);
      if (v25 > 0x177)
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) > 0x1A3u)
        {
          if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) <= 0x1B2u)
          {
            *(_QWORD *)(a2 + 48) |= 0x20000uLL;
            if (v25 == 420)
            {
              v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
              v27 = v26;
              v40 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)v26 = *(_OWORD *)a2;
              *(_OWORD *)(v26 + 16) = v40;
              v29 = *(_BYTE *)(v26 + 34);
              v30 = 68;
            }
            else
            {
              v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
              v27 = v26;
              v55 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)v26 = *(_OWORD *)a2;
              *(_OWORD *)(v26 + 16) = v55;
              v29 = *(_BYTE *)(v26 + 34);
              v30 = 69;
            }
          }
          else if (v25 == 435)
          {
            *(_QWORD *)(a2 + 48) |= 0x20000uLL;
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v44 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v44;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 70;
          }
          else
          {
            *(_QWORD *)(a2 + 48) |= 0x20000uLL;
            if (v25 == 457)
            {
              v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
              v27 = v26;
              v35 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)v26 = *(_OWORD *)a2;
              *(_OWORD *)(v26 + 16) = v35;
              v29 = *(_BYTE *)(v26 + 34);
              v30 = 71;
            }
            else
            {
              v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
              v27 = v26;
              v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)v26 = *(_OWORD *)a2;
              *(_OWORD *)(v26 + 16) = v51;
              v29 = *(_BYTE *)(v26 + 34);
              v30 = 72;
            }
          }
        }
        else if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) <= 0x180u)
        {
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          if (v25 == 376)
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v38 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v38;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 63;
          }
          else
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v53 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v53;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 64;
          }
        }
        else if (v25 == 385)
        {
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v42 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v42;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 65;
        }
        else
        {
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          if (v25 == 409)
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v31 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v31;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 66;
          }
          else
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v46 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v46;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 67;
          }
        }
      }
      else if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) > 0x7Cu)
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) <= 0xFEu)
        {
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          if (v25 == 125)
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v39 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v39;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 56;
          }
          else
          {
            v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v27 = v26;
            v54 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v26 = *(_OWORD *)a2;
            *(_OWORD *)(v26 + 16) = v54;
            v29 = *(_BYTE *)(v26 + 34);
            v30 = 58;
          }
        }
        else if (v25 == 255)
        {
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v43 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v43;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 11;
        }
        else
        {
          if (v25 != 363)
          {
            v47 = *(_QWORD *)(a2 + 80);
            v48 = v47 & 0xFFFFFFFFFFFFFFFCLL;
            if (!*(_WORD *)(a2 + 48) || (v47 & 2) != 0)
            {
              v71 = *(_DWORD **)(*(_QWORD *)(v48 + 8) + 16);
              v72 = *v71;
              v49 = v71 + 4;
              v50 = v72;
            }
            else
            {
              v49 = (int *)(v48 + 4 * *(unsigned int *)(v48 + 4) + 20);
              v50 = ((*(_DWORD *)v48 >> 21) & 7u) * *(_DWORD *)(v48 + 16);
            }
            v90 = 0;
            sub_22EF96D48(v49, v50, &v90);
            v27 = sub_22E3CD3D4(v24 + 2032, 40, 3);
            v73 = v90;
            v74 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)v27 = *(_OWORD *)a2;
            *(_OWORD *)(v27 + 16) = v74;
            v75 = *(_BYTE *)(v27 + 34);
            *(_WORD *)(v27 + 32) = 62;
            *(_BYTE *)(v27 + 34) = v75 & 0xE0;
            *(_DWORD *)(v27 + 36) = v73;
LABEL_106:
            if (v23 == v85)
            {
              v56 = v23;
            }
            else
            {
              if (sub_22F31D55C((uint64_t)v6, *a3))
              {
                sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0xB34u, 0, (uint64_t)&v90);
                v87 = sub_22F40A550(v85);
                v88 = v81;
                v82 = sub_22F2F2210((uint64_t)&v90, (uint64_t)&v87);
                v84[0] = sub_22F40A550(v23);
                v84[1] = v83;
                v70 = (char **)v84;
                v69 = v82;
LABEL_135:
                sub_22F2F2210(v69, (uint64_t)v70);
LABEL_14:
                v10 = (unsigned int *)&v90;
LABEL_32:
                sub_22E903BEC(v10);
LABEL_33:
                *(_QWORD *)(a2 + 48) |= 0x10000uLL;
                goto LABEL_122;
              }
              v56 = v85;
            }
            if (v56 > 0x1E)
              goto LABEL_114;
            if (((1 << v56) & 0x1FF0F13E) != 0)
            {
              if (v22[16] != 26 || (v22[23] & 8) == 0)
              {
                if (v56 != 2 || (v22[19] & 0x38) == 0)
                  goto LABEL_114;
                sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0xB34u, 0, (uint64_t)&v90);
                v69 = sub_22F2F30F4((uint64_t)&v90, (uint64_t)"regparm");
                v87 = "fastcall";
                v88 = 8;
                v70 = &v87;
                goto LABEL_135;
              }
              if (v56 - 1 <= 1)
              {
                sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0x18C5u, 0, (uint64_t)&v90);
                v87 = sub_22F40A550(v85);
                v88 = v66;
                v67 = sub_22F2F2210((uint64_t)&v90, (uint64_t)&v87);
                LODWORD(v84[0]) = 1;
                v68 = sub_22E8900C4(v67, (int *)v84);
LABEL_140:
                v14 = *(_BYTE *)(v68 + 80) != 0;
                v15 = (unsigned int *)&v90;
                goto LABEL_25;
              }
              *(_QWORD *)(a2 + 48) |= 0x10000uLL;
              v63 = *(_DWORD *)(a2 + 16);
              v64 = v6;
              v65 = 3034;
            }
            else
            {
              if (v56 != 30 || v22[16] != 26 || (v22[23] & 8) != 0)
              {
LABEL_114:
                if (v23 == v56)
                {
                  v57 = *a3;
                }
                else
                {
                  v58 = sub_22EF5F1F4(v6[11], (uint64_t)v95, (v95[2] >> 19) & 0x1FE0 | v56);
                  if (v95 == v58)
                  {
                    v57 = v94;
                  }
                  else
                  {
                    v95 = v58;
                    v57 = sub_22EE95C30(&v94, v6[11], v94, 0);
                  }
                }
                v59 = *a3;
                v60 = a1;
                v61 = v27;
LABEL_120:
                v21 = sub_22EE90E74(v60, v61, v59, v57);
LABEL_121:
                *a3 = v21;
                goto LABEL_122;
              }
              *(_QWORD *)(a2 + 48) |= 0x10000uLL;
              v63 = *(_DWORD *)(a2 + 16);
              v64 = v6;
              v65 = 3033;
            }
            sub_22E8FCA40(v64, v63, v65, 0, (uint64_t)&v90);
            v87 = sub_22F40A550(v85);
            v88 = v76;
            v68 = sub_22F2F2210((uint64_t)&v90, (uint64_t)&v87);
            goto LABEL_140;
          }
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v34 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v34;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 61;
        }
      }
      else if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) <= 0x2Bu)
      {
        *(_QWORD *)(a2 + 48) |= 0x20000uLL;
        if (v25 == 1)
        {
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v37;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 49;
        }
        else
        {
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v52 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v52;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 50;
        }
      }
      else if (v25 == 44)
      {
        *(_QWORD *)(a2 + 48) |= 0x20000uLL;
        v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
        v27 = v26;
        v41 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v26 = *(_OWORD *)a2;
        *(_OWORD *)(v26 + 16) = v41;
        v29 = *(_BYTE *)(v26 + 34);
        v30 = 53;
      }
      else
      {
        *(_QWORD *)(a2 + 48) |= 0x20000uLL;
        if (v25 == 105)
        {
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v28 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v28;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 54;
        }
        else
        {
          v26 = sub_22E3CD3D4(v24 + 2032, 40, 3);
          v27 = v26;
          v45 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v26 = *(_OWORD *)a2;
          *(_OWORD *)(v26 + 16) = v45;
          v29 = *(_BYTE *)(v26 + 34);
          v30 = 55;
        }
      }
      *(_WORD *)(v26 + 32) = v30;
      *(_BYTE *)(v26 + 34) = v29 & 0xE0;
      goto LABEL_106;
    }
LABEL_122:
    v14 = 1;
    goto LABEL_123;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8) <= 0x129u)
  {
    if (v7 == 272)
    {
      if (!*(_WORD *)(a2 + 48))
      {
        if (!v95)
          goto LABEL_82;
        if ((sub_22F3205EC(v6, *(_DWORD *)(a2 + 16), v95[3]) & 1) == 0)
        {
          v16 = *a3;
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 148) & 2) != 0)
          {
            v17 = sub_22EF5F1F4(v6[11], (uint64_t)v95, ((unsigned __int16)HIWORD(*((_DWORD *)v95 + 4)) >> 3) | 0x40u);
            if (v95 == v17)
            {
              v18 = v94;
            }
            else
            {
              v95 = v17;
              v18 = sub_22EE95C30(&v94, v6[11], v94, 0);
            }
            *a3 = v18;
          }
          v77 = v6[11];
          *(_QWORD *)(a2 + 48) |= 0x20000uLL;
          v61 = sub_22E3CD3D4(v77 + 2032, 40, 3);
          v78 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v61 = *(_OWORD *)a2;
          *(_OWORD *)(v61 + 16) = v78;
          v79 = *(_BYTE *)(v61 + 34);
          *(_WORD *)(v61 + 32) = 59;
          *(_BYTE *)(v61 + 34) = v79 & 0xE0;
          v57 = *a3;
          v60 = a1;
          v59 = v16;
          goto LABEL_120;
        }
      }
      goto LABEL_122;
    }
    if (v7 == 291)
    {
      if (sub_22E8D2A78(a2, v6, 0))
      {
        v8 = (uint64_t)v95;
        if (v95)
        {
          LOWORD(v9) = ((unsigned __int16)HIWORD(*((_DWORD *)v95 + 4)) >> 3) | 0x20;
LABEL_45:
          v19 = v6[11];
LABEL_46:
          v20 = (uint64_t)sub_22EF5F1F4(v19, v8, v9);
LABEL_47:
          if (v95 == (_QWORD *)v20)
          {
            v21 = v94;
          }
          else
          {
            v95 = (_QWORD *)v20;
            v21 = sub_22EE95C30(&v94, v6[11], v94, 0);
          }
          goto LABEL_121;
        }
        goto LABEL_82;
      }
      goto LABEL_33;
    }
    goto LABEL_51;
  }
  if (v7 != 298)
  {
    if (v7 == 386)
    {
      LODWORD(v84[0]) = 0;
      if ((sub_22F3200E0(v6, a2, (unsigned int *)v84) & 1) != 0)
        goto LABEL_122;
      v8 = (uint64_t)v95;
      if (!v95)
        goto LABEL_82;
      v36 = v95[2];
      if ((v36 & 0xF80000) != 0x100000)
      {
        v19 = v6[11];
        v9 = (unsigned __int16)((LOWORD(v84[0]) << 8) + 256) & 0xFF00 | (v36 >> 19) & 0x18FF;
        goto LABEL_46;
      }
      sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0xB34u, 0, (uint64_t)&v90);
      v87 = "fastcall";
      v88 = 8;
      v80 = sub_22F2F2210((uint64_t)&v90, (uint64_t)&v87);
      sub_22F2F30F4(v80, (uint64_t)"regparm");
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  if (!v95)
    goto LABEL_82;
  if (!sub_22E8D2A78(a2, v6, 0))
    goto LABEL_33;
  v11 = (uint64_t)v95;
  if (!v95 || *((_BYTE *)v95 + 16) != 26)
    v11 = sub_22F10CF48((uint64_t)v95);
  v12 = *(_QWORD *)(v11 + 16);
  if ((v12 & 0x3C0000000000000) == 0)
  {
    v32 = v6[11];
    v90 = 4;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v20 = *(_QWORD *)(sub_22EF5F294(v32, v11 & 0xFFFFFFFFFFFFFFF0, (__int128 *)&v90) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v33 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
    else
      v33 = 0;
    if (!v33)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
        v20 = sub_22F10CF48(v20);
      else
        v20 = 0;
    }
    goto LABEL_47;
  }
  v13 = (v12 >> 54) & 0xF;
  v14 = 1;
  if (v13 <= 7 && ((1 << v13) & 0x8C) != 0)
  {
    sub_22E8FCA40(v6, *(_DWORD *)(a2 + 16), 0x1A85u, 0, (uint64_t)v86);
    v15 = (unsigned int *)v86;
LABEL_25:
    sub_22E903BEC(v15);
  }
LABEL_123:
  if (v96 != v97)
    free(v96);
  return v14;
}

_DWORD *sub_22EE91B6C(uint64_t a1, unsigned int a2, char a3)
{
  _DWORD *i;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  int v7;

  for (i = 0; a2; i = v6)
  {
    v4 = a2 - 1;
    v5 = *(_DWORD *)(a1 + 120 * --a2);
    if (v5 == 3)
    {
      if (!a2)
        return i;
      a2 = v4 - 1;
      while (1)
      {
        v6 = (_DWORD *)(a1 + 120 * a2);
        v7 = 1 << *v6;
        if ((v7 & 0xCE) == 0 && ((v7 & 0x21) == 0 || (a3 & 1) == 0))
          break;
        if (!a2--)
          return i;
      }
    }
    else
    {
      v6 = i;
      if (v5 != 6)
        return i;
    }
  }
  return i;
}

unsigned int *sub_22EE91BF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  unsigned int v31[24];
  const char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a3;
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 72) + 8);
  v5 = 2;
  if (v4 != 329)
    v5 = 0;
  if (v4 == 321)
    v6 = 1;
  else
    v6 = v5;
  v7 = v4 == 321 || v4 == 329;
  v8 = *(_DWORD *)(a2 + 16);
  v34 = v8;
  v9 = *(unsigned int **)(*(_QWORD *)a2 + 16);
  v10 = *v9;
  v32 = (const char *)(v9 + 4);
  v33 = v10;
  if (*(_WORD *)(a2 + 48) && (v11 = *(_QWORD *)(a2 + 80), (v11 & 2) != 0))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (!v7)
      goto LABEL_28;
  }
  else
  {
    v12 = 0;
    if (!v7)
      goto LABEL_28;
  }
  if (v8 < 0 && v12)
  {
    v13 = *(_QWORD *)(v12 + 16);
    if (*(_DWORD *)v13 == 4)
    {
      if (*(_DWORD *)(v13 + 16) != 1801545079)
        goto LABEL_28;
      v17 = "__weak";
      v18 = 6;
      if (!sub_22F308B18((uint64_t)a1, &v34, "__weak", 6))
        goto LABEL_28;
    }
    else
    {
      if (*(_DWORD *)v13 != 6)
        goto LABEL_28;
      v14 = *(_DWORD *)(v13 + 16);
      v15 = *(unsigned __int16 *)(v13 + 20);
      if (v14 != 1869771891 || v15 != 26478)
        goto LABEL_28;
      v17 = "__strong";
      v18 = 8;
      if ((sub_22F308B18((uint64_t)a1, &v34, "__strong", 8) & 1) == 0)
        goto LABEL_28;
    }
    v32 = v17;
    v33 = v18;
  }
LABEL_28:
  sub_22E8FCA40(a1, v34, 0x1B96u, 0, (uint64_t)v31);
  v19 = sub_22F2F2210((uint64_t)v31, (uint64_t)&v32);
  v20 = v19;
  if (*(_BYTE *)(v19 + 80))
  {
    v21 = *(unsigned __int8 **)(v19 + 32);
    if (!v21)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v20 + 40));
      *(_QWORD *)(v20 + 32) = v21;
    }
    v21[*v21 + 1] = 2;
    v22 = *(_BYTE **)(v20 + 32);
  }
  else
  {
    if (!*(_BYTE *)(v19 + 92))
      goto LABEL_34;
    v25 = (uint64_t *)(*(_QWORD *)v19 + 12784);
    v26 = *(_QWORD *)(v19 + 16);
    if (v26)
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    v36 = v26;
    v27 = sub_22F2F1D6C(v25, &v36)[1] + 32 * *(unsigned int *)(v20 + 88);
    v30 = *(unsigned __int8 **)(v27 + 8);
    v29 = (_QWORD *)(v27 + 8);
    v28 = v30;
    if (!v30)
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC(v29[1]);
      *v29 = v28;
    }
    v28[*v28 + 1] = 2;
    v22 = (_BYTE *)*v29;
  }
  v23 = *v22;
  *v22 = v23 + 1;
  *(_QWORD *)&v22[8 * v23 + 16] = v6;
LABEL_34:
  sub_22E8901B8(v20, &v35);
  return sub_22E903BEC(v31);
}

uint64_t sub_22EE91E28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  unsigned __int8 v18;

  v5 = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_BYTE *)(v5 + 1) & 0x80) != 0 || (sub_22F00905C(v5, a1[11], 0, (uint64_t)&v15), !v18))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 16), 0xAE5u, 0, (uint64_t)&v15);
    v8 = sub_22E8D2984((uint64_t)&v15, (uint64_t *)a2);
    v14 = 1;
    v9 = sub_22E8900C4(v8, &v14);
    sub_22F0D4E74(v5);
    v13 = v10;
    sub_22E8906A0(v9, &v13);
    sub_22E903BEC((unsigned int *)&v15);
    result = 0;
    *(_QWORD *)(a2 + 48) |= 0x10000uLL;
  }
  else
  {
    if (*(_DWORD *)(a3 + 8) > 0x40u || (v7 = v16, v16 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v15);
      v12 = v18;
      *(_BYTE *)(a3 + 12) = v17;
      if (v12 && v16 >= 0x41)
      {
        if (v15)
          MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v7;
      *(_BYTE *)(a3 + 12) = v17;
    }
    return 1;
  }
  return result;
}

_BYTE *sub_22EE91F70(uint64_t a1, unint64_t a2)
{
  char *v2;
  unsigned int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _BYTE *result;
  __int128 v9;
  char *v10;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (char *)a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = &v5[40 * v4];
    v12 = (unint64_t)v5 <= a2 && (unint64_t)v10 > a2;
    if (v12)
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - (_QWORD)v5) >> 3);
    else
      v13 = -1;
    v14 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v5 = (char *)v14;
    v15 = *(char **)a1;
    v16 = *(_DWORD *)(a1 + 8);
    if (v16)
    {
      v17 = &v15[40 * v16];
      v18 = v14;
      do
      {
        v19 = *(_QWORD *)v15;
        *(_DWORD *)(v18 + 8) = *((_DWORD *)v15 + 2);
        *(_QWORD *)v18 = v19;
        v20 = *((_OWORD *)v15 + 1);
        *(_QWORD *)(v18 + 32) = *((_QWORD *)v15 + 4);
        *(_OWORD *)(v18 + 16) = v20;
        *((_QWORD *)v15 + 3) = 0;
        *((_QWORD *)v15 + 4) = 0;
        *((_QWORD *)v15 + 2) = 0;
        v15 += 40;
        v18 += 40;
      }
      while (v15 != v17);
      v15 = *(char **)a1;
      v21 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v21)
      {
        v22 = 40 * v21;
        do
        {
          if (v15[v22 - 1] < 0)
            operator delete(*(void **)&v15[v22 - 24]);
          v22 -= 40;
        }
        while (v22);
        v15 = *(char **)a1;
      }
    }
    if (v15 != (char *)(a1 + 16))
      free(v15);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = 0;
    if (v12)
      v2 = &v5[40 * v13];
    v4 = *(_DWORD *)(a1 + 8);
  }
  v6 = &v5[40 * v4];
  v7 = *(_QWORD *)v2;
  *((_DWORD *)v6 + 2) = *((_DWORD *)v2 + 2);
  *(_QWORD *)v6 = v7;
  result = v6 + 16;
  if (v2[39] < 0)
  {
    result = sub_22E3BB2B4(result, *((void **)v2 + 2), *((_QWORD *)v2 + 3));
  }
  else
  {
    v9 = *((_OWORD *)v2 + 1);
    *((_QWORD *)v6 + 4) = *((_QWORD *)v2 + 4);
    *(_OWORD *)result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_22EE9211C(uint64_t *a1, _DWORD *a2, int a3)
{
  _BOOL4 v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  std::string::size_type v19;
  const void *v20;
  unsigned int v21;
  std::string *p_dst;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  void **v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  std::string __dst;
  std::string v35;
  void *v36[2];
  uint64_t v37;
  unsigned int v38[6];
  void *__p;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49[8];
  _BYTE v50[56];
  uint64_t v51;

  v6 = sub_22EE92488((uint64_t)(a2 + 4));
  if (v6)
    return !v6;
  if (*a2 == 4)
  {
    v8 = 1;
  }
  else if (*a2)
  {
    if (a3)
      v8 = 4;
    else
      v8 = 2;
  }
  else if (a3)
  {
    v8 = 3;
  }
  else
  {
    v8 = 0;
  }
  sub_22E8FCA40(*(_QWORD **)*a1, *(_DWORD *)(a1[1] + 16), 0x1A92u, 0, (uint64_t)&v41);
  v9 = a1[1];
  v10 = 0x3010200u >> ((8 * *(_BYTE *)(*(_QWORD *)(v9 + 72) + 8) + 56) & 0xF8);
  LOBYTE(v9) = (~(*(unsigned __int16 *)(v9 + 28) | (*(unsigned __int8 *)(v9 + 30) << 16)) & 0x70000) == 0;
  LOBYTE(v36[0]) = v10;
  BYTE1(v36[0]) = v9;
  v11 = sub_22F2F3884((uint64_t)&v41, (__int16 *)v36);
  v12 = sub_22E8901B8(v11, (uint64_t *)a1[2]);
  v38[0] = v8;
  v13 = sub_22E89519C(v12, v38);
  v14 = *(_OWORD *)(v13 + 9);
  *(_OWORD *)v49 = *(_OWORD *)v13;
  *(_OWORD *)((char *)&v49[2] + 1) = v14;
  v50[0] = 0;
  v50[48] = 0;
  if (*(_BYTE *)(v13 + 80))
    sub_22E907424((uint64_t)v50, v13 + 32);
  v51 = *(_QWORD *)(v13 + 88);
  sub_22E903BEC((unsigned int *)&v41);
  if (*a2 != 5)
  {
    v15 = *(unsigned int *)(a1[1] + 16);
    v43 = 0;
    v44 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v48 = 0;
    v41 = v15 | (v15 << 32);
    v42 = 1;
    v16 = sub_22E890748((uint64_t)v49, &v41);
    v17 = sub_22F141A3C(a2[1], 0, *(_QWORD **)(*(_QWORD *)(*(_QWORD *)*a1 + 80) + 88), *(_DWORD **)(*(_QWORD *)(*(_QWORD *)*a1 + 80) + 56));
    v18 = *(unsigned int **)(*(_QWORD *)a1[1] + 16);
    v21 = *v18;
    v20 = v18 + 4;
    v19 = v21;
    if (v21 >= 0x17uLL)
    {
      if ((v19 | 7) == 0x17)
        v23 = (v19 & 0xFFFFFFF8) + 8;
      else
        v23 = v19 | 7;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = v19;
      __dst.__r_.__value_.__r.__words[2] = v23 - 0x7FFFFFFFFFFFFFFFLL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
      p_dst = &__dst;
      if (!v19)
        goto LABEL_23;
    }
    memmove(p_dst, v20, v19);
LABEL_23:
    p_dst->__r_.__value_.__s.__data_[v19] = 0;
    v24 = std::string::insert(&__dst, 0, " ");
    v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v35, " ");
    v27 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v37 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (v37 >= 0)
      v28 = v36;
    else
      v28 = (void **)v36[0];
    if (v37 >= 0)
      v29 = HIBYTE(v37) & 0x7F;
    else
      v29 = (size_t)v36[1];
    sub_22E729148(v28, v29, v17, 0, (uint64_t)v38);
    sub_22E890748(v16, v38);
    if (v40 < 0)
      operator delete(__p);
    if (SHIBYTE(v37) < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47) < 0)
      operator delete(v45);
  }
  v30 = a1[1];
  v31 = *(_DWORD *)(*a1 + 16);
  v32 = *(_QWORD *)(*a1 + 8);
  if (v31 == *(_DWORD *)(v32 + 120))
    v33 = (_QWORD *)(*(_QWORD *)v32 + 24);
  else
    v33 = (_QWORD *)(*(_QWORD *)(v32 + 112) + 120 * v31 + 16);
  sub_22E817D2C(v33, a1[1]);
  sub_22E828580((uint64_t)(a2 + 6), v30);
  sub_22E903BEC(v49);
  return !v6;
}

BOOL sub_22EE92488(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  v2 = v3;
  if ((v3 & 4) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    v1 = *(_QWORD *)v5;
    v4 = *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8);
  }
  else
  {
    v4 = v1 + 8 * (v2 > 7);
  }
  if (v1 == v4)
    return 0;
  v6 = v1 + 8;
  do
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) + 8) - 441;
    result = v7 < 4;
    v9 = v7 < 4 || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

void sub_22EE924EC(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

__n128 sub_22EE9251C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;
  char v5;

  *(_QWORD *)(v1 + 48) |= 0x20000uLL;
  v2 = sub_22E3CD3D4(a1 + 2032, 40, 3);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 16) = v4;
  v5 = *(_BYTE *)(v2 + 34);
  *(_WORD *)(v2 + 32) = 35;
  *(_BYTE *)(v2 + 34) = v5 & 0xE0;
  return result;
}

uint64_t sub_22EE92570(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  char v12;

  if (!*(_BYTE *)(result + 21))
  {
    v3 = result;
    v4 = **(_QWORD **)(result + 8);
    v5 = result + 24;
    v8 = *(_QWORD *)(v4 + 32);
    v6 = (char *)(v4 + 32);
    v7 = v8;
    if ((v8 & 4) != 0)
    {
      v10 = v7 & 0xFFFFFFFFFFFFFFF8;
      v6 = *(char **)v10;
      v9 = (char *)(*(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8));
    }
    else
    {
      v9 = &v6[8 * (v7 > 7)];
    }
    result = sub_22F34BD7C(v5, v6, a3, v9);
    if (*(_DWORD *)(v3 + 32))
      v11 = 1;
    else
      v11 = *(_BYTE *)(v3 + 20) == 0;
    v12 = !v11;
    *(_BYTE *)(v3 + 20) = v12;
    *(_BYTE *)(v3 + 21) = 1;
  }
  return result;
}

BOOL sub_22EE925F0(uint64_t a1, uint64_t a2, _QWORD *__dst, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 120);
  if (!(_DWORD)v6)
    return sub_22EE90F00(a1, a2, a4);
  for (i = *(_QWORD *)(v5 + 112) + 24; *(_DWORD *)(i - 24) != 3; i += 120)
  {
    if (!--v6)
      return sub_22EE90F00(a1, a2, a4);
  }
  sub_22E817D2C(__dst, a2);
  sub_22E828580(i, a2);
  return 1;
}

uint64_t sub_22EE92668(uint64_t result, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  v5 = result;
  v6 = *(_QWORD *)(a2 + 112) + 120 * a4;
  v9 = *(_QWORD *)(v6 + 24);
  v8 = v6 + 24;
  v7 = v9;
  if ((v9 & 4) != 0)
  {
    v12 = v7 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    v10 = v11 + 8 * *(unsigned int *)(v12 + 8);
  }
  else
  {
    v10 = v8 + 8 * (v7 > 7);
    v11 = v8;
  }
  while (v11 != v10)
  {
    if (*(_WORD *)(*(_QWORD *)v11 + 28) == 329)
      return result;
    v11 += 8;
  }
  switch(a3)
  {
    case 1:
      v13 = 0;
      v14 = "none";
      break;
    case 2:
      v13 = 0;
      v14 = "strong";
      break;
    case 3:
      v13 = 0;
      v14 = "weak";
      break;
    case 4:
      v13 = 0;
      v14 = "autoreleasing";
      break;
    default:
      v14 = 0;
      v13 = 1;
      break;
  }
  v15 = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 16, 3);
  *(_DWORD *)v15 = 0;
  if ((v13 & 1) != 0)
    v16 = 0;
  else
    v16 = strlen(v14);
  *(_QWORD *)(v15 + 8) = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), v14, v16);
  *(_DWORD *)v15 = 0;
  v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "objc_ownership", 0xEuLL);
  v18 = sub_22E8D1AC4(*(_QWORD *)(a2 + 1112), 88);
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)v18 = v17;
  *(_DWORD *)(v18 + 24) = 0;
  v19 = sub_22F1ACD3C(v17, 0, 0, 0);
  v20 = (((*(unsigned __int8 *)(v18 + 30) >> 7) & 1) << 23) | 0x780000;
  *(_WORD *)(v18 + 28) = v19;
  *(_BYTE *)(v18 + 30) = BYTE2(v20);
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(v18 + 48) & 0xFFFFFFFEFF000000 | 1;
  *(_DWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 72) = sub_22E8D2434(v18);
  *(_QWORD *)(v18 + 80) = v15 | 2;
  sub_22E828580(a2 + 1120, v18);
  return sub_22E828580(v8, v18);
}

unsigned int *sub_22EE92874(_QWORD *a1, int a2)
{
  unsigned int *result;

  result = (unsigned int *)sub_22EE92B84(a1, a2);
  if ((_DWORD)result)
  {
    result = (unsigned int *)sub_22EE92E74((uint64_t)(a1 + 164), (int)result);
    if (!*((_BYTE *)result + 9))
    {
      *((_BYTE *)result + 9) = 1;
      if (*result)
        return sub_22EE92EF8(a1, *((unsigned __int8 *)result + 8), *result, result[1]);
    }
  }
  return result;
}

uint64_t sub_22EE928DC(int **a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t *a6)
{
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  unsigned int v23[24];

  v12 = **a1;
  if (v12)
  {
    v13 = v12 - 1;
    **a1 = v12 - 1;
  }
  else
  {
    v13 = 0;
  }
  if (sub_22EE92488(a5))
    return 0;
  v14 = (unsigned __int8 *)a1[1];
  if (!v14[1] || *(_BYTE *)a1[2])
  {
    v15 = *a1[8];
    if (v15 == 2 || v15 == 1 && v13)
      sub_22EE92AC0(a1[4], a2, a3, a4);
    return 0;
  }
  if (*(_BYTE *)a1[3])
    v18 = 7;
  else
    v18 = 5;
  sub_22F34B71C((uint64_t)a1[4], *v14);
  v20 = v19;
  v16 = sub_22E8D1AC4(*a6, 80);
  sub_22E828690(v16, v20, a3 | ((unint64_t)a3 << 32), 0, 0, 0, 0, v18, 0);
  sub_22E828580((uint64_t)(a6 + 1), v16);
  sub_22E828580(a5 + 8, v16);
  if (*(_BYTE *)a1[3])
  {
    v21 = *(_DWORD **)(**((_QWORD **)a1[5] + 1) + 216);
    *v21 |= 0x40u;
  }
  if (a3 && *a1[6] != -1)
  {
    sub_22E8FCA40(a1[4], a3, 0x1A93u, 0, (uint64_t)v23);
    v22 = *a1[6];
    sub_22E8900C4((uint64_t)v23, &v22);
    sub_22EE931C4((uint64_t)a1[4], (uint64_t)v23, a3, 0);
    sub_22E903BEC(v23);
  }
  if (*(_BYTE *)a1[7])
    *(_BYTE *)a1[2] = 1;
  return v16;
}

unsigned int *sub_22EE92AC0(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int *result;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  result = (unsigned int *)sub_22EE92B84(a1, a3);
  if ((_DWORD)result)
  {
    result = (unsigned int *)sub_22EE92E74((uint64_t)(a1 + 164), (int)result);
    if (*((_BYTE *)result + 9))
    {
      return sub_22EE92EF8(a1, a2, a3, a4);
    }
    else
    {
      v10 = result;
      if (!*result)
      {
        if (a2 == 3)
          v11 = 6806;
        else
          v11 = 6805;
        v12 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1992) + 8);
        result = (unsigned int *)sub_22F1CF68C(*(_QWORD *)(v12 + 32), v11, a3, v12);
        if ((_DWORD)result != 1)
        {
          *v10 = a3;
          v10[1] = a4;
          *((_BYTE *)v10 + 8) = a2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EE92B84(_QWORD *a1, int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;

  v3 = a1[27];
  while (v3)
  {
    v4 = *(_WORD *)(v3 + 8) & 0x7F;
    if (v4 <= 0x18 && ((1 << v4) & 0x1000006) != 0)
      return 0;
    v6 = v4 - 52;
    if (v4 - 52 < 6)
      return 0;
    if (v4 == 16 || v4 == 83)
      break;
    v7 = -40;
    if ((*(_WORD *)(v3 + 8) & 0x7Fu) > 0x46)
    {
      if (v4 == 71)
      {
        v7 = -56;
      }
      else if (v4 != 81)
      {
        goto LABEL_20;
      }
    }
    else
    {
      if (v4 > 0x18)
        goto LABEL_19;
      if (((1 << v4) & 0x1066) != 0)
        goto LABEL_26;
      if (v4 == 24)
      {
        v7 = -48;
      }
      else
      {
LABEL_19:
        if (v4 != 70)
        {
LABEL_20:
          if (v4 - 33 >= 5)
            v8 = -48;
          else
            v8 = -64;
          if (v6 >= 6)
            v7 = v8;
          else
            v7 = -72;
          goto LABEL_26;
        }
        v7 = -64;
      }
    }
LABEL_26:
    v9 = *(_QWORD *)(v3 + v7 + 16);
    v3 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v3 = *(_QWORD *)v3;
  }
  if (a2 < 0)
    a2 = sub_22F1E22F0((_QWORD *)a1[14], a2);
  v10 = a1[14];
  v11 = a2 & 0x7FFFFFFF;
  v12 = *(_DWORD *)(v10 + 304);
  v13 = v12 + 1;
  if (v12 + 1 > 1)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v15 = -2 - v12;
      if (((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0)
        v14 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v15);
      else
        v14 = (_DWORD *)sub_22F1E1134(a1[14], v15, 0);
    }
    else
    {
      v14 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v12);
    }
  }
  else
  {
    v14 = *(_DWORD **)(v10 + 184);
  }
  if ((*v14 & 0x7FFFFFFFu) <= v11
    && (v12 == -2
     || (v13 != *(_DWORD *)(v10 + 192)
       ? ((v13 & 0x80000000) != 0
        ? ((v19 = -3 - v12,
            ((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-3 - v12) >> 6)) >> (-3 - v12)) & 1) == 0)
         ? (v18 = (_DWORD *)sub_22F1E1134(v10, v19, 0))
         : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v19)))
        : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v13)),
          v17 = *v18 & 0x7FFFFFFF)
       : (v17 = *(_DWORD *)(v10 + 216)),
         v17 > v11)))
  {
    v16 = *(unsigned int *)(v10 + 304);
    if (!(_DWORD)v16)
      return 0;
  }
  else
  {
    v16 = sub_22F1E1EE8(v10, v11);
    if (!(_DWORD)v16)
      return 0;
  }
  result = 0;
  v25 = 0;
  if ((v16 + 1) < 2)
    return result;
  v21 = a1[14];
  if ((v16 & 0x80000000) == 0)
  {
    v22 = (_QWORD *)(v21 + 184);
    v23 = v16;
LABEL_58:
    v24 = *v22 + 24 * v23;
LABEL_59:
    if ((*(_DWORD *)v24 & 0x80000000) == 0
      && *(_DWORD *)(v24 + 8)
      && ((*(_BYTE *)(v24 + 16) & 7) == 0 || (*(_BYTE *)(*(_QWORD *)(a1[13] + 128) + 24) & 0x10) == 0))
    {
      return v16;
    }
    return 0;
  }
  v23 = -2 - v16;
  if (((*(_QWORD *)(*(_QWORD *)(v21 + 224) + 8 * ((-2 - v16) >> 6)) >> (-2 - v16)) & 1) != 0)
  {
    v22 = (_QWORD *)(v21 + 200);
    goto LABEL_58;
  }
  v24 = sub_22F1E1134(v21, v23, &v25);
  if (!v25)
    goto LABEL_59;
  return 0;
}

uint64_t sub_22EE92E74(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v7;
  __int16 v8;
  _DWORD *v9;
  __int16 v10;
  int v11;

  v11 = a2;
  v4 = *(_DWORD *)(a1 + 24);
  if (v4 == a2)
    return a1 + 28;
  if (v4)
  {
    v7 = sub_22F34BE54(a1, (_DWORD *)(a1 + 24));
    v8 = *(_WORD *)(a1 + 36);
    *(_QWORD *)(v7 + 1) = *(_QWORD *)(a1 + 28);
    *((_WORD *)v7 + 6) = v8;
  }
  *(_DWORD *)(a1 + 24) = a2;
  v9 = sub_22F34BE54(a1, &v11);
  v10 = *((_WORD *)v9 + 6);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(v9 + 1);
  v5 = a1 + 28;
  *(_WORD *)(v5 + 8) = v10;
  return v5;
}

unsigned int *sub_22EE92EF8(_QWORD *a1, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int *v8;
  unsigned int *result;
  _BYTE v10[100];
  unsigned int v11;
  unsigned int v12[24];

  if (a2 == 3)
  {
    sub_22E8FCA40(a1, a3, 0x1A96u, 0, (uint64_t)v10);
    v8 = (unsigned int *)v10;
  }
  else
  {
    sub_22E8FCA40(a1, a3, 0x1A95u, 0, (uint64_t)v12);
    v11 = a2;
    sub_22E89519C((uint64_t)v12, &v11);
    v8 = v12;
  }
  result = sub_22E903BEC(v8);
  if (!a4)
    a4 = a3;
  if ((a4 & 0x80000000) == 0)
  {
    sub_22E8FCA40(a1, a4, 0x16EAu, 0, (uint64_t)v12);
    v11 = 1;
    sub_22E89519C((uint64_t)v12, &v11);
    v11 = a2;
    sub_22E89519C((uint64_t)v12, &v11);
    sub_22EE931C4((uint64_t)a1, (uint64_t)v12, a4, 1);
    sub_22E903BEC(v12);
    sub_22E8FCA40(a1, a4, 0x16EAu, 0, (uint64_t)v12);
    v11 = 0;
    sub_22E89519C((uint64_t)v12, &v11);
    v11 = a2;
    sub_22E89519C((uint64_t)v12, &v11);
    sub_22EE931C4((uint64_t)a1, (uint64_t)v12, a4, 0);
    return sub_22E903BEC(v12);
  }
  return result;
}

_DWORD *sub_22EE93048(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](16 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_DWORD *)v12;
        if ((*(_DWORD *)v12 + 1) >= 2)
        {
          v14 = *(_DWORD *)(a1 + 16);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & v13;
            v17 = *(_QWORD *)a1 + 16 * v16;
            v18 = *(_DWORD *)v17;
            if (v13 != *(_DWORD *)v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -1;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = *(_QWORD *)a1 + 16 * (v22 & v15);
                v18 = *(_DWORD *)v17;
                if (v13 == *(_DWORD *)v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *(_DWORD *)v17 = v13;
          v23 = *(_QWORD *)((char *)v12 + 4);
          *(_DWORD *)(v17 + 12) = *((_DWORD *)v12 + 3);
          *(_QWORD *)(v17 + 4) = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 16);
      }
      while (v12 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24)
    {
      v25 = 16 * v24;
      do
      {
        *result = 0;
        result += 4;
        v25 -= 16;
      }
      while (v25);
    }
  }
  return result;
}

void sub_22EE931C4(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  int v8;
  unsigned int v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  _QWORD v24[5];
  char v25;
  void *v26;
  __int128 v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0x80000000) != 0)
    return;
  v8 = sub_22F141A3C(a3, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  if (!v8 || v8 == a3)
    return;
  v10 = v8;
  v11 = sub_22F1E2D38(*(uint64_t **)(a1 + 112), v8, 0);
  if (!v11)
    return;
  v12 = v11;
  v24[0] = " ";
  v24[1] = 1;
  v26 = v28;
  v27 = xmmword_22F44E330;
  sub_22EB87B90(&v26, (uint64_t)v24, 1);
  v13 = a4;
  v14 = qword_22F49B4D0[a4];
  v15 = off_24FAB94C0[v13];
  v16 = v27;
  if (*((_QWORD *)&v27 + 1) < (unint64_t)v27 + v14)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = v27;
  }
  memcpy((char *)v26 + v16, v15, v14);
  v17 = v27 + v14;
  *(_QWORD *)&v27 = v17;
  if (*((_QWORD *)&v27 + 1) < (unint64_t)(v17 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v17 = v27;
  }
  *((_BYTE *)v26 + v17) = 32;
  v18 = (char *)v26;
  v19 = v27;
  v20 = v27 + 1;
  *(_QWORD *)&v27 = v27 + 1;
  v21 = *(unsigned __int8 *)v12;
  v22 = word_22F4ADB24[*(unsigned __int8 *)v12];
  if ((v22 & 7) != 0)
  {
    if (v20 >= v19)
      v20 = v19;
    goto LABEL_14;
  }
  v23 = *((unsigned __int8 *)v12 - 1);
  if ((_DWORD)v23 == 91)
  {
    if (v21 != 93)
    {
      if (v20)
        v18 = (char *)v26 + 1;
      v20 -= v20 != 0;
      goto LABEL_14;
    }
LABEL_28:
    if (v20 < v19)
      v19 = v20;
    if (v19)
      v18 = (char *)v26 + 1;
    v20 = v19 - (v19 != 0);
    goto LABEL_14;
  }
  if (v21 != 36 && (v22 & 0xE8) == 0 && (_DWORD)v23 != 36 && (word_22F4ADB24[v23] & 0xE8) == 0)
    goto LABEL_28;
LABEL_14:
  sub_22E729148(v18, v20, v10, 0, (uint64_t)v24);
  sub_22E890748(a2, v24);
  if (v25 < 0)
    operator delete((void *)v24[3]);
  if (v26 != v28)
    free(v26);
}

uint64_t sub_22EE93418(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 48);
  if ((v1 & 0x10000) != 0)
    goto LABEL_17;
  v2 = 0;
  v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 8);
  if (v3 > 0xC0)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 8) > 0xFBu)
    {
      if (v3 == 252)
      {
        v2 = 0x100000000;
        v4 = 27;
      }
      else
      {
        v4 = 0;
        if (v3 == 255)
        {
          v2 = 0x100000000;
          v4 = 28;
        }
      }
    }
    else if (v3 == 193)
    {
      v2 = 0x100000000;
      v4 = 25;
    }
    else
    {
      v4 = 0;
      if (v3 == 198)
      {
        v2 = 0x100000000;
        v4 = 26;
      }
    }
    return v4 | v2;
  }
  if (v3 == 173)
  {
    v2 = 0x100000000;
    v4 = 20;
    return v4 | v2;
  }
  if (v3 != 185)
  {
    v4 = 0;
    if (v3 == 187)
    {
      v2 = 0x100000000;
      v4 = 24;
    }
    return v4 | v2;
  }
  if ((v1 & 0x400000) == 0)
  {
LABEL_17:
    v2 = 0;
    v4 = 0;
    return v4 | v2;
  }
  v6 = a1 + 8 * (unsigned __int16)v1 + 96 * ((v1 >> 18) & 1) + 16 * ((v1 >> 19) & 1);
  v7 = *(unsigned int *)(v6 + 88);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (uint64_t *)(v6 + 16 * ((v1 >> 22) & 1) + 80);
    v10 = 8 * v7;
    while (1)
    {
      v11 = *v9;
      if ((unint64_t)*v9 >= 0x10)
      {
        v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
        if (v12 && *(_BYTE *)(v12 + 16) == 57)
          v11 = *(_QWORD *)(v12 + 8);
      }
      else
      {
        v11 = 0;
      }
      v13 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
      v14 = sub_22F408D68(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
      v15 = sub_22F10BF84(*v13);
      if ((v15 & 0xFF00000000) != 0)
        break;
      v8 |= v14;
      ++v9;
      v10 -= 8;
      if (!v10)
      {
        v16 = (v8 & 1) == 0;
        v17 = 21;
        goto LABEL_30;
      }
    }
    v16 = (_DWORD)v15 == 2;
    v17 = 22;
LABEL_30:
    if (v16)
      v4 = v17;
    else
      v4 = v17 + 1;
    v2 = 0x100000000;
  }
  else
  {
    v2 = 0x100000000;
    v4 = 21;
  }
  return v4 | v2;
}

uint64_t sub_22EE935C0(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 32 * a2 + 16) + 24);
}

uint64_t sub_22EE935DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  unsigned int v7;

  v6 = *(_QWORD *)result;
  v7 = *(_DWORD *)(*(_QWORD *)result + 8);
  if (v7 >= *(_DWORD *)(*(_QWORD *)result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 4 * v7) = a5;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22EE93638(uint64_t result, int *a2, _QWORD **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int *v28;
  BOOL v29;
  BOOL v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  int v40;
  int *v41;
  BOOL v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  int *v54;
  int *v55;
  int v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int *v73;
  int v74;
  int *v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  int *v80;
  int *v81;
  int v82;
  int *v83;
  int *v84;
  int *v85;
  int v86;
  int *v87;
  int64_t v88;

  v9 = (int *)result;
LABEL_2:
  v85 = a2 - 2;
  v87 = a2 - 1;
  v84 = a2 - 3;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_22F1E3C34(*a3, *(a2 - 1), *v10);
        if ((_DWORD)result)
        {
          v40 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v40;
        }
        return result;
      case 3:
        return sub_22EE93D94(v10, v10 + 1, v87, a3);
      case 4:
        return sub_22EE94018(v10, v10 + 1, v10 + 2, v87, a3);
      case 5:
        return sub_22EE940C8(v10, v10 + 1, v10 + 2, v10 + 3, v87, a3);
      default:
        if (v11 <= 95)
        {
          v41 = v10 + 1;
          v43 = v10 == a2 || v41 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v10;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = sub_22F1E3C34(*a3, v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(int *)((char *)v10 + v49 + 4) = *(int *)((char *)v10 + v49);
                    if (!v49)
                      break;
                    result = sub_22F1E3C34(*a3, v48, *(int *)((char *)v10 + v49 - 4));
                    v49 -= 4;
                    if ((result & 1) == 0)
                    {
                      v50 = (int *)((char *)v10 + v49 + 4);
                      goto LABEL_74;
                    }
                  }
                  v50 = v10;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 4;
              }
              while (v45 + 1 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v78 = *v9;
              v77 = v9[1];
              v9 = v41;
              result = sub_22F1E3C34(*a3, v77, v78);
              if ((_DWORD)result)
              {
                v79 = *v9;
                v80 = v9;
                do
                {
                  v81 = v80;
                  v82 = *--v80;
                  *v81 = v82;
                  result = sub_22F1E3C34(*a3, v79, *(v81 - 2));
                }
                while ((result & 1) != 0);
                *v80 = v79;
              }
              v41 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v51 = (unint64_t)(v12 - 2) >> 1;
            v88 = v51;
            v83 = a2;
            do
            {
              v52 = v51;
              if (v88 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v9[v53];
                if (2 * v51 + 2 < v12 && sub_22F1E3C34(*a3, *v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v9[v52];
                result = sub_22F1E3C34(*a3, *v54, *v55);
                if ((result & 1) == 0)
                {
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v88 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v9[v58];
                    v59 = 2 * v53 + 2;
                    if (v59 < v12 && sub_22F1E3C34(*a3, *v54, v54[1]))
                    {
                      ++v54;
                      v58 = v59;
                    }
                    result = sub_22F1E3C34(*a3, *v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  a2 = v83;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v60 = a2;
              v61 = 0;
              v86 = *v9;
              v62 = v12 - 2;
              if (v12 < 2)
                v62 = v12 - 1;
              v63 = v62 >> 1;
              v64 = v9;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v12)
                {
                  result = sub_22F1E3C34(*a3, *v65, v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v68 = v60 - 1;
              if (v65 == v68)
              {
                v69 = v68;
                *v65 = v86;
                v71 = v12 - 1;
              }
              else
              {
                *v65 = *v68;
                v69 = v68;
                *v68 = v86;
                v70 = (char *)v65 - (char *)v9 + 4;
                v71 = v12 - 1;
                if (v70 >= 5)
                {
                  v72 = (((unint64_t)v70 >> 2) - 2) >> 1;
                  v73 = &v9[v72];
                  result = sub_22F1E3C34(*a3, *v73, *v65);
                  if ((_DWORD)result)
                  {
                    v74 = *v65;
                    do
                    {
                      v75 = v73;
                      *v65 = *v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v9[v72];
                      result = sub_22F1E3C34(*a3, *v73, v74);
                      v65 = v75;
                    }
                    while ((result & 1) != 0);
                    *v75 = v74;
                  }
                }
              }
              v76 = v12 <= 2;
              v12 = v71;
              a2 = v69;
            }
            while (!v76);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          sub_22EE93D94(&v9[(unint64_t)v12 >> 1], v9, v87, a3);
        }
        else
        {
          sub_22EE93D94(v9, &v9[(unint64_t)v12 >> 1], v87, a3);
          sub_22EE93D94(v9 + 1, v14 - 1, v85, a3);
          sub_22EE93D94(v9 + 2, &v9[v13 + 1], v84, a3);
          sub_22EE93D94(v14 - 1, &v9[(unint64_t)v12 >> 1], &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_22F1E3C34(*a3, *(v9 - 1), *v9))
        {
          v31 = *v9;
          result = sub_22F1E3C34(*a3, *v9, *v87);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v32 = v10[1];
              ++v10;
              result = sub_22F1E3C34(*a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v9 + 1;
            do
            {
              v10 = v33;
              if (v33 >= a2)
                break;
              ++v33;
              result = sub_22F1E3C34(*a3, v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *--v34;
              result = sub_22F1E3C34(*a3, v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!sub_22F1E3C34(*a3, v31, v37));
            do
            {
              v38 = *--v34;
              result = sub_22F1E3C34(*a3, v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v16 = 0;
        v17 = *v9;
        while (sub_22F1E3C34(*a3, v9[++v16], v17))
          ;
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 1)
        {
          do
          {
            if (v19 >= a2)
              break;
            v22 = *--a2;
          }
          while (!sub_22F1E3C34(*a3, v22, v17));
        }
        else
        {
          do
            v21 = *--a2;
          while (!sub_22F1E3C34(*a3, v21, v17));
        }
        if (v19 >= a2)
        {
          v28 = v19 - 1;
        }
        else
        {
          v23 = &v9[v16];
          v24 = a2;
          do
          {
            v25 = *v23;
            *v23 = *v24;
            *v24 = v25;
            do
            {
              v26 = v23[1];
              ++v23;
            }
            while (sub_22F1E3C34(*a3, v26, v17));
            do
              v27 = *--v24;
            while (!sub_22F1E3C34(*a3, v27, v17));
          }
          while (v23 < v24);
          v28 = v23 - 1;
        }
        if (v28 != v9)
          *v9 = *v28;
        *v28 = v17;
        v29 = v19 >= a2;
        a2 = v20;
        if (!v29)
        {
LABEL_32:
          result = sub_22EE93638(v9, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 1;
          continue;
        }
        v30 = sub_22EE93E74(v9, v28, a3);
        v10 = v28 + 1;
        result = sub_22EE93E74(v28 + 1, v20, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22EE93D94(int *a1, int *a2, int *a3, _QWORD **a4)
{
  BOOL v8;
  _BOOL8 result;
  int v10;
  int v11;
  int v12;
  int v13;

  v8 = sub_22F1E3C34(*a4, *a2, *a1);
  result = sub_22F1E3C34(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_22F1E3C34(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_22F1E3C34(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_22EE93E74(int *a1, int *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_22F1E3C34(*a3, *(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_22EE93D94(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_22EE94018(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_22EE940C8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_22EE93D94(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22F1E3C34(*a3, *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v14 -= 4;
        if (!sub_22F1E3C34(*a3, v13, *((_DWORD *)v15 + 1)))
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == a2)
      return 1;
  }
}

BOOL sub_22EE94018(int *a1, int *a2, int *a3, int *a4, _QWORD **a5)
{
  _BOOL8 result;
  int v11;
  int v12;
  int v13;

  sub_22EE93D94(a1, a2, a3, a5);
  result = sub_22F1E3C34(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_22F1E3C34(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_22F1E3C34(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_22EE940C8(int *a1, int *a2, int *a3, int *a4, int *a5, _QWORD **a6)
{
  _BOOL8 result;
  int v13;
  int v14;
  int v15;
  int v16;

  sub_22EE94018(a1, a2, a3, a4, a6);
  result = sub_22F1E3C34(*a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_22F1E3C34(*a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_22F1E3C34(*a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_22F1E3C34(*a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

void sub_22EE941A0(unint64_t a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  __n128 *v7;
  unint64_t v8;
  const std::nothrow_t *v9;
  unint64_t v10;
  __n128 *v11;
  BOOL v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if (!*(_BYTE *)(a3 + 232))
  {
    v7 = *(__n128 **)(a3 + 88);
    v8 = *(unsigned int *)(a3 + 96);
    if ((_DWORD)v8)
    {
      v9 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v10 = *(unsigned int *)(a3 + 96);
      while (1)
      {
        v11 = (__n128 *)operator new(16 * v10, v9);
        if (v11)
          break;
        v12 = v10 > 1;
        v10 >>= 1;
        if (!v12)
          goto LABEL_6;
      }
      v13 = v11;
      sub_22EE94620(v7, &v7[v8], v8, v11, v10, a4);
      operator delete(v13);
    }
    else
    {
LABEL_6:
      sub_22EE94620(v7, &v7[v8], v8, 0, 0, a4);
    }
    *(_BYTE *)(a3 + 232) = 1;
  }
  v14 = *(unsigned int *)(a3 + 96);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD **)(a3 + 88);
    v16 = *(unsigned int *)(a3 + 96);
    do
    {
      v17 = v16 >> 1;
      v18 = &v15[2 * (v16 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v16 += ~(v16 >> 1);
      if (v20 < a1)
        v15 = v19;
      else
        v16 = v17;
    }
    while (v16);
  }
  else
  {
    v15 = *(_QWORD **)(a3 + 88);
  }
  v21 = *(_QWORD *)(a3 + 88) + 16 * v14;
  if (v15 != (_QWORD *)v21)
  {
    v22 = v15 + 1;
    do
    {
      v23 = v22 - 1;
      if (*(v22 - 1) != a1)
        break;
      v15 = (_QWORD *)*v22;
      if (*v22)
      {
        *v22 = 0;
        break;
      }
      v22 += 2;
    }
    while (v23 + 2 != (_QWORD *)v21);
  }
  *a2 = v15;
}

void sub_22EE942FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EE9432C()
{
  JUMPOUT(0x22EE94318);
}

void sub_22EE94370(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;

  sub_22F115E94(*(_QWORD *)(a1 + 8), a3, v3, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 120));
}

void *sub_22EE94394(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (v6 && *(_BYTE *)(v6 + 16) == 57)
      v5 = *(_QWORD *)(v6 + 24);
  }
  else
  {
    v5 = 0;
  }
  v7 = (const void *)(v5 + 8);
  v8 = sub_22F11598C(a3);
  return memcpy(v3, v7, v8);
}

void sub_22EE94620(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 *v27;
  __n128 v28;
  __n128 *v29;
  char *v30;
  __n128 *v31;
  unint64_t v32;
  __n128 *v33;
  uint64_t v34;
  __n128 *v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  __n128 *v39;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_u64[0];
      v9 = a1->n128_u64[0];
      if (v8 < a1->n128_u64[0])
      {
        a1->n128_u64[0] = v8;
        a2[-1].n128_u64[0] = v9;
        v10 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v10;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v17 = a1 + 1;
        if (&a1[1] != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v20 = v17;
            v21 = v19[1].n128_u64[0];
            v22 = v19->n128_u64[0];
            if (v21 < v19->n128_u64[0])
            {
              v23 = v19[1].n128_u64[1];
              v24 = v18;
              while (1)
              {
                v25 = (char *)a1 + v24;
                v26 = *(uint64_t *)((char *)&a1->n128_i64[1] + v24);
                *((_QWORD *)v25 + 2) = v22;
                *((_QWORD *)v25 + 3) = v26;
                if (!v24)
                  break;
                v22 = *((_QWORD *)v25 - 2);
                v24 -= 16;
                if (v21 >= v22)
                {
                  v27 = (__n128 *)((char *)a1 + v24 + 16);
                  goto LABEL_18;
                }
              }
              v27 = a1;
LABEL_18:
              v27->n128_u64[0] = v21;
              v27->n128_u64[1] = v23;
            }
            v17 = v20 + 1;
            v18 += 16;
            v19 = v20;
          }
          while (&v20[1] != a2);
        }
      }
    }
    else
    {
      v13 = (char *)a4;
      v14 = a3 >> 1;
      v15 = &a1[a3 >> 1];
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v28 = sub_22EE94874(a1, v15, v16, a4, a6);
        v29 = (__n128 *)&v13[16 * v14];
        sub_22EE94874(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v29, v28);
        v30 = &v13[16 * a3];
        v31 = v29;
        while (v31 != (__n128 *)v30)
        {
          v32 = v31->n128_u64[0];
          if (v31->n128_u64[0] < *(_QWORD *)v13)
          {
            v33 = v31;
          }
          else
          {
            v32 = *(_QWORD *)v13;
            v33 = (__n128 *)v13;
          }
          if (v31->n128_u64[0] < *(_QWORD *)v13)
            ++v31;
          else
            v13 += 16;
          v7->n128_u64[0] = v32;
          v7->n128_u64[1] = v33->n128_u64[1];
          ++v7;
          if (v13 == (char *)v29)
          {
            if (v31 != (__n128 *)v30)
            {
              v34 = 0;
              do
              {
                v35 = &v31[v34];
                v36 = &v7[v34];
                v36->n128_u64[0] = v31[v34].n128_u64[0];
                v36->n128_u64[1] = v31[v34++].n128_u64[1];
              }
              while (&v35[1] != (__n128 *)v30);
            }
            return;
          }
        }
        if (v13 != (char *)v29)
        {
          v37 = 0;
          do
          {
            v38 = &v7[v37 / 0x10];
            v39 = (__n128 *)&v13[v37];
            v38->n128_u64[0] = *(_QWORD *)&v13[v37];
            v38->n128_u64[1] = *(_QWORD *)&v13[v37 + 8];
            v37 += 16;
          }
          while (&v39[1] != v29);
        }
      }
      else
      {
        sub_22EE94620(a1, v15, v16, a4, a5);
        sub_22EE94620(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
        sub_22EE94A78((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
}

__n128 sub_22EE94874(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u64[0] >= a1->n128_u64[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = &a1[a3 >> 1];
      sub_22EE94620(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_22EE94620(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v21 = &v8[a3 >> 1];
      while (v21 != a2)
      {
        if (v21->n128_u64[0] >= v8->n128_u64[0])
        {
          v23 = *v8++;
          result = v23;
        }
        else
        {
          v22 = *v21++;
          result = v22;
        }
        *v5++ = result;
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v24 = 0;
            do
            {
              result = v21[v24];
              v5[v24++] = result;
            }
            while (&v21[v24] != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v25 = 0;
        do
        {
          result = v8[v25];
          v5[v25++] = result;
        }
        while (&v8[v25] != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          v14 = v10;
          v15 = v13->n128_u64[0];
          ++v13;
          if (v8[1].n128_u64[0] >= v15)
          {
            result = *v10;
            *v13 = *v10;
          }
          else
          {
            result = *v12;
            *v13 = *v12;
            v16 = a4;
            if (v12 != a4)
            {
              v17 = v11;
              while (1)
              {
                v16 = (__n128 *)((char *)a4 + v17);
                v18 = *(unint64_t *)((char *)a4[-1].n128_u64 + v17);
                if (v14->n128_u64[0] >= v18)
                  break;
                v19 = v16[-1].n128_i64[1];
                v16->n128_u64[0] = v18;
                v16->n128_u64[1] = v19;
                v17 -= 16;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            v16->n128_u64[0] = v14->n128_u64[0];
            v16->n128_u64[1] = v8[1].n128_u64[1];
          }
          v10 = v14 + 1;
          v11 += 16;
          v12 = v13;
          v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_22EE94A78(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *i;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = *(_QWORD *)a2;
      v11 = -a4;
      while (1)
      {
        v12 = *(_QWORD *)&result[v9];
        if (v10 < v12)
          break;
        v9 += 16;
        v52 = __CFADD__(v11++, 1);
        if (v52)
          return result;
      }
      v13 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v59 = &result[v9];
          *(_QWORD *)v59 = v10;
          *(_QWORD *)a2 = v12;
          v60 = *(_QWORD *)&result[v9 + 8];
          *((_QWORD *)v59 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v60;
          return result;
        }
        if (v11 <= 0)
          v24 = -v11;
        else
          v24 = 1 - v11;
        v23 = v24 >> 1;
        v17 = &result[16 * (v24 >> 1) + v9];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 4;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[16 * (v25 >> 1)];
            v29 = *(_QWORD *)v27;
            v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(_QWORD *)v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[16 * (v14 >> 1)];
        v17 = a2;
        if (v13 != a2)
        {
          v18 = (a2 - result - v9) >> 4;
          v17 = &result[v9];
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[16 * (v18 >> 1)];
            v22 = *(_QWORD *)v20;
            v21 = v20 + 16;
            v18 += ~(v18 >> 1);
            if (*(_QWORD *)v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = (v17 - result - v9) >> 4;
      }
      v30 = v16;
      if (v17 != a2)
      {
        v30 = v17;
        if (a2 != v16)
        {
          v31 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v10;
          *(_QWORD *)a2 = v31;
          v32 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v32;
          v30 = v17 + 16;
          for (i = a2 + 16; i != v16; i += 16)
          {
            if (v30 == a2)
              a2 = i;
            v34 = *(_QWORD *)v30;
            *(_QWORD *)v30 = *(_QWORD *)i;
            *(_QWORD *)i = v34;
            v35 = *((_QWORD *)v30 + 1);
            *((_QWORD *)v30 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v35;
            v30 += 16;
          }
          if (v30 == a2)
          {
            v30 = a2;
          }
          else
          {
            v36 = v30;
            v37 = a2;
            do
            {
              while (1)
              {
                v38 = *(_QWORD *)v36;
                *(_QWORD *)v36 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v38;
                v39 = *((_QWORD *)v36 + 1);
                *((_QWORD *)v36 + 1) = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = v39;
                v36 += 16;
                a2 += 16;
                if (a2 == v16)
                  break;
                if (v36 == v37)
                  v37 = a2;
              }
              a2 = v37;
            }
            while (v36 != v37);
          }
        }
      }
      a4 = -(v23 + v11);
      v40 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v11)
      {
        v45 = v16;
        v46 = a6;
        sub_22EE94A78(v30, v45, a3, a4, a5 - v15, a6, a7);
        a6 = v46;
        v16 = v17;
        v40 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        v41 = v13;
        v42 = a3;
        v43 = v15;
        v44 = a6;
        sub_22EE94A78(v41, v17, v30, v23, v43, a6, a7);
        a3 = v42;
        a6 = v44;
        v13 = v30;
      }
      a5 = v40;
      result = v13;
      a2 = v16;
      if (!v40)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v54 = 0;
        do
        {
          *(_OWORD *)&a6[v54] = *(_OWORD *)&result[v54];
          v54 += 16;
        }
        while (&result[v54] != a2);
        if (v54)
        {
          v55 = &a6[v54];
          v56 = (uint64_t)&a6[v54 - 16];
          while (a2 != a3)
          {
            v57 = *(_QWORD *)a2;
            if (*(_QWORD *)a2 < *(_QWORD *)a6)
            {
              v58 = a2;
            }
            else
            {
              v57 = *(_QWORD *)a6;
              v58 = a6;
            }
            if (*(_QWORD *)a2 < *(_QWORD *)a6)
              a2 += 16;
            else
              a6 += 16;
            *(_QWORD *)result = v57;
            *((_QWORD *)result + 1) = *((_QWORD *)v58 + 1);
            result += 16;
            if (v55 == a6)
              return result;
          }
          if (v55 != a6)
          {
            v63 = 0;
            do
            {
              v64 = &result[v63];
              v65 = &a6[v63];
              *(_QWORD *)v64 = *(_QWORD *)&a6[v63];
              *((_QWORD *)v64 + 1) = *(_QWORD *)&a6[v63 + 8];
              v63 += 16;
            }
            while ((char *)v56 != v65);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v47 = 0;
      do
      {
        *(_OWORD *)&a6[v47] = *(_OWORD *)&a2[v47];
        v47 += 16;
      }
      while (&a2[v47] != a3);
      if (v47)
      {
        v48 = &a6[v47];
        v49 = a3 - 8;
        while (a2 != result)
        {
          v50 = *((_QWORD *)v48 - 2);
          v51 = *((_QWORD *)a2 - 2);
          v52 = v50 >= v51;
          if (v50 >= v51)
          {
            v53 = v48;
          }
          else
          {
            v50 = *((_QWORD *)a2 - 2);
            v53 = a2;
          }
          if (v52)
            v48 -= 16;
          else
            a2 -= 16;
          *((_QWORD *)v49 - 1) = v50;
          *(_QWORD *)v49 = *((_QWORD *)v53 - 1);
          v49 -= 16;
          if (v48 == a6)
            return result;
        }
        if (v48 != a6)
        {
          v61 = 0;
          do
          {
            v62 = &v49[v61];
            *((_QWORD *)v62 - 1) = *(_QWORD *)&v48[v61 - 16];
            *(_QWORD *)v62 = *(_QWORD *)&v48[v61 - 8];
            v61 -= 16;
          }
          while (&v48[v61] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EE94EBC(uint64_t result, uint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *a3 = *(_DWORD *)(result + 4);
  a3[3] = *(_DWORD *)(result + 8);
  a3[1] = *(_DWORD *)(result + 36);
  a3[2] = *(_DWORD *)(result + 44);
  LODWORD(v3) = *(unsigned __int8 *)(a2 + 16);
  if ((_DWORD)v3 != 25)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((v3 & 0x3FFFC000000000) != 0)
    {
      v4 = a3 + 4;
      v5 = (unsigned __int16)(v3 >> 38);
      v6 = 16;
      do
      {
        *v4++ = *(_QWORD *)(*(_QWORD *)(result + 72) + v6);
        v6 += 32;
        --v5;
      }
      while (v5);
      v3 = *(unsigned __int8 *)(a2 + 16);
    }
  }
  if (a2)
  {
    if (v3 == 26)
    {
      v7 = *(_QWORD *)(a2 + 16);
      if ((v7 & 0x3C0000000000000) != 0)
      {
        v8 = (unsigned __int16)(v7 >> 38);
        if (*(_QWORD *)(a2 + 16) == 25)
          v8 = 0;
        *(_QWORD *)&a3[2 * v8 + 4] = *(_QWORD *)(result + 64);
      }
    }
  }
  return result;
}

void sub_22EE94F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11[2];

  v3 = *(_QWORD *)(a1 + 24);
  if ((*(_QWORD *)v3 & 0x3F000) == 0x25000)
  {
    *(_DWORD *)a3 = *(_DWORD *)(v3 + 120);
    *(_QWORD *)(a3 + 4) = *(_QWORD *)(v3 + 136);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4 >= 0x10)
    {
      v5 = 0;
      v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if (v7 && *(_BYTE *)(v7 + 16) == 57)
        v5 = *(uint64_t **)(v7 + 24);
    }
    else
    {
      v5 = 0;
    }
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >= 0x10 && (*(_QWORD *)(a2 + 32) & 0xFLL) == 0)
      v10 = *(_QWORD *)((char *)&unk_22F49B4F0
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v10 = 1;
    v11[0] = *(_QWORD *)(a2 + 32);
    v11[1] = (a3 + v10 + 11) & -v10;
    sub_22F1164A8(v11, *v5, v5 + 1);
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 156);
    *(_DWORD *)(a3 + 4) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)a3 = v6;
    sub_22EE957CC(a1, *(_QWORD *)(a2 + 32));
  }
}

void sub_22EE95084(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  __n128 v6;

  sub_22EE957CC(a1, *(_QWORD *)(a2 + 32));
  sub_22EE941A0(a2, a3, *(_QWORD *)(a1 + 16), v6);
}

uint64_t sub_22EE9510C(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;

  v3 = result;
  v19 = a2;
  v20 = a3;
  v4 = *(unsigned int *)(*(_QWORD *)(result + 24) + 120);
  *(_QWORD *)a3 = v4 | (v4 << 32);
  v5 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1FF;
  v6 = v5 - 173;
  v7 = v5 - 181;
  if ((v5 - 173) < 5 || v7 < 0x25 || v5 == 179 || v5 == 168)
  {
    v9 = v7 < 0x25 || v5 == 179 || v5 == 168;
    v10 = 4;
    if (!v9)
      v10 = 1;
    if (v6 >= 5)
      v11 = v10;
    else
      v11 = 4;
    *(unsigned int *)((char *)a3 + ((v11 + 7) & -v11)) = *(_DWORD *)(*(_QWORD *)(result + 24) + 208);
    if (sub_22E7F17CC(&v19))
    {
      v12 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 116);
      v13 = v20;
      v14 = *v20;
      if (*v20)
      {
        if (v14 >= v12)
          v14 = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 116);
        if (v20[1] > v12)
          LODWORD(v12) = v20[1];
        *v20 = v14;
        v13[1] = v12;
      }
      else
      {
        *(_QWORD *)v20 = v12 | (v12 << 32);
      }
    }
    result = sub_22E7F1850(&v19);
    if ((_DWORD)result)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 104);
      v16 = v20;
      if (*v20)
      {
        v17 = HIDWORD(v15);
        if (*v20 < v15)
          LODWORD(v15) = *v20;
        v18 = v20[1];
        if (v18 <= v17)
          v18 = v17;
        *v20 = v15;
        v16[1] = v18;
      }
      else
      {
        *(_QWORD *)v20 = v15;
      }
    }
  }
  return result;
}

void sub_22EE9523C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  void *v15[2];
  _QWORD v16[34];

  v16[33] = *MEMORY[0x24BDAC8D0];
  v5 = a1[3];
  *(_DWORD *)a3 = *(_DWORD *)(v5 + 120);
  v6 = *(_QWORD *)v5;
  if ((*(_QWORD *)v5 & 0x3F000) == 0x22000)
  {
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(v5 + 140);
    v6 = *(_QWORD *)v5;
  }
  if ((v6 & 0x1000000) != 0)
  {
    v7 = *(_DWORD **)(v5 + 8);
    if (v7)
    {
      if (*(_DWORD *)(v5 + 56) && *(_DWORD *)(v5 + 60))
      {
        if (!*(_QWORD *)(v5 + 64))
        {
          v8 = 0;
          v9 = 0;
LABEL_11:
          *(_QWORD *)(a3 + 8) = v8;
          *(_QWORD *)(a3 + 16) = v9;
          goto LABEL_13;
        }
      }
      else if (!*(_QWORD *)(v5 + 64))
      {
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
LABEL_13:
        *(_DWORD *)(a3 + 24) = *v7;
        *(_DWORD *)(a3 + 28) = v7[1];
        *(_QWORD *)(a3 + 32) = 0;
        *(_DWORD *)(a3 + 40) = v7[9];
        *(_DWORD *)(a3 + 44) = v7[10];
        if (v7[11])
        {
          v14[1] = v7[11];
          v15[0] = v16;
          v15[1] = (void *)0x800000000;
          v16[32] = 0;
          v14[0] = v7 + 14;
          sub_22ED58288(*a1, (uint64_t)v14, (uint64_t)v15);
          v10 = v15[0];
          if (v7[11])
          {
            v11 = 0;
            v12 = (uint64_t *)((char *)v15[0] + 24);
            do
            {
              v13 = *v12;
              v12 += 4;
              *(_QWORD *)(a3 + 56 + 8 * v11++) = v13;
            }
            while (v11 < v7[11]);
          }
          if (v10 != v16)
            free(v10);
        }
        return;
      }
      v8 = sub_22F0ABC50((uint64_t *)(v5 + 64), a1[1]);
      goto LABEL_11;
    }
  }
}

void sub_22EE953B4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;

  v6 = *(_QWORD *)(a1 + 24);
  if ((*(_QWORD *)v6 & 0x3F000) == 0x1C000
    && (v7 = *(_QWORD *)(v6 + 8), v7 >= 0x10)
    && (v13 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)) != 0
    && *(_BYTE *)(v13 + 16) == 57
    && (v14 = *(_QWORD *)(v13 + 24)) != 0)
  {
    v15 = (const void *)(v14 + 8);
    v16 = sub_22F11598C(a2);
    memcpy(a3, v15, v16);
  }
  else
  {
    if ((((*(_QWORD *)v6 >> 12) & 0x3F) > 0x1C) | (0x7FFFFFu >> (*(_QWORD *)v6 >> 12)) & 1)
      v8 = 0;
    else
      v8 = *(_DWORD *)(v6 + 120);
    *(_DWORD *)a3 = v8;
    v10 = *(_QWORD *)(v6 + 64);
    v9 = (uint64_t *)(v6 + 64);
    if (v10)
      sub_22F0ABC50(v9, *(_QWORD *)(a1 + 8));
    else
      v11 = 0;
    a3[1] = v11;
    v12 = *(_QWORD *)(a2 + 40);
    if ((v12 < 0x10 || (v12 & 0xF) != 0) && (v12 & 0xF) != 0)
      v12 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    sub_22EE942FC(a1, v12);
  }
}

uint64_t sub_22EE954FC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  sub_22EE957CC(a1, *(_QWORD *)(a2 + 24));
  v6 = *(_QWORD *)(a1 + 16);
  v9 = 0;
  result = sub_22F24C318(*(_QWORD *)(v6 + 240), *(_DWORD *)(v6 + 256), a2, &v9);
  if ((_DWORD)result)
    v8 = v9;
  else
    v8 = *(_QWORD *)(v6 + 240) + 16 * *(unsigned int *)(v6 + 256);
  *a3 = *(_DWORD *)(v8 + 8);
  return result;
}

void *sub_22EE955BC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6[2];

  v6[0] = a2;
  v6[1] = a3;
  if (a1 >= 0x10)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (v4 && *(_BYTE *)(v4 + 16) == 57)
      v3 = *(uint64_t **)(v4 + 24);
  }
  else
  {
    v3 = 0;
  }
  return sub_22F1164A8(v6, *v3, v3 + 1);
}

void *sub_22EE95614(unint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  unint64_t v11[2];

  *a4 = a2;
  if (a1 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (v6 && *(_BYTE *)(v6 + 16) == 57)
      v5 = *(uint64_t **)(v6 + 24);
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(a3 + 32);
  if (v7 >= 0x10 && (v7 & 0xF) == 0)
    v10 = *(_QWORD *)((char *)&unk_22F49B4F0
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v10 = 1;
  v11[0] = v7;
  v11[1] = ((unint64_t)a4 + v10 + 3) & -v10;
  return sub_22F1164A8(v11, *v5, v5 + 1);
}

void sub_22EE956BC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  size_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6 >= 0x10
    && (v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0)) != 0
    && *(_BYTE *)(v7 + 16) == 57
    && (v8 = *(uint64_t **)(v7 + 24)) != 0)
  {
    v11 = *v8;
    v9 = v8 + 1;
    v10 = v11;
    v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    if (v12)
      v13 = *(_BYTE *)(v12 + 16) == 24;
    else
      v13 = 0;
    if (v13 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24 && sub_22F10CF48(v12))
    {
      v14 = *(_QWORD *)(v10 + 40);
      if (v14 >= 0x10 && (*(_QWORD *)(v10 + 40) & 0xFLL) == 0)
        v17 = *(_QWORD *)((char *)&unk_22F49B4F0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v17 = 1;
      v9 = (const void *)(((unint64_t)v9 + v17 + 15) & -v17);
    }
    v16 = sub_22F11598C(a2);
    memcpy(a3, v9, v16);
  }
  else
  {
    sub_22F115E94(*(_QWORD *)(a1 + 8), a2, a3, *(_DWORD *)(v5 + 132));
  }
}

void sub_22EE957CC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xF) == 0)
    __asm { BR              X10 }
  sub_22EE942FC(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
}

void *sub_22EE9590C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (v6 && *(_BYTE *)(v6 + 16) == 57)
      v5 = *(_QWORD *)(v6 + 24);
  }
  else
  {
    v5 = 0;
  }
  v7 = (const void *)(v5 + 8);
  v8 = sub_22F11598C(a3);
  return memcpy(v3, v7, v8);
}

uint64_t sub_22EE95B04(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  result = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v9 != 10 && v9 != 32)
  {
    result = sub_22F115064(result);
    if (!(_DWORD)result)
      return result;
    v6 = *a2;
    v7 = *a2 & 0xFFFFFFFFFFFFFFF0;
  }
  v10 = *(_QWORD *)(v7 + 8);
  if ((v10 & 8) == 0 || (*(_WORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
  {
    if (a3 << 6)
    {
      v11 = *(_QWORD *)(a1 + 88);
      v13 = (a3 << 6);
      v12 = sub_22E491354((unsigned int *)&v13, v6);
      result = sub_22EF5DBC4(v11, v12, v13);
      v6 = result;
    }
    *a2 = v6;
  }
  return result;
}

unint64_t sub_22EE95BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_DWORD *)(v2 + 16) == 7;
  else
    v3 = 0;
  if (!v3)
    return a2;
  a2 = *(_QWORD *)(v2 + 32);
  if (((*(_DWORD *)(v2 + 16) >> 19) - 37) >= 0xFFFFFFFC)
    return a2;
  v6 = sub_22EE95BBC(a1, a2);
  return sub_22F369798(a1, *(_DWORD *)(v2 + 16) >> 19, v6, *(_QWORD *)(v2 + 40));
}

unint64_t sub_22EE95C30(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (a1[3] == a4)
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v7 & 8) != 0)
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v12 = a1[1];
    v13 = v9 | (v7 | a3) & 7;
    if (((v13 | v8) & 0xCFFFFFFF8) != 0)
      return sub_22EF5DBC4(a2, v12, v13 | v8);
    return v12 & 0xFFFFFFFFFFFFFFF0 | v13 & 7;
  }
  else
  {
    v10 = a4;
    if ((a3 & 8) != 0)
    {
      v6 = (_QWORD *)*v6;
      v11 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) | a3 & 7;
    }
    else
    {
      v11 = a3 & 7;
    }
    v15 = a4 + 1;
    do
    {
      if (*(unsigned __int8 *)(a1[2] + v10))
        __asm { BR              X10 }
      v6 = (_QWORD *)sub_22F10CF48((uint64_t)v6);
      v10 = v15;
    }
    while (a1[3] != v15++);
    v18 = a1[1] & 0xFFFFFFFFFFFFFFF0;
    if ((v11 & 0xCFFFFFFFFLL) != 0)
    {
      if ((v11 & 0xCFFFFFFF8) != 0)
      {
        v20 = v11;
        v19 = sub_22E491354((unsigned int *)&v20, v18);
        return sub_22EF5DBC4(a2, v19, v20);
      }
      else
      {
        v18 |= v11 & 7;
      }
    }
  }
  return v18;
}

void sub_22EE95F88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unsigned int v3;
  unint64_t v4;

  v4 = sub_22EE95C30(v2, v0, *(_QWORD *)(v1 + 32), v3);
  sub_22F36A4F8(v0, v4);
  JUMPOUT(0x22EE95F2CLL);
}

uint64_t sub_22EE95FAC(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v12;
  int v13;
  unsigned __int8 v14;
  unsigned int v15[24];
  uint64_t v16;
  uint64_t v17;

  v2 = (unsigned int *)a2;
  v17 = a2;
  v4 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (!v4 || (v5 = v4, (*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 >= 6))
  {
    v5 = 0;
    v16 = 0;
    goto LABEL_10;
  }
  v16 = v4;
  if (!sub_22E3E3190(v4))
  {
LABEL_10:
    v9 = *(_QWORD **)a1;
    sub_22EFF605C((uint64_t)v2);
    sub_22E8FCA40(v9, v10, 0xD40u, 0, (uint64_t)v15);
    v14 = *(_BYTE *)(a1 + 88) & 1;
    sub_22E894E38((uint64_t)v15, &v14);
    sub_22E903BEC(v15);
    if (!v5)
      return 1;
    sub_22E8FCA40(*(_QWORD **)a1, *(_DWORD *)(v5 + 24), 0x155Cu, 0, (uint64_t)v15);
    sub_22E890024((uint64_t)v15, &v16);
LABEL_12:
    sub_22E903BEC(v15);
    return 1;
  }
  v6 = v2[4];
  if ((_DWORD)v6)
  {
    v7 = ((unint64_t)*v2 >> 24) + 8 * (((unint64_t)*v2 >> 18) & 1) + 8;
    v8 = 8 * v6;
    while (sub_22F007CB0(*(unsigned __int8 **)((char *)v2 + v7), *(_QWORD *)(*(_QWORD *)a1 + 88), 0))
    {
      v7 += 8;
      v8 -= 8;
      if (!v8)
        return (uint64_t)v2;
    }
    v12 = *(_QWORD **)a1;
    sub_22EFF605C((uint64_t)v2);
    sub_22E8FCA40(v12, v13, 0xD41u, 0, (uint64_t)v15);
    sub_22F2F37E0((uint64_t)v15, &v17);
    goto LABEL_12;
  }
  return (uint64_t)v2;
}

uint64_t sub_22EE96118(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  LODWORD(v12) = 0;
  if (sub_22F00554C(a2, (uint64_t)&v10, (*a1)[11], 0, 0))
  {
    v4 = (*a1)[11];
    v5 = *(_QWORD *)(a2 + 8);
    sub_22EFF605C(a2);
    v7 = v6;
    v8 = sub_22E3CD3D4(v4 + 2032, 32, 3);
    sub_22EFF8F1C(v8, v4, (uint64_t)v13, v5, v7);
  }
  else
  {
    v8 = sub_22EE96884(a1, a2);
  }
  if (v12 >= 2)
    sub_22EF53BC0(&v12);
  return v8;
}

uint64_t sub_22EE9621C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t result;
  __n128 v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  __n128 v25;

  v2 = (unsigned __int8 *)a2;
  result = sub_22EE9E100(a1, a2);
  if (result)
    return result;
  if (*v2 != 233)
    return sub_22EE8C500(a1, v2);
  do
  {
    v6 = (*(_DWORD *)v2 >> 18) & 0x1F;
    if (v6 == 4)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
      do
      {
        v8 = v14;
        v15 = *v14;
        if (v15 > 0xD5)
        {
          if (v15 == 233)
          {
            v18 = *(_DWORD *)v14;
            v19 = v18 & 0x7C0000;
            if ((v18 & 0x7C0000) != 0x300000)
              goto LABEL_43;
            v15 = v18;
            v17 = v8 + 16;
          }
          else
          {
            if (v15 != 214)
              break;
            v17 = v14 + 24;
          }
        }
        else if (v15 == 155)
        {
          if ((**((_DWORD **)v14 + 2) & 0x18000) != 0)
            goto LABEL_64;
          v17 = v14 + 24;
          if (!v8[48])
            v17 = v8 + 32;
          v15 = 155;
        }
        else
        {
          if (v15 != 176)
            break;
          v16 = *((unsigned int *)v14 + 5);
          if ((_DWORD)v16 == -1)
            goto LABEL_64;
          v17 = &v14[8 * v16 + 40];
          v15 = 176;
        }
        v14 = *(unsigned __int8 **)v17;
      }
      while (v14 != v8);
      if (v15 != 233)
        goto LABEL_64;
      v19 = *(_DWORD *)v8 & 0x7C0000;
LABEL_43:
      if (v19 != 1310720)
      {
LABEL_64:
        v24 = *(_DWORD *)v2;
        goto LABEL_67;
      }
    }
    else
    {
      if (v6 != 5)
        goto LABEL_64;
      v7 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
      do
      {
        v8 = v7;
        v9 = *v7;
        if (v9 > 0xD5)
        {
          if (v9 == 233)
          {
            v12 = *(_DWORD *)v7;
            v13 = v12 & 0x7C0000;
            if ((v12 & 0x7C0000) != 0x300000)
              goto LABEL_23;
            v9 = v12;
            v11 = v8 + 16;
          }
          else
          {
            if (v9 != 214)
              break;
            v11 = v7 + 24;
          }
        }
        else if (v9 == 155)
        {
          if ((**((_DWORD **)v7 + 2) & 0x18000) != 0)
            goto LABEL_64;
          v11 = v7 + 24;
          if (!v8[48])
            v11 = v8 + 32;
          v9 = 155;
        }
        else
        {
          if (v9 != 176)
            break;
          v10 = *((unsigned int *)v7 + 5);
          if ((_DWORD)v10 == -1)
            goto LABEL_64;
          v11 = &v7[8 * v10 + 40];
          v9 = 176;
        }
        v7 = *(unsigned __int8 **)v11;
      }
      while (v7 != v8);
      if (v9 != 233)
        goto LABEL_64;
      v13 = *(_DWORD *)v8 & 0x7C0000;
LABEL_23:
      if (v13 != 0x100000)
        goto LABEL_64;
    }
    v20 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
    if (!v20)
    {
      v2 = 0;
      break;
    }
    while (1)
    {
      v2 = v20;
      v21 = *v20;
      if (v21 <= 0xD5)
      {
        if (v21 == 155)
        {
          if ((**((_DWORD **)v20 + 2) & 0x18000) != 0)
            return sub_22EE8C500(a1, v2);
          v23 = v20 + 24;
          if (!v2[48])
            v23 = v2 + 32;
          v21 = 155;
        }
        else
        {
          if (v21 != 176)
            goto LABEL_62;
          v22 = *((unsigned int *)v20 + 5);
          if ((_DWORD)v22 == -1)
            return sub_22EE8C500(a1, v2);
          v23 = &v20[8 * v22 + 40];
          v21 = 176;
        }
        goto LABEL_59;
      }
      if (v21 != 233)
      {
        if (v21 != 214)
          goto LABEL_62;
        v23 = v20 + 24;
        goto LABEL_59;
      }
      if ((*(_DWORD *)v20 & 0x7C0000) != 0x300000)
        break;
      v21 = *(_DWORD *)v20;
      v23 = v20 + 16;
LABEL_59:
      v20 = *(unsigned __int8 **)v23;
      if (v20 == v2)
        goto LABEL_62;
    }
    v21 = 233;
LABEL_62:
    ;
  }
  while (v21 == 233);
  v24 = *v2;
LABEL_67:
  if (v24 != 233)
    return sub_22EE8C500(a1, v2);
  if ((*(_BYTE *)(a1 + 88) & 2) != 0)
    return sub_22EE967F8((_QWORD *)a1, (uint64_t)v2);
  if ((*(_DWORD *)v2 & 0x7C0000) == 0x140000 && !*(_BYTE *)(a1 + 136))
  {
    *(_BYTE *)(a1 + 136) = 1;
    if (*sub_22EFFBBCC(*((unsigned __int8 **)v2 + 2)) == 161)
      result = sub_22EE9E400((uint64_t *)a1, (uint64_t)v2, v25);
    else
      result = sub_22EE967F8((_QWORD *)a1, (uint64_t)v2);
    *(_BYTE *)(a1 + 136) = 0;
  }
  else
  {
    if (((*(_DWORD *)v2 >> 18) & 0x1Eu) - 6 <= 3)
      return sub_22EE9E400((uint64_t *)a1, (uint64_t)v2, v5);
    return sub_22EE967F8((_QWORD *)a1, (uint64_t)v2);
  }
  return result;
}

uint64_t sub_22EE9656C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30[24];

  result = sub_22EE9E100(a1, a2);
  if (!result)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a1 + 144);
    if (v6 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 >= 3)
    {
      v22 = *(_QWORD **)a1;
      sub_22F0D5A50(*(_QWORD *)(v6 + 16));
      sub_22E8FCA40(v22, v23, 0xB7Fu, 0, (uint64_t)v30);
      sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16));
      v29 = __PAIR64__((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) >> 32, v24);
      sub_22E8906A0((uint64_t)v30, (uint64_t *)&v29);
LABEL_22:
      sub_22E903BEC(v30);
      return 1;
    }
    sub_22E3BA850(a1 + 96, *(const void **)(a2 + 16));
    if (!v7)
      return a2;
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 75 >= 0xFFFFFFE5)
      {
        v8 = *(_QWORD *)(v5 + 48);
        if ((v8 & 1) != 0 || (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
        {
LABEL_17:
          v19 = *(_QWORD *)(a1 + 80);
          v20 = v5 & 0xFFFFFFFFFFFFFFFBLL | (4 * *(unsigned __int8 *)(a1 + 136));
          v21 = *(_DWORD *)(v19 + 8);
          if (v21 >= *(_DWORD *)(v19 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = *(_DWORD *)(v19 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v21) = v20;
          ++*(_DWORD *)(v19 + 8);
          return a2;
        }
      }
    }
    v9 = *(_BYTE *)(a1 + 88);
    v10 = *(_QWORD **)a1;
    sub_22EFF605C(a2);
    v11 = *(_DWORD *)(a1 + 92);
    v13 = v12;
    LODWORD(v29) = v9 & 1;
    if ((v9 & 2) == 0)
      goto LABEL_13;
    v14 = v10[1611];
    v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v14 + 72), (void *)v5);
    v16 = *(_QWORD *)(v14 + 80);
    v17 = 88;
    if (v16 == *(_QWORD *)(v14 + 72))
      v17 = 92;
    if (v15 == (void **)(v16 + 8 * *(unsigned int *)(v14 + v17)))
    {
      sub_22E8FCA40(v10, v13, 0xD3Bu, 0, (uint64_t)v30);
      sub_22E8900C4((uint64_t)v30, (int *)&v29);
      sub_22E903BEC(v30);
      v18 = 1;
      if (v11)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v18 = 0;
      if (v11)
      {
LABEL_14:
        if (v5)
        {
          if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
          {
            v25 = sub_22F3202E0(v5);
            if (v25 != v11)
            {
              if (v11 == 3 && v25 == 6 || v11 == 6 && v25 == 3)
              {
                v26 = v10;
                v27 = v13;
                if ((v9 & 4) != 0)
                  v28 = 6558;
                else
                  v28 = 3403;
              }
              else
              {
                v26 = v10;
                v27 = v13;
                v28 = 3386;
              }
              sub_22E8FCA40(v26, v27, v28, 0, (uint64_t)v30);
              sub_22E8900C4((uint64_t)v30, (int *)&v29);
              goto LABEL_22;
            }
          }
        }
      }
    }
    if ((v18 & 1) != 0)
      return 1;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_22EE967F8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  int v6;
  unsigned int v7[24];

  result = sub_22EE9E100((uint64_t)a1, a2);
  if (!result)
  {
    v5 = (_QWORD *)*a1;
    sub_22EFF605C(a2);
    sub_22E8FCA40(v5, v6, 0xAFEu, 0, (uint64_t)v7);
    sub_22E903BEC(v7);
    return 1;
  }
  return result;
}

uint64_t sub_22EE96858(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EE8C500(a1, v3);
}

uint64_t sub_22EE96884(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EE96928(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE8C500(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

unint64_t *sub_22EE96928(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22EE96B50(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22EE96B50(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F49B4F0
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22EE96B50(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22EE9B190(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EE96928(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22EE9B1E4(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EE9C0C8(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

uint64_t sub_22EE9B990(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EE9BC74(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EE96928(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EE9B190((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EE9B1E4((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EE8C500(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

_QWORD *sub_22EE9C0C8(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EE9C8C8((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EE9C494((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EE96B50(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EE9C494(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EE9C8C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EE9CBB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EE9B1E4(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EE9D1D8(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EE9B190(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EE9B190((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EE9D6A0(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F49B4F0
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EE9D6A0(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22EE9D6A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22EE96928(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F49B4F0
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22EE96B50(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F49B4F0
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22EE9DBBC(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*(unsigned int *)(v9 + 1704);
    sub_22EB4DDB8(v9 + 3688, &v41, (int *)&v42, (__int16 *)(v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *(unsigned int *)(v9 + 3696);
    v11 = v10 - 2;
    v12 = *(_QWORD *)(v9 + 3688);
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)(v9 + 1693) = 0;
    if (*(_DWORD *)(v9 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08(v9 + 1840, (uint64_t *)(v15 - 496));
    }
    v16 = sub_22EE8C500(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3, v17 = sub_22EB14270(*a1, v16 & 0xFFFFFFFFFFFFFFFELL, v45), (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != (v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v28 = sub_22EE9B190((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(v26 + 11992) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22EE9B190((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454(*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22EE9DFDC(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v17 = *(_QWORD *)((char *)&unk_22F49B4F0
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v17 = 1;
  v12 = sub_22EE96B50(a1, a2, v10, ((unint64_t)a4 + v17 + 3) & -v17, a5, a6);
  v13 = 0;
  if (v12 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v12 == *(_QWORD *)(a3 + 32))
    {
      v13 = a3;
    }
    else
    {
      v13 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
      if (v13 < 0x10)
        return 0;
    }
    v14 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (!v14 || (*(_DWORD *)(v14 + 16) & 0xFE) != 0x28)
      sub_22F10CF48(v14);
    sub_22EEB5360(a2, v13, 4uLL, 4);
    *v15 = *a4;
  }
  return v13;
}

uint64_t sub_22EE9E100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) != 0)
    return 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v12) = 0;
  v4 = 0;
  if (sub_22F00554C(a2, (uint64_t)&v10, *(_QWORD *)(*(_QWORD *)a1 + 88), 0, 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v6 = *(_QWORD *)(a2 + 8);
    sub_22EFF605C(a2);
    v8 = v7;
    v4 = sub_22E3CD3D4(v5 + 2032, 32, 3);
    sub_22EFF8F1C(v4, v5, (uint64_t)v13, v6, v8);
  }
  if (v12 >= 2)
    sub_22EF53BC0(&v12);
  return v4;
}

uint64_t sub_22EE9E204(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EE9E26C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

uint64_t sub_22EE9E400(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a2;
  v5 = *(_DWORD *)a2 & 0x7C0000;
  v6 = *(unsigned __int8 **)(a2 + 16);
  if (v5 == 0x100000)
  {
    if (*v6 == 163)
      v7 = sub_22EE9EEF8(a1, (uint64_t)v6, 1, 0);
    else
      v7 = sub_22EE8C500(a1, v6);
  }
  else
  {
    sub_22EE9E4AC(a1, (unint64_t)v6, a3);
  }
  if ((v7 & 1) != 0)
    return 1;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v3 + 16) != v8)
    return sub_22EB2941C(*a1, 0, *(unsigned int *)(v3 + 4), (*(_DWORD *)v3 >> 18) & 0x1F, v8);
  return v3;
}

void sub_22EE9E4AC(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EE9F574(a1, a2);
        break;
      case 0x67:
        sub_22EE9F614(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EE9F6D8(a1, a2);
        break;
      case 0x6C:
        sub_22EE9F790((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EE9F958((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAD:
      case 0xC5:
        sub_22EE9F9C0((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EE9F9C8(a1, a2);
        break;
      case 0x70:
        a1[18] = a2;
        if (!sub_22EE9E100((uint64_t)a1, a2))
          sub_22EE9E26C(a1, a2);
        break;
      case 0x71:
        sub_22EE9FAD4(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22EE9FBB8(a1, a2);
        break;
      case 0x73:
        sub_22EE9FE2C((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EE9FF14(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EE9FF70((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EEA0574((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22EEA08B4((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EEA0A34((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22EEA0D9C(a1, a2);
        break;
      case 0x7D:
        sub_22EEA0FC8((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22EEA10D8(a1, a2);
        break;
      case 0x7F:
        sub_22EEA1564(a1, a2);
        break;
      case 0x81:
        sub_22EEA16D8((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EEA1C14((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EEA1EF0((_QWORD **)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22EEA1F98(a1, a2);
        break;
      case 0x87:
        sub_22EEA2004(a1, a2);
        break;
      case 0x88:
        sub_22EEA217C(a1, a2);
        break;
      case 0x89:
        sub_22EEA2414((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EE95FAC((uint64_t)a1, a2);
        break;
      case 0x8B:
        sub_22EEA25EC(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EEA2758((uint64_t)a1, a2);
        break;
      case 0x8D:
        sub_22EEA275C(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EEA2E9C(a1, a2);
        break;
      case 0x90:
        sub_22EE96118((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22EEA2F08(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EEA2FC4();
        break;
      case 0x98:
        sub_22EEA2FC8(a1, a2);
        break;
      case 0x99:
        sub_22EE96858((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EEA306C(a1, a2);
        break;
      case 0x9C:
        sub_22EEA3130((_QWORD **)a1, a2);
        break;
      case 0x9D:
        sub_22EEA31FC(a1, a2);
        break;
      case 0x9E:
        sub_22EEA3320((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EEA33B8(a1, a2);
        break;
      case 0xA0:
        sub_22EEA340C(a1, a2);
        break;
      case 0xA1:
        sub_22EE9656C((uint64_t)a1, a2);
        break;
      case 0xA2:
        sub_22EEA3458(a1, a2);
        break;
      case 0xA3:
        sub_22EEA34C8(a1, a2);
        break;
      case 0xA4:
        sub_22EEA34D4((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EEA3938(a1, a2);
        break;
      case 0xA7:
        sub_22EEA3AC0((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EEA3BD4((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EEA3C00((_QWORD **)a1, a2);
        break;
      case 0xAC:
        sub_22EEA3C94((uint64_t)a1, a2);
        break;
      case 0xB0:
        sub_22EEA3C9C(a1, a2);
        break;
      case 0xB1:
        sub_22EEA3EC4((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EEA3F8C((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22EEA4010(a1, a2);
        break;
      case 0xB6:
        sub_22EEA4228(a1, a2);
        break;
      case 0xB7:
        sub_22EEA5790((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EEA589C(a1, a2);
        break;
      case 0xB9:
        sub_22EEA5950((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EEA5A3C((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EEA5A50((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EEA5B14(a1, a2);
        break;
      case 0xBD:
        sub_22EEA60D8(a1, a2);
        break;
      case 0xBF:
        sub_22EEA63D0(a1, a2);
        break;
      case 0xC0:
        sub_22EEA64F0((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EEA667C((uint64_t)a1, a2);
        break;
      case 0xC4:
        sub_22EEA6AE4(a1, a2);
        break;
      case 0xC6:
        sub_22EEA6B48((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EEA6C38(a1, a2);
        break;
      case 0xC8:
        sub_22EEA6D34(a1, a2);
        break;
      case 0xC9:
        sub_22EEA7104(a1, a2);
        break;
      case 0xCA:
        sub_22EEA71EC((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EEA7254(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EEA7550((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22EEA7690(a1, a2);
        break;
      case 0xD1:
        sub_22EEA7730(a1, a2);
        break;
      case 0xD2:
        sub_22EEA7934((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EEA7998(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EEA7D60((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EEA816C(a1, a2);
        break;
      case 0xD6:
        if (!sub_22EE9E100((uint64_t)a1, a2))
          sub_22EE9E204(a1, a2);
        break;
      case 0xD7:
        sub_22EEA81E8(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EEA82E4(a1, a2);
        break;
      case 0xDA:
        sub_22EEA835C(a1, a2);
        break;
      case 0xDB:
        sub_22EEA84C0(a1, a2);
        break;
      case 0xDC:
        sub_22EEA8A94((_QWORD **)a1, a2);
        break;
      case 0xDD:
        sub_22EEA8B08(a1, a2);
        break;
      case 0xDE:
        sub_22EEA8D6C(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22EEA9258(a1, a2);
        break;
      case 0xE4:
        sub_22EEA9404((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EEA94C4((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EEA9578(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22EEA9BD0(a1, a2);
        break;
      case 0xE9:
        sub_22EE9621C(a1, a2);
        break;
      case 0xEA:
        sub_22EEA9DA8((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22EE9EEF8(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EE9B1E4(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EE9F0CC(&v18, a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EE9F2D4((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

__n128 sub_22EE9F0CC(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EE9B190((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22EE96928((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22EE9F2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EE9F574(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE9F614(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE9F6D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(unsigned int *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, &v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EE9F790(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EE96928(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v6 + 426);
    sub_22EB4DDB8((uint64_t)(v6 + 461), &v19, v16, (__int16 *)((char *)v6 + 1693), &v18, &v17);
    v7 = *((unsigned int *)v6 + 924);
    v8 = v7 - 2;
    v9 = v6[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v6 + 1693) = 0;
    if (*((_DWORD *)v6 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EE9F958(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EE9B190((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EE9F9C0(uint64_t a1, uint64_t a2)
{
  return sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EE9F9C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

__n128 sub_22EE9FAD4(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  if ((*a2 & 0x1000000) != 0)
  {
    v7 = 8;
    if (*a2 == 113)
      v7 = 12;
    v6 = *(_QWORD *)&a2[v7];
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_DWORD *)(v5 + 56);
  v9 = *(_QWORD *)(v5 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v6) | HIDWORD(v6) & v6;
  *(_QWORD *)(v10 + 1296) = v6;
  a1[18] = (uint64_t)a2;
  if (!sub_22EE9E100((uint64_t)a1, (uint64_t)a2))
    sub_22EE9E26C(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v8;
  *(_QWORD *)(v5 + 1296) = v9;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EE9FBB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[10];
  void *v25;
  __int128 v26;
  _BYTE v27[16];
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[32];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v32 = v34;
  v33 = 0x400000000;
  v29 = v31;
  v30 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v25 = v27;
  v26 = xmmword_22F44E350;
  v28 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EE9D1D8(a1, v9, v10, 0, v8, (uint64_t)&v29, (uint64_t)&v32, (uint64_t)&v25))
  {
    v21 = *a1;
  }
  else
  {
    v11 = sub_22EE9B190((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v24);
    if (v28)
    {
      sub_22F24FB88(&v25, v30);
      v13 = v25;
    }
    else
    {
      v13 = 0;
    }
    v24[8] = v13;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v29, v30, 0, v12, (uint64_t)v24);
    if ((_DWORD)v33)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v32, v33);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v14 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v20 = sub_22EEAA5FC(a1, v14, 0, v15, v16, v17, v18, v19);
    v21 = *a1;
    if ((v20 & 1) == 0)
    {
      v22 = sub_22EB4ADC8(v21, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v21);
  v22 = 1;
LABEL_12:
  if (v25 != v27)
    free(v25);
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  return v22;
}

uint64_t sub_22EE9FE2C(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EE9FF14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EE9FF70(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EEAA0E0((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EE9B190(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EEA9E4C((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22EEA0574(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EEB3CA4((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EEA9E4C((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EEA08B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EEA0A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EE8C500(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE9B190(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EE9B1E4((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EE9F0CC(&v30, (uint64_t *)a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EE9F2D4(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EEA0D9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EE8C500(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EE8C500(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EEA0FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22EE9B190(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22EEA10D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEB3CA4(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EE8C500(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EEAA0E0(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EEA1564(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EEA16D8(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EE9B1E4((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22EE9C0C8((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22EE9C0C8((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22EEA1C14(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EE8C500(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EEA1EF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = sub_22EE96928(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EEA1F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EEA2004(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EE8C500(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EE96928((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EEA217C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEB3CA4(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EEA9E4C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EEA2414(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EE96928(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EEA25EC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE8C500(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE95FAC((uint64_t)a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EEA275C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EE8C500(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v61 = v63;
      v62 = 0x800000000;
      v10 = 1;
      if ((sub_22EEA9E4C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v61, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, v61, v62, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v61, v62, v11, 0);
        v10 = v13;
      }
      if (v61 != v63)
        free(v61);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EE8C500(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EE9EEF8(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EE8C500(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EE8C500(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v60 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v61, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v61 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v60;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v57 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v57 + 520) = v46;
        *(_DWORD *)(v57 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v60;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v58 = sub_22EB2D0B8();
              if ((v58 & 1) != 0)
                v10 = 1;
              else
                v10 = v58;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v61 = v63;
      v62 = 0x1000000000;
      v51 = *v36;
      v59 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v61, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v63[0] = v53 | 3;
          LODWORD(v62) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v59;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v55 = sub_22EFFBA54(v30);
        v56 = sub_22ED1767C(*a1, v31, v55, (uint64_t)&v61, v33, (uint64_t)v34, v52, 1, 0);
        if ((v56 & 1) != 0)
          v10 = 1;
        else
          v10 = v56;
      }
      else
      {
        v54 = sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C(*a1, v31, v54, &v61, v33, v52);
      }
      v27 = v59;
LABEL_79:
      if (v61 != v63)
        free(v61);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EEA2E9C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EE96928((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EEA2F08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EEB3CA4(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE8C500(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EEA2FC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE96928((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EEA306C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EEA3130(_QWORD **a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  v5 = sub_22EE96928(a1, v4);
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *((_DWORD *)v8 + 2998) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0((uint64_t)v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EEA31FC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EE9F2D4((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EEA3320(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EE96928(a1, *(uint64_t **)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EEA33B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EEA340C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EEA3458(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EEA7998(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EEA34C8(uint64_t *a1, uint64_t a2)
{
  return sub_22EE9EEF8(a1, a2, 0, 0);
}

uint64_t sub_22EEA34D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EE8C500(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22EE8C500(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22EE8C500(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22EE8C500(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EEA3938(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EEA3AC0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EEA3BD4(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EE8C500(a1, v3);
}

uint64_t sub_22EEA3C00(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE8C500(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EEA3C94(uint64_t a1, uint64_t a2)
{
  return sub_22EE9E4AC(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EEA3C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EE96928((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EE8C500(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EEA3EC4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EEA3F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22EE9B190(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22EEA4010(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EEA9E4C(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EEA4228(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  unint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  unint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 *v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unsigned __int8 v194[24];
  char v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  char v200;
  uint64_t v201;
  _DWORD *v202;
  void *v203;
  uint64_t v204;
  int v205[12];
  unsigned __int8 *v206;
  void *v207[2];
  _BYTE v208[32];
  unint64_t v209;
  int64x2_t v210;
  _QWORD v211[5];
  void *v212;
  uint64_t v213;
  _BYTE v214[352];
  unsigned __int8 *v215;
  __int128 v216;
  _BYTE v217[16];
  char v218;
  void *v219[2];
  _BYTE v220[32];
  unint64_t *v221;
  uint64_t v222;
  _QWORD v223[6];

  v2 = a2;
  v223[4] = *MEMORY[0x24BDAC8D0];
  v212 = v214;
  v213 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v213)
    {
      if (v6 <= HIDWORD(v213))
      {
        v10 = (char *)v212;
      }
      else
      {
        v203 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v212 != v214)
          free(v212);
        v212 = v10;
        HIDWORD(v213) = (_DWORD)v203;
        v7 = v213;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v212 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v213) = (unint64_t)v5 >> 4;
  }
  v221 = 0;
  v221 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v221;
  if (v221 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v221;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v212 + 88 * (((uint64_t)v15 - v16) >> 4);
        v219[0] = 0;
        v18 = (_QWORD *)(*v221 & 0xFFFFFFFFFFFFFFF8);
        v219[0] = v18;
        v209 = (unint64_t)a1;
        v210.i64[0] = (uint64_t)v219;
        v210.i64[1] = (uint64_t)v17;
        v211[0] = &v221;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v203 = v205;
          v204 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v198 = 7;
          v199 = v22;
          sub_22EE7377C(v21, (uint64_t)&v198, (uint64_t)&v203);
          sub_22EEB40A4((uint64_t)&v209);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v203 != v205)
            free(v203);
        }
        else
        {
          sub_22EEB40A4((uint64_t)&v209);
        }
      }
      v13 = v221 + 2;
      v221 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v196 = *a1;
  LOBYTE(v197) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v193 = v23;
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v209 = (unint64_t)v211;
  v210 = vdupq_n_s64(0x20uLL);
  v211[4] = 0;
  v207[0] = v208;
  v207[1] = (void *)0x400000000;
  v201 = v29;
  v202 = v30;
  v221 = v223;
  v222 = 0x400000000;
  v219[0] = v220;
  v219[1] = (void *)0x400000000;
  v215 = v217;
  v216 = xmmword_22F44E350;
  v218 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v37 = v29;
    v38 = v29;
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_52;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_66;
      }
      else
      {
        if (v39 == 24)
          goto LABEL_65;
        if (v39 == 26)
        {
          if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
          {
LABEL_65:
            v37 = v38;
LABEL_66:
            sub_22F115668(v37);
            if (*(_BYTE *)(v201 + 16) == 25)
              v43 = 0;
            else
              v43 = (unsigned __int16)(*(_QWORD *)(v201 + 16) >> 38);
            v44 = (uint64_t)(v202 + 4);
            v45 = v201 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v46 = sub_22E47E270(v29);
            else
              v46 = 0;
            if ((sub_22EE9D1D8(a1, v44, v43, v45, v46, (uint64_t)&v221, (uint64_t)v219, (uint64_t)&v215) & 1) != 0)
            {
              v36 = 0;
              goto LABEL_76;
            }
            v47 = *(_QWORD *)(v201 + 24);
            v48 = sub_22E47EE80(&v201);
            v51 = sub_22EE96B50((_QWORD **)a1, (uint64_t)&v209, v47, v48, v49, v50);
            if (v51 >= 0x10)
              goto LABEL_216;
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v39) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v38 = sub_22F115B7C(v38);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  v32 = sub_22E47EE80(&v201);
  v35 = sub_22EE96B50((_QWORD **)a1, (uint64_t)&v209, v31, v32, v33, v34);
  if (v35 < 0x10)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v185 = v35;
  v40 = v201;
  for (i = v201; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v42 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v42 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v40 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_209;
    }
    if (v42 == 24)
      goto LABEL_208;
    if (v42 == 26)
      break;
    if (((1 << v42) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_208:
  v40 = i;
LABEL_209:
  sub_22F115668(v40);
  if (*(_BYTE *)(v201 + 16) == 25)
    v152 = 0;
  else
    v152 = (unsigned __int16)(*(_QWORD *)(v201 + 16) >> 38);
  v153 = (uint64_t)(v202 + 4);
  v154 = v201 + 40;
  v51 = v185;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v155 = sub_22E47E270(v29);
  else
    v155 = 0;
  if ((sub_22EE9D1D8(a1, v153, v152, v154, v155, (uint64_t)&v221, (uint64_t)v219, (uint64_t)&v215) & 1) != 0)
    goto LABEL_75;
LABEL_216:
  sub_22E4913B4(v29, (uint64_t)&v203);
  v200 = 0;
  v156 = v29;
  v157 = v29;
  while (2)
  {
    while (2)
    {
      if ((v157 & 0xF) != 0)
        goto LABEL_227;
      v158 = *(unsigned __int8 *)(*(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v158 > 0x39)
      {
LABEL_222:
        if (sub_22F115668(v157))
          v156 = v157;
        v157 = sub_22F115B7C(v157);
        if (!v157)
          goto LABEL_229;
        continue;
      }
      break;
    }
    if (v158 == 24)
      break;
    if (v158 != 26)
    {
      if (((1 << v158) & 0x20000000200003CLL) != 0)
        goto LABEL_227;
      goto LABEL_222;
    }
    if ((*(_BYTE *)(v157 + 23) & 0x10) == 0)
    {
LABEL_227:
      v157 = sub_22F115B7C(v157);
      continue;
    }
    break;
  }
  v156 = v157;
LABEL_229:
  v159 = sub_22F115668(v156);
  if ((sub_22EE9DBBC(a1, v159, v205, (uint64_t)v207, &v200) & 1) != 0)
  {
    v36 = 0;
    goto LABEL_76;
  }
  if (v218)
  {
    sub_22F24FB88(&v215, v222);
    if (v215)
    {
      v161 = v206;
      if (v206)
      {
        if (*(_BYTE *)(v201 + 16) == 25)
        {
          if (!(_DWORD)v222)
            goto LABEL_237;
        }
        else
        {
          v181 = (unsigned __int16)(*(_QWORD *)(v201 + 16) >> 38);
          if (v181 == v222)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v201 + 16) >> 38))
              goto LABEL_237;
            v182 = v215;
            while (*v161 == *v182)
            {
              ++v161;
              ++v182;
              if (!--v181)
                goto LABEL_237;
            }
          }
        }
      }
      v200 = 1;
LABEL_237:
      v206 = v215;
      goto LABEL_238;
    }
  }
  if (v206)
  {
    v200 = 1;
    v206 = 0;
  }
LABEL_238:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v162 = v222;
    goto LABEL_248;
  }
  v162 = v222;
  if (v51 == *(_QWORD *)(v29 + 24)
    && (v163 = (unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38), v163 == v222))
  {
    v164 = v201;
    if ((unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38))
    {
      v165 = (_QWORD *)(v29 + 40);
      v166 = v221;
      v167 = 8 * v163;
      while (*v165 == *v166)
      {
        ++v165;
        ++v166;
        v167 -= 8;
        if (!v167)
          goto LABEL_245;
      }
      goto LABEL_248;
    }
LABEL_245:
    if (v200)
      goto LABEL_248;
LABEL_249:
    v168 = sub_22E8BB094((uint64_t)&v209, v164);
    v170 = 0;
    v171 = v202;
    *v169 = *v202;
    v169[1] = v171[1];
    v169[2] = v171[2];
    if (v201)
    {
      v172 = 0;
      if (*(_BYTE *)(v201 + 16) == 26)
      {
        v173 = *(_QWORD *)(v201 + 16);
        if ((v173 & 0x3C0000000000000) != 0)
        {
          v174 = (unsigned __int16)(v173 >> 38);
          if (*(_QWORD *)(v201 + 16) == 25)
            v174 = 0;
          v172 = *(_QWORD *)&v171[2 * v174 + 4];
          v170 = v172 & 0xFFFFFFFF00000000;
          v172 = v172;
        }
        else
        {
          v170 = 0;
          v172 = 0;
        }
      }
    }
    else
    {
      v172 = 0;
    }
    if (v168)
    {
      if (*(_BYTE *)(v168 + 16) == 26)
      {
        v175 = *(_QWORD *)(v168 + 16);
        if ((v175 & 0x3C0000000000000) != 0)
        {
          v176 = v172 | v170;
          if (*(_QWORD *)(v168 + 16) == 25)
            v177 = 0;
          else
            v177 = (unsigned __int16)(v175 >> 38);
          *(_QWORD *)&v169[2 * v177 + 4] = v176;
          v171 = v202;
        }
      }
    }
    v169[3] = v171[3];
    if (*(_BYTE *)(v168 + 16) != 25)
    {
      v178 = *(_QWORD *)(v168 + 16);
      if ((v178 & 0x3FFFC000000000) != 0)
      {
        v179 = 0;
        v180 = (unsigned __int16)(v178 >> 38);
        do
        {
          *(_QWORD *)&v169[2 * v179 + 4] = *((_QWORD *)v219[0] + v179);
          ++v179;
        }
        while (v180 != v179);
      }
    }
    v36 = v164;
  }
  else
  {
LABEL_248:
    v164 = sub_22EE80544((_QWORD *)*a1, v51, v221, v162, 0, v160, (uint64_t)&v203);
    v36 = 0;
    if (v164 >= 0x10)
      goto LABEL_249;
  }
LABEL_76:
  if (v215 != v217)
    free(v215);
  if (v219[0] != v220)
    free(v219[0]);
  if (v221 != v223)
    free(v221);
  if (v36 >= 0x10)
  {
    v53 = *(_QWORD *)(*a1 + 88);
    v54 = v210.i64[0] - v210.i64[1];
    v55 = v210.i32[0] - v210.i32[2];
    if (v210.i32[0] == v210.i32[2])
      v55 = sub_22F11598C(v36);
    v52 = (unint64_t *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v52 = v36;
    memcpy(v52 + 1, (const void *)(v209 + v210.i64[1]), v54);
  }
  else
  {
    v52 = 0;
  }
  if (v207[0] != v208)
    free(v207[0]);
  if ((_QWORD *)v209 != v211 && v209)
    MEMORY[0x2348A0E84]();
  if (v36 < 0x10)
  {
    v56 = 1;
    goto LABEL_199;
  }
  v57 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v57 & 4) != 0 && (v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v191 = sub_22EE8C500(a1, v58);
  else
    v191 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v59 > 3 || v59 == 2)
    goto LABEL_122;
  v61 = *(_QWORD *)(*a1 + 216);
  v62 = *(_WORD *)(v61 + 8) & 0x7F;
  if (v62 == 16 || v62 == 83)
    goto LABEL_123;
  v63 = -40;
  if ((*(_WORD *)(v61 + 8) & 0x7Fu) > 0x46)
  {
    if (v62 == 71)
    {
      v63 = -56;
    }
    else if (v62 != 81)
    {
LABEL_114:
      if (v62 - 52 < 6)
      {
        v63 = -72;
      }
      else
      {
        v63 = -48;
        if (v62 - 33 < 5)
          v63 = -64;
      }
    }
  }
  else
  {
    if (v62 > 0x18)
      goto LABEL_113;
    if (((1 << v62) & 0x1066) == 0)
    {
      if (v62 == 24)
      {
        v63 = -48;
      }
      else
      {
LABEL_113:
        if (v62 != 70)
          goto LABEL_114;
        v63 = -64;
      }
    }
  }
  v64 = *(_QWORD *)(v61 + v63 + 16);
  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
  if ((v64 & 4) != 0)
    v65 = (_QWORD *)*v65;
  if ((sub_22EFC7ADC((unint64_t)v65) & 1) == 0)
LABEL_123:
    v66 = 2;
  else
LABEL_122:
    v66 = 0;
  v67 = (void *)sub_22F3C61E8(v2);
  v68 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v52, v66, (*(_DWORD *)v2 >> 18) & 3);
  v203 = v67;
  sub_22F25E108(a1 + 1, &v203)[1] = v68;
  v69 = *a1;
  v70 = *(_QWORD *)(v2 + 16);
  v71 = sub_22F3C6220(v2);
  v72 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 16))(v71) >> 32;
  if (*(_BYTE *)(*v52 + 16) == 25)
    v73 = 0;
  else
    v73 = (unsigned __int16)(*(_QWORD *)(*v52 + 16) >> 38);
  v74 = sub_22F3C6220(v2);
  v75 = sub_22F3366E8(v69, (uint64_t)v68, v70, v52, v72, v52 + 3, v73, *(_DWORD *)(v74 + 80) >> 30, v191 & 0xFFFFFFFFFFFFFFFELL);
  v76 = v193;
  *(_QWORD *)(v193 + 1488) = v75;
  sub_22F3C6220(v2);
  v203 = (void *)sub_22F3C6220(v2);
  v192 = a1 + 1;
  sub_22F25E108(a1 + 1, &v203)[1] = v75;
  v77 = *a1;
  v194[0] = 0;
  v195 = 0;
  v190 = v75;
  sub_22EC52964(v77, v68, v75, v194);
  if (v195)
    v195 = 0;
  v78 = *a1;
  v79 = v75;
  v80 = v75 + 72;
  if (!v75)
    v80 = 0;
  v189 = *(_QWORD *)(v78 + 216);
  v81 = *(_QWORD *)(v78 + 3200);
  *(_QWORD *)(v78 + 3200) = 0;
  v184 = *(_QWORD *)(v78 + 10288);
  v186 = v81;
  v187 = *(_DWORD *)(v78 + 1944);
  v188 = *(_DWORD *)(v78 + 2192);
  *(_QWORD *)(v78 + 216) = v80;
  *(_DWORD *)(v78 + 1944) = *(_DWORD *)(v78 + 1904);
  *(_DWORD *)(v78 + 2192) = *(_DWORD *)(v78 + 1960);
  v82 = *(_QWORD *)(v2 + 16);
  v83 = (*(_DWORD *)v2 >> 18) & 3;
  v84 = *(_DWORD *)(v2 + 24);
  v85 = (*(_DWORD *)v2 >> 20) & 1;
  v86 = (*(_DWORD *)v2 >> 21) & 1;
  v87 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v78, v193, v79, v82, v83, v84, v85, v86, v87);
  v88 = sub_22F3C64D0(v2);
  v89 = sub_22F3C650C(v2);
  if (v88 == v89)
  {
    *(_DWORD *)(v193 + 1508) = *(_DWORD *)(v193 + 1272);
    v90 = *a1;
    LODWORD(v221) = 6;
    v203 = 0;
    LODWORD(v219[0]) = 3;
    v209 = *(unsigned int *)(v90 + 1704);
    sub_22EB4DDB8(v90 + 3688, (int *)&v221, (int *)&v209, (__int16 *)(v90 + 1693), (uint64_t *)&v203, (int *)v219);
    v91 = *(unsigned int *)(v90 + 3696);
    v92 = v91 - 2;
    v93 = *(_QWORD *)(v90 + 3688);
    v94 = *(_DWORD *)(v93 + 576 * (v91 - 2));
    if (v94 == 5)
    {
      *(_BYTE *)(v93 + 576 * v91 - 4) = *(_BYTE *)(v93 + 576 * v92 + 572);
      v96 = 1;
      v95 = v189;
    }
    else
    {
      v95 = v189;
      if (v94 == 2)
      {
        *(_BYTE *)(v93 + 576 * v91 - 4) = 1;
        v96 = *(_BYTE *)(v93 + 576 * v92 + 573) != 0;
      }
      else
      {
        v96 = 0;
        *(_BYTE *)(v93 + 576 * v91 - 4) = 0;
      }
    }
    v97 = v93 + 576 * v91;
    *(_BYTE *)(v97 - 3) = v96;
    *(_WORD *)(v90 + 1693) = 0;
    if (*(_DWORD *)(v90 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v90 + 1776), (llvm::SmallPtrSetImplBase *)(v97 - 560));
      sub_22EAEAE08(v90 + 1840, (uint64_t *)(v97 - 496));
    }
  }
  else
  {
    v98 = v89;
    v99 = 0;
    do
    {
      v100 = *(_QWORD *)v88;
      if ((*(_QWORD *)v88 & 1) != 0)
        break;
      if ((v100 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v88 + 8), 1, 1, 0, (v100 >> 1) & 1);
      }
      else if (v100 >= 4)
      {
        v101 = v99;
        if (sub_22F3C6428(v2, (_QWORD *)v88))
        {
          v108 = sub_22F3C64D0(v2);
          v109 = (char *)v212 + 88 * ((v88 - v108) >> 4);
          v110 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          v203 = v205;
          v204 = 0x400000000;
          v111 = *((unsigned int *)v109 + 4);
          if ((_DWORD)v111)
          {
            v115 = (_QWORD *)*((_QWORD *)v109 + 1);
            v183 = &v115[2 * v111];
            while ((*v115 & 1) == 0)
            {
              v116 = v115[1];
              if (v116 < 0x10)
                break;
              v117 = *(_QWORD *)(v110 + 40);
              v118 = (v117 & 7) != 0 ? 0 : v117 & 0xFFFFFFFFFFFFFFF8;
              v119 = sub_22EC5313C(*a1, *(_DWORD *)(v110 + 24), v116, *(_DWORD *)v109, v118, (*(_BYTE *)(v110 + 96) >> 5) & 3, *v115 & 0xFFFFFFFFFFFFFFFELL);
              if (!v119)
                break;
              v120 = v119;
              v121 = v204;
              if (v204 >= (unint64_t)HIDWORD(v204))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = v204;
              }
              *((_QWORD *)v203 + v121) = v120;
              LODWORD(v204) = v204 + 1;
              sub_22F336D2C(*a1, v193, v120);
              v115 += 2;
              if (v115 == v183)
                goto LABEL_163;
            }
LABEL_188:
            if (v203 != v205)
              free(v203);
            *(_DWORD *)(v193 + 1508) = *(_DWORD *)(v193 + 1272);
            v140 = *a1;
            LODWORD(v221) = 6;
            v203 = 0;
            LODWORD(v219[0]) = 3;
            v209 = *(unsigned int *)(v140 + 1704);
            sub_22EB4DDB8(v140 + 3688, (int *)&v221, (int *)&v209, (__int16 *)(v140 + 1693), (uint64_t *)&v203, (int *)v219);
            v141 = *(unsigned int *)(v140 + 3696);
            v142 = v141 - 2;
            v143 = *(_QWORD *)(v140 + 3688);
            v144 = *(_DWORD *)(v143 + 576 * (v141 - 2));
            v95 = v189;
            if (v144 == 5)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = *(_BYTE *)(v143 + 576 * v142 + 572);
              v145 = 1;
            }
            else if (v144 == 2)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = 1;
              v145 = *(_BYTE *)(v143 + 576 * v142 + 573) != 0;
            }
            else
            {
              v145 = 0;
              *(_BYTE *)(v143 + 576 * v141 - 4) = 0;
            }
            v146 = v143 + 576 * v141;
            *(_BYTE *)(v146 - 3) = v145;
            *(_WORD *)(v140 + 1693) = 0;
            if (*(_DWORD *)(v140 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v140 + 1776), (llvm::SmallPtrSetImplBase *)(v146 - 560));
              sub_22EAEAE08(v140 + 1840, (uint64_t *)(v146 - 496));
            }
            goto LABEL_195;
          }
LABEL_163:
          if ((v101 & 1) != 0)
            goto LABEL_188;
          v112 = a1;
          v113 = v2;
          v209 = v110;
          v114 = *(_QWORD *)v203;
          sub_22F25E108(v192, &v209)[1] = v114;
          if (v203 != v205)
            free(v203);
          v99 = 0;
          v2 = v113;
          a1 = v112;
          v76 = v193;
        }
        else
        {
          v102 = *(_QWORD *)v88;
          if ((*(_QWORD *)v88 & 2) != 0)
            v103 = 1;
          else
            v103 = 2;
          if ((*(_QWORD *)v88 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v104 = 2;
          else
            v104 = v103;
          if (v102 < 4)
            v104 = 2;
          if ((v102 & 1) != 0)
            v105 = 0;
          else
            v105 = v104;
          v106 = *(_DWORD *)(v88 + 12);
          v107 = v102 & 0xFFFFFFFFFFFFFFF8;
          v209 = v102 & 0xFFFFFFFFFFFFFFF8;
          v203 = 0;
          if (sub_22E793870(v192, &v209, &v203)
            && v203 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v107 = *((_QWORD *)v203 + 1);
          }
          if (v107 && (*(_BYTE *)(v107 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v107, *(_DWORD *)(v88 + 8), v105, v106);
            v99 = v101;
          }
          else
          {
            v99 = 1;
          }
        }
      }
      v88 += 16;
    }
    while (v88 != v98);
    *(_DWORD *)(v76 + 1508) = *(_DWORD *)(v76 + 1272);
    v122 = *a1;
    LODWORD(v221) = 6;
    v203 = 0;
    LODWORD(v219[0]) = 3;
    v209 = *(unsigned int *)(v122 + 1704);
    sub_22EB4DDB8(v122 + 3688, (int *)&v221, (int *)&v209, (__int16 *)(v122 + 1693), (uint64_t *)&v203, (int *)v219);
    v123 = *(unsigned int *)(v122 + 3696);
    v124 = v123 - 2;
    v125 = *(_QWORD *)(v122 + 3688);
    v126 = *(_DWORD *)(v125 + 576 * (v123 - 2));
    if (v126 == 5)
    {
      *(_BYTE *)(v125 + 576 * v123 - 4) = *(_BYTE *)(v125 + 576 * v124 + 572);
      v127 = 1;
      v95 = v189;
    }
    else
    {
      v95 = v189;
      if (v126 == 2)
      {
        *(_BYTE *)(v125 + 576 * v123 - 4) = 1;
        v127 = *(_BYTE *)(v125 + 576 * v124 + 573) != 0;
      }
      else
      {
        v127 = 0;
        *(_BYTE *)(v125 + 576 * v123 - 4) = 0;
      }
    }
    v128 = v125 + 576 * v123;
    *(_BYTE *)(v128 - 3) = v127;
    *(_WORD *)(v122 + 1693) = 0;
    if (!*(_DWORD *)(v122 + 1848))
    {
      if ((v99 & 1) == 0)
        goto LABEL_184;
      goto LABEL_195;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v122 + 1776), (llvm::SmallPtrSetImplBase *)(v128 - 560));
    sub_22EAEAE08(v122 + 1840, (uint64_t *)(v128 - 496));
    if ((v99 & 1) != 0)
    {
LABEL_195:
      LOBYTE(v197) = 0;
      goto LABEL_196;
    }
  }
LABEL_184:
  sub_22F3C638C(v2);
  v134 = sub_22EEAA5FC(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v129, v130, v131, v132, v133);
  LOBYTE(v197) = 0;
  if ((v134 & 1) != 0)
  {
LABEL_196:
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v186;
      *(_QWORD *)(v78 + 10288) = v184;
      *(_DWORD *)(v78 + 1944) = v187;
      *(_DWORD *)(v78 + 2192) = v188;
    }
    v147 = *(unsigned int *)(v2 + 16);
    v56 = 1;
    sub_22F336DD4(*a1, v147, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v203, v193);
    v135 = v134 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v190, v135, 1);
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v186;
      *(_QWORD *)(v78 + 10288) = v184;
      *(_DWORD *)(v78 + 1944) = v187;
      *(_DWORD *)(v78 + 2192) = v188;
    }
    v136 = *a1;
    v137 = *(unsigned int *)(v2 + 16);
    sub_22F0D60E4(v135);
    sub_22EC54548(v136, v137, v138, (uint64_t)&v203);
    v56 = v139;
    sub_22F2F43D0((uint64_t)&v203);
  }
LABEL_199:
  sub_22F2F446C((uint64_t)&v196);
  v148 = (char *)v212;
  if ((_DWORD)v213)
  {
    v149 = 88 * v213;
    do
    {
      v150 = *(char **)&v148[v149 - 80];
      if (&v148[v149 - 64] != v150)
        free(v150);
      v149 -= 88;
    }
    while (v149);
    v148 = (char *)v212;
  }
  if (v148 != v214)
    free(v148);
  return v56;
}

uint64_t sub_22EEA5790(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EE9B1E4((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EEA589C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(unsigned int *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, &v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EEA5950(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EEA5A3C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EE8C500(a1, v3);
}

uint64_t sub_22EEA5A50(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EEA5B14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EE9B1E4(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EE9F2D4((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22EE9F0CC((__n128 *)v51, a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EEA60D8(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EE8C500(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EE96928((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EEA9E4C(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(unint64_t **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EEA63D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE8C500(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EE8C500(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EE8C500(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EEA64F0(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EE8C500(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EEA667C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63[4];
  void *v64;
  uint64_t v65;
  _QWORD v66[34];

  v2 = a2;
  v66[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v63, 0, sizeof(v63));
  v64 = v66;
  v65 = 0x400000000;
  sub_22E8BB974((uint64_t)&v64, v4, v63);
  v61 = a1;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v55 = v8;
    v54 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v56 = v2;
    v57 = v4 << 6;
    v12 = 2;
    v60 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v64 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      v62 = v10;
      if ((v18 & 4) == 0)
        break;
      v44 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v44 + 16))
        v45 = ***(_DWORD ***)(v44 + 24);
      else
        v45 = *(_DWORD *)(v13 + 64);
      if (v17 != v45)
      {
        v19 = *(uint64_t **)(v44 + 32);
LABEL_9:
        v20 = sub_22EE96928((_QWORD **)v61, v19);
        v21 = sub_22EE9B190(v61, *(_QWORD *)(v13 + 48));
        v22 = sub_22E3CD3D4(*(_QWORD *)v61 + 8360, 32, 4);
        v23 = *(_DWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
        if (v21 >= 0x10)
          v24 = v21;
        else
          v24 = v22 & 0xFFFFFFFFFFFFFFF0;
        *(_QWORD *)v22 = v22;
        *(_QWORD *)(v22 + 8) = v24;
        *(_DWORD *)(v22 + 16) = v23 | *(_DWORD *)(v22 + 16) & 0xFFF80000 | 0x39;
        *(_QWORD *)(v22 + 24) = v20;
        *(_QWORD *)((char *)v64 + v9 + 16) = v22 & 0xFFFFFFFFFFFFFFF0;
      }
LABEL_13:
      v25 = v60 + 8 * *(unsigned int *)(v2 + 28);
      v26 = v12 - 2;
      v27 = v12 - 1;
      v28 = *(_QWORD *)(v25 + 8 * v27);
      v29 = *(_QWORD *)(v25 + 8 * v12);
      v59 = *(_QWORD *)(v25 + 8 * v26);
      v30 = sub_22EE8C500(v61, v59);
      v58 = v28;
      v31 = sub_22EE8C500(v61, v28);
      v32 = sub_22EE8C500(v61, v29);
      if ((v62 & 1) != 0)
        goto LABEL_22;
      v33 = *(_QWORD *)(v13 + 56);
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      v35 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0)
        v35 = *(_QWORD *)(v34 + 32);
      if (v35)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v64 + v9 + 16) < 0x10uLL || (v30 & 1) != 0)
          goto LABEL_23;
      }
      else if ((v30 & 1) != 0)
      {
        goto LABEL_22;
      }
      if (((v31 | v32) & 1) != 0)
      {
LABEL_22:
        v10 = 1;
LABEL_23:
        v2 = v56;
        goto LABEL_24;
      }
      v36 = (char *)v64;
      v37 = (char *)v64 + v9;
      v38 = v31 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v37 + 3) = v30 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v37 + 4) = v31 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v37 + 5) = v32 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v56;
      *((_DWORD *)v37 + 12) = *(_DWORD *)(v60
                                        + 8 * *(unsigned int *)(v56 + 28)
                                        + 8 * (3 * *(_DWORD *)(v56 + 28))
                                        + 4 * v26);
      *((_DWORD *)v37 + 13) = *(_DWORD *)(v60
                                        + 8 * *(unsigned int *)(v56 + 28)
                                        + 8 * (3 * *(_DWORD *)(v56 + 28))
                                        + 4 * v27);
      *((_DWORD *)v37 + 14) = *(_DWORD *)(v60
                                        + 8 * *(unsigned int *)(v56 + 28)
                                        + 8 * (3 * *(_DWORD *)(v56 + 28))
                                        + 4 * v12);
      if ((v55 & 1) != 0)
      {
        v10 = 0;
        v39 = 1;
LABEL_42:
        v55 = v39;
        goto LABEL_24;
      }
      if ((v33 & 4) != 0)
        v34 = *(_QWORD *)(v34 + 32);
      if (v34)
      {
        v40 = *(_QWORD *)&v36[v9 + 16];
        if (v40 >= 0x10)
          v41 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
        else
          v41 = 0;
        v42 = *(_QWORD *)(v13 + 48);
        if (v42 >= 0x10)
          v43 = *(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0);
        else
          v43 = 0;
        v10 = 0;
        v55 = 1;
        if (v41 != v43)
          goto LABEL_24;
      }
      else
      {
        v10 = 0;
        v55 = 1;
      }
      if (v59 == (v30 & 0xFFFFFFFFFFFFFFFELL) && v58 == v38)
      {
        v10 = 0;
        v39 = v29 != (v32 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_42;
      }
LABEL_24:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v57 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v46 = 1;
          goto LABEL_61;
        }
        v4 = v54;
        if ((v55 & 1) != 0)
        {
          v5 = *(_QWORD **)v61;
          goto LABEL_55;
        }
LABEL_60:
        v46 = v2;
        goto LABEL_61;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_13;
    v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_60;
LABEL_55:
  v47 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v64, v65);
  v46 = v47;
  if (v47 >= 2 && (_DWORD)v4)
  {
    v48 = (uint64_t *)(v2 + 32);
    v49 = (uint64_t *)((v47 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v51 = *v48++;
      v50 = v51;
      v52 = *v49++;
      *(_QWORD *)&v63[0] = v50;
      sub_22F25E108((uint64_t *)(v61 + 8), v63)[1] = v52;
      --v4;
    }
    while (v4);
  }
LABEL_61:
  if (v64 != v66)
    free(v64);
  return v46;
}

uint64_t sub_22EEA6AE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EE96928((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EEA6B48(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EEA6C38(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EEA6D34(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v40, &v36) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EE8C500(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v36))
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v22 = (_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v23 = *v22;
          v22 = (_QWORD *)(*v22 + 40);
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v22, v23, *(unsigned int *)(a2 + 32));
LABEL_52:
        v20 = v24;
        v35 = v37;
        if (v37 == v39)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v15 = sub_22EE96928((_QWORD **)a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v36)
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v24 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v37, v38, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v37 = v39;
  v38 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v37);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v25 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v25 = (uint64_t *)(*v6 + 40);
  v26 = *v25;
  v27 = (int *)v37;
  v28 = v38;
  v29 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v31 = *v6;
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 32);
  v33 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v31 + 58) & 2) != 0)
    v34 = sub_22EC2DA20(v33, 0, v29, v8, v26, v31, v32);
  else
    v34 = sub_22EC2F730(v33, 0, v29, v8, v26, v31, v32, v30, v27, v28, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
  v20 = v34;
  v35 = v37;
  if (v37 != v39)
LABEL_53:
    free(v35);
LABEL_28:
  if (v40 != v42)
    free(v40);
  return v20;
}

uint64_t sub_22EEA7104(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EEA71EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EEA7254(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22EE8C500(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22EE8C500(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22EE8C500(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22EE8C500(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EEA7550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EE8C500(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EEA7690(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EEA7730(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE96928((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EE8C500(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EEA7934(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EE8C500(a1, a2[2]);
}

uint64_t sub_22EEA7998(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EE9B1E4(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EE9F2D4((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EEA7D60(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EE8C500(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE9B190(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EE9B1E4((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EE9F2D4(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EEA816C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

uint64_t sub_22EEA81E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EEA9E4C(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EEA82E4(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EE8C500(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EEA835C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EE8C500(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EEA84C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EE9D1D8(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22EE8C500(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1);
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22EE8C500(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22EE96928((_QWORD **)a1, (uint64_t *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8));
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, (unint64_t)v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22EEA8A94(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EE96928(a1, *(uint64_t **)(a2 + 32));
    if (v4)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || *(unint64_t **)(v2 + 32) != v4)
        return sub_22F3C109C((*a1)[11], *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EEA8B08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EEA9E4C(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EEA8D6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EE9BC74(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EE9B990((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EEA9258(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EEAF054(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EEA9404(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EE8C500(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EEA94C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EE8C500(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EEA9578(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unsigned __int32 v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  size_t v44;
  unsigned __int32 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57[2];
  void *v58[2];
  _BYTE v59[32];
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[6];

  v2 = a1;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v64 = v66;
  v65 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v53 = vdupq_n_s64(0x20uLL);
  v54 = (uint64_t)(a2 + 6);
  v55 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v60 = (uint64_t)v62;
      v61 = vdupq_n_s64(0x20uLL);
      v63 = 0;
      v10 = sub_22F11598C(v9);
      if (v61.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v60, v10);
      v13 = sub_22EE96B50((_QWORD **)v2, (uint64_t)&v60, v9, (uint64_t)v8, v11, v12);
      if (v13 >= 0x10)
      {
        v15 = v13;
        if (v13 == *v7)
        {
          v16 = v65;
          v17 = HIDWORD(v65);
        }
        else
        {
          v25 = *(_QWORD *)(*v2 + 88);
          v26 = v61.i64[0] - v61.i64[1];
          v27 = v61.i32[0] - v61.i32[2];
          if (v61.i32[0] == v61.i32[2])
            v27 = sub_22F11598C(v15);
          v7 = (unint64_t *)sub_22E3CD3D4(v25 + 2032, v27 + 8, 3);
          *v7 = v15;
          memcpy(v7 + 1, (const void *)(v60 + v61.i64[1]), v26);
          v16 = v65;
          v17 = HIDWORD(v65);
          v5 = 1;
        }
        if (v16 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v65;
        }
        v64[v16] = (uint64_t)v7;
        LODWORD(v65) = v65 + 1;
        v14 = 4;
      }
      else
      {
        v14 = 1;
      }
      if ((_BYTE *)v60 != v62 && v60)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v18 = *(_QWORD *)(v9 + 32);
    if (v18 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v37 = *(_QWORD *)((char *)&unk_22F49B4F0
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v37 = 1;
    v20 = ((unint64_t)v8 + v37 + 3) & -v37;
    v57[0] = *(_QWORD *)(v9 + 32);
    v57[1] = v20;
    v58[0] = v59;
    v58[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v18, v20, (uint64_t)v58);
    v51 = *(_DWORD *)(v9 + 20);
    LODWORD(v21) = v51 - 1;
    if (v51)
      v21 = v21;
    else
      v21 = 0;
    v52 = v21;
    v22 = v18;
    for (i = v18; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v24 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v24 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v22 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v24 == 24)
        goto LABEL_42;
      if (v24 == 26)
        break;
      if (((1 << v24) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v22 = i;
LABEL_43:
    sub_22F115668(v22);
    sub_22F1167E8(v57);
    v2 = a1;
    v28 = (_QWORD *)*a1;
    v29 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v60 = (uint64_t)v62;
    v61 = v53;
    v63 = 0;
    v30 = sub_22F11598C(*v7);
    if (v61.i64[0] < (unint64_t)v30)
      sub_22EEB52C0(&v60, v30);
    v33 = sub_22EE96B50((_QWORD **)a1, (uint64_t)&v60, v18, v20, v31, v32);
    if (v33 < 0x10)
    {
LABEL_46:
      v14 = 1;
      goto LABEL_47;
    }
    v34 = v33;
    v35 = v18;
    while (2)
    {
      while (2)
      {
        if ((v35 & 0xF) != 0)
          goto LABEL_67;
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v36 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v35))
            v18 = v35;
          v35 = sub_22F115B7C(v35);
          if (!v35)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v36 == 24)
        break;
      if (v36 != 26)
      {
        if (((1 << v36) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
      {
LABEL_67:
        v35 = sub_22F115B7C(v35);
        continue;
      }
      break;
    }
    v18 = v35;
LABEL_69:
    v38 = sub_22F115668(v18);
    v39 = sub_22F1167E8(v57);
    v2 = a1;
    v40 = sub_22F34AE9C((_QWORD *)*a1, v34, v38 | ((unint64_t)v39 << 32), *v8, v52 | ((unint64_t)(v51 != 0) << 32));
    if (v40 < 0x10)
      goto LABEL_46;
    v41 = v40;
    sub_22EEB5360((uint64_t)&v60, v40, 4uLL, 4);
    *v42 = *v8;
    v43 = *(_QWORD *)(*a1 + 88);
    v44 = v61.i64[0] - v61.i64[1];
    v45 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v45 = sub_22F11598C(v41);
    v46 = (_QWORD *)sub_22E3CD3D4(v43 + 2032, v45 + 8, 3);
    *v46 = v41;
    memcpy(v46 + 1, (const void *)(v60 + v61.i64[1]), v44);
    v47 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = v65;
    }
    v64[v47] = (uint64_t)v46;
    LODWORD(v65) = v65 + 1;
    v14 = 4;
LABEL_47:
    if ((_BYTE *)v60 != v62 && v60)
      MEMORY[0x2348A0E84]();
    *((_DWORD *)v28 + 2998) = v29;
    if (v58[0] != v59)
      free(v58[0]);
    v5 = 1;
    v6 = (_DWORD *)v54;
    v3 = v55;
LABEL_53:
    if (v14 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v48 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v64, v65, a2[5]);
        else
          v48 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v48 = 1;
LABEL_81:
  if (v64 != v66)
    free(v64);
  return v48;
}

uint64_t sub_22EEA9BD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(uint64_t **)(a2 + 16);
    v10 = sub_22EE96928((_QWORD **)a1, v9);
    if (v10)
    {
      v11 = v10;
      v12 = (_QWORD *)*a1;
      if (v9 != (uint64_t *)v10 || *((_DWORD *)v12 + 2998) != -1)
      {
        v14 = *(unsigned int *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (_QWORD *)*a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EE9EEF8(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20(*a1, *((unsigned int *)v5 + 4), *((unsigned int *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(unsigned int *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EEA9DA8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE96928(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EEA9E4C(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EE8C500(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EE8C500(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EEAA0E0(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EEAA0E0(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EE8C500(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EE8C500(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EEA9E4C(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EEAA5FC(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EEAACF8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EEAB228(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EEAB424((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EEAB54C(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EEAB810(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EEAB998(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EEABBB0(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EEABBB8(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EEABC0C(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EEABEF4(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EEABF9C(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EEAC170((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EEAC498(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EEAC510(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EEAC734((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EEAC740(a1, a2);
      break;
    case 0x16u:
      result = sub_22EEAC7AC(a1, a2);
      break;
    case 0x17u:
      result = sub_22EEAC818(a1, a2);
      break;
    case 0x18u:
      result = sub_22EEAC884(a1, a2);
      break;
    case 0x19u:
      result = sub_22EEAC8F0(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EEAC960(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EEAC9CC(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EEACA38(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EEACAA4(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EEACB10(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EEACB7C(a1, a2);
      break;
    case 0x20u:
      result = sub_22EEACBE8(a1, a2);
      break;
    case 0x21u:
      result = sub_22EEACC54(a1, a2);
      break;
    case 0x22u:
      result = sub_22EEACCC0(a1, a2);
      break;
    case 0x23u:
      result = sub_22EEACD2C(a1, a2);
      break;
    case 0x24u:
      result = sub_22EEACD98(a1, a2);
      break;
    case 0x25u:
      result = sub_22EEACE04(a1, a2);
      break;
    case 0x26u:
      result = sub_22EEACE70(a1, a2);
      break;
    case 0x27u:
      result = sub_22EEACEDC(a1, a2);
      break;
    case 0x28u:
      result = sub_22EEACF48(a1, a2);
      break;
    case 0x29u:
      result = sub_22EEACFB4(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EEAD020(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EEAD08C(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EEAD0F8(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EEAD164(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EEAD1D0(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EEAD23C(a1, a2);
      break;
    case 0x30u:
      result = sub_22EEAD2A8(a1, a2);
      break;
    case 0x31u:
      result = sub_22EEAD314(a1, a2);
      break;
    case 0x32u:
      result = sub_22EEAD380(a1, a2);
      break;
    case 0x33u:
      result = sub_22EEAD3EC(a1, a2);
      break;
    case 0x34u:
      result = sub_22EEAD458(a1, a2);
      break;
    case 0x35u:
      result = sub_22EEAD4C4(a1, a2);
      break;
    case 0x36u:
      result = sub_22EEAD530(a1, a2);
      break;
    case 0x37u:
      result = sub_22EEAD59C(a1, a2);
      break;
    case 0x38u:
      result = sub_22EEAD608(a1, a2);
      break;
    case 0x39u:
      result = sub_22EEAD674(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EEAD6E0(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EEAD74C(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EEAD7B8(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EEAD824(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EEAD890(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EEAD8FC(a1, a2);
      break;
    case 0x42u:
      result = sub_22EEAD968(a1, a2);
      break;
    case 0x43u:
      result = sub_22EEAD9D4(a1, a2);
      break;
    case 0x44u:
      result = sub_22EEADA40(a1, a2);
      break;
    case 0x45u:
      result = sub_22EEADAAC(a1, a2);
      break;
    case 0x46u:
      result = sub_22EEADB18(a1, a2);
      break;
    case 0x47u:
      result = sub_22EEADB84(a1, a2);
      break;
    case 0x48u:
      result = sub_22EEADBF0(a1, a2);
      break;
    case 0x49u:
      result = sub_22EEADC5C(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EEADCC8(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EEADD34(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EEADDA0(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EEADE0C(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EEADE78(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EEADEE4(a1, a2);
      break;
    case 0x50u:
      result = sub_22EEADF50(a1, a2);
      break;
    case 0x51u:
      result = sub_22EEADFBC(a1, a2);
      break;
    case 0x52u:
      result = sub_22EEAE028(a1, a2);
      break;
    case 0x53u:
      result = sub_22EEAE094(a1, a2);
      break;
    case 0x54u:
      result = sub_22EEAE100(a1, a2);
      break;
    case 0x55u:
      result = sub_22EEAE16C(a1, a2);
      break;
    case 0x56u:
      result = sub_22EEAE1D8((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EEAE2C4(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EEAE330((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EEAE3E4((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EEAE45C(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EEAE684(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EEAE6F0(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EEAE7E4(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EEAE834(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EEAE8A0(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EEAE8E8(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EEAE99C(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EEAEBAC(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EEAEBFC(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EEAED24(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EE8C500(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EEAEE7C((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EEAEF28((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EEAACF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EE8C500(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EE8C500(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EE8C500(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EEAB228(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EE8C500(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EEAB424(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22EE96928(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *((_DWORD *)v9 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EEAB54C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EEAA5FC(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 64), 0);
  if ((v13 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == (v5 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v15 = v2;
  }
  else
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
    if ((v15 & 1) != 0 && *(_QWORD *)(v2 + 64) != v14)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v14 + 8));
      return 1;
    }
  }
  v16 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v17)
  {
    v19 = sub_22E8C6118(a1, *(unsigned int *)(v2 + 8), *(unsigned int *)(v2 + 80));
    if ((v19 & 1) != 0)
      return 1;
    v18 = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v18 != v2)
    return sub_22ED33C64(*a1, v18, v17);
  return v2;
}

uint64_t sub_22EEAB810(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEABBB0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EEAB424((_QWORD **)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EEAB998(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EE9B190((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EEAA5FC(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EEABBB0(uint64_t *a1, uint64_t a2)
{
  return sub_22EEAF054(a1, a2, 0);
}

uint64_t sub_22EEABBB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EEABC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EEAA5FC(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EEAA5FC(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EEAA5FC(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EEAA5FC(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EEABEF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EEABF9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EEAF2BC((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EEAC170(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EEAA5FC(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EEAF2BC((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EEAA5FC(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EEAA5FC(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EEAC498(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EEAC510(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE9B1E4(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EE9F0CC((__n128 *)&v19, a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22EEABBB0(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EEAC734(uint64_t a1, uint64_t a2)
{
  return sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EEAC740(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC7AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC818(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC884(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC8F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC960(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAC9CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACA38(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACAA4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACB10(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACB7C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACBE8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACC54(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACCC0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACD2C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACD98(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACE04(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACE70(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACEDC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACF48(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEACFB4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD020(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD08C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD0F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD164(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD1D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD23C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD2A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD314(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD380(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD3EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD458(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD4C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD530(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD59C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD608(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD674(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD6E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD74C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD7B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD824(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD890(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD8FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD968(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAD9D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADA40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADAAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADB18(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADB84(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADBF0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADC5C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADCC8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADD34(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADDA0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADE0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADE78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADEE4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADF50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEADFBC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAE028(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAE094(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAE100(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAE16C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EEAF3C0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EEAE1D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22EE96928(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EE9B190((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EEAE2C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EEAE330(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EEAA5FC(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EEAE3E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EEAE45C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EEAA5FC(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EEAA5FC(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EEAE684(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EEAE6F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EEAE7E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEAA0E0(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EEAE834(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EEABBB0(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EEAE8A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEABBB0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EEAE8E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EEABBB0(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EEAE8A0(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EEAE834(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EEAE99C(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EE8C500(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EE8C500(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EEAA5FC(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EEAEBAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EEAEBFC(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EEAA5FC(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EEAF2BC((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EEAA5FC(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EEAED24(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EEAA5FC(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EEAEE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EEAA5FC(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EEAEF28(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EEAF2BC((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EEAA5FC(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EEAF054(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EEAA5FC(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22EEAF2BC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EE8C500(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

uint64_t sub_22EEAF3C0(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EEAFB18(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EEAFC9C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EEAFCE8(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EEAFE60((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EEAFFE4((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EEB0030((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EEB007C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EEB01C8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EEB0314(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EEB04A8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EEB04F4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EEB054C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EEB05A4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EEB05F4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EEB0644((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EEB0790((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EEB0814(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EEB0860((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EEB09AC((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EEB0B00(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EEB0F7C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EEB0FC8((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EEB1120((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EEB116C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EEB11C0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EEB15FC((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EEB1748((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EEB18DC((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EEB1A34((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EEB1B8C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EEB1D1C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EEB21F4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EEB2240((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EEB238C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EEB23D8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EEB2424((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EEB2470((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EEB24BC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EEB2514(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EEB257C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EEB25C8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EEB2714(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EEB2B58((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EEB2BA4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EEB2C08((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EEB2D54((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EEB2DA0((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EEB2F38(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EEB3374((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EEB33C0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EEB383C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EEB3888((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EEB39E0((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EEB3B38(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EEAA5FC(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EE9F0CC(&v26, a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EEAFB18(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EE8C500(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EE8C500(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EEAFC9C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEAFCE8(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE8C500(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EEAFE60(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EE8C500(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EEAFFE4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB0030(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB007C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EEB01C8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EEB0314(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EE8C500(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EE8C500(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB04A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB04F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB054C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB05A4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB05F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB0644(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB0790(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EE8C500(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EEB0814(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB0860(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EE8C500(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EEB09AC(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EEB0B00(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE8C500(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE9B1E4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EE9F0CC(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EEB0F7C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EEB0FC8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EEB1120(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB116C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB11C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22EE9F0CC((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EEB15FC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB1748(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EE8C500(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EEB18DC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EEB1A34(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB1B8C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE8C500(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EEB1D1C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EE8C500(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE9B1E4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EE9F0CC((__n128 *)&v57, a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EEB21F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB2240(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB238C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB23D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB2424(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB2470(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB24BC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE8C500(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EEB2514(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EEB257C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB25C8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB2714(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22EE9F0CC((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EEB2B58(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EEB2BA4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB2C08(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EEB2D54(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EEB2DA0(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EE8C500(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EEB2F38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22EE9F0CC((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EEB3374(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EEB33C0(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE8C500(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE9B1E4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EE9F0CC(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EEB383C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE8C500(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EEB3888(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EEB39E0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE8C500(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EEB3B38(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EE8C500(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EE8C500(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22EEB3CA4(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EE96928((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F49B4F0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EE9CBB0(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22EEB3F94(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EE96928(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE8C500(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EEB4058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EEB4064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EEB4070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EEB407C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EEB4088()
{
  JUMPOUT(0x22EEB4090);
}

unint64_t sub_22EEB40A4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EEAA0E0(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22EEB4214(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_22EEB421C(uint64_t a1)
{
  return sub_22EE46380(*(_QWORD *)a1, **(unsigned int **)(a1 + 8), **(_QWORD **)(a1 + 16), 0, 0, 0);
}

uint64_t sub_22EEB4240(uint64_t a1)
{
  uint64_t result;

  result = sub_22EE0D174(*(_QWORD **)(a1 + 8), **(_DWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), 1, **(_QWORD **)(a1 + 32) != 0);
  **(_BYTE **)a1 = result;
  return result;
}

void sub_22EEB428C(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6[2];
  _QWORD v7[10];

  v7[9] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_DWORD **)(a1 + 16);
  v4 = **(uint64_t ***)(a1 + 24);
  v5 = **(_QWORD **)(a1 + 32);
  sub_22EE007CC((uint64_t)v4, 0, 0, 0, (uint64_t)v6);
  **(_BYTE **)a1 = sub_22EE0B368(v2, v3, v4, v5, (uint64_t *)v6, 1, **(_QWORD **)(a1 + 40) != 0);
  if (v6[0] != v7)
    free(v6[0]);
}

void sub_22EEB4368(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  size_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  __int128 v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  size_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _OWORD *v141;
  __int128 v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  uint64_t v175;
  _QWORD v176[9];

  v4 = a2;
  v176[8] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F11598C(a2);
  if (*(_QWORD *)(a1 + 8) < (unint64_t)v6)
    sub_22EEB52C0((uint64_t *)a1, v6);
  v174 = v176;
  v175 = 0x400000000;
  if (v4)
  {
    do
    {
      v7 = v175;
      if (v175 >= (unint64_t)HIDWORD(v175))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v175;
      }
      v8 = (uint64_t *)((char *)v174 + 16 * v7);
      *v8 = v4;
      v8[1] = a3;
      LODWORD(v175) = v175 + 1;
      v4 = sub_22F115B7C(v4);
      a3 = v9;
    }
    while (v4);
    v10 = v175;
    if ((_DWORD)v175)
    {
      v11 = 0;
      do
      {
        v12 = (uint64_t *)((char *)v174 + 16 * (v10 + ~(_DWORD)v11));
        v13 = *v12;
        if ((*v12 & 0xF) == 0)
        {
          v14 = (_BYTE *)v12[1];
          switch(*(_BYTE *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16))
          {
            case 2:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v17 = v16 - v15 + 16;
              do
              {
                v18 = v17 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
              goto LABEL_312;
            case 3:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v19 = v16 - v15 + 16;
              do
              {
                v18 = v19 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
              goto LABEL_312;
            case 4:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v20 = v16 - v15 + 16;
              do
              {
                v18 = v20 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
              goto LABEL_312;
            case 5:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v21 = v16 - v15 + 16;
              do
              {
                v18 = v21 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
              goto LABEL_312;
            case 6:
              v22 = *(_QWORD *)(a1 + 16);
              if (v22 > 0xB)
                goto LABEL_218;
              v23 = *(_QWORD *)(a1 + 8);
              v24 = v23 - v22 + 12;
              do
              {
                v18 = v24 > 2 * v23;
                v23 *= 2;
              }
              while (v18);
              goto LABEL_327;
            case 7:
              v25 = *(_QWORD *)(a1 + 16);
              if (v25 <= 7)
              {
                v152 = *(_QWORD *)(a1 + 8);
                v153 = v152 - v25 + 8;
                do
                {
                  v18 = v153 > 2 * v152;
                  v152 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v152);
                v25 = *(_QWORD *)(a1 + 16);
              }
              v26 = *(_DWORD *)(a1 + 60);
              if (!v26)
              {
                if ((v25 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v25 - 4), (const void *)(*(_QWORD *)a1 + v25), *(unsigned int *)(a1 + 56));
                  v25 = *(_QWORD *)(a1 + 16) - 4;
                  v26 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v26 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v26 + 8;
              goto LABEL_264;
            case 8:
              *(_BYTE *)sub_22F34C184((uint64_t *)a1) = *v14;
              break;
            case 9:
              v27 = *(_QWORD *)(a1 + 16);
              if (v27 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v29 = v28 - v27 + 4;
              do
              {
                v18 = v29 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0xA:
              v30 = *(_QWORD *)(a1 + 16);
              if (v30 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v31 = v28 - v30 + 4;
              do
              {
                v18 = v31 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0xB:
              v172 = *v12;
              v173 = 0;
              v32 = sub_22E8BADE8((uint64_t)&v172);
              v33 = *(_QWORD *)(a1 + 16);
              v34 = v32 >= v33;
              v35 = v32 - v33;
              if (v35 != 0 && v34)
              {
                v154 = *(_QWORD *)(a1 + 8);
                v155 = v35 + v154;
                do
                {
                  v18 = v155 > 2 * v154;
                  v154 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v154);
              }
              v36 = *(unsigned int *)(a1 + 56);
              if (*(_DWORD *)(a1 + 60))
              {
                v37 = *(_QWORD *)(a1 + 16);
                if ((v32 & 7) != 0)
                {
                  if ((v36 & 7) != 0)
                    v150 = 4;
                  else
                    v150 = -4;
                  memmove((void *)(*(_QWORD *)a1 + v37 + v150), (const void *)(*(_QWORD *)a1 + v37), v36);
                  v37 = *(_QWORD *)(a1 + 16) + v150;
                  LODWORD(v36) = *(_DWORD *)(a1 + 56);
                }
              }
              else
              {
                v37 = *(_QWORD *)(a1 + 16);
              }
              *(_DWORD *)(a1 + 56) = v36 + v32;
              v38 = v37 - v32;
              *(_QWORD *)(a1 + 16) = v38;
              v39 = (void *)(*(_QWORD *)a1 + v38);
              v172 = v13;
              v173 = v39;
              v40 = sub_22E8BADE8((uint64_t)&v172);
              v41 = v39;
              goto LABEL_273;
            case 0xC:
              v42 = *(_QWORD *)(a1 + 16);
              if (v42 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v43 = v28 - v42 + 4;
              do
              {
                v18 = v43 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0xD:
              v25 = *(_QWORD *)(a1 + 16);
              if (v25 > 7)
                goto LABEL_167;
              v44 = *(_QWORD *)(a1 + 8);
              v45 = v44 - v25 + 8;
              do
              {
                v18 = v45 > 2 * v44;
                v44 *= 2;
              }
              while (v18);
              goto LABEL_321;
            case 0xE:
              v46 = (8 * *(_DWORD *)(v13 + 20) + 56);
              v47 = *(_QWORD *)(a1 + 16);
              if (v46 > v47)
              {
                v156 = *(_QWORD *)(a1 + 8);
                v157 = v46 - v47 + v156;
                do
                {
                  v18 = v157 > 2 * v156;
                  v156 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v156);
                v47 = *(_QWORD *)(a1 + 16);
              }
              v48 = *(_DWORD *)(a1 + 60);
              if (!v48)
              {
                if ((v47 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v47 - 4), (const void *)(*(_QWORD *)a1 + v47), *(unsigned int *)(a1 + 56));
                  v47 = *(_QWORD *)(a1 + 16) - 4;
                  v48 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v48 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v48 + v46;
              v144 = v47 - v46;
              *(_QWORD *)(a1 + 16) = v144;
              v41 = (void *)(*(_QWORD *)a1 + v144);
              v40 = (8 * *(_DWORD *)(v13 + 20) + 56);
              goto LABEL_273;
            case 0xF:
              v49 = *(_QWORD *)(a1 + 16);
              if (v49 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v50 = v28 - v49 + 4;
              do
              {
                v18 = v50 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x10:
              v51 = *(_QWORD *)(a1 + 16);
              if (v51 > 0x17)
                goto LABEL_232;
              v52 = *(_QWORD *)(a1 + 8);
              v53 = v52 - v51 + 24;
              do
              {
                v18 = v53 > 2 * v52;
                v52 *= 2;
              }
              while (v18);
              goto LABEL_330;
            case 0x11:
              v54 = *(_QWORD *)(a1 + 16);
              if (v54 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v55 = v28 - v54 + 4;
              do
              {
                v18 = v55 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x12:
              v51 = *(_QWORD *)(a1 + 16);
              if (v51 > 0x17)
                goto LABEL_232;
              v52 = *(_QWORD *)(a1 + 8);
              v56 = v52 - v51 + 24;
              do
              {
                v18 = v56 > 2 * v52;
                v52 *= 2;
              }
              while (v18);
              goto LABEL_330;
            case 0x13:
              v57 = *(_QWORD *)(a1 + 16);
              if (v57 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v58 = v28 - v57 + 4;
              do
              {
                v18 = v58 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x14:
              v59 = (8 * *(_DWORD *)(v13 + 20) + 32);
              v60 = *(_QWORD *)(a1 + 16);
              if (v59 > v60)
              {
                v158 = *(_QWORD *)(a1 + 8);
                v159 = v59 - v60 + v158;
                do
                {
                  v18 = v159 > 2 * v158;
                  v158 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v158);
                v60 = *(_QWORD *)(a1 + 16);
              }
              v61 = *(_DWORD *)(a1 + 60);
              if (!v61)
              {
                if ((v60 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v60 - 4), (const void *)(*(_QWORD *)a1 + v60), *(unsigned int *)(a1 + 56));
                  v60 = *(_QWORD *)(a1 + 16) - 4;
                  v61 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v61 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v61 + v59;
              v145 = v60 - v59;
              *(_QWORD *)(a1 + 16) = v145;
              v41 = (void *)(*(_QWORD *)a1 + v145);
              v40 = (8 * *(_DWORD *)(v13 + 20) + 32);
              goto LABEL_273;
            case 0x15:
              v62 = *(_QWORD *)(a1 + 16);
              if (v62 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v63 = v28 - v62 + 4;
              do
              {
                v18 = v63 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x18:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v64 = v16 - v15 + 16;
              do
              {
                v18 = v64 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
              goto LABEL_312;
            case 0x19:
            case 0x1A:
              v65 = sub_22E8BB094(a1, *v12);
              v41 = v66;
              v67 = *(unsigned __int8 *)(v65 + 16);
              if (v65)
                v68 = v67 == 26;
              else
                v68 = 0;
              if (v68)
              {
                v138 = *(_QWORD *)(v65 + 16);
                v139 = 8 * ((v138 & 0x3C0000000000000) != 0);
              }
              else
              {
                if (v67 == 25)
                {
                  v69 = 0;
                  goto LABEL_261;
                }
                v139 = 0;
                v138 = *(_QWORD *)(v65 + 16);
              }
              v69 = ((v138 >> 35) & 0x7FFF8) + v139;
LABEL_261:
              v40 = v69 + 16;
LABEL_273:
              memcpy(v41, v14, v40);
              break;
            case 0x1B:
              v70 = *(_QWORD *)(a1 + 16);
              if (v70 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v71 = v28 - v70 + 4;
              do
              {
                v18 = v71 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x1C:
              v72 = *(_QWORD *)(a1 + 16);
              if (v72 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v73 = v28 - v72 + 4;
              do
              {
                v18 = v73 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x1D:
              v74 = *(_QWORD *)(a1 + 16);
              if (v74 > 0x1F)
                goto LABEL_129;
              v75 = *(_QWORD *)(a1 + 8);
              v76 = v75 - v74 + 32;
              do
              {
                v18 = v76 > 2 * v75;
                v75 *= 2;
              }
              while (v18);
              goto LABEL_309;
            case 0x1E:
              v74 = *(_QWORD *)(a1 + 16);
              if (v74 > 0x1F)
                goto LABEL_129;
              v75 = *(_QWORD *)(a1 + 8);
              v160 = v75 - v74 + 32;
              do
              {
                v18 = v160 > 2 * v75;
                v75 *= 2;
              }
              while (v18);
LABEL_309:
              sub_22EEB52C0((uint64_t *)a1, v75);
              v74 = *(_QWORD *)(a1 + 16);
LABEL_129:
              v77 = *(_DWORD *)(a1 + 60);
              if (!v77)
              {
                if ((v74 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v74 - 4), (const void *)(*(_QWORD *)a1 + v74), *(unsigned int *)(a1 + 56));
                  v74 = *(_QWORD *)(a1 + 16) - 4;
                  v77 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v77 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v77 + 32;
              v140 = v74 - 32;
              *(_QWORD *)(a1 + 16) = v140;
              v141 = (_OWORD *)(*(_QWORD *)a1 + v140);
              v142 = *((_OWORD *)v14 + 1);
              *v141 = *(_OWORD *)v14;
              v141[1] = v142;
              break;
            case 0x1F:
              v15 = *(_QWORD *)(a1 + 16);
              if (v15 > 0xF)
                goto LABEL_133;
              v16 = *(_QWORD *)(a1 + 8);
              v161 = v16 - v15 + 16;
              do
              {
                v18 = v161 > 2 * v16;
                v16 *= 2;
              }
              while (v18);
LABEL_312:
              sub_22EEB52C0((uint64_t *)a1, v16);
              v15 = *(_QWORD *)(a1 + 16);
LABEL_133:
              v78 = *(_DWORD *)(a1 + 60);
              if (!v78)
              {
                if ((v15 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v15 - 4), (const void *)(*(_QWORD *)a1 + v15), *(unsigned int *)(a1 + 56));
                  v15 = *(_QWORD *)(a1 + 16) - 4;
                  v78 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v78 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v78 + 16;
              v79 = v15 - 16;
              *(_QWORD *)(a1 + 16) = v79;
              *(_OWORD *)(*(_QWORD *)a1 + v79) = *(_OWORD *)v14;
              break;
            case 0x20:
              v80 = *(_QWORD *)(a1 + 16);
              if (v80 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v81 = v28 - v80 + 4;
              do
              {
                v18 = v81 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x21:
              v82 = ((HIWORD(*(_DWORD *)(v13 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v13 + 16) >> 26) + 31) & 0x7F8;
              v83 = *(_QWORD *)(a1 + 16);
              if (v82 > v83)
              {
                v162 = *(_QWORD *)(a1 + 8);
                v163 = v82 - v83 + v162;
                do
                {
                  v18 = v163 > 2 * v162;
                  v162 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v162);
                v83 = *(_QWORD *)(a1 + 16);
              }
              v84 = *(_DWORD *)(a1 + 60);
              if (!v84)
              {
                if ((v83 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v83 - 4), (const void *)(*(_QWORD *)a1 + v83), *(unsigned int *)(a1 + 56));
                  v83 = *(_QWORD *)(a1 + 16) - 4;
                  v84 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v84 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v84 + v82;
              v146 = v83 - v82;
              *(_QWORD *)(a1 + 16) = v146;
              v41 = (void *)(*(_QWORD *)a1 + v146);
              v40 = ((HIWORD(*(_DWORD *)(v13 + 16)) & 0x3F8u) + 4 * (*(_DWORD *)(v13 + 16) >> 26) + 31) & 0x7F8;
              goto LABEL_273;
            case 0x22:
              v25 = *(_QWORD *)(a1 + 16);
              if (v25 > 7)
                goto LABEL_167;
              v44 = *(_QWORD *)(a1 + 8);
              v85 = v44 - v25 + 8;
              do
              {
                v18 = v85 > 2 * v44;
                v44 *= 2;
              }
              while (v18);
              goto LABEL_321;
            case 0x23:
              if ((*(_BYTE *)(v13 + 32) & 0x3F) != 0)
                v86 = 4 * (*(_BYTE *)(v13 + 32) & 0x3F) + 12;
              else
                v86 = 4;
              v87 = *(_QWORD *)(a1 + 16);
              v34 = v86 >= v87;
              v88 = v86 - v87;
              if (v88 != 0 && v34)
              {
                v164 = *(_QWORD *)(a1 + 8);
                v165 = v88 + v164;
                do
                {
                  v18 = v165 > 2 * v164;
                  v164 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v164);
              }
              v89 = *(unsigned int *)(a1 + 56);
              if (*(_DWORD *)(a1 + 60))
              {
                v90 = *(_QWORD *)(a1 + 16);
                if ((v86 & 4) != 0)
                {
                  if ((v89 & 7) != 0)
                    v151 = 4;
                  else
                    v151 = -4;
                  memmove((void *)(*(_QWORD *)a1 + v90 + v151), (const void *)(*(_QWORD *)a1 + v90), v89);
                  v90 = *(_QWORD *)(a1 + 16) + v151;
                  LODWORD(v89) = *(_DWORD *)(a1 + 56);
                }
              }
              else
              {
                v90 = *(_QWORD *)(a1 + 16);
              }
              *(_DWORD *)(a1 + 56) = v89 + v86;
              v91 = v90 - v86;
              *(_QWORD *)(a1 + 16) = v91;
              v41 = (void *)(*(_QWORD *)a1 + v91);
              if ((*(_BYTE *)(v13 + 32) & 0x3F) != 0)
                v40 = 4 * (*(_BYTE *)(v13 + 32) & 0x3F) + 12;
              else
                v40 = 4;
              goto LABEL_273;
            case 0x24:
              v92 = *(_QWORD *)(a1 + 16);
              if (v92 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v93 = v28 - v92 + 4;
              do
              {
                v18 = v93 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x25:
              v25 = *(_QWORD *)(a1 + 16);
              if (v25 > 7)
                goto LABEL_167;
              v44 = *(_QWORD *)(a1 + 8);
              v166 = v44 - v25 + 8;
              do
              {
                v18 = v166 > 2 * v44;
                v44 *= 2;
              }
              while (v18);
LABEL_321:
              sub_22EEB52C0((uint64_t *)a1, v44);
              v25 = *(_QWORD *)(a1 + 16);
LABEL_167:
              *(_DWORD *)(a1 + 56) += 8;
LABEL_264:
              v143 = v25 - 8;
              *(_QWORD *)(a1 + 16) = v143;
              *(_QWORD *)(*(_QWORD *)a1 + v143) = *(_QWORD *)v14;
              break;
            case 0x26:
              v94 = *(_QWORD *)(a1 + 16);
              if (v94 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v95 = v28 - v94 + 4;
              do
              {
                v18 = v95 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x27:
              v96 = *(_QWORD *)(a1 + 16);
              if (v96 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v97 = v28 - v96 + 4;
              do
              {
                v18 = v97 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x28:
              v98 = *(_QWORD *)(a1 + 16);
              if (v98 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v99 = v28 - v98 + 4;
              do
              {
                v18 = v99 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x29:
              v100 = *(_QWORD *)(a1 + 16);
              if (v100 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v101 = v28 - v100 + 4;
              do
              {
                v18 = v101 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x2A:
              v102 = *(_QWORD *)(a1 + 16);
              if (v102 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v103 = v28 - v102 + 4;
              do
              {
                v18 = v103 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x2B:
              v104 = *(_QWORD *)(a1 + 16);
              if (v104 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v105 = v28 - v104 + 4;
              do
              {
                v18 = v105 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x2C:
              v106 = *(_QWORD *)(a1 + 16);
              if (v106 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v107 = v28 - v106 + 4;
              do
              {
                v18 = v107 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x2D:
              v108 = *(_QWORD *)(a1 + 16);
              if (v108 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v109 = v28 - v108 + 4;
              do
              {
                v18 = v109 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x2E:
              v110 = (8 * *(_DWORD *)(v13 + 20) + 16);
              v111 = *(_QWORD *)(a1 + 16);
              if (v110 > v111)
              {
                v167 = *(_QWORD *)(a1 + 8);
                v168 = v110 - v111 + v167;
                do
                {
                  v18 = v168 > 2 * v167;
                  v167 *= 2;
                }
                while (v18);
                sub_22EEB52C0((uint64_t *)a1, v167);
                v111 = *(_QWORD *)(a1 + 16);
              }
              v112 = *(_DWORD *)(a1 + 60);
              if (!v112)
              {
                if ((v111 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v111 - 4), (const void *)(*(_QWORD *)a1 + v111), *(unsigned int *)(a1 + 56));
                  v111 = *(_QWORD *)(a1 + 16) - 4;
                  v112 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v112 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v112 + v110;
              v147 = v111 - v110;
              *(_QWORD *)(a1 + 16) = v147;
              v41 = (void *)(*(_QWORD *)a1 + v147);
              v40 = (8 * *(_DWORD *)(v13 + 20) + 16);
              goto LABEL_273;
            case 0x2F:
              v113 = *(_QWORD *)(a1 + 16);
              if (v113 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v114 = v28 - v113 + 4;
              do
              {
                v18 = v114 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x30:
              v115 = *(_QWORD *)(a1 + 16);
              if (v115 > 0xB)
                goto LABEL_218;
              v23 = *(_QWORD *)(a1 + 8);
              v169 = v23 - v115 + 12;
              do
              {
                v18 = v169 > 2 * v23;
                v23 *= 2;
              }
              while (v18);
LABEL_327:
              sub_22EEB52C0((uint64_t *)a1, v23);
LABEL_218:
              v116 = *(unsigned int *)(a1 + 56);
              if (*(_DWORD *)(a1 + 60))
              {
                if ((v116 & 7) != 0)
                  v149 = 4;
                else
                  v149 = -4;
                memmove((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) + v149), (const void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v116);
                v117 = *(_QWORD *)(a1 + 16) + v149;
                LODWORD(v116) = *(_DWORD *)(a1 + 56);
              }
              else
              {
                v117 = *(_QWORD *)(a1 + 16);
              }
              *(_DWORD *)(a1 + 56) = v116 + 12;
              v118 = v117 - 12;
              *(_QWORD *)(a1 + 16) = v118;
              v119 = *(_QWORD *)a1 + v118;
              v120 = *(_QWORD *)v14;
              *(_DWORD *)(v119 + 8) = *((_DWORD *)v14 + 2);
              *(_QWORD *)v119 = v120;
              break;
            case 0x31:
              v51 = *(_QWORD *)(a1 + 16);
              if (v51 > 0x17)
                goto LABEL_232;
              v52 = *(_QWORD *)(a1 + 8);
              v121 = v52 - v51 + 24;
              do
              {
                v18 = v121 > 2 * v52;
                v52 *= 2;
              }
              while (v18);
              goto LABEL_330;
            case 0x32:
              v122 = *(_QWORD *)(a1 + 16);
              if (v122 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v123 = v28 - v122 + 4;
              do
              {
                v18 = v123 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x33:
              v51 = *(_QWORD *)(a1 + 16);
              if (v51 > 0x17)
                goto LABEL_232;
              v52 = *(_QWORD *)(a1 + 8);
              v170 = v52 - v51 + 24;
              do
              {
                v18 = v170 > 2 * v52;
                v52 *= 2;
              }
              while (v18);
LABEL_330:
              sub_22EEB52C0((uint64_t *)a1, v52);
              v51 = *(_QWORD *)(a1 + 16);
LABEL_232:
              v124 = *(_DWORD *)(a1 + 60);
              if (!v124)
              {
                if ((v51 & 7) != 0)
                {
                  memmove((void *)(*(_QWORD *)a1 + v51 - 4), (const void *)(*(_QWORD *)a1 + v51), *(unsigned int *)(a1 + 56));
                  v51 = *(_QWORD *)(a1 + 16) - 4;
                  v124 = *(_DWORD *)(a1 + 60);
                }
                else
                {
                  v124 = 0;
                }
              }
              *(_DWORD *)(a1 + 56) = 0;
              *(_DWORD *)(a1 + 60) = v124 + 24;
              v125 = v51 - 24;
              *(_QWORD *)(a1 + 16) = v125;
              v126 = *(_QWORD *)a1 + v125;
              v127 = *(_OWORD *)v14;
              *(_QWORD *)(v126 + 16) = *((_QWORD *)v14 + 2);
              *(_OWORD *)v126 = v127;
              break;
            case 0x34:
              v128 = *(_QWORD *)(a1 + 16);
              if (v128 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v129 = v28 - v128 + 4;
              do
              {
                v18 = v129 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x35:
              v130 = *(_QWORD *)(a1 + 16);
              if (v130 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v131 = v28 - v130 + 4;
              do
              {
                v18 = v131 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x37:
              v132 = *(_QWORD *)(a1 + 16);
              if (v132 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v133 = v28 - v132 + 4;
              do
              {
                v18 = v133 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
              goto LABEL_333;
            case 0x38:
              v134 = *(_QWORD *)(a1 + 16);
              if (v134 > 3)
                goto LABEL_253;
              v28 = *(_QWORD *)(a1 + 8);
              v171 = v28 - v134 + 4;
              do
              {
                v18 = v171 > 2 * v28;
                v28 *= 2;
              }
              while (v18);
LABEL_333:
              sub_22EEB52C0((uint64_t *)a1, v28);
LABEL_253:
              v135 = *(unsigned int *)(a1 + 56);
              if (*(_DWORD *)(a1 + 60))
              {
                if ((v135 & 7) != 0)
                  v148 = 4;
                else
                  v148 = -4;
                memmove((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) + v148), (const void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v135);
                v136 = *(_QWORD *)(a1 + 16) + v148;
                LODWORD(v135) = *(_DWORD *)(a1 + 56);
              }
              else
              {
                v136 = *(_QWORD *)(a1 + 16);
              }
              *(_DWORD *)(a1 + 56) = v135 + 4;
              v137 = v136 - 4;
              *(_QWORD *)(a1 + 16) = v137;
              *(_DWORD *)(*(_QWORD *)a1 + v137) = *(_DWORD *)v14;
              break;
            default:
              break;
          }
        }
        ++v11;
      }
      while (v11 != v10);
    }
  }
  if (v174 != v176)
    free(v174);
}

void *sub_22EEB52C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *result;

  v4 = operator new[]();
  v6 = a1[1];
  v5 = a1[2];
  v7 = (uint64_t *)*a1;
  v8 = (v5 + a2 - v6);
  result = memcpy((void *)(v4 + v8), (const void *)(*a1 + v5), v6 - v5);
  if (v7 != a1 + 3 && v7 != 0)
    result = (void *)MEMORY[0x2348A0E84](v7, 0x1000C8077774924);
  *a1 = v4;
  a1[1] = a2;
  a1[2] = v8;
  return result;
}

uint64_t sub_22EEB5360(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  size_t v11;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = a3 >= v8;
  v10 = a3 - v8;
  if (v10 != 0 && v9)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = v10 + v20;
    do
    {
      v22 = v21 > 2 * v20;
      v20 *= 2;
    }
    while (v22);
    sub_22EEB52C0((uint64_t *)a1, v20);
  }
  if (a4 != 4)
  {
    if (a4 != 8)
      goto LABEL_5;
    v13 = *(_DWORD *)(a1 + 60);
    if (v13)
    {
      v17 = *(unsigned int *)(a1 + 56);
      if ((v17 & 7) != 0)
      {
        if ((a3 & 7) == 0)
          goto LABEL_10;
        memmove((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) + 4), (const void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v17);
        v18 = 4;
        goto LABEL_13;
      }
      if ((a3 & 7) == 0)
        goto LABEL_10;
      v15 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16));
      v16 = v15 - 4;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      if ((((_BYTE)v14 - (_BYTE)a3) & 7) == 0)
      {
        v13 = 0;
LABEL_10:
        *(_DWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 60) = v13 + a3;
        goto LABEL_5;
      }
      v15 = (char *)(*(_QWORD *)a1 + v14);
      v16 = v15 - 4;
      v17 = *(unsigned int *)(a1 + 56);
    }
    memmove(v16, v15, v17);
    v18 = -4;
LABEL_13:
    *(_QWORD *)(a1 + 16) += v18;
    v13 = *(_DWORD *)(a1 + 60);
    goto LABEL_10;
  }
  v11 = *(unsigned int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 60))
  {
    if ((v11 & 7) != 0)
    {
      if ((a3 & 7) == 0)
        goto LABEL_4;
      memmove((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) + 4), (const void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v11);
      v19 = 4;
    }
    else
    {
      if ((a3 & 7) == 0)
        goto LABEL_4;
      memmove((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) - 4), (const void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16)), v11);
      v19 = -4;
    }
    *(_QWORD *)(a1 + 16) += v19;
    LODWORD(v11) = *(_DWORD *)(a1 + 56);
  }
LABEL_4:
  *(_DWORD *)(a1 + 56) = v11 + a3;
LABEL_5:
  *(_QWORD *)(a1 + 16) -= a3;
  return a2;
}

uint64_t sub_22EEB54EC()
{
  return 0;
}

uint64_t sub_22EEB54F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  int v15;
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  __int128 v31;
  char v32;

  if (*(_DWORD *)(a1 + 36) != 33)
    return 0;
  v13 = *(_QWORD *)(*(_QWORD *)a4 + 16);
  if (*(_DWORD *)v13 == 17)
  {
    v19 = *(_QWORD *)(v13 + 16);
    v20 = *(_QWORD *)(v13 + 24);
    v21 = *(unsigned __int8 *)(v13 + 32);
    if (v19 != 0x5F7070615F736F69 || v20 != 0x6F69736E65747865 || v21 != 110)
      return 0;
    v17 = "xros_app_extension";
    v18 = 18;
  }
  else
  {
    if (*(_DWORD *)v13 != 3)
      return 0;
    v14 = *(unsigned __int16 *)(v13 + 16);
    v15 = *(unsigned __int8 *)(v13 + 18);
    if (v14 != 28521 || v15 != 115)
      return 0;
    v17 = "xros";
    v18 = 4;
  }
  *(_QWORD *)a4 = sub_22E3CB704(*(llvm::StringMapImpl **)(a3 + 15192), v17, v18);
  if (!a2)
    goto LABEL_20;
  v25 = sub_22F2E0784(a2, 0x11F00000549);
  if (!v25)
    goto LABEL_20;
  v26 = (uint64_t)v25;
  if (*a6 & 0x7FFFFFFFFFFFFFFFLL | a6[1] & 0x7FFFFFFF7FFFFFFFLL)
  {
    if (*a6 == 100000)
    {
      v29 = 0x186A0uLL;
    }
    else
    {
      LOBYTE(v31) = 0;
      v32 = 0;
      sub_22F4197F0((uint64_t)v25, (uint64_t)a6, (__int128 *)v25 + 2, &v31, (uint64_t)&v29);
      if (!v30)
        goto LABEL_20;
    }
    *(_OWORD *)a6 = v29;
  }
  if (*(_QWORD *)a8 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(a8 + 8) & 0x7FFFFFFF7FFFFFFFLL)
  {
    if (*(_QWORD *)a8 == 100000)
    {
      v29 = 0x186A0uLL;
LABEL_29:
      *(_OWORD *)a8 = v29;
      goto LABEL_30;
    }
    v31 = *(_OWORD *)(v26 + 48);
    v32 = 1;
    sub_22F4197F0(v26, a8, (__int128 *)(v26 + 32), &v31, (uint64_t)&v29);
    if (v30)
      goto LABEL_29;
LABEL_20:
    result = 1;
    *a5 = 1;
    *a6 = 0;
    a6[1] = 0;
    *a7 = 0;
    a7[1] = 0;
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    return result;
  }
LABEL_30:
  if (*a7 & 0x7FFFFFFFFFFFFFFFLL | a7[1] & 0x7FFFFFFF7FFFFFFFLL)
  {
    if (*a7 == 100000)
    {
      v27 = 0;
      v28 = 100000;
    }
    else
    {
      v31 = *(_OWORD *)(v26 + 48);
      v32 = 1;
      sub_22F4197F0(v26, (uint64_t)a7, (__int128 *)(v26 + 32), &v31, (uint64_t)&v29);
      v28 = v29;
      if (v30)
        v27 = *((_QWORD *)&v29 + 1);
      else
        v27 = 0;
      if (!v30)
        v28 = 0;
    }
    *a7 = v28;
    a7[1] = v27;
  }
  return 1;
}

uint64_t sub_22EEB575C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  _DWORD *v5;
  BOOL v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a2 = 0;
  v5 = (_DWORD *)a1[1];
  if (v5)
    v6 = (v5[7] & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v6 = 0;
  if (v6)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(a1[1]);
    v2 = v13;
    if (v13 && *(_BYTE *)v13 == 11)
      v2 = *(_QWORD *)(v13 + 16);
    v14 = *a1;
    if (!*a1)
      return v2;
    if (!*(_BYTE *)(v14 + 160))
      return v2;
    v15 = sub_22EEB7F24((_QWORD *)(v14 + 120), (uint64_t)v5);
    if (!v15)
      return v2;
LABEL_29:
    *a2 = 1;
    return v15;
  }
  v7 = v5[7] & 0x7F;
  if (v5)
    v8 = v7 == 24;
  else
    v8 = 0;
  if (v8)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(a1[1]);
    v16 = *a1;
    if (!*a1)
      return v2;
    if (!*(_BYTE *)(v16 + 160))
      return v2;
    v15 = sub_22EEBA4BC((uint64_t *)(v16 + 120), v5);
    if (!v15)
      return v2;
    goto LABEL_29;
  }
  if (v5)
    v9 = v7 == 1;
  else
    v9 = 0;
  if (v9)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64);
    v11 = a1[1];
    return v12(v11);
  }
  if (v7 == 29)
    v10 = a1[1];
  else
    v10 = 0;
  if (!v5 || !v10)
    return v2;
  v11 = *(_QWORD *)(v10 + 48);
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64);
  return v12(v11);
}

_QWORD *sub_22EEB588C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;

  v2 = a2;
  v10 = a2;
  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
  {
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    *(_QWORD *)(a1 + 104) = v4;
  }
  v5 = *v2;
  if ((*v2 + 21) >= 0x7Bu)
  {
    while (1)
    {
      if (v5 > 0xD5u)
      {
        if (v5 == 233)
        {
          if ((*(_DWORD *)v2 & 0x7C0000) != 0x300000)
            goto LABEL_20;
          v7 = (unsigned __int8 **)(v2 + 16);
        }
        else
        {
          if (v5 != 214)
            goto LABEL_20;
          v7 = (unsigned __int8 **)(v2 + 24);
        }
      }
      else if (v5 == 155)
      {
        if ((**((_DWORD **)v2 + 2) & 0x18000) != 0)
          goto LABEL_20;
        if (v2[48])
          v7 = (unsigned __int8 **)(v2 + 24);
        else
          v7 = (unsigned __int8 **)(v2 + 32);
      }
      else
      {
        if (v5 != 176 || (v6 = *((unsigned int *)v2 + 5), (_DWORD)v6 == -1))
        {
LABEL_20:
          v10 = v2;
          return sub_22F34C3EC((_DWORD *)v4, &v10);
        }
        v7 = (unsigned __int8 **)&v2[8 * v6 + 40];
      }
      v8 = *v7;
      if (*v7 == v2)
        goto LABEL_20;
      v5 = *v8;
      v2 = v8;
    }
  }
  return sub_22F34C3EC((_DWORD *)v4, &v10);
}

uint64_t sub_22EEB59A4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  uint64_t v10;

  v2 = *a2;
  if ((*a2 + 21) >= 0x7Bu)
  {
    while (1)
    {
      if (v2 > 0xD5u)
      {
        if (v2 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            break;
          v6 = (unsigned __int8 **)(a2 + 16);
        }
        else
        {
          if (v2 != 214)
            break;
          v6 = (unsigned __int8 **)(a2 + 24);
        }
      }
      else if (v2 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          break;
        if (a2[48])
          v6 = (unsigned __int8 **)(a2 + 24);
        else
          v6 = (unsigned __int8 **)(a2 + 32);
      }
      else
      {
        if (v2 != 176)
          break;
        v5 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v5 == -1)
          break;
        v6 = (unsigned __int8 **)&a2[8 * v5 + 40];
      }
      v7 = *v6;
      if (*v6 == a2)
        break;
      v2 = *v7;
      a2 = v7;
    }
  }
  v3 = *(_QWORD *)(a1 + 104);
  v9 = a2;
  v10 = 0;
  if ((sub_22EEB7B50(v3, &v9, &v10) & 1) != 0)
    v4 = v10;
  else
    v4 = *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 16);
  return *(_QWORD *)(v4 + 8);
}

uint64_t sub_22EEB5AAC(uint64_t a1)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 112))
      return *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = sub_22EEB575C((uint64_t *)a1, &v20);
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5 || (*(_DWORD *)(v5 + 28) & 0x7F) != 0x53)
    {
      v6 = *(_QWORD *)(v5 + 16);
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v7 = *(_QWORD *)v7;
      for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
      {
        v9 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v9 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_23;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_22;
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_13;
          if (i == 24)
          {
LABEL_12:
            v9 = -48;
          }
          else
          {
LABEL_22:
            if (i != 70)
            {
LABEL_23:
              v11 = i - 52;
              if ((i - 33) >= 5)
                v12 = -48;
              else
                v12 = -64;
              if (v11 >= 6)
                v9 = v12;
              else
                v9 = -72;
              goto LABEL_13;
            }
            v9 = -64;
          }
        }
LABEL_13:
        v10 = *(_QWORD *)(v7 + v9 + 16);
        v7 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v7 = *(_QWORD *)v7;
      }
      v5 = v7 - 40;
    }
    sub_22EED0A54(v3, v4, *(_QWORD *)(v5 + 88), (_BYTE *)(a1 + 40), &v19);
    v13 = v19;
    v19 = 0;
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v13;
    if (v14)
    {
      v16 = sub_22EEB7B04(v14);
      MEMORY[0x2348A0E9C](v16, 0x10A0C4073B7F643);
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        v18 = sub_22EEB7B04((uint64_t)v17);
        MEMORY[0x2348A0E9C](v18, 0x10A0C4073B7F643);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
    v15 = *(uint64_t ***)(a1 + 120);
    if (v15)
      sub_22EEB5CAC(*(_QWORD *)(a1 + 16), v15);
    *(_QWORD *)(a1 + 80) = 0;
    return *(_QWORD *)(a1 + 16);
  }
  return sub_22F34C1DC(a1);
}

uint64_t sub_22EEB5CAC(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char v13[24];
  uint64_t v14;
  uint64_t v15;

  if (result)
  {
    v3 = *(_QWORD *)(result + 88);
    v4 = *(unsigned int *)(result + 104);
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (*(_DWORD *)(result + 96))
    {
      if ((_DWORD)v4)
      {
        v6 = 16 * v4;
        v7 = *(uint64_t **)(result + 88);
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 2;
          v6 -= 16;
          if (!v6)
            goto LABEL_7;
        }
      }
      else
      {
        v7 = *(uint64_t **)(result + 88);
      }
    }
    else
    {
LABEL_7:
      v7 = (uint64_t *)(v3 + 16 * v4);
    }
    v8 = (uint64_t *)(v3 + 16 * v4);
    while (v7 != v8)
    {
      v9 = *v7;
      v10 = sub_22F3EFCCC(a2, v7[1]);
      v11 = *a2;
      v14 = v9;
      v15 = v10;
      result = sub_22F3EFD0C((uint64_t)v11, &v14, &v15, (uint64_t)v13);
      v12 = v7 + 2;
      v7 = v5;
      if (v12 != v5)
      {
        v7 = v12;
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 2;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EEB5DA4(uint64_t a1)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  if (!*(_QWORD *)(a1 + 120))
  {
    v3 = (uint64_t *)operator new();
    v4 = (unsigned __int8 *)sub_22EEB575C((uint64_t *)a1, &v13);
    sub_22F3EFC10(v3, v4);
    v5 = *(uint64_t **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v3;
    if (v5)
    {
      v12 = sub_22F3EFC78(v5);
      MEMORY[0x2348A0E9C](v12, 0x80C40B8603338);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x37)
    {
      v7 = sub_22EFD7ED0(*(_QWORD *)(a1 + 8));
      v8 = sub_22EFD7ED0(v6) + 8 * ((*(_QWORD *)(v6 + 80) >> 40) & 0x1FFFFFLL);
      while (v7 != v8)
      {
        v9 = *(unsigned __int8 **)(*(_QWORD *)v7 + 8);
        if (v9)
          sub_22F0C54B4(**(_QWORD **)(a1 + 120), v9, 0);
        v7 += 8;
      }
    }
    if (*(_BYTE *)(a1 + 112))
    {
      v10 = sub_22EEB5AAC(a1);
      sub_22EEB5CAC(v10, *(uint64_t ***)(a1 + 120));
    }
    if (*(_BYTE *)(a1 + 113))
    {
      v11 = sub_22F34C1DC(a1);
      sub_22EEB5CAC(v11, *(uint64_t ***)(a1 + 120));
    }
  }
  return *(_QWORD *)(a1 + 120);
}

void sub_22EEB5ED0(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int j;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t k;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  llvm::raw_ostream *v45;
  _DWORD *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  const char *p_p;
  _BYTE *v50;
  char v51;
  char *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  const void *v71;
  size_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v79;
  unint64_t v80;
  _DWORD *v82;
  const char *v83;
  size_t v84;
  unsigned int v85;
  uint64_t **v86;
  const char *v87;
  size_t v88;
  uint64_t *v89;
  char **v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  size_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int *v99;
  const void *v100;
  size_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t *v104;
  _BYTE *v105;
  llvm::raw_ostream *v106;
  const char *v107;
  llvm::raw_ostream *v108;
  _BYTE *v109;
  _BYTE *v110;
  void **v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  uint64_t *v117;
  void *v118[2];
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *__p;
  char v123;
  uint64_t *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char v129;
  uint64_t v130;
  int v131;
  void **v132;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_22;
          }
          v8 = -64;
        }
      }
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  sub_22E462F04(&v120, *(unsigned int **)(*(_QWORD *)(v4 + 88) + 2000));
  v120 |= 0x40000000uLL;
  v12 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v12 || (*(_DWORD *)(v12 + 28) & 0x7F) != 0x53)
  {
    v13 = *(_QWORD *)(v12 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    for (j = *(_WORD *)(v14 + 8) & 0x7F; j != 83; j = *(_WORD *)(v14 + 8) & 0x7F)
    {
      v16 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v16 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_44;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_43;
        if (j == 16)
          goto LABEL_37;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_50;
        if (j == 24)
        {
LABEL_37:
          v16 = -48;
        }
        else
        {
LABEL_43:
          if (j != 70)
          {
LABEL_44:
            v17 = j - 52;
            if ((j - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v16 = v18;
            else
              v16 = -72;
            goto LABEL_50;
          }
          v16 = -64;
        }
      }
LABEL_50:
      v19 = *(_QWORD *)(v14 + v16 + 16);
      v14 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v14 = *(_QWORD *)v14;
    }
    v12 = v14 - 40;
  }
  v20 = 0;
  v116 = *(_QWORD **)(*(_QWORD *)(v12 + 88) + 1992);
  v117 = (uint64_t *)(MEMORY[0x24BED83D8] + 16);
  do
  {
    v21 = *(_DWORD *)(v3 + 16);
    if (v21 != 1)
    {
      if (v21)
        goto LABEL_252;
      v22 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v22 > 1uLL)
      {
        *v22 = 8969;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\t#");
      }
      v23 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v24 = (_BYTE *)*((_QWORD *)v23 + 4);
      if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
      {
        llvm::raw_ostream::write(v23);
      }
      else
      {
        *((_QWORD *)v23 + 4) = v24 + 1;
        *v24 = 32;
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
      v30 = (_QWORD *)*((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a2 + 3) - (_QWORD)v30;
      if (!v29 || (*(_DWORD *)(v29 + 28) & 0x7Fu) - 75 < 0xFFFFFFC2)
      {
        if (v31 > 0x15)
        {
          qmemcpy(v30, "Calling anonymous code", 22);
          *((_QWORD *)a2 + 4) += 22;
        }
        else
        {
          llvm::raw_ostream::write(a2, "Calling anonymous code");
        }
LABEL_251:
        ++v20;
        v112 = *(_QWORD *)(v3 + 48);
        if (!v112)
          goto LABEL_252;
        v114 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v114) > 8)
        {
          *(_BYTE *)(v114 + 8) = 32;
          *(_QWORD *)v114 = *(_QWORD *)" at line ";
          *((_QWORD *)a2 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(a2, " at line ");
        }
        sub_22F0D5A50(v112);
        v28 = v115;
        goto LABEL_260;
      }
      if (v31 > 7)
      {
        *v30 = 0x20676E696C6C6143;
        *((_QWORD *)a2 + 4) += 8;
        v32 = a2;
      }
      else
      {
        v32 = (llvm::raw_ostream *)llvm::raw_ostream::write(a2, "Calling ");
      }
      v118[0] = 0;
      v118[1] = 0;
      v119 = 0;
      v125 = 0;
      v129 = 0;
      v130 = 0;
      v131 = 1;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      v124 = v117;
      v132 = v118;
      llvm::raw_ostream::SetBufferAndMode();
      v33 = *(_DWORD *)(v29 + 28);
      v34 = v33 & 0x7F;
      v35 = v29;
      if (v34 != 83)
      {
        for (k = *(_QWORD *)(v29 + 16); ; k = *(_QWORD *)(v37 + v39 + 16))
        {
          v37 = k & 0xFFFFFFFFFFFFFFF8;
          if ((k & 4) != 0)
            v37 = *(_QWORD *)v37;
          v38 = *(_WORD *)(v37 + 8) & 0x7F;
          if (v38 == 83)
          {
            v35 = v37 - 40;
            break;
          }
          v39 = -40;
          if ((*(_WORD *)(v37 + 8) & 0x7Fu) > 0x46)
          {
            if (v38 == 71)
            {
              v39 = -56;
              continue;
            }
            if (v38 != 81)
              goto LABEL_90;
          }
          else
          {
            if (v38 > 0x18)
              goto LABEL_89;
            if (v38 == 16)
              goto LABEL_83;
            if (((1 << v38) & 0x1066) == 0)
            {
              if (v38 == 24)
              {
LABEL_83:
                v39 = -48;
                continue;
              }
LABEL_89:
              if (v38 == 70)
              {
                v39 = -64;
                continue;
              }
LABEL_90:
              v40 = v38 - 52;
              v41 = v38 - 33 >= 5;
              v42 = -64;
              if (v41)
                v42 = -48;
              v41 = v40 >= 6;
              v39 = -72;
              if (v41)
                v39 = v42;
              continue;
            }
          }
        }
      }
      v43 = *(_QWORD *)(v35 + 88);
      if ((v33 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        sub_22EFB9E74(v29, &__p);
        if (v123 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v124, p_p);
        if (v123 < 0)
          operator delete(__p);
        if ((*(_BYTE *)(*(_QWORD *)(v43 + 2000) + 1) & 1) != 0)
        {
          v50 = v128;
          if ((unint64_t)v128 >= v127)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v124);
          }
          else
          {
            ++v128;
            *v50 = 40;
          }
          v54 = *(uint64_t **)(v29 + 120);
          v55 = *(_QWORD *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v55 && *(_BYTE *)(v55 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v55 = sub_22F10CF48(v55)) != 0)
          {
            v56 = *(_QWORD *)(v55 + 16);
            if ((v56 & 0x3FFFC000000000) != 0)
            {
              v57 = 8 * (unsigned __int16)(v56 >> 38);
              do
              {
                v58 = *v54;
                v59 = *(_QWORD **)(v29 + 120);
                v60 = *(_QWORD *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v60)
                  v61 = *(_BYTE *)(v60 + 16) == 26;
                else
                  v61 = 0;
                if (!v61 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                  sub_22F10CF48(v60);
                if (v58 != *v59)
                {
                  if (v127 - (unint64_t)v128 > 1)
                  {
                    *(_WORD *)v128 = 8236;
                    v128 += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write((llvm::raw_ostream *)&v124, ", ");
                  }
                }
                v62 = *v54++;
                sub_22F40B69C(&v124, *(_QWORD *)(v62 + 48));
                v57 -= 8;
              }
              while (v57);
            }
          }
          v110 = v128;
          if ((unint64_t)v128 >= v127)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v124);
          }
          else
          {
            ++v128;
            *v110 = 41;
          }
        }
        goto LABEL_246;
      }
      if (v34 != 24)
      {
        if (v34 == 1)
        {
          sub_22F1E2F68(*(_QWORD *)(v43 + 1992), *(_DWORD *)(v29 + 24), 1, (uint64_t)&__p);
          if (__p)
          {
            v44 = v128;
            if (v127 - (unint64_t)v128 > 0xC)
            {
              *(_QWORD *)v128 = *(_QWORD *)"block (line: ";
              *(_QWORD *)(v44 + 5) = *(_QWORD *)" (line: ";
              v128 += 13;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v124, "block (line: ");
            }
            v45 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v46 = (_DWORD *)*((_QWORD *)v45 + 4);
            if (*((_QWORD *)v45 + 3) - (_QWORD)v46 > 6uLL)
            {
              *(_DWORD *)((char *)v46 + 3) = 540699759;
              *v46 = 1868767276;
              *((_QWORD *)v45 + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(v45, ", col: ");
            }
            v47 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
            v48 = (_BYTE *)*((_QWORD *)v47 + 4);
            if ((unint64_t)v48 >= *((_QWORD *)v47 + 3))
            {
              llvm::raw_ostream::write(v47);
            }
            else
            {
              *((_QWORD *)v47 + 4) = v48 + 1;
              *v48 = 41;
            }
          }
        }
LABEL_246:
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v124);
        if (v119 >= 0)
          v111 = v118;
        else
          v111 = (void **)v118[0];
        llvm::raw_ostream::write(v32, (const char *)v111);
        if (SHIBYTE(v119) < 0)
          operator delete(v118[0]);
        goto LABEL_251;
      }
      if ((*(_BYTE *)(v29 + 58) & 2) != 0)
        v51 = 45;
      else
        v51 = 43;
      v52 = v128;
      if ((unint64_t)v128 >= v127)
      {
        v53 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)&v124);
      }
      else
      {
        ++v128;
        *v52 = v51;
        v53 = &v124;
      }
      v63 = v53[4];
      if (v63 >= v53[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v53);
      }
      else
      {
        v53[4] = (uint64_t *)((char *)v63 + 1);
        *(_BYTE *)v63 = 91;
      }
      v64 = *(_QWORD *)(v29 + 16);
      v65 = v64 & 0xFFFFFFFFFFFFFFF8;
      if ((v64 & 4) != 0)
        v65 = *(_QWORD *)v65;
      v66 = *(_WORD *)(v65 + 8) & 0x7F;
      v67 = v65 - 48;
      if (v65)
      {
        if (v66 == 21)
        {
          v68 = *(_QWORD *)(*(_QWORD *)(v65 + 40) + 40);
          if ((v68 & 7) != 0)
            v69 = 0;
          else
            v69 = v68 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_155;
        }
      }
      else
      {
        v67 = 0;
      }
      if (v65 && v66 == 22)
      {
        v74 = *(_QWORD *)(v67 + 40);
        if ((v74 & 7) != 0)
          goto LABEL_222;
        v69 = v74 & 0xFFFFFFFFFFFFFFF8;
        if (!v69)
          goto LABEL_222;
LABEL_155:
        v70 = *(unsigned int **)(v69 + 16);
        v73 = *v70;
        v71 = v70 + 4;
        v72 = v73;
        if (v73 <= v127 - (unint64_t)v128)
        {
          if (v72)
          {
            memcpy(v128, v71, v72);
            v128 += v72;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v124, (const char *)v71);
        }
        goto LABEL_222;
      }
      if (v66 == 19)
        v75 = v67;
      else
        v75 = 0;
      if (v65 && v66 == 19)
      {
        v76 = *(_QWORD *)(v75 + 40);
        if (v76 < 8 || (*(_QWORD *)(v75 + 40) & 7) != 0)
        {
          v69 = *(_QWORD *)(*(_QWORD *)(v75 + 104) + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(*(_QWORD *)(v75 + 104) + 40) & 7) == 0 && v69 != 0)
            goto LABEL_155;
LABEL_222:
          v105 = v128;
          if ((unint64_t)v128 >= v127)
          {
            v106 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v124);
          }
          else
          {
            ++v128;
            *v105 = 32;
            v106 = (llvm::raw_ostream *)&v124;
          }
          v121 = *(_QWORD *)(v29 + 40);
          sub_22F1D3A38(&v121, (char *)&__p);
          if (v123 >= 0)
            v107 = (const char *)&__p;
          else
            v107 = (const char *)__p;
          v108 = (llvm::raw_ostream *)llvm::raw_ostream::write(v106, v107);
          v109 = (_BYTE *)*((_QWORD *)v108 + 4);
          if ((unint64_t)v109 >= *((_QWORD *)v108 + 3))
          {
            llvm::raw_ostream::write(v108);
          }
          else
          {
            *((_QWORD *)v108 + 4) = v109 + 1;
            *v109 = 93;
          }
          if (v123 < 0)
            operator delete(__p);
          goto LABEL_246;
        }
        v87 = (const char *)(*(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFF8) + 16) + 16);
        v88 = strlen(v87);
        v89 = (uint64_t *)v128;
        if (v88 <= v127 - (unint64_t)v128)
        {
          if (v88)
          {
            memcpy(v128, v87, v88);
            v89 = (uint64_t *)&v128[v88];
            v128 += v88;
          }
          v86 = &v124;
          v90 = &v128;
        }
        else
        {
          v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)&v124, v87);
          v90 = (char **)(v86 + 4);
          v89 = v86[4];
        }
        if (v89 >= v86[3])
        {
          v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)v86);
        }
        else
        {
          *v90 = (char *)v89 + 1;
          *(_BYTE *)v89 = 40;
        }
        v91 = *(_QWORD *)(v75 + 40);
        if ((v91 & 7) != 0)
          v92 = 0;
        else
          v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        v93 = (const char *)(*(_QWORD *)(v92 + 16) + 16);
        v94 = strlen(v93);
        v95 = v86[4];
        if (v94 <= (char *)v86[3] - (char *)v95)
        {
          if (v94)
          {
            memcpy(v95, v93, v94);
            v95 = (uint64_t *)((char *)v86[4] + v94);
            v86[4] = v95;
          }
        }
        else
        {
          v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)v86, v93);
          v95 = v86[4];
        }
        if (v95 < v86[3])
        {
          v86[4] = (uint64_t *)((char *)v95 + 1);
          *(_BYTE *)v95 = 41;
          goto LABEL_222;
        }
LABEL_221:
        llvm::raw_ostream::write((llvm::raw_ostream *)v86);
        goto LABEL_222;
      }
      if (v66 == 20)
        v79 = v67;
      else
        v79 = 0;
      if (!v65 || v66 != 20)
        goto LABEL_222;
      v80 = *(_QWORD *)(*(_QWORD *)(v79 + 88) + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(*(_QWORD *)(v79 + 88) + 40) & 7) == 0 && v80 != 0)
      {
        v82 = *(_DWORD **)(v80 + 16);
        v85 = *v82;
        v83 = (const char *)(v82 + 4);
        v84 = v85;
        if (v85 > v127 - (unint64_t)v128)
        {
          v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)&v124, v83);
          goto LABEL_210;
        }
        if (v84)
        {
          memcpy(v128, v83, v84);
          v128 += v84;
        }
      }
      v86 = &v124;
LABEL_210:
      v96 = v86[4];
      if (v96 >= v86[3])
      {
        v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)v86);
      }
      else
      {
        v86[4] = (uint64_t *)((char *)v96 + 1);
        *(_BYTE *)v96 = 40;
      }
      v97 = *(_QWORD *)(v79 + 40);
      if ((v97 & 7) == 0)
      {
        v98 = v97 & 0xFFFFFFFFFFFFFFF8;
        if (v98)
        {
          v99 = *(unsigned int **)(v98 + 16);
          v102 = *v99;
          v100 = v99 + 4;
          v101 = v102;
          v103 = v86[4];
          if (v102 <= (unint64_t)((char *)v86[3] - (char *)v103))
          {
            if (v101)
            {
              memcpy(v103, v100, v101);
              v86[4] = (uint64_t *)((char *)v86[4] + v101);
            }
          }
          else
          {
            v86 = (uint64_t **)llvm::raw_ostream::write((llvm::raw_ostream *)v86, (const char *)v100);
          }
        }
      }
      v104 = v86[4];
      if (v104 < v86[3])
      {
        v86[4] = (uint64_t *)((char *)v104 + 1);
        *(_BYTE *)v104 = 41;
        goto LABEL_222;
      }
      goto LABEL_221;
    }
    v25 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 0xDuLL)
    {
      qmemcpy(v25, "Invoking block", 14);
      *((_QWORD *)a2 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(a2, "Invoking block");
    }
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
    if (v26)
    {
      v27 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v27) > 0x10)
      {
        *(_BYTE *)(v27 + 16) = 32;
        *(_OWORD *)v27 = *(_OWORD *)" defined at line ";
        *((_QWORD *)a2 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(a2, " defined at line ");
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
LABEL_260:
      LODWORD(v124) = v28;
      if (v28 < 0 || !sub_22F1E3734(v116, v28))
      {
        sub_22F422CEC((int *)&v124, a2, v116);
      }
      else
      {
        sub_22F423CC4((uint64_t)v116, v28, 0);
        llvm::raw_ostream::operator<<();
      }
    }
LABEL_252:
    v113 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v113 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v113 + 1;
      *v113 = 10;
    }
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
}

void sub_22EEB6CE0(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int j;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  void *v24;
  llvm::raw_ostream *v25;
  void *v26;
  int v27;
  _BYTE *v28;
  _OWORD *v29;
  uint64_t v30;
  void *v31;
  int v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  unint64_t v36;
  const char *p_p;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  int v49;
  _QWORD *v50;
  int v51;
  void *__p;
  char v53;
  unint64_t v54;

  v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v6 || (*(_DWORD *)(v6 + 28) & 0x7F) != 0x53)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v10 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_22;
          }
          v10 = -64;
        }
      }
LABEL_22:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  sub_22E462F04(&v54, *(unsigned int **)(*(_QWORD *)(v6 + 88) + 2000));
  v54 |= 0x40000000uLL;
  v14 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
  if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7F) != 0x53)
  {
    v15 = *(_QWORD *)(v14 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)v16;
    for (j = *(_WORD *)(v16 + 8) & 0x7F; j != 83; j = *(_WORD *)(v16 + 8) & 0x7F)
    {
      v18 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v18 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_44;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_43;
        if (j == 16)
          goto LABEL_37;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_50;
        if (j == 24)
        {
LABEL_37:
          v18 = -48;
        }
        else
        {
LABEL_43:
          if (j != 70)
          {
LABEL_44:
            v19 = j - 52;
            if ((j - 33) >= 5)
              v20 = -48;
            else
              v20 = -64;
            if (v19 >= 6)
              v18 = v20;
            else
              v18 = -72;
            goto LABEL_50;
          }
          v18 = -64;
        }
      }
LABEL_50:
      v21 = *(_QWORD *)(v16 + v18 + 16);
      v16 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
        v16 = *(_QWORD *)v16;
    }
    v14 = v16 - 40;
  }
  v22 = 0;
  v23 = *(_QWORD **)(*(_QWORD *)(v14 + 88) + 1992);
  while (1)
  {
    v24 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v24 >= 0xDuLL)
    {
      qmemcpy(v24, "{ \"lctx_id\": ", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "{ \"lctx_id\": ");
    }
    v25 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v26 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x16uLL)
    {
      qmemcpy(v26, ", \"location_context\": \"", 23);
      *((_QWORD *)v25 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v25, ", \"location_context\": \"");
    }
    v27 = *(_DWORD *)(v5 + 16);
    if (v27 == 1)
    {
      v29 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 0xFuLL)
      {
        *v29 = *(_OWORD *)"Invoking block\" ";
        *((_QWORD *)a2 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(a2, "Invoking block\" ");
      }
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v30)
      {
        v31 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v31 > 0xDuLL)
        {
          qmemcpy(v31, ", \"location\": ", 14);
          *((_QWORD *)a2 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", \"location\": ");
        }
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        sub_22EEB73FC(a2, v32, v23, 1);
        v33 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v33 + 1;
          *v33 = 32;
        }
      }
    }
    else if (!v27)
    {
      v28 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v28 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v28 + 1;
        *v28 = 35;
      }
      v34 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v35 = *((_QWORD *)v34 + 4);
      if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 0x13)
      {
        *(_DWORD *)(v35 + 16) = 572537378;
        *(_OWORD *)v35 = *(_OWORD *)" Call\", \"calling\": \"";
        *((_QWORD *)v34 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(v34, " Call\", \"calling\": \"");
      }
      v36 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
      if (v36 && (*(_DWORD *)(v36 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
      {
        sub_22EFB9E74(v36, &__p);
        if (v53 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        llvm::raw_ostream::write(a2, p_p);
        if (v53 < 0)
          operator delete(__p);
      }
      else
      {
        v38 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v38 > 0xDuLL)
        {
          qmemcpy(v38, "anonymous code", 14);
          *((_QWORD *)a2 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(a2, "anonymous code");
        }
      }
      v39 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 0xEuLL)
      {
        qmemcpy(v39, "\", \"location\": ", 15);
        *((_QWORD *)a2 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\", \"location\": ");
      }
      v40 = *(_QWORD *)(v5 + 48);
      if (v40)
      {
        sub_22F0D5A50(v40);
        sub_22EEB73FC(a2, v41, v23, 1);
      }
      else
      {
        v42 = (_DWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v42 > 3uLL)
        {
          *v42 = 1819047278;
          *((_QWORD *)a2 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(a2, "null");
        }
      }
      ++v22;
      v43 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v43) > 0xA)
      {
        *(_DWORD *)(v43 + 7) = 540680819;
        *(_QWORD *)v43 = *(_QWORD *)", \"items\": ";
        *((_QWORD *)a2 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", \"items\": ");
      }
    }
    __p = (void *)v5;
    v44 = *(_QWORD *)(a3 + 24);
    if (!v44)
      break;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 48))(v44, &__p);
    v45 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v45 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v45 + 1;
      *v45 = 125;
    }
    if (*(_QWORD *)(v5 + 32))
    {
      v46 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v46 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v46 + 1;
        *v46 = 44;
      }
    }
    v47 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v47)
    {
      llvm::raw_ostream::write(a2, "\n");
    }
    else
    {
      *v47 = 10;
      ++*((_QWORD *)a2 + 4);
    }
    v5 = *(_QWORD *)(v5 + 32);
    if (!v5)
      return;
  }
  sub_22E4A06C4();
  sub_22EEB73FC(v48, v49, v50, v51);
}

void sub_22EEB73FC(llvm::raw_ostream *this, int a2, _QWORD *a3, int a4)
{
  llvm::raw_ostream *v5;
  _WORD *v8;
  char *v9;
  size_t v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  const char *v14;
  _WORD *v15;
  void *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  void **v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  _WORD *v28;
  uint64_t v29;
  void *__p[2];
  int64_t v31;
  char *__s;

  v5 = this;
  if (!a2)
  {
    v13 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v13 > 3uLL)
    {
LABEL_42:
      *v13 = 1819047278;
      v29 = *((_QWORD *)v5 + 4) + 4;
LABEL_51:
      *((_QWORD *)v5 + 4) = v29;
      return;
    }
    v14 = "null";
LABEL_19:
    llvm::raw_ostream::write(this, v14);
    return;
  }
  if (a2 < 0)
  {
    v15 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 8315;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "{ ");
    }
    sub_22F1E22F0(a3, a2);
    sub_22EEB73FC(v5);
    v16 = (void *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v16 > 0xDuLL)
    {
      qmemcpy(v16, ", \"spelling\": ", 14);
      *((_QWORD *)v5 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v5, ", \"spelling\": ");
    }
    sub_22F1E238C(a3, a2);
    sub_22EEB73FC(v5);
    v17 = (_WORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v17 > 1uLL)
    {
      *v17 = 32032;
      v29 = *((_QWORD *)v5 + 4) + 2;
      goto LABEL_51;
    }
    v14 = " }";
    this = v5;
    goto LABEL_19;
  }
  sub_22F1E2F68((uint64_t)a3, a2, 1, (uint64_t)&__s);
  if (!__s)
  {
    v13 = (_DWORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v13 <= 3uLL)
    {
      llvm::raw_ostream::write(v5, "null");
      return;
    }
    goto LABEL_42;
  }
  if (a4)
  {
    v8 = (_WORD *)*((_QWORD *)v5 + 4);
    if (*((_QWORD *)v5 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8315;
      *((_QWORD *)v5 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v5, "{ ");
    }
  }
  v9 = __s;
  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v12 = operator new(v18 + 1);
    __p[1] = v11;
    v31 = v19 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_25;
  }
  HIBYTE(v31) = v10;
  v12 = __p;
  if (v10)
LABEL_25:
    memmove(v12, v9, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v20 = (_QWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v20 > 7uLL)
  {
    *v20 = 0x203A22656E696C22;
    *((_QWORD *)v5 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v5, "\"line\": ");
  }
  v21 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0xB)
  {
    *(_DWORD *)(v22 + 8) = 540680814;
    *(_QWORD *)v22 = *(_QWORD *)", \"column\": ";
    *((_QWORD *)v21 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v21, ", \"column\": ");
  }
  v23 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v24 = *((_QWORD *)v23 + 4);
  if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 0xA)
  {
    *(_DWORD *)(v24 + 7) = 572537378;
    *(_QWORD *)v24 = *(_QWORD *)", \"file\": \"";
    *((_QWORD *)v23 + 4) += 11;
  }
  else
  {
    v23 = (llvm::raw_ostream *)llvm::raw_ostream::write(v23, ", \"file\": \"");
  }
  if (v31 >= 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  v26 = (llvm::raw_ostream *)llvm::raw_ostream::write(v23, (const char *)v25);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, "\"");
    if (a4)
      goto LABEL_37;
  }
  else
  {
    *v27 = 34;
    ++*((_QWORD *)v26 + 4);
    if (a4)
    {
LABEL_37:
      v28 = (_WORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v28 > 1uLL)
      {
        *v28 = 32032;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, " }");
      }
    }
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

_QWORD *sub_22EEB783C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = *(_QWORD *)(a1 + 240);
  if (!v3)
  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    *(_QWORD *)(a1 + 240) = v3;
  }
  return sub_22EEB7D58((uint64_t *)v3, &v5) + 1;
}

_QWORD *sub_22EEB789C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v19;
  uint64_t v20;

  v2 = a1[13];
  if (v2)
  {
    llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
    MEMORY[0x2348A0E9C](v2, 0x1020C405AF6BDC9);
  }
  v3 = a1[29];
  if (v3)
  {
    llvm::deallocate_buffer(*(llvm **)v3, (void *)(16 * *(unsigned int *)(v3 + 16)));
    MEMORY[0x2348A0E9C](v3, 0x1020C405AF6BDC9);
  }
  v4 = a1[30];
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 16);
    v6 = *(llvm **)v4;
    if ((_DWORD)v5)
    {
      v7 = (uint64_t *)((char *)v6 + 8);
      v8 = 16 * v5;
      do
      {
        if ((*(v7 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        v7 += 2;
        v8 -= 16;
      }
      while (v8);
      v6 = *(llvm **)v4;
      v10 = (void *)(16 * *(unsigned int *)(v4 + 16));
    }
    else
    {
      v10 = 0;
    }
    llvm::deallocate_buffer(v6, v10);
    MEMORY[0x2348A0E9C](v4, 0x1020C405AF6BDC9);
  }
  sub_22E3B4EF4((uint64_t)(a1 + 17));
  v11 = a1[16];
  a1[16] = 0;
  if (v11)
    sub_22EEB7CA4((uint64_t)(a1 + 16), v11);
  v12 = (uint64_t *)a1[15];
  a1[15] = 0;
  if (v12)
  {
    v19 = sub_22F3EFC78(v12);
    MEMORY[0x2348A0E9C](v19, 0x80C40B8603338);
  }
  v13 = a1[4];
  a1[4] = 0;
  if (v13)
  {
    v20 = sub_22F34D184(v13);
    MEMORY[0x2348A0E9C](v20, 0xA0C40AFF93C70);
  }
  v14 = a1[3];
  a1[3] = 0;
  if (v14)
  {
    llvm::deallocate_buffer(*(llvm **)(v14 + 88), (void *)(16 * *(unsigned int *)(v14 + 104)));
    v15 = *(void **)(v14 + 64);
    if (v15)
    {
      *(_QWORD *)(v14 + 72) = v15;
      operator delete(v15);
    }
    sub_22EEB7ABC((uint64_t *)(v14 + 32));
    MEMORY[0x2348A0E9C](v14, 0x10A0C4073B7F643);
  }
  v16 = a1[2];
  a1[2] = 0;
  if (v16)
  {
    llvm::deallocate_buffer(*(llvm **)(v16 + 88), (void *)(16 * *(unsigned int *)(v16 + 104)));
    v17 = *(void **)(v16 + 64);
    if (v17)
    {
      *(_QWORD *)(v16 + 72) = v17;
      operator delete(v17);
    }
    sub_22EEB7ABC((uint64_t *)(v16 + 32));
    MEMORY[0x2348A0E9C](v16, 0x10A0C4073B7F643);
  }
  return a1;
}

uint64_t *sub_22EEB7ABC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((*a1 & 4) != 0 && (v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v3 = sub_22E3B4EF4(v2 & 0xFFFFFFFFFFFFFFF8);
    MEMORY[0x2348A0E9C](v3, 0x1090C40A49D047FLL);
  }
  return a1;
}

uint64_t sub_22EEB7B04(uint64_t a1)
{
  void *v2;

  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(16 * *(unsigned int *)(a1 + 104)));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_22EEB7ABC((uint64_t *)(a1 + 32));
  return a1;
}

uint64_t sub_22EEB7B50(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v12 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_22EEB7BE4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F34C4F8(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22EEB7CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = *(unsigned int *)(a2 + 88);
    v4 = *(llvm **)(a2 + 72);
    if ((_DWORD)v3)
    {
      v5 = 80 * v3;
      v6 = (char *)v4 + 24;
      do
      {
        if (*((_DWORD *)v6 - 6) <= 0xFFFFFFFD)
        {
          v7 = (char *)*((_QWORD *)v6 - 2);
          if (v6 != v7)
            free(v7);
        }
        v6 += 80;
        v5 -= 80;
      }
      while (v5);
      v4 = *(llvm **)(a2 + 72);
      v8 = 80 * *(unsigned int *)(a2 + 88);
    }
    else
    {
      v8 = 0;
    }
    llvm::deallocate_buffer(v4, (void *)v8);
    if (*(_QWORD *)a2 != a2 + 16)
      free(*(void **)a2);
    JUMPOUT(0x2348A0E9CLL);
  }
}

_QWORD *sub_22EEB7D58(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25B234(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22EEB7DB4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22EEB7DB4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_22EEB7E64(a1, v7);
    v9 = 0;
    sub_22F25B234((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22EEB7E64(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F34C5FC(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EEB7F24(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  int v10;
  uint64_t (*v11)(_QWORD, uint64_t);
  int v12;
  uint64_t v14;
  _QWORD *v15;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v4 = sub_22F251E98(a1 + 1, &v26);
  if (*((_BYTE *)v4 + 16))
    return v4[1];
  result = 0;
  v4[1] = 0;
  *((_BYTE *)v4 + 16) = 1;
  v6 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 40) & 7) == 0 && v6 != 0)
  {
    v8 = *(unsigned int **)(v6 + 16);
    v9 = *v8;
    if (!*v8)
      return 0;
    v10 = sub_22EFC01DC(a2, 0);
    if ((v10 - 1190) < 4)
    {
      v11 = sub_22EEB81CC;
LABEL_10:
      result = v11(*a1, a2);
LABEL_11:
      v12 = *((unsigned __int8 *)v4 + 16);
      v4[1] = result;
      if (!v12)
        *((_BYTE *)v4 + 16) = 1;
      return result;
    }
    if (!v10)
    {
      if (v9 >= 0x16)
      {
        v17 = *((_QWORD *)v8 + 2) == 0x63696D6F7441534FLL
           && *((_QWORD *)v8 + 3) == 0x41657261706D6F43
           && *(_QWORD *)((char *)v8 + 30) == 0x70617753646E4165;
        if (v17
          || v9 >= 0x19
          && (*((_QWORD *)v8 + 2) == 0x6F74615F636A626FLL
            ? (v18 = *((_QWORD *)v8 + 3) == 0x61706D6F4363696DLL)
            : (v18 = 0),
              v18 ? (v19 = *((_QWORD *)v8 + 4) == 0x617753646E416572) : (v19 = 0),
              v19 ? (v20 = *((_BYTE *)v8 + 40) == 112) : (v20 = 0),
              v20))
        {
          v11 = (uint64_t (*)(_QWORD, uint64_t))sub_22EEB841C;
          goto LABEL_10;
        }
      }
      else if ((_DWORD)v9 == 13)
      {
        v21 = 0x6469737061746368;
        v22 = bswap64(*((_QWORD *)v8 + 2));
        if (v22 == 0x6469737061746368
          && (v21 = 0x7463685F73796E63, v22 = bswap64(*(_QWORD *)((char *)v8 + 21)), v22 == 0x7463685F73796E63))
        {
          v23 = 0;
        }
        else if (v22 < v21)
        {
          v23 = -1;
        }
        else
        {
          v23 = 1;
        }
        if (!v23)
        {
          v11 = (uint64_t (*)(_QWORD, uint64_t))sub_22EEB9AEC;
          goto LABEL_10;
        }
        if (*((_QWORD *)v8 + 2) == 0x6863746170736964 && *(_QWORD *)((char *)v8 + 21) == 0x65636E6F5F686374)
        {
          v11 = (uint64_t (*)(_QWORD, uint64_t))sub_22EEB9CEC;
          goto LABEL_10;
        }
      }
      else if ((_DWORD)v9 == 9 && *((_QWORD *)v8 + 2) == 0x636E6F5F6C6C6163 && *((_BYTE *)v8 + 24) == 101)
      {
        v14 = *(_QWORD *)(a2 + 16);
        v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 4) != 0)
          v15 = (_QWORD *)*v15;
        if (sub_22EFC84D4((unint64_t)v15))
        {
          v11 = (uint64_t (*)(_QWORD, uint64_t))sub_22EEB8CC8;
          goto LABEL_10;
        }
      }
    }
    v25 = a1[4];
    if (!v25)
      return v4[1];
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a2);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_22EEB81CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = **(_QWORD **)(a2 + 120);
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || (v10 = *(_DWORD *)(v9 + 16), (v10 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_9;
    v9 = sub_22F10CF48(v9);
    if (!v9)
      goto LABEL_9;
    v10 = *(_DWORD *)(v9 + 16);
  }
  if ((v10 & 0x100000) != 0)
  {
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
      {
        v19 = *(_DWORD *)(v9 + 16);
        if ((v19 & 0xFE) == 0x28)
          continue;
      }
      v9 = sub_22F10CF48(v9);
      v19 = *(_DWORD *)(v9 + 16);
    }
    while ((v19 & 0x100000) != 0);
  }
  v8 = *(_QWORD *)(v9 + 32);
LABEL_9:
  v21 = *(_QWORD *)(v7 + 40);
  v22 = 0;
  sub_22EFC6D6C((uint64_t)&v23, v21);
  v11 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v11, a1, 0, 0, 0, v7, 0, (uint64_t)&v21, 0, 0, v8, 1, 0, 0);
  v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
  {
    v14 = v6;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_12;
    v12 = sub_22F10CF48(v12);
    v14 = v6;
    if (!v12)
      goto LABEL_12;
    v13 = *(_DWORD *)(v12 + 16);
  }
  if ((v13 & 0x100000) != 0)
  {
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v12)
      {
        v20 = *(_DWORD *)(v12 + 16);
        if ((v20 & 0xFE) == 0x28)
          continue;
      }
      v12 = sub_22F10CF48(v12);
      v20 = *(_DWORD *)(v12 + 16);
    }
    while ((v20 & 0x100000) != 0);
  }
  v14 = *(_QWORD *)(v12 + 32);
LABEL_12:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
    v15 = 1;
  else
    v15 = 2;
  v16 = sub_22EF579A8(a1, v6, 0);
  v17 = sub_22E3CD3D4(a1 + 2032, 48, 3);
  sub_22F062704(v17, v14, v15, 5, v11, 0, (uint64_t)v16, 0, 0, 0, 0, 0);
  return sub_22F0D8310(a1, 0, v17, 0);
}

unsigned __int16 *sub_22EEB841C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *result;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  char v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned __int16 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int *v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int *__src;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  result = *(unsigned __int16 **)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v5 = *((_BYTE *)result + 16) == 26;
  else
    v5 = 0;
  if (v5)
    goto LABEL_94;
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = (unsigned __int16 *)sub_22F10CF48((uint64_t)result);
  if (result)
  {
LABEL_94:
    if ((*((_QWORD *)result + 2) & 0x3FFFC000000000) == 0xC000000000)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
        v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
      else
        v7 = 0;
      if (!v7)
        v6 = sub_22F10CF48(v6);
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
      v5 = v10 == 0;
      v11 = *(_DWORD *)(v10 + 16) & 0xFF800FF;
      v12 = !v5 && v11 == 87031819;
      v13 = v12;
      if (v12 || sub_22F110744(v9, a1))
      {
        v14 = *(uint64_t **)(a2 + 120);
        v16 = *v14;
        v15 = v14[1];
        v17 = *(_QWORD *)(*v14 + 48);
        v18 = *(_QWORD *)(v15 + 48);
        v19 = v14[2];
        v20 = *(_QWORD *)(v19 + 48);
        result = *(unsigned __int16 **)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (result && *((_BYTE *)result + 16) == 39)
        {
          v73 = *(_QWORD *)(v15 + 48);
          v74 = v13;
          v75 = v8;
          v21 = *(_QWORD *)(*v14 + 48);
          goto LABEL_26;
        }
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          result = (unsigned __int16 *)sub_22F10CF48((uint64_t)result);
          if (!result)
            return result;
          v73 = v18;
          v74 = v13;
          v75 = v8;
          v21 = *(_QWORD *)(v16 + 48);
LABEL_26:
          v22 = *((_QWORD *)result + 4);
          v76 = a1;
          v23 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
          if (!v23 || (v24 = *(_DWORD *)(v23 + 16), (v24 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              goto LABEL_29;
            v23 = sub_22F10CF48(v23);
            if (!v23)
              goto LABEL_29;
            v24 = *(_DWORD *)(v23 + 16);
          }
          if ((v24 & 0x100000) != 0)
          {
            do
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v23)
              {
                v69 = *(_DWORD *)(v23 + 16);
                if ((v69 & 0xFE) == 0x28)
                  continue;
              }
              v23 = sub_22F10CF48(v23);
              v69 = *(_DWORD *)(v23 + 16);
            }
            while ((v69 & 0x100000) != 0);
          }
          v21 = *(_QWORD *)(v23 + 32);
LABEL_29:
          v77 = *(_QWORD *)(v16 + 40);
          v78 = 0;
          sub_22EFC6D6C((uint64_t)&v79, v77);
          v25 = sub_22E3CD3D4(a1 + 2032, 32, 3);
          sub_22EFF6AE4(v25, a1, 0, 0, 0, v16, 0, (uint64_t)&v77, 0, 0, v21, 1, 0, 0);
          v26 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F003694(v26, v17, 4, v25, 0, 0, 0);
          v27 = *(_QWORD *)(v19 + 48);
          v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
          if (!v28 || (v29 = *(_DWORD *)(v28 + 16), (v29 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              goto LABEL_32;
            v28 = sub_22F10CF48(v28);
            if (!v28)
              goto LABEL_32;
            v29 = *(_DWORD *)(v28 + 16);
          }
          if ((v29 & 0x100000) != 0)
          {
            do
            {
              v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v28)
              {
                v70 = *(_DWORD *)(v28 + 16);
                if ((v70 & 0xFE) == 0x28)
                  continue;
              }
              v28 = sub_22F10CF48(v28);
              v70 = *(_DWORD *)(v28 + 16);
            }
            while ((v70 & 0x100000) != 0);
          }
          v27 = *(_QWORD *)(v28 + 32);
LABEL_32:
          v77 = *(_QWORD *)(v19 + 40);
          v78 = 0;
          sub_22EFC6D6C((uint64_t)&v79, v77);
          v30 = sub_22E3CD3D4(a1 + 2032, 32, 3);
          sub_22EFF6AE4(v30, a1, 0, 0, 0, v19, 0, (uint64_t)&v77, 0, 0, v27, 1, 0, 0);
          v31 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F003694(v31, v20, 4, v30, 0, 0, 0);
          v32 = sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F0031D0(v32, a1, (uint64_t)v31, 5, v22, 1, 0, 0, 0, 0);
          v33 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F003694(v33, v22, 4, v32, 0, 0, 0);
          if ((**(_QWORD **)(a1 + 2000) & 0x100) != 0)
            v34 = (uint64_t *)(a1 + 16400);
          else
            v34 = (uint64_t *)(a1 + 16480);
          v35 = *v34;
          v72 = (int *)sub_22E3CD3D4(a1 + 2032, 32, 3);
          sub_22F002E24(v72, v36, v26, v33, 14, v35, 0, 0, 0, 0);
          v81 = 0;
          v37 = *(_QWORD *)(v19 + 48);
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
          if (!v38 || (v39 = *(_DWORD *)(v38 + 16), (v39 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              goto LABEL_38;
            v38 = sub_22F10CF48(v38);
            if (!v38)
              goto LABEL_38;
            v39 = *(_DWORD *)(v38 + 16);
          }
          if ((v39 & 0x100000) != 0)
          {
            do
            {
              v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v38)
              {
                v71 = *(_DWORD *)(v38 + 16);
                if ((v71 & 0xFE) == 0x28)
                  continue;
              }
              v38 = sub_22F10CF48(v38);
              v71 = *(_DWORD *)(v38 + 16);
            }
            while ((v71 & 0x100000) != 0);
          }
          v37 = *(_QWORD *)(v38 + 32);
LABEL_38:
          v77 = *(_QWORD *)(v19 + 40);
          v78 = 0;
          sub_22EFC6D6C((uint64_t)&v79, v77);
          v40 = sub_22E3CD3D4(a1 + 2032, 32, 3);
          sub_22EFF6AE4(v40, a1, 0, 0, 0, v19, 0, (uint64_t)&v77, 0, 0, v37, 1, 0, 0);
          v41 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F003694(v41, v20, 4, v40, 0, 0, 0);
          v42 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
          sub_22F0031D0((uint64_t)v42, a1, (uint64_t)v41, 5, v22, 1, 0, 0, 0, 0);
          v43 = *(_QWORD *)(v15 + 48);
          v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
          if (v44 && (v45 = *(_DWORD *)(v44 + 16), (v45 & 0xFE) == 0x28))
          {
            v46 = v75;
            v47 = v74;
            v48 = v73;
            if ((v45 & 0x100000) != 0)
            {
              do
              {
LABEL_68:
                v44 = *(_QWORD *)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v44)
                {
                  v68 = *(_DWORD *)(v44 + 16);
                  if ((v68 & 0xFE) == 0x28)
                    continue;
                }
                v44 = sub_22F10CF48(v44);
                v68 = *(_DWORD *)(v44 + 16);
              }
              while ((v68 & 0x100000) != 0);
            }
          }
          else
          {
            v46 = v75;
            v47 = v74;
            v48 = v73;
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
              || (v44 = sub_22F10CF48(v44)) == 0)
            {
LABEL_41:
              v77 = *(_QWORD *)(v15 + 40);
              v78 = 0;
              sub_22EFC6D6C((uint64_t)&v79, v77);
              v49 = sub_22E3CD3D4(a1 + 2032, 32, 3);
              sub_22EFF6AE4(v49, a1, 0, 0, 0, v15, 0, (uint64_t)&v77, 0, 0, v43, 1, 0, 0);
              v50 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
              sub_22F003694(v50, v48, 4, v49, 0, 0, 0);
              v51 = (int *)sub_22E3CD3D4(a1 + 2032, 32, 3);
              __src = sub_22F002E24(v51, v52, v42, v50, 21, v48, 0, 0, 0, 0);
              v53 = sub_22EEBAC18(&v76, 1);
              v54 = (unsigned int *)v53;
              if (v47)
              {
                v55 = *(_QWORD *)(a1 + 16400);
                v56 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
                v57 = v55;
                v58 = 31;
              }
              else
              {
                if (*(_QWORD *)(v53 + 8) == v46)
                  goto LABEL_46;
                v56 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
                v57 = v46;
                v58 = 30;
              }
              v54 = sub_22F003694(v56, v57, v58, (uint64_t)v54, 0, 0, 0);
LABEL_46:
              v81 = sub_22F0D8310(a1, 0, (uint64_t)v54, 0);
              v59 = (unsigned __int8 *)sub_22E3CD3D4(a1 + 2032, 32, 3);
              sub_22F0D6590(v59, &__src, 2, 0, 0);
              v60 = sub_22EEBAC18(&v76, 0);
              v61 = (unsigned int *)v60;
              if (v47)
              {
                v62 = *(_QWORD *)(a1 + 16400);
                v63 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
                v64 = v62;
                v65 = 31;
              }
              else
              {
                if (*(_QWORD *)(v60 + 8) == v46)
                {
LABEL_51:
                  v66 = sub_22F0D8310(a1, 0, (uint64_t)v61, 0);
                  v67 = (unsigned __int16 *)sub_22E3CD3D4(a1 + 2032, 44, 3);
                  return sub_22F0D7DA4(v67, a1, 0, 0, 0, 0, (uint64_t)v72, 0, 0, (uint64_t)v59, 0, v66);
                }
                v63 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
                v64 = v46;
                v65 = 30;
              }
              v61 = sub_22F003694(v63, v64, v65, (uint64_t)v61, 0, 0, 0);
              goto LABEL_51;
            }
            if ((*(_DWORD *)(v44 + 16) & 0x100000) != 0)
              goto LABEL_68;
          }
          v43 = *(_QWORD *)(v44 + 32);
          goto LABEL_41;
        }
      }
    }
    return 0;
  }
  return result;
}

unsigned __int16 *sub_22EEB8CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  llvm::raw_ostream *v14;
  void *v15;
  const char *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t i;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  int *v101;
  uint64_t v102;
  int *v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[40];
  uint64_t __src;
  int *v120;
  _QWORD v121[3];

  v121[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    v4 = sub_22F10CF48(v4);
    if (!v4)
      return 0;
  }
  if ((*(_DWORD *)(v4 + 20) & 0x3FFF80) == 0)
    return 0;
  v115 = a1;
  v6 = *(uint64_t **)(a2 + 120);
  v7 = v6[1];
  v8 = (uint64_t *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v8;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v14 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v9);
    v15 = (void *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 <= 0x31uLL)
    {
      v16 = "libcxx03 std::call_once implementation, skipping.\n";
LABEL_20:
      llvm::raw_ostream::write(v14, v16);
      return 0;
    }
    v22 = 0;
    qmemcpy(v15, "libcxx03 std::call_once implementation, skipping.\n", 50);
    v64 = *((_QWORD *)v14 + 4) + 50;
LABEL_119:
    *((_QWORD *)v14 + 4) = v64;
    return v22;
  }
  v10 = *v6;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) != 0x28)
  {
    v14 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v9);
    v17 = (void *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v17 <= 0x30uLL)
    {
      v16 = "unknown std::call_once implementation, skipping.\n";
      goto LABEL_20;
    }
    v22 = 0;
    qmemcpy(v17, "unknown std::call_once implementation, skipping.\n", 49);
    v64 = *((_QWORD *)v14 + 4) + 49;
    goto LABEL_119;
  }
  v11 = *(_DWORD *)(v9 + 16);
  if ((v11 & 0xFE) != 0x28)
  {
    v9 = sub_22F10CF48(v9);
    if (!v9)
      goto LABEL_14;
    v11 = *(_DWORD *)(v9 + 16);
  }
  if ((v11 & 0x100000) != 0)
  {
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
      {
        v105 = *(_DWORD *)(v9 + 16);
        if ((v105 & 0xFE) == 0x28)
          continue;
      }
      v9 = sub_22F10CF48(v9);
      v105 = *(_DWORD *)(v9 + 16);
    }
    while ((v105 & 0x100000) != 0);
  }
  v8 = (uint64_t *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_14:
  v12 = sub_22F10C2A4(*v8);
  if (v12)
  {
    if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
      v13 = 0;
    else
      v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v18 = (uint64_t *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v18;
  if (!*v18 || (v20 = *(_DWORD *)(v19 + 16), (v20 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_27;
    v19 = sub_22F10CF48(v19);
    if (!v19)
      goto LABEL_27;
    v20 = *(_DWORD *)(v19 + 16);
  }
  if ((v20 & 0x100000) != 0)
  {
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
      {
        v106 = *(_DWORD *)(v19 + 16);
        if ((v106 & 0xFE) == 0x28)
          continue;
      }
      v19 = sub_22F10CF48(v19);
      v106 = *(_DWORD *)(v19 + 16);
    }
    while ((v106 & 0x100000) != 0);
  }
  v18 = (uint64_t *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_27:
  v21 = sub_22F10C2A4(*v18);
  if (!v21)
    return 0;
  v24 = v21;
  if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 34 > 3)
    return 0;
  v25 = sub_22EEBACCC(a1, v21, "__state_", 8uLL);
  if (!v25)
  {
    v25 = sub_22EEBACCC(a1, v24, "_M_once", 7uLL);
    if (!v25)
      return 0;
  }
  if (v13)
  {
    v26 = *(_QWORD *)(v13 + 128);
    if (v26 && ((*(unsigned __int16 *)(v26 + 8) | (*(unsigned __int8 *)(v26 + 10) << 16)) & 0x100000) != 0)
    {
      v111 = v25;
      v116 = v118;
      v117 = 0x500000000;
      v27 = sub_22EEBAAFC(&v115, v7);
      v28 = v117;
      if (v117 >= HIDWORD(v117))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v117;
      }
      *((_QWORD *)v116 + v28) = v27;
      LODWORD(v117) = v117 + 1;
      v29 = sub_22EFD462C(v13);
      if ((*(_DWORD *)(v29 + 28) & 0x7F) == 0x1D)
        v29 = *(_QWORD *)(v29 + 48);
      v30 = (uint64_t *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_43;
    }
    return 0;
  }
  v111 = v25;
  v116 = v118;
  v117 = 0x500000000;
  v31 = sub_22F10ACF8(*v8);
  v32 = *v8;
  if (v31 >= 0x10)
  {
    v30 = (uint64_t *)(sub_22F10ACF8(*v8) & 0xFFFFFFFFFFFFFFF0);
LABEL_43:
    v32 = *v30;
  }
  if (!v32 || *(_BYTE *)(v32 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
      || (v33 = sub_22F10CF48(v32)) == 0)
    {
LABEL_190:
      v22 = 0;
      goto LABEL_191;
    }
    v32 = v33;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v34 || *(_BYTE *)(v34 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_190;
    v34 = sub_22F10CF48(v34);
    if (!v34)
      goto LABEL_190;
  }
  if ((unsigned __int16)(*(_QWORD *)(v32 + 16) >> 38) + 2 != (unsigned __int16)(*(_QWORD *)(v34 + 16) >> 38))
    goto LABEL_190;
  v110 = v10;
  v35 = v32 + 40;
  v112 = v13;
  v113 = v32 + 40;
  v114 = a1 + 2032;
  for (i = 2; ; ++i)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v38 = v37 && *(_BYTE *)(v37 + 16) == 26;
    if (v38
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v37 = sub_22F10CF48(v37)) != 0)
    {
      v39 = (unsigned __int16)(*(_QWORD *)(v37 + 16) >> 38);
    }
    else
    {
      v39 = 0;
    }
    if (i >= v39)
      break;
    v40 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * i);
    v41 = *(_QWORD *)(v35 + 8 * (i - 2));
    v42 = v41 & 0xFFFFFFFFFFFFFFF0;
    v43 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
    if (!v43 || (v44 = *(_DWORD *)(v43 + 16), (v44 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_63;
      v43 = sub_22F10CF48(v43);
      if (!v43)
        goto LABEL_63;
      v44 = *(_DWORD *)(v43 + 16);
    }
    if ((v44 & 0x100000) != 0)
    {
      do
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v43)
        {
          v61 = *(_DWORD *)(v43 + 16);
          if ((v61 & 0xFE) == 0x28)
            continue;
        }
        v43 = sub_22F10CF48(v43);
        v61 = *(_DWORD *)(v43 + 16);
      }
      while ((v61 & 0x100000) != 0);
    }
    v41 = *(_QWORD *)(v43 + 32);
    v42 = v41 & 0xFFFFFFFFFFFFFFF0;
LABEL_63:
    v45 = *(_QWORD *)(v42 + 8);
    v46 = *(_QWORD *)(v40 + 48);
    v47 = v46 & 0xFFFFFFFFFFFFFFF0;
    v48 = *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0);
    if (!v48 || (v49 = *(_DWORD *)(v48 + 16), (v49 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_66;
      v48 = sub_22F10CF48(v48);
      if (!v48)
        goto LABEL_66;
      v49 = *(_DWORD *)(v48 + 16);
    }
    if ((v49 & 0x100000) != 0)
    {
      do
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v48)
        {
          v62 = *(_DWORD *)(v48 + 16);
          if ((v62 & 0xFE) == 0x28)
            continue;
        }
        v48 = sub_22F10CF48(v48);
        v62 = *(_DWORD *)(v48 + 16);
      }
      while ((v62 & 0x100000) != 0);
    }
    v46 = *(_QWORD *)(v48 + 32);
    v47 = v46 & 0xFFFFFFFFFFFFFFF0;
LABEL_66:
    if ((v41 & 7 | v45) != (v46 & 7 | *(_QWORD *)(v47 + 8)))
      goto LABEL_190;
    v50 = *(_QWORD *)(v40 + 48);
    v51 = *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0);
    if (v51)
    {
      v52 = *(_DWORD *)(v51 + 16);
      if ((v52 & 0xFE) == 0x28)
      {
        v35 = v113;
        v53 = a1 + 2032;
        if ((v52 & 0x100000) == 0)
        {
LABEL_79:
          v50 = *(_QWORD *)(v51 + 32);
          goto LABEL_70;
        }
        do
        {
LABEL_90:
          v51 = *(_QWORD *)(*(_QWORD *)(v51 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v51 || (v60 = *(_DWORD *)(v51 + 16), (v60 & 0xFE) != 0x28))
          {
            v51 = sub_22F10CF48(v51);
            v60 = *(_DWORD *)(v51 + 16);
          }
          v53 = a1 + 2032;
        }
        while ((v60 & 0x100000) != 0);
        goto LABEL_79;
      }
    }
    v35 = v113;
    v53 = a1 + 2032;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v51 = sub_22F10CF48(v51);
      if (v51)
      {
        if ((*(_DWORD *)(v51 + 16) & 0x100000) == 0)
          goto LABEL_79;
        goto LABEL_90;
      }
    }
LABEL_70:
    __src = *(_QWORD *)(v40 + 40);
    LODWORD(v120) = 0;
    sub_22EFC6D6C((uint64_t)v121, __src);
    v54 = sub_22E3CD3D4(v53, 32, 3);
    sub_22EFF6AE4(v54, a1, 0, 0, 0, v40, 0, (uint64_t)&__src, 0, 0, v50, 1, 0, 0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8 * (i - 2)) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
      goto LABEL_75;
    v55 = *(_QWORD *)(v40 + 48);
    v56 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0);
    if (v56)
    {
      v57 = *(_DWORD *)(v56 + 16);
      if ((v57 & 0xFE) == 0x28)
        goto LABEL_97;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v56 = sub_22F10CF48(v56);
      if (v56)
      {
        v57 = *(_DWORD *)(v56 + 16);
LABEL_97:
        if ((v57 & 0x100000) != 0)
        {
          do
          {
            v56 = *(_QWORD *)(*(_QWORD *)(v56 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v56 || (v63 = *(_DWORD *)(v56 + 16), (v63 & 0xFE) != 0x28))
            {
              v56 = sub_22F10CF48(v56);
              v63 = *(_DWORD *)(v56 + 16);
            }
            v53 = a1 + 2032;
          }
          while ((v63 & 0x100000) != 0);
        }
        v55 = *(_QWORD *)(v56 + 32);
      }
    }
    v58 = (unsigned int *)sub_22E3CD3D4(v53, 24, 3);
    v54 = (uint64_t)sub_22F003694(v58, v55, 4, v54, 0, 0, 0);
LABEL_75:
    v59 = v117;
    v13 = v112;
    if (v117 >= (unint64_t)HIDWORD(v117))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v59 = v117;
    }
    *((_QWORD *)v116 + v59) = v54;
    LODWORD(v117) = v117 + 1;
  }
  v65 = v116;
  v66 = v117;
  if (!v13)
  {
    v74 = *(_QWORD *)(v7 + 48);
    v75 = v74 & 0xFFFFFFFFFFFFFFF0;
    v76 = *(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0);
    v69 = v110;
    if (!v76 || (v77 = *(_DWORD *)(v76 + 16), (v77 & 0xFE) != 0x28))
    {
      v78 = *(_QWORD *)(v7 + 48);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_128;
      v76 = sub_22F10CF48(v76);
      v78 = v74;
      if (!v76)
        goto LABEL_128;
      v77 = *(_DWORD *)(v76 + 16);
    }
    if ((v77 & 0x100000) != 0)
    {
      do
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v76 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v76)
        {
          v107 = *(_DWORD *)(v76 + 16);
          if ((v107 & 0xFE) == 0x28)
            continue;
        }
        v76 = sub_22F10CF48(v76);
        v107 = *(_DWORD *)(v76 + 16);
      }
      while ((v107 & 0x100000) != 0);
    }
    v78 = *(_QWORD *)(v76 + 32);
    v69 = v110;
LABEL_128:
    __src = *(_QWORD *)(v7 + 40);
    LODWORD(v120) = 0;
    sub_22EFC6D6C((uint64_t)v121, __src);
    v79 = sub_22E3CD3D4(v114, 32, 3);
    sub_22EFF6AE4(v79, a1, 0, 0, 0, v7, 0, (uint64_t)&__src, 0, 0, v78, 1, 0, 0);
    v80 = *(_QWORD *)v75;
    v81 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v75 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v81 != 40)
    {
      if (v81 == 41)
      {
        v82 = *(_DWORD *)(v80 + 16);
        if ((v82 & 0xFE) != 0x28)
        {
          v83 = a1 + 2032;
          if ((v81 & 0xFE) != 0x28 || (v80 = sub_22F10CF48(v80)) == 0)
          {
LABEL_132:
            v84 = (unsigned int *)sub_22E3CD3D4(v83, 24, 3);
            v85 = v74;
            v86 = 4;
LABEL_137:
            v79 = (uint64_t)sub_22F003694(v84, v85, v86, v79, 0, 0, 0);
LABEL_140:
            v73 = (uint64_t)sub_22EFFA488(a1, v79, (uint64_t)v65, v66, *(_QWORD *)(a1 + 16392), 0, 0, 0, 0, 0);
            v71 = a1 + 2032;
            goto LABEL_141;
          }
          v82 = *(_DWORD *)(v80 + 16);
        }
        if ((v82 & 0x100000) != 0)
        {
          do
          {
            v80 = *(_QWORD *)(*(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v80)
            {
              v108 = *(_DWORD *)(v80 + 16);
              if ((v108 & 0xFE) == 0x28)
                continue;
            }
            v80 = sub_22F10CF48(v80);
            v108 = *(_DWORD *)(v80 + 16);
          }
          while ((v108 & 0x100000) != 0);
        }
        v74 = *(_QWORD *)(v80 + 32);
        v69 = v110;
        v83 = a1 + 2032;
        goto LABEL_132;
      }
      v87 = *(_QWORD *)(*(_QWORD *)(v79 + 8) & 0xFFFFFFFFFFFFFFF0);
LABEL_139:
      sub_22F10ACF8(v87);
      goto LABEL_140;
    }
    v87 = *(_QWORD *)(*(_QWORD *)(v79 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
      goto LABEL_139;
    v88 = *(_DWORD *)(v80 + 16);
    if ((v88 & 0xFE) != 0x28)
    {
      v89 = a1 + 2032;
      if ((v81 & 0xFE) != 0x28 || (v80 = sub_22F10CF48(v80)) == 0)
      {
LABEL_136:
        v90 = sub_22EF5B848(a1, v74, 0);
        v84 = (unsigned int *)sub_22E3CD3D4(v89, 24, 3);
        v85 = v90;
        v86 = 13;
        goto LABEL_137;
      }
      v88 = *(_DWORD *)(v80 + 16);
    }
    if ((v88 & 0x100000) != 0)
    {
      do
      {
        v80 = *(_QWORD *)(*(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v80)
        {
          v109 = *(_DWORD *)(v80 + 16);
          if ((v109 & 0xFE) == 0x28)
            continue;
        }
        v80 = sub_22F10CF48(v80);
        v109 = *(_DWORD *)(v80 + 16);
      }
      while ((v109 & 0x100000) != 0);
    }
    v74 = *(_QWORD *)(v80 + 32);
    v69 = v110;
    v89 = a1 + 2032;
    goto LABEL_136;
  }
  v67 = sub_22EFD462C(v13);
  v68 = v67;
  v69 = v110;
  if (v67 && (*(_DWORD *)(v67 + 28) & 0x7F) == 0x1D)
    v68 = *(_QWORD *)(v67 + 48);
  v70 = *(_QWORD *)(v68 + 48);
  __src = *(_QWORD *)(v68 + 40);
  LODWORD(v120) = 0;
  sub_22EFC6D6C((uint64_t)v121, __src);
  v71 = a1 + 2032;
  v72 = sub_22E3CD3D4(v114, 32, 3);
  sub_22EFF6AE4(v72, a1, 0, 0, 0, v68, 0, (uint64_t)&__src, 0, 0, v70, 1, 0, 0);
  v73 = sub_22F060CD4(a1, 42, v72, (uint64_t)v65, v66, *(_QWORD *)(a1 + 16392), 0, 0, 0, 0);
LABEL_141:
  v91 = sub_22EEBAAFC(&v115, v69);
  __src = *(_QWORD *)(v111 + 40);
  LODWORD(v120) = 0;
  sub_22EFC6D6C((uint64_t)v121, __src);
  v92 = sub_22EFFAF50(a1, v91, 0, 0, 0, 0, 0, v111, v111, (uint64_t)&__src, 0, *(_QWORD *)(v111 + 48), 1, 0, 0, 0, 0);
  v93 = *(_QWORD *)(v92 + 8);
  v94 = (unsigned int *)sub_22E3CD3D4(v71, 24, 3);
  sub_22F003694(v94, v93, 4, v92, 0, 0, 0);
  v95 = (unsigned int *)sub_22E3CD3D4(v71, 24, 3);
  sub_22F003694(v95, v93, 31, (uint64_t)v94, 0, 0, 0);
  v96 = *(_QWORD *)(a1 + 16480);
  v97 = sub_22E3CD3D4(v71, 24, 3);
  sub_22F0031D0(v97, a1, (uint64_t)v95, 9, v96, 0, 0, 0, 0, 0);
  v98 = sub_22EEBAE84(&v115, 1, *(_QWORD *)(a1 + 16480));
  v99 = v115;
  if (*(_QWORD *)(v98 + 8) != v93)
  {
    v100 = (unsigned int *)sub_22E3CD3D4(v115 + 2032, 24, 3);
    v98 = (uint64_t)sub_22F003694(v100, v93, 30, v98, 0, 0, 0);
  }
  v101 = (int *)sub_22E3CD3D4(v99 + 2032, 32, 3);
  v103 = sub_22F002E24(v101, v102, (_DWORD *)v92, (_DWORD *)v98, 21, v93, 0, 0, 0, 0);
  __src = v73;
  v120 = v103;
  v104 = (unsigned __int8 *)sub_22E3CD3D4(v99 + 2032, 32, 3);
  sub_22F0D6590(v104, &__src, 2, 0, 0);
  v22 = (unsigned __int16 *)sub_22E3CD3D4(v114, 32, 3);
  sub_22F0D7DA4(v22, a1, 0, 0, 0, 0, v97, 0, 0, (uint64_t)v104, 0, 0);
LABEL_191:
  if (v116 != v118)
    free(v116);
  return v22;
}

unsigned int *sub_22EEB9AEC(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  result = *(unsigned int **)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v5 = *((_BYTE *)result + 16) == 26;
  else
    v5 = 0;
  if (v5)
    goto LABEL_27;
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = (unsigned int *)sub_22F10CF48((uint64_t)result);
  if (result)
  {
LABEL_27:
    if ((*((_QWORD *)result + 2) & 0x3FFFC000000000) == 0x8000000000)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8);
      v7 = *(_QWORD *)(v6 + 48);
      if (sub_22EEBAF5C(v7))
      {
        v8 = *(_QWORD *)(v6 + 48);
        v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
        if (!v9 || (v10 = *(_DWORD *)(v9 + 16), (v10 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v9 = sub_22F10CF48(v9)) == 0)
          {
LABEL_11:
            v18 = *(_QWORD *)(v6 + 40);
            v19 = 0;
            sub_22EFC6D6C((uint64_t)&v20, v18);
            v11 = a1 + 2032;
            v12 = sub_22E3CD3D4(a1 + 2032, 32, 3);
            sub_22EFF6AE4(v12, a1, 0, 0, 0, v6, 0, (uint64_t)&v18, 0, 0, v8, 1, 0, 0);
            v13 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
            sub_22F003694(v13, v7, 4, v12, 0, 0, 0);
            v14 = *(_QWORD *)(a1 + 16392);
            v15 = (unsigned int *)sub_22E3CD3D4(v11, 32, 3);
            return sub_22EFFA1EC(v15, 138, (uint64_t)v13, 0, 0, 0, 0, v14, 0, v17, 0, 0, 0, 0);
          }
          v10 = *(_DWORD *)(v9 + 16);
        }
        if ((v10 & 0x100000) != 0)
        {
          do
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v9)
            {
              v16 = *(_DWORD *)(v9 + 16);
              if ((v16 & 0xFE) == 0x28)
                continue;
            }
            v9 = sub_22F10CF48(v9);
            v16 = *(_DWORD *)(v9 + 16);
          }
          while ((v16 & 0x100000) != 0);
        }
        v8 = *(_QWORD *)(v9 + 32);
        goto LABEL_11;
      }
    }
    return 0;
  }
  return result;
}

unsigned __int16 *sub_22EEB9CEC(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  _DWORD *v32;
  unsigned int *v33;
  int *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD __src[3];

  __src[2] = *MEMORY[0x24BDAC8D0];
  result = *(unsigned __int16 **)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v5 = *((_BYTE *)result + 16) == 26;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = (unsigned __int16 *)sub_22F10CF48((uint64_t)result);
    if (!result)
      return result;
  }
  if ((*((_QWORD *)result + 2) & 0x3FFFC000000000) != 0x8000000000)
    return 0;
  v6 = **(_QWORD **)(a2 + 120);
  v7 = *(_QWORD *)(v6 + 48);
  result = *(unsigned __int16 **)(v7 & 0xFFFFFFFFFFFFFFF0);
  if (!result || *((_BYTE *)result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    result = (unsigned __int16 *)sub_22F10CF48((uint64_t)result);
    if (!result)
      return result;
  }
  v8 = *((_QWORD *)result + 4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (!v11)
  {
    if (v9 && v10 == 44)
    {
      v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
      if ((*(_BYTE *)(v12 + 74) & 1) == 0 && *(_QWORD *)(v12 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 76) & 0x80) != 0)
      {
        return 0;
      }
      goto LABEL_24;
    }
    if (v10 == 9)
      goto LABEL_24;
    return 0;
  }
  if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
    return 0;
LABEL_24:
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8);
  if (!sub_22EEBAF5C(*(_QWORD *)(v13 + 48)))
    return 0;
  v54 = a1;
  v14 = *(_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (!v15 || (v16 = *(_DWORD *)(v15 + 16), (v16 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_28;
    v15 = sub_22F10CF48(v15);
    if (!v15)
      goto LABEL_28;
    v16 = *(_DWORD *)(v15 + 16);
  }
  if ((v16 & 0x100000) != 0)
  {
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v15)
      {
        v49 = *(_DWORD *)(v15 + 16);
        if ((v49 & 0xFE) == 0x28)
          continue;
      }
      v15 = sub_22F10CF48(v15);
      v49 = *(_DWORD *)(v15 + 16);
    }
    while ((v49 & 0x100000) != 0);
  }
  v14 = *(_QWORD *)(v15 + 32);
LABEL_28:
  v17 = *(_QWORD *)(v13 + 48);
  v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  if (!v18 || (v19 = *(_DWORD *)(v18 + 16), (v19 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_31;
    v18 = sub_22F10CF48(v18);
    if (!v18)
      goto LABEL_31;
    v19 = *(_DWORD *)(v18 + 16);
  }
  if ((v19 & 0x100000) != 0)
  {
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v18)
      {
        v50 = *(_DWORD *)(v18 + 16);
        if ((v50 & 0xFE) == 0x28)
          continue;
      }
      v18 = sub_22F10CF48(v18);
      v50 = *(_DWORD *)(v18 + 16);
    }
    while ((v50 & 0x100000) != 0);
  }
  v17 = *(_QWORD *)(v18 + 32);
LABEL_31:
  v55 = *(_QWORD *)(v13 + 40);
  v56 = 0;
  sub_22EFC6D6C((uint64_t)&v57, v55);
  v20 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v20, a1, 0, 0, 0, v13, 0, (uint64_t)&v55, 0, 0, v17, 1, 0, 0);
  v21 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F003694(v21, v14, 4, v20, 0, 0, 0);
  v22 = *(_QWORD *)(a1 + 16392);
  v23 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFFA1EC(v23, 138, (uint64_t)v21, 0, 0, 0, 0, v22, 0, v53, 0, 0, 0, 0);
  v24 = sub_22EEBAE84(&v54, 0, *(_QWORD *)(a1 + 16488));
  v25 = *(_QWORD *)(a1 + 16488);
  v26 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F0031D0(v26, a1, v24, 8, v25, 0, 0, 0, 0, 0);
  v27 = *(_QWORD *)(v6 + 48);
  v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
  if (!v28 || (v29 = *(_DWORD *)(v28 + 16), (v29 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_34;
    v28 = sub_22F10CF48(v28);
    if (!v28)
      goto LABEL_34;
    v29 = *(_DWORD *)(v28 + 16);
  }
  if ((v29 & 0x100000) != 0)
  {
    do
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v28)
      {
        v51 = *(_DWORD *)(v28 + 16);
        if ((v51 & 0xFE) == 0x28)
          continue;
      }
      v28 = sub_22F10CF48(v28);
      v51 = *(_DWORD *)(v28 + 16);
    }
    while ((v51 & 0x100000) != 0);
  }
  v27 = *(_QWORD *)(v28 + 32);
LABEL_34:
  v55 = *(_QWORD *)(v6 + 40);
  v56 = 0;
  sub_22EFC6D6C((uint64_t)&v57, v55);
  v30 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v30, a1, 0, 0, 0, v6, 0, (uint64_t)&v55, 0, 0, v27, 1, 0, 0);
  v31 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F003694(v31, v7, 4, v30, 0, 0, 0);
  v32 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F0031D0((uint64_t)v32, a1, (uint64_t)v31, 5, v8, 1, 0, 0, 0, 0);
  v33 = (unsigned int *)v26;
  if (*(_QWORD *)(v26 + 8) != v8)
  {
    v33 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
    sub_22F003694(v33, v8, 30, v26, 0, 0, 0);
  }
  v34 = (int *)sub_22E3CD3D4(a1 + 2032, 32, 3);
  __src[0] = sub_22F002E24(v34, v35, v32, v33, 21, v8, 0, 0, 0, 0);
  __src[1] = v23;
  v36 = (unsigned __int8 *)sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22F0D6590(v36, __src, 2, 0, 0);
  v37 = *(_QWORD *)(v6 + 48);
  v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
  if (v38)
  {
    v39 = *(_DWORD *)(v38 + 16);
    if ((v39 & 0xFE) == 0x28)
      goto LABEL_57;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v38 = sub_22F10CF48(v38);
    if (v38)
    {
      v39 = *(_DWORD *)(v38 + 16);
LABEL_57:
      if ((v39 & 0x100000) != 0)
      {
        do
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v38)
          {
            v52 = *(_DWORD *)(v38 + 16);
            if ((v52 & 0xFE) == 0x28)
              continue;
          }
          v38 = sub_22F10CF48(v38);
          v52 = *(_DWORD *)(v38 + 16);
        }
        while ((v52 & 0x100000) != 0);
      }
      v37 = *(_QWORD *)(v38 + 32);
    }
  }
  v55 = *(_QWORD *)(v6 + 40);
  v56 = 0;
  sub_22EFC6D6C((uint64_t)&v57, v55);
  v40 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22EFF6AE4(v40, a1, 0, 0, 0, v6, 0, (uint64_t)&v55, 0, 0, v37, 1, 0, 0);
  v41 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F003694(v41, v7, 4, v40, 0, 0, 0);
  v42 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F0031D0(v42, a1, (uint64_t)v41, 5, v8, 1, 0, 0, 0, 0);
  v43 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 24, 3);
  sub_22F003694(v43, v8, 4, v42, 0, 0, 0);
  if ((**(_QWORD **)(a1 + 2000) & 0x100) != 0)
    v44 = (uint64_t *)(a1 + 16400);
  else
    v44 = (uint64_t *)(a1 + 16480);
  v45 = *v44;
  v46 = (int *)sub_22E3CD3D4(a1 + 2032, 32, 3);
  sub_22F002E24(v46, v47, v43, (_DWORD *)v26, 15, v45, 0, 0, 0, 0);
  v48 = (unsigned __int16 *)sub_22E3CD3D4(a1 + 2032, 32, 3);
  return sub_22F0D7DA4(v48, a1, 0, 0, 0, 0, (uint64_t)v46, 0, 0, (uint64_t)v36, 0, 0);
}

uint64_t sub_22EEBA4BC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;

  if ((a2[58] & 8) == 0)
    return 0;
  v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_BYTE *)(v3 + 29) & 2) == 0)
    return 0;
  v5 = v3;
  v67 = v3;
  v6 = sub_22F251E98(a1 + 1, &v67);
  v7 = v6;
  if (*((_BYTE *)v6 + 16))
    return v6[1];
  result = 0;
  v7[1] = 0;
  *((_BYTE *)v7 + 16) = 1;
  if (!*(_DWORD *)(v5 + 104))
  {
    v8 = sub_22EFDC9F0(v5);
    v9 = *(_WORD *)(v5 + 56) & 0x7F;
    v10 = -40;
    if (v9 > 0x46)
    {
      if (v9 == 83)
        goto LABEL_24;
      if (v9 == 71)
      {
        v10 = -56;
        goto LABEL_24;
      }
      if (v9 != 81)
      {
LABEL_19:
        v11 = v9 - 52;
        v12 = v9 - 33 >= 5;
        v13 = -48;
        if (!v12)
          v13 = -64;
        if (v11 >= 6)
          v10 = v13;
        else
          v10 = -72;
      }
    }
    else
    {
      if (v9 > 0x18)
        goto LABEL_18;
      if (v9 == 16)
      {
LABEL_11:
        v10 = -48;
        goto LABEL_24;
      }
      if (((1 << v9) & 0x1066) == 0)
      {
        if (v9 == 24)
          goto LABEL_11;
LABEL_18:
        if (v9 == 70)
        {
          v10 = -64;
          goto LABEL_24;
        }
        goto LABEL_19;
      }
    }
LABEL_24:
    v14 = *(_QWORD *)(v5 + 48 + v10 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)v15;
    v16 = *(_WORD *)(v15 + 8) & 0x7F;
    if (v15)
      v17 = v15 - 48;
    else
      v17 = 0;
    if (v16 != 22)
      v17 = 0;
    if (v17 != v8)
    {
      v18 = sub_22E496488(v8);
      if (v18 != v19)
      {
        v20 = v18;
        v21 = v19;
        do
        {
          v22 = sub_22EFDA1A0(v20, *(_QWORD *)(v5 + 40), 1, 0);
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 29) & 2) == 0)
              return 0;
          }
          do
          {
            v20 = *(_QWORD *)(v20 + 128);
            if (!v20)
              break;
          }
          while ((*(_BYTE *)(v20 + 28) & 0x80) != 0
               || *(_QWORD *)(v20 + 40) >= 8uLL && (*(_QWORD *)(v20 + 40) & 7) == 0);
        }
        while (v20 != v21);
      }
    }
    v24 = *a1;
    if ((*(_BYTE *)(v5 + 58) & 0x10) == 0)
      goto LABEL_133;
    v53 = sub_22EFDC9F0(v5);
    v54 = sub_22F3B4E88(v53);
    v55 = sub_22F276498(v54);
    if (v55 == v56)
      goto LABEL_133;
    v27 = 0;
    v26 = 0;
    do
    {
      v57 = *(_QWORD *)(v55 + 48);
      if (v57 && *(_QWORD *)(v57 + 80) == *(_QWORD *)(v5 + 40))
      {
        v27 = *(_QWORD *)(v57 + 120);
        v26 = *(_QWORD *)(v55 + 48);
      }
      do
        v55 = *(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v55 && (*(_DWORD *)(v55 + 28) & 0x7F) != 0x4E);
    }
    while (v55 != v56);
    if (!v27)
    {
LABEL_133:
      v25 = sub_22EFDCBF0(v5, 1);
      v26 = v25;
      v27 = *(_QWORD *)(v25 + 120);
      if (!v27)
      {
        v45 = *(_DWORD *)(v25 + 72);
        if ((v45 & 1) == 0)
          goto LABEL_63;
        v46 = *(_QWORD *)(v25 + 16);
        v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
        if ((v46 & 4) != 0)
          v47 = (_QWORD *)*v47;
        v48 = v47 - 6;
        if (!v47)
          v48 = 0;
        v49 = *((_DWORD *)v48 + 7);
        v50 = v49 & 0x7F;
        if (v50 == 22)
          v51 = (unint64_t)v48;
        else
          v51 = 0;
        if (!v47 || v50 != 22)
        {
          if (v47 && v50 == 19)
          {
            v52 = v48 + 13;
          }
          else
          {
            result = 0;
            if (!v47 || (v49 & 0x7E) != 0x14)
              goto LABEL_64;
            v52 = v48 + 11;
          }
          v51 = *v52;
        }
        v58 = *(_QWORD *)(v26 + 40);
        if ((v58 & 7) != 0)
          v59 = 0;
        else
          v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        if ((v45 & 0x4000) != 0)
          v60 = 2;
        else
          v60 = 1;
        v61 = sub_22F3B4908(v51, v59, v60);
        result = 0;
        if (v61)
          v62 = v61 == v26;
        else
          v62 = 1;
        if (v62)
          goto LABEL_64;
        v27 = *(_QWORD *)(v61 + 120);
      }
    }
    result = 0;
    if (v27 && v26)
    {
      if ((*(_BYTE *)(v26 + 73) & 2) == 0)
      {
        v28 = v27;
        v29 = sub_22EFDE1AC(v27);
        v30 = sub_22F3B4E88((unint64_t)v29);
        if (v30)
        {
          v63 = sub_22F276498(v30);
          while (v63 != v64)
          {
            if (*(_QWORD *)(v63 + 48) == v26)
            {
              v42 = *(_QWORD *)(v63 + 80);
              if (v42)
                goto LABEL_61;
            }
            do
              v63 = *(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v63 && (*(_DWORD *)(v63 + 28) & 0x7F) != 0x4E);
          }
        }
        v31 = *(_QWORD *)(v28 + 48);
        v32 = (uint64_t *)(*(_QWORD *)(v26 + 56) & 0xFFFFFFFFFFFFFFF0);
        v33 = *v32;
        if (!*v32 || (v34 = *(_DWORD *)(v33 + 16), (v34 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            goto LABEL_52;
          v33 = sub_22F10CF48(v33);
          if (!v33)
            goto LABEL_52;
          v34 = *(_DWORD *)(v33 + 16);
        }
        if ((v34 & 0x100000) != 0)
        {
          do
          {
            v33 = *(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v33)
            {
              v65 = *(_DWORD *)(v33 + 16);
              if ((v65 & 0xFE) == 0x28)
                continue;
            }
            v33 = sub_22F10CF48(v33);
            v65 = *(_DWORD *)(v33 + 16);
          }
          while ((v65 & 0x100000) != 0);
        }
        v32 = (uint64_t *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_52:
        if (*(_QWORD *)(*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v32[1] & 0xFFFFFFFFFFFFFFF0))
        {
          if (sub_22F40ACB8(*(_QWORD *)(*(_QWORD *)(v28 + 48) & 0xFFFFFFFFFFFFFFF0))
            || (v67 = *(_QWORD *)(v28 + 48), (sub_22F111968((unint64_t *)&v67, v24) & 1) != 0))
          {
            v35 = *(_QWORD *)(v5 + 120);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 48);
              v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
              if (!v37 || (v38 = *(_DWORD *)(v37 + 16), (v38 & 0xFE) != 0x28))
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                  goto LABEL_59;
                v37 = sub_22F10CF48(v37);
                if (!v37)
                  goto LABEL_59;
                v38 = *(_DWORD *)(v37 + 16);
              }
              if ((v38 & 0x100000) != 0)
              {
                do
                {
                  v37 = *(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v37)
                  {
                    v66 = *(_DWORD *)(v37 + 16);
                    if ((v66 & 0xFE) == 0x28)
                      continue;
                  }
                  v37 = sub_22F10CF48(v37);
                  v66 = *(_DWORD *)(v37 + 16);
                }
                while ((v66 & 0x100000) != 0);
              }
              v36 = *(_QWORD *)(v37 + 32);
LABEL_59:
              v67 = *(_QWORD *)(v35 + 40);
              v68 = 0;
              sub_22EFC6D6C((uint64_t)&v69, v67);
              v39 = sub_22E3CD3D4(v24 + 2032, 32, 3);
              sub_22EFF6AE4(v39, v24, 0, 0, 0, v35, 0, (uint64_t)&v67, 0, 0, v36, 1, 0, 0);
              v40 = *(_QWORD *)(v35 + 48);
              v41 = (unsigned int *)sub_22E3CD3D4(v24 + 2032, 24, 3);
              sub_22F003694(v41, v40, 4, v39, 0, 0, 0);
              v42 = sub_22E3CD3D4(v24 + 2032, 48, 3);
              sub_22F2750A4(v42, v28, *(_QWORD *)(v28 + 48), 0, 0, (uint64_t)v41, 1, 0);
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE) != 0x28)
              {
                v43 = *(_QWORD *)(v28 + 48);
                v44 = (unsigned int *)sub_22E3CD3D4(v24 + 2032, 24, 3);
                v42 = (uint64_t)sub_22F003694(v44, v43, 4, v42, 0, 0, 0);
              }
LABEL_61:
              result = sub_22F0D8310(v24, 0, v42, 0);
              goto LABEL_64;
            }
          }
        }
      }
LABEL_63:
      result = 0;
    }
LABEL_64:
    if (!*((_BYTE *)v7 + 16))
      *((_BYTE *)v7 + 16) = 1;
    v7[1] = result;
  }
  return result;
}

uint64_t sub_22EEBAAFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || (v6 = *(_DWORD *)(v5 + 16), (v6 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v10 = a1;
    v5 = sub_22F10CF48(v5);
    a1 = v10;
    if (!v5)
      goto LABEL_4;
    v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 0x100000) != 0)
  {
    do
    {
      v11 = a1;
      v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v5 || (v12 = *(_DWORD *)(v5 + 16), (v12 & 0xFE) != 0x28))
      {
        v5 = sub_22F10CF48(v5);
        v12 = *(_DWORD *)(v5 + 16);
      }
      a1 = v11;
    }
    while ((v12 & 0x100000) != 0);
  }
  v4 = *(_QWORD *)(v5 + 32);
LABEL_4:
  v7 = *a1;
  v13 = *(_QWORD *)(a2 + 40);
  v14 = 0;
  sub_22EFC6D6C((uint64_t)&v15, v13);
  v8 = sub_22E3CD3D4(v7 + 2032, 32, 3);
  return sub_22EFF6AE4(v8, v7, 0, 0, 0, a2, 1, (uint64_t)&v13, 0, 0, v4, 1, 0, 0);
}

uint64_t sub_22EEBAC18(uint64_t *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;

  v4 = *a1;
  v5 = *(_QWORD *)(v4 + 1312);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 48);
    if (v6)
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v7 = sub_22EF6462C(v4, v5);
      v4 = *a1;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 16912);
  }
  v8 = sub_22E3CD3D4(v4 + 2032, 24, 3);
  *(_BYTE *)v8 = -61;
  if (byte_255E04EB3)
  {
    v9 = sub_22F0D3748(195);
    ++*((_DWORD *)v9 + 2);
  }
  v10 = *(_DWORD *)v8 & 0xFFFC00FF;
  *(_QWORD *)(v8 + 8) = v7;
  *(_BYTE *)(v8 + 16) = a2;
  *(_DWORD *)(v8 + 20) = 0;
  *(_DWORD *)v8 = v10;
  return v8;
}

unint64_t sub_22EEBACCC(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19[3];
  uint64_t v20;
  llvm *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _QWORD v27[5];
  void *v28;
  uint64_t v29;
  _DWORD v30[26];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19[0] = (uint64_t)v19;
  v19[1] = (uint64_t)v19;
  v19[2] = 0;
  v20 = 1;
  for (i = 5; i != 21; i += 2)
    v19[i - 1] = 0;
  v23 = v27;
  v24 = v27;
  v25 = 4;
  v26 = 0;
  v27[4] = 0;
  v28 = v30;
  v29 = 0x400000000;
  v30[24] = 0;
  *(_DWORD *)((char *)v31 + 7) = 0;
  v31[0] = 0;
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), a3, a4);
  v7 = sub_22EFCE144(a2 + 64, v6);
  if (!v7)
  {
LABEL_20:
    v16 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = (v7 & 4) == 0;
    v9 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0)
      v8 = 1;
    v10 = v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v8)
      v10 = *v9;
    v11 = *(_QWORD *)(v10 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    v13 = *(_WORD *)(v12 + 8) & 0x7F;
    if (v13 <= 0x18 && ((1 << v13) & 0x1000006) != 0)
    {
      if (v8)
        goto LABEL_20;
      goto LABEL_19;
    }
    v15 = v13 - 58;
    if (v15 < 0xFFFFFFFA)
      v8 = 1;
    if (v8)
      break;
LABEL_19:
    v7 = v9[1];
    if (!v7)
      goto LABEL_20;
  }
  if (v15 >= 0xFFFFFFFA)
    v16 = 0;
  else
    v16 = v10;
LABEL_21:
  if (v28 != v30)
    free(v28);
  if (v24 != v23)
    free(v24);
  if ((v20 & 1) == 0)
    llvm::deallocate_buffer(v21, (void *)(16 * v22));
  sub_22E687D9C(v19);
  return v16;
}

uint64_t sub_22EEBAE84(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;

  v6 = sub_22EF5CDF0(*a1, *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v12 = v6;
  if (v6 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v11);
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6)
      v7 = 0;
    v11 = v7 & a2;
  }
  v8 = *a1;
  v9 = sub_22E3CD3D4(*a1 + 2032, 32, 3);
  sub_22EFF8F1C(v9, v8, (uint64_t)&v11, a3, 0);
  if (v12 >= 0x41 && v11)
    MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
  return v9;
}

uint64_t sub_22EEBAF5C(uint64_t a1)
{
  uint64_t result;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  result = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v2 = *(_BYTE *)(result + 16) == 10;
  else
    v2 = 0;
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v3 = *(_BYTE *)(result + 16) == 26;
  else
    v3 = 0;
  if (v3)
    goto LABEL_13;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = sub_22F10CF48(result);
  if (!result)
    return result;
LABEL_13:
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = (*(_DWORD *)(v4 + 16) & 0xFF800FF) == 86507531;
  else
    v5 = 0;
  if (!v5)
    return 0;
  return (*(_DWORD *)(result + 20) & 0x3FFFC0) == 0;
}

void sub_22EEBB02C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  __int16 v33;
  BOOL v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t ***v59;
  uint64_t ***v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  uint64_t **v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t *v121;
  char *v122;
  uint64_t **v123;
  char *v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t *j;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  char *v135;
  uint64_t v136;
  _DWORD *v137;
  BOOL v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  unsigned __int8 **v146;
  unsigned __int8 **v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  int *v159;
  __int128 *v161;
  char *v162;
  char **v163;
  char v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  char *v173;
  char *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  _DWORD *v178;
  int v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  char *v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _BOOL4 v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _BOOL4 v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _DWORD *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL4 v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  uint64_t **v226;
  unsigned int v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  __int16 v232;
  void *v233;
  uint64_t v234;
  _BYTE v235[32];
  void *v236;
  uint64_t v237;
  _BYTE v238[16];
  void *v239;
  uint64_t v240;
  _BYTE v241[384];
  void *v242;
  uint64_t v243;
  _BYTE v244[64];
  void *v245;
  unsigned int v246;
  _QWORD v247[38];
  void *v248;
  uint64_t v249;
  _BYTE v250[32];
  void *v251;
  uint64_t v252;
  _DWORD v253[20];
  __int128 v254;
  _DWORD v255[20];
  uint64_t v256;

  v256 = *MEMORY[0x24BDAC8D0];
  v228 = (_QWORD *)sub_22EEB5AAC(a1);
  v229 = a1;
  v230 = a2;
  v231 = a3;
  v232 = 0;
  v233 = v235;
  v234 = 0x200000000;
  v236 = v238;
  v237 = 0x200000000;
  v239 = v241;
  v240 = 0x800000000;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = *(_BYTE *)(v7 + 16) == 26;
    else
      v8 = 0;
    if (v8
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v7 = sub_22F10CF48(v7)) != 0)
    {
      v9 = *(_QWORD *)(v7 + 16);
      if ((v9 & 0x3FFFC000000000) != 0)
      {
        v10 = 0;
        v11 = (unsigned __int16)(v9 >> 38);
        do
        {
          if (sub_22EEBCD28((uint64_t)&v228, (_QWORD *)v6, v10))
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * v10);
            v13 = v237;
            if (v237 >= (unint64_t)HIDWORD(v237))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v13 = v237;
            }
            *((_QWORD *)v236 + v13) = v12;
            LODWORD(v237) = v237 + 1;
          }
          ++v10;
        }
        while (v11 != v10);
      }
    }
    goto LABEL_87;
  }
  v14 = *(_DWORD *)(v6 + 28) & 0x7F;
  if (v6 && v14 == 24)
  {
    v15 = *(unsigned int *)(v6 + 104);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        if (sub_22EEBD1D0((uint64_t)&v228, v6, i))
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * i);
          v18 = v237;
          if (v237 >= (unint64_t)HIDWORD(v237))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v237;
          }
          *((_QWORD *)v236 + v18) = v17;
          LODWORD(v237) = v237 + 1;
        }
      }
    }
    goto LABEL_87;
  }
  if (v6 && v14 == 1)
  {
    v19 = *(unsigned int *)(v6 + 112);
    if (!(_DWORD)v19)
    {
LABEL_77:
      v38 = *(unsigned int *)(v6 + 80);
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 8 * v38;
        do
        {
          if (sub_22EEBCF58((uint64_t)&v228, *(_QWORD *)(*(_QWORD *)(v6 + 72) + v39)))
          {
            v41 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + v39);
            v42 = v237;
            if (v237 >= (unint64_t)HIDWORD(v237))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v42 = v237;
            }
            *((_QWORD *)v236 + v42) = v41;
            LODWORD(v237) = v237 + 1;
          }
          v39 += 8;
        }
        while (v40 != v39);
      }
      goto LABEL_87;
    }
    v20 = *(_QWORD **)(v6 + 104);
    v21 = &v20[2 * v19];
    while (1)
    {
      v22 = *v20 & 0xFFFFFFFFFFFFFFF8;
      if (v22 && (*(_DWORD *)(v22 + 28) & 0x7F) == 0x40)
      {
        v23 = *(_QWORD *)(v22 + 16);
        v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v24 = *(_QWORD *)v24;
        v25 = (*(_DWORD *)(v22 + 96) >> 20);
        if (v25 == 255)
        {
          v26 = *(_WORD *)(v24 + 8) & 0x7F;
          v27 = v24;
          if (v26 != 83)
          {
            v27 = v24;
            do
            {
              v28 = -40;
              if (v26 > 70)
              {
                if (v26 == 71)
                {
                  v28 = -56;
                }
                else if (v26 != 81)
                {
                  goto LABEL_47;
                }
              }
              else
              {
                if (v26 > 0x18)
                  goto LABEL_46;
                if (v26 == 16)
                  goto LABEL_40;
                if (((1 << v26) & 0x1066) != 0)
                  goto LABEL_53;
                if (v26 == 24)
                {
LABEL_40:
                  v28 = -48;
                }
                else
                {
LABEL_46:
                  if (v26 != 70)
                  {
LABEL_47:
                    v29 = v26 - 52;
                    if ((v26 - 33) >= 5)
                      v30 = -48;
                    else
                      v30 = -64;
                    v31 = v29 >= 6;
                    v28 = -72;
                    if (v31)
                      v28 = v30;
                    goto LABEL_53;
                  }
                  v28 = -64;
                }
              }
LABEL_53:
              v32 = *(_QWORD *)(v27 + v28 + 16);
              v27 = v32 & 0xFFFFFFFFFFFFFFF8;
              if ((v32 & 4) != 0)
                v27 = *(_QWORD *)v27;
              v26 = *(_WORD *)(v27 + 8) & 0x7F;
            }
            while (v26 != 83);
          }
          v25 = sub_22F36F2CC(*(_QWORD *)(v27 + 48), *v20 & 0xFFFFFFFFFFFFFFF8);
        }
        v33 = *(_WORD *)(v24 + 8);
        if (v24)
          v34 = (v33 & 0x7Eu) - 58 > 0xFFFFFFF9;
        else
          v34 = 0;
        if (v34)
        {
          if (sub_22EEBCD28((uint64_t)&v228, (_QWORD *)(v24 - 72), v25))
            goto LABEL_73;
        }
        else
        {
          v35 = v33 & 0x7F;
          if (v24)
            v36 = v35 == 24;
          else
            v36 = 0;
          if (v36)
          {
            if (sub_22EEBD1D0((uint64_t)&v228, v24 - 48, v25))
            {
LABEL_73:
              v37 = v237;
              if (v237 >= (unint64_t)HIDWORD(v237))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v37 = v237;
              }
              *((_QWORD *)v236 + v37) = v22;
              LODWORD(v237) = v237 + 1;
            }
          }
          else if ((sub_22EEBCF58((uint64_t)&v228, v22) & 1) != 0)
          {
            goto LABEL_73;
          }
        }
      }
      v20 += 2;
      if (v20 == v21)
        goto LABEL_77;
    }
  }
LABEL_87:
  if (!(_DWORD)v237)
    goto LABEL_407;
  v43 = *((unsigned int *)v228 + 6);
  sub_22EEBCCA0((uint64_t)&v254, v237, 8u);
  v44 = v244;
  v242 = v244;
  v243 = 0x800000000;
  if (v43 < 9)
  {
    v45 = v244;
    if ((_DWORD)v43)
    {
      v52 = 0;
      do
      {
        *(_QWORD *)&v244[v52] = &v244[v52 + 16];
        *(_QWORD *)&v244[v52 + 8] = 0x200000000;
        if (DWORD2(v254))
          sub_22EEBD3A8((uint64_t)&v244[v52], (uint64_t)&v254);
        v52 += 48;
      }
      while (48 * v43 != v52);
      v45 = v242;
    }
  }
  else
  {
    v251 = 0;
    v45 = (_BYTE *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v46 = 0;
    do
    {
      v47 = &v45[v46];
      *v47 = &v45[v46 + 16];
      v47[1] = 0x200000000;
      if (DWORD2(v254))
        sub_22EEBD3A8((uint64_t)v47, (uint64_t)&v254);
      v46 += 48;
    }
    while (48 * v43 != v46);
    v48 = (char *)v242;
    if ((_DWORD)v243)
    {
      v49 = 48 * v243;
      do
      {
        v50 = *(char **)&v48[v49 - 48];
        if (&v48[v49 - 32] != v50)
          free(v50);
        v49 -= 48;
      }
      while (v49);
      v48 = (char *)v242;
    }
    v51 = (int)v251;
    if (v48 != v244)
      free(v48);
    v242 = v45;
    HIDWORD(v243) = v51;
  }
  LODWORD(v243) = v43;
  if (v45 == v244)
  {
    v71 = v240;
    if (v240 >= v43)
    {
      v82 = (char *)v239;
      if ((_DWORD)v43)
      {
        v83 = 48 * v43;
        do
        {
          sub_22E5C302C((uint64_t)v82, (uint64_t)v44);
          v44 += 48;
          v82 += 48;
          v83 -= 48;
        }
        while (v83);
        LODWORD(v71) = v240;
        v84 = (char *)v239;
      }
      else
      {
        v84 = (char *)v239;
      }
      v86 = &v84[48 * v71];
      while (v86 != v82)
      {
        v88 = (char *)*((_QWORD *)v86 - 6);
        v86 -= 48;
        v87 = v88;
        if (v86 + 16 != v88)
          free(v87);
      }
      LODWORD(v240) = v43;
      if ((_DWORD)v243)
      {
        v89 = (char *)v242;
        v90 = 48 * v243;
        do
        {
          v91 = *(char **)&v89[v90 - 48];
          if (&v89[v90 - 32] != v91)
            free(v91);
          v90 -= 48;
        }
        while (v90);
      }
    }
    else
    {
      if (HIDWORD(v240) >= v43)
      {
        v76 = (char *)v239;
        if ((_DWORD)v240)
        {
          v85 = 48 * v240;
          do
          {
            sub_22E5C302C((uint64_t)v76, (uint64_t)v44);
            v44 += 48;
            v76 += 48;
            v85 -= 48;
          }
          while (v85);
          v76 = (char *)v239;
        }
        else
        {
          v71 = 0;
        }
      }
      else
      {
        if ((_DWORD)v240)
        {
          v72 = (char *)v239;
          v73 = 48 * v240;
          do
          {
            v74 = *(char **)&v72[v73 - 48];
            if (&v72[v73 - 32] != v74)
              free(v74);
            v73 -= 48;
          }
          while (v73);
        }
        LODWORD(v240) = 0;
        v251 = 0;
        v75 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v76 = v75;
        v77 = v239;
        if ((_DWORD)v240)
        {
          v78 = 48 * v240;
          do
          {
            *(_QWORD *)v75 = v75 + 16;
            *((_QWORD *)v75 + 1) = 0x200000000;
            if (v77[2])
              v75 = (char *)sub_22E5C302C((uint64_t)v75, (uint64_t)v77);
            v77 += 12;
            v75 += 48;
            v78 -= 48;
          }
          while (v78);
          v77 = v239;
          if ((_DWORD)v240)
          {
            v79 = 12 * v240;
            do
            {
              v80 = *(_DWORD **)&v77[v79 - 12];
              if (&v77[v79 - 8] != v80)
                free(v80);
              v79 -= 12;
            }
            while (v79 * 4);
            v77 = v239;
          }
        }
        v81 = (int)v251;
        if (v77 != (_DWORD *)v241)
          free(v77);
        v71 = 0;
        v239 = v76;
        HIDWORD(v240) = v81;
      }
      v92 = (char *)v242;
      v93 = v243;
      if (v71 != v243)
      {
        v94 = 48 * v71;
        v95 = 48 * v243;
        do
        {
          v96 = &v76[v94];
          *(_QWORD *)v96 = &v76[v94 + 16];
          *((_QWORD *)v96 + 1) = 0x200000000;
          if (*(_DWORD *)&v92[v94 + 8])
            sub_22E5C302C((uint64_t)v96, (uint64_t)&v92[v94]);
          v76 += 48;
          v95 -= 48;
          v92 += 48;
        }
        while (v94 != v95);
        v92 = (char *)v242;
        v71 = v243;
        v93 = v243;
      }
      LODWORD(v240) = v43;
      if (v93)
      {
        v97 = 48 * v71;
        do
        {
          v98 = *(char **)&v92[v97 - 48];
          if (&v92[v97 - 32] != v98)
            free(v98);
          v97 -= 48;
        }
        while (v97);
      }
    }
  }
  else
  {
    v53 = (char *)v239;
    if ((_DWORD)v240)
    {
      v54 = 48 * v240;
      do
      {
        v55 = *(char **)&v53[v54 - 48];
        if (&v53[v54 - 32] != v55)
          free(v55);
        v54 -= 48;
      }
      while (v54);
      v53 = (char *)v239;
    }
    if (v53 != v241)
      free(v53);
    v239 = v242;
    v240 = v243;
    v242 = v244;
    HIDWORD(v243) = 0;
  }
  LODWORD(v243) = 0;
  sub_22F284870((char **)&v242);
  if ((_DWORD *)v254 != v255)
    free((void *)v254);
  if (!(_DWORD)v237)
    goto LABEL_407;
  if ((*(_DWORD *)(*(_QWORD *)(v229 + 8) + 28) & 0x7F) != 0x18)
    goto LABEL_199;
  v56 = *((_DWORD *)v228 + 6);
  if (v56 == 2)
    goto LABEL_407;
  if (v56 == 3)
  {
    v57 = *(uint64_t **)(*v228 + 80);
    if (v57 == *(uint64_t **)(*v228 + 88))
      goto LABEL_199;
    v58 = *v57;
    if (v58)
    {
      if ((*(_BYTE *)(v58 + 104) & 1) != 0)
        goto LABEL_407;
    }
  }
  v59 = (uint64_t ***)v228[5];
  v60 = (uint64_t ***)v228[6];
  while (1)
  {
    if (v59 == v60)
      goto LABEL_407;
    v61 = *v59;
    if (*v59)
    {
      v62 = *v61;
      v63 = v61[1];
      if (*v61 != v63)
        break;
    }
LABEL_145:
    ++v59;
  }
  v64 = 0;
  while (1)
  {
    v65 = *v62;
    if ((unint64_t)((*v62 & 3 | (4 * ((_DWORD)v62[1] & 3u))) - 9) >= 0xFFFFFFFD)
      break;
LABEL_135:
    v62 += 2;
    if (v62 == v63)
    {
      if (v64)
      {
        v70 = sub_22F3EFC78(v64);
        MEMORY[0x2348A0E9C](v70, 0x80C40B8603338);
      }
      goto LABEL_145;
    }
  }
  v66 = (unsigned __int8 *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
  if (*(_BYTE *)(v65 & 0xFFFFFFFFFFFFFFFCLL) == 93)
  {
    v68 = (uint64_t *)operator new();
    sub_22F3EFC10(v68, v66);
    if (v64)
    {
      v69 = sub_22F3EFC78(v64);
      MEMORY[0x2348A0E9C](v69, 0x80C40B8603338);
    }
    v64 = v68;
    goto LABEL_135;
  }
  sub_22F0D5A50((uint64_t)v66);
  if (v67 < 0)
    goto LABEL_135;
  if (!v64)
    goto LABEL_199;
  if (sub_22F3EFCCC((uint64_t **)v64, (uint64_t)v66))
    goto LABEL_135;
  v99 = sub_22F3EFC78(v64);
  MEMORY[0x2348A0E9C](v99, 0x80C40B8603338);
LABEL_199:
  v100 = v228;
  v101 = v229;
  v102 = sub_22EEBD4E0(v229);
  v103 = sub_22EEBD4E0(v101);
  sub_22F34C6CC((uint64_t)&v242, *((_DWORD *)v100 + 6), v102, v103);
  v104 = v228[1];
  sub_22EEBCCA0((uint64_t)&v254, v237, 5u);
  sub_22EEBD474((uint64_t)v239, *(_DWORD *)(v104 + 48), (uint64_t)&v254);
  if ((_DWORD *)v254 != v255)
    free((void *)v254);
  v106 = *(uint64_t **)(v104 + 56);
  v105 = *(uint64_t **)(v104 + 64);
  while (v106 != v105)
  {
    v107 = *v106;
    v106 += 2;
    sub_22F34C854(&v242, v107);
  }
  v108 = v246;
  if (v246)
  {
    while (2)
    {
      v109 = v245;
      v226 = *(uint64_t ***)v245;
      *(_QWORD *)&v254 = v247[20];
      if (v108 == 1)
      {
        v110 = v226;
      }
      else
      {
        v111 = 0;
        v224 = v245;
        do
        {
          v112 = &v109[v111];
          v115 = v112[1];
          v114 = v112 + 1;
          v113 = v115;
          v116 = (2 * v111) | 1;
          v117 = 2 * v111 + 2;
          if (v117 < v108)
          {
            v118 = v114[1];
            if (sub_22EEE25C0((uint64_t)&v254, v113, v118))
            {
              v113 = v118;
              ++v114;
              v116 = v117;
            }
          }
          *v109 = v113;
          v109 = v114;
          v111 = v116;
        }
        while (v116 <= (uint64_t)(((unint64_t)v108 - 2) >> 1));
        v119 = &v224[8 * v108 - 8];
        if (v114 == v119)
        {
          v110 = v226;
          *v114 = v226;
        }
        else
        {
          *v114 = *v119;
          v110 = v226;
          *v119 = v226;
          sub_22EEBD6B4((_BOOL8)v224, (uint64_t)(v114 + 1), (uint64_t)&v254, ((char *)(v114 + 1) - v224) >> 3);
          v108 = v246;
        }
      }
      v246 = v108 - 1;
      *(_QWORD *)((char *)v242 + (((unint64_t)*((unsigned int *)v110 + 12) >> 3) & 0x1FFFFFF8)) &= ~(1 << *((_DWORD *)v110 + 12));
      v121 = v110[10];
      v120 = v110[11];
      v122 = (char *)v239;
      v123 = v110;
      if (v121 != v120)
      {
        do
        {
          if (*v121)
          {
            v124 = (char *)v239 + 48 * *(unsigned int *)(*v121 + 48);
            v125 = *((unsigned int *)v124 + 2);
            if (!(_DWORD)v125)
              goto LABEL_224;
            v126 = *(_DWORD **)v124;
            v127 = 16 * v125;
            while (*v126 != 8)
            {
              v126 += 4;
              v127 -= 16;
              if (!v127)
                goto LABEL_224;
            }
          }
          v121 += 2;
        }
        while (v121 != v120);
        v121 = v110[11];
      }
LABEL_224:
      v128 = (char *)v239 + 48 * *(unsigned int *)(*v121 + 48);
      v248 = v250;
      v249 = 0x200000000;
      if (*((_DWORD *)v128 + 2))
      {
        sub_22EEBD3A8((uint64_t)&v248, (uint64_t)v128);
        v122 = (char *)v239;
      }
      for (j = v121 + 2; j != v120; j += 2)
      {
        if (*j)
        {
          v130 = &v122[48 * *(unsigned int *)(*j + 48)];
          v131 = *(_QWORD *)v130;
          v132 = *((unsigned int *)v130 + 2);
          if (!(_DWORD)v132)
          {
LABEL_243:
            if (j != v120)
            {
              if ((_DWORD)v249)
                v138 = v132 == 0;
              else
                v138 = 1;
              if (!v138)
              {
                v139 = 16 * v132 - 16;
                v140 = (_QWORD *)(v131 + 8);
                v141 = 16 * v249 - 16;
                v142 = (char *)v248 + 8;
                do
                {
                  if (!*v142)
                    *v142 = *v140;
                  *((_DWORD *)v142 - 2) |= *((_DWORD *)v140 - 2);
                  if (!v141)
                    break;
                  v143 = v139;
                  v139 -= 16;
                  v140 += 2;
                  v141 -= 16;
                  v142 += 2;
                }
                while (v143);
              }
              for (j += 2; j != v120; j += 2)
              {
                if (*j)
                {
                  v135 = (char *)v239 + 48 * *(unsigned int *)(*j + 48);
                  v131 = *(_QWORD *)v135;
                  v132 = *((unsigned int *)v135 + 2);
                  if (!(_DWORD)v132)
                    goto LABEL_243;
                  v136 = 16 * v132;
                  v137 = (_DWORD *)v131;
                  while (*v137 != 8)
                  {
                    v137 += 4;
                    v136 -= 16;
                    if (!v136)
                      goto LABEL_243;
                  }
                }
              }
            }
            break;
          }
          v133 = 16 * v132;
          v134 = (_DWORD *)v131;
          while (*v134 != 8)
          {
            v134 += 4;
            v133 -= 16;
            if (!v133)
              goto LABEL_243;
          }
        }
      }
      v144 = (unsigned __int8 *)((unint64_t)v110[4] & 0xFFFFFFFFFFFFFFF8);
      if (v144)
      {
        v145 = *v144;
        if (v145 == 16)
        {
          v146 = (unsigned __int8 **)&v144[8 * ((*(unsigned __int16 *)v144 >> 13) & 1)
                                         + 16
                                         + 8 * ((*(unsigned __int16 *)v144 >> 12) & 1)];
LABEL_260:
          v148 = *v146;
          if (*v146)
          {
            LOBYTE(v254) = 1;
            v149 = sub_22EEBD754(&v254, v148);
            if (v149)
            {
              v150 = *(_QWORD *)(v149 + 16);
              if ((*(_DWORD *)(v150 + 28) & 0x7F) == 0x40)
              {
                if ((_DWORD)v237)
                {
                  v151 = 8 * v237;
                  v152 = (char *)v236;
                  while (*(_QWORD *)v152 != v150)
                  {
                    v152 += 8;
                    v151 -= 8;
                    if (!v151)
                    {
                      v152 = (char *)v236 + 8 * v237;
                      break;
                    }
                  }
                }
                else
                {
                  v152 = (char *)v236;
                }
                v153 = v152 - (_BYTE *)v236;
                if (v237 != (v152 - (_BYTE *)v236) >> 3)
                {
                  v154 = v110[10];
                  v155 = v110[11];
                  if (v154 != v155)
                  {
                    v156 = v153 >> 3;
                    v157 = (v153 >> 3);
                    v158 = (char *)v248 + 16 * v156;
                    do
                    {
                      while (1)
                      {
                        if (*v154)
                        {
                          v159 = (int *)(*((_QWORD *)v239 + 6 * *(unsigned int *)(*v154 + 48)) + 16 * v157);
                          if (*v159 <= 3)
                            break;
                        }
                        v154 += 2;
                        if (v154 == v155)
                          goto LABEL_281;
                      }
                      *v158 = *(_OWORD *)v159;
                      v154 += 2;
                    }
                    while (*v159 != 3 && v154 != v155);
                  }
                }
              }
            }
LABEL_281:
            if ((_BYTE)v232)
            {
              *(_QWORD *)&v254 = v255;
              *((_QWORD *)&v254 + 1) = 0x500000000;
              sub_22EEBD980((uint64_t)&v254, (uint64_t)v148, 0);
              v251 = v253;
              v252 = 0x500000000;
              if (DWORD2(v254))
                sub_22F2ED24C(&v251, (uint64_t)&v254);
              if ((_DWORD *)v254 != v255)
                free((void *)v254);
              if ((_DWORD)v252)
              {
                v161 = (__int128 *)v251;
                v162 = (char *)v251 + 16 * v252;
                while (2)
                {
                  v254 = *v161;
                  v163 = &off_24FAB9608;
                  do
                  {
                    if (llvm::StringRef::find_insensitive() != -1)
                    {
                      v164 = 0;
                      goto LABEL_295;
                    }
                    v163 += 2;
                  }
                  while (v163 != &off_24FAB9668);
                  if (++v161 != (__int128 *)v162)
                    continue;
                  break;
                }
                v164 = 1;
              }
              else
              {
                v164 = 1;
              }
LABEL_295:
              if (v251 != v253)
                free(v251);
              if ((v164 & 1) == 0 && (_DWORD)v249)
              {
                v165 = 0;
                v166 = (char *)v248;
                v167 = (char *)v248 + 16 * v249;
                do
                {
                  if (!sub_22EEBD170(*((_QWORD *)v236 + v165)))
                  {
                    v168 = *((_DWORD *)v248 + 4 * v165);
                    if (v168 != 5)
                    {
                      if (v168 != 7)
                        goto LABEL_314;
                      v169 = v123[10];
                      v170 = v123[11];
                      if (v169 == v170)
                        goto LABEL_314;
                      while (!*v169
                           || *(_DWORD *)(*((_QWORD *)v239 + 6 * *(unsigned int *)(*v169 + 48)) + 16 * v165) != 3)
                      {
                        v169 += 2;
                        if (v169 == v170)
                          goto LABEL_314;
                      }
                      goto LABEL_313;
                    }
                    v171 = v123[10];
                    v172 = v123[11];
                    if (v171 != v172)
                    {
                      while (!*v171
                           || *(_DWORD *)(*((_QWORD *)v239 + 6 * *(unsigned int *)(*v171 + 48)) + 16 * v165) != 1)
                      {
                        v171 += 2;
                        if (v171 == v172)
                          goto LABEL_314;
                      }
LABEL_313:
                      *(_DWORD *)v166 = 1;
                      *((_QWORD *)v166 + 1) = 0;
                    }
                  }
LABEL_314:
                  v166 += 16;
                  ++v165;
                }
                while (v166 != v167);
              }
            }
          }
        }
        else if ((v145 & 0xFE) == 0x66)
        {
          v8 = v145 == 103;
          v147 = (unsigned __int8 **)(v144 + 32);
          v146 = (unsigned __int8 **)(v144 + 24);
          if (!v8)
            v146 = v147;
          goto LABEL_260;
        }
      }
      sub_22E5C302C((uint64_t)&v233, (uint64_t)&v248);
      if (v248 != v250)
        free(v248);
      if (((_BYTE)v123[13] & 1) != 0 && (_DWORD)v234)
      {
        v173 = (char *)v233;
        v174 = (char *)v233 + 16 * v234;
        do
        {
          *(_DWORD *)v173 = 0;
          *((_QWORD *)v173 + 1) = 0;
          v173 += 16;
        }
        while (v173 != v174);
      }
      v176 = *v123;
      v175 = v123[1];
      while (v176 != v175)
      {
        v177 = *v176;
        if ((unint64_t)((*v176 & 3 | (4 * ((_DWORD)v176[1] & 3u))) - 9) >= 0xFFFFFFFD)
        {
          v178 = (_DWORD *)(v177 & 0xFFFFFFFFFFFFFFFCLL);
          v8 = (v177 & 0xFFFFFFFFFFFFFFFCLL) == 0;
          v179 = *(unsigned __int8 *)(v177 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v8 && (v179 & 0xFE) == 0x70)
          {
            switch((*v178 >> 18) & 0x3F)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
                sub_22EED040C((uint64_t)&v228, (uint64_t)v178);
                goto LABEL_331;
              default:
                goto LABEL_330;
            }
          }
          if (!v178 || v179 != 233)
LABEL_330:
            __asm { BR              X9 }
        }
LABEL_331:
        v176 += 2;
      }
      if (sub_22EEBD474((uint64_t)v239, *((_DWORD *)v226 + 12), (uint64_t)&v233))
      {
        v180 = v226[7];
        v181 = v226[8];
        while (v180 != v181)
        {
          v182 = *v180;
          v180 += 2;
          sub_22F34C854(&v242, v182);
        }
      }
      v108 = v246;
      if (!v246)
        break;
      continue;
    }
  }
  v183 = (char *)v239 + 48 * *(unsigned int *)(*v228 + 48);
  v184 = v237;
  *(_QWORD *)&v254 = v255;
  *((_QWORD *)&v254 + 1) = 0x600000000;
  sub_22E47EDD0((uint64_t)&v254, (v237 + 63) >> 6, 0);
  v255[12] = v184;
  v185 = v237;
  v251 = v253;
  v252 = 0x600000000;
  sub_22E47EDD0((uint64_t)&v251, (v237 + 63) >> 6, 0);
  v253[12] = v185;
  v186 = *((unsigned int *)v183 + 2);
  if ((_DWORD)v186)
  {
    v187 = 0;
    v188 = *(_DWORD **)v183;
    v189 = &v188[4 * v186];
    while (*v188 != 7)
    {
      if (*v188 == 5)
      {
        v190 = *((_QWORD *)v236 + v187);
        if (!(_DWORD)v240)
        {
LABEL_345:
          v193 = *(_QWORD *)(v229 + 8);
          if (v193)
            v194 = (*(_DWORD *)(v193 + 28) & 0x7F) == 1;
          else
            v194 = 0;
          if (v194 && (v195 = *(unsigned int *)(v193 + 112), (_DWORD)v195))
          {
            v196 = *(_QWORD **)(v193 + 104);
            v197 = 16 * v195;
            while (v190 != (*v196 & 0xFFFFFFFFFFFFFFF8))
            {
              v196 += 2;
              v197 -= 16;
              if (!v197)
                goto LABEL_354;
            }
            v202 = v230;
            v203 = sub_22EEBD170(*((_QWORD *)v236 + v187));
            (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v202 + 32))(v202, v190, v193, !v203);
          }
          else
          {
LABEL_354:
            v198 = v230;
            v199 = sub_22EEBD170(*((_QWORD *)v236 + v187));
            (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v198 + 24))(v198, v190, !v199);
          }
          goto LABEL_358;
        }
        v191 = v239;
        v192 = 48 * v240;
        while (*(_DWORD *)(*v191 + 16 * v187) != 1)
        {
          v191 += 6;
          v192 -= 48;
          if (!v192)
            goto LABEL_345;
        }
        v200 = v187 >> 6;
        v201 = v251;
        goto LABEL_357;
      }
LABEL_358:
      v188 += 4;
      ++v187;
      if (v188 == v189)
        goto LABEL_361;
    }
    v200 = v187 >> 6;
    v201 = (_QWORD *)v254;
LABEL_357:
    v201[v200] |= 1 << v187;
    goto LABEL_358;
  }
LABEL_361:
  if (DWORD2(v254))
  {
    v204 = (_QWORD *)v254;
    v205 = 8 * DWORD2(v254);
    while (!*v204)
    {
      ++v204;
      v205 -= 8;
      if (!v205)
        goto LABEL_365;
    }
LABEL_370:
    v208 = (_QWORD *)v228[5];
    v221 = (_QWORD *)v228[6];
    if (v208 != v221)
    {
      do
      {
        v222 = v208;
        v209 = *v208;
        if (*v208)
        {
          v223 = v237;
          if ((_DWORD)v237)
          {
            v210 = 0;
            v225 = (char *)v239 + 48 * *(unsigned int *)(v209 + 48);
            do
            {
              v211 = v210 >> 6;
              if ((*(_QWORD *)(v254 + 8 * v211) & (1 << v210)) != 0 && *(_DWORD *)(*v225 + 16 * v210) == 7)
              {
                v212 = *(_QWORD *)(v209 + 80);
                v213 = *(_QWORD *)(v209 + 88);
                v227 = 1;
                goto LABEL_377;
              }
              if ((*((_QWORD *)v251 + v211) & (1 << v210)) != 0 && *(_DWORD *)(*v225 + 16 * v210) == 5)
              {
                v212 = *(_QWORD *)(v209 + 80);
                v213 = *(_QWORD *)(v209 + 88);
                if (v212 != v213)
                {
                  v220 = *(_QWORD *)(v209 + 80);
                  while (!*(_QWORD *)v220
                       || *(_DWORD *)(*((_QWORD *)v239 + 6 * *(unsigned int *)(*(_QWORD *)v220 + 48)) + 16 * v210) != 1)
                  {
                    v220 += 16;
                    if (v220 == v213)
                      goto LABEL_395;
                  }
                  v227 = 0;
LABEL_377:
                  while (v212 != v213)
                  {
                    if (*(_QWORD *)v212)
                    {
                      if (*(_DWORD *)(*((_QWORD *)v239 + 6 * *(unsigned int *)(*(_QWORD *)v212 + 48)) + 16 * v210) == 5)
                      {
                        v214 = (_DWORD *)(*(_QWORD *)(v209 + 32) & 0xFFFFFFFFFFFFFFF8);
                        if (v214)
                        {
                          v215 = *(unsigned __int8 *)v214;
                          if ((v215 & 0xFE) == 0x70)
                          {
                            if ((*v214 & 0xFC0000u) >= 0x840000)
                              goto LABEL_386;
                          }
                          else
                          {
                            if (v215 != 233)
LABEL_386:
                              __asm { BR              X10 }
                            v216 = *((_QWORD *)v236 + v210);
                            v217 = v230;
                            v218 = *(_QWORD *)(v229 + 8);
                            v219 = sub_22EEBD170(v216);
                            (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, _QWORD, BOOL))(*(_QWORD *)v217 + 40))(v217, v216, v218, v214, 6, v227, !v219);
                          }
                        }
                      }
                    }
                    v212 += 16;
                  }
                }
              }
LABEL_395:
              ++v210;
            }
            while (v210 != v223);
          }
        }
        v208 = v222 + 1;
      }
      while (v222 + 1 != v221);
    }
  }
  else
  {
LABEL_365:
    if ((_DWORD)v252)
    {
      v206 = v251;
      v207 = 8 * v252;
      while (!*v206)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          goto LABEL_369;
      }
      goto LABEL_370;
    }
LABEL_369:
    if (HIBYTE(v232))
      goto LABEL_370;
  }
  if (v251 != v253)
    free(v251);
  if ((_DWORD *)v254 != v255)
    free((void *)v254);
  if (v245 != v247)
    free(v245);
  if (v242 != v244)
    free(v242);
LABEL_407:
  sub_22F284870((char **)&v239);
  if (v236 != v238)
    free(v236);
  if (v233 != v235)
    free(v233);
}

uint64_t sub_22EEBCCA0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = a2;
  v6 = a3;
  v7 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 12) = 2;
  if (a2 < 3)
  {
    if (a2)
    {
      do
      {
        *v7 = a3;
        v7[1] = 0;
        v7 += 2;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_QWORD **)a1;
    do
    {
      *v8 = v6;
      v8[1] = 0;
      v8 += 2;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t sub_22EEBCD28(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t result;
  BOOL v7;
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int *v15;
  size_t v16;
  uint64_t v17;
  char **v18;
  size_t v19;

  result = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v7 = *(_BYTE *)(result + 16) == 26;
  else
    v7 = 0;
  if (v7)
    goto LABEL_38;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
  {
LABEL_38:
    if (a3 < (unsigned __int16)(*(_QWORD *)(result + 16) >> 38))
    {
      v8 = sub_22EEBCEA4((uint64_t)a2, a3);
      v9 = v8;
      result = v8 != 0;
      if (v9 > 0xFF)
        return result;
      if ((sub_22EEBCF58(a1, *(_QWORD *)(a2[15] + 8 * a3)) & 1) != 0)
        return 1;
      if (*(_BYTE *)(a1 + 24))
      {
        v10 = a2[5];
        v11 = a2[6];
        if ((v10 & 7) != 0)
          v12 = 0;
        else
          v12 = v10 & 0xFFFFFFFFFFFFFFF8;
        result = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
        if (result)
          v13 = *(_BYTE *)(result + 16) == 26;
        else
          v13 = 0;
        if (!v13)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
            return 0;
          result = sub_22F10CF48(result);
          if (!result)
            return result;
        }
        if ((*(_QWORD *)(result + 16) & 0x3FFFC000000000) == 0x4000000000 && v12 != 0)
        {
          v15 = *(unsigned int **)(v12 + 16);
          v16 = *v15;
          v17 = (uint64_t)v15 + v16 + 16;
          v18 = &off_24FAB95B8;
          while (1)
          {
            v19 = (size_t)v18[1];
            if (v16 >= v19 && (!v19 || !memcmp((const void *)(v17 - v19), *v18, v19)))
              break;
            result = 0;
            v18 += 2;
            if (v18 == &off_24FAB9608)
              return result;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EEBCEA4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    goto LABEL_12;
  sub_22EFC8E88(a1);
  v4 = *(uint64_t **)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(uint64_t **)v3;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v6 = *(uint64_t **)v3;
    while (*(_WORD *)(*v6 + 32) != 313)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_12;
    }
  }
  if (v6 == &v4[v5])
  {
LABEL_12:
    v11 = 0;
    v10 = 0;
  }
  else
  {
    do
    {
      v9 = *v4++;
      v8 = v9;
    }
    while (*(_WORD *)(v9 + 32) != 313);
    v10 = *(_DWORD *)(v8 + 36);
    if (v10)
      v10 = (*(_DWORD *)(v8 + 40) & 0x3FFFFFFF) + ((2 * *(_DWORD *)(v8 + 40)) >> 31) - 1 == a2;
    v11 = 256;
  }
  return v11 | v10;
}

uint64_t sub_22EEBCF58(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  _DWORD *v7;
  size_t v8;
  char *v9;
  unsigned int v10;
  char *v12;
  char **v13;
  size_t v14;

  if (sub_22EEBD170(a2))
    return 1;
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v5 == 0)
    {
      v8 = 0;
      v9 = "";
    }
    else
    {
      v7 = *(_DWORD **)(v5 + 16);
      v10 = *v7;
      v9 = (char *)(v7 + 4);
      v8 = v10;
      if (sub_22EEBD040(v9, (char *)v10))
        return sub_22EEBD0C8(*(_QWORD *)(a2 + 48));
    }
    v12 = &v9[v8];
    v13 = &off_24FAB95B8;
    while (1)
    {
      v14 = (size_t)v13[1];
      if (v8 >= v14 && (!v14 || !memcmp(&v12[-v14], *v13, v14)))
        break;
      v13 += 2;
      if (v13 == &off_24FAB9608)
        return 0;
    }
    return sub_22EEBD0C8(*(_QWORD *)(a2 + 48));
  }
  return 0;
}

BOOL sub_22EEBD040(void *__s2, char *__n)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (&off_24FAB9528)[v4 + 1] == __n;
    if (__n && (&off_24FAB9528)[v4 + 1] == __n)
      v6 = memcmp((&off_24FAB9528)[v4], __s2, (size_t)__n) == 0;
    v5 += v6;
    v4 += 2;
  }
  while (v4 != 18);
  return v5 != 0;
}

BOOL sub_22EEBD0C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
    return 0;
  if (*(_BYTE *)(v1 + 16) != 10)
    v1 = sub_22F10CF48(v1);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) - 27 > 0xFFFFFFFD;
  else
    v3 = 0;
  if (!v3)
    v2 = sub_22F10CF48(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  return v4 && *(_DWORD *)(v4 + 16) == 11 && (*(_DWORD *)(v4 + 16) & 0xFF80000) == 86507520;
}

BOOL sub_22EEBD170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 365)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22EEBD1D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  size_t v15;
  unsigned int v16;
  unint64_t v17;
  char **v18;
  size_t v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char **v25;
  size_t v26;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = v3 & 7;
  if (v4 >= 2)
  {
    v8 = v4 == 2 ? 1 : *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) - 3;
    if (v8 > a3)
    {
      v9 = sub_22EEBCEA4(a2, a3);
      v10 = v9;
      result = v9 != 0;
      if (v10 > 0xFF)
        return result;
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * a3);
      if ((sub_22EEBCF58(a1, v12) & 1) != 0)
        return 1;
      if (*(_BYTE *)(a1 + 24))
      {
        result = sub_22EEBD0C8(*(_QWORD *)(v12 + 48));
        if (!result)
          return result;
        if (sub_22F41F330(v3) != 3)
        {
          v13 = v3 & 0xFFFFFFFFFFFFFFF8;
          if (v4 == 2 || *(_DWORD *)v13 == 4)
          {
            if ((~(_BYTE)v3 & 7) == 0)
              v13 = *(_QWORD *)(v13 + 16);
            if (v13)
            {
              v14 = *(unsigned int **)(v13 + 16);
              v16 = *v14;
              v13 = (unint64_t)(v14 + 4);
              v15 = v16;
            }
            else
            {
              v15 = 0;
            }
            v17 = v13 + v15;
            v18 = &off_24FAB95B8;
            while (1)
            {
              v19 = (size_t)v18[1];
              if (v15 >= v19 && (!v19 || !memcmp((const void *)(v17 - v19), *v18, v19)))
                break;
              result = 0;
              v18 += 2;
              if (v18 == &off_24FAB9608)
                return result;
            }
          }
          else
          {
            if ((~(_BYTE)v3 & 7) != 0 || (v13 = *(_QWORD *)(v13 + 8 * a3 + 16)) != 0)
            {
              v20 = *(_DWORD **)(v13 + 16);
              v23 = *v20;
              v22 = (char *)(v20 + 4);
              v21 = v23;
            }
            else
            {
              v22 = 0;
              v21 = 0;
            }
            if (!sub_22EEBD040(v22, (char *)v21))
            {
              v24 = &v22[v21];
              v25 = &off_24FAB95B8;
              while (1)
              {
                v26 = (size_t)v25[1];
                if (v21 >= v26 && (!v26 || !memcmp(&v24[-v26], *v25, v26)))
                  break;
                result = 0;
                v25 += 2;
                if (v25 == &off_24FAB9608)
                  return result;
              }
            }
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_22EEBD3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22EEBD474(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;

  v3 = a1 + 48 * a2;
  v4 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a3 + 8))
  {
    if (!(_DWORD)v4)
      return 0;
    v5 = *(_DWORD **)v3;
    v6 = *(_DWORD **)a3;
    v7 = 16 * v4;
    while (*v5 == *v6)
    {
      v5 += 4;
      v6 += 4;
      v7 -= 16;
      if (!v7)
        return 0;
    }
  }
  sub_22EEBD3A8(v3, a3);
  return 1;
}

uint64_t sub_22EEBD4E0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_22EEB783C(a1, (uint64_t)&unk_255E04EAC);
  result = *v2;
  if (!*v2)
  {
    sub_22EEE2574(a1, &v5);
    result = v5;
    v4 = *v2;
    *v2 = v5;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return *v2;
    }
  }
  return result;
}

BOOL sub_22EEBD550(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v24;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v8 = a3;
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      v14 = *v12;
      if (v10 + 2 < a3)
      {
        v15 = v4 >> 1;
        v16 = v12[1];
        v17 = sub_22EEE25C0(a2, v14, v16);
        if (v17)
          v14 = v16;
        v7 = v15;
        v8 = a3;
        if (v17)
        {
          ++v12;
          v11 = v13;
        }
      }
      v24 = *v5;
      result = sub_22EEE25C0(a2, v14, *v5);
      if (!result)
      {
        do
        {
          v18 = v12;
          *v5 = v14;
          if (v7 < v11)
            break;
          v19 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 8 * v19);
          v20 = 2 * v11 + 2;
          v14 = *v12;
          if (v20 < v8)
          {
            v21 = v12[1];
            v22 = sub_22EEE25C0(a2, *v12, v21);
            if (v22)
            {
              v14 = v21;
              ++v12;
            }
            v8 = a3;
            if (v22)
              v19 = v20;
          }
          result = sub_22EEE25C0(a2, v14, v24);
          v5 = v18;
          v11 = v19;
        }
        while (!result);
        *v18 = v24;
      }
    }
  }
  return result;
}

BOOL sub_22EEBD6B4(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v11 = (uint64_t *)(a2 - 8);
    v10 = *(_QWORD *)(a2 - 8);
    result = sub_22EEE25C0(a3, *v8, v10);
    if (result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *v8;
        result = sub_22EEE25C0(a3, *v8, v10);
        v11 = v12;
      }
      while (result);
      *v12 = v10;
    }
  }
  return result;
}

uint64_t sub_22EEBD754(_BYTE *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  unsigned int v5;

  while (1)
  {
    v3 = *a2;
    if (a2 && (v3 & 0xFE) == 0x70)
    {
      v4 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22EEBD87C(a1, (uint64_t)a2);
        default:
          goto LABEL_11;
      }
    }
    if (!a2 || v3 != 233)
      goto LABEL_12;
    v4 = *(_DWORD *)a2;
    v5 = (*(_DWORD *)a2 >> 18) & 0x1F;
    if (v5 > 0xD)
    {
LABEL_11:
      v3 = v4;
LABEL_12:
      __asm { BR              X9 }
    }
    if (v5 != 5 && (v5 != 9 || !*a1))
      return 0;
    a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  }
}

uint64_t sub_22EEBD85C()
{
  _BYTE *v0;
  unsigned int *v1;

  return sub_22EEBD8D8(v0, v1);
}

void sub_22EEBD874()
{
  JUMPOUT(0x22EEBD84CLL);
}

uint64_t sub_22EEBD87C(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  if (!*a1 || (*(_DWORD *)a2 & 0xF80000) != 0x380000)
    return 0;
  result = ((uint64_t (*)(void))sub_22EEBD754)();
  if (!result)
    return sub_22EEBD754(a1, *(_QWORD *)(a2 + 24));
  return result;
}

uint64_t sub_22EEBD8D8(_BYTE *a1, unsigned int *a2)
{
  int v4;
  uint64_t result;
  unsigned __int8 **v6;

  if (*a1)
  {
    v4 = sub_22EFFA8F0((uint64_t)a2);
    if ((v4 - 499) < 2)
    {
      result = sub_22EEBD754(a1, *(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)));
      if (result)
        return result;
      v6 = (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24));
      return sub_22EEBD754(a1, *v6);
    }
    if (v4 == 498)
    {
      v6 = (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
      return sub_22EEBD754(a1, *v6);
    }
  }
  return 0;
}

uint64_t sub_22EEBD980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22EEC9400(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EECD288(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22EECE648(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22EECD6F8(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EEBD980(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22EEBD980(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22EECE648(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22EECE648(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22EECE494(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22EECE5AC(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EECE648(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22EECE648(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EECE5AC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22EECE648(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EECE5AC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22EECE648(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22EECE648(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22EECD6F8(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EEC9400(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22EECE5AC(a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22EECE648(a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22EECD6F8(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EEC9400(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22EEC9400(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22EECE5AC(a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22EECE648(a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22EECE648(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EECD2D0(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EECE5AC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22EECE648(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EECD5B8(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22EECD640(a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22EECE5AC(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22EECE648(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22EECE648(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22EECE648(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EECE5AC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22EECE648(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EECD5B8(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22EECE648(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22EECE648(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22EECD3E8(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22EECE5AC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22EECE648(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EECE5AC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22EECE648(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EECE5AC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22EECE648(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22EECD3E8(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22EECD6F8(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22EECE5AC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22EECE648(a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22EECE5AC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22EECE648(a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22EECD6F8(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22EEC9400(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EEBD980(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22EECE648(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22EECD6F8(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EECDE60(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22EECE648(a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22EECE648(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22EECE5AC(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22EECE648(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22EECE5AC(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22EECE648(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22EECE5AC(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22EECE648(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22EECE5AC(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22EECE648(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22EECE5AC(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22EECE648(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22EECE494(a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EECEBE4(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22EECE5AC(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22EECE648(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22EECEBE4(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22EECD5B8(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EECD6F8(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EECE5AC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22EECE648(a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EECEC84(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EECE5AC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22EECE648(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EECECF8(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EECE5AC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22EECE648(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22EECD6F8(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22EECD5B8(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EECE5AC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22EECE648(a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22EEC9400(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22EECE494(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EECECF8(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EECE5AC(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22EECE648(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22EECDE60(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EECD288(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22EECD6F8(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22EECE5AC(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22EECE648(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EECD3E8(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22EECD6F8(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22EECE5AC(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22EECE648(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22EECD6F8(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22EECE5AC(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22EECE648(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EECD5B8(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22EECE648(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22EECE648(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EECD5B8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22EECE648(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22EECE648(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22EECE648(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EECE648(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EECE648(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EECED70(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22EEBD980(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22EEBD980(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22EECE5AC(a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22EECE648(a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EECED70(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22EEBD980(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22EECE5AC(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22EECE648(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EECED70(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22EEBD980(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22EECE5AC(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22EECE648(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22EECE648(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22EECE648(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22EECE648(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22EECE648(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EECE648(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EECEE3C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22EECE648(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EECED70(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22EECE648(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EECED70(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22EEBD980(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22EECE5AC(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22EECE648(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EECF200(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22EECE648(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EECF200(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22EEC9400(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22EECE5AC(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22EECE648(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EECF200(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22EECE648(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EECF200(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22EECE648(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EECF200(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22EEBD980(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22EECE5AC(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22EECE648(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22EECD6F8(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22EECD5B8(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22EECE5AC(a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22EECE648(a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22EEC9400(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22EECE494(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EECF200(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EECE5AC(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22EECE648(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EECE5AC(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EECE648(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22EECE648(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22EECE648(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22EECDE60(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22EECF260(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22EECDE60(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EECDE60(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EEBD980(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22EECDE60(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22EECE648(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22EECE648(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EECD5B8(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22EECD640(a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22EECE5AC(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22EECE648(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22EEBD980(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22EECF260(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22EECE5AC(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22EECE648(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22EECF260(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22EECE5AC(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22EECE648(a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22EEBD980(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22EECE5AC(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22EECE648(a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22EECE648(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22EECE648(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EECE5AC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22EECE648(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22EECE5AC(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22EECE648(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22EECE5AC(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EECE5AC(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EEC9400(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22EECE648(a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EECE648(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22EECD288(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EEBD980(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EECD518(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EECD2D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EECE5AC(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22EECE648(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22EECD3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EECD6F8(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22EECE5AC(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22EECE648(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EECD518(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EECD5B8(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EECD640(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EECE494(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EECD5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EECD5B8(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EECD6F8(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EECD640(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22EECD6F8(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EECE3D0(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EECD6F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F49C248
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22EECD6F8(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22EEBD980(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22EEBD980(a1, v23, 0);
          case 0xE:
            result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EECD5B8(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6DC4((uint64_t)&v76, v74);
            result = sub_22EECD640(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22EECE494(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22EECE3D0(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22EECDE60(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22EEBD980(a1, v23, 0);
          case 0x12:
            return sub_22EECD5B8(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22EEBD980(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22EECDE60(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22EECD5B8(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22EECE494(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22EEBD980(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22EECDE60(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22EECD5B8(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22EECD6F8(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22EECD6F8(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22EEC9400(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22EECDE60(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = (unint64_t *)(v52 + 2);
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22EECDE60(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22EEBD980(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22EEBD980(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22EEBD980(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22EECDE60(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22EECD6F8(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F49C248
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F49C248
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22EECD6F8(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22EECD6F8(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22EECE304(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22EECDE60(a1, v24);
          case 0x2E:
            result = sub_22EECE3D0(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22EECE494(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EECDE60(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _DWORD v45[2];
  uint64_t v46;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22EEBD980(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22EEBD980(a1, v13, 0);
      case 14:
        result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22EEC9400(a1);
        if (!(_DWORD)result)
          return result;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22EECE304(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 15:
        result = sub_22EECE3D0(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22EEBD980(a1, v13, 0);
      case 18:
        return sub_22EECE430(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22EEBD980(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EECE430(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = v20 - 1;
        do
        {
          result = sub_22EECE304(a1, v21);
          v18 = v22-- != 0;
          v23 = v18;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v23 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22EEBD980(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EECE430(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22EECDE60(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v24 = *(_QWORD *)(v4 + 16);
        v25 = (unsigned __int16)(v24 >> 38);
        if (!(unsigned __int16)(v24 >> 38))
          goto LABEL_82;
        v26 = 8 * v25;
        v27 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22EEBD980(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22EEBD980(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v34 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22EECDE60(a1, v34);
          if (!(_DWORD)result)
            return result;
        }
        v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v35)
          return 1;
        v36 = (uint64_t *)(v4 + 48);
        v37 = 8 * v35 - 8;
        do
        {
          v38 = *v36++;
          result = sub_22EECDE60(a1, v38);
          if ((_DWORD)result)
            v39 = v37 == 0;
          else
            v39 = 1;
          v37 -= 8;
        }
        while (!v39);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v40 = *(_DWORD *)(v4 + 20);
        v46 = *(_QWORD *)(v4 + 40);
        v45[0] = 8;
        v45[1] = v40;
        return sub_22EECE304(a1, (uint64_t)v45);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22EECE3D0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v41 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v41)
          return 1;
        v42 = v4 + 40;
        v43 = v41 - 1;
        do
        {
          result = sub_22EECE304(a1, v42);
          v18 = v43-- != 0;
          v44 = v18;
          if (!(_DWORD)result)
            break;
          v42 += 24;
        }
        while ((v44 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22EECDE60(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EECDE60(a1, *v27) & 1) == 0)
      return 0;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = (unsigned __int16)(v24 >> 38);
LABEL_82:
  if ((v24 & 0x3C0000000000000) == 0x80000000000000)
  {
    v28 = (_DWORD *)((v4 + 40 + 8 * v25 + 4 * ((v24 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v28;
    v30 = v28 + 2;
    v29 = v31;
    if (v31)
    {
      v32 = 8 * v29;
      while ((sub_22EECDE60(a1, *v30) & 1) != 0)
      {
        ++v30;
        v32 -= 8;
        if (!v32)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v33 = sub_22F257D3C(v4);
  if (!v33)
    return 1;
  v14 = v33;
LABEL_49:
  result = sub_22EEBD980(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EECE304(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EECDE60(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EECE3D0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EECE304(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EECE3D0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22EECE430(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22EECE430(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22EECE430(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EECE430(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EECDE60(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EECE494(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22EECD6F8(a1, *v6, v6 + 1);
      else
        result = sub_22EECDE60(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EECD5B8(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22EECE3D0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22EECE304(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EECE5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EEC9400(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EECE648(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EECE6CC()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EECE688);
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EEBD980(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EECE6B8);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EEBD980(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EECE6B8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EEBD980(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EECE818);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EECE6B8);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EEBD980(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECE9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECEA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECEA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EECE6B8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECEA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EECE6B8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EEBD980(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EECE6BCLL);
}

void sub_22EECEAD0()
{
  JUMPOUT(0x22EECE6A4);
}

void sub_22EECEAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22EEBD980(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EEBD980(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EECE818);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EEBD980(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EEBD980(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EEBD980(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EECE6B8);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EEBD980(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EECE6BCLL);
}

uint64_t sub_22EECEBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22EEC9400(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EEBD980(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EECEC84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EECEBE4(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EECD5B8(a1, v7, v8);
}

uint64_t sub_22EECECF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EECEC84(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EECD6F8(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EECED70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EECEBE4(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EECD5B8(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EECD6F8(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EECD6F8(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EECDE60(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EECEE3C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EECEBE4(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EECD5B8(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22EECD640(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EECE494(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EECD6F8(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EEBD980(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22EECD6F8(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22EEBD980(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EEBD980(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EEC9400(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22EECF200(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EECED70(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EEBD980(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EECF260(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EEBD980(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EEBD980(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EEBD980(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EEBD980(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EEBD980(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EEBD980(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EEBD980(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EEBD980(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EEBD980(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EEBD980(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EEBD980(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EEBD980(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EEBD980(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EEBD980(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EEBD980(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EEBD980(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EEBD980(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EEBD980(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EEBD980(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EECD5B8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EECD640(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EEBD980(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EEBD980(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EEBD980(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EEBD980(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EEBD980(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EEBD980(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EEBD980(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EEBD980(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EEBD980(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EEBD980(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EEBD980(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EEBD980(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EEBD980(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EEBD980(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EEBD980(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EEBD980(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EEBD980(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EEBD980(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EEBD980(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EEBD980(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EEBD980(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EEBD980(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EEBD980(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EEBD980(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EEBD980(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EEBD980(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EECD5B8(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EECD640(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EEBD980(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EEBD980(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EEBD980(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EEBD980(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EEBD980(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EEBD980(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EEBD980(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EEBD980(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EEBD980(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EEBD980(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EEBD980(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EEBD980(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EECD5B8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EECD640(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EEBD980(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EEBD980(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EEBD980(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EEBD980(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EEBD980(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EEBD980(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EEBD980(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EEBD980(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EEBD980(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EEBD980(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EEBD980(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EEBD980(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EED0314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EEBD980(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EEBD980(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

void sub_22EED040C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  char v20;

  if ((*(_DWORD *)a2 & 0xFC0000) == 0x540000)
  {
    sub_22EED06EC(a1, *(unsigned __int8 **)(a2 + 24));
    v4 = sub_22EED07A0(a1, *(unsigned __int8 **)(a2 + 16));
    if (HIDWORD(v4))
    {
      v5 = v4;
      v6 = sub_22EFFBBCC(*(unsigned __int8 **)(a2 + 24));
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (!v7 || (*(_DWORD *)(v7 + 28) & 0x7F) != 0x53)
      {
        v8 = *(_QWORD *)(v7 + 16);
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v9 = *(_QWORD *)v9;
        for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
        {
          v11 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v11 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_18;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_17;
            if (i == 16)
              goto LABEL_11;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_24;
            if (i == 24)
            {
LABEL_11:
              v11 = -48;
            }
            else
            {
LABEL_17:
              if (i != 70)
              {
LABEL_18:
                v12 = i - 52;
                if ((i - 33) >= 5)
                  v13 = -48;
                else
                  v13 = -64;
                if (v12 >= 6)
                  v11 = v13;
                else
                  v11 = -72;
                goto LABEL_24;
              }
              v11 = -64;
            }
          }
LABEL_24:
          v14 = *(_QWORD *)(v9 + v11 + 16);
          v9 = v14 & 0xFFFFFFFFFFFFFFF8;
          if ((v14 & 4) != 0)
            v9 = *(_QWORD *)v9;
        }
        v7 = v9 - 40;
      }
      sub_22F00905C((uint64_t)v6, *(_QWORD *)(v7 + 88), 0, (uint64_t)&v18);
      if (v20)
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (sub_22E42E5EC((uint64_t)&v18, 0))
        {
          v16 = v15 + 16 * v5;
          if (*(_DWORD *)v16 != 21 && (*(_DWORD *)v16 & 3) == 3)
          {
            *(_DWORD *)v16 = 21;
            *(_QWORD *)(v16 + 8) = 0;
          }
        }
        if (v20 && v19 >= 0x41)
        {
          if (v18)
            MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
        }
      }
    }
  }
}

unint64_t sub_22EED0600(_QWORD *a1, unsigned int *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  result = sub_22EED07A0((uint64_t)a1, *(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if (HIDWORD(result))
    result = (unint64_t)sub_22EED0840(a1, result, (uint64_t)a2);
  v5 = a2[4];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
    v8 = 8 * v5;
    do
    {
      result = sub_22EED07A0((uint64_t)a1, *(unsigned __int8 **)(v7 + 8 * v6));
      if (HIDWORD(result))
      {
        v9 = result;
        result = sub_22EED08F4((uint64_t)a1, (uint64_t)a2, v6);
        if ((_DWORD)result)
        {
          result = (unint64_t)sub_22EED0840(a1, v9, (uint64_t)a2);
        }
        else
        {
          v10 = a1[4] + 16 * v9;
          if (*(int *)v10 >= 4)
          {
            *(_DWORD *)v10 = 1;
            *(_QWORD *)(v10 + 8) = 0;
          }
        }
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22EED06EC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v11 = 0;
  result = sub_22EEBD754(&v11, a2);
  if (result)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40)
    {
      v5 = *(_QWORD *)(a1 + 80);
      v6 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(_QWORD **)(a1 + 80);
        while (*v8 != v4)
        {
          ++v8;
          v7 -= 8;
          if (!v7)
          {
            v8 = (_QWORD *)(v5 + 8 * v6);
            break;
          }
        }
      }
      else
      {
        v8 = *(_QWORD **)(a1 + 80);
      }
      v9 = (uint64_t)v8 - v5;
      if (v6 != v9 >> 3)
      {
        v10 = *(_QWORD *)(a1 + 32) + 16 * ((unint64_t)v9 >> 3);
        if (*(int *)v10 >= 4)
        {
          *(_DWORD *)v10 = 1;
          *(_QWORD *)(v10 + 8) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EED07A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  result = sub_22EEBD754(&v10, a2);
  if (result)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40)
    {
      v5 = *(_QWORD *)(a1 + 80);
      v6 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(_QWORD **)(a1 + 80);
        while (*v8 != v4)
        {
          ++v8;
          v7 -= 8;
          if (!v7)
          {
            v8 = (_QWORD *)(v5 + 8 * v6);
            break;
          }
        }
      }
      else
      {
        v8 = *(_QWORD **)(a1 + 80);
      }
      v9 = (uint64_t)v8 - v5;
      if (v6 == v9 >> 3)
        return 0;
      else
        return ((unint64_t)v9 >> 3) | 0x100000000;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

