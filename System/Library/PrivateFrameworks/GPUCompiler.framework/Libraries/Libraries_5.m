_QWORD *sub_22E654750(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F29DD08(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E65480C()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;
  int v5;

  v4 = 1;
  v5 = 1;
  v3.n128_u64[0] = (unint64_t)"Emit limited coverage mapping information (experimental)";
  v3.n128_u64[1] = 56;
  v1 = 0;
  v2 = &v1;
  sub_22F29CCF0(&v5, &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_22E622D38, &qword_253E4D148, &dword_22E3A8000);
}

void sub_22E654878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;

  v8 = *(_QWORD *)(*(_QWORD *)a1 + 848);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  v10 = *(_BYTE *)(v9 + 583);
  if (v10 >= 0)
    v11 = v9 + 560;
  else
    v11 = *(_QWORD *)(v9 + 560);
  v12 = *(_QWORD *)(v9 + 568);
  if (v10 >= 0)
    v13 = v10 & 0x7F;
  else
    v13 = v12;
  if (v8)
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 64) + 56))(*(_QWORD *)(v8 + 64));
  else
    v14 = 8;
  MEMORY[0x23489CDBC](&v16, a2, a3, a4, v11, v13, v14);
  v15 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = v16;
  *(_QWORD *)(a1 + 24) = v17;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 96) & 0x180000000000) == 0x80000000000)
    *(_QWORD *)(a1 + 32) = llvm::createPGOFuncNameVar();
}

void sub_22E654990(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  char v5;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;

  v5 = a2;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) + 72))(a2 & 0xFFFFFFFFFFFFFFF8))
  {
    v8 = (_QWORD *)*a1;
    v9 = *(_QWORD *)(*a1 + 152);
    if ((*(_BYTE *)(v9 + 68) & 0x20) != 0 && (*(_WORD *)(v9 + 96) & 0x80) == 0)
    {
      if (sub_22E462B18(v7))
        return;
      v8 = (_QWORD *)*a1;
    }
    v10 = v8[106];
    if ((*(_QWORD *)(v8[23] + 96) & 0x180000000000) == 0x80000000000 || v10 != 0)
    {
      v12 = *(_DWORD *)(v7 + 28);
      if ((v12 & 0x200) == 0)
      {
        if (*(_DWORD *)(v8[27] + 148) >= 0xBu)
        {
          v14 = v5 & 7;
        }
        else
        {
          if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x37)
            v13 = v7;
          else
            v13 = 0;
          v14 = v5 & 7;
          if (v14 != 1 && v13)
          {
            if (sub_22F2505EC(v13))
              return;
            v12 = *(_DWORD *)(v7 + 28);
          }
        }
        if (v14 == 2 || (v12 & 0x7F) != 0x39)
        {
          sub_22E636E54(*a1, v7);
          if ((llvm::Function::hasFnAttribute() & 1) == 0)
          {
            sub_22F29DDB0((uint64_t)a1, a4);
            sub_22F29DE1C((uint64_t)a1, v7);
            if ((*(_BYTE *)(*(_QWORD *)(*a1 + 184) + 34) & 1) != 0)
              sub_22E654B20((uint64_t)a1, v7);
            if (v10)
            {
              v15 = sub_22F1E3734(*(_QWORD **)(*(_QWORD *)(*a1 + 144) + 1992), *(_DWORD *)(v7 + 24));
              sub_22F29DFF0(a1, v10, v15);
              sub_22F29E1E0((uint64_t)a1, v7);
              sub_22F29E3D4(a1);
            }
          }
        }
      }
    }
  }
}

void sub_22E654B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  void *v10;
  size_t v11;
  size_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  if (!sub_22E659650(a1, a2))
  {
    v25 = 0uLL;
    v26 = 0;
    v17 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v16 = MEMORY[0x24BED83D8] + 16;
    v24 = &v25;
    llvm::raw_ostream::SetBufferAndMode();
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 152);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992);
    v6 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v13 = *(_QWORD *)(*(_QWORD *)a1 + 3536);
    *((_QWORD *)&v13 + 1) = v5;
    v14 = v4;
    v15 = v6;
    sub_22E6728B4(&v13, a2, (llvm::raw_ostream *)&v16);
    if (v20 != v18)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v16);
    v7 = HIBYTE(v26) & 0x7F;
    if (v26 < 0)
      v7 = *((_QWORD *)&v25 + 1);
    if (v7)
    {
      v8 = *(_BYTE *)(a1 + 31);
      v9 = v8;
      if (v8 >= 0)
        v10 = (void *)(a1 + 8);
      else
        v10 = *(void **)(a1 + 8);
      v11 = v8 & 0x7F;
      if (v9 >= 0)
        v12 = v11;
      else
        v12 = *(_QWORD *)(a1 + 16);
      sub_22E67152C(*(_QWORD *)(*(_QWORD *)a1 + 3536), *(_QWORD *)(a1 + 32), v10, v12, *(_QWORD *)(a1 + 56), &v25, 1);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

uint64_t sub_22E654C58(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143;
  uint64_t v144;
  uint64_t **v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  BOOL v150;
  uint64_t v151;
  uint64_t **v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t **v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  BOOL v174;
  uint64_t v175;
  uint64_t **v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t **v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  BOOL v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t **v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t **v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t *v228;
  unint64_t *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t **v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t **v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  uint64_t **v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  uint64_t v267;
  uint64_t **v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t **v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  _DWORD *v299;
  uint64_t v300;
  uint64_t *v301;
  unsigned int v302;
  uint64_t v303;
  unsigned int v304;
  BOOL v305;
  uint64_t v306;
  uint64_t **v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t **v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  unsigned int v318;
  BOOL v319;
  uint64_t v320;
  uint64_t **v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t **v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t **v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  BOOL v334;
  uint64_t v335;
  uint64_t **v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t **v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t **v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t **v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t **v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t *v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t **v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t **v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t **v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t **v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  BOOL v408;
  uint64_t v409;
  uint64_t **v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t **v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t *v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t **v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int v445;
  BOOL v446;
  uint64_t v447;
  uint64_t **v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t **v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t **v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t **v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t **v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int v470;
  uint64_t v471;
  uint64_t **v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t **v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t **v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unsigned int v491;
  uint64_t v492;
  uint64_t **v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  uint64_t **v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t **v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t i;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  unsigned int v516;
  BOOL v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t **v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  unsigned int v540;
  uint64_t v541;
  uint64_t **v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  char *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t **v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t **v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t **v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  uint64_t **v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  BOOL v570;
  BOOL v571;
  BOOL v572;
  BOOL v573;
  BOOL v574;
  BOOL v575;
  BOOL v576;
  BOOL v577;
  BOOL v578;
  BOOL v579;
  BOOL v580;
  BOOL v581;
  BOOL v582;
  BOOL v583;
  BOOL v584;
  BOOL v585;
  BOOL v586;
  BOOL v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  BOOL v595;
  BOOL v596;
  BOOL v597;
  BOOL v598;
  int *v599;
  BOOL v600;
  BOOL v601;
  BOOL v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t **v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  uint64_t v615;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E65B18C((uint64_t)a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v6 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v6 <= 0x39 && ((1 << v6) & 0x3F0003E01011066) != 0
        || (v6 - 70 <= 0xD ? (v579 = ((1 << (v6 - 70)) & 0x2803) == 0) : (v579 = 1), !v579 || v6 - 19 <= 4))
      {
        v7 = sub_22EFCAE04(a2);
      }
      else
      {
        v7 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v7);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      while (2)
      {
        if (v10 == (uint64_t *)v12)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v10) & 1) != 0)
        {
          ++v10;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v272 = *(unint64_t **)(a2 + 96);
      if (v272)
      {
        result = sub_22E667C68((uint64_t)a1, *v272, (uint64_t)(v272 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v273 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E65B428((uint64_t)a1, v273, 0);
      if (!(_DWORD)result)
        return result;
      v274 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v274)
        goto LABEL_492;
      v275 = 16 * v274;
      v276 = (uint64_t *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v276)
        {
          result = sub_22E65B428((uint64_t)a1, *v276, 0);
          if (!(_DWORD)result)
            break;
        }
        v276 += 2;
        v275 -= 16;
        if (!v275)
        {
LABEL_492:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v278 = *v277;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v280 = *(_QWORD *)v279 + 8 * *(unsigned int *)(v279 + 8);
            }
            else
            {
              v280 = 0;
            }
            while (v278 != (uint64_t *)v280)
            {
              if ((sub_22E669E70((uint64_t)a1, *v278) & 1) == 0)
                return 0;
              ++v278;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v239 = *v238;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v241 = *(_QWORD *)v240 + 8 * *(unsigned int *)(v240 + 8);
      }
      else
      {
        v241 = 0;
      }
      while (2)
      {
        if (v239 == (uint64_t *)v241)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v239) & 1) != 0)
        {
          ++v239;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v255 = *(_QWORD *)(a2 + 48);
      if (!v255)
        goto LABEL_459;
      v256 = *(unsigned int *)(v255 + 8);
      if (!(_DWORD)v256)
        goto LABEL_459;
      v257 = v255 + 16;
      while ((sub_22E668A04((uint64_t)a1, v257) & 1) != 0)
      {
        v257 += 32;
        if (!--v256)
        {
LABEL_459:
          v258 = *(_DWORD *)v4 & 0x7F;
          v259 = v258 > 0x39 || ((1 << v258) & 0x3F0003E01011066) == 0;
          if (v259
            && (v258 - 70 <= 0xD ? (v598 = ((1 << (v258 - 70)) & 0x2803) == 0) : (v598 = 1), v598 && v258 - 19 > 4))
          {
            v260 = 0;
          }
          else
          {
            v260 = sub_22EFCAE04(a2);
          }
          result = sub_22E669DD4((uint64_t)a1, v260);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v262 = *v261;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v264 = *(_QWORD *)v263 + 8 * *(unsigned int *)(v263 + 8);
            }
            else
            {
              v264 = 0;
            }
            while (v262 != (uint64_t *)v264)
            {
              if ((sub_22E669E70((uint64_t)a1, *v262) & 1) == 0)
                return 0;
              ++v262;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v192 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v192 <= 0x39 && ((1 << v192) & 0x3F0003E01011066) != 0
        || (v192 - 70 <= 0xD ? (v577 = ((1 << (v192 - 70)) & 0x2803) == 0) : (v577 = 1), !v577 || v192 - 19 <= 4))
      {
        v193 = sub_22EFCAE04(a2);
      }
      else
      {
        v193 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v193);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v195 = *v194;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v197 = *(_QWORD *)v196 + 8 * *(unsigned int *)(v196 + 8);
      }
      else
      {
        v197 = 0;
      }
      while (2)
      {
        if (v195 == (uint64_t *)v197)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v195) & 1) != 0)
        {
          ++v195;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v326 = *v325;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v328 = *(_QWORD *)v327 + 8 * *(unsigned int *)(v327 + 8);
      }
      else
      {
        v328 = 0;
      }
      while (2)
      {
        if (v326 == (uint64_t *)v328)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v326) & 1) != 0)
        {
          ++v326;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v353 = *v352;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v355 = *(_QWORD *)v354 + 8 * *(unsigned int *)(v354 + 8);
      }
      else
      {
        v355 = 0;
      }
      while (2)
      {
        if (v353 == (uint64_t *)v355)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v353) & 1) != 0)
        {
          ++v353;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v265 = *(_DWORD *)v4 & 0x7F;
      v266 = v265 > 0x39 || ((1 << v265) & 0x3F0003E01011066) == 0;
      v267 = !v266 || v265 - 70 <= 0xD && ((1 << (v265 - 70)) & 0x2803) != 0 || v265 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v267);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v269 = *v268;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v271 = *(_QWORD *)v270 + 8 * *(unsigned int *)(v270 + 8);
      }
      else
      {
        v271 = 0;
      }
      while (2)
      {
        if (v269 == (uint64_t *)v271)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v269) & 1) != 0)
        {
          ++v269;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v368 = *(_QWORD *)(a2 + 40);
      v369 = (unint64_t *)(v368 & 0xFFFFFFFFFFFFFFF8);
      if ((v368 & 4) != 0 && v369)
      {
        if ((sub_22E667C68((uint64_t)a1, *v369, (uint64_t)(v369 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v368 & 4) != 0)
          v523 = 0;
        else
          v523 = v368 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E654C58(a1, v523);
        if (!(_DWORD)result)
          return result;
      }
      v524 = *(_DWORD *)v4 & 0x7F;
      if (v524 <= 0x39 && ((1 << v524) & 0x3F0003E01011066) != 0
        || v524 - 70 <= 0xD && ((1 << (v524 - 70)) & 0x2803) != 0
        || v524 - 19 <= 4)
      {
        v525 = sub_22EFCAE04(a2);
      }
      else
      {
        v525 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v525);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v527 = *v526;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v529 = *(_QWORD *)v528 + 8 * *(unsigned int *)(v528 + 8);
      }
      else
      {
        v529 = 0;
      }
      while (1)
      {
        if (v527 == (uint64_t *)v529)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v527) & 1) == 0)
          break;
        ++v527;
      }
      return 0;
    case 9:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v226 = *(_QWORD *)(a2 + 48);
      v227 = (unint64_t *)(v226 & 0xFFFFFFFFFFFFFFF8);
      if ((v226 & 4) != 0 && v227)
      {
        if ((sub_22E667C68((uint64_t)a1, *v227, (uint64_t)(v227 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v226 & 4) != 0)
          v509 = 0;
        else
          v509 = v226 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E654C58(a1, v509);
        if (!(_DWORD)result)
          return result;
      }
      v510 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v510)
      {
        for (i = 0; i != v510; ++i)
        {
          v512 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v513 = *(_DWORD *)(v512 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v513)
          {
            v514 = (_QWORD *)(v512 + 16);
            v515 = 8 * v513;
            do
            {
              if ((sub_22E654C58(a1, *v514) & 1) == 0)
                return 0;
              ++v514;
              v515 -= 8;
            }
            while (v515);
          }
        }
      }
      v516 = *(_DWORD *)v4 & 0x7F;
      v517 = v516 > 0x39 || ((1 << v516) & 0x3F0003E01011066) == 0;
      if (v517 && (v516 - 70 <= 0xD ? (v602 = ((1 << (v516 - 70)) & 0x2803) == 0) : (v602 = 1), v602 && v516 - 19 > 4))
        v518 = 0;
      else
        v518 = sub_22EFCAE04(a2);
      result = sub_22E669DD4((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v520 = *v519;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
      }
      else
      {
        v522 = 0;
      }
      while (1)
      {
        if (v520 == (uint64_t *)v522)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v520) & 1) == 0)
          break;
        ++v520;
      }
      return 0;
    case 10:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v362 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v362 <= 0x39 && ((1 << v362) & 0x3F0003E01011066) != 0
        || (v362 - 70 <= 0xD ? (v581 = ((1 << (v362 - 70)) & 0x2803) == 0) : (v581 = 1), !v581 || v362 - 19 <= 4))
      {
        v363 = sub_22EFCAE04(a2);
      }
      else
      {
        v363 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v363);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v365 = *v364;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v367 = *(_QWORD *)v366 + 8 * *(unsigned int *)(v366 + 8);
      }
      else
      {
        v367 = 0;
      }
      while (2)
      {
        if (v365 == (uint64_t *)v367)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v365) & 1) != 0)
        {
          ++v365;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E65B1D4(a1, a2) & 1) != 0;
    case 12:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v223 = *v222;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v225 = *(_QWORD *)v224 + 8 * *(unsigned int *)(v224 + 8);
      }
      else
      {
        v225 = 0;
      }
      while (2)
      {
        if (v223 == (uint64_t *)v225)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v223) & 1) != 0)
        {
          ++v223;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      sub_22E66A40C(a1, (_DWORD *)a2);
      if (!sub_22E667B28((uint64_t)a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v344 = *(_DWORD *)(a2 + 24);
      v345 = *(_QWORD *)(a2 + 80);
      v613 = *(_QWORD *)(a2 + 40);
      v614 = v344;
      v615 = v345;
      if (!sub_22E667BB0((uint64_t)a1, &v613))
        return 0;
      if ((v346 = *(_DWORD *)v4 & 0x7F, v346 <= 0x39) && ((1 << v346) & 0x3F0003E01011066) != 0
        || v346 - 70 <= 0xD && ((1 << (v346 - 70)) & 0x2803) != 0
        || v346 - 19 <= 4)
      {
        v347 = sub_22EFCAE04(a2);
      }
      else
      {
        v347 = 0;
      }
      if (!sub_22E669DD4((uint64_t)a1, v347))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v349 = *v348;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v351 = *(_QWORD *)v350 + 8 * *(unsigned int *)(v350 + 8);
      }
      else
      {
        v351 = 0;
      }
      while (2)
      {
        if (v349 == (uint64_t *)v351)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v349) & 1) != 0)
        {
          ++v349;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v156 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v156 <= 0x39 && ((1 << v156) & 0x3F0003E01011066) != 0
        || (v156 - 70 <= 0xD ? (v575 = ((1 << (v156 - 70)) & 0x2803) == 0) : (v575 = 1), !v575 || v156 - 19 <= 4))
      {
        v157 = sub_22EFCAE04(a2);
      }
      else
      {
        v157 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v157);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v159 = *v158;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v161 = *(_QWORD *)v160 + 8 * *(unsigned int *)(v160 + 8);
      }
      else
      {
        v161 = 0;
      }
      while (2)
      {
        if (v159 == (uint64_t *)v161)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v159) & 1) != 0)
        {
          ++v159;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v242 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v242 <= 0x39 && ((1 << v242) & 0x3F0003E01011066) != 0
        || (v242 - 70 <= 0xD ? (v578 = ((1 << (v242 - 70)) & 0x2803) == 0) : (v578 = 1), !v578 || v242 - 19 <= 4))
      {
        v243 = sub_22EFCAE04(a2);
      }
      else
      {
        v243 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v139 = *v138;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v141 = *(_QWORD *)v140 + 8 * *(unsigned int *)(v140 + 8);
      }
      else
      {
        v141 = 0;
      }
      while (2)
      {
        if (v139 == (uint64_t *)v141)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v139) & 1) != 0)
        {
          ++v139;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E667B28((uint64_t)a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v288 = *v287;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v290 = *(_QWORD *)v289 + 8 * *(unsigned int *)(v289 + 8);
      }
      else
      {
        v290 = 0;
      }
      while (2)
      {
        if (v288 == (uint64_t *)v290)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v288) & 1) != 0)
        {
          ++v288;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v356 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v356 <= 0x39 && ((1 << v356) & 0x3F0003E01011066) != 0
        || (v356 - 70 <= 0xD ? (v580 = ((1 << (v356 - 70)) & 0x2803) == 0) : (v580 = 1), !v580 || v356 - 19 <= 4))
      {
        v357 = sub_22EFCAE04(a2);
      }
      else
      {
        v357 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v357);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v359 = *v358;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v361 = *(_QWORD *)v360 + 8 * *(unsigned int *)(v360 + 8);
      }
      else
      {
        v361 = 0;
      }
      while (2)
      {
        if (v359 == (uint64_t *)v361)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v359) & 1) != 0)
        {
          ++v359;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v395 = *(_QWORD *)(a2 + 112);
      if (!v395)
        goto LABEL_705;
      v396 = *(unsigned int *)(v395 + 8);
      if (!(_DWORD)v396)
        goto LABEL_705;
      v397 = (uint64_t *)(v395 + 16);
      v398 = 8 * v396;
      while ((sub_22E65B2F4(a1, *v397) & 1) != 0)
      {
        ++v397;
        v398 -= 8;
        if (!v398)
        {
LABEL_705:
          result = sub_22E669DD4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v400 = *v399;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v402 = *(_QWORD *)v401 + 8 * *(unsigned int *)(v401 + 8);
            }
            else
            {
              v402 = 0;
            }
            while (v400 != (uint64_t *)v402)
            {
              if ((sub_22E669E70((uint64_t)a1, *v400) & 1) == 0)
                return 0;
              ++v400;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v312 = *v311;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v314 = *(_QWORD *)v313 + 8 * *(unsigned int *)(v313 + 8);
      }
      else
      {
        v314 = 0;
      }
      while (2)
      {
        if (v312 == (uint64_t *)v314)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v312) & 1) != 0)
        {
          ++v312;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669DD4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v388 = *(_QWORD *)(a2 + 112);
      if (!v388)
        goto LABEL_692;
      v389 = *(unsigned int *)(v388 + 8);
      if (!(_DWORD)v389)
        goto LABEL_692;
      v390 = (uint64_t *)(v388 + 16);
      v391 = 8 * v389;
      while ((sub_22E65B2F4(a1, *v390) & 1) != 0)
      {
        ++v390;
        v391 -= 8;
        if (!v391)
        {
LABEL_692:
          v392 = (unint64_t *)sub_22F259044(a2);
          if (v392)
          {
            result = sub_22E667C68((uint64_t)a1, *v392, (uint64_t)(v392 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v393 = *(_QWORD *)(a2 + 120);
          if (!v393)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v393 = *(_QWORD *)(a2 + 120);
          }
          if (v393 < 8)
            v394 = 0;
          else
            v394 = *(_QWORD *)(v393 & 0xFFFFFFFFFFFFFFF8);
          if (v394 == a2)
          {
            v603 = sub_22F2590A8(a2);
            v604 = sub_22F25910C(a2);
            v605 = sub_22F259178(a2);
            v606 = sub_22F2591DC(a2);
            if (v603 != v604 && v605 != v606)
            {
              v607 = v605 + 4;
              v608 = v603 + 8;
              do
              {
                if (v608 == v604)
                  break;
                v608 += 8;
                v35 = v607 == v606;
                v607 += 4;
              }
              while (!v35);
            }
          }
          result = sub_22E669DD4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v610 = *v609;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v612 = *(_QWORD *)v611 + 8 * *(unsigned int *)(v611 + 8);
            }
            else
            {
              v612 = 0;
            }
            while (v610 != (uint64_t *)v612)
            {
              if ((sub_22E669E70((uint64_t)a1, *v610) & 1) == 0)
                return 0;
              ++v610;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v422 = *(_QWORD *)(a2 + 104);
      if (!v422)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v422 = *(_QWORD *)(a2 + 104);
      }
      if (v422 < 8)
        v423 = 0;
      else
        v423 = *(_QWORD *)(v422 & 0xFFFFFFFFFFFFFFF8);
      if (v423 == a2)
      {
        v588 = sub_22F259248(a2);
        v590 = v589;
        v591 = sub_22F2592CC(a2);
        if (v588 != v590 && v591 != v592)
        {
          v593 = v591 + 4;
          v594 = v588 + 8;
          do
          {
            if (v594 == v590)
              break;
            v594 += 8;
            v35 = v593 == v592;
            v593 += 4;
          }
          while (!v35);
        }
      }
      result = sub_22E669DD4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v531 = *v530;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
      }
      else
      {
        v533 = 0;
      }
      while (2)
      {
        if (v531 == (uint64_t *)v533)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v531) & 1) != 0)
        {
          ++v531;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v229 = *(unint64_t **)(a2 + 88);
      if (v229)
      {
        result = sub_22E667C68((uint64_t)a1, *v229, (uint64_t)(v229 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v230 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v230)
        goto LABEL_414;
      v231 = *(_QWORD **)(a2 + 96);
      v232 = 8 * v230;
      while ((sub_22E654C58(a1, *v231) & 1) != 0)
      {
        ++v231;
        v232 -= 8;
        if (!v232)
        {
LABEL_414:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v233 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E65B428((uint64_t)a1, v233, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v235 = *v234;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v237 = *(_QWORD *)v236 + 8 * *(unsigned int *)(v236 + 8);
            }
            else
            {
              v237 = 0;
            }
            while (v235 != (uint64_t *)v237)
            {
              if ((sub_22E669E70((uint64_t)a1, *v235) & 1) == 0)
                return 0;
              ++v235;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v228 = *(unint64_t **)(a2 + 64);
      if (v228)
      {
        if ((sub_22E667C68((uint64_t)a1, *v228, (uint64_t)(v228 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E6683D0((uint64_t)a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v554 = *v553;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v556 = *(_QWORD *)v555 + 8 * *(unsigned int *)(v555 + 8);
      }
      else
      {
        v556 = 0;
      }
      while (2)
      {
        if (v554 == (uint64_t *)v556)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v554) & 1) != 0)
        {
          ++v554;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v445 = *(_DWORD *)v4 & 0x7F;
      v446 = v445 > 0x39 || ((1 << v445) & 0x3F0003E01011066) == 0;
      v447 = !v446 || v445 - 70 <= 0xD && ((1 << (v445 - 70)) & 0x2803) != 0 || v445 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v447);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v449 = *v448;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v451 = *(_QWORD *)v450 + 8 * *(unsigned int *)(v450 + 8);
      }
      else
      {
        v451 = 0;
      }
      while (2)
      {
        if (v449 == (uint64_t *)v451)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v449) & 1) != 0)
        {
          ++v449;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v128 = *(_DWORD *)v4 & 0x7F, v128 <= 0x39) && ((1 << v128) & 0x3F0003E01011066) != 0
        || v128 - 70 <= 0xD && ((1 << (v128 - 70)) & 0x2803) != 0
        || v128 - 19 <= 4)
      {
        v129 = sub_22EFCAE04(a2);
      }
      else
      {
        v129 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v129);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v131 = *v130;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v133 = *(_QWORD *)v132 + 8 * *(unsigned int *)(v132 + 8);
      }
      else
      {
        v133 = 0;
      }
      while (2)
      {
        if (v131 == (uint64_t *)v133)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v131) & 1) != 0)
        {
          ++v131;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v424 = *(_DWORD *)v4 & 0x7F, v424 <= 0x39) && ((1 << v424) & 0x3F0003E01011066) != 0
        || v424 - 70 <= 0xD && ((1 << (v424 - 70)) & 0x2803) != 0
        || v424 - 19 <= 4)
      {
        v425 = sub_22EFCAE04(a2);
      }
      else
      {
        v425 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v425);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      while (2)
      {
        if (v427 == (uint64_t *)v429)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v427) & 1) != 0)
        {
          ++v427;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v430 = *(_DWORD *)v4 & 0x7F, v430 <= 0x39) && ((1 << v430) & 0x3F0003E01011066) != 0
        || v430 - 70 <= 0xD && ((1 << (v430 - 70)) & 0x2803) != 0
        || v430 - 19 <= 4)
      {
        v431 = sub_22EFCAE04(a2);
      }
      else
      {
        v431 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v431);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v433 = *v432;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v435 = *(_QWORD *)v434 + 8 * *(unsigned int *)(v434 + 8);
      }
      else
      {
        v435 = 0;
      }
      while (2)
      {
        if (v433 == (uint64_t *)v435)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v433) & 1) != 0)
        {
          ++v433;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v370 = *(_DWORD *)v4 & 0x7F, v370 <= 0x39) && ((1 << v370) & 0x3F0003E01011066) != 0
        || v370 - 70 <= 0xD && ((1 << (v370 - 70)) & 0x2803) != 0
        || v370 - 19 <= 4)
      {
        v371 = sub_22EFCAE04(a2);
      }
      else
      {
        v371 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v371);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v373 = *v372;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v375 = *(_QWORD *)v374 + 8 * *(unsigned int *)(v374 + 8);
      }
      else
      {
        v375 = 0;
      }
      while (2)
      {
        if (v373 == (uint64_t *)v375)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v373) & 1) != 0)
        {
          ++v373;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v281 = *(_DWORD *)v4 & 0x7F, v281 <= 0x39) && ((1 << v281) & 0x3F0003E01011066) != 0
        || v281 - 70 <= 0xD && ((1 << (v281 - 70)) & 0x2803) != 0
        || v281 - 19 <= 4)
      {
        v282 = sub_22EFCAE04(a2);
      }
      else
      {
        v282 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v282);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E654C58(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v599 = sub_22F259350(a2);
        result = sub_22E668A04((uint64_t)a1, (uint64_t)v599);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E669D34((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v376 = *(_DWORD *)v4 & 0x7F, v376 <= 0x39) && ((1 << v376) & 0x3F0003E01011066) != 0
        || v376 - 70 <= 0xD && ((1 << (v376 - 70)) & 0x2803) != 0
        || v376 - 19 <= 4)
      {
        v377 = sub_22EFCAE04(a2);
      }
      else
      {
        v377 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v377);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v379 = *v378;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v381 = *(_QWORD *)v380 + 8 * *(unsigned int *)(v380 + 8);
      }
      else
      {
        v381 = 0;
      }
      if (v379 == (uint64_t *)v381)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v379) & 1) != 0)
      {
        if (++v379 == (uint64_t *)v381)
          return 1;
      }
      return 0;
    case 33:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v162 = *(_QWORD *)(a2 + 120);
      if ((v162 & 4) == 0)
        goto LABEL_281;
      v163 = 0;
      while (1)
      {
        v164 = v162 & 0xFFFFFFFFFFFFFFF8;
        if (v163 >= *(unsigned int *)(v164 + 16))
          break;
        sub_22E669D34((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v164 + 24) + 8 * v163++));
        v162 = *(_QWORD *)(a2 + 120);
        if ((v162 & 4) == 0)
        {
LABEL_281:
          v165 = 0;
          v166 = 0;
          goto LABEL_1022;
        }
      }
      v165 = *(_QWORD *)v164;
      v166 = *(_QWORD *)(v164 + 8);
LABEL_1022:
      result = sub_22E667B28((uint64_t)a1, v165, v166);
      if (!(_DWORD)result)
        return result;
      v557 = *(_QWORD *)(a2 + 128);
      if ((v557 & 4) != 0 && (v557 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E667C68((uint64_t)a1, *(_QWORD *)(v557 & 0xFFFFFFFFFFFFFFF8), (v557 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E669DD4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v559 = *v558;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v561 = *(_QWORD *)v560 + 8 * *(unsigned int *)(v560 + 8);
      }
      else
      {
        v561 = 0;
      }
      if (v559 == (uint64_t *)v561)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v559) & 1) != 0)
      {
        if (++v559 == (uint64_t *)v561)
          return 1;
      }
      return 0;
    case 34:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A48C((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E669DD4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v135 = *v134;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v137 = *(_QWORD *)v136 + 8 * *(unsigned int *)(v136 + 8);
      }
      else
      {
        v137 = 0;
      }
      if (v135 == (uint64_t *)v137)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v135) & 1) != 0)
      {
        if (++v135 == (uint64_t *)v137)
          return 1;
      }
      return 0;
    case 35:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A500((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E669DD4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      if (v115 == (uint64_t *)v117)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v115) & 1) != 0)
      {
        if (++v115 == (uint64_t *)v117)
          return 1;
      }
      return 0;
    case 36:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v118 = *(unint64_t ***)(a2 + 160);
      if (v118)
      {
        if (*v118)
        {
          result = sub_22E667C68((uint64_t)a1, **v118, (uint64_t)(*v118 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v119 = *(_QWORD *)(a2 + 120);
      if ((v119 & 4) != 0)
      {
        v534 = (uint64_t *)(v119 & 0xFFFFFFFFFFFFFFF8);
        v120 = *v534;
        v121 = v534[1];
      }
      else
      {
        v120 = 0;
        v121 = 0;
      }
      result = sub_22E667B28((uint64_t)a1, v120, v121);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E669DD4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v536 = *v535;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
      }
      else
      {
        v538 = 0;
      }
      if (v536 == (uint64_t *)v538)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v536) & 1) != 0)
      {
        if (++v536 == (uint64_t *)v538)
          return 1;
      }
      return 0;
    case 37:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v75 = *(_QWORD *)(a2 + 184);
      if (!v75)
        goto LABEL_124;
      v76 = *(_DWORD *)(v75 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v76)
        goto LABEL_124;
      v77 = (_QWORD *)(v75 + 16);
      v78 = 8 * v76;
      while ((sub_22E654C58(a1, *v77) & 1) != 0)
      {
        ++v77;
        v78 -= 8;
        if (!v78)
        {
LABEL_124:
          v79 = *(_QWORD *)(a2 + 192);
          v80 = *(unsigned int *)(v79 + 8);
          if ((_DWORD)v80)
          {
            v81 = v79 + 16;
            while ((sub_22E668A04((uint64_t)a1, v81) & 1) != 0)
            {
              v81 += 32;
              if (!--v80)
                goto LABEL_128;
            }
            return 0;
          }
LABEL_128:
          result = sub_22E66A500((uint64_t)a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E669DD4((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v83 = *v82;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
            }
            else
            {
              v85 = 0;
            }
            if (v83 != (uint64_t *)v85)
            {
              while ((sub_22E669E70((uint64_t)a1, *v83) & 1) != 0)
              {
                if (++v83 == (uint64_t *)v85)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v436 = *(_QWORD *)(a2 + 48);
      if (v436)
      {
        result = sub_22E6683D0((uint64_t)a1, v436 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E65B18C((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v437 = *(_QWORD *)(a2 + 72);
      if (v437 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v438 = (unint64_t *)(v437 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v438)
          v438 = (unint64_t *)v438[1];
        result = sub_22E667C68((uint64_t)a1, *v438, (uint64_t)(v438 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v439 = *(_DWORD *)v4 & 0x7F, v439 <= 0x39) && ((1 << v439) & 0x3F0003E01011066) != 0
        || v439 - 70 <= 0xD && ((1 << (v439 - 70)) & 0x2803) != 0
        || v439 - 19 <= 4)
      {
        v440 = sub_22EFCAE04(a2);
      }
      else
      {
        v440 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v440);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v442 = *v441;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v444 = *(_QWORD *)v443 + 8 * *(unsigned int *)(v443 + 8);
      }
      else
      {
        v444 = 0;
      }
      if (v442 == (uint64_t *)v444)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v442) & 1) != 0)
      {
        if (++v442 == (uint64_t *)v444)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E65B2F4(a1, a2) & 1) != 0;
    case 40:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v198 = *(_QWORD *)(a2 + 80);
      v199 = (unint64_t *)(v198 & 0xFFFFFFFFFFFFFFF8);
      if ((v198 & 4) != 0)
        v199 = (unint64_t *)*v199;
      result = sub_22E667C68((uint64_t)a1, *v199, (uint64_t)(v199 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v200 = *(_DWORD *)v4 & 0x7F, v200 <= 0x39) && ((1 << v200) & 0x3F0003E01011066) != 0
        || v200 - 70 <= 0xD && ((1 << (v200 - 70)) & 0x2803) != 0
        || v200 - 19 <= 4)
      {
        v201 = sub_22EFCAE04(a2);
      }
      else
      {
        v201 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v201);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v203 = *v202;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v205 = *(_QWORD *)v204 + 8 * *(unsigned int *)(v204 + 8);
      }
      else
      {
        v205 = 0;
      }
      if (v203 == (uint64_t *)v205)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v203) & 1) != 0)
      {
        if (++v203 == (uint64_t *)v205)
          return 1;
      }
      return 0;
    case 41:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v291 = *(_QWORD *)(a2 + 80);
      v292 = (unint64_t *)(v291 & 0xFFFFFFFFFFFFFFF8);
      if ((v291 & 4) != 0)
        v292 = (unint64_t *)*v292;
      result = sub_22E667C68((uint64_t)a1, *v292, (uint64_t)(v292 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v293 = *(_DWORD *)v4 & 0x7F, v293 <= 0x39) && ((1 << v293) & 0x3F0003E01011066) != 0
        || v293 - 70 <= 0xD && ((1 << (v293 - 70)) & 0x2803) != 0
        || v293 - 19 <= 4)
      {
        v294 = sub_22EFCAE04(a2);
      }
      else
      {
        v294 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v294);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v296 = *v295;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v298 = *(_QWORD *)v297 + 8 * *(unsigned int *)(v297 + 8);
      }
      else
      {
        v298 = 0;
      }
      if (v296 == (uint64_t *)v298)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v296) & 1) != 0)
      {
        if (++v296 == (uint64_t *)v298)
          return 1;
      }
      return 0;
    case 42:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E667B28((uint64_t)a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v407 = *(_DWORD *)v4 & 0x7F;
      v408 = v407 > 0x39 || ((1 << v407) & 0x3F0003E01011066) == 0;
      v409 = !v408 || v407 - 70 <= 0xD && ((1 << (v407 - 70)) & 0x2803) != 0 || v407 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v409);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v411 = *v410;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v413 = *(_QWORD *)v412 + 8 * *(unsigned int *)(v412 + 8);
      }
      else
      {
        v413 = 0;
      }
      if (v411 == (uint64_t *)v413)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v411) & 1) != 0)
      {
        if (++v411 == (uint64_t *)v413)
          return 1;
      }
      return 0;
    case 43:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v48 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v48 <= 0x39 && ((1 << v48) & 0x3F0003E01011066) != 0
        || (v48 - 70 <= 0xD ? (v571 = ((1 << (v48 - 70)) & 0x2803) == 0) : (v571 = 1), !v571 || v48 - 19 <= 4))
      {
        v49 = sub_22EFCAE04(a2);
      }
      else
      {
        v49 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v49);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v51 = *v50;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v53 = *(_QWORD *)v52 + 8 * *(unsigned int *)(v52 + 8);
      }
      else
      {
        v53 = 0;
      }
      if (v51 == (uint64_t *)v53)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v51) & 1) != 0)
      {
        if (++v51 == (uint64_t *)v53)
          return 1;
      }
      return 0;
    case 44:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E667B28((uint64_t)a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v149 = *(_DWORD *)v4 & 0x7F;
      v150 = v149 > 0x39 || ((1 << v149) & 0x3F0003E01011066) == 0;
      v151 = !v150 || v149 - 70 <= 0xD && ((1 << (v149 - 70)) & 0x2803) != 0 || v149 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v151);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v153 = *v152;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v155 = *(_QWORD *)v154 + 8 * *(unsigned int *)(v154 + 8);
      }
      else
      {
        v155 = 0;
      }
      if (v153 == (uint64_t *)v155)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v153) & 1) != 0)
      {
        if (++v153 == (uint64_t *)v155)
          return 1;
      }
      return 0;
    case 45:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v382 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v382 <= 0x39 && ((1 << v382) & 0x3F0003E01011066) != 0
        || (v382 - 70 <= 0xD ? (v582 = ((1 << (v382 - 70)) & 0x2803) == 0) : (v582 = 1), !v582 || v382 - 19 <= 4))
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 46:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v470 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v470 <= 0x39 && ((1 << v470) & 0x3F0003E01011066) != 0
        || (v470 - 70 <= 0xD ? (v584 = ((1 << (v470 - 70)) & 0x2803) == 0) : (v584 = 1), !v584 || v470 - 19 <= 4))
      {
        v471 = sub_22EFCAE04(a2);
      }
      else
      {
        v471 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v471);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v473 = *v472;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *(_QWORD *)v474 + 8 * *(unsigned int *)(v474 + 8);
      }
      else
      {
        v475 = 0;
      }
      if (v473 == (uint64_t *)v475)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v473) & 1) != 0)
      {
        if (++v473 == (uint64_t *)v475)
          return 1;
      }
      return 0;
    case 47:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v90 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v90 <= 0x39 && ((1 << v90) & 0x3F0003E01011066) != 0
        || (v90 - 70 <= 0xD ? (v573 = ((1 << (v90 - 70)) & 0x2803) == 0) : (v573 = 1), !v573 || v90 - 19 <= 4))
      {
        v91 = sub_22EFCAE04(a2);
      }
      else
      {
        v91 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v91);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v93 = *v92;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v95 = *(_QWORD *)v94 + 8 * *(unsigned int *)(v94 + 8);
      }
      else
      {
        v95 = 0;
      }
      if (v93 == (uint64_t *)v95)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v93) & 1) != 0)
      {
        if (++v93 == (uint64_t *)v95)
          return 1;
      }
      return 0;
    case 48:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v167 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v167 <= 0x39 && ((1 << v167) & 0x3F0003E01011066) != 0
        || (v167 - 70 <= 0xD ? (v576 = ((1 << (v167 - 70)) & 0x2803) == 0) : (v576 = 1), !v576 || v167 - 19 <= 4))
      {
        v168 = sub_22EFCAE04(a2);
      }
      else
      {
        v168 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v168);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v170 = *v169;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v172 = *(_QWORD *)v171 + 8 * *(unsigned int *)(v171 + 8);
      }
      else
      {
        v172 = 0;
      }
      if (v170 == (uint64_t *)v172)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v170) & 1) != 0)
      {
        if (++v170 == (uint64_t *)v172)
          return 1;
      }
      return 0;
    case 49:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A578((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v562 = v191 & 0xFFFFFFFFFFFFFFFCLL;
        v563 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v563 && (_DWORD)v563 != 3)
          v562 = *(_QWORD *)(v562 + 8);
        if ((sub_22E65B428((uint64_t)a1, v562, 0) & 1) == 0)
          return 0;
      }
      else if ((v191 & 3) != 0 && (v191 & 3) != 3)
      {
        result = sub_22E65B428((uint64_t)a1, v191 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v564 = *(_DWORD *)v4 & 0x7F;
      if (v564 <= 0x39 && ((1 << v564) & 0x3F0003E01011066) != 0
        || v564 - 70 <= 0xD && ((1 << (v564 - 70)) & 0x2803) != 0
        || v564 - 19 <= 4)
      {
        v565 = sub_22EFCAE04(a2);
      }
      else
      {
        v565 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v565);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v567 = *v566;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v569 = *(_QWORD *)v568 + 8 * *(unsigned int *)(v568 + 8);
        }
        else
        {
          v569 = 0;
        }
        for (; v567 != (uint64_t *)v569; ++v567)
        {
          if ((sub_22E669E70((uint64_t)a1, *v567) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A578((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v41 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v41 = *(_QWORD *)(v41 + 8);
        result = sub_22E65B428((uint64_t)a1, v41, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v42 = *(_DWORD *)v4 & 0x7F, v42 <= 0x39) && ((1 << v42) & 0x3F0003E01011066) != 0
        || v42 - 70 <= 0xD && ((1 << (v42 - 70)) & 0x2803) != 0
        || v42 - 19 <= 4)
      {
        v43 = sub_22EFCAE04(a2);
      }
      else
      {
        v43 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v43);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v45 = *v44;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v47 = *(_QWORD *)v46 + 8 * *(unsigned int *)(v46 + 8);
      }
      else
      {
        v47 = 0;
      }
      if (v45 == (uint64_t *)v47)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v45) & 1) != 0)
      {
        if (++v45 == (uint64_t *)v47)
          return 1;
      }
      return 0;
    case 51:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A578((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v490 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v490 = *(_QWORD *)(v490 + 8);
        result = sub_22E65B428((uint64_t)a1, v490, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v491 = *(_DWORD *)v4 & 0x7F, v491 <= 0x39) && ((1 << v491) & 0x3F0003E01011066) != 0
        || v491 - 70 <= 0xD && ((1 << (v491 - 70)) & 0x2803) != 0
        || v491 - 19 <= 4)
      {
        v492 = sub_22EFCAE04(a2);
      }
      else
      {
        v492 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v492);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v494 = *v493;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v496 = *(_QWORD *)v495 + 8 * *(unsigned int *)(v495 + 8);
      }
      else
      {
        v496 = 0;
      }
      if (v494 == (uint64_t *)v496)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v494) & 1) != 0)
      {
        if (++v494 == (uint64_t *)v496)
          return 1;
      }
      return 0;
    case 52:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v467 = *v466;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v469 = *(_QWORD *)v468 + 8 * *(unsigned int *)(v468 + 8);
      }
      else
      {
        v469 = 0;
      }
      if (v467 == (uint64_t *)v469)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v467) & 1) != 0)
      {
        if (++v467 == (uint64_t *)v469)
          return 1;
      }
      return 0;
    case 53:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v87 = *v86;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v89 = *(_QWORD *)v88 + 8 * *(unsigned int *)(v88 + 8);
      }
      else
      {
        v89 = 0;
      }
      if (v87 == (uint64_t *)v89)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v87) & 1) != 0)
      {
        if (++v87 == (uint64_t *)v89)
          return 1;
      }
      return 0;
    case 54:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v453 = *v452;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v455 = *(_QWORD *)v454 + 8 * *(unsigned int *)(v454 + 8);
      }
      else
      {
        v455 = 0;
      }
      if (v453 == (uint64_t *)v455)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v453) & 1) != 0)
      {
        if (++v453 == (uint64_t *)v455)
          return 1;
      }
      return 0;
    case 55:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v463 = *v462;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v465 = *(_QWORD *)v464 + 8 * *(unsigned int *)(v464 + 8);
      }
      else
      {
        v465 = 0;
      }
      if (v463 == (uint64_t *)v465)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v463) & 1) != 0)
      {
        if (++v463 == (uint64_t *)v465)
          return 1;
      }
      return 0;
    case 56:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v97 = *v96;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
      }
      else
      {
        v99 = 0;
      }
      if (v97 == (uint64_t *)v99)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v97) & 1) != 0)
      {
        if (++v97 == (uint64_t *)v99)
          return 1;
      }
      return 0;
    case 57:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A644((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v404 = *v403;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v406 = *(_QWORD *)v405 + 8 * *(unsigned int *)(v405 + 8);
      }
      else
      {
        v406 = 0;
      }
      if (v404 == (uint64_t *)v406)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v404) & 1) != 0)
      {
        if (++v404 == (uint64_t *)v406)
          return 1;
      }
      return 0;
    case 58:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A578((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v173 = *(_DWORD *)v4 & 0x7F;
      v174 = v173 > 0x39 || ((1 << v173) & 0x3F0003E01011066) == 0;
      v175 = !v174 || v173 - 70 <= 0xD && ((1 << (v173 - 70)) & 0x2803) != 0 || v173 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v175);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v177 = *v176;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v179 = *(_QWORD *)v178 + 8 * *(unsigned int *)(v178 + 8);
      }
      else
      {
        v179 = 0;
      }
      if (v177 == (uint64_t *)v179)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v177) & 1) != 0)
      {
        if (++v177 == (uint64_t *)v179)
          return 1;
      }
      return 0;
    case 59:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66A578((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v414 = *(_QWORD *)(a2 + 72);
      if (v414 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v415 = v414 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v415)
          v415 = *(_QWORD *)(v415 + 8);
        result = sub_22E65B428((uint64_t)a1, v415, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v416 = *(_DWORD *)v4 & 0x7F, v416 <= 0x39) && ((1 << v416) & 0x3F0003E01011066) != 0
        || v416 - 70 <= 0xD && ((1 << (v416 - 70)) & 0x2803) != 0
        || v416 - 19 <= 4)
      {
        v417 = sub_22EFCAE04(a2);
      }
      else
      {
        v417 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v417);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 60:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66AA08((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v206 = *(_DWORD *)v4 & 0x7F;
      v207 = v206 > 0x39 || ((1 << v206) & 0x3F0003E01011066) == 0;
      v208 = !v207 || v206 - 70 <= 0xD && ((1 << (v206 - 70)) & 0x2803) != 0 || v206 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v208);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v210 = *v209;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v212 = *(_QWORD *)v211 + 8 * *(unsigned int *)(v211 + 8);
      }
      else
      {
        v212 = 0;
      }
      if (v210 == (uint64_t *)v212)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v210) & 1) != 0)
      {
        if (++v210 == (uint64_t *)v212)
          return 1;
      }
      return 0;
    case 61:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66AA08((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v315 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v315)
        goto LABEL_560;
      v316 = (_QWORD *)(a2 + 104);
      v317 = 8 * v315;
      while ((sub_22E654C58(a1, *v316) & 1) != 0)
      {
        ++v316;
        v317 -= 8;
        if (!v317)
        {
LABEL_560:
          v318 = *(_DWORD *)v4 & 0x7F;
          v319 = v318 > 0x39 || ((1 << v318) & 0x3F0003E01011066) == 0;
          if (v319
            && (v318 - 70 <= 0xD ? (v600 = ((1 << (v318 - 70)) & 0x2803) == 0) : (v600 = 1), v600 && v318 - 19 > 4))
          {
            v320 = 0;
          }
          else
          {
            v320 = sub_22EFCAE04(a2);
          }
          result = sub_22E669DD4((uint64_t)a1, v320);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v322 = *v321;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v324 = *(_QWORD *)v323 + 8 * *(unsigned int *)(v323 + 8);
          }
          else
          {
            v324 = 0;
          }
          if (v322 == (uint64_t *)v324)
            return 1;
          while ((sub_22E669E70((uint64_t)a1, *v322) & 1) != 0)
          {
            if (++v322 == (uint64_t *)v324)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66AA08((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v333 = *(_DWORD *)v4 & 0x7F;
      v334 = v333 > 0x39 || ((1 << v333) & 0x3F0003E01011066) == 0;
      v335 = !v334 || v333 - 70 <= 0xD && ((1 << (v333 - 70)) & 0x2803) != 0 || v333 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v335);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v337 = *v336;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v339 = *(_QWORD *)v338 + 8 * *(unsigned int *)(v338 + 8);
      }
      else
      {
        v339 = 0;
      }
      if (v337 == (uint64_t *)v339)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v337) & 1) != 0)
      {
        if (++v337 == (uint64_t *)v339)
          return 1;
      }
      return 0;
    case 63:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66AA08((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v248 = *(_DWORD *)v4 & 0x7F;
      v249 = v248 > 0x39 || ((1 << v248) & 0x3F0003E01011066) == 0;
      v250 = !v249 || v248 - 70 <= 0xD && ((1 << (v248 - 70)) & 0x2803) != 0 || v248 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v250);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v252 = *v251;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v254 = *(_QWORD *)v253 + 8 * *(unsigned int *)(v253 + 8);
      }
      else
      {
        v254 = 0;
      }
      if (v252 == (uint64_t *)v254)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v252) & 1) != 0)
      {
        if (++v252 == (uint64_t *)v254)
          return 1;
      }
      return 0;
    case 64:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E66AA08((uint64_t)a1, a2);
      if (!(_DWORD)result)
        return result;
      v213 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v213 != 1024)
        goto LABEL_378;
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v213 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_378:
      if (v213 != 1024 && v213 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v214 = sub_22EFBC5B4(a2);
        v215 = v214;
        if (v214 && (*(_BYTE *)v214 & 0xFE) == 0xAC)
          v215 = *(_QWORD *)(v214 + 16);
        result = sub_22E65B428((uint64_t)a1, v215, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v216 = *(_DWORD *)v4 & 0x7F, v216 <= 0x39) && ((1 << v216) & 0x3F0003E01011066) != 0
        || v216 - 70 <= 0xD && ((1 << (v216 - 70)) & 0x2803) != 0
        || v216 - 19 <= 4)
      {
        v217 = sub_22EFCAE04(a2);
      }
      else
      {
        v217 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v217);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v219 = *v218;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v221 = *(_QWORD *)v220 + 8 * *(unsigned int *)(v220 + 8);
      }
      else
      {
        v221 = 0;
      }
      if (v219 == (uint64_t *)v221)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v219) & 1) != 0)
      {
        if (++v219 == (uint64_t *)v221)
          return 1;
      }
      return 0;
    case 65:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v329 = *(unint64_t ***)(a2 + 120);
      if (v329)
      {
        if (*v329)
        {
          result = sub_22E667C68((uint64_t)a1, **v329, (uint64_t)(*v329 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v330 = *(_QWORD *)(a2 + 56);
      if ((v330 & 4) != 0)
      {
        v539 = (uint64_t *)(v330 & 0xFFFFFFFFFFFFFFF8);
        v331 = *v539;
        v332 = v539[1];
      }
      else
      {
        v331 = 0;
        v332 = 0;
      }
      result = sub_22E667B28((uint64_t)a1, v331, v332);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v540 = *(_DWORD *)v4 & 0x7F;
      if (v540 <= 0x39 && ((1 << v540) & 0x3F0003E01011066) != 0
        || v540 - 70 <= 0xD && ((1 << (v540 - 70)) & 0x2803) != 0
        || v540 - 19 <= 4)
      {
        v541 = sub_22EFCAE04(a2);
      }
      else
      {
        v541 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v541);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v543 = *v542;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v545 = *(_QWORD *)v544 + 8 * *(unsigned int *)(v544 + 8);
      }
      else
      {
        v545 = 0;
      }
      if (v543 == (uint64_t *)v545)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v543) & 1) != 0)
      {
        if (++v543 == (uint64_t *)v545)
          return 1;
      }
      return 0;
    case 66:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v54 = *(_QWORD *)(a2 + 424);
      if (!v54)
        goto LABEL_85;
      v55 = *(_DWORD *)(v54 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v55)
        goto LABEL_85;
      v56 = (_QWORD *)(v54 + 16);
      v57 = 8 * v55;
      while ((sub_22E654C58(a1, *v56) & 1) != 0)
      {
        ++v56;
        v57 -= 8;
        if (!v57)
        {
LABEL_85:
          v58 = *(_QWORD *)(a2 + 432);
          v59 = *(unsigned int *)(v58 + 8);
          if ((_DWORD)v59)
          {
            v60 = v58 + 16;
            while ((sub_22E668A04((uint64_t)a1, v60) & 1) != 0)
            {
              v60 += 32;
              if (!--v59)
                goto LABEL_89;
            }
          }
          else
          {
LABEL_89:
            result = sub_22E66AA08((uint64_t)a1, a2);
            if (!(_DWORD)result)
              return result;
            v61 = *(_DWORD *)v4 & 0x7F;
            v62 = v61 > 0x39 || ((1 << v61) & 0x3F0003E01011066) == 0;
            if (v62
              && (v61 - 70 <= 0xD ? (v601 = ((1 << (v61 - 70)) & 0x2803) == 0) : (v601 = 1), v601 && v61 - 19 > 4))
            {
              v63 = 0;
            }
            else
            {
              v63 = sub_22EFCAE04(a2);
            }
            result = sub_22E669DD4((uint64_t)a1, v63);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v65 = *v64;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v67 = *(_QWORD *)v66 + 8 * *(unsigned int *)(v66 + 8);
            }
            else
            {
              v67 = 0;
            }
            if (v65 == (uint64_t *)v67)
              return 1;
            while ((sub_22E669E70((uint64_t)a1, *v65) & 1) != 0)
            {
              if (++v65 == (uint64_t *)v67)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v142 = *(_DWORD *)v4 & 0x7F;
      v143 = v142 > 0x39 || ((1 << v142) & 0x3F0003E01011066) == 0;
      v144 = !v143 || v142 - 70 <= 0xD && ((1 << (v142 - 70)) & 0x2803) != 0 || v142 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E669DD4((uint64_t)a1, v144);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v146 = *v145;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v148 = *(_QWORD *)v147 + 8 * *(unsigned int *)(v147 + 8);
      }
      else
      {
        v148 = 0;
      }
      if (v146 == (uint64_t *)v148)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v146) & 1) != 0)
      {
        if (++v146 == (uint64_t *)v148)
          return 1;
      }
      return 0;
    case 68:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v503 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v503 <= 0x39 && ((1 << v503) & 0x3F0003E01011066) != 0
        || (v503 - 70 <= 0xD ? (v587 = ((1 << (v503 - 70)) & 0x2803) == 0) : (v587 = 1), !v587 || v503 - 19 <= 4))
      {
        v504 = sub_22EFCAE04(a2);
      }
      else
      {
        v504 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v504);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v506 = *v505;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v508 = *(_QWORD *)v507 + 8 * *(unsigned int *)(v507 + 8);
      }
      else
      {
        v508 = 0;
      }
      if (v506 == (uint64_t *)v508)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v506) & 1) != 0)
      {
        if (++v506 == (uint64_t *)v508)
          return 1;
      }
      return 0;
    case 69:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v122 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v122 <= 0x39 && ((1 << v122) & 0x3F0003E01011066) != 0
        || (v122 - 70 <= 0xD ? (v574 = ((1 << (v122 - 70)) & 0x2803) == 0) : (v574 = 1), !v574 || v122 - 19 <= 4))
      {
        v123 = sub_22EFCAE04(a2);
      }
      else
      {
        v123 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v123);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v125 = *v124;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v127 = *(_QWORD *)v126 + 8 * *(unsigned int *)(v126 + 8);
      }
      else
      {
        v127 = 0;
      }
      if (v125 == (uint64_t *)v127)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v125) & 1) != 0)
      {
        if (++v125 == (uint64_t *)v127)
          return 1;
      }
      return 0;
    case 70:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v25 = *(_DWORD **)(a2 + 56);
      v28 = *v25;
      v27 = (uint64_t *)(v25 + 4);
      v26 = v28;
      if (!v28)
        return (sub_22E6683D0((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v29 = 8 * v26;
      while ((sub_22E668B1C((uint64_t)a1, *v27) & 1) != 0)
      {
        ++v27;
        v29 -= 8;
        if (!v29)
          return (sub_22E6683D0((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v74 = *(_QWORD *)(a2 + 96);
        if (!v74)
          return (sub_22E6683D0((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E65B428((uint64_t)a1, v74, 0);
        if ((_DWORD)result)
          return (sub_22E6683D0((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v456 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v456 <= 0x39 && ((1 << v456) & 0x3F0003E01011066) != 0
        || (v456 - 70 <= 0xD ? (v583 = ((1 << (v456 - 70)) & 0x2803) == 0) : (v583 = 1), !v583 || v456 - 19 <= 4))
      {
        v457 = sub_22EFCAE04(a2);
      }
      else
      {
        v457 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v457);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v459 = *v458;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v461 = *(_QWORD *)v460 + 8 * *(unsigned int *)(v460 + 8);
      }
      else
      {
        v461 = 0;
      }
      if (v459 == (uint64_t *)v461)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v459) & 1) != 0)
      {
        if (++v459 == (uint64_t *)v461)
          return 1;
      }
      return 0;
    case 73:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v476 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v476 <= 0x39 && ((1 << v476) & 0x3F0003E01011066) != 0
        || (v476 - 70 <= 0xD ? (v585 = ((1 << (v476 - 70)) & 0x2803) == 0) : (v585 = 1), !v585 || v476 - 19 <= 4))
      {
        v477 = sub_22EFCAE04(a2);
      }
      else
      {
        v477 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v477);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v479 = *v478;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v481 = *(_QWORD *)v480 + 8 * *(unsigned int *)(v480 + 8);
      }
      else
      {
        v481 = 0;
      }
      if (v479 == (uint64_t *)v481)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v479) & 1) != 0)
      {
        if (++v479 == (uint64_t *)v481)
          return 1;
      }
      return 0;
    case 74:
      sub_22E66A40C(a1, (_DWORD *)a2);
      if (!sub_22E667B28((uint64_t)a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v482 = *(_DWORD *)(a2 + 24);
      v483 = *(_QWORD *)(a2 + 80);
      v613 = *(_QWORD *)(a2 + 40);
      v614 = v482;
      v615 = v483;
      if (!sub_22E667BB0((uint64_t)a1, &v613))
        return 0;
      if ((v484 = *(_DWORD *)v4 & 0x7F, v484 <= 0x39) && ((1 << v484) & 0x3F0003E01011066) != 0
        || v484 - 70 <= 0xD && ((1 << (v484 - 70)) & 0x2803) != 0
        || v484 - 19 <= 4)
      {
        v485 = sub_22EFCAE04(a2);
      }
      else
      {
        v485 = 0;
      }
      if (!sub_22E669DD4((uint64_t)a1, v485))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v487 = *v486;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v489 = *(_QWORD *)v488 + 8 * *(unsigned int *)(v488 + 8);
      }
      else
      {
        v489 = 0;
      }
      while (2)
      {
        if (v487 == (uint64_t *)v489)
          return 1;
        if ((sub_22E669E70((uint64_t)a1, *v487) & 1) != 0)
        {
          ++v487;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v100 = *(unsigned int **)(a2 + 40);
      v101 = *v100;
      v102 = v100[1];
      if (!(_DWORD)v102)
        goto LABEL_169;
      v103 = (uint64_t *)&v100[2 * v101 + 4];
      v104 = 8 * v102;
      while ((sub_22E65B428((uint64_t)a1, *v103, 0) & 1) != 0)
      {
        ++v103;
        v104 -= 8;
        if (!v104)
        {
          v100 = *(unsigned int **)(a2 + 40);
          v101 = *v100;
LABEL_169:
          if ((_DWORD)v101)
          {
            v105 = (uint64_t *)(v100 + 4);
            v106 = 8 * v101;
            while ((sub_22E668B1C((uint64_t)a1, *v105) & 1) != 0)
            {
              ++v105;
              v106 -= 8;
              if (!v106)
                goto LABEL_173;
            }
          }
          else
          {
LABEL_173:
            v107 = *(_DWORD *)v4 & 0x7F;
            v108 = v107 > 0x39 || ((1 << v107) & 0x3F0003E01011066) == 0;
            if (v108
              && (v107 - 70 <= 0xD ? (v597 = ((1 << (v107 - 70)) & 0x2803) == 0) : (v597 = 1), v597 && v107 - 19 > 4))
            {
              v109 = 0;
            }
            else
            {
              v109 = sub_22EFCAE04(a2);
            }
            result = sub_22E669DD4((uint64_t)a1, v109);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v111 = *v110;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v113 = *(_QWORD *)v112 + 8 * *(unsigned int *)(v112 + 8);
            }
            else
            {
              v113 = 0;
            }
            if (v111 == (uint64_t *)v113)
              return 1;
            while ((sub_22E669E70((uint64_t)a1, *v111) & 1) != 0)
            {
              if (++v111 == (uint64_t *)v113)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v299 = *(_DWORD **)(a2 + 40);
      v302 = *v299;
      v301 = (uint64_t *)(v299 + 4);
      v300 = v302;
      if (!v302)
        goto LABEL_535;
      v303 = 8 * v300;
      while ((sub_22E668B1C((uint64_t)a1, *v301) & 1) != 0)
      {
        ++v301;
        v303 -= 8;
        if (!v303)
        {
LABEL_535:
          v304 = *(_DWORD *)v4 & 0x7F;
          v305 = v304 > 0x39 || ((1 << v304) & 0x3F0003E01011066) == 0;
          if (v305
            && (v304 - 70 <= 0xD ? (v596 = ((1 << (v304 - 70)) & 0x2803) == 0) : (v596 = 1), v596 && v304 - 19 > 4))
          {
            v306 = 0;
          }
          else
          {
            v306 = sub_22EFCAE04(a2);
          }
          result = sub_22E669DD4((uint64_t)a1, v306);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v308 = *v307;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v310 = *(_QWORD *)v309 + 8 * *(unsigned int *)(v309 + 8);
          }
          else
          {
            v310 = 0;
          }
          if (v308 == (uint64_t *)v310)
            return 1;
          while ((sub_22E669E70((uint64_t)a1, *v308) & 1) != 0)
          {
            if (++v308 == (uint64_t *)v310)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v30 = *(unsigned int **)(a2 + 40);
      v31 = v30[1];
      if (!(_DWORD)v31)
        goto LABEL_39;
      v32 = (uint64_t *)&v30[2 * *v30 + 4];
      v33 = 8 * v31;
      while ((sub_22E65B428((uint64_t)a1, *v32, 0) & 1) != 0)
      {
        ++v32;
        v33 -= 8;
        if (!v33)
        {
LABEL_39:
          v34 = *(_DWORD *)v4 & 0x7F;
          v35 = v34 > 0x39 || ((1 << v34) & 0x3F0003E01011066) == 0;
          if (v35 && (v34 - 70 <= 0xD ? (v595 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v595 = 1), v595 && v34 - 19 > 4))
            v36 = 0;
          else
            v36 = sub_22EFCAE04(a2);
          result = sub_22E669DD4((uint64_t)a1, v36);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v38 = *v37;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v40 = *(_QWORD *)v39 + 8 * *(unsigned int *)(v39 + 8);
          }
          else
          {
            v40 = 0;
          }
          if (v38 == (uint64_t *)v40)
            return 1;
          while ((sub_22E669E70((uint64_t)a1, *v38) & 1) != 0)
          {
            if (++v38 == (uint64_t *)v40)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v497 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v497 <= 0x39 && ((1 << v497) & 0x3F0003E01011066) != 0
        || (v497 - 70 <= 0xD ? (v586 = ((1 << (v497 - 70)) & 0x2803) == 0) : (v586 = 1), !v586 || v497 - 19 <= 4))
      {
        v498 = sub_22EFCAE04(a2);
      }
      else
      {
        v498 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v498);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v500 = *v499;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v502 = *(_QWORD *)v501 + 8 * *(unsigned int *)(v501 + 8);
      }
      else
      {
        v502 = 0;
      }
      if (v500 == (uint64_t *)v502)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v500) & 1) != 0)
      {
        if (++v500 == (uint64_t *)v502)
          return 1;
      }
      return 0;
    case 79:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v19 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v19 <= 0x39 && ((1 << v19) & 0x3F0003E01011066) != 0
        || (v19 - 70 <= 0xD ? (v570 = ((1 << (v19 - 70)) & 0x2803) == 0) : (v570 = 1), !v570 || v19 - 19 <= 4))
      {
        v20 = sub_22EFCAE04(a2);
      }
      else
      {
        v20 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v20);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v22 = *v21;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v24 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
      }
      else
      {
        v24 = 0;
      }
      if (v22 == (uint64_t *)v24)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v22) & 1) != 0)
      {
        if (++v22 == (uint64_t *)v24)
          return 1;
      }
      return 0;
    case 80:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v68 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v68 <= 0x39 && ((1 << v68) & 0x3F0003E01011066) != 0
        || (v68 - 70 <= 0xD ? (v572 = ((1 << (v68 - 70)) & 0x2803) == 0) : (v572 = 1), !v572 || v68 - 19 <= 4))
      {
        v69 = sub_22EFCAE04(a2);
      }
      else
      {
        v69 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v69);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v71 = *v70;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
      }
      else
      {
        v73 = 0;
      }
      if (v71 == (uint64_t *)v73)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v71) & 1) != 0)
      {
        if (++v71 == (uint64_t *)v73)
          return 1;
      }
      return 0;
    case 81:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v186 = sub_22EFCAE04(a2);
      result = sub_22E669DD4((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E669E70((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 82:
      sub_22E66A40C(a1, (_DWORD *)a2);
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E65B428((uint64_t)a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v180 = *(_DWORD *)v4 & 0x7F, v180 <= 0x39) && ((1 << v180) & 0x3F0003E01011066) != 0
        || v180 - 70 <= 0xD && ((1 << (v180 - 70)) & 0x2803) != 0
        || v180 - 19 <= 4)
      {
        v181 = sub_22EFCAE04(a2);
      }
      else
      {
        v181 = 0;
      }
      result = sub_22E669DD4((uint64_t)a1, v181);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v183 = *v182;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v185 = *(_QWORD *)v184 + 8 * *(unsigned int *)(v184 + 8);
      }
      else
      {
        v185 = 0;
      }
      if (v183 == (uint64_t *)v185)
        return 1;
      break;
    case 83:
      sub_22E66A40C(a1, (_DWORD *)a2);
      v13 = *(_QWORD *)(a2 + 88);
      v14 = *(_BYTE **)(v13 + 19016);
      v15 = *(_BYTE **)(v13 + 19024);
      v16 = v15 - v14;
      if (v15 == v14)
      {
        v17 = 0;
        v18 = 0;
      }
      else
      {
        if (v16 < 0)
          abort();
        v17 = (char *)operator new(v15 - v14);
        memmove(v17, v14, v16);
        v18 = &v17[8 * (v16 >> 3)];
      }
      if (v18 - v17 == 8 && (*(_DWORD *)(*(_QWORD *)v17 + 28) & 0x7F) == 0x53)
      {
        operator delete(v17);
        result = sub_22E669DD4((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v17 != v18)
        {
          v546 = v17;
          do
          {
            v547 = *(_QWORD *)v546;
            if ((*(_DWORD *)(*(_QWORD *)v546 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v546 + 28) & 0x7Fu) - 35 > 2
               || (v548 = *(_QWORD *)(v547 + 128)) == 0
               || ((*(unsigned __int16 *)(v548 + 8) | (*(unsigned __int8 *)(v548 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E654C58(a1, v547))
            {
              if (v17)
                operator delete(v17);
              return 0;
            }
            v546 += 8;
          }
          while (v546 != v18);
        }
        if (v17)
          operator delete(v17);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v550 = *v549;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v552 = *(_QWORD *)v551 + 8 * *(unsigned int *)(v551 + 8);
        }
        else
        {
          v552 = 0;
        }
        for (; v550 != (uint64_t *)v552; ++v550)
        {
          if ((sub_22E669E70((uint64_t)a1, *v550) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E669E70((uint64_t)a1, *v183) & 1) != 0)
  {
    if (++v183 == (uint64_t *)v185)
      return 1;
  }
  return 0;
}

BOOL sub_22E659650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;

  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
    return 1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 152);
  if ((*(_BYTE *)(v4 + 68) & 0x20) != 0
    && ((*(_WORD *)(v4 + 96) & 0x80) != 0 && !sub_22E466E5C(a2) && !sub_22E462B18(a2)
     || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 96) & 0x80) == 0
     && (sub_22E462B18(a2) || !sub_22F295B40(a2) && sub_22E466E5C(a2))))
  {
    return 1;
  }
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  sub_22F0D5A50(v7);
  v9 = sub_22F1E361C(v6, v8);
  if (v9)
    v10 = v9 == 3;
  else
    v10 = 1;
  return !v10;
}

void sub_22E659728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  void *v15;
  size_t v16;
  size_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;

  if (!sub_22E659650(a1, a2))
  {
    v30 = 0uLL;
    v31 = 0;
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = MEMORY[0x24BED83D8] + 16;
    v29 = &v30;
    llvm::raw_ostream::SetBufferAndMode();
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 152);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992);
    *(_QWORD *)&v18 = *(_QWORD *)(*(_QWORD *)a1 + 3536);
    *((_QWORD *)&v18 + 1) = v11;
    v19 = v10;
    v20 = 0;
    sub_22E673048(&v18, a2, (llvm::raw_ostream *)&v21);
    if (v25 != v23)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v21);
    v12 = HIBYTE(v31) & 0x7F;
    if (v31 < 0)
      v12 = *((_QWORD *)&v30 + 1);
    if (v12)
    {
      sub_22E654878(a1, a3, a4, a5);
      v13 = *(_BYTE *)(a1 + 31);
      v14 = v13;
      if (v13 >= 0)
        v15 = (void *)(a1 + 8);
      else
        v15 = *(void **)(a1 + 8);
      v16 = v13 & 0x7F;
      if (v14 >= 0)
        v17 = v16;
      else
        v17 = *(_QWORD *)(a1 + 16);
      sub_22E67152C(*(_QWORD *)(*(_QWORD *)a1 + 3536), *(_QWORD *)(a1 + 32), v15, v17, *(_QWORD *)(a1 + 56), &v30, 0);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
  }
}

uint64_t *sub_22E65988C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  llvm::LLVMContext *v10;
  uint64_t Declaration;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x24BDAC8D0];
  v19 = a3;
  if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x180000000000) == 0x80000000000)
  {
    v5 = result;
    result = (uint64_t *)result[8];
    if (result && *(_QWORD *)(a2 + 48) != 0)
    {
      sub_22E65B0E8(result, &v19);
      llvm::Type::getInt8PtrTy(*(llvm::Type **)(*v5 + 232), 0);
      v20[0] = llvm::ConstantExpr::getBitCast();
      llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 64), v8);
      v20[1] = llvm::ConstantInt::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 64), v9);
      v20[2] = llvm::ConstantInt::get();
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 64), v10);
      v20[3] = llvm::ConstantInt::get();
      v20[4] = a4;
      if (a4)
      {
        Declaration = llvm::Intrinsic::getDeclaration();
        v12 = Declaration;
        if (Declaration)
          v13 = *(_QWORD *)(Declaration + 24);
        else
          v13 = 0;
        v18 = 257;
        v15 = (uint64_t *)a2;
        v16 = 5;
      }
      else
      {
        v14 = llvm::Intrinsic::getDeclaration();
        v12 = v14;
        if (v14)
          v13 = *(_QWORD *)(v14 + 24);
        else
          v13 = 0;
        v18 = 257;
        v15 = (uint64_t *)a2;
        v16 = 4;
      }
      return (uint64_t *)sub_22E462B78(v15, v13, v12, (uint64_t)v20, v16, (uint64_t)&v17, 0);
    }
  }
  return result;
}

_QWORD *sub_22E659A38(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  llvm::LLVMContext *v15;
  uint64_t Int64Ty;
  llvm::LLVMContext *v17;
  llvm::LLVMContext *v18;
  uint64_t Declaration;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  __int16 v26;
  _QWORD v27[6];

  v27[5] = *MEMORY[0x24BDAC8D0];
  if (byte_253E4D288)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5 && a5 != 0)
  {
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
      if (*(unsigned __int8 *)(a5 + 16) >= 0x15u)
      {
        v11 = result;
        if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x180000000000) == 0x80000000000 && result[8])
        {
          v12 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 48) = *(_QWORD *)(a4 + 40);
          *(_QWORD *)(a2 + 56) = a4 + 24;
          v27[0] = *(_QWORD *)(a4 + 48);
          if (v27[0])
          {
            llvm::MetadataTracking::track();
            v13 = v27[0];
          }
          else
          {
            v13 = 0;
          }
          sub_22E3CF21C(a2, 0, v13);
          if (v27[0])
            llvm::MetadataTracking::untrack();
          llvm::Type::getInt8PtrTy(*(llvm::Type **)(a2 + 64), 0);
          v27[0] = llvm::ConstantExpr::getBitCast();
          llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 64), v14);
          v27[1] = llvm::ConstantInt::get();
          Int64Ty = llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 64), v15);
          v26 = 257;
          v27[2] = sub_22E3C1740((uint64_t *)a2, 47, a5, Int64Ty, (uint64_t)v25);
          llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 64), v17);
          v27[3] = llvm::ConstantInt::get();
          ++*((_DWORD *)v11 + a3 + 10);
          llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 64), v18);
          v27[4] = llvm::ConstantInt::get();
          Declaration = llvm::Intrinsic::getDeclaration();
          if (Declaration)
            v20 = *(_QWORD *)(Declaration + 24);
          else
            v20 = 0;
          v26 = 257;
          sub_22E462B78((uint64_t *)a2, v20, Declaration, (uint64_t)v27, 5, (uint64_t)v25, 0);
          return (_QWORD *)sub_22E3CB840(a2, v8, v12);
        }
        else if (*(_QWORD *)(*result + 848))
        {
          if (result[11] != result[12])
          {
            v21 = *(_QWORD *)(result[10] + 24);
            if (v21)
            {
              v22 = result + 5;
              v23 = 32;
              if (!a3)
                v23 = 8;
              v24 = 24;
              if (!a3)
                v24 = 0;
              if (*((_DWORD *)result + a3 + 10) < -1431655765
                                                 * ((*(_QWORD *)(v21 + v23) - *(_QWORD *)(v21 + v24)) >> 3))
              {
                result = (_QWORD *)llvm::annotateValueSite();
                ++*((_DWORD *)v22 + a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E659CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];

  if (!(a3 | a2))
    return 0;
  v6[1] = v3;
  v6[2] = v4;
  v6[0] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  return llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)v6);
}

uint64_t sub_22E659D60(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  char v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 3992) == *(_QWORD *)(a1 + 4000))
    return 0;
  v4 = sub_22E3CF180(a1 + 3904, a2);
  if (!v5 || !v4)
    return 0;
  v6 = v4 >= a3;
  v7 = v4 - a3;
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  return sub_22E659CE4(a1, a3, v8);
}

void sub_22E659DC8(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD v11[20];

  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_12;
      case 0x13:
      case 0x14:
        v11[0] = a2;
        if (*(_BYTE *)(a1 + 8))
        {
          v5 = *(_QWORD *)(a1 + 16);
          sub_22F29E634(*(uint64_t **)(a1 + 24), v11)[1] = v5;
          *(_BYTE *)(a1 + 8) = 0;
        }
        v6 = *(_QWORD *)(a1 + 16);
        sub_22E659DC8(a1);
        v7 = *(_QWORD **)a1;
        v11[0] = a2;
        v8 = (uint64_t *)v7[8];
        if (v8 && v7[11] != v7[12])
          v9 = *(_QWORD *)(v7[11] + 8 * *((unsigned int *)sub_22E65B0E8(v8, v11) + 2));
        else
          v9 = 0;
        *(_QWORD *)(a1 + 16) = v9;
        v10 = *(uint64_t **)(a1 + 24);
        v11[0] = *((_QWORD *)a2 + 3);
        sub_22F29E634(v10, v11)[1] = v9;
        sub_22E659DC8(a1);
        *(_QWORD *)(a1 + 16) = v9 + v6 - *(_QWORD *)(a1 + 16);
        *(_BYTE *)(a1 + 8) = 1;
        return;
      default:
        goto LABEL_11;
    }
  }
  if (!a2 || v4 != 233)
LABEL_11:
    __asm { BR              X10 }
LABEL_12:
  sub_22E65AB00(a1, (uint64_t)a2);
}

void sub_22E65A1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  *(_BYTE *)(v10 + 8) = 0;
  v12 = *(_QWORD **)v10;
  a10 = v11;
  v13 = (uint64_t *)v12[8];
  if (v13 && v12[11] != v12[12])
    v14 = *(_QWORD *)(v12[11] + 8 * *((unsigned int *)sub_22E65B0E8(v13, &a10) + 2));
  else
    v14 = 0;
  *(_QWORD *)(v10 + 16) = v14;
  v15 = *(uint64_t **)(v10 + 24);
  a10 = v11;
  sub_22F29E634(v15, &a10)[1] = v14;
  JUMPOUT(0x22E65A168);
}

void sub_22E65A208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 *a10)
{
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  a10 = (unsigned __int8 *)v11;
  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 16);
    sub_22F29E634(*(uint64_t **)(v10 + 24), &a10)[1] = v12;
    *(_BYTE *)(v10 + 8) = 0;
  }
  v13 = v11[2];
  if (v13)
    sub_22E659DC8(v10, v13);
  sub_22E659DC8(v10, v11[8]);
  sub_22E659DC8(v10, v11[3]);
  sub_22E659DC8(v10, v11[4]);
  sub_22E659DC8(v10, v11[5]);
  v14 = *(_QWORD *)(v10 + 16);
  v15 = *(_DWORD *)(v10 + 40);
  if (v15 >= *(_DWORD *)(v10 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v10 + 40);
  }
  v16 = 0;
  v17 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v15);
  *v17 = 0;
  v17[1] = 0;
  ++*(_DWORD *)(v10 + 40);
  v18 = *(_QWORD **)v10;
  a10 = (unsigned __int8 *)v11;
  v19 = (uint64_t *)v18[8];
  if (v19)
  {
    if (v18[11] == v18[12])
      v16 = 0;
    else
      v16 = *(_QWORD *)(v18[11] + 8 * *((unsigned int *)sub_22E65B0E8(v19, &a10) + 2));
  }
  *(_QWORD *)(v10 + 16) = v16;
  v20 = *(uint64_t **)(v10 + 24);
  a10 = v11[9];
  sub_22F29E634(v20, &a10)[1] = v16;
  sub_22E659DC8(v10, v11[9]);
  v21 = *(uint64_t **)(v10 + 24);
  v22 = *(unsigned int *)(v10 + 40);
  v23 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v22 - 8);
  *(_DWORD *)(v10 + 40) = v22 - 1;
  v24 = v23 + *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v24;
  a10 = v11[7];
  sub_22F29E634(v21, &a10)[1] = v24;
  sub_22E659DC8(v10, v11[7]);
  v25 = v24 + v14;
  *(_QWORD *)(v10 + 16) = v25;
  v26 = *(uint64_t **)(v10 + 24);
  a10 = v11[6];
  sub_22F29E634(v26, &a10)[1] = v25;
  sub_22E659DC8(v10, v11[6]);
  JUMPOUT(0x22E65A1BCLL);
}

void sub_22E65A2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a10 = v11;
  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 16);
    sub_22F29E634(*(uint64_t **)(v10 + 24), &a10)[1] = v12;
    *(_BYTE *)(v10 + 8) = 0;
  }
  v13 = *(_QWORD **)v10;
  a10 = v11;
  v14 = (uint64_t *)v13[8];
  if (v14 && v13[11] != v13[12])
    v15 = *(_QWORD *)(v13[11] + 8 * *((unsigned int *)sub_22E65B0E8(v14, &a10) + 2));
  else
    v15 = 0;
  v16 = *(_DWORD *)(v10 + 40);
  if (v16 >= *(_DWORD *)(v10 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v10 + 40);
  }
  v17 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v16);
  *v17 = 0;
  v17[1] = 0;
  ++*(_DWORD *)(v10 + 40);
  v18 = *(uint64_t **)(v10 + 24);
  v19 = *(_QWORD *)(v10 + 16) + v15;
  *(_QWORD *)(v10 + 16) = v19;
  a10 = *(_QWORD *)(v11 + 8);
  sub_22F29E634(v18, &a10)[1] = v19;
  sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 8));
  v20 = *(uint64_t **)(v10 + 24);
  v21 = *(unsigned int *)(v10 + 40);
  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v21 - 8);
  *(_DWORD *)(v10 + 40) = v21 - 1;
  v23 = v22 + *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v23;
  a10 = *(_QWORD *)(v11 + 16);
  sub_22F29E634(v20, &a10)[1] = v23;
  sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 16));
  JUMPOUT(0x22E65A1BCLL);
}

void sub_22E65A2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  a10 = v11;
  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 16);
    sub_22F29E634(*(uint64_t **)(v10 + 24), &a10)[1] = v12;
    *(_BYTE *)(v10 + 8) = 0;
  }
  v13 = *(unsigned __int8 **)(v11 + 8);
  if (v13)
    sub_22E659DC8(v10, v13);
  v14 = *(_QWORD *)(v10 + 16);
  v15 = *(_DWORD *)(v10 + 40);
  if (v15 >= *(_DWORD *)(v10 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v10 + 40);
  }
  v16 = 0;
  v17 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v15);
  *v17 = 0;
  v17[1] = 0;
  ++*(_DWORD *)(v10 + 40);
  v18 = *(_QWORD **)v10;
  a10 = v11;
  v19 = (uint64_t *)v18[8];
  if (v19)
  {
    if (v18[11] == v18[12])
      v16 = 0;
    else
      v16 = *(_QWORD *)(v18[11] + 8 * *((unsigned int *)sub_22E65B0E8(v19, &a10) + 2));
  }
  *(_QWORD *)(v10 + 16) = v16;
  v20 = *(uint64_t **)(v10 + 24);
  a10 = *(_QWORD *)(v11 + 40);
  sub_22F29E634(v20, &a10)[1] = v16;
  sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 40));
  v21 = *(_QWORD *)(v10 + 16);
  v22 = *(unsigned int *)(v10 + 40);
  v23 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v22 - 8);
  *(_DWORD *)(v10 + 40) = v22 - 1;
  v24 = *(_QWORD *)(v11 + 32);
  v25 = v23 + v21;
  if (v24)
  {
    *(_QWORD *)(v10 + 16) = v25;
    v27 = *(uint64_t **)(v10 + 24);
    v29 = v25;
    a10 = v24;
    sub_22F29E634(v27, &a10)[1] = v25;
    sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 32));
    v25 = v29;
  }
  v26 = v25 + v14;
  *(_QWORD *)(v10 + 16) = v26;
  if (!*(_QWORD *)(v11 + 24))
    JUMPOUT(0x22E65A7A0);
  v28 = *(uint64_t **)(v10 + 24);
  a10 = *(_QWORD *)(v11 + 24);
  sub_22F29E634(v28, &a10)[1] = v26;
  JUMPOUT(0x22E65A664);
}

void sub_22E65A37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;

  a10 = v11;
  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 16);
    sub_22F29E634(*(uint64_t **)(v10 + 24), &a10)[1] = v12;
    *(_BYTE *)(v10 + 8) = 0;
  }
  sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 8));
  v13 = *(_DWORD *)(v10 + 40);
  if (v13 >= *(_DWORD *)(v10 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v10 + 40);
  }
  v14 = 0;
  v15 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v13);
  *v15 = 0;
  v15[1] = 0;
  ++*(_DWORD *)(v10 + 40);
  v16 = *(_QWORD **)v10;
  a10 = v11;
  v17 = (uint64_t *)v16[8];
  if (v17)
  {
    if (v16[11] == v16[12])
      v14 = 0;
    else
      v14 = *(_QWORD *)(v16[11] + 8 * *((unsigned int *)sub_22E65B0E8(v17, &a10) + 2));
  }
  *(_QWORD *)(v10 + 16) = v14;
  v18 = *(uint64_t **)(v10 + 24);
  a10 = *(_QWORD *)(v11 + 24);
  sub_22F29E634(v18, &a10)[1] = v14;
  sub_22E659DC8(v10, *(unsigned __int8 **)(v11 + 24));
  --*(_DWORD *)(v10 + 40);
  JUMPOUT(0x22E65A1BCLL);
}

void sub_22E65A3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 *a10)
{
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a10 = v11;
  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 16);
    sub_22F29E634(*(uint64_t **)(v10 + 24), &a10)[1] = v12;
    *(_BYTE *)(v10 + 8) = 0;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_DWORD *)(v10 + 40);
  if (v14 >= *(_DWORD *)(v10 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v10 + 40);
  }
  v15 = 0;
  v16 = (_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v14);
  *v16 = 0;
  v16[1] = 0;
  ++*(_DWORD *)(v10 + 40);
  v17 = *(_QWORD **)v10;
  a10 = v11;
  v18 = (uint64_t *)v17[8];
  if (v18)
  {
    if (v17[11] == v17[12])
      v15 = 0;
    else
      v15 = *(_QWORD *)(v17[11] + 8 * *((unsigned int *)sub_22E65B0E8(v18, &a10) + 2));
  }
  *(_QWORD *)(v10 + 16) = v15;
  v19 = *(uint64_t **)(v10 + 24);
  a10 = *(unsigned __int16 **)&v11[4 * (((unint64_t)*v11 >> 8) & 1) + 12];
  sub_22F29E634(v19, &a10)[1] = v15;
  sub_22E659DC8(v10, *(unsigned __int8 **)&v11[4 * (((unint64_t)*v11 >> 8) & 1) + 12]);
  v20 = *(uint64_t **)(v10 + 24);
  v21 = *(unsigned int *)(v10 + 40);
  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16 * v21 - 8);
  *(_DWORD *)(v10 + 40) = v21 - 1;
  v23 = *(_QWORD *)(v10 + 16) + v13 + v22;
  *(_QWORD *)(v10 + 16) = v23;
  a10 = *(unsigned __int16 **)&v11[4 * (((unint64_t)*v11 >> 8) & 1) + 8];
  sub_22F29E634(v20, &a10)[1] = v23;
  sub_22E659DC8(v10, *(unsigned __int8 **)&v11[4 * (((unint64_t)*v11 >> 8) & 1) + 8]);
  JUMPOUT(0x22E65A8C8);
}

void sub_22E65A468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  *(_BYTE *)(v10 + 8) = 0;
  v12 = *(_QWORD **)v10;
  a10 = v11;
  v13 = (uint64_t *)v12[8];
  if (v13 && v12[11] != v12[12])
    v14 = *(_QWORD *)(v12[11] + 8 * *((unsigned int *)sub_22E65B0E8(v13, &a10) + 2));
  else
    v14 = 0;
  *(_QWORD *)(v10 + 16) = v14;
  v15 = *(uint64_t **)(v10 + 24);
  a10 = v11;
  sub_22F29E634(v15, &a10)[1] = v14;
  JUMPOUT(0x22E65A168);
}

void sub_22E65AB00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  *(_QWORD *)&v13 = a2;
  if (*(_BYTE *)(a1 + 8))
  {
    v10 = *(_QWORD *)(a1 + 16);
    sub_22F29E634(*(uint64_t **)(a1 + 24), &v13)[1] = v10;
    *(_BYTE *)(a1 + 8) = 0;
  }
  sub_22F0D492C(a2);
  v11 = v13;
  v4 = v15;
  v12 = v14;
  v5 = v16;
  v7 = *((_QWORD *)&v13 + 1);
  v6 = (uint64_t *)v13;
  if ((_QWORD)v13 != v15 || *((_QWORD *)&v13 + 1) != v16)
  {
    do
    {
      v9 = v6;
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v6);
      }
      if (*v9)
        sub_22E659DC8(a1);
      if ((v7 & 3) != 0)
      {
        if (v7 >= 4)
          sub_22F0D8720((uint64_t)&v11);
        else
          sub_22F3F2FE0((uint64_t)&v11, 1);
      }
      else
      {
        *(_QWORD *)&v11 = v6 + 1;
      }
      v7 = *((_QWORD *)&v11 + 1);
      v6 = (uint64_t *)v11;
    }
    while (v11 != __PAIR128__(v5, v4));
  }
}

uint64_t sub_22E65AC04(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;

  *(_BYTE *)(a1 + 8) = 0;
  v4 = *(_QWORD **)a1;
  v9 = a2;
  v5 = (uint64_t *)v4[8];
  if (v5 && v4[11] != v4[12])
    v6 = *(_QWORD *)(v4[11] + 8 * *((unsigned int *)sub_22E65B0E8(v5, &v9) + 2));
  else
    v6 = 0;
  v7 = *(uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 16) += v6;
  v9 = a2;
  sub_22F29E634(v7, &v9)[1] = v6;
  *(_BYTE *)(a1 + 8) = 1;
  return sub_22E659DC8(a1);
}

uint64_t sub_22E65ACC4(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE *v16;

  v16 = a2;
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a1 + 16);
    sub_22F29E634(*(uint64_t **)(a1 + 24), &v16)[1] = v4;
    *(_BYTE *)(a1 + 8) = 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  sub_22E659DC8(a1);
  v6 = *(_QWORD **)a1;
  v16 = a2;
  v7 = (uint64_t *)v6[8];
  if (v7 && v6[11] != v6[12])
    v8 = *(_QWORD *)(v6[11] + 8 * *((unsigned int *)sub_22E65B0E8(v7, &v16) + 2));
  else
    v8 = 0;
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(uint64_t **)(a1 + 24);
  if (*a2 == 103)
    v10 = 32;
  else
    v10 = 40;
  v16 = *(_BYTE **)&a2[v10];
  sub_22F29E634(v9, &v16)[1] = v8;
  sub_22E659DC8(a1);
  v11 = v5 - v8;
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v11;
  if (*a2 == 103)
    v14 = 40;
  else
    v14 = 48;
  v16 = *(_BYTE **)&a2[v14];
  sub_22F29E634(v12, &v16)[1] = v11;
  result = sub_22E659DC8(a1);
  *(_QWORD *)(a1 + 16) += v13;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

char **sub_22E65AE1C(char **result, _QWORD **a2, _DWORD **a3)
{
  char **v3;
  _QWORD *v4;
  char **v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = result;
  v4 = *a2;
  if (*a2)
  {
    *a2 = 0;
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v4 + 48))(v4, MEMORY[0x24BED7780]))
    {
      *v3 = 0;
      v6 = (char **)v4[1];
      v7 = (char **)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        v9 = MEMORY[0x24BED5C48];
        do
        {
          v12 = v8;
          v10 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9))
          {
            **a3 = *((_DWORD *)v10 + 2);
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
            v10 = 0;
          }
          v11 = v10;
          sub_22F2436E4(&v12, &v11, &v13);
          v8 = v13;
          *v3 = v13;
          v13 = 0;
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          if (v12)
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          ++v6;
        }
        while (v6 != v7);
      }
      return (char **)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(_QWORD *, _QWORD))(*v4 + 48))(v4, MEMORY[0x24BED5C48]);
      if ((_DWORD)result)
      {
        **a3 = *((_DWORD *)v4 + 2);
        *v3 = 0;
        return (char **)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
      }
      else
      {
        *v3 = (char *)v4;
      }
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *sub_22E65AFAC(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

_QWORD *sub_22E65B0E8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E654544(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E6545E0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void sub_22E65B148(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E65B18C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22E65B428(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22E667740(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E65B1D4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  sub_22E66A40C(a1, (_DWORD *)a2);
  result = sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E669DD4((uint64_t)a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22E669E70((uint64_t)a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E65B2F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  sub_22E66A40C(a1, (_DWORD *)a2);
  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E667C68((uint64_t)a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E669DD4((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E669E70((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E65B428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22E667740(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E667B28(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E667BB0(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E668A04(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E6677E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unsigned __int8 *v8;

  result = sub_22E667864(a1, (_DWORD *)a2);
  if (*(_QWORD *)(a1 + 184) >= 7uLL && ((*(_DWORD *)a2 >> 18) & 0x3Fu) - 19 <= 1)
  {
    v5 = *(unsigned __int8 **)(a2 + 24);
    result = sub_22E61F5D8(v5);
    if ((_DWORD)result)
    {
      v6 = (*(_DWORD *)a1)++;
      v7 = *(uint64_t **)(a1 + 176);
      v8 = v5;
      result = (uint64_t)sub_22E669BD0(v7, &v8);
      *(_DWORD *)(result + 8) = v6;
    }
  }
  return result;
}

uint64_t sub_22E667864(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  int v5;
  uint64_t result;
  _DWORD *v7;

  v7 = a2;
  v4 = sub_22E6678E8(0, a2);
  if (v4)
  {
    v5 = (*(_DWORD *)a1)++;
    *((_DWORD *)sub_22E65B0E8(*(uint64_t **)(a1 + 176), &v7) + 2) = v5;
  }
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result)
  {
    result = sub_22E6678E8(result, a2);
    v4 = result;
  }
  if (v4)
    return sub_22E667AA4(a1 + 8, v4);
  return result;
}

uint64_t sub_22E6678E8(int a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)a2;
  if (v2 <= 0x61)
  {
    switch(*(_BYTE *)a2)
    {
      case 4:
        return 12;
      case 5:
        return 5;
      case 6:
        return 11;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xF:
        goto LABEL_11;
      case 0xD:
        return 3;
      case 0xE:
        return 4;
      case 0x10:
        return 10;
      default:
        if (v2 == 92)
          return 6;
LABEL_11:
        if (!a1)
          return 0;
        if (*(unsigned __int8 *)a2 <= 0x10u)
        {
          switch(v2)
          {
            case 3u:
              return 22;
            case 9u:
              return 23;
            case 0xFu:
              return 20;
          }
        }
        else if (*(unsigned __int8 *)a2 > 0x85u)
        {
          if (v2 == 134)
            return 25;
          if (v2 == 233 && (*a2 & 0x7C0000) == 0x240000)
            return 26;
        }
        else
        {
          if (v2 == 17)
            return 21;
          if (v2 == 93)
            return 24;
        }
        return 0;
    }
  }
  switch(*(_BYTE *)a2)
  {
    case 'b':
      return 8;
    case 'c':
      return 9;
    case 'd':
      return 7;
    case 'e':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
      goto LABEL_11;
    case 'f':
      return 16;
    case 'g':
      return 13;
    case 'p':
      v4 = (*a2 >> 18) & 0x3F;
      if (v4 == 19)
        return 14;
      if (v4 == 20)
        return 15;
      if (!a1)
        return 0;
      v5 = v4 - 10;
      if (v5 >= 6)
        return 0;
      return (v5 + 27);
    default:
      if (v2 == 235)
      {
        v3 = 1;
      }
      else
      {
        if (v2 != 236)
          goto LABEL_11;
        v3 = 2;
      }
      break;
  }
  return v3;
}

uint64_t sub_22E667AA4(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  v5 = *(_QWORD *)result;
  if (v4)
    v6 = v4 % 0xA == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = llvm::MD5::update();
    v5 = 0;
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v4 + 1;
  *(_QWORD *)v3 = a2 | (unint64_t)(v5 << 6);
  return result;
}

uint64_t sub_22E667B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E667B28(a1, v5), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E667C68(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E667BB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E667C68(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E668940(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E667C68(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F45CE68
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v74 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v74 = 1;
            result = sub_22E667C68(a1, v21, (a3 + v74 + 15) & -v74);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22E65B428(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E65B428(a1, v23, 0);
          case 0xE:
            result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E667B28(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v75 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v76 = v25;
            sub_22EFC6DC4((uint64_t)&v77, v75);
            result = sub_22E667BB0(a1, &v75);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v78 = *(_OWORD *)v27;
              v79 = *(_QWORD *)(v27 + 16);
              v80 = v30;
              result = sub_22E668A04(a1, (uint64_t)&v78);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22E668940(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22E6683D0(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E65B428(a1, v23, 0);
          case 0x12:
            return sub_22E667B28(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22E65B428(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22E6683D0(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22E667B28(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v78 = *(_OWORD *)v37;
              v79 = *(_QWORD *)(v37 + 16);
              v80 = v40;
              result = sub_22E668A04(a1, (uint64_t)&v78);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22E65B428(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22E6683D0(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22E667B28(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v78);
            return sub_22E667C68(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v78 = v4;
            *((_QWORD *)&v78 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v78);
            result = sub_22E667C68(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v78;
            v48 = *(_QWORD *)(v78 + 16);
            if (*(_BYTE *)(v78 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              v52 = *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * v50 + 16);
              if (v52)
              {
                if ((sub_22E654C58(a1, v52) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22E6683D0(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v53 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v56 = *v53;
              v55 = (unint64_t *)(v53 + 2);
              v54 = v56;
              if (v56)
              {
                v57 = 8 * v54;
                while ((sub_22E6683D0(a1, *v55) & 1) != 0)
                {
                  ++v55;
                  v57 -= 8;
                  if (!v57)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v58 = sub_22F257D3C(v47);
            if (!v58)
              return 1;
            result = sub_22E65B428(a1, v58, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22E65B428(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22E65B428(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22E6683D0(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22E667C68(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F45CE68
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v59 = *(_QWORD *)(v4 + 24);
            v60 = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0);
            if (v60 != v4)
            {
              v61 = 1;
              if (v59 >= 0x10 && (v59 & 0xF) == 0)
                v61 = *(_QWORD *)((char *)&unk_22F45CE68
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v60 + 16) << 56) >> 53));
              result = sub_22E667C68(a1, v59, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v61- 1) & -v61);
              if (!(_DWORD)result)
                return result;
            }
            v62 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v62)
              return 1;
            v63 = (_QWORD *)(a3 + 24);
            v64 = v62 - 1;
            do
            {
              v65 = (_QWORD *)*v63++;
              result = sub_22E667C68(a1, *v65, v65 + 1);
              v31 = v64-- != 0;
              v66 = v31;
            }
            while ((_DWORD)result && (v66 & 1) != 0);
            return result;
          case 0x2A:
            v67 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v78 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v78) = 8;
            DWORD1(v78) = v67;
            return sub_22E668874(a1, (uint64_t)&v78);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22E6683D0(a1, v24);
          case 0x2E:
            result = sub_22E668940(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v68 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v68)
              return 1;
            v69 = v4 + 40;
            v70 = (uint64_t *)(a3 + 16);
            v71 = v68 - 1;
            do
            {
              v72 = *v70++;
              v78 = *(_OWORD *)v69;
              v79 = *(_QWORD *)(v69 + 16);
              v80 = v72;
              result = sub_22E668A04(a1, (uint64_t)&v78);
              v31 = v71-- != 0;
              v73 = v31;
              if (!(_DWORD)result)
                break;
              v69 += 24;
            }
            while ((v73 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22E6683D0(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22E65B428(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22E65B428(a1, v13, 0);
      case 14:
        result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22E654C58(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22E668874(a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22E668940(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22E65B428(a1, v13, 0);
      case 18:
        return sub_22E6689A0(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22E65B428(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22E6689A0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22E668874(a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22E65B428(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22E6689A0(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22E6683D0(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22E65B428(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22E65B428(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22E6683D0(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22E6683D0(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v47 = *(_QWORD *)(v4 + 40);
        v46[0] = 8;
        v46[1] = v41;
        return sub_22E668874(a1, (uint64_t)v46);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22E668940(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v42 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v42)
          return 1;
        v43 = v4 + 40;
        v44 = v42 - 1;
        do
        {
          result = sub_22E668874(a1, v43);
          v19 = v44-- != 0;
          v45 = v19;
          if (!(_DWORD)result)
            break;
          v43 += 24;
        }
        while ((v45 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22E6683D0(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22E6683D0(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22E6683D0(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22E65B428(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E668874(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22E6683D0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22E668940(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22E668874(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E668940(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22E6689A0(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22E6689A0(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22E6689A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22E6689A0(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22E6683D0(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22E668A04(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22E667C68(a1, *v6, v6 + 1);
      else
        result = sub_22E6683D0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22E667B28(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22E668940(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22E668874(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E668B1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22E65B428(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22E65B428(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22E65B428(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22E65B428(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22E65B428(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22E65B428(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22E65B428(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22E65B428(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22E65B428(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22E65B428(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22E65B428(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22E65B428(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22E65B428(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22E65B428(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22E65B428(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22E65B428(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22E65B428(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22E65B428(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22E65B428(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22E667B28(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E667BB0(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22E65B428(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22E65B428(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22E65B428(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22E65B428(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22E65B428(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22E65B428(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22E65B428(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22E65B428(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22E65B428(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22E65B428(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22E65B428(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22E65B428(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22E65B428(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22E65B428(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E65B428(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22E65B428(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22E65B428(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22E65B428(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22E65B428(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22E65B428(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22E65B428(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E65B428(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22E65B428(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E65B428(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E65B428(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22E65B428(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22E667B28(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E667BB0(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22E65B428(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22E65B428(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22E65B428(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22E65B428(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22E65B428(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22E65B428(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22E65B428(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22E65B428(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E65B428(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E65B428(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22E65B428(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22E65B428(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22E667B28(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E667BB0(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22E65B428(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22E65B428(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E65B428(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22E65B428(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22E65B428(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22E65B428(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22E65B428(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22E65B428(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22E65B428(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22E65B428(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22E65B428(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22E65B428(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

_QWORD *sub_22E669BD0(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E654544(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E6545E0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22E669C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  if (!a2)
    return 1;
  sub_22E667864(a1, (_DWORD *)a2);
  v6 = *(uint64_t **)(a2 + 16);
  v7 = *(uint64_t **)(a2 + 24);
  if (v7 == v6)
    v8 = 0;
  else
    v8 = *(uint64_t **)(a2 + 24);
  if (v7 == v6)
    v9 = 0;
  else
    v9 = v6;
  v15 = 0;
  v16 = 0;
  v14 = v9;
  if (v9 == v8)
    return 1;
  v10 = 0;
  while (1)
  {
    if ((v10 & 3) == 0)
    {
      result = sub_22E65B428(a1, *v9, a3);
      if (!(_DWORD)result)
        return result;
      v14 = v9 + 1;
      goto LABEL_18;
    }
    v11 = (_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v10 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v9));
    if ((sub_22E65B428(a1, *v11, a3) & 1) == 0)
      return 0;
    if (v10 < 4)
      sub_22F3F2FE0((uint64_t)&v14, 1);
    else
      sub_22F0D8720((uint64_t)&v14);
LABEL_18:
    v9 = v14;
    v10 = v15;
    if (v14 == v8 && v15 == 0)
      return 1;
  }
}

uint64_t sub_22E669D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = (_QWORD *)(a2 + 16);
    while ((sub_22E654C58(a1, *v7) & 1) != 0)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22E65B428(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E669DD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E654C58(a1, v4);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E669E70(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E669EF4()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E669EB0);
  JUMPOUT(0x22E669EE4);
}

void sub_22E669F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22E65B428(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E669EE0);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E65B428(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E669EE0);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22E65B428(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22E66A040);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22E669EE0);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22E65B428(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E669EE0);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22E669EE0);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E65B428(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E669EE4);
}

void sub_22E66A2F8()
{
  JUMPOUT(0x22E669ECCLL);
}

void sub_22E66A300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22E65B428(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22E65B428(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22E66A040);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22E65B428(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22E65B428(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22E65B428(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22E669EE0);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22E65B428(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22E669EE4);
}

_QWORD *sub_22E66A40C(_QWORD *result, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  int v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = a2[7] & 0x7F;
  v3 = v2 > 0x39;
  v4 = (1 << v2) & 0x3D0000001000006;
  if (!v3 && v4 != 0)
  {
    v6 = (*(_DWORD *)result)++;
    v7 = (uint64_t *)result[22];
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
    result = sub_22E669BD0(v7, &v8);
    *((_DWORD *)result + 2) = v6;
  }
  return result;
}

uint64_t sub_22E66A48C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E669D34(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22E667B28(a1, v7, v8);
}

uint64_t sub_22E66A500(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22E66A48C(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22E667C68(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22E66A578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E669D34(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E667B28(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22E667C68(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22E667C68(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22E6683D0(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22E66A644(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22E669D34(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22E667B28(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22E667BB0(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E668A04(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22E667C68(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E65B428(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22E667C68(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22E65B428(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E65B428(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E654C58(a1, v37);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22E66AA08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E66A578(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22E65B428(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22E66AA68()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;
  int v5;

  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable value profiling";
  v4.n128_u64[1] = 22;
  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_22F29E73C(&v5, &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_22E622D38, &qword_253E4D208, &dword_22E3A8000);
}

uint64_t sub_22E66AAD8(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 120), (void *)(16 * *(unsigned int *)(a1 + 136)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 96), (void *)(48 * *(unsigned int *)(a1 + 112)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(16 * *(unsigned int *)(a1 + 88)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(16 * *(unsigned int *)(a1 + 64)));
  return a1;
}

uint64_t sub_22E66AB4C(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 34) & 0x20) == 0)
    return llvm::MDBuilder::createTBAAScalarTypeNode();
  llvm::MDBuilder::createString();
  return llvm::MDBuilder::createTBAATypeNode();
}

uint64_t sub_22E66ABB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (!result)
  {
    sub_22F29E88C(a1);
    result = sub_22E66AB4C(a1);
    *(_QWORD *)(a1 + 152) = result;
  }
  return result;
}

uint64_t sub_22E66AC08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _BYTE v13[24];
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  __int128 v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x24BDAC8D0];
  sub_22EF5CCD0(*(_QWORD *)a1, a2, (uint64_t)&v16);
  if (a2 && *(_DWORD *)(a2 + 16) == 11)
  {
    switch((*(_DWORD *)(a2 + 16) >> 19) & 0x1FF)
    {
      case 0xA7:
      case 0xA8:
      case 0xB2:
      case 0xB3:
        return sub_22E66ABB8(a1);
      case 0xAD:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16472);
        return sub_22E66B034(a1, v4);
      case 0xAE:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16480);
        return sub_22E66B034(a1, v4);
      case 0xAF:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16488);
        return sub_22E66B034(a1, v4);
      case 0xB0:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16496);
        return sub_22E66B034(a1, v4);
      case 0xB1:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16504);
        return sub_22E66B034(a1, v4);
      case 0xBD:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16600);
        return sub_22E66B034(a1, v4);
      case 0xBE:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16608);
        return sub_22E66B034(a1, v4);
      case 0xBF:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16616);
        return sub_22E66B034(a1, v4);
      case 0xC3:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16648);
        return sub_22E66B034(a1, v4);
      case 0xC4:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16656);
        return sub_22E66B034(a1, v4);
      case 0xC5:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16664);
        return sub_22E66B034(a1, v4);
      case 0xC9:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16696);
        return sub_22E66B034(a1, v4);
      case 0xCA:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16704);
        return sub_22E66B034(a1, v4);
      case 0xCB:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16712);
        return sub_22E66B034(a1, v4);
      case 0xCF:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16744);
        return sub_22E66B034(a1, v4);
      case 0xD0:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16752);
        return sub_22E66B034(a1, v4);
      case 0xD1:
        v4 = *(_QWORD *)(*(_QWORD *)a1 + 16760);
        return sub_22E66B034(a1, v4);
      default:
        sub_22E462F04((unint64_t *)&v16, *(unsigned int **)(a1 + 24));
        sub_22F1125EC(a2);
        sub_22E66ABB8(a1);
        return sub_22E66AB4C(a1);
    }
  }
  if (sub_22F112424(a2))
    return sub_22E66ABB8(a1);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v6 == 39 || (v7 = v6 & 0xFE, v7 == 40))
  {
    sub_22E66ABB8(a1);
    return sub_22E66AB4C(a1);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 34) & 0x20) != 0 && (v7 - 2) <= 3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    return sub_22E66B034(a1, v4);
  }
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v8 != 44)
  {
    if (a2 && v8 == 9)
    {
      v16 = v18;
      v17 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)v13, (uint64_t)&v16);
      if ((unint64_t)(v14 - (_QWORD)v15) > 7)
        *v15++ = 0x28746E497469425FLL;
      else
        llvm::raw_ostream::write((llvm::raw_ostream *)v13, "_BitInt(");
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
      {
        llvm::raw_ostream::write(v11);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v12 + 1;
        *v12 = 41;
      }
      goto LABEL_44;
    }
    return sub_22E66ABB8(a1);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 1) == 0)
    return sub_22E66ABB8(a1);
  v9 = sub_22F114198(*(_QWORD *)(a2 + 24));
  if (sub_22EFB948C(v9) <= 2)
    return sub_22E66ABB8(a1);
  v16 = v18;
  v17 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v13, (uint64_t)&v16);
  (*(void (**)(_QWORD, unint64_t, _BYTE *))(**(_QWORD **)(a1 + 32) + 184))(*(_QWORD *)(a1 + 32), a2 & 0xFFFFFFFFFFFFFFF0, v13);
LABEL_44:
  sub_22E66ABB8(a1);
  v10 = sub_22E66AB4C(a1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v13);
  if (v16 != v18)
    free(v16);
  return v10;
}

uint64_t sub_22E66B034(uint64_t a1, uint64_t a2)
{
  uint64_t v6;
  uint64_t v7;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) & 0x1800) == 0
    || (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) & 0x80000) != 0)
  {
    return 0;
  }
  if (sub_22E66B128(a2))
    return sub_22E66ABB8(a1);
  if (!sub_22E66B1B8(a2))
  {
    v7 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = sub_22E66BC34((uint64_t *)(a1 + 48), &v7)[1];
    if (!v6)
    {
      v6 = sub_22E66AC08(a1, v7);
      sub_22E66BC34((uint64_t *)(a1 + 48), &v7)[1] = v6;
    }
    return v6;
  }
  return sub_22E66B230(a1, a2);
}

uint64_t sub_22E66B128(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (v2 && sub_22E4EC31C(v2))
    return 1;
  v4 = sub_22F10D4DC(*v1);
  if (!v4)
    return 0;
  v5 = v4;
  do
  {
    v3 = sub_22E4EC31C(*(_QWORD *)(v5 + 24));
    if (v3)
      break;
    v5 = sub_22F10D4DC(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v5 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                                             + ((2 * *(_QWORD *)(*(_QWORD *)(v5 + 24) + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0));
  }
  while (v5);
  return v3;
}

unint64_t sub_22E66B1B8(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  result = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v3 + 16) & 0xFE) != 0x28 && *(_DWORD *)(v3 + 16) == 45)
  {
    v4 = sub_22F114198(*(_QWORD *)(v3 + 24));
    result = sub_22EFC3500(v4);
    if (result)
    {
      v5 = *(_QWORD *)(result + 72);
      if ((v5 & 0x800000) != 0)
      {
        return 0;
      }
      else
      {
        v6 = v5 & 0xE000;
        return v6 == 24576 || v6 == 0;
      }
    }
  }
  return result;
}

uint64_t sub_22E66B230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  if (!sub_22E66B1B8(a2))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22E66BC34((uint64_t *)(a1 + 72), &v6)[1];
  if (!v4)
  {
    v4 = sub_22E66B768(a1, v6);
    sub_22E66BC34((uint64_t *)(a1 + 72), &v6)[1] = v4;
  }
  return v4;
}

double sub_22E66B2C8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  int v10;
  _QWORD v11[3];

  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F1110EC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), 0))
  {
    v10 = 2;
LABEL_7:
    *(_DWORD *)a3 = v10;
    result = 0.0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    return result;
  }
  if (sub_22E66B128(a2))
  {
    v10 = 1;
    goto LABEL_7;
  }
  sub_22EF5CCD0(*a1, *v6, (uint64_t)v11);
  v7 = v11[0];
  v8 = sub_22E66B034((uint64_t)a1, a2);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_22E66B368(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];

  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v11 || *(_BYTE *)(v11 + 16) != 45)
  {
    sub_22EF5CCD0(*a1, v10, (uint64_t)v37);
    v24 = v37[0];
    if (a5)
      v25 = sub_22E66ABB8((uint64_t)a1);
    else
      v25 = sub_22E66B034((uint64_t)a1, a3);
    v32 = 0;
    v33 = 0;
    v34 = v25;
    v35 = 0;
    v36 = v24;
    v26 = sub_22E66B58C((uint64_t)a1, (uint64_t)&v32);
    v37[0] = a2;
    v37[1] = v24;
    v37[2] = v26;
    v27 = sub_22E5BBF6C(a4, (unint64_t)v37);
    v28 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
    v29 = *(_OWORD *)v27;
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
    *(_OWORD *)v28 = v29;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
  v13 = sub_22EFC3500(v12);
  if ((*(_BYTE *)(v13 + 74) & 0x80) != 0)
    return 0;
  v14 = v13;
  if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104));
    v30 = *(_QWORD *)(v14 + 128);
    v31 = *(_QWORD *)(v30 + 24);
    if ((v31 & 1) != 0)
      v31 = sub_22EFCF510(v30);
    if (v31 != sub_22F24CD30(v14))
      return 0;
  }
  v15 = sub_22F0C975C(*a1, v14);
  v16 = sub_22EFC3B90(v14);
  if (!v16)
    return 1;
  v17 = v16;
  v18 = 0;
LABEL_7:
  if ((sub_22EFC2FDC(v17, *a1) & 1) != 0
    || (*(_BYTE *)(v17 + 68) & 1) != 0 && !*(_QWORD *)(v17 + 40)
    || ((v19 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v18),
         v20 = sub_22EF5CDF0(*a1, *(_QWORD *)(*(_QWORD *)(*a1 + 16408) & 0xFFFFFFFFFFFFFFF0)),
         v21 = *(_QWORD *)(v17 + 48),
         (a5 & 1) == 0)
      ? (v22 = sub_22E66B128(*(_QWORD *)(v17 + 48)))
      : (v22 = 1),
        result = sub_22E66B368(a1, v19 / v20 + a2, v21, a4, v22),
        (_DWORD)result))
  {
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v17)
        return 1;
      if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 49 <= 2)
      {
        ++v18;
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_22E66B58C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  llvm::MDNode *v6;
  llvm::MDNode *v7;
  llvm::MDBuilder *v8;

  if (*(_DWORD *)a2 == 1)
  {
    result = sub_22E66ABB8(a1);
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = result;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    result = *(_QWORD *)(a2 + 16);
  }
  if (result)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 34) & 0x10) == 0)
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = result;
      *(_QWORD *)(a2 + 24) = 0;
    }
    v5 = sub_22E66BEB0((uint64_t *)(a1 + 96), a2);
    result = *(_QWORD *)(v5 + 40);
    if (!result)
    {
      v6 = *(llvm::MDNode **)(a2 + 8);
      v7 = *(llvm::MDNode **)(a2 + 16);
      if (!v6)
      {
        *(_QWORD *)(a2 + 8) = v7;
        v6 = v7;
      }
      v8 = (llvm::MDBuilder *)(a1 + 40);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 34) & 0x20) != 0)
        result = llvm::MDBuilder::createTBAAAccessTag(v8, v6, v7);
      else
        result = llvm::MDBuilder::createTBAAStructTagNode(v8, v6, v7);
      *(_QWORD *)(v5 + 40) = result;
    }
  }
  return result;
}

uint64_t sub_22E66B658(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t TBAAStructNode;
  int v6;
  uint64_t v8;
  void *v9[2];
  _QWORD v10[13];

  v10[12] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = a1 + 15;
  TBAAStructNode = sub_22E66BC34(a1 + 15, &v8)[1];
  if (!TBAAStructNode)
  {
    v9[0] = v10;
    v9[1] = (void *)0x400000000;
    v6 = sub_22E66B128(a2);
    if (sub_22E66B368(a1, 0, a2, (uint64_t)v9, v6))
    {
      TBAAStructNode = llvm::MDBuilder::createTBAAStructNode();
    }
    else
    {
      TBAAStructNode = 0;
      sub_22E66BC34(v4, &v8)[1] = 0;
    }
    if (v9[0] != v10)
      free(v9[0]);
  }
  return TBAAStructNode;
}

uint64_t sub_22E66B768(uint64_t a1, uint64_t a2)
{
  uint64_t TBAATypeNode;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unsigned int *v23;
  size_t v24;
  const void *v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  __int128 v43;
  _BYTE v44[256];
  char *v45;
  uint64_t v46;
  _QWORD v47[14];

  TBAATypeNode = 0;
  v47[12] = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  if (!a2 || *(_BYTE *)(a2 + 16) != 45)
    return TBAATypeNode;
  v5 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v6 = sub_22EFC3500(v5);
  v7 = sub_22F0C975C(*(_QWORD *)a1, v6);
  v45 = (char *)v47;
  v46 = 0x400000000;
  v8 = sub_22EFC3B90(v6);
  if (v8)
  {
    v9 = v8;
LABEL_5:
    if ((sub_22EFC2FDC(v9, *(_QWORD *)a1) & 1) == 0 && ((*(_BYTE *)(v9 + 68) & 1) == 0 || *(_QWORD *)(v9 + 40)))
    {
      v10 = *(_QWORD *)(v9 + 48);
      if (sub_22E66B1B8(v10))
        v11 = sub_22E66B230(a1, v10);
      else
        v11 = sub_22E66B034(a1, v10);
      v12 = v11;
      if (v11)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * sub_22EFC306C(v9));
        v14 = sub_22EF5CDF0(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
        v15 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
        v16 = v13 / v14;
        sub_22EF5CCD0(*(_QWORD *)a1, v15, (uint64_t)&v42);
        v17 = v42;
        v42 = (void *)v16;
        *(_QWORD *)&v43 = v17;
        *((_QWORD *)&v43 + 1) = v12;
        v18 = sub_22E5BBF6C((uint64_t)&v45, (unint64_t)&v42);
        v19 = &v45[24 * v46];
        v20 = *(_OWORD *)v18;
        *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v19 = v20;
        LODWORD(v46) = v46 + 1;
        goto LABEL_13;
      }
      TBAATypeNode = 0;
      sub_22E66BC34((uint64_t *)(a1 + 72), &v38)[1] = 0;
      goto LABEL_37;
    }
LABEL_13:
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
        break;
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_5;
    }
  }
  v42 = v44;
  v43 = xmmword_22F44E320;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1) & 1) != 0)
  {
    sub_22F242C48((uint64_t)&v39, (uint64_t)&v42);
    (*(void (**)(_QWORD, unint64_t, void **))(**(_QWORD **)(a1 + 32) + 184))(*(_QWORD *)(a1 + 32), a2 & 0xFFFFFFFFFFFFFFF0, &v39);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v39);
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v6 + 40) & 7) != 0 || v21 == 0)
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_24;
  }
  v23 = *(unsigned int **)(v21 + 16);
  v26 = *v23;
  v25 = v23 + 4;
  v24 = v26;
  if (v26 >= 0x101uLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v30 = v42;
    v27 = v43;
    goto LABEL_23;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = v44;
  if (v24)
  {
LABEL_23:
    memcpy(&v30[v27], v25, v24);
    v29 = v43;
    v28 = v24;
  }
LABEL_24:
  *(_QWORD *)&v43 = v29 + v28;
LABEL_25:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 34) & 0x20) != 0)
  {
    sub_22E66ABB8(a1);
    sub_22EF5CCD0(*(_QWORD *)a1, a2, (uint64_t)&v39);
    llvm::MDBuilder::createString();
    TBAATypeNode = llvm::MDBuilder::createTBAATypeNode();
  }
  else
  {
    v39 = v41;
    v40 = 0x400000000;
    if ((_DWORD)v46)
    {
      v31 = 0;
      v32 = 24 * v46;
      v33 = (uint64_t *)(v45 + 16);
      do
      {
        v34 = *v33;
        v35 = *(v33 - 2);
        if (v31 >= HIDWORD(v40))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = v40;
        }
        v36 = (char *)v39 + 16 * v31;
        *v36 = v34;
        v36[1] = v35;
        v31 = v40 + 1;
        LODWORD(v40) = v40 + 1;
        v33 += 3;
        v32 -= 24;
      }
      while (v32);
    }
    TBAATypeNode = llvm::MDBuilder::createTBAAStructTypeNode();
    if (v39 != v41)
      free(v39);
  }
  if (v42 != v44)
    free(v42);
LABEL_37:
  if (v45 != (char *)v47)
    free(v45);
  return TBAATypeNode;
}

double sub_22E66BB68@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *((_QWORD *)a1 + 1) == *(_QWORD *)(a2 + 8)
    && *((_QWORD *)a1 + 2) == *(_QWORD *)(a2 + 16)
    && *((_QWORD *)a1 + 3) == *(_QWORD *)(a2 + 24)
    && *((_QWORD *)a1 + 4) == *(_QWORD *)(a2 + 32))
  {
    v3 = *a1;
    v4 = a1[1];
    *(_OWORD *)a3 = *a1;
    *(_OWORD *)(a3 + 16) = v4;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a1 + 4);
  }
  else
  {
    *(_DWORD *)a3 = (*(_DWORD *)a1
                  || *((_QWORD *)a1 + 1)
                  || *((_QWORD *)a1 + 2)
                  || *((_QWORD *)a1 + 3)
                  || *((_QWORD *)a1 + 4))
                 && (*(_DWORD *)a2
                  || *(_QWORD *)(a2 + 8)
                  || *(_QWORD *)(a2 + 16)
                  || *(_QWORD *)(a2 + 24)
                  || *(_QWORD *)(a2 + 32));
    *(_QWORD *)&v3 = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
  }
  return *(double *)&v3;
}

_QWORD *sub_22E66BC34(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E66BC94((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22E66BC94(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E66BD44(a1, v7);
  v9 = 0;
  sub_22F25AFD8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_22E66BD44(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E66BE04(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E66BE04(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25AFD8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E66BEB0(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_22E66BF18(a1, (int *)a2, &v9);
  v5 = v9;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E66C068((uint64_t)a1, a2, (int *)a2, v9);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v8;
    *(_QWORD *)(v5 + 32) = v7;
    *(_QWORD *)(v5 + 40) = 0;
  }
  return v5;
}

uint64_t sub_22E66BF18(uint64_t *a1, int *a2, _QWORD *a3)
{
  int v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned int v14;
  int *v15;
  int v16;
  uint64_t result;
  BOOL v18;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    v15 = 0;
    result = 0;
    goto LABEL_9;
  }
  v4 = 0;
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v10 = *a1;
  v11 = (37 * *a2) ^ (v6 >> 9) ^ (v6 >> 4) ^ (v7 >> 9) ^ (v7 >> 4) ^ (37 * v8) ^ (37 * v9);
  v12 = v3 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = (int *)(v10 + 48 * (v11 & v12));
    v16 = *v15;
    if (v5 == *v15
      && v6 == *((_QWORD *)v15 + 1)
      && v7 == *((_QWORD *)v15 + 2)
      && v8 == *((_QWORD *)v15 + 3)
      && v9 == *((_QWORD *)v15 + 4))
    {
      result = 1;
      goto LABEL_9;
    }
    if (v16 == -1)
      break;
    if (v16 != -2 || *((_QWORD *)v15 + 1) != -8192 || *((_QWORD *)v15 + 2) != -8192 || *((_QWORD *)v15 + 3) != -2)
      goto LABEL_12;
    v18 = *((_QWORD *)v15 + 4) == -2;
LABEL_13:
    if (v18 && v4 == 0)
      v4 = (int *)(v10 + 48 * v14);
    v11 = v14 + i;
  }
  if (*((_QWORD *)v15 + 1) != -4096
    || *((_QWORD *)v15 + 2) != -4096
    || *((_QWORD *)v15 + 3) != -1
    || *((_QWORD *)v15 + 4) != -1)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_13;
  }
  result = 0;
  if (v4)
    v15 = v4;
LABEL_9:
  *a3 = v15;
  return result;
}

uint64_t sub_22E66C068(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_10;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_10:
    sub_22E66C148(a1, v7);
    v9 = 0;
    sub_22E66BF18((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a4 != -1
    || *(_QWORD *)(a4 + 8) != -4096
    || *(_QWORD *)(a4 + 16) != -4096
    || *(_QWORD *)(a4 + 24) != -1
    || *(_QWORD *)(a4 + 32) != -1)
  {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_QWORD *sub_22E66C148(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  _QWORD *v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E66C228(a1, v4, (__int128 *)&v4[12 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[6 * v10];
      do
      {
        *(_DWORD *)result = -1;
        result[1] = -4096;
        result[2] = -4096;
        result[3] = -1;
        result[4] = -1;
        result += 6;
      }
      while (result != v11);
    }
  }
  return result;
}

uint64_t sub_22E66C228(uint64_t result, int *a2, __int128 *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 48 * v6;
    do
    {
      *(_DWORD *)v7 = -1;
      *(_QWORD *)(v7 + 8) = -4096;
      *(_QWORD *)(v7 + 16) = -4096;
      *(_QWORD *)(v7 + 24) = -1;
      *(_QWORD *)(v7 + 32) = -1;
      v7 += 48;
    }
    while (v7 != v8);
  }
  while (a2 != (int *)a3)
  {
    if (*a2 == -1)
    {
      if (*((_QWORD *)a2 + 1) != -4096
        || *((_QWORD *)a2 + 2) != -4096
        || *((_QWORD *)a2 + 3) != -1
        || *((_QWORD *)a2 + 4) != -1)
      {
LABEL_7:
        v12 = 0;
        result = sub_22E66BF18((uint64_t *)v5, a2, &v12);
        v9 = v12;
        v10 = *(_OWORD *)a2;
        v11 = *((_OWORD *)a2 + 1);
        *(_QWORD *)(v12 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)v9 = v10;
        *(_OWORD *)(v9 + 16) = v11;
        *(_QWORD *)(v9 + 40) = *((_QWORD *)a2 + 5);
        ++*(_DWORD *)(v5 + 8);
      }
    }
    else if (*a2 != -2
           || *((_QWORD *)a2 + 1) != -8192
           || *((_QWORD *)a2 + 2) != -8192
           || *((_QWORD *)a2 + 3) != -2
           || *((_QWORD *)a2 + 4) != -2)
    {
      goto LABEL_7;
    }
    a2 += 12;
  }
  return result;
}

uint64_t sub_22E66C360(uint64_t a1)
{
  unsigned int *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  void *v10;

  v2 = (unsigned int *)(a1 + 144);
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, *(void ***)(a1 + 144));
  v3 = v10;
  v9 = v10;
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, (void **)(*(_QWORD *)v2 + 8 * v2[2]));
  v4 = v10;
  while (v3 != v4)
  {
    llvm::FoldingSetIteratorImpl::advance((llvm::FoldingSetIteratorImpl *)&v9);
    operator delete(v3);
    v3 = v9;
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 400), (void *)(16 * *(unsigned int *)(a1 + 416)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 376), (void *)(16 * *(unsigned int *)(a1 + 392)));
  v5 = *(void **)(a1 + 296);
  if (v5 != (void *)(a1 + 312))
    free(v5);
  v6 = *(void **)(a1 + 232);
  if (v6 != *(void **)(a1 + 224))
    free(v6);
  v7 = *(void **)(a1 + 168);
  if (v7 != *(void **)(a1 + 160))
    free(v7);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 120), (void *)(16 * *(unsigned int *)(a1 + 136)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 96), (void *)(16 * *(unsigned int *)(a1 + 112)));
  sub_22E66E204(a1 + 72);
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(16 * *(unsigned int *)(a1 + 88)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(16 * *(unsigned int *)(a1 + 64)));
  return a1;
}

void sub_22E66C4A8(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];
  _QWORD *v4;
  __int128 v5;
  _QWORD v6[33];

  v6[32] = *MEMORY[0x24BDAC8D0];
  v4 = v6;
  v5 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v3, (uint64_t)&v4);
  __asm { BR              X10 }
}

void sub_22E66C53C()
{
  size_t v0;
  const void *v1;
  unint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;
  char *v25;
  void *v26;

  if ((unint64_t)(v24 - (_QWORD)v25) >= 6)
  {
    memcpy(v25, "struct", 6uLL);
    v6 = v25 + 6;
    v25 += 6;
    v5 = v23;
  }
  else
  {
    v5 = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)v23, "struct");
    v4 = v5 + 4;
    v6 = (_BYTE *)v5[4];
  }
  if ((unint64_t)v6 < v5[3])
  {
    *v4 = v6 + 1;
    *v6 = 46;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v5);
  }
  v7 = v2;
  if ((*(_DWORD *)(v2 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(v2 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_23;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_22;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_13;
        if (i == 24)
        {
LABEL_12:
          v11 = -48;
        }
        else
        {
LABEL_22:
          if (i != 70)
          {
LABEL_23:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v11 = v14;
            else
              v11 = -72;
            goto LABEL_13;
          }
          v11 = -64;
        }
      }
LABEL_13:
      v12 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  v22 = *(_OWORD *)(*(_QWORD *)(v7 + 88) + 15104);
  *(_QWORD *)&v22 = v22 & 0xFFFFFFFFFFFFBFFFLL;
  v15 = *(_QWORD *)(v2 + 40);
  if (v15 < 8 || (v15 & 7) != 0)
  {
    v19 = *(_QWORD *)(v2 + 120);
    if ((v19 & 4) != 0 || (v18 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8), (v19 & 0xFFFFFFFFFFFFFFF8) == 0))
    {
      sub_22E47DAC0((llvm::raw_ostream *)v23, "anon");
    }
    else
    {
      v20 = v18[2];
      v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 4) != 0)
        v21 = (_QWORD *)*v21;
      if (v21)
        goto LABEL_36;
      (*(void (**)(_QWORD *, _BYTE *))(*v18 + 88))(v18, v23);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    if (v17)
    {
      v18 = (_QWORD *)v2;
LABEL_36:
      sub_22EFBA008(v18, (llvm::raw_ostream *)v23, (uint64_t)&v22);
      goto LABEL_37;
    }
    (*(void (**)(unint64_t, _BYTE *))(*(_QWORD *)v2 + 88))(v2, v23);
  }
LABEL_37:
  if (v0)
  {
    if (v0 <= v24 - (uint64_t)v25)
    {
      memcpy(v25, v1, v0);
      v25 += v0;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)v1);
    }
  }
  llvm::StructType::setName();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v23);
  if (v26 != v3)
    free(v26);
}

uint64_t sub_22E66C868(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  llvm::ArrayType *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::ArrayType *v17;
  llvm::Type *v19;
  uint64_t v20;
  int v21;

  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v7)
  {
    v10 = v7;
    if (v9 != 56
      || ((v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v12 = (*(_DWORD *)(v11 + 16) & 0xFF800FF) == 87031819)
        : (v12 = 0),
          !v12
       || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 15088)
                    + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 15088) - 24)
                    + 160) & 0x20) == 0))
    {
      v13 = (llvm::ArrayType *)sub_22E66C868(a1, *(_QWORD *)(v7 + 32), 0);
      if ((*(_DWORD *)(v10 + 16) & 0x780000) != 0x80000)
        return llvm::FixedVectorType::get();
      v14 = llvm::ArrayType::get(v13, (llvm::Type *)*(unsigned int *)(v10 + 20));
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000) + 133) & 2) == 0)
        return llvm::StructType::get();
      return v14;
    }
    sub_22E66CB04(a1, a2);
  }
  else
  {
    if (v9 == 29)
    {
      v15 = v6[1] & 0xFFFFFFFFFFFFFFF0;
      v16 = *(_QWORD *)v15;
      v17 = (llvm::ArrayType *)sub_22E66CB04(a1, *(_QWORD *)(*(_QWORD *)v15 + 32));
      return llvm::ArrayType::get(v17, (llvm::Type *)(*(_DWORD *)(v16 + 44) * *(_DWORD *)(v16 + 40)));
    }
    v19 = (llvm::Type *)sub_22E66CB04(a1, a2);
    v14 = (uint64_t)v19;
    v20 = *v6;
    v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (!a3 || v21 != 9)
    {
      if (v21 == 9 || !llvm::Type::isIntegerTy(v19))
        return v14;
      v20 = *v6;
    }
    sub_22EF5CDF0(*(_QWORD *)(a1 + 8), v20);
  }
  return llvm::IntegerType::get();
}

uint64_t sub_22E66CB04(llvm::Type ***a1, llvm::LLVMContext *a2)
{
  char v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  llvm::Type **v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  void **v18;
  llvm::Type **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  llvm::LLVMContext *v26;
  uint64_t Int8Ty;
  unsigned int v28;
  llvm::Type **v29;
  llvm::Type *v30;
  llvm::ArrayType *v31;
  llvm::LLVMContext *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t IntNTy;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::LLVMContext *v40;
  uint64_t (*v42)(void);
  uint64_t v43;
  llvm::LLVMContext *v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  uint64_t v49;
  llvm::LLVMContext *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  char v61;
  _QWORD *v62;
  void **v63;
  llvm::Type **v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  llvm::APFloatBase *v76;
  int v77;
  llvm::APFloatBase *v78;
  uint64_t v79;
  llvm::Type **v80;
  llvm::APFloatBase *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Type **v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;

  v2 = (char)a2;
  v88 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v84 = v6;
  if ((*((_WORD *)a1[1][250] + 48) & 0x80) != 0)
  {
    if (sub_22F1151E0(v6))
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)sub_22E699F3C(*a1) + 304);
      goto LABEL_6;
    }
    if (sub_22F115220(*v5))
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)sub_22E699F3C(*a1) + 312);
LABEL_6:
      v8 = (llvm::Type **)v7();
      if (v8)
        return (uint64_t)v8;
    }
  }
  if (v6 && *(_BYTE *)(v6 + 16) == 45)
  {
    v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
    return sub_22E66D900((uint64_t)a1, v9);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 11
    && (*((_DWORD *)a1 + 45) != *((_DWORD *)a1 + 46) || *((_DWORD *)a1 + 61) != *((_DWORD *)a1 + 62)))
  {
    v11 = 0;
LABEL_18:
    v8 = 0;
    v12 = *(_DWORD *)(v6 + 16);
    switch((char)v12)
    {
      case 2:
        Int8Ty = sub_22E66C868((uint64_t)a1, *(_QWORD *)(v6 + 32), 0);
        v28 = *(unsigned __int8 *)(Int8Ty + 8);
        if (v28 > 0x11)
          goto LABEL_117;
        if (((1 << v28) & 0xAC7F) != 0)
          goto LABEL_48;
        if (((1 << v28) & 0x30000) != 0)
          goto LABEL_122;
LABEL_117:
        if ((v28 & 0xFE) != 0x12 && v28 != 21)
          goto LABEL_123;
LABEL_122:
        if ((llvm::Type::isSizedDerivedType() & 1) == 0)
        {
LABEL_123:
          *((_BYTE *)a1 + 288) = 1;
          Int8Ty = llvm::Type::getInt8Ty(*a1[2], v26);
        }
LABEL_48:
        v29 = (llvm::Type **)(v6 + 40);
        if (*(_DWORD *)(v6 + 48) >= 0x41u)
          v29 = (llvm::Type **)*v29;
        v30 = *v29;
        v31 = (llvm::ArrayType *)Int8Ty;
        goto LABEL_54;
      case 4:
        v33 = sub_22E66C868((uint64_t)a1, *(_QWORD *)(v6 + 32), 0);
        v34 = *(unsigned __int8 *)(v33 + 8);
        if (v34 > 0x11)
          goto LABEL_125;
        if (((1 << v34) & 0xAC7F) != 0)
          goto LABEL_53;
        if (((1 << v34) & 0x30000) != 0)
          goto LABEL_130;
LABEL_125:
        if ((v34 & 0xFE) != 0x12 && v34 != 21)
          goto LABEL_131;
LABEL_130:
        if ((llvm::Type::isSizedDerivedType() & 1) == 0)
        {
LABEL_131:
          *((_BYTE *)a1 + 288) = 1;
          v33 = llvm::Type::getInt8Ty(*a1[2], v32);
        }
LABEL_53:
        v31 = (llvm::ArrayType *)v33;
        v30 = 0;
LABEL_54:
        IntNTy = llvm::ArrayType::get(v31, v30);
        goto LABEL_98;
      case 5:
        IntNTy = sub_22E66C868((uint64_t)a1, *(_QWORD *)(v6 + 32), 0);
        goto LABEL_98;
      case 6:
        v36 = *(_QWORD *)(v6 + 32);
        v8 = (llvm::Type **)sub_22E66C868((uint64_t)a1, v36, 0);
        v37 = sub_22EF5CDF0((uint64_t)a1[1], *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0));
        v38 = sub_22EF5CDF0((uint64_t)a1[1], v6);
        if (v38 == v37)
          goto LABEL_99;
        v85 = v8;
        v86 = (_QWORD *)llvm::ArrayType::get((*a1)[1], (llvm::Type *)((unint64_t)(v38 - v37) >> 3));
LABEL_64:
        IntNTy = llvm::StructType::get();
        goto LABEL_98;
      case 9:
        IntNTy = llvm::Type::getIntNTy(*a1[2], (llvm::LLVMContext *)((*(_DWORD *)(v6 + 32) >> 1) & 0xFFFFFF));
        goto LABEL_98;
      case 10:
        v39 = *(_QWORD *)(v6 + 32);
        if ((*((_DWORD *)(*a1)[19] + 13) & 0x40000000) != 0)
          sub_22F245EDC((uint64_t)*a1);
        else
          sub_22E66C868((uint64_t)a1, v39, 0);
        goto LABEL_97;
      case 11:
        v40 = (llvm::LLVMContext *)(v4 | v2 & 7);
        switch((v12 >> 19) & 0x1FF)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0xDEu:
          case 0xDFu:
          case 0xE0u:
          case 0xE1u:
          case 0xE2u:
            if ((*((_DWORD *)a1[1][250] + 13) & 0x40000000) != 0)
              v42 = *(uint64_t (**)(void))(*(_QWORD *)(*a1)[99] + 64);
            else
              v42 = *(uint64_t (**)(void))(*(_QWORD *)(*a1)[100] + 24);
            goto LABEL_72;
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x4Fu:
          case 0x50u:
          case 0x51u:
          case 0x52u:
          case 0x53u:
          case 0x54u:
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
          case 0x59u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Cu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
          case 0xA0u:
          case 0xA1u:
          case 0xA2u:
          case 0xA3u:
          case 0xA4u:
            sub_22F36AD2C((uint64_t)a1[1], v6);
            sub_22E66CB04(a1, v85);
            return llvm::ScalableVectorType::get();
          case 0x61u:
          case 0x62u:
            sub_22E66CB04(a1, a1[1][2050]);
            goto LABEL_66;
          case 0xA5u:
          case 0xDBu:
          case 0xDCu:
          case 0xDDu:
            IntNTy = llvm::Type::getInt8Ty(*a1[2], v40);
            goto LABEL_98;
          case 0xA6u:
            IntNTy = llvm::Type::getInt1Ty(*a1[2], v40);
            goto LABEL_98;
          case 0xA7u:
          case 0xA8u:
          case 0xA9u:
          case 0xAAu:
          case 0xABu:
          case 0xACu:
          case 0xADu:
          case 0xAEu:
          case 0xAFu:
          case 0xB0u:
          case 0xB2u:
          case 0xB3u:
          case 0xB4u:
          case 0xB5u:
          case 0xB6u:
          case 0xB7u:
          case 0xB8u:
          case 0xBAu:
          case 0xBBu:
          case 0xBCu:
          case 0xBDu:
          case 0xBEu:
          case 0xBFu:
          case 0xC0u:
          case 0xC1u:
          case 0xC2u:
          case 0xC3u:
          case 0xC4u:
          case 0xC5u:
          case 0xC6u:
          case 0xC7u:
          case 0xC8u:
          case 0xC9u:
          case 0xCAu:
          case 0xCBu:
          case 0xCCu:
          case 0xCDu:
          case 0xCEu:
          case 0xCFu:
          case 0xD0u:
          case 0xD1u:
            sub_22EF5CDF0((uint64_t)a1[1], *v5);
            goto LABEL_133;
          case 0xB1u:
          case 0xB9u:
LABEL_133:
            IntNTy = llvm::IntegerType::get();
            goto LABEL_98;
          case 0xD2u:
            v78 = *a1[2];
            v79 = sub_22EF5B2E0((uint64_t)a1[1], (uint64_t)v40);
            v80 = a1[1];
            if ((*((_BYTE *)v80[250] + 68) & 8) != 0)
              v77 = 1;
            else
              v77 = (*(uint64_t (**)(llvm::Type *))(*(_QWORD *)v80[1886] + 248))(v80[1886]) ^ 1;
            v76 = v78;
            v75 = (llvm::APFloatBase *)v79;
            goto LABEL_141;
          case 0xD3u:
          case 0xD4u:
          case 0xD5u:
          case 0xD7u:
          case 0xD8u:
          case 0xD9u:
            v74 = *a1[2];
            v75 = (llvm::APFloatBase *)sub_22EF5B2E0((uint64_t)a1[1], (uint64_t)v40);
            v76 = v74;
            v77 = 0;
            goto LABEL_141;
          case 0xD6u:
            v81 = *a1[2];
            v75 = (llvm::APFloatBase *)sub_22EF5B2E0((uint64_t)a1[1], (uint64_t)v40);
            v76 = v81;
            v77 = 1;
LABEL_141:
            IntNTy = sub_22E66DC90(v76, v75, v77);
            break;
          case 0xDAu:
            IntNTy = llvm::Type::getInt8PtrTy(*a1[2], 0);
            goto LABEL_98;
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF3u:
          case 0xF4u:
          case 0xF5u:
          case 0xF6u:
          case 0xF7u:
          case 0xF8u:
          case 0xF9u:
          case 0xFAu:
          case 0xFBu:
          case 0xFCu:
          case 0xFDu:
          case 0xFEu:
          case 0xFFu:
          case 0x100u:
          case 0x101u:
          case 0x102u:
            v42 = *(uint64_t (**)(void))(*(_QWORD *)(*a1)[100] + 16);
            goto LABEL_72;
          default:
            v8 = 0;
            goto LABEL_99;
        }
        goto LABEL_98;
      case 12:
        v85 = (llvm::Type **)sub_22E66CB04(a1, *(_QWORD *)(v6 + 32));
        v86 = v85;
        goto LABEL_64;
      case 25:
      case 26:
        v13 = *v5;
        if ((sub_22E66D770((uint64_t)a1, *v5) & 1) != 0)
        {
          sub_22E3BA850((uint64_t)(a1 + 20), (const void *)v13);
          if (v14)
          {
            v15 = v13 & 0xFFFFFFFFFFFFFFF0;
            if (v13)
              v16 = *(_BYTE *)(v13 + 16) == 26;
            else
              v16 = 0;
            if (v16)
              v73 = (void *)sub_22E46C124((uint64_t)a1, v15);
            else
              v73 = (void *)sub_22F24DA0C((uint64_t)a1, v15);
            v17 = (uint64_t)v73;
            v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 28), v73);
            v19 = a1[29];
            v20 = 240;
            if (v19 == a1[28])
              v20 = 244;
            if (v18 == (void **)&v19[*(unsigned int *)((char *)a1 + v20)])
            {
              v8 = (llvm::Type **)sub_22E46F2EC((uint64_t)a1, v17);
            }
            else
            {
              v8 = (llvm::Type **)llvm::StructType::get();
              *((_BYTE *)a1 + 288) = 1;
            }
            v63 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 20), (void *)v13);
            v64 = a1[21];
            v65 = 176;
            if (v64 == a1[20])
              v65 = 180;
            if (v63 == (void **)&v64[*(unsigned int *)((char *)a1 + v65)])
            {
              v66 = *((_DWORD *)a1 + 46);
            }
            else
            {
              *v63 = (void *)-2;
              v66 = *((_DWORD *)a1 + 46) + 1;
              *((_DWORD *)a1 + 46) = v66;
            }
            if (*((_DWORD *)a1 + 45) == v66)
            {
              while (1)
              {
                v67 = *((_DWORD *)a1 + 76);
                if (!v67)
                  break;
                v68 = (unint64_t)a1[37][v67 - 1];
                *((_DWORD *)a1 + 76) = v67 - 1;
                sub_22E66D900((uint64_t)a1, v68);
              }
            }
LABEL_99:
            if (v11)
            {
              v60 = (uint64_t *)(a1 + 47);
              v85 = 0;
              v61 = sub_22F25AFD8(v60, &v84, &v85);
              v62 = v85;
              if ((v61 & 1) == 0)
              {
                v62 = sub_22E66E374((uint64_t)v60, &v84, v85);
                *v62 = v84;
                v62[1] = 0;
              }
              v62[1] = v8;
            }
            return (uint64_t)v8;
          }
        }
        else
        {
          v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v51 && *(_BYTE *)(v51 + 16) == 45)
          {
            v52 = sub_22F114198(*(_QWORD *)(v51 + 24));
            sub_22E66D900((uint64_t)a1, v52);
          }
          if (*(_BYTE *)(v13 + 16) == 26)
          {
            v53 = *(_QWORD *)(v13 + 16);
            if ((v53 & 0x3FFFC000000000) != 0)
            {
              v54 = (uint64_t *)(v13 + 40);
              v55 = (unsigned __int16)(v53 >> 38);
              do
              {
                v56 = *v54++;
                v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v57 && *(_BYTE *)(v57 + 16) == 45)
                {
                  v58 = sub_22F114198(*(_QWORD *)(v57 + 24));
                  sub_22E66D900((uint64_t)a1, v58);
                }
                --v55;
              }
              while (v55);
            }
          }
        }
        *((_BYTE *)a1 + 288) = 1;
        IntNTy = llvm::StructType::get();
        goto LABEL_98;
      case 29:
        goto LABEL_65;
      case 31:
        if (((*((uint64_t (**)(llvm::Type **, uint64_t))*a1[4] + 19))(a1[4], v6) & 1) == 0)
        {
          v82 = *(_QWORD *)(v6 + 40);
          v83 = 0;
          sub_22F29ED04((uint64_t)&v85, (uint64_t)(a1 + 50), &v82, &v83);
          if ((_BYTE)v87)
          {
            v8 = (llvm::Type **)llvm::StructType::create();
            v85[1] = (llvm::Type *)v8;
          }
          else
          {
            v8 = (llvm::Type **)v85[1];
          }
          goto LABEL_99;
        }
        v42 = (uint64_t (*)(void))*((_QWORD *)*a1[4] + 13);
LABEL_72:
        IntNTy = v42();
        goto LABEL_98;
      case 32:
        sub_22E66C868((uint64_t)a1, *(_QWORD *)(v6 + 32), 0);
        IntNTy = llvm::PointerType::get();
        goto LABEL_98;
      case 33:
        IntNTy = sub_22E66CB04(a1, *(_QWORD *)(v6 + 24));
        goto LABEL_98;
      case 34:
        v85 = (llvm::Type **)v6;
        v71 = sub_22F24C2B0((uint64_t)(a1 + 6), (uint64_t *)&v85);
        v8 = (llvm::Type **)v71[1];
        if (!v8)
        {
          v72 = v71;
          v8 = (llvm::Type **)llvm::StructType::create();
          v72[1] = v8;
        }
        goto LABEL_99;
      case 38:
        v42 = *(uint64_t (**)(void))(*(_QWORD *)(*a1)[99] + 72);
        goto LABEL_72;
      case 39:
        v43 = *(_QWORD *)(v6 + 32);
        if (*(_BYTE *)(sub_22E66C868((uint64_t)a1, v43, 0) + 8) == 7)
          llvm::Type::getInt8Ty(*a1[2], v44);
        v45 = *(_BYTE *)(v6 + 40) & 7;
        v46 = v45 > 4;
        v47 = (1 << v45) & 0x13;
        if (!v46 && v47 != 0)
        {
          sub_22EF5CF80((uint64_t)a1[1], v43);
          goto LABEL_97;
        }
        IntNTy = sub_22F29EAD8((uint64_t)a1, v6);
        goto LABEL_98;
      case 40:
      case 41:
        if ((v12 & 0x100000) == 0)
          goto LABEL_37;
        do
        {
          while (1)
          {
            v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v6)
              break;
            v21 = *(_DWORD *)(v6 + 16);
            if ((v21 & 0xFE) != 0x28)
              break;
            if ((v21 & 0x100000) == 0)
              goto LABEL_37;
          }
          v6 = sub_22F10CF48(v6);
        }
        while ((*(_DWORD *)(v6 + 16) & 0x100000) != 0);
LABEL_37:
        v22 = *(_QWORD *)(v6 + 32);
        sub_22E66C868((uint64_t)a1, v22, 0);
        sub_22EF5CF80((uint64_t)a1[1], v22);
LABEL_97:
        IntNTy = llvm::PointerType::get();
LABEL_98:
        v8 = (llvm::Type **)IntNTy;
        goto LABEL_99;
      case 44:
        v49 = sub_22F114198(*(_QWORD *)(v6 + 24));
        if ((*(_BYTE *)(v49 + 74) & 1) == 0 && (*(_BYTE *)(v49 + 77) & 2) == 0)
        {
          IntNTy = llvm::Type::getInt32Ty(*a1[2], v50);
          goto LABEL_98;
        }
        v59 = sub_22E496830(v49);
        return sub_22E66CB04(a1, v59);
      case 55:
      case 56:
        v23 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(v23 + 16) == 56
          && ((v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 87031819)
            : (v25 = 0),
              v25 && (*((_BYTE *)a1[1][1886] + *(_QWORD *)(*(_QWORD *)a1[1][1886] - 24) + 160) & 0x20) != 0))
        {
          llvm::Type::getInt1Ty(*a1[2], a2);
        }
        else
        {
LABEL_65:
          sub_22E66CB04(a1, *(_QWORD *)(v6 + 32));
        }
LABEL_66:
        IntNTy = llvm::FixedVectorType::get();
        goto LABEL_98;
      default:
        goto LABEL_99;
    }
  }
  v82 = v6;
  v85 = 0;
  v11 = 1;
  if (!sub_22F25AFD8((uint64_t *)a1 + 47, &v82, &v85))
    goto LABEL_18;
  if (v85 == &a1[47][2 * *((unsigned int *)a1 + 98)])
    goto LABEL_18;
  v8 = (llvm::Type **)v85[1];
  if (!v8)
    goto LABEL_18;
  return (uint64_t)v8;
}

uint64_t sub_22E66D5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v3)
    v5 = v4 == 31;
  else
    v5 = 0;
  if (v5)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32), v3);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
    goto LABEL_6;
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22F10CF48(v3);
  if (v7)
  {
    v3 = v7;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32), v3);
  }
  v3 = *(_QWORD *)v9;
  v4 = *(_DWORD *)(*(_QWORD *)v9 + 16);
LABEL_6:
  if ((v4 & 0xFE) != 0x2C)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
      return 1;
    v3 = sub_22F10CF48(v3);
    if (!v3)
      return 1;
  }
  if ((sub_22F1110EC(v3, 0) & 1) == 0)
  {
    if (*(_BYTE *)(v3 + 16) == 45)
    {
      v8 = sub_22F114198(*(_QWORD *)(v3 + 24));
      return sub_22E66D700(v8, a1);
    }
    return 1;
  }
  return 0;
}

uint64_t sub_22E66D700(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BYTE v8[128];

  if (*(_DWORD *)(a2 + 180) == *(_DWORD *)(a2 + 184))
    return 1;
  v4 = v8;
  v5 = v8;
  v6 = 16;
  v7 = 0;
  v2 = sub_22E66DFB8(a1, a2, (uint64_t)&v4);
  if (v5 != v4)
    free(v5);
  return v2;
}

uint64_t sub_22E66D770(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;

  result = sub_22E66D5EC(a1, *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 16) == 26 && (v5 = *(_QWORD *)(a2 + 16), (v5 & 0x3FFFC000000000) != 0))
    {
      v6 = (uint64_t *)(a2 + 40);
      v7 = (unsigned __int16)(v5 >> 38) - 1;
      do
      {
        v8 = *v6++;
        result = sub_22E66D5EC(a1, v8);
        v10 = v7-- != 0;
      }
      while ((_DWORD)result && v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22E66D7EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  llvm::LLVMContext *v5;
  llvm::Type *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x21)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v10 = 0;
    v11 = v4;
    if (sub_22F25AFD8((uint64_t *)(a1 + 376), &v11, &v10))
    {
      v5 = (llvm::LLVMContext *)sub_22E496830(a2);
      v6 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)a1, v5);
      if ((llvm::Type::isIntegerTy(v6) & 1) == 0)
        sub_22F278254(a1 + 376);
    }
    result = *(_QWORD *)(*(_QWORD *)a1 + 824);
    if (result)
      return (uint64_t)sub_22F255F58((int *)result, a2);
  }
  else
  {
    result = sub_22EFC7ADC(a2 + 64);
    if ((result & 1) == 0)
    {
      v8 = *(_QWORD *)(a2 + 48);
      if (!v8)
        v8 = sub_22EF6462C(*(_QWORD *)(a1 + 8), a2);
      v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
      v10 = 0;
      v11 = v9;
      if (sub_22E66E2D8((uint64_t *)(a1 + 96), &v11, &v10))
        sub_22E66D900(a1, a2);
      result = *(_QWORD *)(*(_QWORD *)a1 + 824);
      if (result)
        return sub_22F256020(result, a2);
    }
  }
  return result;
}

uint64_t sub_22E66D900(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  void **v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;

  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
    v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  else
    v5 = sub_22EF6462C(*(_QWORD *)(a1 + 8), a2);
  v36 = *(void **)(v5 & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v6 = sub_22E66E2D8((uint64_t *)(a1 + 96), &v36, &v37);
  v7 = v37;
  if ((v6 & 1) == 0)
  {
    v7 = sub_22E66E424(a1 + 96, &v36, v37);
    *v7 = v36;
    v7[1] = 0;
    goto LABEL_5;
  }
  v8 = v37[1];
  if (!v8)
  {
LABEL_5:
    v9 = llvm::StructType::create();
    v7[1] = v9;
    sub_22E66C4A8(v9, a2);
    v8 = v7[1];
  }
  v10 = sub_22EFC3500(a2);
  if (!v10)
    return v8;
  v11 = v10;
  if ((*(_BYTE *)(v10 + 74) & 1) == 0 || (*(_BYTE *)(v8 + 9) & 1) != 0)
    return v8;
  if ((sub_22E66D700(v10, a1) & 1) != 0)
  {
    sub_22E3BA850(a1 + 160, v36);
    if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v12 = sub_22E46A3A0(v11);
      if (v12 != v13)
      {
        v14 = v12;
        v15 = v13;
        do
        {
          if ((*(_BYTE *)(v14 + 12) & 1) == 0)
          {
            v16 = *(_QWORD *)(**(_QWORD **)(v14 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
              v16 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + 16));
            v17 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 24));
            sub_22E66D900(a1, v17);
          }
          v14 += 24;
        }
        while (v14 != v15);
      }
    }
    sub_22E5E10E0(a1, v11, v8, &v35);
    v37 = 0;
    v18 = sub_22F25AFD8((uint64_t *)(a1 + 72), &v36, &v37);
    v19 = (void **)v37;
    if ((v18 & 1) != 0)
    {
      v32 = v37[1];
      v33 = v35;
      v35 = 0;
      v37[1] = v33;
      if (v32)
      {
        v34 = sub_22E66E640(v32);
        MEMORY[0x2348A0E9C](v34, 0x1020C40ACB1225FLL);
      }
      goto LABEL_24;
    }
    v20 = *(_DWORD *)(a1 + 80);
    v21 = *(_DWORD *)(a1 + 88);
    if (4 * v20 + 4 >= 3 * v21)
    {
      v21 *= 2;
    }
    else if (v21 + ~v20 - *(_DWORD *)(a1 + 84) > v21 >> 3)
    {
LABEL_21:
      ++*(_DWORD *)(a1 + 80);
      if (*v19 != (void *)-4096)
        --*(_DWORD *)(a1 + 84);
      *v19 = v36;
      v22 = v35;
      v35 = 0;
      v19[1] = (void *)v22;
LABEL_24:
      v23 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 160), v36);
      v24 = *(_QWORD *)(a1 + 168);
      v25 = 176;
      if (v24 == *(_QWORD *)(a1 + 160))
        v25 = 180;
      if (v23 != (void **)(v24 + 8 * *(unsigned int *)(a1 + v25)))
      {
        *v23 = (void *)-2;
        ++*(_DWORD *)(a1 + 184);
      }
      if (*(_BYTE *)(a1 + 288))
        sub_22F278254(a1 + 376);
      if (*(_DWORD *)(a1 + 180) == *(_DWORD *)(a1 + 184))
      {
        while (1)
        {
          v26 = *(_DWORD *)(a1 + 304);
          if (!v26)
            break;
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * v26 - 8);
          *(_DWORD *)(a1 + 304) = v26 - 1;
          sub_22E66D900(a1, v27);
        }
      }
      v29 = v35;
      v35 = 0;
      if (v29)
      {
        v30 = sub_22E66E640(v29);
        MEMORY[0x2348A0E9C](v30, 0x1020C40ACB1225FLL);
      }
      return v8;
    }
    sub_22E66E6B4(a1 + 72, v21);
    v37 = 0;
    sub_22F25AFD8((uint64_t *)(a1 + 72), &v36, &v37);
    v19 = (void **)v37;
    goto LABEL_21;
  }
  v28 = *(_DWORD *)(a1 + 304);
  if (v28 >= *(_DWORD *)(a1 + 308))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(a1 + 304);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * v28) = v11;
  ++*(_DWORD *)(a1 + 304);
  return v8;
}

uint64_t sub_22E66DC90(llvm::APFloatBase *a1, llvm::APFloatBase *a2, int a3)
{
  llvm::APFloatBase *v6;
  llvm::LLVMContext *v7;
  llvm::APFloatBase *v8;
  llvm::LLVMContext *v9;
  llvm::APFloatBase *v10;
  llvm::LLVMContext *v11;
  llvm::APFloatBase *v12;
  llvm::LLVMContext *v13;
  llvm::APFloatBase *v14;
  llvm::LLVMContext *v15;
  llvm::LLVMContext *v16;

  v6 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(a1);
  if (v6 == a2)
  {
    if (a3)
      return llvm::Type::getHalfTy(a1, v7);
    else
      return llvm::Type::getInt16Ty(a1, v7);
  }
  else
  {
    v8 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(v6);
    if (v8 == a2)
    {
      return llvm::Type::getBFloatTy(a1, v9);
    }
    else
    {
      v10 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v8);
      if (v10 == a2)
      {
        return llvm::Type::getFloatTy(a1, v11);
      }
      else
      {
        v12 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v10);
        if (v12 == a2)
        {
          return llvm::Type::getDoubleTy(a1, v13);
        }
        else
        {
          v14 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v12);
          if (v14 == a2)
          {
            return llvm::Type::getFP128Ty(a1, v15);
          }
          else if ((llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v14) == a2)
          {
            return llvm::Type::getPPC_FP128Ty(a1, v16);
          }
          else
          {
            return llvm::Type::getX86_FP80Ty(a1, v16);
          }
        }
      }
    }
  }
}

uint64_t sub_22E66DD94(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
    v4 = sub_22EF6462C(*(_QWORD *)(a1 + 8), a2);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v9 = v5;
  v10 = 0;
  v6 = sub_22F25AFD8((uint64_t *)(a1 + 72), &v9, &v10);
  v7 = v10;
  if ((v6 & 1) == 0)
    v7 = *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88);
  if (v7 == *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88))
  {
    sub_22E66D900(a1, a2);
    v9 = v5;
    v10 = 0;
    if ((sub_22F25AFD8((uint64_t *)(a1 + 72), &v9, &v10) & 1) != 0)
      v7 = v10;
    else
      v7 = *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88);
  }
  return *(_QWORD *)(v7 + 8);
}

uint64_t sub_22E66DE5C(uint64_t a1, unint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;

  if (sub_22EF5EB64(*(_QWORD *)(*(_QWORD *)a1 + 144), a2))
    return 0;
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v6 && *(_BYTE *)(v6 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && sub_22F10CF48(v6))
  {
    return sub_22EF741C8(*(_QWORD *)(a1 + 8), a2) == 0;
  }
  v7 = sub_22EF5C728(*(_QWORD *)(a1 + 8), a2);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 4 || v8 == 2 && !sub_22EF6A060(*(_QWORD *)(a1 + 8), v7))
      return 1;
    v5 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(a1 + 8), a2) & 0xFFFFFFFFFFFFFFF0);
  }
  v9 = *v5;
  v10 = *(_QWORD *)(*(_QWORD *)(*v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v10 && v11 == 45)
  {
    v12 = sub_22F114198(*(_QWORD *)(v10 + 24));
    return *(_BYTE *)(sub_22E66DD94(a1, v12) + 112) & 1;
  }
  if (*(_BYTE *)(v9 + 16) == 31)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32), v9);
  if (v11 == 31)
  {
    v9 = sub_22F10CF48(*v5);
    if (v9)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32), v9);
  }
  return 1;
}

uint64_t sub_22E66DFB8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  sub_22E3BA850(a3, (const void *)a1);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (!v7)
      v7 = sub_22EF6462C(*(_QWORD *)(a2 + 8), a1);
    v8 = *(void **)(v7 & 0xFFFFFFFFFFFFFFF0);
    v32 = 0;
    v33 = v8;
    if (sub_22E66E2D8((uint64_t *)(a2 + 96), &v33, &v32))
    {
      v11 = v32;
      v9 = *(_QWORD *)(a2 + 96);
      v10 = *(unsigned int *)(a2 + 112);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 96);
      v10 = *(unsigned int *)(a2 + 112);
      v11 = v9 + 16 * v10;
    }
    if (v11 == v9 + 16 * v10 || (*(_BYTE *)(*(_QWORD *)(v11 + 8) + 9) & 1) == 0)
    {
      v12 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a2 + 160), v8);
      v13 = *(_QWORD *)(a2 + 168);
      if (v13 == *(_QWORD *)(a2 + 160))
        v14 = (unsigned int *)(a2 + 180);
      else
        v14 = (unsigned int *)(a2 + 176);
      if (v12 != (void **)(v13 + 8 * *v14))
        return 0;
      if ((*(_DWORD *)(a1 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      {
        v16 = sub_22E46A3A0(a1);
        if (v16 != v17)
        {
          v18 = v16;
          v19 = v17;
          do
          {
            v20 = *(_QWORD *)(**(_QWORD **)(v18 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
              v20 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v18 + 16));
            v21 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 24));
            if ((sub_22E66DFB8(v21, a2, a3) & 1) == 0)
              return 0;
            v18 += 24;
          }
          while (v18 != v19);
        }
      }
      v22 = sub_22EFC3B90(a1);
      if (v22)
      {
        v23 = v22;
LABEL_23:
        v24 = (unint64_t *)(v23 + 48);
        do
        {
          v25 = *v24;
          v26 = *v24 & 0xFFFFFFFFFFFFFFF0;
          v27 = *(_QWORD *)v26;
          if (*(_QWORD *)v26)
            v28 = *(_BYTE *)(*(_QWORD *)v26 + 16) == 6;
          else
            v28 = 0;
          if (v28
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
            && (v27 = sub_22F10CF48(v27)) != 0)
          {
            v25 = *(_QWORD *)(v27 + 32);
            v26 = v25 & 0xFFFFFFFFFFFFFFF0;
          }
          v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v29 && *(_BYTE *)(v29 + 16) == 45)
          {
            v31 = sub_22F114198(*(_QWORD *)(v29 + 24));
            if ((sub_22E66DFB8(v31, a2, a3) & 1) != 0)
              break;
            return 0;
          }
          v30 = sub_22EF5C728(*(_QWORD *)(a2 + 8), v25);
          v24 = (unint64_t *)(v30 + 32);
        }
        while (v30);
        while (1)
        {
          v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v23)
            break;
          if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_23;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22E66E204(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      v4 = *(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *v3;
        *v3 = 0;
        if (v5)
        {
          llvm::deallocate_buffer(*(llvm **)(v5 + 88), (void *)(16 * *(unsigned int *)(v5 + 104)));
          llvm::deallocate_buffer(*(llvm **)(v5 + 64), (void *)(16 * *(unsigned int *)(v5 + 80)));
          llvm::deallocate_buffer(*(llvm **)(v5 + 40), (void *)(40 * *(unsigned int *)(v5 + 56)));
          llvm::deallocate_buffer(*(llvm **)(v5 + 16), (void *)(16 * *(unsigned int *)(v5 + 32)));
          result = MEMORY[0x2348A0E9C](v5, 0x1020C40ACB1225FLL);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22E66E2D8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22E66E374(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E66BD44(a1, v6);
  v8 = 0;
  sub_22F25AFD8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22E66E424(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E66E4D4(a1, v6);
  v8 = 0;
  sub_22E66E2D8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22E66E4D4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E66E594(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E66E594(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E66E2D8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E66E640(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 88), (void *)(16 * *(unsigned int *)(a1 + 104)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(16 * *(unsigned int *)(a1 + 80)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(40 * *(unsigned int *)(a1 + 56)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(16 * *(unsigned int *)(a1 + 32)));
  return a1;
}

_QWORD *sub_22E66E6B4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E66E774(a1, v4, (_QWORD *)v4 + 2 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E66E774(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22F25AFD8((uint64_t *)v5, a2, &v12);
      v9 = v12;
      *v12 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
      {
        v11 = sub_22E66E640(result);
        result = MEMORY[0x2348A0E9C](v11, 0x1020C40ACB1225FLL);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E66E84C(uint64_t a1, unint64_t a2)
{
  float *v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::Type ***v8;
  llvm::LLVMContext *v9;
  std::string *v10;
  std::string::size_type v11;
  std::string v12;
  __int16 v13;
  void *__p[2];
  std::string::size_type v15;
  unint64_t v16;

  v16 = a2;
  v4 = (float *)(a1 + 144);
  v5 = sub_22F29F33C((_QWORD *)(a1 + 144), a2);
  if (v5)
    return v5[3];
  v8 = (llvm::Type ***)(*(_QWORD *)(a1 + 192) + 280);
  v9 = (llvm::LLVMContext *)sub_22F29EEE4(a1);
  sub_22E66CB04(v8, v9);
  sub_22E6702C4(&v12, a2);
  v10 = std::string::append(&v12, "$placeholder");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = llvm::User::operator new((llvm::User *)0x58);
  v13 = 260;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  llvm::GlobalVariable::GlobalVariable();
  sub_22E670768(v4, a2, &v16)[3] = v6;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_22E66E97C(unint64_t *a1, uint64_t a2)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  uint64_t BitCast;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  std::string *v16;
  std::string::size_type v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21[2];
  std::string::size_type v22;
  void *__p[2];
  std::string::size_type v24;
  _QWORD v25[3];
  uint64_t v26;
  std::string v27;
  __int16 v28;
  std::string v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[3];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v20 = sub_22F29C8D4(a2);
  v4 = (llvm::LLVMContext *)sub_22F29EEE4(v20);
  v5 = sub_22E66CB04((llvm::Type ***)(a2 + 280), v4);
  llvm::ConstantDataArray::getString();
  llvm::User::operator new((llvm::User *)0x58);
  sub_22E6702C4(&v29, *a1);
  v6 = std::string::append(&v29, "$x");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v24 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v31 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  llvm::GlobalVariable::GlobalVariable();
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  llvm::GlobalObject::setSection();
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  llvm::ConstantDataArray::getString();
  llvm::User::operator new((llvm::User *)0x58);
  sub_22E6702C4(&v29, *a1);
  v9 = std::string::append(&v29, "$j");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v31 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  llvm::GlobalVariable::GlobalVariable();
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  llvm::GlobalObject::setSection();
  llvm::PointerType::get();
  v11 = llvm::ConstantExpr::getBitCast();
  v29.__r_.__value_.__r.__words[0] = a2;
  v29.__r_.__value_.__l.__size_ = (std::string::size_type)&v30;
  v29.__r_.__value_.__r.__words[2] = 0x1000000000;
  memset(v32, 0, sizeof(v32));
  __p[0] = &v29;
  __p[1] = 0;
  v24 = 0;
  memset(v25, 0, 11);
  v33 = 1;
  v25[2] = 0;
  v26 = v5;
  if (v5)
    BYTE2(v25[1]) = (*(_DWORD *)(v5 + 8) & 0x200) != 0;
  sub_22F246F08((uint64_t *)__p);
  sub_22F246F08((uint64_t *)__p);
  sub_22F246F08((uint64_t *)__p);
  sub_22F246F08((uint64_t *)__p);
  sub_22F246F08((uint64_t *)__p);
  v12 = __p[0];
  v13 = *((_DWORD *)__p[0] + 4);
  if (v13 >= *((_DWORD *)__p[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v12[4];
  }
  *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * v13) = BitCast;
  ++v12[4];
  v14 = __p[0];
  v15 = *((_DWORD *)__p[0] + 4);
  if (v15 >= *((_DWORD *)__p[0] + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v14[4];
  }
  *(_QWORD *)(*((_QWORD *)v14 + 1) + 8 * v15) = v11;
  ++v14[4];
  sub_22E6702C4(&v27, *a1);
  v16 = std::string::append(&v27, "$m");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v22 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v18 = __p[0];
  sub_22E670C54((uint64_t *)__p, v26);
  v28 = 260;
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  v19 = (_QWORD *)sub_22F29F614((uint64_t)v18);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  llvm::GlobalObject::setSection();
  sub_22F29F19C(v20, *a1, v19);
  __p[0] = v32;
  sub_22E3CEB30((void ***)__p);
  if ((uint64_t *)v29.__r_.__value_.__l.__size_ != &v30)
    free((void *)v29.__r_.__value_.__l.__size_);
}

unint64_t sub_22E66EE2C(uint64_t a1, unint64_t a2)
{
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  _WORD *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  std::string *p_str;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  void **v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD *v33;
  _QWORD *i;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *j;
  unint64_t v75;
  _QWORD *v76;
  float v77;
  float v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  int8x8_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint8x8_t v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  int v108;
  void **p_p;
  void *__p;
  uint64_t v111;
  uint64_t v112;
  std::string __str;
  _QWORD v114[3];
  uint64_t (**v115)();
  void *v116;
  void *v117;
  uint64_t v118;

  v4 = (void **)(a1 + 24);
  v5 = sub_22F29F250((_QWORD *)(a1 + 24), a2);
  if (v5)
    return v5[3];
  v8 = *(_QWORD *)(a1 + 192);
  v9 = operator new();
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  v10 = *(_QWORD *)(v8 + 144);
  v11 = (unint64_t)&unk_24FAC7D98;
  v114[0] = &off_24FAC7DA8;
  v114[1] = v10;
  v12 = (unint64_t)&unk_24FAC7DE8;
  v114[2] = a2 & 0xFFFFFFFFFFFFFFF0;
  v115 = &off_24FAC7DF8;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  sub_22F40B7D4((uint64_t)v114);
  v13 = sub_22EF5CDF0(*(_QWORD *)(v8 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  *(_DWORD *)(v9 + 8) = sub_22EF5CDF0(*(_QWORD *)(v8 + 144), a2) / v13;
  sub_22EF5CDF0(*(_QWORD *)(v8 + 144), a2);
  *(_DWORD *)(v9 + 12) = v14 / v13;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5)
    *(_DWORD *)(v9 + 16) |= 1u;
  v15 = sub_22F10C2A4(a2);
  if (v15)
  {
    v16 = v15;
    if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 <= 2)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
      if ((**(_QWORD **)(v16 + 128) & 0x400) != 0)
        *(_DWORD *)(v9 + 16) |= 2u;
    }
  }
  sub_22F120A1C((uint64_t)v114, &__str);
  __p = 0;
  v111 = 0;
  v112 = 0;
  v102 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 1;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v101 = MEMORY[0x24BED83D8] + 16;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::write((llvm::raw_ostream *)&v101, ", ");
  v17 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v18 = (_WORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
  {
    *v18 = 8236;
    *((_QWORD *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, ", ");
  }
  v19 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v20 = (_WORD *)*((_QWORD *)v19 + 4);
  if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 1uLL)
  {
    *v20 = 8236;
    *((_QWORD *)v19 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v19, ", ");
  }
  v21 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 2)
  {
    *(_BYTE *)(v22 + 2) = 39;
    *(_WORD *)v22 = 8236;
    *((_QWORD *)v21 + 4) += 3;
  }
  else
  {
    v21 = (llvm::raw_ostream *)llvm::raw_ostream::write(v21, ", '");
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v24 = (llvm::raw_ostream *)llvm::raw_ostream::write(v21, (const char *)p_str);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (*((_BYTE **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, "'");
  }
  else
  {
    *v25 = 39;
    ++*((_QWORD *)v24 + 4);
  }
  std::string::operator=((std::string *)(v9 + 24), &__str);
  if (v112 >= 0)
    v26 = (unsigned __int8 *)&__p;
  else
    v26 = (unsigned __int8 *)__p;
  if (v112 >= 0)
    v27 = HIBYTE(v112) & 0x7F;
  else
    v27 = v111;
  *(_QWORD *)v9 = sub_22F3F1554(v26, v27);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v101);
  if (SHIBYTE(v112) < 0)
    operator delete(__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v114[0] = &off_24FAC7DA8;
  v115 = &off_24FAC7DF8;
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v28 = (void **)(a1 + 64);
  v29 = *(_QWORD *)v9;
  v30 = sub_22F29F33C((_QWORD *)(a1 + 64), *(_QWORD *)v9);
  if (v30)
  {
    v6 = v30[3];
    goto LABEL_113;
  }
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v12 = v29;
      if (v31 <= v29)
        v12 = v29 % v31;
    }
    else
    {
      v12 = (v31 - 1) & v29;
    }
    v33 = (_QWORD *)*((_QWORD *)*v28 + v12);
    if (v33)
    {
      for (i = (_QWORD *)*v33; i; i = (_QWORD *)*i)
      {
        v35 = i[1];
        if (v35 == v29)
        {
          if (i[2] == v29)
            goto LABEL_96;
        }
        else
        {
          if (v32.u32[0] > 1uLL)
          {
            if (v35 >= v31)
              v35 %= v31;
          }
          else
          {
            v35 &= v31 - 1;
          }
          if (v35 != v12)
            break;
        }
      }
    }
  }
  v36 = operator new(0x20uLL);
  *v36 = 0;
  v36[1] = v29;
  v36[2] = v29;
  v36[3] = v9;
  v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
  v38 = *(float *)(a1 + 96);
  if (!v31 || (float)(v38 * (float)v31) < v37)
  {
    v39 = 1;
    if (v31 >= 3)
      v39 = (v31 & (v31 - 1)) != 0;
    v40 = v39 | (2 * v31);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = (int8x8_t)v41;
    else
      prime = (int8x8_t)v40;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v31 = *(_QWORD *)(a1 + 72);
    }
    if (*(_QWORD *)&prime <= v31)
    {
      if (*(_QWORD *)&prime >= v31)
        goto LABEL_81;
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v31 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v31)
      {
        v31 = *(_QWORD *)(a1 + 72);
LABEL_81:
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v31 <= v29)
            v12 = v29 % v31;
          else
            v12 = v29;
        }
        else
        {
          v12 = (v31 - 1) & v29;
        }
        goto LABEL_86;
      }
      if (!*(_QWORD *)&prime)
      {
        v100 = *v28;
        *v28 = 0;
        if (v100)
          operator delete(v100);
        v31 = 0;
        *(_QWORD *)(a1 + 72) = 0;
        goto LABEL_81;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      goto LABEL_226;
    v43 = operator new(8 * *(_QWORD *)&prime);
    v44 = *v28;
    *v28 = v43;
    if (v44)
      operator delete(v44);
    v45 = 0;
    *(int8x8_t *)(a1 + 72) = prime;
    do
      *((_QWORD *)*v28 + v45++) = 0;
    while (*(_QWORD *)&prime != v45);
    v46 = *(_QWORD **)(a1 + 80);
    if (!v46)
      goto LABEL_80;
    v47 = v46[1];
    v48 = (uint8x8_t)vcnt_s8(prime);
    v48.i16[0] = vaddlv_u8(v48);
    if (v48.u32[0] > 1uLL)
    {
      if (v47 >= *(_QWORD *)&prime)
        v47 %= *(_QWORD *)&prime;
    }
    else
    {
      v47 &= *(_QWORD *)&prime - 1;
    }
    *((_QWORD *)*v28 + v47) = a1 + 80;
    v52 = (_QWORD *)*v46;
    if (!*v46)
    {
LABEL_80:
      v31 = (unint64_t)prime;
      goto LABEL_81;
    }
    while (1)
    {
      v99 = v52[1];
      if (v48.u32[0] > 1uLL)
      {
        if (v99 >= *(_QWORD *)&prime)
          v99 %= *(_QWORD *)&prime;
      }
      else
      {
        v99 &= *(_QWORD *)&prime - 1;
      }
      if (v99 != v47)
      {
        if (!*((_QWORD *)*v28 + v99))
        {
          *((_QWORD *)*v28 + v99) = v46;
          goto LABEL_210;
        }
        *v46 = *v52;
        *v52 = **((_QWORD **)*v28 + v99);
        **((_QWORD **)*v28 + v99) = v52;
        v52 = v46;
      }
      v99 = v47;
LABEL_210:
      v46 = v52;
      v52 = (_QWORD *)*v52;
      v47 = v99;
      if (!v52)
        goto LABEL_80;
    }
  }
LABEL_86:
  v53 = *v28;
  v54 = (_QWORD *)*((_QWORD *)*v28 + v12);
  if (v54)
  {
    *v36 = *v54;
  }
  else
  {
    *v36 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v36;
    v53[v12] = a1 + 80;
    if (!*v36)
      goto LABEL_95;
    v55 = *(_QWORD *)(*v36 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v55 >= v31)
        v55 %= v31;
    }
    else
    {
      v55 &= v31 - 1;
    }
    v54 = (char *)*v28 + 8 * v55;
  }
  *v54 = v36;
LABEL_95:
  ++*(_QWORD *)(a1 + 88);
LABEL_96:
  v57 = *(uint64_t **)(a1 + 8);
  v56 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v57 >= v56)
  {
    v58 = *(uint64_t **)a1;
    v59 = ((uint64_t)v57 - *(_QWORD *)a1) >> 3;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61)
      abort();
    v61 = v56 - (_QWORD)v58;
    if (v61 >> 2 > v60)
      v60 = v61 >> 2;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v62 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 61)
        goto LABEL_226;
      v63 = (char *)operator new(8 * v62);
    }
    else
    {
      v63 = 0;
    }
    v64 = (uint64_t *)&v63[8 * v59];
    v65 = &v63[8 * v62];
    *v64 = v9;
    v11 = (unint64_t)(v64 + 1);
    if (v57 == v58)
    {
      *(_QWORD *)a1 = v64;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v65;
    }
    else
    {
      do
      {
        v71 = *--v57;
        *v57 = 0;
        *--v64 = v71;
      }
      while (v57 != v58);
      v57 = *(uint64_t **)a1;
      v72 = *(uint64_t **)(a1 + 8);
      *(_QWORD *)a1 = v64;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v65;
      while (v72 != v57)
        sub_22E63B5D8(--v72, 0);
    }
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v57 = v9;
    v11 = (unint64_t)(v57 + 1);
  }
  *(_QWORD *)(a1 + 8) = v11;
  v6 = v9;
  v9 = 0;
LABEL_113:
  v66 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v67 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v66 >> 47) ^ v66);
  v68 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
  v69 = *(_QWORD *)(a1 + 32);
  if (v69)
  {
    v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.u32[0] > 1uLL)
    {
      v11 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
      if (v68 >= v69)
        v11 = v68 % v69;
    }
    else
    {
      v11 = (v69 - 1) & v68;
    }
    v73 = (_QWORD *)*((_QWORD *)*v4 + v11);
    if (v73)
    {
      for (j = (_QWORD *)*v73; j; j = (_QWORD *)*j)
      {
        v75 = j[1];
        if (v75 == v68)
        {
          if (j[2] == a2)
            goto LABEL_178;
        }
        else
        {
          if (v70.u32[0] > 1uLL)
          {
            if (v75 >= v69)
              v75 %= v69;
          }
          else
          {
            v75 &= v69 - 1;
          }
          if (v75 != v11)
            break;
        }
      }
    }
  }
  v76 = operator new(0x20uLL);
  *v76 = 0;
  v76[1] = v68;
  v76[2] = a2;
  v76[3] = v6;
  v77 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
  v78 = *(float *)(a1 + 56);
  if (!v69 || (float)(v78 * (float)v69) < v77)
  {
    v79 = 1;
    if (v69 >= 3)
      v79 = (v69 & (v69 - 1)) != 0;
    v80 = v79 | (2 * v69);
    v81 = vcvtps_u32_f32(v77 / v78);
    if (v80 <= v81)
      v82 = (int8x8_t)v81;
    else
      v82 = (int8x8_t)v80;
    if (*(_QWORD *)&v82 == 1)
    {
      v82 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v82 & (*(_QWORD *)&v82 - 1)) != 0)
    {
      v82 = (int8x8_t)std::__next_prime(*(_QWORD *)&v82);
      v69 = *(_QWORD *)(a1 + 32);
    }
    if (*(_QWORD *)&v82 <= v69)
    {
      if (*(_QWORD *)&v82 >= v69)
        goto LABEL_163;
      v89 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v69 < 3 || (v90 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v90.i16[0] = vaddlv_u8(v90), v90.u32[0] > 1uLL))
      {
        v89 = std::__next_prime(v89);
      }
      else
      {
        v91 = 1 << -(char)__clz(v89 - 1);
        if (v89 >= 2)
          v89 = v91;
      }
      if (*(_QWORD *)&v82 <= v89)
        v82 = (int8x8_t)v89;
      if (*(_QWORD *)&v82 >= v69)
      {
        v69 = *(_QWORD *)(a1 + 32);
LABEL_163:
        if ((v69 & (v69 - 1)) != 0)
        {
          if (v68 >= v69)
            v11 = v68 % v69;
          else
            v11 = v68;
        }
        else
        {
          v11 = (v69 - 1) & v68;
        }
        goto LABEL_168;
      }
      if (!*(_QWORD *)&v82)
      {
        v98 = *v4;
        *v4 = 0;
        if (v98)
          operator delete(v98);
        v69 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        goto LABEL_163;
      }
    }
    if (!(*(_QWORD *)&v82 >> 61))
    {
      v83 = operator new(8 * *(_QWORD *)&v82);
      v84 = *v4;
      *v4 = v83;
      if (v84)
        operator delete(v84);
      v85 = 0;
      *(int8x8_t *)(a1 + 32) = v82;
      do
        *((_QWORD *)*v4 + v85++) = 0;
      while (*(_QWORD *)&v82 != v85);
      v86 = *(_QWORD **)(a1 + 40);
      if (!v86)
        goto LABEL_162;
      v87 = v86[1];
      v88 = (uint8x8_t)vcnt_s8(v82);
      v88.i16[0] = vaddlv_u8(v88);
      if (v88.u32[0] > 1uLL)
      {
        if (v87 >= *(_QWORD *)&v82)
          v87 %= *(_QWORD *)&v82;
      }
      else
      {
        v87 &= *(_QWORD *)&v82 - 1;
      }
      *((_QWORD *)*v4 + v87) = a1 + 40;
      v92 = (_QWORD *)*v86;
      if (!*v86)
      {
LABEL_162:
        v69 = (unint64_t)v82;
        goto LABEL_163;
      }
      while (1)
      {
        v97 = v92[1];
        if (v88.u32[0] > 1uLL)
        {
          if (v97 >= *(_QWORD *)&v82)
            v97 %= *(_QWORD *)&v82;
        }
        else
        {
          v97 &= *(_QWORD *)&v82 - 1;
        }
        if (v97 != v87)
        {
          if (!*((_QWORD *)*v4 + v97))
          {
            *((_QWORD *)*v4 + v97) = v86;
            goto LABEL_190;
          }
          *v86 = *v92;
          *v92 = **((_QWORD **)*v4 + v97);
          **((_QWORD **)*v4 + v97) = v92;
          v92 = v86;
        }
        v97 = v87;
LABEL_190:
        v86 = v92;
        v92 = (_QWORD *)*v92;
        v87 = v97;
        if (!v92)
          goto LABEL_162;
      }
    }
LABEL_226:
    sub_22E3B3F8C();
  }
LABEL_168:
  v93 = *v4;
  v94 = (_QWORD *)*((_QWORD *)*v4 + v11);
  if (v94)
  {
    *v76 = *v94;
  }
  else
  {
    v95 = *(_QWORD *)(a1 + 40);
    *v76 = v95;
    *(_QWORD *)(a1 + 40) = v76;
    v93[v11] = a1 + 40;
    if (!v95)
      goto LABEL_177;
    v96 = *(_QWORD *)(v95 + 8);
    if ((v69 & (v69 - 1)) != 0)
    {
      if (v96 >= v69)
        v96 %= v69;
    }
    else
    {
      v96 &= v69 - 1;
    }
    v94 = (char *)*v4 + 8 * v96;
  }
  *v94 = v76;
LABEL_177:
  ++*(_QWORD *)(a1 + 48);
LABEL_178:
  sub_22F29F3F0((_QWORD *)(a1 + 104), v6, a2);
  if (v9)
  {
    if (*(char *)(v9 + 47) < 0)
      operator delete(*(void **)(v9 + 24));
    MEMORY[0x2348A0E9C](v9, 0x1012C40A79BC5E8);
  }
  return v6;
}

void sub_22E66FA74(unint64_t ***a1)
{
  unint64_t v1;
  unint64_t **v3;
  unint64_t **v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t **v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  _QWORD *v27;
  _QWORD *i;
  unint64_t v29;
  _QWORD *v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD **v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t **v53;
  unint64_t **v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  unint64_t **v58;
  unint64_t **v59;
  unint64_t *v60;
  unint64_t **v61;
  unint64_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t **v65;
  unint64_t **v66;
  unint64_t v67;
  void *__p[2];
  void *v69[2];
  float v70;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v5 = 0;
    v17 = 0;
    v66 = 0;
    __p[0] = 0;
    *(_OWORD *)v69 = 0u;
    v70 = 1.0;
    goto LABEL_129;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *v3;
    if (v6 >= v7)
    {
      v9 = (v6 - v5) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
LABEL_145:
        abort();
      if ((v7 - v5) >> 2 > v10)
        v10 = (v7 - v5) >> 2;
      if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 61)
LABEL_144:
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v1 = (unint64_t)&v12[8 * v9];
      *(_QWORD *)v1 = v8;
      v13 = (char *)(v1 + 8);
      while (v6 != v5)
      {
        v14 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)(v1 - 8) = v14;
        v1 -= 8;
      }
      v7 = &v12[8 * v11];
      if (v5)
        operator delete(v5);
      v5 = (char *)v1;
      v6 = v13;
    }
    else
    {
      *(_QWORD *)v6 = v8;
      v6 += 8;
    }
    ++v3;
  }
  while (v3 != v4);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 1.0;
  v15 = v6 - v5;
  if (v6 == v5)
  {
    v17 = 0;
    v66 = 0;
    goto LABEL_129;
  }
  v16 = 0;
  v65 = 0;
  v66 = 0;
  v17 = 0;
  v18 = v15 >> 3;
  if (v18 <= 1)
    v18 = 1;
  v67 = v18;
  do
  {
    v19 = *(unint64_t **)&v5[8 * v16];
    v20 = sub_22E66E84C((uint64_t)a1, *v19);
    v21 = v20;
    v22 = 0x9DDFEA08EB382D69 * (((8 * v20) + 8) ^ HIDWORD(v20));
    v23 = 0x9DDFEA08EB382D69 * (HIDWORD(v20) ^ (v22 >> 47) ^ v22);
    v24 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
    v25 = (int8x8_t)__p[1];
    if (__p[1])
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v1 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
        if ((void *)v24 >= __p[1])
          v1 = v24 % (unint64_t)__p[1];
      }
      else
      {
        v1 = v24 & ((unint64_t)__p[1] - 1);
      }
      v27 = (_QWORD *)*((_QWORD *)__p[0] + v1);
      if (v27)
      {
        for (i = (_QWORD *)*v27; i; i = (_QWORD *)*i)
        {
          v29 = i[1];
          if (v29 == v24)
          {
            if (i[2] == v20)
              goto LABEL_105;
          }
          else
          {
            if (v26.u32[0] > 1uLL)
            {
              if ((void *)v29 >= __p[1])
                v29 %= (unint64_t)__p[1];
            }
            else
            {
              v29 &= (unint64_t)__p[1] - 1;
            }
            if (v29 != v1)
              break;
          }
        }
      }
    }
    v30 = operator new(0x18uLL);
    *v30 = 0;
    v30[1] = v24;
    v30[2] = v21;
    v31 = (float)((unint64_t)v69[1] + 1);
    if (!__p[1] || (float)(v70 * (float)(unint64_t)__p[1]) < v31)
    {
      v32 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
      if (__p[1] < (void *)3)
        v32 = 1;
      v33 = v32 | (2 * (uint64_t)__p[1]);
      v34 = vcvtps_u32_f32(v31 / v70);
      if (v33 <= v34)
        prime = (int8x8_t)v34;
      else
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v25 = (int8x8_t)__p[1];
      }
      if (*(_QWORD *)&prime <= *(_QWORD *)&v25)
      {
        if (*(_QWORD *)&prime >= *(_QWORD *)&v25)
          goto LABEL_72;
        v42 = vcvtps_u32_f32((float)(unint64_t)v69[1] / v70);
        if (*(_QWORD *)&v25 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v25), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
        {
          v42 = std::__next_prime(v42);
        }
        else
        {
          v44 = 1 << -(char)__clz(v42 - 1);
          if (v42 >= 2)
            v42 = v44;
        }
        if (*(_QWORD *)&prime <= v42)
          prime = (int8x8_t)v42;
        if (*(_QWORD *)&prime >= *(_QWORD *)&v25)
        {
          v25 = (int8x8_t)__p[1];
LABEL_72:
          if ((*(_QWORD *)&v25 & (*(_QWORD *)&v25 - 1)) != 0)
          {
            if (v24 >= *(_QWORD *)&v25)
              v1 = v24 % *(_QWORD *)&v25;
            else
              v1 = v24;
          }
          else
          {
            v1 = (*(_QWORD *)&v25 - 1) & v24;
          }
          goto LABEL_77;
        }
        if (!*(_QWORD *)&prime)
        {
          v57 = __p[0];
          __p[0] = 0;
          if (v57)
            operator delete(v57);
          v25 = 0;
          __p[1] = 0;
          goto LABEL_72;
        }
      }
      if (*(_QWORD *)&prime >> 61)
        goto LABEL_144;
      v36 = operator new(8 * *(_QWORD *)&prime);
      v37 = __p[0];
      __p[0] = v36;
      if (v37)
        operator delete(v37);
      v38 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v38++) = 0;
      while (*(_QWORD *)&prime != v38);
      v39 = (_QWORD **)v69[0];
      if (!v69[0])
        goto LABEL_71;
      v40 = *((_QWORD *)v69[0] + 1);
      v41 = (uint8x8_t)vcnt_s8(prime);
      v41.i16[0] = vaddlv_u8(v41);
      if (v41.u32[0] > 1uLL)
      {
        if (v40 >= *(_QWORD *)&prime)
          v40 %= *(_QWORD *)&prime;
      }
      else
      {
        v40 &= *(_QWORD *)&prime - 1;
      }
      *((_QWORD *)__p[0] + v40) = v69;
      v45 = *v39;
      if (!*v39)
      {
LABEL_71:
        v25 = prime;
        goto LABEL_72;
      }
      while (1)
      {
        v56 = v45[1];
        if (v41.u32[0] > 1uLL)
        {
          if (v56 >= *(_QWORD *)&prime)
            v56 %= *(_QWORD *)&prime;
        }
        else
        {
          v56 &= *(_QWORD *)&prime - 1;
        }
        if (v56 != v40)
        {
          if (!*((_QWORD *)__p[0] + v56))
          {
            *((_QWORD *)__p[0] + v56) = v39;
            goto LABEL_115;
          }
          *v39 = (_QWORD *)*v45;
          *v45 = **((_QWORD **)__p[0] + v56);
          **((_QWORD **)__p[0] + v56) = v45;
          v45 = v39;
        }
        v56 = v40;
LABEL_115:
        v39 = (_QWORD **)v45;
        v45 = (_QWORD *)*v45;
        v40 = v56;
        if (!v45)
          goto LABEL_71;
      }
    }
LABEL_77:
    v46 = (_QWORD *)*((_QWORD *)__p[0] + v1);
    if (v46)
    {
      *v30 = *v46;
    }
    else
    {
      *v30 = v69[0];
      v69[0] = v30;
      *((_QWORD *)__p[0] + v1) = v69;
      if (!*v30)
        goto LABEL_86;
      v47 = *(_QWORD *)(*v30 + 8);
      if ((*(_QWORD *)&v25 & (*(_QWORD *)&v25 - 1)) != 0)
      {
        if (v47 >= *(_QWORD *)&v25)
          v47 %= *(_QWORD *)&v25;
      }
      else
      {
        v47 &= *(_QWORD *)&v25 - 1;
      }
      v46 = (char *)__p[0] + 8 * v47;
    }
    *v46 = v30;
LABEL_86:
    ++v69[1];
    v48 = sub_22F29C8D4((uint64_t)a1[24]);
    sub_22E66E84C(v48, *v19);
    if (v16 >= a1[1] - *a1)
    {
      if (v17 >= v65)
      {
        v49 = v17 - v66;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          goto LABEL_145;
        if (((char *)v65 - (char *)v66) >> 2 > v50)
          v50 = ((char *)v65 - (char *)v66) >> 2;
        if ((unint64_t)((char *)v65 - (char *)v66) >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
        {
          if (v51 >> 61)
            goto LABEL_144;
          v52 = (char *)operator new(8 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = (unint64_t **)&v52[8 * v49];
        *v53 = v19;
        v54 = v53 + 1;
        while (v17 != v66)
        {
          v55 = *--v17;
          *--v53 = v55;
        }
        v65 = (unint64_t **)&v52[8 * v51];
        if (v66)
          operator delete(v66);
        v17 = v54;
        v66 = v53;
      }
      else
      {
        *v17++ = v19;
      }
    }
LABEL_105:
    ++v16;
  }
  while (v16 != v67);
LABEL_129:
  v58 = *a1;
  v59 = a1[1];
  while (v58 != v59)
  {
    v60 = *v58++;
    sub_22E66E97C(v60, (uint64_t)a1[24]);
  }
  if (v66 != v17)
  {
    v61 = v66;
    do
    {
      v62 = *v61++;
      sub_22E66E97C(v62, (uint64_t)a1[24]);
    }
    while (v61 != v17);
  }
  v63 = v69[0];
  if (v69[0])
  {
    do
    {
      v64 = (_QWORD *)*v63;
      operator delete(v63);
      v63 = v64;
    }
    while (v64);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v66)
    operator delete(v66);
  if (v5)
    operator delete(v5);
}

uint64_t sub_22E670130(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  if ((*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    v4 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
      {
        v8 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v8 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_16;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_15;
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v8 = -48;
          }
          else
          {
LABEL_15:
            if (i != 70)
            {
LABEL_16:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v8 = v10;
              else
                v8 = -72;
              goto LABEL_22;
            }
            v8 = -64;
          }
        }
LABEL_22:
        v11 = *(_QWORD *)(v6 + v8 + 16);
        v6 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v6 = *(_QWORD *)v6;
      }
      v4 = v6 - 40;
    }
    result = sub_22E3CD3D4(*(_QWORD *)(v4 + 88) + 2032, 16, 3);
    v13 = *(_QWORD *)(a1 + 72);
    if ((v13 & 3) == 0 || (v13 & 3) == 3)
    {
      v15 = 0;
    }
    else
    {
      v15 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        v15 = (_QWORD *)*v15;
    }
    *(_QWORD *)result = v15;
    *(_QWORD *)(result + 8) = a2;
    v16 = v13 & 3;
  }
  else
  {
    v16 = 0;
    result = a2;
  }
  *(_QWORD *)(a1 + 72) = v16 | result;
  *(_DWORD *)(a1 + 68) |= 1u;
  return result;
}

void sub_22E6702C4(_QWORD *a1, unint64_t a2)
{
  char v3;
  char *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a1;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::write((llvm::raw_ostream *)&v7, "$t");
  if (a2)
  {
    do
    {
      v3 = a0123456789abcd[a2 % 0x45];
      v4 = v11;
      if ((unint64_t)v11 >= v10)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v7);
      }
      else
      {
        ++v11;
        *v4 = v3;
      }
      v5 = a2 > 0x44;
      a2 /= 0x45uLL;
    }
    while (v5);
  }
  else
  {
    v6 = v11;
    if ((unint64_t)v11 >= v10)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v7);
    }
    else
    {
      ++v11;
      *v6 = 48;
    }
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

_QWORD *sub_22E670418(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *i;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *result;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  void *v35;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_73;
    if (*(_QWORD *)&prime >= v6)
      goto LABEL_43;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_73:
      if (*(_QWORD *)&prime >> 61)
        sub_22E3B3F8C();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v17 = v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
        {
          v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&prime)
              v23 %= *(_QWORD *)&prime;
          }
          else
          {
            v23 &= *(_QWORD *)&prime - 1;
          }
          if (v23 == v17)
          {
            v16 = i;
          }
          else
          {
            v24 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              do
              {
                v25 = v24;
                v24 = (_QWORD *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              *v16 = v24;
              *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v16;
              v16 = i;
              v17 = v23;
            }
          }
        }
      }
      v6 = (unint64_t)prime;
    }
    else
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
  }
  else
  {
    v27 = (v6 - 1) & a2;
  }
  result = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
  if (result)
  {
    v29 = (_QWORD *)*result;
    if (*result)
    {
      v30 = 0;
      do
      {
        v31 = v29;
        v32 = v29[1];
        if (v26.u32[0] > 1uLL)
        {
          v33 = v32;
          if (v32 >= v6)
            v33 = v32 % v6;
        }
        else
        {
          v33 = v32 & (v6 - 1);
        }
        if (v33 != v27)
          break;
        v34 = v32 == a2 && v31[2] == *a3;
        if ((v30 & !v34) == 1)
          break;
        v30 |= v34;
        v29 = (_QWORD *)*v31;
        result = v31;
      }
      while (*v31);
    }
  }
  return result;
}

_QWORD *sub_22E670768(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_22E3B3F8C();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v3] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_22E670B38(uint64_t a1, uint64_t a2)
{
  llvm::GlobalVariable **v3;
  llvm::GlobalVariable **v4;
  llvm::GlobalVariable *v5;
  llvm::GlobalVariable **v6;
  llvm::GlobalVariable **v7;

  *(_DWORD *)(a1 + 16) = a2;
  if (!a2)
  {
    v3 = *(llvm::GlobalVariable ***)(a1 + 152);
    v4 = *(llvm::GlobalVariable ***)(a1 + 160);
    if (v3 != v4)
    {
      do
      {
        v5 = *v3;
        v3 += 7;
        llvm::UndefValue::get();
        llvm::Value::replaceAllUsesWith();
        llvm::GlobalVariable::eraseFromParent(v5);
      }
      while (v3 != v4);
      v6 = *(llvm::GlobalVariable ***)(a1 + 152);
      v3 = *(llvm::GlobalVariable ***)(a1 + 160);
      if (v3 != v6)
      {
        do
        {
          v7 = (llvm::GlobalVariable **)*(v3 - 6);
          if (v3 - 4 != v7)
            free(v7);
          v3 -= 7;
        }
        while (v3 != v6);
        v3 = v6;
      }
    }
    *(_QWORD *)(a1 + 160) = v3;
  }
}

uint64_t sub_22E670BCC(uint64_t *a1, llvm::ArrayType *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *((_BYTE *)a1 + 32) = 1;
  v3 = a1[1];
  if (v3)
  {
    *(_BYTE *)(v3 + 33) = 0;
    v4 = *a1;
  }
  else
  {
    v4 = *a1;
    *(_BYTE *)(*a1 + 176) = 0;
  }
  v5 = a1[2];
  if (!this)
    this = **(llvm::ArrayType ***)(*(_QWORD *)(v4 + 8) + 8 * v5);
  llvm::ArrayType::get(this, (llvm::Type *)(*(unsigned int *)(v4 + 16) - v5));
  result = llvm::ConstantArray::get();
  *(_DWORD *)(v4 + 16) = a1[2];
  return result;
}

uint64_t sub_22E670C54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *((_BYTE *)a1 + 32) = 1;
  v3 = a1[1];
  if (v3)
  {
    *(_BYTE *)(v3 + 33) = 0;
    v4 = *a1;
  }
  else
  {
    v4 = *a1;
    *(_BYTE *)(*a1 + 176) = 0;
  }
  if (!a2 && (*(_DWORD *)(v4 + 16) != a1[2] || !llvm::StructType::get()))
    llvm::ConstantStruct::getTypeForElements();
  result = llvm::ConstantStruct::get();
  *(_DWORD *)(v4 + 16) = a1[2];
  return result;
}

uint64_t sub_22E670D08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0x492492492492492)
    sub_22E3B3F8C();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v2];
  __p = v8;
  v16 = v9;
  *(_QWORD *)v9 = a2;
  *((_QWORD *)v9 + 1) = v9 + 24;
  *((_QWORD *)v9 + 2) = 0x400000000;
  v17 = v9 + 56;
  v18 = &v8[v7];
  sub_22F29FB20(a1, &__p);
  v10 = a1[1];
  v11 = v16;
  for (i = v17; i != v11; i -= 56)
  {
    v13 = (char *)*((_QWORD *)i - 6);
    if (i - 32 != v13)
      free(v13);
  }
  if (__p)
    operator delete(__p);
  return v10;
}

uint64_t sub_22E670E44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = &unk_24FA66FB8;
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v2 + 16) = &unk_24FA66FE0;
  *(_QWORD *)v2 = &off_24FA66E30;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = v3;
  *(_DWORD *)(v2 + 56) = 0;
  v9 = v2;
  sub_22F2968D4(a1, &v9);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (byte_253E4D348)
  {
    v10 = v2 + 8;
    v5 = *(_QWORD **)(a1 + 712);
    if ((unint64_t)v5 < *(_QWORD *)(a1 + 720))
    {
      *v5 = v2 + 8;
      v6 = v5 + 1;
    }
    else
    {
      v6 = sub_22E4A02B0((void **)(a1 + 704), &v10);
    }
    *(_QWORD *)(a1 + 712) = v6;
    *(_QWORD *)(a1 + 728) = v2 + 16;
    *(_BYTE *)(a1 + 916) = 1;
    v8[0] = v2;
    v8[3] = (char *)off_255DFECA8 + 2;
    sub_22E673A20((llvm *)a1, (llvm *)v8);
    sub_22E3BACF8((llvm *)v8);
  }
  return v2;
}

BOOL sub_22E670F58(uint64_t a1, int a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;
  unsigned int v23;
  unsigned int v24;

  v5 = a2 & 0x7FFFFFFF;
  v6 = *(_DWORD *)(a1 + 304);
  v7 = v6 + 1;
  if (v6 + 1 > 1)
  {
    if ((v6 & 0x80000000) != 0)
    {
      v10 = -2 - v6;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
        v8 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v10);
      else
        v8 = (_DWORD *)sub_22F1E1134(a1, v10, 0);
    }
    else
    {
      v8 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v6);
    }
  }
  else
  {
    v8 = *(_DWORD **)(a1 + 184);
  }
  if ((*v8 & 0x7FFFFFFFu) <= v5
    && (v6 == -2
     || (v7 != *(_DWORD *)(a1 + 192)
       ? ((v7 & 0x80000000) != 0
        ? ((v24 = -3 - v6,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(a1, v24, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v24)))
        : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v7)),
          v9 = *v11 & 0x7FFFFFFF)
       : (v9 = *(_DWORD *)(a1 + 216)),
         v9 > v5)))
  {
    v12 = *(_DWORD *)(a1 + 304);
    v13 = v12;
  }
  else
  {
    v13 = sub_22F1E1EE8(a1, v5);
    v12 = *(_DWORD *)(a1 + 304);
  }
  v14 = a3 & 0x7FFFFFFF;
  v15 = v12;
  v16 = v12 + 1;
  if (v12 + 1 > 1)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v19 = -2 - v12;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0)
        v17 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v19);
      else
        v17 = (_DWORD *)sub_22F1E1134(a1, v19, 0);
    }
    else
    {
      v17 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v12);
    }
  }
  else
  {
    v17 = *(_DWORD **)(a1 + 184);
  }
  if ((*v17 & 0x7FFFFFFFu) <= v14
    && (v15 == -2
     || (v16 != *(_DWORD *)(a1 + 192)
       ? ((v16 & 0x80000000) != 0
        ? ((v23 = -3 - v15,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v15) >> 6)) >> (-3 - v15)) & 1) == 0)
         ? (v20 = (_DWORD *)sub_22F1E1134(a1, v23, 0))
         : (v20 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v23)))
        : (v20 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v16)),
          v18 = *v20 & 0x7FFFFFFF)
       : (v18 = *(_DWORD *)(a1 + 216)),
         v18 > v14)))
  {
    v21 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v21 = sub_22F1E1EE8(a1, v14);
  }
  return v13 == v21;
}

void sub_22E6711A4(_QWORD *__dst, uint64_t a2)
{
  unint64_t v3;
  _QWORD v4[33];

  v4[32] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 359) < 0)
  {
    v3 = *(_QWORD *)(a2 + 344);
    if (v3)
    {
      sub_22E3BB2B4(__dst, *(void **)(a2 + 336), v3);
      return;
    }
  }
  else if (*(_BYTE *)(a2 + 359))
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 336);
    __dst[2] = *(_QWORD *)(a2 + 352);
    return;
  }
  llvm::sys::fs::current_path();
  if (v4)
  {
    *((_BYTE *)__dst + 23) = 0;
    *(_BYTE *)__dst = 0;
  }
  else
  {
    *__dst = 0;
    __dst[1] = 0;
    __dst[2] = 0;
    free(0);
  }
}

void sub_22E671318(_QWORD *a1, uint64_t a2, void *__src, size_t __n)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t __len;
  _QWORD v17[33];

  v17[32] = *MEMORY[0x24BDAC8D0];
  if (__n < 0x101)
  {
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  if (__n)
LABEL_3:
    memcpy(v17, __src, __n);
LABEL_4:
  __len = __n;
  llvm::sys::path::remove_dots();
  v8 = *(_QWORD **)(a2 + 200);
  v9 = (_QWORD *)(a2 + 208);
  if (v8 != v9)
  {
    do
    {
      if ((llvm::sys::path::replace_path_prefix() & 1) != 0)
        break;
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  if (!v17)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    free(0);
    return;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    a1[1] = __len;
    a1[2] = v14 | 0x8000000000000000;
    *a1 = v15;
    a1 = v15;
  }
  else
  {
    *((_BYTE *)a1 + 23) = __len;
    if (!__len)
      goto LABEL_22;
  }
  memmove(a1, v17, __len);
LABEL_22:
  *((_BYTE *)a1 + __len) = 0;
}

void sub_22E67152C(uint64_t a1, uint64_t a2, void *a3, size_t a4, uint64_t a5, __int128 *a6, char a7)
{
  llvm::Type *v13;
  unint64_t v14;
  void **v15;
  __int128 v16;
  char *v17;
  size_t v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  void **v28;
  uint64_t BitCast;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  void *p_dst;
  size_t v45;
  uint64_t v46;
  int *v47;
  int *v48;
  int *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  unsigned int v54;
  unint64_t v55;
  size_t *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  void *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  llvm *v64;
  uint64_t v65;
  _DWORD *v66;
  _BYTE *v67;
  _WORD *v68;
  llvm::raw_ostream *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::raw_ostream *v72;
  const char *v73;
  _QWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  llvm::raw_ostream *v78;
  _WORD *v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  llvm::raw_ostream *v82;
  _DWORD *v83;
  llvm::raw_ostream *v84;
  _BYTE *v85;
  llvm::raw_ostream *v86;
  uint64_t v87;
  int v88;
  _WORD *v89;
  uint64_t v90;
  llvm::raw_ostream *v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  llvm::Type *v95;
  void *__src;
  _QWORD v97[2];
  void *v98;
  _BYTE *v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  llvm *__dst;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  void **v113;
  void **v114;
  void **v115;
  __int128 v116;
  __int128 __p;
  void *v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v13 = *(llvm::Type **)(*(_QWORD *)a1 + 232);
  llvm::MD5::MD5((llvm::MD5 *)&v116);
  __src = a3;
  llvm::MD5::update();
  llvm::MD5::final();
  *(_QWORD *)&v116 = v111;
  *((_QWORD *)&v116 + 1) = a5;
  if (*((char *)a6 + 23) < 0)
  {
    sub_22E3BB2B4(&__p, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    __p = *a6;
    v118 = (void *)*((_QWORD *)a6 + 2);
  }
  v119 = a7;
  v15 = *(void ***)(a1 + 184);
  v14 = *(_QWORD *)(a1 + 192);
  if ((unint64_t)v15 < v14)
  {
    *(_OWORD *)v15 = v116;
    v16 = __p;
    v15[4] = v118;
    *((_OWORD *)v15 + 1) = v16;
    v118 = 0;
    __p = 0uLL;
    *((_BYTE *)v15 + 40) = v119;
    v17 = (char *)(v15 + 6);
    goto LABEL_23;
  }
  v95 = v13;
  v18 = a4;
  v19 = *(void ***)(a1 + 176);
  v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v19) >> 4) + 1;
  if (v20 > 0x555555555555555)
    goto LABEL_147;
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v19) >> 4);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x2AAAAAAAAAAAAAALL)
    v22 = 0x555555555555555;
  else
    v22 = v20;
  if (v22 > 0x555555555555555)
    goto LABEL_148;
  v23 = (char *)operator new(48 * v22);
  v24 = &v23[16 * (((char *)v15 - (char *)v19) >> 4)];
  v25 = __p;
  *(_OWORD *)v24 = v116;
  *((_OWORD *)v24 + 1) = v25;
  *((_QWORD *)v24 + 4) = v118;
  __p = 0uLL;
  v118 = 0;
  v24[40] = a7;
  if (v15 == v19)
  {
    v17 = v24 + 48;
    *(_QWORD *)(a1 + 176) = v24;
    *(_QWORD *)(a1 + 184) = v24 + 48;
    *(_QWORD *)(a1 + 192) = &v23[48 * v22];
  }
  else
  {
    v26 = &v23[16 * (((char *)v15 - (char *)v19) >> 4)];
    do
    {
      *((_OWORD *)v26 - 3) = *((_OWORD *)v15 - 3);
      v27 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v26 - 2) = *(v15 - 2);
      *((_OWORD *)v26 - 2) = v27;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *(v26 - 8) = *((_BYTE *)v15 - 8);
      v26 -= 48;
      v15 -= 6;
    }
    while (v15 != v19);
    v15 = *(void ***)(a1 + 176);
    v28 = *(void ***)(a1 + 184);
    v17 = v24 + 48;
    *(_QWORD *)(a1 + 176) = v26;
    *(_QWORD *)(a1 + 184) = v24 + 48;
    *(_QWORD *)(a1 + 192) = &v23[48 * v22];
    if (v28 != v15)
    {
      a4 = v18;
      v13 = v95;
      do
      {
        if (*((char *)v28 - 9) < 0)
          operator delete(*(v28 - 4));
        v28 -= 6;
      }
      while (v28 != v15);
      if (v15)
        goto LABEL_22;
      goto LABEL_23;
    }
  }
  a4 = v18;
  v13 = v95;
  if (v15)
LABEL_22:
    operator delete(v15);
LABEL_23:
  *(_QWORD *)(a1 + 184) = v17;
  if (SHIBYTE(v118) < 0)
  {
    operator delete((void *)__p);
    if ((a7 & 1) != 0)
      goto LABEL_48;
LABEL_27:
    llvm::Type::getInt8PtrTy(v13, 0);
    BitCast = llvm::ConstantExpr::getBitCast();
    v30 = BitCast;
    v32 = *(uint64_t **)(a1 + 160);
    v31 = *(_QWORD *)(a1 + 168);
    if ((unint64_t)v32 < v31)
    {
      *v32 = BitCast;
      v33 = v32 + 1;
LABEL_47:
      *(_QWORD *)(a1 + 160) = v33;
      goto LABEL_48;
    }
    v34 = *(_QWORD **)(a1 + 152);
    v35 = v32 - v34;
    v36 = v35 + 1;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      v37 = v31 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (!v38)
      {
        v39 = 0;
        goto LABEL_42;
      }
      if (!(v38 >> 61))
      {
        v39 = (char *)operator new(8 * v38);
LABEL_42:
        v40 = (uint64_t *)&v39[8 * v35];
        v41 = &v39[8 * v38];
        *v40 = v30;
        v33 = v40 + 1;
        if (v32 != v34)
        {
          do
          {
            v42 = *--v32;
            *--v40 = v42;
          }
          while (v32 != v34);
          v32 = *(uint64_t **)(a1 + 152);
        }
        *(_QWORD *)(a1 + 152) = v40;
        *(_QWORD *)(a1 + 160) = v33;
        *(_QWORD *)(a1 + 168) = v41;
        if (v32)
          operator delete(v32);
        goto LABEL_47;
      }
LABEL_148:
      sub_22E3B3F8C();
    }
LABEL_147:
    abort();
  }
  if ((a7 & 1) == 0)
    goto LABEL_27;
LABEL_48:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 34) & 2) != 0)
  {
    *(_QWORD *)&v116 = &__p;
    *((_QWORD *)&v116 + 1) = 0x1000000000;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v101 = 0;
    v102 = 0;
    v43 = *(unsigned int *)(a1 + 16);
    v103 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    sub_22E679AE8((uint64_t)&v116, (v43 >> 1) + 1);
    sub_22E6711A4(&__dst, *(_QWORD *)(*(_QWORD *)a1 + 184));
    if (v109 >= 0)
      p_dst = &__dst;
    else
      p_dst = __dst;
    if (v109 >= 0)
      v45 = HIBYTE(v109) & 0x7F;
    else
      v45 = v108;
    sub_22E671318(&v111, a1, p_dst, v45);
    v46 = v116;
    if (*(char *)(v116 + 23) < 0)
      operator delete(*(void **)v116);
    *(_OWORD *)v46 = v111;
    *(_QWORD *)(v46 + 16) = v112;
    if (SHIBYTE(v109) < 0)
      operator delete(__dst);
    v47 = sub_22F29FD74((int *)(a1 + 16));
    v48 = v47;
    v50 = v49;
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      v51 = a1 + 24;
      v52 = 8;
    }
    else
    {
      v51 = *(_QWORD *)(a1 + 24);
      v52 = *(unsigned int *)(a1 + 32);
    }
    v53 = (int *)(v51 + 16 * v52);
    if (v53 != v47)
    {
      do
      {
        v54 = v48[2];
        v55 = *(_QWORD *)(*(_QWORD *)v48 + 88);
        do
        {
          v56 = (size_t *)v55;
          v57 = *(_QWORD *)(v55 + 8);
          if ((v57 & 2) == 0)
            break;
          v55 = v57 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v55);
        sub_22E671318(&v111, a1, v56 + 4, *v56);
        v58 = v116 + 24 * v54;
        if (*(char *)(v58 + 23) < 0)
          operator delete(*(void **)v58);
        *(_OWORD *)v58 = v111;
        *(_QWORD *)(v58 + 16) = v112;
        while (1)
        {
          v48 += 4;
          if (v48 == v50)
            break;
          if ((*(_QWORD *)v48 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_73;
        }
        v48 = v50;
LABEL_73:
        ;
      }
      while (v48 != v53);
    }
    v97[0] = v116;
    v97[1] = DWORD2(v116);
    v59 = *((_BYTE *)a6 + 23);
    v60 = v59 < 0;
    v61 = *(void **)a6;
    if (v59 >= 0)
      v61 = a6;
    v62 = v59 & 0x7F;
    if (v60)
      v62 = *((_QWORD *)a6 + 1);
    *(_QWORD *)&v111 = v61;
    *((_QWORD *)&v111 + 1) = v62;
    v112 = v97;
    v113 = &v104;
    v114 = &v101;
    v115 = &v98;
    llvm::coverage::RawCoverageMappingReader::read((llvm::coverage::RawCoverageMappingReader *)&v111);
    if (__dst)
    {
      (*(void (**)(llvm *))(*(_QWORD *)__dst + 8))(__dst);
    }
    else
    {
      v63 = (llvm::raw_ostream *)llvm::outs(0);
      v64 = (llvm *)v101;
      v65 = (v102 - (_BYTE *)v101) >> 2;
      v66 = v98;
      v67 = v99;
      v68 = (_WORD *)*((_QWORD *)v63 + 4);
      if (a4 <= *((_QWORD *)v63 + 3) - (_QWORD)v68)
      {
        if (a4)
        {
          memcpy(v68, __src, a4);
          v68 = (_WORD *)(*((_QWORD *)v63 + 4) + a4);
          *((_QWORD *)v63 + 4) = v68;
        }
        v69 = v63;
      }
      else
      {
        v69 = (llvm::raw_ostream *)llvm::raw_ostream::write(v63, (const char *)__src);
        v68 = (_WORD *)*((_QWORD *)v69 + 4);
      }
      if (*((_QWORD *)v69 + 3) - (_QWORD)v68 > 1uLL)
      {
        *v68 = 2618;
        *((_QWORD *)v69 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v69, ":\n");
      }
      __dst = v64;
      v108 = 0xCCCCCCCCCCCCCCCDLL * v65;
      v109 = 0;
      v110 = 0;
      if (v67 != (_BYTE *)v66)
      {
        v70 = 44 * ((v67 - (_BYTE *)v66) / 44);
        while (2)
        {
          llvm::raw_ostream::indent(v63);
          switch(v66[10])
          {
            case 1:
              v71 = *((_QWORD *)v63 + 4);
              if ((unint64_t)(*((_QWORD *)v63 + 3) - v71) <= 9)
              {
                v72 = v63;
                v73 = "Expansion,";
                goto LABEL_105;
              }
              *(_WORD *)(v71 + 8) = 11374;
              *(_QWORD *)v71 = *(_QWORD *)"Expansion,";
              v94 = *((_QWORD *)v63 + 4) + 10;
              goto LABEL_145;
            case 2:
              v74 = (_QWORD *)*((_QWORD *)v63 + 4);
              if (*((_QWORD *)v63 + 3) - (_QWORD)v74 <= 7uLL)
              {
                v72 = v63;
                v73 = "Skipped,";
                goto LABEL_105;
              }
              *v74 = 0x2C64657070696B53;
              v94 = *((_QWORD *)v63 + 4) + 8;
              goto LABEL_145;
            case 3:
              v75 = (_DWORD *)*((_QWORD *)v63 + 4);
              if (*((_QWORD *)v63 + 3) - (_QWORD)v75 <= 3uLL)
              {
                v72 = v63;
                v73 = "Gap,";
                goto LABEL_105;
              }
              *v75 = 745562439;
              v94 = *((_QWORD *)v63 + 4) + 4;
              goto LABEL_145;
            case 4:
              v76 = (_DWORD *)*((_QWORD *)v63 + 4);
              if (*((_QWORD *)v63 + 3) - (_QWORD)v76 > 6uLL)
              {
                *(_DWORD *)((char *)v76 + 3) = 745038702;
                *v76 = 1851880002;
                v94 = *((_QWORD *)v63 + 4) + 7;
LABEL_145:
                *((_QWORD *)v63 + 4) = v94;
              }
              else
              {
                v72 = v63;
                v73 = "Branch,";
LABEL_105:
                llvm::raw_ostream::write(v72, v73);
              }
LABEL_106:
              v77 = *((_QWORD *)v63 + 4);
              if ((unint64_t)(*((_QWORD *)v63 + 3) - v77) > 4)
              {
                *(_BYTE *)(v77 + 4) = 32;
                *(_DWORD *)v77 = 1701603654;
                *((_QWORD *)v63 + 4) += 5;
              }
              else
              {
                llvm::raw_ostream::write(v63, "File ");
              }
              v78 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v79 = (_WORD *)*((_QWORD *)v78 + 4);
              if (*((_QWORD *)v78 + 3) - (_QWORD)v79 > 1uLL)
              {
                *v79 = 8236;
                *((_QWORD *)v78 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v78, ", ");
              }
              v80 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v81 = (_BYTE *)*((_QWORD *)v80 + 4);
              if (*((_BYTE **)v80 + 3) == v81)
              {
                llvm::raw_ostream::write(v80, ":");
              }
              else
              {
                *v81 = 58;
                ++*((_QWORD *)v80 + 4);
              }
              v82 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v83 = (_DWORD *)*((_QWORD *)v82 + 4);
              if (*((_QWORD *)v82 + 3) - (_QWORD)v83 > 3uLL)
              {
                *v83 = 540945696;
                *((_QWORD *)v82 + 4) += 4;
              }
              else
              {
                llvm::raw_ostream::write(v82, " -> ");
              }
              v84 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v85 = (_BYTE *)*((_QWORD *)v84 + 4);
              if (*((_BYTE **)v84 + 3) == v85)
              {
                llvm::raw_ostream::write(v84, ":");
              }
              else
              {
                *v85 = 58;
                ++*((_QWORD *)v84 + 4);
              }
              v86 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
              v87 = *((_QWORD *)v86 + 4);
              if ((unint64_t)(*((_QWORD *)v86 + 3) - v87) > 2)
              {
                *(_BYTE *)(v87 + 2) = 32;
                *(_WORD *)v87 = 15648;
                *((_QWORD *)v86 + 4) += 3;
              }
              else
              {
                llvm::raw_ostream::write(v86, " = ");
              }
              llvm::coverage::CounterMappingContext::dump();
              v88 = v66[10];
              if (v88 == 4)
              {
                v89 = (_WORD *)*((_QWORD *)v63 + 4);
                if (*((_QWORD *)v63 + 3) - (_QWORD)v89 > 1uLL)
                {
                  *v89 = 8236;
                  *((_QWORD *)v63 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v63, ", ");
                }
                llvm::coverage::CounterMappingContext::dump();
                v88 = v66[10];
              }
              if (v88 == 1)
              {
                v90 = *((_QWORD *)v63 + 4);
                if ((unint64_t)(*((_QWORD *)v63 + 3) - v90) > 0x11)
                {
                  *(_WORD *)(v90 + 16) = 8253;
                  *(_OWORD *)v90 = *(_OWORD *)" (Expanded file = ";
                  *((_QWORD *)v63 + 4) += 18;
                }
                else
                {
                  llvm::raw_ostream::write(v63, " (Expanded file = ");
                }
                v91 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
                v92 = (_BYTE *)*((_QWORD *)v91 + 4);
                if (*((_BYTE **)v91 + 3) == v92)
                {
                  llvm::raw_ostream::write(v91, ")");
                }
                else
                {
                  *v92 = 41;
                  ++*((_QWORD *)v91 + 4);
                }
              }
              v93 = (_BYTE *)*((_QWORD *)v63 + 4);
              if (*((_BYTE **)v63 + 3) == v93)
              {
                llvm::raw_ostream::write(v63, "\n");
              }
              else
              {
                *v93 = 10;
                ++*((_QWORD *)v63 + 4);
              }
              v66 += 11;
              v70 -= 44;
              if (!v70)
                break;
              continue;
            default:
              goto LABEL_106;
          }
          break;
        }
      }
    }
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    if (v101)
    {
      v102 = v101;
      operator delete(v101);
    }
    if (v104)
    {
      v105 = v104;
      operator delete(v104);
    }
    sub_22E3B9848((char **)&v116);
  }
}

char **sub_22E671FF4(char **result, llvm::LLVMContext *a2)
{
  uint64_t v2;
  llvm::Type *v3;
  void **p_dst;
  size_t v5;
  std::string *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  unint64_t v15;
  size_t *v16;
  uint64_t v17;
  char *v18;
  llvm::coverage::CoverageFilenamesSectionWriter *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type *v22;
  unint64_t v23;
  char *v24;
  BOOL v25;
  std::string *v26;
  llvm::LLVMContext *v27;
  std::string::size_type v28;
  llvm::LLVMContext *v29;
  llvm::LLVMContext *v30;
  llvm::LLVMContext *v31;
  llvm::LLVMContext *v32;
  llvm::ArrayType *Int8Ty;
  char v34;
  int v35;
  llvm::Type *v36;
  llvm::Type *v37;
  llvm::LLVMContext *v38;
  llvm::LLVMContext *v39;
  llvm::LLVMContext *v40;
  llvm::LLVMContext *v41;
  llvm::LLVMContext *v42;
  char v43;
  int v44;
  llvm::Type *v45;
  llvm::Type *v46;
  llvm::ArrayType *v47;
  llvm::GlobalValue *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::ArrayType *Int8PtrTy;
  std::string::size_type *String;
  void **Int32Ty;
  llvm::Type *v61;
  void *__p[2];
  uint64_t v63;
  uint64_t v64;
  std::string::size_type *v65;
  char *v66[2];
  uint64_t v67;
  std::string v68;
  uint64_t Int64Ty;
  uint64_t v70;
  char v71;
  uint64_t v72;
  int v73;
  void **v74;
  void *v75[2];
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  void **__dst;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t Impl;
  std::string v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (result[22] != result[23])
  {
    v2 = (uint64_t)result;
    v3 = (llvm::Type *)*((_QWORD *)*result + 29);
    Int32Ty = (void **)llvm::Type::getInt32Ty(v3, a2);
    v66[0] = (char *)&v67;
    v66[1] = (char *)0x1000000000;
    sub_22E679AE8((uint64_t)v66, ((unint64_t)*(unsigned int *)(v2 + 16) >> 1) + 1);
    sub_22E6711A4(&__dst, *(_QWORD *)(*(_QWORD *)v2 + 184));
    if (v81 >= 0)
      p_dst = (void **)&__dst;
    else
      p_dst = __dst;
    if (v81 >= 0)
      v5 = HIBYTE(v81) & 0x7F;
    else
      v5 = v80;
    sub_22E671318(&v68, v2, p_dst, v5);
    v6 = (std::string *)v66[0];
    if (v66[0][23] < 0)
      operator delete(*(void **)v66[0]);
    *v6 = v68;
    if (SHIBYTE(v81) < 0)
      operator delete(__dst);
    v7 = sub_22F29FD74((int *)(v2 + 16));
    v8 = v7;
    v10 = v9;
    if ((*(_BYTE *)(v2 + 16) & 1) != 0)
    {
      v11 = v2 + 24;
      v12 = 8;
    }
    else
    {
      v11 = *(_QWORD *)(v2 + 24);
      v12 = *(unsigned int *)(v2 + 32);
    }
    v13 = (int *)(v11 + 16 * v12);
    if (v13 != v7)
    {
      do
      {
        v14 = v8[2];
        v15 = *(_QWORD *)(*(_QWORD *)v8 + 88);
        do
        {
          v16 = (size_t *)v15;
          v17 = *(_QWORD *)(v15 + 8);
          if ((v17 & 2) == 0)
            break;
          v15 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v15);
        sub_22E671318(&v68, v2, v16 + 4, *v16);
        v18 = &v66[0][24 * v14];
        if (v18[23] < 0)
          operator delete(*(void **)v18);
        *(std::string *)v18 = v68;
        while (1)
        {
          v8 += 4;
          if (v8 == v10)
            break;
          if ((*(_QWORD *)v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_26;
        }
        v8 = v10;
LABEL_26:
        ;
      }
      while (v8 != v13);
    }
    __p[0] = 0;
    __p[1] = 0;
    v63 = 0;
    LODWORD(v68.__r_.__value_.__r.__words[1]) = 0;
    v71 = 0;
    v72 = 0;
    v73 = 1;
    v70 = 0;
    v68.__r_.__value_.__r.__words[2] = 0;
    Int64Ty = 0;
    v68.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
    v74 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    v19 = (llvm::coverage::CoverageFilenamesSectionWriter *)llvm::coverage::CoverageFilenamesSectionWriter::CoverageFilenamesSectionWriter();
    llvm::coverage::CoverageFilenamesSectionWriter::write(v19, (llvm::raw_ostream *)&v68);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v68);
    v61 = v3;
    String = (std::string::size_type *)llvm::ConstantDataArray::getString();
    llvm::MD5::MD5((llvm::MD5 *)&v68);
    llvm::MD5::update();
    llvm::MD5::final();
    v20 = *(_QWORD *)(v2 + 176);
    v21 = *(_QWORD *)(v2 + 184);
    if (v20 != v21)
    {
      while (1)
      {
        v22 = *(llvm::Type **)(*(_QWORD *)v2 + 232);
        v23 = *(_QWORD *)v20;
        v24 = (char *)&v81 + 1;
        if (*(_QWORD *)v20)
        {
          do
          {
            *--v24 = a0123456789abcd_2[v23 & 0xF];
            v25 = v23 > 0xF;
            v23 >>= 4;
          }
          while (v25);
        }
        else
        {
          LOBYTE(v81) = 48;
          v24 = (char *)&v81;
        }
        sub_22E3B4274(&v68, v24, (char *)&v81 + 1, (char *)&v81 + 1 - v24);
        v26 = std::string::insert(&v68, 0, "__covrec_");
        v28 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v28;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(v20 + 40))
          std::string::append(&v84, "u");
        v68.__r_.__value_.__r.__words[0] = llvm::Type::getInt64Ty(v22, v27);
        v68.__r_.__value_.__l.__size_ = llvm::Type::getInt32Ty(v22, v29);
        v68.__r_.__value_.__r.__words[2] = llvm::Type::getInt64Ty(v22, v30);
        Int64Ty = llvm::Type::getInt64Ty(v22, v31);
        Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v22, v32);
        v34 = *(_BYTE *)(v20 + 39);
        v35 = v34;
        v36 = (llvm::Type *)(v34 & 0x7F);
        if (v35 >= 0)
          v37 = v36;
        else
          v37 = *(llvm::Type **)(v20 + 24);
        v70 = llvm::ArrayType::get(Int8Ty, v37);
        llvm::StructType::get();
        llvm::Type::getInt64Ty(v22, v38);
        __dst = (void **)llvm::ConstantInt::get();
        llvm::Type::getInt32Ty(v22, v39);
        v80 = llvm::ConstantInt::get();
        llvm::Type::getInt64Ty(v22, v40);
        v81 = llvm::ConstantInt::get();
        llvm::Type::getInt64Ty(v22, v41);
        v82 = llvm::ConstantInt::get();
        v43 = *(_BYTE *)(v20 + 39);
        v44 = v43;
        v45 = (llvm::Type *)(v43 & 0x7F);
        if (v44 >= 0)
          v46 = v45;
        else
          v46 = *(llvm::Type **)(v20 + 24);
        v47 = (llvm::ArrayType *)llvm::Type::getInt8Ty(v22, v42);
        llvm::ArrayType::get(v47, v46);
        Impl = llvm::ConstantDataSequential::getImpl();
        llvm::ConstantStruct::get();
        v48 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
        v78 = 260;
        v75[0] = &v84;
        v49 = llvm::GlobalVariable::GlobalVariable();
        v50 = *(_DWORD *)(v49 + 32);
        v51 = v50 & 0xFFFFFFCF | 0x10;
        *(_DWORD *)(v49 + 32) = v51;
        if ((v50 & 0xFu) - 7 < 2)
          goto LABEL_45;
        if ((llvm::GlobalValue::hasExternalWeakLinkage(v48) & 1) == 0)
          break;
LABEL_46:
        llvm::getInstrProfSectionName();
        llvm::GlobalObject::setSection();
        if (SHIBYTE(v76) < 0)
          operator delete(v75[0]);
        llvm::GlobalObject::setAlignment();
        v52 = *(_QWORD *)v2;
        v53 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 216) + 76);
        if ((v53 - 8) >= 2 && v53 != 5)
        {
          llvm::Module::getOrInsertComdat();
          llvm::GlobalObject::setComdat();
          v52 = *(_QWORD *)v2;
        }
        v75[0] = v48;
        sub_22E62C508((uint64_t *)(v52 + 1416), (uint64_t *)v75);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        v20 += 48;
        if (v20 == v21)
          goto LABEL_55;
      }
      v51 = *((_DWORD *)v48 + 8);
LABEL_45:
      *((_DWORD *)v48 + 8) = v51 | 0x4000;
      goto LABEL_46;
    }
LABEL_55:
    __dst = Int32Ty;
    v80 = (uint64_t)Int32Ty;
    v81 = (uint64_t)Int32Ty;
    v82 = (uint64_t)Int32Ty;
    v54 = llvm::StructType::get();
    v75[0] = (void *)llvm::ConstantInt::get();
    v75[1] = (void *)llvm::ConstantInt::get();
    v76 = llvm::ConstantInt::get();
    v77 = llvm::ConstantInt::get();
    v55 = llvm::ConstantStruct::get();
    v84.__r_.__value_.__r.__words[0] = v54;
    v84.__r_.__value_.__l.__size_ = *String;
    llvm::StructType::get();
    v64 = v55;
    v65 = String;
    llvm::ConstantStruct::get();
    v56 = llvm::User::operator new((llvm::User *)0x58);
    LOWORD(v70) = 261;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"__llvm_coverage_mapping";
    v68.__r_.__value_.__l.__size_ = 23;
    llvm::GlobalVariable::GlobalVariable();
    llvm::getInstrProfSectionName();
    llvm::GlobalObject::setSection();
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    llvm::GlobalObject::setAlignment();
    v57 = *(_QWORD *)v2;
    v68.__r_.__value_.__r.__words[0] = v56;
    sub_22E62C508((uint64_t *)(v57 + 1416), (uint64_t *)&v68);
    if (*(_QWORD *)(v2 + 152) != *(_QWORD *)(v2 + 160))
    {
      Int8PtrTy = (llvm::ArrayType *)llvm::Type::getInt8PtrTy(v61, 0);
      llvm::ArrayType::get(Int8PtrTy, (llvm::Type *)((uint64_t)(*(_QWORD *)(v2 + 160) - *(_QWORD *)(v2 + 152)) >> 3));
      llvm::ConstantArray::get();
      llvm::User::operator new((llvm::User *)0x58);
      LOWORD(v70) = 261;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"__llvm_coverage_names";
      v68.__r_.__value_.__l.__size_ = 21;
      llvm::GlobalVariable::GlobalVariable();
    }
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    return sub_22E3B9848(v66);
  }
  return result;
}

void sub_22E6728B4(__int128 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t i;
  void *v7;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  char *v18;
  unint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char *v52;
  char *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _OWORD *v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  __int128 v83;
  _DWORD *v84;
  uint64_t v85;
  llvm *v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  _BYTE v90[1408];
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t *v94;
  void *__p[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  int v100;
  char v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  _BYTE v105[128];
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  _QWORD **v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  _BYTE v114[32];
  unint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  v4 = (uint64_t *)*((_QWORD *)a1 + 3);
  v83 = *a1;
  v84 = v5;
  v85 = 1;
  for (i = 32; i != 128; i += 12)
    *(_DWORD *)((char *)&v83 + i) = 0;
  v88 = v90;
  v89 = 0x2000000000;
  v91 = 0;
  v93 = 0;
  v92 = 0;
  v94 = v4;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  *(_OWORD *)__p = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0;
  v103 = v105;
  v104 = 0x800000000;
  v7 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (!v7)
    goto LABEL_11;
  v8 = (_QWORD *)*((_QWORD *)&v83 + 1);
  v9 = sub_22E673AA0((uint64_t)&v83, (uint64_t)v7);
  if (v9 < 0)
    v9 = sub_22F1E238C(v8, v9);
  v10 = sub_22F1E361C(v8, v9);
  v11 = v10 == 3 || v10 == 0;
  if (v11)
  {
LABEL_11:
    v12 = (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC || (*(_BYTE *)(a2 + 83) & 2) == 0;
    v106 = v7;
    v13 = sub_22E65B0E8(v94, &v106);
    sub_22E673B04((uint64_t)&v83, ((unint64_t)*((unsigned int *)v13 + 2) << 32) | 1, (unsigned __int8 *)v7, v12);
  }
  v112 = (unint64_t *)v114;
  v113 = 0x800000000;
  sub_22E678038((uint64_t)&v83, (uint64_t)&v112);
  v106 = v108;
  v107 = 0x800000000;
  v111 = 0;
  v110 = 0;
  v109 = &v110;
  v14 = (char *)sub_22F2A0434(&v85);
  if ((v85 & 1) != 0)
    v16 = (char *)&v86;
  else
    v16 = (char *)v86;
  v17 = v87;
  if ((v85 & 1) != 0)
    v17 = 8;
  v18 = &v16[12 * v17];
  if (v18 != v14)
  {
    v52 = v14;
    v53 = v15;
    while (1)
    {
      v54 = *((_DWORD *)v52 + 2);
      v55 = sub_22E676A38(*((uint64_t *)&v83 + 1), v54);
      if (v55)
      {
        v56 = v55;
        v57 = v55;
        v58 = sub_22E679530((uint64_t)&v83, v55);
        if (HIDWORD(v58))
          break;
      }
LABEL_75:
      while (1)
      {
        v52 += 12;
        if (v52 == v53)
          break;
        if ((*(_DWORD *)v52 + 1) > 1)
          goto LABEL_79;
      }
      v52 = v53;
LABEL_79:
      if (v52 == v18)
        goto LABEL_21;
    }
    v59 = v58;
    v60 = sub_22E679530((uint64_t)&v83, v54);
    v61 = v57;
    if ((v56 & 0x80000000) != 0)
      v61 = sub_22F1E238C(*((_QWORD **)&v83 + 1), v57);
    v62 = sub_22F1415D0(v61, (uint64_t)&v115, *((_QWORD **)&v83 + 1), v84, 0);
    v63 = HIDWORD(v115);
    if (v62)
      v63 = 0;
    v64 = v63 + v56;
    v115 = (unint64_t *)(v57 | (v64 << 32));
    if (!v111)
    {
      v65 = v106;
      v66 = v107;
      if (!(_DWORD)v107)
      {
LABEL_71:
        if (v107 >= HIDWORD(v107))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v65 = v106;
          v66 = v107;
        }
        v65[v66] = v57 | (v64 << 32);
        LODWORD(v107) = v107 + 1;
        goto LABEL_74;
      }
      v67 = 8 * v107;
      v68 = (char *)v106 + 4;
      while (*(v68 - 1) != v56 || *v68 != (_DWORD)v64)
      {
        v68 += 2;
        v67 -= 8;
        if (!v67)
          goto LABEL_70;
      }
      if (v67)
      {
LABEL_74:
        sub_22E6778F0(&v75, *((uint64_t *)&v83 + 1), v57, v64);
        v115 = 0;
        v116 = 0;
        v117 = __PAIR64__(v60, v59);
        v118 = v75;
        LODWORD(v119) = 1;
        v70 = (_OWORD *)sub_22E679708((uint64_t)&v88, (unint64_t)&v115);
        v71 = (char *)v88 + 44 * v89;
        v72 = *(_OWORD *)((char *)v70 + 28);
        v73 = v70[1];
        *v71 = *v70;
        v71[1] = v73;
        *(_OWORD *)((char *)v71 + 28) = v72;
        LODWORD(v89) = v89 + 1;
        goto LABEL_75;
      }
LABEL_70:
      if (v107 < 8)
        goto LABEL_71;
      do
      {
        sub_22F2A0514((uint64_t)&v109, *((_DWORD *)v106 + 2 * v66 - 2), *((_DWORD *)v106 + 2 * v66 - 1), (uint64_t *)v106 + v66 - 1);
        LODWORD(v66) = v107 - 1;
        LODWORD(v107) = v107 - 1;
      }
      while ((_DWORD)v107);
    }
    sub_22F2A0514((uint64_t)&v109, v56, v64, (uint64_t *)&v115);
    goto LABEL_74;
  }
LABEL_21:
  sub_22E67863C((unint64_t)&v83, (uint64_t)&v106);
  v115 = &v117;
  v116 = 0x800000000;
  if (v85 >= 2)
    sub_22F2A05B4((uint64_t)&v115, (unint64_t)v85 >> 1);
  if ((_DWORD)v89)
  {
    v19 = v115;
    v20 = 44 * v89;
    v21 = (unsigned int *)((char *)v88 + 32);
    do
    {
      v22 = &v19[*(v21 - 4)];
      v23 = *(v21 - 2);
      v24 = *((_DWORD *)v22 + 1);
      if (v23 >= *(_DWORD *)v22)
        v23 = *(_DWORD *)v22;
      *(_DWORD *)v22 = v23;
      v26 = *v21;
      v21 += 11;
      v25 = v26;
      if (v24 > v26)
        v25 = v24;
      *((_DWORD *)v22 + 1) = v25;
      v20 -= 44;
    }
    while (v20);
  }
  v27 = *(_QWORD *)(v83 + 8);
  v29 = *(_BYTE **)(v27 + 24);
  v28 = *(_BYTE **)(v27 + 32);
  v30 = v28 - v29;
  if (v28 != v29)
  {
    if (v30 < 0)
      abort();
    v31 = (char *)operator new(v28 - v29);
    memcpy(v31, v29, v30);
    v32 = 0;
    v33 = 16 * (v30 >> 4);
    while (1)
    {
      v34 = *(_QWORD *)&v31[v32];
      v35 = v34;
      v36 = sub_22E679530((uint64_t)&v83, v34);
      if (HIDWORD(v36))
      {
        v37 = v36;
        v38 = HIDWORD(v34);
        v39 = *((_QWORD *)&v83 + 1);
        v41 = *(_DWORD *)&v31[v32 + 8];
        v40 = *(_DWORD *)&v31[v32 + 12];
        sub_22E6778F0(&v75, *((uint64_t *)&v83 + 1), v35, v38);
        DWORD1(v75) = 1;
        if (v41)
        {
          if (sub_22E670F58(v39, v35, v41))
          {
            v51 = v75;
            if (v51 == sub_22F423C68(v39, v41, 0))
              LODWORD(v75) = v75 + 1;
          }
        }
        if (v40)
        {
          v42 = sub_22E670F58(v39, v38, v40);
          v43 = DWORD2(v75);
          if (v42)
          {
            v11 = v43 == sub_22F423C68(v39, v40, 0);
            v43 = DWORD2(v75);
            if (v11)
            {
              v43 = DWORD2(v75) - 1;
              *((_QWORD *)&v75 + 1) = __PAIR64__(HIDWORD(v75), DWORD2(v75) - 1) + 0x100000000;
            }
          }
        }
        else
        {
          v43 = DWORD2(v75);
        }
        v44 = v75;
        if (v75 < v43)
        {
          v45 = DWORD1(v75);
          v46 = HIDWORD(v75);
LABEL_46:
          v75 = 0uLL;
          v76 = v37;
          v77 = 0;
          v78 = v44;
          v79 = v45;
          v80 = v43;
          v81 = v46;
          v82 = 2;
          if (v44 >= LODWORD(v115[v37]) && v43 <= HIDWORD(v115[v37]))
          {
            v47 = (_OWORD *)sub_22E679708((uint64_t)&v88, (unint64_t)&v75);
            v48 = (char *)v88 + 44 * v89;
            v49 = *(_OWORD *)((char *)v47 + 28);
            v50 = v47[1];
            *v48 = *v47;
            v48[1] = v50;
            *(_OWORD *)((char *)v48 + 28) = v49;
            LODWORD(v89) = v89 + 1;
          }
          goto LABEL_49;
        }
        if ((_DWORD)v75 == v43)
        {
          v45 = DWORD1(v75);
          v46 = HIDWORD(v75);
          if (DWORD1(v75) <= HIDWORD(v75))
            goto LABEL_46;
        }
      }
LABEL_49:
      v32 += 16;
      if (v33 == v32)
      {
        operator delete(v31);
        break;
      }
    }
  }
  if (v115 != &v117)
    free(v115);
  if ((_DWORD)v89)
  {
    v115 = v112;
    v116 = v113;
    v117 = *((_QWORD *)&v96 + 1);
    *(_QWORD *)&v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v97 - *((_QWORD *)&v96 + 1)) >> 2);
    *((_QWORD *)&v118 + 1) = v88;
    v119 = v89;
    llvm::coverage::CoverageMappingWriter::write((llvm::coverage::CoverageMappingWriter *)&v115, a3);
  }
  sub_22F258024(v110);
  if (v106 != v108)
    free(v106);
  if (v112 != (unint64_t *)v114)
    free(v112);
  if (v103 != v105)
    free(v103);
  sub_22F2A0620((uint64_t)&v96 + 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v88 != v90)
    free(v88);
  if ((v85 & 1) == 0)
    llvm::deallocate_buffer(v86, (void *)(12 * v87));
}

void sub_22E673048(__int128 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  _DWORD *v5;
  uint64_t i;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _DWORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  _DWORD *v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  llvm::raw_ostream *v70;
  unsigned int v71;
  unsigned int v72;
  __int128 v73;
  _DWORD *v74;
  uint64_t v75;
  llvm *v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[1193];
  void *__p;
  char *v82;
  char *v83;
  void *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD **v90;
  _QWORD *v91[2];
  _QWORD *v92;
  uint64_t v93;
  _QWORD v94[10];

  v94[8] = *MEMORY[0x24BDAC8D0];
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  v73 = *a1;
  v74 = v5;
  v75 = 1;
  for (i = 32; i != 128; i += 12)
    *(_DWORD *)((char *)&v73 + i) = 0;
  v78 = v80;
  v79 = 0x2000000000;
  __p = 0;
  v83 = 0;
  v82 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2))
  {
    v70 = a3;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v8 = sub_22E673AA0((uint64_t)&v73, v7);
    v9 = sub_22E673C44((uint64_t)&v73, v7);
    if (!sub_22E670F58(*((uint64_t *)&v73 + 1), v8, v9))
    {
      v10 = *((_QWORD *)&v73 + 1);
      v11 = v8 & 0x7FFFFFFF;
      v12 = *(_DWORD *)(*((_QWORD *)&v73 + 1) + 304);
      v13 = v12 + 1;
      if (v12 + 1 > 1)
      {
        if ((v12 & 0x80000000) != 0)
        {
          v15 = -2 - v12;
          if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0)
            v14 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 200) + 24 * v15);
          else
            v14 = (_DWORD *)sub_22F1E1134(*((uint64_t *)&v73 + 1), v15, 0);
        }
        else
        {
          v14 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 184) + 24 * v12);
        }
      }
      else
      {
        v14 = *(_DWORD **)(*((_QWORD *)&v73 + 1) + 184);
      }
      if ((*v14 & 0x7FFFFFFFu) <= v11
        && (v12 == -2
         || (v13 != *(_DWORD *)(v10 + 192)
           ? ((v13 & 0x80000000) != 0
            ? ((v19 = -3 - v12,
                ((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-3 - v12) >> 6)) >> (-3 - v12)) & 1) == 0)
             ? (v18 = (_DWORD *)sub_22F1E1134(v10, v19, 0))
             : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v19)))
            : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v13)),
              v17 = *v18 & 0x7FFFFFFF)
           : (v17 = *(_DWORD *)(v10 + 216)),
             v17 > v11)))
      {
        v16 = *(_DWORD *)(v10 + 304);
      }
      else
      {
        v16 = sub_22F1E1EE8(v10, v8 & 0x7FFFFFFF);
      }
      v20 = *((_QWORD *)&v73 + 1);
      v21 = v9 & 0x7FFFFFFF;
      v22 = *(_DWORD *)(*((_QWORD *)&v73 + 1) + 304);
      v23 = v22 + 1;
      if (v22 + 1 > 1)
      {
        if ((v22 & 0x80000000) != 0)
        {
          v25 = -2 - v22;
          if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 224) + 8 * ((-2 - v22) >> 6)) >> (-2 - v22)) & 1) != 0)
            v24 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 200) + 24 * v25);
          else
            v24 = (_DWORD *)sub_22F1E1134(*((uint64_t *)&v73 + 1), v25, 0);
        }
        else
        {
          v24 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 184) + 24 * v22);
        }
      }
      else
      {
        v24 = *(_DWORD **)(*((_QWORD *)&v73 + 1) + 184);
      }
      if ((*v24 & 0x7FFFFFFFu) <= v21
        && (v22 == -2
         || (v23 != *(_DWORD *)(v20 + 192)
           ? ((v23 & 0x80000000) != 0
            ? ((v29 = -3 - v22,
                ((*(_QWORD *)(*(_QWORD *)(v20 + 224) + 8 * ((-3 - v22) >> 6)) >> (-3 - v22)) & 1) == 0)
             ? (v28 = (_DWORD *)sub_22F1E1134(v20, v29, 0))
             : (v28 = (_DWORD *)(*(_QWORD *)(v20 + 200) + 24 * v29)))
            : (v28 = (_DWORD *)(*(_QWORD *)(v20 + 184) + 24 * v23)),
              v27 = *v28 & 0x7FFFFFFF)
           : (v27 = *(_DWORD *)(v20 + 216)),
             v27 > v21)))
      {
        v26 = *(_DWORD *)(v20 + 304);
      }
      else
      {
        v26 = sub_22F1E1EE8(v20, v9 & 0x7FFFFFFF);
      }
      if (v16 != v26)
      {
        while (1)
        {
          v71 = v8;
          v30 = sub_22E676A38(*((uint64_t *)&v73 + 1), v9);
          if (v30)
            break;
LABEL_64:
          v8 = sub_22E676A38(*((uint64_t *)&v73 + 1), v71);
          v38 = *((_QWORD *)&v73 + 1);
          v39 = *(_DWORD *)(*((_QWORD *)&v73 + 1) + 304);
          v40 = v39 + 1;
          if (v39 + 1 > 1)
          {
            if ((v39 & 0x80000000) != 0)
            {
              v42 = -2 - v39;
              if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 224) + 8 * ((-2 - v39) >> 6)) >> (-2 - v39)) & 1) != 0)
                v41 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 200) + 24 * v42);
              else
                v41 = (_DWORD *)sub_22F1E1134(*((uint64_t *)&v73 + 1), v42, 0);
            }
            else
            {
              v41 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 184) + 24 * v39);
            }
          }
          else
          {
            v41 = *(_DWORD **)(*((_QWORD *)&v73 + 1) + 184);
          }
          if ((*v41 & 0x7FFFFFFFu) <= (v8 & 0x7FFFFFFF)
            && (v39 == -2
             || (v40 != *(_DWORD *)(v38 + 192)
               ? ((v40 & 0x80000000) != 0
                ? ((v45 = -3 - v39,
                    ((*(_QWORD *)(*(_QWORD *)(v38 + 224) + 8 * ((-3 - v39) >> 6)) >> (-3 - v39)) & 1) == 0)
                 ? (v44 = (_DWORD *)sub_22F1E1134(v38, v45, 0))
                 : (v44 = (_DWORD *)(*(_QWORD *)(v38 + 200) + 24 * v45)))
                : (v44 = (_DWORD *)(*(_QWORD *)(v38 + 184) + 24 * v40)),
                  v43 = *v44 & 0x7FFFFFFF)
               : (v43 = *(_DWORD *)(v38 + 216)),
                 v43 > (v8 & 0x7FFFFFFF))))
          {
            v16 = *(_DWORD *)(v38 + 304);
          }
          else
          {
            v16 = sub_22F1E1EE8(v38, v8 & 0x7FFFFFFF);
          }
          if (v16 == v26)
            goto LABEL_88;
        }
        v31 = v30;
        v32 = -2 - v16;
        v33 = v16 + 1;
        v72 = -3 - v16;
        while (1)
        {
          v34 = *((_QWORD *)&v73 + 1);
          if (v33 > 1)
          {
            if ((v16 & 0x80000000) != 0)
              v35 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 224) + 8 * (v32 >> 6)) & (1 << (-2 - v16))) != 0
                             ? *(_QWORD *)(*((_QWORD *)&v73 + 1) + 200) + 24 * v32
                             : sub_22F1E1134(*((uint64_t *)&v73 + 1), -2 - v16, 0));
            else
              v35 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 184) + 24 * v16);
          }
          else
          {
            v35 = *(_DWORD **)(*((_QWORD *)&v73 + 1) + 184);
          }
          if ((*v35 & 0x7FFFFFFFu) <= (v31 & 0x7FFFFFFF))
          {
            if (v16 == -2)
              break;
            if (v33 == *(_DWORD *)(v34 + 192))
            {
              v36 = *(_DWORD *)(v34 + 216);
            }
            else
            {
              if ((v33 & 0x80000000) != 0)
                v37 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v34 + 224) + 8 * (v72 >> 6)) & (1 << (-3
                                                                                                  - v16))) != 0
                               ? *(_QWORD *)(v34 + 200) + 24 * v72
                               : sub_22F1E1134(v34, v72, 0));
              else
                v37 = (_DWORD *)(*(_QWORD *)(v34 + 184) + 24 * v33);
              v36 = *v37 & 0x7FFFFFFF;
            }
            if (v36 > (v31 & 0x7FFFFFFF))
              break;
          }
          v31 = sub_22E676A38(*((uint64_t *)&v73 + 1), v31);
          if (!v31)
            goto LABEL_64;
        }
        v8 = v71;
      }
      if (v16 != v26)
      {
        do
        {
          v56 = sub_22E676A38(*((uint64_t *)&v73 + 1), v9);
          v57 = v56;
          if (v56 < 0)
            v56 = sub_22F1E238C(*((_QWORD **)&v73 + 1), v56);
          if (sub_22F1415D0(v56, (uint64_t)&v84, *((_QWORD **)&v73 + 1), v74, 0))
            v58 = 0;
          else
            v58 = HIDWORD(v84);
          v59 = *((_QWORD *)&v73 + 1);
          v60 = *(_DWORD *)(*((_QWORD *)&v73 + 1) + 304);
          v61 = v60 + 1;
          if (v60 + 1 > 1)
          {
            if ((v60 & 0x80000000) != 0)
            {
              v63 = -2 - v60;
              if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 224) + 8 * ((-2 - v60) >> 6)) >> (-2 - v60)) & 1) != 0)
                v62 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 200) + 24 * v63);
              else
                v62 = (_DWORD *)sub_22F1E1134(*((uint64_t *)&v73 + 1), v63, 0);
            }
            else
            {
              v62 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v73 + 1) + 184) + 24 * v60);
            }
          }
          else
          {
            v62 = *(_DWORD **)(*((_QWORD *)&v73 + 1) + 184);
          }
          v9 = v58 + v57;
          if ((*v62 & 0x7FFFFFFFu) <= (v9 & 0x7FFFFFFF)
            && (v60 == -2
             || (v61 != *(_DWORD *)(v59 + 192)
               ? ((v61 & 0x80000000) != 0
                ? ((v67 = -3 - v60,
                    ((*(_QWORD *)(*(_QWORD *)(v59 + 224) + 8 * ((-3 - v60) >> 6)) >> (-3 - v60)) & 1) == 0)
                 ? (v66 = (_DWORD *)sub_22F1E1134(v59, v67, 0))
                 : (v66 = (_DWORD *)(*(_QWORD *)(v59 + 200) + 24 * v67)))
                : (v66 = (_DWORD *)(*(_QWORD *)(v59 + 184) + 24 * v61)),
                  v65 = *v66 & 0x7FFFFFFF)
               : (v65 = *(_DWORD *)(v59 + 216)),
                 v65 > (v9 & 0x7FFFFFFF))))
          {
            v64 = *(_DWORD *)(v59 + 304);
          }
          else
          {
            v64 = sub_22F1E1EE8(v59, v9 & 0x7FFFFFFF);
          }
        }
        while (v16 != v64);
      }
    }
LABEL_88:
    v46 = v82;
    if (v82 >= v83)
    {
      v48 = __p;
      v49 = 0xCCCCCCCCCCCCCCCDLL * ((v82 - (_BYTE *)__p) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0x666666666666666)
        abort();
      if (0x999999999999999ALL * ((v83 - (_BYTE *)__p) >> 3) > v50)
        v50 = 0x999999999999999ALL * ((v83 - (_BYTE *)__p) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v83 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
        v51 = 0x666666666666666;
      else
        v51 = v50;
      if (v51 > 0x666666666666666)
        sub_22E3B3F8C();
      v52 = 5 * v51;
      v53 = (char *)operator new(40 * v51);
      v54 = &v53[40 * v49];
      *(_QWORD *)v54 = 0;
      v54[8] = 0;
      v54[16] = 0;
      *(_QWORD *)(v54 + 20) = v8 | 0x100000000;
      *(_QWORD *)(v54 + 28) = v9 | 0x100000000;
      v54[36] = 0;
      v47 = v54 + 40;
      if (v46 == v48)
      {
        v55 = v54;
        a3 = v70;
      }
      else
      {
        a3 = v70;
        do
        {
          v68 = *(_OWORD *)(v46 - 5);
          v69 = *(_OWORD *)(v46 - 3);
          v55 = v54 - 40;
          *(_QWORD *)(v54 - 11) = *(_QWORD *)((char *)v46 - 11);
          *(_OWORD *)(v54 - 24) = v69;
          *(_OWORD *)(v54 - 40) = v68;
          v46 -= 5;
          v54 -= 40;
        }
        while (v46 != v48);
      }
      __p = v55;
      v82 = v47;
      v83 = &v53[8 * v52];
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_QWORD *)v82 = 0;
      *((_BYTE *)v46 + 8) = 0;
      *((_BYTE *)v46 + 16) = 0;
      *(_QWORD *)((char *)v46 + 20) = v8 | 0x100000000;
      *(_QWORD *)((char *)v46 + 28) = v9 | 0x100000000;
      *((_BYTE *)v46 + 36) = 0;
      v47 = (char *)(v46 + 5);
      a3 = v70;
    }
    v82 = v47;
  }
  v92 = v94;
  v93 = 0x1000000000;
  sub_22E678038((uint64_t)&v73, (uint64_t)&v92);
  v89 = 0u;
  v88 = 0u;
  v87 = 0u;
  v86 = 0u;
  v84 = &v86;
  v85 = 0x800000000;
  v91[1] = 0;
  v91[0] = 0;
  v90 = v91;
  sub_22E67863C((unint64_t)&v73, (uint64_t)&v84);
  sub_22F258024(v91[0]);
  if (v84 != &v86)
    free(v84);
  if ((_DWORD)v79)
  {
    v84 = v92;
    v85 = v93;
    v86 = 0uLL;
    *(_QWORD *)&v87 = v78;
    *((_QWORD *)&v87 + 1) = v79;
    llvm::coverage::CoverageMappingWriter::write((llvm::coverage::CoverageMappingWriter *)&v84, a3);
  }
  if (v92 != v94)
    free(v92);
  if (__p)
  {
    v82 = (char *)__p;
    operator delete(__p);
  }
  if (v78 != v80)
    free(v78);
  if ((v75 & 1) == 0)
    llvm::deallocate_buffer(v76, (void *)(12 * v77));
}

llvm *sub_22E673A20(llvm *a1, llvm *a2)
{
  uint64_t v4;
  __int128 v5;

  if (a1 != a2)
  {
    sub_22E3BACF8(a1);
    *((_QWORD *)a1 + 3) = 0;
    v4 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 3) = v4;
    if (*((_QWORD *)a2 + 3) >= 8uLL)
    {
      if ((v4 & 2) != 0 && (v4 & 4) != 0)
      {
        (*(void (**)(llvm *, llvm *))((v4 & 0xFFFFFFFFFFFFFFF8) + 8))(a1, a2);
      }
      else
      {
        v5 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v5;
      }
      *((_QWORD *)a2 + 3) = 0;
    }
  }
  return a1;
}

uint64_t sub_22E673AA0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;

  sub_22F0D5A50(a2);
  while (1)
  {
    v4 = v3;
    if (!sub_22F1E2440(*(_QWORD **)(a1 + 8), v3, 0) && !sub_22E673BCC(*(_QWORD **)(a1 + 8), v4))
      break;
    v3 = sub_22F1E25A4(*(_QWORD **)(a1 + 8), v4);
  }
  return v4;
}

uint64_t sub_22E673B04(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;

  v8 = sub_22E673AA0(a1, (uint64_t)a3);
  v9 = sub_22E673C44(a1, (uint64_t)a3);
  v10 = sub_22E673CAC(a1, a2, v8 | 0x100000000, v9 | 0x100000000, 0, 0);
  if (a4)
    sub_22E673E48(a1, a3);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1592) - 40);
  sub_22E675718(a1, v10);
  v12 = *(_QWORD **)(a1 + 8);
  sub_22F0D5A50((uint64_t)a3);
  if (sub_22F1E3C34(v12, v8, v13))
    *(_DWORD *)(a1 + 1656) = v9;
  return v11;
}

BOOL sub_22E673BCC(_QWORD *a1, int a2)
{
  const char *v3;
  uint64_t v4;

  if (a2 < 0)
    a2 = sub_22F1E238C(a1, a2);
  v3 = sub_22F1E3690(a1, a2, 0);
  if (v4 != 10)
    return 0;
  return *(_QWORD *)v3 == 0x692D746C6975623CLL && *((_WORD *)v3 + 4) == 15982;
}

uint64_t sub_22E673C44(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  sub_22F0D60E4(a2);
  while (1)
  {
    v4 = v3;
    if (!sub_22F1E2440(*(_QWORD **)(a1 + 8), v3, 0) && !sub_22E673BCC(*(_QWORD **)(a1 + 8), v4))
      break;
    v3 = sub_22F1E25A4(*(_QWORD **)(a1 + 8), v4);
  }
  return sub_22E675B3C(a1, v4);
}

unint64_t sub_22E673CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;

  if ((a3 & 0xFF00000000) != 0 && !(_BYTE)a6)
    *(_DWORD *)(a1 + 1656) = a3;
  v12 = *(_QWORD **)(a1 + 1592);
  v13 = *(_QWORD *)(a1 + 1600);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(_BYTE **)(a1 + 1584);
    v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - v15) >> 3) + 1;
    if (v16 > 0x666666666666666)
      abort();
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x333333333333333)
      v18 = 0x666666666666666;
    else
      v18 = v16;
    if (v18 > 0x666666666666666)
      sub_22E3B3F8C();
    v19 = 5 * v18;
    v20 = (char *)operator new(40 * v18);
    v21 = &v20[8 * (((char *)v12 - v15) >> 3)];
    *(_QWORD *)v21 = a2;
    *((_QWORD *)v21 + 1) = a5;
    *((_DWORD *)v21 + 4) = a6;
    *(_QWORD *)(v21 + 20) = a3;
    *(_QWORD *)(v21 + 28) = a4;
    v21[36] = 0;
    v14 = v21 + 40;
    if (v12 == (_QWORD *)v15)
    {
      v24 = &v20[8 * (((char *)v12 - v15) >> 3)];
    }
    else
    {
      do
      {
        v22 = *(_OWORD *)(v12 - 5);
        v23 = *(_OWORD *)(v12 - 3);
        v24 = v21 - 40;
        *(_QWORD *)(v21 - 11) = *(_QWORD *)((char *)v12 - 11);
        *(_OWORD *)(v21 - 24) = v23;
        *(_OWORD *)(v21 - 40) = v22;
        v12 -= 5;
        v21 -= 40;
      }
      while (v12 != (_QWORD *)v15);
    }
    *(_QWORD *)(a1 + 1584) = v24;
    *(_QWORD *)(a1 + 1592) = v14;
    *(_QWORD *)(a1 + 1600) = &v20[8 * v19];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v12 = a2;
    v12[1] = a5;
    *((_DWORD *)v12 + 4) = a6;
    *(_QWORD *)((char *)v12 + 20) = a3;
    *(_QWORD *)((char *)v12 + 28) = a4;
    v14 = (char *)(v12 + 5);
    *((_BYTE *)v12 + 36) = 0;
  }
  *(_QWORD *)(a1 + 1592) = v14;
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-*(_QWORD *)(a1 + 1584)] >> 3) - 1;
}

void sub_22E673E48(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD v31[32];

  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      case 0x13:
        v5 = *(_QWORD *)(a1 + 1592);
        v6 = sub_22E673AA0(a1, *((_QWORD *)a2 + 2));
        sub_22E675C90(a1, v6);
        if (!*(_BYTE *)(v5 - 16))
        {
          *(_DWORD *)(v5 - 20) = v6;
          *(_BYTE *)(v5 - 16) = 1;
        }
        sub_22E673B04(a1, *(_QWORD *)(*(_QWORD *)(a1 + 1592) - 40), *((_QWORD *)a2 + 2), 1);
        v7 = sub_22E673C44(a1, *((_QWORD *)a2 + 2));
        sub_22E675C90(a1, v7);
        v8 = *(_QWORD *)(a1 + 1592);
        v9 = sub_22E673AA0(a1, *((_QWORD *)a2 + 3));
        sub_22E675C90(a1, v9);
        if (!*(_BYTE *)(v8 - 16))
        {
          *(_DWORD *)(v8 - 20) = v9;
          *(_BYTE *)(v8 - 16) = 1;
        }
        v31[0] = a2;
        v10 = sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31);
        sub_22E673B04(a1, ((unint64_t)*((unsigned int *)v10 + 2) << 32) | 1, *((_QWORD *)a2 + 3), 1);
        v31[0] = a2;
        v11 = ((unint64_t)*((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31) + 2) << 32) | 1;
        v31[0] = *((_QWORD *)a2 + 3);
        v12 = ((unint64_t)*((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31) + 2) << 32) | 1;
        v13 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v14 = llvm::coverage::CounterExpressionBuilder::subtract();
        sub_22E676918(a1, v13, v11, v14);
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
        v16 = llvm::coverage::CounterExpressionBuilder::subtract();
        v17 = a1;
        v18 = v15;
        v19 = v12;
        goto LABEL_19;
      case 0x14:
        v20 = *(_QWORD *)(a1 + 1592);
        v21 = sub_22E673AA0(a1, *((_QWORD *)a2 + 2));
        sub_22E675C90(a1, v21);
        if (!*(_BYTE *)(v20 - 16))
        {
          *(_DWORD *)(v20 - 20) = v21;
          *(_BYTE *)(v20 - 16) = 1;
        }
        sub_22E673B04(a1, *(_QWORD *)(*(_QWORD *)(a1 + 1592) - 40), *((_QWORD *)a2 + 2), 1);
        v22 = sub_22E673C44(a1, *((_QWORD *)a2 + 2));
        sub_22E675C90(a1, v22);
        v23 = *(_QWORD *)(a1 + 1592);
        v24 = sub_22E673AA0(a1, *((_QWORD *)a2 + 3));
        sub_22E675C90(a1, v24);
        if (!*(_BYTE *)(v23 - 16))
        {
          *(_DWORD *)(v23 - 20) = v24;
          *(_BYTE *)(v23 - 16) = 1;
        }
        v31[0] = a2;
        v25 = sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31);
        sub_22E673B04(a1, ((unint64_t)*((unsigned int *)v25 + 2) << 32) | 1, *((_QWORD *)a2 + 3), 1);
        v31[0] = a2;
        v26 = ((unint64_t)*((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31) + 2) << 32) | 1;
        v31[0] = *((_QWORD *)a2 + 3);
        v27 = ((unint64_t)*((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 1576), v31) + 2) << 32) | 1;
        v28 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v29 = llvm::coverage::CounterExpressionBuilder::subtract();
        sub_22E676918(a1, v28, v29, v26);
        v30 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
        v19 = llvm::coverage::CounterExpressionBuilder::subtract();
        v17 = a1;
        v18 = v30;
        v16 = v27;
LABEL_19:
        sub_22E676918(v17, v18, v19, v16);
        return;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v4 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22E677344(a1, (uint64_t)a2);
}

void sub_22E675718(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int i;
  unint64_t v16;
  unsigned int v17;
  uint64_t j;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t k;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v42;
  uint64_t *v43;

  v2 = *(_QWORD *)(a1 + 1592);
  v3 = *(_QWORD *)(a1 + 1584);
  if (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3) > a2)
  {
    v4 = a2;
    v42 = (_QWORD *)(a1 + 1552);
    do
    {
      if (*(_BYTE *)(v2 - 16))
      {
        v6 = *(_DWORD *)(v2 - 20);
        v7 = (unsigned int *)(v3 + 40 * v4 + 28);
        if (*(_BYTE *)(v2 - 8))
          v7 = (unsigned int *)(v2 - 12);
        v8 = *v7;
        v9 = *(unsigned __int8 *)(v2 - 24);
        v10 = 0;
        if (v6)
        {
          v11 = *(_DWORD *)(v2 - 20);
          do
          {
            v11 = sub_22E676A38(*(_QWORD *)(a1 + 8), v11);
            ++v10;
          }
          while (v11);
        }
        v12 = 0;
        if (v8)
        {
          v13 = v8;
          do
          {
            v13 = sub_22E676A38(*(_QWORD *)(a1 + 8), v13);
            ++v12;
          }
          while (v13);
        }
        v43 = (uint64_t *)(v2 - 40);
        v14 = v8;
        for (i = v6; !sub_22E670F58(*(_QWORD *)(a1 + 8), v6, v8); v12 = v16)
        {
          if (v12 >= v10)
          {
            v17 = sub_22E676F30(*(_QWORD *)(a1 + 8), v14);
            if (!v9)
            {
              for (j = *(_QWORD *)(a1 + 1560); j != *(_QWORD *)(a1 + 1552); j -= 40)
              {
                if (*(_DWORD *)(j - 20) == v17 && *(_DWORD *)(j - 12) == v8 && !*(_BYTE *)(j - 24))
                  goto LABEL_23;
              }
              sub_22E677EBC((uint64_t)v42, *v43, v17, v8);
            }
LABEL_23:
            v19 = sub_22E676A38(*(_QWORD *)(a1 + 8), v14);
            v20 = sub_22E675B3C(a1, v19);
            if (!v20)
            {
LABEL_67:
              llvm::report_fatal_error((llvm *)"File exit not handled before popRegions", (const char *)1);
LABEL_68:
              abort();
            }
            v8 = v20;
            v16 = v12 - 1;
          }
          else
          {
            v16 = v12;
          }
          if (v10 >= v12)
          {
            v21 = sub_22E676C9C(a1, i);
            if (!v9)
            {
              for (k = *(_QWORD *)(a1 + 1560); k != *(_QWORD *)(a1 + 1552); k -= 40)
              {
                if (*(_DWORD *)(k - 20) == v6 && *(_DWORD *)(k - 12) == v21 && !*(_BYTE *)(k - 24))
                  goto LABEL_34;
              }
              sub_22E677EBC((uint64_t)v42, *v43, v6, v21);
            }
LABEL_34:
            v23 = sub_22E676A38(*(_QWORD *)(a1 + 8), i);
            if (!v23)
              goto LABEL_67;
            v6 = v23;
            --v10;
          }
          i = v6;
          v14 = v8;
        }
        if (!*(_BYTE *)(v2 - 16))
          *(_BYTE *)(v2 - 16) = 1;
        *(_DWORD *)(v2 - 20) = v6;
        if (!*(_BYTE *)(v2 - 8))
          *(_BYTE *)(v2 - 8) = 1;
        *(_DWORD *)(v2 - 12) = v8;
        if (!v9)
        {
          *(_DWORD *)(a1 + 1656) = v8;
          if (v6 == sub_22E676F30(*(_QWORD *)(a1 + 8), i) && v8 == sub_22E676C9C(a1, v14))
            *(_DWORD *)(a1 + 1656) = sub_22E676A38(*(_QWORD *)(a1 + 8), v14);
        }
        v24 = *(char **)(a1 + 1560);
        v25 = *(_QWORD *)(a1 + 1568);
        if ((unint64_t)v24 >= v25)
        {
          v29 = (char *)*v42;
          v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v24[-*v42] >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0x666666666666666)
            goto LABEL_68;
          v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v29) >> 3);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x333333333333333)
            v33 = 0x666666666666666;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 > 0x666666666666666)
              sub_22E3B3F8C();
            v34 = (char *)operator new(40 * v33);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[40 * v30];
          v36 = *(_OWORD *)v43;
          v37 = *(_OWORD *)(v2 - 24);
          *((_QWORD *)v35 + 4) = *(_QWORD *)(v2 - 8);
          *(_OWORD *)v35 = v36;
          *((_OWORD *)v35 + 1) = v37;
          v38 = v35;
          if (v24 == v29)
          {
            v4 = a2;
          }
          else
          {
            v4 = a2;
            do
            {
              v39 = *(_OWORD *)(v24 - 40);
              v40 = *(_OWORD *)(v24 - 24);
              *(_QWORD *)(v38 - 11) = *(_QWORD *)(v24 - 11);
              *(_OWORD *)(v38 - 24) = v40;
              *(_OWORD *)(v38 - 40) = v39;
              v38 -= 40;
              v24 -= 40;
            }
            while (v24 != v29);
            v24 = (char *)*v42;
          }
          *(_QWORD *)(a1 + 1552) = v38;
          v28 = v35 + 40;
          *(_QWORD *)(a1 + 1560) = v35 + 40;
          *(_QWORD *)(a1 + 1568) = &v34[40 * v33];
          if (v24)
            operator delete(v24);
        }
        else
        {
          v26 = *(_OWORD *)v43;
          v27 = *(_OWORD *)(v2 - 24);
          *((_QWORD *)v24 + 4) = *(_QWORD *)(v2 - 8);
          *(_OWORD *)v24 = v26;
          *((_OWORD *)v24 + 1) = v27;
          v28 = v24 + 40;
          v4 = a2;
        }
        *(_QWORD *)(a1 + 1560) = v28;
        v2 = *(_QWORD *)(a1 + 1592);
        v3 = *(_QWORD *)(a1 + 1584);
      }
      v2 -= 40;
      *(_QWORD *)(a1 + 1592) = v2;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3) > v4);
  }
}

uint64_t sub_22E675B3C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  _BYTE v8[4];
  int v9;

  v4 = a2;
  if (a2 < 0)
    v4 = sub_22F1E238C(*(_QWORD **)(a1 + 8), a2);
  v5 = sub_22F1415D0(v4, (uint64_t)v8, *(_QWORD **)(a1 + 8), *(_DWORD **)(a1 + 16), 0);
  v6 = v9;
  if (v5)
    v6 = 0;
  return (v6 + a2);
}

unint64_t sub_22E675B9C(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  int v5;
  BOOL v6;
  unint64_t v7;

  sub_22E677344(a1, a2);
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + *(unsigned __int8 *)(a2 + 3)) + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(result + 16);
  if (v5 == 39)
    goto LABEL_2;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + *(unsigned __int8 *)(a2 + 3)) + 8) & 0xFFFFFFFFFFFFFFF0);
    result = sub_22F10CF48(result);
    if (result)
    {
LABEL_2:
      result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
      if (result)
        v6 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
      else
        v6 = 0;
      if (v6)
        goto LABEL_9;
      goto LABEL_12;
    }
    result = v7;
    v5 = *(unsigned __int8 *)(v7 + 16);
  }
  if ((v5 - 27) > 0xFFFFFFFD)
  {
LABEL_9:
    if ((*(_BYTE *)(result + 19) & 1) != 0)
      return sub_22E677974(a1, a2);
    return result;
  }
LABEL_12:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
  {
    result = sub_22F10CF48(result);
    if (result)
      goto LABEL_9;
  }
  return result;
}

void sub_22E675C90(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int i;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  _DWORD *v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _DWORD *v89;
  unsigned int v90;
  _DWORD *v91;
  unsigned int v92;
  unsigned int v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  _BYTE *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  char *v108;
  int v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  void *v120[2];
  _BYTE v121[32];
  _QWORD **v122;
  _QWORD *v123[4];

  v123[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!a2 || sub_22E670F58(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 1656), a2))
    return;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 & 0x7FFFFFFF;
  v6 = *(_DWORD *)(v4 + 304);
  v7 = v6 + 1;
  if (v6 + 1 > 1)
  {
    if ((v6 & 0x80000000) != 0)
    {
      v9 = -2 - v6;
      if (((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
        v8 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * v9);
      else
        v8 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v9, 0);
    }
    else
    {
      v8 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v6);
    }
  }
  else
  {
    v8 = *(_DWORD **)(v4 + 184);
  }
  if ((*v8 & 0x7FFFFFFFu) <= v5
    && (v6 == -2
     || (v7 != *(_DWORD *)(v4 + 192)
       ? ((v7 & 0x80000000) != 0
        ? ((v12 = -3 - v6,
            ((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(v4, v12, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * v12)))
        : (v11 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v7)),
          v10 = *v11 & 0x7FFFFFFF)
       : (v10 = *(_DWORD *)(v4 + 216)),
         v10 > v5)))
  {
    v13 = *(_DWORD *)(v4 + 304);
  }
  else
  {
    v13 = sub_22F1E1EE8(v4, a2 & 0x7FFFFFFF);
  }
  v109 = a2;
  v14 = a2;
  while (1)
  {
    v15 = sub_22E676A38(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 1656));
    if (v15)
      break;
LABEL_44:
    v24 = sub_22E676A38(*(_QWORD *)(a1 + 8), v14);
    if (!v24 || (v14 = v24, sub_22E670F58(*(_QWORD *)(a1 + 8), v24, *(_DWORD *)(a1 + 1656))))
    {
      *(_DWORD *)(a1 + 1656) = v109;
      return;
    }
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_DWORD *)(v25 + 304);
    v27 = v26 + 1;
    if (v26 + 1 > 1)
    {
      if ((v26 & 0x80000000) != 0)
      {
        v29 = -2 - v26;
        if (((*(_QWORD *)(*(_QWORD *)(v25 + 224) + 8 * ((-2 - v26) >> 6)) >> (-2 - v26)) & 1) != 0)
          v28 = (_DWORD *)(*(_QWORD *)(v25 + 200) + 24 * v29);
        else
          v28 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v29, 0);
      }
      else
      {
        v28 = (_DWORD *)(*(_QWORD *)(v25 + 184) + 24 * v26);
      }
    }
    else
    {
      v28 = *(_DWORD **)(v25 + 184);
    }
    if ((*v28 & 0x7FFFFFFFu) <= (v14 & 0x7FFFFFFF)
      && (v26 == -2
       || (v27 != *(_DWORD *)(v25 + 192)
         ? ((v27 & 0x80000000) != 0
          ? ((v32 = -3 - v26,
              ((*(_QWORD *)(*(_QWORD *)(v25 + 224) + 8 * ((-3 - v26) >> 6)) >> (-3 - v26)) & 1) == 0)
           ? (v31 = (_DWORD *)sub_22F1E1134(v25, v32, 0))
           : (v31 = (_DWORD *)(*(_QWORD *)(v25 + 200) + 24 * v32)))
          : (v31 = (_DWORD *)(*(_QWORD *)(v25 + 184) + 24 * v27)),
            v30 = *v31 & 0x7FFFFFFF)
         : (v30 = *(_DWORD *)(v25 + 216)),
           v30 > (v14 & 0x7FFFFFFF))))
    {
      v13 = *(_DWORD *)(v25 + 304);
    }
    else
    {
      v13 = sub_22F1E1EE8(v25, v14 & 0x7FFFFFFF);
    }
  }
  v16 = v15;
  v17 = -2 - v13;
  v117 = (-2 - v13) >> 6;
  v118 = 1 << (-2 - v13);
  v18 = v13 + 1;
  v115 = 1 << (-3 - v13);
  v116 = -3 - v13;
  v114 = (-3 - v13) >> 6;
  v19 = v13;
  while (1)
  {
    v20 = *(_QWORD *)(a1 + 8);
    if (v18 > 1)
    {
      if ((v19 & 0x80000000) != 0)
        v21 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v20 + 224) + 8 * v117) & v118) != 0
                       ? *(_QWORD *)(v20 + 200) + 24 * v17
                       : sub_22F1E1134(*(_QWORD *)(a1 + 8), v17, 0));
      else
        v21 = (_DWORD *)(*(_QWORD *)(v20 + 184) + 24 * v19);
    }
    else
    {
      v21 = *(_DWORD **)(v20 + 184);
    }
    if ((*v21 & 0x7FFFFFFFu) <= (v16 & 0x7FFFFFFF))
    {
      if (v19 == -2)
        break;
      if (v18 == *(_DWORD *)(v20 + 192))
      {
        v22 = *(_DWORD *)(v20 + 216);
      }
      else
      {
        if ((v18 & 0x80000000) != 0)
          v23 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v20 + 224) + 8 * v114) & v115) != 0
                         ? *(_QWORD *)(v20 + 200) + 24 * v116
                         : sub_22F1E1134(v20, v116, 0));
        else
          v23 = (_DWORD *)(*(_QWORD *)(v20 + 184) + 24 * v18);
        v22 = *v23 & 0x7FFFFFFF;
      }
      if (v22 > (v16 & 0x7FFFFFFF))
        break;
    }
    v16 = sub_22E676A38(*(_QWORD *)(a1 + 8), v16);
    if (!v16)
      goto LABEL_44;
  }
  v120[0] = v121;
  v120[1] = (void *)0x800000000;
  v123[0] = 0;
  v123[1] = 0;
  v122 = v123;
  v33 = *(uint64_t **)(a1 + 1592);
  v110 = *(uint64_t **)(a1 + 1584);
  if (v33 == v110)
    goto LABEL_153;
  v111 = v17;
  do
  {
    v112 = v33 - 5;
    if (!*((_BYTE *)v33 - 16))
      goto LABEL_150;
    v119 = *((_DWORD *)v33 - 5);
    v34 = sub_22E676A38(*(_QWORD *)(a1 + 8), v119);
    if (!v34)
    {
LABEL_152:
      v84 = *v112;
      v85 = *(_DWORD *)(a1 + 1656);
      v86 = sub_22E676A38(*(_QWORD *)(a1 + 8), v85);
      if (v86)
      {
        v87 = v86;
        while (1)
        {
          while (1)
          {
            v88 = *(_QWORD *)(a1 + 8);
            if (v18 > 1)
            {
              if ((v19 & 0x80000000) != 0)
                v89 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v88 + 224) + 8 * v117) & v118) != 0
                               ? *(_QWORD *)(v88 + 200) + 24 * v17
                               : sub_22F1E1134(*(_QWORD *)(a1 + 8), v17, 0));
              else
                v89 = (_DWORD *)(*(_QWORD *)(v88 + 184) + 24 * v19);
            }
            else
            {
              v89 = *(_DWORD **)(v88 + 184);
            }
            if ((*v89 & 0x7FFFFFFFu) <= (v87 & 0x7FFFFFFF))
            {
              if (v19 == -2)
                break;
              if (v18 == *(_DWORD *)(v88 + 192))
              {
                v90 = *(_DWORD *)(v88 + 216);
              }
              else
              {
                if ((v18 & 0x80000000) != 0)
                  v91 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v88 + 224) + 8 * v114) & v115) != 0
                                 ? *(_QWORD *)(v88 + 200) + 24 * v116
                                 : sub_22F1E1134(v88, v116, 0));
                else
                  v91 = (_DWORD *)(*(_QWORD *)(v88 + 184) + 24 * v18);
                v90 = *v91 & 0x7FFFFFFF;
              }
              if (v90 > (v87 & 0x7FFFFFFF))
                break;
            }
            v87 = sub_22E676A38(*(_QWORD *)(a1 + 8), v87);
            if (!v87)
              goto LABEL_153;
          }
          v119 = sub_22E676F30(*(_QWORD *)(a1 + 8), v85);
          if ((sub_22E676B88((uint64_t)v120, &v119) & 0x100000000) != 0)
          {
            v92 = sub_22E676C9C(a1, v85);
            v93 = v92;
            v94 = *(_QWORD **)(a1 + 1560);
            v95 = *(_QWORD *)(a1 + 1568);
            if ((unint64_t)v94 >= v95)
            {
              v98 = *(_BYTE **)(a1 + 1552);
              v99 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v94 - v98) >> 3) + 1;
              if (v99 > 0x666666666666666)
                goto LABEL_199;
              v100 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v95 - (_QWORD)v98) >> 3);
              if (2 * v100 > v99)
                v99 = 2 * v100;
              if (v100 >= 0x333333333333333)
                v101 = 0x666666666666666;
              else
                v101 = v99;
              if (v101 > 0x666666666666666)
                goto LABEL_200;
              v113 = 5 * v101;
              v102 = (char *)operator new(40 * v101);
              v103 = &v102[8 * (((char *)v94 - v98) >> 3)];
              v104 = v119 | 0x100000000;
              *(_QWORD *)v103 = v84;
              v103[8] = 0;
              v103[16] = 0;
              *(_QWORD *)(v103 + 20) = v104;
              *(_QWORD *)(v103 + 28) = v93 | 0x100000000;
              v103[36] = 0;
              if (v94 == (_QWORD *)v98)
              {
                v108 = &v102[8 * (((char *)v94 - v98) >> 3)];
              }
              else
              {
                v105 = &v102[8 * (((char *)v94 - v98) >> 3)];
                do
                {
                  v106 = *(_OWORD *)(v94 - 5);
                  v107 = *(_OWORD *)(v94 - 3);
                  v108 = v105 - 40;
                  *(_QWORD *)(v105 - 11) = *(_QWORD *)((char *)v94 - 11);
                  *(_OWORD *)(v105 - 24) = v107;
                  *(_OWORD *)(v105 - 40) = v106;
                  v94 -= 5;
                  v105 -= 40;
                }
                while (v94 != (_QWORD *)v98);
              }
              *(_QWORD *)(a1 + 1552) = v108;
              v97 = v103 + 40;
              *(_QWORD *)(a1 + 1560) = v103 + 40;
              *(_QWORD *)(a1 + 1568) = &v102[8 * v113];
              if (v98)
                operator delete(v98);
            }
            else
            {
              v96 = v119 | 0x100000000;
              *v94 = v84;
              *((_BYTE *)v94 + 8) = 0;
              *((_BYTE *)v94 + 16) = 0;
              *(_QWORD *)((char *)v94 + 20) = v96;
              *(_QWORD *)((char *)v94 + 28) = v92 | 0x100000000;
              *((_BYTE *)v94 + 36) = 0;
              v97 = (char *)(v94 + 5);
            }
            *(_QWORD *)(a1 + 1560) = v97;
            v17 = v111;
          }
          v85 = sub_22E676A38(*(_QWORD *)(a1 + 8), v85);
          v87 = sub_22E676A38(*(_QWORD *)(a1 + 8), v85);
          if (!v87)
            goto LABEL_153;
        }
      }
      break;
    }
    v35 = v34;
    while (1)
    {
      v36 = *(_QWORD *)(a1 + 8);
      if (v18 > 1)
      {
        if ((v19 & 0x80000000) != 0)
          v37 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v36 + 224) + 8 * v117) & v118) != 0
                         ? *(_QWORD *)(v36 + 200) + 24 * v17
                         : sub_22F1E1134(*(_QWORD *)(a1 + 8), v17, 0));
        else
          v37 = (_DWORD *)(*(_QWORD *)(v36 + 184) + 24 * v19);
      }
      else
      {
        v37 = *(_DWORD **)(v36 + 184);
      }
      if ((*v37 & 0x7FFFFFFFu) <= (v35 & 0x7FFFFFFF))
      {
        if (v19 == -2)
          break;
        if (v18 == *(_DWORD *)(v36 + 192))
        {
          v38 = *(_DWORD *)(v36 + 216);
        }
        else
        {
          if ((v18 & 0x80000000) != 0)
            v39 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v36 + 224) + 8 * v114) & v115) != 0
                           ? *(_QWORD *)(v36 + 200) + 24 * v116
                           : sub_22F1E1134(v36, v116, 0));
          else
            v39 = (_DWORD *)(*(_QWORD *)(v36 + 184) + 24 * v18);
          v38 = *v39 & 0x7FFFFFFF;
        }
        if (v38 > (v35 & 0x7FFFFFFF))
          break;
      }
      v35 = sub_22E676A38(*(_QWORD *)(a1 + 8), v35);
      if (!v35)
        goto LABEL_152;
    }
    for (i = v119; ; v119 = i)
    {
      v41 = *(_QWORD *)(a1 + 8);
      if (v18 > 1)
      {
        if ((v19 & 0x80000000) != 0)
          v42 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v41 + 224) + 8 * v117) & v118) != 0
                         ? *(_QWORD *)(v41 + 200) + 24 * v17
                         : sub_22F1E1134(*(_QWORD *)(a1 + 8), v17, 0));
        else
          v42 = (_DWORD *)(*(_QWORD *)(v41 + 184) + 24 * v19);
      }
      else
      {
        v42 = *(_DWORD **)(v41 + 184);
      }
      v43 = i & 0x7FFFFFFF;
      if ((*v42 & 0x7FFFFFFFu) <= v43)
      {
        if (v19 == -2)
          break;
        if (v18 == *(_DWORD *)(v41 + 192))
        {
          v44 = *(_DWORD *)(v41 + 216);
        }
        else
        {
          if ((v18 & 0x80000000) != 0)
            v45 = (_DWORD *)((*(_QWORD *)(*(_QWORD *)(v41 + 224) + 8 * v114) & v115) != 0
                           ? *(_QWORD *)(v41 + 200) + 24 * v116
                           : sub_22F1E1134(v41, v116, 0));
          else
            v45 = (_DWORD *)(*(_QWORD *)(v41 + 184) + 24 * v18);
          v44 = *v45 & 0x7FFFFFFF;
        }
        if (v44 > v43)
          break;
      }
      v46 = sub_22E676B88((uint64_t)v120, &v119);
      v47 = v119;
      if ((v46 & 0x100000000) == 0)
        goto LABEL_144;
      v48 = *((unsigned __int8 *)v33 - 24);
      v49 = sub_22E676C9C(a1, v119);
      v50 = v49;
      if (v48)
      {
        v51 = *((_BYTE *)v33 - 24);
        v52 = *(uint64_t **)(a1 + 1560);
        v53 = *(_QWORD *)(a1 + 1568);
        if ((unint64_t)v52 >= v53)
        {
          v59 = *(uint64_t **)(a1 + 1552);
          v60 = 0xCCCCCCCCCCCCCCCDLL * (v52 - v59) + 1;
          if (v60 > 0x666666666666666)
            goto LABEL_199;
          v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v59) >> 3);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x333333333333333)
            v62 = 0x666666666666666;
          else
            v62 = v60;
          if (v62 > 0x666666666666666)
            goto LABEL_200;
          v63 = 5 * v62;
          v64 = (char *)operator new(40 * v62);
          v65 = &v64[8 * (v52 - v59)];
          v66 = v119 | 0x100000000;
          *(_OWORD *)v65 = *(_OWORD *)v112;
          *((_DWORD *)v65 + 4) = 1;
          *(_QWORD *)(v65 + 20) = v66;
          *(_QWORD *)(v65 + 28) = v50 | 0x100000000;
          v65[36] = v51;
          if (v52 == v59)
          {
            v70 = &v64[8 * (v52 - v59)];
          }
          else
          {
            v67 = &v64[8 * (v52 - v59)];
            do
            {
              v68 = *(_OWORD *)(v52 - 5);
              v69 = *(_OWORD *)(v52 - 3);
              v70 = v67 - 40;
              *(_QWORD *)(v67 - 11) = *(uint64_t *)((char *)v52 - 11);
              *(_OWORD *)(v67 - 24) = v69;
              *(_OWORD *)(v67 - 40) = v68;
              v52 -= 5;
              v67 -= 40;
            }
            while (v52 != v59);
          }
          v82 = &v64[8 * v63];
          *(_QWORD *)(a1 + 1552) = v70;
          v55 = v65 + 40;
          *(_QWORD *)(a1 + 1560) = v65 + 40;
          *(_QWORD *)(a1 + 1568) = v82;
          if (!v59)
            goto LABEL_143;
          goto LABEL_142;
        }
        v54 = v119 | 0x100000000;
        *(_OWORD *)v52 = *(_OWORD *)v112;
        *((_DWORD *)v52 + 4) = 1;
        *(uint64_t *)((char *)v52 + 20) = v54;
        *(uint64_t *)((char *)v52 + 28) = v49 | 0x100000000;
        *((_BYTE *)v52 + 36) = v51;
        v55 = (char *)(v52 + 5);
      }
      else
      {
        v56 = *(uint64_t **)(a1 + 1560);
        v57 = *(_QWORD *)(a1 + 1568);
        if ((unint64_t)v56 >= v57)
        {
          v59 = *(uint64_t **)(a1 + 1552);
          v71 = 0xCCCCCCCCCCCCCCCDLL * (v56 - v59) + 1;
          if (v71 > 0x666666666666666)
LABEL_199:
            abort();
          v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
          if (2 * v72 > v71)
            v71 = 2 * v72;
          if (v72 >= 0x333333333333333)
            v73 = 0x666666666666666;
          else
            v73 = v71;
          if (v73 > 0x666666666666666)
LABEL_200:
            sub_22E3B3F8C();
          v74 = 5 * v73;
          v75 = (char *)operator new(40 * v73);
          v76 = &v75[8 * (v56 - v59)];
          v77 = v119 | 0x100000000;
          *(_QWORD *)v76 = *v112;
          v76[8] = 0;
          v76[16] = 0;
          *(_QWORD *)(v76 + 20) = v77;
          *(_QWORD *)(v76 + 28) = v50 | 0x100000000;
          v76[36] = 0;
          if (v56 == v59)
          {
            v81 = &v75[8 * (v56 - v59)];
          }
          else
          {
            v78 = &v75[8 * (v56 - v59)];
            do
            {
              v79 = *(_OWORD *)(v56 - 5);
              v80 = *(_OWORD *)(v56 - 3);
              v81 = v78 - 40;
              *(_QWORD *)(v78 - 11) = *(uint64_t *)((char *)v56 - 11);
              *(_OWORD *)(v78 - 24) = v80;
              *(_OWORD *)(v78 - 40) = v79;
              v56 -= 5;
              v78 -= 40;
            }
            while (v56 != v59);
          }
          *(_QWORD *)(a1 + 1552) = v81;
          v55 = v76 + 40;
          *(_QWORD *)(a1 + 1560) = v76 + 40;
          *(_QWORD *)(a1 + 1568) = &v75[8 * v74];
          if (!v59)
            goto LABEL_143;
LABEL_142:
          operator delete(v59);
          goto LABEL_143;
        }
        v58 = v119 | 0x100000000;
        *v56 = *v112;
        *((_BYTE *)v56 + 8) = 0;
        *((_BYTE *)v56 + 16) = 0;
        *(uint64_t *)((char *)v56 + 20) = v58;
        *(uint64_t *)((char *)v56 + 28) = v49 | 0x100000000;
        *((_BYTE *)v56 + 36) = 0;
        v55 = (char *)(v56 + 5);
      }
LABEL_143:
      *(_QWORD *)(a1 + 1560) = v55;
      v47 = v119;
      v17 = v111;
LABEL_144:
      i = sub_22E676A38(*(_QWORD *)(a1 + 8), v47);
    }
    v83 = sub_22E675B3C(a1, v119);
    if (!*((_BYTE *)v33 - 16))
      *((_BYTE *)v33 - 16) = 1;
    *((_DWORD *)v33 - 5) = v83;
LABEL_150:
    v33 -= 5;
  }
  while (v112 != v110);
LABEL_153:
  *(_DWORD *)(a1 + 1656) = v109;
  sub_22E3B4AB8((uint64_t)&v122, v123[0]);
  if (v120[0] != v121)
    free(v120[0]);
}

void sub_22E676918(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16[10];

  v16[9] = *MEMORY[0x24BDAC8D0];
  if (a2 && sub_22E61F5D8(a2))
  {
    v14 = 0;
    v15 = 0;
    LODWORD(v16[0]) = 0;
    v8 = sub_22F00554C((uint64_t)a2, (uint64_t)&v14, *(_QWORD *)(**(_QWORD **)a1 + 144), 0, 0);
    if (LODWORD(v16[0]) >= 2)
      sub_22EF53BC0(v16);
    v9 = sub_22E673AA0(a1, (uint64_t)a2);
    v10 = sub_22E673C44(a1, (uint64_t)a2);
    if (v8)
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v11 = a3;
      v12 = a4;
    }
    v13 = sub_22E673CAC(a1, v11, v9 | 0x100000000, v10 | 0x100000000, v12, 1);
    sub_22E675718(a1, v13);
  }
}

_DWORD *sub_22E676A38(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;

  if ((a2 & 0x80000000) != 0)
    return (_DWORD *)sub_22F1E25A4((_QWORD *)a1, a2);
  v4 = *(_DWORD *)(a1 + 304);
  v5 = v4 + 1;
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v8 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v6 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v6 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v4);
    }
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 184);
  }
  if ((*v6 & 0x7FFFFFFFu) <= a2
    && (v4 == -2
     || (v5 != *(_DWORD *)(a1 + 192)
       ? ((v5 & 0x80000000) != 0
        ? ((v12 = -3 - v4,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(a1, v12, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v12)))
        : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5)),
          v10 = *v11 & 0x7FFFFFFF)
       : (v10 = *(_DWORD *)(a1 + 216)),
         v10 > a2)))
  {
    v9 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v9 = sub_22F1E1EE8(a1, a2);
  }
  result = sub_22E49F3DC((_QWORD *)a1, v9);
  if (result)
    return (_DWORD *)result[2];
  return result;
}

unint64_t sub_22E676B88(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 64))
  {
    sub_22E67708C((uint64_t **)(a1 + 48), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 7)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_22E67708C((uint64_t **)(a1 + 48), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_22E67708C((uint64_t **)(a1 + 48), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

_DWORD *sub_22E676C9C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *result;
  int v23;
  unsigned int v24;
  int v25;

  v3 = *(_QWORD *)(a1 + 8);
  if ((a2 & 0x80000000) != 0)
  {
    v8 = a2 & 0x7FFFFFFF;
    v9 = *(_DWORD *)(v3 + 304);
    v10 = v9 + 1;
    if (v9 + 1 > 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        v14 = -2 - v9;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-2 - v9) >> 6)) >> (-2 - v9)) & 1) != 0)
          v11 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v14);
        else
          v11 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v14, 0);
      }
      else
      {
        v11 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v9);
      }
    }
    else
    {
      v11 = *(_DWORD **)(v3 + 184);
    }
    if ((*v11 & 0x7FFFFFFFu) <= v8
      && (v9 == -2
       || (v10 != *(_DWORD *)(v3 + 192)
         ? ((v10 & 0x80000000) != 0
          ? ((v24 = -3 - v9,
              ((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-3 - v9) >> 6)) >> (-3 - v9)) & 1) == 0)
           ? (v18 = (_DWORD *)sub_22F1E1134(v3, v24, 0))
           : (v18 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v24)))
          : (v18 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v10)),
            v16 = *v18 & 0x7FFFFFFF)
         : (v16 = *(_DWORD *)(v3 + 216)),
           v16 > v8)))
    {
      v15 = *(_DWORD *)(v3 + 304);
    }
    else
    {
      v15 = sub_22F1E1EE8(v3, a2 & 0x7FFFFFFF);
    }
    v25 = sub_22F1E37C0(v3, v15);
    return (_DWORD *)(v25 + a2 - (sub_22E677168(*(_QWORD *)(a1 + 8), a2) >> 32));
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 304);
    v5 = v4 + 1;
    if (v4 + 1 > 1)
    {
      if ((v4 & 0x80000000) != 0)
      {
        v12 = -2 - v4;
        if (((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
          v6 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v12);
        else
          v6 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v12, 0);
      }
      else
      {
        v6 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v4);
      }
    }
    else
    {
      v6 = *(_DWORD **)(v3 + 184);
    }
    if ((*v6 & 0x7FFFFFFFu) <= a2
      && (v4 == -2
       || (v5 != *(_DWORD *)(v3 + 192)
         ? ((v5 & 0x80000000) != 0
          ? ((v19 = -3 - v4,
              ((*(_QWORD *)(*(_QWORD *)(v3 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) == 0)
           ? (v17 = (_DWORD *)sub_22F1E1134(v3, v19, 0))
           : (v17 = (_DWORD *)(*(_QWORD *)(v3 + 200) + 24 * v19)))
          : (v17 = (_DWORD *)(*(_QWORD *)(v3 + 184) + 24 * v5)),
            v13 = *v17 & 0x7FFFFFFF)
         : (v13 = *(_DWORD *)(v3 + 216)),
           v13 > a2)))
    {
      v20 = *(_DWORD *)(v3 + 304);
    }
    else
    {
      v20 = sub_22F1E1EE8(v3, a2);
    }
    v21 = v20;
    result = sub_22E49F3DC((_QWORD *)v3, v20);
    if (result)
    {
      v23 = *result & 0x7FFFFFFF;
      return (_DWORD *)(v23 + sub_22F1E37C0(v3, v21));
    }
  }
  return result;
}

_DWORD *sub_22E676F30(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;

  if ((a2 & 0x80000000) != 0)
    return (_DWORD *)(a2 - (sub_22E677168(a1, a2) >> 32));
  v4 = *(_DWORD *)(a1 + 304);
  v5 = v4 + 1;
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v8 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v6 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v6 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v4);
    }
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 184);
  }
  if ((*v6 & 0x7FFFFFFFu) <= a2
    && (v4 == -2
     || (v5 != *(_DWORD *)(a1 + 192)
       ? ((v5 & 0x80000000) != 0
        ? ((v12 = -3 - v4,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(a1, v12, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v12)))
        : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5)),
          v10 = *v11 & 0x7FFFFFFF)
       : (v10 = *(_DWORD *)(a1 + 216)),
         v10 > a2)))
  {
    v9 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v9 = sub_22F1E1EE8(a1, a2);
  }
  result = sub_22E49F3DC((_QWORD *)a1, v9);
  if (result)
    return (_DWORD *)(*result & 0x7FFFFFFF);
  return result;
}

uint64_t **sub_22E67708C(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x20uLL);
    *((_DWORD *)v8 + 7) = *a3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

unint64_t sub_22E677168(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  _DWORD *v15;
  unsigned int v16;
  char v18;

  v3 = a2 & 0x7FFFFFFF;
  v4 = *(_DWORD *)(a1 + 304);
  v5 = v4 + 1;
  if (v4 + 1 > 1)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v7 = -2 - v4;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v4) >> 6)) >> (-2 - v4)) & 1) != 0)
        v6 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v7);
      else
        v6 = (_DWORD *)sub_22F1E1134(a1, v7, 0);
    }
    else
    {
      v6 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v4);
    }
  }
  else
  {
    v6 = *(_DWORD **)(a1 + 184);
  }
  if ((*v6 & 0x7FFFFFFFu) <= v3
    && (v4 == -2
     || (v5 != *(_DWORD *)(a1 + 192)
       ? ((v5 & 0x80000000) != 0
        ? ((v11 = -3 - v4,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v4) >> 6)) >> (-3 - v4)) & 1) == 0)
         ? (v10 = (_DWORD *)sub_22F1E1134(a1, v11, 0))
         : (v10 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v11)))
        : (v10 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5)),
          v9 = *v10 & 0x7FFFFFFF)
       : (v9 = *(_DWORD *)(a1 + 216)),
         v9 > v3)))
  {
    v8 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v8 = sub_22F1E1EE8(a1, v3);
  }
  v18 = 0;
  if (v8 + 1 > 1)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v16 = -2 - v8;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v8) >> 6)) >> (-2 - v8)) & 1) != 0)
      {
        v14 = 0;
        v15 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v16);
      }
      else
      {
        v15 = (_DWORD *)sub_22F1E1134(a1, v16, &v18);
        v14 = v18 != 0;
      }
    }
    else
    {
      v14 = 0;
      v15 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v8);
    }
    v13 = 0;
    v12 = 0;
    if (!v14 && v15)
    {
      v13 = (unint64_t)(v3 - (*v15 & 0x7FFFFFFF)) << 32;
      v12 = v8;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  return v13 | v12;
}

void sub_22E677344(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  sub_22F0D5A50(a2);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 1592);
    v6 = sub_22E673AA0(a1, a2);
    sub_22E675C90(a1, v6);
    if (!*(_BYTE *)(v5 - 16))
    {
      *(_DWORD *)(v5 - 20) = v6;
      *(_BYTE *)(v5 - 16) = 1;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + 1660);
  *(_BYTE *)(a1 + 1660) = 0;
  *(_QWORD *)(a1 + 1664) = 0;
  sub_22F0D492C(a2);
  v20 = v22;
  v8 = v24;
  v21 = v23;
  v9 = *((_QWORD *)&v24 + 1);
  v10 = v7 != 0;
  v12 = *((_QWORD *)&v22 + 1);
  v11 = (uint64_t *)v22;
  if (v22 != v24)
  {
    v14 = 0;
    do
    {
      if ((v12 & 3) != 0)
      {
        if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (uint64_t *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (uint64_t *)sub_22F3AC1A8(*v11);
      }
      v15 = (_BYTE *)*v11;
      if (*v11)
      {
        if (v14 && *(_BYTE *)(a1 + 1660) && *v15 != 101)
        {
          v16 = sub_22E673C44(a1, v14);
          v17 = sub_22E673AA0(a1, (uint64_t)v15);
          v18 = sub_22E677524(a1, v16, v17);
          if (v19)
            sub_22E677854(a1, v18, HIDWORD(v18), *(_QWORD *)(a1 + 1664));
          *(_BYTE *)(a1 + 1660) = 0;
          v10 = 1;
          v12 = *((_QWORD *)&v20 + 1);
        }
        sub_22E673E48(a1, v15);
        v14 = (uint64_t)v15;
      }
      if ((v12 & 3) != 0)
      {
        if (v12 >= 4)
          sub_22F0D8720((uint64_t)&v20);
        else
          sub_22F3F2FE0((uint64_t)&v20, 1);
      }
      else
      {
        *(_QWORD *)&v20 = v20 + 8;
      }
      v12 = *((_QWORD *)&v20 + 1);
      v11 = (uint64_t *)v20;
    }
    while (v20 != __PAIR128__(v9, v8));
  }
  if (v10)
    *(_BYTE *)(a1 + 1660) = 1;
  v13 = sub_22E673C44(a1, a2);
  sub_22E675C90(a1, v13);
}

uint64_t sub_22E677524(uint64_t a1, int a2, unsigned int a3)
{
  int v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _DWORD v35[2];
  unsigned int v36;
  unsigned int v37;

  v4 = a2;
  if (a2 < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = a2 & 0x7FFFFFFF;
    v9 = *(_DWORD *)(v7 + 304);
    v10 = v9 + 1;
    if (v9 + 1 > 1)
    {
      if ((v9 & 0x80000000) != 0)
      {
        v12 = -2 - v9;
        if (((*(_QWORD *)(*(_QWORD *)(v7 + 224) + 8 * ((-2 - v9) >> 6)) >> (-2 - v9)) & 1) != 0)
          v11 = (_DWORD *)(*(_QWORD *)(v7 + 200) + 24 * v12);
        else
          v11 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v12, 0);
      }
      else
      {
        v11 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 24 * v9);
      }
    }
    else
    {
      v11 = *(_DWORD **)(v7 + 184);
    }
    if ((*v11 & 0x7FFFFFFFu) <= v8
      && (v9 == -2
       || (v10 != *(_DWORD *)(v7 + 192)
         ? ((v10 & 0x80000000) != 0
          ? ((v16 = -3 - v9,
              ((*(_QWORD *)(*(_QWORD *)(v7 + 224) + 8 * ((-3 - v9) >> 6)) >> (-3 - v9)) & 1) == 0)
           ? (v15 = (_DWORD *)sub_22F1E1134(v7, v16, 0))
           : (v15 = (_DWORD *)(*(_QWORD *)(v7 + 200) + 24 * v16)))
          : (v15 = (_DWORD *)(*(_QWORD *)(v7 + 184) + 24 * v10)),
            v14 = *v15 & 0x7FFFFFFF)
         : (v14 = *(_DWORD *)(v7 + 216)),
           v14 > v8)))
    {
      v13 = *(_DWORD *)(v7 + 304);
    }
    else
    {
      v13 = sub_22F1E1EE8(v7, v4 & 0x7FFFFFFF);
    }
    v17 = *(_QWORD **)(a1 + 8);
    if (v13 + 1 > 1)
    {
      if ((v13 & 0x80000000) != 0)
      {
        v19 = -2 - v13;
        if (((*(_QWORD *)(v17[28] + 8 * ((-2 - v13) >> 6)) >> (-2 - v13)) & 1) != 0)
          v18 = v17[25] + 24 * v19;
        else
          v18 = sub_22F1E1134((uint64_t)v17, v19, 0);
      }
      else
      {
        v18 = v17[23] + 24 * v13;
      }
    }
    else
    {
      v18 = v17[23];
    }
    v20 = *(_DWORD *)(v18 + 12);
    if (v20)
    {
      v21 = *(_DWORD *)(v18 + 16);
      if (v21 != v20 && v21 != 0)
        v4 = *(_DWORD *)(v18 + 16);
    }
  }
  else if (!a2)
  {
    v6 = 0;
    goto LABEL_36;
  }
  v6 = 0;
  v23 = v4;
  do
  {
    v23 = sub_22E676A38(*(_QWORD *)(a1 + 8), v23);
    ++v6;
  }
  while (v23);
LABEL_36:
  v24 = 0;
  if (a3)
  {
    v25 = a3;
    do
    {
      v25 = sub_22E676A38(*(_QWORD *)(a1 + 8), v25);
      ++v24;
    }
    while (v25);
  }
  v26 = v4;
  v27 = a3;
  if (!sub_22E670F58(*(_QWORD *)(a1 + 8), v4, a3))
  {
    v28 = v24;
    do
    {
      if (v24 >= v6)
      {
        a3 = sub_22E676A38(*(_QWORD *)(a1 + 8), v27);
        v28 = v24 - 1;
      }
      if (v6 >= v24)
      {
        v29 = sub_22E676A38(*(_QWORD *)(a1 + 8), v26);
        v4 = sub_22E675B3C(a1, v29);
        --v6;
      }
      v26 = v4;
      v27 = a3;
      v24 = v28;
    }
    while (!sub_22E670F58(*(_QWORD *)(a1 + 8), v4, a3));
  }
  v30 = sub_22E675B3C(a1, v26);
  v31 = 0;
  v32 = 0;
  if ((v30 & 0x80000000) == 0 && (a3 & 0x80000000) == 0)
  {
    v33 = v30;
    if (sub_22E670F58(*(_QWORD *)(a1 + 8), v30, v27)
      && ((sub_22E6778F0(v35, *(_QWORD *)(a1 + 8), v33, v27), v35[0] < v36) || v35[0] == v36 && v35[1] <= v37))
    {
      v32 = v33 & 0xFFFFFF00 | (unint64_t)(v27 << 32);
      v31 = v33;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
  }
  return v32 | v31;
}

void sub_22E677854(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;

  if (a2 != a3)
  {
    sub_22E675C90(a1, a2);
    v8 = sub_22E673CAC(a1, a4, a2 | 0x100000000, a3 | 0x100000000, 0, 0);
    *(_BYTE *)(*(_QWORD *)(a1 + 1592) - 4) = 1;
    sub_22E675C90(a1, a3);
    sub_22E675718(a1, v8);
  }
}

_DWORD *sub_22E6778F0(_DWORD *a1, uint64_t a2, int a3, int a4)
{
  *a1 = sub_22F423C68(a2, a3, 0);
  a1[1] = sub_22F423BA4(a2, a3, 0);
  a1[2] = sub_22F423C68(a2, a4, 0);
  a1[3] = sub_22F423BA4(a2, a4, 0);
  return a1;
}

unint64_t sub_22E677974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t result;

  v4 = *(_QWORD *)(a1 + 1592);
  v5 = sub_22E673AA0(a1, a2);
  sub_22E675C90(a1, v5);
  if (!*(_BYTE *)(v4 - 16))
  {
    *(_DWORD *)(v4 - 20) = v5;
    *(_BYTE *)(v4 - 16) = 1;
  }
  v6 = *(_QWORD *)(a1 + 1592);
  v7 = sub_22E673C44(a1, a2);
  if (!*(_BYTE *)(v6 - 8))
  {
    *(_DWORD *)(v6 - 12) = v7;
    *(_BYTE *)(v6 - 8) = 1;
  }
  result = sub_22E673CAC(a1, 0, 0, 0, 0, 0);
  *(_BYTE *)(a1 + 1660) = 1;
  return result;
}

uint64_t sub_22E677A10(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(unsigned int *)(v1 + 8);
  }
  v3 = (_QWORD *)(*(_QWORD *)v1 + 16 * v2);
  *v3 = 0;
  v3[1] = 0;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

_DWORD *sub_22E677A6C(_DWORD *result, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  result[414] = a2;
  if (*(_BYTE *)(*((_QWORD *)result + 199) - 8))
  {
    v2 = result;
    result = sub_22E676C9C((uint64_t)result, a2);
    if (v2[414] == (_DWORD)result)
    {
      result = sub_22E676F30(*((_QWORD *)v2 + 1), result);
      v3 = *((_QWORD *)v2 + 195);
      v4 = *((_QWORD *)v2 + 194);
      if (v3 != v4)
      {
        v5 = v2[414];
        while (*(_DWORD *)(v3 - 20) != (_DWORD)result
             || *(_DWORD *)(v3 - 12) != v5
             || *(unsigned __int8 *)(v3 - 24) != *(unsigned __int8 *)(*((_QWORD *)v2 + 199) - 24))
        {
          v3 -= 40;
          if (v3 == v4)
            return result;
        }
        result = sub_22E676A38(*((_QWORD *)v2 + 1), v5);
        v2[414] = (_DWORD)result;
      }
    }
  }
  return result;
}

uint64_t sub_22E677B14(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v15;

  v4 = *(_QWORD *)(a1 + 1592);
  v5 = sub_22E673AA0(a1, (uint64_t)a2);
  sub_22E675C90(a1, v5);
  if (!*(_BYTE *)(v4 - 16))
  {
    *(_DWORD *)(v4 - 20) = v5;
    *(_BYTE *)(v4 - 16) = 1;
  }
  v6 = *(_QWORD *)(a1 + 1592);
  v15 = a2;
  sub_22E65B0E8(*(uint64_t **)(a1 + 1576), &v15);
  v7 = llvm::coverage::CounterExpressionBuilder::add();
  if (*(_BYTE *)(v6 - 16) && (v8 = *(_DWORD *)(v6 - 20), v8 == sub_22E673AA0(a1, (uint64_t)a2)))
  {
    *(_QWORD *)(v6 - 40) = v7;
  }
  else
  {
    v9 = sub_22E673AA0(a1, (uint64_t)a2);
    sub_22E673CAC(a1, v7, v9 | 0x100000000, 0, 0, 0);
  }
  *(_QWORD *)(a1 + 1664) = v7;
  if (*(_BYTE *)a2 != 98)
    goto LABEL_13;
  v10 = a2 + 12;
  sub_22E673E48(a1, *((_QWORD *)a2 + 3));
  v11 = *a2;
  if ((v11 & 0x100) != 0)
  {
    v12 = *(_QWORD *)&v10[4 * ((v11 >> 8) & 1)];
    if (v12)
    {
      sub_22E673E48(a1, v12);
      LOBYTE(v11) = *(_BYTE *)a2;
    }
  }
  if (v11 == 98)
    v13 = &v10[4 * (((unint64_t)*a2 >> 8) & 1) + 4];
  else
LABEL_13:
    v13 = a2 + 12;
  return sub_22E673E48(a1, *(_QWORD *)v13);
}

void sub_22E677C74(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;

  v4 = *(_QWORD *)(a1 + 1592);
  v5 = sub_22E673AA0(a1, (uint64_t)a2);
  sub_22E675C90(a1, v5);
  if (!*(_BYTE *)(v4 - 16))
  {
    *(_DWORD *)(v4 - 20) = v5;
    *(_BYTE *)(v4 - 16) = 1;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1592) - 40);
  v29 = a2;
  v7 = ((unint64_t)*((unsigned int *)sub_22E65B0E8(*(uint64_t **)(a1 + 1576), &v29) + 2) << 32) | 1;
  v8 = 32;
  if (*a2 == 103)
    v8 = 24;
  sub_22E673B04(a1, v6, *(_QWORD *)&a2[v8], 1);
  v9 = *a2;
  if (v9 == 102)
    goto LABEL_17;
  v10 = *((_DWORD *)a2 + 4);
  v11 = v9 == 103;
  v12 = 40;
  if (v11)
    v12 = 32;
  v13 = sub_22E673AA0(a1, *(_QWORD *)&a2[v12]);
  v14 = sub_22E677524(a1, v10, v13);
  if (v15)
    sub_22E677854(a1, v14, HIDWORD(v14), v7);
  v16 = (uint64_t *)(a2 + 40);
  v17 = 40;
  if (*a2 == 103)
    v17 = 32;
  v18 = *(_QWORD *)(a1 + 1592);
  v19 = sub_22E673AA0(a1, *(_QWORD *)&a2[v17]);
  sub_22E675C90(a1, v19);
  if (!*(_BYTE *)(v18 - 16))
  {
    *(_DWORD *)(v18 - 20) = v19;
    *(_BYTE *)(v18 - 16) = 1;
  }
  v20 = 40;
  if (*a2 == 103)
    v20 = 32;
  sub_22E673B04(a1, v7, *(_QWORD *)&a2[v20], 1);
  if (*a2 != 103)
LABEL_17:
    v16 = (uint64_t *)(a2 + 48);
  v21 = *v16;
  v22 = *(_QWORD *)(a1 + 1592);
  v23 = sub_22E673AA0(a1, v21);
  sub_22E675C90(a1, v23);
  if (!*(_BYTE *)(v22 - 16))
  {
    *(_DWORD *)(v22 - 20) = v23;
    *(_BYTE *)(v22 - 16) = 1;
  }
  v24 = llvm::coverage::CounterExpressionBuilder::subtract();
  v25 = 48;
  if (*a2 == 103)
    v25 = 40;
  sub_22E673B04(a1, v24, *(_QWORD *)&a2[v25], 1);
  v26 = 32;
  if (*a2 == 103)
    v26 = 24;
  v27 = *(unsigned __int8 **)&a2[v26];
  v28 = llvm::coverage::CounterExpressionBuilder::subtract();
  sub_22E676918(a1, v27, v7, v28);
}

void sub_22E677EBC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;

  v9 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD **)a1;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    if (v15 > 0x666666666666666)
      sub_22E3B3F8C();
    v16 = 5 * v15;
    v17 = (char *)operator new(40 * v15);
    v18 = &v17[40 * v12];
    *(_QWORD *)v18 = a2;
    v18[8] = 0;
    v18[16] = 0;
    *(_QWORD *)(v18 + 20) = a3 | 0x100000000;
    *(_QWORD *)(v18 + 28) = a4 | 0x100000000;
    v18[36] = 0;
    v10 = v18 + 40;
    if (v9 == v11)
    {
      v21 = &v17[40 * v12];
    }
    else
    {
      do
      {
        v19 = *(_OWORD *)(v9 - 5);
        v20 = *(_OWORD *)(v9 - 3);
        v21 = v18 - 40;
        *(_QWORD *)(v18 - 11) = *(_QWORD *)((char *)v9 - 11);
        *(_OWORD *)(v18 - 24) = v20;
        *(_OWORD *)(v18 - 40) = v19;
        v9 -= 5;
        v18 -= 40;
      }
      while (v9 != v11);
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = &v17[8 * v16];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v9 = a2;
    *((_BYTE *)v9 + 8) = 0;
    *((_BYTE *)v9 + 16) = 0;
    *(_QWORD *)((char *)v9 + 20) = a3 | 0x100000000;
    *(_QWORD *)((char *)v9 + 28) = a4 | 0x100000000;
    *((_BYTE *)v9 + 36) = 0;
    v10 = (char *)(v9 + 5);
  }
  *(_QWORD *)(a1 + 8) = v10;
}

void sub_22E678038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  unsigned int v28;
  uint64_t i;
  uint64_t v30;
  const std::nothrow_t *v31;
  unint64_t v32;
  _QWORD *v33;
  BOOL v34;
  int *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  _DWORD *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int v50;
  _DWORD *v51;
  int v52;
  unint64_t v53;
  void *v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[64];
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v55 = (_DWORD *)(a1 + 24);
  sub_22F2A0064((_DWORD *)(a1 + 24));
  v61 = v63;
  v62 = 0x800000000;
  v65 = 0;
  v66 = 0;
  v64 = (uint64_t *)&v65;
  v58 = v60;
  v59 = 0x800000000;
  v4 = *(_QWORD *)(a1 + 1552);
  v5 = *(_QWORD *)(a1 + 1560);
  v56 = a2;
  if (v4 == v5)
  {
    v6 = 0;
    v7 = v60;
    v8 = v60;
    goto LABEL_57;
  }
  do
  {
    v9 = *(unsigned int *)(v4 + 20);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_DWORD *)(v10 + 304);
    v12 = v11 + 1;
    if (v11 + 1 > 1)
    {
      if ((v11 & 0x80000000) != 0)
      {
        v14 = -2 - v11;
        if (((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-2 - v11) >> 6)) >> (-2 - v11)) & 1) != 0)
          v13 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v14);
        else
          v13 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v14, 0);
      }
      else
      {
        v13 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v11);
      }
    }
    else
    {
      v13 = *(_DWORD **)(v10 + 184);
    }
    if ((*v13 & 0x7FFFFFFFu) <= (v9 & 0x7FFFFFFF)
      && (v11 == -2
       || (v12 != *(_DWORD *)(v10 + 192)
         ? ((v12 & 0x80000000) != 0
          ? ((v17 = -3 - v11,
              ((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-3 - v11) >> 6)) >> (-3 - v11)) & 1) == 0)
           ? (v16 = (_DWORD *)sub_22F1E1134(v10, v17, 0))
           : (v16 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v17)))
          : (v16 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v12)),
            v15 = *v16 & 0x7FFFFFFF)
         : (v15 = *(_DWORD *)(v10 + 216)),
           v15 > (v9 & 0x7FFFFFFF))))
    {
      v18 = *(_DWORD *)(v10 + 304);
    }
    else
    {
      v18 = sub_22F1E1EE8(v10, v9 & 0x7FFFFFFF);
    }
    if (v66)
    {
      if ((sub_22E678A1C(&v64, v18, v18) & 1) == 0)
        goto LABEL_48;
    }
    else
    {
      v19 = v61;
      v20 = v62;
      if (!(_DWORD)v62)
        goto LABEL_31;
      v21 = 4 * v62;
      v22 = v61;
      while (*v22 != v18)
      {
        ++v22;
        v21 -= 4;
        if (!v21)
          goto LABEL_30;
      }
      if (v21)
        goto LABEL_48;
LABEL_30:
      if (v62 >= 8)
      {
        do
        {
          v23 = *((_DWORD *)v61 + v20 - 1);
          sub_22E678A1C(&v64, v23, v23);
          LODWORD(v20) = v62 - 1;
          LODWORD(v62) = v62 - 1;
        }
        while ((_DWORD)v62);
        sub_22E678A1C(&v64, v18, v18);
      }
      else
      {
LABEL_31:
        if (v62 >= HIDWORD(v62))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v61;
          v20 = v62;
        }
        v19[v20] = v18;
        LODWORD(v62) = v62 + 1;
      }
    }
    v24 = *(_QWORD **)(a1 + 8);
    v25 = v9;
    if ((v9 & 0x80000000) != 0)
      v25 = sub_22F1E238C(*(_QWORD **)(a1 + 8), v9);
    v26 = sub_22F1E361C(v24, v25);
    if (v26 == 3 || v26 == 0)
    {
      v28 = sub_22E676A38(*(_QWORD *)(a1 + 8), v9);
      for (i = 0; v28; v28 = sub_22E676A38(*(_QWORD *)(a1 + 8), v28))
        i = (i + 1);
      v30 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v59;
      }
      *((_QWORD *)v58 + v30) = v9 | (i << 32);
      LODWORD(v59) = v59 + 1;
    }
LABEL_48:
    v4 += 40;
  }
  while (v4 != v5);
  v8 = (char *)v58;
  v6 = v59;
  v7 = (char *)v58 + 8 * v59;
  if ((_DWORD)v59)
  {
    v31 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v32 = v59;
    a2 = v56;
    while (1)
    {
      v33 = operator new(8 * v32, v31);
      if (v33)
        break;
      v34 = v32 > 1;
      v32 >>= 1;
      if (!v34)
        goto LABEL_57;
    }
    v54 = v33;
    sub_22E678ADC((char *)v58, v7, v59, v33, v32);
    operator delete(v54);
  }
  else
  {
    v6 = 0;
    a2 = v56;
LABEL_57:
    sub_22E678ADC(v8, v7, v6, 0, 0);
  }
  v35 = (int *)v58;
  if ((_DWORD)v59)
  {
    v36 = 8 * v59;
    do
    {
      v37 = *v35;
      v38 = sub_22E678830(*(_QWORD *)(a1 + 8), *v35);
      v39 = sub_22E6155EC(*(_QWORD **)(a1 + 8), v38);
      if (v39)
      {
        v40 = v39;
        v41 = *(_DWORD *)(a2 + 8);
        v42 = *(_QWORD *)(a1 + 8);
        v43 = *(_DWORD *)(v42 + 304);
        v44 = v43 + 1;
        if (v43 + 1 > 1)
        {
          if ((v43 & 0x80000000) != 0)
          {
            v46 = -2 - v43;
            if (((*(_QWORD *)(*(_QWORD *)(v42 + 224) + 8 * ((-2 - v43) >> 6)) >> (-2 - v43)) & 1) != 0)
              v45 = (_DWORD *)(*(_QWORD *)(v42 + 200) + 24 * v46);
            else
              v45 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v46, 0);
          }
          else
          {
            v45 = (_DWORD *)(*(_QWORD *)(v42 + 184) + 24 * v43);
          }
        }
        else
        {
          v45 = *(_DWORD **)(v42 + 184);
        }
        if ((*v45 & 0x7FFFFFFFu) <= (v37 & 0x7FFFFFFFu)
          && (v43 == -2
           || (v44 != *(_DWORD *)(v42 + 192)
             ? ((v44 & 0x80000000) != 0
              ? ((v50 = -3 - v43,
                  ((*(_QWORD *)(*(_QWORD *)(v42 + 224) + 8 * ((-3 - v43) >> 6)) >> (-3 - v43)) & 1) == 0)
               ? (v49 = (_DWORD *)sub_22F1E1134(v42, v50, 0))
               : (v49 = (_DWORD *)(*(_QWORD *)(v42 + 200) + 24 * v50)))
              : (v49 = (_DWORD *)(*(_QWORD *)(v42 + 184) + 24 * v44)),
                v48 = *v49 & 0x7FFFFFFF)
             : (v48 = *(_DWORD *)(v42 + 216)),
               v48 > (v37 & 0x7FFFFFFFu))))
        {
          v47 = *(_DWORD *)(v42 + 304);
        }
        else
        {
          v47 = sub_22F1E1EE8(v42, v37 & 0x7FFFFFFF);
        }
        v57 = v47;
        v51 = sub_22F2A01A8(v55, &v57);
        v51[1] = v41;
        v51[2] = v37;
        v52 = sub_22F29FDEC(*(_QWORD *)a1, v40);
        a2 = v56;
        v53 = *(unsigned int *)(v56 + 8);
        if (v53 >= *(unsigned int *)(v56 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = *(unsigned int *)(v56 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v56 + 4 * v53) = v52;
        ++*(_DWORD *)(v56 + 8);
      }
      v35 += 2;
      v36 -= 8;
    }
    while (v36);
    v35 = (int *)v58;
  }
  if (v35 != (int *)v60)
    free(v35);
  sub_22F258024(v65);
  if (v61 != v63)
    free(v61);
}

unint64_t sub_22E67863C(unint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;

  v2 = *(unint64_t **)(result + 1552);
  v3 = *(unint64_t **)(result + 1560);
  if (v2 != v3)
  {
    v5 = result;
    v6 = result + 128;
    do
    {
      v7 = *((_DWORD *)v2 + 5);
      v8 = *(_QWORD **)(v5 + 8);
      v9 = v7;
      if ((v7 & 0x80000000) != 0)
        v9 = sub_22F1E238C(*(_QWORD **)(v5 + 8), *((_DWORD *)v2 + 5));
      result = (unint64_t)sub_22F1E361C(v8, v9);
      if ((_DWORD)result == 3 || (_DWORD)result == 0)
      {
        result = sub_22E679530(v5, v7);
        if (HIDWORD(result))
        {
          v11 = result;
          v12 = *((_DWORD *)v2 + 7);
          if (*(_QWORD *)(a2 + 96))
          {
            v13 = *(uint64_t **)(a2 + 88);
            if (v13)
            {
              while (1)
              {
                v14 = *((_DWORD *)v13 + 7);
                if (v14 <= v7)
                {
                  if (v14 < v7)
                    goto LABEL_17;
                  v15 = *((_DWORD *)v13 + 8);
                  if (v15 <= v12)
                    break;
                }
LABEL_18:
                v13 = (uint64_t *)*v13;
                if (!v13)
                  goto LABEL_29;
              }
              if (v15 >= v12)
                goto LABEL_35;
LABEL_17:
              ++v13;
              goto LABEL_18;
            }
          }
          else
          {
            v16 = *(unsigned int *)(a2 + 8);
            if ((_DWORD)v16)
            {
              v17 = 8 * v16;
              v18 = (_DWORD *)(*(_QWORD *)a2 + 4);
              while (*(v18 - 1) != v7 || *v18 != v12)
              {
                v18 += 2;
                v17 -= 8;
                if (!v17)
                  goto LABEL_29;
              }
              if (v17)
                goto LABEL_35;
            }
          }
LABEL_29:
          sub_22E6778F0(&v28, *(_QWORD *)(v5 + 8), v7, v12);
          if (*((_BYTE *)v2 + 36))
          {
            v23 = *v2;
            v24 = v11;
            v25 = 0;
            *(_QWORD *)&v26 = v28;
            *((_QWORD *)&v26 + 1) = *((_QWORD *)&v28 + 1) | 0x8000000000000000;
            v27 = 3;
          }
          else if (*((_BYTE *)v2 + 16))
          {
            v23 = *(_OWORD *)v2;
            v24 = v11;
            v25 = 0;
            v26 = v28;
            v27 = 4;
          }
          else
          {
            v23 = *v2;
            v24 = v11;
            v25 = 0;
            v26 = v28;
            v27 = 0;
          }
          result = sub_22E679708(v6, (unint64_t)&v23);
          v20 = (_OWORD *)(*(_QWORD *)(v5 + 128) + 44 * *(unsigned int *)(v5 + 136));
          v21 = *(_OWORD *)(result + 28);
          v22 = *(_OWORD *)(result + 16);
          *v20 = *(_OWORD *)result;
          v20[1] = v22;
          *(_OWORD *)((char *)v20 + 28) = v21;
          ++*(_DWORD *)(v5 + 136);
        }
      }
LABEL_35:
      v2 += 5;
    }
    while (v2 != v3);
  }
  return result;
}

unint64_t sub_22E678830(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t result;
  BOOL v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  v4 = a2 & 0x7FFFFFFF;
  v5 = *(_DWORD *)(a1 + 304);
  v6 = v5 + 1;
  if (v5 + 1 > 1)
  {
    if ((v5 & 0x80000000) != 0)
    {
      v8 = -2 - v5;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v5) >> 6)) >> (-2 - v5)) & 1) != 0)
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v8);
      else
        v7 = (_DWORD *)sub_22F1E1134(a1, v8, 0);
    }
    else
    {
      v7 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v5);
    }
  }
  else
  {
    v7 = *(_DWORD **)(a1 + 184);
  }
  if ((*v7 & 0x7FFFFFFFu) <= v4
    && (v5 == -2
     || (v6 != *(_DWORD *)(a1 + 192)
       ? ((v6 & 0x80000000) != 0
        ? ((v12 = -3 - v5,
            ((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - v5) >> 6)) >> (-3 - v5)) & 1) == 0)
         ? (v11 = (_DWORD *)sub_22F1E1134(a1, v12, 0))
         : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v12)))
        : (v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v6)),
          v10 = *v11 & 0x7FFFFFFF)
       : (v10 = *(_DWORD *)(a1 + 216)),
         v10 > v4)))
  {
    v9 = *(_DWORD *)(a1 + 304);
  }
  else
  {
    v9 = sub_22F1E1EE8(a1, v4);
  }
  v18 = 0;
  if (v9 + 1 <= 1)
    return 0;
  if ((v9 & 0x80000000) != 0)
  {
    v16 = -2 - v9;
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - v9) >> 6)) >> (-2 - v9)) & 1) != 0)
    {
      v14 = 0;
      v15 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v16);
    }
    else
    {
      v15 = (_DWORD *)sub_22F1E1134(a1, v16, &v18);
      v14 = v18 != 0;
    }
  }
  else
  {
    v14 = 0;
    v15 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v9);
  }
  result = 0;
  if (!v14 && v15)
  {
    v17 = v4 - (*v15 & 0x7FFFFFFF);
    if (a2 < 0)
      return sub_22F1E2704((_QWORD *)a1, v15, v17);
    else
      return v9 | (unint64_t)(v17 << 32);
  }
  return result;
}

uint64_t sub_22E678A1C(uint64_t **a1, int a2, int a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
    }
    while (v5);
    v6 = v7 + 1;
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_10:
  v9 = operator new(0x20uLL);
  v9[7] = a3;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v7;
  *v6 = (uint64_t *)v9;
  v10 = (uint64_t *)**a1;
  if (v10)
  {
    *a1 = v10;
    v11 = *v6;
  }
  else
  {
    v11 = (uint64_t *)v9;
  }
  sub_22E49FD00(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

char *sub_22E678ADC(char *result, char *a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  char *v6;
  int v7;
  int v8;
  _DWORD *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _DWORD *v37;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 1) < *((_DWORD *)result + 1))
      {
        v7 = *(_DWORD *)result;
        *(_DWORD *)result = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v7;
        v8 = *((_DWORD *)result + 1);
        *((_DWORD *)result + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        v15 = result + 8;
        if (result + 8 != a2)
        {
          v16 = 0;
          v17 = result;
          do
          {
            v18 = *((_DWORD *)v17 + 3);
            v19 = *((_DWORD *)v17 + 1);
            v17 = v15;
            if (v18 < v19)
            {
              v20 = *(_DWORD *)v15;
              v21 = *((_DWORD *)v17 + 1);
              v22 = v16;
              while (1)
              {
                v23 = &result[v22];
                v24 = *(_DWORD *)&result[v22 + 4];
                *((_DWORD *)v23 + 2) = *(_DWORD *)&result[v22];
                *((_DWORD *)v23 + 3) = v24;
                if (!v22)
                  break;
                v22 -= 8;
                if (*((_DWORD *)v23 - 1) <= v21)
                {
                  v25 = &result[v22 + 8];
                  goto LABEL_18;
                }
              }
              v25 = result;
LABEL_18:
              *(_DWORD *)v25 = v20;
              *((_DWORD *)v25 + 1) = v21;
            }
            v15 = v17 + 8;
            v16 += 8;
          }
          while (v17 + 8 != a2);
        }
      }
    }
    else
    {
      v11 = a4;
      v12 = a3 >> 1;
      v13 = &result[8 * (a3 >> 1)];
      v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_22E678D34((uint64_t)result, v13, v14, a4);
        v26 = &v11[2 * v12];
        result = (char *)sub_22E678D34((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
        v27 = &v11[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          v29 = v28[1];
          v30 = v11[1];
          if (v29 < v30)
            v31 = v28;
          else
            v31 = v11;
          if (v29 < v30)
            v28 += 2;
          else
            v11 += 2;
          *(_DWORD *)v6 = *v31;
          *((_DWORD *)v6 + 1) = v31[1];
          v6 += 8;
          if (v11 == (_DWORD *)v26)
          {
            if (v28 != v27)
            {
              v32 = 0;
              do
              {
                v33 = &v28[v32];
                v34 = &v6[v32 * 4];
                *(_DWORD *)v34 = v28[v32];
                *((_DWORD *)v34 + 1) = v28[v32 + 1];
                v32 += 2;
              }
              while (v33 + 2 != v27);
            }
            return result;
          }
        }
        if (v11 != (_DWORD *)v26)
        {
          v35 = 0;
          do
          {
            v36 = &v6[v35 * 4];
            v37 = &v11[v35];
            *(_DWORD *)v36 = v11[v35];
            *((_DWORD *)v36 + 1) = v11[v35 + 1];
            v35 += 2;
          }
          while (v37 + 2 != (_DWORD *)v26);
        }
      }
      else
      {
        sub_22E678ADC(result, v13, v14, a4, a5);
        sub_22E678ADC(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v11, a5);
        return sub_22E678F38(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_22E678D34(uint64_t result, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _DWORD *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;

  if (a3)
  {
    v4 = a4;
    v6 = (_DWORD *)result;
    if (a3 == 1)
    {
LABEL_10:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(result + 4);
      v10 = v8 >= v9;
      if (v8 >= v9)
        v11 = (_QWORD *)result;
      else
        v11 = a2 - 2;
      *a4 = *v11;
      v4 = a4 + 1;
      if (v10)
        v6 = a2 - 2;
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_22E678ADC(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_22E678ADC(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = &v6[2 * (a3 >> 1)];
      while (v21 != a2)
      {
        v22 = v21;
        v23 = v21[1];
        v24 = v6[1];
        if (v23 >= v24)
          v25 = v6;
        else
          v25 = v21;
        v21 += 2 * (v23 < v24);
        v6 += 2 * (v23 >= v24);
        *v4++ = *v25;
        if (v6 == (_DWORD *)v20)
        {
          if (v21 != a2)
          {
            v26 = 0;
            v27 = &v22[2 * (v23 < v24)];
            do
            {
              v4[v26 / 2] = *(_QWORD *)&v27[v26];
              v26 += 2;
            }
            while (&v27[v26] != a2);
          }
          return result;
        }
      }
      if (v6 != (_DWORD *)v20)
      {
        v28 = 0;
        do
        {
          v4[v28 / 2] = *(_QWORD *)&v6[v28];
          v28 += 2;
        }
        while (&v6[v28] != (_DWORD *)v20);
      }
    }
    else if ((_DWORD *)result != a2)
    {
      v12 = (_QWORD *)(result + 8);
      *a4 = *(_QWORD *)result;
      if ((_DWORD *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v12;
          v16 = v14 + 1;
          if (v6[3] >= *((_DWORD *)v14 + 1))
          {
            *v16 = *v12;
          }
          else
          {
            v14[1] = *v14;
            v17 = a4;
            if (v14 != a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = (_DWORD *)((char *)a4 + v18);
                v19 = *(_DWORD *)((char *)a4 + v18 - 4);
                if (v6[3] >= v19)
                  break;
                *v17 = *(v17 - 2);
                v17[1] = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *v15;
            v17[1] = v6[3];
          }
          v12 = v15 + 2;
          v13 += 8;
          v14 = v16;
          v6 = v15;
        }
        while (v15 + 2 != a2);
      }
    }
  }
  return result;
}

char *sub_22E678F38(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  char *i;
  int v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _DWORD *v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  _DWORD *v66;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = -a4;
      while (1)
      {
        v11 = &result[v9];
        if (*((_DWORD *)a2 + 1) < *(_DWORD *)&result[v9 + 4])
          break;
        v9 += 8;
        v51 = __CFADD__(v10++, 1);
        if (v51)
          return result;
      }
      v12 = -v10;
      if (-v10 >= a5)
      {
        if (v10 == -1)
        {
          v59 = &result[v9];
          v60 = *(_DWORD *)&result[v9];
          *(_DWORD *)v59 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v60;
          v61 = *((_DWORD *)v59 + 1);
          *((_DWORD *)v59 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v61;
          return result;
        }
        if (v10 > 0)
          v12 = 1 - v10;
        v22 = v12 >> 1;
        v16 = &result[8 * (v12 >> 1) + v9];
        v15 = a3;
        if (a3 != a2)
        {
          v23 = (a3 - a2) >> 3;
          v15 = a2;
          do
          {
            v24 = v23 >> 1;
            v25 = &v15[8 * (v23 >> 1)];
            v26 = *((_DWORD *)v25 + 1);
            v27 = v25 + 8;
            v23 += ~(v23 >> 1);
            if (v26 < *((_DWORD *)v16 + 1))
              v15 = v27;
            else
              v23 = v24;
          }
          while (v23);
        }
        v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0)
          v13 = a5;
        else
          v13 = a5 + 1;
        v14 = v13 >> 1;
        v15 = &a2[8 * (v13 >> 1)];
        v16 = a2;
        if (v11 != a2)
        {
          v17 = (a2 - result - v9) >> 3;
          v16 = &result[v9];
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[8 * (v17 >> 1)];
            v20 = *((_DWORD *)v19 + 1);
            v21 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*((_DWORD *)v15 + 1) < v20)
              v17 = v18;
            else
              v16 = v21;
          }
          while (v17);
        }
        v22 = (v16 - result - v9) >> 3;
      }
      v28 = v15;
      if (v16 != a2)
      {
        v28 = v16;
        if (a2 != v15)
        {
          v29 = *(_DWORD *)v16;
          *(_DWORD *)v16 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v29;
          v30 = *((_DWORD *)v16 + 1);
          *((_DWORD *)v16 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v30;
          v28 = v16 + 8;
          for (i = a2 + 8; i != v15; i += 8)
          {
            if (v28 == a2)
              a2 = i;
            v32 = *(_DWORD *)v28;
            *(_DWORD *)v28 = *(_DWORD *)i;
            *(_DWORD *)i = v32;
            v33 = *((_DWORD *)v28 + 1);
            *((_DWORD *)v28 + 1) = *((_DWORD *)i + 1);
            *((_DWORD *)i + 1) = v33;
            v28 += 8;
          }
          if (v28 == a2)
          {
            v28 = a2;
          }
          else
          {
            v34 = v28;
            v35 = a2;
            do
            {
              while (1)
              {
                v36 = *(_DWORD *)v34;
                *(_DWORD *)v34 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v36;
                v37 = *((_DWORD *)v34 + 1);
                *((_DWORD *)v34 + 1) = *((_DWORD *)a2 + 1);
                *((_DWORD *)a2 + 1) = v37;
                v34 += 8;
                a2 += 8;
                if (a2 == v15)
                  break;
                if (v34 == v35)
                  v35 = a2;
              }
              a2 = v35;
            }
            while (v34 != v35);
          }
        }
      }
      a4 = -(v22 + v10);
      v38 = a5 - v14;
      if (v22 + v14 >= a5 - (v22 + v14) - v10)
      {
        v43 = v15;
        v44 = a6;
        sub_22E678F38(v28, v43, a3, a4, a5 - v14, a6, a7);
        a6 = v44;
        v15 = v16;
        v38 = v14;
        a4 = v22;
        a3 = v28;
      }
      else
      {
        v39 = v11;
        v40 = a3;
        v41 = v14;
        v42 = a6;
        sub_22E678F38(v39, v16, v28, v22, v41, a6, a7);
        a3 = v40;
        a6 = v42;
        v11 = v28;
      }
      a5 = v38;
      result = v11;
      a2 = v15;
      if (!v38)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v53 = 0;
        do
        {
          *(_QWORD *)&a6[v53] = *(_QWORD *)&result[v53 * 4];
          v53 += 2;
        }
        while (&result[v53 * 4] != a2);
        if (v53 * 4)
        {
          v54 = &a6[v53];
          v55 = (uint64_t)&a6[v53 - 2];
          while (a2 != a3)
          {
            v56 = *((_DWORD *)a2 + 1);
            v57 = a6[1];
            if (v56 < v57)
              v58 = a2;
            else
              v58 = (char *)a6;
            if (v56 < v57)
              a2 += 8;
            else
              a6 += 2;
            *(_DWORD *)result = *(_DWORD *)v58;
            *((_DWORD *)result + 1) = *((_DWORD *)v58 + 1);
            result += 8;
            if (v54 == a6)
              return result;
          }
          if (v54 != a6)
          {
            v64 = 0;
            do
            {
              v65 = &result[v64 * 4];
              v66 = &a6[v64];
              *(_DWORD *)v65 = a6[v64];
              *((_DWORD *)v65 + 1) = a6[v64 + 1];
              v64 += 2;
            }
            while ((_DWORD *)v55 != v66);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v45 = 0;
      do
      {
        *(_QWORD *)&a6[v45] = *(_QWORD *)&a2[v45 * 4];
        v45 += 2;
      }
      while (&a2[v45 * 4] != a3);
      if (v45 * 4)
      {
        v46 = &a6[v45];
        v47 = a3 - 4;
        while (a2 != result)
        {
          v48 = (char *)(v46 - 1);
          v49 = *(v46 - 1);
          v50 = *((_DWORD *)a2 - 1);
          v51 = v49 >= v50;
          if (v49 < v50)
            v52 = a2 - 8;
          else
            v52 = (char *)(v46 - 2);
          if (v51)
          {
            v46 -= 2;
          }
          else
          {
            v48 = a2 - 4;
            a2 -= 8;
          }
          *((_DWORD *)v47 - 1) = *(_DWORD *)v52;
          *(_DWORD *)v47 = *(_DWORD *)v48;
          v47 -= 8;
          if (v46 == a6)
            return result;
        }
        if (v46 != a6)
        {
          v62 = 0;
          do
          {
            v63 = &v47[v62 * 4];
            *((_DWORD *)v63 - 1) = v46[v62 - 2];
            *(_DWORD *)v63 = v46[v62 - 1];
            v62 -= 2;
          }
          while (&v46[v62] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E67939C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[96];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v15;
    do
    {
      v10 = *(_DWORD *)(a1 + v8 + 8);
      if ((v10 + 1) >= 2)
      {
        *(_DWORD *)v9 = v10;
        *(_QWORD *)(v9 + 4) = *(_QWORD *)(a1 + v8 + 12);
        v9 += 12;
      }
      v8 += 12;
    }
    while (v8 != 96);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](12 * a2, 4);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2A036C(a1, (uint64_t)v15, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](12 * a2, 4);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v14 = 3 * v7;
    sub_22F2A036C(a1, (uint64_t)v6, (uint64_t)v6 + 4 * v14);
    return llvm::deallocate_buffer(v6, (void *)(4 * v14));
  }
}

uint64_t sub_22E679530(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v3 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 & 0x7FFFFFFF;
  v6 = *(_DWORD *)(v4 + 304);
  v7 = v6 + 1;
  if (v6 + 1 > 1)
  {
    if ((v6 & 0x80000000) != 0)
    {
      v9 = -2 - v6;
      if (((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-2 - v6) >> 6)) >> (-2 - v6)) & 1) != 0)
        v8 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * v9);
      else
        v8 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 8), v9, 0);
    }
    else
    {
      v8 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v6);
    }
  }
  else
  {
    v8 = *(_DWORD **)(v4 + 184);
  }
  if ((*v8 & 0x7FFFFFFFu) <= v5
    && (v6 == -2
     || (v7 != *(_DWORD *)(v4 + 192)
       ? ((v7 & 0x80000000) != 0
        ? ((v13 = -3 - v6,
            ((*(_QWORD *)(*(_QWORD *)(v4 + 224) + 8 * ((-3 - v6) >> 6)) >> (-3 - v6)) & 1) == 0)
         ? (v12 = (_DWORD *)sub_22F1E1134(v4, v13, 0))
         : (v12 = (_DWORD *)(*(_QWORD *)(v4 + 200) + 24 * v13)))
        : (v12 = (_DWORD *)(*(_QWORD *)(v4 + 184) + 24 * v7)),
          v11 = *v12 & 0x7FFFFFFF)
       : (v11 = *(_DWORD *)(v4 + 216)),
         v11 > v5)))
  {
    v10 = *(_DWORD *)(v4 + 304);
  }
  else
  {
    v10 = sub_22F1E1EE8(v4, v5);
  }
  v14 = sub_22F2A04B4(v3, v10);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v15 = a1 + 32;
    v16 = 8;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_DWORD *)(a1 + 40);
  }
  if (v15 + 12 * v16 == v14)
    return 0;
  else
    return *(unsigned int *)(v14 + 4) | 0x100000000;
}

uint64_t *sub_22E6796B0(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = *((_DWORD *)v7 + 8);
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

unint64_t sub_22E679708(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 44 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

__n128 sub_22E679780(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr();
  result = *a1;
  xmmword_253E4D2E8 = (__int128)*a1;
  v7 = *a2;
  byte_253E4D348 = **a2;
  byte_253E4D359 = 1;
  byte_253E4D358 = *v7;
  word_253E4D2D2 = (32 * (*a3 & 3)) | word_253E4D2D2 & 0xFF9F;
  return result;
}

uint64_t *sub_22E679804(uint64_t *result, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v3 = *((unsigned __int16 *)a2 + 8);
  v4 = *result;
  *(_DWORD *)(*result + 56) = *a2;
  if (v3 != 2)
  {
    v6 = *(_QWORD *)(v4 + 24);
    v5 = *(_QWORD *)(v4 + 32);
    if (v6 != v5 && !*(_DWORD *)(v5 - 4))
      *(_DWORD *)(v5 - 4) = v2;
  }
  return result;
}

_OWORD *sub_22E67983C(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_22E3B3F8C();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_22E679920(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  BOOL v13;
  _QWORD *v14;
  __int128 *v15;
  __int128 *v16;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(_QWORD **)(v6 + 8) : (_QWORD *)v6;
    if (v8)
    {
      v9 = sub_22E679A94((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = (uint64_t)v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v10 + 2));
          std::string::operator=((std::string *)(v11 + 56), (const std::string *)((char *)v10 + 56));
          sub_22F2A0778((uint64_t)a1, v11);
          if (v9)
            v9 = sub_22E679A94((uint64_t)v9);
          else
            v9 = 0;
          v12 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_22E54B6D0((uint64_t)a1, v8);
      if (v9)
      {
        do
        {
          v14 = v9;
          v9 = (_QWORD *)v9[2];
        }
        while (v9);
        sub_22E54B6D0((uint64_t)a1, v14);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_22F2A0888((uint64_t)a1, a2 + 2);
      v15 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

_QWORD *sub_22E679A94(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void sub_22E679AE8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_22F243B14(a1);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
    }
    else
    {
      v5 = 3 * v2;
      v6 = *(_QWORD *)a1 + 24 * v2 - 1;
      v7 = 24 * a2 - 8 * v5;
      v8 = (char *)v6;
      do
      {
        v9 = *v8;
        v8 -= 24;
        if (v9 < 0)
          operator delete(*(void **)(v6 - 23));
        v6 = (uint64_t)v8;
        v7 += 24;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22E679BBC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 128);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2A0B50(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2A0B50(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E679D38()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Emit emptylines and comment lines as skipped regions (only disable it on test)";
  v4.n128_u64[1] = 78;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_22F2A06D4(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_22E622D38, &qword_253E4D2C8, &dword_22E3A8000);
}

void sub_22E679DA0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[31];

  sub_22E67A2B0((_DWORD *)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    v5 = *(_QWORD **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *(_QWORD **)(a1 + 24);
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = *a2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = *(_QWORD **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
  }
}

void sub_22E679EAC(_QWORD *a1)
{
  uint64_t v2;
  const void ***v3;
  const void ***i;
  uint64_t v5;
  char v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  size_t *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Impl;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[16];
  void *v33;
  __int128 v34;
  _BYTE v35[89];
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39;
  __int128 v40;
  _QWORD v41[34];

  v41[32] = *MEMORY[0x24BDAC8D0];
  v39 = v41;
  v40 = xmmword_22F44E320;
  llvm::sys::fs::current_path();
  llvm::Module::getOrInsertNamedMetadata();
  v33 = (void *)llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  v36 = v38;
  v37 = 0x800000000;
  v2 = a1[1];
  v3 = *(const void ****)(v2 + 40);
  for (i = *(const void ****)(v2 + 48); v3 != i; ++v3)
  {
    v5 = (uint64_t)*v3;
    v6 = *((_BYTE *)*v3 + 23);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = *v3;
    else
      v8 = **v3;
    v9 = v6 & 0x7F;
    if (v7)
      v10 = (size_t)(*v3)[1];
    else
      v10 = v9;
    v33 = v35;
    v34 = xmmword_22F44E320;
    if (v10 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v13 = v33;
      v11 = v34;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = v35;
      if (!v10)
        goto LABEL_11;
    }
    memcpy(&v13[v11], v8, v10);
    v12 = v34;
LABEL_11:
    *(_QWORD *)&v34 = v12 + v10;
    if (!(v12 + v10))
    {
      v14 = *(_QWORD *)(v5 + 88);
      do
      {
        v15 = (size_t *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        if ((v16 & 2) == 0)
          break;
        v14 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v14);
      v19 = *v15;
      v17 = v15 + 4;
      v18 = v19;
      *(_QWORD *)&v34 = 0;
      if (*((_QWORD *)&v34 + 1) < v19)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v20 = v34;
LABEL_17:
        memcpy((char *)v33 + v20, v17, v18);
        v21 = v34;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        if (v18)
          goto LABEL_17;
      }
      *(_QWORD *)&v34 = v21 + v18;
      llvm::sys::fs::make_absolute();
      llvm::sys::path::remove_dots();
    }
    v30 = v32;
    v31 = 0x200000000;
    v22 = llvm::MDString::get();
    v23 = v31;
    if (v31 >= (unint64_t)HIDWORD(v31))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = v31;
    }
    *((_QWORD *)v30 + v23) = v22;
    LODWORD(v31) = v31 + 1;
    sub_22F423904(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 1992), v5, &v28);
    if (v29)
    {
      v24 = llvm::MDString::get();
      v25 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v31;
      }
      *((_QWORD *)v30 + v25) = v24;
      LODWORD(v31) = v31 + 1;
      Impl = llvm::MDTuple::getImpl();
      v27 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v37;
      }
      *((_QWORD *)v36 + v27) = Impl;
      LODWORD(v37) = v37 + 1;
    }
    if (v30 != v32)
      free(v30);
    if (v33 != v35)
      free(v33);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
}

uint64_t sub_22E67A2B0@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22E67A334((uint64_t)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E67A3C8(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * a1[4];
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22E67A334(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_22E67A3C8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E67A478((uint64_t)a1, v7);
  v9 = 0;
  sub_22E67A334((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22E67A478(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E67A538(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E67A538(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22E67A334(v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void sub_22E67A5DC(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  void **v11;
  void *v12[2];
  uint64_t v13;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = MEMORY[0x24BED83D8] + 16;
  v11 = v12;
  llvm::raw_ostream::SetBufferAndMode();
  llvm::raw_ostream::operator<<();
  if (SHIBYTE(v13) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a1, *v11, (unint64_t)v11[1]);
  }
  else
  {
    v2 = *(_OWORD *)v11;
    *(_QWORD *)(a1 + 16) = v11[2];
    *(_OWORD *)a1 = v2;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

llvm::Value *sub_22E67A6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;

  v6 = llvm::FunctionType::get();
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  v8 = sub_22E46BBB8((_QWORD **)(a1 + 280), *(_QWORD *)(*(_QWORD *)(a1 + 288) + 16392), 0, 0, 0, 0, 0, v7, 0, 0, -1);
  return sub_22E4CF82C(a1, v6, (uint64_t)v10, v8, 0, 0, 7);
}

void sub_22E67A744()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  void **v8;
  uint64_t v9;
  llvm::Value *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::Value **v15;
  uint64_t v16;
  unint64_t v17;
  llvm::Value *v18;
  _QWORD *BitCast;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  __int128 v26;
  _QWORD *v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  void **v32;
  uint64_t v33;
  llvm::Value *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  llvm::Constant **v43;
  llvm::Type *v44;
  uint64_t NullValue;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  const char *v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  void **v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD **v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  void *v68[2];
  uint64_t v69;
  int v70;
  void *__p[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::string v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v0 = MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v86 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(v0 + 3808);
  v63 = (_QWORD *)(v0 + 3816);
  if (v2 != (_QWORD *)(v0 + 3816))
  {
    v64 = (_QWORD **)(v0 + 280);
    v61 = (void **)(v0 + 1464);
    do
    {
      v3 = *((_DWORD *)v2 + 8);
      v70 = v3;
      *((_BYTE *)&v80.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v80, "__GLOBAL_init_");
      sub_22E67A5DC((uint64_t)__p);
      if ((SBYTE7(v72) & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((SBYTE7(v72) & 0x80u) == 0)
        v5 = BYTE7(v72) & 0x7F;
      else
        v5 = (std::string::size_type)__p[1];
      v6 = std::string::append(&v80, (const std::string::value_type *)v4, v5);
      v7 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)v68 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v69 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v72) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (v69 >= 0)
        v8 = v68;
      else
        v8 = (void **)v68[0];
      if (v69 >= 0)
        v9 = HIBYTE(v69) & 0x7F;
      else
        v9 = (uint64_t)v68[1];
      v10 = sub_22E67A6A4(v1, (uint64_t)v8, v9);
      sub_22E618EBC((uint64_t)&v80, v1, 0);
      v11 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16392);
      v13 = sub_22E46BBB8(v64, *(_QWORD *)(*(_QWORD *)(v1 + 288) + 16392), 0, 0, 0, 0, 0, v12, 0, 0, -1);
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      __p[0] = &v72;
      __p[1] = (void *)0x1000000000;
      sub_22E61A8FC((uint64_t)&v80, 0, 0, v11, v10, v13, (uint64_t *)__p, 0, (int8x16_t)0, 0);
      if (__p[0] != &v72)
        free(__p[0]);
      v66 = 0;
      v67 = &v80;
      sub_22E48EE24(&v66, 0, 0);
      v15 = (llvm::Value **)(v2 + 5);
      v14 = v2[5];
      if ((v14 & 4) != 0)
      {
        v17 = v14 & 0xFFFFFFFFFFFFFFF8;
        v15 = *(llvm::Value ***)v17;
        v16 = *(_QWORD *)v17 + 8 * *(unsigned int *)(v17 + 8);
      }
      else
      {
        v16 = (uint64_t)&v15[v14 > 7];
      }
      while (v15 != (llvm::Value **)v16)
      {
        v18 = *v15;
        if ((*(_BYTE *)(*(_QWORD *)(v1 + 184) + 2) & 2) != 0)
        {
          if (v18)
            v20 = *((_QWORD *)v18 + 3);
          else
            v20 = 0;
          sub_22E67AF94((uint64_t)&v80, v20, *v15, 0, 0);
        }
        else
        {
          llvm::FunctionType::get();
          llvm::PointerType::get();
          BitCast = (_QWORD *)llvm::ConstantExpr::getBitCast();
          sub_22E4CFECC((uint64_t)&v80, BitCast);
        }
        ++v15;
      }
      sub_22E619DE8((uint64_t)&v80, 0);
      LODWORD(__p[0]) = v3;
      __p[1] = v10;
      *(_QWORD *)&v72 = 0;
      v21 = *(_QWORD *)(v1 + 1472);
      if (v21 < *(_QWORD *)(v1 + 1480))
      {
        v26 = *(_OWORD *)__p;
        *(_QWORD *)(v21 + 16) = v72;
        *(_OWORD *)v21 = v26;
        v22 = (char *)(v21 + 24);
      }
      else
      {
        v22 = sub_22E63BB48(v61, (uint64_t)__p);
      }
      *(_QWORD *)(v1 + 1472) = v22;
      sub_22E48F084(&v66);
      sub_22E619434((uint64_t)&v80);
      if (SHIBYTE(v69) < 0)
        operator delete(v68[0]);
      v23 = (_QWORD *)v2[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v2[2];
          v25 = *v24 == (_QWORD)v2;
          v2 = v24;
        }
        while (!v25);
      }
      v2 = v24;
    }
    while (v24 != v63);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 224) + 56))(*(_QWORD *)(v1 + 224)) & 1) != 0)
  {
    v27 = *(_QWORD **)(v1 + 3808);
    if (v27 != v63)
    {
      do
      {
        v60 = *((_DWORD *)v27 + 8);
        v70 = v60;
        *((_BYTE *)&v80.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v80, "__GLOBAL_cleanup_");
        sub_22E67A5DC((uint64_t)__p);
        if ((SBYTE7(v72) & 0x80u) == 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        if ((SBYTE7(v72) & 0x80u) == 0)
          v29 = BYTE7(v72) & 0x7F;
        else
          v29 = (std::string::size_type)__p[1];
        v30 = std::string::append(&v80, (const std::string::value_type *)v28, v29);
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)v68 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v69 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v72) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (v69 >= 0)
          v32 = v68;
        else
          v32 = (void **)v68[0];
        if (v69 >= 0)
          v33 = HIBYTE(v69) & 0x7F;
        else
          v33 = (uint64_t)v68[1];
        v34 = sub_22E67A6A4(v1, (uint64_t)v32, v33);
        sub_22E618EBC((uint64_t)&v80, v1, 0);
        v35 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16392);
        v37 = sub_22E46BBB8((_QWORD **)(v1 + 280), *(_QWORD *)(*(_QWORD *)(v1 + 288) + 16392), 0, 0, 0, 0, 0, v36, 0, 0, -1);
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        __p[0] = &v72;
        __p[1] = (void *)0x1000000000;
        v59 = (uint64_t)v34;
        sub_22E61A8FC((uint64_t)&v80, 0, 0, v35, v34, v37, (uint64_t *)__p, 0, (int8x16_t)0, 0);
        if (__p[0] != &v72)
          free(__p[0]);
        v66 = 0;
        v67 = &v80;
        sub_22E48EE24(&v66, 0, 0);
        v62 = llvm::FunctionType::get();
        llvm::PointerType::get();
        v39 = v27 + 5;
        v38 = v27[5];
        if ((v38 & 4) != 0)
          v40 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v38 & 0xFFFFFFFFFFFFFFF8) + 8);
        else
          v40 = (uint64_t)&v39[v38 > 7];
        while (1)
        {
          v56 = v27 + 5;
          if ((v38 & 4) != 0)
            v56 = *(_QWORD **)(v38 & 0xFFFFFFFFFFFFFFF8);
          if ((_QWORD *)v40 == v56)
            break;
          v41 = *(_QWORD *)(v40 - 8);
          v40 -= 8;
          v65 = v41;
          v42 = (_QWORD *)llvm::ConstantExpr::getBitCast();
          v43 = (llvm::Constant **)sub_22F25B68C((uint64_t)&v80, v42);
          __p[0] = "needs_destruct";
          LOWORD(v73) = 259;
          NullValue = llvm::Constant::getNullValue(*v43, v44);
          v46 = sub_22E3C18F4((uint64_t)&v81, 32, (uint64_t *)v43, NullValue, (uint64_t)__p);
          __p[0] = "destruct.call";
          LOWORD(v73) = 259;
          v47 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v48 = v27 + 5;
          if ((*v39 & 4) != 0)
            v48 = *(_QWORD **)(*v39 & 0xFFFFFFFFFFFFFFF8);
          v49 = "destruct.end";
          if ((_QWORD *)v40 != v48)
            v49 = "unatexit.call";
          v50 = 1;
          BYTE1(v73) = 1;
          if (*v49)
          {
            __p[0] = (void *)v49;
            v50 = 3;
          }
          LOBYTE(v73) = v50;
          v51 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v52 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v52, v47, v51, v46, 0);
          LOWORD(v73) = 257;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v52, __p, v83, v84);
          if (v82)
          {
            v53 = v81;
            v54 = v81 + 16 * v82;
            do
            {
              llvm::Instruction::setMetadata();
              v53 += 16;
            }
            while (v53 != v54);
          }
          sub_22E5ED9B4(&v80, v47, 0);
          LOWORD(v73) = 257;
          v55 = sub_22E462B78(&v81, v62, (uint64_t)v42, 0, 0, (uint64_t)__p, 0);
          *((_WORD *)v55 + 9) = (*(_WORD *)(v65 + 18) >> 2) & 0xFFC | *((_WORD *)v55 + 9) & 0xF003;
          sub_22E5ED9B4(&v80, v51, 0);
          v38 = *v39;
        }
        sub_22E619DE8((uint64_t)&v80, 0);
        sub_22E629CDC(v1, v59, v60, 0);
        sub_22E48F084(&v66);
        sub_22E619434((uint64_t)&v80);
        if (SHIBYTE(v69) < 0)
          operator delete(v68[0]);
        v57 = (_QWORD *)v27[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = (_QWORD *)v27[2];
            v25 = *v58 == (_QWORD)v27;
            v27 = v58;
          }
          while (!v25);
        }
        v27 = v58;
      }
      while (v58 != v63);
    }
  }
}

llvm::Value *sub_22E67AF94(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, int a5)
{
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::GlobalValue *v17;
  llvm::GlobalValue *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  llvm::Value *v23;
  uint64_t v24;
  llvm::Value *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm::Type *v30;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37[4];
  __int16 v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 68);
    v9 = v8 > 0x21;
    v10 = (1 << v8) & 0x3F0000888;
    if (v9 || v10 == 0)
      v12 = "__cxa_thread_atexit";
    else
      v12 = "_tlv_atexit";
  }
  else
  {
    v12 = "__cxa_atexit";
  }
  v32[0] = *(_QWORD *)(a1 + 96);
  llvm::FunctionType::get();
  v13 = llvm::PointerType::get();
  if (!a4)
    goto LABEL_13;
  v14 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  if ((v14 & 0xFE) == 0x12)
    v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a4 + 16) + 8);
  if (v14 >= 0x100)
    v15 = llvm::PointerType::get();
  else
LABEL_13:
    v15 = *(_QWORD *)(a1 + 96);
  v16 = sub_22F29B660(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 8), (uint64_t)"__dso_handle", 12);
  v17 = (llvm::GlobalValue *)llvm::Value::stripPointerCasts(v16);
  v18 = v17;
  v19 = *((_DWORD *)v17 + 8);
  v20 = v19 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v17 + 8) = v20;
  if ((v19 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage(v17) & 1) != 0)
      goto LABEL_19;
    v20 = *((_DWORD *)v18 + 8);
  }
  *((_DWORD *)v18 + 8) = v20 | 0x4000;
LABEL_19:
  v39[3] = v13;
  v39[4] = v15;
  v39[5] = *(_QWORD *)v16;
  v21 = llvm::FunctionType::get();
  v22 = strlen(v12);
  v24 = sub_22E633A04(*(_QWORD *)(a1 + 144), v21, v12, v22, 0, 0, 0);
  v25 = v23;
  if (*((_BYTE *)v23 + 16))
    v26 = 1;
  else
    v26 = v23 == 0;
  if (!v26)
    llvm::Function::addFnAttr();
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  LOWORD(v32[0]) = sub_22EF72F20(v27, 0, 0, 0);
  BYTE2(v32[0]) = 0;
  *(_QWORD *)((char *)&v32[1] + 4) = 0;
  *(_QWORD *)((char *)v32 + 4) = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v28 = *(_QWORD *)(v27 + 16392);
  v37[0] = *(_QWORD *)(v27 + 16816);
  v29 = sub_22EF63D8C(v27, v28, v37, 1uLL, (__int128 *)v32, 0);
  sub_22F28A778(*(uint64_t **)(a1 + 144), a3, v29, 0, 0);
  if (!a4)
    llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 96), v30);
  v39[0] = llvm::ConstantExpr::getBitCast();
  v39[1] = llvm::ConstantExpr::getBitCast();
  v39[2] = v16;
  v38 = 257;
  return sub_22F24EEDC(a1, v24, v25, (uint64_t)v39, 3, (uint64_t)v37);
}

BOOL sub_22E67B26C(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
  v3 = (a2 & 6) == 0;
  if (v2 != 57)
    v3 = 0;
  if (v2 == 55)
    return (a2 & 7) == 0;
  else
    return v3;
}

uint64_t sub_22E67B29C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2 && (*(_BYTE *)(result + 76) & 0x18) != 0)
    {
      v5 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = v5;
      *(_DWORD *)(a2 + 68) = 0;
      *(_BYTE *)(a2 + 72) = 2;
      result = 1;
      *(_WORD *)(a2 + 73) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E67B320(uint64_t a1, uint64_t a2)
{
  return 2 * ((*(_BYTE *)(a2 + 76) & 0x18) != 0);
}

uint64_t sub_22E67B334(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t result;

  v3 = sub_22F2559E0(a2);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v3)
    return llvm::StructType::get();
  return result;
}

uint64_t sub_22E67B3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t Int8PtrTy;
  uint64_t *v23;
  llvm::LLVMContext *v24;
  uint64_t Int8Ty;
  llvm::GetElementPtrInst *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Constant **v32;
  llvm::Type *v33;
  uint64_t NullValue;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Declaration;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Type *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  llvm::Value *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Value *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::PHINode *v90;
  uint64_t result;
  uint64_t v92;
  int v93;
  llvm::PHINode *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t False;
  uint64_t v99;
  llvm::Type **v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm::Value *v111;
  uint64_t v113;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *__p;
  llvm::Type **__pa;
  _QWORD v127[3];
  int v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  __int128 v132;
  __int16 v133;
  _QWORD v134[2];
  llvm::Type **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)(a2 + 272);
  v12 = *(_QWORD *)(*(_QWORD *)(a7 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 26;
  else
    v13 = 0;
  if (!v13)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v12 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a7 + 32) & 0xFFFFFFFFFFFFFFF0));
    else
      v12 = 0;
  }
  v14 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 40) + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  v15 = *(_QWORD *)(a1 + 8) + 280;
  v16 = sub_22E46C2C0(v15, v14, v12, 0);
  sub_22E46F2EC(v15, v16);
  v17 = llvm::ConstantInt::get();
  v123 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  __p = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v118 = operator new();
  llvm::BasicBlock::BasicBlock();
  LODWORD(v137) = 1;
  v131 = "memptr.adj";
  v133 = 259;
  v18 = sub_22E3C2EA8((uint64_t)v11, a6, (uint64_t)&v137, 1, (uint64_t)&v131);
  v122 = a1;
  v19 = (uint64_t *)v18;
  if (*(_BYTE *)(a1 + 192))
  {
    v131 = "memptr.adj.shifted";
    v133 = 259;
    v19 = (uint64_t *)sub_22E3EA5BC((uint64_t)v11, v18, v17, (uint64_t)&v131, 0);
  }
  v20 = v17;
  v113 = v12;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v21 = (uint64_t *)sub_22F28ABCC((_OWORD *)a4, (_QWORD *)a2);
  else
    v21 = *(uint64_t **)a4;
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a2 + 336), 0);
  v133 = 257;
  v23 = (uint64_t *)sub_22E3C1740(v11, 49, (uint64_t)v21, Int8PtrTy, (uint64_t)&v131);
  Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v24);
  v133 = 257;
  v26 = sub_22E3E5044(v11, Int8Ty, v23, v19, (uint64_t)&v131);
  v27 = *v21;
  v131 = "this.adjusted";
  v133 = 259;
  v28 = sub_22E3C1740(v11, 49, (uint64_t)v26, v27, (uint64_t)&v131);
  *a5 = v28;
  LODWORD(v137) = 0;
  v131 = "memptr.ptr";
  v133 = 259;
  v29 = sub_22E3C2EA8((uint64_t)v11, a6, (uint64_t)&v137, 1, (uint64_t)&v131);
  if (*(_BYTE *)(v122 + 192))
  {
    v133 = 257;
    v30 = (uint64_t)v11;
    v31 = v18;
  }
  else
  {
    v133 = 257;
    v30 = (uint64_t)v11;
    v31 = v29;
  }
  v32 = (llvm::Constant **)sub_22E3E49C4(v30, v31, v17, (uint64_t)&v131);
  v131 = "memptr.isvirtual";
  v133 = 259;
  NullValue = llvm::Constant::getNullValue(*v32, v33);
  v35 = sub_22E3C18F4((uint64_t)v11, 33, (uint64_t *)v32, NullValue, (uint64_t)&v131);
  v36 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v36, v123, __p, v35, 0);
  v133 = 257;
  sub_22E3C12C8(v11, v36, (uint64_t)&v131);
  sub_22E5ED9B4((_QWORD *)a2, v123, 0);
  v37 = (llvm::Type *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a2 + 336), 0);
  v38 = *(_QWORD *)(a4 + 16);
  v39 = *(unsigned __int8 *)(a2 + 130);
  if ((*(_BYTE *)(v14 + 74) & 1) != 0)
  {
    v41 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v14) + 72) + 8);
    if (v39 >= v38)
      v42 = v38;
    else
      v42 = v39;
    if (v41 <= v38)
      v40 = v39;
    else
      v40 = v42;
  }
  else if (v38 >= v39)
  {
    v40 = *(unsigned __int8 *)(a2 + 130);
  }
  else
  {
    v40 = *(_QWORD *)(a4 + 16);
  }
  v43 = *(_QWORD *)(a4 + 8);
  v127[0] = v28;
  v127[1] = v43;
  v127[2] = v40;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v120 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v127, v37, v14, 0);
  v44 = (uint64_t *)v29;
  if (!*(_BYTE *)(v122 + 192))
  {
    v133 = 257;
    v44 = (uint64_t *)sub_22E3E48CC((uint64_t)v11, v29, v20, (uint64_t)&v131, 0, 0);
  }
  if (*(_BYTE *)(v122 + 194))
  {
    v45 = *(_QWORD *)(a2 + 24);
    v133 = 257;
    v46 = sub_22E3C1740(v11, 38, (uint64_t)v44, v45, (uint64_t)&v131);
    v47 = *(_QWORD *)(*(_QWORD *)(v122 + 8) + 88);
    v133 = 257;
    v44 = (uint64_t *)sub_22E3C1740(v11, 39, v46, v47, (uint64_t)&v131);
  }
  if ((*(_BYTE *)(a2 + 1869) & 0x80) != 0)
    v48 = sub_22E610138(*(_QWORD *)(v122 + 8), v14);
  else
    v48 = 0;
  v49 = *(_QWORD *)(v122 + 8);
  if ((*(_WORD *)(*(_QWORD *)(v49 + 184) + 64) & 0x400) != 0)
  {
    v50 = sub_22E610138(v49, v14);
    v49 = *(_QWORD *)(v122 + 8);
    if ((*(_WORD *)(*(_QWORD *)(v49 + 184) + 64) & 0x200) != 0)
      goto LABEL_34;
LABEL_36:
    v51 = 0;
    goto LABEL_37;
  }
  v50 = 0;
  if ((*(_WORD *)(*(_QWORD *)(v49 + 184) + 64) & 0x200) == 0)
    goto LABEL_36;
LABEL_34:
  v51 = !sub_22E60FF1C(v49, v14);
LABEL_37:
  *(_BYTE *)(a2 + 1880) = 1;
  if (((v48 | v50) & 1) != 0 || v51)
  {
    sub_22E6371C0(*(_QWORD *)(v122 + 8), a7 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v122 + 8) + 3576, ".virtual", 8uLL);
    v52 = llvm::MetadataAsValue::get();
  }
  else
  {
    v52 = 0;
  }
  v116 = v29;
  if (v50)
  {
    v53 = *(_QWORD *)(a2 + 8);
    v133 = 257;
    v54 = sub_22E42129C(v11, v53, v120, v44, (uint64_t)&v131);
    Declaration = llvm::Intrinsic::getDeclaration();
    v56 = Declaration;
    if (Declaration)
      v57 = *(_QWORD *)(Declaration + 24);
    else
      v57 = 0;
    v137 = v54;
    v138 = llvm::ConstantInt::get();
    v139 = v52;
    v133 = 257;
    v64 = sub_22E462B78(v11, v57, v56, (uint64_t)&v137, 3, (uint64_t)&v131, 0);
    LODWORD(v137) = 1;
    v133 = 257;
    v63 = sub_22E3C2EA8((uint64_t)v11, (uint64_t)v64, (uint64_t)&v137, 1, (uint64_t)&v131);
    LODWORD(v137) = 0;
    v133 = 257;
    v65 = sub_22E3C2EA8((uint64_t)v11, (uint64_t)v64, (uint64_t)&v137, 1, (uint64_t)&v131);
    v66 = llvm::PointerType::get();
    v131 = "memptr.virtualfn";
    v133 = 259;
  }
  else
  {
    if ((v48 | v51) == 1)
    {
      v58 = *(_QWORD *)(a2 + 8);
      v133 = 257;
      v59 = sub_22E42129C(v11, v58, v120, v44, (uint64_t)&v131);
      v60 = llvm::Intrinsic::getDeclaration();
      v61 = v60;
      if (v60)
        v62 = *(_QWORD *)(v60 + 24);
      else
        v62 = 0;
      v67 = *(_QWORD *)(a2 + 96);
      v133 = 257;
      v135 = (llvm::Type **)sub_22E3C1740(v11, 49, v59, v67, (uint64_t)&v131);
      v136 = v52;
      v140 = 257;
      v63 = (uint64_t)sub_22E462B78(v11, v62, v61, (uint64_t)&v135, 2, (uint64_t)&v137, 0);
    }
    else
    {
      v63 = 0;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 8) + 712) + 136) != 1)
    {
      v70 = *(_QWORD *)(a2 + 8);
      v133 = 257;
      v71 = sub_22E42129C(v11, v70, v120, v44, (uint64_t)&v131);
      llvm::PointerType::get();
      v72 = llvm::PointerType::get();
      v133 = 257;
      v73 = sub_22E3C1740(v11, 49, v71, v72, (uint64_t)&v131);
      v74 = (llvm::Type *)llvm::PointerType::get();
      v75 = *(unsigned __int8 *)(a2 + 130);
      v131 = "memptr.virtualfn";
      v133 = 259;
      v76 = sub_22E3C3200(v11, v74, v73, (63 - __clz(v75)) | 0x100u, 0, (uint64_t)&v131);
      goto LABEL_59;
    }
    v135 = (llvm::Type **)*v44;
    v68 = llvm::Intrinsic::getDeclaration();
    if (v68)
      v69 = *(_QWORD *)(v68 + 24);
    else
      v69 = 0;
    v137 = (uint64_t)v120;
    v138 = (uint64_t)v44;
    v133 = 257;
    v65 = (uint64_t)sub_22E462B78(v11, v69, v68, (uint64_t)&v137, 2, (uint64_t)&v131, 0);
    v66 = llvm::PointerType::get();
    v133 = 257;
  }
  v76 = sub_22E3C1740(v11, 49, v65, v66, (uint64_t)&v131);
LABEL_59:
  v77 = v76;
  if (v48)
  {
    sub_22F0D5A50(a3);
    v79 = sub_22E4DE978(a2, v78);
    v80 = sub_22F25E758(a2, a7 & 0xFFFFFFFFFFFFFFF0);
    v137 = llvm::ConstantInt::get();
    v138 = v79;
    v139 = (uint64_t)v80;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v122 + 8) + 184) + 1261) & 0x80) != 0)
    {
      sub_22E4EA298(a2, v63, 2u, "", 0);
    }
    else
    {
      llvm::MDString::get();
      v81 = llvm::MetadataAsValue::get();
      v82 = llvm::Intrinsic::getDeclaration();
      if (v82)
        v83 = *(_QWORD *)(v82 + 24);
      else
        v83 = 0;
      v135 = (llvm::Type **)v120;
      v136 = v81;
      v133 = 257;
      v84 = sub_22E462B78(v11, v83, v82, (uint64_t)&v135, 2, (uint64_t)&v131, 0);
      v131 = (const char *)v63;
      v132 = xmmword_22F45D5F0;
      v135 = (llvm::Type **)v120;
      v136 = (uint64_t)v84;
      sub_22E4DEC4C((_QWORD *)a2, (uint64_t)&v131, 1, 2u, (uint64_t)&v137, 3, &v135, 2);
    }
    v123 = *(_QWORD **)(a2 + 320);
  }
  else
  {
    v80 = 0;
    v79 = 0;
  }
  v85 = (_QWORD *)v118;
  *(_BYTE *)(a2 + 1880) = 0;
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, __p, 0);
  v86 = llvm::PointerType::get();
  v131 = "memptr.nonvirtualfn";
  v133 = 259;
  v121 = sub_22E3C1740(v11, 48, v116, v86, (uint64_t)&v131);
  if (v48)
  {
    v87 = sub_22F10C2A4(*(_QWORD *)(a7 + 40));
    if (v87)
      v88 = (*(_DWORD *)(v87 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v87;
    else
      v88 = 0;
    if (*(_QWORD *)(v88 + 128)
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v88 + 104) + 96), *(_QWORD *)(v88 + 104)), *(_QWORD *)(v88 + 128)))
    {
      v117 = v77;
      *(_BYTE *)(a2 + 1880) = 1;
      v137 = llvm::ConstantInt::get();
      v138 = v79;
      v139 = (uint64_t)v80;
      False = llvm::ConstantInt::getFalse();
      v99 = *(_QWORD *)(a2 + 96);
      v133 = 257;
      v100 = (llvm::Type **)sub_22E3C1740(v11, 49, v121, v99, (uint64_t)&v131);
      sub_22F299A54(v88, (uint64_t)&v135);
      v102 = (uint64_t *)v135;
      v101 = (uint64_t *)v136;
      __pa = v135;
      if (v135 != (llvm::Type **)v136)
      {
        do
        {
          v103 = *(_QWORD *)(v122 + 8);
          v104 = *(_QWORD *)(v103 + 144);
          v105 = *(_QWORD *)(a7 + 32);
          v106 = sub_22EF6477C(v104, *v102);
          v107 = sub_22F36A6C0(v104, v105, *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0));
          sub_22E6371C0(v103, v107, v103 + 3552, "", 0);
          v108 = llvm::MetadataAsValue::get();
          v109 = llvm::Intrinsic::getDeclaration();
          if (v109)
            v110 = *(_QWORD *)(v109 + 24);
          else
            v110 = 0;
          v134[0] = v100;
          v134[1] = v108;
          v133 = 257;
          v111 = sub_22E462B78(v11, v110, v109, (uint64_t)v134, 2, (uint64_t)&v131, 0);
          v133 = 257;
          False = sub_22E3E58D4((uint64_t)v11, False, (uint64_t)v111, (uint64_t)&v131);
          ++v102;
        }
        while (v102 != v101);
      }
      if (__pa)
        operator delete(__pa);
      v131 = (const char *)False;
      v132 = xmmword_22F45D5F0;
      v135 = v100;
      v136 = llvm::UndefValue::get();
      sub_22E4DEC4C((_QWORD *)a2, (uint64_t)&v131, 1, 2u, (uint64_t)&v137, 3, &v135, 2);
      __p = *(_QWORD **)(a2 + 320);
      *(_BYTE *)(a2 + 1880) = 0;
      v85 = (_QWORD *)v118;
      v77 = v117;
    }
  }
  sub_22E5ED9B4((_QWORD *)a2, v85, 0);
  v89 = llvm::PointerType::get();
  v133 = 257;
  v90 = (llvm::PHINode *)sub_22E3C4B80(v11, v89, 2, (uint64_t)&v131);
  sub_22E3C4C50(v90, v77, (uint64_t)v123);
  result = sub_22E3C4C50(v90, v121, (uint64_t)__p);
  v92 = *(_QWORD *)(*(_QWORD *)(v122 + 8) + 184);
  if ((*(_BYTE *)(v92 + 1400) & 3) != 0)
  {
    v95 = *(_QWORD *)(a2 + 88);
    v133 = 257;
    v94 = (llvm::PHINode *)sub_22E3C4B80(v11, v95, 2, (uint64_t)&v131);
    v96 = llvm::ConstantInt::get();
    sub_22E3C4C50(v94, v96, (uint64_t)v123);
    sub_22F289C48(*(_QWORD *)(v122 + 8));
    result = sub_22E3C4C50(v94, v97, (uint64_t)__p);
    v93 = (*(_DWORD *)(v92 + 1400) >> 5) & 0xF3 | (*(_DWORD *)(v92 + 1400) >> 1) & 0xC;
  }
  else
  {
    v93 = 0;
    v94 = 0;
  }
  *(_QWORD *)a8 = v90;
  *(_QWORD *)(a8 + 8) = v113;
  *(_QWORD *)(a8 + 16) = 0;
  *(_DWORD *)(a8 + 24) = 0;
  *(_DWORD *)(a8 + 32) = v93;
  *(_QWORD *)(a8 + 40) = v94;
  return result;
}

uint64_t sub_22E67C17C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::GetElementPtrInst *v16;
  uint64_t v17;
  _BYTE v19[32];
  __int16 v20;
  __int128 v21[3];
  _OWORD v22[2];
  __int128 v23;

  v10 = a2 + 34;
  v11 = *(_OWORD *)(a4 + 16);
  v21[0] = *(_OWORD *)a4;
  v21[1] = v11;
  v21[2] = *(_OWORD *)(a4 + 32);
  v12 = a2[1];
  v20 = 257;
  sub_22E3BEE6C(a2 + 34, v21, v12, (uint64_t)v19, (uint64_t)v22);
  v13 = v22[1];
  *(_OWORD *)a4 = v22[0];
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = v23;
  v14 = *(_QWORD *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v15 = (uint64_t *)sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v15 = *(uint64_t **)a4;
  *(_QWORD *)&v22[0] = "memptr.offset";
  LOWORD(v23) = 259;
  v16 = sub_22E3E5044(v10, v14, v15, a5, (uint64_t)v22);
  sub_22E66C868(a2[18] + 280, *(_QWORD *)(a6 + 32), 0);
  llvm::PointerType::get();
  v17 = llvm::PointerType::get();
  LOWORD(v23) = 257;
  return sub_22E3C1740(v10, 49, (uint64_t)v16, v17, (uint64_t)v22);
}

uint64_t sub_22E67C2B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  llvm::Type *v17;
  uint64_t v18;
  llvm::Instruction *v19;
  uint64_t AllOnesValue;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Constant **v29;
  llvm::Type *v30;
  uint64_t NullValue;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Constant *v40;
  llvm::PHINode *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[4];
  __int16 v50;

  v4 = a4;
  if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a3, a4);
  v8 = a2 + 34;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 31;
  else
    v10 = 0;
  if (v10)
  {
    v22 = a2;
    goto LABEL_29;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v22 = a2;
    v9 = sub_22F10CF48(v9);
    if (v9)
    {
LABEL_29:
      if (sub_22F28C8B4(v9))
      {
        v48[0] = sub_22F289C48(*(_QWORD *)(a1 + 8));
        v48[1] = v23;
        if ((v48[0] & 3) != 0)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
          v47[0] = sub_22F289C48(*(_QWORD *)(a1 + 8));
          v47[1] = v24;
          v46 = 0;
          v49[0] = "memptr.ptr";
          v50 = 259;
          v42 = (uint64_t *)sub_22E3C2EA8((uint64_t)v8, v4, (uint64_t)&v46, 1, (uint64_t)v49);
          v43 = *v42;
          v45 = v22[40];
          v49[0] = "resign";
          v50 = 259;
          v25 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v49[0] = "merge";
          v50 = 259;
          v26 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v46 = 1;
          v49[0] = "memptr.adj";
          v50 = 259;
          v27 = sub_22E3C2EA8((uint64_t)v8, v4, (uint64_t)&v46, 1, (uint64_t)v49);
          v28 = llvm::ConstantInt::get();
          v50 = 257;
          v29 = (llvm::Constant **)sub_22E3E49C4((uint64_t)v8, v27, v28, (uint64_t)v49);
          v49[0] = "is.virtual.offset";
          v50 = 259;
          NullValue = llvm::Constant::getNullValue(*v29, v30);
          v32 = sub_22E3C18F4((uint64_t)v8, 33, (uint64_t *)v29, NullValue, (uint64_t)v49);
          v33 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v33, v26, v25, v32, 0);
          v50 = 257;
          sub_22E3C12C8(v8, v33, (uint64_t)v49);
          sub_22E5ED9B4(v22, v25, 0);
          v34 = llvm::PointerType::get();
          v50 = 257;
          v35 = (uint64_t *)sub_22E3C1740(v8, 48, (uint64_t)v42, v34, (uint64_t)v49);
          v36 = sub_22E5DF144(v22, v35, v44, (uint64_t)v47, (llvm::LLVMContext *)v48, *(unsigned __int8 *)(v4 + 16) < 0x15u);
          v50 = 257;
          v37 = sub_22E3C1740(v8, 47, (uint64_t)v36, v43, (uint64_t)v49);
          v46 = 0;
          v50 = 257;
          v38 = sub_22E4210EC((uint64_t)v8, v4, v37, (uint64_t)&v46, 1, (uint64_t)v49);
          v39 = v22[40];
          sub_22E5ED9B4(v22, v26, 0);
          v40 = *(llvm::Constant **)v4;
          v50 = 257;
          v41 = (llvm::PHINode *)sub_22E3C4B80(v8, (uint64_t)v40, 2, (uint64_t)v49);
          sub_22E3C4C50(v41, v4, v45);
          sub_22E3C4C50(v41, v38, v39);
          v4 = (uint64_t)v41;
        }
      }
    }
  }
  if ((*(_DWORD *)a3 & 0x1FC0000) != 0x4C0000)
  {
    v11 = sub_22F24D850(a1, a3);
    if (v11)
    {
      v12 = v11;
      v13 = *(_DWORD *)a3;
      v14 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v14)
        v15 = *(_BYTE *)(v14 + 16) == 31;
      else
        v15 = 0;
      if (!v15)
        v14 = sub_22F10CF48(v14);
      v16 = v13 & 0x1FC0000;
      if (sub_22F2559E0(v14))
      {
        v49[0] = "adj";
        v50 = 259;
        if (v16 == 4456448)
          sub_22E3E48CC((uint64_t)v8, v4, v12, (uint64_t)v49, 0, 1);
        else
          sub_22E520468((uint64_t)v8, v4, v12, (uint64_t)v49);
        AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v4, v17);
        v49[0] = "memptr.isnull";
        v50 = 259;
        sub_22E3C18F4((uint64_t)v8, 32, (uint64_t *)v4, AllOnesValue, (uint64_t)v49);
        v50 = 257;
        return llvm::IRBuilderBase::CreateSelect();
      }
      else
      {
        if (*(_BYTE *)(a1 + 192))
          v12 = llvm::ConstantInt::get();
        LODWORD(v48[0]) = 1;
        v49[0] = "src.adj";
        v50 = 259;
        v18 = sub_22E3C2EA8((uint64_t)v8, v4, (uint64_t)v48, 1, (uint64_t)v49);
        v49[0] = "adj";
        v50 = 259;
        if (v16 == 4456448)
          v19 = sub_22E3E48CC((uint64_t)v8, v18, v12, (uint64_t)v49, 0, 1);
        else
          v19 = sub_22E520468((uint64_t)v8, v18, v12, (uint64_t)v49);
        LODWORD(v48[0]) = 1;
        v50 = 257;
        return sub_22E4210EC((uint64_t)v8, v4, (uint64_t)v19, (uint64_t)v48, 1, (uint64_t)v49);
      }
    }
  }
  return v4;
}

uint64_t sub_22E67C85C(uint64_t a1, uint64_t a2, llvm::Constant *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 31;
  else
    v8 = 0;
  if ((v8
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
     && (v7 = sub_22F10CF48(v7)) != 0)
    && sub_22F28C8B4(v7))
  {
    a3 = (llvm::Constant *)sub_22E6851B0((uint64_t)a3, v6, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), *(uint64_t **)(a1 + 8));
  }
  if ((*(_DWORD *)a2 & 0x1FC0000) == 0x4C0000 || !sub_22F24D850(a1, a2))
    return (uint64_t)a3;
  v10 = *(_DWORD *)a2;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 31;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v13 = v10 & 0x1FC0000;
  if (!sub_22F2559E0(v11))
  {
    if (*(_BYTE *)(a1 + 192))
      llvm::ConstantInt::get();
    llvm::ConstantExpr::getExtractValue();
    if (v13 == 4456448)
      llvm::ConstantExpr::getSub();
    else
      llvm::ConstantExpr::getAdd();
    return llvm::ConstantExpr::getInsertValue();
  }
  if ((llvm::Constant::isAllOnesValue(a3) & 1) != 0)
    return (uint64_t)a3;
  if (v13 == 4456448)
    return llvm::ConstantExpr::getSub();
  else
    return llvm::ConstantExpr::getAdd();
}

BOOL sub_22E67CA50(uint64_t a1, uint64_t a2)
{
  return sub_22F28C8B4(a2);
}

uint64_t sub_22E67CA58(uint64_t a1, uint64_t a2)
{
  if (sub_22F2559E0(a2))
    return llvm::ConstantInt::get();
  llvm::ConstantInt::get();
  llvm::ConstantStruct::getTypeForElements();
  return llvm::ConstantStruct::get();
}

uint64_t sub_22E67CB1C()
{
  return sub_22E6852D8();
}

uint64_t sub_22E67CB24()
{
  return llvm::ConstantInt::get();
}

uint64_t sub_22E67CB38(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 31;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v8)
    return ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[20])(a1, v6);
  v10 = sub_22F3689B4(a1[1][18], a2);
  if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
  {
    v11 = a1[1][18];
    v12 = sub_22F0CBBE4(v11, v8);
    v13 = v12 / sub_22EF5CDF0(v11, *(_QWORD *)(*(_QWORD *)(v11 + 16408) & 0xFFFFFFFFFFFFFFF0)) + v10;
    return ((uint64_t (*)(uint64_t **, uint64_t, unint64_t))(*a1)[22])(a1, v6, v13);
  }
  v14 = sub_22E6852D8();
  v15 = *(_WORD *)(v8 + 80) & 0x7F;
  v16 = -40;
  if (v15 > 0x46)
  {
    if (v15 != 83)
    {
      if (v15 == 71)
      {
        v16 = -56;
        goto LABEL_26;
      }
      if (v15 == 81)
        goto LABEL_26;
LABEL_21:
      v17 = v15 - 52;
      v18 = v15 - 33 >= 5;
      v19 = -48;
      if (!v18)
        v19 = -64;
      if (v17 >= 6)
        v16 = v19;
      else
        v16 = -72;
    }
  }
  else
  {
    if (v15 > 0x18)
      goto LABEL_20;
    if (v15 != 16)
    {
      if (((1 << v15) & 0x1066) != 0)
        goto LABEL_26;
      if (v15 != 24)
      {
LABEL_20:
        if (v15 == 70)
        {
          v16 = -64;
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }
    v16 = -48;
  }
LABEL_26:
  v20 = *(_QWORD *)(v8 + 72 + v16 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
    v21 = (_QWORD *)*v21;
  if (v21)
    v22 = v21 - 8;
  else
    v22 = 0;
  v23 = sub_22F36A6C0(a1[1][18], *(_QWORD *)(v8 + 48), v22[6]);
  return sub_22E6851B0(v14, a3, v23, a1[1]);
}

uint64_t sub_22E67CD3C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t NullValue;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  _QWORD v36[4];
  __int16 v37;

  v10 = a2 + 272;
  if (a6)
    v11 = 28;
  else
    v11 = 29;
  if (a6)
    v12 = 29;
  else
    v12 = 28;
  if (a6)
    v13 = 33;
  else
    v13 = 32;
  if (sub_22F2559E0(a5))
  {
    v37 = 257;
    return sub_22E3C18F4(v10, v13, a3, a4, (uint64_t)v36);
  }
  else
  {
    v33 = v11;
    v34 = v12;
    v35 = 0;
    v36[0] = "lhs.memptr.ptr";
    v37 = 259;
    v15 = 1;
    v16 = (uint64_t *)sub_22E3C2EA8(v10, (uint64_t)a3, (uint64_t)&v35, 1, (uint64_t)v36);
    v35 = 0;
    v36[0] = "rhs.memptr.ptr";
    v37 = 259;
    v17 = sub_22E3C2EA8(v10, a4, (uint64_t)&v35, 1, (uint64_t)v36);
    v36[0] = "cmp.ptr";
    v37 = 259;
    v32 = sub_22E3C18F4(v10, v13, v16, v17, (uint64_t)v36);
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)*v16, v18);
    v36[0] = "cmp.ptr.null";
    v37 = 259;
    v31 = NullValue;
    v20 = sub_22E3C18F4(v10, v13, v16, NullValue, (uint64_t)v36);
    v35 = 1;
    v36[0] = "lhs.memptr.adj";
    v37 = 259;
    v21 = (uint64_t *)sub_22E3C2EA8(v10, (uint64_t)a3, (uint64_t)&v35, 1, (uint64_t)v36);
    v35 = 1;
    v36[0] = "rhs.memptr.adj";
    v37 = 259;
    v22 = sub_22E3C2EA8(v10, a4, (uint64_t)&v35, 1, (uint64_t)v36);
    v36[0] = "cmp.adj";
    v37 = 259;
    v23 = sub_22E3C18F4(v10, v13, v21, v22, (uint64_t)v36);
    if (*(_BYTE *)(a1 + 192))
    {
      v24 = llvm::ConstantInt::get();
      v36[0] = "or.adj";
      v37 = 259;
      v25 = sub_22E3E58D4(v10, (uint64_t)v21, v22, (uint64_t)v36);
      v37 = 257;
      v26 = (uint64_t *)sub_22E3E49C4(v10, v25, v24, (uint64_t)v36);
      v36[0] = "cmp.or.adj";
      v37 = 259;
      v27 = sub_22E3C18F4(v10, v13, v26, v31, (uint64_t)v36);
      v37 = 257;
      v28 = v34;
      v20 = sub_22E3BEBE4(v10, v34, v20, v27, (uint64_t)v36, 0);
    }
    else
    {
      v28 = v34;
    }
    v37 = 257;
    v29 = sub_22E3BEBE4(v10, v33, v20, v23, (uint64_t)v36, 0);
    v30 = "memptr.eq";
    if (a6)
      v30 = "memptr.ne";
    HIBYTE(v37) = 1;
    if (*v30)
    {
      v36[0] = v30;
      v15 = 3;
    }
    LOBYTE(v37) = v15;
    return sub_22E3BEBE4(v10, v28, v32, v29, (uint64_t)v36, 0);
  }
}

uint64_t sub_22E67D05C(uint64_t a1, uint64_t a2, llvm::Constant **a3, uint64_t a4)
{
  uint64_t v6;
  llvm::Type *v7;
  uint64_t AllOnesValue;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = a2 + 272;
  if (sub_22F2559E0(a4))
  {
    AllOnesValue = llvm::Constant::getAllOnesValue(*a3, v7);
    v19[0] = "memptr.toBOOL";
    v20 = 259;
    return sub_22E3C18F4(v6, 33, (uint64_t *)a3, AllOnesValue, (uint64_t)v19);
  }
  v18 = 0;
  v19[0] = "memptr.ptr";
  v20 = 259;
  v10 = (uint64_t *)sub_22E3C2EA8(v6, (uint64_t)a3, (uint64_t)&v18, 1, (uint64_t)v19);
  v11 = llvm::ConstantInt::get();
  v19[0] = "memptr.toBOOL";
  v20 = 259;
  v12 = sub_22E3C18F4(v6, 33, v10, v11, (uint64_t)v19);
  if (*(_BYTE *)(a1 + 192))
  {
    v13 = llvm::ConstantInt::get();
    v18 = 1;
    v19[0] = "memptr.adj";
    v20 = 259;
    v14 = sub_22E3C2EA8(v6, (uint64_t)a3, (uint64_t)&v18, 1, (uint64_t)v19);
    v19[0] = "memptr.virtualbit";
    v20 = 259;
    v15 = (uint64_t *)sub_22E3E49C4(v6, v14, v13, (uint64_t)v19);
    v19[0] = "memptr.isvirtual";
    v20 = 259;
    v16 = sub_22E3C18F4(v6, 33, v15, v11, (uint64_t)v19);
    v20 = 257;
    return sub_22E3E58D4(v6, v12, v16, (uint64_t)v19);
  }
  return v12;
}

_QWORD *sub_22E67D214(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  unint64_t v14;
  __int128 v15;
  llvm::Type *v16;
  uint64_t *v17;
  llvm::LLVMContext *v18;
  uint64_t v19;
  llvm::Type *v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  llvm::GetElementPtrInst *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  __int16 v36;
  _OWORD v37[3];

  if ((*(_BYTE *)(a3 + 2) & 4) != 0)
  {
    v14 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 24));
    v15 = a4[1];
    v37[0] = *a4;
    v37[1] = v15;
    v37[2] = a4[2];
    v16 = (llvm::Type *)llvm::PointerType::get();
    v17 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v37, v16, v14, 0);
    v18 = *(llvm::LLVMContext **)(a2 + 88);
    v35[0] = "complete-offset.ptr";
    v36 = 259;
    v19 = sub_22F24CE30(a2 + 272, v18, v17, -2, (uint64_t)v35);
    v20 = *(llvm::Type **)(a2 + 88);
    v21 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    v36 = 257;
    v22 = (uint64_t *)sub_22E3C3200((uint64_t *)(a2 + 272), v20, v19, v21, 0, (uint64_t)v35);
    if ((*((_BYTE *)a4 + 24) & 3) != 0)
      v23 = sub_22F28ABCC(a4, (_QWORD *)a2);
    else
      v23 = *(_QWORD *)a4;
    v24 = *(_QWORD *)(a2 + 96);
    v36 = 257;
    v25 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v23, v24, (uint64_t)v35);
    v26 = *(_QWORD *)(a2 + 8);
    v36 = 257;
    v27 = sub_22E3E5044((uint64_t *)(a2 + 272), v26, v25, v22, (uint64_t)v35);
    v28 = *(_QWORD *)(a3 + 16);
    v29 = sub_22E4899EC(a2 + 1984, 3u, 32);
    *(_QWORD *)v29 = off_24FA63EF0;
    *((_QWORD *)v29 + 1) = v27;
    *((_QWORD *)v29 + 2) = v28;
    *((_QWORD *)v29 + 3) = a5;
    v30 = a4[2];
    v31 = *a4;
    v33 = a4[1];
    v34 = v30;
    v32 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, unint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a6, 1, &v32, a3 & 0xFFFFFFFFFFFFFFFBLL);
    return sub_22E48A190(a2, 0);
  }
  else
  {
    v11 = a4[1];
    v32 = *a4;
    v33 = v11;
    v34 = a4[2];
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, unint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a6, 0, &v32, a3 & 0xFFFFFFFFFFFFFFFBLL);
  }
}

void sub_22E67D430(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  __int16 v11;

  v6 = llvm::FunctionType::get();
  v8 = sub_22E633A04(*(_QWORD *)(a1 + 8), v6, "__cxa_rethrow", 0xDuLL, 0, 0, 0);
  if (a3)
  {
    sub_22F24EF20(a2, v8, v7, 0, 0);
  }
  else
  {
    v11 = 257;
    v9 = sub_22F24F1F4((_QWORD *)a2, v8, v7, 0, 0, (uint64_t)v10);
    *(_WORD *)(v9 + 18) = *(_WORD *)(v9 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  }
}

void sub_22E67D4FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  llvm::Type *v6;
  llvm::LLVMContext *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t BitCast;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  llvm::Value *v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *(llvm::Type **)(*(_QWORD *)(a3 + 16) + 8);
  v7 = (llvm::LLVMContext *)sub_22EF67C8C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  sub_22E66CB04((llvm::Type ***)(a2[18] + 280), v7);
  v8 = (unint64_t)v6 & 0xFFFFFFFFFFFFFFF0;
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v38);
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v38 = *(_QWORD *)(v9 + 88);
  v10 = llvm::FunctionType::get();
  v11 = sub_22E633A04(v9, v10, "__cxa_allocate_exception", 0x18uLL, 0, 0, 0);
  v13 = v12;
  v37[0] = llvm::ConstantInt::get();
  *(_QWORD *)v38 = "exception";
  WORD4(v39) = 259;
  v14 = sub_22F24EEDC((uint64_t)a2, v11, v13, (uint64_t)v37, 1, (uint64_t)v38);
  v15 = sub_22F368788(*(_QWORD *)(a2[18] + 144));
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v33[0] = v14;
  v33[1] = v17;
  v33[2] = v15;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_22E4D223C(a2, v16, (uint64_t)v33);
  v19 = sub_22F29C578(*(_QWORD *)(a1 + 8), v6, 1);
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v20)
    goto LABEL_4;
  if (*(_BYTE *)(v20 + 16) != 45)
    goto LABEL_4;
  v21 = sub_22F114198(*(_QWORD *)(v20 + 24));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
  if ((**(_QWORD **)(v21 + 128) & 0x100000000000) != 0)
    goto LABEL_4;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v29 = *(_QWORD *)(v28 + 16392);
  v37[0] = *(_QWORD *)(v28 + 16816);
  *(_WORD *)v38 = 0;
  v38[2] = 0;
  *(_OWORD *)&v38[4] = 0uLL;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  v30 = sub_22EF63D8C(v28, v29, v37, 1uLL, (__int128 *)v38, 0);
  v31 = sub_22EFD10F8(v21);
  sub_22E46A4BC(*(_QWORD *)(a1 + 8), v31 & 0xFFFFFFFFFFFFFFF8 | 1, 0, 0, 0, 0, 0);
  sub_22F28A778(*(uint64_t **)(a1 + 8), v32, v30, 0, 0);
  BitCast = llvm::ConstantExpr::getBitCast();
  if (!BitCast)
LABEL_4:
    BitCast = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v18);
  v37[0] = (uint64_t)v14;
  v37[1] = v19;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(v23 + 96);
  v37[2] = BitCast;
  *(_QWORD *)v38 = v24;
  *(_QWORD *)&v38[8] = v24;
  *(_QWORD *)&v38[16] = v24;
  v25 = llvm::FunctionType::get();
  v26 = sub_22E633A04(v23, v25, "__cxa_throw", 0xBuLL, 0, 0, 0);
  sub_22F24EF20((uint64_t)a2, v26, v27, (uint64_t)v37, 3);
}

uint64_t sub_22E67D7F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_22E685C2C(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22E483108(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v5;
      v8 = v6;
      while (1)
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v7 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
          v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v7 + 16));
        v10 = sub_22F10C2A4(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
        if (v10)
          v11 = (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v10;
        else
          v11 = 0;
        if (sub_22E463414(v11))
        {
          result = sub_22E685C2C(a1, v11);
          if (!(_DWORD)result)
            break;
        }
        v7 += 24;
        if (v7 == v8)
          return 1;
      }
    }
  }
  return result;
}

void sub_22E67D8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  llvm::Type *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type **v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  llvm::Value *v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  llvm::Type **v42;
  uint64_t v43;
  uint64_t v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  llvm::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Value *v63;
  llvm::Value *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  std::string::size_type v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t *v106;
  _OWORD v107[2];
  uint64_t v108;
  _BYTE v109[136];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
  {
    v5 = sub_22F25C4D8(a2);
    sub_22E685EA8(a2, v5, 1);
    return;
  }
  sub_22E4C8440(a2, *(_QWORD *)(a3 + 16), (uint64_t)&v74);
  if (v78)
  {
    *(_OWORD *)v109 = v75;
    *(_OWORD *)&v109[16] = v76;
    *(_OWORD *)&v109[32] = v77;
    sub_22F2469BC(a2, v109, v74, 0, (uint64_t)&v71);
  }
  else
  {
    v71 = v75;
    v72 = v76;
    v73 = v77;
  }
  v7 = *(_DWORD *)(a3 + 8);
  v8 = (uint64_t *)sub_22F25C4D8(a2);
  v106 = v8;
  v9 = *(_QWORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = *(_QWORD *)(v4 + 48) & 7 | v9;
  v11 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v10, 0);
  v12 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_DWORD *)(v12 + 16);
  if ((v13 & 0xFE) == 0x28)
  {
    if ((v13 & 0x100000) != 0)
    {
      do
      {
        while (1)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v12)
            break;
          v14 = *(_DWORD *)(v12 + 16);
          if ((v14 & 0xFE) != 0x28)
            break;
          if ((v14 & 0x100000) == 0)
            goto LABEL_13;
        }
        v12 = sub_22F10CF48(v12);
      }
      while ((*(_DWORD *)(v12 + 16) & 0x100000) != 0);
    }
LABEL_13:
    v15 = *(_QWORD *)(v12 + 32);
    v16 = (uint64_t)sub_22E685EA8(a2, (uint64_t)v8, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 16) == 45);
    v17 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
    if (v17 && *(_BYTE *)(v17 + 16) == 39)
    {
      v18 = *(_QWORD *)(v17 + 32);
      v19 = *(_QWORD **)(a2 + 144);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        v20 = (llvm::Type *)sub_22E66C868((uint64_t)(v19 + 35), v15, 0);
        v21 = *(unsigned __int8 *)(a2 + 130);
        *(_QWORD *)v109 = "exn.byref.tmp";
        *(_WORD *)&v109[32] = 259;
        v22 = sub_22E4D83CC(a2, v20, v21, (uint64_t)v109, 0, 0);
        v24 = v23;
        v25 = sub_22E6223E4(a2, v18, v16);
        *(_WORD *)&v109[32] = 257;
        v26 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v25, (uint64_t)v20, (uint64_t)v109);
        v16 = v22 & 0xFFFFFFFFFFFFFFF8;
        if (v22 <= 7)
          v27 = 0;
        else
          v27 = v22 & 0xFFFFFFFFFFFFFFF8;
        v28 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (v22 <= 7)
          v28 = 0;
        *(_QWORD *)v109 = v27;
        *(_QWORD *)&v109[8] = v28;
        v29 = 1 << (v24 & 7 | (8 * (v22 & 7)));
        if (v22 < 8)
          v29 = 0;
        *(_QWORD *)&v109[16] = v29;
        *(_DWORD *)&v109[24] = 0;
        *(_OWORD *)&v109[32] = 0uLL;
        sub_22E3BEDDC(a2 + 272, v26, (uint64_t)v109);
      }
      else
      {
        v43 = sub_22E699F3C(v19);
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43);
        v45 = *(llvm::LLVMContext **)(a2 + 8);
        *(_WORD *)&v109[32] = 257;
        v16 = sub_22E4363E4((uint64_t *)(a2 + 272), v45, v8, v44, (uint64_t)v109);
      }
    }
    v46 = sub_22E6223E4(a2, v15, v16);
    *(_QWORD *)&v97 = "exn.byref";
    LOWORD(v99) = 259;
    v42 = (llvm::Type **)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v46, v11, (uint64_t)&v97);
    v97 = v71;
    v98 = v72;
    v99 = v73;
    v40 = &v97;
    v41 = a2 + 272;
  }
  else
  {
    v30 = sub_22E619D68(v10);
    if (v30 == 2)
    {
      v31 = sub_22F10C2A4(v12);
      if (v31)
      {
        if ((*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 >= 3)
          v32 = 0;
        else
          v32 = v31;
      }
      else
      {
        v32 = 0;
      }
      v47 = sub_22E47FE60(*(_QWORD *)(a2 + 144), v32);
      v48 = llvm::PointerType::get();
      v49 = sub_22EFBC5B4(v4);
      if (v49)
      {
        v59 = (unsigned __int8 *)v49;
        v60 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)v109 = *(_QWORD *)(v60 + 96);
        v61 = llvm::FunctionType::get();
        v62 = sub_22E633A04(v60, v61, "__cxa_get_exception_ptr", 0x17uLL, 0, 0, 0);
        *(_WORD *)&v109[32] = 257;
        v64 = sub_22F24EEDC(a2, v62, v63, (uint64_t)&v106, 1, (uint64_t)v109);
        *(_WORD *)&v109[32] = 257;
        v65 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v64, v48, (uint64_t)v109);
        v66 = sub_22F0032CC(v59);
        v67 = *(_QWORD *)(v4 + 48);
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v67, (uint64_t)&v79);
        *(_QWORD *)v109 = v65;
        *(_QWORD *)&v109[8] = v11;
        *(_QWORD *)&v109[16] = v47;
        *(_DWORD *)&v109[24] = 0;
        *(_OWORD *)&v109[32] = 0uLL;
        v68 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v88 = v79;
        v89 = v80;
        *(_QWORD *)&v90 = v81;
        *((_QWORD *)&v97 + 1) = 0;
        v98 = 0uLL;
        LODWORD(v99) = 0;
        *((_QWORD *)&v99 + 1) = 0;
        *(_QWORD *)&v100 = 0;
        v101 = 0uLL;
        *(_QWORD *)((char *)&v102 + 4) = 2;
        LODWORD(v97) = 0;
        v103 = 0u;
        v104 = 0u;
        sub_22E3C113C((uint64_t)&v97, (__int128 *)v109, v67, 2, &v88, v68);
        *(_QWORD *)&v88 = a2;
        *(_OWORD *)&v109[104] = v103;
        *(_OWORD *)&v109[120] = v104;
        *(_QWORD *)v109 = v66;
        v110 = v105;
        *(_OWORD *)&v109[40] = v99;
        *(_OWORD *)&v109[56] = v100;
        *(_OWORD *)&v109[72] = v101;
        *(_OWORD *)&v109[88] = v102;
        *(_OWORD *)&v109[8] = v97;
        *(_OWORD *)&v109[24] = v98;
        sub_22F253D5C(a2 + 4064, v109, (uint64_t)&v109[8], (uint64_t)&v79);
        *((_QWORD *)&v88 + 1) = v66;
        LOBYTE(v89) = 1;
        *((_QWORD *)&v89 + 1) = 0;
        sub_22F2530F4((uint64_t *)(a2 + 1984));
        *(_OWORD *)v109 = v71;
        *(_OWORD *)&v109[16] = v72;
        *(_OWORD *)&v109[32] = v73;
        *(_QWORD *)&v109[48] = 0;
        v109[56] = 0;
        sub_22E4EF100(a2, (uint64_t)v59, (uint64_t)v109);
        v69 = *(_QWORD *)(a2 + 2000);
        *(_QWORD *)(a2 + 2016) = *(_QWORD *)(v69 + 16);
        *(_QWORD *)(a2 + 2000) = v69 + 32;
        sub_22F254324((uint64_t)&v88 + 8, a2);
        *((_QWORD *)&v88 + 1) = 0;
        sub_22E685EA8(a2, (uint64_t)v106, 1);
        if (*((_QWORD *)&v88 + 1))
          sub_22F254324((uint64_t)&v88 + 8, v88);
      }
      else
      {
        v50 = sub_22E685EA8(a2, (uint64_t)v8, 1);
        *(_WORD *)&v109[32] = 257;
        v51 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v50, v48, (uint64_t)v109);
        v88 = v71;
        v89 = v72;
        v90 = v73;
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v10, (uint64_t)&v111);
        v97 = v88;
        v98 = v89;
        v99 = v90;
        v52 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v79 = v111;
        v80 = v112;
        *(_QWORD *)&v81 = v113;
        memset(&v109[8], 0, 28);
        *(_QWORD *)&v109[48] = 0;
        *(_QWORD *)&v109[40] = 0;
        *(_OWORD *)&v109[64] = 0uLL;
        *(_QWORD *)&v109[84] = 2;
        *(_DWORD *)v109 = 0;
        memset(&v109[96], 0, 32);
        sub_22E3C113C((uint64_t)v109, &v97, v10, 2, &v79, v52);
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v10, (uint64_t)&v111);
        *(_QWORD *)&v88 = v51;
        *((_QWORD *)&v88 + 1) = v11;
        *(_QWORD *)&v89 = v47;
        DWORD2(v89) = 0;
        v90 = 0uLL;
        v53 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v79 = v111;
        v80 = v112;
        *(_QWORD *)&v81 = v113;
        *((_QWORD *)&v97 + 1) = 0;
        v98 = 0uLL;
        LODWORD(v99) = 0;
        *((_QWORD *)&v99 + 1) = 0;
        *(_QWORD *)&v100 = 0;
        v101 = 0uLL;
        *(_QWORD *)((char *)&v102 + 4) = 2;
        LODWORD(v97) = 0;
        v103 = 0u;
        v104 = 0u;
        sub_22E3C113C((uint64_t)&v97, &v88, v10, 2, &v79, v53);
        v94 = *(_OWORD *)&v109[96];
        v95 = *(_OWORD *)&v109[112];
        v96 = *(_QWORD *)&v109[128];
        v90 = *(_OWORD *)&v109[32];
        v91 = *(_OWORD *)&v109[48];
        v92 = *(_OWORD *)&v109[64];
        v93 = *(_OWORD *)&v109[80];
        v88 = *(_OWORD *)v109;
        v89 = *(_OWORD *)&v109[16];
        v85 = v103;
        v86 = v104;
        v87 = v105;
        v81 = v99;
        v82 = v100;
        v83 = v101;
        v84 = v102;
        v79 = v97;
        v80 = v98;
        sub_22E4EF4B8((_QWORD *)a2, &v88, &v79, v10, 0, 0);
      }
      goto LABEL_47;
    }
    v33 = v30;
    v34 = sub_22E685EA8(a2, (uint64_t)v8, 0);
    v35 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    if ((v35 & 0xFE) != 0x28)
    {
      v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                       + 16) > 0x27u
         || ((1 << v35) & 0x8100000400) == 0;
      v37 = v35 & 0xFF800FF;
      if (v36 && v37 != 114294795)
      {
        v54 = llvm::PointerType::get();
        *(_WORD *)&v109[32] = 257;
        v55 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v34, v54, (uint64_t)v109);
        sub_22E619C24(v55, v10, 0, 0, a2, (uint64_t)&v97);
        v79 = v71;
        v80 = v72;
        v81 = v73;
        sub_22E6281E0(*(_QWORD **)(a2 + 144), v10, (uint64_t)v107);
        *(_OWORD *)v109 = v79;
        *(_OWORD *)&v109[16] = v80;
        *(_OWORD *)&v109[32] = v81;
        v56 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v111 = v107[0];
        v112 = v107[1];
        v113 = v108;
        v89 = 0uLL;
        LODWORD(v90) = 0;
        *((_QWORD *)&v88 + 1) = 0;
        *((_QWORD *)&v90 + 1) = 0;
        *(_QWORD *)&v91 = 0;
        v92 = 0uLL;
        *(_QWORD *)((char *)&v93 + 4) = 2;
        LODWORD(v88) = 0;
        v94 = 0u;
        v95 = 0u;
        sub_22E3C113C((uint64_t)&v88, (__int128 *)v109, v10, 2, &v111, v56);
        *(_OWORD *)&v109[96] = v103;
        *(_OWORD *)&v109[112] = v104;
        *(_QWORD *)&v109[128] = v105;
        *(_OWORD *)&v109[32] = v99;
        *(_OWORD *)&v109[48] = v100;
        *(_OWORD *)&v109[64] = v101;
        *(_OWORD *)&v109[80] = v102;
        *(_OWORD *)v109 = v97;
        *(_OWORD *)&v109[16] = v98;
        if (v33 == 1)
        {
          *(_QWORD *)&v79 = a2;
          *((_QWORD *)&v79 + 1) = a2 + 272;
          LOWORD(v80) = 0;
          v57 = sub_22E5027E0((uint64_t)&v79, (uint64_t)v109, v7);
          *(_OWORD *)&v109[96] = v94;
          *(_OWORD *)&v109[112] = v95;
          *(_QWORD *)&v109[128] = v96;
          *(_OWORD *)&v109[32] = v90;
          *(_OWORD *)&v109[48] = v91;
          *(_OWORD *)&v109[64] = v92;
          *(_OWORD *)&v109[80] = v93;
          *(_OWORD *)v109 = v88;
          *(_OWORD *)&v109[16] = v89;
          *(_QWORD *)&v79 = a2;
          *((_QWORD *)&v79 + 1) = a2 + 272;
          LOWORD(v80) = 0;
          sub_22E5025C8((uint64_t *)&v79, v57, v58, (uint64_t)v109, 1);
        }
        else
        {
          v70 = sub_22F25F748(a2, (uint64_t)v109, v7);
          v85 = v94;
          v86 = v95;
          v87 = v96;
          v81 = v90;
          v82 = v91;
          v83 = v92;
          v84 = v93;
          v79 = v88;
          v80 = v89;
          sub_22E4E87FC(a2, v70, (uint64_t)&v79, 1u);
        }
        goto LABEL_47;
      }
    }
    *(_QWORD *)v109 = "exn.casted";
    *(_WORD *)&v109[32] = 259;
    v39 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v34, v11, (uint64_t)v109);
    if ((v9 & 8) != 0)
      __asm { BR              X10 }
    *(_OWORD *)v109 = v71;
    *(_OWORD *)&v109[16] = v72;
    *(_OWORD *)&v109[32] = v73;
    v40 = (__int128 *)v109;
    v41 = a2 + 272;
    v42 = (llvm::Type **)v39;
  }
  sub_22E3BEDDC(v41, v42, (uint64_t)v40);
LABEL_47:
  sub_22E4C9A74(a2, (uint64_t)&v74);
}

llvm::Value *sub_22E67E368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int hasExternalWeakLinkage;
  unsigned int v17;
  int v18;
  uint64_t v20;
  llvm::BasicBlock *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;
  void *v33[2];
  _BYTE v34[16];
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Context;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[3] = *MEMORY[0x24BDAC8D0];
  v29 = a3;
  v4 = *(_QWORD *)(a2 + 144);
  if (!a3)
  {
    v5 = sub_22F25C210(v4);
    v35 = 257;
    return sub_22F24EE8C(a2, v5, v6, (uint64_t)v33);
  }
  v33[0] = *(void **)(v4 + 96);
  v8 = llvm::FunctionType::get();
  v9 = sub_22E633A04(v4, v8, "__clang_call_terminate", 0x16uLL, 0, 1, 0);
  v11 = v10;
  v12 = llvm::Value::stripPointerCasts(v10);
  if (*(_QWORD *)(v12 + 72) == v12 + 72)
  {
    v13 = v12;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v14 = *(_DWORD *)(v13 + 32);
    v15 = v14 & 0xFFFFFFF0 | 3;
    *(_DWORD *)(v13 + 32) = v15;
    if ((v14 & 0x30) != 0)
    {
      hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
      v15 = *(_DWORD *)(v13 + 32);
      if (!hasExternalWeakLinkage)
        v15 |= 0x4000u;
    }
    v17 = v15 & 0xFFFFFFCF | 0x10;
    *(_DWORD *)(v13 + 32) = v17;
    if ((v15 & 0xF) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13) & 1) != 0)
      {
LABEL_11:
        v18 = *(_DWORD *)(*(_QWORD *)(v4 + 216) + 76);
        if ((v18 - 8) >= 2 && v18 != 5)
        {
          llvm::Value::getName((llvm::Value *)v13);
          llvm::Module::getOrInsertComdat();
          llvm::GlobalObject::setComdat();
        }
        v35 = 257;
        v20 = operator new();
        v21 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
        v33[0] = v34;
        v33[1] = (void *)0x200000000;
        Context = llvm::BasicBlock::getContext(v21);
        v39 = &v47;
        v40 = v48;
        v41 = 0;
        v42 = 0;
        v43 = 512;
        v44 = 7;
        v45 = 0;
        v46 = 0;
        v47 = MEMORY[0x24BED83B8] + 16;
        v48[0] = &off_24FA66C70;
        v36 = v20;
        v37 = v20 + 40;
        v48[1] = 0;
        v48[2] = v4;
        if ((*(_WORD *)(v13 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v13);
        v32 = *(_QWORD *)(v13 + 88);
        v30[0] = *(_QWORD *)(v4 + 96);
        v22 = llvm::FunctionType::get();
        v23 = sub_22E633A04(v4, v22, "__cxa_begin_catch", 0x11uLL, 0, 0, 0);
        v31 = 257;
        v25 = sub_22E462B78((uint64_t *)v33, v23, v24, (uint64_t)&v32, 1, (uint64_t)v30, 0);
        llvm::Value::getContext(v25);
        *((_QWORD *)v25 + 8) = llvm::AttributeList::addAttributeAtIndex();
        *((_WORD *)v25 + 9) = *((_WORD *)v25 + 9) & 0xF003 | (4 * *(_WORD *)(v4 + 136));
        v26 = sub_22F25C210(v4);
        v31 = 257;
        v28 = sub_22E462B78((uint64_t *)v33, v26, v27, 0, 0, (uint64_t)v30, 0);
        llvm::Value::getContext(v28);
        *((_QWORD *)v28 + 8) = llvm::AttributeList::addAttributeAtIndex();
        llvm::Value::getContext(v28);
        *((_QWORD *)v28 + 8) = llvm::AttributeList::addAttributeAtIndex();
        *((_WORD *)v28 + 9) = *((_WORD *)v28 + 9) & 0xF003 | (4 * *(_WORD *)(v4 + 136));
        sub_22F24866C((uint64_t)v33);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v48);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v47);
        if (v33[0] != v34)
          free(v33[0]);
        goto LABEL_20;
      }
      v17 = *(_DWORD *)(v13 + 32);
    }
    *(_DWORD *)(v13 + 32) = v17 | 0x4000;
    goto LABEL_11;
  }
LABEL_20:
  v35 = 257;
  return sub_22F24EEDC(a2, v9, v11, (uint64_t)&v29, 1, (uint64_t)v33);
}

uint64_t sub_22E67E784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4[3];
  void *v5;
  uint64_t v6;
  _QWORD v7[17];

  v7[16] = *MEMORY[0x24BDAC8D0];
  v4[0] = *(_QWORD *)(a1 + 8);
  v4[1] = **(_QWORD **)(v4[0] + 200);
  v4[2] = a1;
  v5 = v7;
  v6 = 0x1000000000;
  v2 = sub_22E686034(v4, a2);
  if (v5 != v7)
    free(v5);
  return v2;
}

uint64_t sub_22E67E81C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
}

uint64_t sub_22E67E83C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22E67E844(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v3 = llvm::FunctionType::get();
  v4 = sub_22E633A04(*(_QWORD *)(a2 + 144), v3, "__cxa_bad_typeid", 0x10uLL, 0, 0, 0);
  v9 = 257;
  v6 = sub_22F24F1F4((_QWORD *)a2, v4, v5, 0, 0, (uint64_t)v8);
  *(_WORD *)(v6 + 18) = *(_WORD *)(v6 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Value::getContext((llvm::Value *)v6);
  *(_QWORD *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return sub_22F24866C(a2 + 272);
}

uint64_t sub_22E67E90C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, llvm::LLVMContext *a5)
{
  unint64_t v9;
  __int128 v10;
  llvm::Type *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Declaration;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  _BYTE v24[32];
  __int16 v25;
  _OWORD v26[3];
  _QWORD v27[4];

  v27[3] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v10 = a4[1];
  v26[0] = *a4;
  v26[1] = v10;
  v26[2] = a4[2];
  v11 = (llvm::Type *)llvm::PointerType::get();
  v12 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v26, v11, v9, 0);
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v13 + 712) + 136) == 1)
  {
    v14 = *(_QWORD *)(v13 + 96);
    v25 = 257;
    v15 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v12, v14, (uint64_t)v24);
    v27[2] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    Declaration = llvm::Intrinsic::getDeclaration();
    v17 = Declaration;
    if (Declaration)
      v18 = *(_QWORD *)(Declaration + 24);
    else
      v18 = 0;
    v27[0] = v15;
    v27[1] = llvm::ConstantInt::get();
    v25 = 257;
    v19 = sub_22E462B78((uint64_t *)(a2 + 272), v18, v17, (uint64_t)v27, 2, (uint64_t)v24, 0);
    v20 = llvm::PointerType::get();
    v25 = 257;
    v21 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v19, v20, (uint64_t)v24);
  }
  else
  {
    v25 = 257;
    v21 = sub_22F24CE30(a2 + 272, a5, v12, -1, (uint64_t)v24);
  }
  v22 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v25 = 257;
  return sub_22E3C3200((uint64_t *)(a2 + 272), a5, v21, v22, 0, (uint64_t)v24);
}

uint64_t sub_22E67EB08(uint64_t a1, uint64_t a2)
{
  return a2;
}

llvm::Constant **sub_22E67EB10(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, llvm::LLVMContext *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  const char *v38;
  uint64_t v39;
  llvm::LLVMContext *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Constant **v47;
  _QWORD *v48;
  llvm::Type *v49;
  uint64_t NullValue;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  llvm::LLVMContext *v61;
  _OWORD v62[3];
  _QWORD v63[4];
  const char *v64;
  const char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  llvm *v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  _QWORD v75[5];
  void *v76;
  uint64_t v77;
  _DWORD v78[26];
  uint64_t v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v12 = a2[18];
  v13 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(v12 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v12 + 144) + 15088) - 24)+ 120));
  sub_22E66CB04((llvm::Type ***)(v12 + 280), v13);
  v61 = a5;
  v60 = sub_22E66CB04((llvm::Type ***)(a2[18] + 280), a5);
  v14 = a2[18];
  v15 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
    v16 = (unint64_t)sub_22F10D2BC(a4);
  v58 = sub_22F29C578(v14, (llvm::Type *)(v16 & 0xFFFFFFFFFFFFFFF0), 0);
  v17 = a2[18];
  v18 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v18 + 8) & 0xF) != 0)
    v18 = (unint64_t)sub_22F10D2BC(a6);
  v57 = sub_22F29C578(v17, (llvm::Type *)(v18 & 0xFFFFFFFFFFFFFFF0), 0);
  v19 = sub_22F10C2A4(*v15);
  if (v19)
  {
    if ((*(_DWORD *)(v19 + 28) & 0x7Fu) - 35 >= 3)
      v20 = 0;
    else
      v20 = v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = sub_22F10C2A4(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0));
  if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3)
    v21 = 0;
  v22 = *(_QWORD *)(a2[18] + 144);
  v64 = 0;
  v65 = (const char *)&v65;
  v66 = (uint64_t *)&v65;
  v67 = 0;
  v68 = 1;
  for (i = 5; i != 21; i += 2)
    (&v64)[i] = 0;
  v71 = v75;
  v72 = v75;
  v73 = 4;
  v74 = 0;
  v75[4] = 0;
  v76 = v78;
  v77 = 0x400000000;
  v78[24] = 0;
  v79 = 0;
  v80 = 257;
  v81 = 0;
  v55 = v20;
  if (sub_22EFB36DC(v21, v20, (unint64_t *)&v64))
  {
    v24 = v66;
    if (v66 != (uint64_t *)&v65)
    {
      v54 = a1;
      v25 = 0;
      v26 = 0;
      while (1)
      {
        if (!*((_DWORD *)v24 + 32))
        {
          ++v25;
          v27 = *((unsigned int *)v24 + 6);
          if ((_DWORD)v27)
            break;
        }
LABEL_32:
        v24 = (uint64_t *)v24[1];
        if (v24 == (uint64_t *)&v65)
          goto LABEL_33;
      }
      v28 = (unint64_t *)v24[2];
      v29 = 24 * v27;
      while ((*(_BYTE *)(*v28 + 12) & 1) == 0)
      {
        if (v25 <= 1)
        {
          v30 = sub_22F0C975C(v22, v28[1]);
          v31 = *(_QWORD *)(**(_QWORD **)(*v28 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
            v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*v28 + 16));
          v32 = sub_22F10C2A4(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
          if (v32)
          {
            if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3)
              v33 = 0;
            else
              v33 = v32;
          }
          else
          {
            v33 = 0;
          }
          v26 += sub_22E46A3EC(v30, v33);
        }
        v28 += 3;
        v29 -= 24;
        if (!v29)
          goto LABEL_32;
      }
LABEL_33:
      a1 = v54;
    }
  }
  if (v76 != v78)
    free(v76);
  if (v72 != v71)
    free(v72);
  if ((v68 & 1) == 0)
    llvm::deallocate_buffer(v69, (void *)(16 * v70));
  sub_22E687D9C((uint64_t *)&v65);
  v34 = llvm::ConstantInt::get();
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v35 = (uint64_t *)sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v35 = *(uint64_t **)a3;
  v36 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v36 + 184) + 1380) & 3) != 0)
  {
    v37 = *(_OWORD *)(a3 + 16);
    v62[0] = *(_OWORD *)a3;
    v62[1] = v37;
    v62[2] = *(_OWORD *)(a3 + 32);
    sub_22E484FA4(a2, (uint64_t)v62, *(llvm::Type **)(v36 + 96), v55, 1);
  }
  v63[0] = sub_22F25E214(a2, v35);
  v63[1] = v58;
  v63[2] = v57;
  v63[3] = v34;
  v38 = (const char *)a2[12];
  v39 = a2[18];
  v40 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(v39 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v39 + 144) + 15088) - 24)+ 120));
  v41 = sub_22E66CB04((llvm::Type ***)(v39 + 280), v40);
  v64 = v38;
  v65 = v38;
  v66 = (uint64_t *)v38;
  v67 = v41;
  v42 = llvm::FunctionType::get();
  v82 = 0x2D00000025;
  v43 = llvm::AttributeList::get();
  v44 = sub_22E633A04(a2[18], v42, "__dynamic_cast", 0xEuLL, v43, 0, 0);
  LOWORD(v68) = 257;
  v46 = sub_22F24EEDC((uint64_t)a2, v44, v45, (uint64_t)v63, 4, (uint64_t)&v64);
  LOWORD(v68) = 257;
  v47 = (llvm::Constant **)sub_22E3C1740(a2 + 34, 49, (uint64_t)v46, v60, (uint64_t)&v64);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v61 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28)
  {
    v64 = "dynamic_cast.bad_cast";
    LOWORD(v68) = 259;
    v48 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    LOWORD(v68) = 257;
    NullValue = llvm::Constant::getNullValue(*v47, v49);
    v51 = sub_22E3C18F4((uint64_t)(a2 + 34), 32, (uint64_t *)v47, NullValue, (uint64_t)&v64);
    v52 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v52, v48, a7, v51, 0);
    LOWORD(v68) = 257;
    sub_22E3C12C8(a2 + 34, v52, (uint64_t)&v64);
    sub_22E5ED9B4(a2, v48, 0);
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 336))(a1, a2);
  }
  return v47;
}

uint64_t sub_22E67F0E0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, llvm::LLVMContext *a5)
{
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  llvm::Type *v13;
  uint64_t *v14;
  llvm::LLVMContext *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  llvm::LLVMContext *v22;
  __int128 v23;
  llvm::Type *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::GetElementPtrInst *v31;
  _OWORD v33[3];
  const char *v34;
  __int16 v35;
  _OWORD v36[3];
  _QWORD v37[4];
  __int16 v38;

  v9 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a5);
  v10 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 24));
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 712) + 136) == 1)
  {
    v11 = a3[2];
    v12 = *a3;
    v36[1] = a3[1];
    v36[2] = v11;
    v36[0] = v12;
    v13 = (llvm::Type *)llvm::PointerType::get();
    v14 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v36, v13, v10, 0);
    v15 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 24);
    v38 = 257;
    sub_22E3E51B0((uint64_t *)(a2 + 272), v15, v14, 4294967294, (uint64_t)v37);
    v34 = "offset.to.top";
    v35 = 259;
    v16 = (uint64_t *)llvm::User::operator new((llvm::User *)0x40);
    v38 = 257;
    llvm::LoadInst::LoadInst();
    (*(void (**)(_QWORD, uint64_t *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), v16, &v34, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
    v17 = *(unsigned int *)(a2 + 280);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a2 + 272);
      v19 = v18 + 16 * v17;
      do
      {
        llvm::Instruction::setMetadata();
        v18 += 16;
      }
      while (v18 != v19);
    }
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 144);
    v21 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(v20 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v20 + 144) + 15088) - 24)+ 120));
    v22 = (llvm::LLVMContext *)sub_22E66CB04((llvm::Type ***)(v20 + 280), v21);
    v23 = a3[1];
    v33[0] = *a3;
    v33[1] = v23;
    v33[2] = a3[2];
    v24 = (llvm::Type *)llvm::PointerType::get();
    v25 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v33, v24, v10, 0);
    v38 = 257;
    v26 = sub_22F24CE30(a2 + 272, v22, v25, -2, (uint64_t)v37);
    v27 = *(unsigned __int8 *)(a2 + 130);
    v37[0] = "offset.to.top";
    v38 = 259;
    v16 = (uint64_t *)sub_22E3C3200((uint64_t *)(a2 + 272), v22, v26, (63 - __clz(v27)) | 0x100u, 0, (uint64_t)v37);
  }
  if ((*((_BYTE *)a3 + 24) & 3) != 0)
    v28 = (uint64_t *)sub_22F28ABCC(a3, (_QWORD *)a2);
  else
    v28 = *(uint64_t **)a3;
  v29 = (uint64_t *)sub_22F25E214((_QWORD *)a2, v28);
  v30 = *(_QWORD *)(a2 + 8);
  v38 = 257;
  v31 = sub_22E3E5044((uint64_t *)(a2 + 272), v30, v29, v16, (uint64_t)v37);
  v38 = 257;
  return sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v31, v9, (uint64_t)v37);
}

uint64_t sub_22E67F39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v3 = llvm::FunctionType::get();
  v4 = sub_22E633A04(*(_QWORD *)(a2 + 144), v3, "__cxa_bad_cast", 0xEuLL, 0, 0, 0);
  v9 = 257;
  v6 = sub_22F24F1F4((_QWORD *)a2, v4, v5, 0, 0, (uint64_t)v8);
  *(_WORD *)(v6 + 18) = *(_WORD *)(v6 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  llvm::Value::getContext((llvm::Value *)v6);
  *(_QWORD *)(v6 + 64) = llvm::AttributeList::addAttributeAtIndex();
  sub_22F24866C(a2 + 272);
  return 1;
}

uint64_t sub_22E67F468(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type *v21;
  unint64_t v22;
  const char *v24;
  __int16 v25;
  _OWORD v26[3];
  _QWORD v27[4];
  __int16 v28;

  v9 = a3[1];
  v26[0] = *a3;
  v26[1] = v9;
  v26[2] = a3[2];
  v10 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v26, *(llvm::Type **)(*(_QWORD *)(a1 + 8) + 96), a4, 0);
  v11 = sub_22F122BCC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 712), a4, a5);
  v12 = *(llvm::LLVMContext **)(a2 + 8);
  v27[0] = "vbase.offset.ptr";
  v28 = 259;
  v13 = sub_22F245798(a2 + 272, v12, v10, v11, (uint64_t)v27);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 712) + 136) == 1)
  {
    v14 = llvm::PointerType::get();
    v28 = 257;
    sub_22E3C1740((uint64_t *)(a2 + 272), 49, v13, v14, (uint64_t)v27);
    v24 = "vbase.offset";
    v25 = 259;
    v15 = llvm::User::operator new((llvm::User *)0x40);
    v28 = 257;
    llvm::LoadInst::LoadInst();
    (*(void (**)(_QWORD, uint64_t, const char **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), v15, &v24, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
    v16 = *(unsigned int *)(a2 + 280);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)(a2 + 272);
      v18 = v17 + 16 * v16;
      do
      {
        llvm::Instruction::setMetadata();
        v17 += 16;
      }
      while (v17 != v18);
    }
  }
  else
  {
    v19 = llvm::PointerType::get();
    v28 = 257;
    v20 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v13, v19, (uint64_t)v27);
    v21 = *(llvm::Type **)(*(_QWORD *)(a1 + 8) + 88);
    v22 = *(unsigned __int8 *)(a2 + 130);
    v27[0] = "vbase.offset";
    v28 = 259;
    return sub_22E3C3200((uint64_t *)(a2 + 272), v21, v20, (63 - __clz(v22)) | 0x100u, 0, (uint64_t)v27);
  }
  return v15;
}

void sub_22E67F668(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  sub_22E62F700();
  v3 = *(_WORD *)(a2 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_17;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_17;
    }
    if (v3 != 81)
    {
LABEL_12:
      v5 = v3 - 52;
      v6 = v3 - 33 >= 5;
      v7 = -48;
      if (!v6)
        v7 = -64;
      if (v5 >= 6)
        v4 = v7;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_11;
    if (v3 == 16)
    {
LABEL_4:
      v4 = -48;
      goto LABEL_17;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_4;
LABEL_11:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 72 + v4 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  sub_22E3CD31C((uint64_t *)(v10[13] + 96), v10[13]);
  if ((*(_QWORD *)v10[16] & 0x800) == 0)
    sub_22E62F700();
}

uint64_t sub_22E67F79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 7;
  if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x37)
  {
    if (v7 != 1)
      return 0;
  }
  else if (v7 != 2)
  {
    return 0;
  }
  v9 = v6 + 72;
  v10 = *(_WORD *)(v6 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 70)
  {
    if (v10 != 83)
    {
      if (v10 == 71)
      {
        v11 = -56;
        goto LABEL_21;
      }
      if (v10 == 81)
        goto LABEL_21;
      goto LABEL_16;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_15;
    if (v10 != 16)
    {
      if (((1 << v10) & 0x1066) != 0)
        goto LABEL_21;
      if (v10 != 24)
      {
LABEL_15:
        if (v10 == 70)
        {
          v11 = -64;
          goto LABEL_21;
        }
LABEL_16:
        v12 = v10 - 52;
        v13 = (v10 - 33) >= 5;
        v14 = -48;
        if (!v13)
          v14 = -64;
        if (v12 >= 6)
          v11 = v14;
        else
          v11 = -72;
        goto LABEL_21;
      }
    }
    v11 = -48;
  }
LABEL_21:
  v15 = *(_QWORD *)(v9 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  sub_22E3CD31C((uint64_t *)(v17[13] + 96), v17[13]);
  result = 0;
  if (*(_DWORD *)(v17[16] + 20))
  {
    v18 = *a4 + 8;
    v19 = sub_22EF5B848(v5, *(_QWORD *)(v5 + 16816), 0);
    sub_22F2A156C(a4, v18, (uint64_t *)&v19);
    return 1;
  }
  return result;
}

uint64_t sub_22E67F914()
{
  return 0;
}

void sub_22E67F91C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_22E62F700();
  sub_22E62F700();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_BYTE *)(v3 + 82) & 0xC) != 0 || sub_22EFD7260(v3))
    sub_22E62F700();
}

uint64_t sub_22E67F9A8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = a2[211];
  result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 656))(a1, v7, a2[212]);
  if ((_DWORD)result)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(a1[1] + 144);
    v11 = sub_22EF5B848(v10, *(_QWORD *)(v10 + 16816), 0);
    LODWORD(v9) = *(_DWORD *)(v9 + 24);
    v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(v10 + 15192), "vtt", 3uLL);
    v13 = sub_22EFC4364(v10, 0, v9, v12, v11, 3);
    v14 = *a4 + 8;
    v15 = v13;
    result = sub_22F24C084(a4, v14, &v15);
    a2[727] = v13;
  }
  return result;
}

uint64_t sub_22E67FA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  llvm::Type **v10;
  __int128 v11;
  _OWORD v12[3];
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 1592);
  if (!v4 || (result = sub_22E474EBC(v4), (result & 1) == 0))
  {
    *(_QWORD *)(a2 + 4200) = sub_22E46B144(a1, a2);
    if (*(_QWORD *)(a2 + 5816))
    {
      v14 = *(_QWORD *)(a2 + 5816);
      v15 = 0;
      v6 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v14, &v15);
      v7 = v15;
      if (!v6)
        v7 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
      v8 = *(_OWORD *)(v7 + 8);
      v9 = *(_OWORD *)(v7 + 40);
      v13[1] = *(_OWORD *)(v7 + 24);
      v13[2] = v9;
      v13[0] = v8;
      *(_QWORD *)(a2 + 5824) = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v13, "vtt");
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696));
    if ((_DWORD)result)
    {
      v10 = *(llvm::Type ***)(a2 + 4200);
      v11 = *(_OWORD *)(a2 + 1752);
      v12[0] = *(_OWORD *)(a2 + 1736);
      v12[1] = v11;
      v12[2] = *(_OWORD *)(a2 + 1768);
      return sub_22E3BEDDC(a2 + 272, v10, (uint64_t)v12);
    }
  }
  return result;
}

void sub_22E67FB74(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v12 = a3 & 0xFFFFFFFFFFFFFFF8 | a4;
  if (((*(uint64_t (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 656))(a1, v12, 0) & 1) != 0)
  {
    v13 = sub_22F250154(a2, v12, 0, a5, a6);
    v14 = sub_22EF5B848(*(_QWORD *)(a1[1] + 144), *(_QWORD *)(*(_QWORD *)(a1[1] + 144) + 16816), 0);
    v15[0] = v16;
    v16[0] = v13;
    v16[1] = v14;
    v15[1] = (void *)0x100000001;
    sub_22F2A166C((uint64_t)v15, (_QWORD *)a7);
    if (v15[0] != v16)
      free(v15[0]);
  }
  else
  {
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_QWORD *)a7 = a7 + 16;
    *(_QWORD *)(a7 + 8) = 0x100000000;
    *(_QWORD *)(a7 + 32) = a7 + 48;
    *(_DWORD *)(a7 + 44) = 1;
  }
}

uint64_t sub_22E67FCA4(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  return sub_22F250154(a2, a3 & 0xFFFFFFFFFFFFFFF8 | a4, 0, a5, a6);
}

uint64_t sub_22E67FCC4(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _OWORD *a7, unint64_t a8)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v30[7];
  uint64_t v31[4];
  int v32;
  uint64_t v33;
  _OWORD v34[3];

  v14 = a3 & 0xFFFFFFFFFFFFFFF8 | a4;
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 464))(a1);
  v16 = sub_22EF5B848(*(_QWORD *)(a1[1] + 144), *(_QWORD *)(*(_QWORD *)(a1[1] + 144) + 16816), 0);
  v31[0] = 0;
  v17 = a1[1];
  if (a4 == 2 || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 144) + 2000) + 8) & 0x2000000000) == 0)
    goto LABEL_6;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if ((*(_BYTE *)(v18 + 82) & 0xC) == 0 && !sub_22EFD7260(v18))
  {
    v17 = a1[1];
LABEL_6:
    sub_22E46A4BC(v17, v14, 0, 0, 0, 0, 0);
    v31[0] = v19;
    v31[1] = 0;
    v31[2] = v14;
    v31[3] = 0;
    v32 = 0;
    v33 = 0;
    goto LABEL_29;
  }
  v20 = *(_WORD *)(a3 + 80) & 0x7F;
  v21 = -40;
  if (v20 > 0x46)
  {
    if (v20 != 83)
    {
      if (v20 == 71)
      {
        v21 = -56;
        goto LABEL_23;
      }
      if (v20 == 81)
        goto LABEL_23;
LABEL_18:
      v22 = v20 - 52;
      v23 = v20 - 33 >= 5;
      v24 = -48;
      if (!v23)
        v24 = -64;
      if (v22 >= 6)
        v21 = v24;
      else
        v21 = -72;
    }
  }
  else
  {
    if (v20 > 0x18)
      goto LABEL_17;
    if (v20 != 16)
    {
      if (((1 << v20) & 0x1066) != 0)
        goto LABEL_23;
      if (v20 != 24)
      {
LABEL_17:
        if (v20 == 70)
        {
          v21 = -64;
          goto LABEL_23;
        }
        goto LABEL_18;
      }
    }
    v21 = -48;
  }
LABEL_23:
  v25 = *(_QWORD *)(a3 + 72 + v21 + 16);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 4) != 0)
    v26 = (_QWORD *)*v26;
  if (v26)
    v27 = (uint64_t)(v26 - 8);
  else
    v27 = 0;
  sub_22F24CCB4(a2, a3, a4, v27, v31);
LABEL_29:
  v28 = a7[1];
  v34[0] = *a7;
  v34[1] = v28;
  v34[2] = a7[2];
  sub_22E5E0440(a2, (uint64_t)v34, a8, v30);
  return sub_22F261904(a2, v14, 0, (uint64_t)v31, v30[0], a8, v15, v16, v30, 0);
}

void sub_22E67FEF8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  void **v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm *v54;
  _BYTE *Name;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64[3];
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[128];
  _QWORD v71[3];
  char v72;
  _QWORD v73[3];
  void *v74;
  uint64_t v75;
  _BYTE v76[41];
  _QWORD v77[3];
  void **v78[6];
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t *, unint64_t, _QWORD))(*a1 + 520))(a1, a3, 0);
  if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
    return;
  v7 = *(_QWORD *)(a1[1] + 712);
  v78[0] = (void **)a3;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, a3);
  v8 = (_QWORD *)sub_22F24CF04((uint64_t *)(v7 + 64), v78)[1];
  v9 = sub_22F296010(a1[1], a3);
  v10 = a1[1];
  v11 = *(_QWORD *)(a3 + 48);
  if (v11)
    v12 = (llvm::Type *)(v11 & 0xFFFFFFFFFFFFFFF0);
  else
    v12 = (llvm::Type *)sub_22EF6462C(*(_QWORD *)(v10 + 144), a3);
  sub_22F29C578(v10, v12, 0);
  v67 = a1[1];
  v68 = v70;
  v69 = 0x1000000000;
  memset(v71, 0, sizeof(v71));
  v65[2] = 0;
  v66 = 0;
  v64[0] = (uint64_t)&v67;
  v64[1] = 0;
  v64[2] = 0;
  v65[0] = 0;
  v72 = 1;
  *(_DWORD *)((char *)v65 + 7) = 0;
  sub_22E60F844(a2, (uint64_t)v64, v8);
  v13 = v64[0];
  sub_22E670C54(v64, v66);
  sub_22F29F5C8(v13);
  v14 = *(_DWORD *)(v6 + 32) & 0xFFFFFFCF;
  if ((v9 - 7) >= 2)
    v14 = *(_DWORD *)(v6 + 32);
  v15 = v14 & 0xFFFFFFF0 | v9 & 0xF;
  *(_DWORD *)(v6 + 32) = v15;
  if ((v9 & 0xFu) - 7 < 2)
    goto LABEL_63;
  if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0)
  {
    v15 = *(_DWORD *)(v6 + 32);
LABEL_63:
    *(_DWORD *)(v6 + 32) = v15 | 0x4000;
  }
  v16 = a1[1];
  v17 = *(_DWORD *)(*(_QWORD *)(v16 + 216) + 76);
  if ((v17 - 8) >= 2
    && v17 != 5
    && (*(_DWORD *)(v6 + 32) & 0xFu) <= 0xA
    && ((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName((llvm::Value *)v6);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v16 = a1[1];
  }
  sub_22F29966C(v16, (unsigned int *)v6, a3);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 4) != 0)
    v19 = *(_QWORD *)v19;
  v20 = *(_QWORD *)(a3 + 40);
  if ((v20 & 7) == 0)
  {
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (*(_DWORD *)v22 == 23)
      {
        v23 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        v25 = *(_QWORD *)(v22 + 31);
        v26 = v23 == 0x6D61646E75665F5FLL && v24 == 0x79745F6C61746E65;
        if (v26 && v25 == 0x6F666E695F657079 && (*(_WORD *)(v19 + 8) & 0x7F) == 0x10)
        {
          v28 = *(_QWORD *)(v19 - 8);
          if ((v28 & 7) == 0)
          {
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 16);
              if (*(_DWORD *)v30 == 10)
              {
                v31 = *(_QWORD *)(v30 + 16);
                v32 = *(unsigned __int16 *)(v30 + 24);
                if (v31 == 0x6962617878635F5FLL && v32 == 12662)
                {
                  v34 = *(_QWORD *)(v19 - 32);
                  v35 = v34 & 0xFFFFFFFFFFFFFFF8;
                  if ((v34 & 4) != 0)
                    v35 = *(_QWORD *)v35;
                  if ((*(_WORD *)(v35 + 8) & 0x7F) == 0x53)
                  {
                    v36 = *(_QWORD *)(a1[1] + 144);
                    v37 = *(void ***)(v36 + 16824);
                    v78[0] = *(void ***)(v36 + 16392);
                    v78[1] = v37;
                    v38 = *(void ***)(v36 + 16416);
                    v78[2] = *(void ***)(v36 + 16400);
                    v78[3] = v38;
                    v39 = *(void ***)(v36 + 16512);
                    v78[4] = *(void ***)(v36 + 16408);
                    v78[5] = v39;
                    v79 = *(_OWORD *)(v36 + 16464);
                    v40 = *(_QWORD *)(v36 + 16480);
                    v80 = *(_QWORD *)(v36 + 16520);
                    v81 = v40;
                    v41 = *(_QWORD *)(v36 + 16488);
                    v82 = *(_QWORD *)(v36 + 16528);
                    v83 = v41;
                    v42 = *(_QWORD *)(v36 + 16496);
                    v84 = *(_QWORD *)(v36 + 16536);
                    v85 = v42;
                    v43 = *(_QWORD *)(v36 + 16504);
                    v86 = *(_QWORD *)(v36 + 16544);
                    v87 = v43;
                    v44 = *(_QWORD *)(v36 + 16792);
                    v88 = *(_QWORD *)(v36 + 16552);
                    v89 = v44;
                    v45 = *(_OWORD *)(v36 + 16576);
                    v90 = *(_OWORD *)(v36 + 16560);
                    v91 = v45;
                    v92 = *(_OWORD *)(v36 + 16440);
                    v93 = *(_QWORD *)(v36 + 16456);
                    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
                    {
                      sub_22EFC8E88(a3);
                      v58 = *((unsigned int *)v57 + 2);
                      if ((_DWORD)v58)
                      {
                        v59 = 8 * v58;
                        v60 = *v57;
                        while (*(_WORD *)(*(_QWORD *)v60 + 32) != 155)
                        {
                          v46 = 0;
                          v60 += 8;
                          v59 -= 8;
                          if (!v59)
                            goto LABEL_37;
                        }
                      }
                      else
                      {
                        v60 = *v57;
                      }
                      if (v60 == *v57 + 8 * v58)
                        v46 = 0;
                      else
                        v46 = 2;
                    }
                    else
                    {
                      v46 = 0;
                    }
LABEL_37:
                    v47 = sub_22EFB9558(a3);
                    v48 = 0;
                    v49 = dword_22F45D600[(v47 >> 3) & 3];
                    do
                    {
                      v63 = v48;
                      v50 = (uint64_t)v78[v48];
                      v61 = v50;
                      v62 = sub_22EF5B848(*(_QWORD *)(a1[1] + 144), v50, 0);
                      v51 = sub_22EF5B848(*(_QWORD *)(a1[1] + 144), v50 | 1, 0);
                      v52 = 0;
                      v77[0] = v61;
                      v77[1] = v62;
                      v77[2] = v51;
                      do
                      {
                        v53 = v77[v52];
                        v73[0] = a1[1];
                        v73[1] = **(_QWORD **)(v73[0] + 200);
                        v73[2] = a1;
                        v74 = v76;
                        v75 = 0x1000000000;
                        sub_22E6866D4((uint64_t)v73, v53, 0, v49, v46);
                        if (v74 != v76)
                          free(v74);
                        ++v52;
                      }
                      while (v52 != 3);
                      v48 = v63 + 1;
                    }
                    while (v63 != 24);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_DWORD *)(v6 + 32) & 0xF) != 1 && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6) & 1) == 0)
  {
    v54 = (llvm *)a1[1];
    goto LABEL_48;
  }
  v54 = (llvm *)a1[1];
  if ((*(_WORD *)(*((_QWORD *)v54 + 23) + 64) & 0x200) != 0)
  {
LABEL_48:
    sub_22F295BA0(v54, a3, v6, (uint64_t)v8);
    if ((*(_DWORD *)(v6 + 32) & 0xF) == 1 || llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
      sub_22E6242E0((uint64_t *)a1[1], v6);
  }
  if (*(_DWORD *)(v7 + 136) == 1 && (*(_BYTE *)(v6 + 33) & 0x40) == 0)
  {
    Name = (_BYTE *)llvm::Value::getName((llvm::Value *)v6);
    sub_22F295E54(a2, v6, Name, v56);
  }
  v78[0] = (void **)v71;
  sub_22E3CEB30(v78);
  if (v68 != v70)
    free(v68);
}

uint64_t sub_22E68051C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 656))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696));
  else
    return 0;
}

uint64_t sub_22E680544()
{
  return 1;
}

uint64_t sub_22E68054C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 520))(a1, a4, 0);
  v8 = *(uint64_t **)(a1[1] + 712);
  v13 = a4;
  v9 = v8 + 8;
  (*(void (**)(uint64_t *, uint64_t))(*v8 + 16))(v8, a4);
  v10 = sub_22F24CF04(v9, &v13)[1];
  v13 = a2;
  v14 = a3;
  v12 = 0;
  sub_22F24D0EC((uint64_t *)(v10 + 48), &v13, &v12);
  v13 = llvm::ConstantInt::get();
  v14 = llvm::ConstantInt::get();
  v15 = llvm::ConstantInt::get();
  return llvm::ConstantExpr::getGetElementPtr();
}

uint64_t sub_22E6806A4(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  llvm::Type *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::LLVMContext *v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 104) + 96), *(_QWORD *)(a4 + 104));
  if (!a6 && !*(_DWORD *)(*(_QWORD *)(a4 + 128) + 20)
    || !(*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 656))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696)))
  {
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*a1 + 504))(a1, a4, a5, a3);
  }
  v12 = sub_22E60CCAC(a1[1] + 704, a3, a4, a5);
  v13 = *(uint64_t **)(a2 + 5824);
  if (v12)
  {
    v19 = *(llvm::LLVMContext **)(a2 + 96);
    v22 = 257;
    v13 = (uint64_t *)sub_22F24CE30(a2 + 272, v19, v13, v12, (uint64_t)v21);
  }
  v14 = *(llvm::Type **)(a2 + 96);
  v15 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
  v22 = 257;
  v16 = (uint64_t *)sub_22E3C3200((uint64_t *)(a2 + 272), v14, (uint64_t)v13, v15, 0, (uint64_t)v21);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 184);
  if ((*(_BYTE *)(v17 + 1388) & 3) != 0)
  {
    v21[0] = sub_22F289D78((_QWORD *)a2, (_BYTE *)(v17 + 1388), (uint64_t)v13);
    v21[1] = v20;
    return sub_22E622648(a2, v21, v16);
  }
  return (uint64_t)v16;
}

uint64_t sub_22E680828(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  llvm::Value *v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[72];
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  _QWORD v41[33];

  v41[32] = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  v4 = sub_22F24C2B0(a1 + 24, &v37);
  v5 = v4[1];
  if (v5)
    return v5;
  v7 = v4;
  v8 = *(_QWORD **)(a1 + 8);
  v9 = (uint64_t *)v8[172];
  v10 = v8[173];
  if ((unint64_t)v9 >= v10)
  {
    v12 = (_QWORD *)v8[171];
    v13 = v9 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_22E3B3F8C();
      v17 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = (uint64_t *)&v17[8 * v13];
    *v18 = a2;
    v11 = v18 + 1;
    if (v9 != v12)
    {
      do
      {
        v19 = *--v9;
        *--v18 = v19;
      }
      while (v9 != v12);
      v9 = (uint64_t *)v8[171];
    }
    v8[171] = v18;
    v8[172] = v11;
    v8[173] = &v17[8 * v16];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a2;
    v11 = v9 + 1;
  }
  v8[172] = v11;
  v39 = v41;
  v40 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v36, (uint64_t)&v39);
  v20 = v37;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v37, v36);
  v21 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 712);
  v38 = v20;
  v22 = v21 + 8;
  (*(void (**)(uint64_t *, uint64_t))(*v21 + 16))(v21, v20);
  v23 = sub_22F24CF04(v22, &v38);
  v24 = sub_22E60F6A0((uint64_t *)(*(_QWORD *)(a1 + 8) + 704), (_QWORD *)v23[1]);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = v39;
  v27 = v40;
  sub_22EF5CDF0(*(_QWORD *)(v25 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_22E63402C(v25, (uint64_t)v26, v27, v24);
  v7[1] = v28;
  *((_DWORD *)v28 + 8) = *((_DWORD *)v28 + 8) & 0xFFFFFF3F | 0x80;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216) + 416))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216))
    && !sub_22E49F808(v20))
  {
    if ((*(_BYTE *)(v20 + 29) & 1) == 0)
      goto LABEL_23;
    sub_22EFC8E88(v20);
    v33 = *((unsigned int *)v32 + 2);
    if ((_DWORD)v33)
    {
      v34 = 8 * v33;
      v35 = *v32;
      while (*(_WORD *)(*(_QWORD *)v35 + 32) != 155)
      {
        v35 += 8;
        v34 -= 8;
        if (!v34)
          goto LABEL_23;
      }
    }
    else
    {
      v35 = *v32;
    }
    if (v35 == *v32 + 8 * v33)
    {
LABEL_23:
      v29 = sub_22F296234((uint64_t *)(*(_QWORD *)(a1 + 8) + 704), v20);
      v30 = *(_QWORD *)(v20 + 80);
      if (v29)
      {
        if ((sub_22E687708(v30) & 1) == 0)
          goto LABEL_29;
        v31 = 256;
      }
      else
      {
        if (!sub_22E687A7C(v30))
          goto LABEL_29;
        v31 = 512;
      }
      *(_DWORD *)(v7[1] + 32) = *(_DWORD *)(v7[1] + 32) & 0xFFFFFCFF | v31;
    }
  }
LABEL_29:
  sub_22F29966C(*(_QWORD *)(a1 + 8), (unsigned int *)v7[1], v20);
  v5 = v7[1];
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v36);
  if (v39 != v41)
    free(v39);
  return v5;
}

uint64_t sub_22E680B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, int a6@<W6>, uint64_t *a7@<X8>)
{
  llvm::LLVMContext *v13;
  _WORD *v14;
  __int128 v15;
  llvm::Type *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Declaration;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  __int16 v63;
  uint64_t v64;
  uint64_t *v66;
  _BYTE *v67;
  _QWORD v68[4];
  __int16 v69;
  _OWORD v70[3];
  _QWORD v71[5];

  v71[3] = *MEMORY[0x24BDAC8D0];
  v13 = (llvm::LLVMContext *)llvm::PointerType::get();
  v14 = (_WORD *)(a3 & 0xFFFFFFFFFFFFFFF8);
  v15 = a5[1];
  v70[0] = *a5;
  v70[1] = v15;
  v70[2] = a5[2];
  v16 = (llvm::Type *)llvm::PointerType::get();
  v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 72;
  v18 = *(_WORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 80) & 0x7F;
  v19 = -40;
  if (v18 > 0x46)
  {
    if (v18 == 83)
      goto LABEL_17;
    if (v18 == 71)
    {
      v19 = -56;
      goto LABEL_17;
    }
    if (v18 != 81)
    {
LABEL_12:
      v20 = v18 - 52;
      v21 = v18 - 33 >= 5;
      v22 = -48;
      if (!v21)
        v22 = -64;
      if (v20 >= 6)
        v19 = v22;
      else
        v19 = -72;
    }
  }
  else
  {
    if (v18 > 0x18)
      goto LABEL_11;
    if (v18 == 16)
    {
LABEL_4:
      v19 = -48;
      goto LABEL_17;
    }
    if (((1 << v18) & 0x1066) == 0)
    {
      if (v18 == 24)
        goto LABEL_4;
LABEL_11:
      if (v18 == 70)
      {
        v19 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v23 = *(_QWORD *)(v17 + v19 + 16);
  v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23 & 4) != 0)
    v24 = (_QWORD *)*v24;
  if (v24)
    v25 = (unint64_t)(v24 - 8);
  else
    v25 = 0;
  v26 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v70, v16, v25, 0);
  v27 = sub_22F40C040(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 712), a3, a4);
  v67 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 1392);
  if ((*v67 & 3) != 0)
    goto LABEL_52;
  v28 = v14[40] & 0x7F;
  v29 = -40;
  if (v28 <= 0x46)
  {
    if (v28 <= 0x18)
    {
      if (v28 == 16)
      {
LABEL_26:
        v29 = -48;
        goto LABEL_38;
      }
      if (((1 << v28) & 0x1066) != 0)
        goto LABEL_38;
      if (v28 == 24)
        goto LABEL_26;
    }
    if (v28 == 70)
    {
LABEL_36:
      v29 = -64;
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  if (v28 == 83)
    goto LABEL_38;
  if (v28 == 71)
  {
    v29 = -56;
    goto LABEL_38;
  }
  if (v28 != 81)
  {
LABEL_34:
    if (v28 - 52 >= 6)
    {
      if (v28 - 33 >= 5)
        goto LABEL_26;
      goto LABEL_36;
    }
    v29 = -72;
  }
LABEL_38:
  v30 = *(_QWORD *)(v17 + v29 + 16);
  v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
  if ((v30 & 4) != 0)
    v31 = (_QWORD *)*v31;
  if (v31)
    v32 = (unint64_t)(v31 - 8);
  else
    v32 = 0;
  if (sub_22E486044(a2, v32))
  {
    v33 = v14[40] & 0x7F;
    v34 = -40;
    if (v33 > 0x46)
    {
      switch(v33)
      {
        case 'S':
          goto LABEL_63;
        case 'G':
          v34 = -56;
          goto LABEL_63;
        case 'Q':
          goto LABEL_63;
      }
    }
    else
    {
      if (v33 <= 0x18)
      {
        if (v33 == 16)
          goto LABEL_47;
        if (((1 << v33) & 0x1066) != 0)
          goto LABEL_63;
        if (v33 == 24)
        {
LABEL_47:
          v34 = -48;
LABEL_63:
          v38 = *(_QWORD *)(v17 + v34 + 16);
          v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
          if ((v38 & 4) != 0)
            v39 = (_QWORD *)*v39;
          if (v39)
            v40 = (unint64_t)(v39 - 8);
          else
            v40 = 0;
          v41 = sub_22E48612C(a2, v40, (uint64_t)v26, (uint64_t)v13);
          v42 = 0;
          goto LABEL_69;
        }
      }
      if (v33 == 70)
      {
LABEL_61:
        v34 = -64;
        goto LABEL_63;
      }
    }
    if (v33 - 52 < 6)
    {
      v34 = -72;
      goto LABEL_63;
    }
    if (v33 - 33 < 5)
      goto LABEL_61;
    goto LABEL_47;
  }
LABEL_52:
  v35 = v14[40] & 0x7F;
  v36 = -40;
  if (v35 > 0x46)
  {
    v37 = a6;
    if (v35 != 83)
    {
      if (v35 == 71)
      {
        v36 = -56;
        goto LABEL_85;
      }
      if (v35 == 81)
        goto LABEL_85;
LABEL_80:
      v49 = v35 - 52;
      v21 = v35 - 33 >= 5;
      v50 = -48;
      if (!v21)
        v50 = -64;
      if (v49 >= 6)
        v36 = v50;
      else
        v36 = -72;
    }
  }
  else
  {
    v37 = a6;
    if (v35 > 0x18)
      goto LABEL_79;
    if (v35 != 16)
    {
      if (((1 << v35) & 0x1066) != 0)
        goto LABEL_85;
      if (v35 != 24)
      {
LABEL_79:
        if (v35 == 70)
        {
          v36 = -64;
          goto LABEL_85;
        }
        goto LABEL_80;
      }
    }
    v36 = -48;
  }
LABEL_85:
  v51 = *(_QWORD *)(v17 + v36 + 16);
  v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
  if ((v51 & 4) != 0)
    v52 = (_QWORD *)*v52;
  if (v52)
    v53 = (uint64_t)(v52 - 8);
  else
    v53 = 0;
  sub_22F25177C((_QWORD *)a2, v53, (uint64_t)v26, v37);
  v54 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v54 + 712) + 136) == 1)
  {
    v55 = *(_QWORD *)(v54 + 96);
    v69 = 257;
    v66 = (uint64_t *)(a2 + 272);
    v56 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v26, v55, (uint64_t)v68);
    v71[2] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    Declaration = llvm::Intrinsic::getDeclaration();
    v58 = Declaration;
    if (Declaration)
      v64 = *(_QWORD *)(Declaration + 24);
    else
      v64 = 0;
    v71[0] = v56;
    v71[1] = llvm::ConstantInt::get();
    v69 = 257;
    v59 = sub_22E462B78(v66, v64, v58, (uint64_t)v71, 2, (uint64_t)v68, 0);
    v69 = 257;
    v41 = sub_22E3C1740(v66, 49, (uint64_t)v59, (uint64_t)v13, (uint64_t)v68);
    v42 = 0;
  }
  else
  {
    v61 = llvm::PointerType::get();
    v69 = 257;
    v62 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v26, v61, (uint64_t)v68);
    v68[0] = "vfn";
    v69 = 259;
    v42 = sub_22F24CE30(a2 + 272, v13, v62, v27, (uint64_t)v68);
    v63 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
    v69 = 257;
    v41 = sub_22E3C3200((uint64_t *)(a2 + 272), v13, v42, v63, 0, (uint64_t)v68);
  }
  v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 32);
  if ((v60 & 0x1800) != 0 && (v60 & 0x400000000000000) != 0 && *(unsigned __int8 *)(v41 + 16) >= 0x1Cu && v41)
  {
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
  }
LABEL_69:
  if ((*v67 & 3) != 0)
  {
    v45 = a4 & 0xFFFFFFFF00000000;
    v46 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 712);
    v47 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v14 + 32))(a3 & 0xFFFFFFFFFFFFFFF8);
    a3 = sub_22F122FA4(v46, v47 & 0xFFFFFFFFFFFFFFF8 | a3 & 7);
    a4 = v48 | v45;
    result = sub_22F289D78((_QWORD *)a2, v67, v42);
  }
  else
  {
    v43 = 0;
    result = 0;
  }
  *a7 = v41;
  a7[1] = 0;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = result;
  a7[5] = v43;
  return result;
}

uint64_t sub_22E681218(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, __int128 *a5, uint64_t a6)
{
  char v6;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[7];
  _QWORD v21[3];
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = a6;
  v9 = a6 & 0xFFFFFFFFFFFFFFF8;
  v10 = a6 & 0xFFFFFFFFFFFFFFF8 & (a6 << 61 >> 63);
  v11 = a3 & 0xFFFFFFFFFFFFFFF8 | a4;
  v12 = sub_22E46C584((_QWORD **)(*(_QWORD *)(a1 + 8) + 280), v11, 0);
  v13 = sub_22E46F2EC(a2[18] + 280, v12);
  v14 = a5[1];
  v23 = *a5;
  v24 = v14;
  v25 = a5[2];
  v21[0] = 3;
  v21[1] = v10;
  v21[2] = v11;
  v22 = 0;
  v26 = v13;
  if (v10)
  {
    v16 = sub_22F3C585C(v10);
  }
  else
  {
    if ((v6 & 4) != 0)
      v15 = 0;
    else
      v15 = v9;
    v16 = sub_22F0602E8(v15);
  }
  v17 = v16;
  if ((*((_BYTE *)a5 + 24) & 3) != 0)
    v18 = sub_22F28ABCC(a5, a2);
  else
    v18 = *(_QWORD *)a5;
  sub_22F261904((uint64_t)a2, v11, 0, (uint64_t)v21, v18, v17, 0, 0, v20, 0);
  return 0;
}

uint64_t sub_22E681328(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  llvm::GlobalValue *v5;
  uint64_t v6;

  v4 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 704);
  v5 = sub_22E60C93C(v4, a2);
  v6 = sub_22F296010(*(_QWORD *)(a1 + 8), a2);
  return sub_22F294C50(v4, v5, v6, a2);
}

uint64_t sub_22E681380()
{
  return 1;
}

uint64_t sub_22E681388(uint64_t a1, llvm::GlobalValue *this, int a3, uint64_t a4)
{
  int v7;

  if (a3)
  {
    v7 = *((_DWORD *)this + 8);
    if ((v7 & 0xFu) - 7 >= 2)
    {
      *((_DWORD *)this + 8) = v7 & 0xFFFFFFF0 | 1;
      if ((v7 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) == 0)
        *((_DWORD *)this + 8) |= 0x4000u;
    }
  }
  return sub_22F29961C(*(_QWORD *)(a1 + 8), (unsigned int *)this, a4);
}

uint64_t sub_22E68140C(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t a4, uint64_t *a5)
{
  __int128 v5;
  _OWORD v7[3];

  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  v7[2] = a3[2];
  return sub_22E687E1C(a2, (uint64_t)v7, a4, *a5, a5[1], 0);
}

uint64_t sub_22E681450(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t a4, uint64_t *a5)
{
  __int128 v5;
  _OWORD v7[3];

  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  v7[2] = a3[2];
  return sub_22E687E1C(a2, (uint64_t)v7, a4, *a5, a5[1], 1);
}

uint64_t sub_22E681494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned int *)(a3 + 8) - 1;
}

const char *sub_22E6814A0()
{
  return "__cxa_pure_virtual";
}

const char *sub_22E6814B0()
{
  return "__cxa_deleted_virtual";
}

void *sub_22E6814C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, llvm::Type **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v31[3];
  uint64_t v32;
  _OWORD v33[3];
  _QWORD v34[4];
  __int16 v35;
  __int128 v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v14 = *(_DWORD *)(llvm::PointerType::get() + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v16 = *(unsigned __int8 *)(a2 + 131);
  v17 = sub_22EF5C8B8(v15, *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(v15 + 16408) & 0xFFFFFFFFFFFFFFF0));
  v19 = a3[1];
  v41 = *a3;
  v42 = v19;
  v43 = a3[2];
  v20 = v17 / v18 > v16;
  if ((uint64_t)(v17 / v18) <= (uint64_t)v16)
    v21 = v16;
  else
    v21 = v17 / v18;
  if (v20)
  {
    v22 = a3[1];
    v40[0] = *a3;
    v40[1] = v22;
    v40[2] = a3[2];
    LOWORD(v39) = 257;
    sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v40, v21 - v16, (uint64_t)&v37, (uint64_t)&v41);
  }
  v36[0] = v41;
  v36[1] = v42;
  v36[2] = v43;
  v23 = *(_QWORD *)(a2 + 88);
  v35 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v36, v23, (uint64_t)v34, (uint64_t)&v37);
  v33[0] = v37;
  v33[1] = v38;
  v33[2] = v39;
  sub_22E3BEDDC(a2 + 272, a4, (uint64_t)v33);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 256) & 1) != 0
    && v14 <= 0xFF
    && ((sub_22EFBFDCC(*(_QWORD *)(a5 + 16), 0, 0) & 1) != 0
     || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 35) & 1) != 0))
  {
    sub_22F2A2EE0();
    v34[0] = llvm::PointerType::get();
    v24 = llvm::FunctionType::get();
    v25 = sub_22E633A04(*(_QWORD *)(a1 + 8), v24, "__asan_poison_cxx_array_cookie", 0x1EuLL, 0, 0, 0);
    v27 = v26;
    if ((BYTE8(v38) & 3) != 0)
      v28 = sub_22F28ABCC(&v37, (_QWORD *)a2);
    else
      v28 = v37;
    v32 = v28;
    v35 = 257;
    sub_22E462B78((uint64_t *)(a2 + 272), v25, v27, (uint64_t)&v32, 1, (uint64_t)v34, 0);
  }
  v29 = a3[1];
  v31[0] = *a3;
  v31[1] = v29;
  v31[2] = a3[2];
  v35 = 257;
  return sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v31, v21, (uint64_t)v34, a7);
}

BOOL sub_22E681734(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_17;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_17;
    }
    if (v4 != 81)
    {
LABEL_12:
      v6 = v4 - 52;
      v7 = v4 - 33 >= 5;
      v8 = -48;
      if (!v7)
        v8 = -64;
      if (v6 >= 6)
        v5 = v8;
      else
        v5 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_11;
    if (v4 == 16)
    {
LABEL_4:
      v5 = -48;
      goto LABEL_17;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_4;
LABEL_11:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72 + v5 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  if (v10)
    v11 = v10 - 8;
  else
    v11 = 0;
  sub_22E3CD31C((uint64_t *)(v11[13] + 96), v11[13]);
  if (!*(_DWORD *)(v11[16] + 20))
    return 0;
  v12 = *(_DWORD *)(v3 + 28) & 0x7F;
  if ((v2 & 7) == 1 && v12 == 55)
    return 1;
  return (v2 & 7) == 2 && v12 == 57;
}

unint64_t sub_22E681874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(v2 + 131);
  v4 = *(_QWORD *)(v2 + 144);
  v5 = sub_22EF5C8B8(v4, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16408) & 0xFFFFFFFFFFFFFFF0));
  if ((uint64_t)(v5 / v6) <= v3)
    return v3;
  else
    return v5 / v6;
}

llvm::Value *sub_22E6818D4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  _OWORD v17[3];
  _QWORD v18[4];
  __int16 v19;
  __int128 v20[3];
  _OWORD v21[2];
  __int128 v22;
  _OWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v6 = a3[1];
  v24 = *a3;
  v25 = v6;
  v26 = a3[2];
  v7 = *(unsigned __int8 *)(a2 + 131);
  if (a4 != v7)
  {
    v16 = a3[1];
    v23[0] = *a3;
    v23[1] = v16;
    v23[2] = a3[2];
    LOWORD(v22) = 257;
    sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v23, a4 - v7, (uint64_t)v21, (uint64_t)&v24);
  }
  v8 = *(_DWORD *)(llvm::PointerType::get() + 8);
  v20[1] = v25;
  v20[2] = v26;
  v20[0] = v24;
  v9 = *(_QWORD *)(a2 + 88);
  v19 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v20, v9, (uint64_t)v18, (uint64_t)v21);
  v24 = v21[0];
  v25 = v21[1];
  v26 = v22;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 256) & 1) != 0 && v8 < 0x100)
  {
    *(_QWORD *)&v21[0] = llvm::PointerType::get();
    v10 = llvm::FunctionType::get();
    v11 = sub_22E633A04(*(_QWORD *)(a1 + 8), v10, "__asan_load_cxx_array_cookie", 0x1CuLL, 0, 0, 0);
    v13 = v12;
    if ((BYTE8(v25) & 3) != 0)
      v14 = sub_22F28ABCC(&v24, (_QWORD *)a2);
    else
      v14 = v24;
    v18[0] = v14;
    LOWORD(v22) = 257;
    return sub_22E462B78((uint64_t *)(a2 + 272), v11, v13, (uint64_t)v18, 1, (uint64_t)v21, 0);
  }
  else
  {
    v17[0] = v24;
    v17[1] = v25;
    v17[2] = v26;
    LOWORD(v22) = 257;
    return (llvm::Value *)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v17, (uint64_t)v21);
  }
}

uint64_t sub_22E681A98(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  _BOOL4 v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  llvm::Type *v13;
  llvm::DataLayout *DataLayout;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  llvm::Constant **v30;
  char v31;
  uint64_t v32;
  uint64_t NullValue;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  llvm::Type **v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Constant **v45;
  _QWORD *v46;
  llvm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value *v56;
  char hasExternalWeakLinkage;
  void *v58;
  char v59;
  uint64_t *v60;
  int v61;
  uint64_t ABITypeAlignment;
  __int128 v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  int v67;
  _BYTE v68[48];
  __int128 v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  int v73;
  _BYTE v74[48];
  uint64_t v75[4];
  __int16 v76;
  _BYTE v77[20];
  void *v78;
  __int128 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v9 = (a3[7] & 0x7F) != 0x40 && (a3[24] & 0x2000) != 0 && (sub_22EFBC2B0((unint64_t)a3) & 0xFFFFFFFD) == 0;
  v10 = (uint64_t *)(a2 + 272);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2000) + 20) & 0x8000000000) != 0
    && (sub_22E3CEC2C((uint64_t)a3) | v9) == 1
    && (sub_22EFBB794((uint64_t)a3), !v11))
  {
    v61 = 1;
  }
  else
  {
    if ((*(_DWORD *)(a4 + 32) & 0xF) == 7)
    {
      v61 = 0;
      v59 = 1;
      v12 = 1;
      goto LABEL_17;
    }
    v61 = 0;
  }
  if (!*(_BYTE *)(a1 + 193))
  {
    v13 = *(llvm::Type **)(a2 + 32);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 200));
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v13);
    v59 = 0;
    goto LABEL_18;
  }
  v59 = 0;
  v12 = *(unsigned __int8 *)(a2 + 131);
LABEL_17:
  ABITypeAlignment = v12;
LABEL_18:
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
  v58 = (void *)llvm::PointerType::get();
  v15 = *(_QWORD *)(a1 + 8) + 1888;
  v78 = a3;
  v16 = sub_22F24C2B0(v15, (uint64_t *)&v78)[1];
  if (v16)
    goto LABEL_29;
  v78 = &v80;
  v79 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v75, (uint64_t)&v78);
  (*(void (**)(_QWORD, _DWORD *, uint64_t *))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16), a3, v75);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v75);
  v16 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ConstantInt::get();
  v76 = 261;
  v75[0] = (uint64_t)v78;
  v75[1] = v79;
  llvm::GlobalVariable::GlobalVariable();
  v17 = *(_DWORD *)(v16 + 32) & 0xF;
  v18 = *(_DWORD *)(v16 + 32) & 0xFFFFBFFF | (((*(_DWORD *)(a4 + 32) >> 14) & 1) << 14);
  *(_DWORD *)(v16 + 32) = v18;
  v19 = *(_DWORD *)(a4 + 32) & 0x30;
  v20 = v18 & 0xFFFFFFCF | v19;
  *(_DWORD *)(v16 + 32) = v20;
  if ((v17 - 7) < 2
    || v19
    && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v16),
        v20 = *(_DWORD *)(v16 + 32),
        (hasExternalWeakLinkage & 1) == 0))
  {
    v20 |= 0x4000u;
    *(_DWORD *)(v16 + 32) = v20;
  }
  *(_DWORD *)(v16 + 32) = v20 & 0xFFFFE3FF | (((*(_DWORD *)(a4 + 32) >> 10) & 7) << 10);
  llvm::GlobalObject::setAlignment();
  v21 = *(_QWORD *)(a4 + 48);
  v22 = sub_22E3CEC2C((uint64_t)a3);
  v23 = *(_QWORD *)(a1 + 8);
  v10 = (uint64_t *)(a2 + 272);
  if ((v22 & 1) != 0 || !v21)
  {
    v24 = *(_DWORD *)(*(_QWORD *)(v23 + 216) + 76);
  }
  else
  {
    v24 = *(_DWORD *)(*(_QWORD *)(v23 + 216) + 76);
    if ((v24 | 4) == 7)
    {
LABEL_24:
      llvm::GlobalObject::setComdat();
      goto LABEL_27;
    }
  }
  if ((v24 - 8) >= 2
    && v24 != 5
    && (*(_DWORD *)(v16 + 32) & 0xFu) <= 0xA
    && ((1 << (*(_DWORD *)(v16 + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName((llvm::Value *)v16);
    llvm::Module::getOrInsertComdat();
    goto LABEL_24;
  }
LABEL_27:
  v25 = *(_QWORD *)(a1 + 8) + 1888;
  v75[0] = (uint64_t)a3;
  sub_22F24C2B0(v25, v75)[1] = v16;
  if (v78 != &v80)
    free(v78);
LABEL_29:
  v26 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)&v77[12] = 0;
  *(_QWORD *)&v77[4] = 0;
  *(_QWORD *)&v69 = v16;
  *((_QWORD *)&v69 + 1) = v26;
  v70 = ABITypeAlignment;
  v71 = 0;
  v72 = *(unsigned int *)v77;
  v73 = 0;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v81 = 257;
  sub_22E3BEE6C(v10, &v69, v27, (uint64_t)&v78, (uint64_t)v74);
  v76 = 257;
  v28 = sub_22E3C2A7C(v10, (uint64_t)v74, (uint64_t)v75);
  v30 = (llvm::Constant **)v28;
  if (v61)
  {
    *(_WORD *)(v28 + 18) = *(_WORD *)(v28 + 18) & 0xFC7F | 0x200;
    *(_BYTE *)(v28 + 60) = 1;
  }
  if (*(_BYTE *)(a1 + 193))
    v31 = v59;
  else
    v31 = 1;
  if ((v31 & 1) == 0)
  {
    v32 = llvm::ConstantInt::get();
    v81 = 257;
    v30 = (llvm::Constant **)sub_22E3E49C4((uint64_t)v10, (uint64_t)v30, v32, (uint64_t)&v78);
  }
  v78 = "guard.uninitialized";
  v81 = 259;
  NullValue = llvm::Constant::getNullValue(*v30, v29);
  v34 = sub_22E3C18F4((uint64_t)v10, 32, (uint64_t *)v30, NullValue, (uint64_t)&v78);
  v78 = "init.check";
  v81 = 259;
  v60 = v10;
  v35 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v78 = "init.end";
  v81 = 259;
  v36 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22F25B7D8(a2, v34, (uint64_t)v35, (uint64_t)v36, 0, (uint64_t)a3);
  sub_22E5ED9B4((_QWORD *)a2, v35, 0);
  if (v61)
  {
    v40 = *(_QWORD *)(a1 + 8);
    sub_22E66CB04((llvm::Type ***)(v40 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(v40 + 144) + 16480));
    v78 = v58;
    v41 = llvm::FunctionType::get();
    LODWORD(v78) = 37;
    v42 = llvm::AttributeList::get();
    v43 = sub_22E633A04(v40, v41, "__cxa_guard_acquire", 0x13uLL, v42, 0, 0);
    v75[0] = v16;
    v81 = 257;
    v45 = (llvm::Constant **)sub_22F24EEDC(a2, v43, v44, (uint64_t)v75, 1, (uint64_t)&v78);
    v78 = "init";
    v81 = 259;
    v46 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v75[0] = (uint64_t)"toBOOL";
    v76 = 259;
    v48 = llvm::Constant::getNullValue(*v45, v47);
    v49 = sub_22E3C18F4((uint64_t)v60, 33, (uint64_t *)v45, v48, (uint64_t)v75);
    v50 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v50, v46, v36, v49, 0);
    v81 = 257;
    sub_22E3C12C8(v60, v50, (uint64_t)&v78);
    v51 = sub_22E4899EC(a2 + 1984, 1u, 16);
    *(_QWORD *)v51 = off_24FA68670;
    *((_QWORD *)v51 + 1) = v16;
    sub_22E5ED9B4((_QWORD *)a2, v46, 0);
    sub_22E4CEC30();
    sub_22E48A190(a2, 0);
    v52 = *(_QWORD *)(a1 + 8);
    v78 = v58;
    v53 = llvm::FunctionType::get();
    LODWORD(v78) = 37;
    v54 = llvm::AttributeList::get();
    v55 = sub_22E633A04(v52, v53, "__cxa_guard_release", 0x13uLL, v54, 0, 0);
    v75[0] = v16;
    v81 = 257;
    sub_22F24EEDC(a2, v55, v56, (uint64_t)v75, 1, (uint64_t)&v78);
  }
  else
  {
    sub_22E4CEC30();
    v37 = (llvm::Type **)llvm::ConstantInt::get();
    *(_QWORD *)&v63 = v16;
    *((_QWORD *)&v63 + 1) = v26;
    v64 = ABITypeAlignment;
    v65 = 0;
    v66 = *(_OWORD *)v77;
    v67 = *(_DWORD *)&v77[16];
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v81 = 257;
    sub_22E3BEE6C(v10, &v63, v38, (uint64_t)&v78, (uint64_t)v68);
    sub_22E3BEDDC((uint64_t)v10, v37, (uint64_t)v68);
  }
  return sub_22E5ED9B4((_QWORD *)a2, v36, 0);
}

llvm::ValueHandleBase *sub_22E682308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Value *a5, llvm::Value *a6)
{
  llvm::ValueHandleBase *result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;

  result = (llvm::ValueHandleBase *)sub_22EFBE910(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  if ((result & 1) == 0)
  {
    v13 = sub_22F28A570(*(uint64_t **)(a1 + 8), a6, *(_QWORD *)(a3 + 48));
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 2) & 2) != 0 || (sub_22EFBB794(a3), v14))
    {
      sub_22EFBB794(a3);
      return sub_22E67AF94(a2, a4, a5, v13, v15 != 0);
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 8);
      if ((*(_QWORD *)(*(_QWORD *)(v16 + 152) + 8) & 0x2000000000) != 0)
      {
        v19 = a4;
        v20 = v13;
        v18 = a5;
        return sub_22F2A17B0(v16 + 2320, &v19, (uint64_t *)&v18, &v20);
      }
      else
      {
        v17 = (_QWORD *)sub_22E4CF4E8();
        return sub_22E4CFECC(a2, v17);
      }
    }
  }
  return result;
}

void sub_22E682434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::GlobalValue *NamedValue;
  llvm::GlobalValue *v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  llvm::GlobalValue *v34;
  uint64_t v35;
  void (*v36)(void);
  _QWORD *v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[64];
  void *v43;
  __int128 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x37)
    v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  else
    v7 = 0;
  if (v7)
    v8 = 0;
  else
    v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v9 + 184) + 2) & 8) == 0)
  {
LABEL_30:
    v18 = 0;
    goto LABEL_31;
  }
  v10 = *(_WORD *)(v6 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 == 83)
      goto LABEL_24;
    if (v10 == 71)
    {
      v11 = -56;
      goto LABEL_24;
    }
    if (v10 != 81)
      goto LABEL_19;
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_18;
    if (v10 == 16)
    {
LABEL_11:
      v11 = -48;
      goto LABEL_24;
    }
    if (((1 << v10) & 0x1066) == 0)
    {
      if (v10 == 24)
        goto LABEL_11;
LABEL_18:
      if (v10 == 70)
      {
        v11 = -64;
        goto LABEL_24;
      }
LABEL_19:
      v12 = v10 - 52;
      v13 = v10 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v11 = v14;
      else
        v11 = -72;
    }
  }
LABEL_24:
  v15 = *(_QWORD *)(v6 + 72 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  sub_22E3CD31C((uint64_t *)(v17[13] + 96), v17[13]);
  if (*(_DWORD *)(v17[16] + 20))
    goto LABEL_30;
  if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x39)
    v29 = v6;
  else
    v29 = 0;
  if (v29)
    v30 = v29 | 1;
  else
    v30 = v6;
  v31 = sub_22E629EF0(v9, v30);
  if ((v31 - 4) >= 2)
  {
    if (v31)
      v18 = 1;
    else
      v18 = 2;
  }
  else
  {
    v32 = *(_DWORD *)(*(_QWORD *)(v9 + 216) + 76);
    if (v32 == 7)
      v33 = 3;
    else
      v33 = 0;
    if (v32 == 3)
      v18 = 3;
    else
      v18 = v33;
  }
LABEL_31:
  v19 = a2 & 7;
  if (v7)
  {
    if ((a2 & 7) != 0)
      goto LABEL_38;
    v20 = 1;
  }
  else
  {
    if (v19 != 1)
      goto LABEL_38;
    v20 = 2;
  }
  v21 = v20 | v6;
  if (v18 >= 2)
  {
    v22 = *(_QWORD *)(a1 + 8);
    sub_22E629EF0(v22, a2);
    v23 = sub_22E624994(v22, a2, a3);
    v25 = v24;
    NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue();
    v27 = NamedValue;
    if (!NamedValue || llvm::GlobalValue::isDeclaration(NamedValue))
    {
      sub_22E6280CC(v22, v21, a3, 0);
      v46 = 257;
      v28 = (unsigned int *)llvm::GlobalAlias::create();
      v28[8] = v28[8] & 0xFFFFFF3F | 0x80;
      if (v27)
      {
        llvm::Value::takeName();
        llvm::Value::replaceAllUsesWith();
        llvm::GlobalValue::eraseFromParent(v27);
      }
      else
      {
        v46 = 261;
        v43 = v23;
        *(_QWORD *)&v44 = v25;
        llvm::Value::setName();
      }
      sub_22E62AFD8(v22, a2, a3, v28);
    }
    return;
  }
  if (v18 == 1)
  {
    v37 = sub_22E624994(*(_QWORD *)(a1 + 8), a2, a3);
    v39 = v38;
    v40 = sub_22E6280CC(*(_QWORD *)(a1 + 8), v21, a3, 0);
    v41 = *sub_22F29D0A0((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 1144), v37, v39);
    sub_22E5BBDC4((llvm::ValueHandleBase *)(v41 + 8), v40);
    return;
  }
LABEL_38:
  if (v8 && v19 == 2 && v18 != 3)
  {
    if (!sub_22E469D70(*(_QWORD *)(a1 + 8), v8))
      return;
    v34 = sub_22F24CB90();
LABEL_69:
    sub_22E634260(*(_QWORD *)(a1 + 8), v6, v34);
    return;
  }
  v34 = sub_22F24CB90();
  if (v18 != 3)
    goto LABEL_69;
  v43 = &v45;
  v44 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v42, (uint64_t)&v43);
  v35 = **(_QWORD **)(a1 + 16);
  if (v8)
    v36 = *(void (**)(void))(v35 + 272);
  else
    v36 = *(void (**)(void))(v35 + 264);
  v36();
  llvm::Module::getOrInsertComdat();
  llvm::GlobalObject::setComdat();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v42);
  if (v43 != &v45)
    free(v43);
}

uint64_t *sub_22E6828F0(uint64_t a1, _QWORD *a2, _OWORD *a3, unint64_t a4)
{
  __int128 v4;
  _OWORD v6[3];

  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  v6[2] = a3[2];
  return sub_22E484FA4(a2, (uint64_t)v6, *(llvm::Type **)(*(_QWORD *)(a1 + 8) + 96), a4, 0);
}

uint64_t sub_22E682944()
{
  return 1;
}

uint64_t sub_22E68294C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E6829C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E682A54(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
  v3 = (a2 & 7) != 0;
  if (v2 != 57)
    v3 = 0;
  return v2 == 55 || v3;
}

_QWORD *sub_22E682A80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __int128 v6;
  _OWORD v8[3];
  uint64_t v9;

  if ((*(_DWORD *)((*(_QWORD *)(a2 + 1688) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x39)
  {
    v8[0] = (unint64_t)llvm::UndefValue::get();
    LOBYTE(v9) = 0;
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    v8[0] = *(_OWORD *)a3;
    v8[1] = v6;
    v8[2] = *(_OWORD *)(a3 + 32);
    v9 = *(_QWORD *)(a3 + 48);
  }
  return sub_22E5EDC68(a2, (uint64_t)v8, a4);
}

void *sub_22E682AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, llvm::Type **a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::Type **v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v21[3];
  _OWORD v22[3];
  char v23[32];
  __int16 v24;
  _OWORD v25[3];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  __int128 v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v11 = a3[1];
  v31 = *a3;
  v32 = v11;
  v33 = a3[2];
  v12 = (uint64_t *)(a2 + 272);
  v30[0] = v31;
  v30[1] = v11;
  v30[2] = v33;
  v13 = *(_QWORD *)(a2 + 88);
  LOWORD(v28) = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v30, v13, (uint64_t)&v26, (uint64_t)&v31);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v26);
  v14 = (llvm::Type **)llvm::ConstantInt::get();
  v29[0] = v31;
  v29[1] = v32;
  v29[2] = v33;
  sub_22E3BEDDC((uint64_t)v12, v14, (uint64_t)v29);
  v25[0] = v31;
  v25[1] = v32;
  v25[2] = v33;
  v24 = 257;
  sub_22F2486C4(v12, (uint64_t)v25, 1, (uint64_t)v23, (uint64_t)&v26);
  v32 = v27;
  v33 = v28;
  v31 = v26;
  v22[0] = v26;
  v22[1] = v27;
  v22[2] = v28;
  sub_22E3BEDDC((uint64_t)v12, a4, (uint64_t)v22);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = 2 * *(unsigned __int8 *)(v15 + 131);
  v17 = sub_22EF5D130(*(_QWORD *)(v15 + 144), a5);
  if (v16 <= v17)
    v18 = v17;
  else
    v18 = v16;
  v19 = a3[1];
  v21[0] = *a3;
  v21[1] = v19;
  v21[2] = a3[2];
  LOWORD(v28) = 257;
  return sub_22F24D74C(v12, (uint64_t)v21, v18, (uint64_t)&v26, a6);
}

int64_t sub_22E682C80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = 2 * *(unsigned __int8 *)(v2 + 131);
  result = sub_22EF5D130(*(_QWORD *)(v2 + 144), a2);
  if (v3 > result)
    return v3;
  return result;
}

uint64_t sub_22E682CB4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  _BYTE v10[32];
  __int16 v11;
  __int128 v12[3];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = (uint64_t *)(a2 + 272);
  v5 = a3[1];
  v16[0] = *a3;
  v16[1] = v5;
  v16[2] = a3[2];
  v6 = *(unsigned __int8 *)(a2 + 131);
  LOWORD(v15) = 257;
  sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v16, v6, (uint64_t)&v13, (uint64_t)&v17);
  v12[0] = v17;
  v12[1] = v18;
  v12[2] = v19;
  v7 = *(_QWORD *)(a2 + 88);
  v11 = 257;
  sub_22E3BEE6C(v4, v12, v7, (uint64_t)v10, (uint64_t)&v13);
  v18 = v14;
  v19 = v15;
  v17 = v13;
  v9[0] = v13;
  v9[1] = v14;
  v9[2] = v15;
  LOWORD(v15) = 257;
  return sub_22E3C2A7C(v4, (uint64_t)v9, (uint64_t)&v13);
}

void sub_22E682D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  int v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t j;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t NamedValue;
  uint64_t v41;
  uint64_t k;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t m;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  _BOOL4 v64;
  int v65;
  llvm::Value *v66;
  llvm::Value *v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t n;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Value *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm::BasicBlock *v88;
  uint64_t Context;
  uint64_t v90;
  llvm::BasicBlock *v91;
  uint64_t v92;
  llvm::Type *v93;
  llvm::Value *v94;
  int v95;
  unsigned int v96;
  uint64_t NullValue;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD **v115;
  llvm::Value *v116;
  char v117;
  int v118;
  uint64_t v119;
  llvm::Constant **v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  char v125[32];
  __int16 v126;
  _BYTE v127[32];
  __int16 v128;
  void *v129;
  uint64_t v130;
  _BYTE v131[16];
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  void (***v137)(llvm::IRBuilderDefaultInserter *__hidden);
  uint64_t v138;
  int v139;
  __int16 v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (**v145)(llvm::IRBuilderDefaultInserter *__hidden);
  uint64_t v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  __int16 v151;
  _QWORD v152[2];
  unsigned int v153;
  llvm::Value **v154;
  uint64_t v155;
  _QWORD v156[10];

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v0;
  v156[8] = *MEMORY[0x24BDAC8D0];
  v154 = (llvm::Value **)v156;
  v155 = 0x800000000;
  v152[0] = 1;
  for (i = 1; i != 9; i += 2)
    v152[i] = -4096;
  if (v1)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      v17 = sub_22EFBC2B0(*(_QWORD *)(v3 + 8 * v15));
      v18 = *(llvm::Value **)(v6 + 8 * v15);
      if ((v17 & 0xFFFFFFFD) != 0)
      {
        v148 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v15) + 32))(*(_QWORD *)(v3 + 8 * v15));
        sub_22F2A150C(v152, (uint64_t *)&v148)[1] = v18;
      }
      else
      {
        v19 = v155;
        if (v155 >= (unint64_t)HIDWORD(v155))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v155;
        }
        v154[v19] = v18;
        LODWORD(v155) = v155 + 1;
      }
      v15 = v16;
      v53 = v4 == v16++;
    }
    while (!v53);
    if ((_DWORD)v155)
    {
      v20 = llvm::FunctionType::get();
      v22 = sub_22E46BBB8((_QWORD **)(v12 + 280), *(_QWORD *)(*(_QWORD *)(v12 + 288) + 16392), 0, 0, 0, 0, 0, v21, 0, 0, -1);
      v148 = "__tls_init";
      v151 = 259;
      v23 = sub_22E4CF82C(v12, v20, (uint64_t)&v148, v22, 0, 1, 7);
      v24 = llvm::User::operator new((llvm::User *)0x58);
      llvm::ConstantInt::get();
      v148 = "__tls_guard";
      v151 = 259;
      llvm::GlobalVariable::GlobalVariable();
      v25 = *(_DWORD *)(v24 + 32) & 0xFFFFE3FF;
      *(_DWORD *)(v24 + 32) = v25 | 0x400;
      *(_DWORD *)(v24 + 32) = (v25 & 0xFFFFF3FF | (((*(unsigned __int16 *)(*(_QWORD *)(v12 + 184) + 104) >> 5) & 3) << 10))
                            + 1024;
      llvm::GlobalObject::setAlignment();
      sub_22E618EBC((uint64_t)&v148, v12, 0);
      v116 = v23;
      sub_22E4D1298((uint64_t)&v148, v23, v154, v155, v24 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8);
      sub_22E619434((uint64_t)&v148);
      v26 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 68);
      if (v26 <= 0x21 && ((1 << v26) & 0x3F0000888) != 0)
      {
        *((_WORD *)v23 + 9) = *((_WORD *)v23 + 9) & 0xC00F | 0x110;
        llvm::Function::addFnAttr();
      }
      if (!v8)
        goto LABEL_51;
      goto LABEL_20;
    }
  }
  v116 = 0;
  if (v8)
  {
LABEL_20:
    v27 = &v10[v8];
    while (1)
    {
      v28 = *v10;
      if (!*v10)
        break;
      v29 = *v10;
      if ((*(_DWORD *)(v28 + 28) & 0x7F) != 0x53)
        break;
LABEL_47:
      if (sub_22EFBC498(*v10, *(_QWORD *)(v29 + 88))
        && (int)sub_22EF732CC(*(_QWORD **)(*(_QWORD *)(v13 + 8) + 144), v28) >= 3)
      {
        sub_22E624994(v12, v28, 0);
        llvm::Module::getNamedValue();
        sub_22E6841E4(v13, v28);
      }
      if (++v10 == v27)
        goto LABEL_51;
    }
    for (j = *(_QWORD *)(v28 + 16); ; j = *(_QWORD *)(v31 + v33 + 16))
    {
      v31 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v31 = *(_QWORD *)v31;
      v32 = *(_WORD *)(v31 + 8) & 0x7F;
      if (v32 == 83)
      {
        v29 = v31 - 40;
        goto LABEL_47;
      }
      v33 = -40;
      if ((*(_WORD *)(v31 + 8) & 0x7Fu) > 0x46)
      {
        if (v32 == 71)
        {
          v33 = -56;
          continue;
        }
        if (v32 != 81)
          goto LABEL_37;
      }
      else
      {
        if (v32 > 0x18)
          goto LABEL_36;
        if (v32 == 16)
          goto LABEL_30;
        if (((1 << v32) & 0x1066) == 0)
        {
          if (v32 == 24)
          {
LABEL_30:
            v33 = -48;
            continue;
          }
LABEL_36:
          if (v32 == 70)
          {
            v33 = -64;
            continue;
          }
LABEL_37:
          v34 = v32 - 52;
          if (v32 - 33 >= 5)
            v35 = -48;
          else
            v35 = -64;
          if (v34 >= 6)
            v33 = v35;
          else
            v33 = -72;
          continue;
        }
      }
    }
  }
LABEL_51:
  v36 = *(unsigned int *)(v13 + 56);
  if (!(_DWORD)v36)
    goto LABEL_203;
  v37 = *(uint64_t **)(v13 + 48);
  v115 = (_QWORD **)(v12 + 280);
  v114 = MEMORY[0x24BED83B8] + 16;
  v124 = &v37[2 * v36];
  do
  {
    v39 = *v37;
    v38 = v37[1];
    sub_22E624994(v12, *v37, 0);
    NamedValue = llvm::Module::getNamedValue();
    if (!v39 || (v41 = v39, (*(_DWORD *)(v39 + 28) & 0x7F) != 0x53))
    {
      for (k = *(_QWORD *)(v39 + 16); ; k = *(_QWORD *)(v43 + v45 + 16))
      {
        v43 = k & 0xFFFFFFFFFFFFFFF8;
        if ((k & 4) != 0)
          v43 = *(_QWORD *)v43;
        v44 = *(_WORD *)(v43 + 8) & 0x7F;
        if (v44 == 83)
        {
          v41 = v43 - 40;
          break;
        }
        v45 = -40;
        if ((*(_WORD *)(v43 + 8) & 0x7Fu) > 0x46)
        {
          if (v44 == 71)
          {
            v45 = -56;
            continue;
          }
          if (v44 != 81)
            goto LABEL_69;
        }
        else
        {
          if (v44 > 0x18)
            goto LABEL_68;
          if (v44 == 16)
            goto LABEL_62;
          if (((1 << v44) & 0x1066) == 0)
          {
            if (v44 == 24)
            {
LABEL_62:
              v45 = -48;
              continue;
            }
LABEL_68:
            if (v44 == 70)
            {
              v45 = -64;
              continue;
            }
LABEL_69:
            v46 = v44 - 52;
            v47 = v44 - 33 >= 5;
            v48 = -64;
            if (v47)
              v48 = -48;
            if (v46 >= 6)
              v45 = v48;
            else
              v45 = -72;
            continue;
          }
        }
      }
    }
    if (!sub_22EFBC498(v39, *(_QWORD *)(v41 + 88)))
    {
      sub_22EFBB794(v39);
      if (v49 == 2)
      {
        v50 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 68);
        if (v50 - 28 < 6 || ((v51 = v50 > 0xB, v52 = (1 << v50) & 0x888, !v51) ? (v53 = v52 == 0) : (v53 = 1), !v53))
        {
          v54 = *(_DWORD *)(v38 + 32);
          *(_DWORD *)(v38 + 32) = v54 & 0xFFFFFFF0;
          if ((v54 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v38) & 1) == 0)
            *(_DWORD *)(v38 + 32) |= 0x4000u;
          goto LABEL_193;
        }
      }
      v55 = *(_DWORD *)(v38 + 32);
      if ((v55 & 0xF) == 5)
      {
        *(_DWORD *)(v38 + 32) = v55 & 0xFFFFFFF0 | 3;
        if ((v55 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v38) & 1) == 0)
          *(_DWORD *)(v38 + 32) |= 0x4000u;
      }
    }
    sub_22E62A5F4((uint64_t *)v12, 0, (llvm::Function *)v38);
    v148 = &v150;
    v149 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)&v129, (uint64_t)&v148);
    (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(v13 + 16) + 248))(*(_QWORD *)(v13 + 16), v39, &v129);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v129);
    v121 = llvm::FunctionType::get();
    v122 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 704))(v13, v39);
    if (v122)
    {
      if (!v39 || (v56 = v39, (*(_DWORD *)(v39 + 28) & 0x7F) != 0x53))
      {
        for (m = *(_QWORD *)(v39 + 16); ; m = *(_QWORD *)(v58 + v60 + 16))
        {
          v58 = m & 0xFFFFFFFFFFFFFFF8;
          if ((m & 4) != 0)
            v58 = *(_QWORD *)v58;
          v59 = *(_WORD *)(v58 + 8) & 0x7F;
          if (v59 == 83)
          {
            v56 = v58 - 40;
            break;
          }
          v60 = -40;
          if ((*(_WORD *)(v58 + 8) & 0x7Fu) > 0x46)
          {
            if (v59 == 71)
            {
              v60 = -56;
              continue;
            }
            if (v59 != 81)
              goto LABEL_110;
          }
          else
          {
            if (v59 > 0x18)
              goto LABEL_109;
            if (v59 == 16)
              goto LABEL_103;
            if (((1 << v59) & 0x1066) == 0)
            {
              if (v59 == 24)
              {
LABEL_103:
                v60 = -48;
                continue;
              }
LABEL_109:
              if (v59 == 70)
              {
                v60 = -64;
                continue;
              }
LABEL_110:
              v61 = v59 - 52;
              v47 = v59 - 33 >= 5;
              v62 = -64;
              if (v47)
                v62 = -48;
              if (v61 >= 6)
                v60 = v62;
              else
                v60 = -72;
              continue;
            }
          }
        }
      }
      v63 = sub_22EFBC498(v39, *(_QWORD *)(v56 + 88));
      v64 = v63 != 0;
      if (v63)
      {
        v65 = sub_22EFBC2B0(v39);
        v66 = v116;
        if ((v65 & 0xFFFFFFFD) != 0)
        {
          v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
          v129 = 0;
          v112 = sub_22F2891B4((uint64_t)v152, v111, &v129);
          v66 = 0;
          if (v112)
            v66 = (llvm::Value *)*((_QWORD *)v129 + 1);
        }
        if (!v66)
        {
          v120 = 0;
          v117 = 1;
          v118 = 1;
          goto LABEL_135;
        }
        v118 = v64;
        v132 = 261;
        v129 = v148;
        v130 = v149;
        v67 = (llvm::Value *)llvm::GlobalAlias::create();
        if (v67)
          goto LABEL_125;
        goto LABEL_131;
      }
      v118 = 0;
      v132 = 261;
      v129 = v148;
      v130 = v149;
      v71 = *(_QWORD *)(v12 + 200);
      v72 = llvm::User::operator new((llvm::User *)0x78);
      v73 = v71;
      v67 = (llvm::Value *)v72;
      MEMORY[0x23489F6FC](v72, v121, 9, 0xFFFFFFFFLL, &v129, v73);
      v75 = sub_22E46BBB8(v115, *(_QWORD *)(*(_QWORD *)(v12 + 288) + 16392), 0, 0, 0, 0, 0, v74, 0, 0, -1);
      sub_22E62A548(v12, 0, 0, v75, v67, 0);
      if (!v67)
      {
LABEL_131:
        v120 = 0;
        goto LABEL_132;
      }
LABEL_125:
      v68 = *(_DWORD *)(NamedValue + 32) & 0x30;
      v69 = *((_DWORD *)v67 + 8);
      v70 = v69 & 0xFFFFFFCF | v68;
      *((_DWORD *)v67 + 8) = v70;
      if ((v69 & 0xFu) - 7 >= 2)
      {
        if (!v68 || (llvm::GlobalValue::hasExternalWeakLinkage(v67) & 1) != 0)
        {
LABEL_127:
          v120 = (llvm::Constant **)v67;
          if (*(_DWORD *)(*(_QWORD *)(v12 + 216) + 68) == 15
            && (llvm::GlobalValue::hasExternalWeakLinkage(v67) & 1) != 0)
          {
            v117 = 0;
          }
          else
          {
            v117 = 0;
            *((_DWORD *)v67 + 8) = *((_DWORD *)v67 + 8) & 0xFFFFBFFF | (((*(_DWORD *)(NamedValue + 32) >> 14) & 1) << 14);
          }
          goto LABEL_135;
        }
        v70 = *((_DWORD *)v67 + 8);
      }
      *((_DWORD *)v67 + 8) = v70 | 0x4000;
      goto LABEL_127;
    }
    v120 = 0;
    v118 = 0;
LABEL_132:
    v117 = 1;
LABEL_135:
    if (*(_DWORD *)(*(_QWORD *)(v12 + 216) + 68) != 21)
      goto LABEL_167;
    if (v39)
    {
      v76 = v39;
      if ((*(_DWORD *)(v39 + 28) & 0x7F) == 0x53)
        goto LABEL_162;
    }
    for (n = *(_QWORD *)(v39 + 16); ; n = *(_QWORD *)(v78 + v80 + 16))
    {
      v78 = n & 0xFFFFFFFFFFFFFFF8;
      if ((n & 4) != 0)
        v78 = *(_QWORD *)v78;
      v79 = *(_WORD *)(v78 + 8) & 0x7F;
      if (v79 == 83)
        break;
      v80 = -40;
      if ((*(_WORD *)(v78 + 8) & 0x7Fu) > 0x46)
      {
        if (v79 == 71)
        {
          v80 = -56;
          continue;
        }
        if (v79 != 81)
          goto LABEL_152;
      }
      else
      {
        if (v79 > 0x18)
          goto LABEL_151;
        if (v79 == 16)
          goto LABEL_145;
        if (((1 << v79) & 0x1066) == 0)
        {
          if (v79 == 24)
          {
LABEL_145:
            v80 = -48;
            continue;
          }
LABEL_151:
          if (v79 == 70)
          {
            v80 = -64;
            continue;
          }
LABEL_152:
          v81 = v79 - 52;
          v47 = v79 - 33 >= 5;
          v82 = -64;
          if (v47)
            v82 = -48;
          if (v81 >= 6)
            v80 = v82;
          else
            v80 = -72;
          continue;
        }
      }
    }
    v76 = v78 - 40;
LABEL_162:
    if (sub_22EFBC498(v39, *(_QWORD *)(v76 + 88)))
    {
      if (sub_22E46B290(v13, v39, 1))
      {
        if ((sub_22E46B1C8(v13, v39) & 1) == 0)
        {
          v113 = *(_DWORD *)(NamedValue + 32) & 0xF;
          v132 = 261;
          v129 = v148;
          v130 = v149;
          v83 = *(_QWORD *)(v12 + 200);
          v84 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
          MEMORY[0x23489F6FC](v84, v121, v113, 0xFFFFFFFFLL, &v129, v83);
          v86 = sub_22E46BBB8(v115, *(_QWORD *)(*(_QWORD *)(v12 + 288) + 16392), 0, 0, 0, 0, 0, v85, 0, 0, -1);
          sub_22E62A548(v12, 0, 0, v86, v84, 0);
          v132 = 257;
          v87 = operator new();
          v88 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
          Context = llvm::BasicBlock::getContext(v88);
          v129 = v131;
          v130 = 0x200000000;
          v135 = Context;
          v136 = &v144;
          v137 = &v145;
          v138 = 0;
          v139 = 0;
          v140 = 512;
          v141 = 7;
          v142 = 0;
          v143 = 0;
          v144 = v114;
          v145 = &off_24FA66C70;
          v133 = v87;
          v134 = v87 + 40;
          v146 = 0;
          v147 = v12;
          sub_22E3CF118((uint64_t *)&v129);
          llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v145);
          llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v144);
          if (v129 != v131)
            free(v129);
        }
      }
    }
LABEL_167:
    v132 = 257;
    v90 = operator new();
    v91 = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
    v92 = llvm::BasicBlock::getContext(v91);
    v129 = v131;
    v130 = 0x200000000;
    v135 = v92;
    v136 = &v144;
    v137 = &v145;
    v138 = 0;
    v139 = 0;
    v140 = 512;
    v141 = 7;
    v142 = 0;
    v143 = 0;
    v144 = MEMORY[0x24BED83B8] + 16;
    v145 = &off_24FA66C70;
    v133 = v90;
    v134 = v90 + 40;
    v146 = 0;
    v147 = v12;
    if (v122)
    {
      if (v118)
      {
        if ((v117 & 1) == 0)
        {
          v128 = 257;
          v94 = sub_22E462B78((uint64_t *)&v129, v121, (uint64_t)v120, 0, 0, (uint64_t)v127, 0);
          sub_22EFBB794(v39);
          if (v95 == 2)
          {
            v96 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 68);
            if (v96 <= 0x21 && ((1 << v96) & 0x3F0000888) != 0)
            {
              *((_WORD *)v94 + 9) = *((_WORD *)v94 + 9) & 0xF003 | 0x44;
              *((_WORD *)*(v120 - 4) + 9) = *((_WORD *)*(v120 - 4) + 9) & 0xC00F | 0x110;
            }
          }
        }
      }
      else if (*(_DWORD *)(*(_QWORD *)(v12 + 216) + 68) == 21)
      {
        v128 = 257;
        sub_22E462B78((uint64_t *)&v129, v121, (uint64_t)v120, 0, 0, (uint64_t)v127, 0);
      }
      else
      {
        v128 = 257;
        NullValue = llvm::Constant::getNullValue(*v120, v93);
        v119 = sub_22E3C18F4((uint64_t)&v129, 33, (uint64_t *)v120, NullValue, (uint64_t)v127);
        v128 = 257;
        v98 = operator new();
        llvm::BasicBlock::BasicBlock();
        v128 = 257;
        v99 = operator new();
        llvm::BasicBlock::BasicBlock();
        v100 = llvm::User::operator new((llvm::User *)0x40);
        v123 = v99;
        MEMORY[0x23489C09C](v100, v98, v99, v119, 0);
        v128 = 257;
        ((void (*)(void (***)(llvm::IRBuilderDefaultInserter *__hidden), uint64_t, _BYTE *, uint64_t, uint64_t))(*v137)[2])(v137, v100, v127, v133, v134);
        if ((_DWORD)v130)
        {
          v101 = (char *)v129;
          v102 = (char *)v129 + 16 * v130;
          do
          {
            llvm::Instruction::setMetadata();
            v101 += 16;
          }
          while (v101 != v102);
        }
        v133 = v98;
        v134 = v98 + 40;
        v128 = 257;
        sub_22E462B78((uint64_t *)&v129, v121, (uint64_t)v120, 0, 0, (uint64_t)v127, 0);
        v103 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        v128 = 257;
        ((void (*)(void (***)(llvm::IRBuilderDefaultInserter *__hidden), uint64_t, _BYTE *, uint64_t, uint64_t))(*v137)[2])(v137, v103, v127, v133, v134);
        if ((_DWORD)v130)
        {
          v104 = (char *)v129;
          v105 = (char *)v129 + 16 * v130;
          do
          {
            llvm::Instruction::setMetadata();
            v104 += 16;
          }
          while (v104 != v105);
        }
        v133 = v123;
        v134 = v123 + 40;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      sub_22EF5B404(*(_QWORD *)(v12 + 144), v39, 0);
      v126 = 257;
      v106 = (_QWORD *)llvm::User::operator new((llvm::User *)0x40);
      v128 = 257;
      llvm::LoadInst::LoadInst();
      ((void (*)(void (***)(llvm::IRBuilderDefaultInserter *__hidden), _QWORD *, char *, uint64_t, uint64_t))(*v137)[2])(v137, v106, v125, v133, v134);
      if ((_DWORD)v130)
      {
        v109 = (char *)v129;
        v110 = (char *)v129 + 16 * v130;
        do
        {
          llvm::Instruction::setMetadata();
          v109 += 16;
        }
        while (v109 != v110);
      }
    }
    else
    {
      v106 = (_QWORD *)NamedValue;
    }
    v107 = *(uint64_t **)(*(_QWORD *)(v38 + 24) + 16);
    v108 = *v107;
    if (*v106 != *v107)
    {
      v128 = 257;
      v106 = (_QWORD *)sub_22E3C1338((uint64_t *)&v129, (uint64_t)v106, v108, (uint64_t)v127);
    }
    sub_22E4772D4((uint64_t *)&v129, (uint64_t)v106);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v145);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v144);
    if (v129 != v131)
      free(v129);
    if (v148 != &v150)
      free(v148);
LABEL_193:
    v37 += 2;
  }
  while (v37 != v124);
LABEL_203:
  if ((v152[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v152[1], (void *)(16 * v153));
  if (v154 != v156)
    free(v154);
}

uint64_t sub_22E683EC0(uint64_t a1, uint64_t a2)
{
  if (sub_22E46B290(a1, a2, 0))
    return sub_22E46B1C8(a1, a2);
  else
    return 1;
}

double sub_22E683F04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  sub_22E6315B8(*(_QWORD *)(a2 + 144), a3, 0, 0);
  v10 = sub_22E6841E4(a1, a3);
  if (v10)
    v11 = *(_QWORD *)(v10 + 24);
  else
    v11 = 0;
  v17 = 257;
  v12 = sub_22E462B78((uint64_t *)(a2 + 272), v11, v10, 0, 0, (uint64_t)v16, 0);
  v13 = (uint64_t)v12;
  *((_WORD *)v12 + 9) = (*(_WORD *)(v10 + 18) >> 2) & 0xFFC | *((_WORD *)v12 + 9) & 0xF003;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 84) = 2;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28)
    return sub_22E619C24((uint64_t)v12, a4, 0, 0, a2, a5);
  v15 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), a3, 0);
  return sub_22F283454(a2, v13, a4, v15, 2, a5);
}

uint64_t sub_22E684060(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E6840DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E684168(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

uint64_t sub_22E6841E4(uint64_t a1, unint64_t a2)
{
  uint64_t NamedValue;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  int v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  _QWORD v47[33];

  v47[32] = *MEMORY[0x24BDAC8D0];
  v45 = v47;
  v46 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&v35, (uint64_t)&v45);
  (*(void (**)(_QWORD, unint64_t, void **))(**(_QWORD **)(a1 + 16) + 256))(*(_QWORD *)(a1 + 16), a2, &v35);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v35);
  NamedValue = llvm::Module::getNamedValue();
  if (NamedValue)
    goto LABEL_2;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v8 = *(_DWORD *)(v7 + 16);
    if ((v8 & 0xFE) != 0x28)
    {
      v7 = sub_22F10CF48(v7);
      if (!v7)
        goto LABEL_11;
      v8 = *(_DWORD *)(v7 + 16);
    }
    if ((v8 & 0x100000) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v7)
        {
          v34 = *(_DWORD *)(v7 + 16);
          if ((v34 & 0xFE) == 0x28)
            continue;
        }
        v7 = sub_22F10CF48(v7);
        v34 = *(_DWORD *)(v7 + 16);
      }
      while ((v34 & 0x100000) != 0);
    }
    v6 = *(_QWORD *)(v7 + 32);
  }
LABEL_11:
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v9 + 280;
  v11 = sub_22EF5B848(*(_QWORD *)(v9 + 144), v6, 0);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = &v37;
  v36 = 0x1000000000;
  v12 = sub_22F24E348(v10, v11, (uint64_t *)&v35);
  if (v35 != &v37)
    free(v35);
  v13 = sub_22E46F2EC(*(_QWORD *)(a1 + 8) + 280, v12);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = sub_22F29B88C(v14, a2, 0);
  if ((v15 - 7) >= 2)
  {
    sub_22EFBB794(a2);
    if (v16 != 2
      || ((v17 = *(_DWORD *)(*(_QWORD *)(v14 + 216) + 68), v18 = v17 > 0x21, v19 = (1 << v17) & 0x3F0000888, !v18)
        ? (v20 = v19 == 0)
        : (v20 = 1),
          v20 || v15 <= 5 && ((1 << v15) & 0x2C) != 0))
    {
      v15 = 5;
    }
  }
  LOWORD(v38) = 261;
  v35 = v45;
  v36 = v46;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
  NamedValue = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](NamedValue, v13, v15, 0xFFFFFFFFLL, &v35, v21);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_DWORD *)(*(_QWORD *)(v22 + 216) + 76);
  if ((v23 - 8) >= 2
    && v23 != 5
    && (*(_DWORD *)(NamedValue + 32) & 0xFu) <= 0xA
    && ((1 << (*(_DWORD *)(NamedValue + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName((llvm::Value *)NamedValue);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v22 = *(_QWORD *)(a1 + 8);
  }
  sub_22E62A548(v22, 0, 0, v12, (llvm::Value *)NamedValue, 0);
  if ((*(_DWORD *)(NamedValue + 32) & 0xFu) - 7 < 2)
    goto LABEL_33;
  v24 = *(_QWORD *)(a1 + 8);
  sub_22EFBB794(a2);
  if (v25 == 2)
  {
    v26 = *(_DWORD *)(*(_QWORD *)(v24 + 216) + 68);
    if (v26 <= 0x21
      && ((1 << v26) & 0x3F0000888) != 0
      && ((*(_DWORD *)(NamedValue + 32) & 0xFu) > 5 || ((1 << (*(_DWORD *)(NamedValue + 32) & 0xF)) & 0x2C) == 0)
      && (sub_22EFB9558(a2) & 0x18) != 0)
    {
      goto LABEL_33;
    }
  }
  v27 = *(_DWORD *)(NamedValue + 32);
  v28 = v27 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(NamedValue + 32) = v28;
  if ((v27 & 0xFu) - 7 >= 2)
  {
    if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)NamedValue) & 1) != 0)
      goto LABEL_33;
    v28 = *(_DWORD *)(NamedValue + 32);
  }
  *(_DWORD *)(NamedValue + 32) = v28 | 0x4000;
LABEL_33:
  v29 = *(_QWORD *)(a1 + 8);
  sub_22EFBB794(a2);
  if (v30 == 2)
  {
    v31 = *(_DWORD *)(*(_QWORD *)(v29 + 216) + 68);
    if (v31 <= 0x21 && ((1 << v31) & 0x3F0000888) != 0)
    {
      *(_WORD *)(NamedValue + 18) = *(_WORD *)(NamedValue + 18) & 0xC00F | 0x110;
      llvm::Function::addFnAttr();
    }
  }
  v32 = *(_DWORD *)(a1 + 56);
  if (v32 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(a1 + 56);
  }
  v33 = (unint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v32);
  *v33 = a2;
  v33[1] = NamedValue;
  ++*(_DWORD *)(a1 + 56);
LABEL_2:
  if (v45 != v47)
    free(v45);
  return NamedValue;
}

uint64_t sub_22E68466C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E6846E8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E684774()
{
  return 0;
}

uint64_t sub_22E68477C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E6847F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E684884(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
  v3 = (a2 & 7) != 0;
  if (v2 != 57)
    v3 = 0;
  return v2 == 55 || v3;
}

uint64_t sub_22E6848B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E68492C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6849B8(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
  v3 = (a2 & 7) != 0;
  if (v2 != 57)
    v3 = 0;
  return v2 == 55 || v3;
}

uint64_t sub_22E6849E4()
{
  return 0;
}

void sub_22E6849EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;

  v5 = (char *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 152) + 568))(*(_QWORD *)(a2 + 152), "exception-handling", 18);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a2 + 2616);
    v5 = sub_22E4899EC(a2 + 1984, 2u, 16);
    *(_QWORD *)v5 = &unk_24FA655E0;
    *((_QWORD *)v5 + 1) = v6;
  }
  sub_22E67D8B8((uint64_t)v5, a2, a3);
}

uint64_t sub_22E684A64(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return a1;
}

void sub_22E684AE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_24FA67770;
  v2 = *(void **)(a1 + 48);
  if (v2 != (void *)(a1 + 64))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E684B6C()
{
  return 1;
}

void sub_22E684B74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  int8x16_t v17;
  llvm::Constant **v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::Type *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  llvm::Value *v48;
  void *NullValue;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  _QWORD v69[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v69[32] = *MEMORY[0x24BDAC8D0];
  sub_22EFBB794(v1);
  if (v6)
  {
    v59 = *(void **)(*(_QWORD *)(v5 + 8) + 72);
    llvm::FunctionType::get();
    v28 = llvm::PointerType::get();
    v59 = *(void **)(*(_QWORD *)(v5 + 8) + 72);
    v60 = v28;
    v29 = llvm::FunctionType::get();
    v67 = (void *)sub_22E633A04(*(_QWORD *)(v5 + 8), v29, "__pt_atexit_np", 0xEuLL, 0, 0, 0);
    *(_QWORD *)&v68 = v30;
    v31 = sub_22E4CFB3C();
    NullValue = (void *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v5 + 8) + 72), v32);
    v50 = (uint64_t)v31;
    v61 = 257;
    sub_22F24EEDC(v4, (uint64_t)v67, (llvm::Value *)v68, (uint64_t)&NullValue, 2, (uint64_t)&v59);
  }
  else
  {
    v7 = sub_22E4CF4E8();
    sub_22E4CFECC(v4, (_QWORD *)v7);
    v8 = llvm::FunctionType::get();
    v67 = v69;
    v68 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)&v59, (uint64_t)&v67);
    (*(void (**)(_QWORD, unint64_t, void **))(**(_QWORD **)(v5 + 16) + 288))(*(_QWORD *)(v5 + 16), v2, &v59);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v59);
    v10 = sub_22E46BBB8((_QWORD **)(*(_QWORD *)(v5 + 8) + 280), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 288) + 16392), 0, 0, 0, 0, 0, v9, 0, 0, -1);
    v11 = *(_QWORD *)(v5 + 8);
    v61 = 261;
    v59 = v67;
    v60 = v68;
    v12 = sub_22E4CF82C(v11, v8, (uint64_t)&v59, v10, *(_DWORD *)(v2 + 24), 0, 7);
    sub_22E618EBC((uint64_t)&v59, *(_QWORD *)(v5 + 8), 0);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144) + 16392);
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    NullValue = &v51;
    v50 = 0x1000000000;
    v14 = *(_DWORD *)(v2 + 24);
    v15 = sub_22EFBC5B4(v2);
    sub_22EFF605C(v15);
    sub_22E61A8FC((uint64_t)&v59, 0, 0, v13, v12, v10, (uint64_t *)&NullValue, v14, v17, v16);
    if (NullValue != &v51)
      free(NullValue);
    v18 = (llvm::Constant **)sub_22F25B68C((uint64_t)&v59, (_QWORD *)v7);
    NullValue = "needs_destruct";
    LOWORD(v52) = 259;
    v20 = llvm::Constant::getNullValue(*v18, v19);
    v21 = sub_22E3C18F4((uint64_t)&v62, 32, (uint64_t *)v18, v20, (uint64_t)&NullValue);
    NullValue = "destruct.call";
    LOWORD(v52) = 259;
    v22 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    NullValue = "destruct.end";
    LOWORD(v52) = 259;
    v23 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v24 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v24, v22, v23, v21, 0);
    LOWORD(v52) = 257;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, v24, &NullValue, v64, v65);
    if (v63)
    {
      v25 = v62;
      v26 = v62 + 16 * v63;
      do
      {
        llvm::Instruction::setMetadata();
        v25 += 16;
      }
      while (v25 != v26);
    }
    sub_22E5ED9B4(&v59, v22, 0);
    if (v7)
      v27 = *(_QWORD *)(v7 + 24);
    else
      v27 = 0;
    LOWORD(v52) = 257;
    v33 = sub_22E462B78(&v62, v27, v7, 0, 0, (uint64_t)&NullValue, 0);
    *((_WORD *)v33 + 9) = (*(_WORD *)(v7 + 18) >> 2) & 0xFFC | *((_WORD *)v33 + 9) & 0xF003;
    sub_22E5ED9B4(&v59, v23, 0);
    sub_22E619DE8((uint64_t)&v59, 0);
    if ((*(_BYTE *)(v2 + 29) & 1) == 0)
      goto LABEL_22;
    sub_22EFC8E88(v2);
    v35 = *(uint64_t **)v34;
    v36 = *(unsigned int *)(v34 + 8);
    v37 = *(uint64_t **)v34;
    if ((_DWORD)v36)
    {
      v38 = 8 * v36;
      v37 = *(uint64_t **)v34;
      while (*(_WORD *)(*v37 + 32) != 192)
      {
        ++v37;
        v38 -= 8;
        if (!v38)
          goto LABEL_22;
      }
    }
    if (v37 == &v35[v36])
    {
LABEL_22:
      if ((sub_22EFBC2B0(v2) & 0xFFFFFFFD) != 0
        || sub_22EF732CC(*(_QWORD **)(*(_QWORD *)(v5 + 8) + 144), v2) == 2)
      {
        sub_22E629CDC(*(_QWORD *)(v5 + 8), (uint64_t)v12, 0xFFFF, 0);
      }
      else
      {
        v46 = *(_QWORD *)(v5 + 8);
        if (v12)
          v47 = (void *)*((_QWORD *)v12 + 3);
        else
          v47 = 0;
        v48 = v12;
        NullValue = v47;
        sub_22F25B9C4(v46 + 2320, &NullValue, (uint64_t *)&v48);
      }
    }
    else
    {
      do
      {
        v40 = *v35++;
        v39 = v40;
      }
      while (*(_WORD *)(v40 + 32) != 192);
      v41 = *(_QWORD *)(v5 + 8);
      v42 = *(unsigned int *)(v39 + 36);
      v43 = *(unsigned int *)(v41 + 2664);
      v44 = v43;
      if (v43 >= *(_DWORD *)(v41 + 2668))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v44 = *(unsigned int *)(v41 + 2664);
      }
      v45 = (uint64_t *)(*(_QWORD *)(v41 + 2656) + 16 * v44);
      *v45 = v42 | (v43 << 32);
      v45[1] = (uint64_t)v12;
      ++*(_DWORD *)(v41 + 2664);
    }
    sub_22E619434((uint64_t)&v59);
    if (v67 != v69)
      free(v67);
  }
}

uint64_t sub_22E6851B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  if (a2 != a3)
  {
    v7 = sub_22F289C48((uint64_t)a4);
    v9 = v8;
    v10 = sub_22F289C48((uint64_t)a4);
    if (((v7 & 3) != 0 || (v10 & 3) != 0) && (*(_DWORD *)(llvm::ConstantExpr::getExtractValue() + 20) & 0x7FFFFFF) != 0)
    {
      v11 = llvm::GlobalPtrAuthInfo::analyze();
      if (v12 && *(unsigned __int8 *)(v9 + 16) <= 0x14u)
        sub_22E5DF610(a4, *(llvm::Value **)(*(_QWORD *)(v11 - 32) - 32 * (*(_DWORD *)(*(_QWORD *)(v11 - 32) + 20) & 0x7FFFFFF)), v7 >> 4, 0, v9);
      llvm::ConstantExpr::getPtrToInt();
      return llvm::ConstantExpr::getInsertValue();
    }
  }
  return a1;
}

uint64_t sub_22E6852D8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t PtrToInt;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  llvm::Value *NamedValue;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  int8x16_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[32];
  __int16 v67;
  _QWORD v68[3];
  int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _OWORD v74[3];
  _QWORD v75[3];
  int v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[72];
  uint64_t v82;
  uint64_t v83;
  void *v84[2];
  _BYTE v85[1216];
  void *v86;
  uint64_t v87;
  _BYTE v88[192];
  void *v89;
  uint64_t v90;
  _BYTE v91[16];
  void *v92;
  uint64_t v93;
  _QWORD v94[5];
  void *v95;
  uint64_t v96;
  _BYTE v97[128];
  _QWORD v98[4];
  __int16 v99;
  uint64_t v100[178];
  uint64_t v101;
  char v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  _QWORD v106[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v106[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(v0 + 8);
  v82 = 0;
  v83 = 0;
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 32))(v1);
  if ((*(_BYTE *)(v5 + 82) & 0xC) != 0 || sub_22EFD7260(v5))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 712);
    if (sub_22E462B18(v2))
      v14 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
    else
      v14 = v2;
    v15 = sub_22F40C040(v13, v14, 0);
    v16 = v15;
    v17 = *(_QWORD **)(v3 + 8);
    if (*(_DWORD *)(v17[89] + 136) == 1)
    {
      v18 = 4 * v15;
    }
    else
    {
      v19 = v17[18];
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 15088) + *(_QWORD *)(**(_QWORD **)(v19 + 15088) - 24));
      v18 = v20 / sub_22EF5CDF0(v19, *(_QWORD *)(*(_QWORD *)(v19 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v16;
      v17 = *(_QWORD **)(v3 + 8);
    }
    if (!*(_BYTE *)(v3 + 192))
    {
      v82 = llvm::ConstantInt::get();
      goto LABEL_12;
    }
    if ((*(_BYTE *)(v17[23] + 1400) & 3) == 0)
    {
      PtrToInt = llvm::ConstantInt::get();
LABEL_22:
      v82 = PtrToInt;
      goto LABEL_12;
    }
    v22 = v17[89];
    v23 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v18);
    if (sub_22E462B18(v23))
      v23 = v23 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v23) + 96) & 0x80) == 0);
    v24 = sub_22F122FA4(v22, v23) & 0xFFFFFFFFFFFFFFF8;
    v104 = v106;
    v105 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v81, (uint64_t)&v104);
    v25 = *(_QWORD *)(v3 + 16);
    v26 = sub_22E462B18(v24);
    v27 = v24;
    if (v26)
      v27 = v24 | ((*(_WORD *)(sub_22EFC8868(v24) + 96) & 0x80) == 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD, _BYTE *))(*(_QWORD *)v25 + 72))(v25, v27, 0, v81);
    v28 = v105;
    if (*((_QWORD *)&v105 + 1) < (unint64_t)(v105 + 10))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v28 = v105;
    }
    v29 = (char *)v104 + v28;
    *(_QWORD *)v29 = *(_QWORD *)"_vfpthunk_";
    *((_WORD *)v29 + 4) = 24427;
    v30 = v104;
    v31 = v105 + 10;
    *(_QWORD *)&v105 = v105 + 10;
    NamedValue = (llvm::Value *)llvm::Module::getNamedValue();
    if (NamedValue)
    {
LABEL_69:
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v81);
      if (v104 != v106)
        free(v104);
      v55 = *(_WORD *)(v2 + 80) & 0x7F;
      v56 = -40;
      if (v55 > 0x46)
      {
        if (v55 != 83)
        {
          if (v55 == 71)
          {
            v56 = -56;
            goto LABEL_87;
          }
          if (v55 == 81)
            goto LABEL_87;
LABEL_82:
          v57 = v55 - 52;
          v58 = v55 - 33 >= 5;
          v59 = -48;
          if (!v58)
            v59 = -64;
          if (v57 >= 6)
            v56 = v59;
          else
            v56 = -72;
        }
      }
      else
      {
        if (v55 > 0x18)
          goto LABEL_81;
        if (v55 != 16)
        {
          if (((1 << v55) & 0x1066) != 0)
            goto LABEL_87;
          if (v55 != 24)
          {
LABEL_81:
            if (v55 == 70)
            {
              v56 = -64;
              goto LABEL_87;
            }
            goto LABEL_82;
          }
        }
        v56 = -48;
      }
LABEL_87:
      v60 = *(_QWORD *)(v2 + 72 + v56 + 16);
      v61 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
      if ((v60 & 4) != 0)
        v61 = (_QWORD *)*v61;
      if (v61)
        v62 = v61 - 8;
      else
        v62 = 0;
      v63 = sub_22F36A6C0(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), *(_QWORD *)(v2 + 48), v62[6]);
      sub_22F28A99C(*(uint64_t **)(v3 + 8), NamedValue, v63, v2);
      PtrToInt = llvm::ConstantExpr::getPtrToInt();
      goto LABEL_22;
    }
    v64 = sub_22E46C3D4((_QWORD **)(*(_QWORD *)(v3 + 8) + 280), (_QWORD *)v24);
    v33 = sub_22E46F2EC(*(_QWORD *)(v3 + 8) + 280, v64);
    v34 = sub_22EFB948C(v24);
    if (v34 <= 2)
      v35 = 7;
    else
      v35 = 3;
    v99 = 261;
    v98[0] = v30;
    v98[1] = v31;
    v36 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 200);
    v37 = llvm::User::operator new((llvm::User *)0x78);
    v65 = v33;
    v38 = v33;
    NamedValue = (llvm::Value *)v37;
    MEMORY[0x23489F6FC](v37, v38, v35, 0xFFFFFFFFLL, v98, v36);
    if (v34 >= 3)
    {
      v39 = *((_DWORD *)NamedValue + 8);
      v40 = v39 & 0xFFFFFFCF | 0x10;
      *((_DWORD *)NamedValue + 8) = v40;
      if ((v39 & 0xFu) - 7 < 2)
      {
LABEL_38:
        *((_DWORD *)NamedValue + 8) = v40 | 0x4000;
        goto LABEL_39;
      }
      if ((llvm::GlobalValue::hasExternalWeakLinkage(NamedValue) & 1) == 0)
      {
        v40 = *((_DWORD *)NamedValue + 8);
        goto LABEL_38;
      }
    }
LABEL_39:
    v41 = *(_QWORD *)(v3 + 8);
    v42 = sub_22E462B18(v24);
    v43 = v24;
    if (v42)
      v43 = v24 | ((*(_WORD *)(sub_22EFC8868(v24) + 96) & 0x80) == 0);
    sub_22E62A548(v41, v43, 0, v64, NamedValue, 1);
    sub_22E62A5F4(*(uint64_t **)(v3 + 8), v24, NamedValue);
    llvm::Function::removeFnAttr();
    llvm::Function::removeFnAttr();
    llvm::Function::removeFnAttr();
    sub_22E618EBC((uint64_t)v98, *(_QWORD *)(v3 + 8), 0);
    v44 = sub_22E462B18(v24);
    v45 = v24;
    if (v44)
      v45 = v24 | ((*(_WORD *)(sub_22EFC8868(v24) + 96) & 0x80) == 0);
    v100[177] = v45;
    LODWORD(v101) = 0;
    v102 = 1;
    v95 = v97;
    v96 = 0x1000000000;
    sub_22E61E37C((uint64_t)v98, v45, v101, (uint64_t)&v95);
    sub_22E61A8FC((uint64_t)v98, 0, 0, *(_QWORD *)(v64 + 40), NamedValue, v64, (uint64_t *)&v95, *(_DWORD *)(v24 + 24), v46, 0);
    v103 = sub_22E46B144(v3, (uint64_t)v98);
    v84[0] = v85;
    v84[1] = (void *)0x800000000;
    v86 = v88;
    v87 = 0x100000000;
    v89 = v91;
    v90 = 0x100000000;
    v92 = v94;
    v93 = 0x200000000;
    v94[4] = 0;
    if ((_DWORD)v96)
    {
      v47 = (uint64_t *)v95;
      v48 = 8 * v96;
      do
      {
        v49 = *v47++;
        sub_22E477344((uint64_t)v98, (uint64_t)v84, v49, 0);
        v48 -= 8;
      }
      while (v48);
    }
    v50 = *(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v50)
      v51 = *(_BYTE *)(v50 + 16) == 26;
    else
      v51 = 0;
    if (!v51)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v50 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0));
      else
        v50 = 0;
    }
    v52 = sub_22E46DC6C(v50, 1);
    v53 = sub_22E46DCFC(*(_QWORD *)(v3 + 8) + 280, v84, v50, v52, 0);
    if (sub_22E462B18(v24))
      v24 |= (*(_WORD *)(sub_22EFC8868(v24) + 96) & 0x80) == 0;
    sub_22F24D1F4(v98, v74);
    v77 = v74[0];
    v78 = v74[1];
    v75[0] = 3;
    v75[1] = 0;
    v75[2] = v24;
    v76 = 0;
    v79 = v74[2];
    v80 = v65;
    v73 = 0;
    memset(v68, 0, sizeof(v68));
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    sub_22E47A004((unint64_t)v98, v53, (uint64_t)v75, (uint64_t)v68, (uint64_t)v84, &v73, 1, 0, (uint64_t)v66, 1);
    if (*(_BYTE *)(*(_QWORD *)v73 + 8) == 7)
      sub_22E3CF118(v100);
    else
      sub_22E4772D4(v100, v73);
    v67 = 257;
    v54 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E5ED9B4(v98, v54, 0);
    sub_22E619DE8((uint64_t)v98, 0);
    if (v92 != v94)
      free(v92);
    if (v89 != v91)
      free(v89);
    if (v86 != v88)
      free(v86);
    if (v84[0] != v85)
      free(v84[0]);
    if (v95 != v97)
      free(v95);
    sub_22E619434((uint64_t)v98);
    goto LABEL_69;
  }
  v6 = (_QWORD **)(v4 + 280);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (sub_22E66D770((uint64_t)v6, v7))
  {
    v9 = sub_22E46C3D4(v6, (_QWORD *)v2);
    v10 = sub_22E46F2EC((uint64_t)v6, v9);
    v11 = *(uint64_t **)(v3 + 8);
  }
  else
  {
    v11 = *(uint64_t **)(v3 + 8);
    v10 = v11[11];
  }
  sub_22E5DFE38(v11, v2, v10);
  v82 = llvm::ConstantExpr::getPtrToInt();
LABEL_12:
  v83 = llvm::ConstantInt::get();
  llvm::ConstantStruct::getTypeForElements();
  return llvm::ConstantStruct::get();
}

uint64_t sub_22E685C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 152) + 8) & 0x2000000000) != 0)
    return 0;
  v6 = *(uint64_t **)(v2 + 712);
  v31 = a2;
  v7 = v6 + 8;
  (*(void (**)(uint64_t *))(*v6 + 16))(v6);
  v8 = sub_22F24CF04(v7, &v31)[1];
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    v10 = *(uint64_t **)(v8 + 16);
    for (i = 8 * v9; i; i -= 8)
    {
      v12 = *v10;
      if ((*v10 & 7) == 3)
      {
        if ((sub_22EFB9558(v12 & 0xFFFFFFFFFFFFFFF8) & 0x18) == 0)
          return 0;
      }
      else if ((v12 & 7) - 4 <= 2)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((sub_22EFB9558(v12 & 0xFFFFFFFFFFFFFFF8) & 0x18) == 0)
        {
          result = sub_22EFBF86C(v13, (unint64_t *)&v31, 0);
          if (!(_DWORD)result)
            return result;
        }
      }
      ++v10;
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v14 + 184) + 92) & 0x800) != 0)
    return 1;
  v15 = *(uint64_t **)(v14 + 712);
  v31 = a2;
  v16 = v15 + 8;
  (*(void (**)(uint64_t *, uint64_t))(*v15 + 16))(v15, a2);
  v17 = sub_22F24CF04(v16, &v31)[1];
  v18 = *(_QWORD *)(v17 + 24);
  if (v18)
  {
    v19 = *(_QWORD **)(v17 + 16);
    v20 = 8 * v18;
    do
    {
      if ((*v19 & 7) - 4 <= 2
        && (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v19 & 0xFFFFFFFFFFFFFFF8) + 32))(*v19 & 0xFFFFFFFFFFFFFFF8)
                     + 82) & 1) != 0)
      {
        v21 = *(_QWORD *)(a1 + 8);
        v22 = sub_22E60F538(v19);
        sub_22E624994(v21, v22, v23);
        result = llvm::Module::getNamedValue();
        if (!result)
          return result;
        if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)result) & 1) != 0)
          return 0;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (!*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20))
    return 1;
  v24 = sub_22E46A3A0(a2);
  if (v24 == v25)
    return 1;
  v26 = v24;
  v27 = v25;
  do
  {
    v28 = *(_QWORD *)(**(_QWORD **)(v26 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v28 + 8) & 0xF) != 0)
      v28 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v26 + 16));
    v29 = sub_22F10C2A4(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0));
    if (v29)
    {
      if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 35 >= 3)
        v30 = 0;
      else
        v30 = v29;
    }
    else
    {
      v30 = 0;
    }
    if ((*(_BYTE *)(v26 + 12) & 1) == 0 && sub_22E463414(v30))
    {
      result = sub_22E685C2C(a1, v30);
      if (!(_DWORD)result)
        break;
    }
    v26 += 24;
    result = 1;
  }
  while (v26 != v27);
  return result;
}

llvm::Value *sub_22E685EA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  char *v10;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;

  v14 = a2;
  v5 = *(_QWORD *)(a1 + 144);
  v12[0] = *(_QWORD *)(v5 + 96);
  v6 = llvm::FunctionType::get();
  v7 = sub_22E633A04(v5, v6, "__cxa_begin_catch", 0x11uLL, 0, 0, 0);
  v13 = 257;
  v9 = sub_22F24EEDC(a1, v7, v8, (uint64_t)&v14, 1, (uint64_t)v12);
  v10 = sub_22E4899EC(a1 + 1984, 3u, 16);
  *(_QWORD *)v10 = off_24FA68648;
  v10[8] = a3;
  return v9;
}

llvm::Value *sub_22E685F70(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  llvm::Value *result;
  _BYTE v9[32];
  __int16 v10;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 144);
  v5 = llvm::FunctionType::get();
  v7 = sub_22E633A04(v4, v5, "__cxa_end_catch", 0xFuLL, 0, 0, 0);
  v10 = 257;
  if (!v3)
    return sub_22F24EE8C(a2, v7, v6, (uint64_t)v9);
  result = (llvm::Value *)sub_22F24F1F4((_QWORD *)a2, v7, v6, 0, 0, (uint64_t)v9);
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  return result;
}

uint64_t sub_22E686034(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::GlobalValue *GlobalVariable;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t BitCast;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[72];
  void *v44;
  uint64_t v45;
  __int16 v46;
  _BYTE v47[72];
  void *v48;
  __int128 v49;
  _BYTE v50[9];
  void *v51;
  __int128 v52;
  _QWORD v53[33];

  v53[32] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v4 = v3 | a2 & 7;
  v48 = v50;
  v49 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v43, (uint64_t)&v48);
  v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v5 + 112))(v5, v4, v43);
  GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable();
  if (GlobalVariable && (llvm::GlobalValue::isDeclaration(GlobalVariable) & 1) == 0)
  {
    BitCast = llvm::ConstantExpr::getBitCast();
LABEL_36:
    v27 = BitCast;
    goto LABEL_37;
  }
  v7 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v8 + 16);
  if (v8)
    v10 = v9 == 11;
  else
    v10 = 0;
  if (!v10)
  {
    if (v9 != 39)
      goto LABEL_83;
    v11 = *(_QWORD *)(v8 + 32);
    v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_DWORD *)(v12 + 16);
    if (!v12 || *(_DWORD *)(v12 + 16) != 11)
      goto LABEL_83;
    v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v14 & 8) != 0)
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFELL;
      v16 = (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xC00000000) == 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    if (v15 | (v14 | v11) & 6 || !v16)
      goto LABEL_83;
  }
  if ((sub_22E6876D4(v9) & 1) == 0)
  {
LABEL_83:
    if (!sub_22E68655C((_QWORD *)*a1, v4))
    {
      v19 = (_QWORD *)*a1;
      if ((sub_22E68779C(v4) & 1) != 0 || (v20 = *v7, sub_22F114870(*v7), (*(_DWORD *)(v20 + 16) & 0x1C000u) < 0xC000))
      {
        v21 = 0;
        v22 = 7;
LABEL_26:
        v23 = *(_QWORD *)(*a1 + 216);
        if (*(_DWORD *)(v23 + 68) == 15
          && *(_DWORD *)(v23 + 72) == 17
          && (v24 = sub_22F10C2A4(*v7)) != 0
          && ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD
            ? (v25 = (*(_DWORD *)(v24 + 28) & 0x100) == 0)
            : (v25 = 1),
              !v25))
        {
          sub_22EFC8E88(v24);
          v40 = *((unsigned int *)v39 + 2);
          if ((_DWORD)v40)
          {
            v41 = 8 * v40;
            v42 = *v39;
            while (*(_WORD *)(*(_QWORD *)v42 + 32) != 155)
            {
              v26 = 0;
              v42 += 8;
              v41 -= 8;
              if (!v41)
                goto LABEL_35;
            }
          }
          else
          {
            v42 = *v39;
          }
          if (v42 == *v39 + 8 * v40)
            v26 = 0;
          else
            v26 = 2;
        }
        else
        {
          v26 = 0;
        }
LABEL_35:
        BitCast = sub_22E6866D4((uint64_t)a1, v4, v22, v21, v26);
        goto LABEL_36;
      }
      if ((*(_QWORD *)(v19[19] + 8) & 0x8000000000000) != 0)
      {
        v30 = *v7;
        v22 = 3;
        if (!*v7 || *(_BYTE *)(v30 + 16) != 45)
          goto LABEL_42;
        v31 = sub_22F114198(*(_QWORD *)(v30 + 24));
        if (sub_22E6339A4(v31))
        {
          v22 = 5;
          goto LABEL_42;
        }
        v33 = v19[27];
        if (*(_DWORD *)(v33 + 68) == 15 && *(_DWORD *)(v33 + 72) == 17 && sub_22E49F808(v31) && sub_22E68655C(v19, v4))
        {
          v22 = 0;
          goto LABEL_42;
        }
        if (sub_22E463414(v31))
        {
          v34 = *(_QWORD *)(v19[18] + 15088);
          if (*(_DWORD *)(v34 + 68) != 15 || *(_DWORD *)(v34 + 72) != 1)
          {
            v22 = sub_22F296010((uint64_t)v19, v31);
            if ((v22 - 7) < 2)
              goto LABEL_63;
            goto LABEL_42;
          }
        }
      }
      v22 = 3;
LABEL_42:
      if (sub_22E686668(a1[2], v4, v22) == 1)
        goto LABEL_46;
      v29 = (sub_22F114D14(*v7) >> 3) & 3;
      if (v29 != 2)
      {
        if (v29 == 1)
        {
          v21 = 2;
          goto LABEL_26;
        }
LABEL_46:
        v21 = 1;
        goto LABEL_26;
      }
LABEL_63:
      v21 = 0;
      goto LABEL_26;
    }
  }
  v51 = v53;
  v52 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v47, (uint64_t)&v51);
  v32 = *(_QWORD *)(*(_QWORD *)(*a1 + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v32 + 112))(v32, v4, v47);
  if (!llvm::Module::getGlobalVariable())
  {
    v35 = (unsigned int *)llvm::User::operator new((llvm::User *)0x58);
    v46 = 261;
    v44 = v51;
    v45 = v52;
    llvm::GlobalVariable::GlobalVariable();
    v36 = sub_22F10C2A4(*v7);
    v37 = 0;
    if (v36)
    {
      if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 35 >= 3)
        v37 = 0;
      else
        v37 = v36;
    }
    sub_22F29966C(*a1, v35, v37);
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 216) + 416))(*(_QWORD *)(*a1 + 216));
    if (v37 && v38 && sub_22E687708(*(_QWORD *)(v37 + 80)))
    {
      v35[8] = v35[8] & 0xFFFFFCFF | 0x100;
      sub_22E62876C(*a1, (llvm::GlobalValue *)v35);
    }
  }
  v27 = llvm::ConstantExpr::getBitCast();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v47);
  if (v51 != v53)
    free(v51);
LABEL_37:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v43);
  if (v48 != v50)
    free(v48);
  return v27;
}

BOOL sub_22E68655C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  _BOOL4 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((*(_QWORD *)(*(_QWORD *)(a1[18] + 2000) + 8) & 0x8000000000000) == 0)
    return 0;
  v2 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 16) != 45)
    return 0;
  v4 = sub_22F114198(*(_QWORD *)(v2 + 24));
  v5 = v4;
  if (!*(_QWORD *)(v4 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
    if (!*(_QWORD *)(v5 + 128))
      return 0;
  }
  result = sub_22E463414(v5);
  if (!result)
    return result;
  v7 = sub_22E49F808(v5);
  v8 = a1[27];
  if (*(_DWORD *)(v8 + 68) == 15 && *(_DWORD *)(v8 + 72) == 1)
    return 0;
  if (!sub_22F296234(a1 + 88, v5))
    return v7;
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[27] + 416))(a1[27]);
  result = 1;
  if ((v9 & 1) == 0 && v7)
  {
    v10 = a1[27];
    if (*(_DWORD *)(v10 + 68) == 15)
      return *(_DWORD *)(v10 + 72) == 17;
    return 0;
  }
  return result;
}

uint64_t sub_22E686668(uint64_t a1, uint64_t a2, int a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 736))(a1) & 1) != 0
    || a3 != 5 && a3 != 3
    || (sub_22F114D14(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) & 0x18) != 0x10)
  {
    return 0;
  }
  if (a3 == 3)
    return 1;
  return 2;
}

uint64_t sub_22E6866D4(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::Value *NamedAlias;
  uint64_t v16;
  llvm::GlobalValue *v17;
  llvm::Type ***v18;
  llvm::LLVMContext *v19;
  void *v20;
  llvm::Value *BitCast;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *String;
  llvm::Value *v26;
  uint64_t IntToPtr;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  llvm::GlobalVariable *GlobalVariable;
  llvm::Value *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  int v62;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  llvm::LLVMContext *v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  int v106;
  uint64_t *v108;
  uint64_t v110[9];
  void *v111;
  __int128 v112;
  void *v113;
  uint64_t v114;
  _BYTE v115[120];
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  _QWORD v120[18];

  v120[16] = *MEMORY[0x24BDAC8D0];
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = "_ZTVN10__cxxabiv123__fundamental_type_infoE";
  switch(*(_BYTE *)(v10 + 16))
  {
    case 2:
    case 4:
    case 5:
      v11 = "_ZTVN10__cxxabiv117__array_type_infoE";
      goto LABEL_21;
    case 3:
    case 7:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
      goto LABEL_4;
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x1D:
      goto LABEL_21;
    case 0x19:
    case 0x1A:
      v11 = "_ZTVN10__cxxabiv120__function_type_infoE";
      goto LABEL_21;
    case 0x1F:
      v11 = "_ZTVN10__cxxabiv129__pointer_to_member_type_infoE";
      goto LABEL_21;
    case 0x20:
    case 0x27:
      v11 = "_ZTVN10__cxxabiv119__pointer_type_infoE";
      goto LABEL_21;
    case 0x21:
      v10 = *(_QWORD *)(*(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v10 + 16) == 11)
        goto LABEL_16;
      goto LABEL_17;
    case 0x22:
LABEL_17:
      v14 = sub_22F409D88(v10);
      if (sub_22F3B46CC(v14))
        v11 = "_ZTVN10__cxxabiv120__si_class_type_infoE";
      else
        v11 = "_ZTVN10__cxxabiv117__class_type_infoE";
      goto LABEL_21;
    case 0x2C:
      v11 = "_ZTVN10__cxxabiv116__enum_type_infoE";
      goto LABEL_21;
    case 0x2D:
      v12 = sub_22F114198(*(_QWORD *)(v10 + 24));
      v13 = v12;
      if ((*(_QWORD *)(v12 + 128)
         || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 104) + 96), *(_QWORD *)(v12 + 104)), *(_QWORD *)(v13 + 128)))
        && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104)),
            *(_DWORD *)(*(_QWORD *)(v13 + 128) + 16)))
      {
        if (sub_22E687824(v13))
          v11 = "_ZTVN10__cxxabiv120__si_class_type_infoE";
        else
          v11 = "_ZTVN10__cxxabiv121__vmi_class_type_infoE";
      }
      else
      {
LABEL_16:
        v11 = "_ZTVN10__cxxabiv117__class_type_infoE";
      }
      goto LABEL_21;
    default:
      if (*(unsigned __int8 *)(v10 + 16) - 55 < 2)
      {
LABEL_21:
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 712) + 136) != 1)
        {
LABEL_25:
          strlen(v11);
          goto LABEL_26;
        }
        strlen(v11);
      }
      else
      {
LABEL_4:
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 712) + 136) != 1)
          goto LABEL_26;
        v11 = 0;
      }
      NamedAlias = (llvm::Value *)llvm::Module::getNamedAlias();
      if (NamedAlias)
        goto LABEL_27;
      if (v11)
        goto LABEL_25;
LABEL_26:
      NamedAlias = (llvm::Value *)llvm::Module::getOrInsertGlobal();
LABEL_27:
      v16 = *(_QWORD *)a1;
      v17 = (llvm::GlobalValue *)llvm::Value::stripPointerCasts(NamedAlias);
      sub_22E62876C(v16, v17);
      v18 = (llvm::Type ***)(*(_QWORD *)a1 + 280);
      v19 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15088)- 24)+ 120));
      sub_22E66CB04(v18, v19);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 712) + 136) == 1)
      {
        v20 = (void *)llvm::ConstantInt::get();
        llvm::ConstantExpr::getBitCast();
        v111 = v20;
      }
      else
      {
        v111 = (void *)llvm::ConstantInt::get();
      }
      llvm::ConstantExpr::getGetElementPtr();
      BitCast = (llvm::Value *)llvm::ConstantExpr::getBitCast();
      v22 = *(_QWORD *)(*(_QWORD *)a1 + 184);
      if ((*(_BYTE *)(v22 + 1384) & 3) != 0)
        BitCast = (llvm::Value *)sub_22F28A290(*(uint64_t **)a1, BitCast, (_DWORD *)(v22 + 1384), 0);
      v23 = *(_DWORD *)(a1 + 32);
      if (v23 >= *(_DWORD *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v23) = BitCast;
      ++*(_DWORD *)(a1 + 32);
      v111 = &v113;
      v112 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)v110, (uint64_t)&v111);
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 224) + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v24 + 120))(v24, a2, v110);
      String = (uint64_t *)llvm::ConstantDataArray::getString();
      sub_22EF5D130(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16408));
      v26 = sub_22E63402C(*(_QWORD *)a1, (uint64_t)v111, v112, *String);
      llvm::GlobalVariable::setInitializer();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v110);
      if (v111 != &v113)
        free(v111);
      if (sub_22E686668(*(_QWORD *)(a1 + 16), a2, a3))
      {
        llvm::ConstantExpr::getPtrToInt();
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getAdd();
        IntToPtr = llvm::ConstantExpr::getIntToPtr();
      }
      else
      {
        IntToPtr = llvm::ConstantExpr::getBitCast();
      }
      v28 = IntToPtr;
      v29 = *(_DWORD *)(a1 + 32);
      if (v29 >= *(_DWORD *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v29) = v28;
      ++*(_DWORD *)(a1 + 32);
      v108 = (uint64_t *)v9;
      v30 = *(uint64_t **)v9;
      switch(*(_BYTE *)(*(_QWORD *)v9 + 16))
      {
        case 0x1F:
          v110[0] = v30[4];
          sub_22E687C88(*(_QWORD *)(*(_QWORD *)a1 + 144), v110);
          v44 = v30[5];
          sub_22F114198(*(_QWORD *)(v44 + 24));
          sub_22E66CB04((llvm::Type ***)(*(_QWORD *)a1 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16528));
          v45 = llvm::ConstantInt::get();
          v46 = *(_DWORD *)(a1 + 32);
          if (v46 >= *(_DWORD *)(a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v46 = *(_DWORD *)(a1 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v46) = v45;
          ++*(_DWORD *)(a1 + 32);
          v47 = *(_QWORD *)(a1 + 16);
          v111 = *(void **)(v47 + 8);
          *(_QWORD *)&v112 = **((_QWORD **)v111 + 25);
          *((_QWORD *)&v112 + 1) = v47;
          v113 = v115;
          v114 = 0x1000000000;
          v48 = sub_22E686034(&v111, v110[0]);
          if (v113 != v115)
            free(v113);
          v49 = *(_DWORD *)(a1 + 32);
          if (v49 >= *(_DWORD *)(a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v49 = *(_DWORD *)(a1 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v49) = v48;
          ++*(_DWORD *)(a1 + 32);
          v50 = *(_QWORD *)(a1 + 16);
          v111 = *(void **)(v50 + 8);
          *(_QWORD *)&v112 = **((_QWORD **)v111 + 25);
          *((_QWORD *)&v112 + 1) = v50;
          v113 = v115;
          v114 = 0x1000000000;
          v51 = sub_22E686034(&v111, v44 & 0xFFFFFFFFFFFFFFF0);
          v52 = *(_DWORD *)(a1 + 32);
          if (v52 >= *(_DWORD *)(a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v52 = *(_DWORD *)(a1 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v52) = v51;
          ++*(_DWORD *)(a1 + 32);
          if (v113 != v115)
            free(v113);
          break;
        case 0x20:
        case 0x27:
          sub_22E68791C(a1, v30[4]);
          break;
        case 0x21:
        case 0x22:
          v31 = *(_QWORD *)(v30[3] & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(v31 + 16) != 11)
          {
            v32 = sub_22F409D88(v31);
            v33 = (uint64_t *)sub_22F3B46CC(v32);
            if (v33)
            {
              v34 = sub_22F36D148(*(_QWORD *)(*(_QWORD *)a1 + 144), v33, 0);
              v35 = *(_QWORD *)(a1 + 16);
              v111 = *(void **)(v35 + 8);
              *(_QWORD *)&v112 = **((_QWORD **)v111 + 25);
              *((_QWORD *)&v112 + 1) = v35;
              v113 = v115;
              v114 = 0x1000000000;
              goto LABEL_55;
            }
          }
          break;
        case 0x2D:
          v36 = sub_22F114198(v30[3]);
          v37 = v36;
          if (*(_QWORD *)(v36 + 128)
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v36 + 104) + 96), *(_QWORD *)(v36 + 104)), *(_QWORD *)(v37 + 128)))
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
            if (*(_DWORD *)(*(_QWORD *)(v37 + 128) + 16))
            {
              if (sub_22E687824(v37))
              {
                v38 = *(_QWORD *)(a1 + 16);
                v111 = *(void **)(v38 + 8);
                *(_QWORD *)&v112 = **((_QWORD **)v111 + 25);
                *((_QWORD *)&v112 + 1) = v38;
                v113 = v115;
                v114 = 0x1000000000;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
                v39 = *(_QWORD *)(*(_QWORD *)(v37 + 128) + 24);
                if ((v39 & 1) != 0)
                  v39 = sub_22EFCF510(*(_QWORD *)(v37 + 128));
                v40 = **(_QWORD **)(v39 + 16);
                v41 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
                  v41 = (unint64_t)sub_22F10D2BC(v40);
                v34 = v41 & 0xFFFFFFFFFFFFFFF0;
LABEL_55:
                v42 = sub_22E686034(&v111, v34);
                if (v113 != v115)
                  free(v113);
                v43 = *(_DWORD *)(a1 + 32);
                if (v43 >= *(_DWORD *)(a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v43 = *(_DWORD *)(a1 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v43) = v42;
                ++*(_DWORD *)(a1 + 32);
              }
              else
              {
                sub_22E66CB04((llvm::Type ***)(*(_QWORD *)a1 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16528));
                v111 = &v114;
                *(_QWORD *)&v112 = &v114;
                *((_QWORD *)&v112 + 1) = 16;
                LODWORD(v113) = 0;
                v116 = v120;
                v117 = v120;
                v118 = 16;
                v119 = 0;
                v72 = sub_22E46A3A0(v37);
                if (v72 != v73)
                {
                  v74 = v72;
                  v75 = v73;
                  v76 = 0;
                  do
                  {
                    v76 |= sub_22E687B58(v74, &v111);
                    v74 += 24;
                  }
                  while (v74 != v75);
                }
                if (v117 != v116)
                  free(v117);
                if ((void *)v112 != v111)
                  free((void *)v112);
                v77 = llvm::ConstantInt::get();
                v78 = *(_DWORD *)(a1 + 32);
                if (v78 >= *(_DWORD *)(a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v78 = *(_DWORD *)(a1 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v78) = v77;
                ++*(_DWORD *)(a1 + 32);
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
                v79 = llvm::ConstantInt::get();
                v80 = *(_DWORD *)(a1 + 32);
                if (v80 >= *(_DWORD *)(a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v80 = *(_DWORD *)(a1 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v80) = v79;
                ++*(_DWORD *)(a1 + 32);
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104));
                if (*(_DWORD *)(*(_QWORD *)(v37 + 128) + 16))
                {
                  v81 = *(_QWORD **)(*(_QWORD *)a1 + 144);
                  v82 = (llvm::LLVMContext *)v81[2061];
                  v83 = v81[1886];
                  if (*(_DWORD *)(v83 + 68) == 15)
                  {
                    v84 = *(_DWORD *)(v83 + 72);
                    v85 = v84 == 18 || v84 == 1;
                    if (v85
                      && *(unsigned __int8 *)(v83 + *(_QWORD *)(*(_QWORD *)v83 - 24)) > *(unsigned __int8 *)(v83 + *(_QWORD *)(*(_QWORD *)v83 - 24) + 20))
                    {
                      v82 = (llvm::LLVMContext *)v81[2062];
                    }
                  }
                  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)a1 + 280), v82);
                  v86 = sub_22E46A3A0(v37);
                  if (v86 != v87)
                  {
                    v88 = v86;
                    v89 = v87;
                    do
                    {
                      v90 = *(_QWORD *)(a1 + 16);
                      v111 = *(void **)(v90 + 8);
                      *(_QWORD *)&v112 = **((_QWORD **)v111 + 25);
                      *((_QWORD *)&v112 + 1) = v90;
                      v113 = v115;
                      v114 = 0x1000000000;
                      v91 = *(_QWORD *)(**(_QWORD **)(v88 + 16) & 0xFFFFFFFFFFFFFFF0);
                      if ((*(_BYTE *)(v91 + 8) & 0xF) != 0)
                        v91 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v88 + 16));
                      v92 = sub_22E686034(&v111, v91 & 0xFFFFFFFFFFFFFFF0);
                      v93 = *(unsigned int *)(a1 + 32);
                      if (v93 >= *(unsigned int *)(a1 + 36))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v93 = *(unsigned int *)(a1 + 32);
                      }
                      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v93) = v92;
                      ++*(_DWORD *)(a1 + 32);
                      if (v113 != v115)
                        free(v113);
                      v94 = *(_QWORD *)(**(_QWORD **)(v88 + 16) & 0xFFFFFFFFFFFFFFF0);
                      if ((*(_BYTE *)(v94 + 8) & 0xF) != 0)
                        v94 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v88 + 16));
                      v95 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 24));
                      v96 = *(uint64_t **)a1;
                      if ((*(_BYTE *)(v88 + 12) & 1) != 0)
                      {
                        sub_22F122BCC(v96[89], v37, v95);
                      }
                      else
                      {
                        v97 = sub_22F0C975C(v96[18], v37);
                        sub_22E46A3EC(v97, v95);
                      }
                      v98 = llvm::ConstantInt::get();
                      v99 = *(unsigned int *)(a1 + 32);
                      if (v99 >= *(unsigned int *)(a1 + 36))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v99 = *(unsigned int *)(a1 + 32);
                      }
                      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v99) = v98;
                      ++*(_DWORD *)(a1 + 32);
                      v88 += 24;
                    }
                    while (v88 != v89);
                  }
                }
              }
            }
          }
          break;
        default:
          break;
      }
      llvm::ConstantStruct::getTypeForElements();
      llvm::ConstantStruct::get();
      v111 = &v113;
      v112 = xmmword_22F44E320;
      sub_22F242C48((uint64_t)v110, (uint64_t)&v111);
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 224) + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v53 + 112))(v53, a2, v110);
      GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
      v55 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
      llvm::GlobalVariable::GlobalVariable();
      v56 = a5;
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 216) + 416))(*(_QWORD *)(*(_QWORD *)a1 + 216)))
        goto LABEL_76;
      v57 = *v108;
      v56 = a5;
      if (!*v108)
        goto LABEL_76;
      v56 = a5;
      if (*(_BYTE *)(v57 + 16) != 45)
        goto LABEL_76;
      v58 = sub_22F114198(*(_QWORD *)(v57 + 24));
      v59 = v58;
      if ((*(_BYTE *)(v58 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v58);
        v101 = *((unsigned int *)v100 + 2);
        if ((_DWORD)v101)
        {
          v102 = 8 * v101;
          v103 = *v100;
          while (*(_WORD *)(*(_QWORD *)v103 + 32) != 155)
          {
            v103 += 8;
            v102 -= 8;
            if (!v102)
              goto LABEL_74;
          }
        }
        else
        {
          v103 = *v100;
        }
        if (v103 != *v100 + 8 * v101)
          goto LABEL_75;
      }
LABEL_74:
      v60 = sub_22E687A7C(*(_QWORD *)(v59 + 80));
      v56 = a5;
      if (v60)
LABEL_75:
        v56 = 2;
LABEL_76:
      if (GlobalVariable)
      {
        llvm::Value::takeName();
        llvm::ConstantExpr::getBitCast();
        llvm::Value::replaceAllUsesWith();
        llvm::GlobalVariable::eraseFromParent(GlobalVariable);
      }
      v61 = *(uint64_t **)a1;
      v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 216) + 76);
      if ((v62 - 8) >= 2 && v62 != 5)
      {
        v104 = *((_DWORD *)v55 + 8) & 0xF;
        v105 = v104 > 0xA;
        v106 = (1 << v104) & 0x63C;
        if (!v105 && v106 != 0)
        {
          llvm::Value::getName(v55);
          llvm::Module::getOrInsertComdat();
          llvm::GlobalObject::setComdat();
          v61 = *(uint64_t **)a1;
        }
      }
      sub_22EF5CDF0(v61[18], *(_QWORD *)(*(_QWORD *)(v61[18] + 16408) & 0xFFFFFFFFFFFFFFF0));
      llvm::GlobalObject::setAlignment();
      v64 = 16 * (a4 & 3);
      v65 = *((_DWORD *)v26 + 8) & 0xF;
      v66 = *((_DWORD *)v26 + 8) & 0xFFFFFFCF | v64;
      *((_DWORD *)v26 + 8) = v66;
      if ((v65 - 7) < 2)
        goto LABEL_95;
      if (v64 && (llvm::GlobalValue::hasExternalWeakLinkage(v26) & 1) == 0)
      {
        v66 = *((_DWORD *)v26 + 8);
LABEL_95:
        *((_DWORD *)v26 + 8) = v66 | 0x4000;
      }
      sub_22E62876C(*(_QWORD *)a1, v26);
      v67 = *((_DWORD *)v55 + 8);
      v68 = v67 & 0xFFFFFFCF | v64;
      *((_DWORD *)v55 + 8) = v68;
      if ((v67 & 0xFu) - 7 < 2)
        goto LABEL_98;
      if (v64 && (llvm::GlobalValue::hasExternalWeakLinkage(v55) & 1) == 0)
      {
        v68 = *((_DWORD *)v55 + 8);
LABEL_98:
        *((_DWORD *)v55 + 8) = v68 | 0x4000;
      }
      sub_22E62876C(*(_QWORD *)a1, v55);
      *((_DWORD *)v26 + 8) = *((_DWORD *)v26 + 8) & 0xFFFFFCFF | ((a5 & 3) << 8);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 216) + 416))(*(_QWORD *)(*(_QWORD *)a1 + 216)))
        v69 = v56;
      else
        v69 = a5;
      *((_DWORD *)v55 + 8) = *((_DWORD *)v55 + 8) & 0xFFFFFCFF | ((v69 & 3) << 8);
      llvm::GlobalValue::setPartition();
      llvm::GlobalValue::setPartition();
      v70 = llvm::ConstantExpr::getBitCast();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v110);
      if (v111 != &v113)
        free(v111);
      return v70;
  }
}

uint64_t sub_22E6876D4(unsigned int a1)
{
  char v1;
  uint64_t result;

  v1 = (a1 >> 19) + 91;
  if (((a1 >> 19) & 0x1FF) < 0xA5)
    return 0;
  result = 1;
  if (((1 << v1) & 0x3E041FFFFFE00000) != 0)
    return 0;
  return result;
}

uint64_t sub_22E687708(unint64_t a1)
{
  unint64_t v1;
  char v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    v2 = 0;
    while (1)
    {
      if ((*(_DWORD *)(v1 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
        goto LABEL_11;
      v3 = *(_QWORD *)(v1 + 80);
      if ((v3 & 0x60000) != 0x40000)
        goto LABEL_11;
      if ((v3 & 0x8000000) != 0)
      {
        if ((v3 & 0x20000000) != 0)
          goto LABEL_11;
      }
      else if (*(_QWORD *)(v1 + 128) | *(_QWORD *)(v1 + 80) & 0x20000000)
      {
        goto LABEL_11;
      }
      if (!sub_22E49F808(v1))
      {
        v2 = 0;
        return v2 & 1;
      }
      v2 = 1;
LABEL_11:
      v1 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v1)
        return v2 & 1;
    }
  }
  v2 = 0;
  return v2 & 1;
}

uint64_t sub_22E68779C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;

  while (1)
  {
    v1 = a1 & 0xFFFFFFFFFFFFFFF0;
    v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (v2 && v3 == 45)
    {
      if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v2 + 24)) + 74) & 1) == 0)
        return 1;
      v2 = *(_QWORD *)v1;
      v3 = *(_DWORD *)(*(_QWORD *)v1 + 16);
    }
    if (v3 == 31)
      break;
    if (v3 != 39)
      return 0;
LABEL_9:
    a1 = *(_QWORD *)(v2 + 32);
  }
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24)) + 74) & 1) != 0)
    goto LABEL_9;
  return 1;
}

BOOL sub_22E687824(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 16) != 1)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24);
  if ((v2 & 1) != 0)
    v2 = sub_22EFCF510(*(_QWORD *)(a1 + 128));
  v3 = *(unsigned __int8 *)(v2 + 12);
  if ((v3 & 1) != 0)
    return 0;
  v4 = (v3 >> 2) & 3;
  v5 = v3 & 2;
  if (v4 != 3)
    v5 = v4;
  if (v5)
    return 0;
  v7 = **(_QWORD **)(v2 + 16);
  v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(v7);
  v9 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 104) + 96), *(_QWORD *)(v9 + 104));
  if ((**(_QWORD **)(v9 + 128) & 0x200) != 0)
    return 1;
  v10 = sub_22E463414(v9);
  return v10 == sub_22E463414(a1);
}

void sub_22E68791C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v9[3];
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  sub_22E687C88(*(_QWORD *)(*(_QWORD *)a1 + 144), &v8);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)a1 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16528));
  v3 = llvm::ConstantInt::get();
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) = v3;
  ++*(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v9[0] = *(_QWORD *)(v5 + 8);
  v9[1] = **(_QWORD **)(v9[0] + 200);
  v9[2] = v5;
  v10 = v12;
  v11 = 0x1000000000;
  v6 = sub_22E686034(v9, v8);
  if (v10 != v12)
    free(v10);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) = v6;
  ++*(_DWORD *)(a1 + 32);
}

uint64_t sub_22E687A7C(unint64_t a1)
{
  unint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  if (!a1)
  {
    v2 = 0;
    return v2 & 1;
  }
  v1 = a1;
  v2 = 0;
  while (1)
  {
    v3 = *(_DWORD *)(v1 + 28);
    if ((v3 & 0x7Eu) - 58 < 0xFFFFFFFA)
      goto LABEL_18;
    v4 = *(_QWORD *)(v1 + 80);
    if ((v4 & 0x60000) != 0x40000)
      goto LABEL_18;
    if ((v4 & 0x8000000) != 0)
      break;
    if (!(*(_QWORD *)(v1 + 128) | *(_QWORD *)(v1 + 80) & 0x20000000))
      goto LABEL_9;
LABEL_18:
    v1 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v1)
      return v2 & 1;
  }
  if ((v4 & 0x20000000) != 0)
    goto LABEL_18;
LABEL_9:
  if ((v3 & 0x100) != 0)
  {
    sub_22EFC8E88(v1);
    v6 = *((unsigned int *)v5 + 2);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      for (i = *v5; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
      {
        v2 = 0;
        v7 -= 8;
        if (!v7)
          return v2 & 1;
      }
    }
    else
    {
      i = *v5;
    }
    if (i != *v5 + 8 * v6)
    {
      v2 = 1;
      goto LABEL_18;
    }
  }
  v2 = 0;
  return v2 & 1;
}

uint64_t sub_22E687B58(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = **(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 8) & 0xF) != 0)
    v5 = (unint64_t)sub_22F10D2BC(v4);
  v6 = (void *)sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                       + 24));
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    sub_22E3BA850((uint64_t)(a2 + 20), v6);
    if (v13)
    {
      v8 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a2, v6);
      v10 = *a2;
      v9 = a2[1];
      v11 = (char *)a2 + 20;
      v12 = (unsigned int *)(a2 + 2);
      goto LABEL_8;
    }
    v15 = 2;
  }
  else
  {
    sub_22E3BA850((uint64_t)a2, v6);
    if (v7)
    {
      v8 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a2 + 20), v6);
      v10 = a2[20];
      v9 = a2[21];
      v11 = (char *)a2 + 180;
      v12 = (unsigned int *)(a2 + 22);
LABEL_8:
      if (v9 == v10)
        v14 = (unsigned int *)v11;
      else
        v14 = v12;
      v15 = v8 != (void **)(v9 + 8 * *v14);
      goto LABEL_14;
    }
    v15 = 1;
  }
LABEL_14:
  v16 = sub_22E46A3A0((uint64_t)v6);
  if (v16 != v17)
  {
    v18 = v16;
    v19 = v17;
    do
    {
      v15 = sub_22E687B58(v18, a2) | v15;
      v18 += 24;
    }
    while (v18 != v19);
  }
  return v15;
}

uint64_t sub_22E687C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  if ((*a2 & 1) != 0)
    LODWORD(v5) = 1;
  else
    LODWORD(v5) = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
  if ((v4 & 4) != 0 || (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
    LODWORD(v5) = v5 | 2;
  if ((v4 & 2) != 0 || (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) != 0)
    LODWORD(v5) = v5 | 4;
  v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v6 + 8) & 0xF) != 0)
    v6 = (unint64_t)sub_22F10D2BC(v4);
  *a2 = v6 & 0xFFFFFFFFFFFFFFF0;
  if (sub_22E68779C(v6 & 0xFFFFFFFFFFFFFFF0))
    v5 = v5 | 8;
  else
    v5 = v5;
  v7 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if ((v8
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v7 = sub_22F10CF48(v7)) != 0)
    && !sub_22F113A44(v7))
  {
    v5 = v5 | 0x40;
    v9 = *a2;
    v11 = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    *a2 = sub_22EF5F294(a1, v9, (__int128 *)&v11);
  }
  return v5;
}

void sub_22E687D9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v5 = (uint64_t *)v3[2];
        if (v5 != v3 + 4)
          free(v5);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

uint64_t sub_22E687E1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::LLVMContext *v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD v34[3];
  _BYTE v35[32];
  __int16 v36;
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  __int128 v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (a5 | a4)
  {
    v11 = *(_OWORD *)(a2 + 16);
    v40[0] = *(_OWORD *)a2;
    v40[1] = v11;
    v40[2] = *(_OWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a1 + 8);
    LOWORD(v39) = 257;
    sub_22E3BEE6C((uint64_t *)(a1 + 272), v40, v12, (uint64_t)v38, (uint64_t)&v41);
    if (a4 && (a6 & 1) == 0)
    {
      v37[0] = v41;
      v37[1] = v42;
      v37[2] = v43;
      v36 = 257;
      sub_22F24D74C((uint64_t *)(a1 + 272), (uint64_t)v37, a4, (uint64_t)v35, (uint64_t)v38);
      v41 = v38[0];
      v42 = v38[1];
      v43 = v39;
      if (!a5)
        goto LABEL_5;
    }
    else if (!a5)
    {
LABEL_5:
      if ((BYTE8(v42) & 3) == 0)
      {
        v13 = (uint64_t *)v41;
        if (a4)
          goto LABEL_7;
        goto LABEL_9;
      }
      v26 = sub_22F28ABCC(&v41, (_QWORD *)a1);
LABEL_24:
      v13 = (uint64_t *)v26;
      if (a4)
      {
LABEL_7:
        if (a6)
        {
          v25 = *(llvm::LLVMContext **)(a1 + 8);
          LOWORD(v39) = 257;
          v13 = (uint64_t *)sub_22F24CE30(a1 + 272, v25, v13, a4, (uint64_t)v38);
        }
      }
LABEL_9:
      v14 = llvm::PointerType::get();
      LOWORD(v39) = 257;
      return sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)v13, v14, (uint64_t)v38);
    }
    v34[0] = v41;
    v34[1] = v42;
    v34[2] = v43;
    v16 = sub_22E484FA4((_QWORD *)a1, (uint64_t)v34, *(llvm::Type **)(a1 + 96), a3, 0);
    v17 = *(llvm::LLVMContext **)(a1 + 8);
    LOWORD(v39) = 257;
    v18 = sub_22F24CE30(a1 + 272, v17, v16, a5, (uint64_t)v38);
    v19 = *(_QWORD *)(a1 + 144);
    if (*(_DWORD *)(*(_QWORD *)(v19 + 712) + 136) == 1)
    {
      v20 = llvm::PointerType::get();
      LOWORD(v39) = 257;
      sub_22E3C1740((uint64_t *)(a1 + 272), 49, v18, v20, (uint64_t)v38);
      v36 = 257;
      v21 = (uint64_t *)llvm::User::operator new((llvm::User *)0x40);
      LOWORD(v39) = 257;
      llvm::LoadInst::LoadInst();
      (*(void (**)(_QWORD, uint64_t *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), v21, v35, *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328));
      v22 = *(unsigned int *)(a1 + 280);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(a1 + 272);
        v24 = v23 + 16 * v22;
        do
        {
          llvm::Instruction::setMetadata();
          v23 += 16;
        }
        while (v23 != v24);
      }
    }
    else
    {
      v27 = (llvm::LLVMContext *)sub_22EF5B0AC(*(_QWORD *)(v19 + 144), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 144) + 15088)+ *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v19 + 144) + 15088) - 24)+ 120));
      v28 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(v19 + 280), v27);
      v29 = llvm::PointerType::get();
      LOWORD(v39) = 257;
      v30 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v18, v29, (uint64_t)v38);
      v31 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
      LOWORD(v39) = 257;
      v21 = (uint64_t *)sub_22E3C3200((uint64_t *)(a1 + 272), v28, v30, v31, 0, (uint64_t)v38);
    }
    v32 = *((_QWORD *)&v41 + 1);
    if ((BYTE8(v42) & 3) != 0)
      v33 = (uint64_t *)sub_22F28ABCC(&v41, (_QWORD *)a1);
    else
      v33 = (uint64_t *)v41;
    LOWORD(v39) = 257;
    v26 = (uint64_t)sub_22E3E5044((uint64_t *)(a1 + 272), v32, v33, v21, (uint64_t)v38);
    goto LABEL_24;
  }
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    return sub_22F28ABCC((_OWORD *)a2, (_QWORD *)a1);
  else
    return *(_QWORD *)a2;
}

llvm::Value *sub_22E6881A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 144);
  v10[0] = **(_QWORD **)(a1 + 8);
  v5 = llvm::FunctionType::get();
  LODWORD(v10[0]) = 37;
  v6 = llvm::AttributeList::get();
  v7 = sub_22E633A04(v4, v5, "__cxa_guard_abort", 0x11uLL, v6, 0, 0);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = 257;
  return sub_22F24EEDC(a2, v7, v8, (uint64_t)&v12, 1, (uint64_t)v10);
}

BOOL sub_22E688274(uint64_t a1, int a2)
{
  char *__s;

  sub_22F1E2F68(a1, a2, 1, (uint64_t)&__s);
  if (!__s || strlen(__s) != 10)
    return 0;
  return *(_QWORD *)__s == 0x692D746C6975623CLL && *((_WORD *)__s + 4) == 15982;
}

void sub_22E6882EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *v30[2];
  uint64_t v31;
  void *v32[2];
  uint64_t v33;

  v5 = *(unsigned __int16 *)(a2 + 16);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v11 = 0;
  else
    v11 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)(a1 + 32) != 4 && !*(_DWORD *)(a1 + 28))
    v7 = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v22 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v8 = MEMORY[0x24BED83D8] + 16;
  v21 = MEMORY[0x24BED83D8] + 16;
  v29 = v32;
  llvm::raw_ostream::SetBufferAndMode();
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v12 = v8;
  v20 = v30;
  llvm::raw_ostream::SetBufferAndMode();
  v9 = sub_22F14FEA4(a3);
  sub_22F2A1930(*(unsigned int **)(v11 + 16), v9[2], *(_QWORD *)(a1 + 16), (llvm::raw_ostream *)&v21, (llvm::raw_ostream *)&v12);
  v10 = 0;
  if ((*(_DWORD *)(a1 + 32) - 3) <= 1)
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 48) - 8);
  sub_22E496890(*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1816) + 824), v10, 1, v7);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
}

uint64_t sub_22E6884D0(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 4)
  {
    v4 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1816) + 824);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 28))
      v2 = 0;
    v4 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1816) + 824);
    if ((v3 - 3) > 1)
    {
      v5 = 0;
      return sub_22E496890(v4, v5, 2, v2);
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 48) - 8);
  return sub_22E496890(v4, v5, 2, v2);
}

BOOL sub_22E68857C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22F115260(a3) != 0;
}

BOOL sub_22E68859C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v2 || *(_BYTE *)(v2 + 16) != 39)
    v2 = sub_22F10CF48(v2);
  return sub_22F115260(*(_QWORD *)(v2 + 32)) != 0;
}

BOOL sub_22E6885DC(uint64_t a1, uint64_t a2)
{
  return (a2 & 6) == 0 && (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 57;
}

uint64_t sub_22E6885FC(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_24FA68810;
  llvm::deallocate_buffer(*(llvm **)(a1 + 312), (void *)(16 * *(unsigned int *)(a1 + 328)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 280), (void *)(16 * *(unsigned int *)(a1 + 296)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 232), (void *)(16 * *(unsigned int *)(a1 + 248)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 208), (void *)(16 * *(unsigned int *)(a1 + 224)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 184), (void *)(24 * *(unsigned int *)(a1 + 200)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 160), (void *)(24 * *(unsigned int *)(a1 + 176)));
  v2 = *(unsigned int *)(a1 + 152);
  v3 = *(llvm **)(a1 + 136);
  if ((_DWORD)v2)
  {
    v4 = 48 * v2;
    v5 = (char *)v3 + 32;
    do
    {
      if ((*((_QWORD *)v5 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (char *)*((_QWORD *)v5 - 2);
        if (v5 != v6)
          free(v6);
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
    v3 = *(llvm **)(a1 + 136);
    v7 = 48 * *(unsigned int *)(a1 + 152);
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v7);
  v8 = *(void **)(a1 + 80);
  if (v8 != *(void **)(a1 + 72))
    free(v8);
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(24 * *(unsigned int *)(a1 + 64)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(24 * *(unsigned int *)(a1 + 40)));
  *(_QWORD *)a1 = &unk_24FA62EF8;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return a1;
}

void sub_22E68877C(uint64_t a1)
{
  sub_22E6885FC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E6887A0(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 55;
}

BOOL sub_22E6887B8(uint64_t a1, uint64_t a2)
{
  return (a2 & 7) == 0 && (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 57;
}

uint64_t sub_22E6887D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  int v7;

  result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v5 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return 0;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104));
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 56) - 3;
    if (v6 > 2)
    {
      if ((**(_QWORD **)(v5 + 128) & 0x100) == 0)
        goto LABEL_10;
    }
    else if ((*(_BYTE *)(v5 + 76) & 0x18) != 0 || (sub_22E691F14(v5) & 1) == 0)
    {
      goto LABEL_10;
    }
    if ((*(_BYTE *)(a2 + 10) & 0x40) == 0)
      return 0;
LABEL_10:
    v7 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = v7;
    *(_DWORD *)(a2 + 68) = 0;
    *(_BYTE *)(a2 + 72) = 2;
    *(_WORD *)(a2 + 73) = (*(_DWORD *)(a2 + 8) >> 17) & 0x20 | ((v6 < 3) << 6);
    return 1;
  }
  return result;
}

uint64_t sub_22E6888C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if ((*(_BYTE *)(a2 + 76) & 0x18) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 216) + 56) != 41)
    return 2;
  sub_22EF5CDF0(*(_QWORD *)(v2 + 144), *(_QWORD *)(a2 + 48));
  if (v3 <= 4 || HIDWORD(v3) == 0)
    return 1;
  else
    return 2;
}

uint64_t sub_22E688928()
{
  return 1;
}

uint64_t sub_22E688930(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 56) - 3) > 2)
    return 1;
  else
    return sub_22E691F14(a2);
}

uint64_t sub_22E688958(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F40AE38(a2);
  v5 = sub_22F3E87A8(v4);
  v6 = sub_22F28C8B4(a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v6)
    v8 = *(_QWORD *)(v7 + 96);
  else
    v8 = *(_QWORD *)(v7 + 72);
  v15[0] = v8;
  v14 = 1;
  v9 = sub_22F28C8B4(a2);
  if (v5 >= 1 && v9)
  {
    v15[1] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
    v14 = 2;
  }
  if (v5 == 3)
  {
    v15[v14] = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
    v10 = ++v14;
  }
  else
  {
    v10 = v14;
    if (v5 < 2)
      goto LABEL_13;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if (v10 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v14;
  }
  v15[v10] = v11;
  v10 = v14 + 1;
LABEL_13:
  if (v10 == 1)
    return v15[0];
  else
    return llvm::StructType::get();
}

uint64_t sub_22E688B7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t **v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::GetElementPtrInst *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _QWORD *v38;
  _OWORD v40[3];
  _QWORD v41[4];
  __int16 v42;
  int v43;

  v14 = *(_QWORD *)(*(_QWORD *)(a7 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 26;
  else
    v15 = 0;
  if (!v15)
    v14 = sub_22F10CF48(v14);
  v16 = sub_22F40AE38(a7);
  v17 = *(_QWORD *)(a1 + 8) + 280;
  v18 = sub_22E46C2C0(v17, v16, v14, 0);
  sub_22E46F2EC(v17, v18);
  v38 = a2;
  v19 = a2 + 34;
  v20 = sub_22F3E87A8(v16);
  if (*(_BYTE *)(*(_QWORD *)a6 + 8) != 16)
  {
    v22 = 0;
    v25 = a5;
    goto LABEL_17;
  }
  v21 = v20;
  v43 = 0;
  v42 = 257;
  v36 = sub_22E3C2EA8((uint64_t)v19, a6, (uint64_t)&v43, 1, (uint64_t)v41);
  if (v21 < 1)
  {
    v22 = 0;
  }
  else
  {
    v43 = 1;
    v42 = 257;
    v22 = (uint64_t *)sub_22E3C2EA8((uint64_t)v19, a6, (uint64_t)&v43, 1, (uint64_t)v41);
    if (v21 == 3)
    {
      v43 = 2;
      v42 = 257;
      v23 = sub_22E3C2EA8((uint64_t)v19, a6, (uint64_t)&v43, 1, (uint64_t)v41);
      v24 = 3;
      goto LABEL_14;
    }
    if (v21 >= 2)
    {
      v23 = 0;
      v24 = 2;
LABEL_14:
      v43 = v24;
      v42 = 257;
      v26 = (uint64_t *)sub_22E3C2EA8((uint64_t)v19, a6, (uint64_t)&v43, 1, (uint64_t)v41);
      if (v26)
      {
        v27 = *(_OWORD *)(a4 + 16);
        v40[0] = *(_OWORD *)a4;
        v40[1] = v27;
        v40[2] = *(_OWORD *)(a4 + 32);
        v28 = (uint64_t)sub_22E6920CC(a1, v38, a3, v16, (uint64_t)v40, v26, v23);
        v25 = a5;
        a6 = v36;
        goto LABEL_19;
      }
    }
  }
  v25 = a5;
  a6 = v36;
LABEL_17:
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v28 = sub_22F28ABCC((_OWORD *)a4, v38);
  else
    v28 = *(_QWORD *)a4;
LABEL_19:
  *v25 = (uint64_t *)v28;
  if (v22)
  {
    v29 = v38[12];
    v42 = 257;
    v30 = (uint64_t *)sub_22E3C1740(v19, 49, v28, v29, (uint64_t)v41);
    v31 = v38[1];
    v42 = 257;
    v32 = sub_22E3E5044(v19, v31, v30, v22, (uint64_t)v41);
    v33 = **v25;
    v41[0] = "this.adjusted";
    v42 = 259;
    *v25 = (uint64_t *)sub_22E3C1740(v19, 49, (uint64_t)v32, v33, (uint64_t)v41);
  }
  v34 = llvm::PointerType::get();
  v42 = 257;
  result = sub_22E3C1740(v19, 49, a6, v34, (uint64_t)v41);
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = v14;
  *(_QWORD *)(a8 + 16) = 0;
  *(_DWORD *)(a8 + 24) = 0;
  *(_DWORD *)(a8 + 32) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  return result;
}

uint64_t sub_22E688E64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::GetElementPtrInst *v25;
  uint64_t v27;
  _OWORD v28[3];
  _QWORD v29[4];
  __int16 v30;
  int v31;

  llvm::PointerType::get();
  sub_22E66C868(a2[18] + 280, *(_QWORD *)(a6 + 32), 0);
  v27 = llvm::PointerType::get();
  v12 = sub_22F40AE38(a6);
  v13 = sub_22F3E87A8(v12);
  if (*(_BYTE *)(*(_QWORD *)a5 + 8) != 16)
  {
    v15 = (uint64_t *)a5;
    goto LABEL_9;
  }
  v14 = v13;
  v31 = 0;
  v30 = 257;
  v15 = (uint64_t *)sub_22E3C2EA8((uint64_t)(a2 + 34), a5, (uint64_t)&v31, 1, (uint64_t)v29);
  if (v14 == 3)
  {
    v31 = 1;
    v30 = 257;
    v16 = sub_22E3C2EA8((uint64_t)(a2 + 34), a5, (uint64_t)&v31, 1, (uint64_t)v29);
    v17 = 2;
  }
  else
  {
    if (v14 < 2)
      goto LABEL_9;
    v16 = 0;
    v17 = 1;
  }
  v31 = v17;
  v30 = 257;
  v18 = (uint64_t *)sub_22E3C2EA8((uint64_t)(a2 + 34), a5, (uint64_t)&v31, 1, (uint64_t)v29);
  if (v18)
  {
    v19 = *(_OWORD *)(a4 + 16);
    v28[0] = *(_OWORD *)a4;
    v28[1] = v19;
    v28[2] = *(_OWORD *)(a4 + 32);
    v20 = (uint64_t)sub_22E6920CC(a1, a2, a3, v12, (uint64_t)v28, v18, v16);
    v21 = v27;
    goto LABEL_11;
  }
LABEL_9:
  v21 = v27;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v20 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v20 = *(_QWORD *)a4;
LABEL_11:
  v22 = llvm::PointerType::get();
  v30 = 257;
  v23 = (uint64_t *)sub_22E3C1740(a2 + 34, 49, v20, v22, (uint64_t)v29);
  v24 = a2[1];
  v29[0] = "memptr.offset";
  v30 = 259;
  v25 = sub_22E3E5044(a2 + 34, v24, v23, v15, (uint64_t)v29);
  v30 = 257;
  return sub_22E3C1740(a2 + 34, 49, (uint64_t)v25, v21, (uint64_t)v29);
}

uint64_t sub_22E68909C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  llvm::PHINode *v4;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[4];
  __int16 v32;

  v4 = (llvm::PHINode *)a4;
  if (a4[16] <= 0x14u)
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 136))(a1, a3, a4);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 31;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 31;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_22F28C8B4(v9);
  v14 = *(_DWORD *)a3 & 0x1FC0000;
  if (v14 != 4980736 || !v13)
  {
    v15 = sub_22F40AE38(v9);
    v16 = sub_22F40AE38(v11);
    if (v14 != 4980736 || (v25 = v16, v26 = sub_22F3E87D0(v15), v26 != sub_22F3E87D0(v25)))
    {
      v17 = (*(uint64_t (**)(uint64_t, _QWORD *, llvm::PHINode *, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, v4, v9);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v11);
      if (v14 == 4980736)
      {
        v32 = 257;
        return llvm::IRBuilderBase::CreateSelect();
      }
      else
      {
        v30 = a2[40];
        v29 = (uint64_t *)v18;
        v27 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v31[0] = "memptr.converted";
        v28 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v19 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v19, v27, v28, v17, 0);
        v32 = 257;
        sub_22E3C12C8(a2 + 34, v19, (uint64_t)v31);
        sub_22E5ED9B4(a2, v27, 0);
        v20 = (*(_DWORD *)a3 >> 18) & 0x7F;
        v21 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)a3);
        v22 = sub_22E692840(a1, v9, v11, v20, v21, &v21[*(unsigned int *)(a3 + 4)], (uint64_t)v4, (uint64_t)(a2 + 34));
        v23 = llvm::User::operator new((llvm::User *)0x40);
        llvm::BranchInst::BranchInst();
        v32 = 257;
        sub_22E3C12C8(a2 + 34, v23, (uint64_t)v31);
        sub_22E5ED9B4(a2, v28, 0);
        v24 = *v29;
        v31[0] = "memptr.converted";
        v32 = 259;
        v4 = (llvm::PHINode *)sub_22E3C4B80(a2 + 34, v24, 2, (uint64_t)v31);
        sub_22E3C4C50(v4, (uint64_t)v29, v30);
        sub_22E3C4C50(v4, v22, (uint64_t)v27);
      }
    }
  }
  return (uint64_t)v4;
}

uint64_t sub_22E689418(_QWORD *a1, uint64_t a2, llvm::Constant *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t *v11;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 31;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 31;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0));
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  v11 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)a2);
  return sub_22E6932F0(a1, v6, v8, v10, v11, &v11[*(unsigned int *)(a2 + 4)], a3);
}

uint64_t sub_22E6894D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (sub_22F28C8B4(a2))
    return 1;
  v4 = sub_22F40AE38(a2);
  if ((int)sub_22F3E87A8(v4) <= 1)
    return sub_22F3E87D0(v4);
  else
    return 0;
}

BOOL sub_22E68952C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_22F40AE38(a2);
  return sub_22E693748(v2);
}

uint64_t sub_22E689544(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v5 = v7;
  v6 = 0x400000000;
  sub_22E693558(a1, a2, (uint64_t)&v5);
  if ((_DWORD)v6 == 1)
  {
    v2 = v5;
    v3 = *(_QWORD *)v5;
  }
  else
  {
    llvm::ConstantStruct::getTypeForElements();
    v3 = llvm::ConstantStruct::get();
    v2 = v5;
  }
  if (v2 != v7)
    free(v2);
  return v3;
}

uint64_t sub_22E689608()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t v36;
  llvm::LLVMContext *v37;
  llvm::Type *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  llvm::Value *v46;
  int v47;
  uint64_t BitCast;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[32];
  __int16 v57;
  _QWORD v58[6];
  _BYTE v59[72];
  const char *v60;
  __int16 v61;
  void *v62[2];
  _BYTE v63[128];
  _QWORD v64[4];
  __int16 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  char v73;
  llvm::Type **v74;
  void *v75;
  __int128 v76;
  _QWORD v77[34];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v77[32] = *MEMORY[0x24BDAC8D0];
  v4 = v1 + 72;
  v5 = *(_WORD *)(v1 + 80) & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 == 83)
      goto LABEL_17;
    if (v5 == 71)
    {
      v6 = -56;
      goto LABEL_17;
    }
    if (v5 != 81)
    {
LABEL_12:
      v7 = v5 - 52;
      v8 = v5 - 33 >= 5;
      v9 = -48;
      if (!v8)
        v9 = -64;
      if (v7 >= 6)
        v6 = v9;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_11;
    if (v5 == 16)
    {
LABEL_4:
      v6 = -48;
      goto LABEL_17;
    }
    if (((1 << v5) & 0x1066) == 0)
    {
      if (v5 == 24)
        goto LABEL_4;
LABEL_11:
      if (v5 == 70)
      {
        v6 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v10 = *(_QWORD *)(v4 + v6 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = (uint64_t)(v11 - 8);
  else
    v12 = 0;
  v13 = sub_22E6939D8(v12);
  v14 = *(_QWORD *)(v3 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_BYTE *)(v15 + 16) == 26;
  else
    v16 = 0;
  if (!v16)
    v15 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0));
  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 32))(v2);
  if ((*(_BYTE *)(v17 + 82) & 0xC) == 0 && !sub_22EFD7260(v17))
  {
    v18 = (_QWORD **)(v14 + 280);
    if (sub_22E66D770((uint64_t)v18, v15))
    {
      v19 = sub_22E46C3D4(v18, (_QWORD *)v2);
      v20 = sub_22E46F2EC((uint64_t)v18, v19);
      v21 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v21 = *(_QWORD *)(v3 + 8);
      v20 = *(_QWORD *)(v21 + 88);
    }
    if (sub_22E462B18(v2))
      v2 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
    sub_22E6336F0(v21, v2, 0, v20, 0, 0, 0);
    v41 = 0;
LABEL_83:
    v47 = 0;
    if (sub_22F3E87A8(v13) == 2)
      v41 -= sub_22F36894C(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 144), v13);
    goto LABEL_86;
  }
  v22 = *(uint64_t **)(*(_QWORD *)(v3 + 8) + 712);
  if (sub_22E462B18(v2))
    v23 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
  else
    v23 = v2;
  sub_22F40C3DC((uint64_t)v22, v23, 0, (uint64_t)v52);
  v75 = v77;
  v76 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v59, (uint64_t)&v75);
  (*(void (**)(_QWORD, unint64_t, char *, _BYTE *))(**(_QWORD **)(v3 + 16) + 256))(*(_QWORD *)(v3 + 16), v2, v52, v59);
  if (!llvm::Module::getNamedValue())
  {
    v24 = sub_22F24DD70(*(_QWORD *)(v3 + 8) + 280, v2);
    v25 = sub_22E46F2EC(*(_QWORD *)(v3 + 8) + 280, v24);
    v65 = 261;
    v64[0] = v75;
    v64[1] = v76;
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 200);
    v27 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v27, v25, 0, 0xFFFFFFFFLL, v64, v26);
    v28 = sub_22EFB948C(v2);
    if (v28 >= 3)
      v29 = 3;
    else
      v29 = 7;
    v30 = *((_DWORD *)v27 + 8);
    v31 = v30 & 0xFFFFFFC0;
    if (v28 >= 3)
      v31 = *((_DWORD *)v27 + 8);
    v32 = v31 & 0xFFFFFFF0 | v29;
    *((_DWORD *)v27 + 8) = v32;
    if (v28 >= 3)
    {
      if ((v30 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v27) & 1) != 0)
      {
LABEL_42:
        if (sub_22EFB948C(v2) >= 3)
        {
          llvm::Value::getName(v27);
          llvm::Module::getOrInsertComdat();
          llvm::GlobalObject::setComdat();
        }
        v33 = *(_QWORD *)(v3 + 8);
        if (sub_22E462B18(v2))
          v34 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
        else
          v34 = v2;
        sub_22E62A548(v33, v34, 0, v24, v27, 0);
        sub_22E62A5F4(*(uint64_t **)(v3 + 8), v2, v27);
        llvm::Function::addFnAttr();
        *((_DWORD *)v27 + 8) &= 0xFFFFFF3F;
        sub_22E618EBC((uint64_t)v64, *(_QWORD *)(v3 + 8), 0);
        if (sub_22E462B18(v2))
          v35 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
        else
          v35 = v2;
        v71 = v35;
        v72 = 0;
        v73 = 1;
        v62[0] = v63;
        v62[1] = (void *)0x1000000000;
        sub_22E46AE60((_QWORD *)v3, v64, (uint64_t)v62);
        sub_22E61A8FC((uint64_t)v64, 0, 0, *(_QWORD *)(v24 + 40), v27, v24, (uint64_t *)v62, *(_DWORD *)(v2 + 24), v36, 0);
        v74 = (llvm::Type **)sub_22E46B144(v3, (uint64_t)v64);
        v37 = (llvm::LLVMContext *)llvm::PointerType::get();
        sub_22F24D1F4(v64, v58);
        v38 = (llvm::Type *)llvm::PointerType::get();
        v39 = *(_WORD *)(v2 + 80) & 0x7F;
        v40 = -40;
        if (v39 > 0x46)
        {
          switch(v39)
          {
            case 'S':
              goto LABEL_69;
            case 'G':
              v40 = -56;
              goto LABEL_69;
            case 'Q':
              goto LABEL_69;
          }
        }
        else
        {
          if (v39 <= 0x18)
          {
            if (v39 == 16)
              goto LABEL_53;
            if (((1 << v39) & 0x1066) != 0)
              goto LABEL_69;
            if (v39 == 24)
            {
LABEL_53:
              v40 = -48;
LABEL_69:
              v42 = *(_QWORD *)(v4 + v40 + 16);
              v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
              if ((v42 & 4) != 0)
                v43 = (_QWORD *)*v43;
              if (v43)
                v44 = (unint64_t)(v43 - 8);
              else
                v44 = 0;
              v45 = sub_22E484FA4(v64, (uint64_t)v58, v38, v44, 0);
              v60 = "vfn";
              v61 = 259;
              sub_22F24CE30((uint64_t)&v66, v37, v45, v55, (uint64_t)&v60);
              v57 = 257;
              v46 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x40);
              v61 = 257;
              llvm::LoadInst::LoadInst();
              (*(void (**)(uint64_t, llvm::Value *, char *, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v46, v56, v68, v69);
              if (v67)
              {
                v50 = v66;
                v51 = v66 + 16 * v67;
                do
                {
                  llvm::Instruction::setMetadata();
                  v50 += 16;
                }
                while (v50 != v51);
              }
              if (sub_22E462B18(v2))
                v2 = v2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v2) + 96) & 0x80) == 0);
              sub_22E60D934((uint64_t)v64, v2, 0, v74, v25, v46);
              if (v62[0] != v63)
                free(v62[0]);
              sub_22E619434((uint64_t)v64);
              goto LABEL_80;
            }
          }
          if (v39 == 70)
          {
LABEL_67:
            v40 = -64;
            goto LABEL_69;
          }
        }
        if (v39 - 52 < 6)
        {
          v40 = -72;
          goto LABEL_69;
        }
        if (v39 - 33 < 5)
          goto LABEL_67;
        goto LABEL_53;
      }
      v32 = *((_DWORD *)v27 + 8);
    }
    *((_DWORD *)v27 + 8) = v32 | 0x4000;
    goto LABEL_42;
  }
LABEL_80:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v59);
  if (v75 != v77)
    free(v75);
  v41 = v54;
  if (!v53)
    goto LABEL_83;
  v47 = 4 * sub_22F40C330(v22, v13, v53);
  if (!v47)
    goto LABEL_83;
LABEL_86:
  BitCast = llvm::ConstantExpr::getBitCast();
  return sub_22E6937A8(v3, BitCast, 1, v13, v41, v47);
}

uint64_t sub_22E689E04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_22F40AE38(a2);
  return sub_22E693A40(a1, v3);
}

uint64_t sub_22E689E38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  llvm::Constant *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  llvm::Constant *v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47[5];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 31;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v7)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 160))(a1, v5);
  v8 = *(_QWORD *)(a1[1] + 144);
  v9 = *(unsigned int *)(a2 + 16);
  if (v9 <= 6)
    v10 = (uint64_t *)(a2 + 24);
  else
    v10 = *(uint64_t **)(a2 + 24);
  if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v18 = (*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 168))(a1, v7);
  }
  else
  {
    sub_22F0CBBE4(*(_QWORD *)(a1[1] + 144), v7);
    sub_22EF5CDF0(v8, *(_QWORD *)(*(_QWORD *)(v8 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v11 = v7;
    if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 52 <= 0xFFFFFFFC)
      v11 = **(_QWORD **)(v7 + 56);
    v12 = *(_QWORD *)(v11 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)v13;
    v14 = (*(_WORD *)(v13 + 8) & 0x7E) - 34;
    if (v13)
      v15 = v13 - 64;
    else
      v15 = 0;
    if (v14 >= 4)
      v16 = 0;
    else
      v16 = v15;
    v17 = sub_22E6939D8(v16);
    v18 = sub_22E693A40((uint64_t)a1, v17);
  }
  v20 = (llvm::Constant *)v18;
  if ((_DWORD)v9)
  {
    v21 = *(_QWORD *)(v7 + 16);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 4) != 0)
      v22 = (_QWORD *)*v22;
    v23 = v22 - 8;
    if (v22)
      v24 = (unint64_t)(v22 - 8);
    else
      v24 = 0;
    v25 = *(_QWORD *)(v24 + 48);
    if (!v25)
      v25 = sub_22EF6462C(v8, v24);
    v45 = a1;
    v26 = *(_QWORD *)(sub_22F36A6C0(v8, *(_QWORD *)(v5 + 32), *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
    if (v26)
      v27 = *(_BYTE *)(v26 + 16) == 31;
    else
      v27 = 0;
    v44 = v20;
    if (!v27)
      v26 = sub_22F10CF48(v26);
    v43 = v26;
    v28 = *(_QWORD *)(a2 + 8);
    v46 = 0;
    v29 = &v10[v9];
    do
    {
      v30 = *v10;
      if ((v28 & 4) != 0)
        v31 = (_QWORD *)*v10;
      else
        v31 = v23;
      if ((v28 & 4) != 0)
        v32 = (uint64_t)v23;
      else
        v32 = *v10;
      v33 = sub_22E46A3A0(v32);
      if (v33 != v34)
      {
        v35 = v33;
        v36 = v34;
        v37 = v33;
        do
        {
          v38 = *(_QWORD *)(**(_QWORD **)(v37 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v38 + 8) & 0xF) != 0)
            v38 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v37 + 16));
          v39 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0));
          if ((v39[7] & 0x7Fu) - 35 >= 3)
            v39 = 0;
          v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 32))(v39);
          if (v40 == (*(uint64_t (**)(_QWORD *))(*v31 + 32))(v31))
          {
            v41 = v46;
            if (v46 >= 4uLL)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v41 = v46;
            }
            v47[v41] = v35;
            ++v46;
          }
          v37 += 24;
          v35 += 24;
        }
        while (v37 != v36);
      }
      ++v10;
      v23 = (_QWORD *)v30;
    }
    while (v10 != v29);
    if ((v28 & 4) != 0)
      v42 = 17;
    else
      v42 = 16;
    return sub_22E6932F0(v45, v43, v5, v42, v47, &v47[v46], v44);
  }
  return (uint64_t)v20;
}

uint64_t sub_22E68A1BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::Type *v25;
  uint64_t NullValue;
  uint64_t v27;
  llvm::Constant **v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _QWORD v32[4];
  __int16 v33;

  v9 = a2 + 272;
  if (a6)
    v10 = 28;
  else
    v10 = 29;
  if (a6)
    v11 = 29;
  else
    v11 = 28;
  if (a6)
    v12 = 33;
  else
    v12 = 32;
  v13 = sub_22F40AE38(a5);
  v14 = sub_22F3E87A8(v13);
  if (sub_22F28C8B4(a5))
    v15 = 1;
  else
    v15 = 2;
  if (v15 <= v14)
  {
    v30 = v11;
    v31 = 0;
    v32[0] = "lhs.0";
    v33 = 259;
    v17 = (uint64_t *)sub_22E3C2EA8(v9, (uint64_t)a3, (uint64_t)&v31, 1, (uint64_t)v32);
    v31 = 0;
    v32[0] = "rhs.0";
    v33 = 259;
    v18 = sub_22E3C2EA8(v9, a4, (uint64_t)&v31, 1, (uint64_t)v32);
    v32[0] = "memptr.cmp.first";
    v33 = 259;
    v28 = (llvm::Constant **)v17;
    v29 = sub_22E3C18F4(v9, v12, v17, v18, (uint64_t)v32);
    v19 = *a3;
    v31 = 1;
    v20 = *(_DWORD *)(v19 + 12);
    if (v20 == 1)
    {
      v21 = 0;
    }
    else
    {
      v22 = 0;
      do
      {
        v33 = 257;
        v23 = (uint64_t *)sub_22E3C2EA8(v9, (uint64_t)a3, (uint64_t)&v31, 1, (uint64_t)v32);
        v33 = 257;
        v24 = sub_22E3C2EA8(v9, a4, (uint64_t)&v31, 1, (uint64_t)v32);
        v32[0] = "memptr.cmp.rest";
        v33 = 259;
        v21 = sub_22E3C18F4(v9, v12, v23, v24, (uint64_t)v32);
        if (v22)
        {
          v33 = 257;
          v21 = sub_22E3BEBE4(v9, v30, v22, v21, (uint64_t)v32, 0);
        }
        ++v31;
        v22 = v21;
      }
      while (v31 != v20);
    }
    if (sub_22F28C8B4(a5))
    {
      NullValue = llvm::Constant::getNullValue(*v28, v25);
      v32[0] = "memptr.cmp.iszero";
      v33 = 259;
      v27 = sub_22E3C18F4(v9, v12, (uint64_t *)v28, NullValue, (uint64_t)v32);
      v33 = 257;
      v21 = sub_22E3BEBE4(v9, v10, v21, v27, (uint64_t)v32, 0);
    }
    v32[0] = "memptr.cmp";
    v33 = 259;
    return sub_22E3BEBE4(v9, v30, v21, v29, (uint64_t)v32, 0);
  }
  else
  {
    v33 = 257;
    return sub_22E3C18F4(v9, v12, a3, a4, (uint64_t)v32);
  }
}

uint64_t sub_22E68A474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  llvm::Type *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  __int16 v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v7 = a2 + 272;
  v21 = v23;
  v22 = 0x400000000;
  if (sub_22F28C8B4(a4))
  {
    *((_QWORD *)v21 + v22) = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v8);
    LODWORD(v22) = v22 + 1;
  }
  else
  {
    sub_22E693558(a1, a4, (uint64_t)&v21);
  }
  v9 = (uint64_t *)a3;
  if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 16)
  {
    v20 = 0;
    v19 = 257;
    v9 = (uint64_t *)sub_22E3C2EA8(v7, a3, (uint64_t)&v20, 1, (uint64_t)v18);
  }
  v10 = *(_QWORD *)v21;
  v18[0] = "memptr.cmp0";
  v19 = 259;
  v11 = sub_22E3C18F4(v7, 33, v9, v10, (uint64_t)v18);
  if (!sub_22F28C8B4(a4))
  {
    v12 = v22;
    if ((int)v22 >= 2)
    {
      v13 = 1;
      do
      {
        v20 = v13;
        v19 = 257;
        v14 = (uint64_t *)sub_22E3C2EA8(v7, a3, (uint64_t)&v20, 1, (uint64_t)v18);
        v15 = *((_QWORD *)v21 + v13);
        v18[0] = "memptr.cmp";
        v19 = 259;
        v16 = sub_22E3C18F4(v7, 33, v14, v15, (uint64_t)v18);
        v18[0] = "memptr.toBOOL";
        v19 = 259;
        v11 = sub_22E3E58D4(v7, v11, v16, (uint64_t)v18);
        ++v13;
      }
      while (v12 != v13);
    }
  }
  if (v21 != v23)
    free(v21);
  return v11;
}

uint64_t sub_22E68A698(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unint64_t a5, uint64_t a6)
{
  unsigned int v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[3];

  v9 = *(_DWORD *)a3;
  v10 = a4[1];
  v12[0] = *a4;
  v12[1] = v10;
  v12[2] = a4[2];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *, unint64_t))(*(_QWORD *)a1 + 536))(a1, a2, a6, (v9 >> 18) & 1, v12, a3 & 0xFFFFFFFFFFFFFFFBLL);
  if ((v9 & 0x40000) != 0)
    return sub_22F261F20(a2, *(_QWORD *)(a3 + 16), result, a5, 0, 0);
  return result;
}

void sub_22E68A724(uint64_t a1, llvm::PointerType *a2, int a3)
{
  llvm::ConstantPointerNull *v6;
  llvm::PointerType *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[20];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v12[0] = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*(_QWORD *)(a1 + 8) + 96), a2);
  sub_22E693AC0(a1);
  v6 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
  v12[1] = llvm::ConstantPointerNull::get(v6, v7);
  v9 = sub_22E693B74(a1);
  if (a3)
  {
    sub_22F24EF20((uint64_t)a2, v9, v8, (uint64_t)v12, 2);
  }
  else
  {
    v11[16] = 257;
    v10 = sub_22F24F1F4(a2, v9, v8, (uint64_t)v12, 2, (uint64_t)v11);
    *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xF003 | (4 * *((_WORD *)a2 + 68));
  }
}

void sub_22E68A814(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  int v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[2];
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 + 8);
  v24[0] = "tmp";
  v25 = 259;
  v7 = sub_22F25E4D4(a2, v6, (uint64_t)v24, 0);
  v9 = 0;
  v10 = 0;
  if (v7 <= 7)
    v11 = 0;
  else
    v11 = v7 & 0xFFFFFFFFFFFFFFF8;
  v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  if (v7 <= 7)
    v12 = 0;
  *(_QWORD *)&v19 = v11;
  *((_QWORD *)&v19 + 1) = v12;
  if (v7 >= 8)
    v13 = 1 << (v8 & 7 | (8 * (v7 & 7)));
  else
    v13 = 0;
  v28 = 0;
  v29 = 0;
  v20 = v13;
  v21 = 0;
  v22 = v27;
  v23 = 0;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0)
  {
    v10 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v9 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  sub_22E4DA890(a2, v5, &v19, v9 | v10 | (v14 | v6) & 7, 1);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 232))(a1, v6);
  v16 = *(_QWORD *)(a1[1] + 96);
  v25 = 257;
  v26[0] = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v11, v16, (uint64_t)v24);
  v26[1] = v15;
  v17 = sub_22E693B74((uint64_t)a1);
  sub_22F24EF20(a2, v17, v18, (uint64_t)v26, 2);
}

llvm::Value *sub_22E68A9A4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  llvm::ArrayType *v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  BOOL v40;
  const void *p_p;
  size_t v42;
  uint64_t v43;
  llvm::ArrayType *v44;
  uint64_t v45;
  int v46;
  llvm::ArrayType *v47;
  uint64_t v48;
  uint64_t AggregateElement;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  llvm::Type *v53;
  llvm::Value *GlobalVariable;
  llvm::Constant *NullValue;
  unint64_t v56;
  llvm::Type *v57;
  llvm::Constant *v58;
  llvm::Constant *v59;
  llvm::Constant *BitCast;
  llvm::Constant *v61;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  int *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  int *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned __int8 v92;
  __int16 v93;
  unint64_t v94;
  void *__p;
  uint64_t v96;
  char v97;
  __int16 v98;
  void *v99;
  __int128 v100;
  _OWORD v101[16];
  uint64_t v102;
  int64x2_t v103;
  llvm::Constant *v104;
  uint64_t v105;
  _QWORD v106[4];
  char v107;
  char v108[3];
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v93 = 0;
  v92 = 0;
  v3 = sub_22E693C50(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2, (char *)&v93 + 1, (BOOL *)&v93, &v92);
  v94 = v3;
  v4 = sub_22F29DB64(a1 + 280, &v94);
  v5 = v4[1];
  v6 = (_OWORD *)&loc_22F44E000;
  v90 = v3;
  if (v5)
    goto LABEL_77;
  v7 = v4;
  v102 = 1;
  v103 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v104 = (llvm::Constant *)v106;
  v105 = 0x200000000;
  v8 = v3 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v86 = v7;
  if (v10 == 39)
  {
    v11 = sub_22F10ACF8(v9);
    v12 = sub_22F10C2A4(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
    if (!v12)
      goto LABEL_21;
    v13 = v12;
    if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 35 >= 3)
      goto LABEL_21;
  }
  else
  {
    v14 = sub_22F10C2A4(v9);
    if (!v14)
      goto LABEL_21;
    v13 = v14;
    if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 > 2)
      goto LABEL_21;
  }
  v89 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v15 = sub_22F0C975C(v89, v13);
  v87 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 712);
  v88 = v15;
  v99 = (char *)&v100 + 8;
  *(_QWORD *)&v100 = 0x800000000;
  sub_22E693F1C((uint64_t)&v99, v13);
  sub_22E694058((uint64_t)v99, 0, 0);
  sub_22E69427C((uint64_t)&v99);
  v16 = (char *)v99;
  if ((_DWORD)v100)
  {
    v85 = v3 & 0xFFFFFFFFFFFFFFF0;
    v17 = 32 * v100;
    v18 = (char *)v99 + 16;
    do
    {
      if ((*v18 & 0xB) == 0)
      {
        v19 = *((_QWORD *)v18 - 1);
        if (v19)
        {
          v20 = 4 * sub_22F40C330(v87, v13, v19);
          v21 = *(unsigned int *)(*(_QWORD *)(v88 + 72) + 32);
        }
        else
        {
          v20 = 0;
          v21 = 0xFFFFFFFFLL;
        }
        v22 = *(_QWORD *)(*((_QWORD *)v18 - 2) + 48) & 0xFFFFFFFFFFFFFFF0;
        if (v10 == 39)
        {
          v91 = v91 & 0xFFFFFFFF00000000 | v8 & 0xE0;
          v22 = sub_22EF5B848(v89, v22, v8 & 0xE0);
          LODWORD(v8) = v8 & 0xFFFFFFE0;
        }
        __p = sub_22E69440C(a1, v22, *((unsigned int *)v18 + 2), v21, v20);
        sub_22F2A205C((uint64_t)&v102, (uint64_t *)&__p);
      }
      v18 += 32;
      v17 -= 32;
    }
    while (v17);
    v16 = (char *)v99;
    v3 = v90;
    v8 = v85;
  }
  if (v16 != (char *)&v100 + 8)
    free(v16);
LABEL_21:
  v99 = sub_22E69440C(a1, v3, 0, 0xFFFFFFFFLL, 0);
  sub_22F2A205C((uint64_t)&v102, (uint64_t *)&v99);
  if (v10 == 39)
  {
    v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)v8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    if ((v23 & 0xFE) != 0x28 && (v23 & 0xFF800FF) != 0x528000B && v23 - 25 >= 2)
    {
      v99 = sub_22E69440C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16816), 0, 0xFFFFFFFFLL, 0);
      sub_22F2A205C((uint64_t)&v102, (uint64_t *)&v99);
    }
  }
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v25)
    v26 = (*(_DWORD *)(v25 + 16) & 0xFF800FF) == 114294795;
  else
    v26 = 0;
  if (v26)
  {
    v99 = sub_22E69440C(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16816), 0, 0xFFFFFFFFLL, 0);
    sub_22F2A205C((uint64_t)&v102, (uint64_t *)&v99);
  }
  v27 = v105;
  sub_22E6949B0(a1);
  v28 = (llvm::ArrayType *)llvm::PointerType::get();
  v29 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v29 + 216) + *(_QWORD *)(**(_QWORD **)(v29 + 216) - 24)) == 64)
    v28 = *(llvm::ArrayType **)(v29 + 72);
  llvm::ArrayType::get(v28, (llvm::Type *)v27);
  v30 = *(_DWORD *)(a1 + 328);
  if (!v30)
  {
    v31 = 0;
    goto LABEL_39;
  }
  v34 = *(_QWORD *)(a1 + 312);
  v35 = (v30 - 1) & (37 * v27);
  v31 = (int *)(v34 + 16 * v35);
  v36 = *v31;
  if ((_DWORD)v27 != *v31)
  {
    v73 = 0;
    v74 = 1;
    while (v36 != -1)
    {
      if (v73)
        v75 = 0;
      else
        v75 = v36 == -2;
      if (v75)
        v73 = v31;
      v76 = v35 + v74++;
      v35 = v76 & (v30 - 1);
      v31 = (int *)(v34 + 16 * v35);
      v36 = *v31;
      if ((_DWORD)v27 == *v31)
        goto LABEL_45;
    }
    if (v73)
      v31 = v73;
LABEL_39:
    v32 = a1 + 312;
    v33 = *(_DWORD *)(a1 + 320);
    if (4 * v33 + 4 >= 3 * v30)
    {
      sub_22E3C34FC(v32, 2 * v30);
      v64 = *(_DWORD *)(a1 + 328);
      if (!v64)
        goto LABEL_115;
      v65 = *(_QWORD *)(a1 + 312);
      v66 = v64 - 1;
      v67 = v66 & (37 * v27);
      v31 = (int *)(v65 + 16 * v67);
      v68 = *v31;
      if ((_DWORD)v27 == *v31)
        goto LABEL_41;
      v69 = 0;
      v70 = 1;
      v3 = v90;
      while (v68 != -1)
      {
        if (v69)
          v71 = 0;
        else
          v71 = v68 == -2;
        if (v71)
          v69 = v31;
        v72 = v67 + v70++;
        v67 = v72 & v66;
        v31 = (int *)(v65 + 16 * v67);
        v68 = *v31;
        if ((_DWORD)v27 == *v31)
          goto LABEL_41;
      }
    }
    else
    {
      if (v30 + ~v33 - *(_DWORD *)(a1 + 324) > v30 >> 3)
      {
LABEL_41:
        ++*(_DWORD *)(a1 + 320);
        if (*v31 != -1)
          --*(_DWORD *)(a1 + 324);
        *v31 = v27;
        *((_QWORD *)v31 + 1) = 0;
        goto LABEL_45;
      }
      sub_22E3C34FC(v32, v30);
      v77 = *(_DWORD *)(a1 + 328);
      if (!v77)
      {
LABEL_115:
        v31 = 0;
        goto LABEL_41;
      }
      v78 = *(_QWORD *)(a1 + 312);
      v79 = v77 - 1;
      v80 = v79 & (37 * v27);
      v31 = (int *)(v78 + 16 * v80);
      v81 = *v31;
      if ((_DWORD)v27 == *v31)
        goto LABEL_41;
      v69 = 0;
      v82 = 1;
      v3 = v90;
      while (v81 != -1)
      {
        if (v69)
          v83 = 0;
        else
          v83 = v81 == -2;
        if (v83)
          v69 = v31;
        v84 = v80 + v82++;
        v80 = v84 & v79;
        v31 = (int *)(v78 + 16 * v80);
        v81 = *v31;
        if ((_DWORD)v27 == *v31)
          goto LABEL_41;
      }
    }
    if (v69)
      v31 = v69;
    v3 = v90;
    goto LABEL_41;
  }
LABEL_45:
  if (*((_QWORD *)v31 + 1))
  {
    v38 = (uint64_t *)v8;
  }
  else
  {
    v99 = v101;
    qmemcpy(v101, "eh.CatchableTypeArray.", 22);
    v100 = xmmword_22F45D620;
    if ((_DWORD)v27)
    {
      v37 = v108;
      v39 = v27;
      do
      {
        *--v37 = (v39 % 0xA) | 0x30;
        v40 = v39 > 9;
        v39 /= 0xAuLL;
      }
      while (v40);
    }
    else
    {
      v37 = &v107;
      v107 = 48;
    }
    sub_22E3B4274(&__p, v37, v108, v108 - v37);
    if (v97 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v97 >= 0)
      v42 = v97 & 0x7F;
    else
      v42 = v96;
    v43 = v100;
    if (*((_QWORD *)&v100 + 1) < (unint64_t)v100 + v42)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v43 = v100;
    }
    if (v42)
    {
      memcpy((char *)v99 + v43, p_p, v42);
      v43 = v100;
    }
    *(_QWORD *)&v100 = v43 + v42;
    if (v97 < 0)
      operator delete(__p);
    sub_22E6949B0(a1);
    v44 = (llvm::ArrayType *)llvm::PointerType::get();
    v45 = *(_QWORD *)(a1 + 8);
    v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 + 216) + *(_QWORD *)(**(_QWORD **)(v45 + 216) - 24));
    v47 = *(llvm::ArrayType **)(v45 + 72);
    if (v46 == 64)
      v44 = v47;
    __p = v47;
    v96 = llvm::ArrayType::get(v44, (llvm::Type *)v27);
    *((_QWORD *)v31 + 1) = llvm::StructType::create();
    if (v99 != v101)
      free(v99);
    v3 = v94;
    v38 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFF0);
  }
  v106[2] = llvm::ConstantInt::get();
  v106[3] = llvm::ConstantArray::get();
  v99 = v101;
  v100 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&__p, (uint64_t)&v99);
  (*(void (**)(_QWORD, unint64_t, unint64_t, void **))(**(_QWORD **)(a1 + 16) + 280))(*(_QWORD *)(a1 + 16), v3, v27, &__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  v48 = llvm::User::operator new((llvm::User *)0x58);
  sub_22F114870(*v38);
  llvm::ConstantStruct::get();
  v98 = 261;
  __p = v99;
  v96 = v100;
  llvm::GlobalVariable::GlobalVariable();
  v86[1] = v48;
  *(_DWORD *)(v48 + 32) = *(_DWORD *)(v48 + 32) & 0xFFFFFF3F | 0x80;
  llvm::GlobalObject::setSection();
  v5 = v86[1];
  if ((*(_DWORD *)(v5 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v5 + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName((llvm::Value *)v86[1]);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v5 = v86[1];
  }
  v6 = &loc_22F44E000;
  if (v99 != v101)
    free(v99);
  if (v104 != (llvm::Constant *)v106)
    free(v104);
  if ((v102 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v103.i64[0], (void *)(8 * v103.u32[2]));
LABEL_77:
  AggregateElement = llvm::Constant::getAggregateElement(*(llvm::Constant **)(v5 - 32));
  v50 = (unsigned int *)(AggregateElement + 24);
  v51 = *(_DWORD *)(AggregateElement + 32);
  if (v51 >= 0x41)
  {
    if (v51 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 24)) > 0x40)
    {
      v52 = 0xFFFFFFFFLL;
      goto LABEL_82;
    }
    v50 = *(unsigned int **)v50;
  }
  v52 = *v50;
LABEL_82:
  v99 = v101;
  v100 = v6[50];
  sub_22F242C48((uint64_t)&__p, (uint64_t)&v99);
  (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 16)
                                                                                             + 272))(*(_QWORD *)(a1 + 16), v90, HIBYTE(v93), v93, v92, v52, &__p);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  GlobalVariable = (llvm::Value *)llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    NullValue = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v53);
    v56 = sub_22F10C2A4(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0));
    if (v56)
    {
      if ((*(_DWORD *)(v56 + 28) & 0x7Fu) - 35 <= 2)
      {
        v63 = sub_22EFD10F8(v56);
        if (v63)
        {
          if ((*(_BYTE *)(v63 + 82) & 0x80) == 0)
          {
            sub_22E46A4BC(*(_QWORD *)(a1 + 8), v63 & 0xFFFFFFFFFFFFFFF8 | 1, 0, 0, 0, 0, 0);
            NullValue = (llvm::Constant *)llvm::ConstantExpr::getBitCast();
          }
        }
      }
    }
    v58 = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v57);
    v59 = sub_22E693DD4(a1, v58);
    BitCast = (llvm::Constant *)llvm::ConstantExpr::getBitCast();
    v61 = sub_22E693DD4(a1, BitCast);
    sub_22E693AC0(a1);
    v102 = llvm::ConstantInt::get();
    v103.i64[0] = (uint64_t)sub_22E693DD4(a1, NullValue);
    v103.i64[1] = (uint64_t)v59;
    v104 = v61;
    GlobalVariable = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    sub_22F114870(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0));
    llvm::ConstantStruct::get();
    v98 = 261;
    __p = v99;
    v96 = v100;
    llvm::GlobalVariable::GlobalVariable();
    *((_DWORD *)GlobalVariable + 8) = *((_DWORD *)GlobalVariable + 8) & 0xFFFFFF3F | 0x80;
    llvm::GlobalObject::setSection();
    if ((*((_DWORD *)GlobalVariable + 8) & 0xFu) <= 0xA
      && ((1 << (*((_DWORD *)GlobalVariable + 8) & 0xF)) & 0x63C) != 0)
    {
      llvm::Value::getName(GlobalVariable);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
  }
  if (v99 != v101)
    free(v99);
  return GlobalVariable;
}

uint64_t sub_22E68B604()
{
  return 0;
}

double sub_22E68B60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t FirstNonPHI;
  char *v6;
  double result;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string::size_type v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v18[3];

  v4 = *(_QWORD *)(a3 + 16);
  FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(a2 + 320));
  *(_QWORD *)(a2 + 2616) = FirstNonPHI;
  if (v4 && *(_QWORD *)(v4 + 40))
  {
    sub_22E4C8440(a2, v4, (uint64_t)&v13);
    if (v17)
    {
      v18[0] = v14;
      v18[1] = v15;
      v18[2] = v16;
      sub_22F2469BC(a2, v18, v13, 0, (uint64_t)&v10);
    }
    else
    {
      v10 = v14;
      v11 = v15;
      v12 = v16;
    }
    if ((BYTE8(v11) & 3) != 0)
      v8 = sub_22F28ABCC(&v10, (_QWORD *)a2);
    else
      v8 = v10;
    sub_22F2794C0(FirstNonPHI, 2u, v8);
    v9 = sub_22E4899EC(a2 + 1984, 2u, 16);
    *(_QWORD *)v9 = &unk_24FA655E0;
    *((_QWORD *)v9 + 1) = FirstNonPHI;
    *(_QWORD *)&result = sub_22E4C9A74(a2, (uint64_t)&v13).n128_u64[0];
  }
  else
  {
    v6 = sub_22E4899EC(a2 + 1984, 2u, 16);
    *(_QWORD *)v6 = &unk_24FA655E0;
    *((_QWORD *)v6 + 1) = FirstNonPHI;
  }
  return result;
}

uint64_t sub_22E68B734(uint64_t a1, uint64_t a2)
{
  uint64_t BitCast;
  llvm::PointerType *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  int8x16_t *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  int8x16_t *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  void *v44;
  __int128 v45;
  _WORD v46[24];
  void *v47;
  __int128 v48;
  _BYTE v49[9];
  void *v50;
  __int128 v51;
  _BYTE v52[256];
  int8x16_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v50 = v52;
  v51 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&v47, (uint64_t)&v50);
  (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16), a2, &v47);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v47);
  if (llvm::Module::getGlobalVariable())
  {
    BitCast = llvm::ConstantExpr::getBitCast();
    goto LABEL_3;
  }
  v47 = v49;
  v48 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&v44, (uint64_t)&v47);
  (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16), a2, &v44);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v44);
  if (!llvm::Module::getGlobalVariable())
  {
    llvm::User::operator new((llvm::User *)0x58);
    v46[4] = 261;
    v44 = "??_7type_info@@6B@";
    *(_QWORD *)&v45 = 18;
    llvm::GlobalVariable::GlobalVariable();
  }
  llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*(_QWORD *)(a1 + 8) + 96), v6);
  llvm::ConstantDataArray::getString();
  v7 = v48;
  v44 = v46;
  v45 = xmmword_22F45D630;
  qmemcpy(v46, "rtti.TypeDescriptor", 19);
  if ((_QWORD)v48)
  {
    v8 = (char *)&v56;
    v9 = v48;
    do
    {
      *--v8 = (v9 % 0xA) | 0x30;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  else
  {
    v8 = &v55;
    v55 = 48;
  }
  sub_22E3B4274(&v53, v8, (char *)&v56, (char *)&v56 - v8);
  if (v54 >= 0)
    v11 = &v53;
  else
    v11 = (int8x16_t *)v53.i64[0];
  if (v54 >= 0)
    v12 = HIBYTE(v54) & 0x7F;
  else
    v12 = v53.u64[1];
  v13 = v45;
  if (*((_QWORD *)&v45 + 1) >= (unint64_t)v45 + v12)
  {
    if (!v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  v28 = v11;
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v11 = v28;
  v13 = v45;
  if (v12)
  {
LABEL_21:
    memcpy((char *)v44 + v13, v11, v12);
    v13 = v45;
  }
LABEL_22:
  *(_QWORD *)&v45 = v13 + v12;
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53.i64[0]);
  v14 = a1 + 232;
  v15 = *(_QWORD *)(a1 + 232);
  v16 = *(_DWORD *)(a1 + 248);
  if (!v16)
  {
    v18 = 0;
    goto LABEL_36;
  }
  v17 = (v16 - 1) & (37 * v7);
  v18 = (_QWORD *)(v15 + 16 * v17);
  v19 = *v18;
  if (v7 != *v18)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != -1)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -2;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & (v16 - 1);
      v18 = (_QWORD *)(v15 + 16 * v17);
      v19 = *v18;
      if (v7 == *v18)
        goto LABEL_42;
    }
    if (v20)
      v18 = v20;
LABEL_36:
    v24 = *(_DWORD *)(a1 + 240);
    if (4 * v24 + 4 >= 3 * v16)
    {
      sub_22E695680(v14, 2 * v16);
      v29 = *(_QWORD *)(a1 + 232);
      v30 = *(_DWORD *)(a1 + 248) - 1;
      v31 = v30 & (37 * v7);
      v18 = (_QWORD *)(v29 + 16 * v31);
      v32 = *v18;
      if (v7 == *v18)
        goto LABEL_67;
      v33 = 0;
      v34 = 1;
      while (v32 != -1)
      {
        if (v33)
          v35 = 0;
        else
          v35 = v32 == -2;
        if (v35)
          v33 = v18;
        v36 = v31 + v34++;
        v31 = v36 & v30;
        v18 = (_QWORD *)(v29 + 16 * v31);
        v32 = *v18;
        if (v7 == *v18)
          goto LABEL_67;
      }
    }
    else
    {
      if (v16 + ~v24 - *(_DWORD *)(a1 + 244) > v16 >> 3)
      {
LABEL_38:
        v25 = *v18;
LABEL_39:
        ++*(_DWORD *)(a1 + 240);
        if (v25 != -1)
          --*(_DWORD *)(a1 + 244);
        *v18 = v7;
        v18[1] = 0;
        goto LABEL_42;
      }
      sub_22E695680(v14, v16);
      v37 = *(_QWORD *)(a1 + 232);
      v38 = *(_DWORD *)(a1 + 248) - 1;
      v39 = v38 & (37 * v7);
      v18 = (_QWORD *)(v37 + 16 * v39);
      v40 = *v18;
      if (v7 == *v18)
      {
LABEL_67:
        v25 = v7;
        goto LABEL_39;
      }
      v33 = 0;
      v41 = 1;
      while (v40 != -1)
      {
        if (v33)
          v42 = 0;
        else
          v42 = v40 == -2;
        if (v42)
          v33 = v18;
        v43 = v39 + v41++;
        v39 = v43 & v38;
        v18 = (_QWORD *)(v37 + 16 * v39);
        v40 = *v18;
        if (v7 == *v18)
          goto LABEL_67;
      }
    }
    if (v33)
      v18 = v33;
    goto LABEL_38;
  }
LABEL_42:
  if (!v18[1])
  {
    v26 = *(_QWORD *)(a1 + 8);
    v53 = vextq_s8(*(int8x16_t *)(v26 + 96), *(int8x16_t *)(v26 + 96), 8uLL);
    v54 = llvm::ArrayType::get(*(llvm::ArrayType **)(v26 + 8), (llvm::Type *)(v7 + 1));
    v18[1] = llvm::StructType::create();
  }
  if (v44 != v46)
    free(v44);
  v27 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  sub_22F114870(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  llvm::ConstantStruct::get();
  v46[4] = 261;
  v44 = v50;
  *(_QWORD *)&v45 = v51;
  llvm::GlobalVariable::GlobalVariable();
  if ((*((_DWORD *)v27 + 8) & 0xFu) <= 0xA && ((1 << (*((_DWORD *)v27 + 8) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName(v27);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  BitCast = llvm::ConstantExpr::getBitCast();
  if (v47 != v49)
    free(v47);
LABEL_3:
  if (v50 != v52)
    free(v50);
  return BitCast;
}

uint64_t sub_22E68BD54(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  llvm::Value *v4;
  char v6;
  __int16 v7;

  v7 = 0;
  v6 = 0;
  v3 = sub_22E693C50(*(_QWORD *)(a1[1] + 144), a2, (char *)&v7 + 1, (BOOL *)&v7, &v6);
  v4 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 264))(a1, v3);
  return llvm::Value::stripPointerCasts(v4);
}

uint64_t sub_22E68BE04()
{
  return 0;
}

BOOL sub_22E68BE28(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = sub_22F10C2A4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (v5)
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
      v6 = 0;
    else
      v6 = v5;
    if (a2)
      return (*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6) + 72) + 40) & 2) == 0;
  }
  else
  {
    v6 = 0;
    if (a2)
      return (*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6) + 72) + 40) & 2) == 0;
  }
  return 0;
}

uint64_t sub_22E68BE9C(uint64_t a1, llvm::Type *a2)
{
  uint64_t NullValue;
  llvm::Value *v4;

  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), a2);
  v4 = (llvm::Value *)sub_22E6957F8((uint64_t)a2, NullValue);
  llvm::Value::getContext(v4);
  *((_QWORD *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return sub_22F24866C((uint64_t)a2 + 272);
}

uint64_t sub_22E68BF00(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[3];
  _OWORD v14[2];
  __int128 v15;

  v8 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v8;
  v13[2] = *(_OWORD *)(a4 + 32);
  sub_22E6958CC((uint64_t)v14, a1, a2, (uint64_t)v13, a3);
  v9 = v14[1];
  *(_OWORD *)a4 = v14[0];
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 32) = v15;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v10 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v10 = *(_QWORD *)a4;
  v11 = sub_22E6957F8((uint64_t)a2, v10);
  LOWORD(v15) = 257;
  return sub_22E3C1740(a2 + 34, 49, v11, a5, (uint64_t)v14);
}

BOOL sub_22E68BFB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = sub_22F10C2A4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (v5)
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
      v6 = 0;
    else
      v6 = v5;
    if (a2)
      return (*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6) + 72) + 40) & 2) == 0;
  }
  else
  {
    v6 = 0;
    if (a2)
      return (*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v6) + 72) + 40) & 2) == 0;
  }
  return 0;
}

uint64_t sub_22E68C02C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::LLVMContext *a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Value *v28;
  uint64_t v29;
  uint64_t v31;
  _BYTE v32[32];
  __int16 v33;
  _OWORD v34[3];
  _QWORD v35[5];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v31 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a5);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
    v12 = (unint64_t)sub_22F10D2BC(a4);
  v13 = sub_22F29C578(v11, (llvm::Type *)(v12 & 0xFFFFFFFFFFFFFFF0), 0);
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
    v15 = (unint64_t)sub_22F10D2BC(a6);
  v16 = sub_22F29C578(v14, (llvm::Type *)(v15 & 0xFFFFFFFFFFFFFFF0), 0);
  v17 = *(_OWORD *)(a3 + 16);
  v34[0] = *(_OWORD *)a3;
  v34[1] = v17;
  v34[2] = *(_OWORD *)(a3 + 32);
  sub_22E6958CC((uint64_t)&v36, a1, (_QWORD *)a2, (uint64_t)v34, a4);
  v18 = v37;
  *(_OWORD *)a3 = v36;
  *(_OWORD *)(a3 + 16) = v18;
  *(_OWORD *)(a3 + 32) = v38;
  v19 = v39;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v20 = sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
  else
    v20 = *(_QWORD *)a3;
  v21 = *(_QWORD *)(a2 + 24);
  LOWORD(v38) = 257;
  v22 = sub_22E3C1740((uint64_t *)(a2 + 272), 38, v19, v21, (uint64_t)&v36);
  v23 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v36 = *(_QWORD *)(a2 + 96);
  *((_QWORD *)&v36 + 1) = v23;
  *(_QWORD *)&v37 = v36;
  *((_QWORD *)&v37 + 1) = v36;
  *(_QWORD *)&v38 = v23;
  v24 = *(_QWORD *)(a2 + 144);
  v25 = llvm::FunctionType::get();
  v26 = sub_22E633A04(v24, v25, "__RTDynamicCast", 0xFuLL, 0, 0, 0);
  v28 = v27;
  v35[0] = v20;
  v35[1] = v22;
  v35[2] = v13;
  v35[3] = v16;
  v35[4] = llvm::ConstantInt::get();
  v33 = 257;
  v29 = sub_22F24F1F4((_QWORD *)a2, v26, v28, (uint64_t)v35, 5, (uint64_t)v32);
  *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xF003 | (4 * *(_WORD *)(a2 + 136));
  v33 = 257;
  return sub_22E3C1740((uint64_t *)(a2 + 272), 49, v29, v31, (uint64_t)v32);
}

llvm::Value *sub_22E68C294(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t v13;
  _OWORD v15[3];
  _OWORD v16[2];
  __int128 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v6;
  v15[2] = *(_OWORD *)(a3 + 32);
  sub_22E6958CC((uint64_t)v16, a1, a2, (uint64_t)v15, a4);
  v7 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v17;
  v18[1] = a2[12];
  v8 = a2[18];
  v9 = llvm::FunctionType::get();
  v10 = sub_22E633A04(v8, v9, "__RTCastToVoid", 0xEuLL, 0, 0, 0);
  v12 = v11;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v13 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v13 = *(_QWORD *)a3;
  v18[0] = v13;
  LOWORD(v17) = 257;
  return sub_22E479C7C((uint64_t)a2, v10, v12, (uint64_t)v18, 1, (uint64_t)v16);
}

uint64_t sub_22E68C3BC()
{
  return 0;
}

llvm::Instruction *sub_22E68C3C4(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t SExtOrBitCast;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  __int16 v27;
  _OWORD v28[3];
  _QWORD v29[4];
  __int16 v30;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  sub_22F0C975C(v10, a4);
  v11 = llvm::ConstantInt::get();
  sub_22EF5CCD0(v10, *(_QWORD *)(*(_QWORD *)(v10 + 16480) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v29);
  sub_22F40C330(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 712), a4, a5);
  v12 = llvm::ConstantInt::get();
  v13 = a3[1];
  v28[0] = *a3;
  v28[1] = v13;
  v28[2] = a3[2];
  v14 = sub_22E692524(a1, a2, (uint64_t)v28, v11, v12, 0);
  SExtOrBitCast = v14;
  v16 = a2 + 272;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v27 = 257;
  if (*(_QWORD *)v14 != v17)
  {
    if (*(unsigned __int8 *)(v14 + 16) <= 0x14u)
    {
      SExtOrBitCast = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 344) + 296))(*(_QWORD *)(a2 + 344), v14, v17);
      if (SExtOrBitCast)
        v21 = *(unsigned __int8 *)(SExtOrBitCast + 16) >= 0x1Cu;
      else
        v21 = 0;
      if (v21)
      {
        (*(void (**)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), SExtOrBitCast, v26, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
        v22 = *(unsigned int *)(a2 + 280);
        if ((_DWORD)v22)
        {
          v24 = *(_QWORD *)(a2 + 272);
          v25 = v24 + 16 * v22;
          do
          {
            llvm::Instruction::setMetadata();
            v24 += 16;
          }
          while (v24 != v25);
        }
      }
    }
    else
    {
      v30 = 257;
      SExtOrBitCast = llvm::CastInst::CreateSExtOrBitCast();
      (*(void (**)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), SExtOrBitCast, v26, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
      v18 = *(unsigned int *)(a2 + 280);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(a2 + 272);
        v20 = v19 + 16 * v18;
        do
        {
          llvm::Instruction::setMetadata();
          v19 += 16;
        }
        while (v19 != v20);
      }
    }
  }
  v30 = 257;
  return sub_22E520468(v16, v11, SExtOrBitCast, (uint64_t)v29);
}

uint64_t sub_22E68C5E0(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  llvm::Constant **v6;
  uint64_t *v7;
  uint64_t NullValue;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::LLVMContext *v26;
  llvm::Type **v27;
  llvm::Type *v28;
  unint64_t v29;
  _DWORD *v31;
  uint64_t v32;
  const char *v33;
  unsigned int v34;
  uint64_t v36;
  _OWORD v37[3];
  _QWORD v38[4];
  __int16 v39;
  __int128 v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46[3];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v6 = (llvm::Constant **)a2[728];
  v7 = a2 + 34;
  *(_QWORD *)&v50 = "is_complete_object";
  LOWORD(v52) = 259;
  NullValue = llvm::Constant::getNullValue(*v6, (llvm::Type *)a2);
  v9 = sub_22E3C18F4((uint64_t)v7, 33, (uint64_t *)v6, NullValue, (uint64_t)&v50);
  *(_QWORD *)&v50 = "ctor.init_vbases";
  LOWORD(v52) = 259;
  v10 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v50 = "ctor.skip_vbases";
  LOWORD(v52) = 259;
  v11 = operator new();
  llvm::BasicBlock::BasicBlock();
  v12 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v12, v10, v11, v9, 0);
  LOWORD(v52) = 257;
  sub_22E3C12C8(v7, v12, (uint64_t)&v50);
  sub_22E5ED9B4(a2, v10, 0);
  sub_22F24D1F4(a2, &v50);
  v46[0] = v50;
  v46[1] = v51;
  v46[2] = v52;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_QWORD *)&v44[0] = "this.int8";
  LOWORD(v45) = 259;
  sub_22E3BEE6C(v7, v46, v13, (uint64_t)v44, (uint64_t)&v47);
  v50 = v47;
  v51 = v48;
  v52 = v49;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v36 = sub_22F0C975C(v14, (unint64_t)a3);
  v15 = sub_22E695B1C(a1, a3);
  v16 = *(unsigned int *)(*(_QWORD *)v15 + 8);
  if ((_DWORD)v16)
  {
    v17 = v15;
    v18 = 0;
    v19 = 8 * v16;
    do
    {
      v20 = **(_QWORD **)v17;
      v21 = *(uint64_t **)(*(_QWORD *)(v17 + 8) + v18);
      v22 = sub_22F0C975C(v14, *(_QWORD *)(*(_QWORD *)(v20 + v18) + 8));
      v23 = *(_QWORD *)(v20 + v18);
      v24 = *(_QWORD *)(*(_QWORD *)(v22 + 72) + 32) + *(_QWORD *)(v23 + 16);
      if (*(_DWORD *)(v23 + 64))
      {
        v25 = **(_QWORD **)(v23 + 56);
        if (v25)
          v24 += sub_22F2500F4(v36, v25);
      }
      v44[0] = v50;
      v44[1] = v51;
      v45 = v52;
      LOWORD(v43) = 257;
      sub_22F24D74C(v7, (uint64_t)v44, v24, (uint64_t)&v41, (uint64_t)&v47);
      v26 = (llvm::LLVMContext *)v21[3];
      LOWORD(v43) = 257;
      v27 = (llvm::Type **)sub_22E3C4170(v7, v26, v21, 0, 0, (uint64_t)&v41);
      v40[0] = v47;
      v40[1] = v48;
      v40[2] = v49;
      v28 = *v27;
      v29 = *(_QWORD *)(**(_QWORD **)(v20 + v18) + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(**(_QWORD **)(v20 + v18) + 40) & 7) != 0 || v29 == 0)
      {
        v32 = 0;
        v33 = "";
      }
      else
      {
        v31 = *(_DWORD **)(v29 + 16);
        v34 = *v31;
        v33 = (const char *)(v31 + 4);
        v32 = v34;
      }
      v39 = 1283;
      v38[0] = "vbptr.";
      v38[2] = v33;
      v38[3] = v32;
      sub_22E3BEE6C(v7, v40, (uint64_t)v28, (uint64_t)v38, (uint64_t)&v41);
      v48 = v42;
      v49 = v43;
      v47 = v41;
      v37[0] = v41;
      v37[1] = v42;
      v37[2] = v43;
      sub_22E3BEDDC((uint64_t)v7, v27, (uint64_t)v37);
      v18 += 8;
    }
    while (v19 != v18);
  }
  return v11;
}

uint64_t sub_22E68C934(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::Instruction *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  llvm::LLVMContext *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[12];
  _QWORD v33[6];
  const char *v34;
  __int16 v35;

  v6 = *(_QWORD *)(sub_22F0C975C(*(_QWORD *)(a1[1] + 144), a3) + 72);
  sub_22F24D1F4((_QWORD *)a2, &v34);
  v7 = *(_DWORD *)(llvm::PointerType::get() + 8);
  result = sub_22E483108(a3);
  if (result != v9)
  {
    v10 = result;
    v11 = v9;
    *(_DWORD *)&v32[8] = 0;
    v12 = v6 + 88;
    *(_QWORD *)v32 = v7 >> 8;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
      v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      if (v14)
      {
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          v15 = 0;
        else
          v15 = v14;
      }
      else
      {
        v15 = 0;
      }
      result = sub_22E5E4648(v12, v15);
      if (*(_BYTE *)(result + 16))
      {
        sub_22F24D1F4((_QWORD *)a2, v33);
        v16 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, unint64_t, uint64_t))(*a1 + 344))(a1, a2, v33, a3, v15);
        v17 = llvm::ConstantInt::get();
        v34 = "vtordisp.value";
        v35 = 259;
        v18 = sub_22E3E48CC(a2 + 272, (uint64_t)v16, v17, (uint64_t)&v34, 0, 0);
        v19 = *(_QWORD *)(a2 + 24);
        v35 = 257;
        sub_22E3E60AC((uint64_t *)(a2 + 272), (uint64_t)v18, v19, (uint64_t)&v34);
        v20 = *(uint64_t **)&v32[4];
        if (!*(_QWORD *)&v32[4])
        {
          v21 = *(_QWORD *)(a2 + 4200);
          v22 = llvm::PointerType::get();
          v35 = 257;
          v20 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, v21, v22, (uint64_t)&v34);
        }
        v23 = *(_QWORD *)(a2 + 8);
        v35 = 257;
        *(_QWORD *)&v32[4] = v20;
        v24 = (uint64_t *)sub_22E3E5044((uint64_t *)(a2 + 272), v23, v20, v16, (uint64_t)&v34);
        v25 = *(llvm::LLVMContext **)(a2 + 8);
        v35 = 257;
        v26 = sub_22E4363E4((uint64_t *)(a2 + 272), v25, v24, 4294967292, (uint64_t)&v34);
        v27 = llvm::PointerType::get();
        v34 = "vtordisp.ptr";
        v35 = 259;
        sub_22E3C1740((uint64_t *)(a2 + 272), 49, v26, v27, (uint64_t)&v34);
        v28 = llvm::User::operator new((llvm::User *)0x40);
        llvm::StoreInst::StoreInst();
        v35 = 257;
        result = (*(uint64_t (**)(_QWORD, uint64_t, const char **, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352)
                                                                                           + 16))(*(_QWORD *)(a2 + 352), v28, &v34, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
        v29 = *(unsigned int *)(a2 + 280);
        if ((_DWORD)v29)
        {
          v30 = *(_QWORD *)(a2 + 272);
          v31 = v30 + 16 * v29;
          do
          {
            result = llvm::Instruction::setMetadata();
            v30 += 16;
          }
          while (v30 != v31);
        }
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_22E68CC2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  llvm::Value *v10;
  unsigned int *v11;
  int v12;
  unint64_t v13;

  sub_22E62F700();
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v5 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      for (i = *v4; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
      {
        v6 -= 8;
        if (!v6)
          return;
      }
    }
    else
    {
      i = *v4;
    }
    if (i != *v4 + 8 * v5 && !sub_22EFC0EB8(a2) && sub_22EFBF86C(a2, &v13, 0))
    {
      if (!sub_22E694BE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15064), a2)
        || ((v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v9 = *(_BYTE *)(v8 + 16) == 26)
          : (v9 = 0),
            (v9
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v8 = sub_22F10CF48(v8)) != 0)
         && (*(_DWORD *)(v8 + 20) & 0x3FFFC0) != 0))
      {
        v10 = sub_22E694C40();
        v11 = (unsigned int *)v10;
        v12 = *((_DWORD *)v10 + 8);
        *((_DWORD *)v10 + 8) = v12 & 0xFFFFFFF0 | 5;
        if ((v12 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v10) & 1) == 0)
          v11[8] |= 0x4000u;
        sub_22F29966C(*(_QWORD *)(a1 + 8), v11, a2);
      }
    }
  }
}

uint64_t sub_22E68CDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;

  v6 = 0;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28);
  if ((a2 & 7) == 0 && (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x39)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480);
    v10 = *(_DWORD *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
    v8 = *(_DWORD *)(v7 + 28);
    v6 = 1;
  }
  v11 = 0;
  if (v7 && (v8 & 0x7F) == 0x37)
  {
    v12 = *(_WORD *)(v7 + 80) & 0x7F;
    v13 = -40;
    if (v12 > 0x46)
    {
      if (v12 != 83)
      {
        if (v12 == 71)
        {
          v13 = -56;
          goto LABEL_24;
        }
        if (v12 == 81)
          goto LABEL_24;
        goto LABEL_19;
      }
    }
    else
    {
      if (v12 > 0x18)
        goto LABEL_18;
      if (v12 != 16)
      {
        if (((1 << v12) & 0x1066) != 0)
          goto LABEL_24;
        if (v12 != 24)
        {
LABEL_18:
          if (v12 == 70)
          {
            v13 = -64;
            goto LABEL_24;
          }
LABEL_19:
          v14 = v12 - 52;
          v15 = v12 - 33 >= 5;
          v16 = -48;
          if (!v15)
            v16 = -64;
          if (v14 >= 6)
            v13 = v16;
          else
            v13 = -72;
          goto LABEL_24;
        }
      }
      v13 = -48;
    }
LABEL_24:
    v17 = *(_QWORD *)(v7 + 72 + v13 + 16);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    if (v18)
      v19 = v18 - 8;
    else
      v19 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_BYTE *)(v20 + 16) == 26;
    else
      v21 = 0;
    if (!v21)
      v20 = sub_22F10CF48(v20);
    sub_22E3CD31C((uint64_t *)(v19[13] + 96), v19[13]);
    if (*(_DWORD *)(v19[16] + 20))
    {
      if ((*(_BYTE *)(v20 + 23) & 8) != 0)
      {
        v25 = *(_QWORD *)a4 + 8;
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480);
        sub_22F2A156C((uint64_t *)a4, v25, &v26);
        v11 = 1;
      }
      else
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480);
        v23 = *(_DWORD *)(a4 + 8);
        if (v23 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *(_DWORD *)(a4 + 8);
        }
        v11 = 0;
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v23) = v22;
        ++*(_DWORD *)(a4 + 8);
        v6 = (v6 + 1);
      }
    }
    else
    {
      v11 = 0;
    }
  }
  return v11 | (v6 << 32);
}

BOOL sub_22E68CFF8(uint64_t a1, uint64_t a2, int a3)
{
  return a3 != 2;
}

void sub_22E68D004(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (a4)
    sub_22E628990(*(_QWORD *)(a1 + 8), a2, a3);
  else
    a2[8] &= 0xFFFFFCFF;
}

uint64_t sub_22E68D020(uint64_t a1, int a2, unint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 7;
  if (!a4)
    return 3;
  if (a4 != 1)
    return sub_22E629FAC(*(_QWORD **)(a1 + 8), a3, a2, 0);
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v7 = *((unsigned int *)v6 + 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      v9 = *v6;
      while (*(_WORD *)(*(_QWORD *)v9 + 32) != 155)
      {
        v9 += 8;
        v8 -= 8;
        if (!v8)
          goto LABEL_5;
      }
    }
    else
    {
      v9 = *v6;
    }
    if (v9 != *v6 + 8 * v7)
      return 5;
  }
LABEL_5:
  if (sub_22E49F808(a3))
    return 1;
  else
    return 3;
}

void sub_22E68D0E8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  sub_22E62F700();
  v3 = *(_WORD *)(a2 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_17;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_17;
    }
    if (v3 != 81)
    {
LABEL_12:
      v5 = v3 - 52;
      v6 = v3 - 33 >= 5;
      v7 = -48;
      if (!v6)
        v7 = -64;
      if (v5 >= 6)
        v4 = v7;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_11;
    if (v3 == 16)
    {
LABEL_4:
      v4 = -48;
      goto LABEL_17;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_4;
LABEL_11:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 72 + v4 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  sub_22E3CD31C((uint64_t *)(v10[13] + 96), v10[13]);
  if (*(_DWORD *)(v10[16] + 20) && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v12 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      for (i = *v11; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
      {
        v13 -= 8;
        if (!v13)
          return;
      }
    }
    else
    {
      i = *v11;
    }
    if (i != *v11 + 8 * v12)
      sub_22E62F700();
  }
}

_QWORD *sub_22E68D270(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (((*(_BYTE *)(v4 + 82) & 0xC) != 0 || sub_22EFD7260(v4)) && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x39)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 712);
    v14 = sub_22E462B18(a2) ? a2 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(a2) + 96) & 0x80) == 0) : a2;
    sub_22F40C3DC(v13, v14, 0, (uint64_t)v15);
    if (v15[1] || v15[2])
      return 0;
  }
  v5 = *(_WORD *)(a2 + 80) & 0x7F;
  v6 = -40;
  if (v5 > 0x46)
  {
    if (v5 != 83)
    {
      if (v5 == 71)
      {
        v6 = -56;
        goto LABEL_20;
      }
      if (v5 == 81)
        goto LABEL_20;
LABEL_15:
      v7 = v5 - 52;
      v8 = v5 - 33 >= 5;
      v9 = -48;
      if (!v8)
        v9 = -64;
      if (v7 >= 6)
        v6 = v9;
      else
        v6 = -72;
    }
  }
  else
  {
    if (v5 > 0x18)
      goto LABEL_14;
    if (v5 != 16)
    {
      if (((1 << v5) & 0x1066) != 0)
        goto LABEL_20;
      if (v5 != 24)
      {
LABEL_14:
        if (v5 == 70)
        {
          v6 = -64;
          goto LABEL_20;
        }
        goto LABEL_15;
      }
    }
    v6 = -48;
  }
LABEL_20:
  v10 = *(_QWORD *)(a2 + 72 + v6 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    return v11 - 8;
  else
    return 0;
}

void sub_22E68D3F0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  llvm::GetElementPtrInst *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[3];
  _OWORD v49[3];
  __int128 v50[3];
  _OWORD v51[3];
  __int128 v52[3];
  char v53[8];
  unint64_t v54;
  uint64_t v55;
  _OWORD v56[3];
  _BYTE v57[32];
  __int16 v58;
  __int128 v59[3];
  __int128 v60;
  __int128 v61;
  __int128 v62;

  if ((a6 & 1) == 0)
  {
    v21 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 440))(a1, a3, a4);
    if (v21)
    {
      v24 = v21;
      v25 = a5[1];
      v59[0] = *a5;
      v59[1] = v25;
      v59[2] = a5[2];
      v26 = a2[1];
      v58 = 257;
      sub_22E3BEE6C(a2 + 34, v59, v26, (uint64_t)v57, (uint64_t)&v60);
      v27 = v61;
      *a5 = v60;
      a5[1] = v27;
      a5[2] = v62;
      v28 = a5[1];
      v56[0] = *a5;
      v56[1] = v28;
      v56[2] = a5[2];
      LOWORD(v62) = 257;
      sub_22F247C50(a2 + 34, (uint64_t)v56, v24, (uint64_t)&v60, a7);
      return;
    }
    goto LABEL_18;
  }
  v11 = a3 & 7;
  v12 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_DWORD *)(v12 + 28) & 0x7F) != 0x39)
    goto LABEL_6;
  if (v11 == 1)
  {
LABEL_18:
    v22 = a5[1];
    *(_OWORD *)a7 = *a5;
    *(_OWORD *)(a7 + 16) = v22;
    v23 = a5[2];
LABEL_19:
    *(_OWORD *)(a7 + 32) = v23;
    return;
  }
  a4 &= 0xFFFFFFFF00000000;
  a3 &= 0xFFFFFFFFFFFFFFF8;
LABEL_6:
  sub_22F40C3DC(*(_QWORD *)(a1[1] + 712), a3, a4, (uint64_t)v53);
  v13 = (*(_DWORD *)(v12 + 28) & 0x7F) == 0x39 && v11 == 2;
  v14 = v54;
  if (v13)
    v15 = 0;
  else
    v15 = v55;
  v16 = a5[1];
  *(_OWORD *)a7 = *a5;
  *(_OWORD *)(a7 + 16) = v16;
  *(_OWORD *)(a7 + 32) = a5[2];
  if (!v14)
    goto LABEL_42;
  v17 = a5[1];
  v52[0] = *a5;
  v52[1] = v17;
  v52[2] = a5[2];
  v18 = a2[1];
  LOWORD(v62) = 257;
  sub_22E3BEE6C(a2 + 34, v52, v18, (uint64_t)&v60, a7);
  v19 = *(_WORD *)(v12 + 80) & 0x7F;
  v20 = -40;
  if (v19 > 0x46)
  {
    if (v19 != 83)
    {
      if (v19 == 71)
      {
        v20 = -56;
        goto LABEL_34;
      }
      if (v19 == 81)
        goto LABEL_34;
LABEL_29:
      v29 = v19 - 52;
      v30 = v19 - 33 >= 5;
      v31 = -48;
      if (!v30)
        v31 = -64;
      if (v29 >= 6)
        v20 = v31;
      else
        v20 = -72;
    }
  }
  else
  {
    if (v19 > 0x18)
      goto LABEL_28;
    if (v19 != 16)
    {
      if (((1 << v19) & 0x1066) != 0)
        goto LABEL_34;
      if (v19 != 24)
      {
LABEL_28:
        if (v19 == 70)
        {
          v20 = -64;
          goto LABEL_34;
        }
        goto LABEL_29;
      }
    }
    v20 = -48;
  }
LABEL_34:
  v32 = *(_QWORD *)(v12 + 72 + v20 + 16);
  v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 4) != 0)
    v33 = (_QWORD *)*v33;
  if (v33)
    v34 = (unint64_t)(v33 - 8);
  else
    v34 = 0;
  v35 = *(_OWORD *)(a7 + 16);
  v51[0] = *(_OWORD *)a7;
  v51[1] = v35;
  v51[2] = *(_OWORD *)(a7 + 32);
  v36 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD *, _OWORD *, unint64_t, unint64_t))(*a1 + 344))(a1, a2, v51, v34, v14);
  v37 = *(_QWORD *)(a7 + 8);
  if ((*(_BYTE *)(a7 + 24) & 3) != 0)
    v38 = (uint64_t *)sub_22F28ABCC((_OWORD *)a7, a2);
  else
    v38 = *(uint64_t **)a7;
  LOWORD(v62) = 257;
  v39 = sub_22E3E5044(a2 + 34, v37, v38, v36, (uint64_t)&v60);
  v40 = sub_22E47FF54(a2[18], *(_QWORD *)(a7 + 16), v34, v14);
  v41 = a2[1];
  *(_QWORD *)a7 = v39;
  *(_QWORD *)(a7 + 8) = v41;
  *(_QWORD *)(a7 + 16) = v40;
  *(_DWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = 0;
LABEL_42:
  if (v15)
  {
    v42 = a2 + 34;
    v43 = *(_OWORD *)(a7 + 16);
    v50[0] = *(_OWORD *)a7;
    v50[1] = v43;
    v50[2] = *(_OWORD *)(a7 + 32);
    v44 = a2[1];
    v58 = 257;
    sub_22E3BEE6C(a2 + 34, v50, v44, (uint64_t)v57, (uint64_t)&v60);
    v45 = v61;
    *(_OWORD *)a7 = v60;
    *(_OWORD *)(a7 + 16) = v45;
    *(_OWORD *)(a7 + 32) = v62;
    v46 = *(_OWORD *)(a7 + 16);
    if (v54)
    {
      v49[0] = *(_OWORD *)a7;
      v49[1] = v46;
      v49[2] = *(_OWORD *)(a7 + 32);
      v58 = 257;
      sub_22F247C50(v42, (uint64_t)v49, v15, (uint64_t)v57, (uint64_t)&v60);
    }
    else
    {
      v48[0] = *(_OWORD *)a7;
      v48[1] = v46;
      v48[2] = *(_OWORD *)(a7 + 32);
      v58 = 257;
      sub_22F24D74C(v42, (uint64_t)v48, v15, (uint64_t)v57, (uint64_t)&v60);
    }
    v47 = v61;
    *(_OWORD *)a7 = v60;
    *(_OWORD *)(a7 + 16) = v47;
    v23 = v62;
    goto LABEL_19;
  }
}

uint64_t sub_22E68D7B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 144);
  v7 = *(_QWORD *)(a2 + 1688);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 28);
  if ((v9 & 0x7F) != 0x37)
    goto LABEL_32;
  v10 = *(_WORD *)(v8 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 != 83)
    {
      if (v10 == 71)
      {
        v11 = -56;
        goto LABEL_18;
      }
      if (v10 == 81)
        goto LABEL_18;
      goto LABEL_13;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_12;
    if (v10 != 16)
    {
      if (((1 << v10) & 0x1066) != 0)
        goto LABEL_18;
      if (v10 != 24)
      {
LABEL_12:
        if (v10 == 70)
        {
          v11 = -64;
          goto LABEL_18;
        }
LABEL_13:
        v12 = v10 - 52;
        v13 = v10 - 33 >= 5;
        v14 = -48;
        if (!v13)
          v14 = -64;
        if (v12 >= 6)
          v11 = v14;
        else
          v11 = -72;
        goto LABEL_18;
      }
    }
    v11 = -48;
  }
LABEL_18:
  v15 = *(_QWORD *)(v8 + 72 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  result = sub_22E3CD31C((uint64_t *)(v17[13] + 96), v17[13]);
  v7 = *(_QWORD *)(a2 + 1688);
  v18 = v7 & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(v17[16] + 20))
  {
    v19 = *(_DWORD *)(v18 + 24);
    v20 = sub_22E3CB704(*(llvm::StringMapImpl **)(v6 + 15192), "is_most_derived", 0xFuLL);
    v21 = sub_22EFC4364(v6, 0, v19, v20, *(_QWORD *)(v6 + 16480), 5);
    result = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v22 = *(_BYTE *)(result + 16) == 26;
    else
      v22 = 0;
    if (!v22)
      result = sub_22F10CF48(result);
    if ((*(_BYTE *)(result + 23) & 8) != 0)
    {
      v23 = *(_QWORD *)a4 + 8;
      v27 = v21;
      result = sub_22F24C084((uint64_t *)a4, v23, &v27);
LABEL_38:
      *(_QWORD *)(a2 + 5816) = v21;
      return result;
    }
LABEL_35:
    v26 = *(_DWORD *)(a4 + 8);
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v26) = v21;
    ++*(_DWORD *)(a4 + 8);
    goto LABEL_38;
  }
  v9 = *(_DWORD *)(v18 + 28);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
  if ((v7 & 7) == 0 && (v9 & 0x7F) == 0x39)
  {
    v24 = *(_DWORD *)(v8 + 24);
    v25 = sub_22E3CB704(*(llvm::StringMapImpl **)(v6 + 15192), "should_call_delete", 0x12uLL);
    result = sub_22EFC4364(v6, 0, v24, v25, *(_QWORD *)(v6 + 16480), 5);
    v21 = result;
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_22E68D9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a3;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v5 + 28) & 0x7F) == 0x39)
  {
    v4 = 0;
    v6 = 0;
    v7 = a2 & 7;
    a2 &= 0xFFFFFFFFFFFFFFF8;
    if (v7 == 1)
      return v6;
  }
  sub_22F40C3DC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 712), a2, v4 | a3 & 0xFFFFFFFF00000000, (uint64_t)&v19);
  v9 = v20;
  v6 = (*(_DWORD *)(v5 + 28) & 0x7F) == 0x39 ? 0 : v21;
  if (!v20)
    return v6;
  v10 = *(_WORD *)(v5 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 != 83)
    {
      if (v10 == 71)
      {
        v11 = -56;
        goto LABEL_25;
      }
      if (v10 == 81)
        goto LABEL_25;
LABEL_20:
      v12 = v10 - 52;
      v13 = v10 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v11 = v14;
      else
        v11 = -72;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_19;
    if (v10 != 16)
    {
      if (((1 << v10) & 0x1066) != 0)
        goto LABEL_25;
      if (v10 != 24)
      {
LABEL_19:
        if (v10 == 70)
        {
          v11 = -64;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
    }
    v11 = -48;
  }
LABEL_25:
  v15 = *(_QWORD *)(v5 + 72 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = (unint64_t)(v16 - 8);
  else
    v17 = 0;
  v18 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v17);
  v6 += sub_22F2500F4(v18, v9);
  return v6;
}

uint64_t sub_22E68DB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::LLVMContext *v14;
  llvm::GetElementPtrInst *v15;
  uint64_t v16;
  llvm::Type **v17;
  __int128 v18;
  _OWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  _OWORD v41[3];
  _QWORD v42[4];
  __int16 v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a2 + 1592);
  if (v4)
  {
    result = sub_22E474EBC(v4);
    if ((result & 1) != 0)
      return result;
  }
  v6 = (uint64_t *)sub_22E46B144(a1, a2);
  v7 = *(_QWORD *)(a2 + 1688) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_BYTE *)(a2 + 1881))
  {
    v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 32))(*(_QWORD *)(a2 + 1688) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(v8 + 82) & 0xC) != 0 || sub_22EFD7260(v8))
    {
      v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 440))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696));
      if (v9)
      {
        v10 = v9;
        v11 = llvm::PointerType::get();
        v12 = *v6;
        v43 = 257;
        v13 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v6, v11, (uint64_t)v42);
        v14 = *(llvm::LLVMContext **)(a2 + 8);
        v43 = 257;
        v15 = sub_22E3E51B0((uint64_t *)(a2 + 272), v14, v13, -v10, (uint64_t)v42);
        v42[0] = "this.adjusted";
        v43 = 259;
        v6 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v15, v12, (uint64_t)v42);
      }
    }
  }
  *(_QWORD *)(a2 + 4200) = v6;
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696)))
  {
    v16 = a2 + 272;
    v17 = *(llvm::Type ***)(a2 + 4200);
    v18 = *(_OWORD *)(a2 + 1752);
    v41[0] = *(_OWORD *)(a2 + 1736);
    v41[1] = v18;
    v41[2] = *(_OWORD *)(a2 + 1768);
    v19 = v41;
LABEL_10:
    result = sub_22E3BEDDC(v16, v17, (uint64_t)v19);
    goto LABEL_12;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(_QWORD *)(a2 + 1688), *(_QWORD *)(a2 + 1696));
  if ((_DWORD)result)
  {
    v17 = (llvm::Type **)sub_22F25E214((_QWORD *)a2, *(uint64_t **)(a2 + 4200));
    v37 = *(_OWORD *)(a2 + 1752);
    v40[0] = *(_OWORD *)(a2 + 1736);
    v40[1] = v37;
    v40[2] = *(_OWORD *)(a2 + 1768);
    v19 = v40;
    v16 = a2 + 272;
    goto LABEL_10;
  }
LABEL_12:
  if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x37)
  {
    v20 = *(_WORD *)(v7 + 80) & 0x7F;
    v21 = -40;
    if (v20 > 0x46)
    {
      if (v20 != 83)
      {
        if (v20 == 71)
        {
          v21 = -56;
          goto LABEL_29;
        }
        if (v20 == 81)
          goto LABEL_29;
LABEL_24:
        v22 = v20 - 52;
        v23 = v20 - 33 >= 5;
        v24 = -48;
        if (!v23)
          v24 = -64;
        if (v22 >= 6)
          v21 = v24;
        else
          v21 = -72;
      }
    }
    else
    {
      if (v20 > 0x18)
        goto LABEL_23;
      if (v20 != 16)
      {
        if (((1 << v20) & 0x1066) != 0)
          goto LABEL_29;
        if (v20 != 24)
        {
LABEL_23:
          if (v20 == 70)
          {
            v21 = -64;
            goto LABEL_29;
          }
          goto LABEL_24;
        }
      }
      v21 = -48;
    }
LABEL_29:
    v25 = *(_QWORD *)(v7 + 72 + v21 + 16);
    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
    if ((v25 & 4) != 0)
      v26 = (_QWORD *)*v26;
    if (v26)
      v27 = v26 - 8;
    else
      v27 = 0;
    result = sub_22E3CD31C((uint64_t *)(v27[13] + 96), v27[13]);
    if (*(_DWORD *)(v27[16] + 20))
    {
      v44 = *(_QWORD *)(a2 + 5816);
      v42[0] = 0;
      v28 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v44, v42);
      v29 = v42[0];
      if (!v28)
        v29 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
      v30 = *(_OWORD *)(v29 + 8);
      v31 = *(_OWORD *)(v29 + 40);
      v39[1] = *(_OWORD *)(v29 + 24);
      v39[2] = v31;
      v39[0] = v30;
      result = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v39, "is_most_derived");
      *(_QWORD *)(a2 + 5824) = result;
    }
  }
  v32 = *(_QWORD *)(a2 + 1688);
  if ((v32 & 7) == 0 && (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F) == 0x39)
  {
    v44 = *(_QWORD *)(a2 + 5816);
    v42[0] = 0;
    v33 = sub_22E3CED3C((uint64_t *)(a2 + 2904), &v44, v42);
    v34 = v42[0];
    if (!v33)
      v34 = *(_QWORD *)(a2 + 2904) + 56 * *(unsigned int *)(a2 + 2920);
    v35 = *(_OWORD *)(v34 + 8);
    v36 = *(_OWORD *)(v34 + 40);
    v38[1] = *(_OWORD *)(v34 + 24);
    v38[2] = v36;
    v38[0] = v35;
    result = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v38, "should_call_delete");
    *(_QWORD *)(a2 + 5824) = result;
  }
  return result;
}

void sub_22E68DF30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W5>, uint64_t a5@<X8>)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[2];
  _QWORD v25[2];
  void *v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v10 = *(_WORD *)(a3 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 == 83)
      goto LABEL_17;
    if (v10 == 71)
    {
      v11 = -56;
      goto LABEL_17;
    }
    if (v10 != 81)
    {
LABEL_12:
      v12 = v10 - 52;
      v13 = v10 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v11 = v14;
      else
        v11 = -72;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_11;
    if (v10 == 16)
    {
LABEL_4:
      v11 = -48;
      goto LABEL_17;
    }
    if (((1 << v10) & 0x1066) == 0)
    {
      if (v10 == 24)
        goto LABEL_4;
LABEL_11:
      if (v10 == 70)
      {
        v11 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v15 = *(_QWORD *)(a3 + 72 + v11 + 16);
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  sub_22E3CD31C((uint64_t *)(v17[13] + 96), v17[13]);
  if (*(_DWORD *)(v17[16] + 20))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v18)
      v19 = *(_BYTE *)(v18 + 16) == 26;
    else
      v19 = 0;
    if (!v19)
      v18 = sub_22F10CF48(v18);
    if (a4)
      v20 = *(_QWORD *)(a2 + 5824);
    else
      v20 = llvm::ConstantInt::get();
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480);
    if ((*(_BYTE *)(v18 + 23) & 8) != 0)
    {
      v22 = v27;
      v26[0] = v27;
      v27[0] = v20;
      v27[1] = v21;
      v26[1] = (void *)0x100000001;
      sub_22F2A166C((uint64_t)v26, (_QWORD *)a5);
      v23 = v26[0];
    }
    else
    {
      v22 = v25;
      v24[0] = v25;
      v25[0] = v20;
      v25[1] = v21;
      v24[1] = 0x100000001;
      sub_22F2A23C0((_QWORD *)a5, (uint64_t)v24);
      v23 = (_QWORD *)v24[0];
    }
    if (v23 != v22)
      free(v23);
  }
  else
  {
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a5 + 8) = 0x100000000;
    *(_QWORD *)(a5 + 32) = a5 + 48;
    *(_DWORD *)(a5 + 44) = 1;
  }
}

uint64_t sub_22E68E180()
{
  return 0;
}

uint64_t sub_22E68E188(uint64_t *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, unint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  llvm::Constant **v31;
  uint64_t NullValue;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[3];
  _QWORD v48[4];
  int v49;
  uint64_t v50;
  _OWORD v51[4];

  v10 = a6;
  v12 = a4;
  if ((_DWORD)a4 != 1)
    goto LABEL_27;
  v16 = *(_WORD *)(a3 + 80) & 0x7F;
  v17 = -40;
  if (v16 > 0x46)
  {
    if (v16 != 83)
    {
      if (v16 == 71)
      {
        v17 = -56;
        goto LABEL_18;
      }
      if (v16 == 81)
        goto LABEL_18;
      goto LABEL_13;
    }
  }
  else
  {
    if (v16 > 0x18)
      goto LABEL_12;
    if (v16 != 16)
    {
      if (((1 << v16) & 0x1066) != 0)
        goto LABEL_18;
      if (v16 != 24)
      {
LABEL_12:
        if (v16 == 70)
        {
          v17 = -64;
          goto LABEL_18;
        }
LABEL_13:
        v18 = v16 - 52;
        v19 = v16 - 33 >= 5;
        v20 = -48;
        if (!v19)
          v20 = -64;
        if (v18 >= 6)
          v17 = v20;
        else
          v17 = -72;
        goto LABEL_18;
      }
    }
    v17 = -48;
  }
LABEL_18:
  v22 = *(_QWORD *)(a3 + 72 + v17 + 16);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  if ((v22 & 4) != 0)
    v23 = (_QWORD *)*v23;
  if (v23)
    v24 = v23 - 8;
  else
    v24 = 0;
  sub_22E3CD31C((uint64_t *)(v24[13] + 96), v24[13]);
  if (*(_DWORD *)(v24[16] + 20))
    v12 = 1;
  else
    v12 = 2;
  v10 = a6;
LABEL_27:
  sub_22E46A4BC(a1[1], a3 & 0xFFFFFFFFFFFFFFF8 | v12, 0, 0, 0, 0, 0);
  v48[0] = v25;
  v48[1] = 0;
  v48[2] = a3 & 0xFFFFFFFFFFFFFFF8 | v12;
  v48[3] = 0;
  v49 = 0;
  v50 = 0;
  v26 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 32))(a3);
  if ((*(_BYTE *)(v26 + 82) & 0xC) != 0 || sub_22EFD7260(v26))
  {
    v28 = a7[1];
    v47[0] = *a7;
    v47[1] = v28;
    v47[2] = a7[2];
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, _QWORD *, unint64_t, _QWORD, _OWORD *, _QWORD))(*a1 + 424))(v45, a1, a2, a3 & 0xFFFFFFFFFFFFFFF8 | v12, 0, v47, 0);
    v29 = v45[1];
    *a7 = v45[0];
    a7[1] = v29;
    a7[2] = v46;
  }
  v30 = a5;
  if ((_DWORD)a5 && (*(_DWORD *)(a2[200] + 28) & 0x7F) == 0x37)
  {
    v44 = a8;
    v31 = (llvm::Constant **)a2[728];
    *(_QWORD *)&v45[0] = "is_complete_object";
    v43 = v10;
    LOWORD(v46) = 259;
    NullValue = llvm::Constant::getNullValue(*v31, v27);
    v42 = sub_22E3C18F4((uint64_t)(a2 + 34), 33, (uint64_t *)v31, NullValue, (uint64_t)v45);
    *(_QWORD *)&v45[0] = "Dtor.dtor_vbases";
    LOWORD(v46) = 259;
    v33 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v45[0] = "Dtor.skip_vbases";
    LOWORD(v46) = 259;
    v34 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v35 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v35, v33, v34, v42, 0);
    LOWORD(v46) = 257;
    v36 = v35;
    v10 = v43;
    sub_22E3C12C8(a2 + 34, v36, (uint64_t)v45);
    v37 = (_QWORD *)v33;
    a8 = v44;
    sub_22E5ED9B4(a2, v37, 0);
  }
  else
  {
    v34 = 0;
  }
  v38 = (*(uint64_t (**)(uint64_t *, _QWORD *, unint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 464))(a1, a2, a3, v12, v30, v10);
  v39 = a7[1];
  v51[0] = *a7;
  v51[1] = v39;
  v51[2] = a7[2];
  sub_22E5E0440((uint64_t)a2, (uint64_t)v51, a8, v45);
  result = sub_22F261904((uint64_t)a2, a3 & 0xFFFFFFFFFFFFFFF8 | v12, 0, (uint64_t)v48, *(uint64_t *)&v45[0], a8, v38, 0, v45, 0);
  if (v34)
  {
    v41 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    LOWORD(v46) = 257;
    sub_22E3C12C8(a2 + 34, v41, (uint64_t)v45);
    return sub_22E5ED9B4(a2, v34, 0);
  }
  return result;
}

void sub_22E68E5A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::GlobalValue *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  llvm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  llvm::Constant *v38;
  uint64_t v39;
  llvm::Type *v40;
  llvm::Constant *v41;
  llvm::Constant *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  llvm *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  _OWORD v75[2];
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 712);
  *(_QWORD *)v77 = a3;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  v6 = (uint64_t **)sub_22F40DF2C(v5 + 72, (uint64_t *)v77)[1];
  v7 = *((unsigned int *)v6 + 2);
  if ((_DWORD)v7)
  {
    v8 = *v6;
    v9 = (uint64_t)&(*v6)[v7];
    v10 = &v78;
    v64 = v5 + 96;
    v65 = v5;
    do
    {
      v11 = (llvm::GlobalValue *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 520))(a1, a3, *(_QWORD *)(*v8 + 104));
      if (llvm::GlobalValue::isDeclaration(v11))
      {
        v12 = *(_QWORD *)(*v8 + 104);
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
        *(_QWORD *)v77 = a3;
        *(_QWORD *)&v77[8] = v12;
        v13 = (_QWORD *)sub_22F40E11C(v64, (uint64_t *)v77)[2];
        v14 = v13[3];
        if (v14)
        {
          v15 = (_QWORD *)v13[2];
          v16 = 8 * v14;
          while ((*v15 & 7) != 3)
          {
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_10;
          }
          v62 = v10;
          v21 = *v8;
          v22 = *(llvm **)(a1 + 8);
          v23 = *((_QWORD *)v22 + 18);
          v67 = v22;
          v68 = v23;
          v58 = v23;
          v61 = (uint64_t)v22;
          v24 = *((_QWORD *)v22 + 25);
          v69 = *((_QWORD *)v22 + 29);
          v70 = v24;
          v71 = a3;
          v25 = *(_QWORD *)(a3 + 48);
          if (v25)
            v26 = v25 & 0xFFFFFFFFFFFFFFF0;
          else
            v26 = sub_22EF6462C(v58, a3);
          v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
          sub_22F114870(v27);
          if ((*(_DWORD *)(v27 + 16) & 0x1C000u) >= 0xC000)
            v28 = 3;
          else
            v28 = 7;
          v72 = v28;
          v73 = a1;
          *(_QWORD *)v77 = v62;
          *(_OWORD *)&v77[8] = xmmword_22F44E320;
          sub_22F242C48((uint64_t)&v74, (uint64_t)v77);
          (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, __int128 *))(**(_QWORD **)(a1 + 16) + 320))(*(_QWORD *)(a1 + 16), a3, *(_QWORD *)(v21 + 24), *(unsigned int *)(v21 + 32), &v74);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v74);
          if (!llvm::Module::getGlobalVariable())
          {
            if (*(_DWORD *)(v21 + 64))
            {
              v29 = **(_QWORD **)(v21 + 56);
              if (v29)
              {
                v30 = sub_22F0C975C(v58, a3);
                sub_22E5E4648(*(_QWORD *)(v30 + 72) + 88, v29);
              }
            }
            if (!*(_QWORD *)(a1 + 272))
            {
              *(_QWORD *)(a1 + 272) = llvm::StructType::create();
              v75[1] = 0uLL;
              v31 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v74 = *(_QWORD *)(v31 + 72);
              *((_QWORD *)&v74 + 1) = v74;
              v75[0] = (unint64_t)v74;
              v32 = 96;
              if (*(_BYTE *)(*(_QWORD *)(v31 + 216) + *(_QWORD *)(**(_QWORD **)(v31 + 216) - 24)) == 64)
                v32 = 72;
              *((_QWORD *)&v75[0] + 1) = *(_QWORD *)(v31 + v32);
              sub_22E696C08(a1);
              v33 = llvm::PointerType::get();
              v34 = *(_QWORD *)(a1 + 8);
              v35 = *(_QWORD **)(v34 + 216);
              v36 = *v35;
              if (*((_BYTE *)v35 + *(_QWORD *)(*v35 - 24)) == 64)
                v33 = *(_QWORD *)(v34 + 72);
              *(_QWORD *)&v75[1] = v33;
              v37 = (_QWORD *)(v34 + 72);
              if (*((_BYTE *)v35 + *(_QWORD *)(v36 - 24)) != 64)
                v37 = (_QWORD *)(a1 + 272);
              *((_QWORD *)&v75[1] + 1) = *v37;
              llvm::StructType::setBody();
            }
            v38 = (llvm::Constant *)llvm::User::operator new((llvm::User *)0x58);
            LOWORD(v75[1]) = 261;
            v74 = *(_OWORD *)v77;
            llvm::GlobalVariable::GlobalVariable();
            memset(v75, 0, sizeof(v75));
            v74 = 0u;
            *(_QWORD *)&v74 = llvm::ConstantInt::get();
            *((_QWORD *)&v74 + 1) = llvm::ConstantInt::get();
            *(_QWORD *)&v75[0] = llvm::ConstantInt::get();
            v39 = *(_QWORD *)(a3 + 48);
            if (v39)
              v40 = (llvm::Type *)(v39 & 0xFFFFFFFFFFFFFFF0);
            else
              v40 = (llvm::Type *)sub_22EF6462C(v58, a3);
            v41 = (llvm::Constant *)sub_22F29C578(v61, v40, 0);
            *((_QWORD *)&v75[0] + 1) = sub_22E693DD4(a1, v41);
            v42 = sub_22E696358((uint64_t *)&v67);
            *(_QWORD *)&v75[1] = sub_22E693DD4(a1, v42);
            *((_QWORD *)&v75[1] + 1) = sub_22E693DD4(a1, v38);
            llvm::ConstantStruct::get();
            llvm::GlobalVariable::setInitializer();
            if ((*((_DWORD *)v38 + 8) & 0xFu) <= 0xA && ((1 << (*((_DWORD *)v38 + 8) & 0xF)) & 0x63C) != 0)
            {
              llvm::Value::getName(v38);
              llvm::Module::getOrInsertComdat();
              llvm::GlobalObject::setComdat();
            }
          }
          v10 = v62;
          if (*(uint64_t **)v77 != v62)
            free(*(void **)v77);
        }
LABEL_10:
        *(_QWORD *)v77 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v77[8] = v10;
        *(_QWORD *)&v77[16] = 0x1000000000;
        memset(v79, 0, 24);
        *((_QWORD *)&v75[1] + 1) = 0;
        v76 = 0;
        *(_QWORD *)&v74 = v77;
        memset(v75, 0, 19);
        *((_QWORD *)&v74 + 1) = 0;
        v79[24] = 1;
        sub_22E60F844(a2, (uint64_t)&v74, v13);
        v17 = v74;
        sub_22E670C54((uint64_t *)&v74, v76);
        sub_22F29F5C8(v17);
        v18 = *(_QWORD *)(a1 + 8);
        v19 = *(_QWORD *)(v18 + 184);
        v20 = v10;
        if ((*(_BYTE *)(v19 + 29) & 4) != 0)
        {
          v63 = v10;
          v43 = *v8;
          if ((*(_WORD *)(v19 + 64) & 0x200) != 0)
          {
            v67 = 0;
            v68 = 0;
            LODWORD(v69) = 0;
            if (sub_22E6102F0(v18, a3, (uint64_t)&v67))
              llvm::GlobalObject::setVCallVisibilityMetadata();
            llvm::deallocate_buffer(v67, (void *)(8 * v69));
            v18 = *(_QWORD *)(a1 + 8);
          }
          v44 = *(_QWORD **)(v18 + 144);
          if ((*(_QWORD *)(v44[250] + 8) & 0x10000000000000) != 0)
          {
            v46 = *(unsigned __int8 *)(v44[1886] + *(_QWORD *)(*(_QWORD *)v44[1886] - 24));
            v47 = sub_22EF5CDF0(*(_QWORD *)(v18 + 144), *(_QWORD *)(v44[2051] & 0xFFFFFFFFFFFFFFF0));
            v18 = *(_QWORD *)(a1 + 8);
            v45 = v46 / v47;
          }
          else
          {
            v45 = 0;
          }
          v48 = *(unsigned int *)(v43 + 88);
          if ((_DWORD)v48)
          {
            v60 = v45;
            sub_22F29C684(v18, (uint64_t)v11, v45, *(_QWORD *)(*(_QWORD *)(v43 + 80) + 8 * v48 - 8));
            v49 = *(_DWORD *)(v43 + 88);
            v50 = (v49 - 1);
            if (v49 == 1)
            {
LABEL_55:
              v20 = v63;
              if (!*(_QWORD *)(v43 + 104))
                sub_22F29C684(*(_QWORD *)(a1 + 8), (uint64_t)v11, v60, a3);
            }
            else
            {
              v51 = v49 - 2;
              v59 = v43;
              while (1)
              {
                v52 = *(_QWORD *)(v43 + 80);
                v53 = *(_QWORD *)(v52 + 8 * v51);
                v54 = *(_QWORD *)(v52 + 8 * v50);
                v55 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v53);
                v56 = sub_22E5E4648(*(_QWORD *)(v55 + 72) + 88, v54);
                v57 = *(_QWORD *)(*(_QWORD *)(v55 + 72) + 88)
                    + 24 * *(unsigned int *)(*(_QWORD *)(v55 + 72) + 104) == v56
                    ? sub_22E46A3EC(v55, v54)
                    : *(_QWORD *)(v56 + 8);
                v20 = v63;
                if (v57)
                  break;
                sub_22F29C684(*(_QWORD *)(a1 + 8), (uint64_t)v11, v60, v53);
                --v51;
                --v50;
                v43 = v59;
                if (!(_DWORD)v50)
                  goto LABEL_55;
              }
            }
          }
          else
          {
            sub_22F29C684(v18, (uint64_t)v11, v45, a3);
            v20 = v10;
          }
        }
        *(_QWORD *)&v74 = v79;
        sub_22E3CEB30((void ***)&v74);
        v10 = v20;
        if (*(uint64_t **)&v77[8] != v20)
          free(*(void **)&v77[8]);
        v5 = v65;
      }
      ++v8;
    }
    while (v8 != (uint64_t *)v9);
  }
}

BOOL sub_22E68ED78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 + 16) != 0;
}

uint64_t sub_22E68ED88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a2);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)v3 + 8 * v5;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    while (*(_WORD *)(*(_QWORD *)v4 + 32) != 203)
    {
      v4 += 8;
      v7 -= 8;
      if (!v7)
      {
        v4 = v6;
        return v4 == v6;
      }
    }
  }
  return v4 == v6;
}

uint64_t sub_22E68EDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8[2];

  v6 = a1 + 24;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 520))(a1, a4);
  v8[0] = a4;
  v8[1] = a3;
  return sub_22F2A2480(v6, v8)[2];
}

uint64_t sub_22E68EE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 504))(a1, a4, a5, a3);
}

llvm::GlobalAlias *sub_22E68EE5C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v6;
  llvm::GlobalAlias *AliaseeObject;
  uint64_t v9;
  uint64_t **v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t GlobalVariable;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t inserted;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int128 v47;
  unsigned __int128 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  _QWORD v56[34];

  v56[32] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v47 = a2;
  *((_QWORD *)&v47 + 1) = a3;
  v48 = v47;
  v49 = 0;
  sub_22F2A2778((uint64_t)&v54, a1 + 48, (uint64_t *)&v48, &v49);
  v6 = v54;
  if (!BYTE8(v55))
    return (llvm::GlobalAlias *)*((_QWORD *)v54 + 2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 712);
  v54 = a2;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, a2);
  v10 = (uint64_t **)sub_22F40DF2C(v9 + 72, (uint64_t *)&v54)[1];
  sub_22E3BA850(a1 + 72, a2);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 8);
    v13 = (_QWORD *)v12[172];
    v14 = v12[173];
    if ((unint64_t)v13 >= v14)
    {
      v46 = v9;
      v16 = (_QWORD *)v12[171];
      v17 = v13 - v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_22E3B3F8C();
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = a2;
      v15 = v22 + 8;
      if (v13 == v16)
      {
        v9 = v46;
      }
      else
      {
        v9 = v46;
        do
        {
          v24 = *--v13;
          *((_QWORD *)v22 - 1) = v24;
          v22 -= 8;
        }
        while (v13 != v16);
        v13 = (_QWORD *)v12[171];
      }
      v12[171] = v22;
      v12[172] = v15;
      v12[173] = v23;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = a2;
      v15 = v13 + 1;
    }
    v12[172] = v15;
  }
  v25 = *((unsigned int *)v10 + 2);
  if (!(_DWORD)v25)
  {
LABEL_29:
    AliaseeObject = 0;
    sub_22F2A2480(a1 + 24, (uint64_t *)&v47)[2] = 0;
    return AliaseeObject;
  }
  v26 = *v10;
  v27 = 8 * v25;
  while (*(_QWORD *)(*v26 + 104) != a3)
  {
    ++v26;
    v27 -= 8;
    if (!v27)
      goto LABEL_29;
  }
  v28 = v9;
  v54 = v56;
  v55 = xmmword_22F44E320;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *v26;
  sub_22F242C48((uint64_t)&v48, (uint64_t)&v54);
  (*(void (**)(uint64_t, _BYTE *, _QWORD, _QWORD, unsigned __int128 *))(*(_QWORD *)v29 + 232))(v29, a2, *(_QWORD *)(v30 + 24), *(unsigned int *)(v30 + 32), &v48);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v48);
  if (sub_22E49F808((uint64_t)a2))
  {
    v31 = 3;
  }
  else
  {
    v31 = sub_22F296010(*(_QWORD *)(a1 + 8), (uint64_t)a2);
    if (v31 <= 1)
    {
      LODWORD(v32) = 0;
      goto LABEL_35;
    }
  }
  v32 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2000) + 8) >> 52) & 1;
LABEL_35:
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v34 = *(_QWORD *)(*v26 + 104);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v28 + 16))(v28, a2);
    *(_QWORD *)&v48 = a2;
    *((_QWORD *)&v48 + 1) = v34;
    v35 = (_QWORD *)sub_22F40E11C(v28 + 96, (uint64_t *)&v48)[2];
    if ((_DWORD)v32)
      v36 = 0;
    else
      v36 = v55;
    if ((_DWORD)v32)
      v37 = 0;
    else
      v37 = v54;
    sub_22E60F6A0((uint64_t *)(*(_QWORD *)(a1 + 8) + 704), v35);
    llvm::User::operator new((llvm::User *)0x58);
    v50 = 261;
    *(_QWORD *)&v48 = v37;
    *((_QWORD *)&v48 + 1) = v36;
    v38 = llvm::GlobalVariable::GlobalVariable();
    v6[2] = v38;
    *(_DWORD *)(v38 + 32) = *(_DWORD *)(v38 + 32) & 0xFFFFFF3F | 0x80;
    if (v31 > 0xA)
      goto LABEL_56;
    if (((1 << v31) & 0x63C) != 0)
      goto LABEL_44;
    inserted = 0;
    if (((1 << v31) & 3) != 0)
    {
      if ((_DWORD)v32)
        goto LABEL_51;
    }
    else
    {
LABEL_56:
      if (v31 - 7 < 2)
        v41 = v32;
      else
        v41 = 0;
      if (v41 == 1)
      {
LABEL_44:
        inserted = llvm::Module::getOrInsertComdat();
        if (!(_DWORD)v32)
          goto LABEL_61;
LABEL_51:
        v51 = llvm::ConstantInt::get();
        v52 = llvm::ConstantInt::get();
        v53 = llvm::ConstantInt::get();
        llvm::ConstantExpr::getGetElementPtr();
        if (v31 <= 0xA && ((1 << v31) & 0x63C) != 0 && inserted)
          *(_DWORD *)(inserted + 8) = 2;
        v50 = 261;
        v48 = __PAIR128__(v55, (unint64_t)v54);
        v40 = llvm::GlobalAlias::create();
        *(_DWORD *)(v40 + 32) = *(_DWORD *)(v40 + 32) & 0xFFFFFF3F | 0x80;
        goto LABEL_62;
      }
      inserted = 0;
      if ((_DWORD)v32)
        goto LABEL_51;
    }
LABEL_61:
    v40 = v6[2];
LABEL_62:
    if (inserted)
      llvm::GlobalObject::setComdat();
    if ((a2[29] & 1) != 0)
    {
      sub_22EFC8E88((uint64_t)a2);
      v43 = *((unsigned int *)v42 + 2);
      if ((_DWORD)v43)
      {
        v44 = 8 * v43;
        v45 = *v42;
        while (*(_WORD *)(*(_QWORD *)v45 + 32) != 155)
        {
          v45 += 8;
          v44 -= 8;
          if (!v44)
            goto LABEL_65;
        }
      }
      else
      {
        v45 = *v42;
      }
      if (v45 != *v42 + 8 * v43)
        *(_DWORD *)(v40 + 32) = *(_DWORD *)(v40 + 32) & 0xFFFFFCFF | 0x200;
    }
LABEL_65:
    sub_22F2A2480(a1 + 24, (uint64_t *)&v47)[2] = v40;
    AliaseeObject = (llvm::GlobalAlias *)v6[2];
    goto LABEL_66;
  }
  AliaseeObject = (llvm::GlobalAlias *)GlobalVariable;
  sub_22F2A2480(a1 + 24, (uint64_t *)&v47)[2] = GlobalVariable;
  if ((_DWORD)v32)
    AliaseeObject = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(AliaseeObject);
  v6[2] = AliaseeObject;
LABEL_66:
  if (v54 != v56)
    free(v54);
  return AliaseeObject;
}

uint64_t sub_22E68F408@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, int a6@<W6>, uint64_t a7@<X8>)
{
  llvm::LLVMContext *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  llvm::Type *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t **v50;
  uint64_t result;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v65[4];
  __int16 v66;
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];
  _OWORD v72[3];
  _OWORD v73[4];

  v13 = (llvm::LLVMContext *)llvm::PointerType::get();
  v14 = a5[1];
  v72[0] = *a5;
  v15 = a5[2];
  v72[1] = v14;
  v72[2] = v15;
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(*a1 + 424))(v73, a1, a2, a3, a4, v72, 1);
  v16 = a3 & 0xFFFFFFFFFFFFFFF8;
  v71[0] = v73[0];
  v71[1] = v73[1];
  v71[2] = v73[2];
  v17 = (llvm::Type *)llvm::PointerType::get();
  v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 72;
  v19 = *(_WORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 80) & 0x7F;
  v20 = -40;
  if (v19 > 0x46)
  {
    if (v19 == 83)
      goto LABEL_17;
    if (v19 == 71)
    {
      v20 = -56;
      goto LABEL_17;
    }
    if (v19 != 81)
    {
LABEL_12:
      v21 = v19 - 52;
      v22 = v19 - 33 >= 5;
      v23 = -48;
      if (!v22)
        v23 = -64;
      if (v21 >= 6)
        v20 = v23;
      else
        v20 = -72;
    }
  }
  else
  {
    if (v19 > 0x18)
      goto LABEL_11;
    if (v19 == 16)
    {
LABEL_4:
      v20 = -48;
      goto LABEL_17;
    }
    if (((1 << v19) & 0x1066) == 0)
    {
      if (v19 == 24)
        goto LABEL_4;
LABEL_11:
      if (v19 == 70)
      {
        v20 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v24 = *(_QWORD *)(v18 + v20 + 16);
  v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (_QWORD *)*v25;
  if (v25)
    v26 = (unint64_t)(v25 - 8);
  else
    v26 = 0;
  v27 = sub_22E484FA4((_QWORD *)a2, (uint64_t)v71, v17, v26, 0);
  v28 = *(_QWORD *)(a1[1] + 712);
  sub_22F40C3DC(v28, a3, a4, (uint64_t)v67);
  v29 = *(_WORD *)(v16 + 80) & 0x7F;
  v30 = -40;
  if (v29 > 0x46)
  {
    if (v29 == 83)
      goto LABEL_38;
    if (v29 == 71)
    {
      v30 = -56;
      goto LABEL_38;
    }
    if (v29 != 81)
    {
LABEL_33:
      v31 = v29 - 52;
      v22 = v29 - 33 >= 5;
      v32 = -48;
      if (!v22)
        v32 = -64;
      if (v31 >= 6)
        v30 = v32;
      else
        v30 = -72;
    }
  }
  else
  {
    if (v29 > 0x18)
      goto LABEL_32;
    if (v29 == 16)
    {
LABEL_25:
      v30 = -48;
      goto LABEL_38;
    }
    if (((1 << v29) & 0x1066) == 0)
    {
      if (v29 == 24)
        goto LABEL_25;
LABEL_32:
      if (v29 == 70)
      {
        v30 = -64;
        goto LABEL_38;
      }
      goto LABEL_33;
    }
  }
LABEL_38:
  v33 = *(_QWORD *)(v18 + v30 + 16);
  v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
  if ((v33 & 4) != 0)
    v34 = (_QWORD *)*v34;
  if (v34)
    v35 = (unint64_t)(v34 - 8);
  else
    v35 = 0;
  if (!sub_22E486044(a2, v35))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1[1] + 184) + 29) & 1) == 0)
    {
LABEL_102:
      v65[0] = (uint64_t)"vfn";
      v66 = 259;
      v62 = sub_22F24CE30(a2 + 272, v13, v27, v70, (uint64_t)v65);
      v63 = (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100;
      v66 = 257;
      result = sub_22E3C3200((uint64_t *)(a2 + 272), v13, v62, v63, 0, (uint64_t)v65);
      goto LABEL_103;
    }
    v39 = v68;
    if (v68)
    {
LABEL_95:
      v65[0] = v39;
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
      v56 = sub_22F40DF2C(v28 + 72, v65)[1];
      v57 = *(uint64_t ***)v56;
      v58 = *(unsigned int *)(v56 + 8);
      if ((_DWORD)v58)
      {
        v60 = 8 * v58;
        v61 = &v57[v58];
        v59 = a6;
        while ((*v57)[13] != v69)
        {
          ++v57;
          v60 -= 8;
          if (!v60)
          {
            v57 = v61;
            break;
          }
        }
      }
      else
      {
        v59 = a6;
      }
      sub_22F25177C((_QWORD *)a2, **v57, (uint64_t)v27, v59);
      goto LABEL_102;
    }
    v40 = *(_WORD *)(v16 + 80) & 0x7F;
    v41 = -40;
    if (v40 > 0x46)
    {
      if (v40 != 83)
      {
        if (v40 == 71)
        {
          v41 = -56;
          goto LABEL_90;
        }
        if (v40 == 81)
          goto LABEL_90;
LABEL_85:
        v52 = v40 - 52;
        v22 = v40 - 33 >= 5;
        v53 = -48;
        if (!v22)
          v53 = -64;
        if (v52 >= 6)
          v41 = v53;
        else
          v41 = -72;
      }
    }
    else
    {
      if (v40 > 0x18)
        goto LABEL_84;
      if (v40 != 16)
      {
        if (((1 << v40) & 0x1066) != 0)
          goto LABEL_90;
        if (v40 != 24)
        {
LABEL_84:
          if (v40 == 70)
          {
            v41 = -64;
            goto LABEL_90;
          }
          goto LABEL_85;
        }
      }
      v41 = -48;
    }
LABEL_90:
    v54 = *(_QWORD *)(v18 + v41 + 16);
    v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
    if ((v54 & 4) != 0)
      v55 = (_QWORD *)*v55;
    if (v55)
      v39 = (uint64_t)(v55 - 8);
    else
      v39 = 0;
    goto LABEL_95;
  }
  v36 = v68;
  if (!v68)
  {
    v37 = *(_WORD *)(v16 + 80) & 0x7F;
    v38 = -40;
    if (v37 > 0x46)
    {
      if (v37 != 83)
      {
        if (v37 == 71)
        {
          v38 = -56;
          goto LABEL_71;
        }
        if (v37 == 81)
          goto LABEL_71;
        goto LABEL_66;
      }
    }
    else
    {
      if (v37 > 0x18)
        goto LABEL_65;
      if (v37 != 16)
      {
        if (((1 << v37) & 0x1066) != 0)
          goto LABEL_71;
        if (v37 != 24)
        {
LABEL_65:
          if (v37 == 70)
          {
            v38 = -64;
            goto LABEL_71;
          }
LABEL_66:
          v42 = v37 - 52;
          v22 = v37 - 33 >= 5;
          v43 = -48;
          if (!v22)
            v43 = -64;
          if (v42 >= 6)
            v38 = v43;
          else
            v38 = -72;
          goto LABEL_71;
        }
      }
      v38 = -48;
    }
LABEL_71:
    v44 = *(_QWORD *)(v18 + v38 + 16);
    v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
    if ((v44 & 4) != 0)
      v45 = (_QWORD *)*v45;
    if (v45)
      v36 = (uint64_t)(v45 - 8);
    else
      v36 = 0;
  }
  v65[0] = v36;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  v46 = sub_22F40DF2C(v28 + 72, v65)[1];
  v47 = *(unint64_t ***)v46;
  v48 = *(unsigned int *)(v46 + 8);
  if ((_DWORD)v48)
  {
    v49 = 8 * v48;
    v50 = &v47[v48];
    while ((*v47)[13] != v69)
    {
      ++v47;
      v49 -= 8;
      if (!v49)
      {
        v47 = v50;
        break;
      }
    }
  }
  result = sub_22E48612C(a2, **v47, (uint64_t)v27, (uint64_t)v13);
LABEL_103:
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 40) = 0;
  return result;
}

uint64_t sub_22E68F9DC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  char v6;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  llvm::LLVMContext *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v26[3];
  _OWORD v27[3];
  _QWORD v28[3];
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v6 = a6;
  v10 = a6 & 0xFFFFFFFFFFFFFFF8;
  v11 = (unsigned __int8 *)(a6 & 0xFFFFFFFFFFFFFFF8 & (a6 << 61 >> 63));
  v12 = a3 & 0xFFFFFFFFFFFFFFF8;
  v13 = sub_22E46C584((_QWORD **)(a1[1] + 280), a3 & 0xFFFFFFFFFFFFFFF8, 0);
  v14 = sub_22E46F2EC(a2[18] + 280, v13);
  v15 = a5[1];
  v30 = *a5;
  v31 = v15;
  v32 = a5[2];
  v28[0] = 3;
  v28[1] = v11;
  v28[2] = v12;
  v29 = 0;
  v33 = v14;
  v16 = *(_QWORD *)(a1[1] + 144);
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2[18] + 232), v17);
  v18 = llvm::ConstantInt::get();
  if (v11)
  {
    v20 = sub_22F3C585C((uint64_t)v11);
  }
  else
  {
    if ((v6 & 4) != 0)
      v19 = 0;
    else
      v19 = v10;
    v20 = sub_22F0602E8(v19);
  }
  v21 = v20;
  v22 = a5[1];
  v27[0] = *a5;
  v27[1] = v22;
  v27[2] = a5[2];
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, _QWORD *, unint64_t, _QWORD, _OWORD *, uint64_t))(*a1 + 424))(v26, a1, a2, v12, 0, v27, 1);
  v23 = v26[1];
  *a5 = v26[0];
  a5[1] = v23;
  a5[2] = v26[2];
  if ((*((_BYTE *)a5 + 24) & 3) != 0)
    v24 = sub_22F28ABCC(a5, a2);
  else
    v24 = *(_QWORD *)a5;
  sub_22F261904((uint64_t)a2, v12, 0, (uint64_t)v28, v24, v21, v18, *(_QWORD *)(v16 + 16480), v26, v11);
  return *(_QWORD *)&v26[0];
}

__n128 sub_22E68FB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  _QWORD v16[6];
  char v17;
  __int16 v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480);
  v16[0] = *(_QWORD *)(a2 + 5824);
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = v6;
  v7 = sub_22E3C187C(a5, (unint64_t)v16, 1);
  v8 = *(_QWORD *)a5 + 152 * *(unsigned int *)(a5 + 8);
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_QWORD *)(v7 + 144);
  v11 = *(_OWORD *)(v7 + 128);
  v12 = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(v7 + 112);
  *(_OWORD *)(v8 + 128) = v11;
  *(_QWORD *)(v8 + 144) = v10;
  *(_OWORD *)(v8 + 96) = v12;
  result = *(__n128 *)(v7 + 80);
  v14 = *(_OWORD *)(v7 + 32);
  v15 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v7 + 64);
  *(__n128 *)(v8 + 80) = result;
  *(_OWORD *)(v8 + 32) = v14;
  *(_OWORD *)(v8 + 48) = v15;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

void sub_22E68FC10(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::GlobalValue *v10;

  v4 = sub_22E695B1C(a1, a2);
  v5 = *(unsigned int *)(*(_QWORD *)v4 + 8);
  if ((_DWORD)v5)
  {
    v6 = v4;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      v9 = **(_QWORD **)v6;
      v10 = *(llvm::GlobalValue **)(*(_QWORD *)(v6 + 8) + v7);
      if (llvm::GlobalValue::isDeclaration(v10))
        sub_22E6960E8(a1, *(_QWORD *)(v9 + v7), (unint64_t)a2, v10);
      v7 += 8;
    }
    while (v8 != v7);
  }
}

uint64_t sub_22E68FC9C()
{
  return 0;
}

uint64_t sub_22E68FCA4(uint64_t a1, llvm::GlobalValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  result = sub_22EF72FFC(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 144), a4 & 0xFFFFFFFFFFFFFFF8);
  v9 = *((_DWORD *)a2 + 8);
  if (!(_DWORD)result)
  {
    v13 = v9 & 0xFFFFBFC0 | 0x4007;
LABEL_9:
    *((_DWORD *)a2 + 8) = v13;
    return result;
  }
  v10 = v9 & 0xFFFFFFF0;
  v11 = *((_DWORD *)a2 + 8) & 0x30;
  if (a6)
    v12 = v10 | 5;
  else
    v12 = v10 | 3;
  *((_DWORD *)a2 + 8) = v12;
  if (v11)
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage(a2);
    if ((result & 1) == 0)
    {
      v13 = *((_DWORD *)a2 + 8) | 0x4000;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_22E68FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  llvm::GetElementPtrInst *v36[4];
  __int16 v37;
  __int128 v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  __int128 v43[3];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a5 || *(_OWORD *)(a5 + 8) != 0)
  {
    v9 = *(_OWORD *)(a3 + 16);
    v43[0] = *(_OWORD *)a3;
    v43[1] = v9;
    v43[2] = *(_OWORD *)(a3 + 32);
    v10 = *(_QWORD *)(a2 + 8);
    LOWORD(v41) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), v43, v10, (uint64_t)&v39, (uint64_t)&v44);
    v11 = v45;
    *(_OWORD *)a3 = v44;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v46;
    if (*(_OWORD *)(a5 + 8) == 0)
    {
      if ((*(_BYTE *)(a3 + 24) & 3) == 0)
      {
        v12 = *(uint64_t **)a3;
        goto LABEL_6;
      }
      v29 = sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
    }
    else
    {
      v16 = *(_OWORD *)(a3 + 16);
      v42[0] = *(_OWORD *)a3;
      v42[1] = v16;
      v42[2] = *(_OWORD *)(a3 + 32);
      v17 = *(int *)(a5 + 8);
      LOWORD(v41) = 257;
      sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v42, v17, (uint64_t)&v39, (uint64_t)&v44);
      v38[0] = v44;
      v38[1] = v45;
      v38[2] = v46;
      v18 = *(_QWORD *)(a2 + 24);
      v37 = 257;
      sub_22E3BEE6C((uint64_t *)(a2 + 272), v38, v18, (uint64_t)v36, (uint64_t)&v39);
      v45 = v40;
      v46 = v41;
      v44 = v39;
      v35[0] = v39;
      v35[1] = v40;
      v35[2] = v41;
      v19 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v35, "vtordisp");
      v20 = *(_QWORD *)(a3 + 8);
      if ((*(_BYTE *)(a3 + 24) & 3) != 0)
        v21 = (uint64_t *)sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
      else
        v21 = *(uint64_t **)a3;
      LOWORD(v41) = 257;
      v22 = (uint64_t *)sub_22E42E798(a2 + 272, v19, (uint64_t)&v39, 0, 0);
      v37 = 257;
      v23 = sub_22E42129C((uint64_t *)(a2 + 272), v20, v21, v22, (uint64_t)v36);
      v12 = (uint64_t *)v23;
      v24 = *(_DWORD *)(a5 + 12);
      if (!v24)
        goto LABEL_6;
      v36[0] = 0;
      v25 = *(_QWORD *)(a2 + 8);
      v26 = *(unsigned __int8 *)(a2 + 130);
      *(_QWORD *)&v30 = v23;
      *((_QWORD *)&v30 + 1) = v25;
      v31 = v26;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v27 = (uint64_t *)sub_22E696E98(a1, a2, &v30, -v24, *(unsigned int *)(a5 + 16), v36);
      v28 = *(_QWORD *)(a2 + 8);
      LOWORD(v41) = 257;
      v29 = (uint64_t)sub_22E3E5044((uint64_t *)(a2 + 272), v28, (uint64_t *)v36[0], v27, (uint64_t)&v39);
    }
    v12 = (uint64_t *)v29;
LABEL_6:
    v13 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
    {
      v14 = *(llvm::LLVMContext **)(a2 + 8);
      LOWORD(v46) = 257;
      return sub_22E4363E4((uint64_t *)(a2 + 272), v14, v12, v13, (uint64_t)&v44);
    }
    return (uint64_t)v12;
  }
  if ((*(_BYTE *)(a3 + 24) & 3) == 0)
    return *(_QWORD *)a3;
  return sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
}

uint64_t sub_22E68FFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  llvm::GetElementPtrInst *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  _OWORD v22[3];
  llvm::GetElementPtrInst *v23[4];
  __int16 v24;
  __int128 v25[3];
  _OWORD v26[2];
  __int128 v27;

  if (*(_OWORD *)a5 == 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 3) != 0)
      return sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
    else
      return *(_QWORD *)a3;
  }
  else
  {
    v10 = llvm::PointerType::get();
    v11 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v11;
    v25[2] = *(_OWORD *)(a3 + 32);
    v12 = *(_QWORD *)(a2 + 8);
    v24 = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), v25, v12, (uint64_t)v23, (uint64_t)v26);
    v13 = v26[1];
    *(_OWORD *)a3 = v26[0];
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v27;
    if ((*(_BYTE *)(a3 + 24) & 3) != 0)
      v14 = (llvm::GetElementPtrInst *)sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
    else
      v14 = *(llvm::GetElementPtrInst **)a3;
    v15 = *(_DWORD *)(a5 + 12);
    if (v15)
    {
      v16 = *(unsigned __int8 *)(a2 + 128);
      v23[0] = 0;
      v17 = *(_OWORD *)(a3 + 16);
      v22[0] = *(_OWORD *)a3;
      v22[1] = v17;
      v22[2] = *(_OWORD *)(a3 + 32);
      v18 = (uint64_t *)sub_22E696E98(a1, a2, v22, *(unsigned int *)(a5 + 8), (v15 * v16), v23);
      v19 = *(_QWORD *)(a2 + 8);
      LOWORD(v27) = 257;
      v14 = sub_22E3E5044((uint64_t *)(a2 + 272), v19, (uint64_t *)v23[0], v18, (uint64_t)v26);
    }
    v20 = *(_QWORD *)a5;
    if (*(_QWORD *)a5)
    {
      v21 = *(llvm::LLVMContext **)(a2 + 8);
      LOWORD(v27) = 257;
      v14 = sub_22E3E51B0((uint64_t *)(a2 + 272), v21, (uint64_t *)v14, v20, (uint64_t)v26);
    }
    LOWORD(v27) = 257;
    return sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v14, v10, (uint64_t)v26);
  }
}

uint64_t sub_22E6901A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *(_WORD *)(a2 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_17;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_17;
    }
    if (v3 != 81)
    {
LABEL_12:
      v5 = v3 - 52;
      v6 = v3 - 33 >= 5;
      v7 = -48;
      if (!v6)
        v7 = -64;
      if (v5 >= 6)
        v4 = v7;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_11;
    if (v3 == 16)
    {
LABEL_4:
      v4 = -48;
      goto LABEL_17;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_4;
LABEL_11:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 72 + v4 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  sub_22E3CD31C((uint64_t *)(v10[13] + 96), v10[13]);
  if (!*(_DWORD *)(v10[16] + 20))
    return 1;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v11 || *(_BYTE *)(v11 + 16) != 26)
    v11 = sub_22F10CF48(v11);
  if ((*(_BYTE *)(v11 + 23) & 8) != 0)
    return 2;
  else
    return 1;
}

void sub_22E6902D0(uint64_t a1@<X0>, _BYTE *a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v25 = sub_22F0C975C(v6, (unint64_t)a2);
  v7 = sub_22E695B1C(a1, a2);
  v8 = *(uint64_t **)v7;
  v9 = *(unsigned int *)(*(_QWORD *)v7 + 8);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *v8;
    v14 = *v8 + 8 * v9;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(v6, *(_QWORD *)(*(_QWORD *)v13 + 8)) + 72) + 32)
          + *(_QWORD *)(*(_QWORD *)v13 + 16);
      if (*(_DWORD *)(*(_QWORD *)v13 + 64))
      {
        v16 = **(_QWORD **)(*(_QWORD *)v13 + 56);
        if (v16)
          v15 += sub_22F2500F4(v25, v16);
      }
      if (v10 >= v11)
      {
        v17 = (v10 - v12) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          abort();
        if ((v11 - v12) >> 2 > v18)
          v18 = (v11 - v12) >> 2;
        if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
        {
          if (v19 >> 61)
            sub_22E3B3F8C();
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v17];
        *(_QWORD *)v21 = v15;
        v22 = v21 + 8;
        while (v10 != v12)
        {
          v23 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v21 - 1) = v23;
          v21 -= 8;
        }
        v11 = &v20[8 * v19];
        *a3 = v21;
        a3[1] = v22;
        a3[2] = v11;
        if (v12)
          operator delete(v12);
        v12 = v21;
        v10 = (char *)v22;
      }
      else
      {
        *(_QWORD *)v10 = v15;
        v10 += 8;
      }
      a3[1] = v10;
      v13 += 8;
    }
    while (v13 != v14);
    v24 = *a3;
  }
  else
  {
    v10 = 0;
    v24 = 0;
  }
  if (v10 - (_BYTE *)v24 >= 16)
    qsort(v24, (unint64_t)(v10 - (_BYTE *)v24) >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_22F2A2818);
}

const char *sub_22E6904B4()
{
  return "_purecall";
}

const char *sub_22E6904C4()
{
  return "_purecall";
}

void *sub_22E6904D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, llvm::Type **a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v15[3];
  _OWORD v16[3];
  _BYTE v17[32];
  __int16 v18;
  __int128 v19[3];
  _OWORD v20[3];

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 664))(a1, a5);
  v11 = a3[1];
  v19[0] = *a3;
  v19[1] = v11;
  v19[2] = a3[2];
  v12 = *(_QWORD *)(a2 + 88);
  v18 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v19, v12, (uint64_t)v17, (uint64_t)v20);
  v16[0] = v20[0];
  v16[1] = v20[1];
  v16[2] = v20[2];
  sub_22E3BEDDC(a2 + 272, a4, (uint64_t)v16);
  v13 = a3[1];
  v15[0] = *a3;
  v15[1] = v13;
  v15[2] = a3[2];
  v18 = 257;
  return sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v15, v10, (uint64_t)v17, a6);
}

int64_t sub_22E6905B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t result;
  int64_t v7[3];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v4 = sub_22EF67C8C(v3);
  sub_22EF5CCD0(v3, *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v7);
  v5 = v7[0];
  result = sub_22EF5D130(v3, a2);
  if (v5 > result)
    return v5;
  return result;
}

uint64_t sub_22E69061C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t *v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[3];
  _BYTE v8[32];
  __int16 v9;
  __int128 v10[3];
  _OWORD v11[3];

  v3 = (uint64_t *)(a2 + 272);
  v4 = a3[1];
  v10[0] = *a3;
  v10[1] = v4;
  v10[2] = a3[2];
  v5 = *(_QWORD *)(a2 + 88);
  v9 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v10, v5, (uint64_t)v8, (uint64_t)v11);
  v7[0] = v11[0];
  v7[1] = v11[1];
  v7[2] = v11[2];
  v9 = 257;
  return sub_22E3C2A7C(v3, (uint64_t)v7, (uint64_t)v8);
}

void sub_22E690694(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  int v9;
  int v10;
  uint64_t v12;
  unint64_t v13;
  int v14;
  llvm::GlobalValue *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  llvm::Type **v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t GlobalVariable;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  llvm::LLVMContext *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t v78;
  llvm::Type *v79;
  uint64_t AllOnesValue;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  llvm::LLVMContext *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::Value *v90;
  uint64_t v91;
  char hasExternalWeakLinkage;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  _QWORD v106[3];
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[3];
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[3];
  int v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[3];
  int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[3];
  int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[4];
  __int16 v127;
  void *v128;
  __int128 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v8 = *(_BYTE *)(a3 + 96);
  v9 = v8 & 7;
  if (v9 != 2)
  {
    v10 = v8 & 0x18;
    if (v9 || v10 != 16)
      goto LABEL_12;
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(a3 + 28) & 0x7F) != 0x3E)
  {
    v12 = *(_QWORD *)(a3 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)(v13 + 8);
    v14 = *(_WORD *)(sub_22EFCBB30(v13) + 8) & 0x7F;
    if (v14 == 16 || v14 == 83)
      goto LABEL_12;
    if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x40)
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v18 = *(_QWORD *)v18;
      if ((*(_WORD *)(v18 + 8) & 0x7Eu) - 34 <= 3)
      {
LABEL_12:
        v15 = (llvm::GlobalValue *)a2[203];
        v16 = *((_DWORD *)v15 + 8);
        *((_DWORD *)v15 + 8) = v16 & 0xFFFFFFF0 | 3;
        if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v15) & 1) == 0)
          *((_DWORD *)v15 + 8) |= 0x4000u;
        llvm::Value::getName(v15);
        llvm::Module::getOrInsertComdat();
        llvm::GlobalObject::setComdat();
        sub_22E4CEC30();
        return;
      }
    }
  }
  sub_22EFBB794(a3);
  v20 = v19;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2000) + 20);
  v23 = (v21 & 0x8000000000) == 0 || v19 != 0;
  v24 = a2[3];
  v101 = llvm::ConstantInt::get();
  if (v20)
  {
    v25 = a1 + 184;
  }
  else
  {
    if ((v21 & 0x8000000000) != 0)
    {
      v98 = 0;
      v28 = 0;
      v29 = 0;
      goto LABEL_35;
    }
    v25 = a1 + 160;
  }
  v26 = *(_QWORD *)(a3 + 16);
  v27 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
  if ((v26 & 4) != 0)
    v27 = (_QWORD *)*v27;
  v128 = v27;
  v28 = sub_22E696F34(v25, (uint64_t *)&v128);
  v29 = *(_QWORD *)v28;
  v98 = 1;
LABEL_35:
  v103 = a2 + 34;
  v95 = (_QWORD *)v28;
  if (sub_22EFB948C(a3) < 3)
  {
    if (!v23)
    {
      v36 = *(_QWORD *)(a3 + 16);
      v37 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF8);
      if ((v36 & 4) != 0)
        v37 = (_QWORD *)*v37;
      v128 = v37;
      v38 = sub_22F29449C(a1 + 208, (uint64_t *)&v128);
      v33 = *((_DWORD *)v38 + 2);
      *((_DWORD *)v38 + 2) = v33 + 1;
      goto LABEL_51;
    }
    v34 = v28;
    v33 = *(_DWORD *)(v28 + 8);
    *(_DWORD *)(v34 + 8) = v33 + 1;
  }
  else
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v128 = (void *)a3;
    v31 = sub_22EF740A4(v30 + 1848, (uint64_t *)&v128);
    if (*(_QWORD *)(v30 + 1880) == v31)
      v32 = 1;
    else
      v32 = *(_DWORD *)(v31 + 8);
    v33 = v32 - 1;
  }
  if (v33 > 0x1F && v23)
  {
    if (sub_22EFB948C(a3) >= 3)
      sub_22E46AD6C(a1, (uint64_t)a2, "more than 32 guarded initializations", 0x24uLL);
    v33 &= 0x1Fu;
    goto LABEL_52;
  }
LABEL_51:
  if (!v29)
  {
LABEL_52:
    v128 = &v130;
    v129 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v126, (uint64_t)&v128);
    v39 = **(_QWORD **)(a1 + 16);
    if (v23)
      (*(void (**)(void))(v39 + 144))();
    else
      (*(void (**)(void))(v39 + 248))();
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v126);
    v29 = llvm::User::operator new((llvm::User *)0x58);
    v127 = 261;
    v126[0] = v128;
    v126[1] = v129;
    v40 = llvm::GlobalVariable::GlobalVariable();
    v41 = *(_DWORD *)(a4 + 32) & 0x30;
    v42 = *(_DWORD *)(v40 + 32);
    v43 = v42 & 0xFFFFFFCF | v41;
    *(_DWORD *)(v40 + 32) = v43;
    if ((v42 & 0xFu) - 7 < 2
      || v41
      && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v29),
          v43 = *(_DWORD *)(v29 + 32),
          (hasExternalWeakLinkage & 1) == 0))
    {
      v43 |= 0x4000u;
      *(_DWORD *)(v29 + 32) = v43;
    }
    *(_DWORD *)(v29 + 32) = v43 & 0xFFFFFCFF | (((*(_DWORD *)(a4 + 32) >> 8) & 3) << 8);
    llvm::GlobalObject::setAlignment();
    if ((*(_DWORD *)(v29 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v29 + 32) & 0xF)) & 0x63C) != 0)
    {
      llvm::Value::getName((llvm::Value *)v29);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
    sub_22EFBB794(a3);
    if (v44)
      sub_22E628BA0(*(_QWORD *)(a1 + 8), v29, a3);
    if ((v98 & v23) == 1)
      *v95 = v29;
    if (v128 != &v130)
      free(v128);
  }
  v45 = v29 & 0xFFFFFFFFFFFFFFF8;
  v46 = v24 & 0xFFFFFFFFFFFFFFF8;
  if (v23)
  {
    v47 = llvm::ConstantInt::get();
    v48 = v47;
    if (v45)
      v49 = v46;
    else
      v49 = 0;
    v99 = v49;
    v122[0] = v45;
    v122[1] = v49;
    v94 = v47;
    v96 = 4 * (v45 != 0);
    v122[2] = v96;
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v131 = 257;
    v93 = sub_22E3C2A7C(v103, (uint64_t)v122, (uint64_t)&v128);
    v131 = 257;
    v50 = (uint64_t *)sub_22E3E49C4((uint64_t)v103, v93, v48, (uint64_t)&v128);
    v127 = 257;
    v51 = sub_22E3C18F4((uint64_t)v103, 32, v50, v101, (uint64_t)v126);
    v128 = "init";
    v131 = 259;
    v52 = v45;
    v104 = v33;
    v53 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v128 = "init.end";
    v131 = 259;
    v54 = operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22F25B7D8((uint64_t)a2, v51, (uint64_t)v53, v54, 0, a3);
    sub_22E5ED9B4(a2, v53, 0);
    v131 = 257;
    v55 = (llvm::Type **)sub_22E3E58D4((uint64_t)v103, v93, v94, (uint64_t)&v128);
    v118[0] = v52;
    v118[1] = v99;
    v118[2] = v96;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    sub_22E3BEDDC((uint64_t)v103, v55, (uint64_t)v118);
    v56 = sub_22E4899EC((uint64_t)(a2 + 248), 1u, 64);
    *(_QWORD *)v56 = off_24FA68B00;
    *((_QWORD *)v56 + 1) = v52;
    *((_QWORD *)v56 + 2) = v99;
    *((_QWORD *)v56 + 3) = v96;
    *((_DWORD *)v56 + 8) = 0;
    *((_QWORD *)v56 + 5) = 0;
    *((_QWORD *)v56 + 6) = 0;
    *((_DWORD *)v56 + 14) = v104;
    sub_22E4CEC30();
    sub_22E48A190((uint64_t)a2, 0);
    v57 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v131 = 257;
    sub_22E3C12C8(v103, v57, (uint64_t)&v128);
    v58 = a2;
    v59 = (_QWORD *)v54;
  }
  else
  {
    if (v45)
      v60 = v24 & 0xFFFFFFFFFFFFFFF8;
    else
      v60 = 0;
    v100 = v60;
    v102 = v45;
    v114[0] = v45;
    v114[1] = v60;
    v97 = 4 * (v45 != 0);
    v114[2] = v97;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v131 = 257;
    v61 = sub_22E3C2A7C(v103, (uint64_t)v114, (uint64_t)&v128);
    *(_WORD *)(v61 + 18) = *(_WORD *)(v61 + 18) & 0xFC7F | 0x80;
    v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 128);
    GlobalVariable = llvm::Module::getGlobalVariable();
    if (GlobalVariable)
    {
      v64 = GlobalVariable;
    }
    else
    {
      v64 = llvm::User::operator new((llvm::User *)0x58);
      v131 = 261;
      v128 = "_Init_thread_epoch";
      *(_QWORD *)&v129 = 18;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
    }
    v65 = *(_QWORD *)(v64 + 24);
    if ((_DWORD)v62)
    {
      v64 &= 0xFFFFFFFFFFFFFFF8;
      v65 = v65 & 0xFFFFFFFFFFFFFFF8 | __clz(v62) ^ 0x3F;
    }
    v66 = 0;
    v67 = v64 & 0xFFFFFFFFFFFFFFF8;
    if (v64 <= 7)
      v67 = 0;
    v68 = v65 & 0xFFFFFFFFFFFFFFF8;
    if (v64 <= 7)
      v68 = 0;
    v110[0] = v67;
    v110[1] = v68;
    if (v64 >= 8)
      v66 = 1 << (v65 & 7 | (8 * (v64 & 7)));
    v110[2] = v66;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v131 = 257;
    v69 = sub_22E3C2A7C(v103, (uint64_t)v110, (uint64_t)&v128);
    v131 = 257;
    v70 = sub_22E3C18F4((uint64_t)v103, 38, (uint64_t *)v61, v69, (uint64_t)&v128);
    v128 = "init.attempt";
    v131 = 259;
    v71 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v128 = "init.end";
    v131 = 259;
    v105 = operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22F25B7D8((uint64_t)a2, v70, (uint64_t)v71, v105, 0, a3);
    sub_22E5ED9B4(a2, v71, 0);
    v72 = *(_QWORD *)(a1 + 8);
    llvm::Type::getVoidTy(*(llvm::Type **)(v72 + 232), v73);
    v128 = (void *)llvm::PointerType::get();
    v74 = llvm::FunctionType::get();
    LODWORD(v128) = 37;
    v75 = llvm::AttributeList::get();
    v76 = sub_22E633A04(v72, v74, "_Init_thread_header", 0x13uLL, v75, 1, 0);
    v126[0] = v102;
    v131 = 257;
    sub_22F24EEDC((uint64_t)a2, v76, v77, (uint64_t)v126, 1, (uint64_t)&v128);
    v106[0] = v102;
    v106[1] = v100;
    v106[2] = v97;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v131 = 257;
    v78 = sub_22E3C2A7C(v103, (uint64_t)v106, (uint64_t)&v128);
    *(_WORD *)(v78 + 18) = *(_WORD *)(v78 + 18) & 0xFC7F | 0x80;
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 72), v79);
    v131 = 257;
    v81 = sub_22E3C18F4((uint64_t)v103, 32, (uint64_t *)v78, AllOnesValue, (uint64_t)&v128);
    v128 = "init";
    v131 = 259;
    v82 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v83 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v83, v82, v105, v81, 0);
    v131 = 257;
    sub_22E3C12C8(v103, v83, (uint64_t)&v128);
    sub_22E5ED9B4(a2, v82, 0);
    v84 = sub_22E4899EC((uint64_t)(a2 + 248), 1u, 16);
    *(_QWORD *)v84 = off_24FA68B28;
    *((_QWORD *)v84 + 1) = v102;
    sub_22E4CEC30();
    sub_22E48A190((uint64_t)a2, 0);
    v85 = *(_QWORD *)(a1 + 8);
    llvm::Type::getVoidTy(*(llvm::Type **)(v85 + 232), v86);
    v128 = (void *)llvm::PointerType::get();
    v87 = llvm::FunctionType::get();
    LODWORD(v128) = 37;
    v88 = llvm::AttributeList::get();
    v89 = sub_22E633A04(v85, v87, "_Init_thread_footer", 0x13uLL, v88, 1, 0);
    v126[0] = v102;
    v131 = 257;
    sub_22F24EEDC((uint64_t)a2, v89, v90, (uint64_t)v126, 1, (uint64_t)&v128);
    v91 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v131 = 257;
    sub_22E3C12C8(v103, v91, (uint64_t)&v128);
    v58 = a2;
    v59 = (_QWORD *)v105;
  }
  sub_22E5ED9B4(v58, v59, 0);
}

llvm::Value *sub_22E6912F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *result;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::Value *v12;
  BOOL v13;
  uint64_t v14[4];
  __int16 v15;
  _QWORD *v16;

  result = (llvm::Value *)sub_22EFBE910(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
  if ((result & 1) == 0)
  {
    sub_22EFBB794(a3);
    v7 = v6;
    v8 = (_QWORD *)sub_22E4CF4E8();
    if (v7)
    {
      v14[0] = *v8;
      v9 = llvm::FunctionType::get();
      v11 = sub_22E633A04(*(_QWORD *)(a2 + 144), v9, "__tlregdtor", 0xBuLL, 0, 1, 0);
      v12 = v10;
      if (*((_BYTE *)v10 + 16))
        v13 = 1;
      else
        v13 = v10 == 0;
      if (!v13)
        llvm::Function::addFnAttr();
      v16 = v8;
      v15 = 257;
      return sub_22F24EEDC(a2, v11, v12, (uint64_t)&v16, 1, (uint64_t)v14);
    }
    else
    {
      return sub_22E4CFECC(a2, v8);
    }
  }
  return result;
}

void sub_22E691428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value **v10;
  llvm::Value **v11;
  uint64_t NamedValue;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *Name;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  llvm::Value **v24;
  llvm::Value **v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::Value **v35;
  llvm::Value **v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  __int16 v41;
  uint64_t v42;

  MEMORY[0x24BDAC7A8]();
  v42 = *MEMORY[0x24BDAC8D0];
  if (v4)
  {
    v5 = v3;
    v6 = v2;
    v7 = v1;
    v8 = v0;
    sub_22F299C40(v0);
    if (v5)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v34 = (uint64_t *)(v8 + 1416);
      v35 = 0;
      v37 = v8;
      do
      {
        sub_22E624994(v8, *(_QWORD *)(v6 + 8 * v9), 0);
        NamedValue = llvm::Module::getNamedValue();
        v13 = *(llvm::Value **)(v7 + 8 * v9);
        if (*(_QWORD *)(NamedValue + 48))
        {
          v36 = v10;
          v14 = v7;
          v15 = v5;
          v16 = v6;
          v17 = (const char *)llvm::User::operator new((llvm::User *)0x58);
          Name = (const char *)llvm::Value::getName(v13);
          v41 = 773;
          v38 = Name;
          v39 = v19;
          v40 = "$initializer$";
          v8 = v37;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          v38 = v17;
          sub_22E62C508(v34, (uint64_t *)&v38);
          v6 = v16;
          v5 = v15;
          v7 = v14;
          v10 = v36;
          llvm::GlobalObject::setComdat();
        }
        else if (v11 >= v35)
        {
          v20 = v11 - v10;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            abort();
          if (((char *)v35 - (char *)v10) >> 2 > v21)
            v21 = ((char *)v35 - (char *)v10) >> 2;
          if ((unint64_t)((char *)v35 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 >> 61)
              sub_22E3B3F8C();
            v23 = (char *)operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = (llvm::Value **)&v23[8 * v20];
          *v24 = v13;
          v25 = v24 + 1;
          while (v11 != v10)
          {
            v26 = *--v11;
            *--v24 = v26;
          }
          v35 = (llvm::Value **)&v23[8 * v22];
          if (v10)
            operator delete(v10);
          v11 = v25;
          v10 = v24;
          v8 = v37;
        }
        else
        {
          *v11++ = v13;
        }
        ++v9;
      }
      while (v9 != v5);
      if (v10 != v11)
      {
        v27 = llvm::FunctionType::get();
        v38 = "__tls_init";
        v41 = 259;
        v29 = sub_22E46BBB8((_QWORD **)(v8 + 280), *(_QWORD *)(*(_QWORD *)(v8 + 288) + 16392), 0, 0, 0, 0, 0, v28, 0, 0, -1);
        v30 = sub_22E4CF82C(v8, v27, (uint64_t)&v38, v29, 0, 1, 7);
        sub_22E618EBC((uint64_t)&v38, v8, 0);
        sub_22E4D1298((uint64_t)&v38, v30, v10, v11 - v10, 0, 0);
        sub_22E619434((uint64_t)&v38);
        v31 = (const char *)llvm::User::operator new((llvm::User *)0x58);
        v32 = (const char *)llvm::Value::getName(v30);
        v41 = 773;
        v38 = v32;
        v39 = v33;
        v40 = "$initializer$";
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v38 = v31;
        sub_22E62C508(v34, (uint64_t *)&v38);
      }
      if (v10)
        operator delete(v10);
    }
  }
}

uint64_t sub_22E691810(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 2000) + 192) < 0xB795120u)
    return 0;
  if (sub_22E46B290(a1, a2, 0))
    return sub_22E46B1C8(a1, a2);
  return 1;
}

double sub_22E69187C@<D0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  uint64_t Int8Ty;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::LLVMContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v8 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v46 = "dyntls.continue";
  LOWORD(v49) = 259;
  v9 = operator new();
  llvm::BasicBlock::BasicBlock();
  v10 = *(_QWORD *)(a1 + 144);
  Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(v10 + 232), v11);
  v13 = sub_22F29B660(v10, Int8Ty, (uint64_t)"__tls_guard", 11);
  *((_DWORD *)v13 + 8) = *((_DWORD *)v13 + 8) & 0xFFFFE3FF | 0x400;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v46 = v13;
  *((_QWORD *)&v46 + 1) = v14;
  v47 = 1;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  LOWORD(v45) = 257;
  v15 = (uint64_t *)sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)&v46, (uint64_t)v44);
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v16);
  v17 = llvm::ConstantInt::get();
  LOWORD(v45) = 257;
  v18 = sub_22E3C18F4(a1 + 272, 32, v15, v17, (uint64_t)v44);
  v19 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v19, v8, v9, v18, 0);
  LOWORD(v45) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v19, (uint64_t)v44);
  *(_QWORD *)(a1 + 320) = v8;
  *(_QWORD *)(a1 + 328) = v8 + 40;
  v20 = *(_QWORD *)(a1 + 144);
  llvm::Type::getVoidTy(*(llvm::Type **)(v20 + 232), v21);
  v22 = llvm::FunctionType::get();
  LODWORD(v46) = 37;
  v23 = llvm::AttributeList::get();
  sub_22E633A04(v20, v22, "__dyn_tls_on_demand_init", 0x18uLL, v23, 1, 0);
  v25 = v24;
  if (v24)
    v24 = *(_QWORD *)(v24 + 24);
  LOWORD(v49) = 257;
  v26 = sub_22E462B78((uint64_t *)(a1 + 272), v24, v25, 0, 0, (uint64_t)&v46, 0);
  *((_WORD *)v26 + 9) = (*(_WORD *)(v25 + 18) >> 2) & 0xFFC | *((_WORD *)v26 + 9) & 0xF003;
  v27 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v49) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v27, (uint64_t)&v46);
  *(_QWORD *)(a1 + 320) = v9;
  *(_QWORD *)(a1 + 328) = v9 + 40;
  v28 = sub_22E6315B8(*(_QWORD *)(a1 + 144), a2, 0, 0);
  v29 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(a2 + 48), 0);
  v30 = llvm::PointerType::get();
  LOWORD(v49) = 257;
  v31 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v28, v30, (uint64_t)&v46);
  v32 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2, 0);
  v33 = v32;
  v34 = *(_QWORD *)(a2 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    *(_QWORD *)&v37 = v31;
    *((_QWORD *)&v37 + 1) = v29;
    v38 = v32;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    return sub_22E4E9BF4(a1, &v37, v34, 0, a4);
  }
  else
  {
    sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v42);
    *(_QWORD *)&v46 = v31;
    *((_QWORD *)&v46 + 1) = v29;
    v47 = v33;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v44[0] = v42[0];
    v44[1] = v42[1];
    v45 = v43;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 84) = 2;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_QWORD *)&result = sub_22E3C113C(a4, &v46, a3, 0, v44, v36).n128_u64[0];
  }
  return result;
}

llvm::Value *sub_22E691C70(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  llvm::GlobalValue *v7;
  llvm::Value *result;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v2 = a2;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v4 + 28) & 0x7F) == 0x37)
  {
    v7 = sub_22F24CB90();
    return (llvm::Value *)sub_22E634260(*(_QWORD *)(a1 + 8), v4, v7);
  }
  if ((a2 & 7) == 1)
  {
    v5 = *(_WORD *)(v4 + 80) & 0x7F;
    v6 = -40;
    if (v5 > 0x46)
    {
      if (v5 != 83)
      {
        if (v5 == 71)
        {
          v6 = -56;
          goto LABEL_21;
        }
        if (v5 == 81)
          goto LABEL_21;
LABEL_16:
        v9 = v5 - 52;
        v10 = v5 - 33 >= 5;
        v11 = -48;
        if (!v10)
          v11 = -64;
        if (v9 >= 6)
          v6 = v11;
        else
          v6 = -72;
      }
    }
    else
    {
      if (v5 > 0x18)
        goto LABEL_15;
      if (v5 != 16)
      {
        if (((1 << v5) & 0x1066) != 0)
          goto LABEL_21;
        if (v5 != 24)
        {
LABEL_15:
          if (v5 == 70)
          {
            v6 = -64;
            goto LABEL_21;
          }
          goto LABEL_16;
        }
      }
      v6 = -48;
    }
LABEL_21:
    v12 = *(_QWORD *)(v4 + 72 + v6 + 16);
    v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0)
      v13 = (_QWORD *)*v13;
    if (v13)
      v14 = v13 - 8;
    else
      v14 = 0;
    sub_22E3CD31C((uint64_t *)(v14[13] + 96), v14[13]);
    if (!*(_DWORD *)(v14[16] + 20))
      v2 = v4 | 2;
  }
  if ((v2 & 7) != 2 || (result = (llvm::Value *)sub_22E469D70(*(_QWORD *)(a1 + 8), v4), (_DWORD)result))
  {
    result = sub_22F24CB90();
    v15 = *((_DWORD *)result + 8) & 0xF;
    v16 = v15 > 0xA;
    v17 = (1 << v15) & 0x63C;
    if (!v16 && v17 != 0)
    {
      llvm::Value::getName(result);
      llvm::Module::getOrInsertComdat();
      return (llvm::Value *)llvm::GlobalObject::setComdat();
    }
  }
  return result;
}

uint64_t *sub_22E691E70(_QWORD *a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[3];
  _OWORD v12[3];
  _OWORD v13[3];
  unint64_t v14;

  v7 = a3[1];
  v12[0] = *a3;
  v12[1] = v7;
  v12[2] = a3[2];
  sub_22E6958CC((uint64_t)v13, a1, a2, (uint64_t)v12, *(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
  v8 = v13[1];
  *a3 = v13[0];
  a3[1] = v8;
  a3[2] = v13[2];
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  v11[2] = a3[2];
  return sub_22E484FA4(a2, (uint64_t)v11, *(llvm::Type **)(a1[1] + 96), v14, 0);
}

uint64_t sub_22E691F14(uint64_t a1)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x20000) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x10000) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 16))
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x400) != 0 || sub_22E69200C(a1))
    return 0;
  v3 = sub_22F282248(a1);
  if (v3 != v4)
  {
    v5 = v3;
    v6 = v4;
    while (!sub_22E692064(v5))
    {
      do
        v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v5 && (*(_DWORD *)(v5 + 28) & 0x7F) != 0x37);
      if (v5 == v6)
        goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) >> 44) & 1;
}

BOOL sub_22E69200C(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x40000000000000) != 0)
    return 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) & 0x40000000000) == 0;
}

BOOL sub_22E692064(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = a1;
  v2 = sub_22EFC20FC(a1, 1);
  if (v2)
    v1 = v2;
  return (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 32))(v1) + 82) & 0x40) == 0
      && (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 32))(v1) + 83) & 2) == 0;
}

llvm::GetElementPtrInst *sub_22E6920CC(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  llvm::GetElementPtrInst *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::PHINode *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t *v44;
  _OWORD v45[3];
  llvm::GetElementPtrInst *v46[4];
  __int16 v47;
  __int128 v48[3];
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v14 = a2 + 34;
  v15 = *(_OWORD *)(a5 + 16);
  v48[0] = *(_OWORD *)a5;
  v48[1] = v15;
  v48[2] = *(_OWORD *)(a5 + 32);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v47 = 257;
  sub_22E3BEE6C(a2 + 34, v48, v16, (uint64_t)v46, (uint64_t)&v49);
  v17 = v50;
  *(_OWORD *)a5 = v49;
  *(_OWORD *)(a5 + 16) = v17;
  *(_OWORD *)(a5 + 32) = v51;
  if (a7)
  {
    v43 = a2[40];
    *(_QWORD *)&v49 = "memptr.vadjust";
    LOWORD(v51) = 259;
    v18 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v49 = "memptr.skip_vadjust";
    LOWORD(v51) = 259;
    v19 = a6;
    v20 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v21 = llvm::ConstantInt::get();
    *(_QWORD *)&v49 = "memptr.is_vbase";
    LOWORD(v51) = 259;
    v22 = sub_22E3C18F4((uint64_t)v14, 33, a6, v21, (uint64_t)&v49);
    v23 = llvm::User::operator new((llvm::User *)0x40);
    v24 = v22;
    a6 = v19;
    MEMORY[0x23489C09C](v23, v18, v20, v24, 0);
    LOWORD(v51) = 257;
    sub_22E3C12C8(v14, v23, (uint64_t)&v49);
    sub_22E5ED9B4(a2, v18, 0);
  }
  else
  {
    if (*(_QWORD *)(a4 + 128)
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 104) + 96), *(_QWORD *)(a4 + 104)), *(_QWORD *)(a4 + 128)))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 104) + 96), *(_QWORD *)(a4 + 104));
      if (*(_DWORD *)(*(_QWORD *)(a4 + 128) + 20))
        sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a4);
    }
    else
    {
      v25 = *(_QWORD *)(a2[18] + 208);
      v26 = sub_22F41A810(*(_QWORD *)(v25 + 32), 4, "member pointer representation requires a complete class type for %0 to perform this expression", 0x5EuLL);
      sub_22EFF605C(a3);
      *(_DWORD *)(v25 + 312) = v27;
      *(_DWORD *)(v25 + 316) = v26;
      if (*(char *)(v25 + 311) < 0)
      {
        **(_BYTE **)(v25 + 288) = 0;
        *(_QWORD *)(v25 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v25 + 288) = 0;
        *(_BYTE *)(v25 + 311) = 0;
      }
      v28 = (unsigned __int8 *)(v25 + 320);
      v49 = (unint64_t)(v25 + 320);
      *(_QWORD *)&v50 = v25;
      WORD4(v50) = 1;
      *(_BYTE *)(v25 + 320) = 0;
      *(_DWORD *)(v25 + 664) = 0;
      v29 = *(unsigned int *)(v25 + 776);
      if ((_DWORD)v29)
      {
        v44 = a6;
        v30 = *(_QWORD *)(v25 + 768);
        v31 = 56 * v29;
        do
        {
          if (*(char *)(v30 + v31 - 9) < 0)
            operator delete(*(void **)(v30 + v31 - 32));
          v31 -= 56;
        }
        while (v31);
        LODWORD(v29) = *v28;
        a6 = v44;
      }
      *(_DWORD *)(v25 + 776) = 0;
      v28[v29 + 1] = 11;
      *(_BYTE *)(v25 + 320) = v29 + 1;
      *(_QWORD *)&v28[8 * v29 + 16] = a4;
      sub_22F0D4E74(a3);
      sub_22E4D6448(v25 + 656, v32, 1);
      sub_22E3BB0B8((uint64_t)&v49);
    }
    a7 = llvm::ConstantInt::get();
    v43 = 0;
    v20 = 0;
    v18 = 0;
  }
  v46[0] = 0;
  v33 = *(_OWORD *)(a5 + 16);
  v45[0] = *(_OWORD *)a5;
  v45[1] = v33;
  v45[2] = *(_OWORD *)(a5 + 32);
  v34 = (uint64_t *)sub_22E692524(a1, (uint64_t)a2, (uint64_t)v45, a7, (uint64_t)a6, v46);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  LOWORD(v51) = 257;
  v36 = sub_22E3E5044(v14, v35, (uint64_t *)v46[0], v34, (uint64_t)&v49);
  v37 = (uint64_t)v36;
  if (!v18)
    return v36;
  v38 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  LOWORD(v51) = 257;
  sub_22E3C12C8(v14, v38, (uint64_t)&v49);
  sub_22E5ED9B4(a2, v20, 0);
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  *(_QWORD *)&v49 = "memptr.base";
  LOWORD(v51) = 259;
  v40 = (llvm::PHINode *)sub_22E3C4B80(v14, v39, 2, (uint64_t)&v49);
  if ((*(_BYTE *)(a5 + 24) & 3) != 0)
    v41 = sub_22F28ABCC((_OWORD *)a5, a2);
  else
    v41 = *(_QWORD *)a5;
  sub_22E3C4C50(v40, v41, v43);
  sub_22E3C4C50(v40, v37, (uint64_t)v18);
  return v40;
}

uint64_t sub_22E692524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::GetElementPtrInst **a6)
{
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  llvm::GetElementPtrInst *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  llvm::Type *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::GetElementPtrInst *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  __int16 v38;
  __int128 v39[3];
  _OWORD v40[2];
  __int128 v41;

  v12 = (uint64_t *)(a2 + 272);
  v13 = *(_OWORD *)(a3 + 16);
  v39[0] = *(_OWORD *)a3;
  v39[1] = v13;
  v39[2] = *(_OWORD *)(a3 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v38 = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), v39, v14, (uint64_t)v37, (uint64_t)v40);
  v15 = v40[1];
  *(_OWORD *)a3 = v40[0];
  *(_OWORD *)(a3 + 16) = v15;
  *(_OWORD *)(a3 + 32) = v41;
  v16 = *(_QWORD *)(a3 + 8);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v17 = (uint64_t *)sub_22F28ABCC((_OWORD *)a3, (_QWORD *)a2);
  else
    v17 = *(uint64_t **)a3;
  *(_QWORD *)&v40[0] = "vbptr";
  LOWORD(v41) = 259;
  v18 = sub_22E3E5044(v12, v16, v17, (uint64_t *)a4, (uint64_t)v40);
  v19 = (uint64_t)v18;
  if (a6)
    *a6 = v18;
  llvm::PointerType::get();
  llvm::PointerType::get();
  v20 = llvm::PointerType::get();
  LOWORD(v41) = 257;
  v21 = sub_22E3C1740(v12, 49, v19, v20, (uint64_t)v40);
  if (a4 && *(_BYTE *)(a4 + 16) == 16)
  {
    v22 = *(_DWORD *)(a4 + 32);
    if (v22 > 0x40)
      v23 = **(_QWORD **)(a4 + 24);
    else
      v23 = (uint64_t)(*(_QWORD *)(a4 + 24) << -(char)v22) >> -(char)v22;
    v24 = (v23 | *(_QWORD *)(a3 + 16)) & -(v23 | *(_QWORD *)(a3 + 16));
  }
  else
  {
    v24 = *(unsigned __int8 *)(a2 + 130);
  }
  v25 = (llvm::Type *)llvm::PointerType::get();
  *(_QWORD *)&v40[0] = "vbtable";
  LOWORD(v41) = 259;
  v26 = (uint64_t *)sub_22E3C3200(v12, v25, v21, (63 - __clz(v24)) | 0x100u, 0, (uint64_t)v40);
  v27 = llvm::ConstantInt::get();
  *(_QWORD *)&v40[0] = "vbtindex";
  LOWORD(v41) = 259;
  v28 = (uint64_t *)sub_22E3EA5BC((uint64_t)v12, a5, v27, (uint64_t)v40, 1);
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  LOWORD(v41) = 257;
  v30 = sub_22E3E5044(v12, v29, v26, v28, (uint64_t)v40);
  v31 = llvm::PointerType::get();
  LOWORD(v41) = 257;
  sub_22E3C1740(v12, 49, (uint64_t)v30, v31, (uint64_t)v40);
  v37[0] = "vbase_offs";
  v38 = 259;
  v32 = llvm::User::operator new((llvm::User *)0x40);
  LOWORD(v41) = 257;
  llvm::LoadInst::LoadInst();
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), v32, v37, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
  v33 = *(unsigned int *)(a2 + 280);
  if ((_DWORD)v33)
  {
    v35 = *(_QWORD *)(a2 + 272);
    v36 = v35 + 16 * v33;
    do
    {
      llvm::Instruction::setMetadata();
      v35 += 16;
    }
    while (v35 != v36);
  }
  return v32;
}

uint64_t sub_22E692840(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t Select;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Instruction *v43;
  uint64_t *v44;
  llvm::Constant *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  llvm::Instruction *v58;
  llvm::Instruction *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Constant *v62;
  uint64_t *AggregateElement;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Constant *v70;
  uint64_t *v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v81;
  uint64_t v82;
  uint64_t *GlobalVariable;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _DWORD v93[8];
  __int16 v94;
  uint64_t *v95;
  llvm::Constant *v96;
  __int16 v97;
  void *v98;
  llvm::Type *v99;
  _WORD v100[16];
  void *v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v13 = sub_22F40AE38(a2);
  v14 = sub_22F40AE38(a3);
  v75 = v13;
  v15 = sub_22F3E87A8(v13);
  v87 = (uint64_t *)v14;
  v16 = sub_22F3E87A8(v14);
  v17 = sub_22F28C8B4(a2);
  v74 = *(unsigned __int8 *)(a7 + 16);
  v18 = llvm::ConstantInt::get();
  v19 = (uint64_t *)llvm::ConstantInt::get();
  v79 = llvm::ConstantInt::get();
  if (v17)
    v20 = 1;
  else
    v20 = 2;
  v86 = v20;
  v92 = a8;
  v88 = v17;
  if (v20 > v15)
  {
    v89 = a7;
    goto LABEL_13;
  }
  v77 = a3;
  v93[0] = 0;
  v104 = 257;
  v21 = 1;
  v89 = sub_22E3C2EA8(a8, a7, (uint64_t)v93, 1, (uint64_t)&v101);
  if (v17)
  {
    v93[0] = 1;
    v104 = 257;
    v18 = sub_22E3C2EA8(a8, a7, (uint64_t)v93, 1, (uint64_t)&v101);
    v21 = 2;
  }
  if (v15 == 3)
  {
    v93[0] = v21;
    v104 = 257;
    v79 = sub_22E3C2EA8(a8, a7, (uint64_t)v93, 1, (uint64_t)&v101);
    ++v21;
LABEL_11:
    v93[0] = v21;
    v104 = 257;
    v19 = (uint64_t *)sub_22E3C2EA8(a8, a7, (uint64_t)v93, 1, (uint64_t)&v101);
    a3 = v77;
    goto LABEL_13;
  }
  if (v15 >= 2)
    goto LABEL_11;
  a3 = v77;
LABEL_13:
  v22 = v18;
  if (a4 == 17)
    v23 = a2;
  else
    v23 = a3;
  v24 = sub_22F40AE38(v23);
  v25 = llvm::ConstantInt::get();
  v104 = 257;
  v76 = (uint64_t)v19;
  sub_22E3C18F4(a8, 32, v19, v25, (uint64_t)&v101);
  if (v15 == 2 && sub_22F36894C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v75))
  {
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v104 = 257;
    Select = llvm::IRBuilderBase::CreateSelect();
    v40 = v18;
    v41 = v89;
    if (v88)
      v42 = v40;
    else
      v42 = v89;
    v104 = 257;
    v43 = sub_22E520468(a8, v42, Select, (uint64_t)&v101);
    if (v88)
      v22 = (uint64_t)v43;
    else
      v22 = v40;
    if (!v88)
      v41 = (uint64_t)v43;
    v89 = v41;
  }
  sub_22E4800F0(*(_QWORD *)(a1 + 8), v24, a5, a6);
  v26 = llvm::ConstantInt::get();
  v27 = v88;
  v28 = v89;
  if (v88)
    v29 = v22;
  else
    v29 = v89;
  v101 = "adj";
  v104 = 259;
  if (a4 == 17)
    sub_22E3E48CC(a8, v29, v26, (uint64_t)&v101, 0, 1);
  else
    sub_22E520468(a8, v29, v26, (uint64_t)&v101);
  llvm::ConstantInt::get();
  v104 = 257;
  v30 = llvm::IRBuilderBase::CreateSelect();
  v31 = v30;
  if (v88)
    v32 = v30;
  else
    v32 = v22;
  v91 = v32;
  if (v88)
    v33 = v89;
  else
    v33 = v30;
  if (v16 >= 2 && v15 >= 2)
  {
    v44 = &v103;
    v101 = &v103;
    v102 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v93, (uint64_t)&v101);
    (*(void (**)(_QWORD, unint64_t, uint64_t *, _DWORD *))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16), v75, v87, v93);
    v46 = (uint64_t *)v101;
    v45 = (llvm::Constant *)v102;
    GlobalVariable = (uint64_t *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      v70 = v45;
      v71 = v46;
      v72 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 712);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v75 + 104) + 96), *(_QWORD *)(v75 + 104));
      v47 = (*(_DWORD *)(*(_QWORD *)(v75 + 128) + 20) + 1);
      v48 = llvm::UndefValue::get();
      v98 = v100;
      v99 = (llvm::Type *)0x400000000;
      sub_22E4639CC((uint64_t)&v98, v47, v48);
      *(_QWORD *)v98 = llvm::ConstantInt::get();
      v49 = sub_22E483108(v75);
      v85 = v50;
      if (v49 == v50)
      {
        v60 = 0;
        v28 = v89;
      }
      else
      {
        v51 = v49;
        v81 = 0;
        v28 = v89;
        do
        {
          v52 = *(_QWORD *)(**(_QWORD **)(v51 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v52 + 8) & 0xF) != 0)
            v52 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v51 + 16));
          v53 = v44;
          v54 = sub_22F10C2A4(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0));
          if (v54)
          {
            if ((*(_DWORD *)(v54 + 28) & 0x7Fu) - 35 >= 3)
              v55 = 0;
            else
              v55 = v54;
          }
          else
          {
            v55 = 0;
          }
          if (sub_22EFB397C(v87, v55))
          {
            v73 = sub_22F40C330(v72, v75, v55);
            v56 = sub_22F40C330(v72, (uint64_t)v87, v55);
            *((_QWORD *)v98 + v73) = llvm::ConstantInt::get();
            v28 = v89;
            v81 |= v73 != v56;
          }
          v44 = v53;
          v51 += 24;
        }
        while (v51 != v85);
        if ((v81 & 1) != 0)
        {
          llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(a1 + 8) + 72), (llvm::Type *)v99);
          llvm::ConstantArray::get();
          if (sub_22EFB948C(v75) >= 3)
            sub_22EFB948C((uint64_t)v87);
          llvm::User::operator new((llvm::User *)0x58);
          v97 = 261;
          v95 = v71;
          v96 = v70;
          v60 = llvm::GlobalVariable::GlobalVariable();
        }
        else
        {
          v60 = 0;
        }
      }
      GlobalVariable = (uint64_t *)v60;
      if (v98 != v100)
        free(v98);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v93);
    if (v101 != v44)
      free(v101);
    if (GlobalVariable)
    {
      v82 = v22;
      v61 = llvm::ConstantInt::get();
      v104 = 257;
      v62 = (llvm::Constant *)sub_22E4DF3BC(v92, v76, v61, (uint64_t)&v101, 1);
      if (v74 > 0x14)
      {
        v78 = a3;
        v95 = (uint64_t *)llvm::ConstantInt::get();
        v96 = v62;
        v64 = GlobalVariable[3];
        v94 = 257;
        sub_22E486CB4((uint64_t *)v92, v64, GlobalVariable, &v95, 2, (uint64_t)v93);
        v100[8] = 257;
        v65 = llvm::User::operator new((llvm::User *)0x40);
        v104 = 257;
        AggregateElement = (uint64_t *)v65;
        llvm::LoadInst::LoadInst();
        (*(void (**)(_QWORD, uint64_t *, void **, _QWORD, _QWORD))(**(_QWORD **)(v92 + 80) + 16))(*(_QWORD *)(v92 + 80), AggregateElement, &v98, *(_QWORD *)(v92 + 48), *(_QWORD *)(v92 + 56));
        v66 = *(unsigned int *)(v92 + 8);
        if ((_DWORD)v66)
        {
          v68 = *(_QWORD *)v92;
          v69 = *(_QWORD *)v92 + 16 * v66;
          do
          {
            llvm::Instruction::setMetadata();
            v68 += 16;
          }
          while (v68 != v69);
        }
        a3 = v78;
      }
      else
      {
        AggregateElement = (uint64_t *)llvm::Constant::getAggregateElement((llvm::Constant *)*(GlobalVariable - 4), v62);
      }
      v27 = v88;
      v67 = llvm::ConstantInt::get();
      v104 = 257;
      v76 = (uint64_t)AggregateElement;
      sub_22E3C18F4(v92, 32, AggregateElement, v67, (uint64_t)&v101);
      v22 = v82;
      v28 = v89;
    }
    else
    {
      v27 = v88;
    }
  }
  if (v16 == 3)
  {
    sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), (unint64_t)v87);
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v104 = 257;
    v34 = v92;
    v35 = llvm::IRBuilderBase::CreateSelect();
  }
  else
  {
    if (v16 == 2 && sub_22F36894C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), (unint64_t)v87))
    {
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      v104 = 257;
      v57 = llvm::IRBuilderBase::CreateSelect();
      v104 = 257;
      v34 = v92;
      v58 = sub_22E3E48CC(v92, v31, v57, (uint64_t)&v101, 0, 1);
      if (v27)
        v59 = v58;
      else
        v59 = (llvm::Instruction *)v22;
      v91 = (uint64_t)v59;
      if (v27)
        v33 = v28;
      else
        v33 = (uint64_t)v58;
    }
    else
    {
      v34 = v92;
    }
    v35 = v79;
  }
  if (v86 <= v16)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a3);
    v36 = llvm::UndefValue::get();
    v93[0] = 0;
    v104 = 257;
    v37 = 1;
    v33 = sub_22E4210EC(v34, v36, v33, (uint64_t)v93, 1, (uint64_t)&v101);
    if (v27)
    {
      v93[0] = 1;
      v104 = 257;
      v33 = sub_22E4210EC(v34, v33, v91, (uint64_t)v93, 1, (uint64_t)&v101);
      v37 = 2;
    }
    if (v16 == 3)
    {
      v93[0] = v37;
      v104 = 257;
      v33 = sub_22E4210EC(v34, v33, v35, (uint64_t)v93, 1, (uint64_t)&v101);
      ++v37;
LABEL_42:
      v93[0] = v37;
      v104 = 257;
      return sub_22E4210EC(v34, v33, v76, (uint64_t)v93, 1, (uint64_t)&v101);
    }
    if (v16 >= 2)
      goto LABEL_42;
  }
  return v33;
}

uint64_t sub_22E6932F0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, llvm::Constant *a7)
{
  llvm::Constant *v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AggregateElement;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[10];
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];

  v35[3] = *MEMORY[0x24BDAC8D0];
  if (!sub_22F28C8B4(a2))
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 144))(a1, a2)
      || (llvm::Constant::isNullValue(a7) & 1) == 0)
    {
      v26 = v28;
      v27 = 0x400000000;
      sub_22E693558((uint64_t)a1, a2, (uint64_t)&v26);
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
        {
          v15 = v26;
          v16 = *(_QWORD *)v26 == (_QWORD)a7;
        }
        else
        {
          v25 = a6;
          v17 = 0;
          v18 = v27 - 1;
          do
          {
            AggregateElement = llvm::Constant::getAggregateElement(a7);
            v15 = v26;
            v20 = *((_QWORD *)v26 + v17);
            v16 = AggregateElement == v20;
          }
          while (AggregateElement == v20 && v18 != v17++);
          a6 = v25;
        }
      }
      else
      {
        v16 = 1;
        v15 = v26;
      }
      if (v15 != v28)
        free(v15);
      if (!v16)
        goto LABEL_23;
    }
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 160))(a1, a3);
  }
  v14 = a7;
  if (*(_BYTE *)(*(_QWORD *)a7 + 8) == 16)
    v14 = (llvm::Constant *)llvm::Constant::getAggregateElement(a7);
  if ((llvm::Constant::isNullValue(v14) & 1) != 0)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 160))(a1, a3);
LABEL_23:
  if (a4 != 19)
  {
    v22 = a1[1];
    v23 = *(_QWORD *)(v22 + 232);
    v26 = v28;
    v27 = 0x200000000;
    v28[6] = v23;
    v28[7] = &v34;
    v28[8] = v35;
    v28[9] = 0;
    v29 = 0;
    v30 = 512;
    v31 = 7;
    v28[4] = 0;
    v28[5] = 0;
    v32 = 0;
    v33 = 0;
    v34 = MEMORY[0x24BED83B8] + 16;
    v35[0] = &off_24FA66C70;
    v35[1] = 0;
    v35[2] = v22;
    a7 = (llvm::Constant *)sub_22E692840((uint64_t)a1, a2, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)&v26);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v35);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v34);
    if (v26 != v28)
      free(v26);
  }
  return (uint64_t)a7;
}

uint64_t sub_22E693558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  llvm::Type *v8;
  uint64_t NullValue;
  llvm::Type *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  llvm::Type *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  v6 = sub_22F40AE38(a2);
  v7 = sub_22F3E87A8(v6);
  if (sub_22F28C8B4(a2))
  {
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v8);
  }
  else if (sub_22F3E87D0(v6))
  {
    NullValue = llvm::ConstantInt::get();
  }
  else
  {
    NullValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 72), v10);
  }
  v11 = NullValue;
  v12 = *(_DWORD *)(a3 + 8);
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
  ++*(_DWORD *)(a3 + 8);
  result = sub_22F28C8B4(a2);
  if (v7 >= 1 && (_DWORD)result)
  {
    result = llvm::ConstantInt::get();
    v15 = result;
    v16 = *(_DWORD *)(a3 + 8);
    if (v16 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v7 == 3)
  {
    v17 = llvm::ConstantInt::get();
    v18 = *(_DWORD *)(a3 + 8);
    if (v18 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
    ++*(_DWORD *)(a3 + 8);
  }
  else if (v7 < 2)
  {
    return result;
  }
  result = llvm::Constant::getAllOnesValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 72), v14);
  v19 = result;
  v20 = *(_DWORD *)(a3 + 8);
  if (v20 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v19;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

BOOL sub_22E693748(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 202)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E6937A8(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, int a6)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v11 = sub_22F3E87A8(a4);
  if (a3)
    v12 = 1;
  else
    v12 = 2;
  if (v12 <= v11)
  {
    v13 = v11;
    v18[0] = a2;
    v17 = 1;
    if (a3)
    {
      v18[1] = llvm::ConstantInt::get();
      v17 = 2;
    }
    if (v13 == 3)
    {
      if (a6)
        sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a4);
      v18[v17++] = llvm::ConstantInt::get();
    }
    else if (v13 < 2)
    {
LABEL_16:
      llvm::ConstantStruct::getTypeForElements();
      return llvm::ConstantStruct::get();
    }
    v14 = llvm::ConstantInt::get();
    v15 = v17;
    if (v17 >= 4)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v17;
    }
    v18[v15] = v14;
    goto LABEL_16;
  }
  return a2;
}

unint64_t sub_22E6939D8(uint64_t a1)
{
  unint64_t v1;

  v1 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  while (sub_22EFC3A88(v1))
  {
    if ((*(_BYTE *)(v1 + 96) & 3) != 0)
      v1 = 0;
    else
      v1 = sub_22E3CD31C((uint64_t *)(v1 + 96), v1);
  }
  return v1;
}

uint64_t sub_22E693A40(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  if (sub_22F3E87A8(a2) == 2)
    sub_22F36894C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  v4 = llvm::ConstantInt::get();
  return sub_22E6937A8(a1, v4, 0, a2, 0, 0);
}

uint64_t sub_22E693AC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 336);
  if (!result)
  {
    result = llvm::StructType::create();
    *(_QWORD *)(a1 + 336) = result;
  }
  return result;
}

uint64_t sub_22E693B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  sub_22E693AC0(a1);
  llvm::PointerType::get();
  v2 = llvm::FunctionType::get();
  result = sub_22E633A04(*(_QWORD *)(a1 + 8), v2, "_CxxThrowException", 0x12uLL, 0, 0, 0);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216) + 56) == 41)
  {
    if (v4)
      v5 = *(_BYTE *)(v4 + 16) == 0;
    else
      v5 = 0;
    if (v5)
      *(_WORD *)(v4 + 18) = *(_WORD *)(v4 + 18) & 0xC00F | 0x400;
  }
  return result;
}

unint64_t sub_22E693C50(uint64_t a1, unint64_t a2, char *a3, BOOL *a4, _BYTE *a5)
{
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;

  v9 = sub_22EF69FD4(a1, a2);
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22F10ACF8(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
  v12 = v11;
  if (v11 >= 0x10)
  {
    if ((v11 & 1) != 0)
      v13 = 1;
    else
      v13 = *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
    *a3 = v13;
    v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
    *a4 = ((v11 | v14) & 4) != 0;
    if ((v14 & 8) != 0)
      v15 = (*(unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 3) & 1;
    else
      LOBYTE(v15) = 0;
    *a5 = v15;
  }
  v16 = *v10;
  if (*v10)
    v17 = *(_BYTE *)(*v10 + 16) == 31;
  else
    v17 = 0;
  if (v17
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
    && (v16 = sub_22F10CF48(*v10)) != 0)
  {
    v18 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v18 + 8) & 0xF) != 0)
      v18 = (unint64_t)sub_22F10D2BC(v12);
    v9 = sub_22F36A6C0(a1, v18 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v16 + 40));
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return v9;
  v19 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
    v19 = (unint64_t)sub_22F10D2BC(v12);
  return sub_22EF5B848(a1, v19 & 0xFFFFFFFFFFFFFFF0, 0);
}

llvm::Constant *sub_22E693DD4(uint64_t a1, llvm::Constant *this)
{
  llvm::Constant *v2;
  llvm::Type *v4;
  llvm::GlobalValue *v6;

  v2 = this;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216)
                + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216) - 24)) == 64)
  {
    if (llvm::Constant::isNullValue(this))
      return (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 72), v4);
    if (!llvm::Module::getGlobalVariable())
    {
      v6 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
      llvm::GlobalVariable::GlobalVariable();
      sub_22E62876C(*(_QWORD *)(a1 + 8), v6);
    }
    llvm::ConstantExpr::getPtrToInt();
    llvm::ConstantExpr::getPtrToInt();
    llvm::ConstantExpr::getSub();
    return (llvm::Constant *)llvm::ConstantExpr::getTrunc();
  }
  return v2;
}

unint64_t sub_22E693F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  _QWORD v18[4];

  v18[0] = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = (char *)v18;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v16 = v5 + 32 * v4 > (unint64_t)v18;
    if (v5 <= (unint64_t)v18 && v16)
    {
      v17 = (char *)v18 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_QWORD *)a1;
      v6 = &v17[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_QWORD *)a1;
      v6 = (char *)v18;
    }
  }
  v7 = (_OWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  v8 = *((_OWORD *)v6 + 1);
  *v7 = *(_OWORD *)v6;
  v7[1] = v8;
  ++*(_DWORD *)(a1 + 8);
  result = sub_22E46A3A0(a2);
  if (result != v10)
  {
    v11 = result;
    v12 = v10;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
      v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      if (v14)
      {
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          v15 = 0;
        else
          v15 = v14;
      }
      else
      {
        v15 = 0;
      }
      result = sub_22E693F1C(a1, v15);
      v11 += 24;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t sub_22E694058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  *(_DWORD *)(a1 + 16) = 64;
  if (!a2)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_40;
  }
  v4 = *(unsigned __int8 *)(a3 + 12);
  v5 = (v4 >> 2) & 3;
  if (v5 == 3)
    v5 = v4 & 2;
  if (!v5)
  {
    v6 = 64;
    if ((v4 & 1) == 0)
      goto LABEL_6;
LABEL_39:
    v16 = 0;
    *(_DWORD *)(a1 + 16) = v6 | 0x10;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    goto LABEL_40;
  }
  v6 = 77;
  *(_DWORD *)(a1 + 16) = 77;
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
    goto LABEL_39;
LABEL_6:
  if ((*(_BYTE *)(a2 + 16) & 9) != 0)
    *(_DWORD *)(a1 + 16) = v6 | 9;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || (*(_DWORD *)(v8 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_23;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_22;
        if (i == 16)
          goto LABEL_16;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_29;
        if (i == 24)
        {
LABEL_16:
          v12 = -48;
        }
        else
        {
LABEL_22:
          if (i != 70)
          {
LABEL_23:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_29;
          }
          v12 = -64;
        }
      }
LABEL_29:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  v17 = sub_22F0C975C(*(_QWORD *)(v8 + 88), *(_QWORD *)a2);
  v16 = v7 + sub_22E46A3EC(v17, *(_QWORD *)a1);
LABEL_40:
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = v16;
  v18 = sub_22E46A3A0(*(_QWORD *)a1);
  if (v18 == v19)
    return *(unsigned int *)(a1 + 20);
  v20 = v18;
  v21 = v19;
  v22 = a1 + 32;
  do
  {
    result = sub_22E694058(v22, a1, v20) + *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 20) = result;
    v22 += 32 * *(unsigned int *)(v22 + 20) + 32;
    v20 += 24;
  }
  while (v20 != v21);
  return result;
}

void sub_22E69427C(uint64_t a1)
{
  unint64_t v1;
  char v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void **v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[64];
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[64];
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];

  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  v18 = v22;
  v19 = v22;
  v20 = 8;
  v21 = 0;
  v13 = v17;
  v14 = v17;
  v15 = 8;
  v16 = 0;
  v1 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= *(_QWORD *)a1 + 32 * (unint64_t)*(unsigned int *)(a1 + 8) - 32)
  {
    do
    {
      if ((*(_BYTE *)(v1 + 16) & 0x10) != 0 && (sub_22E3BA850((uint64_t)&v23, *(const void **)v1), !v3))
      {
        v1 += 32 * *(unsigned int *)(v1 + 20) + 32;
      }
      else
      {
        sub_22E3BA850((uint64_t)&v18, *(const void **)v1);
        if (!v4)
          sub_22E3BA850((uint64_t)&v13, *(const void **)v1);
        v1 += 32;
      }
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    while (v1 <= *(_QWORD *)a1 + 32 * v6 - 32);
    if (!(_DWORD)v6 || HIDWORD(v15) == v16)
    {
      v11 = v13;
      v10 = v14;
    }
    else
    {
      v7 = 32 * v6;
      v8 = (_DWORD *)(v5 + 16);
      do
      {
        v9 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v13, *((void **)v8 - 2));
        v11 = v13;
        v10 = v14;
        v12 = (uint64_t *)((char *)&v15 + 4);
        if (v14 != v13)
          v12 = &v15;
        if (v9 != (void **)&v14[8 * *(unsigned int *)v12])
          *v8 |= 2u;
        v8 += 8;
        v7 -= 32;
      }
      while (v7);
    }
    if (v10 != v11)
      free(v10);
  }
  if (v19 != v18)
    free(v19);
  if (v24 != v23)
    free(v24);
}

llvm::Constant *sub_22E69440C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  llvm::Constant *GlobalVariable;
  llvm::Constant *v18;
  llvm::Constant *v19;
  llvm::Type *v20;
  llvm::Constant *v21;
  llvm::Constant *NullValue;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  llvm::Value *v33;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  char v38;
  _QWORD v39[9];
  void *v40;
  __int128 v41;
  _QWORD v42[34];

  v42[32] = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 <= 2)
  {
    v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15064)
                                                    + 56))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15064), *(_QWORD *)(v11 + 104));
    if (v12)
    {
      if (sub_22E694BE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 15064), v12)
        && ((v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v15 = *(_BYTE *)(v14 + 16) == 26)
          : (v15 = 0),
            (v15
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v14 = sub_22F10CF48(v14)) != 0)
         && (*(_QWORD *)(v14 + 16) & 0x3FFFC000000000) == 0x4000000000))
      {
        v38 = 0;
        v37 = 0;
        v13 = 0;
      }
      else
      {
        v38 = 0;
        v13 = 3;
        v37 = 1;
      }
    }
    else
    {
      v37 = 0;
      v13 = 0;
      v38 = 1;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v37 = 0;
    v38 = 1;
  }
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v10, (uint64_t)&v40);
  v16 = v40;
  v40 = v42;
  v41 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v39, (uint64_t)&v40);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 16) + 288))(*(_QWORD *)(a1 + 16), a2, v12, v13, v16, a3, a4, a5, v39);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v39);
  GlobalVariable = (llvm::Constant *)llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v18 = sub_22E693DD4(a1, GlobalVariable);
    goto LABEL_41;
  }
  v19 = (llvm::Constant *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(a1, a2);
  v21 = sub_22E693DD4(a1, v19);
  if ((v38 & 1) != 0)
  {
    NullValue = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(a1 + 8) + 96), v20);
  }
  else
  {
    if (v37)
      sub_22E694C40();
    else
      sub_22E46A4BC(*(_QWORD *)(a1 + 8), v12 & 0xFFFFFFFFFFFFFFF8, 0, 0, 0, 0, 0);
    NullValue = (llvm::Constant *)llvm::ConstantExpr::getBitCast();
  }
  v23 = sub_22E693DD4(a1, NullValue);
  v24 = *v10;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    v24 = *(_QWORD *)(sub_22F10ACF8(v24) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_22F10C2A4(v24);
  if (v25)
  {
    v26 = v25;
    if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 <= 2)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104));
      v27 = *(_QWORD *)(v26 + 40);
      if ((v27 & 7) == 0)
      {
        v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 16);
          if (*(_DWORD *)v29 == 9)
          {
            v30 = *(_QWORD *)(v29 + 16);
            v31 = *(unsigned __int8 *)(v29 + 24);
            if (v30 == 0x6F6C6C615F646162 && v31 == 99)
            {
              v35 = *(_QWORD *)(v26 + 16);
              v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
              if ((v35 & 4) != 0)
              {
                v36 = (_QWORD *)*v36;
                if (!v36)
                  goto LABEL_37;
              }
              else if (!v36)
              {
                goto LABEL_37;
              }
              sub_22EFC84D4((unint64_t)v36);
            }
          }
        }
      }
    }
  }
LABEL_37:
  v39[0] = llvm::ConstantInt::get();
  v39[1] = v21;
  v39[2] = llvm::ConstantInt::get();
  v39[3] = llvm::ConstantInt::get();
  v39[4] = llvm::ConstantInt::get();
  v39[5] = llvm::ConstantInt::get();
  v39[6] = v23;
  sub_22E6949B0(a1);
  v33 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  sub_22F114870(*v10);
  llvm::ConstantStruct::get();
  llvm::GlobalVariable::GlobalVariable();
  *((_DWORD *)v33 + 8) = *((_DWORD *)v33 + 8) & 0xFFFFFF3F | 0x80;
  llvm::GlobalObject::setSection();
  if ((*((_DWORD *)v33 + 8) & 0xFu) <= 0xA && ((1 << (*((_DWORD *)v33 + 8) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName(v33);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  v18 = sub_22E693DD4(a1, v33);
LABEL_41:
  if (v40 != v42)
    free(v40);
  return v18;
}

uint64_t sub_22E6949B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 304);
  if (!result)
  {
    result = llvm::StructType::create();
    *(_QWORD *)(a1 + 304) = result;
  }
  return result;
}

uint64_t sub_22E694A68(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = v16;
    do
    {
      v11 = v8;
      v12 = *(_QWORD *)(a1 + 8 + 8 * v9);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v10++ = v12;
      v8 = 1;
      v9 = 1;
    }
    while ((v11 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22F2A2300(a1, v16, v10);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2A2300(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

BOOL sub_22E694BE0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 26;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  return v3 == ((*(_DWORD *)(v4 + 16) >> 19) & 0x1F);
}

llvm::Value *sub_22E694C40()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *NamedValue;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char v79[56];
  _OWORD v80[3];
  uint64_t v81[2];
  uint64_t v82[2];
  _QWORD v83[3];
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  _QWORD v93[3];
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  _BYTE v103[72];
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  char v110;
  __int16 v111;
  unint64_t v112;
  _QWORD v113[3];
  int v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[32];
  void *v121;
  uint64_t v122;
  _BYTE v123[1216];
  void *v124;
  uint64_t v125;
  _BYTE v126[192];
  void *v127;
  uint64_t v128;
  _BYTE v129[16];
  void *v130;
  uint64_t v131;
  _QWORD v132[5];
  void *v133;
  uint64_t v134;
  _BYTE v135[128];
  _QWORD v136[4];
  __int16 v137;
  uint64_t v138[178];
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  void *v148;
  __int128 v149;
  _QWORD v150[35];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v150[32] = *MEMORY[0x24BDAC8D0];
  v148 = v150;
  v149 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v103, (uint64_t)&v148);
  sub_22F0966E8(*(_QWORD **)(v5 + 16), v4 & 0xFFFFFFFFFFFFFFF8 | v2, 0, (llvm::raw_ostream *)v103);
  NamedValue = (llvm::Value *)llvm::Module::getNamedValue();
  if (NamedValue)
    goto LABEL_66;
  v77 = sub_22F24DE6C(*(_QWORD *)(v5 + 8) + 280, v4, v2);
  v7 = sub_22E46F2EC(*(_QWORD *)(v5 + 8) + 280, v77);
  v8 = *(_WORD *)(v4 + 80) & 0x7F;
  v9 = -40;
  if (v8 > 0x46)
  {
    if (v8 == 83)
      goto LABEL_18;
    if (v8 == 71)
    {
      v9 = -56;
      goto LABEL_18;
    }
    if (v8 != 81)
    {
LABEL_13:
      v10 = v8 - 52;
      v11 = v8 - 33 >= 5;
      v12 = -48;
      if (!v11)
        v12 = -64;
      if (v10 >= 6)
        v9 = v12;
      else
        v9 = -72;
    }
  }
  else
  {
    if (v8 > 0x18)
      goto LABEL_12;
    if (v8 == 16)
    {
LABEL_5:
      v9 = -48;
      goto LABEL_18;
    }
    if (((1 << v8) & 0x1066) == 0)
    {
      if (v8 == 24)
        goto LABEL_5;
LABEL_12:
      if (v8 == 70)
      {
        v9 = -64;
        goto LABEL_18;
      }
      goto LABEL_13;
    }
  }
LABEL_18:
  v13 = *(_QWORD *)(v4 + 72 + v9 + 16);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0)
    v14 = (_QWORD *)*v14;
  if (v14)
    v15 = (uint64_t)(v14 - 8);
  else
    v15 = 0;
  v16 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v15);
  v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  sub_22F114870(v17);
  if ((*(_DWORD *)(v17 + 16) & 0x1C000u) >= 0xC000)
    v18 = 3;
  else
    v18 = 7;
  v137 = 261;
  v136[0] = v148;
  v136[1] = v149;
  v19 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 200);
  NamedValue = (llvm::Value *)llvm::User::operator new((llvm::User *)0x78);
  v20 = MEMORY[0x23489F6FC](NamedValue, v7, v18, 0xFFFFFFFFLL, v136, v19);
  *(_WORD *)(v20 + 18) = (*(_WORD *)(v77 + 8) >> 4) & 0xFF0 | *(_WORD *)(v20 + 18) & 0xC00F;
  if ((*(_DWORD *)(v20 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v20 + 32) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName(NamedValue);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
  }
  sub_22E618EBC((uint64_t)v136, *(_QWORD *)(v5 + 8), 0);
  v138[177] = v4 & 0xFFFFFFFFFFFFFFF8;
  v139 = 0;
  v133 = v135;
  v134 = 0x1000000000;
  sub_22E46AE60((_QWORD *)v5, v136, (uint64_t)&v133);
  v21 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 144);
  v22 = sub_22E3CB704(*(llvm::StringMapImpl **)(v21 + 15192), "src", 3uLL);
  v23 = sub_22EF5F8C4(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144), v16, 1);
  sub_22EA41AB8((uint64_t)v93, 62, 0, 0);
  v95 = v22;
  v96 = v23;
  v97 = 0;
  v98 = 0;
  v99 = v21 | 2;
  v100 = v93;
  v101 = 0;
  v93[0] = &off_24FAC3008;
  v102 = 1310720;
  v94 |= 0x200u;
  if (v2 == 3)
  {
    v24 = v134;
    if (v134 >= HIDWORD(v134))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v134;
    }
    *((_QWORD *)v133 + v24) = v93;
    LODWORD(v134) = v134 + 1;
  }
  v78 = v2;
  v25 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 144);
  v26 = sub_22E3CB704(*(llvm::StringMapImpl **)(v25 + 15192), "is_most_derived", 0xFuLL);
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 144) + 16480);
  sub_22EA41AB8((uint64_t)v83, 62, 0, 0);
  v85 = v26;
  v86 = v27;
  v87 = 0;
  v88 = 0;
  v89 = v25 | 2;
  v90 = v83;
  v91 = 0;
  v83[0] = &off_24FAC3008;
  v92 = 1310720;
  v84 |= 0x200u;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
  if (*(_DWORD *)(*(_QWORD *)(v15 + 128) + 20))
  {
    v28 = v134;
    if (v134 >= HIDWORD(v134))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v28 = v134;
    }
    *((_QWORD *)v133 + v28) = v83;
    LODWORD(v134) = v134 + 1;
  }
  v82[0] = 0;
  v82[1] = (uint64_t)v136;
  sub_22E48EE24(v82, 0, 1);
  sub_22E61A8FC((uint64_t)v136, 0, 0, *(_QWORD *)(v77 + 40), NamedValue, v77, (uint64_t *)&v133, *(_DWORD *)(v4 + 24), v29, 0);
  v81[0] = 0;
  v81[1] = (uint64_t)v136;
  sub_22E48EE24(v81, 0, 0);
  v30 = sub_22E46B144(v5, (uint64_t)v136);
  v31 = 0;
  v147 = v30;
  if (v78 == 3)
  {
    v104 = v93;
    v121 = 0;
    v32 = sub_22E3CED3C(&v145, &v104, &v121);
    v33 = (char *)v121;
    if (!v32)
      v33 = (char *)(v145 + 56 * v146);
    v34 = *(_OWORD *)(v33 + 8);
    v35 = *(_OWORD *)(v33 + 40);
    v80[1] = *(_OWORD *)(v33 + 24);
    v80[2] = v35;
    v80[0] = v34;
    v31 = sub_22E3C43AC(v138, (uint64_t)v80, "src");
  }
  v121 = v123;
  v122 = 0x800000000;
  v124 = v126;
  v125 = 0x100000000;
  v127 = v129;
  v128 = 0x100000000;
  v130 = v132;
  v131 = 0x200000000;
  v132[4] = 0;
  v36 = sub_22EFD7558(v4);
  v104 = (_QWORD *)v30;
  v105 = 0;
  v110 = 0;
  v111 = 0;
  v112 = v36;
  v37 = sub_22E3C187C((uint64_t)&v121, (unint64_t)&v104, 1);
  v38 = (char *)v121 + 152 * v122;
  v39 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v37;
  *((_OWORD *)v38 + 1) = v39;
  v40 = *(_QWORD *)(v37 + 144);
  v41 = *(_OWORD *)(v37 + 128);
  v42 = *(_OWORD *)(v37 + 96);
  *((_OWORD *)v38 + 7) = *(_OWORD *)(v37 + 112);
  *((_OWORD *)v38 + 8) = v41;
  *((_QWORD *)v38 + 18) = v40;
  *((_OWORD *)v38 + 6) = v42;
  v43 = *(_OWORD *)(v37 + 80);
  v44 = *(_OWORD *)(v37 + 32);
  v45 = *(_OWORD *)(v37 + 48);
  *((_OWORD *)v38 + 4) = *(_OWORD *)(v37 + 64);
  *((_OWORD *)v38 + 5) = v43;
  *((_OWORD *)v38 + 2) = v44;
  *((_OWORD *)v38 + 3) = v45;
  LODWORD(v122) = v122 + 1;
  if (v31)
  {
    v104 = (_QWORD *)v31;
    v105 = 0;
    v110 = 0;
    v111 = 0;
    v112 = v96;
    v46 = sub_22E3C187C((uint64_t)&v121, (unint64_t)&v104, 1);
    v47 = (char *)v121 + 152 * v122;
    v48 = *(_OWORD *)(v46 + 16);
    *(_OWORD *)v47 = *(_OWORD *)v46;
    *((_OWORD *)v47 + 1) = v48;
    v49 = *(_QWORD *)(v46 + 144);
    v50 = *(_OWORD *)(v46 + 128);
    v51 = *(_OWORD *)(v46 + 96);
    *((_OWORD *)v47 + 7) = *(_OWORD *)(v46 + 112);
    *((_OWORD *)v47 + 8) = v50;
    *((_QWORD *)v47 + 18) = v49;
    *((_OWORD *)v47 + 6) = v51;
    v52 = *(_OWORD *)(v46 + 80);
    v53 = *(_OWORD *)(v46 + 32);
    v54 = *(_OWORD *)(v46 + 48);
    *((_OWORD *)v47 + 4) = *(_OWORD *)(v46 + 64);
    *((_OWORD *)v47 + 5) = v52;
    *((_OWORD *)v47 + 2) = v53;
    *((_OWORD *)v47 + 3) = v54;
    LODWORD(v122) = v122 + 1;
  }
  v118 = v120;
  v119 = 0x400000000;
  v55 = *(_QWORD *)(v4 + 120);
  v56 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v56 && *(_BYTE *)(v56 + 16) == 26)
  {
    v57 = v78;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    {
      v58 = 0;
      v57 = v78;
      goto LABEL_47;
    }
    v56 = sub_22F10CF48(v56);
    v57 = v78;
    if (!v56)
    {
      v58 = 0;
      goto LABEL_47;
    }
  }
  v58 = (unsigned __int16)(*(_QWORD *)(v56 + 16) >> 38);
LABEL_47:
  v59 = v57 == 3;
  if (v58 != v59)
  {
    v72 = (uint64_t *)(v55 + 8 * v59);
    v73 = 8 * v58 - 8 * v59;
    do
    {
      v74 = sub_22EFBC5B4(*v72);
      v75 = v74;
      if (v74 && (*(_BYTE *)v74 & 0xFE) == 0xAC)
        v75 = *(_QWORD *)(v74 + 16);
      v76 = v119;
      if (v119 >= (unint64_t)HIDWORD(v119))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v76 = v119;
      }
      *((_QWORD *)v118 + v76) = v75;
      LODWORD(v119) = v119 + 1;
      ++v72;
      v73 -= 8;
    }
    while (v73);
  }
  v60 = v140 - v141;
  v61 = v142;
  v62 = v144;
  v144 = 0;
  v63 = v143;
  v143 = v140 - v141;
  v64 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v64)
    v65 = *(_BYTE *)(v64 + 16) == 26;
  else
    v65 = 0;
  if (!v65)
    v64 = sub_22F10CF48(v64);
  sub_22E477B1C((uint64_t)v136, (uint64_t)&v121, v64 & 0xFFFFFFFFFFFFFFFBLL, (uint64_t)v118, (unint64_t *)v118 + v119, v4, v59, 0);
  v66 = sub_22E46B5DC(v5, (uint64_t)v136, v4, 0, 0, 0, (uint64_t)&v121);
  v67 = v66;
  v68 = HIDWORD(v66);
  sub_22E46A4BC(*(_QWORD *)(v5 + 8), v4 & 0xFFFFFFFFFFFFFFF8, 0, 0, 0, 0, 0);
  v104 = v69;
  v105 = 0;
  v106 = v4 & 0xFFFFFFFFFFFFFFF8;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v70 = sub_22E46CBC8((_QWORD **)(*(_QWORD *)(v5 + 8) + 280), &v121, v4, 0, v67, v68, 1);
  memset(v113, 0, sizeof(v113));
  v114 = 0;
  v116 = 0;
  v115 = 0;
  v117 = 0;
  sub_22E47A004((unint64_t)v136, v70, (uint64_t)&v104, (uint64_t)v113, (uint64_t)&v121, 0, 0, 0, (uint64_t)v79, 0);
  v144 = v62;
  sub_22E48B274(v136, v60, v61, 0, 0);
  v143 = v63;
  sub_22E619DE8((uint64_t)v136, 0);
  if (v118 != v120)
    free(v118);
  if (v130 != v132)
    free(v130);
  if (v127 != v129)
    free(v127);
  if (v124 != v126)
    free(v124);
  if (v121 != v123)
    free(v121);
  sub_22E48F084(v81);
  sub_22E48F084(v82);
  if (v133 != v135)
    free(v133);
  sub_22E619434((uint64_t)v136);
LABEL_66:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v103);
  if (v148 != v150)
    free(v148);
  return NamedValue;
}

_QWORD *sub_22E695680(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  llvm *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v16 = (37 * v15) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == -2;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          v19 = *((_QWORD *)v14 + 1);
          *v17 = v15;
          v17[1] = v19;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 = (llvm *)((char *)v14 + 16);
      }
      while (v14 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24)
    {
      v25 = 16 * v24;
      do
      {
        *result = -1;
        result += 2;
        v25 -= 16;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_22E6957F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t result;
  _WORD v8[20];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v9[1] = *(_QWORD *)(a1 + 96);
  v4 = llvm::FunctionType::get();
  v9[0] = a2;
  v5 = sub_22E633A04(*(_QWORD *)(a1 + 144), v4, "__RTtypeid", 0xAuLL, 0, 0, 0);
  v8[16] = 257;
  result = sub_22F24F1F4((_QWORD *)a1, v5, v6, (uint64_t)v9, 1, (uint64_t)v8);
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
  return result;
}

uint64_t sub_22E6958CC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  llvm::GetElementPtrInst *v28;
  uint64_t result;
  uint64_t v30;
  __int128 v31;
  _OWORD v32[3];
  _BYTE v33[32];
  __int16 v34;
  __int128 v35[3];
  _OWORD v36[2];
  __int128 v37;

  v10 = a3 + 34;
  v11 = *(_OWORD *)(a4 + 16);
  v35[0] = *(_OWORD *)a4;
  v35[1] = v11;
  v35[2] = *(_OWORD *)(a4 + 32);
  v12 = a3[1];
  v34 = 257;
  sub_22E3BEE6C(v10, v35, v12, (uint64_t)v33, (uint64_t)v36);
  v13 = v36[1];
  *(_OWORD *)a4 = v36[0];
  *(_OWORD *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 32) = v37;
  v14 = sub_22F10C2A4(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
  if (v14)
  {
    if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(a2[1] + 144);
  if ((*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(v16, v15) + 72) + 40) & 2) != 0)
  {
    result = llvm::ConstantInt::get();
    v31 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v31;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(a1 + 48) = result;
    v23 = v15;
  }
  else
  {
    v17 = sub_22E483108(v15);
    if (v17 == v18)
    {
LABEL_18:
      v23 = 0;
    }
    else
    {
      v19 = v17;
      v20 = v18;
      while (1)
      {
        v21 = *(_QWORD *)(**(_QWORD **)(v19 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
          v21 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v19 + 16));
        v22 = sub_22F10C2A4(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
        if (v22)
          v23 = (*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v22;
        else
          v23 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(sub_22F0C975C(v16, v23) + 72) + 40) & 2) != 0)
          break;
        v19 += 24;
        if (v19 == v20)
          goto LABEL_18;
      }
    }
    v24 = *(_OWORD *)(a4 + 16);
    v32[0] = *(_OWORD *)a4;
    v32[1] = v24;
    v32[2] = *(_OWORD *)(a4 + 32);
    v25 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD *, _OWORD *, unint64_t, unint64_t))(*a2 + 344))(a2, a3, v32, v15, v23);
    v26 = *(_QWORD *)(a4 + 8);
    if ((*(_BYTE *)(a4 + 24) & 3) != 0)
      v27 = (uint64_t *)sub_22F28ABCC((_OWORD *)a4, a3);
    else
      v27 = *(uint64_t **)a4;
    LOWORD(v37) = 257;
    v28 = sub_22E3E5044(v10, v26, v27, v25, (uint64_t)v36);
    result = sub_22E47FF54(a3[18], *(_QWORD *)(a4 + 16), v15, v23);
    v30 = a3[1];
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = result;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v25;
  }
  *(_QWORD *)(a1 + 56) = v23;
  return result;
}

uint64_t sub_22E695B1C(uint64_t a1, _BYTE *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t ***v10;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  llvm::ArrayType *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48[2];
  __int128 v49;
  uint64_t v50;
  void *v51;
  void *v52[2];
  uint64_t v53;
  _QWORD v54[33];

  v54[31] = *MEMORY[0x24BDAC8D0];
  v48[0] = 0;
  v49 = 0u;
  v50 = 0;
  v48[1] = (char *)&v49 + 8;
  DWORD1(v49) = 2;
  v51 = a2;
  v52[0] = 0;
  v52[1] = v54;
  v53 = 0x200000000;
  v45 = 0;
  v4 = sub_22E696050(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 152), (uint64_t)a2, &v45);
  v5 = v4;
  v6 = v45;
  if (v4)
    goto LABEL_10;
  v46 = v45;
  v7 = *(_DWORD *)(a1 + 144);
  v8 = *(unsigned int *)(a1 + 152);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v9 = 2 * v8;
    goto LABEL_37;
  }
  v9 = *(_DWORD *)(a1 + 152);
  if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 148) <= v8 >> 3)
  {
LABEL_37:
    v28 = *(llvm **)(a1 + 136);
    v29 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
    v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
    v31 = ((v30 | (v30 >> 8)) >> 16) | v30 | (v30 >> 8);
    if ((v31 + 1) > 0x40)
      v32 = (v31 + 1);
    else
      v32 = 64;
    *(_DWORD *)(a1 + 152) = v32;
    v33 = MEMORY[0x23489D23C]((_QWORD *)v32, 48 * v32, 8);
    *(_QWORD *)(a1 + 136) = v33;
    v44 = v28;
    if (v28)
    {
      *(_QWORD *)(a1 + 144) = 0;
      v34 = *(unsigned int *)(a1 + 152);
      if ((_DWORD)v34)
      {
        v35 = 48 * v34;
        do
        {
          *v33 = -4096;
          v33 += 6;
          v35 -= 48;
        }
        while (v35);
      }
      if ((_DWORD)v8)
      {
        v36 = (uint64_t)v28 + 16;
        v37 = 48 * v8;
        do
        {
          v38 = *(_QWORD *)(v36 - 16);
          if ((v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v47 = 0;
            sub_22E696050(*(_QWORD *)(a1 + 136), *(_DWORD *)(a1 + 152), v38, &v47);
            v39 = v47;
            *v47 = v38;
            v39[1] = *(_QWORD *)(v36 - 8);
            v39[3] = 0x200000000;
            v39[2] = (uint64_t)(v39 + 4);
            v40 = (uint64_t)(v39 + 2);
            if (*(_DWORD *)(v36 + 8))
              sub_22F24C77C(v40, v36);
            ++*(_DWORD *)(a1 + 144);
            if (v36 + 16 != *(_QWORD *)v36)
              free(*(void **)v36);
          }
          v36 += 48;
          v37 -= 48;
        }
        while (v37);
      }
      llvm::deallocate_buffer(v44, (void *)(48 * v8));
      v33 = *(_QWORD **)(a1 + 136);
      LODWORD(v41) = *(_DWORD *)(a1 + 152);
    }
    else
    {
      *(_QWORD *)(a1 + 144) = 0;
      v41 = *(unsigned int *)(a1 + 152);
      if ((_DWORD)v41)
      {
        v42 = 0;
        do
        {
          v33[v42] = -4096;
          v42 += 6;
        }
        while (6 * v41 != v42);
      }
    }
    sub_22E696050((uint64_t)v33, v41, (uint64_t)v51, &v46);
    v7 = *(_DWORD *)(a1 + 144);
    v6 = v46;
  }
  *(_DWORD *)(a1 + 144) = v7 + 1;
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 148);
  *(_QWORD *)v6 = v51;
  *(void **)(v6 + 8) = v52[0];
  *(_QWORD *)(v6 + 16) = v6 + 32;
  *(_QWORD *)(v6 + 24) = 0x200000000;
  if ((_DWORD)v53)
    sub_22F24C77C(v6 + 16, (uint64_t)&v52[1]);
  if (v52[1] != v54)
    free(v52[1]);
LABEL_10:
  if (v48[1] != (char *)&v49 + 8)
    free(v48[1]);
  v10 = (uint64_t ***)(v6 + 8);
  if ((v5 & 1) == 0)
  {
    *v10 = (uint64_t **)(sub_22F129AE4(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 712), (uint64_t)a2) + 24);
    sub_22F296010(*(_QWORD *)(a1 + 8), (uint64_t)a2);
    v12 = *v10;
    v13 = *((unsigned int *)*v10 + 2);
    if ((_DWORD)v13)
    {
      v14 = *v12;
      v43 = (uint64_t)&(*v12)[v13];
      do
      {
        v15 = *v14;
        v51 = &v53;
        *(_OWORD *)v52 = xmmword_22F44E320;
        sub_22F242C48((uint64_t)v48, (uint64_t)&v51);
        (*(void (**)(_QWORD, _BYTE *, _QWORD, _QWORD, void **))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16), a2, *(_QWORD *)(v15 + 24), *(unsigned int *)(v15 + 32), v48);
        v16 = v51;
        v17 = v52[0];
        v18 = *(llvm::ArrayType **)(*(_QWORD *)(a1 + 8) + 72);
        v19 = *(_QWORD *)v15;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v15 + 104) + 96), *(_QWORD *)(*(_QWORD *)v15 + 104));
        v20 = llvm::ArrayType::get(v18, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)(v19 + 128) + 20) + 1));
        sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144) + 16480));
        v21 = sub_22E63402C(*(_QWORD *)(a1 + 8), (uint64_t)v16, (uint64_t)v17, v20);
        *((_DWORD *)v21 + 8) = *((_DWORD *)v21 + 8) & 0xFFFFFF3F | 0x80;
        if (sub_22E49F808((uint64_t)a2))
        {
          v22 = 256;
        }
        else
        {
          if ((a2[29] & 1) == 0)
            goto LABEL_20;
          sub_22EFC8E88((uint64_t)a2);
          v25 = *((unsigned int *)v24 + 2);
          if ((_DWORD)v25)
          {
            v26 = 8 * v25;
            v27 = *v24;
            while (*(_WORD *)(*(_QWORD *)v27 + 32) != 155)
            {
              v27 += 8;
              v26 -= 8;
              if (!v26)
                goto LABEL_20;
            }
          }
          else
          {
            v27 = *v24;
          }
          if (v27 == *v24 + 8 * v25)
            goto LABEL_20;
          v22 = 512;
        }
        *((_DWORD *)v21 + 8) = *((_DWORD *)v21 + 8) & 0xFFFFFCFF | v22;
LABEL_20:
        if ((*((_BYTE *)v21 + 32) & 0xF) != 0)
          sub_22E6960E8(a1, v15, (unint64_t)a2, v21);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v48);
        if (v51 != &v53)
          free(v51);
        v23 = *(unsigned int *)(v6 + 24);
        if (v23 >= *(unsigned int *)(v6 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *(unsigned int *)(v6 + 24);
        }
        *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v23) = v21;
        ++*(_DWORD *)(v6 + 24);
        ++v14;
      }
      while (v14 != (uint64_t *)v43);
    }
  }
  return v6 + 8;
}

uint64_t sub_22E696050(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 48 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 48 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void sub_22E6960E8(uint64_t a1, uint64_t a2, unint64_t a3, llvm::GlobalValue *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  void *v22;
  llvm::Type *v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(a2 + 8));
  v21 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a3);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
  v8 = (*(_DWORD *)(*(_QWORD *)(v7 + 128) + 20) + 1);
  v22 = v24;
  v23 = (llvm::Type *)0x400000000;
  sub_22E4639CC((uint64_t)&v22, v8, 0);
  *(_QWORD *)v22 = llvm::ConstantInt::get();
  v9 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 712);
  v10 = sub_22E483108(v7);
  if (v10 != v11)
  {
    v12 = v10;
    v13 = v11;
    do
    {
      v14 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
        v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
      v15 = sub_22F10C2A4(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 >= 3)
          v16 = 0;
        else
          v16 = v15;
      }
      else
      {
        v16 = 0;
      }
      sub_22F2500F4(v21, v16);
      if (*(_DWORD *)(a2 + 64))
      {
        v17 = **(_QWORD **)(a2 + 56);
        if (v17)
          sub_22F2500F4(v21, v17);
      }
      v18 = sub_22F40C330(v9, v7, v16);
      *((_QWORD *)v22 + v18) = llvm::ConstantInt::get();
      v12 += 24;
    }
    while (v12 != v13);
  }
  llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(a1 + 8) + 72), (llvm::Type *)v23);
  llvm::ConstantArray::get();
  llvm::GlobalVariable::setInitializer();
  if (sub_22E49F808(a3))
  {
    v19 = *((_DWORD *)a4 + 8);
    *((_DWORD *)a4 + 8) = v19 & 0xFFFFFFF0 | 1;
    if ((v19 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(a4) & 1) == 0)
      *((_DWORD *)a4 + 8) |= 0x4000u;
  }
  if (v22 != v24)
    free(v22);
}

llvm::Value *sub_22E696358(uint64_t *a1)
{
  llvm::Value *GlobalVariable;
  char v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::ArrayType *v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  llvm::Constant *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  llvm::Constant *v38;
  llvm::Constant *v39;
  uint64_t v40;
  uint64_t NullValue;
  unsigned int v42;
  uint64_t v43;
  llvm::Constant *ElementPtr;
  llvm::Constant *v45;
  uint64_t v46;
  _QWORD v47[5];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[9];
  void *v55;
  __int128 v56;
  _BYTE v57[89];
  void *v58;
  uint64_t v59;
  _BYTE v60[64];
  void *v61;
  __int128 v62;
  _BYTE v63[256];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  llvm::Constant *v67;
  _BYTE v68[24];
  llvm::Constant *v69;
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v55 = v57;
  v56 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v68, (uint64_t)&v55);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(a1[6] + 16) + 312))(*(_QWORD *)(a1[6] + 16), a1[4], v68);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v68);
  GlobalVariable = (llvm::Value *)llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v52 = v54;
    v53 = 0x800000000;
    sub_22E693F1C((uint64_t)&v52, a1[4]);
    sub_22E694058((uint64_t)v52, 0, 0);
    sub_22E69427C((uint64_t)&v52);
    if ((_DWORD)v53)
    {
      v4 = 0;
      v5 = (char *)v52;
      v6 = (char *)v52 + 32 * v53;
      do
      {
        v7 = *(_QWORD *)v5;
        v8 = *((_DWORD *)v5 + 4);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v5 + 104) + 96), *(_QWORD *)(*(_QWORD *)v5 + 104));
        v4 |= (2 * v8) & 4 | (*(_DWORD *)(*(_QWORD *)(v7 + 128) + 16) > 1u);
        v5 += 32;
      }
      while (v5 != v6);
      if ((v4 & 1) != 0)
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1[4] + 104) + 96), *(_QWORD *)(a1[4] + 104));
    }
    v50 = llvm::ConstantInt::get();
    v51 = llvm::ConstantInt::get();
    sub_22E696C08(a1[6]);
    GlobalVariable = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    v70 = 261;
    *(_QWORD *)v68 = v55;
    *(_QWORD *)&v68[8] = v56;
    v9 = llvm::GlobalVariable::GlobalVariable();
    if ((*(_DWORD *)(v9 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v9 + 32) & 0xF)) & 0x63C) != 0)
    {
      llvm::Value::getName(GlobalVariable);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
    v61 = v63;
    v62 = xmmword_22F44E320;
    sub_22F242C48((uint64_t)v68, (uint64_t)&v61);
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(**(_QWORD **)(a1[6] + 16) + 304))(*(_QWORD *)(a1[6] + 16), a1[4], v68);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v68);
    v10 = a1[6];
    sub_22E696CE0(v10);
    v11 = (llvm::ArrayType *)llvm::PointerType::get();
    v12 = *(_QWORD *)(v10 + 8);
    if (*(_BYTE *)(*(_QWORD *)(v12 + 216) + *(_QWORD *)(**(_QWORD **)(v12 + 216) - 24)) == 64)
      v11 = *(llvm::ArrayType **)(v12 + 72);
    v45 = v11;
    llvm::ArrayType::get(v11, (llvm::Type *)(v53 + 1));
    v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    v70 = 261;
    *(_QWORD *)v68 = v61;
    *(_QWORD *)&v68[8] = v62;
    v14 = llvm::GlobalVariable::GlobalVariable();
    if ((*(_DWORD *)(v14 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v14 + 32) & 0xF)) & 0x63C) != 0)
    {
      llvm::Value::getName(v13);
      llvm::Module::getOrInsertComdat();
      llvm::GlobalObject::setComdat();
    }
    v58 = v60;
    v59 = 0x800000000;
    if ((_DWORD)v53)
    {
      v16 = 32 * v53;
      v17 = (unsigned int *)((char *)v52 + 16);
      do
      {
        v46 = a1[6];
        v18 = *((_QWORD *)v17 - 1);
        if (v18)
        {
          v19 = 4 * sub_22F40C330(*(uint64_t **)(*a1 + 712), a1[4], v18);
          v20 = *(unsigned int *)(*(_QWORD *)(sub_22F0C975C(a1[1], a1[4]) + 72) + 32);
        }
        else
        {
          v19 = 0;
          v20 = 0xFFFFFFFFLL;
        }
        *(_QWORD *)v68 = &v69;
        *(_OWORD *)&v68[8] = xmmword_22F44E320;
        sub_22F242C48((uint64_t)&v64, (uint64_t)v68);
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1[6] + 16)
                                                                                             + 296))(*(_QWORD *)(a1[6] + 16), *((_QWORD *)v17 - 2), v17[2], v20, v19, *v17, &v64);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v64);
        v21 = (llvm::Value *)llvm::Module::getGlobalVariable();
        if (!v21)
        {
          sub_22E696CE0(a1[6]);
          v21 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
          LOWORD(v66) = 261;
          v64 = *(_OWORD *)v68;
          v22 = llvm::GlobalVariable::GlobalVariable();
          if ((*(_DWORD *)(v22 + 32) & 0xFu) <= 0xA && ((1 << (*(_DWORD *)(v22 + 32) & 0xF)) & 0x63C) != 0)
          {
            llvm::Value::getName(v21);
            llvm::Module::getOrInsertComdat();
            llvm::GlobalObject::setComdat();
          }
          v67 = 0;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          v23 = a1[6];
          v24 = *((_QWORD *)v17 - 2);
          v25 = *(_QWORD *)(v24 + 48);
          if (v25)
            v26 = v25 & 0xFFFFFFFFFFFFFFF0;
          else
            v26 = sub_22EF6462C(a1[1], v24);
          v27 = (llvm::Constant *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 264))(v23, v26);
          *(_QWORD *)&v64 = sub_22E693DD4(v23, v27);
          *((_QWORD *)&v64 + 1) = llvm::ConstantInt::get();
          *(_QWORD *)&v65 = llvm::ConstantInt::get();
          *((_QWORD *)&v65 + 1) = llvm::ConstantInt::get();
          *(_QWORD *)&v66 = llvm::ConstantInt::get();
          *((_QWORD *)&v66 + 1) = llvm::ConstantInt::get();
          v28 = a1[6];
          v29 = *((_QWORD *)v17 - 2);
          v30 = *(_QWORD **)(v28 + 8);
          v31 = v30[18];
          v47[0] = v30;
          v47[1] = v31;
          v32 = v30[29];
          v33 = v30[25];
          v47[2] = v32;
          v47[3] = v33;
          v47[4] = v29;
          v34 = *(_QWORD *)(v29 + 48);
          if (v34)
            v35 = v34 & 0xFFFFFFFFFFFFFFF0;
          else
            v35 = sub_22EF6462C(v31, v29);
          v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
          sub_22F114870(v36);
          if ((*(_DWORD *)(v36 + 16) & 0x1C000u) >= 0xC000)
            v37 = 3;
          else
            v37 = 7;
          v48 = v37;
          v49 = v28;
          v38 = (llvm::Constant *)sub_22E696358(v47);
          v67 = sub_22E693DD4(v28, v38);
          llvm::ConstantStruct::get();
          llvm::GlobalVariable::setInitializer();
        }
        if (*(llvm::Constant ***)v68 != &v69)
          free(*(void **)v68);
        v39 = sub_22E693DD4(v46, v21);
        v40 = v59;
        if (v59 >= (unint64_t)HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v40 = v59;
        }
        *((_QWORD *)v58 + v40) = v39;
        LODWORD(v59) = v59 + 1;
        v17 += 8;
        v16 -= 32;
      }
      while (v16);
    }
    NullValue = llvm::Constant::getNullValue(v45, v15);
    v42 = v59;
    if (v59 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = v59;
    }
    *((_QWORD *)v58 + v42) = NullValue;
    LODWORD(v59) = v59 + 1;
    llvm::ConstantArray::get();
    llvm::GlobalVariable::setInitializer();
    if (v58 != v60)
      free(v58);
    if (v61 != v63)
      free(v61);
    *(_QWORD *)v68 = llvm::ConstantInt::get();
    *(_QWORD *)&v68[8] = llvm::ConstantInt::get();
    *(_QWORD *)&v68[16] = llvm::ConstantInt::get();
    v43 = a1[6];
    ElementPtr = (llvm::Constant *)llvm::ConstantExpr::getGetElementPtr();
    v69 = sub_22E693DD4(v43, ElementPtr);
    llvm::ConstantStruct::get();
    llvm::GlobalVariable::setInitializer();
    if (v52 != v54)
      free(v52);
  }
  if (v55 != v57)
    free(v55);
  return GlobalVariable;
}

uint64_t sub_22E696C08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 264);
  if (!result)
  {
    *(_QWORD *)(a1 + 264) = llvm::StructType::create();
    sub_22E696CE0(a1);
    llvm::PointerType::get();
    llvm::PointerType::get();
    llvm::StructType::setBody();
    return *(_QWORD *)(a1 + 264);
  }
  return result;
}

uint64_t sub_22E696CE0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 256);
  if (!result)
  {
    sub_22E696C08(a1);
    llvm::PointerType::get();
    result = llvm::StructType::create();
    *(_QWORD *)(a1 + 256) = result;
  }
  return result;
}

_OWORD *sub_22E696DC8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2A269C(a1, v4, &v4[3 * v3]);
    return (_OWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45B630;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E696E98(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, llvm::GetElementPtrInst **a6)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[3];

  v10 = llvm::ConstantInt::get();
  v11 = llvm::ConstantInt::get();
  v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  return sub_22E692524(a1, a2, (uint64_t)v14, v10, v11, a6);
}

uint64_t sub_22E696F34(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  llvm *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v24 = 0;
  v4 = sub_22E697138(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v25 = v24;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(llvm **)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = (v13 + 1);
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = MEMORY[0x23489D23C]((_QWORD *)v14, 24 * v14, 8);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 24 * v16;
        do
        {
          *v15 = -4096;
          v15 += 3;
          v17 -= 24;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = (_OWORD *)((char *)v10 + 8);
        v19 = 24 * v7;
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v26 = 0;
            sub_22E697138(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            v21 = v26;
            *v26 = v20;
            *(_OWORD *)(v21 + 1) = *v18;
            ++*(_DWORD *)(a1 + 8);
          }
          v18 = (_OWORD *)((char *)v18 + 24);
          v19 -= 24;
        }
        while (v19);
      }
      llvm::deallocate_buffer(v10, (void *)(24 * v7));
      v15 = *(_QWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          v15[v23] = -4096;
          v23 += 3;
        }
        while (3 * v22 != v23);
      }
    }
    sub_22E697138((uint64_t)v15, v22, *a2, &v25);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  return v5 + 8;
}

uint64_t sub_22E697138(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_22E6971D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  __int128 v8;
  _OWORD v10[3];
  _BYTE v11[32];
  __int16 v12;
  _OWORD v13[3];

  v3 = a2 + 272;
  v4 = *(_OWORD *)(a1 + 24);
  v13[0] = *(_OWORD *)(a1 + 8);
  v13[1] = v4;
  v13[2] = *(_OWORD *)(a1 + 40);
  v12 = 257;
  v5 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v13, (uint64_t)v11);
  v6 = llvm::ConstantInt::get();
  v12 = 257;
  v7 = (llvm::Type **)sub_22E3E49C4(v3, v5, v6, (uint64_t)v11);
  v8 = *(_OWORD *)(a1 + 24);
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a1 + 40);
  return sub_22E3BEDDC(v3, v7, (uint64_t)v10);
}

llvm::Value *sub_22E697298(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  _DWORD v10[8];
  __int16 v11;

  v4 = *((_QWORD *)a2 + 18);
  llvm::Type::getVoidTy(*(llvm::Type **)(v4 + 232), a2);
  v10[1] = (unint64_t)llvm::PointerType::get() >> 32;
  v5 = llvm::FunctionType::get();
  v10[0] = 37;
  v6 = llvm::AttributeList::get();
  v7 = sub_22E633A04(v4, v5, "_Init_thread_abort", 0x12uLL, v6, 1, 0);
  v11 = 257;
  return sub_22F24EEDC((uint64_t)a2, v7, v8, a1 + 8, 1, (uint64_t)v10);
}

unint64_t sub_22E69736C(uint64_t a1)
{
  uint64_t v1;
  int Key;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 1816);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v1 + 1568))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 1560) + 8 * Key) + 8) & 0xFFFFFFFFFFFFFFF8;
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 32))(v4);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 28);
  if ((v7 & 0x7Eu) - 52 >= 6)
    v8 = 0;
  else
    v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  v11 = v8;
  if (v8)
  {
    if (sub_22EFBF6E8(v8, &v11))
      return v11;
    else
      return v6;
  }
  else
  {
    v9 = (v7 & 0x7F) - 38;
    if (v6)
      v10 = v9 >= 0xFFFFFFFB;
    else
      v10 = 0;
    if (!v10)
      return v6;
    result = sub_22EFC3500(v6);
    if (!result)
      return v6;
  }
  return result;
}

uint64_t sub_22E697430(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, llvm::LLVMContext *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  llvm::LLVMContext *v23;

  v17 = operator new();
  v18 = *a4;
  *a4 = 0;
  *(_BYTE *)(v17 + 8) = 0;
  *(_QWORD *)v17 = &off_24FA68B50;
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = a5;
  *(_QWORD *)(v17 + 48) = a6;
  sub_22E617234(v17 + 56, (__int128 *)a7);
  *(_DWORD *)(v17 + 1784) = 0;
  *(_QWORD *)(v17 + 1792) = a9;
  *(_QWORD *)(v17 + 1800) = a10;
  v19 = operator new();
  if (a3 != 1)
    goto LABEL_11;
  if (*a2 != 45)
  {
    a3 = 1;
LABEL_11:
    v23 = a8;
    goto LABEL_12;
  }
  v20 = *(_BYTE *)(a7 + 583);
  v21 = v20;
  v22 = v20 & 0x7F;
  if (v21 >= 0)
    a3 = v22;
  else
    a3 = *(_QWORD *)(a7 + 568);
  v23 = a8;
  if (a3)
  {
    if (v21 >= 0)
      a2 = (_BYTE *)(a7 + 560);
    else
      a2 = *(_BYTE **)(a7 + 560);
  }
  else
  {
    a3 = 1;
  }
LABEL_12:
  *(_QWORD *)(v17 + 1808) = MEMORY[0x23489F150](v19, a2, a3, v23);
  *(_QWORD *)(v17 + 1816) = 0;
  *(_QWORD *)(v17 + 1824) = v17 + 1840;
  *(_QWORD *)(v17 + 1832) = 0x800000000;
  llvm::LLVMContext::setDiscardValueNames(v23);
  return v17;
}

_QWORD *sub_22E6975A8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *a1 = &off_24FA68B50;
  v2 = (_QWORD *)a1[228];
  if (v2 != a1 + 230)
    free(v2);
  v3 = a1[227];
  a1[227] = 0;
  if (v3)
  {
    v4 = sub_22E624358(v3);
    MEMORY[0x2348A0E9C](v4, 0x10F2C407280FB28);
  }
  v5 = a1[226];
  a1[226] = 0;
  if (v5)
  {
    v6 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v6, 0x10B2C407FF26C1CLL);
  }
  sub_22E618378((uint64_t)(a1 + 7));
  v7 = (unsigned int *)a1[4];
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

void sub_22E697664(_QWORD *a1)
{
  sub_22E6975A8(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E697688(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  a1[3] = (uint64_t)a2;
  v4 = a1[226];
  v5 = a2[1886];
  v8 = *(void **)(v5 + 32);
  v6 = v5 + 32;
  v7 = v8;
  v9 = *(_BYTE *)(v6 + 23);
  if (v9 >= 0)
    v10 = (void *)v6;
  else
    v10 = v7;
  v11 = *(_QWORD *)(v6 + 8);
  if (v9 >= 0)
    v12 = v9 & 0x7F;
  else
    v12 = v11;
  sub_22E616030(v4, v10, v12);
  v13 = *(_QWORD *)(a1[3] + 15088);
  v14 = (const char *)(v13 + 104);
  if ((*(char *)(v13 + 127) & 0x80000000) == 0 || (v14 = *(const char **)v14) != 0)
    strlen(v14);
  llvm::Module::setDataLayout();
  v15 = *(_QWORD *)(a1[3] + 15088);
  if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 344) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 352) & 0x7FFFFFFF7FFFFFFFLL)
  {
    llvm::Module::setSDKVersion();
    v15 = *(_QWORD *)(a1[3] + 15088);
  }
  if (*(_BYTE *)(v15 + 352))
  {
    llvm::Module::setDarwinTargetVariantTriple();
    v15 = *(_QWORD *)(a1[3] + 15088);
  }
  if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 384) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 392) & 0x7FFFFFFF7FFFFFFFLL)
    llvm::Module::setDarwinTargetVariantSDKVersion();
  v16 = operator new();
  v17 = a1[4];
  v35 = v17;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = sub_22E622D98(v16, a2, &v35, a1[5], a1[6], (uint64_t)(a1 + 7), (llvm::Type **)a1[226], a1[2], a1[224], a1[225]);
  v21 = a1[227];
  a1[227] = v20;
  if (v21)
  {
    v22 = sub_22E624358(v21);
    MEMORY[0x2348A0E9C](v22, 0x10F2C407280FB28);
  }
  if (v17)
  {
    v23 = (unsigned int *)(v17 + 8);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v26 = a1[93];
  v27 = a1[94];
  while (v26 != v27)
  {
    v28 = *(_BYTE *)(v26 + 23);
    v29 = v28 < 0;
    if (v28 >= 0)
      v30 = v26;
    else
      v30 = *(_QWORD *)v26;
    v31 = v28 & 0x7F;
    if (v29)
      v32 = *(_QWORD *)(v26 + 8);
    else
      v32 = v31;
    sub_22F299E04(a1[227], v30, v32);
    v26 += 24;
  }
  v33 = a1[96];
  v34 = a1[97];
  while (v33 != v34)
  {
    sub_22F299C40(a1[227]);
    v33 += 24;
  }
}

uint64_t sub_22E6978E0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 168))
  {
    v3 = *(_DWORD *)(a1 + 1784) + 1;
    *(_DWORD *)(a1 + 1784) = v3;
    if (a2)
      v4 = &v10;
    else
      v4 = 0;
    if ((a2 & 1) != 0)
      v5 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 8;
    else
      v5 = (unint64_t)v4;
    if ((a2 & 1) != 0)
    {
      v6 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFELL));
    }
    else if (a2)
    {
      v6 = &v11;
    }
    else
    {
      v6 = 0;
    }
    if ((uint64_t *)v5 != v6)
    {
      do
      {
        v5 += 8;
        sub_22E6346B8();
      }
      while ((uint64_t *)v5 != v6);
      v3 = *(_DWORD *)(a1 + 1784);
    }
    *(_DWORD *)(a1 + 1784) = v3 - 1;
    if (v3 == 1 && *(_DWORD *)(a1 + 1832))
    {
      v7 = 0;
      *(_DWORD *)(a1 + 1784) = 1;
      do
      {
        sub_22E6346B8();
        ++v7;
      }
      while (v7 != *(_DWORD *)(a1 + 1832));
      v8 = *(_DWORD *)(a1 + 1784);
      *(_DWORD *)(a1 + 1832) = 0;
      *(_DWORD *)(a1 + 1784) = v8 - 1;
    }
  }
  return 1;
}

uint64_t sub_22E6979D0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)(*(_QWORD *)(result + 16) + 168))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 1832);
    if (v4 >= *(_DWORD *)(result + 1836))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *(_DWORD *)(v3 + 1832);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 1824) + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 1832);
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 8);
    result = sub_22EFC7ADC(v6);
    if ((result & 1) == 0)
      return sub_22E636D30(*(_QWORD *)(v3 + 1816), a2);
  }
  return result;
}

void sub_22E697A68(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1[2] + 168) || a1[227] && (sub_22E624B74(), *(_BYTE *)(a1[2] + 168)))
  {
    v2 = (_QWORD *)a1[227];
    if (v2)
    {
      v2[135] = v2[134];
      v3 = v2[101];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    }
    v4 = a1[226];
    a1[226] = 0;
    if (v4)
    {
      MEMORY[0x23489F15C]();
      JUMPOUT(0x2348A0E9CLL);
    }
  }
}

void sub_22E697AF8(uint64_t a1, unint64_t a2)
{
  unint64_t i;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  char v9;
  _BOOL4 v10;
  int v11;
  unint64_t j;
  unint64_t v13;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 168))
  {
    ++*(_DWORD *)(a1 + 1784);
    sub_22E66D7EC(*(_QWORD *)(a1 + 1816) + 280, a2);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 15088) + 148) == 11)
    {
      if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
        sub_22EFCC320(a2 + 64);
      for (i = *(_QWORD *)(a2 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if ((*(_DWORD *)(i + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
          && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 15088) + 148) == 11
          && (*(_DWORD *)(i + 28) & 0x7F) != 0x40)
        {
          v13 = i;
          v5 = *(_QWORD *)(i + 16);
          v6 = v5 & 0xFFFFFFFFFFFFFFF8;
          if ((v5 & 4) != 0)
            v6 = *(_QWORD *)v6;
          v7 = (*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3;
          i = v13;
          if (!v7)
          {
            v8 = sub_22E9D848C(*(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0));
            i = v13;
            if (v8)
            {
              v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 80) + 24))(*(_QWORD *)(v13 + 80));
              i = v13;
              if ((v9 & 1) == 0)
              {
                v10 = sub_22EFBC270(*(_QWORD *)(v13 + 80));
                i = v13;
                if (v10)
                {
                  v11 = sub_22EF736B8(*(_QWORD **)(a1 + 24), v13);
                  i = v13;
                  if (v11)
                  {
                    sub_22E62F700();
                    i = v13;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 2000) + 72))
    {
      if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
        sub_22EFCC320(a2 + 64);
      for (j = *(_QWORD *)(a2 + 80); j; j = *(_QWORD *)(j + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if ((*(_DWORD *)(j + 28) & 0x7F) == 0x46)
        {
          if (!sub_22EF736B8(*(_QWORD **)(a1 + 24), j))
            continue;
        }
        else if ((*(_DWORD *)(j + 28) & 0x7F) != 0x47 || (sub_22EF736B8(*(_QWORD **)(a1 + 24), j) & 1) == 0)
        {
          continue;
        }
        sub_22E62F700();
      }
    }
    --*(_DWORD *)(a1 + 1784);
  }
}

uint64_t sub_22E697CD8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  if (!*(_BYTE *)(*(_QWORD *)(result + 16) + 168))
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 1784);
    *(_DWORD *)(result + 1784) = v3 + 1;
    result = *(_QWORD *)(*(_QWORD *)(result + 1816) + 824);
    if (result && a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 38 >= 0xFFFFFFFC)
    {
      result = sub_22F256044(result, a2);
      v3 = *(_DWORD *)(v2 + 1784) - 1;
    }
    *(_DWORD *)(v2 + 1784) = v3;
  }
  return result;
}

void sub_22E697D44(uint64_t a1, unint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 168))
    sub_22E6341BC(*(_QWORD *)(a1 + 1816), a2);
}

uint64_t sub_22E697D5C(uint64_t a1, unint64_t a2)
{
  return sub_22F29B6C0(*(_QWORD *)(a1 + 1816), a2);
}

uint64_t sub_22E697D64(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)(result + 16) + 168))
    return sub_22F29EA6C(*(_QWORD *)(result + 1816) + 280, a2);
  return result;
}

void sub_22E697D80(uint64_t a1, unint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 168))
    sub_22E6343B0(*(_QWORD *)(a1 + 1816), a2);
}

uint64_t sub_22E697D98(uint64_t result, unint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)(result + 16) + 168))
    return sub_22F2961B8(*(_QWORD *)(result + 1816) + 704, a2);
  return result;
}

void sub_22E697DB4(uint64_t *a1, llvm::Value *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  int i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *__p[2];
  uint64_t v31;

  if ((*(_BYTE *)(*(_QWORD *)(*a1 + 152) + 256) & 0xF9) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v31 = 0;
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = MEMORY[0x24BED83D8] + 16;
    v29 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    v8 = sub_22EFC72E8(a3);
    sub_22EFBA008((_QWORD *)a3, (llvm::raw_ostream *)&v21, v8 + 15104);
    v9 = (uint64_t *)sub_22E61DF6C(a3);
    v11 = v10;
    for (i = 0; ; i |= sub_22F297754(v15))
    {
      v13 = v9;
      if (v9 >= v11)
      {
        if (v9 == v11)
          break;
        v14 = v11;
        while (*(_WORD *)(*v14 + 32) != 234)
        {
          if (++v14 == v9)
            goto LABEL_18;
        }
        v13 = v9;
      }
      else
      {
        while (*(_WORD *)(*v13 + 32) != 234)
        {
          if (++v13 == v11)
            goto LABEL_18;
        }
        v14 = v11;
      }
      if (v13 == v14)
        break;
      do
      {
        v16 = *v9++;
        v15 = v16;
      }
      while (*(_WORD *)(v16 + 32) != 234);
    }
LABEL_18:
    v17 = sub_22E61A84C(a3) | i;
    v18 = *((_BYTE *)v29 + 23);
    if (v18 >= 0)
      v19 = (uint64_t)v29;
    else
      v19 = (uint64_t)*v29;
    if (v18 >= 0)
      v20 = v18 & 0x7F;
    else
      v20 = (uint64_t)v29[1];
    sub_22F2A2C10(a1, a2, *(_DWORD *)(a3 + 24), v19, v20, *(_QWORD *)(a3 + 48), a4, v17 & 1);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
  }
}

void sub_22E697F78(_QWORD **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  llvm::LLVMContext *v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  int8x8_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];

  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8 && v9 == 45)
  {
    v10 = sub_22F114198(*(_QWORD *)(v8 + 24));
    v11 = sub_22F0C975C((*a1)[18], v10);
    sub_22E698484(a1, v10, a3, v11);
    return;
  }
  if ((v9 & 0xFEu) - 2 <= 3)
  {
    v12 = sub_22EF5C728((*a1)[18], a2);
    if (v12)
    {
      v13 = v12;
      if (*(_BYTE *)(v12 + 16) == 2)
      {
        v14 = *(_QWORD *)(v12 + 32);
        sub_22EF5CCD0((*a1)[18], *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v33);
        v15 = (_QWORD *)(v13 + 40);
        if (*(_DWORD *)(v13 + 48) >= 0x41u)
          v15 = (_QWORD *)*v15;
        v16 = (_QWORD *)*v15;
        if (*v15)
        {
          v17 = v33[0];
          do
          {
            sub_22E697F78(a1, v14, a3);
            a3 += v17;
            v16 = (_QWORD *)((char *)v16 - 1);
          }
          while (v16);
        }
      }
    }
    return;
  }
  v18 = *(unsigned __int8 *)(v7 + 16);
  if (v18 == 12)
  {
LABEL_16:
    v19 = *(llvm::LLVMContext **)(v7 + 32);
    sub_22EF5CCD0((*a1)[18], *(_QWORD *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v33);
    v20 = v33[0];
    v21 = sub_22E66CB04((llvm::Type ***)*a1 + 35, v19);
    sub_22E698288(a1, v21, a3, v20 + a3, v22);
    sub_22E698288(a1, v21, v20 + a3, a3 + 2 * v20, v23);
    return;
  }
  if (v9 == 12)
  {
    v7 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (v7)
      goto LABEL_16;
    v7 = *(_QWORD *)v6;
    v18 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16);
  }
  if (v18 == 31)
    goto LABEL_21;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v24 = sub_22F10CF48(v7);
    v7 = *(_QWORD *)v6;
    if (v24)
    {
LABEL_21:
      sub_22EF5CCD0((*a1)[18], v7, (uint64_t)v33);
      v26 = v33[0] + a3;
      v27 = (uint64_t)a1;
      v28 = a3;
LABEL_22:
      sub_22E698960(v27, 0, v28, v26, v25);
      return;
    }
    v18 = *(unsigned __int8 *)(v7 + 16);
  }
  if (v18 != 6
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 6 || (v7 = sub_22F10CF48(v7)) == 0))
  {
    v32 = sub_22E66CB04((llvm::Type ***)*a1 + 35, (llvm::LLVMContext *)a2);
    sub_22F2A2F4C(a1, v32, a3);
    return;
  }
  v29 = *(_QWORD *)(v7 + 32);
  sub_22EF5CCD0((*a1)[18], v7, (uint64_t)v33);
  v30 = v33[0];
  sub_22EF5CCD0((*a1)[18], *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v33);
  v31 = v33[0];
  sub_22E697F78(a1, *(_QWORD *)(v7 + 32), a3);
  if (v30 > v31)
  {
    v28 = v31 + a3;
    v26 = v30 + a3;
    v27 = (uint64_t)a1;
    goto LABEL_22;
  }
}

void sub_22E698288(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v6;
  unsigned int v9;
  int8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DataLayout;
  int8x8_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v6 = a3;
  v20[4] = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD *)(a2 + 8);
  if (a2 && (v9 & 0xFE) == 0x12)
  {
    v18 = v20;
    v19 = 0x400000000;
    sub_22F2A3074(*a1, a4 - a3, a2, (uint64_t)&v18);
    v11 = v19;
    v12 = v19 - 1;
    if (v19 != 1)
    {
      v13 = 0;
      do
      {
        v14 = v6;
        v15 = *((_QWORD *)v18 + v13);
        DataLayout = llvm::Module::getDataLayout((llvm::Module *)(*a1)[25]);
        sub_22E3C304C(DataLayout, v15);
        v6 += llvm::TypeSize::operator unsigned long long();
        sub_22E698798(a1, v15, v14, v6, v17);
        ++v13;
      }
      while (v12 != v13);
      v11 = v19;
    }
    sub_22E698798(a1, *((_QWORD *)v18 + v11 - 1), v6, a4, v10);
    if (v18 != v20)
      free(v18);
  }
  else if (a2 && v9 == 13 && (sub_22F2A32B0((*a1)[18], v9) & 1) == 0)
  {
    sub_22E698960((uint64_t)a1, 0, v6, a4, a5);
  }
  else
  {
    sub_22E698798(a1, a2, v6, a4, a5);
  }
}

void sub_22E698484(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((*(_DWORD *)(a2 + 72) & 0xE000) == 0x4000)
  {
    v7 = sub_22EFC3B90(a2);
    if (v7)
    {
      v8 = v7;
LABEL_4:
      if ((*(_BYTE *)(v8 + 68) & 1) != 0)
        sub_22F2A2FC4((uint64_t)a1, v8, a3, 0);
      else
        sub_22E697F78(a1, *(_QWORD *)(v8 + 48), a3);
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v8)
          break;
        if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_4;
      }
    }
  }
  else
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
      v10 = 0;
    else
      v10 = a2;
    if (v10)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a4 + 72) + 40) & 1) != 0)
        sub_22F2A2F4C(a1, (*a1)[12], a3);
      v11 = sub_22E46A3A0(v10);
      if (v11 != v12)
      {
        v13 = v11;
        v14 = v12;
        do
        {
          if ((*(_BYTE *)(v13 + 12) & 1) == 0)
          {
            v15 = *(_QWORD *)(**(_QWORD **)(v13 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
              v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v13 + 16));
            v16 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
            if (v16)
            {
              if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3)
                v17 = 0;
              else
                v17 = v16;
            }
            else
            {
              v17 = 0;
            }
            v18 = sub_22E46A3EC(a4, v17) + a3;
            v19 = sub_22F0C975C((*a1)[18], v17);
            sub_22E698484(a1, v17, v18, v19);
          }
          v13 += 24;
        }
        while (v13 != v14);
      }
      v20 = *(_QWORD *)(a4 + 72);
      v21 = *(_QWORD *)(v20 + 32);
      if ((v21 & 0x8000000000000000) == 0 && !*(_QWORD *)(v20 + 56))
        sub_22F2A2F4C(a1, (*a1)[12], v21 + a3);
    }
    v22 = sub_22EFC3B90(a2);
    if (v22)
    {
      v23 = v22;
LABEL_33:
      v24 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * sub_22EFC306C(v23));
      if ((*(_BYTE *)(v23 + 68) & 1) != 0)
      {
        sub_22F2A2FC4((uint64_t)a1, v23, a3, v24);
      }
      else
      {
        v25 = *(_QWORD *)(v23 + 48);
        v26 = sub_22EF5CDF0((*a1)[18], *(_QWORD *)(*(_QWORD *)((*a1)[18] + 16408) & 0xFFFFFFFFFFFFFFF0));
        sub_22E697F78(a1, v25, v24 / v26 + a3);
      }
      while (1)
      {
        v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v23)
          break;
        if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_33;
      }
    }
    if (v10)
    {
      v27 = sub_22E483108(v10);
      if (v27 != v28)
      {
        v29 = v27;
        v30 = v28;
        do
        {
          v31 = *(_QWORD *)(**(_QWORD **)(v29 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
            v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v29 + 16));
          v32 = sub_22F10C2A4(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
          if (v32)
          {
            if ((*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 >= 3)
              v33 = 0;
            else
              v33 = v32;
          }
          else
          {
            v33 = 0;
          }
          v34 = sub_22F2500F4(a4, v33) + a3;
          v35 = sub_22F0C975C((*a1)[18], v33);
          sub_22E698484(a1, v33, v34, v35);
          v29 += 24;
        }
        while (v29 != v30);
      }
    }
  }
}

void sub_22E698798(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v6;
  uint64_t DataLayout;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a3;
  if (!a3)
    goto LABEL_11;
  DataLayout = llvm::Module::getDataLayout((llvm::Module *)(*a1)[25]);
  sub_22E3C304C(DataLayout, a2);
  v10 = llvm::TypeSize::operator unsigned long long();
  v11 = 2 << (__clz(v10) ^ 0x3Fu);
  if ((v10 & ((_DWORD)v10 - 1)) == 0)
    v11 = v10;
  if (!(v6 % v11))
  {
LABEL_11:
    v18 = (uint64_t)a1;
    v19 = a2;
LABEL_13:
    sub_22E698960(v18, v19, v6, a4, a5);
    return;
  }
  if (!a2 || (*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    v18 = (uint64_t)a1;
    v19 = 0;
    goto LABEL_13;
  }
  v12 = a4 - v6;
  v13 = sub_22E6988C8(*a1, a4 - v6, *(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 32), a5);
  v15 = v14;
  if (v14)
  {
    v16 = v13;
    v17 = v12 / v14;
    do
    {
      sub_22E698798(a1, v16, v6, v6 + v17);
      v6 += v17;
      --v15;
    }
    while (v15);
  }
}

uint64_t sub_22E6988C8(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, int8x8_t a5)
{
  uint8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 >= 4)
  {
    a5.i32[0] = a4;
    v7 = (uint8x8_t)vcnt_s8(a5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0] <= 1u)
    {
      if (a2 >= 0)
        v8 = a2;
      else
        v8 = a2 + 1;
      v9 = v8 >> 1;
      v10 = sub_22E699F3C(a1);
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v9, a3, a4 >> 1))
      {
        return llvm::FixedVectorType::get();
      }
    }
  }
  return a3;
}

void sub_22E698960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  size_t v43;
  _BOOL4 v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = a3;
  v9 = (uint64_t *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v10 || (v11 = *v9, *(_QWORD *)(*v9 + 24 * v10 - 16) <= a3))
  {
    v54 = a3;
    v55 = a4;
    v56 = a2;
    v24 = sub_22E4EF088(a1 + 8, (unint64_t)&v54, 1);
    v25 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
    v26 = *(_OWORD *)v24;
    v27 = *(_QWORD *)(v24 + 16);
    goto LABEL_16;
  }
  v12 = 0;
  v13 = 24 * v10;
  v14 = *(unsigned int *)(a1 + 16);
  do
  {
    v15 = v14;
    v16 = v12;
    v17 = v13 + v12;
    if (v13 + v12 == 24)
      break;
    v18 = *(_QWORD *)(v11 + 24 * v10 - 40 + v12);
    v12 -= 24;
    --v14;
  }
  while (v18 > a3);
  v19 = *(_QWORD *)(v17 + v11 - 24);
  if (v19 >= a4)
  {
    v54 = a3;
    v55 = a4;
    v56 = a2;
    v28 = sub_22E4EF088(a1 + 8, (unint64_t)&v54, 1);
    v29 = v28;
    v30 = *v9;
    if (v16 != 24)
    {
      v37 = v30 + v13 + v16;
      v38 = (_QWORD *)(v37 - 24);
      v39 = v30 + 24 * *(unsigned int *)(a1 + 16);
      *(_OWORD *)v39 = *(_OWORD *)(v39 - 24);
      *(_QWORD *)(v39 + 16) = *(_QWORD *)(v39 - 8);
      v40 = *(_QWORD *)(a1 + 8);
      v41 = *(_DWORD *)(a1 + 16);
      v42 = v40 + 24 * v41;
      if (v37 != v42)
      {
        v43 = v40 + 24 * v41 - v30 - 24 * v10 - v16;
        memmove((void *)(v42 - v43), v38, v43);
        v41 = *(_DWORD *)(a1 + 16);
        v40 = *(_QWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = v41 + 1;
      v45 = v29 >= (unint64_t)v38 && v29 < v40 + 24 * (unint64_t)(v41 + 1);
      v46 = v29 + 24 * v45;
      v47 = *(_OWORD *)v46;
      v38[2] = *(_QWORD *)(v46 + 16);
      *(_OWORD *)v38 = v47;
      return;
    }
    v25 = v30 + 24 * *(unsigned int *)(a1 + 16);
    v26 = *(_OWORD *)v28;
    v27 = *(_QWORD *)(v28 + 16);
LABEL_16:
    *(_QWORD *)(v25 + 16) = v27;
    *(_OWORD *)v25 = v26;
    ++*(_DWORD *)(a1 + 16);
    return;
  }
  v20 = v15 - 1;
  while (1)
  {
    if (v19 == v6)
    {
      v21 = v11 + v13 + v16;
      if (*(_QWORD *)(v21 - 16) == a4)
      {
        v51 = *(_QWORD *)(v21 - 8);
        if (v51 != a2 && v51 != 0)
        {
          if (a2 && (v53 = sub_22E698CE4(v51, a2)) != 0)
            *(_QWORD *)(v21 - 8) = v53;
          else
            *(_QWORD *)(v21 - 8) = 0;
        }
        return;
      }
    }
    if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    {
      v48 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v48)
      {
        v49 = *(_QWORD *)(a2 + 24);
        v50 = (a4 - v6) / v48;
        do
        {
          sub_22E698960(a1, v49, v6, v6 + v50);
          v6 += v50;
          LODWORD(v48) = v48 - 1;
        }
        while ((_DWORD)v48);
      }
      return;
    }
    v22 = v11 + v13 + v16;
    v23 = *(_QWORD *)(v22 - 8);
    if (!v23 || (*(_DWORD *)(v23 + 8) & 0xFE) != 0x12)
      break;
    sub_22F2A3300(a1, v15 - 1, a5);
    v11 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v11 + v13 + v16 - 24);
  }
  *(_QWORD *)(v22 - 8) = 0;
  if (v19 > v6)
    *(_QWORD *)(v11 + v13 + v16 - 24) = v6;
  v31 = v11 + v13 + v16;
  v33 = *(_QWORD *)(v31 - 16);
  v32 = (_QWORD *)(v31 - 16);
  if (v33 < a4)
  {
    while (v15 != *(_DWORD *)(a1 + 16))
    {
      v34 = *(_QWORD *)(v11 + v17);
      if (v34 >= a4)
        break;
      *v32 = v34;
      v35 = *(_QWORD *)(v11 + v17 + 16);
      if (v35)
      {
        if ((*(_DWORD *)(v35 + 8) & 0xFE) == 0x12 && *(_QWORD *)(v11 + v17 + 8) > a4)
        {
          sub_22F2A3300(a1, v15, a5);
          v11 = *(_QWORD *)(a1 + 8);
        }
        *(_QWORD *)(v11 + v17 + 16) = 0;
      }
      ++v20;
      v32 = (_QWORD *)(v11 + 24 * v20 + 8);
      v36 = *(_QWORD *)(v11 + v17 + 8);
      v17 += 24;
      ++v15;
      if (v36 >= a4)
        return;
    }
    *v32 = a4;
  }
}

uint64_t sub_22E698CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 15)
  {
    v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 == 13)
      return v2;
    if (v5 == 15)
      return a1;
    return 0;
  }
  if (v4 == 13)
  {
    v2 = a1;
    if (*(_BYTE *)(a2 + 8) == 15)
      return v2;
    return 0;
  }
  if ((v4 & 0xFE) != 0x12)
    return 0;
  if (!a2)
    return 0;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
    return 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = sub_22E698CE4(v6, *(_QWORD *)(a2 + 24));
  if (!v7)
    return 0;
  if (v7 == v6)
    return a1;
  return v2;
}

void sub_22E698D9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  void *v39;
  uint64_t v40;
  _QWORD v41[14];

  v41[12] = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)a1 + 4))
    goto LABEL_14;
  v2 = *a1;
  v3 = sub_22E699F3C((_QWORD *)*a1);
  v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 144))(*(_QWORD *)(v3 + 8), v2);
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 16);
  v6 = v5 == 0;
  v7 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v7 != 1)
  {
    for (i = 1; i != v7; ++i)
    {
      while (1)
      {
        v9 = (uint64_t *)(v4 + 24 * i);
        v10 = *v9;
        v11 = v9[2];
        if (!sub_22F2A35E0(*(v9 - 2), *(v9 - 1), *v9, v11, v37))
          break;
        v12 = v4 + 24 * (i - 1);
        *(_QWORD *)(v4 + 24 * i + 16) = 0;
        *(_QWORD *)(v12 + 8) = v10;
        *(_QWORD *)(v12 + 16) = 0;
        ++i;
        v6 = 1;
        if (i == v7)
          goto LABEL_11;
      }
      v6 |= v11 == 0;
    }
    if ((v6 & 1) == 0)
      goto LABEL_14;
LABEL_11:
    v39 = v41;
    v40 = 0x400000000;
    if (!(_DWORD)v7)
      goto LABEL_12;
    goto LABEL_16;
  }
  if (v5)
  {
LABEL_14:
    *((_BYTE *)a1 + 120) = 1;
    return;
  }
  v39 = v41;
  v40 = 0x400000000;
LABEL_16:
  sub_22F2A39AC((uint64_t)&v39, (uint64_t)(a1 + 1));
  v13 = v40;
  if ((_DWORD)v40)
  {
    v14 = 0;
    v35 = v40;
    v36 = -v37;
    v15 = v40 - 1;
    v34 = v15;
    do
    {
      v16 = (uint64_t *)((char *)v39 + 24 * v14);
      if (v16[2])
      {
        v17 = sub_22E4EF088((uint64_t)(a1 + 1), (unint64_t)v16, 1);
        v18 = a1[1] + 24 * *((unsigned int *)a1 + 4);
        v19 = *(_OWORD *)v17;
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v18 = v19;
        ++*((_DWORD *)a1 + 4);
      }
      else
      {
        v20 = *v16;
        v21 = (char *)v39 + 24 * v14 + 40;
        while (1)
        {
          v22 = *(v21 - 4);
          if (v15 == v14)
            break;
          v23 = v14;
          if (!*v21)
          {
            v24 = *(v21 - 2);
            v21 += 3;
            ++v14;
            if (v22 == v24)
              continue;
          }
          goto LABEL_26;
        }
        v23 = v15;
        do
        {
LABEL_26:
          v25 = (v20 & v36) + v37;
          if (v25 >= v22)
            v26 = v22;
          else
            v26 = (v20 & v36) + v37;
          v27 = 1;
          do
          {
            v28 = v20 & -v27;
            v29 = v28 + v27;
            v27 *= 2;
          }
          while (v29 < v26);
          sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
          v30 = llvm::IntegerType::get();
          v38[0] = v28;
          v38[1] = v29;
          v38[2] = v30;
          v31 = sub_22E4EF088((uint64_t)(a1 + 1), (unint64_t)v38, 1);
          v32 = a1[1] + 24 * *((unsigned int *)a1 + 4);
          v33 = *(_OWORD *)v31;
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
          *(_OWORD *)v32 = v33;
          ++*((_DWORD *)a1 + 4);
          v20 = v26;
        }
        while (v25 < v22);
        v14 = v23;
        v15 = v34;
        v13 = v35;
      }
      ++v14;
    }
    while (v14 != v13);
  }
LABEL_12:
  *((_BYTE *)a1 + 120) = 1;
  if (v39 != v41)
    free(v39);
}

void sub_22E6990AC(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[96];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8 && v9 == 45)
  {
    v10 = sub_22F114198(*(_QWORD *)(v8 + 24));
    v11 = sub_22F0C975C(a2[18], v10);
    v12 = v11;
    if ((*(_BYTE *)(v10 + 76) & 0x18) != 0)
    {
      v13 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v14 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = v13;
      *(_WORD *)(a1 + 25) = v14;
      return;
    }
    v21 = a2;
    v22 = v24;
    v23 = 0x400000000;
    v25 = 0;
    v17 = sub_22F114198(*(_QWORD *)(v8 + 24));
    sub_22E698484(&v21, v17, 0, v12);
    sub_22E698D9C((uint64_t *)&v21);
    v16 = *(_QWORD *)(v12 + 16);
    goto LABEL_11;
  }
  if (v9 == 12)
  {
    if (!(_DWORD)a4)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = 5;
LABEL_19:
      *(_BYTE *)(a1 + 24) = v15;
      v20 = *(_WORD *)(a1 + 25) & 0xFE00;
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if ((v9 - 55) > 1)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v18)
      v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 86507531;
    else
      v19 = 0;
    if (v19)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v15 = 4;
      goto LABEL_19;
    }
LABEL_17:
    *(_BYTE *)(a1 + 24) = 0;
    v20 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
LABEL_20:
    *(_WORD *)(a1 + 25) = v20;
    return;
  }
  v21 = a2;
  v22 = v24;
  v23 = 0x400000000;
  v25 = 0;
  sub_22E697F78(&v21, a3, 0);
  sub_22E698D9C((uint64_t *)&v21);
  LODWORD(v16) = sub_22EF5D130(a2[18], a3);
LABEL_11:
  sub_22E6992BC(a1, (uint64_t)&v21, a4, v16);
  if (v22 != v24)
    free(v22);
}

void sub_22E6992BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v5;
  llvm::LLVMContext *v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type **v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::ArrayType *Int8Ty;
  uint64_t v18;
  uint64_t v19;
  llvm::DataLayout *DataLayout;
  llvm::Type *v21;
  uint64_t v22;
  llvm::Type *v23;
  llvm::DataLayout *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  llvm::Type *v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a2 + 16))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 4;
    v5 = *(_WORD *)(a1 + 25) & 0xFE00;
LABEL_3:
    *(_WORD *)(a1 + 25) = v5;
    return;
  }
  if (sub_22F2A3640((_QWORD **)a2, a3))
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v5 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = a4;
    goto LABEL_3;
  }
  v9 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v36 = *(llvm::Type **)(*(_QWORD *)a2 + 232);
    v37 = 0;
    v13 = 24 * v9;
    v14 = (llvm::Type **)(*(_QWORD *)(a2 + 8) + 16);
    do
    {
      v15 = (uint64_t)*(v14 - 2);
      v16 = (llvm::Type *)(v15 - v12);
      if (v15 != v12)
      {
        Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v36, v8);
        v18 = llvm::ArrayType::get(Int8Ty, v16);
        v19 = v37;
        if (v37 >= 8uLL)
        {
          v25 = v18;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v25;
          v19 = v37;
        }
        v39[v19] = v18;
        ++v37;
        v10 = 1;
      }
      if (v11)
      {
        v11 = 1;
      }
      else
      {
        DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a2 + 200));
        v11 = (uint64_t)*(v14 - 2) % llvm::DataLayout::getABITypeAlignment(DataLayout, *v14) != 0;
      }
      v21 = *v14;
      v22 = v37;
      if (v37 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v37;
      }
      v39[v22] = v21;
      ++v37;
      v23 = *v14;
      v24 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)a2 + 200));
      sub_22E3C304C((uint64_t)v24, (uint64_t)v23);
      llvm::DataLayout::getABITypeAlignment(v24, v23);
      v12 = (uint64_t)*(v14 - 2) + llvm::TypeSize::operator unsigned long long();
      v14 += 3;
      v13 -= 24;
    }
    while (v13);
    v26 = llvm::StructType::get();
    v27 = v26;
    if ((v10 & 1) != 0)
    {
      v38 = 0;
      v28 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v28)
        goto LABEL_30;
      v29 = 0;
      v30 = *(_QWORD *)(a2 + 8);
      v31 = 24 * v28;
      v32 = (uint64_t *)(v30 + 16);
      do
      {
        v33 = *v32;
        if (v29 >= 8)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v38;
        }
        v39[v29] = v33;
        v34 = v38;
        v29 = ++v38;
        v32 += 3;
        v31 -= 24;
      }
      while (v31);
      if (v34)
LABEL_30:
        v35 = llvm::StructType::get();
      else
        v35 = v39[0];
    }
    else
    {
      v35 = v26;
      if (*(_DWORD *)(a2 + 16) == 1)
        v35 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
    }
  }
  else
  {
    v27 = llvm::StructType::get();
    v35 = v27;
  }
  *(_QWORD *)(a1 + 8) = v35;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 6;
  *(_WORD *)(a1 + 25) &= 0xFE00u;
  *(_QWORD *)a1 = v27;
}

uint64_t sub_22E69963C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (!a3)
    return 0;
  if (sub_22E633FCC(a3))
    return 28;
  v5 = *(_QWORD *)((*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0)
    return *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    return 0;
}

uint64_t sub_22E69969C(uint64_t a1, uint64_t a2, llvm::Value *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;

  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
    return (*(uint64_t (**)(uint64_t, _QWORD, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, *(_QWORD *)(a2 + 144), this, a4, a5, a6);
  v9 = (uint64_t *)(a2 + 272);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v12 = 773;
    v11[0] = llvm::Value::getName(this);
    v11[1] = v10;
    v11[2] = ".ascast";
  }
  else
  {
    v12 = 257;
  }
  return sub_22E3C1338(v9, (uint64_t)this, a6, (uint64_t)v11);
}

uint64_t sub_22E699750(_QWORD *a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v6 = a2;
  v8 = sub_22EF5C728(*(_QWORD *)(a1[1] + 8), a2);
  if (v8 && *(_BYTE *)(v8 + 16) == 2)
  {
    v9 = (_QWORD *)(v8 + 40);
    if (*(_DWORD *)(v8 + 48) >= 0x41u)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)*v9;
    if (!*v9)
      return 0;
    if (!sub_22E699750(a1, *(_QWORD *)(v8 + 32), a3, a4))
      return 0;
    v11 = *a4 * (_QWORD)v10;
    *a4 = v11;
    if (!v11)
      return 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 72))(a1, *a3);
  }
  v12 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 45)
  {
    *a4 = 1;
    if (*(_BYTE *)(v13 + 16) == 12 || *(_BYTE *)(v14 + 16) == 12 && (v13 = sub_22F10CF48(v13)) != 0)
    {
      *a4 = 2;
      v6 = *(_QWORD *)(v13 + 32);
    }
    if (!(*(unsigned int (**)(_QWORD *, unint64_t))(*a1 + 64))(a1, v6))
      return 0;
    v27 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    v28 = *a3;
    if (!*a3)
    {
      *a3 = v27;
      v29 = sub_22E3E4B64(v27);
      if (v29)
      {
        v40 = v29;
        v41 = *(_QWORD *)(v29 + 32);
        v42 = sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), v29);
        v43 = sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0));
        v28 = *(_QWORD *)(sub_22F36B7E4(*(_QWORD *)(a1[1] + 8), v41, v42 / v43, (*(_DWORD *)(v40 + 16) >> 19) & 0xF) & 0xFFFFFFFFFFFFFFF0);
        *a3 = v28;
      }
      else
      {
        v28 = *a3;
      }
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2 != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2)
      return 0;
    v30 = sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), v28);
    if (v30 != sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), v27))
      return 0;
LABEL_61:
    if (*a4)
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 72))(a1, *a3);
    return 0;
  }
  v15 = sub_22F114198(*(_QWORD *)(v14 + 24));
  if ((*(_BYTE *)(v15 + 74) & 0x80) == 0)
  {
    v16 = v15;
    *a4 = 0;
    if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[1] + 32) + 96))(*(_QWORD *)(a1[1] + 32), v15))return 0;
      v31 = sub_22E46A3A0(v16);
      if (v31 != v32)
      {
        v33 = v31;
        v34 = v32;
        do
        {
          v35 = *(_QWORD *)(a1[1] + 8);
          v36 = *(_QWORD *)(**(_QWORD **)(v33 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v36 + 8) & 0xF) != 0)
            v36 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v33 + 16));
          if ((sub_22E699BD0(v35, v36 & 0xFFFFFFFFFFFFFFF0, 1, 0) & 1) == 0)
          {
            v44 = 0;
            v37 = *(_QWORD *)(**(_QWORD **)(v33 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v37 + 8) & 0xF) != 0)
              v37 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v33 + 16));
            if (!sub_22E699750(a1, v37 & 0xFFFFFFFFFFFFFFF0, a3, &v44))
              return 0;
            *a4 += v44;
          }
          v33 += 24;
        }
        while (v33 != v34);
      }
    }
    v17 = sub_22EFC3B90(v16);
    if (v17)
    {
      v18 = v17;
LABEL_15:
      v19 = (unint64_t *)(v18 + 48);
      while (1)
      {
        v20 = *v19;
        v21 = sub_22EF5C728(*(_QWORD *)(a1[1] + 8), *v19);
        if (!v21 || *(_BYTE *)(v21 + 16) != 2)
          break;
        v22 = (_QWORD *)(v21 + 40);
        if (*(_DWORD *)(v21 + 48) >= 0x41u)
          v22 = (_QWORD *)*v22;
        v23 = (_QWORD *)*v22;
        v19 = (unint64_t *)(v21 + 32);
        if (!v23)
          return 0;
      }
      if ((sub_22E699BD0(*(_QWORD *)(a1[1] + 8), v20, 1, 0) & 1) != 0)
        goto LABEL_33;
      v24 = *(_QWORD *)(a1[1] + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v24 + 2000) + 1) & 1) != 0 && sub_22EFC2F84(v18, v24))
        goto LABEL_33;
      v44 = 0;
      if ((sub_22E699750(a1, *(_QWORD *)(v18 + 48), a3, &v44) & 1) == 0)
        return 0;
      if (*a4 <= v44)
        v25 = v44;
      else
        v25 = *a4;
      if ((*(_DWORD *)(v16 + 72) & 0xE000) == 0x4000)
        v26 = v25;
      else
        v26 = v44 + *a4;
      *a4 = v26;
LABEL_33:
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v18)
          break;
        if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_15;
      }
    }
    if (*a3)
    {
      v38 = sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), *a3) * *a4;
      if (v38 == sub_22EF5CDF0(*(_QWORD *)(a1[1] + 8), *v12))
        goto LABEL_61;
    }
  }
  return 0;
}

uint64_t sub_22E699BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5 && *(_BYTE *)(v5 + 16) == 45)
  {
    v9 = sub_22F114198(*(_QWORD *)(v5 + 24));
    if ((*(_BYTE *)(v9 + 74) & 0x80) != 0)
      return 0;
    v10 = v9;
    if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v11 = sub_22E46A3A0(v9);
      if (v11 != v12)
      {
        v13 = v11;
        v14 = v12;
        do
        {
          v15 = *(_QWORD *)(**(_QWORD **)(v13 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
            v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v13 + 16));
          if ((sub_22E699BD0(a1, v15 & 0xFFFFFFFFFFFFFFF0, 1, a4) & 1) == 0)
            return 0;
          v13 += 24;
        }
        while (v13 != v14);
      }
    }
    v16 = sub_22EFC3B90(v10);
    if (!v16)
      return 1;
    v17 = v16;
    if (!sub_22E69B6D0(a1, v16, a3, a4))
      return 0;
    do
    {
      v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
      v4 = v17 == 0;
    }
    while (v17 && ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 49 > 2 || (sub_22E69B6D0(a1, v17, a3, a4) & 1) != 0));
  }
  return v4;
}

double sub_22E699D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[27];

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    sub_22E69BE7C((unint64_t)v17, a1, *(_QWORD *)(a2 + 40));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v17;
    result = *(double *)&v17[11];
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v17[11];
  }
  v6 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v6)
  {
    v7 = 40 * v6;
    v8 = (_OWORD *)(a2 + 88);
    do
    {
      if (v4 == 76)
      {
        v9 = *((_QWORD *)v8 - 1);
        v10 = *(_QWORD *)(a1 + 8);
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 2000) + 96) & 0x80) != 0)
        {
          v11 = sub_22E66CB04((llvm::Type ***)v10, *((llvm::LLVMContext **)v8 - 1));
          if (v11)
          {
            v12 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15072);
            if (*(_DWORD *)(v11 + 8) == 15 && *(_DWORD *)(v11 + 8) >> 8 == *v12)
            {
              if (*(_QWORD *)(v11 + 24))
                v14 = llvm::PointerType::get();
              else
                v14 = llvm::PointerType::get(*(llvm::PointerType **)v11, (llvm::LLVMContext *)v12[8]);
              v17[24] = 0;
              *(_OWORD *)v17 = (unint64_t)v14;
              *(_QWORD *)&v17[16] = 0;
              *(_WORD *)&v17[25] &= 0xFE00u;
              goto LABEL_18;
            }
          }
        }
        v16 = a1;
        v15 = v9;
      }
      else
      {
        v15 = *((_QWORD *)v8 - 1);
        v16 = a1;
      }
      sub_22E69BAA8((uint64_t)v17, v16, v15);
LABEL_18:
      *v8 = *(_OWORD *)v17;
      result = *(double *)&v17[11];
      *(_OWORD *)((char *)v8 + 11) = *(_OWORD *)&v17[11];
      v8 = (_OWORD *)((char *)v8 + 40);
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

double sub_22E699E90(uint64_t a1, uint64_t a2)
{
  double result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[27];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    sub_22E69BE7C((unint64_t)v8, a1, *(_QWORD *)(a2 + 40));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v8;
    result = *(double *)&v8[11];
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v8[11];
  }
  v5 = *(_DWORD *)(a2 + 36);
  if (v5)
  {
    v6 = a2 + 80;
    v7 = v6 + 40 * v5;
    do
    {
      sub_22E69BAA8((uint64_t)v8, a1, *(_QWORD *)v6);
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v8;
      result = *(double *)&v8[11];
      *(_OWORD *)(v6 + 19) = *(_OWORD *)&v8[11];
      v6 += 40;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_22E699F3C(_QWORD *a1)
{
  uint64_t v1;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BOOL4 v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  size_t v47;
  uint64_t v49;
  uint64_t v50;
  char v51;
  BOOL v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  size_t v68;
  BOOL v69;
  char v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void **v76;
  unint64_t v77;
  const void *v78;
  size_t v79;
  BOOL v81;
  uint64_t v82;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  size_t v87;
  uint64_t v89;
  uint64_t v90;
  int v92;
  char v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  size_t v100;
  BOOL v101;
  char v102;
  uint64_t v104;
  size_t v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  size_t v116;
  BOOL v117;
  BOOL v118;
  uint64_t v119;

  v1 = a1[34];
  if (!v1)
  {
    v3 = (_DWORD *)a1[27];
    switch(v3[14])
    {
      case 1:
      case 2:
      case 0x27:
      case 0x28:
        if (v3[17] == 15)
        {
          v1 = operator new();
          v4 = sub_22E6A8C98((_QWORD *)v1, a1 + 35, 2);
          v5 = &off_24FA6A050;
          goto LABEL_203;
        }
        v27 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        if (v28 == 7)
        {
          if (*v27 == 1668309345 && *(_DWORD *)((char *)v27 + 3) == 909210467)
          {
            v29 = 3;
            goto LABEL_221;
          }
        }
        else if (v28 == 8 && *(_QWORD *)v27 == 0x756E672D73637061)
        {
          v29 = 0;
          goto LABEL_221;
        }
        v72 = a1[23];
        v73 = *(unsigned __int8 *)(v72 + 479);
        v74 = *(_QWORD *)(v72 + 464);
        if ((v73 & 0x80u) == 0)
          v75 = v73 & 0x7F;
        else
          v75 = *(_QWORD *)(v72 + 464);
        if (v75 != 4)
          goto LABEL_218;
        v76 = (const void **)(v72 + 456);
        v77 = *(unsigned __int8 *)(v72 + 479);
        v78 = (const void *)(v72 + 456);
        if ((v73 & 0x80) != 0)
        {
          v78 = *v76;
          v77 = *(_QWORD *)(v72 + 464);
        }
        if (v77 >= 4)
          v79 = 4;
        else
          v79 = v77;
        if (!memcmp(v78, "hard", v79) && v77 == 4)
          goto LABEL_220;
        if ((v73 & 0x80) != 0)
          v76 = (const void **)*v76;
        else
          v74 = v73;
        if (v74 >= 4)
          v105 = 4;
        else
          v105 = v74;
        if (!memcmp(v76, "soft", v105) && v74 == 4)
        {
          v29 = 1;
        }
        else
        {
LABEL_218:
          v106 = v3[18];
          v29 = 1;
          if (v106 <= 0xE && ((1 << v106) & 0x4420) != 0)
LABEL_220:
            v29 = 2;
        }
LABEL_221:
        v1 = operator new();
        sub_22E6A8C98((_QWORD *)v1, a1 + 35, v29);
        break;
      case 3:
      case 4:
      case 5:
        v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        if (v7 == 9 && (*(_QWORD *)v6 == 0x63706E6977726164 ? (v8 = *(_BYTE *)(v6 + 8) == 115) : (v8 = 0), v8))
        {
          v9 = v3[17];
          v30 = 1;
        }
        else
        {
          v9 = v3[17];
          if (v9 == 15)
          {
            v1 = operator new();
            v10 = operator new();
            *(_QWORD *)v10 = &off_24FA69C40;
            *(_QWORD *)(v10 + 8) = a1 + 35;
            *(_QWORD *)(v10 + 16) = 0x200000000;
            v11 = &off_24FA69980;
            goto LABEL_253;
          }
          v30 = 0;
        }
        v81 = v9 > 0x21;
        v82 = (1 << v9) & 0x3F0000888;
        if (v81 || v82 == 0)
        {
          v1 = operator new();
          v10 = operator new();
          *(_QWORD *)v10 = &off_24FA69C40;
          *(_QWORD *)(v10 + 8) = a1 + 35;
          *(_DWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 20) = v30;
          v11 = &off_24FA69AE0;
        }
        else
        {
          v1 = operator new();
          v10 = operator new();
          *(_QWORD *)v10 = &off_24FA69C40;
          *(_QWORD *)(v10 + 8) = a1 + 35;
          *(_DWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 20) = v30;
          v11 = &off_24FA69CE8;
        }
        goto LABEL_253;
      case 6:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6CA10;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6C8B0;
        goto LABEL_253;
      case 7:
        v31 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        v32 = 18;
        if (v33 == 7)
        {
          if (*v31 ^ 0x74727661 | *(_DWORD *)((char *)v31 + 3) ^ 0x796E6974)
            v32 = 18;
          else
            v32 = 6;
        }
        v34 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[27] + 448))(a1[27]);
        v35 = 8;
        if (v36 == 7)
        {
          if (*v34 ^ 0x74727661 | *(_DWORD *)((char *)v34 + 3) ^ 0x796E6974)
            v35 = 8;
          else
            v35 = 4;
        }
        v1 = operator new();
        v10 = operator new();
        *(_QWORD *)v10 = &off_24FA698F8;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 20) = v32;
        *(_DWORD *)(v10 + 24) = v35;
        v11 = &off_24FA69798;
        goto LABEL_253;
      case 0xC:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6BE60;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6BD00;
        goto LABEL_253;
      case 0xF:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA68E80;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA69450;
        goto LABEL_253;
      case 0x10:
      case 0x11:
        v12 = a1 + 35;
        if (v3[17] == 20)
        {
          v1 = operator new();
LABEL_97:
          v10 = operator new();
          *(_DWORD *)(v10 + 16) = 0;
          *(_QWORD *)v10 = &off_24FA693C8;
          *(_QWORD *)(v10 + 8) = v12;
          v11 = &off_24FA69268;
          goto LABEL_253;
        }
        v13 = 24;
        v1 = operator new();
        v14 = operator new();
        *(_DWORD *)(v14 + 16) = 0;
        *(_QWORD *)v14 = &off_24FA69710;
        *(_QWORD *)(v14 + 8) = v12;
        *(_BYTE *)(v14 + 20) = 1;
        v15 = 0x800000004;
LABEL_101:
        *(_QWORD *)(v14 + 24) = v15;
        *(_QWORD *)v1 = &off_24FA695B0;
        *(_QWORD *)(v1 + 8) = v14;
        *(_DWORD *)(v1 + 16) = v13;
        break;
      case 0x12:
      case 0x13:
        v1 = operator new();
        v13 = 32;
        v14 = operator new();
        *(_DWORD *)(v14 + 16) = 0;
        *(_QWORD *)v14 = &off_24FA69710;
        *(_QWORD *)(v14 + 8) = a1 + 35;
        *(_BYTE *)(v14 + 20) = 0;
        v15 = 0x1000000008;
        goto LABEL_101;
      case 0x14:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6AE50;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6ACF0;
        goto LABEL_253;
      case 0x15:
        if (v3[17] == 21)
        {
          v1 = operator new();
          v37 = operator new();
          *(_DWORD *)(v37 + 16) = 0;
          *(_QWORD *)v37 = &off_24FA6A530;
          *(_QWORD *)(v37 + 8) = a1 + 35;
          *(_BYTE *)(v37 + 20) = 0;
          *(_DWORD *)(v37 + 24) = 4;
          *(_QWORD *)v1 = &off_24FA6A3D0;
          *(_QWORD *)(v1 + 8) = v37;
          *(_BYTE *)(v1 + 16) = 0;
          break;
        }
        v64 = a1[23];
        v84 = *(unsigned __int8 *)(v64 + 479);
        if ((v84 & 0x80u) == 0)
          v85 = v84 & 0x7F;
        else
          v85 = *(_QWORD *)(v64 + 464);
        if (v85 != 4)
          goto LABEL_157;
        v86 = (_QWORD *)(v64 + 456);
        if ((v84 & 0x80) != 0)
        {
          v86 = (_QWORD *)*v86;
          v84 = *(_QWORD *)(v64 + 464);
        }
        v87 = v84 >= 4 ? 4 : v84;
        if (!memcmp(v86, "soft", v87) && v84 == 4)
        {
          v70 = 1;
        }
        else
        {
LABEL_157:
          v70 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t))(*(_QWORD *)v3 + 568))(v3, "spe", 3);
          v64 = a1[23];
        }
LABEL_227:
        v109 = (*(_QWORD *)(v64 + 96) >> 47) & 3;
        if ((_DWORD)v109 == 1)
          v110 = 0;
        else
          v110 = (_DWORD)v109 == 2 || v3[19] == 3 && v3[17] != 9;
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6A718;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_BYTE *)(v10 + 20) = v70;
        *(_BYTE *)(v10 + 21) = v110;
        v11 = &off_24FA6A5B8;
        goto LABEL_253;
      case 0x16:
        v64 = a1[23];
        v65 = *(unsigned __int8 *)(v64 + 479);
        if ((v65 & 0x80u) == 0)
          v66 = v65 & 0x7F;
        else
          v66 = *(_QWORD *)(v64 + 464);
        if (v66 == 4)
        {
          v67 = (_QWORD *)(v64 + 456);
          if ((v65 & 0x80) != 0)
          {
            v67 = (_QWORD *)*v67;
            v65 = *(_QWORD *)(v64 + 464);
          }
          if (v65 >= 4)
            v68 = 4;
          else
            v68 = v65;
          v69 = memcmp(v67, "soft", v68) == 0;
          v70 = v65 == 4 && v69;
        }
        else
        {
          v70 = 0;
        }
        goto LABEL_227;
      case 0x17:
        if (v3[17] == 21)
        {
          v1 = operator new();
          v38 = operator new();
          *(_DWORD *)(v38 + 16) = 0;
          *(_QWORD *)v38 = &off_24FA6A530;
          *(_QWORD *)(v38 + 8) = a1 + 35;
          *(_DWORD *)(v38 + 24) = 8;
          *(_BYTE *)(v38 + 20) = 1;
          *(_QWORD *)v1 = &off_24FA6A3D0;
          *(_QWORD *)(v1 + 8) = v38;
          *(_BYTE *)(v1 + 16) = 1;
          break;
        }
        if (v3[19] == 3)
        {
          v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
          v42 = v90 == 5 && *(_DWORD *)v89 == 1986423909 && *(_BYTE *)(v89 + 4) == 50;
LABEL_239:
          v112 = a1[23];
          v113 = *(unsigned __int8 *)(v112 + 479);
          if ((v113 & 0x80u) == 0)
            v114 = v113 & 0x7F;
          else
            v114 = *(_QWORD *)(v112 + 464);
          if (v114 == 4)
          {
            v115 = (_QWORD *)(v112 + 456);
            if ((v113 & 0x80) != 0)
            {
              v115 = (_QWORD *)*v115;
              v113 = *(_QWORD *)(v112 + 464);
            }
            if (v113 >= 4)
              v116 = 4;
            else
              v116 = v113;
            v117 = memcmp(v115, "soft", v116) == 0;
            v118 = v113 == 4 && v117;
          }
          else
          {
            v118 = 0;
          }
          v1 = operator new();
          v10 = operator new();
          *(_QWORD *)v10 = &off_24FA6A900;
          *(_QWORD *)(v10 + 8) = a1 + 35;
          *(_DWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 20) = v42;
          *(_BYTE *)(v10 + 24) = v118;
          v11 = &off_24FA6A7A0;
        }
        else
        {
          v1 = operator new();
          v10 = operator new();
          *(_DWORD *)(v10 + 16) = 0;
          *(_QWORD *)v10 = &off_24FA68E80;
          *(_QWORD *)(v10 + 8) = a1 + 35;
          v11 = &off_24FA6A9A8;
        }
        goto LABEL_253;
      case 0x18:
        v39 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        v42 = v40 != 5 || *(_DWORD *)v39 != 1986423909 || *(_BYTE *)(v39 + 4) != 49;
        goto LABEL_239;
      case 0x19:
      case 0x1E:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6C230;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6C0D0;
        goto LABEL_253;
      case 0x1F:
      case 0x20:
        v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        v18 = *(unsigned __int8 *)(a1[27] + *(_QWORD *)(*(_QWORD *)a1[27] - 24));
        if (v17)
        {
          v19 = *(unsigned __int8 *)(v16 + v17 - 1);
          if (v19 == 102)
            v20 = 32;
          else
            v20 = (v19 == 100) << 6;
        }
        else
        {
          v20 = 0;
        }
        v1 = operator new();
        v10 = operator new();
        *(_QWORD *)v10 = &off_24FA6B038;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 20) = v18;
        *(_DWORD *)(v10 + 24) = v20;
        v11 = &off_24FA6AED8;
        goto LABEL_253;
      case 0x21:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6C418;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6C2B8;
        goto LABEL_253;
      case 0x22:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6C600;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6C4A0;
        goto LABEL_253;
      case 0x24:
        v43 = a1[23];
        v44 = *(unsigned __int8 *)(v43 + 479);
        if ((v44 & 0x80u) == 0)
          v45 = v44 & 0x7F;
        else
          v45 = *(_QWORD *)(v43 + 464);
        if (v45 != 4)
          goto LABEL_76;
        v46 = (_QWORD *)(v43 + 456);
        if ((v44 & 0x80) != 0)
        {
          v46 = (_QWORD *)*v46;
          v44 = *(_QWORD *)(v43 + 464);
        }
        v47 = v44 >= 4 ? 4 : v44;
        if (!memcmp(v46, "soft", v47) && v44 == 4)
        {
          v53 = 0;
          v51 = 1;
        }
        else
        {
LABEL_76:
          v49 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 448))(v3);
          if (v50 == 6)
          {
            v51 = 0;
            v53 = *(_DWORD *)v49 == 1952671094 && *(_WORD *)(v49 + 4) == 29295;
          }
          else
          {
            v51 = 0;
            v53 = 0;
          }
        }
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6B220;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_BYTE *)(v10 + 20) = v53;
        *(_BYTE *)(v10 + 21) = v51;
        v11 = &off_24FA6B0C0;
        goto LABEL_253;
      case 0x25:
      case 0x26:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA68E80;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6B2C8;
        goto LABEL_253;
      case 0x29:
        v54 = v3[17];
        v55 = (v54 < 0x22) & (0x3F0000888uLL >> v54);
        v56 = (*(_QWORD *)(a1[23] + 96) >> 47) & 3;
        if ((_DWORD)v56 == 1)
        {
          v57 = 0;
        }
        else if ((_DWORD)v56 == 2)
        {
          v57 = 1;
        }
        else if (v54 <= 0x21)
        {
          v57 = (0x3F800A8B8uLL >> v54) & 1;
        }
        else
        {
          v57 = 0;
        }
        if ((_DWORD)v54 == 15)
        {
          v92 = v3[18];
          v94 = v92 != 18 && v92 != 1;
          v1 = operator new();
          v4 = sub_22E6B17BC((_QWORD *)v1, (uint64_t)(a1 + 35), v55, v57, v94, *(_DWORD *)(a1[23] + 68), 0);
          v5 = &off_24FA6B428;
          goto LABEL_203;
        }
        v1 = operator new();
        v95 = a1[23];
        v96 = *(_DWORD *)(v95 + 68);
        v97 = *(unsigned __int8 *)(v95 + 479);
        if ((v97 & 0x80u) == 0)
          v98 = v97 & 0x7F;
        else
          v98 = *(_QWORD *)(v95 + 464);
        if (v98 == 4)
        {
          v99 = (_QWORD *)(v95 + 456);
          if ((v97 & 0x80) != 0)
          {
            v99 = (_QWORD *)*v99;
            v97 = *(_QWORD *)(v95 + 464);
          }
          if (v97 >= 4)
            v100 = 4;
          else
            v100 = v97;
          v101 = memcmp(v99, "soft", v100) == 0;
          v102 = v97 == 4 && v101;
        }
        else
        {
          v102 = 0;
        }
        sub_22E6B17BC((_QWORD *)v1, (uint64_t)(a1 + 35), v55, v57, 0, v96, v102);
        break;
      case 0x2A:
        v58 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        if (v59 == 3)
        {
          v62 = *(_WORD *)v58 == 30305 && *(_BYTE *)(v58 + 2) == 120;
        }
        else if (v59 == 6)
        {
          v61 = *(_DWORD *)v58 == 897087073 && *(_WORD *)(v58 + 4) == 12849;
          v62 = 2 * v61;
        }
        else
        {
          v62 = 0;
        }
        v104 = v3[17];
        if (v104 > 0x21)
          goto LABEL_257;
        if (((1 << v104) & 0x3F0000888) != 0)
        {
          v1 = operator new();
          v4 = sub_22E6B93AC((_QWORD *)v1, (uint64_t)(a1 + 35), v62);
          v5 = &off_24FA6BA40;
LABEL_203:
          *v4 = v5;
        }
        else if (v104 == 15)
        {
          v1 = operator new();
          v10 = operator new();
          v107 = 0;
          *(_QWORD *)v10 = &off_24FA6B8F0;
          *(_QWORD *)(v10 + 8) = a1 + 35;
          *(_DWORD *)(v10 + 16) = 0;
          *(_DWORD *)(v10 + 20) = v62;
          v108 = a1[38];
          if (*(_DWORD *)(v108 + 68) == 15)
            v107 = *(_DWORD *)(v108 + 72) == 1;
          *(_BYTE *)(v10 + 24) = v107;
          v11 = &off_24FA6B790;
LABEL_253:
          *(_QWORD *)v1 = v11;
          *(_QWORD *)(v1 + 8) = v10;
        }
        else
        {
LABEL_257:
          v1 = operator new();
          sub_22E6B93AC((_QWORD *)v1, (uint64_t)(a1 + 35), v62);
        }
        break;
      case 0x2B:
        v1 = operator new();
        v63 = operator new();
        *(_QWORD *)v63 = &off_24FA6C7E8;
        *(_QWORD *)(v63 + 8) = a1 + 35;
        *(_DWORD *)(v63 + 16) = 0;
        *(_QWORD *)v1 = &off_24FA6C688;
        *(_QWORD *)(v1 + 8) = v63;
        *(_QWORD *)(v1 + 24) = 0;
        *(_QWORD *)(v1 + 32) = 0;
        *(_QWORD *)(v1 + 40) = 0;
        *(_QWORD *)(v1 + 16) = v1 + 24;
        break;
      case 0x2C:
      case 0x2D:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6AC68;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_QWORD *)(v10 + 24) = v1;
        v11 = &off_24FA6AB08;
        goto LABEL_253;
      case 0x30:
      case 0x31:
        v1 = operator new();
        v21 = operator new();
        *(_DWORD *)(v21 + 16) = 0;
        *(_QWORD *)v21 = &off_24FA691C8;
        *(_QWORD *)(v21 + 8) = a1 + 35;
        *(_QWORD *)(v21 + 20) = llvm::Triple::getAIRVersion((llvm::Triple *)(a1[38] + 32));
        *(_QWORD *)(v21 + 28) = v22;
        llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(v21 + 40));
        *(_QWORD *)v1 = &off_24FA69068;
        *(_QWORD *)(v1 + 8) = v21;
        *(_QWORD *)(v1 + 24) = 0;
        *(_QWORD *)(v1 + 32) = 0;
        *(_QWORD *)(v1 + 16) = 0;
        break;
      case 0x32:
        v1 = operator new();
        v12 = a1 + 35;
        goto LABEL_97;
      case 0x38:
      case 0x39:
        v1 = operator new();
        v10 = operator new();
        *(_QWORD *)v10 = &off_24FA68DF8;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_DWORD *)(v10 + 16) = 75;
        v11 = &off_24FA6CA98;
        goto LABEL_253;
      case 0x3A:
      case 0x3B:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 75;
        *(_QWORD *)v10 = &off_24FA68D70;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6CBF8;
        goto LABEL_253;
      case 0x3E:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6C048;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6BEE8;
        goto LABEL_253;
      case 0x3F:
      case 0x40:
        v23 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 448))(a1[27]);
        v26 = v24 == 15 && *v23 == 0x656D697265707865 && *(_QWORD *)((char *)v23 + 7) == 0x766D2D6C61746E65;
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA69FA8;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        *(_DWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 24) = &off_24FA68E80;
        *(_QWORD *)(v10 + 32) = a1 + 35;
        *(_DWORD *)(v10 + 48) = v26;
        v11 = &off_24FA69E48;
        goto LABEL_253;
      case 0x43:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA6CEB8;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA6CD58;
        goto LABEL_253;
      default:
        v1 = operator new();
        v10 = operator new();
        *(_DWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &off_24FA68E80;
        *(_QWORD *)(v10 + 8) = a1 + 35;
        v11 = &off_24FA68F08;
        goto LABEL_253;
    }
    v119 = a1[34];
    a1[34] = v1;
    if (v119)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  return v1;
}

uint64_t sub_22E69B3E4(int a1, _QWORD *a2, llvm::Value *this)
{
  llvm::Type *v5;
  uint64_t Name;
  unint64_t v7;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  llvm::LLVMContext *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  std::string __dst;
  __int16 v30;
  void *__p[2];
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(llvm::Type **)(a2[18] + 232);
  Name = llvm::Value::getName(this);
  if (!Name)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  v8 = v7;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = (const void *)Name;
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (!v7)
      goto LABEL_11;
  }
  memmove(p_dst, v9, v8);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
LABEL_12:
  v13 = std::string::append(&__dst, "_kernel");
  v15 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32 = v15;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  llvm::Type::getVoidTy(v5, v14);
  v16 = llvm::FunctionType::get();
  v30 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v17 = *(_QWORD *)(a2[18] + 200);
  v18 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v18, v16, 0, 0xFFFFFFFFLL, &__dst, v17);
  v20 = a2[40];
  v19 = a2[41];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
  v30 = 259;
  operator new();
  v21 = llvm::BasicBlock::BasicBlock();
  a2[40] = v21;
  a2[41] = v21 + 40;
  if ((*(_WORD *)(v18 + 18) & 1) == 0)
  {
    v23 = *(_QWORD *)(v18 + 88);
LABEL_16:
    v24 = v23;
    goto LABEL_17;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v18);
  v23 = *(_QWORD *)(v18 + 88);
  if ((*(_WORD *)(v18 + 18) & 1) == 0)
    goto LABEL_16;
  llvm::Function::BuildLazyArguments((llvm::Function *)v18);
  v24 = *(_QWORD *)(v18 + 88);
LABEL_17:
  v25 = v24 + 40 * *(_QWORD *)(v18 + 96);
  v33 = v35;
  v34 = 0x200000000;
  sub_22E611290((uint64_t)&v33, v23, v22, v25);
  v26 = *((_QWORD *)this + 3);
  v30 = 257;
  v27 = sub_22E462B78(a2 + 34, v26, (uint64_t)this, (uint64_t)v33, v34, (uint64_t)&__dst, 0);
  *((_WORD *)v27 + 9) = (*((_WORD *)this + 9) >> 2) & 0xFFC | *((_WORD *)v27 + 9) & 0xF003;
  sub_22E3CF118(a2 + 34);
  if (v20)
  {
    sub_22E3CB840((uint64_t)(a2 + 34), v20, v19);
  }
  else
  {
    a2[40] = 0;
    a2[41] = 0;
  }
  if (v33 != v35)
    free(v33);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  return v18;
}

uint64_t sub_22E69B6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;

  if ((*(_BYTE *)(a2 + 68) & 1) != 0 && !*(_QWORD *)(a2 + 40))
    return 1;
  v8 = *(_QWORD *)(a2 + 48);
  if ((_DWORD)a3 && (v9 = sub_22EF5C728(a1, *(_QWORD *)(a2 + 48))) != 0)
  {
    v10 = v9;
    v11 = *(unsigned __int8 *)(v9 + 16);
    v12 = v11 == 2;
    if (v11 == 2)
    {
      while (1)
      {
        v13 = (_QWORD *)(v10 + 40);
        v14 = *(_DWORD *)(v10 + 48);
        if (v14 < 0x41)
          goto LABEL_9;
        if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v10 + 40)) <= 0x40)
          break;
LABEL_10:
        v8 = *(_QWORD *)(v10 + 32);
        v15 = sub_22EF5C728(a1, v8);
        if (v15)
        {
          v10 = v15;
          if (*(_BYTE *)(v15 + 16) == 2)
            continue;
        }
        goto LABEL_14;
      }
      v13 = (_QWORD *)*v13;
LABEL_9:
      if (!*v13)
        return 1;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_14:
  result = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v17 && *(_BYTE *)(v17 + 16) == 45)
  {
    if ((a4 & 1) != 0 || (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v17 + 24)) + 28) & 0x7Fu) - 35 > 2)
      return sub_22E699BD0(a1, v8, a3, a4);
    if (v12)
      return 0;
    result = sub_22E4EF458(a2);
    if ((_DWORD)result)
      return sub_22E699BD0(a1, v8, a3, a4);
  }
  return result;
}

void sub_22E69B834()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E69B848@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  char v10[32];
  _OWORD v11[3];

  v8 = a3[1];
  v11[0] = *a3;
  v11[1] = v8;
  v11[2] = a3[2];
  sub_22E69BAA8((uint64_t)v10, a1, a4);
  return sub_22E69B8E0(a5, a2, (uint64_t)v11, a4, v10[24]);
}

void sub_22E69B8B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E69B8CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E69B8E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  llvm::Type **v21;
  __int128 v22;
  _OWORD v23[3];
  _QWORD v24[4];
  __int16 v25;
  _BYTE v26[8];
  uint64_t v27;

  if (a5 == 2)
  {
    sub_22EF5CCD0(*(_QWORD *)(a2[18] + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v26);
    v9 = v27;
    v10 = sub_22E66C868(a2[18] + 280, a4, 0);
    v11 = llvm::PointerType::get();
    if ((*(_BYTE *)(a3 + 24) & 3) != 0)
      v12 = sub_22F28ABCC((_OWORD *)a3, a2);
    else
      v12 = *(_QWORD *)a3;
    v25 = 257;
    result = sub_22F2A3FDC(a2 + 34, v12, v11, (uint64_t)v24);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v24[0] = "varet";
    v25 = 259;
    v13 = sub_22F25E4D4((uint64_t)a2, a4, (uint64_t)v24, 0);
    v15 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v13 <= 7)
      v15 = 0;
    v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v13 <= 7)
      v16 = 0;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v16;
    v17 = 1 << (v14 & 7 | (8 * (v13 & 7)));
    if (v13 < 8)
      v17 = 0;
    *(_QWORD *)(a1 + 16) = v17;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if ((*(_BYTE *)(a3 + 24) & 3) != 0)
      v18 = sub_22F28ABCC((_OWORD *)a3, a2);
    else
      v18 = *(_QWORD *)a3;
    v20 = sub_22E66C868(a2[18] + 280, a4, 0);
    v25 = 257;
    v21 = (llvm::Type **)sub_22F2A3FDC(a2 + 34, v18, v20, (uint64_t)v24);
    v22 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v22;
    v23[2] = *(_OWORD *)(a1 + 32);
    return sub_22E3BEDDC((uint64_t)(a2 + 34), v21, (uint64_t)v23);
  }
  return result;
}

unint64_t sub_22E69BAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t result;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;

  v5 = sub_22E69BD58(a3);
  v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22E619D68(v5)
    || ((v13 = *v6) != 0 ? (v14 = *(_BYTE *)(*v6 + 16) == 31) : (v14 = 0),
        (v14
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
      && (v13 = sub_22F10CF48(v13)) != 0)
     && sub_22F28C8B4(v13)))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45 || (v8 = sub_22E69BE08(v7, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32))) == 0)
    {
LABEL_21:
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v5);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v22 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = result;
      v12 = v22 | 8;
      goto LABEL_22;
    }
    v9 = v8 == 1;
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v5);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v11 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
    v12 = v11 | (8 * v9);
  }
  else
  {
    v15 = *v6;
    v16 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v16 && *(_BYTE *)(v16 + 16) == 44)
    {
      v17 = sub_22F114198(*(_QWORD *)(v16 + 24));
      v5 = sub_22E496830(v17);
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
      v15 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    if (v15 && *(_BYTE *)(v15 + 16) == 9
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
      && (v15 = sub_22F10CF48(v15)) != 0)
    {
      v19 = ((unint64_t)*(unsigned int *)(v15 + 32) >> 1) & 0xFFFFFF;
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 15088) + 48))(*(_QWORD *)(v18 + 15088));
      v21 = 16496;
      if (v20)
        v21 = 16504;
      if (sub_22EF5CDF0(v18, *(_QWORD *)(*(_QWORD *)(v18 + v21) & 0xFFFFFFFFFFFFFFF0)) < v19)
        goto LABEL_21;
    }
    result = sub_22F2A3AE4(a2, v5);
    if ((_DWORD)result)
    {
      result = sub_22F110B20(*v6);
      *(_BYTE *)(a1 + 24) = 1;
      v12 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_QWORD *)(a1 + 16) = 0;
      if ((_DWORD)result)
        v12 |= 0x100u;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      v12 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
LABEL_22:
  *(_WORD *)(a1 + 25) = v12;
  return result;
}

uint64_t sub_22E69BCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)(a1 - 32);
  result = llvm::Instruction::Instruction();
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v9 = *(_QWORD *)(result - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(result - 16);
  }
  *v4 = a3;
  if (a3)
  {
    v8 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v6 = v8;
    *(_QWORD *)(result - 24) = v8;
    if (v8)
      *(_QWORD *)(v6 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v7;
    *v7 = v4;
  }
  return result;
}

uint64_t sub_22E69BD58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  v2 = sub_22F10E2FC(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (v2)
  {
    v3 = sub_22F114198(*(_QWORD *)(v2 + 24));
    if (sub_22E69BDA8(v3))
      return *(_QWORD *)(sub_22EFC3B90(v3) + 48);
  }
  return v1;
}

BOOL sub_22E69BDA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 331)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E69BE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  v4 = sub_22F114198(*(_QWORD *)(a1 + 24));
  if (v4)
    v5 = (*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 > 0xFFFFFFFC;
  else
    v5 = 0;
  if (v5)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v4);
  else
    return 2 * ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(a1 + 24)) + 76) & 0x18) != 0);
}

unint64_t sub_22E69BE7C(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;

  v3 = result;
  v4 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = (v7 & 0xFF800FF) == 86507531;
  else
    v8 = 0;
  if (v8)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 4;
    v19 = *(_WORD *)(result + 25) & 0xFE00;
    goto LABEL_20;
  }
  v9 = a3;
  if (sub_22E619D68(a3))
    goto LABEL_18;
  if (*(_BYTE *)(v5 + 16) != 31)
  {
    if (v7 != 31)
      goto LABEL_8;
    v20 = sub_22F10CF48(v5);
    if (!v20)
      goto LABEL_8;
    v5 = v20;
  }
  if (sub_22F28C8B4(v5))
  {
LABEL_18:
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v9);
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 24) = 2;
    v18 = *(_WORD *)(v3 + 25) & 0xFE00;
    *(_DWORD *)(v3 + 16) = result;
    v19 = v18 | 8;
    goto LABEL_20;
  }
LABEL_8:
  v11 = *v4;
  v12 = *(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12 && *(_BYTE *)(v12 + 16) == 44)
  {
    v13 = sub_22F114198(*(_QWORD *)(v12 + 24));
    v9 = sub_22E496830(v13);
    v4 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
    v11 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  }
  if (v11 && *(_BYTE *)(v11 + 16) == 9
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
    && (v11 = sub_22F10CF48(v11)) != 0)
  {
    v14 = ((unint64_t)*(unsigned int *)(v11 + 32) >> 1) & 0xFFFFFF;
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 48))(*(_QWORD *)(v15 + 15088));
    v17 = 16496;
    if (v16)
      v17 = 16504;
    if (sub_22EF5CDF0(v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + v17) & 0xFFFFFFFFFFFFFFF0)) < v14)goto LABEL_18;
  }
  result = sub_22F2A3AE4(a2, v9);
  if ((_DWORD)result)
  {
    result = sub_22F110B20(*v4);
    *(_BYTE *)(v3 + 24) = 1;
    v19 = *(_WORD *)(v3 + 25) & 0xFE00;
    *(_QWORD *)(v3 + 16) = 0;
    if ((_DWORD)result)
      v19 |= 0x100u;
  }
  else
  {
    *(_BYTE *)(v3 + 24) = 0;
    v19 = *(_WORD *)(v3 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(v3 + 16) = 0;
  }
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
LABEL_20:
  *(_WORD *)(v3 + 25) = v19;
  return result;
}

_QWORD *sub_22E69C08C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E69C0CC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E69C11C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24FA69068;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    MEMORY[0x2348A0E9C](v2, 0x1060C4049370F9BLL);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_22E6A2F00(a1 + 2, 0);
  v4 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_22E69C1AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24FA69068;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    MEMORY[0x2348A0E9C](v2, 0x1060C4049370F9BLL);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_22E6A2F00(a1 + 2, 0);
  v4 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E69C24C(uint64_t result, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v10[2];
  __int128 v11;

  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
    {
      v6 = result;
      result = llvm::GlobalValue::isDeclaration(this);
      if ((result & 1) == 0)
      {
        result = sub_22E6A2F54(a2);
        if ((_DWORD)result)
        {
          result = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (result)
            v7 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
          else
            v7 = 0;
          if (!v7)
            result = sub_22F10CF48(result);
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v8)
            v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
          else
            v9 = 0;
          if (!v9 && (*(_QWORD *)(*(_QWORD *)(a4 + 184) + 32) & 4) != 0)
          {
            v11 = *(_OWORD *)(*(_QWORD *)(v6 + 8) + 20);
            v10[0] = 0x8000000100000002;
            v10[1] = 0;
            result = sub_22E3B38EC(&v11, v10);
            if ((_DWORD)result)
              return llvm::Function::addFnAttr();
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22E69C364(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  _QWORD v16[2];

  *(_OWORD *)__p = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 20);
  v16[0] = 0x8000000300000002;
  v16[1] = 0;
  if ((sub_22E3B38EC(__p, v16) & 1) == 0)
  {
    llvm::Triple::getEffectiveMacCatalystVariant((llvm::Triple *)(a2[27] + 32));
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_DWORD *)(v3 + 64) = 0;
    v15 = v3;
    llvm::air::AIRTargetInfoBuilder::setABI();
    (*(void (**)(_QWORD))(*(_QWORD *)a2[27] + 448))(a2[27]);
    v4 = llvm::air::AIRTargetInfoBuilder::setABI();
    v5 = *(_QWORD *)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    v6 = v15;
    v15 = 0;
    if (v6)
      MEMORY[0x2348A0E9C](v6, 0x1000C4069DB8102);
    if (v14 < 0)
      operator delete(__p[0]);
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    llvm::Module::addModuleFlag();
    MEMORY[0x2348A0E9C](v5, 0x1000C4069DB8102);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::air::AIVersion::getImpl();
  llvm::NamedMDNode::addOperand();
  v7 = a2[19];
  if ((*(_DWORD *)(v7 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v7 + 104) & 0x20) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::air::AILanguageVersion::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  result = sub_22E6155EC(*(_QWORD **)(a2[18] + 1992), *(_DWORD *)(*(_QWORD *)(a2[18] + 1992) + 344));
  if (result)
  {
    v9 = *(_BYTE *)(result + 23);
    v10 = v9;
    v11 = v9 & 0x7F;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *(_QWORD *)(result + 8);
    if (v12)
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::air::AISourceFile::getImpl();
      return llvm::NamedMDNode::addOperand();
    }
  }
  return result;
}

void sub_22E69C698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t NamedValue;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  _BYTE *v22;
  void *__p;
  char v24;
  unint64_t v25;
  char *v26;
  void *v27;
  __int128 v28;
  _QWORD v29[10];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(a3 + 32) != v3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v3 + 32 * v7);
      NamedValue = llvm::Module::getNamedValue();
      if (NamedValue)
      {
        v11 = (llvm::Value *)NamedValue;
        v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) + 56))(v9 & 0xFFFFFFFFFFFFFFF8);
        if (sub_22E634350(v12))
        {
          llvm::Module::getOrInsertNamedMetadata();
          v27 = v29;
          v28 = xmmword_22F44E300;
          sub_22F242C48((uint64_t)&__p, (uint64_t)&v27);
          if ((*(_BYTE *)(v12 + 29) & 1) == 0)
            goto LABEL_18;
          sub_22EFC8E88(v12);
          v14 = *(uint64_t **)v13;
          v15 = *(unsigned int *)(v13 + 8);
          v16 = *(uint64_t **)v13;
          if ((_DWORD)v15)
          {
            v17 = 8 * v15;
            v16 = *(uint64_t **)v13;
            while (*(_WORD *)(*v16 + 32) != 109)
            {
              ++v16;
              v17 -= 8;
              if (!v17)
                goto LABEL_18;
            }
          }
          if (v16 == &v14[v15])
          {
LABEL_18:
            (*(void (**)(_QWORD, uint64_t, void **))(**(_QWORD **)(*(_QWORD *)(a2 + 224) + 16) + 216))(*(_QWORD *)(*(_QWORD *)(a2 + 224) + 16), v12, &__p);
          }
          else
          {
            do
            {
              v19 = *v14++;
              v18 = v19;
            }
            while (*(_WORD *)(v19 + 32) != 109);
            if (((1 << *(_DWORD *)(llvm::Module::getDataLayout(*(llvm::Module **)(a2 + 200)) + 28)) & 0xEB) == 0)
            {
              v22 = v26;
              if ((unint64_t)v26 >= v25)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&__p);
              }
              else
              {
                ++v26;
                *v22 = 1;
              }
            }
            v20 = *(const void **)(v18 + 40);
            v21 = *(unsigned int *)(v18 + 36);
            if (v25 - (unint64_t)v26 >= v21)
            {
              if ((_DWORD)v21)
              {
                memcpy(v26, v20, v21);
                v26 += v21;
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v20);
            }
          }
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
          llvm::Value::getContext(v11);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 248))(&__p, a1, a2, *(_QWORD *)(v12 + 48), 0);
          llvm::air::AIExternallyInitialized::getImpl();
          llvm::NamedMDNode::addOperand();
          if (v24 < 0)
            operator delete(__p);
          if (v27 != v29)
            free(v27);
        }
      }
      v3 = *(_QWORD *)(a3 + 24);
      v7 = ++v8;
    }
    while (v8 != (*(_QWORD *)(a3 + 32) - v3) >> 5);
  }
}

uint64_t sub_22E69C970()
{
  return 0;
}

uint64_t sub_22E69C97C(_QWORD *a1, uint64_t a2, llvm::Constant **a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::LLVMContext *v35;
  int v36;
  uint64_t Int8Ty;
  uint64_t v38;
  uint64_t v39;
  llvm::Type *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  void **v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  size_t v58;
  uint64_t v59;
  uint64_t Declaration;
  llvm::LLVMContext *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::LLVMContext *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t NullValue;
  void *__p[2];
  char v76;
  __int16 v77;
  _QWORD v78[3];
  llvm::Constant **v79;
  _BYTE v80[24];
  _BYTE v81[11];
  _WORD v82[30];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_DWORD *)(v12 + 16) == 11;
  else
    v13 = 0;
  if (v13)
  {
    v14 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
    if (((*(_DWORD *)(v12 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v15 && (*(_DWORD *)(v15 + 16) & 0xFF800FF) == 87031819)
        goto LABEL_38;
    }
  }
  else
  {
    v14 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
  }
  v17 = sub_22F10E0EC(v11);
  v18 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_DWORD *)(v18 + 16);
  if (v18)
    v20 = v19 == 11;
  else
    v20 = 0;
  if (v20)
  {
    v22 = ((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  }
  else if (v18 && v19 == 44)
  {
    v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
    if ((*(_BYTE *)(v21 + 74) & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_38;
      goto LABEL_22;
    }
    v22 = *(_QWORD *)(v21 + 128) > 7uLL;
  }
  else
  {
    v22 = v19 == 9;
  }
  if (v17 == v22)
    goto LABEL_38;
LABEL_22:
  v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v23 - 55 > 1
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2)
  {
    if ((v23 & 0xFF800FF) == 0x690000B)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v26)
        v27 = (*(_DWORD *)(v26 + 16) & 0xFF800FF) == 112721931;
      else
        v27 = 0;
      if (!v27)
        return 0;
    }
    else
    {
      if ((v23 & 0xFF800FF) != 0x6B8000B)
        return 0;
      v24 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v24 || (*(_DWORD *)(v24 + 16) & 0xFF800FF) != 110100491)
        return 0;
    }
  }
LABEL_38:
  v79 = a3;
  v29 = sub_22E3E4B64(*v10);
  v30 = a4;
  if (v29)
    v30 = *(_QWORD *)(v29 + 32);
  v31 = sub_22E3E4B64(*v14);
  v32 = a5;
  if (v31)
    v32 = *(_QWORD *)(v31 + 32);
  v33 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 256))(a1, *(_QWORD *)(a2 + 144), a4);
  v34 = v33;
  if ((*(_DWORD *)(v33 + 8) & 0xFE) == 0x12)
    v33 = **(_QWORD **)(v33 + 16);
  if (llvm::Type::isIntegerTy((llvm::Type *)v33))
  {
    *(_OWORD *)v80 = *(_OWORD *)(a1[1] + 20);
    __p[0] = (void *)0x8000000800000001;
    __p[1] = 0;
    if (sub_22E3B38EC(v80, __p))
    {
      v36 = *(unsigned __int8 *)(v34 + 8);
      Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v35);
      if (v36 != 13)
        Int8Ty = llvm::FixedVectorType::get();
      *(_WORD *)&v81[8] = 257;
      a3 = (llvm::Constant **)sub_22E3C1740((uint64_t *)(a2 + 272), 39, (uint64_t)a3, Int8Ty, (uint64_t)v80);
      v79 = a3;
      v34 = Int8Ty;
    }
  }
  v38 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 256))(a1, *(_QWORD *)(a2 + 144), a5);
  v39 = v38;
  if ((*(_DWORD *)(v38 + 8) & 0xFE) == 0x12)
    v38 = **(_QWORD **)(v38 + 16);
  if (llvm::Type::isIntegerTy((llvm::Type *)v38))
  {
    *(_OWORD *)v80 = *(_OWORD *)(a1[1] + 20);
    __p[0] = (void *)0x8000000100000002;
    __p[1] = 0;
    if (sub_22E3B38EC(v80, __p))
    {
      if ((*(_DWORD *)(v34 + 8) & 0xFE) == 0x12)
        v41 = *(unsigned __int8 *)(**(_QWORD **)(v34 + 16) + 8);
      else
        v41 = *(_DWORD *)(v34 + 8);
      v71 = a2 + 272;
      if (v41 == 13)
      {
        *(_WORD *)&v81[8] = 257;
        NullValue = llvm::Constant::getNullValue(*a3, v40);
        return sub_22E3C18F4(v71, 33, (uint64_t *)a3, NullValue, (uint64_t)v80);
      }
      else
      {
        llvm::Constant::getNullValue((llvm::Constant *)v34, v40);
        *(_WORD *)&v81[8] = 257;
        return llvm::IRBuilderBase::CreateFCmpHelper();
      }
    }
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 216) + 68) & 0xFFFFFFF7) == 3)
  {
    *(_OWORD *)v80 = *(_OWORD *)(a1[1] + 20);
    __p[0] = (void *)0x8000000B00000001;
    __p[1] = 0;
    sub_22E3B38EC(v80, __p);
  }
  *(_QWORD *)v80 = v81;
  qmemcpy(v81, "air.convert", sizeof(v81));
  *(_OWORD *)&v80[8] = xmmword_22F45AB50;
  v42 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F10E0EC(v43))
  {
    qmemcpy(v82, ".f.", 3);
  }
  else
  {
    if (sub_22F110930(v43))
    {
      v44 = *(_QWORD *)&v80[8];
      if (*(_QWORD *)&v80[16] < (unint64_t)(*(_QWORD *)&v80[8] + 3))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v44 = *(_QWORD *)&v80[8];
      }
      v45 = *(_QWORD *)v80 + v44;
      *(_BYTE *)(v45 + 2) = 46;
      v46 = 29486;
    }
    else
    {
      sub_22F110B50(*v42);
      v47 = *(_QWORD *)&v80[8];
      if (*(_QWORD *)&v80[16] < (unint64_t)(*(_QWORD *)&v80[8] + 3))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v47 = *(_QWORD *)&v80[8];
      }
      v45 = *(_QWORD *)v80 + v47;
      *(_BYTE *)(v45 + 2) = 46;
      v46 = 29998;
    }
    *(_WORD *)v45 = v46;
  }
  *(_QWORD *)&v80[8] += 3;
  v48 = __p;
  llvm_utils::getMangledTypeStr();
  if (v76 >= 0)
  {
    v49 = v76 & 0x7F;
  }
  else
  {
    v48 = (void **)__p[0];
    v49 = (size_t)__p[1];
  }
  v50 = *(_QWORD *)&v80[8];
  if (*(_QWORD *)&v80[16] >= *(_QWORD *)&v80[8] + v49)
  {
    if (!v49)
      goto LABEL_74;
    goto LABEL_73;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v50 = *(_QWORD *)&v80[8];
  if (v49)
  {
LABEL_73:
    memcpy((void *)(*(_QWORD *)v80 + v50), v48, v49);
    v50 = *(_QWORD *)&v80[8];
  }
LABEL_74:
  *(_QWORD *)&v80[8] = v50 + v49;
  if (v76 < 0)
    operator delete(__p[0]);
  v51 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F10E0EC(v51))
  {
    v52 = *(_QWORD *)&v80[8];
    if (*(_QWORD *)&v80[16] < (unint64_t)(*(_QWORD *)&v80[8] + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v52 = *(_QWORD *)&v80[8];
    }
    v53 = *(_QWORD *)v80 + v52;
    *(_BYTE *)(v53 + 2) = 46;
    v54 = 26158;
  }
  else if (sub_22F110930(v51))
  {
    v55 = *(_QWORD *)&v80[8];
    if (*(_QWORD *)&v80[16] < (unint64_t)(*(_QWORD *)&v80[8] + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v55 = *(_QWORD *)&v80[8];
    }
    v53 = *(_QWORD *)v80 + v55;
    *(_BYTE *)(v53 + 2) = 46;
    v54 = 29486;
  }
  else
  {
    sub_22F110B50(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0));
    v56 = *(_QWORD *)&v80[8];
    if (*(_QWORD *)&v80[16] < (unint64_t)(*(_QWORD *)&v80[8] + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v56 = *(_QWORD *)&v80[8];
    }
    v53 = *(_QWORD *)v80 + v56;
    *(_BYTE *)(v53 + 2) = 46;
    v54 = 29998;
  }
  *(_WORD *)v53 = v54;
  *(_QWORD *)&v80[8] += 3;
  v57 = __p;
  llvm_utils::getMangledTypeStr();
  if (v76 >= 0)
  {
    v58 = v76 & 0x7F;
  }
  else
  {
    v57 = (void **)__p[0];
    v58 = (size_t)__p[1];
  }
  v59 = *(_QWORD *)&v80[8];
  if (*(_QWORD *)&v80[16] < *(_QWORD *)&v80[8] + v58)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v59 = *(_QWORD *)&v80[8];
    if (!v58)
      goto LABEL_93;
    goto LABEL_92;
  }
  if (v58)
  {
LABEL_92:
    memcpy((void *)(*(_QWORD *)v80 + v59), v57, v58);
    v59 = *(_QWORD *)&v80[8];
  }
LABEL_93:
  *(_QWORD *)&v80[8] = v59 + v58;
  if (v76 < 0)
    operator delete(__p[0]);
  sub_22E6A2FB4((uint64_t)a1, *(_QWORD *)(a2 + 144));
  llvm::air::AIRFunctionInfo::lookupName();
  sub_22E6A2FB4((uint64_t)a1, *(_QWORD *)(a2 + 144));
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 216) + 68) & 0xFFFFFFF7) == 3
    && (*(_OWORD *)__p = *(_OWORD *)(a1[1] + 20),
        v78[0] = 0x8000000B00000001,
        v78[1] = 0,
        sub_22E3B38EC(__p, v78)))
  {
    v28 = llvm::UndefValue::get();
    v62 = *(unsigned int *)(v39 + 32);
    if ((_DWORD)v62)
    {
      v63 = 0;
      v64 = (uint64_t)v79;
      do
      {
        v78[0] = 0;
        v77 = 257;
        llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v61);
        v65 = llvm::ConstantInt::get();
        v78[0] = sub_22E420480((uint64_t *)(a2 + 272), v64, v65, (uint64_t)__p);
        if (Declaration)
          v66 = *(_QWORD *)(Declaration + 24);
        else
          v66 = 0;
        v77 = 257;
        v67 = sub_22E462B78((uint64_t *)(a2 + 272), v66, Declaration, (uint64_t)v78, 1, (uint64_t)__p, 0);
        v77 = 257;
        llvm::Type::getInt64Ty(*(llvm::Type **)(a2 + 336), v68);
        v69 = llvm::ConstantInt::get();
        v28 = sub_22E3ED5D4((uint64_t *)(a2 + 272), v28, (uint64_t)v67, v69, (uint64_t)__p);
        ++v63;
      }
      while (v62 != v63);
    }
  }
  else
  {
    if (Declaration)
      v70 = *(_QWORD *)(Declaration + 24);
    else
      v70 = 0;
    v77 = 257;
    v28 = (uint64_t)sub_22E462B78((uint64_t *)(a2 + 272), v70, Declaration, (uint64_t)&v79, 1, (uint64_t)__p, 0);
    *(_QWORD *)(v28 + 64) = *(_QWORD *)(Declaration + 112);
  }
  if (*(_BYTE **)v80 != v81)
    free(*(void **)v80);
  return v28;
}

void sub_22E69D318(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  void *v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(_QWORD *, uint64_t, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  std::string::size_type v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint8x16_t v58;
  __int32 v59;
  _DWORD *v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  std::string::size_type v67;
  unsigned int v68;
  char **v69;
  const std::string::value_type *v70;
  unint64_t v71;
  std::string::size_type v72;
  _BOOL4 v73;
  _BOOL4 v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::string *v79;
  std::string::size_type v80;
  unsigned int v81;
  std::string *v82;
  std::string::size_type v83;
  unsigned int v84;
  std::string *v85;
  std::string::size_type v86;
  std::string::size_type v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  const char *v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  BOOL v145;
  std::string::size_type v146;
  std::string *v147;
  unsigned int v148;
  _QWORD *v149;
  unsigned int v150;
  _QWORD *v151;
  unsigned int v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  unint64_t v159;
  _DWORD *v160;
  unsigned int v161;
  const std::string::value_type *v162;
  std::string::size_type v163;
  int v164;
  uint64_t v165;
  std::string::size_type v166;
  std::string::size_type v167;
  std::string::size_type v168;
  const std::string::value_type *v169;
  std::string::size_type v170;
  std::string *v171;
  std::string::size_type v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::string *v176;
  std::string::size_type v177;
  unsigned int v178;
  std::string::size_type v179;
  std::string::size_type v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  std::string *v185;
  std::string::size_type v186;
  std::string *v187;
  std::string::size_type v188;
  int v189;
  char *v190;
  std::string::size_type v191;
  uint64_t v192;
  std::string::size_type v193;
  uint64_t v194;
  uint64_t v195;
  const std::string::value_type *v196;
  unint64_t v197;
  _DWORD *v198;
  unsigned int v199;
  std::string::size_type v200;
  int v201;
  uint64_t v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string::size_type v205;
  const std::string::value_type *v206;
  std::string::size_type v207;
  std::string *v208;
  std::string::size_type v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::string::size_type v216;
  uint64_t v217;
  uint64_t v218;
  const std::string::value_type *v219;
  unint64_t v220;
  _DWORD *v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  std::string *v225;
  std::string::size_type v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::string *v230;
  std::string::size_type v231;
  uint64_t v232;
  uint64_t v233;
  std::string *v234;
  std::string::size_type v235;
  unsigned int v236;
  std::string *v237;
  std::string::size_type v238;
  unsigned int v239;
  std::string *v240;
  std::string::size_type v241;
  std::string v242;
  std::string v243;
  std::string v244;
  std::string __p[12];
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
    v10 = (unint64_t)sub_22F10D2BC(a3);
  v11 = sub_22EF5BA38(v9, v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)a4
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
  {
    v14 = sub_22F10ACF8(v13);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 248))(a1, a2, v14, 1);
    return;
  }
  v15 = sub_22E3E4B64(v13);
  if (v15)
  {
    v16 = v15;
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    if ((*(_DWORD *)(v15 + 16) & 0x780000) == 0x80000)
      std::string::append(a5, "packed_");
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(v16 + 32), a4);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = __p;
    else
      v17 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p[0].__r_.__value_.__l.__size_;
    std::string::append(a5, (const std::string::value_type *)v17, size);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    std::to_string(__p, *(_DWORD *)(v16 + 20));
LABEL_18:
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = __p;
    else
      v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
    else
      v20 = __p[0].__r_.__value_.__l.__size_;
    std::string::append(a5, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_26:
      operator delete(v21);
      return;
    }
    return;
  }
  v22 = sub_22F110B50(*v12);
  v23 = *(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (v22 && (!*(_QWORD *)v23 || (*(_DWORD *)(*(_QWORD *)v23 + 16) & 0xFF800FF) != 87031819))
  {
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    std::string::append(a5, "u");
    v25 = sub_22EF721C8(*(_QWORD *)(a2 + 144), v11);
    (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, unint64_t, uint64_t))(*a1 + 248))(__p, a1, a2, v25, a4);
    goto LABEL_18;
  }
  v26 = *(_QWORD *)v23;
  v27 = *(_DWORD *)(*(_QWORD *)v23 + 16);
  if (v26)
    v28 = v27 == 11;
  else
    v28 = 0;
  if (v28)
  {
    if (((v27 >> 19) & 0x1FF) - 167 <= 0xC && ((1 << ((v27 >> 19) + 89)) & 0x1803) != 0)
    {
      *((_BYTE *)&a5->__r_.__value_.__s + 23) = 4;
      strcpy((char *)a5, "char");
      return;
    }
  }
  else if (v27 == 44)
  {
    v29 = sub_22F114198(*(_QWORD *)(v26 + 24));
    v30 = sub_22E496830(v29);
    v31 = *(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t))(*a1 + 248);
    v32 = v30;
LABEL_53:
    v31(a1, a2, v32, a4);
    return;
  }
  v34 = sub_22F10D4DC(*v12);
  if (v34)
  {
    v32 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v34 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                    + ((2 * *(_QWORD *)(*(_QWORD *)(v34 + 24) + 80)) & 8));
LABEL_52:
    v31 = *(void (**)(_QWORD *, uint64_t, unint64_t, uint64_t))(*a1 + 248);
    goto LABEL_53;
  }
  v35 = *v12;
  if (*v12 && *(_BYTE *)(v35 + 16) == 24
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v35 = sub_22F10CF48(v35)) != 0)
  {
    v32 = *(_QWORD *)(v35 + 40);
    goto LABEL_52;
  }
  v36 = *(_QWORD *)(a2 + 152);
  if ((*(_BYTE *)(v36 + 104) & 0x20) != 0)
  {
    v40 = sub_22E54A900(*v12);
    if (v40)
    {
      v76 = v40;
      memset(&v243, 0, sizeof(v243));
      v77 = sub_22F10C2A4(v40);
      if ((*(_DWORD *)(v77 + 28) & 0x7Fu) - 35 >= 3)
        v78 = 0;
      else
        v78 = v77;
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v78 + 168) + 8), a4);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = __p;
      else
        v79 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
      else
        v80 = __p[0].__r_.__value_.__l.__size_;
      std::string::append(&v243, (const std::string::value_type *)v79, v80);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v81 = sub_22F409640(v76);
      std::to_string(__p, v81);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = __p;
      else
        v82 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
      else
        v83 = __p[0].__r_.__value_.__l.__size_;
      std::string::append(&v243, (const std::string::value_type *)v82, v83);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      std::string::append(&v243, "x");
      v84 = sub_22F4096D0(v76);
      std::to_string(__p, v84);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = __p;
      else
        v85 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
      else
        v86 = __p[0].__r_.__value_.__l.__size_;
      std::string::append(&v243, (const std::string::value_type *)v85, v86);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_97;
    }
    v41 = sub_22E53C624(*v12);
    if (v41)
    {
      v42 = v41;
      memset(&v243, 0, sizeof(v243));
      v43 = sub_22F10C2A4(v41);
      if ((*(_DWORD *)(v43 + 28) & 0x7Fu) - 35 >= 3)
        v44 = 0;
      else
        v44 = v43;
      v45 = *(_QWORD *)(v44 + 40);
      v46 = v45 & 7;
      v47 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (v46)
        v48 = 1;
      else
        v48 = v47 == 0;
      if (v48)
      {
        v62 = 0;
        v61 = "";
      }
      else
      {
        v60 = *(_DWORD **)(v47 + 16);
        v63 = *v60;
        v61 = (const std::string::value_type *)(v60 + 4);
        v62 = v63;
      }
      std::string::append(&v243, v61, v62);
      std::string::append(&v243, "<");
      v64 = sub_22F10C2A4(v42);
      if ((*(_DWORD *)(v64 + 28) & 0x7Fu) - 35 >= 3)
        v65 = 0;
      else
        v65 = v64;
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v65 + 168) + 8), a4);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = __p;
      else
        v66 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
      else
        v67 = __p[0].__r_.__value_.__l.__size_;
      std::string::append(&v243, (const std::string::value_type *)v66, v67);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      std::string::append(&v243, ", ");
      v68 = sub_22F10C9BC(v42);
      if (v68 > 3)
        goto LABEL_96;
      v69 = off_24FA6CF30;
      goto LABEL_94;
    }
    if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0))
    {
      *((_BYTE *)&v243.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v243, "sampler");
LABEL_97:
      v49 = v243.__r_.__value_.__l.__size_;
      v38 = v243.__r_.__value_.__r.__words[0];
      v71 = LODWORD(v243.__r_.__value_.__r.__words[2]) | ((unint64_t)(WORD2(v243.__r_.__value_.__r.__words[2]) | (v243.__r_.__value_.__s.__data_[22] << 16)) << 32);
      LODWORD(v72) = HIBYTE(v243.__r_.__value_.__r.__words[2]);
LABEL_144:
      v39 = (char)v72;
      v72 = v72;
      if ((v72 & 0x80u) != 0)
        v72 = v49;
      if (v72)
      {
        a5->__r_.__value_.__r.__words[0] = v38;
        a5->__r_.__value_.__l.__size_ = v49;
        LODWORD(a5->__r_.__value_.__r.__words[2]) = v71;
        a5->__r_.__value_.__s.__data_[22] = BYTE6(v71);
        WORD2(a5->__r_.__value_.__r.__words[2]) = WORD2(v71);
        *((_BYTE *)&a5->__r_.__value_.__s + 23) = v39;
        return;
      }
      v37 = *v12;
      goto LABEL_149;
    }
    if (sub_22F10B8E0(*v12, "command_buffer", 14, 0, 0))
    {
      *((_BYTE *)&v243.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v243, "command_buffer");
      goto LABEL_97;
    }
    if (sub_22F10B8E0(*v12, "render_pipeline_state", 21, 0, 0))
    {
      *((_BYTE *)&v243.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&v243, "render_pipeline_state");
      goto LABEL_97;
    }
    if (sub_22F10B8E0(*v12, "compute_pipeline_state", 22, 0, 0))
    {
      *(_OWORD *)&v243.__r_.__value_.__l.__data_ = *(_OWORD *)"compute_pipeline_state";
      v87 = *(_QWORD *)"ne_state";
    }
    else
    {
      if (!sub_22F10CDF4(*v12))
      {
        v92 = sub_22E54AF78(*v12);
        if (v92)
        {
          v181 = v92;
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
          __p[0].__r_.__value_.__l.__size_ = 0x700000000;
          if (sub_22F10BA34(v92))
          {
            v182 = sub_22F40947C(v181);
            if ((v182 & 0xFF00000000) != 0 && v182 >= 3)
            {
              v183 = v182;
              v184 = &v244.__r_.__value_.__s.__data_[21];
              do
              {
                *--v184 = (v183 % 0xA) | 0x30;
                v145 = v183 > 9;
                v183 /= 0xAuLL;
              }
              while (v145);
              sub_22E3B4274(&v242, v184, &v244.__r_.__value_.__s.__data_[21], (char *)&v244.__r_.__value_.__r.__words[2] + 5 - v184);
              v185 = std::string::insert(&v242, 0, "multi_level_instancing<");
              v186 = v185->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v243.__r_.__value_.__l.__data_ = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
              v243.__r_.__value_.__r.__words[2] = v186;
              v185->__r_.__value_.__l.__size_ = 0;
              v185->__r_.__value_.__r.__words[2] = 0;
              v185->__r_.__value_.__r.__words[0] = 0;
              v187 = std::string::append(&v243, ">");
              v188 = v187->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v244.__r_.__value_.__l.__data_ = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
              v244.__r_.__value_.__r.__words[2] = v188;
              v187->__r_.__value_.__l.__size_ = 0;
              v187->__r_.__value_.__r.__words[2] = 0;
              v187->__r_.__value_.__r.__words[0] = 0;
              sub_22F2A405C((uint64_t)__p, (uint64_t)&v244);
              if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v244.__r_.__value_.__l.__data_);
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v243.__r_.__value_.__l.__data_);
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v242.__r_.__value_.__l.__data_);
            }
            else
            {
              sub_22F2A40E4((uint64_t)__p, "instancing");
            }
          }
          if (sub_22F10C320(v181))
            sub_22F2A4174((uint64_t)__p);
          if (sub_22F10C39C(v181))
            sub_22F2A40E4((uint64_t)__p, "curve_data");
          if (sub_22F10C418(v181))
            sub_22F2A40E4((uint64_t)__p, "world_space_data");
          if (sub_22F10C0BC(v181))
            sub_22F2A40E4((uint64_t)__p, "primitive_motion");
          if (sub_22F10C138(v181))
            sub_22F2A40E4((uint64_t)__p, "instance_motion");
          if (sub_22F10C494(v181))
            sub_22F2A40E4((uint64_t)__p, "extended_limits");
          memset(&v243, 0, sizeof(v243));
          v192 = sub_22F10C2A4(v181);
          v193 = 0;
          if ((*(_DWORD *)(v192 + 28) & 0x7Fu) - 35 >= 3)
            v194 = 0;
          else
            v194 = v192;
          v195 = *(_QWORD *)(v194 + 40);
          v196 = "";
          if ((v195 & 7) == 0)
          {
            v197 = v195 & 0xFFFFFFFFFFFFFFF8;
            if (v197)
            {
              v198 = *(_DWORD **)(v197 + 16);
              v199 = *v198;
              v196 = (const std::string::value_type *)(v198 + 4);
              v193 = v199;
            }
          }
          std::string::append(&v243, v196, v193);
          std::string::append(&v243, "<");
          v200 = __p[0].__r_.__value_.__r.__words[0];
          v201 = __p[0].__r_.__value_.__r.__words[1];
          memset(&v244, 0, sizeof(v244));
          if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
          {
            v202 = 0;
            v203 = __p[0].__r_.__value_.__r.__words[0] + 40 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
            v204 = 2 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) - 2;
            do
            {
              v204 += *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + v202 + 8);
              v202 += 40;
            }
            while (40 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) != v202);
            std::string::reserve(&v244, v204);
            std::string::append(&v244, *(const std::string::value_type **)v200, *(_QWORD *)(v200 + 8));
            if (v201 != 1)
            {
              v205 = v200 + 40;
              do
              {
                std::string::append(&v244, ", ", 2uLL);
                v206 = *(const std::string::value_type **)v205;
                v207 = *(_QWORD *)(v205 + 8);
                v205 += 40;
                std::string::append(&v244, v206, v207);
              }
              while (v205 != v203);
            }
          }
          if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v208 = &v244;
          else
            v208 = (std::string *)v244.__r_.__value_.__r.__words[0];
          if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v209 = *((_BYTE *)&v244.__r_.__value_.__s + 23) & 0x7F;
          else
            v209 = v244.__r_.__value_.__l.__size_;
          std::string::append(&v243, (const std::string::value_type *)v208, v209);
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          std::string::append(&v243, ">");
          sub_22F2A44DC(&__p[0].__r_.__value_.__l.__data_);
          goto LABEL_97;
        }
        v93 = sub_22E54AFCC(*v12);
        if (v93)
        {
          v94 = v93;
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)(a1[1] + 20);
          *(_OWORD *)&v244.__r_.__value_.__l.__data_ = 0x8000000400000002;
          if (sub_22E3B38EC(__p, &v244))
          {
            v95 = sub_22F10BA34(v94);
            if (v95)
              v96 = "instance_acceleration_structure";
            else
              v96 = "primitive_acceleration_structure";
            if (v95)
              v97 = 31;
            else
              v97 = 32;
            v243.__r_.__value_.__l.__size_ = v97;
            v243.__r_.__value_.__r.__words[2] = (v97 | 7) - 0x7FFFFFFFFFFFFFFFLL;
            v243.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new((v97 | 7) + 1);
            memcpy(v243.__r_.__value_.__l.__data_, v96, v97);
            *(_BYTE *)(v243.__r_.__value_.__r.__words[0] + v97) = 0;
          }
          else
          {
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
            __p[0].__r_.__value_.__l.__size_ = 0x300000000;
            if (sub_22F10BA34(v94))
            {
              v148 = __p[0].__r_.__value_.__r.__words[1];
              if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) >= HIDWORD(__p[0].__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v148 = __p[0].__r_.__value_.__r.__words[1];
              }
              v149 = (_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 16 * v148);
              *v149 = "instancing";
              v149[1] = 10;
              ++LODWORD(__p[0].__r_.__value_.__r.__words[1]);
            }
            if (sub_22F10C0BC(v94))
            {
              v150 = __p[0].__r_.__value_.__r.__words[1];
              if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) >= HIDWORD(__p[0].__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v150 = __p[0].__r_.__value_.__r.__words[1];
              }
              v151 = (_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 16 * v150);
              *v151 = "primitive_motion";
              v151[1] = 16;
              ++LODWORD(__p[0].__r_.__value_.__r.__words[1]);
            }
            if (sub_22F10C138(v94))
            {
              v152 = __p[0].__r_.__value_.__r.__words[1];
              if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) >= HIDWORD(__p[0].__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v152 = __p[0].__r_.__value_.__r.__words[1];
              }
              v153 = (_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 16 * v152);
              *v153 = "instance_motion";
              v153[1] = 15;
              ++LODWORD(__p[0].__r_.__value_.__r.__words[1]);
            }
            memset(&v243, 0, sizeof(v243));
            v154 = sub_22F10C2A4(v94);
            v155 = 0;
            if ((*(_DWORD *)(v154 + 28) & 0x7Fu) - 35 >= 3)
              v156 = 0;
            else
              v156 = v154;
            v157 = *(_QWORD *)(v156 + 40);
            v158 = "";
            if ((v157 & 7) == 0)
            {
              v159 = v157 & 0xFFFFFFFFFFFFFFF8;
              if (v159)
              {
                v160 = *(_DWORD **)(v159 + 16);
                v161 = *v160;
                v158 = (const char *)(v160 + 4);
                v155 = v161;
              }
            }
            if (v155)
              v162 = v158 + 1;
            else
              v162 = v158;
            std::string::append(&v243, v162, v155 - (v155 != 0));
            std::string::append(&v243, "<");
            v163 = __p[0].__r_.__value_.__r.__words[0];
            v164 = __p[0].__r_.__value_.__r.__words[1];
            memset(&v244, 0, sizeof(v244));
            if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
            {
              v165 = 0;
              v166 = __p[0].__r_.__value_.__r.__words[0] + 16 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
              v167 = 2 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) - 2;
              do
              {
                v167 += *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + v165 + 8);
                v165 += 16;
              }
              while (16 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) != v165);
              std::string::reserve(&v244, v167);
              std::string::append(&v244, *(const std::string::value_type **)v163, *(_QWORD *)(v163 + 8));
              if (v164 != 1)
              {
                v168 = v163 + 16;
                do
                {
                  std::string::append(&v244, ", ", 2uLL);
                  v169 = *(const std::string::value_type **)v168;
                  v170 = *(_QWORD *)(v168 + 8);
                  v168 += 16;
                  std::string::append(&v244, v169, v170);
                }
                while (v168 != v166);
              }
            }
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v171 = &v244;
            else
              v171 = (std::string *)v244.__r_.__value_.__r.__words[0];
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v172 = *((_BYTE *)&v244.__r_.__value_.__s + 23) & 0x7F;
            else
              v172 = v244.__r_.__value_.__l.__size_;
            std::string::append(&v243, (const std::string::value_type *)v171, v172);
            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v244.__r_.__value_.__l.__data_);
            std::string::append(&v243, ">");
            if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
              free(__p[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_97;
        }
        v98 = sub_22E5453EC(*v12);
        if (v98)
        {
          v99 = sub_22F10C2A4(v98);
          v100 = (*(_DWORD *)(v99 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v99;
          if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v100 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            goto LABEL_283;
        }
        v101 = sub_22E5453EC(*v12);
        if (v101)
        {
          v102 = sub_22F10C2A4(v101);
          v103 = (*(_DWORD *)(v102 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v102;
          if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v103 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_283;
        }
        v104 = sub_22E5453EC(*v12);
        if (v104)
        {
          v105 = sub_22F10C2A4(v104);
          v106 = (*(_DWORD *)(v105 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v105;
          if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v106 + 168) + 8) & 0xFFFFFFFFFFFFFFF0), "command_buffer", 14, 0, 0) & 1) != 0)goto LABEL_283;
        }
        v107 = sub_22E5453EC(*v12);
        if (v107)
        {
          v108 = sub_22F10C2A4(v107);
          v109 = (*(_DWORD *)(v108 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v108;
          v110 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v109 + 168) + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((sub_22F10B8E0(v110, "render_pipeline_state", 21, 0, 0) & 1) != 0
            || (sub_22F10B8E0(v110, "compute_pipeline_state", 22, 0, 0) & 1) != 0)
          {
            goto LABEL_283;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(a2 + 152) + 122) & 4) != 0)
        {
          v111 = sub_22E5453EC(*v12);
          if (v111)
          {
            v112 = sub_22F10C2A4(v111);
            v113 = (*(_DWORD *)(v112 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v112;
            if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v113 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
              goto LABEL_283;
          }
        }
        v114 = sub_22E5453EC(*v12);
        if (v114)
        {
          v115 = sub_22F10C2A4(v114);
          v116 = (*(_DWORD *)(v115 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v115;
          if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v116 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            goto LABEL_283;
        }
        if ((v117 = sub_22E5453EC(*v12)) != 0
          && ((v118 = sub_22F10C2A4(v117), (*(_DWORD *)(v118 + 28) & 0x7Fu) - 35 >= 3) ? (v119 = 0) : (v119 = v118),
              (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v119 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          || (v120 = sub_22E5453EC(*v12)) != 0
          && ((v121 = sub_22F10C2A4(v120), (*(_DWORD *)(v121 + 28) & 0x7Fu) - 35 >= 3) ? (v122 = 0) : (v122 = v121),
              sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v122 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
LABEL_283:
          v173 = sub_22E5453EC(*v12);
          memset(&v243, 0, sizeof(v243));
          std::string::append(&v243, "array");
          std::string::append(&v243, "<");
          v174 = sub_22F10C2A4(v173);
          if ((*(_DWORD *)(v174 + 28) & 0x7Fu) - 35 >= 3)
            v175 = 0;
          else
            v175 = v174;
          (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v175 + 168) + 8), a4);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v176 = __p;
          else
            v176 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v177 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
          else
            v177 = __p[0].__r_.__value_.__l.__size_;
          std::string::append(&v243, (const std::string::value_type *)v176, v177);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          std::string::append(&v243, ", ");
          v178 = sub_22F409218(v173);
          std::to_string(__p, v178);
          v144 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          v145 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v146 = __p[0].__r_.__value_.__l.__size_;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = __p;
          else
            v147 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        else
        {
          v123 = sub_22E5457C4(*v12);
          if (v123)
          {
            v124 = sub_22F10C2A4(v123);
            v125 = (*(_DWORD *)(v124 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v124;
            if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v125 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
              goto LABEL_239;
          }
          v126 = sub_22E5457C4(*v12);
          if (v126)
          {
            v127 = sub_22F10C2A4(v126);
            v128 = (*(_DWORD *)(v127 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v127;
            if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v128 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_239;
          }
          v129 = sub_22E5457C4(*v12);
          if (v129)
          {
            v130 = sub_22F10C2A4(v129);
            v131 = (*(_DWORD *)(v130 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v130;
            if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v131 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
              goto LABEL_239;
          }
          v132 = sub_22E5457C4(*v12);
          if (v132)
          {
            v133 = sub_22F10C2A4(v132);
            v134 = (*(_DWORD *)(v133 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v133;
            if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v134 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
              goto LABEL_239;
          }
          if ((v135 = sub_22E5457C4(*v12)) != 0
            && ((v136 = sub_22F10C2A4(v135), (*(_DWORD *)(v136 + 28) & 0x7Fu) - 35 >= 3) ? (v137 = 0) : (v137 = v136),
                (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v137 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            || (v138 = sub_22E5457C4(*v12)) != 0
            && ((v139 = sub_22F10C2A4(v138), (*(_DWORD *)(v139 + 28) & 0x7Fu) - 35 >= 3) ? (v140 = 0) : (v140 = v139),
                sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v140 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
          {
LABEL_239:
            v141 = sub_22E5457C4(*v12);
            memset(&v243, 0, sizeof(v243));
            std::string::append(&v243, "array_ref");
          }
          else
          {
            v189 = sub_22F10C8DC(*v12);
            v141 = *v12;
            if (!v189 || !v141)
            {
              v210 = sub_22E545730(*v12);
              if (v210)
              {
                v214 = v210;
                memset(&v243, 0, sizeof(v243));
                v215 = sub_22F10C2A4(v210);
                v216 = 0;
                if ((*(_DWORD *)(v215 + 28) & 0x7Fu) - 35 >= 3)
                  v217 = 0;
                else
                  v217 = v215;
                v218 = *(_QWORD *)(v217 + 40);
                v219 = "";
                if ((v218 & 7) == 0)
                {
                  v220 = v218 & 0xFFFFFFFFFFFFFFF8;
                  if (v220)
                  {
                    v221 = *(_DWORD **)(v220 + 16);
                    v222 = *v221;
                    v219 = (const std::string::value_type *)(v221 + 4);
                    v216 = v222;
                  }
                }
                std::string::append(&v243, v219, v216);
                std::string::append(&v243, "<");
                v223 = sub_22F10C2A4(v214);
                if ((*(_DWORD *)(v223 + 28) & 0x7Fu) - 35 >= 3)
                  v224 = 0;
                else
                  v224 = v223;
                (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v224 + 168) + 8), a4);
                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v225 = __p;
                else
                  v225 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v226 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
                else
                  v226 = __p[0].__r_.__value_.__l.__size_;
                std::string::append(&v243, (const std::string::value_type *)v225, v226);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                std::string::append(&v243, ", ");
                if (sub_22F40929C(v214, 0))
                  v70 = "layout_explicit";
                else
                  v70 = "layout_implicit";
                goto LABEL_95;
              }
              v211 = sub_22E547D54(*v12);
              if (!v211)
              {
                if (sub_22F10B8E0(*v12, "mesh_grid_properties", 20, 0, 0))
                {
                  *((_BYTE *)&v243.__r_.__value_.__s + 23) = 20;
                  strcpy((char *)&v243, "mesh_grid_properties");
                }
                else if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 16)
                        - 25 > 1)
                {
                  v212 = sub_22F10D628(*v12);
                  if (v212)
                  {
                    if ((*(_DWORD *)(v212 + 16) & 0x80000) != 0)
                    {
                      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(&v243, a1, a2, *(_QWORD *)(v212 + 24 * *(unsigned int *)(v212 + 20) + 40), a4);
                    }
                    else
                    {
                      __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(v212 + 32);
                      v213 = sub_22F0F08CC((uint64_t *)__p);
                      sub_22EFB9E74(v213, &v243);
                    }
                  }
                  else
                  {
                    *((_BYTE *)&v243.__r_.__value_.__s + 23) = 0;
                    v243.__r_.__value_.__s.__data_[0] = 0;
                  }
                }
                else
                {
                  *((_BYTE *)&v243.__r_.__value_.__s + 23) = 8;
                  strcpy((char *)&v243, "function");
                }
                goto LABEL_97;
              }
              v227 = v211;
              memset(&v243, 0, sizeof(v243));
              std::string::append(&v243, "mesh<");
              v228 = sub_22F10C2A4(v227);
              if ((*(_DWORD *)(v228 + 28) & 0x7Fu) - 35 >= 3)
                v229 = 0;
              else
                v229 = v228;
              (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v229 + 168) + 8), a4);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v230 = __p;
              else
                v230 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v231 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              else
                v231 = __p[0].__r_.__value_.__l.__size_;
              std::string::append(&v243, (const std::string::value_type *)v230, v231);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              std::string::append(&v243, ", ");
              v232 = sub_22F10C2A4(v227);
              if ((*(_DWORD *)(v232 + 28) & 0x7Fu) - 35 >= 3)
                v233 = 0;
              else
                v233 = v232;
              (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v233 + 168) + 32), a4);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v234 = __p;
              else
                v234 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v235 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              else
                v235 = __p[0].__r_.__value_.__l.__size_;
              std::string::append(&v243, (const std::string::value_type *)v234, v235);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              std::string::append(&v243, ", ");
              v236 = sub_22F409794(v227);
              std::to_string(__p, v236);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v237 = __p;
              else
                v237 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v238 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              else
                v238 = __p[0].__r_.__value_.__l.__size_;
              std::string::append(&v243, (const std::string::value_type *)v237, v238);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              std::string::append(&v243, ", ");
              v239 = sub_22F409818(v227);
              std::to_string(__p, v239);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v240 = __p;
              else
                v240 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v241 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              else
                v241 = __p[0].__r_.__value_.__l.__size_;
              std::string::append(&v243, (const std::string::value_type *)v240, v241);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              std::string::append(&v243, ", ");
              v68 = sub_22F10C6FC(v227);
              if (v68 > 2)
                goto LABEL_96;
              v69 = off_24FA6CF50;
LABEL_94:
              v70 = v69[v68];
LABEL_95:
              std::string::append(&v243, v70);
LABEL_96:
              std::string::append(&v243, ">");
              goto LABEL_97;
            }
            memset(&v243, 0, sizeof(v243));
            v190 = sub_22F10C83C(v141);
            std::string::append(&v243, v190, v191);
          }
          std::string::append(&v243, "<");
          v142 = sub_22F10C2A4(v141);
          if ((*(_DWORD *)(v142 + 28) & 0x7Fu) - 35 >= 3)
            v143 = 0;
          else
            v143 = v142;
          (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, _QWORD, uint64_t))(*a1 + 248))(__p, a1, a2, *(_QWORD *)(**(_QWORD **)(v143 + 168) + 8), a4);
          v144 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          v145 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v146 = __p[0].__r_.__value_.__l.__size_;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = __p;
          else
            v147 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        v179 = v144 & 0x7F;
        if (v145)
          v180 = v146;
        else
          v180 = v179;
        std::string::append(&v243, (const std::string::value_type *)v147, v180);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_96;
      }
      *(_OWORD *)&v243.__r_.__value_.__l.__data_ = *(_OWORD *)"visible_function_table";
      v87 = *(_QWORD *)"on_table";
    }
    *(std::string::size_type *)((char *)&v243.__r_.__value_.__r.__words[1] + 6) = v87;
    HIWORD(v243.__r_.__value_.__r.__words[2]) = 5632;
    goto LABEL_97;
  }
  v37 = *v12;
  if ((*(_DWORD *)(v36 + 52) & 0x40000000) != 0)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0);
    v50 = *(_DWORD *)(v49 + 16);
    v51 = v50 & 0xFF800FF;
    v52 = (v50 & 0xFF800FF) == 16777227;
    v54 = (v50 & 0xFF800FF) == 0x108000B || v51 == 17825803;
    if (v49)
    {
      *(int8x8_t *)v55.i8 = vand_s8((int8x8_t)vdup_n_s32(v50), (int8x8_t)0xFF000FF0FC000FFLL);
      v55.i64[1] = __PAIR64__(v55.u32[1], v51);
      v56 = vdupq_laneq_s32(v55, 2);
      v55.i32[3] = v50 & 0xFF800FF;
      v57 = vdupq_n_s32(v51);
      v58 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v55, (int32x4_t)xmmword_22F45AEC0), (int16x8_t)vceqq_s32(v56, (int32x4_t)xmmword_22F45AEB0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v56, (int32x4_t)xmmword_22F45AED0), (int16x8_t)vceqq_s32(v56, (int32x4_t)xmmword_22F45AEE0)));
      v58.i8[0] = vmaxvq_u8(v58);
      v59 = v58.i32[0];
      *(int8x8_t *)v58.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v57, (int32x4_t)xmmword_22F45AEF0), (int16x8_t)vceqq_s32(v57, (int32x4_t)xmmword_22F45AF00)));
      v58.i8[0] = vmaxv_u8(*(uint8x8_t *)v58.i8);
      if (((v59 | v58.i32[0] | (v52 || v54)) & 1) != 0)
        goto LABEL_78;
    }
    if (v49 && v51 == 18350091)
LABEL_78:
      __asm { BR              X11 }
    if (v49 && v51 == 116391947)
    {
      v71 = 0x700000000000000;
      v38 = 0x72656C706D6173;
    }
    else
    {
      v73 = v49 != 0;
      v74 = v51 == 116916235;
      v75 = !v73 || !v74;
      if (v73 && v74)
        v38 = 0x746E657665;
      else
        v38 = 0;
      v49 = 0x500000000000000;
      if (v75)
        v71 = 0;
      else
        v71 = 0x500000000000000;
    }
    v72 = HIBYTE(v71);
    goto LABEL_144;
  }
  v38 = 0;
  v39 = 0;
LABEL_149:
  if ((*(_BYTE *)(v37 + 8) & 0xF) != 0)
    v37 = (uint64_t)sub_22F10D2BC(v11);
  __p[0].__r_.__value_.__r.__words[0] = v37 & 0xFFFFFFFFFFFFFFF0;
  v88 = a1[4];
  if (!v88)
  {
    v89 = (unint64_t *)operator new();
    v90 = sub_22E462F04(v89, *(unsigned int **)(a2 + 152));
    v91 = a1[4];
    a1[4] = v90;
    if (v91)
    {
      MEMORY[0x2348A0E9C](v91, 0x1060C4049370F9BLL);
      v90 = (unint64_t *)a1[4];
    }
    *v90 &= ~0x20000uLL;
    *(_QWORD *)a1[4] |= 0x400000uLL;
    *(_QWORD *)a1[4] |= 0x200000000uLL;
    *(_QWORD *)a1[4] |= 0x100000000uLL;
    *(_QWORD *)a1[4] |= 0x400uLL;
    v88 = a1[4];
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  sub_22F119374((uint64_t *)__p, (__int128 *)a5, v88);
  if (v39 < 0)
  {
    v21 = (void *)v38;
    goto LABEL_26;
  }
}

uint64_t sub_22E69F1C8(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  v6 = (uint64_t *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_DWORD *)(v8 + 16) == 11;
  else
    v9 = 0;
  if (v9)
  {
    switch((*(_DWORD *)(v8 + 16) >> 19) & 0x1FF)
    {
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
        sub_22E6A3010(a1, a2);
        result = llvm::air::AIRTypeFactory::getTypeForMangling();
        break;
      default:
        return sub_22E66CB04((llvm::Type ***)(a2 + 280), a3);
    }
  }
  else
  {
    v10 = sub_22E3E4B64(v7);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v11)
        v12 = *(_DWORD *)(v11 + 16) == 11;
      else
        v12 = 0;
      if (v12 && ((*(_DWORD *)(v11 + 16) >> 19) & 0x1FFu) - 227 <= 0x1F)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2);
        return llvm::FixedVectorType::get();
      }
    }
    else
    {
      v14 = *v6;
      if (*v6 && *(_BYTE *)(v14 + 16) == 39
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
        && (v14 = sub_22F10CF48(v14)) != 0)
      {
        v15 = *(_QWORD *)(v14 + 32);
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v17 = v16 && *(_DWORD *)(v16 + 16) == 11;
        if (v17 && ((*(_DWORD *)(v16 + 16) >> 19) & 0x1FFu) - 227 <= 0x1F)
        {
          sub_22EF5CF80(*(_QWORD *)(a2 + 144), v15);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, v15);
          return llvm::PointerType::get();
        }
      }
    }
    return sub_22E66CB04((llvm::Type ***)(a2 + 280), a3);
  }
  return result;
}

_QWORD *sub_22E69F608(_QWORD *a1)
{
  *a1 = &off_24FA691C8;
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 5));
  return a1;
}

void sub_22E69F638(_QWORD *a1)
{
  *a1 = &off_24FA691C8;
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 5));
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22E69F678(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t result;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  _BOOL4 v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  BOOL v51;
  _BOOL4 v52;
  unint64_t v53;
  uint64_t v54;

  v5 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 40);
  v6 = *(_WORD *)(a2 + 10) & 0x3F;
  v7 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
  else
    v9 = 0;
  if (v9)
  {
    result = 0;
    v14 = 0;
    v16 = 4;
  }
  else
  {
    if (*(_DWORD *)(v8 + 16) == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v8 + 24));
      v4 = sub_22E496830(v10);
      v7 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
    }
    v11 = sub_22E619D68(v4);
    if ((v6 - 20) >= 8)
    {
      if (v11
        || ((v50 = *v7) != 0 ? (v51 = *(_BYTE *)(*v7 + 16) == 31) : (v51 = 0),
            (v51
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
          && (v50 = sub_22F10CF48(v50)) != 0)
         && sub_22F28C8B4(v50)))
      {
        v43 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v43
          && *(_BYTE *)(v43 + 16) == 45
          && (v44 = sub_22E69BE08(v43, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32))) != 0)
        {
          v45 = v44 == 1;
          result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v4);
          v14 = 8 * v45;
          v16 = 2;
        }
        else
        {
          v46 = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v4, 1, 0);
          result = 0;
          v47 = v46 == 0;
          if (v46)
            v16 = 4;
          else
            v16 = 0;
          if (v47)
            v14 = 128;
          else
            v14 = 0;
        }
      }
      else
      {
        result = sub_22F1124D8(*v7);
        if ((_DWORD)result)
        {
          v52 = sub_22F110B20(*v7);
          result = 0;
          if (v52)
            v14 = 256;
          else
            v14 = 0;
          v16 = 1;
        }
        else
        {
          v16 = 0;
          v14 = 128;
        }
      }
    }
    else if (v11
           || ((v48 = *v7) != 0 ? (v49 = *(_BYTE *)(*v7 + 16) == 31) : (v49 = 0),
               (v49
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
             && (v48 = sub_22F10CF48(v48)) != 0)
            && sub_22F28C8B4(v48)))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v12 && *(_BYTE *)(v12 + 16) == 45)
        sub_22E69BE08(v12, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
      v13 = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v4, 1, 1);
      v14 = 0;
      result = v13 ^ 1u;
      if (v13)
        v16 = 4;
      else
        v16 = 7;
    }
    else
    {
      v53 = 0x8000000300000002;
      v54 = 0;
      if (sub_22E3B38EC((_DWORD *)(a1 + 20), &v53) && sub_22F1124D8(*v7))
      {
        if (sub_22F110B20(*v7))
          v14 = 256;
        else
          v14 = 0;
        v16 = 1;
      }
      else
      {
        v16 = 0;
        v14 = 128;
      }
      result = 0;
    }
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = result;
  *(_DWORD *)(a2 + 68) = 0;
  *(_BYTE *)(a2 + 72) = v16;
  *(_WORD *)(a2 + 73) = v14;
  v17 = *(_DWORD *)(a2 + 36);
  if (v17)
  {
    v18 = a2 + 80;
    v19 = a2 + 80 + 40 * v17;
    while (1)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x80000000) != 0)
        v20 = *(_BYTE *)(v5 + 40 * (*(_DWORD *)(a2 + 36) + 1));
      else
        v20 = 0;
      v21 = sub_22E69BD58(*(_QWORD *)v18);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v22 && *(_BYTE *)(v22 + 16) == 44)
      {
        v23 = sub_22F114198(*(_QWORD *)(v22 + 24));
        v21 = sub_22E496830(v23);
      }
      if (((1 << v6) & 0xFF00000) == 0)
        break;
      if (v20 < 0)
      {
        v26 = 0;
        result = 0;
        LODWORD(v4) = v4 & 0xFFFFFE00;
        goto LABEL_94;
      }
      v24 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
      if (!sub_22E619D68(v21))
      {
        v31 = *v24;
        v32 = *v24 && *(_BYTE *)(*v24 + 16) == 31;
        if (!v32
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
           || (v31 = sub_22F10CF48(v31)) == 0)
          || !sub_22F28C8B4(v31))
        {
          v53 = 0x8000000300000002;
          v54 = 0;
          if (sub_22E3B38EC((_DWORD *)(a1 + 20), &v53) && sub_22F1124D8(*v24))
          {
            if (sub_22F110B20(*v24))
              LODWORD(v4) = v4 & 0xFFFFFE00 | 0x100;
            else
              LODWORD(v4) = v4 & 0xFFFFFE00;
            v26 = 1;
          }
          else
          {
            v26 = 0;
            LODWORD(v4) = v4 & 0xFFFFFE00 | 0x80;
          }
          result = 0;
          goto LABEL_94;
        }
      }
      v25 = *(_QWORD *)(*(_QWORD *)(*v24 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v25 && *(_BYTE *)(v25 + 16) == 45)
        sub_22E69BE08(v25, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
      if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21, 1, 1))
        goto LABEL_31;
      if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*v24 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
        || (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v24 + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0
        || (sub_22F10CDF4(*v24) & 1) != 0
        || (sub_22F10C510(*v24) & 1) != 0
        || (sub_22F10C1B4(*v24) & 1) != 0
        || (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v24 + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0) & 1) != 0
        || (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*v24 + 8) & 0xFFFFFFFFFFFFFFF0), "patch_control_point", 19, 1, 3) & 1) != 0
        || (sub_22F10B8E0(*v24, "interpolant", 11, 1, 0) & 1) != 0
        || sub_22F10C780(*v24))
      {
        goto LABEL_92;
      }
      sub_22F10DF70(*v24);
      LODWORD(v4) = v4 & 0xFFFFFE00;
      v26 = 7;
      result = 2 * (v6 == 22);
LABEL_94:
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_DWORD *)(v18 + 24) = result;
      *(_DWORD *)(v18 + 28) = 0;
      ++v5;
      *(_BYTE *)(v18 + 32) = v26;
      *(_WORD *)(v18 + 33) = v4;
      v18 += 40;
      if (v18 == v19)
        return result;
    }
    if (((1 << v6) & 0x70000001) != 0)
    {
      v27 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22E619D68(v21)
        || ((v34 = *v27) != 0 ? (v35 = *(_BYTE *)(*v27 + 16) == 31) : (v35 = 0),
            (v35
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
          && (v34 = sub_22F10CF48(v34)) != 0)
         && sub_22F28C8B4(v34)))
      {
        v28 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v28
          && *(_BYTE *)(v28 + 16) == 45
          && (v29 = sub_22E69BE08(v28, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32))) != 0)
        {
          v30 = v29 == 1;
          result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21);
          LODWORD(v4) = v4 & 0xFFFFFE00 | (8 * v30);
          v26 = 2;
        }
        else
        {
          v33 = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21, 1, 0);
          result = 0;
          if (v33)
            LODWORD(v4) = v4 & 0xFFFFFE00;
          else
            LODWORD(v4) = v4 & 0xFFFFFE00 | 0x80;
          if (v33)
            v26 = 4;
          else
            v26 = 0;
        }
        goto LABEL_94;
      }
      result = sub_22F1124D8(*v27);
      if ((_DWORD)result)
      {
        v36 = sub_22F110B20(*v27);
        result = 0;
        if (v36)
          LODWORD(v4) = v4 & 0xFFFFFE00 | 0x100;
        else
          LODWORD(v4) = v4 & 0xFFFFFE00;
        v26 = 1;
        goto LABEL_94;
      }
      v26 = 0;
      goto LABEL_93;
    }
    v37 = v21 & 0xFFFFFFFFFFFFFFF0;
    if (!sub_22E619D68(v21))
    {
      v41 = *(_QWORD *)v37;
      v42 = *(_QWORD *)v37 && *(_BYTE *)(*(_QWORD *)v37 + 16) == 31;
      if (!v42
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
         || (v41 = sub_22F10CF48(v41)) == 0)
        || !sub_22F28C8B4(v41))
      {
LABEL_92:
        v26 = 0;
        result = 0;
LABEL_93:
        LODWORD(v4) = v4 & 0xFFFFFE00 | 0x80;
        goto LABEL_94;
      }
    }
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v37 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v38)
    {
      if (*(_BYTE *)(v38 + 16) == 45)
      {
        v39 = sub_22E69BE08(v38, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
        if (v39)
        {
          v40 = v39 == 1;
          result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21);
          LODWORD(v4) = v4 & 0xFFFFFE00 | (8 * v40);
LABEL_86:
          v26 = 2;
          goto LABEL_94;
        }
      }
    }
    if (!sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21, 1, 1))
    {
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21);
      LODWORD(v4) = v4 & 0xFFFFFE00 | 8;
      goto LABEL_86;
    }
LABEL_31:
    result = 0;
    LODWORD(v4) = v4 & 0xFFFFFE00;
    v26 = 4;
    goto LABEL_94;
  }
  return result;
}

double sub_22E69FE60@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  _OWORD v14[3];

  v8 = a3[1];
  v14[0] = *a3;
  v14[1] = v8;
  v14[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v13);
  v9 = v13[0];
  v10 = v13[1];
  v11 = sub_22E66C868(a2[18] + 280, a4, 0);
  return sub_22E6A0A7C(a5, a2, (uint64_t)v14, v11, v9, v10, 4, 1);
}

unint64_t sub_22E69FF00(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  llvm::DataLayout *DataLayout;
  llvm::Type *v6;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 296));
  v6 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a3);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v6);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v6);
  return (llvm::TypeSize::operator unsigned long long() + 3) & 0xFFFFFFFFFFFFFFFCLL;
}

uint64_t sub_22E69FFA4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  sub_22E6A0E08(a1, a2, a3);
  return v3;
}

uint64_t sub_22E69FFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  char *v10;

  result = sub_22E6A0E08(a1, a2, a3);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v6)
  {
    v7 = v6;
    if (v6 >> 61)
      abort();
    v8 = (const void *)result;
    v9 = result + 8 * v6;
    v10 = (char *)operator new(8 * v6);
    *a4 = v10;
    a4[2] = &v10[8 * v7];
    result = (uint64_t)memcpy(v10, v8, v9 - (_QWORD)v8);
    a4[1] = &v10[8 * v7];
  }
  return result;
}

void sub_22E6A0040(uint64_t a1@<X0>, __int128 *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  unint64_t v12;
  _QWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v48;
  uint64_t v49;
  const char *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::LLVMContext *v55;
  uint64_t v56;
  llvm::ArrayType *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  unint64_t v68;
  _DWORD *v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;
  __int128 v108[2];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;

  v12 = a3;
  v16 = (_QWORD *)(a8 + 32);
  v17 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_DWORD *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  v18 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "matrix", 6, 1, 0);
  v19 = *v17;
  v76 = v12;
  if (v18)
  {
    v60 = sub_22E54A900(v19);
    v61 = sub_22F10C2A4(v60);
    if ((*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 >= 3)
      v62 = 0;
    else
      v62 = v61;
    sub_22E66CB04((llvm::Type ***)(*((_QWORD *)a2 + 18) + 280), *(llvm::LLVMContext **)(**(_QWORD **)(v62 + 168) + 8));
    v75 = a1;
    sub_22F4096D0(v60);
    v57 = (llvm::ArrayType *)llvm::FixedVectorType::get();
    v59 = sub_22F409640(v60);
  }
  else
  {
    v20 = sub_22E5453EC(v19);
    if (!v20
      || ((v21 = sub_22F10C2A4(v20), (*(_DWORD *)(v21 + 28) & 0x7Fu) - 35 >= 3) ? (v22 = 0) : (v22 = v21),
          (sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v22 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
    {
      v23 = sub_22E5453EC(*v17);
      if (!v23
        || ((v24 = sub_22F10C2A4(v23), (*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3) ? (v25 = 0) : (v25 = v24),
            (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v25 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) == 0))
      {
        v26 = sub_22E5453EC(*v17);
        if (!v26
          || ((v27 = sub_22F10C2A4(v26), (*(_DWORD *)(v27 + 28) & 0x7Fu) - 35 >= 3) ? (v28 = 0) : (v28 = v27),
              !sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v28 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
          v29 = sub_22E5453EC(*v17);
          if (!v29
            || ((v30 = sub_22F10C2A4(v29), (*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 >= 3) ? (v31 = 0) : (v31 = v30),
                (sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v31 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
          {
            v32 = sub_22E5453EC(*v17);
            if (!v32
              || ((v33 = sub_22F10C2A4(v32), (*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 >= 3) ? (v34 = 0) : (v34 = v33),
                  (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v34 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0))
            {
              v35 = sub_22E5453EC(*v17);
              if (!v35
                || ((v36 = sub_22F10C2A4(v35), (*(_DWORD *)(v36 + 28) & 0x7Fu) - 35 >= 3) ? (v37 = 0) : (v37 = v36),
                    !sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v37 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
              {
                v38 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4, 0);
                v89 = (__int128 *)"tmp";
                LOWORD(v92) = 259;
                v39 = sub_22E4D85B8((uint64_t)a2, v12, v38, (uint64_t)&v89, 0);
                v41 = v39 & 0xFFFFFFFFFFFFFFF8;
                if (v39 <= 7)
                  v41 = 0;
                v42 = v40 & 0xFFFFFFFFFFFFFFF8;
                if (v39 <= 7)
                  v42 = 0;
                *(_QWORD *)a8 = v41;
                *(_QWORD *)(a8 + 8) = v42;
                v43 = 1 << (v40 & 7 | (8 * (v39 & 7)));
                if (v39 < 8)
                  v43 = 0;
                *(_QWORD *)(a8 + 16) = v43;
                *(_DWORD *)(a8 + 24) = 0;
                *v16 = 0;
                v16[1] = 0;
                if (a5 != a6)
                {
                  v44 = 0;
                  v45 = a5;
                  do
                  {
                    v46 = *(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8;
                    if ((*(_QWORD *)(a4 + 40) & 7) != 0 || v46 == 0)
                    {
                      v49 = 0;
                      v50 = "";
                    }
                    else
                    {
                      v48 = *(_DWORD **)(v46 + 16);
                      v51 = *v48;
                      v50 = (const char *)(v48 + 4);
                      v49 = v51;
                    }
                    LOWORD(v112) = 773;
                    *(_QWORD *)&v110 = v50;
                    *((_QWORD *)&v110 + 1) = v49;
                    *(_QWORD *)&v111 = ".";
                    v12 = v12 & 0xFFFFFFFF00000000 | v44;
                    v89 = &v110;
                    *(_QWORD *)&v91 = v12;
                    LOWORD(v92) = 2050;
                    llvm::Value::setName();
                    v45 += 40;
                    ++v44;
                  }
                  while (v45 != a6);
                }
                goto LABEL_67;
              }
            }
          }
        }
      }
    }
    v75 = a1;
    v52 = sub_22E5453EC(*v17);
    v53 = sub_22F10C2A4(v52);
    if ((*(_DWORD *)(v53 + 28) & 0x7Fu) - 35 >= 3)
      v54 = 0;
    else
      v54 = v53;
    v55 = *(llvm::LLVMContext **)(**(_QWORD **)(v54 + 168) + 8);
    if (!sub_22E475308(*(_QWORD *)((unint64_t)v55 & 0xFFFFFFFFFFFFFFF0)))
    {
      v56 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v55 & 0xFFFFFFFFFFFFFFF0));
      if (v56 && (*(_DWORD *)(v56 + 28) & 0x7Fu) - 35 >= 3)
        v56 = 0;
      v55 = *(llvm::LLVMContext **)(sub_22EFC3B90(v56) + 48);
    }
    v57 = (llvm::ArrayType *)sub_22E66CB04((llvm::Type ***)(*((_QWORD *)a2 + 18) + 280), v55);
    v58 = sub_22F409218(v52);
    if (v58 <= 1)
      v59 = 1;
    else
      v59 = v58;
  }
  v63 = llvm::ArrayType::get(v57, (llvm::Type *)v59);
  v64 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(v75 + 8) + 8), a4, 0);
  v65 = 0;
  *(_QWORD *)a8 = a5;
  *(_QWORD *)(a8 + 8) = v63;
  *(_QWORD *)(a8 + 16) = v64;
  *(_DWORD *)(a8 + 24) = 0;
  *v16 = 0;
  v16[1] = 0;
  v66 = *(_QWORD *)(a4 + 40);
  v67 = "";
  if ((v66 & 7) == 0)
  {
    v68 = v66 & 0xFFFFFFFFFFFFFFF8;
    if (v68)
    {
      v69 = *(_DWORD **)(v68 + 16);
      v70 = *v69;
      v67 = (const char *)(v69 + 4);
      v65 = v70;
    }
  }
  LOWORD(v92) = 261;
  v89 = (__int128 *)v67;
  v90 = v65;
  llvm::Value::setName();
LABEL_67:
  v71 = (_QWORD *)*((_QWORD *)a2 + 18);
  v72 = v71[27] + 32;
  v89 = a2;
  v90 = v72;
  v91 = *(_OWORD *)(*(_QWORD *)(sub_22E699F3C(v71) + 8) + 20);
  v92 = a7;
  v96 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 2;
  v103 = 0u;
  v102 = 0u;
  v104 = a5;
  v105 = a6;
  sub_22E6281E0(*((_QWORD **)a2 + 18), v76, (uint64_t)v106);
  v73 = *(_OWORD *)(a8 + 16);
  v110 = *(_OWORD *)a8;
  v111 = v73;
  v112 = *(_OWORD *)(a8 + 32);
  v74 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 144);
  v108[0] = v106[0];
  v108[1] = v106[1];
  v109 = v107;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v78 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 2;
  v77 = 0;
  v88 = 0u;
  v87 = 0u;
  sub_22E3C113C((uint64_t)&v77, &v110, v76, 2, v108, v74);
  sub_22E6A19A8((_QWORD **)&v89, (uint64_t)&v77, a4);
}

uint64_t sub_22E6A0620(uint64_t a1, uint64_t a2)
{
  sub_22E6A0E08(a1, a2, 1);
  return llvm::StructType::get();
}

uint64_t sub_22E6A0664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37[2];
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v39 = (void *)a2;
  v40 = *(_OWORD *)(*(_QWORD *)(sub_22E699F3C(*(_QWORD **)(a2 + 144)) + 8) + 20);
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 2;
  v51 = 0u;
  v50 = 0u;
  v52 = v54;
  v53 = 0x800000000;
  v5 = *(_OWORD *)(a2 + 1752);
  v55 = *(_OWORD *)(a2 + 1736);
  v56 = v5;
  v57 = *(_OWORD *)(a2 + 1768);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), a3, (uint64_t)v26);
  v28 = v55;
  v29 = v56;
  v30 = v57;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v37[0] = v26[0];
  v37[1] = v26[1];
  v38 = v27;
  v18 = 0uLL;
  LODWORD(v19) = 0;
  *((_QWORD *)&v17 + 1) = 0;
  *((_QWORD *)&v19 + 1) = 0;
  *(_QWORD *)&v20 = 0;
  v21 = 0uLL;
  *(_QWORD *)((char *)&v22 + 4) = 2;
  LODWORD(v17) = 0;
  v23 = 0u;
  v24 = 0u;
  sub_22E3C113C((uint64_t)&v17, &v28, a3, 2, v37, v6);
  v34 = v23;
  v35 = v24;
  v36 = v25;
  v30 = v19;
  v31 = v20;
  v32 = v21;
  v33 = v22;
  v28 = v17;
  v29 = v18;
  sub_22E6A2B20((uint64_t)&v39, (uint64_t)&v28);
  *(_QWORD *)&v55 = &v56;
  *((_QWORD *)&v55 + 1) = 0x800000000;
  if ((_DWORD)v53)
    sub_22E5C3934((uint64_t)&v55, (uint64_t)&v52);
  if (v52 != v54)
    free(v52);
  v39 = (char *)&v40 + 8;
  *(_QWORD *)&v40 = 0x800000000;
  if (DWORD2(v55))
  {
    v7 = 0;
    v8 = (uint64_t **)v55;
    v9 = 8 * DWORD2(v55);
    do
    {
      v10 = **v8;
      if (v7 >= DWORD1(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v40;
      }
      *((_QWORD *)v39 + v7) = v10;
      v7 = v40 + 1;
      LODWORD(v40) = v40 + 1;
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  llvm::StructType::get();
  v11 = llvm::UndefValue::get();
  LODWORD(v37[0]) = 0;
  v12 = DWORD2(v55);
  if (DWORD2(v55))
  {
    v13 = 0;
    v14 = a2 + 272;
    do
    {
      v15 = *(_QWORD *)(v55 + 8 * v13);
      LOWORD(v30) = 257;
      v11 = sub_22E4210EC(v14, v11, v15, (uint64_t)v37, 1, (uint64_t)&v28);
      v13 = LODWORD(v37[0]) + 1;
      LODWORD(v37[0]) = v13;
    }
    while (v13 != v12);
  }
  if (v39 != (char *)&v40 + 8)
    free(v39);
  if ((__int128 *)v55 != &v56)
    free((void *)v55);
  return v11;
}

double sub_22E6A094C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, uint64_t *a6, int64_t a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[32];
  __int16 v28;
  _OWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v14 = *(_QWORD *)(a2 + 144) + 280;
  if (a5)
  {
    v15 = *(unsigned __int8 *)(a2 + 130);
    v16 = sub_22E66C868(v14, a4, 0);
    v17 = llvm::PointerType::get();
    v18 = a3[1];
    v30 = *a3;
    v31 = v18;
    v32 = a3[2];
    sub_22E6A0A7C(a1, (_QWORD *)a2, (uint64_t)&v30, v17, v15, v15, a7, a8);
    v19 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v19;
    v29[2] = *(_OWORD *)(a1 + 32);
    v28 = 257;
    v20 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v29, (uint64_t)v27);
    v22 = a6[1];
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v22;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v24 = *a6;
    v23 = a6[1];
    v25 = sub_22E66C868(v14, a4, 0);
    v26 = a3[1];
    v30 = *a3;
    v31 = v26;
    v32 = a3[2];
    return sub_22E6A0A7C(a1, (_QWORD *)a2, (uint64_t)&v30, v25, v24, v23, a7, a8);
  }
  return result;
}

double sub_22E6A0A7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int64_t a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  llvm::Value *v20;
  uint64_t v21;
  __int128 v22;
  llvm::Type **v23;
  __int128 v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  double result;
  __int128 v30;
  _BYTE v32[32];
  __int16 v33;
  __int128 v34[3];
  _OWORD v35[2];
  __int128 v36;
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  __int128 v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v15 = *(_QWORD *)(a3 + 8);
  v16 = a2[12];
  if (v15 != v16)
  {
    v17 = *(_OWORD *)(a3 + 16);
    v41[0] = *(_OWORD *)a3;
    v41[1] = v17;
    v41[2] = *(_OWORD *)(a3 + 32);
    LOWORD(v36) = 257;
    sub_22E3BEE6C(a2 + 34, v41, v16, (uint64_t)v35, (uint64_t)&v42);
    v18 = v43;
    *(_OWORD *)a3 = v42;
    *(_OWORD *)(a3 + 16) = v18;
    *(_OWORD *)(a3 + 32) = v44;
  }
  v19 = *(_OWORD *)(a3 + 16);
  v40[0] = *(_OWORD *)a3;
  v40[1] = v19;
  v40[2] = *(_OWORD *)(a3 + 32);
  v20 = (llvm::Value *)sub_22E3C43AC(a2 + 34, (uint64_t)v40, "argp.cur");
  if (a8 && a6 > a7)
    v20 = (llvm::Value *)sub_22E6A0CC4((uint64_t)a2, v20);
  else
    a6 = a7;
  v21 = a2[1];
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v22 = *(_OWORD *)(a1 + 16);
  v39[0] = *(_OWORD *)a1;
  v39[1] = v22;
  v39[2] = *(_OWORD *)(a1 + 32);
  *(_QWORD *)&v35[0] = "argp.next";
  LOWORD(v36) = 259;
  sub_22F24D74C(a2 + 34, (uint64_t)v39, (a5 + a7 - 1) / (unint64_t)a7 * a7, (uint64_t)v35, (uint64_t)&v42);
  if ((BYTE8(v43) & 3) != 0)
    v23 = (llvm::Type **)sub_22F28ABCC(&v42, a2);
  else
    v23 = (llvm::Type **)v42;
  v24 = *(_OWORD *)(a3 + 16);
  v38[0] = *(_OWORD *)a3;
  v38[1] = v24;
  v38[2] = *(_OWORD *)(a3 + 32);
  sub_22E3BEDDC((uint64_t)(a2 + 34), v23, (uint64_t)v38);
  v25 = a7 <= a5;
  v26 = a7 - a5;
  if (!v25 && *(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200)) && *(_BYTE *)(a4 + 8) != 16)
  {
    v30 = *(_OWORD *)(a1 + 16);
    v37[0] = *(_OWORD *)a1;
    v37[1] = v30;
    v37[2] = *(_OWORD *)(a1 + 32);
    LOWORD(v36) = 257;
    sub_22F24D74C(a2 + 34, (uint64_t)v37, v26, (uint64_t)v35, a1);
  }
  v27 = *(_OWORD *)(a1 + 16);
  v34[0] = *(_OWORD *)a1;
  v34[1] = v27;
  v34[2] = *(_OWORD *)(a1 + 32);
  v33 = 257;
  sub_22E3BEE6C(a2 + 34, v34, a4, (uint64_t)v32, (uint64_t)v35);
  v28 = v35[1];
  *(_OWORD *)a1 = v35[0];
  *(_OWORD *)(a1 + 16) = v28;
  result = *(double *)&v36;
  *(_OWORD *)(a1 + 32) = v36;
  return result;
}

uint64_t sub_22E6A0CC4(uint64_t a1, llvm::Value *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Name;
  uint64_t v14;
  _WORD v16[20];
  _QWORD v17[4];
  __int16 v18;

  v4 = (uint64_t *)(a1 + 272);
  v5 = *(_QWORD *)(a1 + 88);
  v18 = 257;
  v6 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, (uint64_t)a2, v5, (uint64_t)v17);
  v7 = llvm::ConstantInt::get();
  v16[16] = 257;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v6, v7, 0, 0);
  if (!v8)
  {
    v18 = 257;
    v9 = llvm::BinaryOperator::Create();
    v8 = sub_22E3C12C8(v4, v9, (uint64_t)v16);
  }
  v10 = llvm::ConstantInt::get();
  v18 = 257;
  v11 = sub_22E3E49C4((uint64_t)v4, v8, v10, (uint64_t)v17);
  v12 = *(_QWORD *)a2;
  Name = llvm::Value::getName(a2);
  v18 = 773;
  v17[0] = Name;
  v17[1] = v14;
  v17[2] = ".aligned";
  return sub_22E3C1740(v4, 48, v11, v12, (uint64_t)v17);
}

uint64_t sub_22E6A0E08(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[64];
  void *v16;
  uint64_t v17;
  _BYTE v18[64];
  void *v19[2];
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v19[0] = v20;
  v19[1] = (void *)0x2000000000;
  sub_22E6A0FE4((uint64_t)v19, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 2032, 104, 3);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_OWORD *)(*(_QWORD *)(v10 + 40) + 20);
    v12 = a3;
    v13 = v15;
    v14 = 0x800000000;
    sub_22E6A1164((uint64_t)&v10, a2);
    v16 = v18;
    v17 = 0x800000000;
    if ((_DWORD)v14)
    {
      sub_22E5C3934((uint64_t)&v16, (uint64_t)&v13);
      v9 = v17;
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_QWORD *)(NodeOrInsertPos + 8) = a2;
      *(_DWORD *)(NodeOrInsertPos + 16) = a3;
      *(_QWORD *)(NodeOrInsertPos + 24) = NodeOrInsertPos + 40;
      *(_QWORD *)(NodeOrInsertPos + 32) = 0x800000000;
      if (v9)
        sub_22E536194(NodeOrInsertPos + 24, (uint64_t)&v16);
    }
    else
    {
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_QWORD *)(NodeOrInsertPos + 8) = a2;
      *(_DWORD *)(NodeOrInsertPos + 16) = a3;
      *(_QWORD *)(NodeOrInsertPos + 24) = NodeOrInsertPos + 40;
      *(_QWORD *)(NodeOrInsertPos + 32) = 0x800000000;
    }
    if (v16 != v18)
      free(v16);
    if (v13 != v15)
      free(v13);
    llvm::FoldingSetBase::InsertNode();
  }
  v7 = *(_QWORD *)(NodeOrInsertPos + 24);
  if (v19[0] != v20)
    free(v19[0]);
  return v7;
}

uint64_t sub_22E6A0FE4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  v4 = result;
  v5 = *(_DWORD *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v10 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v10;
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a2;
  v6 = *(_DWORD *)(v4 + 12);
  v7 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v7;
  if (v7 >= v6)
  {
    v11 = HIDWORD(a2);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(a2) = v11;
    v7 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v7) = HIDWORD(a2);
  v8 = *(_DWORD *)(v4 + 12);
  v9 = *(_DWORD *)(v4 + 8) + 1;
  *(_DWORD *)(v4 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v9) = a3;
  ++*(_DWORD *)(v4 + 8);
  return result;
}

uint64_t sub_22E6A10D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E6A0FE4(a3, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

uint64_t sub_22E6A10E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22E6A0FE4(a5, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22E6A1124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E6A0FE4(a3, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22E6A1164(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::LLVMContext *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v52;
  _QWORD *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::LLVMContext *v58;
  uint64_t v59;
  llvm::ArrayType *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Type ***v68;
  uint64_t v69;
  uint64_t v70;
  llvm::ArrayType *v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::LLVMContext *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD v82[2];

  v3 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 <= 0x27)
  {
    if (v4 != 11)
      goto LABEL_82;
    goto LABEL_79;
  }
  if (v4 == 40)
    goto LABEL_82;
  if (v4 != 45)
  {
LABEL_79:
    v82[0] = 0x8000000300000002;
    v82[1] = 0;
    if (sub_22E3B38EC((_DWORD *)(a1 + 8), v82) && sub_22F11057C(v3))
    {
      result = sub_22E66C868(*(_QWORD *)a1, v3 & 0xFFFFFFFFFFFFFFF0, 0);
LABEL_83:
      v50 = result;
      v52 = (unsigned int *)(a1 + 40);
      v51 = *(_DWORD *)(a1 + 40);
      v53 = (_QWORD *)(a1 + 32);
      goto LABEL_84;
    }
LABEL_82:
    result = sub_22E66CB04(*(llvm::Type ****)a1, (llvm::LLVMContext *)(v3 & 0xFFFFFFFFFFFFFFF0));
    goto LABEL_83;
  }
  v5 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
    v6 = 0;
  else
    v6 = v5;
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
  if ((**(_QWORD **)(v6 + 128) & 0x200) == 0)
  {
    v8 = sub_22E54A900(v3);
    if (v8)
    {
      v67 = v8;
      v68 = *(llvm::Type ****)a1;
      v69 = sub_22F10C2A4(v8);
      if ((*(_DWORD *)(v69 + 28) & 0x7Fu) - 35 >= 3)
        v70 = 0;
      else
        v70 = v69;
      sub_22E66CB04(v68, *(llvm::LLVMContext **)(**(_QWORD **)(v70 + 168) + 8));
      sub_22F4096D0(v67);
      v71 = (llvm::ArrayType *)llvm::FixedVectorType::get();
      v72 = sub_22F409640(v67);
      llvm::ArrayType::get(v71, (llvm::Type *)v72);
      result = llvm::PointerType::get();
      v50 = result;
      v52 = (unsigned int *)(a1 + 40);
      v51 = *(_DWORD *)(a1 + 40);
      v53 = (_QWORD *)(a1 + 32);
      if (v51 < *(_DWORD *)(a1 + 44))
        goto LABEL_86;
      goto LABEL_111;
    }
    v9 = sub_22E5453EC(v3);
    if (v9)
    {
      v10 = sub_22F10C2A4(v9);
      v11 = (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v10;
      if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v11 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_88;
    }
    v12 = sub_22E5453EC(v3);
    if (v12)
    {
      v13 = sub_22F10C2A4(v12);
      v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v13;
      if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v14 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_88;
    }
    v15 = sub_22E5453EC(v3);
    if (v15)
    {
      v16 = sub_22F10C2A4(v15);
      v17 = (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v16;
      if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v17 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_88;
    }
    v18 = sub_22E5453EC(v3);
    if (v18)
    {
      v19 = sub_22F10C2A4(v18);
      v20 = (*(_DWORD *)(v19 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v19;
      if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v20 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_88;
    }
    if ((v21 = sub_22E5453EC(v3)) != 0
      && ((v22 = sub_22F10C2A4(v21), (*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 >= 3) ? (v23 = 0) : (v23 = v22),
          (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v23 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      || (v24 = sub_22E5453EC(v3)) != 0
      && ((v25 = sub_22F10C2A4(v24), (*(_DWORD *)(v25 + 28) & 0x7Fu) - 35 >= 3) ? (v26 = 0) : (v26 = v25),
          sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v26 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
    {
LABEL_88:
      v55 = sub_22E5453EC(v3);
      v56 = sub_22F10C2A4(v55);
      if ((*(_DWORD *)(v56 + 28) & 0x7Fu) - 35 >= 3)
        v57 = 0;
      else
        v57 = v56;
      v58 = *(llvm::LLVMContext **)(**(_QWORD **)(v57 + 168) + 8);
      if (!sub_22E475308(*(_QWORD *)((unint64_t)v58 & 0xFFFFFFFFFFFFFFF0)))
      {
        v59 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v58 & 0xFFFFFFFFFFFFFFF0));
        if (v59 && (*(_DWORD *)(v59 + 28) & 0x7Fu) - 35 >= 3)
          v59 = 0;
        v58 = *(llvm::LLVMContext **)(sub_22EFC3B90(v59) + 48);
      }
      v60 = (llvm::ArrayType *)sub_22E66CB04(*(llvm::Type ****)a1, v58);
      v61 = sub_22F409218(v55);
      if (v61 <= 1)
        v62 = 1;
      else
        v62 = v61;
      llvm::ArrayType::get(v60, (llvm::Type *)v62);
      goto LABEL_100;
    }
    v27 = sub_22E5457C4(v3);
    if (v27)
    {
      v28 = sub_22F10C2A4(v27);
      v29 = (*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v28;
      if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v29 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_69;
    }
    v30 = sub_22E5457C4(v3);
    if (v30)
    {
      v31 = sub_22F10C2A4(v30);
      v32 = (*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v31;
      if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v32 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_69;
    }
    v33 = sub_22E5457C4(v3);
    if (v33)
    {
      v34 = sub_22F10C2A4(v33);
      v35 = (*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v34;
      if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v35 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_69;
    }
    v36 = sub_22E5457C4(v3);
    if (v36)
    {
      v37 = sub_22F10C2A4(v36);
      v38 = (*(_DWORD *)(v37 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v37;
      if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v38 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_69;
    }
    if ((v39 = sub_22E5457C4(v3)) != 0
      && ((v40 = sub_22F10C2A4(v39), (*(_DWORD *)(v40 + 28) & 0x7Fu) - 35 >= 3) ? (v41 = 0) : (v41 = v40),
          (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v41 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
      || (v42 = sub_22E5457C4(v3)) != 0
      && ((v43 = sub_22F10C2A4(v42), (*(_DWORD *)(v43 + 28) & 0x7Fu) - 35 >= 3) ? (v44 = 0) : (v44 = v43),
          sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v44 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
    {
LABEL_69:
      v45 = sub_22E5457C4(v3);
      v46 = sub_22F10C2A4(v45);
      if ((*(_DWORD *)(v46 + 28) & 0x7Fu) - 35 >= 3)
        v47 = 0;
      else
        v47 = v46;
      v48 = *(llvm::LLVMContext **)(**(_QWORD **)(v47 + 168) + 8);
      if (!sub_22E475308(*(_QWORD *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF0)))
      {
        v49 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF0));
        if (v49)
        {
          if ((*(_DWORD *)(v49 + 28) & 0x7Fu) - 35 >= 3)
            v49 = 0;
        }
        v48 = *(llvm::LLVMContext **)(sub_22EFC3B90(v49) + 48);
      }
      sub_22E66CB04(*(llvm::Type ****)a1, v48);
LABEL_100:
      result = llvm::PointerType::get();
      goto LABEL_83;
    }
    if (sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0))
    {
      v63 = sub_22E5457C4(v3);
      v53 = (_QWORD *)(a1 + 32);
      v64 = *(_QWORD *)a1;
      if (*(_DWORD *)(a1 + 24) != 2)
      {
        v75 = *(_QWORD *)(v64 + 8);
        v76 = sub_22F10C2A4(v63);
        if ((*(_DWORD *)(v76 + 28) & 0x7Fu) - 35 >= 3)
          v77 = 0;
        else
          v77 = v76;
        v78 = (llvm::LLVMContext *)sub_22EF5B848(v75, *(_QWORD *)(**(_QWORD **)(v77 + 168) + 8), 0);
        v79 = sub_22E66CB04((llvm::Type ***)v64, v78);
        v80 = *(_DWORD *)(a1 + 40);
        v52 = (unsigned int *)(a1 + 40);
        if (v80 >= *(_DWORD *)(a1 + 44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v80 = *(_DWORD *)(a1 + 40);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v80) = v79;
        ++*(_DWORD *)(a1 + 40);
        result = sub_22E66CB04(*(llvm::Type ****)a1, *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16512));
        v50 = result;
        v51 = *(_DWORD *)(a1 + 40);
        v54 = *(_DWORD *)(a1 + 44);
LABEL_85:
        if (v51 < v54)
        {
LABEL_86:
          *(_QWORD *)(*v53 + 8 * v51) = v50;
          ++*v52;
          return result;
        }
LABEL_111:
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = *v52;
        goto LABEL_86;
      }
      v65 = sub_22F10C2A4(v63);
      if ((*(_DWORD *)(v65 + 28) & 0x7Fu) - 35 >= 3)
        v66 = 0;
      else
        v66 = v65;
      result = sub_22E66CB04((llvm::Type ***)v64, *(llvm::LLVMContext **)(**(_QWORD **)(v66 + 168) + 8));
      v50 = result;
      v52 = (unsigned int *)(a1 + 40);
      v51 = *(_DWORD *)(a1 + 40);
LABEL_84:
      v54 = v52[1];
      goto LABEL_85;
    }
    result = sub_22EFC3B90(v6);
    if (result)
    {
      v73 = result;
LABEL_114:
      if (sub_22E53B49C(v73))
      {
        result = sub_22E66C868(*(_QWORD *)a1, *(_QWORD *)(v73 + 48), 0);
LABEL_119:
        v74 = *(unsigned int *)(a1 + 40);
        if (v74 >= *(unsigned int *)(a1 + 44))
        {
          v81 = result;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          result = v81;
          v74 = *(unsigned int *)(a1 + 40);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v74) = result;
        ++*(_DWORD *)(a1 + 40);
        goto LABEL_122;
      }
      result = sub_22E536E34(v73);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 24) != 1)
          goto LABEL_122;
        result = sub_22E66CB04(*(llvm::Type ****)a1, *(llvm::LLVMContext **)(v73 + 48));
        goto LABEL_119;
      }
      result = sub_22E53742C(v73);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 24) != 1)
          goto LABEL_122;
      }
      else
      {
        result = sub_22E5374EC(v73);
        if ((result & 1) != 0)
          goto LABEL_122;
      }
      result = sub_22E6A1164(a1, *(_QWORD *)(v73 + 48));
LABEL_122:
      while (1)
      {
        v73 = *(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v73)
          break;
        if ((*(_DWORD *)(v73 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_114;
      }
    }
  }
  return result;
}

__n128 sub_22E6A19A8(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  __n128 v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  __int128 *v93;
  uint64_t v94;
  llvm::Type *v95;
  uint64_t NullValue;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  llvm::Type **v102;
  __n128 v103;
  __int128 *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  llvm::Attribute *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __n128 v112;
  unsigned int v113;
  __n128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __n128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __n128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __n128 result;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  llvm::LLVMContext *v136;
  uint64_t v137;
  llvm::ArrayType *v138;
  unsigned int v139;
  uint64_t v140;
  llvm::LLVMContext *v141;
  _QWORD *v142;
  llvm::Type *v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unint64_t v158;
  _QWORD *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __n128 v163;
  llvm::LLVMContext *v164;
  uint64_t v165;
  llvm::Type *Int32Ty;
  llvm::Value *v167;
  llvm::LLVMContext *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  llvm::Type **v172;
  const llvm::DataLayout *DataLayout;
  unsigned __int8 PointerAlignment;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  llvm::ArrayType *v179;
  unsigned int v180;
  llvm::LLVMContext *v181;
  llvm::Type *v182;
  uint64_t v183;
  unint64_t v184;
  __int128 v185;
  _QWORD *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  double v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t Int64Ty;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  __int128 v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  llvm::Type **v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  __int128 v217;
  __n128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _QWORD *v225;
  _OWORD v226[3];
  char v227;
  __int128 v228;
  __n128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _QWORD *v236;
  __int128 v237;
  __n128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _QWORD *v245;
  __int128 v246;
  __n128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _QWORD *v254;
  _OWORD v255[3];
  char v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _QWORD *v265;
  _BYTE v266[32];
  __int16 v267;
  __int128 v268;
  __n128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  _QWORD *v276;

  v5 = a1 + 5;
  v6 = *(_OWORD *)(a2 + 112);
  v274 = *(_OWORD *)(a2 + 96);
  v275 = v6;
  v276 = *(_QWORD **)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  v270 = *(_OWORD *)(a2 + 32);
  v271 = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v272 = *(_OWORD *)(a2 + 64);
  v273 = v8;
  v9 = *(__n128 *)(a2 + 16);
  v268 = *(_OWORD *)a2;
  v269 = v9;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 5);
  v10 = *(_OWORD *)(a1 + 7);
  v11 = *(_OWORD *)(a1 + 9);
  v12 = *(_OWORD *)(a1 + 13);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 11);
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  v13 = *(_OWORD *)(a1 + 15);
  v14 = *(_OWORD *)(a1 + 17);
  v15 = *(_OWORD *)(a1 + 19);
  *(_QWORD *)(a2 + 128) = a1[21];
  *(_OWORD *)(a2 + 96) = v14;
  *(_OWORD *)(a2 + 112) = v15;
  *(_OWORD *)(a2 + 80) = v13;
  v16 = v272;
  *(_OWORD *)(a1 + 15) = v273;
  v17 = v275;
  *(_OWORD *)(a1 + 17) = v274;
  *(_OWORD *)(a1 + 19) = v17;
  v18 = v276;
  v19 = v268;
  *(__n128 *)(a1 + 7) = v269;
  v20 = v271;
  *(_OWORD *)(a1 + 9) = v270;
  *(_OWORD *)(a1 + 11) = v20;
  *(_OWORD *)(a1 + 13) = v16;
  *(_OWORD *)(a1 + 5) = v19;
  v21 = a1[22];
  a1[21] = v18;
  a1[22] = (_QWORD *)a3;
  v22 = *(_QWORD *)(*(_QWORD *)(((unint64_t)a1[13] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 <= 0x27)
  {
    if (v23 == 11)
    {
      if (sub_22E536E34(a3) || sub_22E53742C((uint64_t)a1[22]))
        goto LABEL_109;
      if (sub_22E5374EC((uint64_t)a1[22]))
      {
        NullValue = llvm::Constant::getNullValue((llvm::Constant *)a1[7], v95);
      }
      else
      {
        NullValue = (uint64_t)a1[23];
        a1[23] = (_QWORD *)(NullValue + 40);
      }
      v268 = 0x8000000300000002;
      if (sub_22E3B38EC((_DWORD *)a1 + 4, &v268) && sub_22F11057C(v22))
      {
        v101 = (uint64_t)(*a1 + 34);
        v114 = *((__n128 *)a1 + 4);
        v268 = *((_OWORD *)a1 + 3);
        v269 = v114;
        v270 = *((_OWORD *)a1 + 5);
        v104 = &v268;
        v102 = (llvm::Type **)NullValue;
        goto LABEL_104;
      }
      v94 = (uint64_t)*a1;
      v257 = (unint64_t)NullValue;
    }
    else
    {
      v105 = a1[23];
      a1[23] = v105 + 5;
      sub_22E6A2A94((uint64_t)a1);
      v94 = (uint64_t)*a1;
      v257 = (unint64_t)v105;
    }
LABEL_106:
    LOBYTE(v260) = 0;
    v115 = *((_OWORD *)v5 + 7);
    v274 = *((_OWORD *)v5 + 6);
    v275 = v115;
    v276 = v5[16];
    v116 = *((_OWORD *)v5 + 3);
    v270 = *((_OWORD *)v5 + 2);
    v271 = v116;
    v117 = *((_OWORD *)v5 + 5);
    v272 = *((_OWORD *)v5 + 4);
    v273 = v117;
    v118 = *((__n128 *)v5 + 1);
    v268 = *(_OWORD *)v5;
    v269 = v118;
    v92 = &v257;
    v93 = &v268;
LABEL_107:
    v113 = 0;
LABEL_108:
    sub_22E4DAAE0(v94, (uint64_t)v92, (uint64_t)v93, v113);
    goto LABEL_109;
  }
  if (v23 == 40)
  {
    v97 = a1[23];
    a1[23] = v97 + 5;
    if ((*(_BYTE *)(v22 + 18) & 0x10) != 0)
    {
      do
      {
        while (1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v22)
            break;
          v98 = *(_DWORD *)(v22 + 16);
          if ((v98 & 0xFE) != 0x28)
            break;
          if ((v98 & 0x100000) == 0)
            goto LABEL_89;
        }
        v22 = sub_22F10CF48(v22);
      }
      while ((*(_DWORD *)(v22 + 16) & 0x100000) != 0);
    }
LABEL_89:
    v99 = *(_QWORD *)(v22 + 32);
    v100 = (uint64_t *)(v99 & 0xFFFFFFFFFFFFFFF0);
    if ((sub_22F1110EC(*(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v100 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5)
    {
      if (!sub_22EF5CF80(*(_QWORD *)((*a1)[18] + 144), v99))
        llvm::Argument::addAttr();
    }
    else
    {
      v107 = (*a1)[18];
      v108 = *(llvm::Attribute **)(v107 + 232);
      sub_22EF5CCD0(*(_QWORD *)(v107 + 144), *v100, (uint64_t)&v268);
      llvm::Attribute::getWithDereferenceableBytes(v108, (llvm::LLVMContext *)v268);
      llvm::Argument::addAttr();
    }
    sub_22E6A2A94((uint64_t)a1);
    v94 = (uint64_t)*a1;
    v257 = (unint64_t)v97;
    LOBYTE(v260) = 0;
    v109 = *((_OWORD *)v5 + 7);
    v274 = *((_OWORD *)v5 + 6);
    v275 = v109;
    v276 = v5[16];
    v110 = *((_OWORD *)v5 + 3);
    v270 = *((_OWORD *)v5 + 2);
    v271 = v110;
    v111 = *((_OWORD *)v5 + 5);
    v272 = *((_OWORD *)v5 + 4);
    v273 = v111;
    v112 = *((__n128 *)v5 + 1);
    v268 = *(_OWORD *)v5;
    v269 = v112;
    v92 = &v257;
    v93 = &v268;
    v113 = 1;
    goto LABEL_108;
  }
  if (v23 != 45)
  {
    v237 = 0x8000000300000002;
    if (sub_22E3B38EC((_DWORD *)a1 + 4, &v237) && sub_22F11057C(v22))
    {
      v101 = (uint64_t)(*a1 + 34);
      v102 = (llvm::Type **)a1[23];
      a1[23] = v102 + 5;
      v103 = *((__n128 *)a1 + 4);
      v246 = *((_OWORD *)a1 + 3);
      v247 = v103;
      v248 = *((_OWORD *)a1 + 5);
      v104 = &v246;
LABEL_104:
      sub_22E3BEDDC(v101, v102, (uint64_t)v104);
      goto LABEL_109;
    }
    v94 = (uint64_t)*a1;
    v106 = a1[23];
    a1[23] = v106 + 5;
    v257 = (unint64_t)v106;
    goto LABEL_106;
  }
  v24 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(((unint64_t)a1[13] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3)
    v25 = 0;
  else
    v25 = v24;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104));
  if ((**(_QWORD **)(v25 + 128) & 0x200) == 0)
  {
    v26 = sub_22E54A900(v22);
    if (v26)
    {
      v175 = v26;
      v176 = (uint64_t)*a1;
      v177 = sub_22F10C2A4(v26);
      if ((*(_DWORD *)(v177 + 28) & 0x7Fu) - 35 >= 3)
        v178 = 0;
      else
        v178 = v177;
      sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(v176 + 144) + 280), *(llvm::LLVMContext **)(**(_QWORD **)(v178 + 168) + 8));
      sub_22F4096D0(v175);
      v179 = (llvm::ArrayType *)llvm::FixedVectorType::get();
      v180 = sub_22F409640(v175);
      v181 = (llvm::LLVMContext *)llvm::ArrayType::get(v179, (llvm::Type *)v180);
      a1[23] += 5;
      llvm::Attribute::getWithByValType(*(llvm::Attribute **)((*a1)[18] + 232), v181, v182);
      llvm::Argument::addAttr();
      v183 = (uint64_t)*a1;
      v184 = (unint64_t)a1[13];
      v185 = *((_OWORD *)a1 + 4);
      v257 = *((_OWORD *)a1 + 3);
      v258 = v185;
      v259 = *((_OWORD *)a1 + 5);
      sub_22E5E0440(v183, (uint64_t)&v257, v184, &v268);
    }
    else
    {
      v27 = sub_22E5453EC(v22);
      if (v27)
      {
        v28 = sub_22F10C2A4(v27);
        v29 = (*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v28;
        if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v29 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          goto LABEL_110;
      }
      v30 = sub_22E5453EC(v22);
      if (v30)
      {
        v31 = sub_22F10C2A4(v30);
        v32 = (*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v31;
        if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v32 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_110;
      }
      v33 = sub_22E5453EC(v22);
      if (v33)
      {
        v34 = sub_22F10C2A4(v33);
        v35 = (*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v34;
        if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v35 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
          goto LABEL_110;
      }
      v36 = sub_22E5453EC(v22);
      if (v36)
      {
        v37 = sub_22F10C2A4(v36);
        v38 = (*(_DWORD *)(v37 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v37;
        if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v38 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          goto LABEL_110;
      }
      if ((v39 = sub_22E5453EC(v22)) != 0
        && ((v40 = sub_22F10C2A4(v39), (*(_DWORD *)(v40 + 28) & 0x7Fu) - 35 >= 3) ? (v41 = 0) : (v41 = v40),
            (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v41 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        || (v42 = sub_22E5453EC(v22)) != 0
        && ((v43 = sub_22F10C2A4(v42), (*(_DWORD *)(v43 + 28) & 0x7Fu) - 35 >= 3) ? (v44 = 0) : (v44 = v43),
            sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v44 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
      {
LABEL_110:
        v133 = sub_22E5453EC(v22);
        v134 = sub_22F10C2A4(v133);
        if ((*(_DWORD *)(v134 + 28) & 0x7Fu) - 35 >= 3)
          v135 = 0;
        else
          v135 = v134;
        v136 = *(llvm::LLVMContext **)(**(_QWORD **)(v135 + 168) + 8);
        if (!sub_22E475308(*(_QWORD *)((unint64_t)v136 & 0xFFFFFFFFFFFFFFF0)))
        {
          v137 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v136 & 0xFFFFFFFFFFFFFFF0));
          if (v137 && (*(_DWORD *)(v137 + 28) & 0x7Fu) - 35 >= 3)
            v137 = 0;
          v136 = *(llvm::LLVMContext **)(sub_22EFC3B90(v137) + 48);
        }
        v138 = (llvm::ArrayType *)sub_22E66CB04((llvm::Type ***)((*a1)[18] + 280), v136);
        v139 = sub_22F409218(v133);
        if (v139 <= 1)
          v140 = 1;
        else
          v140 = v139;
        v141 = (llvm::LLVMContext *)llvm::ArrayType::get(v138, (llvm::Type *)v140);
        v142 = a1[23];
        a1[23] = v142 + 5;
        llvm::Attribute::getWithByValType(*(llvm::Attribute **)((*a1)[18] + 232), v141, v143);
        llvm::Argument::addAttr();
        v144 = (uint64_t)*a1;
        v145 = (unint64_t)a1[13];
        v146 = *((_OWORD *)a1 + 4);
        v257 = *((_OWORD *)a1 + 3);
        v258 = v146;
        v259 = *((_OWORD *)a1 + 5);
        sub_22E5E0440(v144, (uint64_t)&v257, v145, &v268);
        if (v142 != (_QWORD *)v268)
        {
          v147 = (__int128 *)(a1 + 6);
          v148 = sub_22E532CBC((uint64_t)a1[22]);
          v149 = (uint64_t)*a1;
          v215 = v148;
          if (v148)
          {
            v213 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v149 + 144) + 800) + 128))(*(_QWORD *)(*(_QWORD *)(v149 + 144) + 800));
            *(_QWORD *)&v268 = "fcp.guarded.init";
            LOWORD(v270) = 259;
            v196 = (_QWORD *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v268 = "fcp.guarded.cont";
            LOWORD(v270) = 259;
            v197 = operator new();
            llvm::BasicBlock::BasicBlock();
            v212 = *a1 + 34;
            v198 = llvm::User::operator new((llvm::User *)0x40);
            v214 = (_QWORD *)v197;
            v199 = v197;
            v147 = (__int128 *)(a1 + 6);
            MEMORY[0x23489C09C](v198, v196, v199, v213, 0);
            LOWORD(v270) = 257;
            sub_22E3C12C8(v212, v198, (uint64_t)&v268);
            sub_22E5ED9B4(*a1, v196, 0);
          }
          else
          {
            v214 = *(_QWORD **)(v149 + 320);
          }
          v200 = sub_22F10C2A4(v133);
          if ((*(_DWORD *)(v200 + 28) & 0x7Fu) - 35 >= 3)
            v201 = 0;
          else
            v201 = v200;
          v216 = sub_22EF5D130(*(_QWORD *)((*a1)[18] + 144), *(_QWORD *)(**(_QWORD **)(v201 + 168) + 8));
          v202 = *a1 + 34;
          v203 = v147[1];
          v257 = *v147;
          v258 = v203;
          v259 = v147[2];
          LOWORD(v248) = 257;
          sub_22E3BEE6C(v202, &v257, (uint64_t)v141, (uint64_t)&v246, (uint64_t)&v268);
          v204 = sub_22F409218(v133);
          if (v204)
          {
            v205 = 0;
            v206 = v204;
            do
            {
              v207 = *a1 + 34;
              *(_QWORD *)&v237 = v142;
              *((_QWORD *)&v237 + 1) = v141;
              v238.n128_u64[0] = v216;
              v238.n128_u32[2] = 0;
              v239 = 0uLL;
              LOWORD(v230) = 257;
              sub_22E486A58(v207, (uint64_t)&v237, v205, (uint64_t)&v228, (uint64_t)&v246);
              v208 = *a1 + 34;
              v217 = v268;
              v218 = v269;
              v219 = v270;
              v267 = 257;
              sub_22E486A58(v208, (uint64_t)&v217, v205, (uint64_t)v266, (uint64_t)&v228);
              v209 = *a1 + 34;
              v255[0] = v246;
              v255[1] = v247;
              v255[2] = v248;
              v267 = 257;
              v210 = (llvm::Type **)sub_22E3C2A7C(v209, (uint64_t)v255, (uint64_t)v266);
              v211 = (uint64_t)(*a1 + 34);
              v226[0] = v228;
              v226[1] = v229;
              v226[2] = v230;
              sub_22E3BEDDC(v211, v210, (uint64_t)v226);
              ++v205;
            }
            while (v206 != v205);
          }
          if (v215)
          {
            sub_22E5EDA70((uint64_t)*a1);
            sub_22E5ED9B4(*a1, v214, 0);
          }
        }
      }
      else
      {
        v45 = sub_22E5457C4(v22);
        if (v45)
        {
          v46 = sub_22F10C2A4(v45);
          v47 = (*(_DWORD *)(v46 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v46;
          if ((sub_22F10CA40(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v47 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            goto LABEL_69;
        }
        v48 = sub_22E5457C4(v22);
        if (v48)
        {
          v49 = sub_22F10C2A4(v48);
          v50 = (*(_DWORD *)(v49 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v49;
          if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v50 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) != 0)goto LABEL_69;
        }
        v51 = sub_22E5457C4(v22);
        if (v51)
        {
          v52 = sub_22F10C2A4(v51);
          v53 = (*(_DWORD *)(v52 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v52;
          if (sub_22E475308(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v53 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)))
            goto LABEL_69;
        }
        v54 = sub_22E5457C4(v22);
        if (v54)
        {
          v55 = sub_22F10C2A4(v54);
          v56 = (*(_DWORD *)(v55 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v55;
          if ((sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v56 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
            goto LABEL_69;
        }
        if ((v57 = sub_22E5457C4(v22)) != 0
          && ((v58 = sub_22F10C2A4(v57), (*(_DWORD *)(v58 + 28) & 0x7Fu) - 35 >= 3) ? (v59 = 0) : (v59 = v58),
              (sub_22F10C510(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v59 + 168) + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
          || (v60 = sub_22E5457C4(v22)) != 0
          && ((v61 = sub_22F10C2A4(v60), (*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 >= 3) ? (v62 = 0) : (v62 = v61),
              sub_22F10C1B4(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v62 + 168) + 8) & 0xFFFFFFFFFFFFFFF0))))
        {
LABEL_69:
          v63 = sub_22EFC3B90(v25);
          v64 = *a1;
          v65 = *((_OWORD *)v5 + 7);
          v263 = *((_OWORD *)v5 + 6);
          v264 = v65;
          v265 = v5[16];
          v66 = *((_OWORD *)v5 + 3);
          v259 = *((_OWORD *)v5 + 2);
          v260 = v66;
          v67 = *((_OWORD *)v5 + 5);
          v261 = *((_OWORD *)v5 + 4);
          v262 = v67;
          v68 = *((_OWORD *)v5 + 1);
          v69 = v63;
          v257 = *(_OWORD *)v5;
          v258 = v68;
          do
            v69 = *(_QWORD *)(v69 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v69 && (*(_DWORD *)(v69 + 28) & 0x7Fu) - 49 > 2);
          sub_22E4EC638(v64, (uint64_t)&v257, v63, (uint64_t)&v268);
          v70 = *a1 + 34;
          v71 = (uint64_t)a1[23];
          a1[23] = (_QWORD *)(v71 + 40);
          LOWORD(v248) = 257;
          v72 = sub_22E3C1740(v70, 49, v71, v269.n128_i64[0], (uint64_t)&v246);
          v73 = (uint64_t)*a1;
          v255[0] = (unint64_t)v72;
          v256 = 0;
          v252 = v274;
          v253 = v275;
          v254 = v276;
          v248 = v270;
          v249 = v271;
          v250 = v272;
          v251 = v273;
          v246 = v268;
          v247 = v269;
          sub_22E4DAAE0(v73, (uint64_t)v255, (uint64_t)&v246, 0);
          v74 = *a1;
          v75 = *((_OWORD *)v5 + 7);
          v234 = *((_OWORD *)v5 + 6);
          v235 = v75;
          v236 = v5[16];
          v76 = *((_OWORD *)v5 + 3);
          v230 = *((_OWORD *)v5 + 2);
          v231 = v76;
          v77 = *((_OWORD *)v5 + 5);
          v232 = *((_OWORD *)v5 + 4);
          v233 = v77;
          v78 = *((__n128 *)v5 + 1);
          v228 = *(_OWORD *)v5;
          v229 = v78;
          sub_22E4EC638(v74, (uint64_t)&v228, v69, (uint64_t)&v237);
          v79 = (uint64_t)*a1;
          v80 = *(_QWORD *)((*a1)[18] + 800);
          v82.n128_f64[0] = sub_22EFC8E88((uint64_t)a1[22]);
          v83 = *v81;
          v84 = *((unsigned int *)v81 + 2);
          if ((_DWORD)v84 && *(_WORD *)(*v83 + 32) != 373)
          {
            v85 = 8 * v84 - 8;
            v86 = *v81;
            do
            {
              v87 = v86[1];
              ++v86;
              v85 -= 8;
            }
            while (*(_WORD *)(v87 + 32) != 373);
          }
          do
          {
            v89 = *v83++;
            v88 = v89;
          }
          while (*(_WORD *)(v89 + 32) != 373);
          v90 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)v80 + 120))(v80, v79, *(_QWORD *)(v88 + 40), v82);
          v91 = (uint64_t)*a1;
          v226[0] = (unint64_t)v90;
          v227 = 0;
          v223 = v243;
          v224 = v244;
          v225 = v245;
          v219 = v239;
          v220 = v240;
          v221 = v241;
          v222 = v242;
          v217 = v237;
          v218 = v238;
          v92 = v226;
          v93 = &v217;
          v94 = v91;
          goto LABEL_107;
        }
        v150 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0), "array_ref", 9, 1, 0);
        v151 = sub_22EFC3B90(v25);
        v152 = v151;
        if (v150)
        {
          v153 = *a1;
          v154 = *((_OWORD *)v5 + 7);
          v263 = *((_OWORD *)v5 + 6);
          v264 = v154;
          v265 = v5[16];
          v155 = *((_OWORD *)v5 + 3);
          v259 = *((_OWORD *)v5 + 2);
          v260 = v155;
          v156 = *((_OWORD *)v5 + 5);
          v261 = *((_OWORD *)v5 + 4);
          v262 = v156;
          v157 = *((_OWORD *)v5 + 1);
          v158 = v152;
          v257 = *(_OWORD *)v5;
          v258 = v157;
          do
            v158 = *(_QWORD *)(v158 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v158 && (*(_DWORD *)(v158 + 28) & 0x7Fu) - 49 > 2);
          sub_22E4EC638(v153, (uint64_t)&v257, v152, (uint64_t)&v268);
          v159 = *a1;
          v160 = *((_OWORD *)v5 + 7);
          v243 = *((_OWORD *)v5 + 6);
          v244 = v160;
          v245 = v5[16];
          v161 = *((_OWORD *)v5 + 3);
          v239 = *((_OWORD *)v5 + 2);
          v240 = v161;
          v162 = *((_OWORD *)v5 + 5);
          v241 = *((_OWORD *)v5 + 4);
          v242 = v162;
          v163 = *((__n128 *)v5 + 1);
          v237 = *(_OWORD *)v5;
          v238 = v163;
          sub_22E4EC638(v159, (uint64_t)&v237, v158, (uint64_t)&v246);
          if (*((_DWORD *)a1 + 8) == 2)
          {
            v165 = (uint64_t)(*a1 + 34);
            Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty((llvm::Type *)(*a1)[42], v164);
            LOWORD(v230) = 257;
            v167 = (llvm::Value *)sub_22E3E4D88(v165, Int32Ty, 0, (uint64_t)&v228);
            llvm::Type::getInt64Ty((llvm::Type *)(*a1)[42], v168);
            v169 = llvm::ConstantInt::get();
            v170 = (uint64_t)*a1;
            v171 = *a1 + 34;
            v172 = (llvm::Type **)a1[23];
            a1[23] = v172 + 5;
            DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v170 + 144)
                                                                                                + 200));
            PointerAlignment = llvm::Value::getPointerAlignment(v167, DataLayout);
            sub_22E3C1B6C(v171, v172, (uint64_t)v167, PointerAlignment | 0x100);
          }
          else
          {
            v167 = (llvm::Value *)a1[23];
            v192 = (uint64_t)*a1;
            v193 = *a1 + 34;
            a1[23] = (_QWORD *)((char *)v167 + 80);
            Int64Ty = llvm::Type::getInt64Ty(*(llvm::Type **)(v192 + 336), v164);
            LOWORD(v230) = 257;
            v169 = sub_22E3C1740(v193, 39, (uint64_t)v167 + 40, Int64Ty, (uint64_t)&v228);
          }
          v195 = (uint64_t)*a1;
          v255[0] = (unint64_t)v167;
          v256 = 0;
          v234 = v274;
          v235 = v275;
          v236 = v276;
          v230 = v270;
          v231 = v271;
          v232 = v272;
          v233 = v273;
          v228 = v268;
          v229 = v269;
          sub_22E4DAAE0(v195, (uint64_t)v255, (uint64_t)&v228, 0);
          v94 = (uint64_t)*a1;
          v226[0] = (unint64_t)v169;
          v227 = 0;
          v223 = v252;
          v224 = v253;
          v225 = v254;
          v219 = v248;
          v220 = v249;
          v221 = v250;
          v222 = v251;
          v217 = v246;
          v218 = v247;
          v92 = v226;
          v93 = &v217;
          goto LABEL_107;
        }
        if (v151)
        {
LABEL_135:
          v186 = *a1;
          v187 = *((_OWORD *)v5 + 7);
          v263 = *((_OWORD *)v5 + 6);
          v264 = v187;
          v265 = v5[16];
          v188 = *((_OWORD *)v5 + 3);
          v259 = *((_OWORD *)v5 + 2);
          v260 = v188;
          v189 = *((_OWORD *)v5 + 5);
          v261 = *((_OWORD *)v5 + 4);
          v262 = v189;
          v190 = *((_OWORD *)v5 + 1);
          v257 = *(_OWORD *)v5;
          v258 = v190;
          v191 = sub_22E4EC638(v186, (uint64_t)&v257, v152, (uint64_t)&v268);
          sub_22E6A19A8(a1, &v268, v152, v191);
          while (1)
          {
            v152 = *(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v152)
              break;
            if ((*(_DWORD *)(v152 + 28) & 0x7Fu) - 49 < 3)
              goto LABEL_135;
          }
        }
      }
    }
  }
LABEL_109:
  a1[22] = v21;
  v119 = *(_OWORD *)(a2 + 112);
  v274 = *(_OWORD *)(a2 + 96);
  v275 = v119;
  v276 = *(_QWORD **)(a2 + 128);
  v120 = *(_OWORD *)(a2 + 48);
  v270 = *(_OWORD *)(a2 + 32);
  v271 = v120;
  v121 = *(_OWORD *)(a2 + 80);
  v272 = *(_OWORD *)(a2 + 64);
  v273 = v121;
  v122 = *(__n128 *)(a2 + 16);
  v268 = *(_OWORD *)a2;
  v269 = v122;
  *(_OWORD *)a2 = *(_OWORD *)v5;
  v123 = *((_OWORD *)v5 + 1);
  v124 = *((_OWORD *)v5 + 2);
  v125 = *((_OWORD *)v5 + 4);
  *(_OWORD *)(a2 + 48) = *((_OWORD *)v5 + 3);
  *(_OWORD *)(a2 + 64) = v125;
  *(_OWORD *)(a2 + 16) = v123;
  *(_OWORD *)(a2 + 32) = v124;
  v126 = *((_OWORD *)v5 + 5);
  v127 = *((_OWORD *)v5 + 6);
  v128 = *((_OWORD *)v5 + 7);
  *(_QWORD *)(a2 + 128) = v5[16];
  *(_OWORD *)(a2 + 96) = v127;
  *(_OWORD *)(a2 + 112) = v128;
  *(_OWORD *)(a2 + 80) = v126;
  v129 = v275;
  *((_OWORD *)v5 + 6) = v274;
  *((_OWORD *)v5 + 7) = v129;
  v5[16] = v276;
  v130 = v271;
  *((_OWORD *)v5 + 2) = v270;
  *((_OWORD *)v5 + 3) = v130;
  v131 = v273;
  *((_OWORD *)v5 + 4) = v272;
  *((_OWORD *)v5 + 5) = v131;
  result = v269;
  *(_OWORD *)v5 = v268;
  *((__n128 *)v5 + 1) = result;
  return result;
}

uint64_t sub_22E6A2A94(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 36) & 0xFFFFFFF7) != 3
    || (v2[0] = 0x8000000100000002, v2[1] = 0, result = sub_22E3B38EC((_DWORD *)(a1 + 16), v2), (result & 1) == 0))
  {
    llvm::Attribute::get();
    return llvm::Argument::addAttr();
  }
  return result;
}

__n128 sub_22E6A2B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 result;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[32];
  __int16 v66;
  _OWORD v67[3];
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[64];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v4 = a1 + 24;
  v5 = *(_OWORD *)(a2 + 112);
  v79 = *(_OWORD *)(a2 + 96);
  v80 = v5;
  v81 = *(_QWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v76[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v76[48] = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v77 = *(_OWORD *)(a2 + 64);
  v78 = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v76 = *(_OWORD *)a2;
  *(_OWORD *)&v76[16] = v8;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = v10;
  v12 = *(_OWORD *)(a1 + 104);
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v14;
  *(_OWORD *)(a2 + 80) = v12;
  v15 = v77;
  *(_OWORD *)(a1 + 104) = v78;
  v16 = v80;
  *(_OWORD *)(a1 + 120) = v79;
  *(_OWORD *)(a1 + 136) = v16;
  *(_QWORD *)(a1 + 152) = v81;
  v17 = *(_OWORD *)v76;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v76[16];
  v18 = *(_OWORD *)&v76[48];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v76[32];
  *(_OWORD *)(a1 + 72) = v18;
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 24) = v17;
  v19 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 88) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v19 + 16) == 45)
  {
    v20 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1 + 88) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
    if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 >= 3)
      v21 = 0;
    else
      v21 = v20;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
    if ((**(_QWORD **)(v21 + 128) & 0x200) == 0)
    {
      v22 = sub_22EFC3B90(v21);
      if (v22)
      {
        v23 = v22;
LABEL_8:
        v24 = *(_QWORD **)a1;
        v25 = *(_OWORD *)(v4 + 112);
        v73 = *(_OWORD *)(v4 + 96);
        v74 = v25;
        v75 = *(_QWORD *)(v4 + 128);
        v26 = *(_OWORD *)(v4 + 48);
        v69 = *(_OWORD *)(v4 + 32);
        v70 = v26;
        v27 = *(_OWORD *)(v4 + 80);
        v71 = *(_OWORD *)(v4 + 64);
        v72 = v27;
        v28 = *(_OWORD *)(v4 + 16);
        v68[0] = *(_OWORD *)v4;
        v68[1] = v28;
        sub_22E4EC638(v24, (uint64_t)v68, v23, (uint64_t)v76);
        if (sub_22E53B49C(v23) || sub_22E536E34(v23))
        {
          v29 = (uint64_t *)(*(_QWORD *)a1 + 272);
          v67[0] = *(_OWORD *)&v76[8];
          v67[1] = *(_OWORD *)&v76[24];
          v67[2] = *(_OWORD *)&v76[40];
          v66 = 257;
          v30 = sub_22E3C2A7C(v29, (uint64_t)v67, (uint64_t)v65);
          v31 = *(unsigned int *)(a1 + 168);
          if (v31 >= *(unsigned int *)(a1 + 172))
          {
            v55 = v30;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v55;
            v31 = *(unsigned int *)(a1 + 168);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v31) = v30;
          ++*(_DWORD *)(a1 + 168);
        }
        else
        {
          v62 = v79;
          v63 = v80;
          v64 = v81;
          v58 = *(_OWORD *)&v76[32];
          v59 = *(_OWORD *)&v76[48];
          v60 = v77;
          v61 = v78;
          v56 = *(_OWORD *)v76;
          v57 = *(_OWORD *)&v76[16];
          sub_22E6A2B20(a1, &v56);
        }
        while (1)
        {
          v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v23)
            break;
          if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_8;
        }
      }
    }
  }
  else
  {
    v68[0] = 0x8000000300000002;
    if (sub_22E3B38EC((_DWORD *)(a1 + 8), v68) && sub_22F11057C(v19))
    {
      v32 = (uint64_t *)(*(_QWORD *)a1 + 272);
      v33 = *(_OWORD *)(a1 + 48);
      v56 = *(_OWORD *)(a1 + 32);
      v57 = v33;
      v58 = *(_OWORD *)(a1 + 64);
      LOWORD(v69) = 257;
      v34 = sub_22E3C2A7C(v32, (uint64_t)&v56, (uint64_t)v68);
    }
    else
    {
      v35 = *(_QWORD **)a1;
      v36 = *(_OWORD *)(v4 + 112);
      v79 = *(_OWORD *)(v4 + 96);
      v80 = v36;
      v81 = *(_QWORD *)(v4 + 128);
      v37 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)&v76[32] = *(_OWORD *)(v4 + 32);
      *(_OWORD *)&v76[48] = v37;
      v38 = *(_OWORD *)(v4 + 80);
      v77 = *(_OWORD *)(v4 + 64);
      v78 = v38;
      v39 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)v76 = *(_OWORD *)v4;
      *(_OWORD *)&v76[16] = v39;
      sub_22E4D7B28(v35, (uint64_t)v76, 0, (uint64_t)v68);
      v34 = *(_QWORD *)&v68[0];
    }
    v40 = *(_DWORD *)(a1 + 168);
    if (v40 >= *(_DWORD *)(a1 + 172))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(_DWORD *)(a1 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v40) = v34;
    ++*(_DWORD *)(a1 + 168);
  }
  v41 = *(_OWORD *)(a2 + 112);
  v79 = *(_OWORD *)(a2 + 96);
  v80 = v41;
  v81 = *(_QWORD *)(a2 + 128);
  v42 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v76[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v76[48] = v42;
  v43 = *(_OWORD *)(a2 + 80);
  v77 = *(_OWORD *)(a2 + 64);
  v78 = v43;
  v44 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v76 = *(_OWORD *)a2;
  *(_OWORD *)&v76[16] = v44;
  *(_OWORD *)a2 = *(_OWORD *)v4;
  v45 = *(_OWORD *)(v4 + 16);
  v46 = *(_OWORD *)(v4 + 32);
  v47 = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a2 + 64) = v47;
  *(_OWORD *)(a2 + 16) = v45;
  *(_OWORD *)(a2 + 32) = v46;
  v48 = *(_OWORD *)(v4 + 80);
  v49 = *(_OWORD *)(v4 + 96);
  v50 = *(_OWORD *)(v4 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(v4 + 128);
  *(_OWORD *)(a2 + 96) = v49;
  *(_OWORD *)(a2 + 112) = v50;
  *(_OWORD *)(a2 + 80) = v48;
  v51 = v80;
  *(_OWORD *)(v4 + 96) = v79;
  *(_OWORD *)(v4 + 112) = v51;
  *(_QWORD *)(v4 + 128) = v81;
  v52 = *(_OWORD *)&v76[48];
  *(_OWORD *)(v4 + 32) = *(_OWORD *)&v76[32];
  *(_OWORD *)(v4 + 48) = v52;
  v53 = v78;
  *(_OWORD *)(v4 + 64) = v77;
  *(_OWORD *)(v4 + 80) = v53;
  result = *(__n128 *)&v76[16];
  *(_OWORD *)v4 = *(_OWORD *)v76;
  *(__n128 *)(v4 + 16) = result;
  return result;
}

uint64_t *sub_22E6A2F00(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

BOOL sub_22E6A2F54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 469)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E6A2FB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 24);
  if (!result)
  {
    sub_22E6A3010(a1, a2);
    result = llvm::air::AIRFunctionInfo::createAIRFunctionInfo();
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return *(_QWORD *)(a1 + 24);
    }
  }
  return result;
}

uint64_t sub_22E6A3010(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v2 = (uint64_t *)(a1 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = operator new();
    v5 = *(_QWORD *)(a2 + 232);
    v6 = *(_QWORD *)(a2 + 216);
    if (*(char *)(v6 + 55) < 0)
    {
      sub_22E3BB2B4(__p, *(void **)(v6 + 32), *(_QWORD *)(v6 + 40));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 48);
    }
    v11 = *(_OWORD *)(v6 + 56);
    v12 = *(_QWORD *)(v6 + 72);
    *(_QWORD *)v4 = v5;
    v7 = (_BYTE *)(v4 + 8);
    if (SHIBYTE(v10) < 0)
    {
      sub_22E3BB2B4(v7, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 24) = v10;
    }
    *(_OWORD *)(v4 + 32) = v11;
    *(_QWORD *)(v4 + 48) = v12;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    sub_22E6A2F00(v2, v4);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  return *v2;
}

_QWORD *sub_22E6A3164(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A31A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A31F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6A320C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int16 v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((result & 1) == 0)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    v2 = *(_DWORD *)(v9 + 16);
    if (v9)
      v10 = (v2 & 0xFF800FF) == 86507531;
    else
      v10 = 0;
    if (v10)
    {
      result = 0;
      v11 = 0;
      v12 = 4;
LABEL_9:
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = result;
      *(_DWORD *)(a2 + 68) = 0;
      *(_BYTE *)(a2 + 72) = v12;
      *(_WORD *)(a2 + 73) = v11;
      goto LABEL_10;
    }
    if (sub_22E619D68(*(_QWORD *)(a2 + 40)))
    {
LABEL_56:
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6);
      v11 = 8;
      v12 = 2;
      goto LABEL_9;
    }
    if (*(_BYTE *)(v8 + 16) != 31)
    {
      if (v2 != 31)
        goto LABEL_49;
      v35 = sub_22F10CF48(v8);
      if (!v35)
        goto LABEL_49;
      v8 = v35;
    }
    if (sub_22F28C8B4(v8))
      goto LABEL_56;
LABEL_49:
    v29 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
      v30 = *(_BYTE *)(*(_QWORD *)v7 + 16) == 9;
    else
      v30 = 0;
    if (v30)
      goto LABEL_55;
    v31 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
    v32 = *(unsigned __int8 *)(v31 + 16);
    if (v32 == 9)
    {
      v29 = sub_22F10CF48(v29);
      if (v29)
      {
LABEL_55:
        if ((*(_DWORD *)(v29 + 32) & 0x1FFFFFEu) >= 0x81)
          goto LABEL_56;
        result = 0;
LABEL_58:
        v12 = 0;
        v11 = 128;
        goto LABEL_9;
      }
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      v32 = *(unsigned __int8 *)(v31 + 16);
    }
    if (v32 == 44)
    {
      v33 = sub_22F114198(*(_QWORD *)(v31 + 24));
      v6 = sub_22E496830(v33);
    }
    result = sub_22F2A3AE4(a1, v6);
    if ((_DWORD)result)
    {
      v34 = sub_22F110B20(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
      result = 0;
      if (v34)
        v11 = 256;
      else
        v11 = 0;
      v12 = 1;
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_10:
  v13 = *(_DWORD *)(a2 + 36);
  if (v13)
  {
    v14 = a2 + 80;
    v15 = a2 + 80 + 40 * v13;
    while (1)
    {
      v16 = *(_QWORD *)v14;
      v17 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF0;
      if (!sub_22E619D68(*(_QWORD *)v14))
      {
        v22 = *(_QWORD *)v17;
        if (!*(_QWORD *)v17 || *(_BYTE *)(*(_QWORD *)v17 + 16) != 31)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
            break;
          v22 = sub_22F10CF48(v22);
          if (!v22)
            break;
        }
        if (!sub_22F28C8B4(v22))
          break;
      }
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 16) == 45)
        {
          v19 = sub_22E69BE08(v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
          if (v19)
          {
            v20 = v19 == 1;
            result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v16);
            v2 = v2 & 0xFFFFFE00 | (8 * v20);
LABEL_31:
            v21 = 2;
            goto LABEL_34;
          }
        }
      }
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v16);
      v2 = v2 & 0xFFFFFE00 | 8;
      v21 = 2;
LABEL_34:
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 24) = result;
      *(_DWORD *)(v14 + 28) = 0;
      *(_BYTE *)(v14 + 32) = v21;
      *(_WORD *)(v14 + 33) = v2;
      v14 += 40;
      if (v14 == v15)
        return result;
    }
    v24 = *(_QWORD *)v17;
    v25 = *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0);
    v26 = *(unsigned __int8 *)(v25 + 16);
    if (v25 && v26 == 44)
    {
      v27 = sub_22F114198(*(_QWORD *)(v25 + 24));
      v16 = sub_22E496830(v27);
LABEL_37:
      result = sub_22F2A3AE4(a1, v16);
      if ((_DWORD)result)
      {
        v28 = sub_22F110B20(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0));
        result = 0;
        if (v28)
          v2 = v2 & 0xFFFFFE00 | 0x100;
        else
          v2 &= 0xFFFFFE00;
        v21 = 1;
        goto LABEL_34;
      }
      v21 = 0;
LABEL_33:
      v2 = v2 & 0xFFFFFE00 | 0x80;
      goto LABEL_34;
    }
    if (sub_22F10E0EC(v24))
      goto LABEL_32;
    if (*(_BYTE *)(v24 + 16) != 9)
    {
      if (v26 != 9)
        goto LABEL_37;
      v24 = sub_22F10CF48(v24);
      if (!v24)
        goto LABEL_37;
    }
    if ((*(_DWORD *)(v24 + 32) & 0x1FFFFFEu) < 0x81)
    {
LABEL_32:
      v21 = 0;
      result = 0;
      goto LABEL_33;
    }
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v16);
    v2 = v2 & 0xFFFFFE00 | 8;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_22E6A35C4@<X0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int128 v4;
  _OWORD v6[3];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  return sub_22E69B8E0(a4, a1, (uint64_t)v6, a3, 0);
}

_QWORD *sub_22E6A35FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A363C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x100) != 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22EFC8E88(a2);
    v5 = *(uint64_t **)v4;
    v6 = *(unsigned int *)(v4 + 8);
    i = *(uint64_t **)v4;
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      for (i = *(uint64_t **)v4; *(_WORD *)(*i + 32) != 199; ++i)
      {
        v8 -= 8;
        if (!v8)
          return;
      }
    }
    if (i != &v5[v6])
    {
      do
        v9 = *v5++;
      while (*(_WORD *)(v9 + 32) != 199);
      *(_WORD *)(a3 + 18) = *(_WORD *)(a3 + 18) & 0xC00F | 0x650;
      llvm::Function::addFnAttr();
      llvm::GlobalAlias::create();
    }
  }
}

_QWORD *sub_22E6A3778(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A37B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A3808(int a1, uint64_t a2, llvm::GlobalValue *this)
{
  int v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *i;
  uint64_t v34;
  uint64_t v35;

  if (!a2)
    return;
  v4 = *(_DWORD *)(a2 + 28);
  if ((v4 & 0x7Eu) - 52 > 5)
    return;
  if ((v4 & 0x100) != 0)
  {
    sub_22EFC8E88(a2);
    v7 = *((unsigned int *)v6 + 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      v9 = *v6;
      while (*(_WORD *)(*(_QWORD *)v9 + 32) != 216)
      {
        v9 += 8;
        v8 -= 8;
        if (!v8)
          goto LABEL_11;
      }
    }
    else
    {
      v9 = *v6;
    }
    if (v9 != *v6 + 8 * v7)
      goto LABEL_19;
  }
LABEL_11:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = *((unsigned int *)v10 + 2);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      v13 = *v10;
      while (*(_WORD *)(*(_QWORD *)v13 + 32) != 217)
      {
        v13 += 8;
        v12 -= 8;
        if (!v12)
          goto LABEL_20;
      }
    }
    else
    {
      v13 = *v10;
    }
    if (v13 != *v10 + 8 * v11)
LABEL_19:
      llvm::Function::addFnAttr();
  }
LABEL_20:
  if ((llvm::GlobalValue::isDeclaration(this) & 1) != 0)
    return;
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v15 = *((unsigned int *)v14 + 2);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = *v14;
      while (*(_WORD *)(*(_QWORD *)v17 + 32) != 214)
      {
        v17 += 8;
        v16 -= 8;
        if (!v16)
          goto LABEL_29;
      }
    }
    else
    {
      v17 = *v14;
    }
    if (v17 != *v14 + 8 * v15)
      goto LABEL_37;
  }
LABEL_29:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v19 = *((unsigned int *)v18 + 2);
    if ((_DWORD)v19)
    {
      v20 = 8 * v19;
      v21 = *v18;
      while (*(_WORD *)(*(_QWORD *)v21 + 32) != 230)
      {
        v21 += 8;
        v20 -= 8;
        if (!v20)
          goto LABEL_38;
      }
    }
    else
    {
      v21 = *v18;
    }
    if (v21 != *v18 + 8 * v19)
LABEL_37:
      llvm::Function::addFnAttr();
  }
LABEL_38:
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_46;
  sub_22EFC8E88(a2);
  v23 = *((unsigned int *)v22 + 2);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    v25 = *v22;
    while (*(_WORD *)(*(_QWORD *)v25 + 32) != 211)
    {
      v25 += 8;
      v24 -= 8;
      if (!v24)
        goto LABEL_46;
    }
  }
  else
  {
    v25 = *v22;
  }
  if (v25 == *v22 + 8 * v23)
  {
LABEL_46:
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      goto LABEL_55;
    sub_22EFC8E88(a2);
    v27 = *((unsigned int *)v26 + 2);
    if ((_DWORD)v27)
    {
      v28 = 8 * v27;
      v29 = *v26;
      while (*(_WORD *)(*(_QWORD *)v29 + 32) != 229)
      {
        v29 += 8;
        v28 -= 8;
        if (!v28)
          goto LABEL_55;
      }
    }
    else
    {
      v29 = *v26;
    }
    if (v29 == *v26 + 8 * v27)
      goto LABEL_55;
  }
  llvm::Function::addFnAttr();
LABEL_55:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v31 = *(uint64_t **)v30;
    v32 = *(unsigned int *)(v30 + 8);
    i = *(uint64_t **)v30;
    if ((_DWORD)v32)
    {
      v34 = 8 * v32;
      for (i = *(uint64_t **)v30; *(_WORD *)(*i + 32) != 215; ++i)
      {
        v34 -= 8;
        if (!v34)
          return;
      }
    }
    if (i != &v31[v32])
    {
      do
        v35 = *v31++;
      while (*(_WORD *)(v35 + 32) != 215);
      llvm::Function::addFnAttr();
    }
  }
}

uint64_t sub_22E6A3B6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_22E6A3B74()
{
  return 29;
}

uint64_t sub_22E6A3B7C(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v5;

  v5 = llvm::ConstantInt::get();
  a2 += 272;
  sub_22E6A4C7C(a2, a3, v5, 0, 0x41u);
  sub_22E6A4C7C(a2, a3, v5, 80, 0xB5u);
  return 0;
}

void sub_22E6A3BF4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6A3C08(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  llvm::LLVMContext *v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t DoubleTy;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  llvm::LLVMContext *v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *__src;
  uint64_t v91;
  _BYTE v92[64];
  void *v93;
  uint64_t v94;
  _QWORD v95[10];

  v95[8] = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 *)(a2 + 72);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(a2 + 40);
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = (v12 & 0xFF800FF) == 86507531;
  else
    v13 = 0;
  if (v13)
  {
    v14 = 0;
LABEL_17:
    result = 0;
    v20 = 0;
    v6 = 4;
    goto LABEL_18;
  }
  v14 = v9;
  if (!*(_BYTE *)(a1 + 20) && !v9)
    goto LABEL_17;
  if (sub_22E619D68(v7))
    goto LABEL_13;
  if (*(_BYTE *)(v10 + 16) == 31)
  {
LABEL_164:
    if (sub_22F28C8B4(v10))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v12 == 31)
  {
    v84 = sub_22F10CF48(v10);
    if (v84)
    {
      v10 = v84;
      goto LABEL_164;
    }
  }
LABEL_12:
  v15 = *v8;
  v16 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(unsigned __int8 *)(v16 + 16);
  if ((v17 - 55) > 1)
  {
    if (v17 == 44)
    {
      v67 = sub_22F114198(*(_QWORD *)(v16 + 24));
      v7 = sub_22E496830(v67);
      v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
      v15 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    }
    if ((!v15 || *(_BYTE *)(v15 + 16) != 9)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9
       || (v15 = sub_22F10CF48(v15)) == 0)
      || (v68 = (*(_DWORD *)(v15 + 32) >> 1) & 0xFFFFFF, v68 <= 0x80)
      && (v68 < 0x41
       || (v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15088),
           ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 48))(v69) & 1) != 0)))
    {
      v81 = sub_22F2A3AE4(a1, v7);
      v82 = *v8;
      if (v81)
      {
        v83 = sub_22F110B20(v82);
        v14 = 0;
        result = 0;
        if (v83)
          v20 = 256;
        else
          v20 = 0;
      }
      else
      {
        if (!sub_22F110C5C(v82) && !sub_22F110A40(*v8) || v14 != 32 || *(_BYTE *)(a1 + 20))
          goto LABEL_15;
        v14 = 0;
        result = 0;
        v20 = 256;
      }
      v6 = 1;
      goto LABEL_18;
    }
LABEL_126:
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7);
    v14 = 0;
    v20 = 8;
    v6 = 2;
    goto LABEL_18;
  }
LABEL_13:
  if (v14 > 0x80)
    goto LABEL_126;
  v18 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 12)
  {
    if (*(_BYTE *)(a1 + 20))
    {
      if ((v19 - 55) > 1 || sub_22F110DD0(*v8))
        goto LABEL_126;
      v93 = v95;
      v94 = 0x800000000;
      goto LABEL_146;
    }
    v93 = v95;
    v94 = 0x800000000;
    if (v19 == 45)
    {
      if (sub_22F10DF70(v18))
      {
        v70 = sub_22F114198(*(_QWORD *)(v18 + 24));
        v71 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v70);
        v72 = *(_QWORD **)(v71 + 48);
        if (((*(_QWORD *)(v71 + 56) - (_QWORD)v72) >> 3) - 1 <= 1 && !*v72)
        {
          v73 = sub_22EFC3B90(v70);
          if (!v73)
          {
LABEL_160:
            sub_22E6A4B04(v70);
            goto LABEL_147;
          }
          v74 = v73;
LABEL_133:
          v75 = *(llvm::LLVMContext **)(v74 + 48);
          v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v76)
            v77 = *(_DWORD *)(v76 + 16) == 11;
          else
            v77 = 0;
          if (v77 && ((*(_DWORD *)(v76 + 16) >> 19) & 0x1FEu) - 210 <= 7)
          {
            v78 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), v75);
            v79 = v94;
            if (v94 >= (unint64_t)HIDWORD(v94))
            {
              v80 = v78;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v78 = v80;
              v79 = v94;
            }
            *((_QWORD *)v93 + v79) = v78;
            LODWORD(v94) = v94 + 1;
            while (1)
            {
              v74 = *(_QWORD *)(v74 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v74)
                goto LABEL_160;
              if ((*(_DWORD *)(v74 + 28) & 0x7Fu) - 49 <= 2)
                goto LABEL_133;
            }
          }
          LODWORD(v94) = 0;
        }
      }
    }
LABEL_146:
    sub_22E6A4B64(a1, v14, (uint64_t)&v93);
LABEL_147:
    v14 = llvm::StructType::get();
    if (v93 != v95)
      free(v93);
    result = 0;
    v6 = 0;
    v20 = 192;
    goto LABEL_18;
  }
LABEL_15:
  v14 = 0;
  result = 0;
  v6 = 0;
  v20 = 128;
LABEL_18:
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = result;
  *(_DWORD *)(a2 + 68) = 0;
  *(_BYTE *)(a2 + 72) = v6;
  *(_WORD *)(a2 + 73) = v20;
LABEL_19:
  if (v6 == 2)
    v21 = *(unsigned int *)(a1 + 24);
  else
    v21 = 0;
  v22 = *(_DWORD *)(a2 + 36);
  if (v22)
  {
    v23 = a2 + 80;
    v24 = a2 + 80 + 40 * v22;
    do
    {
      v25 = sub_22E69BD58(*(_QWORD *)v23);
      v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
      v27 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0));
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0));
      v29 = v28 >> 3;
      if (v29 <= *(unsigned int *)(a1 + 24))
        v29 = *(unsigned int *)(a1 + 24);
      if (v29 >= *(unsigned int *)(a1 + 28))
        v29 = *(unsigned int *)(a1 + 28);
      v89 = ((v21 + v29 - 1) / v29) * v29;
      v30 = (((v27 + 8 * v29 - 1) / (8 * v29) * 8 * v29) >> 3) + v89;
      if (sub_22E619D68(v25)
        || ((v31 = *v26) != 0 && *(_BYTE *)(v31 + 16) == 31
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v31 = sub_22F10CF48(v31)) != 0)
        && sub_22F28C8B4(v31)
        || (v32 = *v26,
            v33 = *(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0),
            v34 = *(unsigned __int8 *)(v33 + 16),
            (v34 - 55) <= 1))
      {
        if (v27)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v35
            || *(_BYTE *)(v35 + 16) != 45
            || (v36 = sub_22E69BE08(v35, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32))) == 0)
          {
            v93 = v95;
            v94 = 0x800000000;
            __src = v92;
            v91 = 0x800000000;
            if (*(_BYTE *)(a1 + 20))
              goto LABEL_39;
            v43 = *v26;
            if (sub_22F10E0B8(v43))
            {
              v40 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v25);
LABEL_40:
              v27 = v40;
            }
            else
            {
              v44 = *(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v44 || *(_BYTE *)(v44 + 16) != 45 || (sub_22F10DF70(v44) & 1) == 0)
              {
LABEL_39:
                sub_22E6A4B64(a1, v27, (uint64_t)&v93);
                v40 = llvm::StructType::get();
                goto LABEL_40;
              }
              v88 = v24;
              v45 = sub_22F114198(*(_QWORD *)(v44 + 24));
              v46 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v45);
              v47 = llvm::IntegerType::get();
              v48 = sub_22EFC3B90(v45);
              if (v48)
              {
                v50 = v48;
                v51 = 0;
                v52 = 0;
LABEL_67:
                v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v53)
                  v54 = (*(_DWORD *)(v53 + 16) & 0xFF800FF) == 111149067;
                else
                  v54 = 0;
                if (v54)
                {
                  v55 = *(_QWORD *)(*(_QWORD *)(v46 + 48) + 8 * v51);
                  if ((v55 & 0x3F) == 0)
                  {
                    v87 = v46;
                    v85 = *(_QWORD *)(*(_QWORD *)(v46 + 48) + 8 * v51);
                    v56 = (unint64_t)(v55 - v52) >> 6;
                    v86 = v51;
                    if ((_DWORD)v56)
                    {
                      v57 = v94;
                      do
                      {
                        if (v57 >= HIDWORD(v94))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v57 = v94;
                        }
                        *((_QWORD *)v93 + v57) = v47;
                        v57 = v94 + 1;
                        LODWORD(v94) = v94 + 1;
                        LODWORD(v56) = v56 - 1;
                      }
                      while ((_DWORD)v56);
                    }
                    DoubleTy = llvm::Type::getDoubleTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v49);
                    v59 = v94;
                    if (v94 >= (unint64_t)HIDWORD(v94))
                    {
                      v60 = DoubleTy;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      DoubleTy = v60;
                      v59 = v94;
                    }
                    v46 = v87;
                    *((_QWORD *)v93 + v59) = DoubleTy;
                    LODWORD(v94) = v94 + 1;
                    v52 = v85 + 64;
                    v51 = v86;
                  }
                }
                while (1)
                {
                  v50 = *(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
                  if (!v50)
                    break;
                  if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 49 <= 2)
                  {
                    ++v51;
                    goto LABEL_67;
                  }
                }
              }
              else
              {
                v52 = 0;
              }
              sub_22E6A4B64(a1, v27 - v52, (uint64_t)&__src);
              sub_22E3D0148((uint64_t)&v93, __src, (_BYTE *)__src + 8 * v91);
              v27 = llvm::StructType::get();
              v24 = v88;
            }
            if (__src != v92)
              free(__src);
            if (v93 != v95)
              free(v93);
            if (v21 + (unint64_t)*(unsigned int *)(a1 + 24) <= v89)
              result = llvm::IntegerType::get();
            else
              result = 0;
            v39 = 0;
            v38 = 0;
            v2 = v2 & 0xFFFFFE00 | 0xC0;
            goto LABEL_58;
          }
          v30 = v21 + *(unsigned int *)(a1 + 24);
          v37 = v36 == 1;
          v38 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v25);
          result = 0;
          v27 = 0;
          v2 = v2 & 0xFFFFFE00 | (8 * v37);
          v39 = 2;
        }
        else
        {
          v38 = 0;
          result = 0;
          v2 &= 0xFFFFFE00;
          v39 = 4;
        }
      }
      else
      {
        if (v34 == 44)
        {
          v41 = sub_22F114198(*(_QWORD *)(v33 + 24));
          v25 = sub_22E496830(v41);
          v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
          v32 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
        }
        if ((v32 && *(_BYTE *)(v32 + 16) == 9
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
           && (v32 = sub_22F10CF48(v32)) != 0)
          && ((v42 = (*(_DWORD *)(v32 + 32) >> 1) & 0xFFFFFF, v42 > 0x80)
           || v42 >= 0x41
           && (v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15088),
               ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 48))(v61) & 1) == 0)))
        {
          v38 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v25);
          result = 0;
          v27 = 0;
          v2 = v2 & 0xFFFFFE00 | 8;
          v39 = 2;
        }
        else
        {
          v62 = *(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0);
          v63 = *(_DWORD *)(v62 + 16);
          if (v62 && v63 == 11)
          {
            if (((*(_DWORD *)(v62 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_94;
          }
          else if (v62 && v63 == 44)
          {
            v64 = sub_22F114198(*(_QWORD *)(v62 + 24));
            if ((*(_BYTE *)(v64 + 74) & 1) == 0 && *(_QWORD *)(v64 + 128) < 8uLL)
            {
LABEL_94:
              if (*(_BYTE *)(a1 + 20) || v21 + (unint64_t)*(unsigned int *)(a1 + 24) > v89)
                result = 0;
              else
                result = llvm::IntegerType::get();
              v39 = 0;
              v38 = 0;
              v27 = 0;
              v2 = v2 & 0xFFFFFE00 | 0x80;
              goto LABEL_58;
            }
          }
          else if (v63 != 9)
          {
            goto LABEL_94;
          }
          v65 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v26);
          if (sub_22F110C5C(*v26) && v65 == 32)
          {
            v38 = 0;
            result = 0;
            v27 = 0;
            v2 = v2 & 0xFFFFFE00 | 0x100;
          }
          else
          {
            v66 = sub_22F110B20(*v26);
            v38 = 0;
            result = 0;
            v27 = 0;
            if (v66)
              v2 = v2 & 0xFFFFFE00 | 0x100;
            else
              v2 &= 0xFFFFFE00;
          }
          v39 = 1;
        }
      }
LABEL_58:
      *(_QWORD *)(v23 + 8) = v27;
      *(_QWORD *)(v23 + 16) = result;
      *(_DWORD *)(v23 + 24) = v38;
      *(_DWORD *)(v23 + 28) = 0;
      *(_BYTE *)(v23 + 32) = v39;
      *(_WORD *)(v23 + 33) = v2;
      v23 += 40;
      v21 = v30;
    }
    while (v23 != v24);
  }
  return result;
}

void sub_22E6A4778(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  _QWORD v45[3];
  int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  __int128 v53;

  if (*(_BYTE *)(a1 + 20))
    v10 = 32;
  else
    v10 = 64;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 24) + *(_QWORD *)(**(_QWORD **)(v11 + 24) - 24));
  v13 = a4 & 0xFFFFFFFFFFFFFFF0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(v14 + 16);
  if (v14)
    v16 = v15 == 11;
  else
    v16 = 0;
  if (v16)
  {
    if (((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_19;
  }
  else if (v14 && v15 == 44)
  {
    v17 = sub_22F114198(*(_QWORD *)(v14 + 24));
    if ((*(_BYTE *)(v17 + 74) & 1) == 0 && *(_QWORD *)(v17 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v14 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_19;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  else if (v15 != 9)
  {
    goto LABEL_19;
  }
  if (sub_22EF6A330(*(_QWORD *)(v11 + 8), a4) < v10)
  {
    v18 = *(_QWORD *)v13;
    goto LABEL_24;
  }
LABEL_19:
  v18 = *(_QWORD *)v13;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
    || v10 <= v12)
  {
    v20 = 0;
    v21 = (uint64_t *)v13;
    v22 = a4;
    goto LABEL_25;
  }
LABEL_24:
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v24 = sub_22F110930(v18);
  v22 = sub_22EF60A6C(v23, v10, v24);
  v21 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF0);
  v20 = 1;
LABEL_25:
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v21, (uint64_t)&v50);
  v27 = a1 + 24;
  v26 = *(unsigned int *)(a1 + 24);
  v25 = *(unsigned int *)(v27 + 4);
  v28 = v50;
  if (v51 >= v25)
    v29 = v25;
  else
    v29 = v51;
  v30 = a3[1];
  v52[0] = *a3;
  v52[1] = v30;
  v53 = a3[2];
  v31 = sub_22E66C868(a2[18] + 280, v22, 0);
  sub_22E6A0A7C(a5, a2, (uint64_t)v52, v31, v28, v29, v26, 1);
  if (v20)
  {
    *(_QWORD *)&v52[0] = "vaarg.promotion-temp";
    LOWORD(v53) = 259;
    v32 = sub_22F25E4D4((uint64_t)a2, a4, (uint64_t)v52, 0);
    v34 = 0;
    if (v32 <= 7)
      v35 = 0;
    else
      v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    if (v32 <= 7)
      v36 = 0;
    else
      v36 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (v32 >= 8)
      v34 = 1 << (v33 & 7 | (8 * (v32 & 7)));
    v37 = a2 + 34;
    v38 = *(_OWORD *)(a5 + 16);
    v49[0] = *(_OWORD *)a5;
    v49[1] = v38;
    v49[2] = *(_OWORD *)(a5 + 32);
    LOWORD(v53) = 257;
    v39 = sub_22E3C2A7C(a2 + 34, (uint64_t)v49, (uint64_t)v52);
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0);
    v41 = *(_DWORD *)(v40 + 16);
    if (v40 && v41 == 11)
    {
      if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_48;
    }
    else if (v40 && v41 == 44)
    {
      v42 = sub_22F114198(*(_QWORD *)(v40 + 24));
      if (((*(_BYTE *)(v42 + 74) & 1) != 0 || *(_QWORD *)(v42 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v40 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_48;
      }
    }
    else if (v41 == 9)
    {
LABEL_48:
      v43 = v36;
      goto LABEL_49;
    }
    v43 = a2[11];
LABEL_49:
    LOWORD(v53) = 257;
    v44 = (llvm::Type **)sub_22E3C1740(v37, 38, v39, v43, (uint64_t)v52);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      LOWORD(v53) = 257;
      v44 = (llvm::Type **)sub_22E3C1740(v37, 48, (uint64_t)v44, v36, (uint64_t)v52);
    }
    v45[0] = v35;
    v45[1] = v36;
    v45[2] = v34;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    sub_22E3BEDDC((uint64_t)v37, v44, (uint64_t)v45);
    *(_QWORD *)a5 = v35;
    *(_QWORD *)(a5 + 8) = v36;
    *(_QWORD *)(a5 + 16) = v34;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
}

BOOL sub_22E6A4B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 276)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E6A4B64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  result = llvm::IntegerType::get();
  v7 = (8 * *(_DWORD *)(a1 + 24));
  v8 = a2 / v7;
  if ((a2 / v7))
  {
    v9 = result;
    v10 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v10 >= *(_DWORD *)(a3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
      v10 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v10;
      LODWORD(v8) = v8 - 1;
    }
    while ((_DWORD)v8);
    v7 = (8 * *(_DWORD *)(a1 + 24));
  }
  if ((a2 % v7))
  {
    result = llvm::IntegerType::get();
    v11 = result;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
    ++*(_DWORD *)(a3 + 8);
  }
  return result;
}

uint64_t sub_22E6A4C7C(uint64_t result, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  llvm::LLVMContext *Int8Ty;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 <= a5)
  {
    v19 = v5;
    v20 = v6;
    v8 = a4;
    v10 = result;
    do
    {
      Int8Ty = (llvm::LLVMContext *)llvm::Type::getInt8Ty(*(llvm::Type **)(v10 + 64), a2);
      v18 = 257;
      sub_22E3E51B0((uint64_t *)v10, Int8Ty, (uint64_t *)a2, v8, (uint64_t)v17);
      v12 = llvm::User::operator new((llvm::User *)0x40);
      llvm::StoreInst::StoreInst();
      v18 = 257;
      result = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(v10 + 80) + 16))(*(_QWORD *)(v10 + 80), v12, v17, *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56));
      v13 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v13)
      {
        v15 = *(_QWORD *)v10;
        v16 = *(_QWORD *)v10 + 16 * v13;
        do
        {
          result = llvm::Instruction::setMetadata();
          v15 += 16;
        }
        while (v15 != v16);
      }
      v14 = (_DWORD)v8 == a5;
      v8 = (v8 + 1);
    }
    while (!v14);
  }
  return result;
}

_QWORD *sub_22E6A4D90(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A4DD0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A4E20(int a1, uint64_t a2, llvm::GlobalValue *this)
{
  char isDeclaration;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  isDeclaration = llvm::GlobalValue::isDeclaration(this);
  if (a2)
  {
    if ((isDeclaration & 1) == 0)
    {
      v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 0x7Eu) - 52 <= 5)
      {
        if ((v5 & 0x100) != 0)
        {
          sub_22EFC8E88(a2);
          v7 = *((unsigned int *)v6 + 2);
          if ((_DWORD)v7)
          {
            v8 = 8 * v7;
            v9 = *v6;
            while (*(_WORD *)(*(_QWORD *)v9 + 32) != 91)
            {
              v9 += 8;
              v8 -= 8;
              if (!v8)
                goto LABEL_13;
            }
          }
          else
          {
            v9 = *v6;
          }
          if (v9 != *v6 + 8 * v7)
            llvm::Function::addFnAttr();
        }
LABEL_13:
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v11 = *((unsigned int *)v10 + 2);
          if ((_DWORD)v11)
          {
            v12 = 8 * v11;
            for (i = *v10; *(_WORD *)(*(_QWORD *)i + 32) != 92; i += 8)
            {
              v12 -= 8;
              if (!v12)
                return;
            }
          }
          else
          {
            i = *v10;
          }
          if (i != *v10 + 8 * v11)
            llvm::Function::addFnAttr();
        }
      }
    }
  }
}

uint64_t sub_22E6A4F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  __int16 v16;

  if (!a3)
    return 0;
  v4 = *(_QWORD *)(a3 + 48);
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v5 & 8) != 0 && ((v5 | v4) & 1) == 0)
  {
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    if (v6 >= 0x1B && v6 - 28 <= 5)
    {
      v8 = *(_QWORD *)(a2 + 208);
      *(_DWORD *)(v8 + 312) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 316) = 829;
      if (*(char *)(v8 + 311) < 0)
      {
        **(_BYTE **)(v8 + 288) = 0;
        *(_QWORD *)(v8 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v8 + 288) = 0;
        *(_BYTE *)(v8 + 311) = 0;
      }
      v10 = (unsigned __int8 *)(v8 + 320);
      v15[0] = v8 + 320;
      v15[1] = 0;
      v15[2] = v8;
      v16 = 1;
      *(_BYTE *)(v8 + 320) = 0;
      *(_DWORD *)(v8 + 664) = 0;
      v11 = *(unsigned int *)(v8 + 776);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)(v8 + 768);
        v13 = 56 * v11;
        do
        {
          if (*(char *)(v12 + v13 - 9) < 0)
            operator delete(*(void **)(v12 + v13 - 32));
          v13 -= 56;
        }
        while (v13);
        LODWORD(v11) = *v10;
      }
      *(_DWORD *)(v8 + 776) = 0;
      v10[v11 + 1] = 1;
      *(_BYTE *)(v8 + 320) = v11 + 1;
      *(_QWORD *)&v10[8 * v11 + 16] = "__flash*";
      sub_22E3BB0B8((uint64_t)v15);
    }
  }
  if (sub_22E633FCC(a3))
    return 28;
  v14 = *(_QWORD *)((*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0)
    return *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    return 0;
}

void sub_22E6A50A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22E6A50BC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t result;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v17;
  char v18;
  _BYTE v19[27];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22E619D68(v6)
      || ((v9 = *v7) != 0 ? (v10 = *(_BYTE *)(*v7 + 16) == 31) : (v10 = 0),
          (v10
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
        && (v9 = sub_22F10CF48(v9)) != 0)
       && sub_22F28C8B4(v9)))
    {
      result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v7);
      if (result > (8 * *(_DWORD *)(a1 + 24)))
      {
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6);
        *(_OWORD *)v19 = 0uLL;
        v19[24] = 2;
        *(_QWORD *)&v19[16] = result;
        *(_WORD *)&v19[25] = 8;
        *(_OWORD *)(a2 + 48) = 0uLL;
        *(_OWORD *)(a2 + 59) = *(_OWORD *)&v19[11];
        v8 = *(_DWORD *)(a1 + 20) - 2;
        goto LABEL_14;
      }
      memset(v19, 0, 25);
      *(_WORD *)&v19[25] = 128;
    }
    else
    {
      result = sub_22E69BE7C((unint64_t)v19, a1, v6);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v19;
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v19[11];
  }
  v8 = *(_DWORD *)(a1 + 20);
LABEL_14:
  v11 = *(_DWORD *)(a2 + 36);
  if (v11)
  {
    v12 = a2 + 80;
    v13 = a2 + 80 + 40 * v11;
    if (*(_DWORD *)(a2 + 16) == -1)
      v14 = v8;
    else
      v14 = 0;
    do
    {
      v15 = (uint64_t *)(*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF0);
      result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v15);
      if ((_DWORD)result == 8 && v14 >= 2)
      {
        v14 -= 2;
        result = sub_22F110B20(*v15);
        if ((_DWORD)result)
          v2 = v2 & 0xFFFFFE00 | 0x100;
        else
          v2 &= 0xFFFFFE00;
        v18 = 1;
      }
      else
      {
        v17 = (result + 15) & 0xFFFFFFF0;
        if (v17 <= 8 * v14)
          v14 -= v17 >> 3;
        else
          v14 = 0;
        v2 = v2 & 0xFFFFFE00 | 0x80;
        v18 = 0;
      }
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_BYTE *)(v12 + 32) = v18;
      *(_WORD *)(v12 + 33) = v2;
      v12 += 40;
    }
    while (v12 != v13);
  }
  return result;
}

_QWORD *sub_22E6A52AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A52EC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A533C(uint64_t a1, uint64_t a2, llvm::GlobalValue *a3, uint64_t a4)
{
  sub_22E6A58A8(a1, a2, (uint64_t)a3, a4);
  if ((llvm::GlobalValue::isDeclaration(a3) & 1) == 0)
    sub_22E6A7DFC((uint64_t)a3, a4);
}

uint64_t sub_22E6A5380()
{
  return 31;
}

uint64_t sub_22E6A5388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  result = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 152) + 568))(*(_QWORD *)(a2 + 152), "ls64", 4);
  if ((_DWORD)result)
  {
    result = 0;
    if (a3 && *(_BYTE *)(a3 + 8) == 16 && *(_DWORD *)(a3 + 12) == 1)
    {
      v5 = **(_QWORD **)(a3 + 16);
      v6 = v5 && *(_BYTE *)(v5 + 8) == 17;
      if (v6 && *(_QWORD *)(v5 + 32) == 8 && (llvm::Type::isIntegerTy(*(llvm::Type **)(v5 + 24)) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22E6A5420()
{
  return 0;
}

const char *sub_22E6A5428()
{
  return "mov\tfp, fp\t\t// marker for objc_retainAutoreleaseReturnValue";
}

void sub_22E6A5438(uint64_t a1, void *a2, size_t a3, _QWORD *a4)
{
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  std::string v16;

  sub_22E6A7F48((uint64_t)&v15, a2, a3);
  v5 = std::string::insert(&v15, 0, "/DEFAULTLIB:");
  v16 = *v5;
  v6 = v16.__r_.__value_.__r.__words[2];
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v7 = HIBYTE(v6);
  v8 = (char)v7;
  v9 = (void *)v16.__r_.__value_.__r.__words[0];
  if ((v7 & 0x80u) == 0)
    v10 = &v16;
  else
    v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
  v11 = v7 & 0x7F;
  if (v8 >= 0)
    size = v11;
  else
    size = v16.__r_.__value_.__l.__size_;
  a4[1] = 0;
  if (a4[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v13 = a4[1];
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (!size)
      goto LABEL_10;
  }
  memcpy((void *)(*a4 + v13), v10, size);
  v14 = a4[1];
LABEL_10:
  a4[1] = v14 + size;
  if (v8 < 0)
    operator delete(v9);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_22E6A5534(int a1, void *__src, size_t __len, const void *a4, size_t a5, _QWORD *a6)
{
  std::string *p_dst;
  size_t v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void *p_p;
  std::string::size_type v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void **v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type size;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  size_t v41;
  unint64_t v42;
  std::string __dst;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  v14 = std::string::insert(&__dst, 0, "/FAILIFMISMATCH:\"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "=");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (!a4)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    __p = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_23;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a5 >= 0x17)
  {
    v22 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v22 = a5 | 7;
    v23 = v22 + 1;
    p_p = operator new(v22 + 1);
    v41 = a5;
    v42 = v23 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v42) = a5;
    p_p = &__p;
    if (!a5)
      goto LABEL_22;
  }
  memmove(p_p, a4, a5);
LABEL_22:
  *((_BYTE *)p_p + a5) = 0;
  v21 = HIBYTE(v42);
  v20 = (void **)__p;
  v19 = v41;
LABEL_23:
  v24 = v21 < 0;
  if (v21 >= 0)
    v25 = &__p;
  else
    v25 = v20;
  v26 = v21 & 0x7F;
  if (v24)
    v27 = v19;
  else
    v27 = v26;
  v28 = std::string::append(&v45, (const std::string::value_type *)v25, v27);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, "\"");
  v47 = *v30;
  v31 = v47.__r_.__value_.__r.__words[2];
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v32 = HIBYTE(v31);
  v33 = (char)v32;
  v34 = (void *)v47.__r_.__value_.__r.__words[0];
  if ((v32 & 0x80u) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v36 = v32 & 0x7F;
  if (v33 >= 0)
    size = v36;
  else
    size = v47.__r_.__value_.__l.__size_;
  a6[1] = 0;
  if (a6[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v38 = a6[1];
  }
  else
  {
    v38 = 0;
    v39 = 0;
    if (!size)
      goto LABEL_38;
  }
  memcpy((void *)(*a6 + v38), v35, size);
  v39 = a6[1];
LABEL_38:
  a6[1] = v39 + size;
  if (v33 < 0)
    operator delete(v34);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

_QWORD *sub_22E6A5818(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A5858(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A58A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x100) != 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22EFC8E88(a2);
    v6 = *(uint64_t **)v5;
    v7 = *(unsigned int *)(v5 + 8);
    i = *(uint64_t **)v5;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      for (i = *(uint64_t **)v5; *(_WORD *)(*i + 32) != 327; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    if (i != &v6[v7])
    {
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 327);
      sub_22E639F38(*(_DWORD **)(v10 + 40), *(unsigned int *)(v10 + 36), &v15);
      if (v19)
      {
        v14 = 0;
        v12[1] = 0;
        v13 = 0;
        v12[0] = 0;
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void ***))(**(_QWORD **)(a4 + 216)
                                                                                                + 552))(*(_QWORD *)(a4 + 216), v18, v19, v16, v17, &v13, v12);
        strlen(off_24FA6A3A8[(int)v13]);
        llvm::Function::addFnAttr();
        if ((_DWORD)v13)
          llvm::Function::addFnAttr();
        llvm::Function::addFnAttr();
      }
      v12[0] = (void **)&v15;
      sub_22E3B3CC8(v12);
    }
  }
}

void sub_22E6A5A50()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6A5A64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
}

double sub_22E6A5A78(uint64_t a1, uint64_t a2)
{
  double result;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *DataLayout;
  int v16;
  llvm::ArrayType *Int64Ty;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  BOOL v29;
  _BYTE v30[27];
  unint64_t v31;
  uint64_t v32;

  if ((sub_22E6A72E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2, a1) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
    else
      v9 = 0;
    if (v9)
      goto LABEL_25;
    v10 = *(_DWORD *)(a2 + 16);
    v11 = sub_22E3E4B64(v7);
    if (v11 && ((*(_DWORD *)(v11 + 16) >> 19) & 0xFu) - 7 <= 1)
    {
      sub_22E6A7888((uint64_t)v30, (llvm::LLVMContext *)a1, v5);
LABEL_41:
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v30;
      result = *(double *)&v30[11];
      *(_OWORD *)(a2 + 59) = *(_OWORD *)&v30[11];
      goto LABEL_42;
    }
    v12 = *v6;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1)
    {
      if ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v6) > 0x80)
        goto LABEL_39;
      v12 = *v6;
    }
    if (sub_22E619D68(v5))
    {
LABEL_13:
      v13 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v12);
      if ((sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5, 1, 0) & 1) == 0 && v13)
      {
        v31 = 0;
        v32 = 0;
        if (!sub_22E699750((_QWORD *)a1, v5, &v32, &v31)
          || v10 != -1 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 56) == 5)
        {
          if (v13 <= 0x80)
          {
            v14 = *(_QWORD *)(a1 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v14 + 24) + 288) & 0x40) != 0)
            {
              sub_22E6A7AEC((uint64_t)v30, v5, *(_QWORD *)(v14 + 8), **(llvm::Type ***)(v14 + 16));
              goto LABEL_41;
            }
            if (v13 > 0x40
              || (DataLayout = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(v14 + 16)),
                  v14 = *(_QWORD *)(a1 + 8),
                  *DataLayout))
            {
              sub_22EF5CDF0(*(_QWORD *)(v14 + 8), *v6);
              if ((v16 & 0xFFFFFF80) != 0 || ((v13 + 63) & 0xFFFFFFFFFFFFFFC0) != 0x80)
              {
                v18 = llvm::IntegerType::get();
              }
              else
              {
                Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), (llvm::LLVMContext *)0x80);
                v18 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)2);
              }
              v30[24] = 0;
              *(_OWORD *)v30 = (unint64_t)v18;
              *(_QWORD *)&v30[16] = 0;
            }
            else
            {
              v30[24] = 0;
              *(_QWORD *)&v30[16] = 0;
              *(_OWORD *)v30 = (unint64_t)llvm::IntegerType::get();
            }
            goto LABEL_56;
          }
LABEL_39:
          v22 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
          *(_OWORD *)v30 = 0uLL;
          v30[24] = 2;
          *(_QWORD *)&v30[16] = v22;
          v23 = 8;
LABEL_40:
          *(_WORD *)&v30[25] = v23;
          goto LABEL_41;
        }
        *(_OWORD *)v30 = 0uLL;
        v30[24] = 0;
LABEL_53:
        *(_QWORD *)&v30[16] = 0;
LABEL_56:
        v23 = 128;
        goto LABEL_40;
      }
LABEL_25:
      memset(v30, 0, 24);
      v30[24] = 4;
      *(_WORD *)&v30[25] = 0;
      goto LABEL_41;
    }
    if (v12)
      v19 = *(_BYTE *)(v12 + 16) == 31;
    else
      v19 = 0;
    if (!v19)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
        goto LABEL_31;
      v28 = sub_22F10CF48(v12);
      if (!v28)
      {
        v12 = *v6;
        goto LABEL_31;
      }
      v12 = v28;
    }
    v29 = sub_22F28C8B4(v12);
    v12 = *v6;
    if (v29)
      goto LABEL_13;
LABEL_31:
    v20 = *(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20 && *(_BYTE *)(v20 + 16) == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v20 + 24));
      v5 = sub_22E496830(v21);
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
      v12 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    }
    if ((v12 && *(_BYTE *)(v12 + 16) == 9
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
       && (v12 = sub_22F10CF48(v12)) != 0)
      && (*(_DWORD *)(v12 + 32) & 0x1FFFFFEu) >= 0x101)
    {
      goto LABEL_39;
    }
    if (sub_22F2A3AE4(a1, v5) && *(_DWORD *)(a1 + 20) == 1)
    {
      v27 = sub_22F110B20(*v6);
      v30[24] = 1;
      if (!v27)
      {
        *(_WORD *)&v30[25] = 0;
        memset(v30, 0, 24);
        goto LABEL_41;
      }
      memset(v30, 0, 24);
      v23 = 256;
      goto LABEL_40;
    }
    *(_DWORD *)&v30[23] = 0;
    *(_OWORD *)v30 = 0uLL;
    goto LABEL_53;
  }
LABEL_42:
  v24 = *(_DWORD *)(a2 + 36);
  if (v24)
  {
    v25 = a2 + 80;
    v26 = a2 + 80 + 40 * v24;
    do
    {
      sub_22E6A73C0((uint64_t)v30, a1, *(_QWORD *)v25, *(_DWORD *)(a2 + 16) != -1, *(unsigned __int8 *)(a2 + 8));
      *(_OWORD *)(v25 + 8) = *(_OWORD *)v30;
      result = *(double *)&v30[11];
      *(_OWORD *)(v25 + 19) = *(_OWORD *)&v30[11];
      v25 += 40;
    }
    while (v25 != v26);
  }
  return result;
}

void sub_22E6A5E94(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::GetElementPtrInst *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  llvm::Type *v48;
  llvm::ArrayType *v49;
  llvm::Type *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  _BYTE *DataLayout;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  unsigned int v66;
  llvm::Type **v67;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::Type **v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t *v92;
  BOOL v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  int64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  _QWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _OWORD v127[3];
  _OWORD v128[2];
  __int128 v129;
  _OWORD v130[3];
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  _QWORD v139[3];
  int v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  __int128 v147;
  _OWORD v148[2];
  __int128 v149;
  _OWORD v150[2];
  __int128 v151;
  _OWORD v152[3];
  _OWORD v153[3];
  _QWORD v154[3];
  int v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  llvm::Type *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192[3];
  unsigned __int8 v193;

  if (*(_BYTE *)(sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4) + 8) == 19)
  {
    v12 = llvm::report_fatal_error((llvm *)"Passing SVE types to variadic functions is currently not supported", (const char *)1);
    goto LABEL_99;
  }
  v10 = *((_DWORD *)a1 + 5);
  if (v10 != 1)
  {
    if (v10 == 2)
    {
      v11 = a3[1];
      v127[0] = *a3;
      v127[1] = v11;
      v127[2] = a3[2];
      (*(void (**)(_QWORD *, uint64_t, _OWORD *, unint64_t))(*a1 + 56))(a1, a2, v127, a4);
      return;
    }
    v121 = *a3;
    v122 = a3[1];
    v123 = a3[2];
    sub_22E6A73C0((uint64_t)v192, (uint64_t)a1, a4, 1, *(unsigned __int8 *)(*(_QWORD *)(a2 + 1608) + 8));
    v20 = v193;
    v119 = v193;
    v21 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
    if (v20 == 2)
    {
      v21 = llvm::PointerType::get();
    }
    else if (v192[0])
    {
      v21 = v192[0];
    }
    v22 = *(unsigned __int8 *)(v21 + 8);
    if (v21 && v22 == 17)
      v22 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 24) + 8);
    v23 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v114 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v120 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v189 = "vaarg.end";
    LOWORD(v191) = 259;
    v113 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v92 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
    sub_22EF5CCD0(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v189);
    v108 = v189;
    v115 = sub_22F3688D8(*(_QWORD *)(a1[1] + 8), a4);
    if (v22 < 7 || (v22 & 0xFE) == 0x12)
    {
      v186 = v121;
      v187 = v122;
      v188 = v123;
      *(_QWORD *)&v183 = "vr_offs_p";
      LOWORD(v185) = 259;
      sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v186, 4, (uint64_t)&v183, (uint64_t)&v189);
      v103 = *((_QWORD *)&v189 + 1);
      v105 = v189;
      v102 = v190;
      v98 = HIDWORD(v190);
      v100 = DWORD2(v190);
      v96 = *((_QWORD *)&v191 + 1);
      v97 = v191;
      v24 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v189, "vr_offs");
      v110 = 2;
      v93 = 1;
      v117 = 16;
    }
    else
    {
      v186 = v121;
      v187 = v122;
      v188 = v123;
      *(_QWORD *)&v183 = "gr_offs_p";
      LOWORD(v185) = 259;
      sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v186, 3, (uint64_t)&v183, (uint64_t)&v189);
      v103 = *((_QWORD *)&v189 + 1);
      v105 = v189;
      v102 = v190;
      v98 = HIDWORD(v190);
      v100 = DWORD2(v190);
      v96 = *((_QWORD *)&v191 + 1);
      v97 = v191;
      v93 = v20 == 2;
      v24 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v189, "gr_offs");
      v117 = 8;
      v110 = 1;
    }
    v25 = (uint64_t *)(a2 + 272);
    v26 = llvm::ConstantInt::get();
    LOWORD(v185) = 257;
    v27 = v24;
    v28 = sub_22E3C18F4(a2 + 272, 39, v24, v26, (uint64_t)&v183);
    v29 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v29, v120, v23, v28, 0);
    LOWORD(v185) = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v29, (uint64_t)&v183);
    sub_22E5ED9B4((_QWORD *)a2, v23, 0);
    if (!v93)
    {
      if (v115 >= 9)
      {
        v30 = llvm::ConstantInt::get();
        *(_QWORD *)&v180 = "align_regoffs";
        LOWORD(v182) = 259;
        v31 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v27, v30, 0, 0);
        if (!v31)
        {
          LOWORD(v185) = 257;
          v32 = llvm::BinaryOperator::Create();
          v31 = sub_22E3C12C8((uint64_t *)(a2 + 272), v32, (uint64_t)&v180);
        }
        v33 = llvm::ConstantInt::get();
        *(_QWORD *)&v183 = "aligned_regoffs";
        LOWORD(v185) = 259;
        v27 = (uint64_t *)sub_22E3E49C4(a2 + 272, v31, v33, (uint64_t)&v183);
      }
      v117 = 8;
    }
    v34 = llvm::ConstantInt::get();
    *(_QWORD *)&v180 = "new_reg_offs";
    LOWORD(v182) = 259;
    v35 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344)
                                                                                               + 16))(*(_QWORD *)(a2 + 344), v27, v34, 0, 0);
    if (!v35)
    {
      LOWORD(v185) = 257;
      v36 = llvm::BinaryOperator::Create();
      v35 = (llvm::Type **)sub_22E3C12C8((uint64_t *)(a2 + 272), v36, (uint64_t)&v180);
    }
    *(_QWORD *)&v183 = v105;
    *((_QWORD *)&v183 + 1) = v103;
    *(_QWORD *)&v184 = v102;
    *((_QWORD *)&v184 + 1) = __PAIR64__(v98, v100);
    *(_QWORD *)&v185 = v97;
    *((_QWORD *)&v185 + 1) = v96;
    sub_22E3BEDDC(a2 + 272, v35, (uint64_t)&v183);
    v37 = llvm::ConstantInt::get();
    *(_QWORD *)&v180 = "inreg";
    LOWORD(v182) = 259;
    v38 = sub_22E3C18F4(a2 + 272, 41, (uint64_t *)v35, v37, (uint64_t)&v180);
    v39 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v39, v114, v120, v38, 0);
    LOWORD(v182) = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v39, (uint64_t)&v180);
    sub_22E5ED9B4((_QWORD *)a2, v114, 0);
    v177 = v121;
    v178 = v122;
    v179 = v123;
    *(_QWORD *)&v174 = "reg_top_p";
    LOWORD(v176) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v177, v110, (uint64_t)&v174, (uint64_t)&v180);
    v174 = v180;
    v175 = v181;
    v176 = v182;
    v40 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v174, "reg_top");
    v41 = *(_QWORD *)(a2 + 8);
    LOWORD(v171) = 257;
    v42 = sub_22E3E5044((uint64_t *)(a2 + 272), v41, v40, v27, (uint64_t)&v169);
    v111 = *(_QWORD *)(a2 + 8);
    v43 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a4, 0);
    v44 = v43;
    v45 = v119;
    if (v119 == 2)
      v44 = llvm::PointerType::get();
    v95 = v43;
    v173 = 0;
    v172 = 0;
    v46 = sub_22E699750(a1, a4, &v173, (unint64_t *)&v172);
    v47 = v46;
    v101 = v44;
    if (v46)
    {
      v48 = v172;
      if ((unint64_t)v172 >= 2)
      {
        v94 = (uint64_t *)(a2 + 272);
        sub_22EF5CCD0(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(v173 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v148);
        v49 = (llvm::ArrayType *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)(v173 & 0xFFFFFFFFFFFFFFF0));
        v50 = (llvm::Type *)llvm::ArrayType::get(v49, v48);
        if (v115 <= *((uint64_t *)&v148[0] + 1))
          v51 = *((_QWORD *)&v148[0] + 1);
        else
          v51 = v115;
        *(_QWORD *)&v169 = "tmp";
        LOWORD(v171) = 259;
        v52 = sub_22E4D83CC(a2, v50, v51, (uint64_t)&v169, 0, 0);
        v54 = 0;
        if (v52 <= 7)
          v55 = 0;
        else
          v55 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (v52 <= 7)
          v56 = 0;
        else
          v56 = v53 & 0xFFFFFFFFFFFFFFF8;
        if (v52 >= 8)
          v54 = 1 << (v53 & 7 | (8 * (v52 & 7)));
        v106 = v54;
        if (*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200))
          && *(uint64_t *)&v148[0] <= 15)
        {
          v57 = 16 - LODWORD(v148[0]);
        }
        else
        {
          v57 = 0;
        }
        v99 = (unint64_t)v42;
        v104 = v55;
        v65 = 0;
        v66 = 1;
        v25 = (uint64_t *)(a2 + 272);
        do
        {
          v163 = v99;
          v164 = v111;
          v165 = v117;
          v166 = 0;
          v167 = 0;
          v168 = 0;
          LOWORD(v162) = 257;
          sub_22F24D74C(v94, (uint64_t)&v163, v57, (uint64_t)&v160, (uint64_t)&v169);
          v158[0] = v169;
          v158[1] = v170;
          v159 = v171;
          LOWORD(v151) = 257;
          sub_22E3BEE6C(v94, v158, (uint64_t)v49, (uint64_t)v150, (uint64_t)&v160);
          v169 = v160;
          v170 = v161;
          v171 = v162;
          v154[0] = v104;
          v154[1] = v56;
          v154[2] = v106;
          v155 = 0;
          v156 = 0;
          v157 = 0;
          LOWORD(v151) = 257;
          sub_22E486A58(v94, (uint64_t)v154, v65, (uint64_t)v150, (uint64_t)&v160);
          v153[0] = v169;
          v153[1] = v170;
          v153[2] = v171;
          LOWORD(v151) = 257;
          v67 = (llvm::Type **)sub_22E3C2A7C(v94, (uint64_t)v153, (uint64_t)v150);
          v152[0] = v160;
          v152[1] = v161;
          v152[2] = v162;
          sub_22E3BEDDC((uint64_t)v94, v67, (uint64_t)v152);
          v65 = v66;
          v57 += 16;
        }
        while ((unint64_t)v48 > v66++);
        *(_QWORD *)&v160 = v104;
        v44 = v101;
        *((_QWORD *)&v160 + 1) = v56;
        *(_QWORD *)&v161 = v106;
        DWORD2(v161) = 0;
        v162 = 0uLL;
        LOWORD(v151) = 257;
        sub_22E3BEE6C(v94, &v160, v101, (uint64_t)v150, (uint64_t)&v169);
        v118 = v169;
        v69 = *((_QWORD *)&v170 + 1);
        v112 = v170;
        v107 = v171;
        v45 = v119;
        v61 = v115;
        goto LABEL_69;
      }
    }
    DataLayout = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
    v59 = 0;
    v60 = v111;
    if (!*DataLayout)
    {
      v64 = 0uLL;
      v61 = v115;
LABEL_67:
      v63 = v117;
      goto LABEL_68;
    }
    v61 = v115;
    if (v119 == 2)
      goto LABEL_66;
    if ((v47 & 1) != 0)
    {
      v62 = v108;
      v63 = v117;
      goto LABEL_58;
    }
    v70 = sub_22E619D68(a4);
    v59 = 0;
    if (v70)
    {
LABEL_66:
      v64 = 0uLL;
      goto LABEL_67;
    }
    v91 = *v92;
    if (*v92 && *(_BYTE *)(v91 + 16) == 31)
      goto LABEL_106;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
    {
      LOBYTE(v91) = 0;
      v63 = v117;
LABEL_95:
      v59 = 0;
      if ((v91 & 1) != 0)
      {
LABEL_59:
        v64 = 0uLL;
LABEL_68:
        *(_QWORD *)&v160 = v42;
        *((_QWORD *)&v160 + 1) = v60;
        *(_QWORD *)&v161 = v63;
        *((_QWORD *)&v161 + 1) = v59;
        v162 = v64;
        LOWORD(v159) = 257;
        sub_22E3BEE6C((uint64_t *)(a2 + 272), &v160, v44, (uint64_t)v158, (uint64_t)&v169);
        v118 = v169;
        v69 = *((_QWORD *)&v170 + 1);
        v112 = v170;
        v107 = v171;
LABEL_69:
        sub_22E5EDA70(a2);
        sub_22E5ED9B4((_QWORD *)a2, v120, 0);
        v150[0] = v121;
        v150[1] = v122;
        v151 = v123;
        *(_QWORD *)&v148[0] = "stack_p";
        LOWORD(v149) = 259;
        sub_22E3C408C(v25, (uint64_t)v150, 0, (uint64_t)v148, (uint64_t)&v169);
        v148[0] = v169;
        v148[1] = v170;
        v149 = v171;
        v71 = (uint64_t *)sub_22E3C43AC(v25, (uint64_t)v148, "stack");
        if (v45 != 2 && v61 >= 9)
        {
          v72 = *(_QWORD *)(a2 + 32);
          LOWORD(v147) = 257;
          v73 = sub_22E3C1740(v25, 47, (uint64_t)v71, v72, (uint64_t)v146);
          v74 = llvm::ConstantInt::get();
          *(_QWORD *)&v143 = "align_stack";
          LOWORD(v145) = 259;
          v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v73, v74, 0, 0);
          if (!v75)
          {
            LOWORD(v147) = 257;
            v76 = llvm::BinaryOperator::Create();
            v75 = sub_22E3C12C8(v25, v76, (uint64_t)&v143);
          }
          v77 = llvm::ConstantInt::get();
          *(_QWORD *)&v146[0] = "align_stack";
          LOWORD(v147) = 259;
          v78 = sub_22E3E49C4((uint64_t)v25, v75, v77, (uint64_t)v146);
          v79 = *(_QWORD *)(a2 + 96);
          LOWORD(v147) = 257;
          v71 = (uint64_t *)sub_22E3C1740(v25, 48, v78, v79, (uint64_t)v146);
          v45 = v119;
          v44 = v101;
        }
        v80 = *(_QWORD *)(a2 + 8);
        if (v61 <= 8)
          v81 = 8;
        else
          v81 = v61;
        v82 = (uint64_t *)llvm::ConstantInt::get();
        v83 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)&v146[0] = "new_stack";
        LOWORD(v147) = 259;
        v84 = (llvm::Type **)sub_22E3E5044(v25, v83, v71, v82, (uint64_t)v146);
        v146[0] = v169;
        v146[1] = v170;
        v147 = v171;
        sub_22E3BEDDC((uint64_t)v25, v84, (uint64_t)v146);
        if (!*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200)))
        {
          v86 = 0;
          goto LABEL_87;
        }
        v85 = sub_22E619D68(a4);
        v86 = 0;
        if (v85)
        {
LABEL_87:
          v88 = 0uLL;
LABEL_88:
          *(_QWORD *)&v135 = v71;
          *((_QWORD *)&v135 + 1) = v80;
          v136 = v81;
          v137 = v86;
          v138 = v88;
          LOWORD(v134) = 257;
          sub_22E3BEE6C(v25, &v135, v44, (uint64_t)&v131, (uint64_t)&v143);
          v89 = v144;
          v109 = v143;
          v116 = v145;
          sub_22E5EDA70(a2);
          sub_22E5ED9B4((_QWORD *)a2, v113, 0);
          v132 = v112;
          v133 = v69;
          v134 = v107;
          v130[0] = v109;
          v130[1] = v89;
          v130[2] = v116;
          v131 = v118;
          *(_QWORD *)&v128[0] = "vaargs.addr";
          LOWORD(v129) = 259;
          sub_22E6A7D00((uint64_t)&v143, (_QWORD *)a2, (uint64_t)&v131, (uint64_t)v114, (uint64_t)v130, (uint64_t)v120, (uint64_t)v128);
          if (v45 == 2)
          {
            v128[0] = v143;
            v128[1] = v144;
            v129 = v145;
            *(_QWORD *)a5 = sub_22E3C43AC(v25, (uint64_t)v128, "vaarg.addr");
            *(_QWORD *)(a5 + 8) = v95;
            *(_QWORD *)(a5 + 16) = v61;
            *(_DWORD *)(a5 + 24) = 0;
            *(_QWORD *)(a5 + 32) = 0;
            *(_QWORD *)(a5 + 40) = 0;
          }
          else
          {
            v90 = v144;
            *(_OWORD *)a5 = v143;
            *(_OWORD *)(a5 + 16) = v90;
            *(_OWORD *)(a5 + 32) = v145;
          }
          return;
        }
        v87 = *v92;
        if (*v92 && *(_BYTE *)(v87 + 16) == 31)
          goto LABEL_103;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
        {
          LOBYTE(v87) = 0;
LABEL_83:
          v86 = 0;
          if ((v87 & 1) == 0 && v108 <= 7)
          {
            v139[0] = v71;
            v139[1] = v80;
            v139[2] = v81;
            v140 = 0;
            v142 = 0;
            v141 = 0;
            LOWORD(v138) = 257;
            sub_22F24D74C(v25, (uint64_t)v139, 8 - v108, (uint64_t)&v135, (uint64_t)&v143);
            v80 = *((_QWORD *)&v143 + 1);
            v71 = (uint64_t *)v143;
            v86 = *((_QWORD *)&v144 + 1);
            v81 = v144;
            v88 = v145;
            goto LABEL_88;
          }
          goto LABEL_87;
        }
        v87 = sub_22F10CF48(v87);
        if (v87)
LABEL_103:
          LOBYTE(v87) = sub_22F28C8B4(v87);
        v45 = v119;
        v61 = v115;
        goto LABEL_83;
      }
      v62 = v108;
LABEL_58:
      if (v63 > v62)
      {
        v163 = (unint64_t)v42;
        v164 = v60;
        v165 = v63;
        v166 = 0;
        v168 = 0;
        v167 = 0;
        LOWORD(v162) = 257;
        sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)&v163, v63 - v62, (uint64_t)&v160, (uint64_t)&v169);
        v60 = *((_QWORD *)&v169 + 1);
        v42 = (llvm::GetElementPtrInst *)v169;
        v59 = *((_QWORD *)&v170 + 1);
        v63 = v170;
        v64 = v171;
        goto LABEL_68;
      }
      goto LABEL_59;
    }
    v91 = sub_22F10CF48(v91);
    if (v91)
LABEL_106:
      LOBYTE(v91) = sub_22F28C8B4(v91);
    v45 = v119;
    v61 = v115;
    v63 = v117;
    v60 = v111;
    goto LABEL_95;
  }
  v124 = *a3;
  v125 = a3[1];
  v126 = a3[2];
  if (!sub_22E619D68(a4))
  {
    v12 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v12 && *(_BYTE *)(v12 + 16) == 31)
    {
LABEL_100:
      if (sub_22F28C8B4(v12))
        goto LABEL_10;
LABEL_9:
      if ((sub_22E6A7B7C((uint64_t)a1, a4) & 1) == 0)
      {
        v189 = v124;
        v190 = v125;
        v191 = v126;
        sub_22E69B8E0(a5, (_QWORD *)a2, (uint64_t)&v189, a4, 0);
        return;
      }
      goto LABEL_10;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_9;
LABEL_99:
    v12 = sub_22F10CF48(v12);
    if (!v12)
      goto LABEL_9;
    goto LABEL_100;
  }
LABEL_10:
  v13 = a1[1];
  v14 = (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v13 + 24) + *(_QWORD *)(**(_QWORD **)(v13 + 24) - 24)) >> 3;
  if (sub_22E699BD0(*(_QWORD *)(v13 + 8), a4, 1, 0))
  {
    v186 = v124;
    v187 = v125;
    v188 = v126;
    v15 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v186, "ap.cur");
    v16 = sub_22E6A7CA4(a2);
    *(_QWORD *)a5 = v15;
    *(_QWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 16) = v14;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    v17 = *(_OWORD *)(a5 + 16);
    v183 = *(_OWORD *)a5;
    v184 = v17;
    v185 = *(_OWORD *)(a5 + 32);
    v18 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a4, 0);
    LOWORD(v179) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v183, v18, (uint64_t)&v177, a5);
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(a1[1] + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v177);
    if ((uint64_t)v177 < 17)
    {
      v19 = 0;
    }
    else
    {
      *(_QWORD *)&v169 = 0;
      v163 = 0;
      v19 = sub_22E699750(a1, a4, (uint64_t *)&v169, &v163) ^ 1;
    }
    v180 = v124;
    v181 = v125;
    v182 = v126;
    v174 = v177;
    *(_QWORD *)&v175 = v178;
    sub_22E6A094C(a5, a2, &v180, a4, v19, (uint64_t *)&v174, v14, 1);
  }
}

double sub_22E6A70A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  uint64_t v16[3];
  __int128 v17[3];

  v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v11 = (sub_22E619D68(a4)
      || ((v12 = *v10) != 0 ? (v13 = *(_BYTE *)(*v10 + 16) == 31) : (v13 = 0),
          (v13
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
        && (v12 = sub_22F10CF48(v12)) != 0)
       && sub_22F28C8B4(v12)))
     && (unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v10) > 0x80;
  v14 = a3[1];
  v17[0] = *a3;
  v17[1] = v14;
  v17[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v10, (uint64_t)v16);
  return sub_22E6A094C(a5, a2, v17, a4, v11, v16, 8, 0);
}

BOOL sub_22E6A71A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_DWORD *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (v5)
  {
    if (((*(_DWORD *)(v4 + 16) >> 19) & 0x1FEu) - 210 < 8)
      return 1;
  }
  else
  {
    v6 = sub_22E3E4B64(v3);
    if (v6)
      return ((sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6) - 64) & 0xFFFFFFBF) == 0;
  }
  return 0;
}

BOOL sub_22E6A722C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 < 5;
}

BOOL sub_22E6A7238(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 8 * a3;
  do
  {
    v6 = *a2++;
    v7 = *(_DWORD *)(v6 + 8);
    v8 = v3 + (((*(_DWORD *)(v6 + 8) >> 8) + 63) >> 6);
    if (v7 == 15)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v7 == 15)
      ++v3;
    if (v7 == 13)
      v3 = v8;
    else
      v4 = v9;
    v5 -= 8;
  }
  while (v5);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6A7298(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 a5)
{
  uint8x8_t v5;
  uint64_t result;

  a1.i32[0] = a5;
  v5 = (uint8x8_t)vcnt_s8(a1);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
    return 0;
  if (a3 == 8)
    return 1;
  result = 0;
  if (a3 == 16 && a5 != 1)
    return 1;
  return result;
}

uint64_t sub_22E6A72DC()
{
  return 1;
}

uint64_t sub_22E6A72E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;

  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v6
    || *(_BYTE *)(v6 + 16) != 45
    || (*(_DWORD *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 28) & 0x7Fu) - 35 < 3
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 76) & 0x18) == 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2);
  }
  v8 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), v5);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 64) = v8;
  *(_DWORD *)(a2 + 68) = 0;
  *(_BYTE *)(a2 + 72) = 2;
  *(_WORD *)(a2 + 73) = 8;
  return 1;
}

uint64_t sub_22E6A73C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  unint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  llvm::LLVMContext *v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int v41;
  llvm::ArrayType *v42;
  __int16 v43;
  llvm::Type *v44;
  uint64_t v45;

  v9 = sub_22E69BD58(a3);
  if (sub_22E6A7B7C(a2, v9))
    return sub_22E6A7888(a1, (llvm::LLVMContext *)a2, v9);
  v11 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22E619D68(v9))
  {
    v18 = *v11;
    v19 = *v11 && *(_BYTE *)(*v11 + 16) == 31;
    if (!v19
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
       || (v18 = sub_22F10CF48(v18)) == 0)
      || !sub_22F28C8B4(v18))
    {
      v20 = *v11;
      v21 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v21 && *(_BYTE *)(v21 + 16) == 44)
      {
        v22 = sub_22F114198(*(_QWORD *)(v21 + 24));
        v9 = sub_22E496830(v22);
        v11 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
        v20 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      }
      if ((v20 && *(_BYTE *)(v20 + 16) == 9
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
         && (v20 = sub_22F10CF48(v20)) != 0)
        && (*(_DWORD *)(v20 + 32) & 0x1FFFFFEu) >= 0x101)
      {
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v9);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 2;
        v23 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_DWORD *)(a1 + 16) = result;
        v17 = v23 | 8;
        goto LABEL_66;
      }
      result = sub_22F2A3AE4(a2, v9);
      if ((_DWORD)result && *(_DWORD *)(a2 + 20) == 1)
      {
        result = sub_22F110B20(*v11);
        *(_BYTE *)(a1 + 24) = 1;
        v17 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_QWORD *)(a1 + 16) = 0;
        if ((_DWORD)result)
          v17 |= 0x100u;
      }
      else
      {
        *(_BYTE *)(a1 + 24) = 0;
        v17 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_QWORD *)a1 = 0;
LABEL_65:
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_66;
    }
  }
  v12 = *v11;
  v13 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v13 || *(_BYTE *)(v13 + 16) != 45)
  {
LABEL_23:
    v24 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v12);
    result = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v9, 1, 0);
    if ((result & 1) != 0 || !v24)
    {
      v29 = *(_QWORD *)(a2 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 2000) + 1) & 1) == 0
        || *(_DWORD *)(a2 + 20) == 1
        || (!v24 ? (v30 = result) : (v30 = 0), v30 == 1))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 24) = 4;
        v17 = *(_WORD *)(a1 + 25) & 0xFE00;
        goto LABEL_66;
      }
      result = llvm::Type::getInt8Ty(**(llvm::Type ***)(v29 + 16), v25);
      goto LABEL_64;
    }
    v44 = 0;
    v45 = 0;
    v26 = *(_DWORD *)(a2 + 20) == 2 || a5 == 79;
    if (v26 && (a4 & 1) != 0 || !sub_22E699750((_QWORD *)a2, v9, &v45, (unint64_t *)&v44))
    {
      if (v24 > 0x80)
      {
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v9);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 2;
        v17 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_DWORD *)(a1 + 16) = result;
        goto LABEL_66;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v31 + 24) + 288) & 0x40) != 0)
        return sub_22E6A7AEC(a1, v9, *(_QWORD *)(v31 + 8), **(llvm::Type ***)(v31 + 16));
      v32 = *(_QWORD *)(v31 + 8);
      v33 = *v11;
      if (*(_DWORD *)(a2 + 20))
      {
        sub_22EF5CDF0(v32, v33);
        v35 = *(_QWORD *)(a2 + 8);
        if (v34 <= *(unsigned __int8 *)(*(_QWORD *)(v35 + 24) + *(_QWORD *)(**(_QWORD **)(v35 + 24) - 24)))
          v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 + 24) + *(_QWORD *)(**(_QWORD **)(v35 + 24) - 24));
        else
          v36 = v34;
      }
      else
      {
        if (sub_22EF5CFF4(v32, v33) >= 0x80)
          v36 = 128;
        else
          v36 = 64;
        v35 = *(_QWORD *)(a2 + 8);
      }
      result = llvm::Type::getIntNTy(**(llvm::Type ***)(v35 + 16), (llvm::LLVMContext *)v36);
      if ((v24 + v36 - 1) / v36 * v36 == v36)
        goto LABEL_64;
      v28 = (v24 + v36 - 1) / v36;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 20))
      {
        v37 = sub_22F3688D8(*(_QWORD *)(v27 + 8), v9);
        v38 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
        sub_22EF5CDF0(v38, v45);
        if (v37 > (v39
                                / (unint64_t)sub_22EF5CDF0(v38, *(_QWORD *)(*(_QWORD *)(v38 + 16408) & 0xFFFFFFFFFFFFFFF0)))&& v37 > 0xF)
        {
          v41 = 16;
        }
        else
        {
          v41 = 0;
        }
        v42 = (llvm::ArrayType *)sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)(v45 & 0xFFFFFFFFFFFFFFF0));
        result = llvm::ArrayType::get(v42, v44);
        *(_BYTE *)(a1 + 24) = 0;
        v43 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_QWORD *)a1 = result;
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 20) = v41;
        v17 = v43 | 0x80;
        goto LABEL_66;
      }
      result = sub_22E66CB04((llvm::Type ***)v27, (llvm::LLVMContext *)(v45 & 0xFFFFFFFFFFFFFFF0));
      v28 = (unint64_t)v44;
    }
    result = llvm::ArrayType::get((llvm::ArrayType *)result, (llvm::Type *)v28);
LABEL_64:
    *(_BYTE *)(a1 + 24) = 0;
    v17 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = result;
    goto LABEL_65;
  }
  v14 = sub_22E69BE08(v13, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32));
  if (!v14)
  {
    v12 = *v11;
    goto LABEL_23;
  }
  v15 = v14 == 1;
  result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v9);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 2;
  v16 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_DWORD *)(a1 + 16) = result;
  v17 = v16 | (8 * v15);
LABEL_66:
  *(_WORD *)(a1 + 25) = v17;
  return result;
}

uint64_t sub_22E6A7888(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  unint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  __int16 v16;

  v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  result = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(result + 16);
  if (result)
    v9 = *(_DWORD *)(result + 16) - 57 > 0xFFFFFFFD;
  else
    v9 = 0;
  if (!v9)
  {
    result = sub_22F10CF48(result);
    v8 = *(_DWORD *)(result + 16);
  }
  v10 = (v8 >> 19) & 0xF;
  if (v10 == 7)
  {
    v11 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    switch(v11)
    {
      case 168:
      case 179:
        llvm::Type::getInt8Ty(**(llvm::Type ***)(*((_QWORD *)a2 + 1) + 16), a2);
        goto LABEL_28;
      case 169:
      case 170:
      case 171:
      case 172:
      case 176:
      case 177:
      case 178:
      case 180:
        __break(1u);
        return result;
      case 173:
      case 181:
        llvm::Type::getInt16Ty(**(llvm::Type ***)(*((_QWORD *)a2 + 1) + 16), a2);
        goto LABEL_28;
      case 174:
      case 182:
        llvm::Type::getInt32Ty(**(llvm::Type ***)(*((_QWORD *)a2 + 1) + 16), a2);
        goto LABEL_28;
      case 175:
      case 183:
        llvm::Type::getInt64Ty(**(llvm::Type ***)(*((_QWORD *)a2 + 1) + 16), a2);
        goto LABEL_28;
      default:
        __asm { BR              X10 }
        return result;
    }
  }
  if (v10 == 8)
  {
    llvm::Type::getInt1Ty(**(llvm::Type ***)(*((_QWORD *)a2 + 1) + 16), a2);
LABEL_28:
    result = llvm::ScalableVectorType::get();
    goto LABEL_29;
  }
  v12 = sub_22EF5CDF0(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8), *v6);
  v14 = *((_QWORD *)a2 + 1);
  if (*(_DWORD *)(*(_QWORD *)(v14 + 24) + 72) == 11 && v12 <= 0x10)
  {
    result = llvm::Type::getInt16Ty(**(llvm::Type ***)(v14 + 16), v13);
LABEL_29:
    *(_BYTE *)(a1 + 24) = 0;
    v16 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = result;
    goto LABEL_30;
  }
  if (v12 <= 0x20)
  {
    result = llvm::Type::getInt32Ty(**(llvm::Type ***)(v14 + 16), v13);
    goto LABEL_29;
  }
  if (v12 == 128 || v12 == 64)
  {
    llvm::Type::getInt32Ty(**(llvm::Type ***)(v14 + 16), v13);
    result = llvm::FixedVectorType::get();
    goto LABEL_29;
  }
  result = sub_22EF5D130(*(_QWORD *)(v14 + 8), a3);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 2;
  v16 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_DWORD *)(a1 + 16) = result;
LABEL_30:
  *(_WORD *)(a1 + 25) = v16;
  return result;
}

uint64_t sub_22E6A7AEC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  unint64_t v10;
  llvm::ArrayType *IntNTy;
  uint64_t result;
  __int16 v13;

  v5 = a3;
  v7 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22EF5CDF0(a3, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  sub_22EF5CDF0(v5, *v7);
  LODWORD(v5) = (_DWORD)v9;
  v10 = v9;
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(a4, v9);
  result = llvm::ArrayType::get(IntNTy, (llvm::Type *)((v8 + (unint64_t)v5 - 1) / v10));
  *(_BYTE *)(a1 + 24) = 0;
  v13 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 25) = v13;
  return result;
}

uint64_t sub_22E6A7B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v3 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v3)
    return 0;
  if (((*(_DWORD *)(v3 + 16) >> 19) & 0xFu) - 7 < 2)
    return 1;
  v4 = (int8x8_t)*(unsigned int *)(v3 + 20);
  v5 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v3);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.i32[0] != 1)
    return 1;
  v7 = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (*(char *)(v8 + 55) < 0)
  {
    sub_22E3BB2B4(__p, *(void **)(v8 + 32), *(_QWORD *)(v8 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v8 + 32);
    v13 = *(_QWORD *)(v8 + 48);
  }
  v14 = *(_OWORD *)(v8 + 56);
  v15 = *(_QWORD *)(v8 + 72);
  if ((_DWORD)v14 == 5 && HIDWORD(v15) == 5)
    v9 = v7 < 0x21;
  else
    v9 = v7 != 64 && (v7 != 128 || v4.i32[0] == 1);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  return v9;
}

uint64_t sub_22E6A7CA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v3 = sub_22EF6D84C(v2);
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
    v4 = sub_22EF6462C(v2, v3);
  v5 = sub_22F10ACF8(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
  return sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v5, 0);
}

uint64_t sub_22E6A7D00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  llvm::PHINode *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v14 = a2 + 34;
  v15 = llvm::PointerType::get();
  v16 = (llvm::PHINode *)sub_22E3C4B80(v14, v15, 2, a7);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v17 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v17 = *(_QWORD *)a3;
  sub_22E3C4C50(v16, v17, a4);
  if ((*(_BYTE *)(a5 + 24) & 3) != 0)
    v18 = sub_22F28ABCC((_OWORD *)a5, a2);
  else
    v18 = *(_QWORD *)a5;
  result = sub_22E3C4C50(v16, v18, a6);
  v20 = *(_QWORD *)(a5 + 16);
  v21 = *(_QWORD *)(a3 + 8);
  if (v20 >= *(_QWORD *)(a3 + 16))
    v20 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v20;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_22E6A7DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  BOOL v6;
  void *__p;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    v3 = *(_QWORD *)(a2 + 184);
    if (*(_QWORD *)(v3 + 56) == 4096)
    {
      if ((*(_WORD *)(v3 + 64) & 1) == 0)
        return;
LABEL_14:
      llvm::Function::addFnAttr();
      return;
    }
    v4 = *(_QWORD *)(v3 + 56);
    if (*(_QWORD *)(v3 + 56))
    {
      v5 = (char *)&v10;
      do
      {
        *--v5 = (v4 % 0xA) | 0x30;
        v6 = v4 > 9;
        v4 /= 0xAuLL;
      }
      while (v6);
    }
    else
    {
      v5 = &v9;
      v9 = 48;
    }
    sub_22E3B4274(&__p, v5, (char *)&v10, (char *)&v10 - v5);
    llvm::Function::addFnAttr();
    if (v8 < 0)
      operator delete(__p);
    if ((*(_WORD *)(*(_QWORD *)(a2 + 184) + 64) & 1) != 0)
      goto LABEL_14;
  }
}

std::string *sub_22E6A7F48(uint64_t a1, void *__s, size_t __n)
{
  _BYTE *v6;
  const std::string::value_type *v7;
  uint64_t v8;

  if (!__n || (v6 = memchr(__s, 32, __n)) == 0)
  {
    v8 = 0;
    *(_BYTE *)(a1 + 23) = 0;
LABEL_7:
    v7 = "";
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6 - (_BYTE *)__s != -1;
  if (v6 - (_BYTE *)__s == -1)
  {
    v8 = 0;
    goto LABEL_7;
  }
  *(_BYTE *)a1 = 34;
  v7 = "\"";
  v8 = 1;
LABEL_8:
  *(_BYTE *)(a1 + v8) = 0;
  std::string::append((std::string *)a1, (const std::string::value_type *)__s, __n);
  if ((llvm::StringRef::endswith_insensitive() & 1) == 0 && (llvm::StringRef::endswith_insensitive() & 1) == 0)
    std::string::append((std::string *)a1, ".lib");
  return std::string::append((std::string *)a1, v7);
}

_QWORD *sub_22E6A803C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A807C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A80CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22E6A58A8(a1, a2, a3, a4);
  sub_22E6A7DFC(a3, a4);
  if (a2
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5
    && ((*(unsigned __int16 *)(*(_QWORD *)(a4 + 152) + 148) | (*(unsigned __int8 *)(*(_QWORD *)(a4 + 152) + 150) << 16)) & 0x80000) != 0)
  {
    llvm::Function::addFnAttr();
  }
}

_QWORD *sub_22E6A8160(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A81A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A81F0(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Context;
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 0x7Eu) - 52 <= 5)
    {
      if ((v5 & 0x100) != 0)
      {
        sub_22EFC8E88(a2);
        v7 = *(uint64_t **)v6;
        v8 = *(unsigned int *)(v6 + 8);
        v9 = *(uint64_t **)v6;
        if ((_DWORD)v8)
        {
          v10 = 8 * v8;
          v9 = *(uint64_t **)v6;
          while (*(_WORD *)(*v9 + 32) != 353)
          {
            ++v9;
            v10 -= 8;
            if (!v10)
              goto LABEL_13;
          }
        }
        if (v9 != &v7[v8])
        {
          do
            v11 = *v7++;
          while (*(_WORD *)(v11 + 32) != 353);
          Context = llvm::Value::getContext(a3);
          v26 = v28;
          v27 = 0x800000000;
          llvm::AttrBuilder::addAttribute();
          llvm::Function::addFnAttrs(a3, (const llvm::AttrBuilder *)&Context);
          if (v26 != v28)
            free(v26);
        }
      }
LABEL_13:
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v13 = *(uint64_t **)v12;
        v14 = *(unsigned int *)(v12 + 8);
        v15 = *(uint64_t **)v12;
        if ((_DWORD)v14)
        {
          v16 = 8 * v14;
          v15 = *(uint64_t **)v12;
          while (*(_WORD *)(*v15 + 32) != 354)
          {
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_23;
          }
        }
        if (v15 != &v13[v14])
        {
          do
            v17 = *v13++;
          while (*(_WORD *)(v17 + 32) != 354);
          Context = llvm::Value::getContext(a3);
          v26 = v28;
          v27 = 0x800000000;
          llvm::AttrBuilder::addAttribute();
          llvm::Function::addFnAttrs(a3, (const llvm::AttrBuilder *)&Context);
          if (v26 != v28)
            free(v26);
        }
      }
LABEL_23:
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v19 = *(uint64_t **)v18;
        v20 = *(unsigned int *)(v18 + 8);
        v21 = *(uint64_t **)v18;
        if ((_DWORD)v20)
        {
          v22 = 8 * v20;
          v21 = *(uint64_t **)v18;
          while (*(_WORD *)(*v21 + 32) != 352)
          {
            ++v21;
            v22 -= 8;
            if (!v22)
              goto LABEL_33;
          }
        }
        if (v21 != &v19[v20])
        {
          do
            v23 = *v19++;
          while (*(_WORD *)(v23 + 32) != 352);
          Context = llvm::Value::getContext(a3);
          v26 = v28;
          v27 = 0x800000000;
          llvm::AttrBuilder::addAttribute();
          llvm::Function::addFnAttrs(a3, (const llvm::AttrBuilder *)&Context);
          if (v26 != v28)
            free(v26);
        }
      }
    }
LABEL_33:
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
    {
      v24 = *(_QWORD *)(a2 + 80);
      if ((v24 & 0x8000000) != 0)
      {
        if ((v24 & 0x20000000) != 0)
          return;
      }
      else if (*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000)
      {
        return;
      }
      if ((v24 & 0x300000) == 0)
        llvm::Function::addFnAttr();
    }
  }
}

void sub_22E6A84F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6A8504(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD v29[2];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = v5 & 0xFFFFFFFFFFFFFFF0;
    if (sub_22E619D68(v5)
      || ((v8 = *(_QWORD *)v6) != 0 ? (v9 = *(_BYTE *)(*(_QWORD *)v6 + 16) == 31) : (v9 = 0),
          (v9
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
        && (v8 = sub_22F10CF48(v8)) != 0)
       && sub_22F28C8B4(v8)))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v7 || *(_BYTE *)(v7 + 16) != 45 || !sub_22E69BE08(v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)))
      {
        if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5, 1, 0))
        {
          memset(v29, 0, 24);
          BYTE8(v29[1]) = 4;
          *(_WORD *)((char *)&v29[1] + 9) = 0;
LABEL_19:
          *(_OWORD *)(a2 + 48) = v29[0];
          result = *(double *)((char *)v29 + 11);
          *(_OWORD *)(a2 + 59) = *(_OWORD *)((char *)v29 + 11);
          goto LABEL_20;
        }
        v10 = sub_22E6A8A40(v5, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
        if (v10)
        {
          v11 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v10 & 0xFFFFFFFFFFFFFFF0));
          WORD4(v29[1]) = 0;
          BYTE10(v29[1]) = 0;
          *(_QWORD *)&v29[1] = 0;
          v29[0] = (unint64_t)v11;
LABEL_18:
          *(_WORD *)((char *)&v29[1] + 9) = 128;
          goto LABEL_19;
        }
        if (*(_DWORD *)(a1 + 48) == 1)
        {
          memset(v29, 0, 27);
          goto LABEL_18;
        }
      }
    }
    sub_22E69BE7C((unint64_t)v29, a1 + 24, v5);
    goto LABEL_19;
  }
LABEL_20:
  v12 = *(_DWORD *)(a2 + 36);
  if (v12)
  {
    v13 = a2 + 80;
    v14 = a2 + 80 + 40 * v12;
    do
    {
      v15 = sub_22E69BD58(*(_QWORD *)v13);
      v16 = v15 & 0xFFFFFFFFFFFFFFF0;
      if (sub_22E619D68(v15)
        || ((v22 = *(_QWORD *)v16) != 0 ? (v23 = *(_BYTE *)(*(_QWORD *)v16 + 16) == 31) : (v23 = 0),
            (v23
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
          && (v22 = sub_22F10CF48(v22)) != 0)
         && sub_22F28C8B4(v22)))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v17)
        {
          if (*(_BYTE *)(v17 + 16) == 45)
          {
            v18 = sub_22E69BE08(v17, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
            if (v18)
            {
              v19 = v18 == 1;
              v20 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v15);
              v29[0] = 0uLL;
              BYTE8(v29[1]) = 2;
              *(_QWORD *)&v29[1] = v20;
              v21 = *(_WORD *)((_BYTE *)&v29[1] + 9) & 0xFE00 | (8 * v19);
              goto LABEL_38;
            }
          }
        }
        if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v15, 1, 0))
        {
          memset(v29, 0, 24);
          BYTE8(v29[1]) = 4;
          goto LABEL_29;
        }
        v24 = sub_22E6A8A40(v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
        if (v24)
        {
          v25 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v24 & 0xFFFFFFFFFFFFFFF0));
          BYTE8(v29[1]) = 0;
          v29[0] = (unint64_t)v25;
          v21 = *(_WORD *)((_BYTE *)&v29[1] + 9) & 0xFE00 | 0x80;
          *(_QWORD *)&v29[1] = 0;
          goto LABEL_38;
        }
        if (*(_DWORD *)(a1 + 48) == 1)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(v26 + 16) != 45)
            v26 = 0;
          v27 = sub_22F114198(*(_QWORD *)(v26 + 24));
          v28 = sub_22EFC3B90(v27);
          if (!v28)
            goto LABEL_49;
LABEL_45:
          if ((*(_BYTE *)(v28 + 68) & 1) == 0)
          {
            while (1)
            {
              v28 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v28)
                break;
              if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 49 <= 2)
                goto LABEL_45;
            }
LABEL_49:
            memset(v29, 0, 24);
            BYTE8(v29[1]) = 5;
LABEL_29:
            v21 = *(_WORD *)((_BYTE *)&v29[1] + 9) & 0xFE00;
LABEL_38:
            *(_WORD *)((char *)&v29[1] + 9) = v21;
            goto LABEL_39;
          }
        }
      }
      sub_22E69BAA8((uint64_t)v29, a1 + 24, v15);
LABEL_39:
      *(_OWORD *)(v13 + 8) = v29[0];
      result = *(double *)((char *)v29 + 11);
      *(_OWORD *)(v13 + 19) = *(_OWORD *)((char *)v29 + 11);
      v13 += 40;
    }
    while (v13 != v14);
  }
  return result;
}

double sub_22E6A88A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BOOL4 v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v15[3];
  __int128 v16[3];

  if (sub_22E619D68(a4)
    || ((v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)) != 0 ? (v12 = *(_BYTE *)(v11 + 16) == 31) : (v12 = 0),
        (v12
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
      && (v11 = sub_22F10CF48(v11)) != 0)
     && sub_22F28C8B4(v11)))
  {
    v10 = 0;
    if ((sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4, 1, 0) & 1) == 0)
      v10 = sub_22E6A8A40(a4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) == 0;
  }
  else
  {
    v10 = 0;
  }
  v13 = a3[1];
  v16[0] = *a3;
  v16[1] = v13;
  v16[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v15);
  return sub_22E6A094C(a5, a2, v16, a4, v10, v15, 4, 1);
}

BOOL sub_22E6A89C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6A8A38()
{
  return 0;
}

uint64_t sub_22E6A8A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = 0;
  v3 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *(_BYTE *)(v4 + 16) != 45)
    return v2;
  v6 = sub_22F114198(*(_QWORD *)(v4 + 24));
  if ((*(_BYTE *)(v6 + 74) & 0x80) != 0)
    return 0;
  v7 = v6;
  if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD || (v8 = sub_22E46A3A0(v6), v8 == v9))
  {
    v2 = 0;
LABEL_17:
    v14 = sub_22EFC3B90(v7);
    if (v14)
    {
      v15 = v14;
LABEL_19:
      v16 = *(_QWORD *)(v15 + 48);
      if ((sub_22E69B6D0(a2, v15, 1, 0) & 1) != 0)
        goto LABEL_34;
      if (v2)
        return 0;
      while (1)
      {
        v17 = sub_22EF5C728(a2, v16);
        if (!v17 || *(_BYTE *)(v17 + 16) != 2)
          break;
        v18 = (_QWORD *)(v17 + 40);
        if (*(_DWORD *)(v17 + 48) >= 0x41u)
          v18 = (_QWORD *)*v18;
        if (*v18 != 1)
          break;
        v16 = *(_QWORD *)(v17 + 32);
      }
      if (sub_22E619D68(v16)
        || ((v19 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v19 + 16) == 31
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v19 = sub_22F10CF48(v19)) != 0)
        && sub_22F28C8B4(v19))
      {
        v2 = sub_22E6A8A40(v16, a2);
        if (v2)
          goto LABEL_34;
        return v2;
      }
      v2 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
LABEL_34:
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v15)
          break;
        if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_19;
      }
    }
    if (!v2)
      return v2;
    v20 = sub_22EF5CDF0(a2, v2);
    if (v20 == sub_22EF5CDF0(a2, *v3))
      return v2;
    return 0;
  }
  v10 = v8;
  v11 = v9;
  v2 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
      v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
    if ((sub_22E699BD0(a2, v12 & 0xFFFFFFFFFFFFFFF0, 1, 0) & 1) == 0)
    {
      if (v2)
        return 0;
      v13 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
      v2 = sub_22E6A8A40(v13 & 0xFFFFFFFFFFFFFFF0, a2);
      if (!v2)
        return v2;
    }
    v10 += 24;
    if (v10 == v11)
      goto LABEL_17;
  }
}

_QWORD *sub_22E6A8C98(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  BOOL v22;
  unsigned int v24;

  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = &off_24FA6A310;
  *(_QWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 20) = a3;
  v8 = dword_22F45D840[a3];
  v9 = a2[3];
  v10 = *(_DWORD *)(v9 + 72);
  v11 = v10 > 0xE || ((1 << v10) & 0x4420) == 0;
  if (!v11 || *(_DWORD *)(v9 + 60) == 22)
  {
    v12 = 68;
  }
  else
  {
    v24 = v10 - 4;
    if (v24 > 9)
      v12 = 66;
    else
      v12 = dword_22F45D7A4[v24];
  }
  if (v8 != v12)
    *(_DWORD *)(v6 + 16) = v8;
  v13 = *(_QWORD *)(*a2 + 184);
  v14 = *(unsigned __int8 *)(v13 + 479);
  v15 = *(_QWORD *)(v13 + 464);
  if ((v14 & 0x80u) == 0)
    v16 = v14 & 0x7F;
  else
    v16 = *(_QWORD *)(v13 + 464);
  if (v16)
  {
    if (v16 == 6)
    {
      v17 = (const void *)(v13 + 456);
      v18 = *(const void **)(v13 + 456);
      if ((v14 & 0x80u) == 0)
        v19 = v14;
      else
        v19 = v15;
      if ((v14 & 0x80u) == 0)
        v20 = v17;
      else
        v20 = v18;
      if (v19 >= 6)
        v21 = 6;
      else
        v21 = v19;
      v22 = memcmp(v20, "softfp", v21) == 0;
      if (v19 != 6)
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v13 + 464);
    v22 = v14 == 0;
  }
  *(_BYTE *)(v7 + 24) = v22;
  *a1 = &off_24FA6A1B0;
  a1[1] = v7;
  return a1;
}

_QWORD *sub_22E6A8E00(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A8E40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A8E90(uint64_t a1, uint64_t a2, llvm::GlobalValue *a3, _QWORD *a4)
{
  sub_22E6A93DC(a1, a2, a3, a4);
  if ((llvm::GlobalValue::isDeclaration(a3) & 1) == 0)
    sub_22E6A7DFC((uint64_t)a3, (uint64_t)a4);
}

uint64_t sub_22E6A8ED4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24) + 72) - 4;
  if (v1 > 0xA)
    return 32;
  else
    return dword_22F45D7CC[v1];
}

uint64_t sub_22E6A8F08()
{
  return 13;
}

uint64_t sub_22E6A8F10(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v5;

  v5 = llvm::ConstantInt::get();
  sub_22E6A4C7C(a2 + 272, a3, v5, 0, 0xFu);
  return 0;
}

const char *sub_22E6A8F5C()
{
  return "mov\tr7, r7\t\t// marker for objc_retainAutoreleaseReturnValue";
}

void sub_22E6A8F6C(uint64_t a1, void *a2, size_t a3, _QWORD *a4)
{
  std::string *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  std::string v16;

  sub_22E6A7F48((uint64_t)&v15, a2, a3);
  v5 = std::string::insert(&v15, 0, "/DEFAULTLIB:");
  v16 = *v5;
  v6 = v16.__r_.__value_.__r.__words[2];
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v7 = HIBYTE(v6);
  v8 = (char)v7;
  v9 = (void *)v16.__r_.__value_.__r.__words[0];
  if ((v7 & 0x80u) == 0)
    v10 = &v16;
  else
    v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
  v11 = v7 & 0x7F;
  if (v8 >= 0)
    size = v11;
  else
    size = v16.__r_.__value_.__l.__size_;
  a4[1] = 0;
  if (a4[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v13 = a4[1];
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (!size)
      goto LABEL_10;
  }
  memcpy((void *)(*a4 + v13), v10, size);
  v14 = a4[1];
LABEL_10:
  a4[1] = v14 + size;
  if (v8 < 0)
    operator delete(v9);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_22E6A9068(int a1, void *__src, size_t __len, const void *a4, size_t a5, _QWORD *a6)
{
  std::string *p_dst;
  size_t v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void *p_p;
  std::string::size_type v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void **v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type size;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  size_t v41;
  unint64_t v42;
  std::string __dst;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  v14 = std::string::insert(&__dst, 0, "/FAILIFMISMATCH:\"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "=");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (!a4)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    __p = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_23;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a5 >= 0x17)
  {
    v22 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v22 = a5 | 7;
    v23 = v22 + 1;
    p_p = operator new(v22 + 1);
    v41 = a5;
    v42 = v23 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v42) = a5;
    p_p = &__p;
    if (!a5)
      goto LABEL_22;
  }
  memmove(p_p, a4, a5);
LABEL_22:
  *((_BYTE *)p_p + a5) = 0;
  v21 = HIBYTE(v42);
  v20 = (void **)__p;
  v19 = v41;
LABEL_23:
  v24 = v21 < 0;
  if (v21 >= 0)
    v25 = &__p;
  else
    v25 = v20;
  v26 = v21 & 0x7F;
  if (v24)
    v27 = v19;
  else
    v27 = v26;
  v28 = std::string::append(&v45, (const std::string::value_type *)v25, v27);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, "\"");
  v47 = *v30;
  v31 = v47.__r_.__value_.__r.__words[2];
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v32 = HIBYTE(v31);
  v33 = (char)v32;
  v34 = (void *)v47.__r_.__value_.__r.__words[0];
  if ((v32 & 0x80u) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v36 = v32 & 0x7F;
  if (v33 >= 0)
    size = v36;
  else
    size = v47.__r_.__value_.__l.__size_;
  a6[1] = 0;
  if (a6[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v38 = a6[1];
  }
  else
  {
    v38 = 0;
    v39 = 0;
    if (!size)
      goto LABEL_38;
  }
  memcpy((void *)(*a6 + v38), v35, size);
  v39 = a6[1];
LABEL_38:
  a6[1] = v39 + size;
  if (v33 < 0)
    operator delete(v34);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

_QWORD *sub_22E6A934C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6A938C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6A93DC(uint64_t a1, uint64_t a2, llvm::GlobalValue *this, _QWORD *a4)
{
  char isDeclaration;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  isDeclaration = llvm::GlobalValue::isDeclaration(this);
  if (!a2)
    return;
  if ((isDeclaration & 1) != 0)
    return;
  v9 = *(_DWORD *)(a2 + 28);
  if ((v9 & 0x7Eu) - 52 > 5)
    return;
  if ((v9 & 0x100) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    v13 = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      v13 = *(uint64_t **)v10;
      while (*(_WORD *)(*v13 + 32) != 327)
      {
        ++v13;
        v14 -= 8;
        if (!v14)
          goto LABEL_46;
      }
    }
    if (v13 != &v11[v12])
    {
      do
      {
        v16 = *v11++;
        v15 = v16;
      }
      while (*(_WORD *)(v16 + 32) != 327);
      sub_22E639F38(*(_DWORD **)(v15 + 40), *(unsigned int *)(v15 + 36), &v53);
      if (v58)
      {
        v52 = 0;
        v50 = 0;
        v51 = 0;
        v49 = 0;
        v17 = v56;
        if (v56)
        {
          v18 = v55;
          v19 = (_QWORD *)a4[27];
        }
        else
        {
          v19 = (_QWORD *)a4[27];
          v22 = v19[2];
          v25 = *(void **)(v22 + 48);
          v23 = v22 + 48;
          v24 = v25;
          v26 = *(_BYTE *)(v23 + 23);
          if (v26 >= 0)
            v18 = (void *)v23;
          else
            v18 = v24;
          v27 = *(_QWORD *)(v23 + 8);
          if (v26 >= 0)
            v17 = v26 & 0x7F;
          else
            v17 = v27;
        }
        if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v19 + 552))(v19, v57) & 1) != 0)
        {
          strlen(off_24FA6A3A8[(int)v51]);
          llvm::Function::addFnAttr();
          llvm::Function::addFnAttr();
LABEL_45:
          v45 = (unsigned __int8 *)&v53;
          sub_22E3B3CC8((void ***)&v45);
          goto LABEL_46;
        }
        v28 = a4[26];
        *(_DWORD *)(v28 + 312) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(v28 + 316) = 145;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        v45 = (unsigned __int8 *)(v28 + 320);
        v46 = 0;
        v47 = v28;
        v48 = 1;
        *(_BYTE *)(v28 + 320) = 0;
        *(_DWORD *)(v28 + 664) = 0;
        v29 = *(unsigned int *)(v28 + 776);
        if ((_DWORD)v29)
        {
          v30 = *(_QWORD *)(v28 + 768);
          v31 = 56 * v29;
          do
          {
            if (*(char *)(v30 + v31 - 9) < 0)
              operator delete(*(void **)(v30 + v31 - 32));
            v31 -= 56;
          }
          while (v31);
        }
        *(_DWORD *)(v28 + 776) = 0;
        v32 = v18;
        v33 = v17;
      }
      else
      {
        v20 = a4[19];
        if ((*(_BYTE *)(v20 + 212) & 0x10) == 0 && ((*(unsigned __int8 *)(v20 + 250) << 16) & 0x300000) == 0
          || ((*(uint64_t (**)(_QWORD, void *, size_t))(*(_QWORD *)a4[27] + 544))(a4[27], v55, v56) & 1) != 0)
        {
          goto LABEL_45;
        }
        v21 = a4[26];
        *(_DWORD *)(v21 + 312) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(v21 + 316) = 145;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        v45 = (unsigned __int8 *)(v21 + 320);
        v46 = 0;
        v47 = v21;
        v48 = 1;
        *(_BYTE *)(v21 + 320) = 0;
        *(_DWORD *)(v21 + 664) = 0;
        v34 = *(unsigned int *)(v21 + 776);
        if ((_DWORD)v34)
        {
          v35 = *(_QWORD *)(v21 + 768);
          v36 = 56 * v34;
          do
          {
            if (*(char *)(v35 + v36 - 9) < 0)
              operator delete(*(void **)(v35 + v36 - 32));
            v36 -= 56;
          }
          while (v36);
        }
        *(_DWORD *)(v21 + 776) = 0;
        v32 = v55;
        v33 = v56;
      }
      sub_22E3B89A8(&v45, v32, v33);
      sub_22E3BB0B8((uint64_t)&v45);
      goto LABEL_45;
    }
  }
LABEL_46:
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v38 = *(uint64_t **)v37;
    v39 = *(unsigned int *)(v37 + 8);
    i = *(uint64_t **)v37;
    if ((_DWORD)v39)
    {
      v41 = 8 * v39;
      for (i = *(uint64_t **)v37; *(_WORD *)(*i + 32) != 90; ++i)
      {
        v41 -= 8;
        if (!v41)
          return;
      }
    }
    if (i != &v38[v39])
    {
      do
      {
        v43 = *v38++;
        v42 = v43;
      }
      while (*(_WORD *)(v43 + 32) != 90);
      v44 = *(int *)(v42 + 36);
      if (v44 <= 5)
        strlen(off_24FA6CFB0[v44]);
      llvm::Function::addFnAttr();
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20))
      {
        *(_QWORD *)&v53 = llvm::Function::getContext(this);
        *((_QWORD *)&v53 + 1) = &v55;
        v54 = 0x800000000;
        llvm::AttrBuilder::addStackAlignmentAttr();
        llvm::Function::addFnAttrs(this, (const llvm::AttrBuilder *)&v53);
        if (*((void ***)&v53 + 1) != &v55)
          free(*((void **)&v53 + 1));
      }
    }
  }
}

void sub_22E6A983C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6A9850(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
}

uint64_t sub_22E6A9874(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  llvm::ArrayType *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  llvm::LLVMContext *v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  llvm::Type *v51;
  llvm::ArrayType *Int64Ty;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  llvm::LLVMContext *v59;
  unint64_t v60;
  uint64_t v61;
  llvm::LLVMContext *v62;
  uint64_t v63;
  llvm::ArrayType *Int32Ty;
  unint64_t v65;
  llvm::LLVMContext *v66;
  llvm::Type *v67;
  _OWORD v68[2];
  llvm::Type *v69;
  uint64_t v70[3];

  result = sub_22E6A72E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2, a1);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_DWORD *)(a2 + 16) == -1)
    {
      if (*(_BYTE *)(a2 + 8))
        v7 = *(_BYTE *)(a2 + 8) == 68;
      else
        v7 = (*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 2;
      v6 = v7;
    }
    else
    {
      v6 = 0;
    }
    v8 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
    result = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
      v10 = (*(_DWORD *)(v9 + 16) & 0xFF800FF) == 86507531;
    else
      v10 = 0;
    if (!v10)
    {
      v11 = sub_22E3E4B64(result);
      if (v11)
      {
        v12 = v11;
        if ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v8) >= 0x81)
        {
LABEL_16:
          result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
          v68[0] = 0uLL;
          BYTE8(v68[1]) = 2;
          *(_QWORD *)&v68[1] = result;
          v13 = 8;
          goto LABEL_17;
        }
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) & 1) == 0
          && ((v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v15 = (*(_DWORD *)(v14 + 16) & 0xFD800FF) == 110100491)
            : (v15 = 0),
              v15)
          || *(_BYTE *)(a1 + 24)
          && ((v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v17 = (*(_DWORD *)(v16 + 16) & 0xFF800FF) == 112721931)
            : (v17 = 0),
              v17))
        {
          result = sub_22E6AA6D0((uint64_t)v68, a1, v5);
          goto LABEL_52;
        }
      }
      if (!sub_22E619D68(v5))
      {
        v19 = *v8;
        v20 = *v8 && *(_BYTE *)(*v8 + 16) == 31;
        if (!v20
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
           || (v19 = sub_22F10CF48(v19)) == 0)
          || !sub_22F28C8B4(v19))
        {
          v21 = *v8;
          v22 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v22 && *(_BYTE *)(v22 + 16) == 44)
          {
            v23 = sub_22F114198(*(_QWORD *)(v22 + 24));
            v5 = sub_22E496830(v23);
            v8 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
            v21 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
          }
          if ((v21 && *(_BYTE *)(v21 + 16) == 9
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
             && (v21 = sub_22F10CF48(v21)) != 0)
            && (*(_DWORD *)(v21 + 32) & 0x1FFFFFEu) >= 0x81)
          {
            result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
            v68[0] = 0uLL;
            BYTE8(v68[1]) = 2;
            *(_QWORD *)&v68[1] = result;
LABEL_51:
            *(_WORD *)((char *)&v68[1] + 9) = 0;
            goto LABEL_52;
          }
          result = sub_22F2A3AE4(a1, v5);
          if ((_DWORD)result)
          {
            result = sub_22F110B20(*v8);
            BYTE8(v68[1]) = 1;
            if (!(_DWORD)result)
            {
              *(_WORD *)((char *)&v68[1] + 9) = 0;
              memset(v68, 0, 24);
              goto LABEL_52;
            }
            memset(v68, 0, 24);
            v13 = 256;
            goto LABEL_17;
          }
          memset(v68, 0, 27);
LABEL_160:
          v13 = 128;
          goto LABEL_17;
        }
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (*(_DWORD *)(a1 + 20))
      {
        result = sub_22E699BD0(v18, v5, 1, 0);
        if (!(_DWORD)result)
        {
          if (v6)
          {
            v69 = 0;
            v70[0] = 0;
            if (sub_22E699750((_QWORD *)a1, v5, v70, (unint64_t *)&v69))
            {
              result = sub_22E6AA964((uint64_t)v68, a1, v5, v70[0], v69);
              goto LABEL_52;
            }
          }
          v58 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v8);
          v60 = v58;
          if (v58 > 0x20)
          {
            if (v58 > 0x80 || *(_DWORD *)(a1 + 20) != 3)
            {
              result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
              v68[0] = 0uLL;
              BYTE8(v68[1]) = 2;
              *(_QWORD *)&v68[1] = result;
              v13 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 8;
              goto LABEL_17;
            }
            Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v59);
            result = llvm::ArrayType::get(Int32Ty, (llvm::Type *)((v60 + 31) >> 5));
          }
          else
          {
            v61 = *(_QWORD *)(a1 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v61 + 24) + 288) & 0x40) != 0)
            {
              result = sub_22E6A7AEC((uint64_t)v68, v5, *(_QWORD *)(v61 + 8), **(llvm::Type ***)(v61 + 16));
              goto LABEL_52;
            }
            if (!*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(v61 + 16)))
            {
              if (v60 > 8)
              {
                v67 = **(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16);
                if (v60 > 0x10)
                  result = llvm::Type::getInt32Ty(v67, v62);
                else
                  result = llvm::Type::getInt16Ty(v67, v62);
              }
              else
              {
                result = llvm::Type::getInt8Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v62);
              }
              BYTE8(v68[1]) = 0;
              v68[0] = (unint64_t)result;
              v13 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 0x80;
              *(_QWORD *)&v68[1] = 0;
              goto LABEL_17;
            }
            result = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v62);
          }
          BYTE8(v68[1]) = 0;
          v13 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 0x80;
          *(_QWORD *)&v68[1] = 0;
          v68[0] = (unint64_t)result;
LABEL_17:
          *(_WORD *)((char *)&v68[1] + 9) = v13;
LABEL_52:
          *(_OWORD *)(a2 + 48) = v68[0];
          *(_OWORD *)(a2 + 59) = *(_OWORD *)((char *)v68 + 11);
          goto LABEL_53;
        }
      }
      else
      {
        result = sub_22E699BD0(v18, v5, 0, 0);
        if (!(_DWORD)result)
        {
          v63 = *(_QWORD *)(a1 + 8);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
          {
            sub_22EF5CDF0(*(_QWORD *)(v63 + 8), *v8);
            result = llvm::IntegerType::get();
            WORD4(v68[1]) = 0;
            BYTE10(v68[1]) = 0;
            *(_QWORD *)&v68[1] = 0;
            v68[0] = (unint64_t)result;
          }
          else
          {
            if (!sub_22E6AA7A4(v5, *(_QWORD *)(v63 + 8)))
              goto LABEL_16;
            v65 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v8);
            if (v65 > 8)
            {
              if (v65 > 0x10)
                result = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v66);
              else
                result = llvm::Type::getInt16Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v66);
            }
            else
            {
              result = llvm::Type::getInt8Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v66);
            }
            WORD4(v68[1]) = 0;
            BYTE10(v68[1]) = 0;
            v68[0] = (unint64_t)result;
            *(_QWORD *)&v68[1] = 0;
          }
          goto LABEL_160;
        }
      }
    }
    memset(v68, 0, 24);
    BYTE8(v68[1]) = 4;
    goto LABEL_51;
  }
LABEL_53:
  v24 = *(_DWORD *)(a2 + 36);
  if (v24)
  {
    v25 = a2 + 80;
    v26 = a2 + 80 + 40 * v24;
    while (1)
    {
      if (*(_DWORD *)(a2 + 16) == -1)
      {
        if (*(_BYTE *)(a2 + 8))
          v28 = *(_BYTE *)(a2 + 8) == 68;
        else
          v28 = *(_DWORD *)(a1 + 20) == 2;
        v27 = v28;
      }
      else
      {
        v27 = 0;
      }
      v29 = sub_22E69BD58(*(_QWORD *)v25);
      if (sub_22E6AACAC(a1, v29))
      {
        result = sub_22E6AA6D0((uint64_t)v68, a1, v29);
        goto LABEL_89;
      }
      v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFF0);
      if (!sub_22E619D68(v29))
      {
        v35 = *v30;
        v36 = *v30 && *(_BYTE *)(*v30 + 16) == 31;
        if (!v36
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
           || (v35 = sub_22F10CF48(v35)) == 0)
          || !sub_22F28C8B4(v35))
        {
          v37 = *v30;
          v38 = *(_QWORD *)(*(_QWORD *)(*v30 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v38 && *(_BYTE *)(v38 + 16) == 44)
          {
            v39 = sub_22F114198(*(_QWORD *)(v38 + 24));
            v29 = sub_22E496830(v39);
            v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFF0);
            v37 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
          }
          if (v37)
            v40 = *(_BYTE *)(v37 + 16) == 9;
          else
            v40 = 0;
          if ((v40
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
             && (v37 = sub_22F10CF48(v37)) != 0)
            && (*(_DWORD *)(v37 + 32) & 0x1FFFFFEu) >= 0x81)
          {
            result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v29);
            v68[0] = 0uLL;
            BYTE8(v68[1]) = 2;
            *(_QWORD *)&v68[1] = result;
            v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 8;
          }
          else
          {
            result = sub_22F2A3AE4(a1, v29);
            if ((_DWORD)result)
            {
              result = sub_22F110B20(*v30);
              BYTE8(v68[1]) = 1;
              v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00;
              if ((_DWORD)result)
                v34 |= 0x100u;
              memset(v68, 0, 24);
            }
            else
            {
              v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 0x80;
              memset(v68, 0, 25);
            }
          }
          goto LABEL_88;
        }
      }
      v31 = *(_QWORD *)(*(_QWORD *)(*v30 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v31)
      {
        if (*(_BYTE *)(v31 + 16) == 45)
        {
          v32 = sub_22E69BE08(v31, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
          if (v32)
          {
            v33 = v32 == 1;
            result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v29);
            v68[0] = 0uLL;
            BYTE8(v68[1]) = 2;
            *(_QWORD *)&v68[1] = result;
            v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | (8 * v33);
LABEL_88:
            *(_WORD *)((char *)&v68[1] + 9) = v34;
            goto LABEL_89;
          }
        }
      }
      result = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v29, 1, 0);
      if ((_DWORD)result)
      {
        memset(v68, 0, 24);
        BYTE8(v68[1]) = 4;
        v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00;
        goto LABEL_88;
      }
      if (v27)
        break;
      v41 = *(_DWORD *)(a1 + 20);
      if (v41 == 3)
      {
        v69 = 0;
        v70[0] = 0;
        if (sub_22E699750((_QWORD *)a1, v29, v70, (unint64_t *)&v69))
        {
          v42 = (llvm::ArrayType *)sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v70[0] & 0xFFFFFFFFFFFFFFF0));
          result = llvm::ArrayType::get(v42, v69);
          BYTE8(v68[1]) = 0;
          v34 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00;
          v68[0] = (unint64_t)result;
          *(_QWORD *)&v68[1] = 0;
          goto LABEL_88;
        }
        goto LABEL_97;
      }
LABEL_106:
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if ((v41 - 1) <= 1)
      {
        v56 = sub_22F3688D8(v44, v29);
        v45 = v56;
        if (v56 <= 4)
          v57 = 4;
        else
          v57 = v56;
        if (v57 >= 8)
          v46 = 8;
        else
          v46 = v57;
      }
      else
      {
        v45 = sub_22EF5D130(v44, v29);
        v46 = 4;
      }
      result = sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v30, (uint64_t)v70);
      if (v70[0] >= 65)
      {
        v68[0] = 0uLL;
        BYTE8(v68[1]) = 2;
        *(_QWORD *)&v68[1] = v46;
        if (v45 <= v46)
          v48 = 8;
        else
          v48 = 24;
        v49 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | v48;
LABEL_119:
        *(_WORD *)((char *)&v68[1] + 9) = v49;
        goto LABEL_89;
      }
      v50 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v50 + 24) + 288) & 0x40) == 0)
      {
        v51 = **(llvm::Type ***)(v50 + 16);
        if (v45 > 4)
        {
          Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(v51, v47);
          v53 = 63;
          v54 = 6;
        }
        else
        {
          Int64Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(v51, v47);
          v53 = 31;
          v54 = 5;
        }
        v55 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v30);
        result = llvm::ArrayType::get(Int64Ty, (llvm::Type *)((unint64_t)(v55 + v53) >> v54));
        BYTE8(v68[1]) = 0;
        v68[0] = (unint64_t)result;
        v49 = *(_WORD *)((_BYTE *)&v68[1] + 9) & 0xFE00 | 0x80;
        *(_QWORD *)&v68[1] = 0;
        goto LABEL_119;
      }
      result = sub_22E6A7AEC((uint64_t)v68, v29, *(_QWORD *)(v50 + 8), **(llvm::Type ***)(v50 + 16));
LABEL_89:
      *(_OWORD *)(v25 + 8) = v68[0];
      *(_OWORD *)(v25 + 19) = *(_OWORD *)((char *)v68 + 11);
      v25 += 40;
      if (v25 == v26)
        goto LABEL_130;
    }
    v69 = 0;
    v70[0] = 0;
    if (sub_22E699750((_QWORD *)a1, v29, v70, (unint64_t *)&v69))
    {
      result = sub_22E6AA964((uint64_t)v68, a1, v29, v70[0], v69);
      goto LABEL_89;
    }
LABEL_97:
    v41 = *(_DWORD *)(a1 + 20);
    if (v41 == 3)
    {
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v30, (uint64_t)v70);
      if (v70[0] > 16)
      {
        result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v30);
        v68[0] = 0uLL;
        BYTE8(v68[1]) = 2;
        *(_QWORD *)&v68[1] = v43 >> 3;
        *(_WORD *)((char *)&v68[1] + 9) &= 0xFE00u;
        goto LABEL_89;
      }
      v41 = *(_DWORD *)(a1 + 20);
    }
    goto LABEL_106;
  }
LABEL_130:
  if (!*(_QWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a1 + 16))
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)(a1 + 16) << 8);
  }
  return result;
}

double sub_22E6AA304@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  int64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25[2];
  int v26;
  __int128 v27[3];
  unint64_t v28;
  __int128 v29[3];
  uint64_t v30[4];
  __int16 v31;
  _OWORD v32[3];

  if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4, 1, 0))
  {
    v10 = a3[1];
    v32[0] = *a3;
    v32[1] = v10;
    v32[2] = a3[2];
    v31 = 257;
    v11 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v32, (uint64_t)v30);
    v12 = sub_22E6A7CA4(a2);
    *(_QWORD *)a5 = v11;
    *(_QWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 16) = 4;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    v13 = *(_OWORD *)(a5 + 16);
    v29[0] = *(_OWORD *)a5;
    v29[1] = v13;
    v29[2] = *(_OWORD *)(a5 + 32);
    v14 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a4, 0);
    v31 = 257;
    *(_QWORD *)&result = sub_22E3BEE6C((uint64_t *)(a2 + 272), v29, v14, (uint64_t)v30, a5).n128_u64[0];
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v30);
    v16 = v30[0];
    v17 = sub_22F3688D8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4);
    v30[0] = 0;
    v28 = 0;
    if (v16 >= 17
      && ((sub_22E6AACAC(a1, a4) & 1) != 0
       || *(_DWORD *)(a1 + 20) == 3 && !sub_22E699750((_QWORD *)a1, a4, v30, &v28)))
    {
      v23 = 1;
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 20);
      v19 = v18 - 1;
      v20 = 4;
      if (v17 > 4)
        v20 = v17;
      if (v20 >= 8)
        v20 = 8;
      v21 = 4;
      if (v17 > 4)
        v21 = v17;
      if (v21 >= 0x10)
        v21 = 16;
      if (v18 == 3)
        v22 = v21;
      else
        v22 = 4;
      if (v19 >= 2)
        v17 = v22;
      else
        v17 = v20;
      v23 = 0;
    }
    v24 = a3[1];
    v27[0] = *a3;
    v27[1] = v24;
    v27[2] = a3[2];
    v25[0] = v16;
    v25[1] = v17;
    v26 = 0;
    return sub_22E6A094C(a5, a2, v27, a4, v23, v25, 4, 1);
  }
  return result;
}

BOOL sub_22E6AA508(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_DWORD *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (v5)
  {
    if (((*(_DWORD *)(v4 + 16) >> 19) & 0x1FFu) - 211 < 3)
      return 1;
  }
  else
  {
    v6 = sub_22E3E4B64(v3);
    if (v6)
      return ((sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6) - 64) & 0xFFFFFFBF) == 0;
  }
  return 0;
}

BOOL sub_22E6AA590(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 < 5;
}

BOOL sub_22E6AA59C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6AA614(uint64_t a1, uint64_t a2, uint64_t a3, __int32 a4, int8x8_t a5)
{
  uint8x8_t v5;
  uint64_t DataLayout;
  uint64_t result;

  a5.i32[0] = a4;
  v5 = (uint8x8_t)vcnt_s8(a5);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
    return 0;
  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
  sub_22E3C304C(DataLayout, a3);
  if (llvm::TypeSize::operator unsigned long long() > 0x40)
    return 0;
  if (a2 == 8)
    return 1;
  result = 0;
  if (a2 == 16 && a4 != 1)
    return 1;
  return result;
}

uint64_t sub_22E6AA6C8()
{
  return 1;
}

unint64_t sub_22E6AA6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  llvm::LLVMContext *v7;
  unint64_t result;
  __int16 v9;

  v6 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (v6 > 0x20)
  {
    if (v6 != 128 && v6 != 64)
    {
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v9 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = result;
      goto LABEL_7;
    }
    llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v7);
    result = llvm::FixedVectorType::get();
  }
  else
  {
    result = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v7);
  }
  *(_BYTE *)(a1 + 24) = 0;
  v9 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = result;
LABEL_7:
  *(_WORD *)(a1 + 25) = v9;
  return result;
}

uint64_t sub_22E6AA7A4(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;

  for (i = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0); ; i = (uint64_t *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0))
  {
    if ((unint64_t)sub_22EF5CDF0(a2, *i) > 0x20)
      return 0;
    v4 = *i;
    v5 = *(_QWORD *)(*(_QWORD *)(*i + 8) & 0xFFFFFFFFFFFFFFF0);
    v6 = *(_DWORD *)(v5 + 16);
    if (v6 - 55 < 2)
      return 0;
    if (v6 == 39)
      return 1;
    if (v6 == 11)
      return ((v6 >> 19) & 0x1FE) - 218 < 0xFFFFFFF8;
    if (*(_BYTE *)(v4 + 16) != 12)
    {
      if (v6 != 12)
        goto LABEL_12;
      v4 = sub_22F10CF48(v4);
      if (!v4)
        break;
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*i + 8) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *(_BYTE *)(v5 + 16);
LABEL_12:
  if (v6 != 45)
    return 0;
  v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
  if ((*(_BYTE *)(v8 + 74) & 0x80) != 0)
    return 0;
  v9 = v8;
  v10 = sub_22F0C975C(a2, v8);
  v11 = sub_22EFC3B90(v9);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
LABEL_16:
    if ((*(_BYTE *)(v12 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v13))
      {
        result = sub_22E6AA7A4(*(_QWORD *)(v12 + 48), a2);
        if (!(_DWORD)result)
          return result;
        if ((((*(_DWORD *)(v9 + 72) & 0xE000) != 0x4000) & v14) == 0)
        {
          v14 |= (*(_DWORD *)(v9 + 72) & 0xE000) != 0x4000;
          goto LABEL_23;
        }
      }
      return 0;
    }
    v15 = (*(_DWORD *)(v9 + 72) & 0xE000) != 0x4000;
    if ((sub_22E6AA7A4(*(_QWORD *)(v12 + 48), a2) & 1) != 0)
    {
      v14 |= v15;
LABEL_23:
      while (1)
      {
        v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v12)
          return 1;
        if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 <= 2)
        {
          ++v13;
          goto LABEL_16;
        }
      }
    }
    return 0;
  }
  return 1;
}

unint64_t sub_22E6AA964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, llvm::Type *a5)
{
  unint64_t result;
  uint64_t v11;
  llvm::LLVMContext *v12;
  llvm::ArrayType *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;

  result = sub_22E3E4B64(a4);
  if (result
    && (v11 = result,
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 24) + 72))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24)),
        (result & 1) == 0)
    && (result = sub_22E6AAAAC(a2, a3), (_DWORD)result))
  {
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
    llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v12);
    v13 = (llvm::ArrayType *)llvm::FixedVectorType::get();
    result = llvm::ArrayType::get(v13, a5);
    *(_BYTE *)(a1 + 24) = 0;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = result;
    *(_WORD *)(a1 + 25) = v14;
  }
  else
  {
    if ((*(_DWORD *)(a2 + 20) - 1) <= 1)
    {
      v17 = sub_22F3688D8(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      sub_22EF5CDF0(v18, a4);
      v20 = v19;
      result = sub_22EF5CDF0(v18, *(_QWORD *)(*(_QWORD *)(v18 + 16408) & 0xFFFFFFFFFFFFFFF0));
      if (v17 > (v20 / result) && v17 > 7)
        v15 = 8;
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    *(_BYTE *)(a1 + 24) = 0;
    v16 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v15;
    *(_WORD *)(a1 + 25) = v16;
  }
  return result;
}

uint64_t sub_22E6AAAAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  BOOL v25;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (1)
  {
    v5 = sub_22EF5C728(v4, a2);
    if (!v5 || *(_BYTE *)(v5 + 16) != 2)
      break;
    v6 = (_QWORD *)(v5 + 40);
    if (*(_DWORD *)(v5 + 48) >= 0x41u)
      v6 = (_QWORD *)*v6;
    if (!*v6)
      return 0;
    v2 = *(_QWORD *)(v5 + 32);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    a2 = v2;
  }
  v7 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8 && *(_BYTE *)(v8 + 16) == 45)
  {
    v9 = sub_22F114198(*(_QWORD *)(v8 + 24));
    v10 = v9;
    if (v9)
      v11 = (*(_DWORD *)(v9 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v11 = 0;
    if (v11)
    {
      v12 = sub_22E46A3A0(v9);
      if (v12 != v13)
      {
        v14 = v12;
        v15 = v13;
        do
        {
          v16 = *(_QWORD *)(**(_QWORD **)(v14 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
            v16 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + 16));
          if ((sub_22E6AAAAC(a1, v16 & 0xFFFFFFFFFFFFFFF0) & 1) != 0)
            return 1;
          v14 += 24;
        }
        while (v14 != v15);
      }
    }
    v17 = sub_22EFC3B90(v10);
    if (v17)
    {
      v18 = v17;
      if ((sub_22E6AAAAC(a1, *(_QWORD *)(v17 + 48)) & 1) != 0)
        return 1;
      do
      {
        v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
        v19 = v18 != 0;
      }
      while (v18 && ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 > 2 || (sub_22E6AAAAC(a1, *(_QWORD *)(v18 + 48)) & 1) == 0));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v20 = sub_22E3E4B64(v7);
    if (v20)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v23 = *(_DWORD *)(v22 + 16);
      if (v22)
        v24 = (v23 & 0xFF000FF) == 112197643;
      else
        v24 = 0;
      if (v24)
      {
        v21 = 1;
      }
      else
      {
        if (v22)
          v25 = *(_DWORD *)(v22 + 16) == 11;
        else
          v25 = 0;
        v21 = v25 && (v23 & 0xFF80000) == 110100480;
      }
    }
    return (v20 != 0) & v21;
  }
  return v19;
}

uint64_t sub_22E6AACAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  _BOOL4 v14;

  v3 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v3)
    return 0;
  v4 = v3;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) & 1) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v5 && (*(_DWORD *)(v5 + 16) & 0xFD800FF) == 110100491)
      return 1;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7 && (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 112721931)
      return 1;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v4 + 20);
  if (*(_DWORD *)(*(_QWORD *)(v9 + 24) + 72) == 11)
  {
    v11 = (v10 & (v10 - 1)) == 0;
    if (!v10)
      v11 = 0;
    return v10 != 3 && !v11;
  }
  v13 = sub_22EF5CDF0(*(_QWORD *)(v9 + 8), v4);
  if (v10)
    v14 = (v10 & (v10 - 1)) != 0;
  else
    v14 = 1;
  return v13 < 0x21 || v14;
}

_QWORD *sub_22E6AADF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AAE34(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6AAE84()
{
  return 1;
}

uint64_t sub_22E6AAE8C(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  sub_22E6AB928(a2, a3, *(unsigned __int8 *)(a1 + 16), 1);
  return 0;
}

void sub_22E6AAEBC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6AAED0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((result & 1) == 0)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v8 <= 0x38u
      && ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)) & 0x180000000001000) != 0)
    {
      result = 0;
LABEL_7:
      v10 = 0;
      v11 = 128;
LABEL_8:
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = result;
      *(_DWORD *)(a2 + 68) = 0;
      *(_BYTE *)(a2 + 72) = v10;
      *(_WORD *)(a2 + 73) = v11;
      goto LABEL_9;
    }
    if ((v8 & 0xFF800FF) == 0x528000B)
    {
      result = 0;
      v11 = 0;
      v10 = 4;
      goto LABEL_8;
    }
    if (sub_22E619D68(*(_QWORD *)(a2 + 40)))
    {
LABEL_40:
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6);
      v11 = 8;
      v10 = 2;
      goto LABEL_8;
    }
    if (*(_BYTE *)(v7 + 16) != 31)
    {
      if (v8 != 31)
        goto LABEL_43;
      v28 = sub_22F10CF48(v7);
      if (!v28)
        goto LABEL_43;
      v7 = v28;
    }
    if (sub_22F28C8B4(v7))
      goto LABEL_40;
LABEL_43:
    result = sub_22E6AB30C(a1, v6);
    if ((_DWORD)result)
    {
      v27 = sub_22F110B20(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
      result = 0;
      if (v27)
        v11 = 256;
      else
        v11 = 0;
      v10 = 1;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  v12 = *(_DWORD *)(a2 + 36);
  if (v12)
  {
    v13 = a2 + 80;
    v14 = a2 + 80 + 40 * v12;
    while (1)
    {
      result = sub_22E69BD58(*(_QWORD *)v13);
      v15 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFF0);
      v16 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
      v17 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0;
      v18 = *(unsigned __int8 *)(*(_QWORD *)v17 + 16);
      if (v18 != 12 && (v18 - 55) > 1)
        break;
LABEL_13:
      v19 = 0;
      LODWORD(v20) = 0;
      v2 = v2 & 0xFFFFFE00 | 0x80;
LABEL_14:
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_DWORD *)(v13 + 24) = v20;
      *(_DWORD *)(v13 + 28) = 0;
      *(_BYTE *)(v13 + 32) = v19;
      *(_WORD *)(v13 + 33) = v2;
      v13 += 40;
      if (v13 == v14)
        return result;
    }
    v21 = result;
    if (sub_22E619D68(result))
      goto LABEL_17;
    if (*(_BYTE *)(v16 + 16) != 31)
    {
      if (v18 != 31 || (v26 = sub_22F10CF48(v16)) == 0)
      {
LABEL_27:
        result = sub_22E6AB30C(a1, v21);
        if ((_DWORD)result)
        {
          result = sub_22F110B20(*v15);
          LODWORD(v20) = 0;
          if ((_DWORD)result)
            v2 = v2 & 0xFFFFFE00 | 0x100;
          else
            v2 &= 0xFFFFFE00;
          v19 = 1;
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      v16 = v26;
    }
    if (sub_22F28C8B4(v16))
    {
      v17 = *(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_17:
      v22 = *(_QWORD *)v17;
      if (*(_QWORD *)v17
        && *(_BYTE *)(v22 + 16) == 45
        && (v23 = sub_22E69BE08(v22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32))) != 0)
      {
        v24 = v23 == 1;
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21);
        v2 = v2 & 0xFFFFFE00 | (8 * v24);
        v19 = 2;
        LODWORD(v20) = result;
      }
      else
      {
        v20 = sub_22E6AB3B4(a1, v21);
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21);
        if (result <= v20)
          v25 = 8;
        else
          v25 = 24;
        v2 = v25 | v2 & 0xFFFFFE00;
        v19 = 2;
      }
      goto LABEL_14;
    }
    goto LABEL_27;
  }
  return result;
}

double sub_22E6AB1C8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21[3];
  _OWORD v22[3];

  v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v21);
  v11 = sub_22E6AB3B4(a1, a4);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *v10;
  if (*v10)
    v14 = *(_BYTE *)(*v10 + 16) == 12;
  else
    v14 = 0;
  if ((v14
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12
     && (v13 = sub_22F10CF48(*v10)) != 0)
    && v21[0] / 2 < v12)
  {
    v15 = a3[1];
    v20[0] = *a3;
    v20[1] = v15;
    v20[2] = a3[2];
    sub_22E6AB59C(a5, a2, v20, a4, v12, v21[0] / 2, v13);
  }
  else
  {
    v17 = a3[1];
    v22[0] = *a3;
    v22[1] = v17;
    v22[2] = a3[2];
    v18 = v21[0];
    v19 = sub_22E66C868(a2[18] + 280, a4, 0);
    return sub_22E6A0A7C(a5, a2, (uint64_t)v22, v19, v18, v11, v12, 1);
  }
  return result;
}

BOOL sub_22E6AB30C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5 && *(_BYTE *)(v5 + 16) == 44)
  {
    v6 = sub_22F114198(*(_QWORD *)(v5 + 24));
    v3 = sub_22E496830(v6) & 0xFFFFFFFFFFFFFFF0;
    v4 = *(_QWORD *)v3;
  }
  if (sub_22F1124D8(v4))
    return 1;
  if (*(_BYTE *)(a1 + 20))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8 && *(_DWORD *)(v8 + 16) == 11)
      return ((((*(_DWORD *)(v8 + 16) >> 19) & 0x1FF) - 174) & 0xFFFFFFF7) == 0;
  }
  return 0;
}

uint64_t sub_22E6AB3B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 12;
  else
    v5 = 0;
  if (v5
    || (v6 = a2, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    && (v4 = sub_22F10CF48(v4)) != 0)
  {
    v6 = *(_QWORD *)(v4 + 32);
    v3 = v6 & 0xFFFFFFFFFFFFFFF0;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
     - 55 < 2
    || (sub_22E6AB45C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6) & 1) != 0)
  {
    return 16;
  }
  else
  {
    return *(unsigned int *)(a1 + 24);
  }
}

unint64_t sub_22E6AB45C(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  result = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 45)
  {
    v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
    v6 = v5;
    if (v5)
      v7 = (*(_DWORD *)(v5 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v7 = 0;
    if (!v7 || (v8 = sub_22E46A3A0(v5), v8 == v9))
    {
LABEL_14:
      result = sub_22EFC3B90(v6);
      if (!result)
        return result;
      v13 = result;
LABEL_16:
      v14 = *(_QWORD *)(v13 + 48);
      if (sub_22E3E4B64(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0))
        && sub_22EF5CDF0(a1, *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0)) == 128
        || (sub_22E6AB45C(a1, v14) & 1) != 0)
      {
        return 1;
      }
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v13)
          break;
        if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_16;
      }
    }
    else
    {
      v10 = v8;
      v11 = v9;
      while (1)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v12 + 8) & 0xF) != 0)
          v12 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
        if ((sub_22E6AB45C(a1, v12 & 0xFFFFFFFFFFFFFFF0) & 1) == 0)
          break;
        v10 += 24;
        if (v10 == v11)
          goto LABEL_14;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_22E6AB59C(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[3];
  _OWORD v39[3];
  __int128 v40[3];
  __int128 v41[3];
  _OWORD v42[3];
  _OWORD v43[3];
  _OWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v13 = a3[1];
  v51[0] = *a3;
  v51[1] = v13;
  v51[2] = a3[2];
  v14 = 2 * a5;
  sub_22E6A0A7C((uint64_t)&v52, a2, (uint64_t)v51, a2[1], 2 * a5, a5, a5, 1);
  v49 = v53;
  v50 = v54;
  v45 = v52;
  v46 = v53;
  v47 = v54;
  v48 = v52;
  if (*(_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200)))
  {
    v44[0] = v48;
    v44[1] = v49;
    v44[2] = v50;
    LOWORD(v62) = 257;
    sub_22F24D74C(a2 + 34, (uint64_t)v44, a5 - a6, (uint64_t)&v60, (uint64_t)&v48);
    v43[0] = v45;
    v43[1] = v46;
    v43[2] = v47;
    v17 = v14 - a6;
    LOWORD(v62) = 257;
    v15 = v43;
    v16 = a2 + 34;
  }
  else
  {
    v42[0] = v48;
    v42[1] = v49;
    v42[2] = v50;
    LOWORD(v62) = 257;
    v15 = v42;
    v16 = a2 + 34;
    v17 = a5;
  }
  sub_22F24D74C(v16, (uint64_t)v15, v17, (uint64_t)&v60, (uint64_t)&v45);
  v18 = sub_22E66C868(a2[18] + 280, *(_QWORD *)(a7 + 32), 0);
  v41[0] = v48;
  v41[1] = v49;
  v41[2] = v50;
  LOWORD(v59) = 257;
  sub_22E3BEE6C(a2 + 34, v41, v18, (uint64_t)&v57, (uint64_t)&v60);
  v48 = v60;
  v49 = v61;
  v50 = v62;
  v40[0] = v45;
  v40[1] = v46;
  v40[2] = v47;
  LOWORD(v59) = 257;
  sub_22E3BEE6C(a2 + 34, v40, v18, (uint64_t)&v57, (uint64_t)&v60);
  v45 = v60;
  v46 = v61;
  v47 = v62;
  v39[0] = v48;
  v39[1] = v49;
  v39[2] = v50;
  v19 = sub_22E3C43AC(a2 + 34, (uint64_t)v39, ".vareal");
  v38[0] = v45;
  v38[1] = v46;
  v38[2] = v47;
  v20 = sub_22E3C43AC(a2 + 34, (uint64_t)v38, ".vaimag");
  *(_QWORD *)&v60 = "vacplx";
  LOWORD(v62) = 259;
  v21 = sub_22F25E4D4((uint64_t)a2, a4, (uint64_t)&v60, 0);
  v23 = 0;
  v24 = v21 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v24 = 0;
  v25 = v22 & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= 7)
    v25 = 0;
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = v25;
  if (v21 >= 8)
    v23 = 1 << (v22 & 7 | (8 * (v21 & 7)));
  *(_QWORD *)(a1 + 16) = v23;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_22E6281E0((_QWORD *)a2[18], a4, (uint64_t)v55);
  v26 = *(_OWORD *)(a1 + 16);
  v60 = *(_OWORD *)a1;
  v61 = v26;
  v62 = *(_OWORD *)(a1 + 32);
  v27 = *(_QWORD *)(a2[18] + 144);
  v57 = v55[0];
  v58 = v55[1];
  v59 = v56;
  v30 = 0uLL;
  LODWORD(v31) = 0;
  *((_QWORD *)&v29 + 1) = 0;
  *((_QWORD *)&v31 + 1) = 0;
  *(_QWORD *)&v32 = 0;
  v33 = 0uLL;
  *(_QWORD *)((char *)&v34 + 4) = 2;
  LODWORD(v29) = 0;
  v36 = 0u;
  v35 = 0u;
  sub_22E3C113C((uint64_t)&v29, &v60, a4, 2, &v57, v27);
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = a2 + 34;
  LOWORD(v58) = 0;
  v66 = v35;
  v67 = v36;
  v68 = v37;
  v62 = v31;
  v63 = v32;
  v64 = v33;
  v65 = v34;
  v60 = v29;
  v61 = v30;
  return sub_22E5025C8((uint64_t *)&v57, v19, v20, (uint64_t)&v60, 1);
}

uint64_t sub_22E6AB928(uint64_t a1, llvm::LLVMContext *a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v7 = a1 + 272;
  v8 = llvm::ConstantInt::get();
  v9 = llvm::ConstantInt::get();
  v10 = llvm::ConstantInt::get();
  if (a3)
    v11 = v9;
  else
    v11 = v8;
  sub_22E6A4C7C(v7, a2, v11, 0, 0x1Fu);
  sub_22E6A4C7C(v7, a2, v9, 32, 0x3Fu);
  sub_22E6A4C7C(v7, a2, v11, 64, 0x43u);
  sub_22E6A4C7C(v7, a2, v8, 68, 0x4Cu);
  sub_22E6A4C7C(v7, a2, v10, 77, 0x6Cu);
  result = sub_22E6A4C7C(v7, a2, v11, 109, 0x6Eu);
  if ((a4 & 1) == 0)
  {
    result = sub_22E6A4C7C(v7, a2, v11, 111, 0x71u);
    if (a3)
      return sub_22E6A4C7C(v7, a2, v9, 114, 0x74u);
  }
  return result;
}

_QWORD *sub_22E6ABA8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6ABACC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6ABB1C()
{
  return 1;
}

uint64_t sub_22E6ABB24(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  sub_22E6AB928(a2, a3, 0, 0);
  return 0;
}

void sub_22E6ABB50()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6ABB64(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  llvm::LLVMContext *v6;
  uint64_t IntNTy;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[27];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    if ((sub_22E619D68(v5)
       || ((v8 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)) != 0 ? (v9 = *(_BYTE *)(v8 + 16) == 31) : (v9 = 0),
           (v9
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
         && (v8 = sub_22F10CF48(v8)) != 0)
        && sub_22F28C8B4(v8)))
      && *(_BYTE *)(a1 + 21)
      && (v6 = (llvm::LLVMContext *)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)), (unint64_t)v6 <= 0x40))
    {
      if (v6)
      {
        IntNTy = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v6);
        v13[24] = 0;
        *(_QWORD *)&v13[16] = 0;
        *(_OWORD *)v13 = (unint64_t)IntNTy;
        *(_WORD *)&v13[25] = 128;
      }
      else
      {
        memset(v13, 0, 24);
        v13[24] = 4;
        *(_WORD *)&v13[25] = 0;
      }
    }
    else
    {
      sub_22E69BE7C((unint64_t)v13, a1, v5);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v13;
    result = *(double *)&v13[11];
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v13[11];
  }
  v10 = *(_DWORD *)(a2 + 36);
  if (v10)
  {
    v11 = a2 + 80;
    v12 = v11 + 40 * v10;
    do
    {
      sub_22E69BAA8((uint64_t)v13, a1, *(_QWORD *)v11);
      *(_OWORD *)(v11 + 8) = *(_OWORD *)v13;
      result = *(double *)&v13[11];
      *(_OWORD *)(v11 + 19) = *(_OWORD *)&v13[11];
      v11 += 40;
    }
    while (v11 != v12);
  }
  return result;
}

void sub_22E6ABCD0(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  llvm::LLVMContext *v42;
  uint64_t *v43;
  uint64_t v44;
  llvm::LLVMContext *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  llvm::LLVMContext *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  llvm::LLVMContext *v63;
  uint64_t v64;
  llvm::Type **v65;
  uint64_t v66;
  llvm::LLVMContext *v67;
  llvm::Type **v68;
  unint64_t v69;
  __int128 v70;
  llvm::Value *v71;
  uint64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Type **v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  _BOOL4 v101;
  uint64_t *v102;
  _OWORD v103[3];
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  _OWORD v108[3];
  _OWORD v109[3];
  _OWORD v110[3];
  unsigned __int8 *v111[4];
  __int16 v112;
  __int128 v113[3];
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  _OWORD v118[3];
  _OWORD v119[3];
  _QWORD v120[3];
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[3];
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130[3];
  _QWORD v131[4];
  __int128 v132;
  _QWORD v133[3];
  int v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[3];
  _OWORD v141[3];
  _OWORD v142[3];
  _OWORD v143[3];
  _OWORD v144[3];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150[4];

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)(v10 + 24) + 68);
  v12 = v11 > 0x21;
  v13 = (1 << v11) & 0x3F0000888;
  if (!v12 && v13 != 0)
  {
    v15 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
    sub_22EF5CCD0(*(_QWORD *)(v10 + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v137);
    v16 = *v15;
    if (*v15)
      v17 = *(_BYTE *)(*v15 + 16) == 12;
    else
      v17 = 0;
    if (!v17)
    {
      v18 = a4;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
      {
LABEL_12:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1)
        {
          v21 = sub_22E6A8A40(v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
          if (v21
            && ((v22 = v21,
                 v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
                 v23 != 11)
              ? (v24 = 0)
              : (v24 = *(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0)),
                (v23 - 55) <= 1 && sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v21) == 128
             || v24 && ((*(_DWORD *)(v24 + 16) >> 19) & 0x1FEu) - 210 <= 7))
          {
            v20 = 4;
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
               - 55 < 2)
              v20 = 16;
          }
          else
          {
            v20 = 4;
          }
        }
        else
        {
          v19 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v15);
          v20 = 4;
          if (v19 == 128)
            v20 = 16;
        }
        *((_QWORD *)&v137 + 1) = v20;
        v25 = a3[1];
        v150[0] = *a3;
        v150[1] = v25;
        v150[2] = a3[2];
        sub_22E69BAA8((uint64_t)&v145, a1, a4);
        v148 = v137;
        v149 = v138;
        sub_22E6A094C(a5, a2, v150, a4, BYTE8(v146) == 2, (uint64_t *)&v148, 4, 1);
        return;
      }
      v16 = sub_22F10CF48(v16);
      if (!v16)
      {
        v18 = a4;
        goto LABEL_12;
      }
    }
    v18 = *(_QWORD *)(v16 + 32);
    v15 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_12;
  }
  v26 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v27)
    v28 = *(_BYTE *)(v27 + 16) == 12;
  else
    v28 = 0;
  if (v28)
    goto LABEL_36;
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_DWORD *)(v29 + 16);
  if (v30 == 12)
  {
    if (sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
    {
LABEL_36:
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 16) = 0;
LABEL_37:
      *(_QWORD *)(a5 + 32) = 0;
      *(_QWORD *)(a5 + 40) = 0;
      return;
    }
    v27 = *v26;
    v29 = *(_QWORD *)(*(_QWORD *)(*v26 + 8) & 0xFFFFFFFFFFFFFFF0);
    v30 = *(_DWORD *)(v29 + 16);
  }
  if (v30 == 9)
    goto LABEL_49;
  if (v30 == 44)
  {
    v31 = sub_22F114198(*(_QWORD *)(v29 + 24));
    if ((*(_BYTE *)(v31 + 74) & 1) == 0 && *(_QWORD *)(v31 + 128) < 8uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v29 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_50;
    }
    v27 = *v26;
LABEL_49:
    v32 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v27) == 64;
    goto LABEL_51;
  }
  if (v30 == 11 && ((v30 >> 19) & 0x1FE) - 166 < 0x14)
    goto LABEL_49;
LABEL_50:
  v32 = 0;
LABEL_51:
  v33 = *v26;
  v34 = sub_22F10E0EC(*v26);
  v35 = v34 && sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v33) == 64;
  v82 = v34;
  if (sub_22E619D68(a4))
  {
    v101 = 1;
    goto LABEL_60;
  }
  v36 = *v26;
  if (*v26 && *(_BYTE *)(v36 + 16) == 31)
  {
LABEL_94:
    v101 = sub_22F28C8B4(v36);
    goto LABEL_60;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v36 = sub_22F10CF48(v36);
    if (!v36)
    {
      v101 = 0;
      goto LABEL_60;
    }
    goto LABEL_94;
  }
  v101 = 0;
LABEL_60:
  if (!v34 || *(_BYTE *)(a1 + 20))
  {
    v41 = a3[1];
    v144[0] = *a3;
    v144[1] = v41;
    v144[2] = a3[2];
    *(_QWORD *)&v137 = "gpr";
    LOWORD(v139) = 259;
    v38 = v144;
    v39 = (uint64_t *)(a2 + 272);
    v40 = 0;
  }
  else
  {
    v37 = a3[1];
    v143[0] = *a3;
    v143[1] = v37;
    v143[2] = a3[2];
    *(_QWORD *)&v137 = "fpr";
    LOWORD(v139) = 259;
    v38 = v143;
    v39 = (uint64_t *)(a2 + 272);
    v40 = 1;
  }
  sub_22E3C408C(v39, (uint64_t)v38, v40, (uint64_t)&v137, (uint64_t)&v145);
  v90 = v145;
  v142[0] = v145;
  v87 = v146;
  v88 = *((_QWORD *)&v145 + 1);
  v142[1] = v146;
  v85 = HIDWORD(v146);
  v86 = DWORD2(v146);
  v94 = *((_QWORD *)&v147 + 1);
  v95 = v147;
  v142[2] = v147;
  v43 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v142, "numUsedRegs");
  if (v32 || v35 && *(_BYTE *)(a1 + 20))
  {
    llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v42);
    v44 = llvm::ConstantInt::get();
    LOWORD(v139) = 257;
    v46 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v43, v44, 0, 0);
    if (!v46)
    {
      LOWORD(v147) = 257;
      v47 = llvm::BinaryOperator::Create();
      v46 = sub_22E3C12C8((uint64_t *)(a2 + 272), v47, (uint64_t)&v137);
    }
    llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v45);
    v48 = llvm::ConstantInt::get();
    LOWORD(v147) = 257;
    v43 = (uint64_t *)sub_22E3E49C4(a2 + 272, v46, v48, (uint64_t)&v145);
  }
  llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v42);
  v49 = llvm::ConstantInt::get();
  *(_QWORD *)&v145 = "cond";
  LOWORD(v147) = 259;
  v92 = (uint64_t)v43;
  v98 = sub_22E3C18F4(a2 + 272, 36, v43, v49, (uint64_t)&v145);
  *(_QWORD *)&v145 = "using_regs";
  LOWORD(v147) = 259;
  v50 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v145 = "using_overflow";
  LOWORD(v147) = 259;
  v51 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v145 = "cont";
  LOWORD(v147) = 259;
  v93 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v52 = llvm::User::operator new((llvm::User *)0x40);
  v97 = (_QWORD *)v51;
  MEMORY[0x23489C09C](v52, v50, v51, v98, 0);
  LOWORD(v147) = 257;
  v102 = (uint64_t *)(a2 + 272);
  sub_22E3C12C8((uint64_t *)(a2 + 272), v52, (uint64_t)&v145);
  v84 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
  v99 = v84;
  if (v101)
    v99 = llvm::PointerType::get();
  sub_22E5ED9B4((_QWORD *)a2, v50, 0);
  v53 = a3[1];
  v141[0] = *a3;
  v141[1] = v53;
  v141[2] = a3[2];
  LOWORD(v139) = 257;
  v54 = 4;
  sub_22E3C408C(v102, (uint64_t)v141, 4, (uint64_t)&v137, (uint64_t)&v145);
  v140[0] = v145;
  v140[1] = v146;
  v140[2] = v147;
  LOWORD(v139) = 257;
  v55 = sub_22E3C2A7C(v102, (uint64_t)v140, (uint64_t)&v137);
  v57 = *(_QWORD *)(a2 + 8);
  if (!v82)
  {
    v58 = v55;
    v60 = 0uLL;
    v83 = 0;
LABEL_79:
    v59 = 8;
    v81 = v60;
    goto LABEL_80;
  }
  if (*(_BYTE *)(a1 + 20))
  {
    v58 = v55;
    v60 = 0uLL;
    v83 = 0;
    v54 = 4;
    goto LABEL_79;
  }
  v133[0] = v55;
  v133[1] = v57;
  v133[2] = 8;
  v134 = 0;
  v136 = 0;
  v135 = 0;
  LOWORD(v117) = 257;
  sub_22F24D74C(v102, (uint64_t)v133, 32, (uint64_t)&v114, (uint64_t)&v137);
  v57 = *((_QWORD *)&v137 + 1);
  v58 = v137;
  v83 = *((_QWORD *)&v138 + 1);
  v59 = v138;
  v81 = v139;
  if (*(_BYTE *)(a1 + 20))
    v54 = 4;
  else
    v54 = 8;
LABEL_80:
  llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v56);
  v61 = llvm::ConstantInt::get();
  LOWORD(v139) = 257;
  v111[0] = (unsigned __int8 *)sub_22E3BDEA8((uint64_t)v102, v92, v61, (uint64_t)&v137, 0, 0);
  v131[0] = v58;
  v131[1] = v57;
  v131[2] = v59;
  v131[3] = v83;
  v132 = v81;
  LOWORD(v117) = 257;
  sub_22E480FFC(v102, (uint64_t)v131, v111, 1, v57, (v54 | v59) & -(v54 | v59), (const char **)&v114, (uint64_t)&v137);
  v130[0] = v137;
  v130[1] = v138;
  v130[2] = v139;
  LOWORD(v117) = 257;
  sub_22E3BEE6C(v102, v130, v99, (uint64_t)&v114, (uint64_t)&v137);
  v91 = v137;
  v62 = v138;
  v89 = v139;
  llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v63);
  v64 = llvm::ConstantInt::get();
  LOWORD(v117) = 257;
  v65 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344)
                                                                                           + 16))(*(_QWORD *)(a2 + 344), v92, v64, 0, 0);
  if (!v65)
  {
    LOWORD(v139) = 257;
    v66 = llvm::BinaryOperator::Create();
    v65 = (llvm::Type **)sub_22E3C12C8(v102, v66, (uint64_t)&v114);
  }
  v125[0] = v90;
  v125[1] = v88;
  v125[2] = v87;
  v126 = v86;
  v127 = v85;
  v128 = v95;
  v129 = v94;
  sub_22E3BEDDC((uint64_t)v102, v65, (uint64_t)v125);
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, v97, 0);
  llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v67);
  v68 = (llvm::Type **)llvm::ConstantInt::get();
  v120[0] = v90;
  v120[1] = v88;
  v120[2] = v87;
  v121 = v86;
  v122 = v85;
  v123 = v95;
  v124 = v94;
  sub_22E3BEDDC((uint64_t)v102, v68, (uint64_t)v120);
  if (v101)
  {
    v69 = *(unsigned __int8 *)(a2 + 130);
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v145);
    v69 = (v145 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  v70 = a3[1];
  v119[0] = *a3;
  v119[1] = v70;
  v119[2] = a3[2];
  LOWORD(v139) = 257;
  sub_22E3C408C(v102, (uint64_t)v119, 3, (uint64_t)&v137, (uint64_t)&v145);
  v118[0] = v145;
  v118[1] = v146;
  v118[2] = v147;
  v71 = (llvm::Value *)sub_22E3C43AC(v102, (uint64_t)v118, "argp.cur");
  v72 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v137 = v71;
  *((_QWORD *)&v137 + 1) = v72;
  *(_QWORD *)&v138 = 4;
  DWORD2(v138) = 0;
  v139 = 0uLL;
  v73 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), a4);
  if (v73 >= 5)
  {
    v74 = v73;
    *(_QWORD *)&v137 = sub_22E6A0CC4(a2, v71);
    *(_QWORD *)&v138 = v74;
    DWORD2(v138) = 0;
    v139 = 0uLL;
  }
  v113[0] = v137;
  v113[1] = v138;
  v113[2] = v139;
  v112 = 257;
  sub_22E3BEE6C(v102, v113, v99, (uint64_t)v111, (uint64_t)&v114);
  v100 = v114;
  v75 = v115;
  v76 = v116;
  v96 = v117;
  v110[0] = v137;
  v110[1] = v138;
  v110[2] = v139;
  LOWORD(v117) = 257;
  sub_22F24D74C(v102, (uint64_t)v110, v69, (uint64_t)&v114, (uint64_t)&v137);
  if ((BYTE8(v138) & 3) != 0)
    v77 = (llvm::Type **)sub_22F28ABCC(&v137, (_QWORD *)a2);
  else
    v77 = (llvm::Type **)v137;
  v109[0] = v145;
  v109[1] = v146;
  v109[2] = v147;
  sub_22E3BEDDC((uint64_t)v102, v77, (uint64_t)v109);
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, v93, 0);
  v108[1] = v62;
  v108[2] = v89;
  v104 = v100;
  v105 = v75;
  v106 = v76;
  v107 = v96;
  v108[0] = v91;
  *(_QWORD *)&v145 = "vaarg.addr";
  LOWORD(v147) = 259;
  sub_22E6A7D00(a5, (_QWORD *)a2, (uint64_t)v108, (uint64_t)v50, (uint64_t)&v104, (uint64_t)v97, (uint64_t)&v145);
  if (v101)
  {
    v78 = *(_OWORD *)(a5 + 16);
    v103[0] = *(_OWORD *)a5;
    v103[1] = v78;
    v103[2] = *(_OWORD *)(a5 + 32);
    v79 = sub_22E3C43AC(v102, (uint64_t)v103, "aggr");
    v80 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4);
    *(_QWORD *)a5 = v79;
    *(_QWORD *)(a5 + 8) = v84;
    *(_QWORD *)(a5 + 16) = v80;
    *(_DWORD *)(a5 + 24) = 0;
    goto LABEL_37;
  }
}

_QWORD *sub_22E6AC988(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AC9C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6ACA18()
{
  return 1;
}

uint64_t sub_22E6ACA20(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  sub_22E6AB928(a2, a3, 1, 0);
  return 0;
}

void sub_22E6ACA4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22E6ACA60(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t result;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  unint64_t v40;
  unint64_t v41;
  llvm::ArrayType *v42;
  llvm::Type *v43;
  BOOL v44;
  _BOOL4 v45;
  unint64_t v46;
  int v47;
  llvm::Type *v48;
  unint64_t v49;
  BOOL v50;
  llvm::ArrayType *v51;
  uint64_t v52;
  _BOOL4 v53;
  llvm::Type *v54;
  llvm::Type *v55;
  uint64_t v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((result & 1) == 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v10)
      v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531;
    else
      v11 = 0;
    if (v11)
    {
      result = 0;
    }
    else
    {
      v12 = *(_DWORD *)(v10 + 16);
      if (v12 == 12)
      {
LABEL_7:
        result = 0;
LABEL_8:
        v13 = 0;
        v14 = 0;
        v15 = 128;
LABEL_11:
        *(_QWORD *)(a2 + 48) = result;
        *(_QWORD *)(a2 + 56) = 0;
        *(_DWORD *)(a2 + 64) = v13;
        *(_DWORD *)(a2 + 68) = 0;
        *(_BYTE *)(a2 + 72) = v14;
        *(_WORD *)(a2 + 73) = v15;
        goto LABEL_12;
      }
      if ((v12 - 55) <= 1)
      {
        v49 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v9);
        if (v49 >= 0x81)
        {
          v13 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7);
          result = 0;
          v15 = 8;
LABEL_88:
          v14 = 2;
          goto LABEL_11;
        }
        if (v49 != 128)
        {
LABEL_106:
          result = llvm::IntegerType::get();
          goto LABEL_8;
        }
        v9 = *v8;
      }
      if (v9)
        v50 = *(_BYTE *)(v9 + 16) == 9;
      else
        v50 = 0;
      if ((v50
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
         && (v9 = sub_22F10CF48(v9)) != 0)
        && (*(_DWORD *)(v9 + 32) & 0x1FFFFFEu) >= 0x101)
      {
        v13 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7);
        result = 0;
        v15 = 0;
        goto LABEL_88;
      }
      if (!sub_22E619D68(v7)
        && (((v52 = *v8) == 0 || *(_BYTE *)(v52 + 16) != 31)
         && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
          || (v52 = sub_22F10CF48(v52)) == 0)
         || !sub_22F28C8B4(v52)))
      {
        if (sub_22E6AD4C4(a1, v7))
        {
          v53 = sub_22F110B20(*v8);
          result = 0;
          v13 = 0;
          if (v53)
            v15 = 256;
          else
            v15 = 0;
          v14 = 1;
          goto LABEL_11;
        }
        goto LABEL_7;
      }
      v54 = 0;
      v55 = 0;
      if (*(_DWORD *)(a1 + 20) == 1
        && sub_22E699750((_QWORD *)a1, v7, (uint64_t *)&v55, (unint64_t *)&v54))
      {
        v51 = (llvm::ArrayType *)sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)((unint64_t)v55 & 0xFFFFFFFFFFFFFFF0));
        result = llvm::ArrayType::get(v51, v54);
        goto LABEL_8;
      }
      result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v8);
      if (*(_DWORD *)(a1 + 20) != 1 || result > 0x80)
      {
        v13 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7);
        result = 0;
        v15 = 8;
        v14 = 2;
        goto LABEL_11;
      }
      if (result)
      {
        if (result >= 0x41)
        {
          v56[0] = llvm::IntegerType::get();
          v56[1] = v56[0];
          result = llvm::StructType::get();
          goto LABEL_8;
        }
        goto LABEL_106;
      }
    }
    v13 = 0;
    v15 = 0;
    v14 = 4;
    goto LABEL_11;
  }
LABEL_12:
  v16 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 40 * v16;
    while (1)
    {
      v19 = sub_22E6A8A40(*(_QWORD *)(a2 + v17 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      if (!v19)
        break;
      v20 = v19;
      v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v22 = v21 == 11 ? *(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) : 0;
      if (((v21 - 55) > 1 || sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v19) != 128)
        && (!v22 || ((*(_DWORD *)(v22 + 16) >> 19) & 0x1FEu) - 210 > 7))
      {
        break;
      }
      result = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v20 & 0xFFFFFFFFFFFFFFF0));
      v23 = a2 + v17;
      *(_QWORD *)(v23 + 96) = 0;
      *(_QWORD *)(v23 + 104) = 0;
      v24 = v3 & 0xFE00;
      v3 = v3 & 0xFFFFFE00 | 0xC0;
      *(_QWORD *)(v23 + 88) = result;
      *(_BYTE *)(v23 + 112) = 0;
      *(_WORD *)(v23 + 113) = v24 | 0xC0;
LABEL_27:
      v17 += 40;
      if (v18 == v17)
        return result;
    }
    v25 = sub_22E69BD58(*(_QWORD *)(a2 + v17 + 80));
    v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
    v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 12)
    {
LABEL_24:
      v29 = 0;
      v30 = 0;
      result = 0;
LABEL_25:
      v2 = v2 & 0xFFFFFE00 | 0x80;
LABEL_26:
      v31 = a2 + v17;
      *(_QWORD *)(v31 + 88) = result;
      *(_QWORD *)(v31 + 96) = 0;
      *(_DWORD *)(v31 + 104) = v30;
      *(_DWORD *)(v31 + 108) = 0;
      *(_BYTE *)(v31 + 112) = v29;
      *(_WORD *)(v31 + 113) = v2;
      goto LABEL_27;
    }
    v32 = v25;
    if ((v28 - 55) <= 1)
    {
      v33 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v27);
      if (v33 >= 0x81)
      {
        v30 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v32);
        result = 0;
        v2 &= 0xFFFFFE00;
        v29 = 2;
        goto LABEL_26;
      }
      if (v33 != 128)
        goto LABEL_63;
      v27 = *v26;
    }
    if (v27)
      v34 = *(_BYTE *)(v27 + 16) == 9;
    else
      v34 = 0;
    if ((v34
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
       && (v27 = sub_22F10CF48(v27)) != 0)
      && (*(_DWORD *)(v27 + 32) & 0x1FFFFFEu) >= 0x101)
    {
      v30 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v32);
      result = 0;
      v2 = v2 & 0xFFFFFE00 | 8;
LABEL_47:
      v29 = 2;
      goto LABEL_26;
    }
    v35 = sub_22E619D68(v32);
    v36 = *v26;
    if (!v35)
    {
      if (v36)
        v44 = *(_BYTE *)(v36 + 16) == 31;
      else
        v44 = 0;
      if (!v44
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
         || (v36 = sub_22F10CF48(v36)) == 0)
        || !sub_22F28C8B4(v36))
      {
        if (sub_22E6AD4C4(a1, v32))
        {
          v45 = sub_22F110B20(*v26);
          v30 = 0;
          result = 0;
          if (v45)
            v2 = v2 & 0xFFFFFE00 | 0x100;
          else
            v2 &= 0xFFFFFE00;
          v29 = 1;
          goto LABEL_26;
        }
        goto LABEL_24;
      }
      v36 = *v26;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v37)
    {
      if (*(_BYTE *)(v37 + 16) == 45)
      {
        v38 = sub_22E69BE08(v37, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
        if (v38)
        {
          v39 = v38 == 1;
          v30 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v32);
          result = 0;
          v2 = v2 & 0xFFFFFE00 | (8 * v39);
          goto LABEL_47;
        }
      }
    }
    v40 = sub_22E6AD5A4(a1, v32);
    v41 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v32);
    v55 = 0;
    v56[0] = 0;
    if (*(_DWORD *)(a1 + 20) == 1 && sub_22E699750((_QWORD *)a1, v32, v56, (unint64_t *)&v55))
    {
      v42 = (llvm::ArrayType *)sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v56[0] & 0xFFFFFFFFFFFFFFF0));
      v43 = v55;
LABEL_69:
      result = llvm::ArrayType::get(v42, v43);
      goto LABEL_70;
    }
    v46 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v26);
    if (v46 - 1 > 0x1FF)
    {
      result = 0;
      if (v41 <= v40)
        v47 = 8;
      else
        v47 = 24;
      v2 = v47 | v2 & 0xFFFFFE00;
      v29 = 2;
      v30 = v40;
      goto LABEL_26;
    }
    if (v46 > 0x40)
    {
      v48 = (llvm::Type *)((unsigned __int16)(v46 + 8 * v40 - 1) / (unsigned __int16)(8 * v40));
      v42 = (llvm::ArrayType *)llvm::IntegerType::get();
      v43 = v48;
      goto LABEL_69;
    }
LABEL_63:
    result = llvm::IntegerType::get();
LABEL_70:
    v29 = 0;
    v30 = 0;
    goto LABEL_25;
  }
  return result;
}

double sub_22E6AD178@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21[3];
  _OWORD v22[3];

  v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v21);
  v11 = sub_22E6AD5A4(a1, a4);
  v12 = *v10;
  if (*v10)
    v13 = *(_BYTE *)(*v10 + 16) == 12;
  else
    v13 = 0;
  if ((v13
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12
     && (v12 = sub_22F10CF48(*v10)) != 0)
    && (v14 = v21[0], v21[0] <= 15))
  {
    if (v21[0] < 0)
      v14 = v21[0] + 1;
    v15 = a3[1];
    v20[0] = *a3;
    v20[1] = v15;
    v20[2] = a3[2];
    sub_22E6AB59C(a5, a2, v20, a4, 8, v14 >> 1, v12);
  }
  else
  {
    v17 = a3[1];
    v22[0] = *a3;
    v22[1] = v17;
    v22[2] = a3[2];
    v18 = v21[0];
    v19 = sub_22E66C868(a2[18] + 280, a4, 0);
    return sub_22E6A0A7C(a5, a2, (uint64_t)v22, v19, v18, v11, 8, 1);
  }
  return result;
}

BOOL sub_22E6AD2B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v9;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_DWORD *)(v4 + 16) == 11;
  else
    v5 = 0;
  if (v5)
  {
    if (((*(_DWORD *)(v4 + 16) >> 19) & 0x1FFu) - 211 <= 6 && ((1 << ((*(_DWORD *)(v4 + 16) >> 19) + 45)) & 0x47) != 0)
      return *(_BYTE *)(a1 + 24) == 0;
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15088);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9))
    {
      if ((*(_DWORD *)(v4 + 16) & 0xFF80000) == 0x6C00000)
        return *(_BYTE *)(a1 + 24) == 0;
    }
  }
  v6 = sub_22E3E4B64(*v3);
  return v6 && sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6) == 128;
}

BOOL sub_22E6AD394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15088);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  v10 = !v9 && (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 113246219;
  if (v10 || *(_DWORD *)(v8 + 16) - 55 < 2)
    v11 = 1;
  else
    v11 = ((unint64_t)(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2) + 63) >> 6);
  return (unint64_t)(v11 * a3) < 9;
}

BOOL sub_22E6AD444(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6AD4BC()
{
  return 0;
}

BOOL sub_22E6AD4C4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 44)
  {
    v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
    v2 = sub_22E496830(v5);
  }
  if (sub_22F2A3AE4(a1, v2))
    return 1;
  v7 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(v8 + 16);
  if (v8)
    v10 = v9 == 11;
  else
    v10 = 0;
  if (!v10)
  {
    if (*(_BYTE *)(v7 + 16) != 9)
    {
      if (v9 != 9)
        return 0;
      v7 = sub_22F10CF48(v7);
      if (!v7)
        return 0;
    }
    return (*(_DWORD *)(v7 + 32) & 0x1FFFF80) == 0;
  }
  if (((((*(_DWORD *)(v8 + 16) >> 19) & 0x1FF) - 174) & 0xFFFFFFF7) == 0)
    return 1;
  if (*(_BYTE *)(v7 + 16) == 9)
    return (*(_DWORD *)(v7 + 32) & 0x1FFFF80) == 0;
  return 0;
}

uint64_t sub_22E6AD5A4(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  llvm::APFloatBase *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  llvm::APFloatBase *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 12;
  else
    v5 = 0;
  if (v5
    || (v6 = a2, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    && (v4 = sub_22F10CF48(v4)) != 0)
  {
    v6 = *(_QWORD *)(v4 + 32);
    v3 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  }
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v7 - 55) <= 1)
  {
    v8 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v3) == 128;
    goto LABEL_10;
  }
  if (v7 == 11
    && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    v10 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6);
    if (v10 == (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v10))
      return 16;
  }
  v11 = sub_22E6A8A40(v6, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (v11)
  {
    v12 = v11;
    v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v14 = v13 == 11 ? *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) : 0;
    if ((v13 - 55) <= 1 && sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v11) == 128
      || v14 && ((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      v24 = 0;
      goto LABEL_29;
    }
  }
  v23 = 0;
  v24 = 0;
  if (*(_DWORD *)(a1 + 20) != 1
    || !sub_22E619D68(v6)
    && (((v18 = *v3) == 0 || *(_BYTE *)(v18 + 16) != 31)
     && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
      || (v18 = sub_22F10CF48(v18)) == 0)
     || !sub_22F28C8B4(v18))
    || !sub_22E699750((_QWORD *)a1, v6, &v24, &v23)
    || (v12 = v24) == 0)
  {
    v19 = sub_22E619D68(v6);
    v20 = *v3;
    if (!v19)
    {
      if (!v20 || *(_BYTE *)(v20 + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          return 8;
        v22 = sub_22F10CF48(*v3);
        if (!v22)
          return 8;
        v20 = v22;
      }
      if (!sub_22F28C8B4(v20))
        return 8;
      v20 = *v3;
    }
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v20);
    if ((v21 & 0xFFFFFF80) != 0)
      return 16;
    return 8;
  }
LABEL_29:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2)
    return 16;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_DWORD *)(v15 + 16) == 11;
  else
    v16 = 0;
  if (!v16 || ((*(_DWORD *)(v15 + 16) >> 19) & 0x1FEu) - 210 > 7)
    return 8;
  v17 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v12 & 0xFFFFFFFFFFFFFFF0);
  v8 = v17 == (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v17);
LABEL_10:
  if (v8)
    return 16;
  else
    return 8;
}

_QWORD *sub_22E6AD880(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AD8C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6AD910()
{
  return 1;
}

uint64_t sub_22E6AD918(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  sub_22E6AB928(a2, a3, 1, 0);
  return 0;
}

_QWORD *sub_22E6AD940(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AD980(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6AD9D0(int a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  char isDeclaration;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  isDeclaration = llvm::GlobalValue::isDeclaration(this);
  if (a2 && (isDeclaration & 1) == 0)
  {
    v8 = *(_DWORD *)(a2 + 28);
    if ((v8 & 0x7Fu) - 60 <= 6 && (*(_BYTE *)(*(_QWORD *)(a4 + 152) + 68) & 0x20) != 0)
    {
      if (sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))
        || sub_22F115220(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)))
      {
        sub_22E6AE61C((uint64_t)this);
      }
    }
    else if ((v8 & 0x7Eu) - 52 <= 5)
    {
      if ((*(_DWORD *)(*(_QWORD *)(a4 + 152) + 52) & 0x40000000) != 0 && sub_22E47290C(a2))
      {
        sub_22E6AE61C((uint64_t)this);
        llvm::Function::addFnAttr();
      }
      if ((*(_BYTE *)(*(_QWORD *)(a4 + 152) + 68) & 0x20) != 0)
      {
        if (sub_22E462B18(a2))
          sub_22E6AE61C((uint64_t)this);
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v10 = *(uint64_t **)v9;
          v11 = *(unsigned int *)(v9 + 8);
          i = *(uint64_t **)v9;
          if ((_DWORD)v11)
          {
            v13 = 8 * v11;
            for (i = *(uint64_t **)v9; *(_WORD *)(*i + 32) != 136; ++i)
            {
              v13 -= 8;
              if (!v13)
                return;
            }
          }
          if (i != &v10[v11])
          {
            do
            {
              v15 = *v10++;
              v14 = v15;
            }
            while (*(_WORD *)(v15 + 32) != 136);
            sub_22F007D7C(*(unsigned __int8 **)(v14 + 40), *(_QWORD *)(a4 + 144), 0, (uint64_t)&v20);
            v23 = v20;
            v24 = v21;
            v25 = v22;
            if (sub_22E42E8B8((uint64_t)&v23, 0))
              sub_22E6AE61C((uint64_t)this);
            v16 = *(unsigned __int8 **)(v14 + 48);
            if (v16)
            {
              sub_22F007D7C(v16, *(_QWORD *)(a4 + 144), 0, (uint64_t)&v17);
              v20 = v17;
              v21 = v18;
              v22 = v19;
              if (sub_22E42E8B8((uint64_t)&v20, 0))
                sub_22E6AE61C((uint64_t)this);
              if (v21 >= 0x41 && v20)
                MEMORY[0x2348A0E84](v20, 0x1000C8000313F17);
            }
            if (v24 >= 0x41)
            {
              if (v23)
                MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_22E6ADCEC()
{
  return 0;
}

uint64_t sub_22E6ADCF4(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), a2);
}

uint64_t sub_22E6ADD08(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), a2);
}

uint64_t sub_22E6ADD1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  uint64_t v14;
  _OWORD v15[8];
  uint64_t v16;

  v4 = *(_OWORD *)(a3 + 112);
  v15[6] = *(_OWORD *)(a3 + 96);
  v15[7] = v4;
  v16 = *(_QWORD *)(a3 + 128);
  v5 = *(_OWORD *)(a3 + 48);
  v15[2] = *(_OWORD *)(a3 + 32);
  v15[3] = v5;
  v6 = *(_OWORD *)(a3 + 80);
  v15[4] = *(_OWORD *)(a3 + 64);
  v15[5] = v6;
  v7 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v7;
  v8 = *(_OWORD *)(a4 + 112);
  v13[6] = *(_OWORD *)(a4 + 96);
  v13[7] = v8;
  v14 = *(_QWORD *)(a4 + 128);
  v9 = *(_OWORD *)(a4 + 48);
  v13[2] = *(_OWORD *)(a4 + 32);
  v13[3] = v9;
  v10 = *(_OWORD *)(a4 + 80);
  v13[4] = *(_OWORD *)(a4 + 64);
  v13[5] = v10;
  v11 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v11;
  sub_22E6AE704(a2, (uint64_t)v15, (uint64_t)v13);
  return 1;
}

uint64_t sub_22E6ADDA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  uint64_t v14;
  _OWORD v15[8];
  uint64_t v16;

  v4 = *(_OWORD *)(a3 + 112);
  v15[6] = *(_OWORD *)(a3 + 96);
  v15[7] = v4;
  v16 = *(_QWORD *)(a3 + 128);
  v5 = *(_OWORD *)(a3 + 48);
  v15[2] = *(_OWORD *)(a3 + 32);
  v15[3] = v5;
  v6 = *(_OWORD *)(a3 + 80);
  v15[4] = *(_OWORD *)(a3 + 64);
  v15[5] = v6;
  v7 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v7;
  v8 = *(_OWORD *)(a4 + 112);
  v13[6] = *(_OWORD *)(a4 + 96);
  v13[7] = v8;
  v14 = *(_QWORD *)(a4 + 128);
  v9 = *(_OWORD *)(a4 + 48);
  v13[2] = *(_OWORD *)(a4 + 32);
  v13[3] = v9;
  v10 = *(_OWORD *)(a4 + 80);
  v13[4] = *(_OWORD *)(a4 + 64);
  v13[5] = v10;
  v11 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v11;
  sub_22E6AE704(a2, (uint64_t)v15, (uint64_t)v13);
  return 1;
}

void sub_22E6ADE28()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6ADE3C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  llvm::ArrayType *IntNTy;
  __int16 v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  _BOOL4 v44;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((result & 1) == 0)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_DWORD *)(v8 + 16);
    if (v8)
      v10 = (v9 & 0xFF800FF) == 86507531;
    else
      v10 = 0;
    if (v10)
    {
      result = 0;
      v19 = 0;
      v20 = 4;
LABEL_38:
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = result;
      *(_BYTE *)(a2 + 72) = v20;
      *(_WORD *)(a2 + 73) = v19;
      goto LABEL_39;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 2000) + 72);
    if ((_DWORD)v11)
      v12 = (v11 & 0x800000000) == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = sub_22E6AE2B4(a1, *(_QWORD *)(a2 + 40));
      v14 = *v7;
      if (v13)
      {
        v15 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v14);
        sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v7);
        if (v16 >= 0x40)
          v17 = 64;
        else
          v17 = v16;
        IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), (llvm::LLVMContext *)v17);
        result = llvm::ArrayType::get(IntNTy, (llvm::Type *)((v15 + v17 - 1) / v17));
        goto LABEL_37;
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      v9 = *(_DWORD *)(v8 + 16);
    }
    if (v9 == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v8 + 24));
      if ((*(_BYTE *)(v21 + 74) & 1) == 0 && *(_QWORD *)(v21 + 128) < 8uLL)
        goto LABEL_36;
    }
    else
    {
      if (v9 == 11)
      {
        if (((v9 >> 19) & 0x1FF) - 166 < 0x35)
          goto LABEL_28;
LABEL_36:
        result = 0;
LABEL_37:
        v20 = 0;
        v19 = 128;
        goto LABEL_38;
      }
      v22 = v9 > 0x27u;
      v23 = (1 << v9) & 0x8180001600;
      if (v22 || v23 == 0)
        goto LABEL_36;
    }
LABEL_28:
    v25 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v25 && *(_BYTE *)(v25 + 16) == 44)
    {
      v26 = sub_22F114198(*(_QWORD *)(v25 + 24));
      v6 = sub_22E496830(v26);
    }
    if (sub_22F2A3AE4(a1, v6))
    {
      v27 = sub_22F110B20(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
      result = 0;
      if (v27)
        v19 = 256;
      else
        v19 = 0;
      v20 = 1;
      goto LABEL_38;
    }
    goto LABEL_36;
  }
LABEL_39:
  v28 = *(_DWORD *)(a2 + 36);
  if (v28)
  {
    v29 = a2 + 80;
    v30 = a2 + 80 + 40 * v28;
    do
    {
      v31 = *(_QWORD *)v29;
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v32 && *(_BYTE *)(v32 + 16) == 44)
      {
        v33 = sub_22F114198(*(_QWORD *)(v32 + 24));
        v31 = sub_22E496830(v33);
      }
      if (sub_22E619D68(v31)
        || ((v37 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFF0), (v38 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0)) != 0)
          ? (v39 = *(_BYTE *)(v38 + 16) == 31)
          : (v39 = 0),
            (v39
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
          && (v38 = sub_22F10CF48(v38)) != 0)
         && sub_22F28C8B4(v38)))
      {
        v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        if ((*(_WORD *)(*(_QWORD *)(v34 + 2000) + 96) & 0x80) != 0)
        {
          if (sub_22F1151E0(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0)))
          {
            v43 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 304);
LABEL_66:
            result = v43();
            v36 = 0;
            v35 = 0;
LABEL_67:
            v2 = v2 & 0xFFFFFE00 | 0x80;
            goto LABEL_68;
          }
          if (sub_22F115220(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0)))
          {
            v43 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 312);
            goto LABEL_66;
          }
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        }
        v35 = sub_22EF5D130(v34, v31);
        result = 0;
        v2 = v2 & 0xFFFFFE00 | 8;
        v36 = 2;
      }
      else
      {
        v40 = *v37;
        if (*v37)
          v41 = *(_BYTE *)(*v37 + 16) == 9;
        else
          v41 = 0;
        if (!v41
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9
           || (v40 = sub_22F10CF48(*v37)) == 0)
          || (*(_DWORD *)(v40 + 32) & 0x1FFFFFEu) <= 0x100
          && ((v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15088),
               ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42) & 1) != 0)
           || (*(_DWORD *)(v40 + 32) & 0x1FFFFFEu) < 0x81))
        {
          if (sub_22F2A3AE4(a1, v31))
          {
            v44 = sub_22F110B20(*v37);
            v35 = 0;
            result = 0;
            if (v44)
              v2 = v2 & 0xFFFFFE00 | 0x100;
            else
              v2 &= 0xFFFFFE00;
            v36 = 1;
            goto LABEL_68;
          }
          v36 = 0;
          v35 = 0;
          result = 0;
          goto LABEL_67;
        }
        v35 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v31);
        result = 0;
        v2 = v2 & 0xFFFFFE00 | 8;
        v36 = 2;
      }
LABEL_68:
      *(_QWORD *)(v29 + 8) = result;
      *(_QWORD *)(v29 + 16) = 0;
      *(_DWORD *)(v29 + 24) = v35;
      *(_DWORD *)(v29 + 28) = 0;
      *(_BYTE *)(v29 + 32) = v36;
      *(_WORD *)(v29 + 33) = v2;
      v29 += 40;
    }
    while (v29 != v30);
  }
  if (!*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)(a1 + 16) << 8);
  return result;
}

BOOL sub_22E6AE2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  unsigned int v36;
  unsigned int v37;

  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v5 = a2 & 0xFFFFFFFFFFFFFFF0;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 15088) + 96))(*(_QWORD *)(v4 + 15088)) & 1) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v6 && (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 112197643)
        return 1;
    }
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 15088) + 88))(*(_QWORD *)(v4 + 15088));
    v9 = *(_QWORD *)v5;
    if ((v8 & 1) == 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
      v11 = *(_DWORD *)(v10 + 16);
      if (v10)
        v12 = (v11 & 0xFF800FF) == 113246219;
      else
        v12 = 0;
      if (v12)
        return 1;
      if (v10)
        v13 = *(_DWORD *)(v10 + 16) == 11;
      else
        v13 = 0;
      if (v13 && ((v11 >> 19) & 0x1FE) - 210 <= 7)
      {
        if (sub_22EF5CDF0(v4, v9) == 128)
          return 1;
        v9 = *(_QWORD *)v5;
      }
    }
    if (v9)
      v14 = *(_BYTE *)(v9 + 16) == 9;
    else
      v14 = 0;
    if (v14)
      goto LABEL_68;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9)
    {
      v15 = sub_22F10CF48(v9);
      if (v15)
      {
        v9 = v15;
LABEL_68:
        v36 = (*(_DWORD *)(v9 + 32) >> 1) & 0xFFFFFF;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 15088) + 48))(*(_QWORD *)(v4 + 15088)))
          v37 = 128;
        else
          v37 = 64;
        return v36 > v37;
      }
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 15088) + 48))(*(_QWORD *)(v4 + 15088)) & 1) == 0)
    {
      v16 = *(_QWORD *)v5;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
      v18 = *(_DWORD *)(v17 + 16);
      if (v17)
        v19 = v18 == 11;
      else
        v19 = 0;
      if (v19)
      {
        if (((*(_DWORD *)(v17 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_39;
      }
      else if (v17 && v18 == 44)
      {
        v20 = sub_22F114198(*(_QWORD *)(v17 + 24));
        if (((*(_BYTE *)(v20 + 74) & 1) != 0 || *(_QWORD *)(v20 + 128) > 7uLL)
          && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v17 + 24)) + 76) & 0x80) == 0)
        {
          v16 = *(_QWORD *)v5;
LABEL_39:
          if ((unint64_t)sub_22EF5CDF0(v4, v16) > 0x40)
            return 1;
        }
      }
      else if (v18 == 9)
      {
        goto LABEL_39;
      }
    }
    v21 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5 || (*(_DWORD *)(v21 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(v22 + 16) & 0xFEu) - 2 > 3)
      {
        v23 = *(_DWORD *)(v22 + 16);
        goto LABEL_46;
      }
      v21 = sub_22F10CF48(v21);
      if (!v21)
        break;
    }
    a2 = *(_QWORD *)(v21 + 32);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 != 45)
    return 0;
LABEL_46:
  v24 = sub_22F114198(*(_QWORD *)(v22 + 24));
  v25 = v24;
  if (v24)
    v26 = (*(_DWORD *)(v24 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v26 = 0;
  if (v26)
  {
    v27 = sub_22E46A3A0(v24);
    if (v27 != v28)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v31 = *(_QWORD *)(**(_QWORD **)(v29 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v31 + 8) & 0xF) != 0)
          v31 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v29 + 16));
        if ((sub_22E6AE2B4(a1, v31 & 0xFFFFFFFFFFFFFFF0) & 1) != 0)
          return 1;
        v29 += 24;
      }
      while (v29 != v30);
    }
  }
  v32 = sub_22EFC3B90(v25);
  if (!v32)
    return 0;
  v33 = v32;
  if ((sub_22E6AE2B4(a1, *(_QWORD *)(v32 + 48)) & 1) != 0)
    return 1;
  do
  {
    v33 = *(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF8;
    v34 = v33 != 0;
  }
  while (v33 && ((*(_DWORD *)(v33 + 28) & 0x7Fu) - 49 > 2 || !sub_22E6AE2B4(a1, *(_QWORD *)(v33 + 48))));
  return v34;
}

uint64_t sub_22E6AE61C(uint64_t a1)
{
  llvm::Type *v1;
  llvm::LLVMContext *v2;

  v1 = **(llvm::Type ***)(a1 + 40);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::Type::getInt32Ty(v1, v2);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

double sub_22E6AE704(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  llvm::Value *Declaration;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[8];
  uint64_t v24;
  _OWORD v25[8];
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a3 + 24);
  v27[0] = *(_OWORD *)(a3 + 8);
  v27[1] = v6;
  v28 = *(_OWORD *)(a3 + 40);
  if ((BYTE8(v6) & 3) != 0)
  {
    v7 = sub_22F28ABCC(v27, a1);
    if (!v7)
      goto LABEL_18;
  }
  else
  {
    v7 = *(_QWORD *)&v27[0];
    if (!*(_QWORD *)&v27[0])
      goto LABEL_18;
  }
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 > 0x14)
    goto LABEL_18;
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 50)
      goto LABEL_18;
    v9 = *(_DWORD *)(v7 + 20);
    v10 = (v9 & 0x40000000) != 0 ? *(uint64_t **)(v7 - 8) : (uint64_t *)(v7 - 32 * (v9 & 0x7FFFFFF));
    v7 = *v10;
    if (!*v10)
      goto LABEL_18;
    v8 = *(unsigned __int8 *)(v7 + 16);
  }
  if (v8 != 3)
  {
LABEL_18:
    v19 = *(_OWORD *)(a3 + 112);
    v25[6] = *(_OWORD *)(a3 + 96);
    v25[7] = v19;
    v26 = *(_QWORD *)(a3 + 128);
    v20 = *(_OWORD *)(a3 + 48);
    v25[2] = *(_OWORD *)(a3 + 32);
    v25[3] = v20;
    v21 = *(_OWORD *)(a3 + 80);
    v25[4] = *(_OWORD *)(a3 + 64);
    v25[5] = v21;
    v22 = *(_OWORD *)(a3 + 16);
    v25[0] = *(_OWORD *)a3;
    v25[1] = v22;
    v13 = sub_22F25F748((uint64_t)a1, (uint64_t)v25, 0);
    goto LABEL_16;
  }
  v29[1] = *(_QWORD *)v7;
  Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v12 = *((_QWORD *)Declaration + 3);
  else
    v12 = 0;
  v29[0] = v7;
  *(_QWORD *)&v27[0] = "texsurf_handle";
  LOWORD(v28) = 259;
  v13 = (uint64_t)sub_22E479C7C((uint64_t)a1, v12, Declaration, (uint64_t)v29, 1, (uint64_t)v27);
LABEL_16:
  v14 = *(_OWORD *)(a2 + 112);
  v23[6] = *(_OWORD *)(a2 + 96);
  v23[7] = v14;
  v24 = *(_QWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 48);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v15;
  v16 = *(_OWORD *)(a2 + 80);
  v23[4] = *(_OWORD *)(a2 + 64);
  v23[5] = v16;
  v17 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v17;
  return sub_22E4E87FC((uint64_t)a1, v13, (uint64_t)v23, 0);
}

_QWORD *sub_22E6AE8CC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AE90C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6AE95C(int a1, uint64_t a2, llvm::GlobalValue *this)
{
  char isDeclaration;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  BOOL v15;
  void *__p;
  char v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  isDeclaration = llvm::GlobalValue::isDeclaration(this);
  if (a2
    && (isDeclaration & 1) == 0
    && (*(_DWORD *)(a2 + 28) & 0x100) != 0
    && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22EFC8E88(a2);
    v7 = *(uint64_t **)v6;
    v8 = *(unsigned int *)(v6 + 8);
    i = *(uint64_t **)v6;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 204; ++i)
      {
        v10 -= 8;
        if (!v10)
          return;
      }
    }
    if (i != &v7[v8])
    {
      do
      {
        v12 = *v7++;
        v11 = v12;
      }
      while (*(_WORD *)(v12 + 32) != 204);
      *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xC00F | 0x450;
      llvm::Function::addFnAttr();
      v13 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v13)
      {
        v14 = (char *)&v19;
        do
        {
          *--v14 = (v13 % 0xA) | 0x30;
          v15 = v13 > 9;
          v13 /= 0xAuLL;
        }
        while (v15);
      }
      else
      {
        v14 = &v18;
        v18 = 48;
      }
      sub_22E3B4274(&__p, v14, (char *)&v19, (char *)&v19 - v14);
      llvm::Function::addFnAttr();
      if (v17 < 0)
        operator delete(__p);
    }
  }
}

void sub_22E6AEAF8()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6AEB0C(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[27];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      *(_OWORD *)v9 = 0uLL;
      *(_DWORD *)&v9[23] = 0;
      *(_QWORD *)&v9[16] = 0;
    }
    else
    {
      sub_22E69BE7C((unint64_t)v9, a1, v5);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v9;
    result = *(double *)&v9[11];
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v9[11];
  }
  v6 = *(_DWORD *)(a2 + 36);
  if (v6)
  {
    v7 = a2 + 80;
    v8 = v7 + 40 * v6;
    do
    {
      sub_22E6AEC50((uint64_t)v9, a1, *(_QWORD *)v7);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)v9;
      result = *(double *)&v9[11];
      *(_OWORD *)(v7 + 19) = *(_OWORD *)&v9[11];
      v7 += 40;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t sub_22E6AEBE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  char v10[32];
  _OWORD v11[3];

  v8 = a3[1];
  v11[0] = *a3;
  v11[1] = v8;
  v11[2] = a3[2];
  sub_22E6AEC50((uint64_t)v10, a1, a4);
  return sub_22E69B8E0(a5, a2, (uint64_t)v11, a4, v10[24]);
}

uint64_t sub_22E6AEC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
    return sub_22E69BAA8(a1, a2, a3);
  *(_BYTE *)(a1 + 24) = 0;
  v3 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 25) = v3;
  return a1;
}

_QWORD *sub_22E6AEC90(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6AECD0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6AED20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x100) != 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    sub_22EFC8E88(a2);
    v3 = *(uint64_t **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    i = *(uint64_t **)v2;
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      for (i = *(uint64_t **)v2; *(_WORD *)(*i + 32) != 290; ++i)
      {
        v6 -= 8;
        if (!v6)
          return;
      }
    }
    if (i != &v3[v4])
    {
      do
      {
        v8 = *v3++;
        v7 = v8;
      }
      while (*(_WORD *)(v8 + 32) != 290);
      v9 = *(int *)(v7 + 36);
      if (v9 <= 2)
        strlen(off_24FA6CFE0[v9]);
      llvm::Function::addFnAttr();
    }
  }
}

void sub_22E6AEE08()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6AEE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[27];
  int v24;
  int v25;

  v4 = *(_QWORD *)(a2 + 40);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 86507531;
    else
      v7 = 0;
    if (v7)
    {
      memset(v23, 0, 24);
      v23[24] = 4;
      *(_WORD *)&v23[25] = 0;
    }
    else
    {
      v24 = 2 * (*(_DWORD *)(a1 + 24) != 0);
      v25 = 2;
      sub_22E6AF200((uint64_t)v23, a1, v4, 1, &v25, &v24);
    }
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v23;
    result = *(double *)&v23[11];
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v23[11];
  }
  if (*(_BYTE *)(a2 + 72) == 2)
    goto LABEL_10;
  v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(v10 + 16);
  if (v10)
    v12 = v11 == 11;
  else
    v12 = 0;
  if (v12)
  {
    if (((v11 >> 19) & 0x1FF) - 166 >= 0x35)
      goto LABEL_33;
  }
  else if (v10 && v11 == 44)
  {
    v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
    if ((*(_BYTE *)(v13 + 74) & 1) == 0 && *(_QWORD *)(v13 + 128) < 8uLL)
      goto LABEL_33;
  }
  else
  {
    v14 = v11 > 0x27u;
    v15 = (1 << v11) & 0x8180001600;
    if (v14 || v15 == 0)
      goto LABEL_33;
  }
  if (sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v9) > (unint64_t)(2 * *(_DWORD *)(a1 + 20)))
  {
    v17 = *v9;
    if (!sub_22F10E0B8(v17) || !*(_DWORD *)(a1 + 24))
      goto LABEL_10;
    if (!v17 || *(_BYTE *)(v17 + 16) != 12)
      v17 = sub_22F10CF48(v17);
    if (sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0)) > (unint64_t)*(unsigned int *)(a1 + 24))
    {
LABEL_10:
      v8 = 7;
      goto LABEL_34;
    }
  }
LABEL_33:
  v8 = 8;
LABEL_34:
  v25 = v8;
  v24 = 8 * (*(_DWORD *)(a1 + 24) != 0);
  v18 = *(_DWORD *)(a2 + 36);
  if (*(_DWORD *)(a2 + 16) == -1)
    v19 = *(_DWORD *)(a2 + 36);
  else
    v19 = *(_DWORD *)(a2 + 16);
  if (v18)
  {
    v20 = 0;
    v21 = a2 + 80;
    v22 = v21 + 40 * v18;
    do
    {
      sub_22E6AF200((uint64_t)v23, a1, *(_QWORD *)v21, v20 < v19, &v25, &v24);
      *(_OWORD *)(v21 + 8) = *(_OWORD *)v23;
      result = *(double *)&v23[11];
      *(_OWORD *)(v21 + 19) = *(_OWORD *)&v23[11];
      ++v20;
      v21 += 40;
    }
    while (v21 != v22);
  }
  return result;
}

double sub_22E6AF0A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  double result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20[3];
  __int128 v21[3];
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  _OWORD v25[3];

  v10 = (unint64_t)*(unsigned int *)(a1 + 20) >> 3;
  if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4, 1, 0))
  {
    v11 = a3[1];
    v25[0] = *a3;
    v25[1] = v11;
    v25[2] = a3[2];
    v24 = 257;
    v12 = sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v25, (uint64_t)&v22);
    v13 = sub_22E6A7CA4(a2);
    *(_QWORD *)a5 = v12;
    *(_QWORD *)(a5 + 8) = v13;
    *(_QWORD *)(a5 + 16) = v10;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    v14 = *(_OWORD *)(a5 + 16);
    v21[0] = *(_OWORD *)a5;
    v21[1] = v14;
    v21[2] = *(_OWORD *)(a5 + 32);
    v15 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a4, 0);
    v24 = 257;
    *(_QWORD *)&result = sub_22E3BEE6C((uint64_t *)(a2 + 272), v21, v15, (uint64_t)&v22, a5).n128_u64[0];
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v22);
    v17 = a3[1];
    v20[0] = *a3;
    v20[1] = v17;
    v20[2] = a3[2];
    v18 = v22;
    v19 = v23;
    return sub_22E6A094C(a5, a2, v20, a4, (uint64_t)v22 > (uint64_t)(2 * v10), (uint64_t *)&v18, v10, 1);
  }
  return result;
}

void sub_22E6AF200(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  llvm::LLVMContext *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v30;
  int *v31;
  uint64_t *v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BOOL4 v54;
  llvm::ArrayType *v55;
  uint64_t v56;
  llvm::Type *v57;
  int64_t v58;
  llvm::ArrayType *Int8Ty;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  llvm::DataLayout *DataLayout;
  unint64_t ABITypeAlignment;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  llvm::LLVMContext *v73;
  int64_t v74;
  llvm::Type *v75;
  llvm::ArrayType *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  llvm::Type *v86;
  unsigned __int8 *v87;
  uint64_t v88[3];
  void *v89;
  uint64_t v90;
  _BYTE v91[16];
  void *v92;
  uint64_t v93;
  _QWORD v94[4];

  v94[3] = *MEMORY[0x24BDAC8D0];
  v11 = sub_22E69BD58(a3);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
  {
    if (*(_BYTE *)(v13 + 16) == 45)
    {
      v14 = sub_22E69BE08(v13, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32));
      if (v14)
      {
        if (*a5)
          --*a5;
        v15 = v14 == 1;
        v16 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 2;
        v17 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_DWORD *)(a1 + 16) = v16;
        v18 = v17 | (8 * v15);
        goto LABEL_107;
      }
    }
  }
  if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11, 1, 0))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 4;
    v18 = *(_WORD *)(a1 + 25) & 0xFE00;
LABEL_107:
    *(_WORD *)(a1 + 25) = v18;
    return;
  }
  v19 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v12);
  if (!a4)
    goto LABEL_43;
  v20 = *v12;
  if (sub_22F10E0EC(*v12) && !sub_22F10E0B8(v20) && v19 <= *(unsigned int *)(a2 + 24) && *a6)
  {
    v21 = *a6 - 1;
LABEL_78:
    *a6 = v21;
LABEL_105:
    *(_BYTE *)(a1 + 24) = 0;
    v18 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
LABEL_106:
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_107;
  }
  v22 = sub_22F10E0B8(v20);
  LODWORD(v23) = *(_DWORD *)(a2 + 24);
  if (v22 && (_DWORD)v23 && *a6 >= 2)
  {
    if (!v20 || *(_BYTE *)(v20 + 16) != 12)
      v20 = sub_22F10CF48(v20);
    v24 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0));
    v23 = *(unsigned int *)(a2 + 24);
    if (v24 <= v23)
    {
      v21 = *a6 - 2;
      goto LABEL_78;
    }
  }
  if (!(_DWORD)v23 || !sub_22F10DF70(*v12))
  {
LABEL_43:
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v12);
    if (a4)
    {
      v35 = *(_DWORD *)(a2 + 20);
      v36 = 2 * v35;
    }
    else
    {
      v35 = *(_DWORD *)(a2 + 20);
      v36 = 2 * v35;
      if (2 * v35 == v34)
      {
        v37 = *a5;
        v38 = *a5 & 1;
        if (*a5 < 0)
          v38 = -v38;
        v39 = v38 + 2;
LABEL_56:
        if (v39 >= v37)
          v41 = v37;
        else
          v41 = v39;
        *a5 = v37 - v41;
        if (sub_22E619D68(v11)
          || ((v42 = *v12) != 0 && *(_BYTE *)(v42 + 16) == 31
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
           && (v42 = sub_22F10CF48(v42)) != 0)
          && sub_22F28C8B4(v42)
          || (v43 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0),
              v44 = *(unsigned __int8 *)(v43 + 16),
              (v44 - 55) < 2))
        {
          if (v19 <= (2 * *(_DWORD *)(a2 + 20)))
          {
            sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v12);
            v47 = v46;
            v48 = *(unsigned int *)(a2 + 20);
            if (v19 <= v48 || v47 == 2 * (_DWORD)v48)
            {
              v49 = llvm::IntegerType::get();
            }
            else
            {
              v55 = (llvm::ArrayType *)llvm::IntegerType::get();
              v49 = llvm::ArrayType::get(v55, (llvm::Type *)2);
            }
            *(_BYTE *)(a1 + 24) = 0;
            v18 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = v49;
            goto LABEL_106;
          }
          goto LABEL_65;
        }
        if (v44 == 44)
        {
          v50 = sub_22F114198(*(_QWORD *)(v43 + 24));
          v11 = sub_22E496830(v50);
          v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
        }
        v51 = *v12;
        if (v19 < *(unsigned int *)(a2 + 20))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0);
          v53 = *(_DWORD *)(v52 + 16);
          if (v52 && v53 == 11)
          {
            v54 = ((*(_DWORD *)(v52 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
          }
          else if (v52 && v53 == 44)
          {
            v56 = sub_22F114198(*(_QWORD *)(v52 + 24));
            v54 = (*(_BYTE *)(v56 + 74) & 1) != 0 || *(_QWORD *)(v56 + 128) > 7uLL;
          }
          else
          {
            v54 = v53 == 9;
          }
          if (v54 && v39 <= v37)
            goto LABEL_101;
          v51 = *v12;
        }
        if (!v51 || *(_BYTE *)(v51 + 16) != 9)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
            goto LABEL_105;
          v51 = sub_22F10CF48(v51);
          if (!v51)
            goto LABEL_105;
        }
        v64 = (*(_DWORD *)(v51 + 32) >> 1) & 0xFFFFFF;
        if (v64 >= *(_DWORD *)(a2 + 20) || v39 > v37)
        {
          if (v64 <= 0x80)
          {
            v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 15088);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65) & 1) != 0
              || (*(_DWORD *)(v51 + 32) & 0x1FFFFFEu) < 0x81)
            {
              goto LABEL_105;
            }
          }
LABEL_65:
          v45 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          *(_BYTE *)(a1 + 24) = 2;
          v18 = *(_WORD *)(a1 + 25) & 0xFE00;
          *(_DWORD *)(a1 + 16) = v45;
          goto LABEL_107;
        }
LABEL_101:
        sub_22E6AFB10(a1, a2, v11);
        return;
      }
    }
    if (v19 <= v35 || v19 > v36)
      v39 = 1;
    else
      v39 = 2;
    v37 = *a5;
    goto LABEL_56;
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88[0] = 0;
  v84 = 0;
  v25 = sub_22E6AFBC0(a2, v11, 0, v88, &v86, (uint64_t *)&v87, &v85);
  v27 = v87;
  v28 = v88[0];
  if (v88[0] && !v87)
  {
    if (*(unsigned __int8 *)(v88[0] + 8) >= 7u || !v25)
      goto LABEL_43;
    v30 = 0;
    v31 = (int *)&v84;
    goto LABEL_36;
  }
  if (!v25)
    goto LABEL_43;
  if (v88[0])
  {
    v31 = (int *)&v84 + 1;
    if (*(unsigned __int8 *)(v88[0] + 8) < 7u)
      v31 = (int *)&v84;
    v30 = *v31;
LABEL_36:
    *v31 = v30 + 1;
  }
  if (v27)
  {
    v32 = (uint64_t *)((char *)&v84 + 4);
    if (v27[8] < 7u)
      v32 = &v84;
    ++*(_DWORD *)v32;
  }
  if (*a5 < SHIDWORD(v84))
    goto LABEL_43;
  v33 = v84;
  if ((int)v84 > *a6)
    goto LABEL_43;
  *a5 -= HIDWORD(v84);
  *a6 -= v33;
  v58 = v85;
  v57 = v86;
  v92 = v94;
  v93 = 0x300000000;
  v89 = v91;
  v90 = 0x200000000;
  if (v86)
  {
    Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v26);
    v60 = llvm::ArrayType::get(Int8Ty, v57);
    v61 = v93;
    if (v93 >= HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v61 = v93;
    }
    *((_QWORD *)v92 + v61) = v60;
    v62 = v93 + 1;
    LODWORD(v93) = v62;
    if (v62 >= HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v62 = v93;
    }
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)v92 + v62) = v28;
  LODWORD(v93) = v93 + 1;
  v66 = v90;
  if (v90 >= HIDWORD(v90))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v66 = v90;
  }
  *((_QWORD *)v89 + v66) = v28;
  LODWORD(v90) = v90 + 1;
  if (v27)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 8) + 16));
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)v27);
    v69 = llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 8) + 16));
    sub_22E3C304C(v69, v28);
    v88[1] = (unint64_t)(v70 + 7) >> 3;
    v88[2] = v71 == 1;
    v72 = llvm::TypeSize::operator unsigned long long();
    v74 = ((unint64_t)v57 + v72 + ABITypeAlignment - 1) / ABITypeAlignment * ABITypeAlignment;
    if (v74 < v58 || ABITypeAlignment != v58 && (v74 = (int64_t)v57 + v72, (uint64_t)v57 + v72 < v58))
    {
      v75 = (llvm::Type *)(v58 - v74);
      if (v58 != v74)
      {
        v76 = (llvm::ArrayType *)llvm::Type::getInt8Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v73);
        v77 = llvm::ArrayType::get(v76, v75);
        v78 = v93;
        if (v93 >= HIDWORD(v93))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v78 = v93;
        }
        *((_QWORD *)v92 + v78) = v77;
        LODWORD(v93) = v93 + 1;
      }
    }
    v79 = v93;
    if (v93 >= HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v79 = v93;
    }
    *((_QWORD *)v92 + v79) = v27;
    LODWORD(v93) = v93 + 1;
    v80 = v90;
    if (v90 >= HIDWORD(v90))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v80 = v90;
    }
    *((_QWORD *)v89 + v80) = v27;
    LODWORD(v90) = v90 + 1;
    v81 = llvm::StructType::get();
    *(_QWORD *)(a1 + 8) = llvm::StructType::get();
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 6;
    *(_WORD *)(a1 + 25) &= 0xFE00u;
    *(_QWORD *)a1 = v81;
    v82 = v89;
  }
  else
  {
    v83 = llvm::StructType::get();
    v82 = v89;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)v89;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 6;
    *(_WORD *)(a1 + 25) &= 0xFE00u;
    *(_QWORD *)a1 = v83;
  }
  if (v82 != v91)
    free(v82);
  if (v92 != v94)
    free(v92);
}

BOOL sub_22E6AFB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  int v7;
  _BOOL8 result;
  __int16 v9;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (*(_DWORD *)(a2 + 20) == 64 && (v7 = v6, result = sub_22F110C5C(*v5)) && v7 == 32)
  {
    *(_BYTE *)(a1 + 24) = 1;
    v9 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x100;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    result = sub_22F110B20(*v5);
    *(_BYTE *)(a1 + 24) = 1;
    v9 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_QWORD *)(a1 + 16) = 0;
    if (result)
      v9 |= 0x100u;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 25) = v9;
  return result;
}

BOOL sub_22E6AFBC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  _BOOL4 v27;
  llvm::Type ****v28;
  unint64_t v29;
  int v30;
  llvm::LLVMContext *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  int v53;
  unint64_t v54;
  uint64_t v56;
  unint64_t v58;
  int v59;
  _QWORD v60[3];

  v14 = a2 & 0xFFFFFFFFFFFFFFF0;
  v15 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)v16;
  v18 = *(_DWORD *)(*(_QWORD *)v16 + 16);
  if (*(_QWORD *)v16)
    v19 = v18 == 11;
  else
    v19 = 0;
  if (v19)
  {
    v21 = ((*(_DWORD *)(*(_QWORD *)v16 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
  }
  else if (v17 && v18 == 44)
  {
    v20 = sub_22F114198(*(_QWORD *)(v17 + 24));
    if ((*(_BYTE *)(v20 + 74) & 1) != 0)
    {
      v39 = *(_QWORD *)v14;
      v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v40)
        v41 = *(_DWORD *)(v40 + 16) == 11;
      else
        v41 = 0;
      v27 = v41 && ((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 210 < 8;
      v28 = (llvm::Type ****)(a1 + 8);
      v29 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v39);
      goto LABEL_65;
    }
    v21 = *(_QWORD *)(v20 + 128) > 7uLL;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v21 = v18 == 9;
  }
  v22 = *(_QWORD *)v16;
  v23 = *(_DWORD *)(*(_QWORD *)v16 + 16);
  v24 = v23;
  v25 = ((v23 >> 19) & 0x1FE) - 210 < 8;
  if (v22)
    v26 = v24 == 11;
  else
    v26 = 0;
  v27 = v26 && v25;
  if (v21 || v27)
  {
    v28 = (llvm::Type ****)(a1 + 8);
    v29 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v15);
    if (!v21)
    {
      v30 = 0;
      if (!v27)
      {
LABEL_71:
        v56 = *a4;
        if (v30)
        {
          if (v56)
          {
            v38 = 0;
            if (*(_BYTE *)(v56 + 8) == 13 || *a6)
              return v38;
            goto LABEL_80;
          }
          goto LABEL_79;
        }
        if (!v56)
        {
LABEL_79:
          *a4 = sub_22E66CB04(*v28, (llvm::LLVMContext *)a2);
          *a5 = a3;
          return 1;
        }
        if (!*a6)
        {
LABEL_80:
          *a6 = sub_22E66CB04(*v28, (llvm::LLVMContext *)a2);
          *a7 = a3;
          return 1;
        }
        return 0;
      }
LABEL_67:
      if (v29 < 0x20 || v29 > *(unsigned int *)(a1 + 24))
        return 0;
      goto LABEL_71;
    }
LABEL_65:
    if (v29 > *(unsigned int *)(a1 + 20))
      return 0;
    v30 = 1;
    if (!v27)
      goto LABEL_71;
    goto LABEL_67;
  }
  if (*(_BYTE *)(v15 + 16) == 12 || v24 == 12 && (v15 = sub_22F10CF48(v15)) != 0)
  {
    if (!*a4)
    {
      v31 = *(llvm::LLVMContext **)(v15 + 32);
      if (sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF0)) <= (unint64_t)*(unsigned int *)(a1 + 24))
      {
        v32 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), v31);
        *a4 = v32;
        *a5 = a3;
        *a6 = v32;
        sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v60);
        *a7 = *a5 + v60[0];
        return 1;
      }
    }
    return 0;
  }
  v33 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
  if (v33 && *(_BYTE *)(v33 + 16) == 2)
  {
    v34 = (_QWORD *)(v33 + 40);
    if (*(_DWORD *)(v33 + 48) >= 0x41u)
      v34 = (_QWORD *)*v34;
    v35 = (_QWORD *)*v34;
    v36 = *(_QWORD *)(v33 + 32);
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v60);
    if (!v35)
      return 1;
    v37 = v60[0];
    do
    {
      v38 = sub_22E6AFBC0(a1, v36, a3, a4, a5, a6, a7);
      if (!(_DWORD)v38)
        break;
      a3 += v37;
      v35 = (_QWORD *)((char *)v35 - 1);
    }
    while (v35);
  }
  else
  {
    v38 = 0;
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v42 && *(_BYTE *)(v42 + 16) == 45)
    {
      if (!sub_22E69BE08(v42, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)))
      {
        v38 = 1;
        if ((sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, 1, 0) & 1) != 0)
          return v38;
        v43 = sub_22F114198(*(_QWORD *)(v42 + 24));
        if ((*(_DWORD *)(v43 + 72) & 0xE000) != 0x4000)
        {
          v44 = v43;
          v45 = sub_22EFC3B90(v43);
          if (v45)
          {
            v46 = v45;
            v59 = 0;
LABEL_48:
            v47 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v44);
            v58 = *(_QWORD *)(*(_QWORD *)(v47 + 48) + 8 * sub_22EFC306C(v46));
            v48 = *(_QWORD *)(v46 + 48);
            if ((*(_BYTE *)(v46 + 68) & 1) == 0)
              goto LABEL_59;
            v49 = sub_22EFC2EF4(v46, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
            v50 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0));
            v51 = *(unsigned int *)(a1 + 20);
            if (v50 > v51 && v49 <= v51)
              v48 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v51, 0);
            v53 = v59;
            if (!v49)
              v53 = v59 + 1;
            v59 = v53;
            if (v49)
            {
LABEL_59:
              v54 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
              if (!sub_22E6AFBC0(a1, v48, v58 / v54 + a3, a4, a5, a6, a7) || *a6 && v59 > 0)
                return 0;
            }
            while (1)
            {
              v46 = *(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v46)
                break;
              if ((*(_DWORD *)(v46 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_48;
            }
          }
          return *a4 != 0;
        }
      }
      return 0;
    }
  }
  return v38;
}

_QWORD *sub_22E6B009C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B00DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

llvm::Value *sub_22E6B012C(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  llvm::Type *v12;
  llvm::LLVMContext *v13;
  uint64_t Declaration;
  llvm::Value *result;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a4 + 100))
    return 0;
  v19 = *a2;
  v6 = *(unsigned __int8 *)(v19 + 8);
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x2C;
  if (v7 || v8 == 0)
    return 0;
  v12 = **(llvm::Type ***)(a5 + 200);
  Declaration = llvm::Intrinsic::getDeclaration();
  result = 0;
  if (a3 <= 943)
  {
    if (a3 != 354 && a3 != 355 && a3 != 357)
      return result;
  }
  else if ((a3 - 944) > 5)
  {
    return result;
  }
  if (Declaration)
    v16 = *(_QWORD *)(Declaration + 24);
  else
    v16 = 0;
  v20[0] = a2;
  llvm::Type::getInt64Ty(v12, v13);
  v20[1] = llvm::ConstantInt::get();
  v18 = 257;
  return sub_22E462B78((uint64_t *)a4, v16, Declaration, (uint64_t)v20, 2, (uint64_t)v17, 0);
}

void sub_22E6B0284()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6B0298(uint64_t a1, uint64_t a2)
{
  double result;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  char v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _OWORD v16[2];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 86507531;
    else
      v8 = 0;
    if (v8)
    {
      v9 = 0;
      v11 = 0;
      v10 = 4;
    }
    else
    {
      if (sub_22E6B0FEC(a1, *(_QWORD *)(a2 + 40)))
      {
        v9 = 0;
      }
      else
      {
        if ((sub_22E6B1044(v5) & 1) != 0
          || (unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v6) >= 0x41)
        {
          v9 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
          v11 = 8;
          v10 = 2;
          goto LABEL_13;
        }
        v9 = sub_22E6B10D8(a1, v5);
        if (v9)
        {
          v15 = sub_22F110B20(*v6);
          v9 = 0;
          if (v15)
            v11 = 256;
          else
            v11 = 0;
          v10 = 1;
          goto LABEL_13;
        }
      }
      v10 = 0;
      v11 = 128;
    }
LABEL_13:
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = v9;
    *(_DWORD *)(a2 + 68) = 0;
    *(_BYTE *)(a2 + 72) = v10;
    *(_WORD *)(a2 + 73) = v11;
  }
  v12 = *(_DWORD *)(a2 + 36);
  if (v12)
  {
    v13 = a2 + 80;
    v14 = v13 + 40 * v12;
    do
    {
      sub_22E6B0D68((uint64_t)v16, a1, *(_QWORD *)v13);
      *(_OWORD *)(v13 + 8) = v16[0];
      result = *(double *)((char *)v16 + 11);
      *(_OWORD *)(v13 + 19) = *(_OWORD *)((char *)v16 + 11);
      v13 += 40;
    }
    while (v13 != v14);
  }
  return result;
}

uint64_t sub_22E6B0408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::Type **v23;
  uint64_t result;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::Instruction *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Type **v42;
  uint64_t v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::Type **v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _OWORD v59[3];
  _OWORD v60[3];
  _OWORD v61[3];
  _OWORD v62[3];
  _QWORD v63[4];
  __int16 v64;
  __int128 v65[3];
  _OWORD v66[2];
  __int128 v67;
  _QWORD v68[3];
  int v69;
  __int128 v70;
  int v71;
  _OWORD v72[2];
  __int128 v73;
  _OWORD v74[3];
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];
  __int128 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];
  _OWORD v86[3];
  _OWORD v87[2];
  __int128 v88;
  _OWORD v89[3];
  _OWORD v90[3];
  _OWORD v91[3];
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  int v96;
  _OWORD v97[3];
  _OWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102[3];
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[20];
  _BYTE v107[32];
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = v9 | a4 & 7;
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v104);
  v11 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v10, 0);
  sub_22E6B0D68((uint64_t)v102, a1, v10);
  v57 = v103;
  if (v103 == 2)
  {
    v56 = v11;
    v58 = llvm::PointerType::get();
    v12 = 0;
    v13 = 0;
    v14 = 8;
  }
  else
  {
    v58 = v11;
    if (v102[0])
      v11 = v102[0];
    v15 = *(_DWORD *)(v11 + 8) & 0xFE;
    if (*(_BYTE *)(a1 + 21))
      v16 = 0;
    else
      v16 = v15 == 2;
    v13 = v16;
    v12 = v15 == 18;
    v14 = v104;
    v56 = v11;
  }
  if (v12 && v14 > 8)
    v17 = 16;
  else
    v17 = 8;
  v18 = (uint64_t *)llvm::ConstantInt::get();
  if (v12)
  {
    v19 = (uint64_t *)(a2 + 272);
    v20 = a3[1];
    v98[0] = *a3;
    v98[1] = v20;
    v98[2] = a3[2];
    *(_QWORD *)&v87[0] = "overflow_arg_area_ptr";
    LOWORD(v88) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v98, 2, (uint64_t)v87, (uint64_t)&v99);
    v97[0] = v99;
    v97[1] = v100;
    v97[2] = v101;
    v21 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v97, "overflow_arg_area");
    v22 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v107[4] = 0;
    *(_QWORD *)&v107[12] = 0;
    *(_QWORD *)&v92 = v21;
    *((_QWORD *)&v92 + 1) = v22;
    v93 = v105;
    v95 = *(unsigned int *)v107;
    v94 = 0;
    v96 = 0;
    *(_QWORD *)&v87[0] = "mem_addr";
    LOWORD(v88) = 259;
    sub_22E3BEE6C(v19, &v92, v58, (uint64_t)v87, a5);
    *(_QWORD *)&v87[0] = "overflow_arg_area";
    LOWORD(v88) = 259;
    v23 = (llvm::Type **)sub_22E42129C(v19, v22, v21, v18, (uint64_t)v87);
    v91[0] = v99;
    v91[1] = v100;
    v91[2] = v101;
    return sub_22E3BEDDC((uint64_t)v19, v23, (uint64_t)v91);
  }
  else
  {
    v25 = a3[1];
    v90[0] = *a3;
    v90[1] = v25;
    v90[2] = a3[2];
    *(_QWORD *)&v87[0] = "reg_count_ptr";
    LOWORD(v88) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v90, v13, (uint64_t)v87, (uint64_t)&v99);
    v89[0] = v99;
    v89[1] = v100;
    v89[2] = v101;
    v55 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v89, "reg_count");
    v52 = v17 - v14;
    v26 = llvm::ConstantInt::get();
    *(_QWORD *)&v87[0] = "fits_in_regs";
    LOWORD(v88) = 259;
    v53 = sub_22E3C18F4(a2 + 272, 36, v55, v26, (uint64_t)v87);
    *(_QWORD *)&v87[0] = "vaarg.in_reg";
    LOWORD(v88) = 259;
    v27 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v87[0] = "vaarg.in_mem";
    LOWORD(v88) = 259;
    v28 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v87[0] = "vaarg.end";
    LOWORD(v88) = 259;
    v50 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v29 = llvm::User::operator new((llvm::User *)0x40);
    v51 = (_QWORD *)v28;
    MEMORY[0x23489C09C](v29, v27, v28, v53, 0);
    LOWORD(v88) = 257;
    sub_22E3C12C8((uint64_t *)(a2 + 272), v29, (uint64_t)v87);
    sub_22E5ED9B4((_QWORD *)a2, v27, 0);
    *(_QWORD *)&v87[0] = "scaled_reg_count";
    LOWORD(v88) = 259;
    v54 = v18;
    v30 = (uint64_t)v18;
    v31 = (uint64_t *)(a2 + 272);
    v32 = sub_22E3BDEA8(a2 + 272, (uint64_t)v55, v30, (uint64_t)v87, 0, 0);
    v33 = llvm::ConstantInt::get();
    *(_QWORD *)v107 = "reg_offset";
    LOWORD(v108) = 259;
    v34 = (uint64_t *)(*(uint64_t (**)(_QWORD, llvm::Instruction *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v32, v33, 0, 0);
    if (!v34)
    {
      LOWORD(v88) = 257;
      v35 = llvm::BinaryOperator::Create();
      v34 = (uint64_t *)sub_22E3C12C8(v31, v35, (uint64_t)v107);
    }
    v36 = a3[1];
    v86[0] = *a3;
    v86[1] = v36;
    v86[2] = a3[2];
    *(_QWORD *)v107 = "reg_save_area_ptr";
    LOWORD(v108) = 259;
    sub_22E3C408C(v31, (uint64_t)v86, 3, (uint64_t)v107, (uint64_t)v87);
    v85[0] = v87[0];
    v85[1] = v87[1];
    v85[2] = v88;
    v37 = (uint64_t *)sub_22E3C43AC(v31, (uint64_t)v85, "reg_save_area");
    v38 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v107 = "raw_reg_addr";
    LOWORD(v108) = 259;
    v39 = sub_22E42129C(v31, v38, v37, v34, (uint64_t)v107);
    v40 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v80 = v39;
    *((_QWORD *)&v80 + 1) = v40;
    v81 = v17;
    v82 = 0;
    v84 = 0;
    v83 = 0;
    *(_QWORD *)&v76 = "reg_addr";
    LOWORD(v78) = 259;
    sub_22E3BEE6C(v31, &v80, v58, (uint64_t)&v76, (uint64_t)v107);
    v41 = llvm::ConstantInt::get();
    *(_QWORD *)&v72[0] = "reg_count";
    LOWORD(v73) = 259;
    v42 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344)
                                                                                               + 16))(*(_QWORD *)(a2 + 344), v55, v41, 0, 0);
    if (!v42)
    {
      LOWORD(v78) = 257;
      v43 = llvm::BinaryOperator::Create();
      v42 = (llvm::Type **)sub_22E3C12C8(v31, v43, (uint64_t)v72);
    }
    v79[0] = v99;
    v79[1] = v100;
    v79[2] = v101;
    sub_22E3BEDDC((uint64_t)v31, v42, (uint64_t)v79);
    sub_22E5EDA70(a2);
    sub_22E5ED9B4((_QWORD *)a2, v51, 0);
    v44 = a3[1];
    v75[0] = *a3;
    v75[1] = v44;
    v75[2] = a3[2];
    *(_QWORD *)&v72[0] = "overflow_arg_area_ptr";
    LOWORD(v73) = 259;
    sub_22E3C408C(v31, (uint64_t)v75, 2, (uint64_t)v72, (uint64_t)&v76);
    v74[0] = v76;
    v74[1] = v77;
    v74[2] = v78;
    v45 = (uint64_t *)sub_22E3C43AC(v31, (uint64_t)v74, "overflow_arg_area");
    v46 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v106[12] = 0;
    *(_QWORD *)&v106[4] = 0;
    v68[0] = v45;
    v68[1] = v46;
    v68[2] = v17;
    v69 = 0;
    v70 = *(_OWORD *)v106;
    v71 = 0;
    *(_QWORD *)&v66[0] = "raw_mem_addr";
    LOWORD(v67) = 259;
    sub_22F247C50(v31, (uint64_t)v68, v52, (uint64_t)v66, (uint64_t)v72);
    v65[0] = v72[0];
    v65[1] = v72[1];
    v65[2] = v73;
    v63[0] = "mem_addr";
    v64 = 259;
    sub_22E3BEE6C(v31, v65, v58, (uint64_t)v63, (uint64_t)v66);
    v63[0] = "overflow_arg_area";
    v64 = 259;
    v47 = (llvm::Type **)sub_22E42129C(v31, v46, v45, v54, (uint64_t)v63);
    v62[0] = v76;
    v62[1] = v77;
    v62[2] = v78;
    sub_22E3BEDDC((uint64_t)v31, v47, (uint64_t)v62);
    sub_22E5EDA70(a2);
    sub_22E5ED9B4((_QWORD *)a2, v50, 0);
    v61[0] = *(_OWORD *)v107;
    v61[1] = *(_OWORD *)&v107[16];
    v61[2] = v108;
    v60[0] = v66[0];
    v60[1] = v66[1];
    v60[2] = v67;
    v63[0] = "va_arg.addr";
    v64 = 259;
    result = sub_22E6A7D00(a5, (_QWORD *)a2, (uint64_t)v61, (uint64_t)v27, (uint64_t)v60, (uint64_t)v51, (uint64_t)v63);
    if (v57 == 2)
    {
      v48 = *(_OWORD *)(a5 + 16);
      v59[0] = *(_OWORD *)a5;
      v59[1] = v48;
      v59[2] = *(_OWORD *)(a5 + 32);
      result = sub_22E3C43AC(v31, (uint64_t)v59, "indirect_arg");
      v49 = v105;
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v56;
      *(_QWORD *)(a5 + 16) = v49;
      *(_DWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 32) = 0;
      *(_QWORD *)(a5 + 40) = 0;
    }
  }
  return result;
}

BOOL sub_22E6B0CE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6B0D60()
{
  return 0;
}

unint64_t sub_22E6B0D68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t result;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  BOOL v23;
  llvm::Type *v24;

  v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || *(_BYTE *)(v7 + 16) != 45 || (v8 = sub_22E69BE08(v7, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32))) == 0)
  {
    if (sub_22E6B10D8(a2, a3))
    {
      result = sub_22F110B20(*v6);
      *(_BYTE *)(a1 + 24) = 1;
      v12 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_QWORD *)(a1 + 16) = 0;
      if ((_DWORD)result)
        v12 |= 0x100u;
      goto LABEL_8;
    }
    v13 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v6);
    v14 = sub_22E6B11C4(a2, a3);
    if (sub_22E6B0FEC(a2, v14)
      && sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0)) == v13)
    {
      result = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v14);
LABEL_32:
      *(_BYTE *)(a1 + 24) = 0;
      v12 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = result;
      goto LABEL_33;
    }
    *((_QWORD *)&v16 + 1) = v13;
    *(_QWORD *)&v16 = v13 - 8;
    v15 = v16 >> 3;
    v17 = v15 > 7;
    v18 = (1 << v15) & 0x8B;
    if (!v17 && v18 != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v20 && *(_BYTE *)(v20 + 16) == 45)
      {
        if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v20 + 24)) + 74) & 0x80) == 0)
        {
          if (*(_BYTE *)(a2 + 21)
            || ((v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
              ? (v23 = *(_DWORD *)(v22 + 16) == 11)
              : (v23 = 0),
                !v23 || ((*(_DWORD *)(v22 + 16) >> 19) & 0x1FFu) - 211 > 1))
          {
            result = llvm::IntegerType::get();
          }
          else
          {
            v24 = **(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16);
            if (v13 == 32)
              result = llvm::Type::getFloatTy(v24, v21);
            else
              result = llvm::Type::getDoubleTy(v24, v21);
          }
          goto LABEL_32;
        }
      }
      else
      {
        result = sub_22E6B1044(a3);
        if (!(_DWORD)result)
        {
          *(_BYTE *)(a1 + 24) = 0;
          v12 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
          *(_QWORD *)(a1 + 16) = 0;
LABEL_8:
          *(_QWORD *)a1 = 0;
LABEL_33:
          *(_QWORD *)(a1 + 8) = 0;
          goto LABEL_34;
        }
      }
    }
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v12 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
    goto LABEL_34;
  }
  v9 = v8 == 1;
  result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 2;
  v11 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_DWORD *)(a1 + 16) = result;
  v12 = v11 | (8 * v9);
LABEL_34:
  *(_WORD *)(a1 + 25) = v12;
  return result;
}

BOOL sub_22E6B0FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 20)
    && (v2 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0),
        *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1))
  {
    return (unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v2) < 0x81;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22E6B1044(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v3 = v2 > 0x38 || ((1 << v2) & 0x180000000001000) == 0;
  if (!v3 || sub_22E619D68(a1))
    return 1;
  if (*(_BYTE *)(v1 + 16) == 31)
    return sub_22F28C8B4(v1);
  if (v2 != 31)
    return 0;
  result = sub_22F10CF48(v1);
  if (result)
  {
    v1 = result;
    return sub_22F28C8B4(v1);
  }
  return result;
}

BOOL sub_22E6B10D8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 44)
  {
    v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
    v2 = sub_22E496830(v5);
  }
  if (sub_22F2A3AE4(a1, v2))
    return 1;
  v7 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
  v8 = v7 && *(_BYTE *)(v7 + 16) == 9;
  if ((v8
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9 && (v7 = sub_22F10CF48(v7)) != 0)
    && (*(_DWORD *)(v7 + 32) & 0x1FFFF80) == 0)
  {
    return 1;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_DWORD *)(v9 + 16) == 11;
  else
    v10 = 0;
  return v10 && ((((*(_DWORD *)(v9 + 16) >> 19) & 0x1FF) - 174) & 0xFFFFFFF7) == 0;
}

unint64_t sub_22E6B11C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v3
    || *(_BYTE *)(v3 + 16) != 45
    || !sub_22F10DF70(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    return a2;
  }
  v5 = sub_22F114198(*(_QWORD *)(v3 + 24));
  v6 = v5;
  if (v5)
    v7 = (*(_DWORD *)(v5 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7 || (v8 = sub_22E46A3A0(v5), v8 == v9))
  {
    v12 = 0;
  }
  else
  {
    v10 = v8;
    v11 = v9;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v10 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v10 + 16));
      v14 = v13 & 0xFFFFFFFFFFFFFFF0;
      if ((sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13 & 0xFFFFFFFFFFFFFFF0, 1, 0) & 1) == 0)
      {
        if (v12 > 0xF)
          return a2;
        v12 = sub_22E6B11C4(a1, v14);
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
  v15 = sub_22EFC3B90(v6);
  if (v15)
  {
    v16 = v15;
LABEL_21:
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (((*(_BYTE *)(*(_QWORD *)(v17 + 2000) + 1) & 1) == 0 || !sub_22EFC2F84(v16, v17))
      && (!sub_22E4EF458(v16)
       || (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v16 + 48), 1, 0) & 1) == 0))
    {
      if (v12 <= 0xF)
      {
        v12 = sub_22E6B11C4(a1, *(_QWORD *)(v16 + 48));
        goto LABEL_27;
      }
      return a2;
    }
LABEL_27:
    while (1)
    {
      v16 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v16)
        break;
      if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_21;
    }
  }
  if (v12 <= 0xF)
    return a2;
  return v12;
}

_QWORD *sub_22E6B1380(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B13C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6B1410(int a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  char isDeclaration;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  llvm::Constant *v15;
  uint64_t v16;
  const llvm::APInt *v17;
  const llvm::APInt *v18;
  uint64_t v19;
  unsigned int v20;
  llvm::Constant *v21;
  uint64_t v22;
  const llvm::APInt *v23;
  uint64_t v24;
  unsigned int v25;
  llvm::Constant *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  isDeclaration = llvm::GlobalValue::isDeclaration(this);
  if (a2)
  {
    if ((isDeclaration & 1) == 0
      && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5
      && (*(_DWORD *)(*(_QWORD *)(a4 + 152) + 52) & 0x40000000) != 0
      && sub_22E47290C(a2))
    {
      llvm::Function::addFnAttr();
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v9 = *(uint64_t **)v8;
        v10 = *(unsigned int *)(v8 + 8);
        i = *(uint64_t **)v8;
        if ((_DWORD)v10)
        {
          v12 = 8 * v10;
          for (i = *(uint64_t **)v8; *(_WORD *)(*i + 32) != 295; ++i)
          {
            v12 -= 8;
            if (!v12)
              return;
          }
        }
        if (i != &v9[v10])
        {
          do
          {
            v14 = *v9++;
            v13 = (unsigned int *)v14;
          }
          while (*(_WORD *)(v14 + 32) != 295);
          llvm::Function::getContext(this);
          llvm::Module::getOrInsertNamedMetadata();
          v34 = v36;
          v35 = 0x500000001;
          v36[0] = llvm::ValueAsMetadata::get();
          v15 = *(llvm::Constant **)(a4 + 24);
          v16 = v13[9];
          v33 = 32;
          v32 = v16;
          llvm::Constant::getIntegerValue(v15, (llvm::Type *)&v32, v17);
          v19 = llvm::ValueAsMetadata::get();
          v20 = v35;
          if (v35 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v35;
          }
          *((_QWORD *)v34 + v20) = v19;
          LODWORD(v35) = v35 + 1;
          if (v33 >= 0x41 && v32)
            MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
          v21 = *(llvm::Constant **)(a4 + 24);
          v22 = v13[10];
          v33 = 32;
          v32 = v22;
          llvm::Constant::getIntegerValue(v21, (llvm::Type *)&v32, v18);
          v24 = llvm::ValueAsMetadata::get();
          v25 = v35;
          if (v35 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = v35;
          }
          *((_QWORD *)v34 + v25) = v24;
          LODWORD(v35) = v35 + 1;
          if (v33 >= 0x41 && v32)
            MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
          v26 = *(llvm::Constant **)(a4 + 24);
          v27 = v13[11];
          v33 = 32;
          v32 = v27;
          llvm::Constant::getIntegerValue(v26, (llvm::Type *)&v32, v23);
          v28 = llvm::ValueAsMetadata::get();
          v29 = v35;
          if (v35 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v35;
          }
          *((_QWORD *)v34 + v29) = v28;
          LODWORD(v35) = v35 + 1;
          if (v33 >= 0x41 && v32)
            MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
          llvm::ConstantInt::getTrue();
          v30 = llvm::ValueAsMetadata::get();
          v31 = v35;
          if (v35 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = v35;
          }
          *((_QWORD *)v34 + v31) = v30;
          LODWORD(v35) = v35 + 1;
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
          if (v34 != v36)
            free(v34);
        }
      }
    }
  }
}

_QWORD *sub_22E6B17BC(_QWORD *a1, uint64_t a2, char a3, char a4, char a5, int a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v19;

  v14 = operator new();
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = &off_24FA6B6E8;
  *(_QWORD *)(v14 + 8) = a2;
  *(_BYTE *)(v14 + 20) = a3;
  *(_BYTE *)(v14 + 21) = a4;
  *(_BYTE *)(v14 + 22) = a5;
  *(_BYTE *)(v14 + 23) = a7;
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_DWORD *)(v15 + 68);
  *(_BYTE *)(v14 + 24) = v16 == 27;
  if (v16 == 9)
  {
    v19 = 1;
  }
  else if (v16 == 15)
  {
    v17 = *(_DWORD *)(v15 + 72);
    v19 = v17 == 18 || v17 == 1;
  }
  else
  {
    v19 = 0;
  }
  *(_BYTE *)(v14 + 25) = v19;
  *(_DWORD *)(v14 + 28) = a6;
  *a1 = &off_24FA6B588;
  a1[1] = v14;
  return a1;
}

_QWORD *sub_22E6B189C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B18DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6B192C(int a1, uint64_t a2, llvm::GlobalValue *a3, uint64_t a4)
{
  sub_22E6B2794(a1, a2, a3, a4);
  if ((llvm::GlobalValue::isDeclaration(a3) & 1) == 0)
    sub_22E6A7DFC((uint64_t)a3, a4);
}

uint64_t sub_22E6B1970(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 + 216) + 68);
  v3 = v2 > 0x21;
  v4 = (1 << v2) & 0x3F0000888;
  if (v3 || v4 == 0)
    return 4;
  else
    return 5;
}

uint64_t sub_22E6B19A8(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  llvm::LLVMContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD v21[20];
  _BYTE v22[32];
  __int16 v23;

  v5 = (uint64_t *)(a2 + 272);
  v6 = llvm::ConstantInt::get();
  sub_22E6A4C7C((uint64_t)v5, a3, v6, 0, 8u);
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 216) + 68);
  v8 = v7 > 0x21;
  v9 = (1 << v7) & 0x3F0000888;
  if (v8 || v9 == 0)
  {
    v16 = *(llvm::LLVMContext **)(a2 + 8);
    v21[16] = 257;
    sub_22E3E51B0(v5, v16, (uint64_t *)a3, 9, (uint64_t)v21);
    v17 = llvm::User::operator new((llvm::User *)0x40);
    llvm::StoreInst::StoreInst();
    v23 = 257;
    (*(void (**)(_QWORD, uint64_t, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 352) + 16))(*(_QWORD *)(a2 + 352), v17, v22, *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328));
    v18 = *(unsigned int *)(a2 + 280);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a2 + 272);
      v20 = v19 + 16 * v18;
      do
      {
        llvm::Instruction::setMetadata();
        v19 += 16;
      }
      while (v19 != v20);
    }
    v11 = llvm::ConstantInt::get();
    v12 = (uint64_t)v5;
    v13 = a3;
    v14 = 11;
  }
  else
  {
    v11 = llvm::ConstantInt::get();
    v12 = (uint64_t)v5;
    v13 = a3;
    v14 = 12;
  }
  sub_22E6A4C7C(v12, v13, v11, v14, 0x10u);
  return 0;
}

llvm::Type *sub_22E6B1B30(int a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *this)
{
  return sub_22E6B47A0(*(_QWORD *)(a2 + 144), a3, a4, this);
}

void sub_22E6B1B44(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4, char **a5, uint64_t **a6, void **a7, std::string *a8)
{
  unint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  BOOL v83;
  _BOOL4 v84;
  std::string::size_type size;
  std::string::size_type v86;
  std::string::size_type v87;
  char v88;
  int v89;
  std::string::size_type v90;
  BOOL v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string::size_type v95;
  char *v96;
  int v97;
  std::string::size_type v98;
  std::string::size_type v99;
  uint64_t *v100;
  std::string *v101;
  _BYTE *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  const char *v107;
  unint64_t v108;
  char v109;
  std::string::size_type v110;
  void **v111;
  __int128 v112;
  void **v113;
  __int128 v114[3];
  _OWORD v115[3];
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char v121;
  uint64_t v122;
  int v123;
  void **v124;
  void *v125[2];
  uint64_t v126;
  unint64_t v127;

  v15 = sub_22EF5CDF0(*(_QWORD *)(a2[18] + 144), *(_QWORD *)(a3[4] & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_BYTE *)(a4 + 23);
  v17 = v16;
  v18 = v16 & 0x7F;
  if (v17 < 0)
    v18 = *(_QWORD *)(a4 + 8);
  if (v18)
    std::string::push_back((std::string *)a4, 44);
  if (v15 > 0x20)
  {
    std::string::append((std::string *)a4, "=A");
    v19 = a2[4];
    v21 = a5[1];
    v28 = (unint64_t)a5[2];
    if ((unint64_t)v21 >= v28)
    {
      v113 = a7;
      v30 = *a5;
      v31 = (v21 - *a5) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_134;
      v33 = v28 - (_QWORD)v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          goto LABEL_135;
        v35 = (char *)operator new(8 * v34);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[8 * v31];
      v37 = &v35[8 * v34];
      *(_QWORD *)v36 = v19;
      v29 = v36 + 8;
      if (v21 == v30)
        goto LABEL_35;
      do
      {
        v39 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v36 - 1) = v39;
        v36 -= 8;
      }
      while (v21 != v30);
      goto LABEL_34;
    }
LABEL_17:
    *(_QWORD *)v21 = v19;
    v29 = v21 + 8;
    goto LABEL_37;
  }
  std::string::append((std::string *)a4, "={eax}");
  v19 = a2[3];
  v21 = a5[1];
  v20 = (unint64_t)a5[2];
  if ((unint64_t)v21 < v20)
    goto LABEL_17;
  v113 = a7;
  v22 = *a5;
  v23 = (v21 - *a5) >> 3;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
    goto LABEL_134;
  v25 = v20 - (_QWORD)v22;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    if (v26 >> 61)
      goto LABEL_135;
    v27 = (char *)operator new(8 * v26);
  }
  else
  {
    v27 = 0;
  }
  v36 = &v27[8 * v23];
  v37 = &v27[8 * v26];
  *(_QWORD *)v36 = v19;
  v29 = v36 + 8;
  if (v21 == v22)
    goto LABEL_35;
  do
  {
    v38 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    *((_QWORD *)v36 - 1) = v38;
    v36 -= 8;
  }
  while (v21 != v22);
LABEL_34:
  v21 = *a5;
LABEL_35:
  *a5 = v36;
  a5[1] = v29;
  a5[2] = v37;
  a7 = v113;
  if (v21)
    operator delete(v21);
LABEL_37:
  a5[1] = v29;
  v40 = llvm::IntegerType::get();
  v41 = v40;
  v43 = a6[1];
  v42 = (unint64_t)a6[2];
  if ((unint64_t)v43 >= v42)
  {
    v45 = *a6;
    v46 = v43 - *a6;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61)
      goto LABEL_134;
    v48 = v42 - (_QWORD)v45;
    if (v48 >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 61)
        goto LABEL_135;
      v50 = (char *)operator new(8 * v49);
    }
    else
    {
      v50 = 0;
    }
    v51 = (uint64_t *)&v50[8 * v46];
    *v51 = v41;
    v44 = v51 + 1;
    if (v43 != v45)
    {
      do
      {
        v52 = *--v43;
        *--v51 = v52;
      }
      while (v43 != v45);
      v43 = *a6;
    }
    *a6 = v51;
    a6[1] = v44;
    a6[2] = (uint64_t *)&v50[8 * v49];
    if (v43)
      operator delete(v43);
  }
  else
  {
    *v43 = v40;
    v44 = v43 + 1;
  }
  a6[1] = v44;
  v53 = *(__int128 *)((char *)a3 + 24);
  v114[0] = *(__int128 *)((char *)a3 + 8);
  v114[1] = v53;
  v114[2] = *(__int128 *)((char *)a3 + 40);
  LOWORD(v120) = 257;
  sub_22E3BEE6C(a2 + 34, v114, v41, (uint64_t)&v116, (uint64_t)v115);
  v54 = v115[1];
  *(__int128 *)((char *)a3 + 8) = v115[0];
  *(__int128 *)((char *)a3 + 24) = v54;
  *(__int128 *)((char *)a3 + 40) = v115[2];
  v56 = (char *)a7[1];
  v55 = (unint64_t)a7[2];
  if ((unint64_t)v56 < v55)
  {
    *(_OWORD *)v56 = *a3;
    v57 = a3[1];
    v58 = a3[2];
    v59 = a3[4];
    *((_OWORD *)v56 + 3) = a3[3];
    *((_OWORD *)v56 + 4) = v59;
    *((_OWORD *)v56 + 1) = v57;
    *((_OWORD *)v56 + 2) = v58;
    v60 = a3[5];
    v61 = a3[6];
    v62 = a3[7];
    *((_QWORD *)v56 + 16) = *((_QWORD *)a3 + 16);
    *((_OWORD *)v56 + 6) = v61;
    *((_OWORD *)v56 + 7) = v62;
    *((_OWORD *)v56 + 5) = v60;
    v63 = v56 + 136;
    goto LABEL_71;
  }
  v64 = (char *)*a7;
  v65 = 0xF0F0F0F0F0F0F0F1 * ((v56 - (_BYTE *)*a7) >> 3);
  v66 = v65 + 1;
  if (v65 + 1 > 0x1E1E1E1E1E1E1E1)
LABEL_134:
    abort();
  v67 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v55 - (_QWORD)v64) >> 3);
  if (2 * v67 > v66)
    v66 = 2 * v67;
  if (v67 >= 0xF0F0F0F0F0F0F0)
    v68 = 0x1E1E1E1E1E1E1E1;
  else
    v68 = v66;
  if (!v68)
  {
    v69 = 0;
    goto LABEL_66;
  }
  if (v68 > 0x1E1E1E1E1E1E1E1)
LABEL_135:
    sub_22E3B3F8C();
  v69 = (char *)operator new(136 * v68);
LABEL_66:
  v70 = a3[7];
  v71 = &v69[136 * v65];
  *((_OWORD *)v71 + 6) = a3[6];
  *((_OWORD *)v71 + 7) = v70;
  *((_QWORD *)v71 + 16) = *((_QWORD *)a3 + 16);
  v72 = a3[3];
  *((_OWORD *)v71 + 2) = a3[2];
  *((_OWORD *)v71 + 3) = v72;
  v73 = a3[5];
  *((_OWORD *)v71 + 4) = a3[4];
  *((_OWORD *)v71 + 5) = v73;
  v75 = *a3;
  v74 = a3[1];
  v63 = v71 + 136;
  *(_OWORD *)v71 = v75;
  *((_OWORD *)v71 + 1) = v74;
  if (v56 != v64)
  {
    do
    {
      *(_OWORD *)(v71 - 136) = *(_OWORD *)(v56 - 136);
      v76 = *(_OWORD *)(v56 - 120);
      v77 = *(_OWORD *)(v56 - 104);
      v78 = *(_OWORD *)(v56 - 88);
      *(_OWORD *)(v71 - 72) = *(_OWORD *)(v56 - 72);
      *(_OWORD *)(v71 - 88) = v78;
      *(_OWORD *)(v71 - 104) = v77;
      *(_OWORD *)(v71 - 120) = v76;
      v79 = *(_OWORD *)(v56 - 56);
      v80 = *(_OWORD *)(v56 - 40);
      v81 = *(_OWORD *)(v56 - 24);
      *((_QWORD *)v71 - 1) = *((_QWORD *)v56 - 1);
      *(_OWORD *)(v71 - 24) = v81;
      *(_OWORD *)(v71 - 40) = v80;
      *(_OWORD *)(v71 - 56) = v79;
      v71 -= 136;
      v56 -= 136;
    }
    while (v56 != v64);
    v56 = (char *)*a7;
  }
  *a7 = v71;
  a7[1] = v63;
  a7[2] = &v69[136 * v68];
  if (v56)
    operator delete(v56);
LABEL_71:
  a7[1] = v63;
  v125[0] = 0;
  v125[1] = 0;
  v126 = 0;
  v117 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 1;
  v119 = 0;
  v120 = 0;
  v118 = 0;
  v116 = MEMORY[0x24BED83D8] + 16;
  v124 = v125;
  llvm::raw_ostream::SetBufferAndMode();
  v82 = HIBYTE(a8->__r_.__value_.__r.__words[2]);
  v83 = v82 < 0;
  v84 = v83;
  size = v82 & 0x7F;
  if (v83)
    size = a8->__r_.__value_.__l.__size_;
  if (size)
  {
    v86 = 0;
    while (1)
    {
      v87 = std::string::find(a8, 36, v86);
      v88 = HIBYTE(a8->__r_.__value_.__r.__words[2]);
      v89 = v88;
      v90 = v88 & 0x7F;
      v91 = v89 < 0;
      v92 = a8->__r_.__value_.__l.__size_;
      if (v91)
      {
        v93 = (std::string *)a8->__r_.__value_.__r.__words[0];
      }
      else
      {
        v92 = v90;
        v93 = a8;
      }
      if (v87 == -1)
        v94 = v92;
      else
        v94 = v87;
      if (v92 <= v94)
        goto LABEL_87;
      v95 = v94;
      while (v93->__r_.__value_.__s.__data_[v95] == 36)
      {
        if (v92 == ++v95)
          goto LABEL_87;
      }
      if (v95 == -1)
LABEL_87:
        v95 = v92;
      v96 = (char *)v93 + v86;
      if (v95 - v86 <= v119 - (unint64_t)v120)
      {
        if (v95 != v86)
        {
          memcpy(v120, v96, v95 - v86);
          v120 += v95 - v86;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v116, v96);
      }
      if ((((_DWORD)v95 - (_DWORD)v94) & 1) == 0)
        goto LABEL_126;
      v97 = SHIBYTE(a8->__r_.__value_.__r.__words[2]);
      v98 = a8->__r_.__value_.__l.__size_;
      v99 = *((_BYTE *)&a8->__r_.__value_.__s + 23) & 0x7F;
      if (v97 < 0)
        v99 = a8->__r_.__value_.__l.__size_;
      if (v95 >= v99)
        goto LABEL_126;
      v100 = (uint64_t *)a8->__r_.__value_.__r.__words[0];
      if (v97 >= 0)
        v101 = a8;
      else
        v101 = (std::string *)a8->__r_.__value_.__r.__words[0];
      if (v101->__r_.__value_.__s.__data_[v95] == 123)
      {
        v102 = v120;
        if ((unint64_t)v120 >= v119)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v116);
        }
        else
        {
          ++v120;
          *v102 = 123;
        }
        ++v95;
        v103 = HIBYTE(a8->__r_.__value_.__r.__words[2]);
        v100 = (uint64_t *)a8->__r_.__value_.__r.__words[0];
        v98 = a8->__r_.__value_.__l.__size_;
      }
      else
      {
        v103 = HIBYTE(a8->__r_.__value_.__r.__words[2]);
      }
      if ((v103 & 0x80u) == 0)
        v104 = a8;
      else
        v104 = (std::string *)v100;
      if ((v103 & 0x80u) == 0)
        v105 = v103;
      else
        v105 = v98;
      if (v105 <= v95)
        goto LABEL_117;
      v106 = v95;
      while (memchr("0123456789", v104->__r_.__value_.__s.__data_[v106], 0xAuLL))
      {
        if (v105 == ++v106)
          goto LABEL_117;
      }
      if (v106 == -1)
LABEL_117:
        v106 = v105;
      v107 = (char *)v104 + v95;
      v108 = v106 - v95;
      v127 = 0;
      if ((llvm::getAsUnsignedInteger() & 1) == 0 && !HIDWORD(v127))
        break;
      if (v108 > v119 - (unint64_t)v120)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v116, v107);
        goto LABEL_125;
      }
      if (v106 != v95)
      {
        memcpy(v120, v107, v106 - v95);
        v120 += v108;
        goto LABEL_125;
      }
LABEL_126:
      v109 = HIBYTE(a8->__r_.__value_.__r.__words[2]);
      v83 = v109 < 0;
      v84 = v83;
      v110 = v109 & 0x7F;
      if (v83)
        v110 = a8->__r_.__value_.__l.__size_;
      v86 = v95;
      if (v95 >= v110)
        goto LABEL_129;
    }
    llvm::raw_ostream::operator<<();
LABEL_125:
    v95 = v106;
    goto LABEL_126;
  }
LABEL_129:
  v111 = v124;
  if (v84)
    operator delete(a8->__r_.__value_.__l.__data_);
  v112 = *(_OWORD *)v111;
  a8->__r_.__value_.__r.__words[2] = (std::string::size_type)v111[2];
  *(_OWORD *)&a8->__r_.__value_.__l.__data_ = v112;
  *((_BYTE *)v111 + 23) = 0;
  *(_BYTE *)v111 = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v116);
  if (SHIBYTE(v126) < 0)
    operator delete(v125[0]);
}

const char *sub_22E6B22D8()
{
  return "movl\t%ebp, %ebp\t\t// marker for objc_retainAutoreleaseReturnValue";
}

uint64_t sub_22E6B22E8()
{
  return llvm::ConstantInt::get();
}

void sub_22E6B22FC(int a1, void *__s, size_t __n, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v7 = 0;
  a4[1] = 0;
  if (a4[2] <= 0xBuLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = a4[1];
  }
  v8 = *a4 + v7;
  *(_QWORD *)v8 = *(_QWORD *)"/DEFAULTLIB:";
  *(_DWORD *)(v8 + 8) = 977422668;
  a4[1] += 12;
  sub_22E6A7F48((uint64_t)__p, __s, __n);
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v13 >= 0)
    v10 = v13 & 0x7F;
  else
    v10 = (size_t)__p[1];
  v11 = a4[1];
  if (a4[2] >= v11 + v10)
  {
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v11 = a4[1];
  if (v10)
  {
LABEL_11:
    memcpy((void *)(*a4 + v11), v9, v10);
    v11 = a4[1];
  }
LABEL_12:
  a4[1] = v11 + v10;
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_22E6B2420(int a1, void *__src, size_t __len, const void *a4, size_t a5, _QWORD *a6)
{
  std::string *p_dst;
  size_t v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void *p_p;
  std::string::size_type v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void **v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type size;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  size_t v41;
  unint64_t v42;
  std::string __dst;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  v14 = std::string::insert(&__dst, 0, "/FAILIFMISMATCH:\"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "=");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (!a4)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    __p = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_23;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a5 >= 0x17)
  {
    v22 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v22 = a5 | 7;
    v23 = v22 + 1;
    p_p = operator new(v22 + 1);
    v41 = a5;
    v42 = v23 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v42) = a5;
    p_p = &__p;
    if (!a5)
      goto LABEL_22;
  }
  memmove(p_p, a4, a5);
LABEL_22:
  *((_BYTE *)p_p + a5) = 0;
  v21 = HIBYTE(v42);
  v20 = (void **)__p;
  v19 = v41;
LABEL_23:
  v24 = v21 < 0;
  if (v21 >= 0)
    v25 = &__p;
  else
    v25 = v20;
  v26 = v21 & 0x7F;
  if (v24)
    v27 = v19;
  else
    v27 = v26;
  v28 = std::string::append(&v45, (const std::string::value_type *)v25, v27);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, "\"");
  v47 = *v30;
  v31 = v47.__r_.__value_.__r.__words[2];
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v32 = HIBYTE(v31);
  v33 = (char)v32;
  v34 = (void *)v47.__r_.__value_.__r.__words[0];
  if ((v32 & 0x80u) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v36 = v32 & 0x7F;
  if (v33 >= 0)
    size = v36;
  else
    size = v47.__r_.__value_.__l.__size_;
  a6[1] = 0;
  if (a6[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v38 = a6[1];
  }
  else
  {
    v38 = 0;
    v39 = 0;
    if (!size)
      goto LABEL_38;
  }
  memcpy((void *)(*a6 + v38), v35, size);
  v39 = a6[1];
LABEL_38:
  a6[1] = v39 + size;
  if (v33 < 0)
    operator delete(v34);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

_QWORD *sub_22E6B2704(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B2744(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6B2794(int a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  uint64_t result;

  result = llvm::GlobalValue::isDeclaration(this);
  if (a2 && (result & 1) == 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
  {
    if (sub_22F2A4550(a2))
      llvm::Function::addFnAttr();
    return sub_22E6B46C0(a2, this, a4);
  }
  return result;
}

void sub_22E6B282C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void ***sub_22E6B2840(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  llvm::LLVMContext *v58;
  char v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  llvm::Type *v74;
  llvm::Type *v75;
  void *v76;
  unint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  unint64_t v86;
  _BOOL4 v87;
  uint64_t *v88;
  _BOOL4 v89;
  __int16 v90;
  void *v91;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t Int32Ty;
  int v116;
  _BYTE v118[27];
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124[10];

  v124[8] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 36);
  if (v4 > 0x39)
  {
    v5 = operator new();
    *(_QWORD *)v5 = v5 + 16;
    *(_QWORD *)(v5 + 8) = 0x600000000;
    sub_22E47EDD0(v5, (v4 + 63) >> 6, 0);
    *(_DWORD *)(v5 + 64) = v4;
  }
  else
  {
    v5 = (v4 << 58) | 1;
  }
  v119 = v5;
  v6 = *(_QWORD *)(a2 + 8);
  v120 = v6;
  HIDWORD(v121) = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    v7 = 3;
LABEL_5:
    LODWORD(v121) = v7;
    goto LABEL_11;
  }
  if (v6 == 80)
  {
    v8 = 0x600000002;
    goto LABEL_10;
  }
  if (v6 == 65)
  {
    v8 = 0x300000002;
LABEL_10:
    v121 = v8;
    v7 = 2;
    goto LABEL_11;
  }
  if ((v6 & 0x10000000) != 0)
  {
    v7 = v6 >> 29;
    goto LABEL_5;
  }
  if (v6 == 92)
  {
    v121 = 0x800000005;
    v7 = 5;
  }
  else
  {
    v19 = *(unsigned __int8 *)(a1 + 22);
    v7 = *(_DWORD *)(a1 + 28);
    LODWORD(v121) = v7;
    if (v19)
      HIDWORD(v121) = 3;
  }
LABEL_11:
  if ((sub_22E6A72E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2, a1) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 72) == 2)
    {
      if (v7)
      {
        LODWORD(v121) = v7 - 1;
        if (!*(_BYTE *)(a1 + 24))
          *(_WORD *)(a2 + 73) |= 0x40u;
      }
    }
    goto LABEL_97;
  }
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = (*(_DWORD *)(v11 + 16) & 0xFF800FF) == 86507531;
  else
    v12 = 0;
  if (v12)
  {
LABEL_40:
    memset(v124, 0, 24);
    LOBYTE(v124[3]) = 4;
    goto LABEL_41;
  }
  *(_QWORD *)v118 = 0;
  v123 = 0;
  if ((v6 == 92 || v6 == 80)
    && sub_22E699750((_QWORD *)a1, v9, (uint64_t *)v118, (unint64_t *)&v123))
  {
    goto LABEL_62;
  }
  v13 = sub_22E3E4B64(*v10);
  if (v13)
  {
    if (*(_BYTE *)(a1 + 20))
    {
      v14 = v13;
      v15 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v10);
      if (v15 > 31)
      {
        if (v15 == 32)
          goto LABEL_85;
        if (v15 != 64)
        {
          if (v15 == 128)
          {
            llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), (llvm::LLVMContext *)0x80);
LABEL_92:
            v35 = (void *)llvm::FixedVectorType::get();
            goto LABEL_93;
          }
          goto LABEL_86;
        }
        if (*(_DWORD *)(v14 + 20) == 1)
          goto LABEL_85;
LABEL_86:
        v17 = a1;
LABEL_87:
        sub_22E6B3C08((uint64_t)v124, v17, v9, (uint64_t)&v119);
        goto LABEL_96;
      }
      if (v15 != 8 && v15 != 16)
        goto LABEL_86;
LABEL_85:
      v35 = (void *)llvm::IntegerType::get();
      goto LABEL_93;
    }
LABEL_62:
    memset(v124, 0, 25);
LABEL_94:
    v25 = 128;
    goto LABEL_95;
  }
  if (sub_22E619D68(v9)
    || ((v20 = *v10) != 0 && *(_BYTE *)(v20 + 16) == 31
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
     && (v20 = sub_22F10CF48(v20)) != 0)
    && sub_22F28C8B4(v20))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v16 && *(_BYTE *)(v16 + 16) == 45 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v16 + 24)) + 74) & 0x80) != 0)
      goto LABEL_86;
    v17 = a1;
    if (!*(_BYTE *)(a1 + 21) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
      goto LABEL_87;
    if (!sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v9, 1, 0))
    {
      v26 = *v10;
      if (*v10 && *(_BYTE *)(v26 + 16) == 12
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12
        && (v26 = sub_22F10CF48(v26)) != 0)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v27 && (*(_DWORD *)(v27 + 16) & 0xFF800FF) == 112197643)
        {
          llvm::Type::getHalfTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v18);
          goto LABEL_92;
        }
      }
      if (!sub_22E6B3CA0(a1, v9, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)))
      {
        v17 = a1;
        goto LABEL_87;
      }
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v10);
      v29 = sub_22E6A8A40(v9, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      if (v29)
      {
        if ((v30 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0, !*(_BYTE *)(a1 + 22))
          && *(_QWORD *)v30
          && *(_DWORD *)(*(_QWORD *)v30 + 16) == 11
          && ((*(_DWORD *)(*(_QWORD *)v30 + 16) >> 19) & 0x1FEu) - 210 < 8
          || (v31 = *(_DWORD *)(*(_QWORD *)v30 + 16), (v31 & 0xFE) == 0x28)
          || (v31 <= 0x27u ? (v32 = ((1 << v31) & 0x8100000400) == 0) : (v32 = 1),
              (v33 = v31 & 0xFF800FF, v32) ? (v34 = v33 == 114294795) : (v34 = 1),
              v34))
        {
          v35 = (void *)sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v29 & 0xFFFFFFFFFFFFFFF0));
LABEL_93:
          memset(&v124[1], 0, 17);
          v124[0] = v35;
          goto LABEL_94;
        }
      }
      goto LABEL_85;
    }
    goto LABEL_40;
  }
  v21 = *v10;
  v22 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v22 && *(_BYTE *)(v22 + 16) == 44)
  {
    v23 = sub_22F114198(*(_QWORD *)(v22 + 24));
    v9 = sub_22E496830(v23);
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
    v21 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  }
  if ((v21 && *(_BYTE *)(v21 + 16) == 9
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
     && (v21 = sub_22F10CF48(v21)) != 0)
    && (*(_DWORD *)(v21 + 32) & 0x1FFFFFEu) >= 0x81)
  {
    goto LABEL_86;
  }
  if (!sub_22F2A3AE4(a1, v9))
    goto LABEL_62;
  v24 = sub_22F110B20(*v10);
  LOBYTE(v124[3]) = 1;
  memset(v124, 0, 24);
  if (v24)
  {
    v25 = 256;
LABEL_95:
    *(_WORD *)((char *)&v124[3] + 1) = v25;
    goto LABEL_96;
  }
LABEL_41:
  *(_WORD *)((char *)&v124[3] + 1) = 0;
LABEL_96:
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v124;
  *(_OWORD *)(a2 + 59) = *(_OWORD *)((char *)&v124[1] + 3);
LABEL_97:
  if ((*(_BYTE *)(a2 + 10) & 0x80) != 0)
    LODWORD(v121) = v121 + 1;
  v36 = *(unsigned int *)(a2 + 36);
  if (v120 == 80)
  {
    if ((int)v36 < 1)
      return sub_22E54C5D0((void ***)&v119);
    v37 = 0;
    v38 = a2 + 80;
    do
    {
      v124[0] = 0;
      *(_QWORD *)v118 = 0;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      v78 = v39 > 0x38;
      v40 = (1 << v39) & 0x180000000000800;
      v41 = v78 || v40 == 0;
      if (!v41
        && sub_22E699750((_QWORD *)a1, *(_QWORD *)v38, (uint64_t *)v124, (unint64_t *)v118)
        && *(_QWORD *)v118 <= (unint64_t)HIDWORD(v121))
      {
        HIDWORD(v121) -= *(_DWORD *)v118;
        v2 = v2 & 0xFFFFFE00 | 0xC0;
        *(_QWORD *)(v38 + 16) = 0;
        *(_QWORD *)(v38 + 24) = 0;
        *(_QWORD *)(v38 + 8) = 0;
        *(_BYTE *)(v38 + 32) = 0;
        *(_WORD *)(v38 + 33) = v2;
        if ((v119 & 1) != 0)
          v119 = v119 & 0xFC00000000000000 | (2
                                              * (((v119 >> 1) & ~(-1 << (v119 >> 58)) | (1 << v37)) & ~(-1 << (v119 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v119 + 8 * (v37 >> 6)) |= 1 << v37;
      }
      ++v37;
      v38 += 40;
    }
    while (v36 != v37);
    LODWORD(v36) = *(_DWORD *)(a2 + 36);
  }
  if ((int)v36 < 1)
    return sub_22E54C5D0((void ***)&v119);
  v42 = 0;
  v43 = 0;
  v113 = a2 + 80;
  v114 = a2;
  v44 = (_BYTE *)(a2 + 112);
  v45 = v36;
  do
  {
    if ((v119 & 1) != 0)
    {
      if (((1 << v42) & (v119 >> 1) & ~(-1 << (v119 >> 58))) != 0)
        goto LABEL_197;
    }
    else if ((*(_QWORD *)(*(_QWORD *)v119 + 8 * (v42 >> 6)) & (1 << v42)) != 0)
    {
      goto LABEL_197;
    }
    v46 = v45;
    v47 = v120;
    v48 = sub_22E69BD58(*((_QWORD *)v44 - 4));
    v49 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0));
    v52 = v51;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
      v53 = *(_QWORD *)(*(_QWORD *)(*v49 + 8) & 0xFFFFFFFFFFFFFFF0);
    else
      v53 = 0;
    if (v53)
    {
      v54 = sub_22E69BE08(v53, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
      if (v54 == 1)
      {
        memset(v118, 0, 24);
        v59 = 8;
        goto LABEL_138;
      }
      if (v54 == 2)
        goto LABEL_129;
    }
    v122 = 0;
    v123 = 0;
    if ((v47 == 92 || v47 == 80) && sub_22E699750((_QWORD *)a1, v48, &v123, &v122))
    {
      if (v122 > HIDWORD(v121))
      {
LABEL_129:
        v55 = a1;
        v56 = v48;
        v57 = 0;
LABEL_130:
        sub_22E6B3ED4((uint64_t)v118, v55, v56, v57, (uint64_t)&v119);
LABEL_195:
        v45 = v46;
        goto LABEL_196;
      }
      HIDWORD(v121) -= v122;
      v45 = v46;
      if (v47 == 80)
      {
        v118[24] = 0;
        v63 = *(_WORD *)&v118[25] & 0xFE00 | 0x40;
LABEL_181:
        memset(v118, 0, 24);
        goto LABEL_182;
      }
      v71 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v78 = v71 > 0x38;
      v72 = (1 << v71) & 0x180000000000800;
      if (!v78 && v72 != 0)
        goto LABEL_180;
      memset(v118, 0, 24);
      v118[24] = 5;
      v63 = *(_WORD *)&v118[25] & 0xFE00;
      goto LABEL_182;
    }
    if (sub_22E619D68(v48)
      || ((v60 = *v49) != 0 ? (v61 = *(_BYTE *)(*v49 + 16) == 31) : (v61 = 0),
          (v61
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
        && (v60 = sub_22F10CF48(v60)) != 0)
       && sub_22F28C8B4(v60)))
    {
      if (v53 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v53 + 24)) + 74) & 0x80) != 0)
      {
        v55 = a1;
        v56 = v48;
        v57 = 1;
        goto LABEL_130;
      }
      if (!*(_BYTE *)(a1 + 22) && sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v48, 1, 0))
      {
        memset(v118, 0, 24);
        v59 = 4;
LABEL_138:
        v118[24] = v59;
        *(_WORD *)&v118[25] &= 0xFE00u;
        goto LABEL_195;
      }
      v116 = v43;
      Int32Ty = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v58);
      if (*(_BYTE *)(a1 + 22))
      {
        if (sub_22E619D68(v48))
          goto LABEL_190;
        if (((v64 = *v49) != 0 && *(_BYTE *)(v64 + 16) == 31
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
           && (v64 = sub_22F10CF48(v64)) != 0)
          && sub_22F28C8B4(v64))
        {
          goto LABEL_190;
        }
      }
      v65 = *(unsigned __int8 *)(a1 + 24);
      if (!sub_22E6B40F0(a1, v48, (uint64_t)&v119))
        goto LABEL_190;
      if (*(_BYTE *)(a1 + 24) || (v120 - 65) > 0x1B || ((1 << (v120 - 65)) & 0x8008001) == 0)
      {
        v124[0] = &v124[2];
        v124[1] = (void *)0x300000000;
        sub_22E4639CC((uint64_t)v124, ((v50 + 31) >> 5), Int32Ty);
        v66 = llvm::StructType::get();
        if (v65)
          v67 = 128;
        else
          v67 = 192;
        v118[24] = 0;
        *(_OWORD *)v118 = (unint64_t)v66;
        *(_QWORD *)&v118[16] = 0;
        *(_WORD *)&v118[25] = *(_WORD *)&v118[25] & 0xFE00 | v67;
        if (v124[0] != &v124[2])
          free(v124[0]);
        goto LABEL_195;
      }
      v77 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v49);
      v78 = !(_DWORD)v121 || v77 > 0x20;
      if (v78)
LABEL_190:
        Int32Ty = 0;
      if (*(_BYTE *)(a1 + 22) && HIDWORD(v52) && v52 >= 0x21)
      {
        sub_22E6B3ED4((uint64_t)v118, a1, v48, 0, (uint64_t)&v119);
        goto LABEL_195;
      }
      v45 = v46;
      if (v50 > 0x80 || *(_BYTE *)(a1 + 24) && (_DWORD)v121)
        goto LABEL_263;
      v79 = *(_QWORD *)(*(_QWORD *)(*v49 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v79 || *(_BYTE *)(v79 + 16) != 45)
        goto LABEL_263;
      v80 = sub_22F114198(*(_QWORD *)(v79 + 24));
      v81 = v80;
      v124[0] = 0;
      if (v80)
        v82 = (*(_DWORD *)(v80 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v82 = 0;
      if (!v82)
      {
        if (!sub_22E6B42B0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v80, v124))
          goto LABEL_262;
LABEL_227:
        v91 = v124[0];
        v12 = v91 == (void *)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v49);
        v43 = v116;
        if (v12)
        {
          v94 = v47 == 92 || v47 == 65 || v47 == 80;
          v118[24] = 5;
          *(_WORD *)&v118[25] = *(_WORD *)&v118[25] & 0xFE00 | v94;
          *(_QWORD *)v118 = 0;
          *(_QWORD *)&v118[8] = Int32Ty;
          *(_QWORD *)&v118[16] = 0;
          goto LABEL_196;
        }
        goto LABEL_263;
      }
      if (*(_BYTE *)(a1 + 22))
      {
        if (sub_22E463414(v80))
          goto LABEL_262;
      }
      else if ((sub_22F3B1BE8(v80) & 1) == 0)
      {
        goto LABEL_262;
      }
      if ((sub_22E6B41D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v81, v124) & 1) != 0)
        goto LABEL_227;
LABEL_262:
      v43 = v116;
LABEL_263:
      v97 = a1;
      v98 = v48;
      v99 = 1;
      goto LABEL_264;
    }
    v62 = sub_22E3E4B64(*v49);
    if (!v62)
    {
      v83 = *(_QWORD *)(*(_QWORD *)(*v49 + 8) & 0xFFFFFFFFFFFFFFF0);
      v45 = v46;
      if (v83 && *(_BYTE *)(v83 + 16) == 44)
      {
        v84 = sub_22F114198(*(_QWORD *)(v83 + 24));
        v48 = sub_22E496830(v84);
      }
      if (!sub_22E6B40F0(a1, v48, (uint64_t)&v119) || *(_BYTE *)(a1 + 24))
        goto LABEL_218;
      v85 = 1;
      if ((v120 - 65) > 0x1B || ((1 << (v120 - 65)) & 0x8008001) == 0)
        goto LABEL_219;
      v86 = v48 & 0xFFFFFFFFFFFFFFF0;
      if ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0)) > 0x20)
      {
LABEL_218:
        v85 = 0;
LABEL_219:
        v87 = sub_22F2A3AE4(a1, v48);
        v88 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFF0);
        if (v87)
        {
          if (v85)
          {
            v89 = sub_22F110B20(*v88);
            v118[24] = 1;
            v90 = *(_WORD *)&v118[25] & 0xFE00;
            if (v89)
              v90 = *(_WORD *)&v118[25] & 0xFE00 | 0x100;
            memset(v118, 0, 24);
            v63 = v90 | 0x40;
            goto LABEL_182;
          }
          v100 = sub_22F110B20(*v88);
          v118[24] = 1;
          v63 = *(_WORD *)&v118[25] & 0xFE00;
          if (v100)
            v63 |= 0x100u;
          goto LABEL_181;
        }
        v95 = *v88;
        if ((!*v88 || *(_BYTE *)(v95 + 16) != 9)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9
           || (v95 = sub_22F10CF48(v95)) == 0)
          || (*(_DWORD *)(v95 + 32) & 0x1FFFFFEu) <= 0x81)
        {
          v96 = *(_WORD *)&v118[25] & 0xFE00;
          memset(v118, 0, 25);
          if (v85)
            v63 = v96 | 0xC0;
          else
            v63 = v96 | 0x80;
          goto LABEL_182;
        }
LABEL_246:
        v97 = a1;
        v98 = v48;
        v99 = 0;
LABEL_264:
        sub_22E6B3ED4((uint64_t)v118, v97, v98, v99, (uint64_t)&v119);
        goto LABEL_196;
      }
      v101 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v86 + 8) & 0xFFFFFFFFFFFFFFF0);
      v102 = *(_DWORD *)(v101 + 16);
      v103 = v102;
      if (v101 && v102 == 11)
      {
        if (((v102 >> 19) & 0x1FE) - 166 >= 0x14)
          goto LABEL_268;
      }
      else
      {
        if (v101 && v102 == 44)
        {
          v104 = sub_22F114198(*(_QWORD *)(v101 + 24));
          if ((*(_BYTE *)(v104 + 74) & 1) != 0 || *(_QWORD *)(v104 + 128) > 7uLL)
            goto LABEL_267;
          v103 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          LOBYTE(v102) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v86 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        else if (v102 == 9)
        {
          goto LABEL_267;
        }
        if (v103 != 39)
        {
LABEL_268:
          v85 = (v102 & 0xFE) == 40;
          goto LABEL_219;
        }
      }
LABEL_267:
      v85 = 1;
      goto LABEL_219;
    }
    v45 = v46;
    if (*(_BYTE *)(a1 + 22))
    {
      if (v50 > 0x200 || !HIDWORD(v121))
        goto LABEL_246;
      --HIDWORD(v121);
      v118[24] = 0;
      v63 = *(_WORD *)&v118[25] & 0xFE00 | 0xC0;
      goto LABEL_181;
    }
    if (!*(_BYTE *)(a1 + 20)
      || (*((_QWORD *)&v69 + 1) = v50, *(_QWORD *)&v69 = v50 - 8, v68 = v69 >> 3, v68 >= 2)
      && v68 != 3
      && (v68 != 7 || *(_DWORD *)(v62 + 20) != 1))
    {
      v74 = (llvm::Type *)sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v48);
      if ((*((_DWORD *)v74 + 2) & 0xFE) != 0x12
        || (v75 = v74,
            v124[0] = (void *)llvm::Type::getPrimitiveSizeInBits(v74),
            v124[1] = v76,
            llvm::TypeSize::operator unsigned long long() != 64)
        || *(_BYTE *)(*((_QWORD *)v75 + 3) + 8) != 13
        || llvm::Type::getScalarSizeInBits(v75) == 64)
      {
LABEL_180:
        v118[24] = 0;
        v63 = *(_WORD *)&v118[25] & 0xFE00 | 0x80;
        goto LABEL_181;
      }
    }
    v70 = llvm::IntegerType::get();
    v118[24] = 0;
    *(_OWORD *)v118 = (unint64_t)v70;
    v63 = *(_WORD *)&v118[25] & 0xFE00 | 0x80;
    *(_QWORD *)&v118[16] = 0;
LABEL_182:
    *(_WORD *)&v118[25] = v63;
LABEL_196:
    *(_OWORD *)(v44 - 24) = *(_OWORD *)v118;
    *(_OWORD *)(v44 - 13) = *(_OWORD *)&v118[11];
    v43 |= *v44 == 8;
LABEL_197:
    ++v42;
    v44 += 40;
  }
  while (v45 != v42);
  if ((v43 & 1) != 0)
  {
    v124[0] = &v124[2];
    v124[1] = (void *)0x600000000;
    *(_QWORD *)v118 = 0;
    v105 = v113;
    v106 = v113 + 40 * *(unsigned int *)(v114 + 36);
    v107 = *(unsigned __int8 *)(v114 + 8);
    if (*(_BYTE *)(v114 + 72) == 2)
    {
      v108 = *(_WORD *)(v114 + 73);
      if ((v108 & 0x20) == 0 || v107 == 70)
        goto LABEL_285;
      v109 = 1 << *(_BYTE *)(v114 + 112);
      if ((v109 & 7) != 0)
      {
        if ((*(_WORD *)(v114 + 113) & 0x40) == 0)
          goto LABEL_283;
LABEL_285:
        if ((v108 & 0x40) == 0)
        {
          sub_22E6B4434(a1, (uint64_t)v124, (unint64_t *)v118, v114 + 48, *(_QWORD *)(v114 + 40));
          *(_WORD *)(v114 + 73) = *(_WORD *)(v114 + 73) & 0xFFFD | (2 * *(unsigned __int8 *)(a1 + 22));
        }
      }
      else
      {
        if ((v109 & 0x160) == 0)
          goto LABEL_285;
LABEL_283:
        sub_22E6B4434(a1, (uint64_t)v124, (unint64_t *)v118, v114 + 88, *(_QWORD *)(v114 + 80));
        v105 = v114 + 120;
        if (*(_BYTE *)(v114 + 72) == 2)
        {
          v108 = *(_WORD *)(v114 + 73);
          goto LABEL_285;
        }
      }
    }
    v110 = v105 + 40 * (v107 == 70);
    if (v110 != v106)
    {
      while (2)
      {
        v111 = 1 << *(_BYTE *)(v110 + 32);
        if ((v111 & 7) != 0)
        {
          if ((*(_WORD *)(v110 + 33) & 0x40) == 0)
LABEL_290:
            sub_22E6B4434(a1, (uint64_t)v124, (unint64_t *)v118, v110 + 8, *(_QWORD *)v110);
        }
        else if ((v111 & 0x160) != 0)
        {
          goto LABEL_290;
        }
        v110 += 40;
        if (v110 == v106)
          break;
        continue;
      }
    }
    *(_QWORD *)(v114 + 24) = llvm::StructType::get();
    *(_DWORD *)(v114 + 32) = *(_DWORD *)(v114 + 32) & 0x80000000 | 4;
    if (v124[0] != &v124[2])
      free(v124[0]);
  }
  return sub_22E54C5D0((void ***)&v119);
}

double sub_22E6B3AB4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  _OWORD v17[3];

  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v15);
  v10 = sub_22E6B4008(a1, a4, v16);
  v11 = a3[1];
  v17[0] = *a3;
  v17[1] = v11;
  v17[2] = a3[2];
  v12 = v15;
  v13 = sub_22E66C868(a2[18] + 280, a4, 0);
  return sub_22E6A0A7C(a5, a2, (uint64_t)v17, v13, v12, v10, 4, 1);
}

uint64_t sub_22E6B3B70(uint64_t a1, uint64_t a2)
{
  return sub_22E6B45F0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

BOOL sub_22E6B3B7C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 < 5;
}

BOOL sub_22E6B3B88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 3;
}

uint64_t sub_22E6B3C00()
{
  return 0;
}

unint64_t sub_22E6B3C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unint64_t result;
  __int16 v7;
  __int16 v8;

  v5 = *(_DWORD *)(a4 + 12);
  if (v5 && (*(_DWORD *)(a4 + 12) = v5 - 1, !*(_BYTE *)(a2 + 24)))
  {
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v8 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
    v7 = v8 | 0x40;
  }
  else
  {
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v7 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
  }
  *(_WORD *)(a1 + 25) = v7;
  return result;
}

uint64_t sub_22E6B3CA0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t result;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22EF5CDF0(a3, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_BYTE *)(a1 + 24) != 0;
  if (*(_BYTE *)(a1 + 24) && v7 > 0x40)
    return 0;
  while (1)
  {
    if (!v8)
    {
      HIDWORD(v11) = v7;
      LODWORD(v11) = v7 - 8;
      v10 = v11 >> 3;
      v12 = v10 > 7;
      v13 = (1 << v10) & 0x8B;
      if (v12 || v13 == 0)
        return 0;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(_DWORD *)(v15 + 16);
    v17 = v16;
    if (v16 - 55 <= 1)
      return ((v7 - 64) & 0xFFFFFFFFFFFFFFBFLL) != 0;
    if (v16 == 11
      || (v16 & 0xFE) == 0x28
      || ((v18 = v16, v16 <= 0x27u)
        ? (v19 = ((1 << v16) & 0x8100000400) == 0)
        : (v19 = 1),
          v19 ? (v20 = (v16 & 0xFF800FF) == 114294795) : (v20 = 1),
          v20 || ((v22 = (1 << v16) & 0x100080001000, v18 <= 0x2C) ? (v23 = v22 == 0) : (v23 = 1), !v23)))
    {
      if (v17 != 39 || (*(_DWORD *)(v15 + 40) & 6) != 2)
        return 1;
    }
    v21 = sub_22EF5C728(a3, v4);
    if (!v21 || *(_BYTE *)(v21 + 16) != 2)
      break;
    v4 = *(_QWORD *)(v21 + 32);
    v6 = v4 & 0xFFFFFFFFFFFFFFF0;
    v7 = sub_22EF5CDF0(a3, *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
    v8 = *(_BYTE *)(a1 + 24) != 0;
    if (*(_BYTE *)(a1 + 24) && v7 > 0x40)
      return 0;
  }
  result = 0;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24 && *(_BYTE *)(v24 + 16) == 45)
  {
    v25 = sub_22F114198(*(_QWORD *)(v24 + 24));
    v26 = sub_22EFC3B90(v25);
    if (!v26)
      return 1;
    v27 = v26;
LABEL_37:
    if ((sub_22E69B6D0(a3, v27, 1, 0) & 1) != 0
      || (result = sub_22E6B3CA0(a1, *(_QWORD *)(v27 + 48), a3), (_DWORD)result))
    {
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v27)
          return 1;
        if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_37;
      }
    }
  }
  return result;
}

unint64_t sub_22E6B3ED4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t result;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;

  if ((a4 & 1) != 0)
  {
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    v9 = v8 >> 3;
    result = sub_22E6B4008(a2, a3, v9);
    if ((_DWORD)result)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v11 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = result;
      if (v9 <= result)
        v12 = 8;
      else
        v12 = 24;
      v13 = v11 | v12;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v15 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = 4;
      v13 = v15 | 8;
    }
  }
  else
  {
    v14 = *(_DWORD *)(a5 + 12);
    if (v14 && (*(_DWORD *)(a5 + 12) = v14 - 1, !*(_BYTE *)(a2 + 24)))
    {
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v16 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = result;
      v13 = v16 | 0x40;
    }
    else
    {
      result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v13 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = result;
    }
  }
  *(_WORD *)(a1 + 25) = v13;
  return result;
}

uint64_t sub_22E6B4008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a3 < 5)
    return 0;
  if (!*(_BYTE *)(a1 + 25)
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 > 1
    || (a3 - 16) > 0x30
    || ((1 << (a3 - 16)) & 0x1000000010001) == 0)
  {
    if (*(_BYTE *)(a1 + 20)
      && a3 >= 0x10
      && ((v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
       && sub_22EF5CDF0(v5, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) == 128
       || (sub_22E6AB45C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2) & 1) != 0))
    {
      return 16;
    }
    else
    {
      return 4;
    }
  }
  return a3;
}

uint64_t sub_22E6B40F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v14;

  if (!*(_BYTE *)(a1 + 23))
  {
    v6 = sub_22E6A8A40(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
    if (!v6)
      v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = v7 && *(_DWORD *)(v7 + 16) == 11;
    if (v8 && ((*(_DWORD *)(v7 + 16) >> 19) & 0x1FFu) - 213 > 0xFFFFFFFD)
      return 0;
  }
  v9 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) + 31;
  if (v9 < 0x20)
    return 0;
  v10 = v9 >> 5;
  v11 = *(_DWORD *)(a3 + 12);
  if (*(_BYTE *)(a1 + 24))
  {
    if (v9 > 0x5F || v11 < v10)
      return 0;
    goto LABEL_19;
  }
  if (v11 >= v10)
  {
LABEL_19:
    v14 = v11 - v10;
    result = 1;
    goto LABEL_20;
  }
  v14 = 0;
  result = 0;
LABEL_20:
  *(_DWORD *)(a3 + 12) = v14;
  return result;
}

uint64_t sub_22E6B41D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_22E46A3A0(a2);
  if (v6 == v7)
    return sub_22E6B42B0(a1, a2, a3);
  v8 = v6;
  v9 = v7;
  while (1)
  {
    v10 = *(_QWORD *)(**(_QWORD **)(v8 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
      v10 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v8 + 16));
    v11 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
    if (v11)
      v12 = (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v11;
    else
      v12 = 0;
    if ((sub_22E6B41D4(a1, v12, a3) & 1) == 0)
      break;
    v8 += 24;
    if (v8 == v9)
      return sub_22E6B42B0(a1, a2, a3);
  }
  return 0;
}

uint64_t sub_22E6B42B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  BOOL v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;

  v5 = sub_22EFC3B90(a2);
  if (!v5)
    return 1;
  v6 = v5;
LABEL_3:
  v7 = (uint64_t *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v7;
  if (*v7)
    v9 = *(_BYTE *)(*v7 + 16) == 12;
  else
    v9 = 0;
  if (v9
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12 && (v8 = sub_22F10CF48(v8)) != 0)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(v10 + 16);
  if (v10)
    v12 = *(_DWORD *)(v10 + 16) == 11;
  else
    v12 = 0;
  v13 = v12;
  if ((*(_DWORD *)(v10 + 16) & 0xFE) == 0x28
    || (v13 & 1) != 0
    || (*(_DWORD *)(v10 + 16) <= 0x27u ? (v14 = ((1 << v11) & 0x8100000400) == 0) : (v14 = 1),
        !v14
     || (v10 ? (v15 = (v11 & 0xFF800FF) == 114294795) : (v15 = 0),
         !v15 ? (v16 = 0) : (v16 = 1),
         v11 != 44 ? (v17 = v16 == 0) : (v17 = 0),
         !v17)))
  {
    v18 = sub_22EF5CDF0(a1, *v7);
    if ((v18 == 64 || v18 == 32) && (*(_BYTE *)(v6 + 68) & 1) == 0)
    {
      *a3 += sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0));
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v6)
          return 1;
        if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_3;
      }
    }
  }
  return 0;
}

unint64_t sub_22E6B4434(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t result;
  llvm::LLVMContext *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  llvm::Type *v21;
  llvm::ArrayType *Int8Ty;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25[3];

  if (*(_BYTE *)(a4 + 24) == 2)
  {
    v9 = (*(_WORD *)(a4 + 25) & 8) == 0;
    v10 = ((*(_WORD *)(a4 + 25) & 8) >> 1) ^ 4;
  }
  else
  {
    v9 = 0;
    LOWORD(v10) = 0;
  }
  v11 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = v11;
  *(_DWORD *)(a4 + 20) = 0;
  *(_BYTE *)(a4 + 24) = 8;
  *(_WORD *)(a4 + 25) = v10;
  v12 = sub_22E66C868(*(_QWORD *)(a1 + 8), a5, 0);
  if (v9)
  {
    result = llvm::PointerType::get();
    v15 = result;
    v16 = *(_DWORD *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v15;
    ++*(_DWORD *)(a2 + 8);
    v17 = 4;
  }
  else
  {
    v18 = *(_DWORD *)(a2 + 8);
    if (v18 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v12;
    ++*(_DWORD *)(a2 + 8);
    result = sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v25);
    v17 = v25[0];
  }
  v19 = *a3 + v17;
  v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *a3 = v20;
  v21 = (llvm::Type *)(v20 - v19);
  if (v20 != v19)
  {
    Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v14);
    result = llvm::ArrayType::get(Int8Ty, v21);
    v23 = result;
    v24 = *(_DWORD *)(a2 + 8);
    if (v24 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = v23;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_22E6B45F0(uint64_t a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v3 = *(llvm::APFloatBase **)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_DWORD *)(v4 + 16);
  if (v4)
    v6 = *(_DWORD *)(v4 + 16) == 11;
  else
    v6 = 0;
  if (v6)
  {
    if (((v5 >> 19) & 0x1FE) - 210 <= 7)
    {
      v10 = (v5 >> 19) & 0x1FF;
      if (v10 != 210)
      {
        if (v10 != 213)
          return 1;
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 88);
        if (v11 != llvm::APFloatBase::x87DoubleExtended(v3))
          return 1;
      }
    }
    return 0;
  }
  v7 = sub_22E3E4B64((uint64_t)v3);
  if (!v7)
    return 0;
  v8 = sub_22EF5CDF0(a1, v7);
  result = 1;
  if (v8 != 128 && v8 != 256 && v8 != 512)
    return 0;
  return result;
}

uint64_t sub_22E6B46C0(uint64_t a1, llvm::Function *a2, uint64_t a3)
{
  uint64_t result;
  BOOL v7;
  llvm::LLVMContext *v8;
  llvm::Attribute *Context;
  llvm::Type *v10;

  result = sub_22E47E580(a1);
  if ((_DWORD)result)
  {
    *((_WORD *)a2 + 9) = *((_WORD *)a2 + 9) & 0xC00F | 0x530;
    result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v7 = *(_BYTE *)(result + 16) == 26;
    else
      v7 = 0;
    if ((v7
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (result = sub_22F10CF48(result)) != 0)
      && (*(_DWORD *)(result + 20) & 0x3FFFC0) != 0)
    {
      v8 = (llvm::LLVMContext *)sub_22E66CB04((llvm::Type ***)(a3 + 280), *(llvm::LLVMContext **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)+ 32));
      Context = (llvm::Attribute *)llvm::Function::getContext(a2);
      llvm::Attribute::getWithByValType(Context, v8, v10);
      return llvm::Function::addParamAttr();
    }
  }
  return result;
}

llvm::Type *sub_22E6B47A0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *this)
{
  llvm::LLVMContext *v6;

  if (a3 == 3)
  {
    if (*(_WORD *)a2 != 22878 || *(_BYTE *)(a2 + 2) != 109)
      return this;
  }
  else if (a3 == 2)
  {
    if (*(_WORD *)a2 != 31014)
      return this;
  }
  else if (a3 != 1 || *(_BYTE *)a2 != 121)
  {
    return this;
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
  {
    if (llvm::Type::getPrimitiveSizeInBits(this) == 64)
      return (llvm::Type *)llvm::Type::getX86_MMXTy(*(llvm::Type **)(a1 + 232), v6);
    return 0;
  }
  return this;
}

_QWORD *sub_22E6B484C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B488C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6B48DC(int a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  if ((llvm::GlobalValue::isDeclaration(this) & 1) == 0)
  {
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
    {
      if (sub_22F2A4550(a2))
        llvm::Function::addFnAttr();
      sub_22E6B46C0(a2, this, a4);
    }
    sub_22E6A7DFC((uint64_t)this, a4);
  }
}

uint64_t sub_22E6B4980()
{
  return 7;
}

uint64_t sub_22E6B4988(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v5;

  v5 = llvm::ConstantInt::get();
  sub_22E6A4C7C(a2 + 272, a3, v5, 0, 0x10u);
  return 0;
}

void sub_22E6B49D4(int a1, void *__s, size_t __n, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v7 = 0;
  a4[1] = 0;
  if (a4[2] <= 0xBuLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = a4[1];
  }
  v8 = *a4 + v7;
  *(_QWORD *)v8 = *(_QWORD *)"/DEFAULTLIB:";
  *(_DWORD *)(v8 + 8) = 977422668;
  a4[1] += 12;
  sub_22E6A7F48((uint64_t)__p, __s, __n);
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v13 >= 0)
    v10 = v13 & 0x7F;
  else
    v10 = (size_t)__p[1];
  v11 = a4[1];
  if (a4[2] >= v11 + v10)
  {
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v11 = a4[1];
  if (v10)
  {
LABEL_11:
    memcpy((void *)(*a4 + v11), v9, v10);
    v11 = a4[1];
  }
LABEL_12:
  a4[1] = v11 + v10;
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_22E6B4AF8(int a1, void *__src, size_t __len, const void *a4, size_t a5, _QWORD *a6)
{
  std::string *p_dst;
  size_t v12;
  size_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  void *p_p;
  std::string::size_type v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void **v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type size;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  size_t v41;
  unint64_t v42;
  std::string __dst;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
LABEL_12:
  v14 = std::string::insert(&__dst, 0, "/FAILIFMISMATCH:\"");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v44, "=");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (!a4)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    __p = 0;
    v41 = 0;
    v42 = 0;
    goto LABEL_23;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a5 >= 0x17)
  {
    v22 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v22 = a5 | 7;
    v23 = v22 + 1;
    p_p = operator new(v22 + 1);
    v41 = a5;
    v42 = v23 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v42) = a5;
    p_p = &__p;
    if (!a5)
      goto LABEL_22;
  }
  memmove(p_p, a4, a5);
LABEL_22:
  *((_BYTE *)p_p + a5) = 0;
  v21 = HIBYTE(v42);
  v20 = (void **)__p;
  v19 = v41;
LABEL_23:
  v24 = v21 < 0;
  if (v21 >= 0)
    v25 = &__p;
  else
    v25 = v20;
  v26 = v21 & 0x7F;
  if (v24)
    v27 = v19;
  else
    v27 = v26;
  v28 = std::string::append(&v45, (const std::string::value_type *)v25, v27);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v46, "\"");
  v47 = *v30;
  v31 = v47.__r_.__value_.__r.__words[2];
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v32 = HIBYTE(v31);
  v33 = (char)v32;
  v34 = (void *)v47.__r_.__value_.__r.__words[0];
  if ((v32 & 0x80u) == 0)
    v35 = &v47;
  else
    v35 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v36 = v32 & 0x7F;
  if (v33 >= 0)
    size = v36;
  else
    size = v47.__r_.__value_.__l.__size_;
  a6[1] = 0;
  if (a6[2] < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v38 = a6[1];
  }
  else
  {
    v38 = 0;
    v39 = 0;
    if (!size)
      goto LABEL_38;
  }
  memcpy((void *)(*a6 + v38), v35, size);
  v39 = a6[1];
LABEL_38:
  a6[1] = v39 + size;
  if (v33 < 0)
    operator delete(v34);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22E6B4DE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6B4DF4(uint64_t a1, uint64_t a2)
{
  int *v2;
  int v5;
  uint64_t v6;
  int v7;
  llvm::DataLayout *DataLayout;
  uint64_t result;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  _BYTE v32[27];
  unint64_t v33;

  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 78)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 20);
    *(_QWORD *)v32 = &off_24FA6B998;
    *(_QWORD *)&v32[8] = v6;
    *(_DWORD *)&v32[16] = 0;
    *(_DWORD *)&v32[20] = v7;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(v6 + 16));
    v32[24] = llvm::DataLayout::getPointerSize(DataLayout) == 8;
    return sub_22E6B51B0((unint64_t)v32, a2);
  }
  v31 = 0;
  if (v5 == 80)
  {
    v10 = 4;
  }
  else
  {
    if (v5 != 92)
      goto LABEL_8;
    v10 = 16;
  }
  v31 = v10;
LABEL_8:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2);
  if ((result & 1) == 0)
  {
    result = sub_22E6B589C((uint64_t)v32, a1, *(_QWORD *)(a2 + 40), &v31, 1, v5 == 80, v5 == 92);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v32;
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v32[11];
  }
  if (v5 == 80)
  {
    v11 = 6;
LABEL_14:
    v31 = v11;
    goto LABEL_15;
  }
  if (v5 == 92)
  {
    v11 = 16;
    goto LABEL_14;
  }
LABEL_15:
  v30 = 0;
  v12 = *(_DWORD *)(a2 + 36);
  if (v12)
  {
    v13 = 0;
    v14 = a2 + 80;
    v15 = a2 + 80 + 40 * v12;
    v2 = &v31;
    do
    {
      v16 = v5 == 80;
      if (v16 && v13 > 5)
        v17 = &v30;
      else
        v17 = &v31;
      result = sub_22E6B589C((uint64_t)v32, a1, *(_QWORD *)v14, v17, 0, v16, v5 == 92);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)v32;
      *(_OWORD *)(v14 + 19) = *(_OWORD *)&v32[11];
      ++v13;
      v14 += 40;
    }
    while (v14 != v15);
  }
  if (v5 == 80)
  {
    v18 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v18)
    {
      v19 = v31;
      v20 = 40 * v18;
      v21 = (_WORD *)(a2 + 113);
      do
      {
        v22 = *(_QWORD *)((char *)v21 - 33);
        *(_QWORD *)v32 = 0;
        v33 = 0;
        v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
        v24 = v23 > 0x38;
        v25 = (1 << v23) & 0x180000000000800;
        v26 = v24 || v25 == 0;
        if (v26 && (result = sub_22E699750((_QWORD *)a1, v22, (uint64_t *)v32, &v33), (_DWORD)result) && v33 <= v19)
        {
          v29 = 0;
          v19 -= v33;
          v28 = 0;
          LOWORD(v2) = (unsigned __int16)v2 & 0xFE00 | 0x40;
          v27 = 0uLL;
        }
        else
        {
          v27 = *(_OWORD *)((char *)v21 - 25);
          v28 = *(_QWORD *)((char *)v21 - 9);
          v29 = *((_BYTE *)v21 - 1);
          LOWORD(v2) = *v21;
        }
        *(_OWORD *)((char *)v21 - 25) = v27;
        *(_QWORD *)((char *)v21 - 9) = v28;
        *((_BYTE *)v21 - 1) = v29;
        *v21 = (_WORD)v2;
        v21 += 20;
        v20 -= 40;
      }
      while (v20);
    }
  }
  return result;
}

double sub_22E6B5060@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v14[3];
  __int128 v15[3];

  v9 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v11 = (unint64_t)(v10 - 65) < 0xFFFFFFFFFFFFFFC0 || (v10 & (v10 - 1)) != 0;
  v12 = a3[1];
  v15[0] = *a3;
  v15[1] = v12;
  v15[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v9, (uint64_t)v14);
  return sub_22E6A094C(a5, a2, v15, a4, v11, v14, 8, 0);
}

uint64_t sub_22E6B5118(uint64_t a1, uint64_t a2)
{
  return sub_22E6B45F0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
}

BOOL sub_22E6B5124(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 < 5;
}

BOOL sub_22E6B5130(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6B51A8()
{
  return 1;
}

uint64_t sub_22E6B51B0(unint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t X86_FP80Ty;
  llvm::LLVMContext *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type *v34;
  llvm::DataLayout *DataLayout;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[27];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 == 79)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 20);
    *(_QWORD *)v52 = &off_24FA6B8F0;
    *(_QWORD *)&v52[8] = v6;
    *(_DWORD *)&v52[16] = 0;
    *(_DWORD *)&v52[20] = v7;
    v8 = *(_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v8 + 68) == 15)
      v5 = *(_DWORD *)(v8 + 72) == 1;
    v52[24] = v5;
    return sub_22E6B4DF4(v52, a2);
  }
  if (v4 == 92)
    v10 = 11;
  else
    v10 = 6;
  if (v4 == 92)
    v11 = 16;
  else
    v11 = 8;
  v50 = 0;
  v49 = 0;
  result = sub_22E6A72E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2, a1);
  if ((result & 1) == 0)
  {
    v12 = *(_QWORD *)(a2 + 40);
    if (v4 != 92)
      goto LABEL_18;
    v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
      && (v14 = sub_22F10E06C(v13), v12 = *(_QWORD *)(a2 + 40), !v14))
    {
      v50 = 0;
      v49 = 0;
      result = sub_22E6B90CC((uint64_t)v52, a1, v12, (_DWORD *)&v50 + 1, &v50, &v49);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
      *(_OWORD *)(a2 + 59) = *(_OWORD *)&v52[11];
      if (HIDWORD(v50) <= 0xB && v50 <= 0x10)
      {
        v10 = 11 - HIDWORD(v50);
        v11 = 16 - v50;
        goto LABEL_55;
      }
      result = sub_22E6B8F74((uint64_t)v52, a1, *(_QWORD *)(a2 + 40));
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
      *(_OWORD *)(a2 + 59) = *(_OWORD *)&v52[11];
    }
    else
    {
      if (v12 < 0x10
        || (v15 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v15 + 16) != 12)
        || (*(_QWORD *)(v15 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0) + 8)) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16576))
      {
LABEL_18:
        v51 = 0;
        result = sub_22E6B739C(a1, v12, 0, (int *)&v51 + 1, (int *)&v51, 1u, 0);
        v17 = 0;
        v18 = HIDWORD(v51);
        switch(HIDWORD(v51))
        {
          case 0:
            v19 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v12);
            result = sub_22E6B849C(a1, v19, 0, v12, 0);
            v17 = (unsigned __int8 *)result;
            v20 = v51;
            if ((_DWORD)v51 != 6)
              goto LABEL_41;
            if (*(_BYTE *)(result + 8) != 13)
              goto LABEL_40;
            v21 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
            v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v23 = *v22;
            if (*v22 && *(_BYTE *)(v23 + 16) == 44)
            {
              v24 = sub_22F114198(*(_QWORD *)(v23 + 24));
              result = sub_22E496830(v24);
              v12 = result;
              v21 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFF0);
              v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            }
            v25 = *v22;
            v26 = *(_DWORD *)(v25 + 16);
            if (v25)
              v27 = v26 == 11;
            else
              v27 = 0;
            if (v27)
            {
              if (((*(_DWORD *)(v25 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                goto LABEL_40;
            }
            else if (v25 && v26 == 44)
            {
              result = sub_22F114198(*(_QWORD *)(v25 + 24));
              if ((*(_BYTE *)(result + 74) & 1) == 0 && *(_QWORD *)(result + 128) < 8uLL)
                goto LABEL_40;
            }
            else if (v26 != 9)
            {
              goto LABEL_40;
            }
            result = sub_22F2A3AE4(a1, v12);
            if (!(_DWORD)result)
              goto LABEL_40;
            result = sub_22F110B20(*v21);
            v52[24] = 1;
            memset(v52, 0, 24);
            if ((_DWORD)result)
            {
              v36 = 256;
              goto LABEL_53;
            }
            goto LABEL_82;
          case 1:
            v28 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v12);
            result = sub_22E6B86E8(a1, v28, 0, v12, 0);
            goto LABEL_39;
          case 3:
            result = llvm::Type::getX86_FP80Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v16);
            goto LABEL_39;
          case 5:
            X86_FP80Ty = llvm::Type::getX86_FP80Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v16);
            v31 = llvm::Type::getX86_FP80Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v30);
            *(_QWORD *)v52 = X86_FP80Ty;
            *(_QWORD *)&v52[8] = v31;
            result = llvm::StructType::get();
LABEL_39:
            v17 = (unsigned __int8 *)result;
            goto LABEL_40;
          case 6:
            v20 = v51;
            if ((_DWORD)v51 == 6)
            {
              memset(v52, 0, 24);
              v52[24] = 4;
LABEL_82:
              *(_WORD *)&v52[25] = 0;
            }
            else
            {
              v17 = 0;
LABEL_41:
              switch(v20)
              {
                case 0:
                  v32 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v12);
                  result = sub_22E6B849C(a1, v32, 8u, v12, 8);
                  goto LABEL_46;
                case 1:
                  goto LABEL_45;
                case 2:
                  result = sub_22E6B88C8(a1, v12);
                  goto LABEL_50;
                case 4:
                  if (v18 == 3)
                    goto LABEL_51;
LABEL_45:
                  v33 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v12);
                  result = sub_22E6B86E8(a1, v33, 8u, v12, 8);
LABEL_46:
                  v34 = (llvm::Type *)result;
                  if (v18 == 6)
                  {
                    v52[26] = 0;
                    *(_WORD *)&v52[24] = 0;
                    *(_OWORD *)v52 = (unint64_t)result;
                    *(_QWORD *)&v52[16] = 8;
                  }
                  else
                  {
                    if (result)
                    {
                      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
                      result = sub_22E6B89E4(v17, v34, DataLayout);
LABEL_50:
                      v17 = (unsigned __int8 *)result;
                    }
LABEL_51:
                    v52[26] = 0;
                    *(_WORD *)&v52[24] = 0;
                    *(_QWORD *)&v52[16] = 0;
                    *(_OWORD *)v52 = (unint64_t)v17;
                  }
                  v36 = 128;
                  break;
                default:
                  goto LABEL_51;
              }
LABEL_53:
              *(_WORD *)&v52[25] = v36;
            }
LABEL_54:
            *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
            *(_OWORD *)(a2 + 59) = *(_OWORD *)&v52[11];
            break;
          case 7:
            result = sub_22E6B8F74((uint64_t)v52, a1, v12);
            goto LABEL_54;
          default:
LABEL_40:
            v20 = v51;
            goto LABEL_41;
        }
        goto LABEL_55;
      }
      result = sub_22E6B8F74((uint64_t)v52, a1, v12);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
      *(_OWORD *)(a2 + 59) = *(_OWORD *)&v52[11];
    }
    v10 = 11;
    v11 = 16;
  }
LABEL_55:
  if (*(_BYTE *)(a2 + 72) == 2)
  {
    --v10;
    v37 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v37 = *(_QWORD *)(a2 + 8);
    if ((_DWORD)v50 && v49)
    {
      v37 = v37 & 0xFFFFFFE1FFFFFFFFLL | ((unint64_t)((__clz(__rbit32(v49)) + 1) & 0xF) << 33);
      *(_QWORD *)(a2 + 8) = v37;
    }
  }
  v38 = *(unsigned int *)(a2 + 36);
  if (*(_DWORD *)(a2 + 16) == -1)
    v39 = *(_DWORD *)(a2 + 36);
  else
    v39 = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v38)
  {
    v40 = 0;
    v41 = a2 + 80;
    v42 = ((v37 >> 23) & 1) + v10;
    v43 = 40 * v38;
    do
    {
      if (v4 == 92 && sub_22F10DF70(*(_QWORD *)(*(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF0)))
      {
        v44 = *(_QWORD *)v41;
        v50 = 0;
        v49 = 0;
        result = sub_22E6B90CC((uint64_t)v52, a1, v44, (_DWORD *)&v50 + 1, &v50, &v49);
      }
      else
      {
        result = sub_22E6B6E10((uint64_t)v52, a1, *(_QWORD *)v41, v42, (_DWORD *)&v50 + 1, &v50, v40 < v39, 0);
      }
      *(_OWORD *)(v41 + 8) = *(_OWORD *)v52;
      *(_OWORD *)(v41 + 19) = *(_OWORD *)&v52[11];
      v45 = v42 - HIDWORD(v50);
      if (v42 >= HIDWORD(v50) && (v46 = v11 - v50, v11 >= v50))
      {
        v47 = *(_QWORD *)(a2 + 8);
        if (((v47 >> 33) & 0xF) != 0)
          v48 = 1 << (((v47 >> 33) & 0xF) - 1);
        else
          v48 = 0;
        if (v49 > v48)
          *(_QWORD *)(a2 + 8) = v47 & 0xFFFFFFE1FFFFFFFFLL | ((unint64_t)((__clz(__rbit32(v49))
                                                                                + 1) & 0xF) << 33);
        v11 = v46;
        v42 = v45;
      }
      else
      {
        result = sub_22E6B81D4((uint64_t)v52, a1, *(_QWORD *)v41, v42);
        *(_OWORD *)(v41 + 8) = *(_OWORD *)v52;
        *(_OWORD *)(v41 + 19) = *(_OWORD *)&v52[11];
      }
      v41 += 40;
      ++v40;
      v43 -= 40;
    }
    while (v43);
  }
  return result;
}

uint64_t sub_22E6B589C(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4, char a5, int a6, int a7)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v16;
  unint64_t v17;
  char v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  llvm::LLVMContext *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  __int16 v28;
  __int16 v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v39;
  unsigned int v40;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v47;
  uint64_t v48;

  v8 = result;
  v9 = a3 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = (*(_DWORD *)(v11 + 16) & 0xFF800FF) == 86507531;
  else
    v12 = 0;
  if (!v12)
  {
    if (*(_DWORD *)(v11 + 16) == 44)
    {
      v16 = sub_22F114198(*(_QWORD *)(v11 + 24));
      v17 = sub_22E496830(v16);
      v9 = v17 & 0xFFFFFFFFFFFFFFF0;
      v10 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v17 = a3;
    }
    v44 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v10);
    v21 = v20;
    v23 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v24)
      v25 = *(_BYTE *)(v24 + 16) == 45;
    else
      v25 = 0;
    v26 = !v25;
    v45 = v26;
    if (!v25)
      goto LABEL_22;
    if ((a5 & 1) == 0)
    {
      v27 = sub_22E69BE08(v24, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32));
      if (v27)
      {
        v28 = v27 == 1;
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v17);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        *(_BYTE *)(v8 + 24) = 2;
        v29 = *(_WORD *)(v8 + 25) & 0xFE00;
        *(_DWORD *)(v8 + 16) = result;
        v19 = v29 | (8 * v28);
        goto LABEL_72;
      }
    }
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 74) & 0x80) == 0)
    {
LABEL_22:
      v47 = 0;
      v48 = 0;
      if ((a6 & 1) != 0 || a7)
      {
        result = sub_22E699750((_QWORD *)a2, v17, &v48, &v47);
        if ((_DWORD)result)
        {
          if (a7)
          {
            v30 = *a4;
            if (v47 <= v30)
            {
              *a4 = v30 - v47;
              if ((a5 & 1) != 0)
                goto LABEL_51;
              v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
              v32 = v31 > 0x38;
              v33 = (1 << v31) & 0x180000000000800;
              if (!v32 && v33 != 0)
                goto LABEL_51;
              goto LABEL_37;
            }
LABEL_82:
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            *(_BYTE *)(v8 + 24) = 2;
            v19 = *(_WORD *)(v8 + 25) & 0xFE00;
            *(_DWORD *)(v8 + 16) = v21 / v23;
            goto LABEL_72;
          }
          if (a6)
          {
            v35 = *a4;
            if (v47 <= v35)
            {
              if ((a5 & 1) != 0
                || ((v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
                     v36 <= 0x38u)
                  ? (v37 = ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)) & 0x180000000000800) == 0)
                  : (v37 = 1),
                    !v37))
              {
                *a4 = v35 - v47;
                goto LABEL_51;
              }
            }
            else
            {
              if ((a5 & 1) != 0)
              {
LABEL_37:
                *(_QWORD *)v8 = 0;
                *(_QWORD *)(v8 + 8) = 0;
                *(_QWORD *)(v8 + 16) = 0;
                v18 = 5;
                goto LABEL_8;
              }
              v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            }
            if (v36 > 0x38u || ((1 << v36) & 0x180000000000800) == 0)
              goto LABEL_82;
          }
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
      {
        result = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v17);
        if ((*(unsigned __int8 *)(result + 8) | 2) == 0xF)
          goto LABEL_51;
      }
      if (v45)
      {
        result = *(_QWORD *)v9;
        v39 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v39 <= 0xB)
        {
          if (v39 == 9)
          {
            if (v44 > 0x40)
              goto LABEL_82;
          }
          else
          {
            if (v39 != 11)
              goto LABEL_51;
            v40 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FF;
            if (v40 <= 0xB8)
            {
              if (v40 == 166)
              {
                result = sub_22F110B20(result);
                *(_BYTE *)(v8 + 24) = 1;
                v19 = *(_WORD *)(v8 + 25) & 0xFE00;
                *(_QWORD *)(v8 + 16) = 0;
                if ((_DWORD)result)
                  v19 |= 0x100u;
                goto LABEL_52;
              }
              if (v40 != 177)
                goto LABEL_51;
              goto LABEL_80;
            }
            if (v40 == 185)
            {
LABEL_80:
              if ((a5 & 1) == 0)
                goto LABEL_82;
              llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v22);
              result = llvm::FixedVectorType::get();
LABEL_69:
              *(_BYTE *)(v8 + 24) = 0;
              v19 = *(_WORD *)(v8 + 25) & 0xFE00 | 0x80;
              *(_QWORD *)(v8 + 16) = 0;
              *(_QWORD *)v8 = result;
              goto LABEL_70;
            }
            if (v40 == 213)
            {
              if (*(_BYTE *)(a2 + 24))
              {
                v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24)
                                + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 8) + 24) - 24)
                                + 88);
                result = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)result);
                if (v43 == result)
                  goto LABEL_82;
              }
            }
          }
LABEL_51:
          *(_BYTE *)(v8 + 24) = 0;
          v19 = *(_WORD *)(v8 + 25) & 0xFE00 | 0x80;
          *(_QWORD *)(v8 + 16) = 0;
LABEL_52:
          *(_QWORD *)v8 = 0;
LABEL_70:
          *(_QWORD *)(v8 + 8) = 0;
          goto LABEL_72;
        }
        if (v39 != 31 && v39 != 12)
          goto LABEL_51;
      }
      if (v44 - 1 <= 0x3F)
      {
        v42 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] < 2uLL)
        {
          result = llvm::IntegerType::get();
          goto LABEL_69;
        }
      }
    }
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v17);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(v8 + 24) = 2;
    v19 = *(_WORD *)(v8 + 25) & 0xFE00;
    *(_DWORD *)(v8 + 16) = result;
    goto LABEL_72;
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v18 = 4;
LABEL_8:
  *(_BYTE *)(v8 + 24) = v18;
  v19 = *(_WORD *)(v8 + 25) & 0xFE00;
LABEL_72:
  *(_WORD *)(v8 + 25) = v19;
  return result;
}

void sub_22E6B5D64()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6B5D78@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type **v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Type **v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  llvm::Type *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm::DataLayout *DataLayout;
  unint64_t ABITypeAlignment;
  llvm::Type **v74;
  uint64_t v75;
  llvm::DataLayout *v76;
  unint64_t v77;
  llvm::Type **v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Type **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t *v127;
  __int128 v128;
  uint64_t v129;
  llvm::Type **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  _BYTE v135[48];
  _QWORD v136[4];
  __int128 v137;
  _OWORD v138[3];
  _QWORD v139[3];
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[3];
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[48];
  __int128 v161[3];
  _BYTE v162[48];
  _QWORD v163[3];
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE v168[48];
  __int128 v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE v174[48];
  _BYTE v175[32];
  __int16 v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  int v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  _QWORD v195[3];
  int v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[48];
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE v219[48];
  __int128 v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  _OWORD v225[3];
  _BYTE v226[48];
  _OWORD v227[3];
  _OWORD v228[3];
  _OWORD v229[3];
  _OWORD v230[3];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  _OWORD v234[3];
  uint64_t v235[3];
  unsigned __int8 v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;

  v243 = *MEMORY[0x24BDAC8D0];
  v237 = 0;
  v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = v9 | a4 & 7;
  sub_22E6B6E10((uint64_t)v235, a1, v10, 0, (_DWORD *)&v237 + 1, &v237, 0, 0);
  v11 = v237;
  if (!v237)
  {
    v16 = a3[1];
    v234[0] = *a3;
    v234[1] = v16;
    v234[2] = a3[2];
    return sub_22E6B71E8(a5, (_QWORD *)a2, v234, v10);
  }
  v122 = a1;
  if (HIDWORD(v237))
  {
    v12 = a3[1];
    v230[0] = *a3;
    v230[1] = v12;
    v230[2] = a3[2];
    v238 = "gp_offset_p";
    LOWORD(v242) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v230, 0, (uint64_t)&v238, (uint64_t)&v231);
    v120 = *((_QWORD *)&v231 + 1);
    v121 = v231;
    v229[0] = v231;
    v119 = v232;
    v229[1] = v232;
    v109 = HIDWORD(v232);
    v118 = DWORD2(v232);
    v116 = *((_QWORD *)&v233 + 1);
    v117 = v233;
    v229[2] = v233;
    v13 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v229, "gp_offset");
    v14 = llvm::ConstantInt::get();
    *(_QWORD *)&v231 = "fits_in_gp";
    LOWORD(v233) = 259;
    v131 = v13;
    v15 = sub_22E3C18F4(a2 + 272, 37, v13, v14, (uint64_t)&v231);
  }
  else
  {
    v120 = 0;
    v121 = 0;
    v119 = 0;
    v118 = 0;
    v116 = 0;
    v117 = 0;
    v131 = 0;
    v15 = 0;
  }
  if (v11)
  {
    v18 = a3[1];
    v228[0] = *a3;
    v228[1] = v18;
    v228[2] = a3[2];
    v238 = "fp_offset_p";
    LOWORD(v242) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v228, 1, (uint64_t)&v238, (uint64_t)&v231);
    v114 = *((_QWORD *)&v231 + 1);
    v115 = v231;
    v227[0] = v231;
    v113 = v232;
    v227[1] = v232;
    v108 = HIDWORD(v232);
    v112 = DWORD2(v232);
    v110 = *((_QWORD *)&v233 + 1);
    v111 = v233;
    v227[2] = v233;
    v19 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v227, "fp_offset");
    v20 = llvm::ConstantInt::get();
    *(_QWORD *)&v231 = "fits_in_fp";
    LOWORD(v233) = 259;
    v127 = v19;
    v21 = sub_22E3C18F4(a2 + 272, 37, v19, v20, (uint64_t)&v231);
    if (v15)
    {
      LOWORD(v233) = 257;
      v21 = sub_22E3E49C4(a2 + 272, v15, v21, (uint64_t)&v231);
    }
    v22 = a5;
    v15 = v21;
  }
  else
  {
    v22 = a5;
    v114 = 0;
    v115 = 0;
    v113 = 0;
    v112 = 0;
    v110 = 0;
    v111 = 0;
    v127 = 0;
  }
  *(_QWORD *)&v231 = "vaarg.in_reg";
  LOWORD(v233) = 259;
  v23 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v231 = "vaarg.in_mem";
  LOWORD(v233) = 259;
  v24 = operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v231 = "vaarg.end";
  LOWORD(v233) = 259;
  v124 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v25 = llvm::User::operator new((llvm::User *)0x40);
  v125 = (_QWORD *)v24;
  MEMORY[0x23489C09C](v25, v23, v24, v15, 0);
  LOWORD(v233) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v25, (uint64_t)&v231);
  v126 = (uint64_t)v23;
  sub_22E5ED9B4((_QWORD *)a2, v23, 0);
  v26 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v10, 0);
  v27 = a3[1];
  v225[0] = *a3;
  v225[1] = v27;
  v225[2] = a3[2];
  LOWORD(v233) = 257;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v225, 3, (uint64_t)&v231, (uint64_t)v226);
  v28 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v226, "reg_save_area");
  if (HIDWORD(v237) && (_DWORD)v237)
  {
    v103 = v22;
    v50 = v235[0];
    *(_QWORD *)&v231 = "tmp";
    LOWORD(v233) = 259;
    v51 = sub_22F25E4D4(a2, v10, (uint64_t)&v231, 0);
    v53 = 0;
    v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    if (v51 <= 7)
      v54 = 0;
    v55 = v52 & 0xFFFFFFFFFFFFFFF8;
    if (v51 <= 7)
      v55 = 0;
    if (v51 >= 8)
      v53 = 1 << (v52 & 7 | (8 * (v51 & 7)));
    *(_QWORD *)&v220 = v54;
    *((_QWORD *)&v220 + 1) = v55;
    v221 = v53;
    v222 = 0;
    v224 = 0;
    v223 = 0;
    LOWORD(v242) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v220, v50, (uint64_t)&v238, (uint64_t)&v231);
    v56 = v231;
    v57 = *((_QWORD *)&v232 + 1);
    v100 = v232;
    v104 = *((_QWORD *)&v233 + 1);
    v106 = v233;
    v58 = *(uint64_t **)(v50 + 16);
    v60 = *v58;
    v59 = (llvm::Type *)v58[1];
    v97 = llvm::PointerType::get();
    v99 = llvm::PointerType::get();
    v61 = *(_QWORD *)(a2 + 8);
    LOWORD(v233) = 257;
    v62 = sub_22E42129C((uint64_t *)(a2 + 272), v61, v28, v131, (uint64_t)&v231);
    v63 = *(_QWORD *)(a2 + 8);
    LOWORD(v233) = 257;
    v64 = sub_22E42129C((uint64_t *)(a2 + 272), v63, v28, v127, (uint64_t)&v231);
    if ((*(_DWORD *)(v60 + 8) & 0xFE) == 0x12)
      v65 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
    else
      v65 = *(_DWORD *)(v60 + 8);
    if (v65 >= 7)
      v69 = v62;
    else
      v69 = v64;
    if (v65 >= 7)
      v70 = v64;
    else
      v70 = v62;
    v98 = v70;
    LOWORD(v233) = 257;
    v71 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v69, v97, (uint64_t)&v231);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v122 + 8) + 16));
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)v60);
    LOWORD(v242) = 257;
    v74 = (llvm::Type **)sub_22E3C3200((uint64_t *)(a2 + 272), (llvm::Type *)v60, v71, (63 - __clz(ABITypeAlignment)) | 0x100u, 0, (uint64_t)&v238);
    v214 = v56;
    v215 = v100;
    v216 = v57;
    v217 = v106;
    v218 = v104;
    LOWORD(v233) = 257;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v214, 0, (uint64_t)&v231, (uint64_t)v219);
    sub_22E3BEDDC(a2 + 272, v74, (uint64_t)v219);
    LOWORD(v233) = 257;
    v75 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, v98, v99, (uint64_t)&v231);
    v76 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(v122 + 8) + 16));
    v77 = llvm::DataLayout::getABITypeAlignment(v76, v59);
    LOWORD(v242) = 257;
    v78 = (llvm::Type **)sub_22E3C3200((uint64_t *)(a2 + 272), v59, v75, (63 - __clz(v77)) | 0x100u, 0, (uint64_t)&v238);
    v208 = v56;
    v209 = v100;
    v210 = v57;
    v211 = v106;
    v212 = v104;
    LOWORD(v233) = 257;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v208, 1, (uint64_t)&v231, (uint64_t)v213);
    sub_22E3BEDDC(a2 + 272, v78, (uint64_t)v213);
    v203 = v56;
    v204 = v100;
    v205 = v57;
    v206 = v106;
    v207 = v104;
    LOWORD(v242) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v203, v26, (uint64_t)&v238, (uint64_t)&v231);
    v39 = *((_QWORD *)&v231 + 1);
    v38 = v231;
    v133 = *((_QWORD *)&v232 + 1);
    v35 = v232;
    v79 = v233;
    goto LABEL_65;
  }
  v29 = v22;
  if (HIDWORD(v237))
  {
    v30 = v22;
    v31 = *(_QWORD *)(a2 + 8);
    LOWORD(v233) = 257;
    v32 = sub_22E42129C((uint64_t *)(a2 + 272), v31, v28, v131, (uint64_t)&v231);
    v33 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v198 = v32;
    *((_QWORD *)&v198 + 1) = v33;
    v199 = 8;
    v200 = 0;
    v202 = 0;
    v201 = 0;
    LOWORD(v242) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v198, v26, (uint64_t)&v238, (uint64_t)&v231);
    v34 = v231;
    v132 = *((_QWORD *)&v232 + 1);
    v35 = v232;
    v128 = v233;
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(v122 + 8) + 8), *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v238);
    if (v239 >= 9)
    {
      *(_QWORD *)&v231 = "tmp";
      LOWORD(v233) = 259;
      v66 = sub_22F25E4D4(a2, v10, (uint64_t)&v231, 0);
      v68 = 0;
      if (v66 <= 7)
        v38 = 0;
      else
        v38 = v66 & 0xFFFFFFFFFFFFFFF8;
      if (v66 <= 7)
        v39 = 0;
      else
        v39 = v67 & 0xFFFFFFFFFFFFFFF8;
      if (v66 >= 8)
        v68 = 1 << (v67 & 7 | (8 * (v66 & 7)));
      v195[0] = v38;
      v195[1] = v39;
      v195[2] = v68;
      v196 = 0;
      v197 = 0u;
      v191 = v34;
      v192 = v35;
      v193 = v132;
      v194 = v128;
      sub_22F245B80(a2 + 272, (llvm::LLVMContext *)v195, &v191);
      HIDWORD(v36) = HIDWORD(v132);
      v37 = 0;
      v35 = v68;
      v128 = 0u;
    }
    else
    {
      HIDWORD(v36) = HIDWORD(v132);
      v37 = v132;
      v39 = *((_QWORD *)&v34 + 1);
      v38 = v34;
    }
    LODWORD(v36) = v37;
    v133 = v36;
    v29 = v30;
    goto LABEL_19;
  }
  v40 = *(_QWORD *)(a2 + 8);
  if ((_DWORD)v237 != 1)
  {
    LOWORD(v233) = 257;
    v80 = sub_22E42129C((uint64_t *)(a2 + 272), v40, v28, v127, (uint64_t)&v231);
    v81 = *(_QWORD *)(a2 + 8);
    v123 = v80;
    v182[0] = v80;
    v129 = v81;
    v182[1] = v81;
    v182[2] = 16;
    v183 = 0;
    v185 = 0;
    v184 = 0;
    LOWORD(v242) = 257;
    sub_22F24D74C((uint64_t *)(a2 + 272), (uint64_t)v182, 16, (uint64_t)&v238, (uint64_t)&v231);
    if (v236 <= 6u && ((1 << v236) & 0x43) != 0)
    {
      v82 = v235[0];
    }
    else
    {
      v238 = *(const char **)(a2 + 64);
      v239 = (uint64_t)v238;
      v82 = llvm::StructType::get();
    }
    v102 = v26;
    v103 = v22;
    v238 = "tmp";
    LOWORD(v242) = 259;
    v83 = sub_22F25E4D4(a2, v10, (uint64_t)&v238, 0);
    v85 = 0;
    v86 = v83 & 0xFFFFFFFFFFFFFFF8;
    if (v83 <= 7)
      v86 = 0;
    v87 = v84 & 0xFFFFFFFFFFFFFFF8;
    if (v83 <= 7)
      v87 = 0;
    if (v83 >= 8)
      v85 = 1 << (v84 & 7 | (8 * (v83 & 7)));
    *(_QWORD *)&v177 = v86;
    *((_QWORD *)&v177 + 1) = v87;
    v178 = v85;
    v179 = 0;
    v181 = 0;
    v180 = 0;
    v176 = 257;
    v101 = v82;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v177, v82, (uint64_t)v175, (uint64_t)&v238);
    v88 = v239;
    v134 = v238;
    v89 = v240;
    v105 = v239;
    v107 = v240;
    v91 = v241;
    v90 = HIDWORD(v241);
    v92 = *((_QWORD *)&v242 + 1);
    v93 = v242;
    *(_QWORD *)&v169 = v123;
    *((_QWORD *)&v169 + 1) = v129;
    v170 = 16;
    v171 = 0;
    v173 = 0;
    v172 = 0;
    v94 = **(_QWORD **)(v82 + 16);
    LOWORD(v242) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v169, v94, (uint64_t)&v238, (uint64_t)v174);
    v176 = 257;
    v95 = (llvm::Type **)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v174, (uint64_t)v175);
    v163[0] = v134;
    v163[1] = v88;
    v163[2] = v89;
    v164 = v91;
    v165 = v90;
    v166 = v93;
    v167 = v92;
    LOWORD(v242) = 257;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v163, 0, (uint64_t)&v238, (uint64_t)v168);
    sub_22E3BEDDC(a2 + 272, v95, (uint64_t)v168);
    v161[1] = v232;
    v161[2] = v233;
    v161[0] = v231;
    v96 = *(_QWORD *)(*(_QWORD *)(v101 + 16) + 8);
    LOWORD(v242) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), v161, v96, (uint64_t)&v238, (uint64_t)v162);
    v176 = 257;
    v130 = (llvm::Type **)sub_22E3C2A7C((uint64_t *)(a2 + 272), (uint64_t)v162, (uint64_t)v175);
    v155[0] = v134;
    v155[1] = v105;
    v155[2] = v107;
    v156 = v91;
    v157 = v90;
    v158 = v93;
    v159 = v92;
    LOWORD(v242) = 257;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v155, 1, (uint64_t)&v238, (uint64_t)v160);
    sub_22E3BEDDC(a2 + 272, v130, (uint64_t)v160);
    *(_QWORD *)&v149 = v134;
    *((_QWORD *)&v149 + 1) = v105;
    v150 = v107;
    v151 = v91;
    v152 = v90;
    v153 = v93;
    v154 = v92;
    v176 = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v149, v102, (uint64_t)v175, (uint64_t)&v238);
    v38 = (unint64_t)v238;
    v39 = v239;
    v35 = v240;
    v133 = v241;
    v79 = v242;
LABEL_65:
    v128 = v79;
    v29 = v103;
    goto LABEL_19;
  }
  LOWORD(v233) = 257;
  v41 = sub_22E42129C((uint64_t *)(a2 + 272), v40, v28, v127, (uint64_t)&v231);
  v42 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v186 = v41;
  *((_QWORD *)&v186 + 1) = v42;
  v187 = 16;
  v188 = 0;
  v190 = 0;
  v189 = 0;
  LOWORD(v242) = 257;
  sub_22E3BEE6C((uint64_t *)(a2 + 272), &v186, v26, (uint64_t)&v238, (uint64_t)&v231);
  v39 = *((_QWORD *)&v231 + 1);
  v38 = v231;
  v133 = *((_QWORD *)&v232 + 1);
  v35 = v232;
  v128 = v233;
LABEL_19:
  if (HIDWORD(v237))
  {
    v43 = llvm::ConstantInt::get();
    LOWORD(v242) = 257;
    v44 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344)
                                                                                               + 16))(*(_QWORD *)(a2 + 344), v131, v43, 0, 0);
    if (!v44)
    {
      LOWORD(v233) = 257;
      v45 = llvm::BinaryOperator::Create();
      v44 = (llvm::Type **)sub_22E3C12C8((uint64_t *)(a2 + 272), v45, (uint64_t)&v238);
    }
    v144[0] = v121;
    v144[1] = v120;
    v144[2] = v119;
    v145 = v118;
    v146 = v109;
    v147 = v117;
    v148 = v116;
    sub_22E3BEDDC(a2 + 272, v44, (uint64_t)v144);
  }
  if ((_DWORD)v237)
  {
    v46 = llvm::ConstantInt::get();
    LOWORD(v242) = 257;
    v47 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344)
                                                                                               + 16))(*(_QWORD *)(a2 + 344), v127, v46, 0, 0);
    if (!v47)
    {
      LOWORD(v233) = 257;
      v48 = llvm::BinaryOperator::Create();
      v47 = (llvm::Type **)sub_22E3C12C8((uint64_t *)(a2 + 272), v48, (uint64_t)&v238);
    }
    v139[0] = v115;
    v139[1] = v114;
    v139[2] = v113;
    v140 = v112;
    v141 = v108;
    v142 = v111;
    v143 = v110;
    sub_22E3BEDDC(a2 + 272, v47, (uint64_t)v139);
  }
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, v125, 0);
  v49 = a3[1];
  v138[0] = *a3;
  v138[1] = v49;
  v138[2] = a3[2];
  sub_22E6B71E8((uint64_t)v135, (_QWORD *)a2, v138, v10);
  sub_22E5ED9B4((_QWORD *)a2, v124, 0);
  v136[0] = v38;
  v136[1] = v39;
  v136[2] = v35;
  v136[3] = v133;
  v137 = v128;
  *(_QWORD *)&v231 = "vaarg.addr";
  LOWORD(v233) = 259;
  return sub_22E6A7D00(v29, (_QWORD *)a2, (uint64_t)v136, v126, (uint64_t)v135, (uint64_t)v125, (uint64_t)&v231);
}

double sub_22E6B6CD8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v14[3];
  __int128 v15[3];

  v9 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v11 = (unint64_t)(v10 - 65) < 0xFFFFFFFFFFFFFFC0 || (v10 & (v10 - 1)) != 0;
  v12 = a3[1];
  v15[0] = *a3;
  v15[1] = v12;
  v15[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v9, (uint64_t)v14);
  return sub_22E6A094C(a5, a2, v15, a4, v11, v14, 8, 0);
}

BOOL sub_22E6B6D90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2++;
    v8 = *(_DWORD *)(v7 + 8);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                            + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) - 24));
    v9 = (v5 - 1 + (*(_DWORD *)(v7 + 8) >> 8)) / v5 + v3;
    if (v8 == 15)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v8 == 15)
      ++v3;
    if (v8 == 13)
      v3 = v9;
    else
      v4 = v10;
    v6 -= 8;
  }
  while (v6);
  return (v3 + v4) > 4;
}

uint64_t sub_22E6B6E08()
{
  return 1;
}

unint64_t sub_22E6B6E10(uint64_t a1, unint64_t a2, uint64_t a3, int a4, _DWORD *a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v15;
  unint64_t result;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  llvm::DataLayout *DataLayout;
  uint64_t v36;

  v15 = sub_22E69BD58(a3);
  v36 = 0;
  result = sub_22E6B739C(a2, v15, 0, (int *)&v36 + 1, (int *)&v36, a7, a8);
  v17 = 0;
  *a5 = 0;
  *a6 = 0;
  v18 = HIDWORD(v36);
  switch(HIDWORD(v36))
  {
    case 0:
      ++*a5;
      v20 = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v15);
      result = sub_22E6B849C(a2, v20, 0, v15, 0);
      v17 = (unsigned __int8 *)result;
      v21 = v36;
      if ((_DWORD)v36 != 6)
        goto LABEL_23;
      if (*(_BYTE *)(result + 8) != 13)
        goto LABEL_22;
      v22 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
      v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v24 = *v23;
      if (*v23 && *(_BYTE *)(v24 + 16) == 44)
      {
        v25 = sub_22F114198(*(_QWORD *)(v24 + 24));
        result = sub_22E496830(v25);
        v15 = result;
        v22 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFF0);
        v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      }
      v26 = *v23;
      v27 = *(_DWORD *)(v26 + 16);
      if (v26)
        v28 = v27 == 11;
      else
        v28 = 0;
      if (v28)
      {
        if (((*(_DWORD *)(v26 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_22;
      }
      else if (v26 && v27 == 44)
      {
        result = sub_22F114198(*(_QWORD *)(v26 + 24));
        if ((*(_BYTE *)(result + 74) & 1) == 0 && *(_QWORD *)(result + 128) < 8uLL)
          goto LABEL_22;
      }
      else if (v27 != 9)
      {
        goto LABEL_22;
      }
      result = sub_22F2A3AE4(a2, v15);
      if (!(_DWORD)result)
        goto LABEL_22;
      result = sub_22F110B20(*v22);
      *(_BYTE *)(a1 + 24) = 1;
      v32 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_QWORD *)(a1 + 16) = 0;
      if ((_DWORD)result)
        v32 |= 0x100u;
      *(_QWORD *)a1 = 0;
      goto LABEL_35;
    case 1:
      v29 = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v15);
      result = sub_22E6B86E8(a2, v29, 0, v15, 0);
      v17 = (unsigned __int8 *)result;
      ++*a6;
      goto LABEL_22;
    case 3:
    case 5:
    case 7:
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v19
        && *(_BYTE *)(v19 + 16) == 45
        && sub_22E69BE08(v19, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32)) == 2)
      {
        ++*a5;
      }
      return sub_22E6B81D4(a1, a2, v15, a4);
    case 6:
      v21 = v36;
      if ((_DWORD)v36 == 6)
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 24) = 4;
        v32 = *(_WORD *)(a1 + 25) & 0xFE00;
      }
      else
      {
        v17 = 0;
LABEL_23:
        switch(v21)
        {
          case 0:
            ++*a5;
            v33 = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v15);
            result = sub_22E6B849C(a2, v33, 8u, v15, 8);
            v31 = (llvm::Type *)result;
            if (v18 != 6)
              goto LABEL_30;
            goto LABEL_29;
          case 1:
          case 4:
            v30 = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v15);
            result = sub_22E6B86E8(a2, v30, 8u, v15, 8);
            v31 = (llvm::Type *)result;
            if (v18 == 6)
            {
LABEL_29:
              *(_BYTE *)(a1 + 24) = 0;
              v34 = *(_WORD *)(a1 + 25) & 0xFE00;
              *(_QWORD *)a1 = v31;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 8;
              v32 = v34 | 0x80;
              goto LABEL_36;
            }
            ++*a6;
LABEL_30:
            if (v31)
            {
              DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 8) + 16));
              result = sub_22E6B89E4(v17, v31, DataLayout);
LABEL_33:
              v17 = (unsigned __int8 *)result;
            }
LABEL_34:
            *(_BYTE *)(a1 + 24) = 0;
            v32 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = v17;
            break;
          case 2:
            result = sub_22E6B88C8(a2, v15);
            goto LABEL_33;
          default:
            goto LABEL_34;
        }
LABEL_35:
        *(_QWORD *)(a1 + 8) = 0;
      }
LABEL_36:
      *(_WORD *)(a1 + 25) = v32;
      return result;
    default:
LABEL_22:
      v21 = v36;
      goto LABEL_23;
  }
}

uint64_t sub_22E6B71E8(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  __int128 v8;
  llvm::Value *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::Type **v16;
  uint64_t result;
  _OWORD v18[3];
  _OWORD v19[3];
  _QWORD v20[4];
  __int16 v21;
  _OWORD v22[3];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v7 = a2 + 34;
  v8 = a3[1];
  v22[0] = *a3;
  v22[1] = v8;
  v22[2] = a3[2];
  v20[0] = "overflow_arg_area_p";
  v21 = 259;
  sub_22E3C408C(a2 + 34, (uint64_t)v22, 2, (uint64_t)v20, (uint64_t)&v23);
  v19[0] = v23;
  v19[1] = v24;
  v19[2] = v25;
  v9 = (llvm::Value *)sub_22E3C43AC(v7, (uint64_t)v19, "overflow_arg_area");
  v10 = sub_22EF5D130(*(_QWORD *)(a2[18] + 144), a4);
  if (v10 >= 9)
    v9 = (llvm::Value *)sub_22E6A0CC4((uint64_t)a2, v9);
  v11 = sub_22E66C868(a2[18] + 280, a4, 0);
  v12 = llvm::PointerType::get();
  v21 = 257;
  v13 = sub_22E3C1740(v7, 49, (uint64_t)v9, v12, (uint64_t)v20);
  sub_22EF5CDF0(*(_QWORD *)(a2[18] + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v14 = (uint64_t *)llvm::ConstantInt::get();
  v15 = a2[1];
  v20[0] = "overflow_arg_area.next";
  v21 = 259;
  v16 = (llvm::Type **)sub_22E42129C(v7, v15, (uint64_t *)v9, v14, (uint64_t)v20);
  v18[0] = v23;
  v18[1] = v24;
  v18[2] = v25;
  result = sub_22E3BEDDC((uint64_t)v7, v16, (uint64_t)v18);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

unint64_t sub_22E6B739C(unint64_t result, unint64_t a2, unint64_t a3, int *a4, int *a5, unsigned int a6, int a7)
{
  unint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  BOOL v58;
  int v59;
  int v60;
  BOOL v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v95;
  llvm::APFloatBase *v97;
  llvm::APFloatBase *v98;
  uint64_t v99;
  _BOOL4 v100;
  _DWORD *v101;
  _BOOL4 v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  int v118;
  int v119;
  BOOL v121;
  unsigned int v122;
  int v124;
  int v125;
  unsigned int v126;
  int v128;
  int v129;
  int v131;
  int v133;
  int v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;

  v9 = a2;
  if (a3 >= 0x40)
    v10 = a5;
  else
    v10 = a4;
  *a5 = 6;
  *a4 = 6;
  *v10 = 7;
  v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(v13 + 16);
  v15 = v14;
  v16 = v13 == 0;
  if (v13)
    v17 = v14 == 11;
  else
    v17 = 0;
  if (v17)
    goto LABEL_38;
  v19 = a3;
  v20 = result;
  if (v13 && v14 == 44)
  {
    while (1)
    {
      v21 = sub_22F114198(*(_QWORD *)(v13 + 24));
      result = sub_22E496830(v21);
      *a5 = 6;
      *a4 = 6;
      *v10 = 7;
      v11 = (uint64_t *)(result & 0xFFFFFFFFFFFFFFF0);
      v12 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0);
      v14 = *(_DWORD *)(v13 + 16);
      v15 = v14;
      v16 = v13 == 0;
      if (v13 && v14 == 11)
        break;
      v9 = result;
      a7 = 0;
      if (!v13 || v14 != 44)
        goto LABEL_16;
    }
    result = v20;
LABEL_38:
    v28 = (v14 >> 19) & 0x1FF;
    if (v28 == 165)
    {
      v29 = 6;
LABEL_40:
      *v10 = v29;
      return result;
    }
    if ((v14 & 0xFB80000) == 0x5880000)
    {
      *a4 = 0;
      *a5 = 0;
      return result;
    }
    if ((v28 - 166) <= 0x12)
    {
LABEL_44:
      *v10 = 0;
      return result;
    }
    if ((v28 - 211) > 4)
      return result;
    if (v28 != 213)
    {
LABEL_48:
      v29 = 1;
      goto LABEL_40;
    }
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24)
                    + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(result + 8) + 24) - 24)
                    + 88);
    result = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)result);
    if (v31 != result)
    {
      result = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)result);
      if (v31 != result)
        goto LABEL_48;
      *a4 = 3;
      v32 = 4;
LABEL_109:
      *a5 = v32;
      return result;
    }
LABEL_87:
    *a4 = 1;
    v32 = 2;
    goto LABEL_109;
  }
LABEL_16:
  if (!v16 && v15 == 39 && (*(_DWORD *)(v13 + 40) & 6) == 2)
  {
    v23 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), v12);
    v24 = v23;
    if (v23 < 0x81)
    {
      *a4 = 0;
      *a5 = 0;
    }
    else
    {
      *a4 = 7;
    }
    v30 = v20;
    return sub_22E6B8B04(v30, v24, a4, a5);
  }
  if ((v14 & 0xFE) == 0x28)
    goto LABEL_44;
  v25 = v14 > 0x27u || ((1 << v14) & 0x8100000400) == 0;
  v26 = v14 & 0xFF800FF;
  if (!v25 || v26 == 114294795)
    goto LABEL_44;
  if (v15 == 31)
  {
    if (*(_BYTE *)(v12 + 16) != 31)
    {
      result = sub_22F10CF48(v12);
      if (!result)
        goto LABEL_44;
      v12 = result;
    }
    result = sub_22F28C8B4(v12);
    if (!(_DWORD)result || !*(_BYTE *)(v20 + 24) && ((v19 + 63) ^ v19) < 0x40)
      goto LABEL_44;
LABEL_129:
    *a5 = 0;
    *a4 = 0;
    return result;
  }
  result = sub_22E3E4B64(v12);
  if (result)
  {
    v33 = result;
    result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), result);
    if (result - 1 <= 0x3F)
    {
      if (((1 << (result - 1)) & 0x80008081) != 0)
      {
        *v10 = 0;
        v34 = v19 + result - 1;
        goto LABEL_107;
      }
      if (result == 64)
      {
        v45 = *(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0;
        v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 8) & 0xFFFFFFFFFFFFFFF0);
        v47 = *(_DWORD *)(v46 + 16);
        if (v46)
          v48 = (v47 & 0xFF800FF) == 111149067;
        else
          v48 = 0;
        if (v48)
          return result;
        v49 = *(_QWORD *)(v20 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 2000) + 250) & 0xF) << 16)
        {
          v50 = *(_QWORD *)(v49 + 24);
          v51 = *(_DWORD *)(v50 + 68);
          if (v51 > 0x21 || ((1 << v51) & 0x3F2000000) == 0)
          {
            v52 = 1;
            switch(v51)
            {
              case 3u:
              case 7u:
              case 0xBu:
                break;
              case 5u:
                result = llvm::Triple::getOSVersion((llvm::Triple *)(v50 + 32));
                if (result < 0xA)
                  goto LABEL_199;
                v47 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                break;
              default:
                goto LABEL_200;
            }
          }
        }
        if (v47 == 11)
          v52 = (v47 & 0xFB80000) != 0x5800000 && (((v47 & 0xFF80000) - 91750400) & 0xFFB80000) != 0;
        else
LABEL_199:
          v52 = 1;
LABEL_200:
        *v10 = v52;
        if ((v19 & 0xFFFFFFFFFFFFFFBFLL) == 0)
          return result;
        goto LABEL_108;
      }
    }
    if (result != 128 && (!a6 || result > qword_22F45D7F8[*(int *)(v20 + 20)]))
      return result;
    v53 = *(_QWORD *)(v20 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) + 2000) + 250) & 0xF) << 16 >= 0x50000u)
    {
      v60 = *(_DWORD *)(*(_QWORD *)(v53 + 24) + 68);
      v61 = v60 == 9 || v60 == 12;
      v62 = v61;
      if (result != 128 && v62)
      {
        v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v63 && (*(_DWORD *)(v63 + 16) & 0xFB800FF) == 92798987)
          return result;
      }
    }
    goto LABEL_87;
  }
  v35 = *v11;
  v36 = *(unsigned __int8 *)(*v11 + 16);
  if (*v11 && v36 == 12)
  {
    result = *v11;
    goto LABEL_64;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    result = sub_22F10CF48(*v11);
    v35 = *v11;
    if (result)
    {
LABEL_64:
      v37 = *(_QWORD *)(result + 32);
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 8);
      v39 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), v35);
      v40 = v39;
      v41 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFFFF0);
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v43 = *(_DWORD *)(v42 + 16);
      if (v42)
        v44 = v43 == 11;
      else
        v44 = 0;
      if (v44)
      {
        if (((v43 >> 19) & 0x1FE) - 166 >= 0x14)
          goto LABEL_97;
      }
      else if (v42 && v43 == 44)
      {
        v39 = sub_22F114198(*(_QWORD *)(v42 + 24));
        if ((*(_BYTE *)(v39 + 74) & 1) == 0 && *(_QWORD *)(v39 + 128) <= 7uLL)
        {
          v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_97:
          v54 = v43 & 0xFF800FF;
          if ((v43 & 0xFF800FF) == 0x6B0000B
            || ((v55 = v37 & 7 | v38, v56 = *(_QWORD *)(v20 + 8), v57 = *(_QWORD **)(v56 + 8), v54 != 112721931)
              ? (v58 = v55 == v57[2070])
              : (v58 = 1),
                v58))
          {
            v59 = 1;
          }
          else
          {
            if (v55 == v57[2071])
            {
LABEL_190:
              *a5 = 1;
              *a4 = 1;
              goto LABEL_105;
            }
            if (v55 != v57[2072])
              goto LABEL_105;
            v97 = *(llvm::APFloatBase **)(*(_QWORD *)(v56 + 24) + *(_QWORD *)(**(_QWORD **)(v56 + 24) - 24) + 88);
            v98 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)v39);
            if (v97 == v98)
            {
              v59 = 7;
            }
            else
            {
              if (v97 != (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v98))
                goto LABEL_190;
              v59 = 5;
            }
          }
          *v10 = v59;
LABEL_105:
          result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), *v41);
          if (*a5 != 6)
            return result;
          v34 = result + v19;
LABEL_107:
          if ((v34 ^ v19) < 0x40)
            return result;
LABEL_108:
          v32 = *a4;
          goto LABEL_109;
        }
      }
      else if (v43 != 9)
      {
        goto LABEL_97;
      }
      if (v40 > 0x40)
      {
        if (v40 <= 0x80)
        {
          *a5 = 0;
          *a4 = 0;
        }
      }
      else
      {
        *v10 = 0;
      }
      goto LABEL_105;
    }
    v36 = *(unsigned __int8 *)(v35 + 16);
  }
  if (v36 == 9
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
    && (result = sub_22F10CF48(v35), (v35 = result) != 0))
  {
    v65 = (*(_DWORD *)(v35 + 32) >> 1) & 0xFFFFFF;
    if (v65 <= 0x40)
      goto LABEL_44;
    if (v65 > 0x80)
      return result;
    goto LABEL_129;
  }
  result = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), v9);
  if (!result || (v66 = result, *(_BYTE *)(result + 16) != 2))
  {
    v75 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v75)
      return result;
    if (*(_BYTE *)(v75 + 16) != 45)
      return result;
    v76 = v20;
    result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), *v11);
    if (result > 0x200)
      return result;
    v77 = result;
    result = sub_22E69BE08(v75, *(_QWORD *)(*(_QWORD *)(v20 + 8) + 32));
    if ((_DWORD)result)
      return result;
    result = sub_22F114198(*(_QWORD *)(v75 + 24));
    if ((*(_BYTE *)(result + 74) & 0x80) != 0)
      return result;
    v78 = result;
    v138 = v75;
    v139 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), result);
    *v10 = 6;
    if ((*(_DWORD *)(v78 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v79 = sub_22E46A3A0(v78);
      if (v79 != v80)
      {
        v81 = v79;
        v82 = v80;
        do
        {
          v83 = *(_QWORD *)(**(_QWORD **)(v81 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v83 + 8) & 0xF) != 0)
            v83 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v81 + 16));
          v84 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v141 = 0;
          v85 = *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8);
          v86 = sub_22E46A3EC(v139, v84);
          v87 = sub_22EF5CDF0(v85, *(_QWORD *)(*(_QWORD *)(v85 + 16408) & 0xFFFFFFFFFFFFFFF0));
          v88 = *(_QWORD *)(**(_QWORD **)(v81 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v88 + 8) & 0xF) != 0)
            v88 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v81 + 16));
          sub_22E6B739C(v76, v88 & 0xFFFFFFFFFFFFFFF0, v19 + v87 * v86, (char *)&v141 + 4, &v141, a6, 0);
          v89 = *a4;
          if (*a4 == HIDWORD(v141) || HIDWORD(v141) == 6)
          {
            v90 = *a4;
          }
          else if (HIDWORD(v141) == 7)
          {
            v90 = 7;
          }
          else if (v89 == 6)
          {
            v90 = HIDWORD(v141);
          }
          else
          {
            v90 = 0;
            if (v89 && HIDWORD(v141))
            {
              v95 = v89 - 3;
              if ((HIDWORD(v141) - 3) >= 3 && v95 >= 2)
                v90 = 1;
              else
                v90 = 7;
            }
          }
          *a4 = v90;
          v91 = *a5;
          if (*a5 == (_DWORD)v141 || (_DWORD)v141 == 6)
          {
            v92 = *a5;
          }
          else
          {
            if ((_DWORD)v141 == 7)
            {
              *a5 = 7;
              return sub_22E6B8B04(v76, v77, a4, a5);
            }
            if (v91 == 6)
            {
              v92 = v141;
            }
            else
            {
              v92 = 0;
              if (v91 && (_DWORD)v141)
              {
                v93 = v91 - 3;
                if ((v141 - 3) >= 3 && v93 >= 2)
                  v92 = 1;
                else
                  v92 = 7;
              }
            }
          }
          *a5 = v92;
          if (v92 == 7 || *a4 == 7)
            return sub_22E6B8B04(v76, v77, a4, a5);
          v81 += 24;
        }
        while (v81 != v82);
      }
    }
    v99 = *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8);
    if (((*(unsigned __int8 *)(*(_QWORD *)(v99 + 2000) + 250) << 16) & 0xE0000u) >= 0x60000)
    {
      v101 = *(_DWORD **)(v99 + 15088);
      v100 = v101[14] == 42 && v101[16] == 3 && v101[17] == 25;
    }
    else
    {
      v100 = 1;
    }
    v102 = sub_22F10E06C(v138);
    v103 = sub_22EFC3B90(v78);
    if (!v103)
      goto LABEL_326;
    v104 = v103;
    v105 = 0;
    v106 = !v102 || v100;
    while (1)
    {
      v107 = v105;
      v108 = *(_QWORD *)(*(_QWORD *)(v139 + 48) + 8 * v105);
      v109 = *(_DWORD *)(v104 + 68);
      if ((v109 & 1) == 0 || *(_QWORD *)(v104 + 40))
        break;
      do
      {
LABEL_270:
        v104 = *(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v104)
          goto LABEL_326;
      }
      while ((*(_DWORD *)(v104 + 28) & 0x7Fu) - 49 > 2);
      v105 = v107 + 1;
    }
    if (v77 >= 0x81)
    {
      if (v106
        && v77 != sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v76 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v104 + 48) & 0xFFFFFFFFFFFFFFF0)))
      {
        goto LABEL_324;
      }
      v110 = *(_DWORD *)(v76 + 20);
      if (v110 == 1)
      {
        v111 = 256;
      }
      else
      {
        if (v110 != 2)
          goto LABEL_324;
        v111 = 512;
      }
      if (v77 > v111)
        goto LABEL_324;
    }
    if ((v109 & 1) != 0)
    {
      v115 = *(_QWORD *)(*(_QWORD *)(v139 + 48) + 8 * v107) + v19;
      v116 = v115 + sub_22EFC2EF4(v104, *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8)) - 1;
      if (v115 >= 0x40)
        v114 = 6;
      else
        v114 = 0;
      if (v116 >= 0x40 || v115 >= 0x40)
        v118 = 0;
      else
        v118 = 6;
      LODWORD(v141) = v118;
      goto LABEL_233;
    }
    v112 = v108 + v19;
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v76 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v104 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (!(v112 % v113))
    {
      v141 = 0;
      sub_22E6B739C(v76, *(_QWORD *)(v104 + 48), v112, (char *)&v141 + 4, &v141, a6, 0);
      v114 = HIDWORD(v141);
LABEL_233:
      v119 = *a4;
      if (v114 != 6 && v119 != v114)
      {
        if (v114 == 7)
        {
          v119 = 7;
        }
        else if (v119 == 6)
        {
          v119 = v114;
        }
        else
        {
          if (v114)
            v121 = v119 == 0;
          else
            v121 = 1;
          if (v121)
          {
            v119 = 0;
          }
          else
          {
            v122 = v114 - 3;
            if ((v119 - 3) >= 2 && v122 >= 3)
              v119 = 1;
            else
              v119 = 7;
          }
        }
      }
      *a4 = v119;
      v124 = *a5;
      v125 = v141;
      if (*a5 == (_DWORD)v141 || (_DWORD)v141 == 6)
      {
        v125 = *a5;
      }
      else
      {
        if ((_DWORD)v141 == 7)
        {
          *a5 = 7;
          goto LABEL_326;
        }
        if (v124 != 6)
        {
          if (v124)
          {
            v126 = v124 - 3;
            if ((v141 - 3) >= 3 && v126 >= 2)
              v128 = 1;
            else
              v128 = 7;
            if ((_DWORD)v141)
              v125 = v128;
            else
              v125 = 0;
          }
          else
          {
            v125 = 0;
          }
        }
      }
      *a5 = v125;
      if (v125 != 7 && *a4 != 7)
        goto LABEL_270;
LABEL_326:
      v30 = v76;
      v24 = v77;
      return sub_22E6B8B04(v30, v24, a4, a5);
    }
LABEL_324:
    *a4 = 7;
    goto LABEL_326;
  }
  result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), *v11);
  if (result < 0x201)
    v67 = 1;
  else
    v67 = a7;
  if (v67 != 1)
    return result;
  v68 = result;
  result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0));
  if (v19 % v69)
    return result;
  *v10 = 6;
  result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v66 + 32) & 0xFFFFFFFFFFFFFFF0));
  v70 = result;
  v71 = (_QWORD *)(v66 + 40);
  if (*(_DWORD *)(v66 + 48) >= 0x41u)
    v71 = (_QWORD *)*v71;
  v72 = (_QWORD *)*v71;
  if (v68 >= 0x81)
  {
    if (v68 != result)
      return result;
    v73 = *(_DWORD *)(v20 + 20);
    if (!v73)
      return result;
    v74 = v73 == 2 ? 512 : 256;
    if (v68 > v74)
      return result;
  }
  if (!v72)
    goto LABEL_321;
  while (1)
  {
    v141 = 0;
    sub_22E6B739C(v20, *(_QWORD *)(v66 + 32), v19, (char *)&v141 + 4, &v141, a6, 0);
    v129 = *a4;
    if ((HIDWORD(v141) - 3) >= 3 && (*a4 - 3) >= 2)
      v131 = 1;
    else
      v131 = 7;
    if (!HIDWORD(v141))
      v131 = 0;
    if (!v129)
      v131 = 0;
    if (v129 == 6)
      v131 = HIDWORD(v141);
    if (HIDWORD(v141) == 7)
      v131 = 7;
    if (v129 != HIDWORD(v141) && HIDWORD(v141) != 6)
      v129 = v131;
    *a4 = v129;
    v133 = *a5;
    if (*a5 == (_DWORD)v141 || (_DWORD)v141 == 6)
      goto LABEL_314;
    if ((_DWORD)v141 == 7)
      break;
    if ((v141 - 3) >= 3 && (v133 - 3) >= 2)
      v136 = 1;
    else
      v136 = 7;
    if (!(_DWORD)v141)
      v136 = 0;
    if (!v133)
      v136 = 0;
    if (v133 == 6)
      v133 = v141;
    else
      v133 = v136;
LABEL_314:
    *a5 = v133;
    if (v133 != 7 && *a4 != 7)
    {
      v19 += v70;
      v72 = (_QWORD *)((char *)v72 - 1);
      if (v72)
        continue;
    }
    goto LABEL_321;
  }
  *a5 = 7;
LABEL_321:
  v30 = v20;
  v24 = v68;
  return sub_22E6B8B04(v30, v24, a4, a5);
}

unint64_t sub_22E6B81D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t result;
  __int16 v28;
  __int16 v29;
  unsigned int v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v5 = a3;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22E619D68(a3))
  {
    v9 = *v8;
    v10 = *v8 && *(_BYTE *)(*v8 + 16) == 31;
    if (!v10
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
       || (v9 = sub_22F10CF48(v9)) == 0)
      || !sub_22F28C8B4(v9))
    {
      v11 = sub_22E3E4B64(*v8);
      if (!v11)
        goto LABEL_51;
      v12 = v11;
      v13 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
      if (v13 >= 0x41 && v13 <= qword_22F45D7F8[*(int *)(a2 + 20)])
      {
        v15 = *(_QWORD *)(a2 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 2000) + 250) & 0xF) << 16 < 0x50000u
          || ((v16 = *(_DWORD *)(*(_QWORD *)(v15 + 24) + 68), v16 != 12) ? (v17 = v16 == 9) : (v17 = 1),
              !v17
           || ((v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
             ? (v19 = (*(_DWORD *)(v18 + 16) & 0xFB800FF) == 92798987)
             : (v19 = 0),
               !v19)))
        {
LABEL_51:
          v20 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
          v21 = *(unsigned __int8 *)(v20 + 16);
          if (v21 != 9)
          {
            if (v21 == 44)
            {
              v34 = sub_22F114198(*(_QWORD *)(v20 + 24));
              v5 = sub_22E496830(v34);
            }
            result = sub_22F2A3AE4(a2, v5);
            if ((_DWORD)result)
            {
              result = sub_22F110B20(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
              *(_BYTE *)(a1 + 24) = 1;
              v29 = *(_WORD *)(a1 + 25) & 0xFE00;
              *(_QWORD *)(a1 + 16) = 0;
              if ((_DWORD)result)
                v29 |= 0x100u;
            }
            else
            {
              *(_BYTE *)(a1 + 24) = 0;
              v29 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
              *(_QWORD *)(a1 + 16) = 0;
            }
            *(_QWORD *)a1 = 0;
            goto LABEL_36;
          }
        }
      }
    }
  }
  v22 = *v8;
  v23 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 + 8);
  if (!v23 || *(_BYTE *)(v23 + 16) != 45)
  {
LABEL_28:
    result = sub_22EF5CDF0(*(_QWORD *)(v24 + 8), v22);
    if (v30 >> 3 <= 8)
      v31 = 8;
    else
      v31 = v30 >> 3;
    if (a4
      || (v33 = v30, result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v8), v33 > 0x47)
      || result > 0x40)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 2;
      v32 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_DWORD *)(a1 + 16) = v31;
      v29 = v32 | 8;
      goto LABEL_37;
    }
    result = llvm::IntegerType::get();
    *(_BYTE *)(a1 + 24) = 0;
    v29 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = result;
LABEL_36:
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_37;
  }
  v25 = sub_22E69BE08(v23, *(_QWORD *)(v24 + 32));
  v24 = *(_QWORD *)(a2 + 8);
  if (!v25)
  {
    v22 = *v8;
    goto LABEL_28;
  }
  v26 = v25 == 1;
  result = sub_22EF5D130(*(_QWORD *)(v24 + 8), v5);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 2;
  v28 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_DWORD *)(a1 + 16) = result;
  v29 = v28 | (8 * v26);
LABEL_37:
  *(_WORD *)(a1 + 25) = v29;
  return result;
}

uint64_t sub_22E6B849C(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  unsigned int v7;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  llvm::StructLayout *StructLayout;
  llvm::StructLayout *v15;
  unsigned int ElementContainingOffset;
  llvm::Type *v17;
  llvm::DataLayout *DataLayout;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t ABITypeAlignment;
  unsigned int v24;
  _QWORD v26[3];

  v7 = a3;
  v10 = 8 * a5;
  if (a3)
    goto LABEL_11;
LABEL_2:
  if (*(_BYTE *)(a2 + 8) == 15 && *(_BYTE *)(a1 + 24) || (llvm::Type::isIntegerTy((llvm::Type *)a2) & 1) != 0)
    return a2;
  if ((llvm::Type::isIntegerTy((llvm::Type *)a2) & 1) != 0
    || (llvm::Type::isIntegerTy((llvm::Type *)a2) & 1) != 0
    || (llvm::Type::isIntegerTy((llvm::Type *)a2) & 1) != 0
    || *(_BYTE *)(a2 + 8) == 15 && !*(_BYTE *)(a1 + 24))
  {
    v11 = *(_DWORD *)(a2 + 8) >> 8;
    if (*(_DWORD *)(a2 + 8) == 15)
      v11 = 32;
    if ((sub_22E6B8BB4(a4, v11 + v10, (v10 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) & 1) != 0)
      return a2;
  }
LABEL_11:
  while (1)
  {
    v12 = *(unsigned __int8 *)(a2 + 8);
    v13 = a2 == 0;
    if (!a2 || v12 != 16)
      break;
    llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
    StructLayout = (llvm::StructLayout *)llvm::DataLayout::getStructLayout();
    if (*(_QWORD *)StructLayout <= (unint64_t)v7)
    {
      v13 = 0;
      v12 = *(unsigned __int8 *)(a2 + 8);
      break;
    }
    v15 = StructLayout;
    ElementContainingOffset = llvm::StructLayout::getElementContainingOffset(StructLayout);
    v7 -= *((_DWORD *)v15 + 2 * ElementContainingOffset + 4);
    a2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * ElementContainingOffset);
    if (!v7)
      goto LABEL_2;
  }
  if (!v13 && v12 == 17)
  {
    v17 = *(llvm::Type **)(a2 + 24);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v17);
    v20 = (unint64_t)(v19 + 7) >> 3;
    v22 = v21 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v17);
    v26[0] = (ABITypeAlignment + v20 - 1) / ABITypeAlignment * ABITypeAlignment;
    v26[1] = v22;
    v24 = llvm::TypeSize::operator unsigned long long();
    return sub_22E6B849C(a1, v17, v7 % v24, a4, a5);
  }
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v26);
  return llvm::IntegerType::get();
}

uint64_t sub_22E6B86E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm::DataLayout *DataLayout;
  unsigned int v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  unsigned __int8 *v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  llvm::LLVMContext *v19;
  BOOL v20;
  int v21;
  int v22;
  int v24;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
  v11 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_22E6B8E5C(a2, a3, DataLayout);
  if (!v12)
    return llvm::Type::getDoubleTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v13);
  v14 = (unsigned __int8 *)v12;
  if (*(_BYTE *)(v12 + 8) == 3)
    return llvm::Type::getDoubleTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v13);
  v16 = (v11 >> 3) - a5;
  sub_22E3C304C((uint64_t)DataLayout, v12);
  llvm::DataLayout::getABITypeAlignment(DataLayout, (llvm::Type *)v14);
  v17 = llvm::TypeSize::operator unsigned long long();
  if (v16 > v17 && (v18 = sub_22E6B8E5C(a2, v17 + a3, DataLayout)) != 0
    || ((v14[8] & 0xFE) == 0 ? (v20 = v16 >= 5) : (v20 = 0), v20 && (v18 = sub_22E6B8E5C(a2, a3 + 4, DataLayout)) != 0))
  {
    v21 = v14[8];
    v22 = *(unsigned __int8 *)(v18 + 8);
    if (v21 == 2 && v22 == 2)
      return llvm::FixedVectorType::get();
    v24 = v22 & 0xFE;
    if ((v21 & 0xFE) != 0)
    {
      if (v24)
        return llvm::Type::getDoubleTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v19);
    }
    else if (!v24)
    {
      if (v16 >= 5)
        sub_22E6B8E5C(a2, a3 + 4, DataLayout);
      return llvm::FixedVectorType::get();
    }
    llvm::Type::getHalfTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v19);
    return llvm::FixedVectorType::get();
  }
  return (uint64_t)v14;
}

uint64_t sub_22E6B88C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v12;

  v2 = a2;
  v4 = sub_22E6A8A40(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (v4)
    v2 = v4 & 0xFFFFFFFFFFFFFFF0;
  v5 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v2);
  v6 = v5;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) != 0x12)
  {
    if (*(_DWORD *)(v5 + 8) != 5)
    {
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0));
      llvm::Type::getDoubleTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v12);
      return llvm::FixedVectorType::get();
    }
    return v6;
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 2000) + 250) & 0xF) << 16 < 0x50000u)
    return v6;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 68);
  v9 = v8 == 12 || v8 == 9;
  if (!v9 || !llvm::Type::isIntegerTy(*(llvm::Type **)(v5 + 24)))
    return v6;
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0));
  llvm::Type::getInt64Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v10);
  return llvm::FixedVectorType::get();
}

uint64_t sub_22E6B89E4(unsigned __int8 *a1, llvm::Type *a2, llvm::DataLayout *a3)
{
  unsigned int v6;
  unsigned int ABITypeAlignment;
  llvm::LLVMContext *v8;

  sub_22E3C304C((uint64_t)a3, (uint64_t)a1);
  llvm::DataLayout::getABITypeAlignment(a3, (llvm::Type *)a1);
  v6 = llvm::TypeSize::operator unsigned long long();
  ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(a3, a2);
  if (((v6 + (unint64_t)ABITypeAlignment - 1) / ABITypeAlignment) * ABITypeAlignment != 8)
  {
    if ((a1[8] | 2) == 2)
      llvm::Type::getDoubleTy(*(llvm::Type **)a1, v8);
    else
      llvm::Type::getInt64Ty(*(llvm::Type **)a1, v8);
  }
  return llvm::StructType::get();
}

uint64_t sub_22E6B8B04(uint64_t result, unsigned int a2, int *a3, int *a4)
{
  int v4;
  int v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  v4 = *a4;
  if (*a4 == 7)
  {
    v5 = 7;
    *a3 = 7;
    v4 = *a4;
  }
  else
  {
    v5 = *a3;
  }
  if (v4 == 4 && v5 != 3)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24) + 68);
    v8 = v7 > 0x21;
    v9 = (1 << v7) & 0x3F0000888;
    if (v8 || v9 == 0)
    {
      v5 = 7;
      *a3 = 7;
      v4 = *a4;
    }
    else
    {
      v4 = 4;
    }
  }
  if (a2 >= 0x81)
  {
    if (v5 == 1 && v4 == 2)
      return result;
    v5 = 7;
    *a3 = 7;
    v4 = *a4;
  }
  if (v4 == 2 && v5 != 1)
    *a4 = 1;
  return result;
}

uint64_t sub_22E6B8BB4(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;

  v8 = a1 & 0xFFFFFFFFFFFFFFF0;
  if (sub_22EF5CDF0(a4, *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0)) <= a2)
    return 1;
  v9 = sub_22EF5C728(a4, a1);
  if (v9)
  {
    v10 = v9;
    if (*(_BYTE *)(v9 + 16) == 2)
    {
      v11 = sub_22EF5CDF0(a4, *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0));
      v12 = (_QWORD *)(v10 + 40);
      if (*(_DWORD *)(v10 + 48) >= 0x41u)
        v12 = (_QWORD *)*v12;
      v13 = *(_DWORD *)v12;
      if (*(_DWORD *)v12)
      {
        v14 = 0;
        v15 = a3;
        while (v14 < a3)
        {
          if (a2 >= v14)
            v16 = a2 - v14;
          else
            v16 = 0;
          if ((sub_22E6B8BB4(*(_QWORD *)(v10 + 32), v16, v15, a4) & 1) == 0)
            return 0;
          v14 += v11;
          v15 = (v15 - v11);
          if (!--v13)
            return 1;
        }
      }
      return 1;
    }
  }
  result = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18 && *(_BYTE *)(v18 + 16) == 45)
  {
    v19 = sub_22F114198(*(_QWORD *)(v18 + 24));
    v20 = sub_22F0C975C(a4, v19);
    if (v19)
      v21 = (*(_DWORD *)(v19 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    else
      v21 = 0;
    if (v21)
    {
      v22 = sub_22E46A3A0(v19);
      if (v22 != v23)
      {
        v24 = v22;
        v25 = v23;
        do
        {
          v26 = *(_QWORD *)(**(_QWORD **)(v24 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v26 + 8) & 0xF) != 0)
            v26 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v24 + 16));
          v27 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v28 = sub_22E46A3EC(v20, v27);
          v29 = sub_22EF5CDF0(a4, *(_QWORD *)(*(_QWORD *)(a4 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v28;
          v30 = a3 - v29;
          if (a3 > v29)
          {
            v21 = a2 >= v29;
            v31 = a2 - v29;
            if (v21)
              v32 = v31;
            else
              v32 = 0;
            v33 = *(_QWORD *)(**(_QWORD **)(v24 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v33 + 8) & 0xF) != 0)
              v33 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v24 + 16));
            result = sub_22E6B8BB4(v33 & 0xFFFFFFFFFFFFFFF0, v32, v30, a4);
            if (!(_DWORD)result)
              return result;
          }
          v24 += 24;
        }
        while (v24 != v25);
      }
    }
    v34 = sub_22EFC3B90(v19);
    if (v34)
    {
      LODWORD(v35) = **(_DWORD **)(v20 + 48);
      if (v35 < a3)
      {
        v36 = v34;
        v37 = 0;
LABEL_37:
        if (a2 >= v35)
          v38 = a2 - v35;
        else
          v38 = 0;
        result = sub_22E6B8BB4(*(_QWORD *)(v36 + 48), v38, (a3 - v35), a4);
        if ((_DWORD)result)
        {
          while (1)
          {
            v36 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v36)
              return 1;
            if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 49 <= 2)
            {
              v35 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * ++v37);
              if (v35 < a3)
                goto LABEL_37;
              return result;
            }
          }
        }
        return result;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E6B8E5C(uint64_t a1, unsigned int a2, llvm::DataLayout *a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  llvm::StructLayout *StructLayout;
  unsigned int ElementContainingOffset;
  BOOL v9;
  llvm::Type *v10;
  unsigned int v11;

  v4 = a2;
  v5 = a1;
  v6 = *(unsigned __int8 *)(a1 + 8);
  if (a2 || v6 >= 7)
  {
    while (v6 == 16)
    {
      if (!*(_DWORD *)(v5 + 12))
        return 0;
      StructLayout = (llvm::StructLayout *)llvm::DataLayout::getStructLayout();
      ElementContainingOffset = llvm::StructLayout::getElementContainingOffset(StructLayout);
      v4 -= *((_QWORD *)StructLayout + ElementContainingOffset + 2);
      v5 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * ElementContainingOffset);
      v6 = *(unsigned __int8 *)(v5 + 8);
      if (v4)
        v9 = 1;
      else
        v9 = v6 >= 7;
      if (!v9)
        return v5;
    }
    if (v6 == 17)
    {
      v10 = *(llvm::Type **)(v5 + 24);
      sub_22E3C304C((uint64_t)a3, (uint64_t)v10);
      llvm::DataLayout::getABITypeAlignment(a3, v10);
      v11 = llvm::TypeSize::operator unsigned long long();
      return sub_22E6B8E5C(v10, v4 % v11, a3);
    }
    return 0;
  }
  return v5;
}

unint64_t sub_22E6B8F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  __int16 v13;
  __int16 v14;

  v3 = a3;
  if (sub_22E619D68(a3))
    goto LABEL_11;
  v6 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
  v8 = v7 && *(_BYTE *)(v7 + 16) == 31;
  if ((v8
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
     && (v7 = sub_22F10CF48(v7)) != 0)
    && sub_22F28C8B4(v7))
  {
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)v9;
  if (*(_QWORD *)v9 && *(_BYTE *)(v10 + 16) == 44)
  {
    v11 = sub_22F114198(*(_QWORD *)(v10 + 24));
    v3 = sub_22E496830(v11);
    v6 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  if (*(_BYTE *)(*(_QWORD *)v9 + 16) == 9)
  {
LABEL_11:
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v3);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v13 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
    v14 = v13 | 8;
  }
  else
  {
    result = sub_22F2A3AE4(a2, v3);
    if ((_DWORD)result)
    {
      result = sub_22F110B20(*v6);
      *(_BYTE *)(a1 + 24) = 1;
      v14 = *(_WORD *)(a1 + 25) & 0xFE00;
      *(_QWORD *)(a1 + 16) = 0;
      if ((_DWORD)result)
        v14 |= 0x100u;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      v14 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_WORD *)(a1 + 25) = v14;
  return result;
}

unint64_t sub_22E6B90CC(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  char v32;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v12 = 0;
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v12 + 24)) + 74) & 0x80) != 0)
    return sub_22E6B8F74(a1, a2, a3);
  v13 = sub_22F114198(*(_QWORD *)(v12 + 24));
  if (v13)
    v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v14 = 0;
  if (v14)
  {
    v24 = v13;
    if (sub_22E463414(v13))
    {
LABEL_28:
      *a5 = 0;
      *a4 = 0;
      return sub_22E6B8F74(a1, a2, a3);
    }
    v25 = sub_22E46A3A0(v24);
    if (v25 != v26)
    {
      v27 = v25;
      v28 = v26;
      do
      {
        v29 = *(_QWORD *)(**(_QWORD **)(v27 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
          v29 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v27 + 16));
        sub_22E6B90CC(v31, a2, v29 & 0xFFFFFFFFFFFFFFF0, a4, a5, a6);
        if (v32 == 2)
          goto LABEL_28;
        v27 += 24;
      }
      while (v27 != v28);
    }
  }
  v15 = sub_22F114198(*(_QWORD *)(v12 + 24));
  result = sub_22EFC3B90(v15);
  if (!result)
    goto LABEL_25;
  v17 = result;
LABEL_11:
  v18 = *(_QWORD *)(v17 + 48);
  v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45 && !sub_22F10E06C(v20))
  {
    result = sub_22E6B90CC(v31, a2, v18, a4, a5, a6);
    if (v32 != 2)
      goto LABEL_22;
    goto LABEL_28;
  }
  v30 = 0;
  sub_22E6B6E10((uint64_t)v31, a2, v18, -1, (_DWORD *)&v30 + 1, &v30, 1u, 1);
  if (v32 == 2)
  {
    *a5 = 0;
    *a4 = 0;
    return sub_22E6B8F74(a1, a2, a3);
  }
  v21 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v18);
  if (v21 && *(_BYTE *)(v21 + 16) == 2)
    v19 = (uint64_t *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
  result = sub_22E3E4B64(*v19);
  if (result)
  {
    v22 = result;
    result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), result);
    if (result > *a6)
    {
      result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v22);
      *a6 = result;
    }
  }
  *a4 += HIDWORD(v30);
  *a5 += v30;
LABEL_22:
  while (1)
  {
    v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v17)
      break;
    if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_11;
  }
LABEL_25:
  *(_BYTE *)(a1 + 24) = 0;
  v23 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 25) = v23;
  return result;
}

_QWORD *sub_22E6B93AC(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  llvm::DataLayout *DataLayout;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24FA6B998;
  *(_QWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 20) = a3;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a2 + 16));
  *(_BYTE *)(v6 + 24) = llvm::DataLayout::getPointerSize(DataLayout) == 8;
  *a1 = &off_24FA6BBA0;
  a1[1] = v6;
  return a1;
}

_QWORD *sub_22E6B9430(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B9470(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6B94C0(int a1, uint64_t a2, llvm::GlobalValue *a3, uint64_t a4)
{
  int v7;
  const char *v8;

  sub_22E6B9A2C(a1, a2, a3, a4);
  sub_22E6A7DFC((uint64_t)a3, a4);
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
    {
      v7 = *(unsigned __int16 *)(*(_QWORD *)(a4 + 152) + 148) | (*(unsigned __int8 *)(*(_QWORD *)(a4 + 152) + 150) << 16);
      if ((v7 & 0x80000) != 0)
      {
        if ((v7 & 0x100000) != 0)
        {
          llvm::Function::addFnAttr();
          v8 = "___chkstk_darwin";
        }
        else
        {
          v8 = "__chkstk_darwin";
        }
        strlen(v8);
        llvm::Function::addFnAttr();
      }
    }
  }
}

uint64_t sub_22E6B958C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0x1000000000;
  v30 = 0;
  v31 = 0;
  v32 = 0x1000000000;
  v10 = a6[2];
  if (v10)
  {
    v11 = 0;
    v12 = 152 * v10;
    v13 = (uint64_t *)(*(_QWORD *)a6 + 144);
    while (1)
    {
      v14 = *(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF0);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1
        || (unint64_t)sub_22EF5CDF0(*(_QWORD *)(a2 + 144), v14) < 0x81)
      {
        goto LABEL_16;
      }
      if (!(HIDWORD(v31) | HIDWORD(v34)))
      {
        v19 = *(_QWORD *)(a2 + 144);
        sub_22F36FB08(v19, &v33, a4);
        sub_22F36FB08(v19, &v30, a5);
      }
      v15 = *v13;
      v16 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v16 && *(_BYTE *)(v16 + 16) == 26)
        break;
      v20 = *v13;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        v16 = sub_22F10CF48(v16);
        v15 = v20;
        if (v16)
          break;
        v18 = 0;
      }
      else
      {
        v18 = 0;
      }
LABEL_13:
      if (v11 < v18)
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 120) + 8 * v11) + 48);
      if ((sub_22E6B9AC0(*(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 144), a3, (uint64_t)&v33, (uint64_t)&v30, v15, 1u) & 1) != 0)
        goto LABEL_38;
LABEL_16:
      ++v11;
      v13 += 19;
      v12 -= 152;
      if (!v12)
        goto LABEL_22;
    }
    v18 = (unsigned __int16)(*(_QWORD *)(v16 + 16) >> 38);
    goto LABEL_13;
  }
LABEL_22:
  v21 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(unsigned __int8 *)(v21 + 16) - 27 > 0xFFFFFFFD;
  else
    v22 = 0;
  if (!v22)
    v21 = sub_22F10CF48(v21);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 <= 1)
  {
    v23 = *(_QWORD *)(a2 + 144);
    v24 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v24 || *(unsigned __int8 *)(v24 + 16) - 27 <= 0xFFFFFFFD)
      v24 = sub_22F10CF48(v24);
    if ((unint64_t)sub_22EF5CDF0(v23, *(_QWORD *)(*(_QWORD *)(v24 + 24) & 0xFFFFFFFFFFFFFFF0)) >= 0x81)
    {
      if (!(HIDWORD(v31) | HIDWORD(v34)))
      {
        v29 = *(_QWORD *)(a2 + 144);
        sub_22F36FB08(v29, &v33, a4);
        sub_22EF74614(v29, &v30, a5, 0);
      }
      v25 = *(_QWORD *)(a2 + 208);
      v26 = *(_QWORD *)(a2 + 144);
      v27 = *(_QWORD *)(*(_QWORD *)(a5 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v27 || *(unsigned __int8 *)(v27 + 16) - 27 <= 0xFFFFFFFD)
        v27 = sub_22F10CF48(v27);
      sub_22E6B9AC0(v25, v26, a3, (uint64_t)&v33, (uint64_t)&v30, *(_QWORD *)(v27 + 24), 0);
    }
  }
LABEL_38:
  sub_22E622C5C((uint64_t)&v30);
  return sub_22E622C5C((uint64_t)&v33);
}

uint64_t sub_22E6B9854()
{
  return 7;
}

uint64_t sub_22E6B985C(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v5;

  v5 = llvm::ConstantInt::get();
  sub_22E6A4C7C(a2 + 272, a3, v5, 0, 0x10u);
  return 0;
}

llvm::Type *sub_22E6B98A8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *this)
{
  return sub_22E6B47A0(*(_QWORD *)(a2 + 144), a3, a4, this);
}

uint64_t sub_22E6B98BC()
{
  return 1;
}

uint64_t sub_22E6B98C4()
{
  return llvm::ConstantInt::get();
}

uint64_t sub_22E6B98D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  char v11;
  int v12;
  int v13;

  if ((*(_BYTE *)(a3 + 18) & 0xF8) != 0)
    return 0;
  v4 = a2[2];
  if (v4)
  {
    v6 = 152 * v4;
    v7 = (uint64_t *)(*(_QWORD *)a2 + 144);
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *v7;
      v7 += 19;
      v13 = 0;
      v12 = 0;
      sub_22E6B6E10((uint64_t)&v10, v8, v9, 0, &v13, &v12, 1u, 0);
      if (!v11
        && v10
        && (*((_DWORD *)v10 + 2) & 0xFE) == 0x12
        && (unint64_t)llvm::Type::getPrimitiveSizeInBits(v10) > 0x80)
      {
        break;
      }
      v6 -= 152;
      if (!v6)
        return 1;
    }
    return 0;
  }
  return 1;
}

_QWORD *sub_22E6B999C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B99DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6B9A2C(int a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  uint64_t result;

  result = llvm::GlobalValue::isDeclaration(this);
  if (a2 && (result & 1) == 0 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 52 <= 5)
  {
    if (sub_22F2A4550(a2))
      llvm::Function::addFnAttr();
    return sub_22E6B46C0(a2, this, a4);
  }
  return result;
}

uint64_t sub_22E6B9AC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  int Key;
  _BOOL4 v18;
  int v19;
  _BOOL4 v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;

  v13 = *(unsigned int *)(*(_QWORD *)(a2 + 15088) + 68);
  v14 = sub_22EF5CDF0(a2, *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0));
  if (v14 <= 0x100)
  {
    if (v14 < 0x81)
      return 0;
    v29 = a7;
    v15 = "avx";
    v16 = 3;
  }
  else
  {
    v29 = a7;
    v15 = "avx512f";
    v16 = 7;
  }
  Key = llvm::StringMapImpl::FindKey();
  v18 = 0;
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a4 + 8))
    v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a4 + 8 * Key) + 8) != 0;
  v19 = llvm::StringMapImpl::FindKey();
  v20 = 0;
  if (v19 != -1 && v19 != (unint64_t)*(unsigned int *)(a5 + 8))
    v20 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 8 * v19) + 8) != 0;
  if (!v18 && !v20)
  {
    if ((v13 > 0x21) | (0xFFFF777uLL >> v13) & 1)
    {
      *(_DWORD *)(a1 + 312) = a3;
      *(_DWORD *)(a1 + 316) = 864;
      if (*(char *)(a1 + 311) < 0)
      {
        **(_BYTE **)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 311) = 0;
      }
      v22 = (unsigned __int8 *)(a1 + 320);
      v30 = (unsigned __int8 *)(a1 + 320);
      v31 = 0;
      v32 = a1;
      v33 = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_DWORD *)(a1 + 664) = 0;
      v23 = *(unsigned int *)(a1 + 776);
      if (!(_DWORD)v23)
        goto LABEL_33;
      v26 = *(_QWORD *)(a1 + 768);
      v27 = 56 * v23;
      do
      {
        if (*(char *)(v26 + v27 - 9) < 0)
          operator delete(*(void **)(v26 + v27 - 32));
        v27 -= 56;
      }
      while (v27);
      goto LABEL_32;
    }
    return 0;
  }
  if (v18 && v20)
    return 0;
  *(_DWORD *)(a1 + 312) = a3;
  *(_DWORD *)(a1 + 316) = 752;
  if (*(char *)(a1 + 311) < 0)
  {
    **(_BYTE **)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 311) = 0;
  }
  v22 = (unsigned __int8 *)(a1 + 320);
  v30 = (unsigned __int8 *)(a1 + 320);
  v31 = 0;
  v32 = a1;
  v33 = 1;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  v23 = *(unsigned int *)(a1 + 776);
  if (!(_DWORD)v23)
    goto LABEL_33;
  v24 = *(_QWORD *)(a1 + 768);
  v25 = 56 * v23;
  do
  {
    if (*(char *)(v24 + v25 - 9) < 0)
      operator delete(*(void **)(v24 + v25 - 32));
    v25 -= 56;
  }
  while (v25);
LABEL_32:
  LODWORD(v23) = *v22;
LABEL_33:
  *(_DWORD *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 321 + v23) = 2;
  *(_QWORD *)(a1 + 336 + 8 * v23) = v29;
  v28 = (v23 + 1);
  *(_BYTE *)(a1 + 321 + v28) = 9;
  *(_BYTE *)(a1 + 320) = v23 + 2;
  *(_QWORD *)(a1 + 336 + 8 * v28) = a6;
  sub_22E3B89A8(&v30, v15, v16);
  sub_22E3BB0B8((uint64_t)&v30);
  return 1;
}

_QWORD *sub_22E6B9D6C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6B9DAC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6B9DFC(int a1, int a2, llvm::GlobalValue *this)
{
  return llvm::GlobalValue::isDeclaration(this);
}

uint64_t sub_22E6B9E04()
{
  return 29;
}

void sub_22E6B9E10()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6B9E24(uint64_t a1, uint64_t a2)
{
  double result;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v16;
  uint64_t IntNTy;
  char v18;
  __int16 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  unint64_t v26;
  llvm::LLVMContext *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  _OWORD v32[2];
  unsigned int v33;

  v33 = 6;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
    else
      v9 = 0;
    if (!v9)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(v10 + 24);
      v12 = sub_22EF5CDF0(*(_QWORD *)(v10 + 8), v7);
      if (sub_22E3E4B64(*v6))
      {
        if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v11 + 568))(v11, "hvx", 3))
        {
          v13 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v11 + 568))(v11, "hvx-length64b", 13);
          v14 = 1024;
          if (v13)
            v14 = 512;
          if (v12 == v14 || v12 == 2 * v14)
          {
            v16 = 0;
            IntNTy = 0;
            v18 = 0;
            v19 = 192;
LABEL_40:
            *(_QWORD *)(a2 + 48) = IntNTy;
            *(_QWORD *)(a2 + 56) = 0;
            *(_DWORD *)(a2 + 64) = v16;
            *(_DWORD *)(a2 + 68) = 0;
            *(_BYTE *)(a2 + 72) = v18;
            *(_WORD *)(a2 + 73) = v19;
            goto LABEL_41;
          }
        }
        if (v12 >= 0x41)
        {
          v16 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
          IntNTy = 0;
          v19 = 8;
          v18 = 2;
          goto LABEL_40;
        }
      }
      if (!sub_22E619D68(v5))
      {
        v20 = *v6;
        v21 = *v6 && *(_BYTE *)(*v6 + 16) == 31;
        if (!v21
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
           || (v20 = sub_22F10CF48(v20)) == 0)
          || !sub_22F28C8B4(v20))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v22 && *(_BYTE *)(v22 + 16) == 44)
          {
            v23 = sub_22F114198(*(_QWORD *)(v22 + 24));
            v5 = sub_22E496830(v23);
          }
          if (v12 >= 0x41
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 9)
          {
            v16 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
            IntNTy = 0;
            v19 = 0;
LABEL_39:
            v18 = 2;
            goto LABEL_40;
          }
          if (sub_22F2A3AE4(a1, v5))
          {
            v31 = sub_22F110B20(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
            v16 = 0;
            IntNTy = 0;
            if (v31)
              v19 = 256;
            else
              v19 = 0;
            v18 = 1;
            goto LABEL_40;
          }
          v16 = 0;
          IntNTy = 0;
          goto LABEL_37;
        }
      }
      if ((sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5, 1, 0) & 1) == 0)
      {
        if (v12 > 0x40)
        {
          v16 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v5);
          IntNTy = 0;
          v19 = 8;
          goto LABEL_39;
        }
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v24.i16[0] = vaddlv_u8(v24);
        v25 = v12 | (v12 >> 1) | ((v12 | (v12 >> 1)) >> 2);
        v26 = v25 | (v25 >> 4);
        if (v24.u32[0] == 1)
          v27 = (llvm::LLVMContext *)v12;
        else
          v27 = (llvm::LLVMContext *)(v26 + 1);
        IntNTy = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v27);
        v16 = 0;
LABEL_37:
        v18 = 0;
        v19 = 128;
        goto LABEL_40;
      }
    }
    v16 = 0;
    IntNTy = 0;
    v19 = 0;
    v18 = 4;
    goto LABEL_40;
  }
LABEL_41:
  v28 = *(_DWORD *)(a2 + 36);
  if (v28)
  {
    v29 = a2 + 80;
    v30 = v29 + 40 * v28;
    do
    {
      sub_22E6BADB0((uint64_t)v32, a1, *(_QWORD *)v29, &v33);
      *(_OWORD *)(v29 + 8) = v32[0];
      result = *(double *)((char *)v32 + 11);
      *(_OWORD *)(v29 + 19) = *(_OWORD *)((char *)v32 + 11);
      v29 += 40;
    }
    while (v29 != v30);
  }
  return result;
}

uint64_t sub_22E6BA16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::LLVMContext *v36;
  uint64_t v37;
  llvm::LLVMContext *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type **v46;
  uint64_t result;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  llvm::Type **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::PHINode *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  llvm::LLVMContext *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[3];
  _OWORD v96[3];
  _OWORD v97[3];
  _OWORD v98[3];
  _OWORD v99[3];
  _OWORD v100[3];
  _OWORD v101[3];
  _OWORD v102[3];
  _OWORD v103[3];
  unsigned int v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 72) & 0xFFFFFFFC) != 0xC)
  {
    v29 = a3[1];
    v115 = *a3;
    v116 = v29;
    v117 = a3[2];
    v30 = *(_QWORD *)(a2 + 96);
    v10 = a2 + 272;
    *(_QWORD *)&v112 = "ap";
    LOWORD(v114) = 259;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v115, v30, (uint64_t)&v112, (uint64_t)&v118);
    v112 = v118;
    v113 = v119;
    v114 = v120;
    v31 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v112, "ap.cur");
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
    v33 = v32 >> 3;
    if (v32 >= 0x28)
    {
      v34 = *(_QWORD *)(a2 + 24);
      LOWORD(v110) = 257;
      v35 = sub_22E3C1740((uint64_t *)(a2 + 272), 47, v31, v34, (uint64_t)&v107);
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v36);
      v37 = llvm::ConstantInt::get();
      LOWORD(v106) = 257;
      v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v35, v37, 0, 0);
      if (!v39)
      {
        LOWORD(v110) = 257;
        v40 = llvm::BinaryOperator::Create();
        v39 = sub_22E3C12C8((uint64_t *)(a2 + 272), v40, (uint64_t)v105);
      }
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v38);
      v41 = llvm::ConstantInt::get();
      LOWORD(v110) = 257;
      v42 = sub_22E3E49C4(a2 + 272, v39, v41, (uint64_t)&v107);
      LOWORD(v110) = 257;
      v31 = sub_22E3C1740((uint64_t *)(a2 + 272), 48, v42, v30, (uint64_t)&v107);
    }
    v43 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v107 = v31;
    *((_QWORD *)&v107 + 1) = v43;
    v108 = v33;
    v109 = 0;
    v111 = 0;
    v110 = 0;
    v44 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), (llvm::LLVMContext *)a4);
    LOWORD(v106) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v107, v44, (uint64_t)v105, a5);
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
    v45 = *(_QWORD *)(a2 + 8);
    v25 = (uint64_t *)llvm::ConstantInt::get();
    *(_QWORD *)&v105[0] = "ap.next";
    LOWORD(v106) = 259;
    v26 = (uint64_t *)(a2 + 272);
    v27 = v45;
    v28 = (uint64_t *)v31;
    goto LABEL_11;
  }
  v92 = *a3;
  v93 = a3[1];
  v94 = a3[2];
  v9 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if ((int)((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)) >> 3) >= 9)
  {
    v115 = v92;
    v116 = v93;
    v117 = v94;
    v10 = a2 + 272;
    *(_QWORD *)&v112 = "__overflow_area_pointer_p";
    LOWORD(v114) = 259;
    sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)&v115, 2, (uint64_t)&v112, (uint64_t)&v118);
    v112 = v118;
    v113 = v119;
    v114 = v120;
    v11 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)&v112, "__overflow_area_pointer");
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v9);
    v13 = v12 >> 3;
    if (v12 >= 0x28)
    {
      v14 = (uint64_t *)llvm::ConstantInt::get();
      v15 = *(_QWORD *)(a2 + 8);
      LOWORD(v110) = 257;
      v16 = (uint64_t *)sub_22E42129C((uint64_t *)(a2 + 272), v15, v11, v14, (uint64_t)&v107);
      v17 = *(_QWORD *)(a2 + 24);
      LOWORD(v110) = 257;
      v18 = sub_22E3C1740((uint64_t *)(a2 + 272), 47, (uint64_t)v16, v17, (uint64_t)&v107);
      v19 = llvm::ConstantInt::get();
      LOWORD(v110) = 257;
      v20 = sub_22E3E49C4(a2 + 272, v18, v19, (uint64_t)&v107);
      v21 = *v16;
      *(_QWORD *)&v105[0] = "__overflow_area_pointer.align";
      LOWORD(v106) = 259;
      v11 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 48, v20, v21, (uint64_t)v105);
    }
    v22 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, a4, 0);
    v23 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v107 = v11;
    *((_QWORD *)&v107 + 1) = v23;
    v108 = v13;
    v109 = 0;
    v111 = 0;
    v110 = 0;
    LOWORD(v106) = 257;
    sub_22E3BEE6C((uint64_t *)(a2 + 272), &v107, v22, (uint64_t)v105, a5);
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *v9);
    v24 = *(_QWORD *)(a2 + 8);
    v25 = (uint64_t *)llvm::ConstantInt::get();
    *(_QWORD *)&v105[0] = "__overflow_area_pointer.next";
    LOWORD(v106) = 259;
    v26 = (uint64_t *)(a2 + 272);
    v27 = v24;
    v28 = v11;
LABEL_11:
    v46 = (llvm::Type **)sub_22E42129C(v26, v27, v28, v25, (uint64_t)v105);
    v105[0] = v118;
    v105[1] = v119;
    v106 = v120;
    return sub_22E3BEDDC(v10, v46, (uint64_t)v105);
  }
  v104 = 6;
  v48 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  v90 = (llvm::LLVMContext *)(v48 | a4 & 7);
  v91 = a5;
  sub_22E6BADB0((uint64_t)&v118, a1, (uint64_t)v90, &v104);
  *(_QWORD *)&v118 = "vaarg.maybe_reg";
  LOWORD(v120) = 259;
  v49 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v118 = "vaarg.in_reg";
  LOWORD(v120) = 259;
  v89 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v118 = "vaarg.on_stack";
  LOWORD(v120) = 259;
  v88 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  *(_QWORD *)&v118 = "vaarg.end";
  LOWORD(v120) = 259;
  v87 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v48 &= 0xFFFFFFFFFFFFFFF0;
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)v48);
  v50 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)v48);
  sub_22E5ED9B4((_QWORD *)a2, v49, 0);
  v51 = (uint64_t *)(a2 + 272);
  v103[0] = v92;
  v103[1] = v93;
  v103[2] = v94;
  *(_QWORD *)&v115 = "__current_saved_reg_area_pointer_p";
  LOWORD(v117) = 259;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v103, 0, (uint64_t)&v115, (uint64_t)&v118);
  v102[0] = v118;
  v102[1] = v119;
  v102[2] = v120;
  v52 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v102, "__current_saved_reg_area_pointer");
  v101[0] = v92;
  v101[1] = v93;
  v101[2] = v94;
  *(_QWORD *)&v112 = "__saved_reg_area_end_pointer_p";
  LOWORD(v114) = 259;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v101, 1, (uint64_t)&v112, (uint64_t)&v115);
  v100[0] = v115;
  v100[1] = v116;
  v100[2] = v117;
  v53 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v100, "__saved_reg_area_end_pointer");
  if (v50 >= 0x21)
  {
    v54 = *(_QWORD *)(a2 + 24);
    LOWORD(v114) = 257;
    v55 = sub_22E3C1740((uint64_t *)(a2 + 272), 47, (uint64_t)v52, v54, (uint64_t)&v112);
    v56 = llvm::ConstantInt::get();
    *(_QWORD *)&v107 = "align_current_saved_reg_area_pointer";
    LOWORD(v110) = 259;
    v57 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v55, v56, 0, 0);
    if (!v57)
    {
      LOWORD(v114) = 257;
      v58 = llvm::BinaryOperator::Create();
      v57 = sub_22E3C12C8((uint64_t *)(a2 + 272), v58, (uint64_t)&v107);
    }
    v59 = llvm::ConstantInt::get();
    *(_QWORD *)&v112 = "align_current_saved_reg_area_pointer";
    LOWORD(v114) = 259;
    v60 = sub_22E3E49C4(a2 + 272, v57, v59, (uint64_t)&v112);
    v61 = *v52;
    *(_QWORD *)&v112 = "align_current_saved_reg_area_pointer";
    LOWORD(v114) = 259;
    v52 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 48, v60, v61, (uint64_t)&v112);
  }
  v62 = *(_QWORD *)(a2 + 8);
  v63 = 4;
  v64 = (uint64_t *)llvm::ConstantInt::get();
  *(_QWORD *)&v112 = "__new_saved_reg_area_pointer";
  LOWORD(v114) = 259;
  v65 = (uint64_t *)sub_22E42129C((uint64_t *)(a2 + 272), v62, v52, v64, (uint64_t)&v112);
  LOWORD(v114) = 257;
  v66 = sub_22E3C18F4(a2 + 272, 38, v65, v53, (uint64_t)&v112);
  v67 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v67, v88, v89, v66, 0);
  LOWORD(v114) = 257;
  sub_22E3C12C8((uint64_t *)(a2 + 272), v67, (uint64_t)&v112);
  sub_22E5ED9B4((_QWORD *)a2, v89, 0);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), v90);
  v68 = llvm::PointerType::get();
  LOWORD(v114) = 257;
  v69 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v52, v68, (uint64_t)&v112);
  v99[0] = v118;
  v99[1] = v119;
  v99[2] = v120;
  sub_22E3BEDDC(a2 + 272, (llvm::Type **)v65, (uint64_t)v99);
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, v88, 0);
  v98[0] = v92;
  v98[1] = v93;
  v98[2] = v94;
  *(_QWORD *)&v107 = "__overflow_area_pointer_p";
  LOWORD(v110) = 259;
  sub_22E3C408C((uint64_t *)(a2 + 272), (uint64_t)v98, 2, (uint64_t)&v107, (uint64_t)&v112);
  v97[0] = v112;
  v97[1] = v113;
  v97[2] = v114;
  v70 = (uint64_t *)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v97, "__overflow_area_pointer");
  if (v50 >= 0x21)
  {
    v71 = *(_QWORD *)(a2 + 24);
    LOWORD(v110) = 257;
    v72 = sub_22E3C1740((uint64_t *)(a2 + 272), 47, (uint64_t)v70, v71, (uint64_t)&v107);
    v73 = llvm::ConstantInt::get();
    *(_QWORD *)&v105[0] = "align_overflow_area_pointer";
    LOWORD(v106) = 259;
    v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v72, v73, 0, 0);
    if (!v74)
    {
      LOWORD(v110) = 257;
      v75 = llvm::BinaryOperator::Create();
      v74 = sub_22E3C12C8((uint64_t *)(a2 + 272), v75, (uint64_t)v105);
    }
    v76 = llvm::ConstantInt::get();
    *(_QWORD *)&v107 = "align_overflow_area_pointer";
    LOWORD(v110) = 259;
    v77 = sub_22E3E49C4(a2 + 272, v74, v76, (uint64_t)&v107);
    v78 = *v70;
    *(_QWORD *)&v107 = "align_overflow_area_pointer";
    LOWORD(v110) = 259;
    v70 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 48, v77, v78, (uint64_t)&v107);
    v63 = 8;
  }
  v79 = *(_QWORD *)(a2 + 8);
  v80 = (uint64_t *)llvm::ConstantInt::get();
  *(_QWORD *)&v107 = "__overflow_area_pointer.next";
  LOWORD(v110) = 259;
  v81 = (llvm::Type **)sub_22E42129C((uint64_t *)(a2 + 272), v79, v70, v80, (uint64_t)&v107);
  v96[0] = v112;
  v96[1] = v113;
  v96[2] = v114;
  sub_22E3BEDDC(a2 + 272, v81, (uint64_t)v96);
  v95[0] = v118;
  v95[1] = v119;
  v95[2] = v120;
  sub_22E3BEDDC(a2 + 272, v81, (uint64_t)v95);
  sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, (uint64_t)v90, 0);
  v82 = llvm::PointerType::get();
  LOWORD(v110) = 257;
  v83 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, (uint64_t)v70, v82, (uint64_t)&v107);
  sub_22E5EDA70(a2);
  sub_22E5ED9B4((_QWORD *)a2, v87, 0);
  v84 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, (uint64_t)v90, 0);
  v85 = llvm::PointerType::get();
  *(_QWORD *)&v107 = "vaarg.addr";
  LOWORD(v110) = 259;
  v86 = (llvm::PHINode *)sub_22E3C4B80(v51, v85, 2, (uint64_t)&v107);
  sub_22E3C4C50(v86, v69, (uint64_t)v89);
  result = sub_22E3C4C50(v86, v83, (uint64_t)v88);
  *(_QWORD *)v91 = v86;
  *(_QWORD *)(v91 + 8) = v84;
  *(_QWORD *)(v91 + 16) = v63;
  *(_DWORD *)(v91 + 24) = 0;
  *(_QWORD *)(v91 + 32) = 0;
  *(_QWORD *)(v91 + 40) = 0;
  return result;
}

unint64_t sub_22E6BADB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  unint64_t result;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  llvm::LLVMContext *v34;

  v5 = a3;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22E619D68(a3))
  {
    v15 = *v8;
    v16 = *v8 && *(_BYTE *)(*v8 + 16) == 31;
    if (!v16
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
       || (v15 = sub_22F10CF48(v15)) == 0)
      || !sub_22F28C8B4(v15))
    {
      v17 = *v8;
      v18 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v18 && *(_BYTE *)(v18 + 16) == 44)
      {
        v19 = sub_22F114198(*(_QWORD *)(v18 + 24));
        v5 = sub_22E496830(v19);
        v8 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
        v17 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
      }
      v20 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v17);
      if (v20 <= 0x40)
      {
        v28 = *a4;
        if (*a4)
        {
          v29 = (v28 & 0xFFFFFFFE) - 2;
          if ((v28 & 0xFFFFFFFE) == 0)
            v29 = 0;
          v30 = v28 - 1;
          if (v20 > 0x20)
            v30 = v29;
          *a4 = v30;
        }
        goto LABEL_36;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
      {
LABEL_36:
        result = sub_22F2A3AE4(a2, v5);
        if ((_DWORD)result)
        {
          result = sub_22F110B20(*v8);
          *(_BYTE *)(a1 + 24) = 1;
          v14 = *(_WORD *)(a1 + 25) & 0xFE00;
          *(_QWORD *)(a1 + 16) = 0;
          if ((_DWORD)result)
            v14 |= 0x100u;
        }
        else
        {
          *(_BYTE *)(a1 + 24) = 0;
          v14 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
          *(_QWORD *)(a1 + 16) = 0;
        }
        *(_QWORD *)a1 = 0;
        goto LABEL_50;
      }
      goto LABEL_20;
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 16) == 45)
    {
      v10 = sub_22E69BE08(v9, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32));
      if (v10)
      {
        v11 = v10 == 1;
        result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v5);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 2;
        v13 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_DWORD *)(a1 + 16) = result;
        v14 = v13 | (8 * v11);
LABEL_21:
        *(_WORD *)(a1 + 25) = v14;
        return result;
      }
    }
  }
  result = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v5, 1, 0);
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 4;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00;
    goto LABEL_21;
  }
  v21 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v8);
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), *v8);
  if (v21 >= 0x41)
  {
LABEL_20:
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v5);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v23 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = result;
    v14 = v23 | 8;
    goto LABEL_21;
  }
  v24 = *a4;
  if (!*a4)
    goto LABEL_43;
  if (v21 <= 0x20)
  {
    v25 = v24 - 1;
    goto LABEL_27;
  }
  v26 = v24 & 0xFFFFFFFE;
  if (!v26)
  {
    *a4 = 0;
LABEL_43:
    v27 = v22;
    goto LABEL_44;
  }
  v25 = v26 - 2;
LABEL_27:
  *a4 = v25;
  v27 = 32;
  if (v21 > 0x20)
    v27 = 64;
LABEL_44:
  if (v21 <= v27)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v21 | (v21 >> 1) | ((v21 | (v21 >> 1)) >> 2);
    v33 = v32 | (v32 >> 4);
    if (v31.u32[0] == 1)
      v34 = (llvm::LLVMContext *)v21;
    else
      v34 = (llvm::LLVMContext *)(v33 + 1);
    result = llvm::Type::getIntNTy(**(llvm::Type ***)(*(_QWORD *)(a2 + 8) + 16), v34);
    *(_BYTE *)(a1 + 24) = 0;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = result;
LABEL_50:
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_21;
  }
  return sub_22E69BAA8(a1, a2, v5);
}

_QWORD *sub_22E6BB0E8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6BB128(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6BB17C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void ***sub_22E6BB190(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  llvm::Type *v30;
  llvm::LLVMContext *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t Int32Ty;
  unsigned int v38;
  _BOOL4 v39;
  void **v41;
  int v42;
  unsigned int v43;
  int v44;
  _BYTE v45[27];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a2 + 36);
  if (v5 > 0x39)
  {
    v6 = operator new();
    *(_QWORD *)v6 = v6 + 16;
    *(_QWORD *)(v6 + 8) = 0x600000000;
    sub_22E47EDD0(v6, (v5 + 63) >> 6, 0);
    *(_DWORD *)(v6 + 64) = v5;
  }
  else
  {
    v6 = (v5 << 58) | 1;
  }
  v41 = (void **)v6;
  v7 = *(_QWORD *)(a2 + 8);
  if ((v7 & 0x10000000) != 0)
    v8 = v7 >> 29;
  else
    v8 = 4;
  v42 = *(_QWORD *)(a2 + 8);
  v43 = v8;
  v44 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), a2) & 1) == 0)
  {
    sub_22E69BE7C((unint64_t)v45, a1, *(_QWORD *)(a2 + 40));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v45;
    *(_OWORD *)(a2 + 59) = *(_OWORD *)&v45[11];
  }
  v9 = *(_DWORD *)(a2 + 36);
  if (v9)
  {
    v10 = a2 + 80;
    v11 = a2 + 80 + 40 * v9;
    v12 = v8;
    do
    {
      v13 = *(_QWORD *)v10;
      v14 = (uint64_t *)(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        v15 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      else
        v15 = 0;
      if (v15)
      {
        v16 = sub_22E69BE08(v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
        if (v16 == 1)
        {
          v17 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13);
          v18 = 0;
          v2 = v2 & 0xFFFFFE00 | 8;
LABEL_56:
          v19 = 2;
          goto LABEL_61;
        }
        if (v16 == 2)
        {
          if (v12)
          {
            v8 = v12 - 1;
            v43 = v12 - 1;
            v17 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13);
            v18 = 0;
            v2 = v2 & 0xFFFFFE00 | 0x40;
            v19 = 2;
LABEL_60:
            v12 = v8;
            goto LABEL_61;
          }
          v17 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13);
          v18 = 0;
          v2 &= 0xFFFFFE00;
          goto LABEL_56;
        }
      }
      if (sub_22E619D68(v13)
        || ((v20 = *v14) != 0 ? (v21 = *(_BYTE *)(*v14 + 16) == 31) : (v21 = 0),
            (v21
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
          && (v20 = sub_22F10CF48(v20)) != 0)
         && sub_22F28C8B4(v20)))
      {
        if (v15 && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v15 + 24)) + 74) & 0x80) != 0)
          goto LABEL_50;
        if (!sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13, 1, 0))
        {
          v29 = *(_QWORD *)(a1 + 8);
          v30 = **(llvm::Type ***)(v29 + 16);
          v32 = sub_22EF5CDF0(*(_QWORD *)(v29 + 8), *v14) + 31;
          v26 = v8 >= (v32 >> 5);
          v8 -= v32 >> 5;
          if (!v26)
          {
            v43 = 0;
            sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v14);
            v8 = 0;
            v12 = 0;
LABEL_51:
            v18 = 0;
            if (v33 <= 0x27)
              v36 = 8;
            else
              v36 = 24;
            v2 = v36 | v2 & 0xFFFFFE00;
            v17 = 4;
            v19 = 2;
            goto LABEL_61;
          }
          Int32Ty = llvm::Type::getInt32Ty(v30, v31);
          *(_QWORD *)v45 = &v45[16];
          *(_QWORD *)&v45[8] = 0x300000000;
          sub_22E4639CC((uint64_t)v45, (v32 >> 5), Int32Ty);
          v18 = llvm::StructType::get();
          v43 = v8;
          if (*(_BYTE **)v45 != &v45[16])
            free(*(void **)v45);
          v19 = 0;
          v17 = 0;
          v2 = v2 & 0xFFFFFE00 | 0xC0;
          goto LABEL_60;
        }
        v17 = 0;
        v18 = 0;
        v2 &= 0xFFFFFE00;
        v19 = 4;
      }
      else
      {
        v22 = *v14;
        v23 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 44)
        {
          v24 = sub_22F114198(*(_QWORD *)(v23 + 24));
          v13 = sub_22E496830(v24);
          v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
          v22 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
        }
        v25 = ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v22) + 31) >> 5;
        if ((_DWORD)v25)
        {
          v26 = v8 >= v25;
          v27 = v8 - v25;
          v28 = v26;
          if (v26)
            v8 = v27;
          else
            v8 = 0;
          v43 = v8;
          v12 = v8;
        }
        else
        {
          v28 = 0;
        }
        v34 = *v14;
        if (*v14)
          v35 = *(_BYTE *)(*v14 + 16) == 9;
        else
          v35 = 0;
        if ((v35
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 9
           && (v34 = sub_22F10CF48(v34)) != 0)
          && (*(_DWORD *)(v34 + 32) & 0x1FFFFFEu) >= 0x81)
        {
LABEL_50:
          sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v14);
          goto LABEL_51;
        }
        if (sub_22F2A3AE4(a1, v13))
        {
          if (!v28)
          {
            v39 = sub_22F110B20(*v14);
            v17 = 0;
            v18 = 0;
            if (v39)
              v2 = v2 & 0xFFFFFE00 | 0x100;
            else
              v2 &= 0xFFFFFE00;
            v19 = 1;
            goto LABEL_61;
          }
          v19 = 0;
          v17 = 0;
          v18 = 0;
          v38 = v2 & 0xFFFFFE00;
        }
        else
        {
          v38 = v2 & 0xFFFFFE00;
          v19 = 0;
          v17 = 0;
          v18 = 0;
          if (!v28)
          {
            v2 = v38 | 0x80;
            goto LABEL_61;
          }
        }
        v2 = v38 | 0xC0;
      }
LABEL_61:
      *(_QWORD *)(v10 + 8) = v18;
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) = v17;
      *(_DWORD *)(v10 + 28) = 0;
      *(_BYTE *)(v10 + 32) = v19;
      *(_WORD *)(v10 + 33) = v2;
      v10 += 40;
    }
    while (v10 != v11);
  }
  return sub_22E54C5D0(&v41);
}

_QWORD *sub_22E6BB670(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6BB6B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6BB700(uint64_t a1, uint64_t a2, llvm::GlobalValue *this, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int v10;
  char hasExternalWeakLinkage;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  std::string *v38;
  std::string::size_type v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  const std::string::value_type *p_p;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  void *v47;
  char *v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v63;
  unsigned __int8 *v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::string *v69;
  size_t v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  std::string *v74;
  std::string::size_type size;
  std::string *v76;
  std::string::size_type v77;
  char v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  std::string v97;
  __int128 __p;
  char v99;
  char v100[2];
  char v101;
  std::string v102;
  _BYTE v103[24];
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)this + 8) & 0x30) != 0x10)
    goto LABEL_15;
  if (!sub_22E47290C(a2))
  {
    v8 = *(_DWORD *)(a2 + 28);
    if ((v8 & 0x7Eu) - 52 > 5)
    {
LABEL_6:
      if ((v8 & 0x7Fu) - 60 > 6
        || !sub_22E466E5C(a2)
        && !sub_22E466EBC(a2)
        && !sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))
        && !sub_22F115220(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)))
      {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    if (!sub_22E462B18(a2))
    {
      v8 = *(_DWORD *)(a2 + 28);
      goto LABEL_6;
    }
  }
LABEL_11:
  v9 = *((_DWORD *)this + 8);
  v10 = v9 & 0xFFFFFFCF | 0x20;
  *((_DWORD *)this + 8) = v10;
  if ((v9 & 0xFu) - 7 < 2
    || (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this),
        v10 = *((_DWORD *)this + 8),
        (hasExternalWeakLinkage & 1) == 0))
  {
    v10 |= 0x4000u;
  }
  *((_DWORD *)this + 8) = v10 | 0x4000;
LABEL_15:
  if ((llvm::GlobalValue::isDeclaration(this) & 1) != 0 || *((_BYTE *)this + 16))
    return;
  if (a2)
  {
    v12 = *(_DWORD *)(a2 + 28);
    if ((v12 & 0x7Eu) - 52 <= 5)
    {
      v13 = 0;
      if ((v12 & 0x100) != 0 && (*(_DWORD *)(*(_QWORD *)(a4 + 152) + 52) & 0x40000000) != 0)
      {
        sub_22EFC8E88(a2);
        v15 = *(uint64_t **)v14;
        v16 = *(unsigned int *)(v14 + 8);
        v17 = *(uint64_t **)v14;
        if ((_DWORD)v16)
        {
          v18 = 8 * v16;
          v17 = *(uint64_t **)v14;
          while (*(_WORD *)(*v17 + 32) != 295)
          {
            ++v17;
            v18 -= 8;
            if (!v18)
              goto LABEL_29;
          }
        }
        if (v17 == &v15[v16])
        {
LABEL_29:
          v13 = 0;
        }
        else
        {
          do
          {
            v19 = *v15++;
            v13 = (_DWORD *)v19;
          }
          while (*(_WORD *)(v19 + 32) != 295);
        }
      }
      v20 = *(_QWORD *)(a4 + 152);
      if ((*(_DWORD *)(v20 + 52) & 0x40000000) != 0)
      {
        v21 = sub_22E47290C(a2);
        v20 = *(_QWORD *)(a4 + 152);
      }
      else
      {
        v21 = 0;
      }
      v22 = (*(_BYTE *)(v20 + 68) & 0x40) != 0 && sub_22E462B18(a2);
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v24 = *(uint64_t **)v23;
        v25 = *(unsigned int *)(v23 + 8);
        v26 = *(uint64_t **)v23;
        if ((_DWORD)v25)
        {
          v27 = 8 * v25;
          v26 = *(uint64_t **)v23;
          while (*(_WORD *)(*v26 + 32) != 86)
          {
            ++v26;
            v27 -= 8;
            if (!v27)
              goto LABEL_54;
          }
        }
        if (v26 != &v24[v25])
        {
          do
          {
            v29 = *v24++;
            v28 = v29;
          }
          while (*(_WORD *)(v29 + 32) != 86);
          v30 = v13 != 0;
          sub_22F007D7C(*(unsigned __int8 **)(v28 + 40), *(_QWORD *)(a4 + 144), 0, (uint64_t)v103);
          if (v103[12])
          {
            if (*(_DWORD *)&v103[8] >= 0x41u)
              v31 = *(_DWORD **)v103;
            else
              v31 = v103;
            LODWORD(v32) = *v31;
            if (*(_DWORD *)&v103[8] < 0x41u || *(_QWORD *)v103 == 0)
            {
LABEL_123:
              sub_22F007D7C(*(unsigned __int8 **)(v28 + 48), *(_QWORD *)(a4 + 144), 0, (uint64_t)v103);
              if (v103[12])
              {
                if (*(_DWORD *)&v103[8] >= 0x41u)
                  v63 = *(_DWORD **)v103;
                else
                  v63 = v103;
                LODWORD(v34) = *v63;
                if (*(_DWORD *)&v103[8] < 0x41u || !*(_QWORD *)v103)
                  goto LABEL_56;
              }
              else
              {
                if (*(_DWORD *)&v103[8] <= 0x40u)
                {
                  v34 = (uint64_t)(*(_QWORD *)v103 << -(uint64_t)*(unsigned int *)&v103[8]) >> -(uint64_t)*(unsigned int *)&v103[8];
                  goto LABEL_56;
                }
                LODWORD(v34) = **(_DWORD **)v103;
              }
              MEMORY[0x2348A0E84]();
LABEL_56:
              if (v30 && !(_DWORD)v32 && !(_DWORD)v34)
              {
                LODWORD(v32) = v13[10] * v13[9] * v13[11];
                LODWORD(v34) = v32;
              }
              if (!(_DWORD)v32)
                goto LABEL_101;
              v35 = 0;
              v36 = v32;
              do
              {
                v103[v35-- + 20] = (v36 % 0xA) | 0x30;
                v37 = v36 > 9;
                v36 /= 0xAuLL;
              }
              while (v37);
              sub_22E3B4274(&v97, &v103[v35 + 21], &v103[21], -v35);
              v38 = std::string::append(&v97, ",");
              v39 = v38->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v39;
              v38->__r_.__value_.__l.__size_ = 0;
              v38->__r_.__value_.__r.__words[2] = 0;
              v38->__r_.__value_.__r.__words[0] = 0;
              if ((_DWORD)v34)
              {
                v40 = &v103[21];
                v41 = v34;
                do
                {
                  *--v40 = (v41 % 0xA) | 0x30;
                  v37 = v41 > 9;
                  v41 /= 0xAuLL;
                }
                while (v37);
              }
              else
              {
                v40 = &v103[20];
                v103[20] = 48;
              }
              sub_22E3B4274(&__p, v40, &v103[21], &v103[21] - v40);
              if (v101 >= 0)
                p_p = (const std::string::value_type *)&__p;
              else
                p_p = (const std::string::value_type *)__p;
              if (v101 >= 0)
                v44 = v101 & 0x7F;
              else
                v44 = *((_QWORD *)&__p + 1);
              v45 = std::string::append(&v102, p_p, v44);
              v46 = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)v103 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              *(_QWORD *)&v103[16] = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              if (v101 < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_99;
              v47 = (void *)v97.__r_.__value_.__r.__words[0];
              goto LABEL_98;
            }
          }
          else
          {
            if (*(_DWORD *)&v103[8] <= 0x40u)
            {
              v32 = (uint64_t)(*(_QWORD *)v103 << -(uint64_t)*(unsigned int *)&v103[8]) >> -(uint64_t)*(unsigned int *)&v103[8];
              goto LABEL_123;
            }
            LODWORD(v32) = **(_DWORD **)v103;
          }
          MEMORY[0x2348A0E84]();
          goto LABEL_123;
        }
      }
LABEL_54:
      if (v13)
      {
        LODWORD(v32) = 0;
        LODWORD(v34) = 0;
        v30 = 1;
        goto LABEL_56;
      }
      if (!v21 && !v22)
      {
LABEL_101:
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          goto LABEL_180;
        sub_22EFC8E88(a2);
        v54 = *(uint64_t **)v53;
        v55 = *(unsigned int *)(v53 + 8);
        v56 = *(uint64_t **)v53;
        if ((_DWORD)v55)
        {
          v57 = 8 * v55;
          v56 = *(uint64_t **)v53;
          while (*(_WORD *)(*v56 + 32) != 89)
          {
            ++v56;
            v57 -= 8;
            if (!v57)
              goto LABEL_180;
          }
        }
        if (v56 == &v54[v55])
          goto LABEL_180;
        do
        {
          v59 = *v54++;
          v58 = v59;
        }
        while (*(_WORD *)(v59 + 32) != 89);
        sub_22F007D7C(*(unsigned __int8 **)(v58 + 40), *(_QWORD *)(a4 + 144), 0, (uint64_t)v103);
        if (v103[12])
        {
          if (*(_DWORD *)&v103[8] >= 0x41u)
            v60 = *(_DWORD **)v103;
          else
            v60 = v103;
          LODWORD(v61) = *v60;
          if (*(_DWORD *)&v103[8] < 0x41u || *(_QWORD *)v103 == 0)
          {
LABEL_134:
            v64 = *(unsigned __int8 **)(v58 + 48);
            if (!v64)
            {
              LODWORD(v66) = 0;
              goto LABEL_150;
            }
            sub_22F007D7C(v64, *(_QWORD *)(a4 + 144), 0, (uint64_t)v103);
            if (v103[12])
            {
              if (*(_DWORD *)&v103[8] >= 0x41u)
                v65 = *(_DWORD **)v103;
              else
                v65 = v103;
              LODWORD(v66) = *v65;
              if (*(_DWORD *)&v103[8] < 0x41u || !*(_QWORD *)v103)
              {
LABEL_150:
                v67 = v61;
                if ((_DWORD)v61)
                {
                  v68 = 0;
                  do
                  {
                    v102.__r_.__value_.__s.__data_[v68-- + 20] = (v67 % 0xA) | 0x30;
                    v37 = v67 > 9;
                    v67 /= 0xAuLL;
                  }
                  while (v37);
                  v69 = &v102;
                  sub_22E3B4274(v103, &v102.__r_.__value_.__s.__data_[v68 + 21], &v102.__r_.__value_.__s.__data_[21], -v68);
                  if ((_DWORD)v66)
                  {
                    if (v103[23] >= 0)
                      v70 = v103[23] & 0x7F;
                    else
                      v70 = *(_QWORD *)&v103[8];
                    sub_22E3B8BF4((uint64_t)&v102, v70 + 1);
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v69 = (std::string *)v102.__r_.__value_.__r.__words[0];
                    if (v70)
                    {
                      if (v103[23] >= 0)
                        v71 = v103;
                      else
                        v71 = *(_BYTE **)v103;
                      memmove(v69, v71, v70);
                    }
                    v72 = 0;
                    *(_WORD *)((char *)&v69->__r_.__value_.__l.__data_ + v70) = 44;
                    v73 = v66;
                    do
                    {
                      v100[--v72] = (v73 % 0xA) | 0x30;
                      v37 = v73 > 9;
                      v73 /= 0xAuLL;
                    }
                    while (v37);
                    sub_22E3B4274(&v97, &v100[v72], v100, -v72);
                    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v74 = &v97;
                    else
                      v74 = (std::string *)v97.__r_.__value_.__r.__words[0];
                    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = *((_BYTE *)&v97.__r_.__value_.__s + 23) & 0x7F;
                    else
                      size = v97.__r_.__value_.__l.__size_;
                    v76 = std::string::append(&v102, (const std::string::value_type *)v74, size);
                    v77 = v76->__r_.__value_.__r.__words[0];
                    *(_QWORD *)&__p = v76->__r_.__value_.__l.__size_;
                    *(_QWORD *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1]
                                                                              + 7);
                    v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
                    v76->__r_.__value_.__l.__size_ = 0;
                    v76->__r_.__value_.__r.__words[2] = 0;
                    v76->__r_.__value_.__r.__words[0] = 0;
                    if ((v103[23] & 0x80000000) != 0)
                      operator delete(*(void **)v103);
                    *(_QWORD *)v103 = v77;
                    *(_QWORD *)&v103[8] = __p;
                    *(_QWORD *)&v103[15] = *(_QWORD *)((char *)&__p + 7);
                    v103[23] = v78;
                    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v97.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v102.__r_.__value_.__l.__data_);
                  }
                  llvm::Function::addFnAttr();
                  if ((v103[23] & 0x80000000) != 0)
                    operator delete(*(void **)v103);
                }
LABEL_180:
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v80 = *(uint64_t **)v79;
                  v81 = *(unsigned int *)(v79 + 8);
                  v82 = *(uint64_t **)v79;
                  if ((_DWORD)v81)
                  {
                    v83 = 8 * v81;
                    v82 = *(uint64_t **)v79;
                    while (*(_WORD *)(*v82 + 32) != 87)
                    {
                      ++v82;
                      v83 -= 8;
                      if (!v83)
                        goto LABEL_193;
                    }
                  }
                  if (v82 != &v80[v81])
                  {
                    do
                    {
                      v85 = *v80++;
                      v84 = v85;
                    }
                    while (*(_WORD *)(v85 + 32) != 87);
                    v86 = *(unsigned int *)(v84 + 36);
                    if ((_DWORD)v86)
                    {
                      v87 = 0;
                      do
                      {
                        v102.__r_.__value_.__s.__data_[v87-- + 20] = (v86 % 0xA) | 0x30;
                        v37 = v86 > 9;
                        v86 /= 0xAuLL;
                      }
                      while (v37);
                      sub_22E3B4274(v103, &v102.__r_.__value_.__s.__data_[v87 + 21], &v102.__r_.__value_.__s.__data_[21], -v87);
                      llvm::Function::addFnAttr();
                      if ((v103[23] & 0x80000000) != 0)
                        operator delete(*(void **)v103);
                    }
                  }
                }
LABEL_193:
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v89 = *(uint64_t **)v88;
                  v90 = *(unsigned int *)(v88 + 8);
                  v91 = *(uint64_t **)v88;
                  if ((_DWORD)v90)
                  {
                    v92 = 8 * v90;
                    v91 = *(uint64_t **)v88;
                    while (*(_WORD *)(*v91 + 32) != 88)
                    {
                      ++v91;
                      v92 -= 8;
                      if (!v92)
                        goto LABEL_206;
                    }
                  }
                  if (v91 != &v89[v90])
                  {
                    do
                    {
                      v94 = *v89++;
                      v93 = v94;
                    }
                    while (*(_WORD *)(v94 + 32) != 88);
                    v95 = *(unsigned int *)(v93 + 36);
                    if ((_DWORD)v95)
                    {
                      v96 = 0;
                      do
                      {
                        v102.__r_.__value_.__s.__data_[v96-- + 20] = (v95 % 0xA) | 0x30;
                        v37 = v95 > 9;
                        v95 /= 0xAuLL;
                      }
                      while (v37);
                      sub_22E3B4274(v103, &v102.__r_.__value_.__s.__data_[v96 + 21], &v102.__r_.__value_.__s.__data_[21], -v96);
                      llvm::Function::addFnAttr();
                      if ((v103[23] & 0x80000000) != 0)
                        operator delete(*(void **)v103);
                    }
                  }
                }
LABEL_206:
                if ((*(_BYTE *)(*(_QWORD *)(a4 + 152) + 68) & 0x40) != 0 && sub_22E462B18(a2))
                  llvm::Function::addFnAttr();
                goto LABEL_209;
              }
            }
            else
            {
              if (*(_DWORD *)&v103[8] <= 0x40u)
              {
                v66 = (uint64_t)(*(_QWORD *)v103 << -(uint64_t)*(unsigned int *)&v103[8]) >> -(uint64_t)*(unsigned int *)&v103[8];
                goto LABEL_150;
              }
              LODWORD(v66) = **(_DWORD **)v103;
            }
            MEMORY[0x2348A0E84]();
            goto LABEL_150;
          }
        }
        else
        {
          if (*(_DWORD *)&v103[8] <= 0x40u)
          {
            v61 = (uint64_t)(*(_QWORD *)v103 << -(uint64_t)*(unsigned int *)&v103[8]) >> -(uint64_t)*(unsigned int *)&v103[8];
            goto LABEL_134;
          }
          LODWORD(v61) = **(_DWORD **)v103;
        }
        MEMORY[0x2348A0E84]();
        goto LABEL_134;
      }
      if (v21)
      {
        *((_BYTE *)&v102.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v102, "1,");
        v42 = 256;
      }
      else
      {
        v42 = *(unsigned int *)(*(_QWORD *)(a4 + 152) + 100);
        *((_BYTE *)&v102.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v102, "1,");
        if (!v42)
        {
          v48 = &v99;
          v99 = 48;
          goto LABEL_88;
        }
      }
      v48 = v100;
      do
      {
        *--v48 = (v42 % 0xA) | 0x30;
        v37 = v42 > 9;
        v42 /= 0xAuLL;
      }
      while (v37);
LABEL_88:
      sub_22E3B4274(&v97, v48, v100, v100 - v48);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v97;
      else
        v49 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = *((_BYTE *)&v97.__r_.__value_.__s + 23) & 0x7F;
      else
        v50 = v97.__r_.__value_.__l.__size_;
      v51 = std::string::append(&v102, (const std::string::value_type *)v49, v50);
      v52 = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)v103 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      *(_QWORD *)&v103[16] = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_99;
      v47 = (void *)v102.__r_.__value_.__r.__words[0];
LABEL_98:
      operator delete(v47);
LABEL_99:
      llvm::Function::addFnAttr();
      if ((v103[23] & 0x80000000) != 0)
        operator delete(*(void **)v103);
      goto LABEL_101;
    }
  }
LABEL_209:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 144) + 15088) + 289) & 2) != 0)
    llvm::Function::addFnAttr();
  if ((*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 184) + 92) & 0x40000) == 0)
    llvm::Function::addFnAttr();
}

uint64_t sub_22E6BC358()
{
  return 91;
}

uint64_t sub_22E6BC360(uint64_t a1, uint64_t a2, llvm::ConstantPointerNull *a3, uint64_t a4)
{
  llvm::PointerType *v6;
  llvm::ConstantPointerNull *v7;
  llvm::PointerType *v8;

  if (!sub_22EF741C8(*(_QWORD *)(a2 + 144), a4))
    return llvm::ConstantPointerNull::get(a3, v6);
  if (*((_QWORD *)a3 + 3))
    v7 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
  else
    v7 = (llvm::ConstantPointerNull *)llvm::PointerType::get(*(llvm::PointerType **)a3, (llvm::LLVMContext *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 144)+ 15072)+ 20));
  llvm::ConstantPointerNull::get(v7, v8);
  return llvm::ConstantExpr::getAddrSpaceCast();
}

uint64_t sub_22E6BC3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  v3 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 15072) + 4) + 27);
  if (!a3)
    return v3;
  v6 = *(_QWORD *)(a3 + 48);
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
  {
    v8 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    if (v8 > 0x7FF)
      return v8 >> 11;
  }
  if (!sub_22E62D664(a2, v6, 0))
    return v3;
  if (!sub_22EFBCCBC(a3))
    return v3;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 216) + 688))(*(_QWORD *)(a2 + 216));
  if ((result & 0xFF00000000) == 0)
    return v3;
  return result;
}

uint64_t sub_22E6BC46C(uint64_t a1)
{
  return (*(_DWORD *)(llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                                                                                 + 16))
                                  + 4)
                      + 27);
}

uint64_t sub_22E6BC494(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v5;
  uint64_t inserted;
  _QWORD v8[2];
  const char *v9;
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = 0uLL;
  v14 = 0;
  if (a3 <= 8)
    MEMORY[0x2348A0C14](&v13, off_24FA6CFF8[a3]);
  if (a4 != 7)
  {
    v5 = HIBYTE(v14) & 0x7F;
    if (v14 < 0)
      v5 = *((_QWORD *)&v13 + 1);
    if (v5)
    {
      v8[0] = &v13;
      v9 = "-";
      v10 = 772;
      llvm::Twine::str((llvm::Twine *)v8);
      if (SHIBYTE(v14) < 0)
        operator delete((void *)v13);
      v13 = v11;
      v14 = v12;
    }
    v8[0] = &v13;
    v9 = "one-as";
    v10 = 772;
    llvm::Twine::str((llvm::Twine *)v8);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
    v13 = v11;
    v14 = v12;
  }
  inserted = llvm::LLVMContext::getOrInsertSyncScopeID();
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  return inserted;
}

uint64_t sub_22E6BC5DC(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Type *a4)
{
  llvm::Type *v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::LLVMContext *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Name;
  unint64_t v39;
  std::string::size_type v40;
  const void *v41;
  std::string *p_dst;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  llvm::LLVMContext *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::DataLayout *DataLayout;
  unsigned __int8 PrefTypeAlign;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  llvm::Value *v69;
  uint64_t v70;
  void *v71[2];
  std::string::size_type v72;
  std::string __dst;
  __int16 v74;
  void *__p;
  uint64_t v76;
  _QWORD v77[2];
  void *v78;
  uint64_t v79;
  _BYTE v80[64];
  void *v81;
  uint64_t v82;
  _BYTE v83[64];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[64];
  _QWORD *v93;
  uint64_t v94;
  _BYTE v95[64];
  _QWORD *v96;
  uint64_t v97;
  _QWORD v98[4];

  v98[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(llvm::Type **)(*(_QWORD *)(a2 + 144) + 232);
  v70 = *((_QWORD *)a3 + 3);
  v96 = v98;
  v93 = v95;
  v94 = 0x800000000;
  v90 = v92;
  v91 = 0x800000000;
  v87 = v89;
  v88 = 0x800000000;
  v84 = v86;
  v85 = 0x800000000;
  v81 = v83;
  v82 = 0x800000000;
  v78 = v80;
  v79 = 0x800000000;
  v98[0] = a4;
  v97 = 0x200000001;
  v8 = llvm::MDString::get();
  v9 = v88;
  if (v88 >= HIDWORD(v88))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v88;
  }
  *((_QWORD *)v87 + v9) = v8;
  LODWORD(v88) = v88 + 1;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v7);
  llvm::ConstantInt::get();
  v10 = llvm::ValueAsMetadata::get();
  v11 = v94;
  if (v94 >= HIDWORD(v94))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v94;
  }
  v93[v11] = v10;
  LODWORD(v94) = v94 + 1;
  v12 = llvm::MDString::get();
  v13 = v85;
  if (v85 >= HIDWORD(v85))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = v85;
  }
  *((_QWORD *)v84 + v13) = v12;
  LODWORD(v85) = v85 + 1;
  v14 = llvm::MDString::get();
  v15 = v82;
  if (v82 >= HIDWORD(v82))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v82;
  }
  v69 = a3;
  *((_QWORD *)v81 + v15) = v14;
  LODWORD(v82) = v82 + 1;
  v16 = llvm::MDString::get();
  v17 = v91;
  if (v91 >= HIDWORD(v91))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v91;
  }
  *((_QWORD *)v90 + v17) = v16;
  LODWORD(v91) = v91 + 1;
  v18 = llvm::MDString::get();
  v19 = v79;
  if (v79 >= HIDWORD(v79))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v79;
  }
  *((_QWORD *)v78 + v19) = v18;
  LODWORD(v79) = v79 + 1;
  v20 = (*(_DWORD *)(v70 + 12) - 1);
  if (v20 >= 2)
  {
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v70 + 16) + 8 * v21 + 16);
      v24 = v97;
      if (v97 >= (unint64_t)HIDWORD(v97))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = v97;
      }
      v96[v24] = v23;
      LODWORD(v97) = v97 + 1;
      v26 = llvm::MDString::get();
      v27 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v88;
      }
      *((_QWORD *)v87 + v27) = v26;
      LODWORD(v88) = v88 + 1;
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v25);
      llvm::ConstantInt::get();
      v28 = llvm::ValueAsMetadata::get();
      v29 = v94;
      if (v94 >= (unint64_t)HIDWORD(v94))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v94;
      }
      v93[v29] = v28;
      LODWORD(v94) = v94 + 1;
      v30 = llvm::MDString::get();
      v31 = v91;
      if (v91 >= (unint64_t)HIDWORD(v91))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = v91;
      }
      *((_QWORD *)v90 + v31) = v30;
      LODWORD(v91) = v91 + 1;
      v32 = llvm::MDString::get();
      v33 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = v85;
      }
      *((_QWORD *)v84 + v33) = v32;
      LODWORD(v85) = v85 + 1;
      v34 = llvm::MDString::get();
      v35 = v82;
      if (v82 >= (unint64_t)HIDWORD(v82))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = v82;
      }
      *((_QWORD *)v81 + v35) = v34;
      LODWORD(v82) = v82 + 1;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"local_arg";
      __dst.__r_.__value_.__r.__words[2] = (v21 + 1);
      v74 = 2051;
      llvm::Twine::str((llvm::Twine *)&__dst);
      v36 = llvm::MDString::get();
      v37 = v79;
      if (v79 >= (unint64_t)HIDWORD(v79))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v79;
      }
      *((_QWORD *)v78 + v37) = v36;
      LODWORD(v79) = v79 + 1;
      if (SHIBYTE(v77[0]) < 0)
        operator delete(__p);
      ++v21;
    }
    while (v22 != v21);
  }
  Name = llvm::Value::getName(a3);
  if (!Name)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_43;
  }
  v40 = v39;
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v41 = (const void *)Name;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    p_dst = (std::string *)operator new(v43 + 1);
    __dst.__r_.__value_.__l.__size_ = v40;
    __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v39;
    p_dst = &__dst;
    if (!v39)
      goto LABEL_42;
  }
  memmove(p_dst, v41, v40);
LABEL_42:
  p_dst->__r_.__value_.__s.__data_[v40] = 0;
LABEL_43:
  v45 = std::string::append(&__dst, "_kernel");
  v47 = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)v71 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v72 = v47;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  llvm::Type::getVoidTy(v6, v46);
  v48 = llvm::FunctionType::get();
  v74 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  v49 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 200);
  v50 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v50, v48, 7, 0xFFFFFFFFLL, &__dst, v49);
  llvm::Function::addFnAttr();
  v51 = *(_QWORD *)(a2 + 320);
  v52 = *(_QWORD *)(a2 + 328);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
  v74 = 259;
  operator new();
  v53 = llvm::BasicBlock::BasicBlock();
  *(_QWORD *)(a2 + 320) = v53;
  *(_QWORD *)(a2 + 328) = v53 + 40;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 200));
  PrefTypeAlign = llvm::DataLayout::getPrefTypeAlign(DataLayout, a4);
  v74 = 257;
  v56 = sub_22E3E4D88(a2 + 272, a4, 0, (uint64_t)&__dst);
  *(_WORD *)(v56 + 18) = *(_WORD *)(v56 + 18) & 0xFFC0 | PrefTypeAlign;
  if ((*(_WORD *)(v50 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v50);
  sub_22E3C1B6C((uint64_t *)(a2 + 272), *(llvm::Type ***)(v50 + 88), v56, PrefTypeAlign | 0x100);
  v57 = *(_QWORD *)(*(_QWORD *)(v70 + 16) + 8);
  v74 = 257;
  v58 = sub_22E3CA9BC((uint64_t *)(a2 + 272), v56, v57, (uint64_t)&__dst);
  __p = v77;
  v77[0] = v58;
  v76 = 0x200000001;
  if ((*(_BYTE *)(v50 + 18) & 1) == 0)
  {
    v59 = *(_QWORD *)(v50 + 88);
LABEL_50:
    v60 = v59;
    goto LABEL_52;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v50);
  v59 = *(_QWORD *)(v50 + 88);
  if ((*(_WORD *)(v50 + 18) & 1) == 0)
    goto LABEL_50;
  llvm::Function::BuildLazyArguments((llvm::Function *)v50);
  v60 = *(_QWORD *)(v50 + 88);
LABEL_52:
  v61 = v60 + 40 * *(_QWORD *)(v50 + 96);
  v62 = v59 + 40;
  if (v62 != v61)
  {
    v63 = v76;
    v64 = v62;
    do
    {
      if (v63 >= HIDWORD(v76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v63 = v76;
      }
      *((_QWORD *)__p + v63) = v62;
      v63 = v76 + 1;
      LODWORD(v76) = v76 + 1;
      v64 += 40;
      v62 += 40;
    }
    while (v64 != v61);
  }
  if (v69)
    v65 = *((_QWORD *)v69 + 3);
  else
    v65 = 0;
  v74 = 257;
  v66 = sub_22E462B78((uint64_t *)(a2 + 272), v65, (uint64_t)v69, (uint64_t)__p, v76, (uint64_t)&__dst, 0);
  *((_WORD *)v66 + 9) = (*((_WORD *)v69 + 9) >> 2) & 0xFFC | *((_WORD *)v66 + 9) & 0xF003;
  sub_22E3CF118((uint64_t *)(a2 + 272));
  if (v51)
  {
    sub_22E3CB840(a2 + 272, v51, v52);
  }
  else
  {
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
  }
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Value::setMetadata();
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 184) + 5) & 0x20) != 0)
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
  }
  if (__p != v77)
    free(__p);
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
  if (v78 != v80)
    free(v78);
  if (v81 != v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  if (v93 != (_QWORD *)v95)
    free(v93);
  if (v96 != v98)
    free(v96);
  return v50;
}

uint64_t sub_22E6BD130()
{
  return 0;
}

_QWORD *sub_22E6BD138(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = sub_22EF5F1F4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8), *a2, (*(_QWORD *)(*a2 + 16) >> 19) & 0x1FE0 | 0xD);
  *a2 = (uint64_t)result;
  return result;
}

void sub_22E6BD184()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6BD198(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  BOOL v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  llvm::LLVMContext *v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  llvm::LLVMContext *v54;
  llvm::ArrayType *Int32Ty;
  _OWORD v56[2];

  v5 = *(unsigned __int8 *)(a2 + 8);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if ((result & 1) == 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = v7 & 0xFFFFFFFFFFFFFFF0;
    if (!sub_22E619D68(v7))
    {
      v10 = *(_QWORD *)v8;
      if (!*(_QWORD *)v8 || *(_BYTE *)(*(_QWORD *)v8 + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          goto LABEL_13;
        v10 = sub_22F10CF48(v10);
        if (!v10)
          goto LABEL_13;
      }
      if (!sub_22F28C8B4(v10))
        goto LABEL_13;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 16) == 45 && sub_22E69BE08(v9, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)))
        goto LABEL_13;
    }
    result = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7, 1, 0);
    if ((_DWORD)result)
    {
      memset(v56, 0, 24);
      BYTE8(v56[1]) = 4;
      *(_WORD *)((char *)&v56[1] + 9) = 0;
LABEL_18:
      *(_OWORD *)(a2 + 48) = v56[0];
      *(_OWORD *)(a2 + 59) = *(_OWORD *)((char *)v56 + 11);
      goto LABEL_19;
    }
    v12 = sub_22E6A8A40(v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
    if (v12)
    {
      result = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v12 & 0xFFFFFFFFFFFFFFF0));
LABEL_16:
      WORD4(v56[1]) = 0;
      BYTE10(v56[1]) = 0;
      *(_QWORD *)&v56[1] = 0;
      v56[0] = (unint64_t)result;
LABEL_17:
      *(_WORD *)((char *)&v56[1] + 9) = 128;
      goto LABEL_18;
    }
    v51 = *(_QWORD *)v8;
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v52 && *(_BYTE *)(v52 + 16) == 45)
    {
      if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v52 + 24)) + 74) & 0x80) != 0)
        goto LABEL_13;
      v51 = *(_QWORD *)v8;
    }
    v53 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v51);
    if (v53 <= 0x10)
    {
      result = llvm::Type::getInt16Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v54);
      goto LABEL_16;
    }
    if (v53 <= 0x20)
    {
      result = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v54);
      goto LABEL_16;
    }
    if (v53 <= 0x40)
    {
      Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v54);
      result = llvm::ArrayType::get(Int32Ty, (llvm::Type *)2);
      goto LABEL_16;
    }
    result = sub_22E6BD840(a1, v7);
    if (result <= 0x10)
    {
      memset(v56, 0, 27);
      goto LABEL_17;
    }
LABEL_13:
    result = sub_22E69BE7C((unint64_t)v56, a1, v7);
    goto LABEL_18;
  }
LABEL_19:
  v13 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 40 * v13;
    v16 = 16;
    while (1)
    {
      v17 = a2 + v14;
      if (v5 == 91)
      {
        v18 = sub_22E69BD58(*(_QWORD *)(v17 + 80));
        v19 = sub_22E6A8A40(v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
        if (v19)
          v20 = v19 & 0xFFFFFFFFFFFFFFF0;
        else
          v20 = v18;
        result = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)v20);
        v21 = result;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v22 + 2000) + 68) & 0x40) != 0)
        {
          v23 = *(_DWORD **)(v22 + 15072);
          v24 = result && *(_DWORD *)(result + 8) == 15;
          if (v24 && *(_DWORD *)(result + 8) >> 8 == *v23)
          {
            if (*(_QWORD *)(result + 24))
              result = llvm::PointerType::get();
            else
              result = llvm::PointerType::get(*(llvm::PointerType **)result, (llvm::LLVMContext *)v23[8]);
          }
        }
        v36 = 0;
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        if ((*(_DWORD *)(*(_QWORD *)(v37 + 2000) + 52) & 0x40000000) != 0)
        {
          v38 = 0;
          v39 = 0;
        }
        else
        {
          v38 = 0;
          v39 = 0;
          if (result == v21)
          {
            if (sub_22E619D68(v20))
              goto LABEL_61;
            v40 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
            if (v40)
              v41 = *(_BYTE *)(v40 + 16) == 31;
            else
              v41 = 0;
            if ((v41
               || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
               && (v40 = sub_22F10CF48(v40)) != 0)
              && sub_22F28C8B4(v40))
            {
              v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
LABEL_61:
              v39 = sub_22EF5D130(v37, v20);
              result = 0;
              v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 15072) + 12);
              v36 = 3;
            }
            else
            {
              v36 = 0;
              v38 = 0;
              v39 = 0;
              result = v21;
            }
          }
        }
        v2 &= 0xFFFFFE00;
        v42 = a2 + v14;
        *(_QWORD *)(v42 + 88) = result;
        *(_QWORD *)(v42 + 96) = 0;
        *(_DWORD *)(v42 + 104) = v39;
        *(_DWORD *)(v42 + 108) = v38;
        *(_BYTE *)(v42 + 112) = v36;
        *(_WORD *)(v42 + 113) = v2;
        goto LABEL_70;
      }
      v26 = sub_22E69BD58(*(_QWORD *)(v17 + 80));
      v27 = v26 & 0xFFFFFFFFFFFFFFF0;
      if (!sub_22E619D68(v26))
      {
        v32 = *(_QWORD *)v27;
        v33 = *(_QWORD *)v27 && *(_BYTE *)(*(_QWORD *)v27 + 16) == 31;
        if (!v33
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
           || (v32 = sub_22F10CF48(v32)) == 0)
          || !sub_22F28C8B4(v32))
        {
LABEL_48:
          result = sub_22E69BAA8((uint64_t)v56, a1, v26);
          if (BYTE8(v56[1]) != 2)
          {
            result = sub_22E6BD840(a1, v26);
            if (v16 >= result)
              v16 -= result;
            else
              v16 = 0;
          }
          goto LABEL_56;
        }
      }
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v28)
      {
        if (*(_BYTE *)(v28 + 16) == 45)
        {
          v29 = sub_22E69BE08(v28, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
          if (v29)
            break;
        }
      }
      result = sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v26, 1, 0);
      if ((_DWORD)result)
      {
        memset(v56, 0, 24);
        BYTE8(v56[1]) = 4;
        v31 = *(_WORD *)((_BYTE *)&v56[1] + 9) & 0xFE00;
        goto LABEL_55;
      }
      v34 = sub_22E6A8A40(v26, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      if (v34)
      {
        result = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)(v34 & 0xFFFFFFFFFFFFFFF0));
        goto LABEL_54;
      }
      v43 = *(_QWORD *)v27;
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v44 && *(_BYTE *)(v44 + 16) == 45)
      {
        if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v44 + 24)) + 74) & 0x80) != 0)
        {
          result = sub_22E69BAA8((uint64_t)v56, a1, v26);
          goto LABEL_56;
        }
        v43 = *(_QWORD *)v27;
      }
      v45 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v43);
      if (v45 <= 0x40)
      {
        v47 = v45;
        v48 = (v45 + 31) >> 5;
        v49 = v16 >= v48;
        v50 = v16 - v48;
        if (v49)
          v16 = v50;
        else
          v16 = 0;
        if (v45 > 0x10)
        {
          result = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v46);
          if (v47 > 0x20)
            result = llvm::ArrayType::get((llvm::ArrayType *)result, (llvm::Type *)2);
        }
        else
        {
          result = llvm::Type::getInt16Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v46);
        }
LABEL_54:
        BYTE8(v56[1]) = 0;
        v56[0] = (unint64_t)result;
        v31 = *(_WORD *)((_BYTE *)&v56[1] + 9) & 0xFE00 | 0x80;
        *(_QWORD *)&v56[1] = 0;
LABEL_55:
        *(_WORD *)((char *)&v56[1] + 9) = v31;
        goto LABEL_56;
      }
      if (!v16)
        goto LABEL_48;
      result = sub_22E6BD840(a1, v26);
      if (v16 < result)
        goto LABEL_48;
      memset(v56, 0, 25);
      *(_WORD *)((char *)&v56[1] + 9) = *(_WORD *)((_BYTE *)&v56[1] + 9) & 0xFE00 | 0x80;
      v16 -= result;
LABEL_56:
      v35 = a2 + v14;
      *(_OWORD *)(v35 + 88) = v56[0];
      *(_OWORD *)(v35 + 99) = *(_OWORD *)((char *)v56 + 11);
LABEL_70:
      v14 += 40;
      if (v15 == v14)
        return result;
    }
    v30 = v29 == 1;
    result = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v26);
    v56[0] = 0uLL;
    BYTE8(v56[1]) = 2;
    *(_QWORD *)&v56[1] = result;
    v31 = *(_WORD *)((_BYTE *)&v56[1] + 9) & 0xFE00 | (8 * v30);
    goto LABEL_55;
  }
  return result;
}

uint64_t sub_22E6BD7FC()
{
  return 1;
}

BOOL sub_22E6BD804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (unint64_t)((unint64_t)(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2)
                                                           + 31) >> 5)
       * a3 < 0x11;
}

unint64_t sub_22E6BD840(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v4)
  {
    v5 = v4;
    v6 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0));
    if (v6 == 16)
      return (*(_DWORD *)(v5 + 20) + 1) >> 1;
    else
      return *(_DWORD *)(v5 + 20) * ((v6 + 31) >> 5);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8 && *(_BYTE *)(v8 + 16) == 45)
    {
      v9 = sub_22F114198(*(_QWORD *)(v8 + 24));
      v10 = sub_22EFC3B90(v9);
      if (v10)
      {
        v11 = v10;
        LODWORD(v7) = 0;
LABEL_8:
        v7 = sub_22E6BD840(a1, *(_QWORD *)(v11 + 48)) + v7;
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v11)
            break;
          if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_8;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return (unint64_t)(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v3) + 31) >> 5;
    }
  }
  return v7;
}

_QWORD *sub_22E6BD948(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6BD988(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6BD9D8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v11[32];
  __int16 v12;

  v5 = *(_QWORD *)(a2[201] + 40);
  if (!sub_22E619D68(v5))
  {
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 31;
    else
      v7 = 0;
    if (v7
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
      && (v6 = sub_22F10CF48(v6)) != 0)
    {
      sub_22F28C8B4(v6);
    }
  }
  v8 = a2[1];
  v9 = (uint64_t *)llvm::ConstantInt::get();
  v12 = 257;
  return sub_22E42129C(a2 + 34, v8, a3, v9, (uint64_t)v11);
}

uint64_t sub_22E6BDAAC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v11[32];
  __int16 v12;

  v5 = *(_QWORD *)(a2[201] + 40);
  if (!sub_22E619D68(v5))
  {
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 31;
    else
      v7 = 0;
    if (v7
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
      && (v6 = sub_22F10CF48(v6)) != 0)
    {
      sub_22F28C8B4(v6);
    }
  }
  v8 = a2[1];
  v9 = (uint64_t *)llvm::ConstantInt::get();
  v12 = 257;
  return sub_22E42129C(a2 + 34, v8, a3, v9, (uint64_t)v11);
}

void sub_22E6BDB84()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6BDB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[27];

  v4 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    memset(v9, 0, 25);
    *(_WORD *)&v9[25] = 128;
  }
  else
  {
    sub_22E69BE7C((unint64_t)v9, a1, v4);
  }
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v9;
  result = *(double *)&v9[11];
  *(_OWORD *)(a2 + 59) = *(_OWORD *)&v9[11];
  v6 = *(_DWORD *)(a2 + 36);
  if (v6)
  {
    v7 = a2 + 80;
    v8 = v7 + 40 * v6;
    do
    {
      sub_22E69BAA8((uint64_t)v9, a1, *(_QWORD *)v7);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)v9;
      result = *(double *)&v9[11];
      *(_OWORD *)(v7 + 19) = *(_OWORD *)&v9[11];
      v7 += 40;
    }
    while (v7 != v8);
  }
  return result;
}

_QWORD *sub_22E6BDC60(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6BDCA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6BDCF0()
{
  return 14;
}

uint64_t sub_22E6BDCF8(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 + 272;
  v5 = llvm::ConstantInt::get();
  v6 = llvm::ConstantInt::get();
  sub_22E6A4C7C(v4, a3, v6, 0, 0x1Fu);
  sub_22E6A4C7C(v4, a3, v5, 32, 0x3Fu);
  sub_22E6A4C7C(v4, a3, v6, 64, 0x47u);
  sub_22E6A4C7C(v4, a3, v6, 72, 0x57u);
  return 0;
}

uint64_t sub_22E6BDDB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = (uint64_t *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (uint64_t *)llvm::ConstantInt::get();
  v9 = 257;
  return sub_22E42129C(v4, v5, a3, v6, (uint64_t)v8);
}

uint64_t sub_22E6BDE14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = (uint64_t *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (uint64_t *)llvm::ConstantInt::get();
  v9 = 257;
  return sub_22E42129C(v4, v5, a3, v6, (uint64_t)v8);
}

void sub_22E6BDE7C()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6BDE90(uint64_t a1, uint64_t a2)
{
  double result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[27];

  sub_22E6BE2F4((uint64_t)v8, a1, *(_QWORD *)(a2 + 40), 0x100u);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v8;
  result = *(double *)&v8[11];
  *(_OWORD *)(a2 + 59) = *(_OWORD *)&v8[11];
  v5 = *(_DWORD *)(a2 + 36);
  if (v5)
  {
    v6 = a2 + 80;
    v7 = v6 + 40 * v5;
    do
    {
      sub_22E6BE2F4((uint64_t)v8, a1, *(_QWORD *)v6, 0x80u);
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v8;
      result = *(double *)&v8[11];
      *(_OWORD *)(v6 + 19) = *(_OWORD *)&v8[11];
      v6 += 40;
    }
    while (v6 != v7);
  }
  return result;
}

double sub_22E6BDF28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::DataLayout *DataLayout;
  llvm::Type *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t ABITypeAlignment;
  llvm::Type **v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _OWORD v48[3];
  _QWORD v49[3];
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  _QWORD v61[4];
  __int16 v62;
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[3];
  llvm::Type *v74;
  unsigned __int8 v75;

  sub_22E6BE2F4((uint64_t)&v74, a1, a4, 0x80u);
  v9 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), (llvm::LLVMContext *)a4);
  v10 = v9;
  v11 = v75;
  if (v75 <= 6u && ((1 << v75) & 0x43) != 0)
  {
    v13 = (uint64_t)v74;
    if (!v74)
      v13 = v9;
    v74 = (llvm::Type *)v13;
  }
  v14 = (uint64_t *)(a2 + 272);
  v15 = a3[1];
  v73[0] = *a3;
  v73[1] = v15;
  v73[2] = a3[2];
  v16 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v73, "ap.cur");
  v17 = (_QWORD *)a2;
  v18 = sub_22E6A7CA4(a2);
  v19 = llvm::PointerType::get();
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v71);
  if (v11 == 4)
  {
    v20 = llvm::UndefValue::get();
    v22 = v72;
    *(_QWORD *)a5 = v20;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v22;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
    return result;
  }
  v42 = v10;
  v39 = v17;
  if ((v11 - 2) < 2)
  {
    v26 = v16;
    *(_QWORD *)&v57 = v16;
    *((_QWORD *)&v57 + 1) = v18;
    v25 = 8;
    v58 = 8;
    v59 = 0;
    v41 = 0u;
    v60 = 0u;
    v61[0] = "indirect";
    v62 = 259;
    sub_22E3BEE6C(v14, &v57, v19, (uint64_t)v61, (uint64_t)&v67);
    v53 = v67;
    v54 = v68;
    v55 = v69;
    v56 = v70;
    v27 = sub_22E3C43AC(v14, (uint64_t)&v53, "indirect.arg");
    v40 = 0;
    v29 = v72;
    v28 = v42;
LABEL_16:
    v23 = a3;
    v24 = a5;
    goto LABEL_18;
  }
  if (!v11)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
    v31 = v74;
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v74);
    v33 = (unint64_t)(v32 + 7) >> 3;
    v35 = v34 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v31);
    *(_QWORD *)&v67 = (ABITypeAlignment + v33 - 1) / ABITypeAlignment * ABITypeAlignment;
    *((_QWORD *)&v67 + 1) = v35;
    v25 = (llvm::TypeSize::operator unsigned long long() + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = 0;
    v41 = 0u;
    v29 = 8;
    v26 = v16;
    v27 = v16;
    v28 = v18;
    goto LABEL_16;
  }
  v23 = a3;
  v24 = a5;
  if (v11 == 1)
  {
    v25 = 8;
    v26 = v16;
    v63[0] = v16;
    v63[1] = v18;
    v63[2] = 8;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v61[0] = "extend";
    v62 = 259;
    sub_22F24D74C(v14, (uint64_t)v63, 8 - v71, (uint64_t)v61, (uint64_t)&v67);
    v28 = *((_QWORD *)&v67 + 1);
    v27 = v67;
    v29 = v68;
    v40 = v69;
    v41 = v70;
  }
  else
  {
    v25 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v40 = 0;
    v41 = 0u;
    v26 = v16;
  }
LABEL_18:
  v49[0] = v26;
  v49[1] = v18;
  v49[2] = 8;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v61[0] = "ap.next";
  v62 = 259;
  sub_22F24D74C(v14, (uint64_t)v49, v25, (uint64_t)v61, (uint64_t)&v67);
  if ((v69 & 3) != 0)
    v37 = (llvm::Type **)sub_22F28ABCC(&v67, v39);
  else
    v37 = (llvm::Type **)v67;
  v38 = v23[1];
  v48[0] = *v23;
  v48[1] = v38;
  v48[2] = v23[2];
  sub_22E3BEDDC((uint64_t)v14, v37, (uint64_t)v48);
  *(_QWORD *)&v44 = v27;
  *((_QWORD *)&v44 + 1) = v28;
  v45 = v29;
  v46 = v40;
  v47 = v41;
  v61[0] = "arg.addr";
  v62 = 259;
  *(_QWORD *)&result = sub_22E3BEE6C(v14, &v44, v42, (uint64_t)v61, v24).n128_u64[0];
  return result;
}

void sub_22E6BE2F4(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v11;
  unint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Module *v33;
  llvm::LLVMContext *v34;
  int v35;
  _QWORD *v36;
  int v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t DataLayout;
  void *__s1;
  uint64_t v44;
  _QWORD v45[9];
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v6 = a3 & 0xFFFFFFFFFFFFFFF0;
  v7 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 4;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00;
    goto LABEL_51;
  }
  v11 = a3;
  v12 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v7);
  if (v12 > a4)
  {
    v13 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 2;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00;
    *(_DWORD *)(a1 + 16) = v13;
LABEL_51:
    *(_WORD *)(a1 + 25) = v14;
    return;
  }
  v15 = v12;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v16 && *(_BYTE *)(v16 + 16) == 44)
  {
    v17 = sub_22F114198(*(_QWORD *)(v16 + 24));
    v11 = sub_22E496830(v17);
    v6 = v11 & 0xFFFFFFFFFFFFFFF0;
  }
  v18 = *(_QWORD *)v6;
  if (v15 <= 0x3F)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v19)
      v21 = v20 == 11;
    else
      v21 = 0;
    if (v21)
    {
      if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_37;
    }
    else if (v19 && v20 == 44)
    {
      v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
      if ((*(_BYTE *)(v22 + 74) & 1) == 0 && *(_QWORD *)(v22 + 128) <= 7uLL)
      {
        v18 = *(_QWORD *)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_29;
        goto LABEL_26;
      }
      v23 = sub_22F114198(*(_QWORD *)(v19 + 24));
      v18 = *(_QWORD *)v6;
      if ((*(_BYTE *)(v23 + 76) & 0x80) == 0)
      {
LABEL_37:
        v30 = sub_22F110B20(v18);
        *(_BYTE *)(a1 + 24) = 1;
        v14 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_QWORD *)(a1 + 16) = 0;
        if (v30)
          v14 |= 0x100u;
        goto LABEL_50;
      }
    }
    else if (v20 == 9)
    {
      goto LABEL_37;
    }
  }
  if (!v18)
  {
LABEL_29:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9)
      goto LABEL_32;
    v24 = sub_22F10CF48(v18);
    v18 = *(_QWORD *)v6;
    if (!v24)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_26:
  if (*(_BYTE *)(v18 + 16) != 9)
    goto LABEL_29;
  v24 = v18;
LABEL_31:
  if ((*(_DWORD *)(v24 + 32) & 0x1FFFF80) == 0)
    goto LABEL_37;
LABEL_32:
  if (!sub_22E619D68(v11))
  {
    if (!v18 || *(_BYTE *)(v18 + 16) != 31)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
        goto LABEL_49;
      v40 = sub_22F10CF48(v18);
      if (!v40)
        goto LABEL_49;
      v18 = v40;
    }
    if (sub_22F28C8B4(v18))
    {
      v18 = *(_QWORD *)v6;
      goto LABEL_33;
    }
LABEL_49:
    *(_BYTE *)(a1 + 24) = 0;
    v14 = *(_WORD *)(a1 + 25) & 0xFE00 | 0x80;
    *(_QWORD *)(a1 + 16) = 0;
LABEL_50:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_51;
  }
LABEL_33:
  v25 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 16) == 45)
    {
      v26 = sub_22E69BE08(v25, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32));
      if (v26)
      {
        v27 = v26 == 1;
        v28 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v11);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 2;
        v29 = *(_WORD *)(a1 + 25) & 0xFE00;
        *(_DWORD *)(a1 + 16) = v28;
        v14 = v29 | (8 * v27);
        goto LABEL_51;
      }
    }
  }
  v31 = sub_22E66CB04(*(llvm::Type ****)(a2 + 8), (llvm::LLVMContext *)v11);
  if (!v31)
    goto LABEL_49;
  v32 = v31;
  if (*(_BYTE *)(v31 + 8) != 16)
    goto LABEL_49;
  v33 = *(llvm::Module **)(*(_QWORD *)(a2 + 8) + 16);
  v41 = *(_QWORD *)v33;
  DataLayout = llvm::Module::getDataLayout(v33);
  __s1 = v45;
  v44 = 0x800000000;
  v45[8] = 0;
  v46 = 0;
  sub_22E6BE748((uint64_t)&v41, 0, v32);
  sub_22E3C304C(DataLayout, v32);
  v34 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
  sub_22E6BE8A4((uint64_t)&v41, v34);
  v35 = v44;
  if ((_DWORD)v44 != *(_DWORD *)(v32 + 12)
    || (v36 = __s1, memcmp(__s1, *(const void **)(v32 + 16), 8 * v44)))
  {
    if (v35 == 1)
    {
      v36 = __s1;
      v32 = *(_QWORD *)__s1;
    }
    else
    {
      v32 = llvm::StructType::get();
      v36 = __s1;
    }
  }
  v37 = v46;
  *(_BYTE *)(a1 + 24) = 0;
  v38 = *(_WORD *)(a1 + 25) & 0xFE00;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v32;
  if (v37)
    v39 = 192;
  else
    v39 = 128;
  *(_WORD *)(a1 + 25) = v38 | v39;
  if (v36 != v45)
    free(v36);
}

uint64_t sub_22E6BE748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;

  result = llvm::DataLayout::getStructLayout();
  v7 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = result + 16;
    v10 = 8 * v7;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v8);
      v12 = (llvm::LLVMContext *)(a2 + 8 * *(_QWORD *)(v9 + v8));
      v13 = *(unsigned __int8 *)(v11 + 8);
      if (v13 > 4)
      {
        if (v13 != 5)
        {
          if (v13 == 15)
          {
            if ((v12 & 0x3F) == 0)
            {
              result = sub_22E6BE8A4(a1, v12);
              v17 = *(unsigned int *)(a1 + 24);
              if (v17 >= *(unsigned int *)(a1 + 28))
              {
                result = llvm::SmallVectorBase<unsigned int>::grow_pod();
                v17 = *(unsigned int *)(a1 + 24);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v17) = v11;
              ++*(_DWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 96) += 64;
            }
          }
          else if (v13 == 16)
          {
            result = sub_22E6BE748(a1, v12, *(_QWORD *)(*(_QWORD *)(a3 + 16) + v8));
          }
          goto LABEL_18;
        }
        v14 = a1;
        v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v8);
        v16 = 128;
        goto LABEL_17;
      }
      if (v13 == 2)
        break;
      if (v13 == 3)
      {
        v14 = a1;
        v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v8);
        v16 = 64;
LABEL_17:
        result = sub_22E6BEA1C(v14, v12, v15, v16);
      }
LABEL_18:
      v8 += 8;
      if (v10 == v8)
        return result;
    }
    v14 = a1;
    v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v8);
    v16 = 32;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_22E6BE8A4(uint64_t result, llvm::LLVMContext *a2)
{
  llvm::LLVMContext *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *(llvm::LLVMContext **)(result + 96);
  if (v2 != a2)
  {
    v4 = result;
    v5 = ((unint64_t)v2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v5 <= (unint64_t)v2 || v5 > (unint64_t)a2)
    {
      v5 = *(_QWORD *)(result + 96);
    }
    else
    {
      result = llvm::IntegerType::get();
      v7 = result;
      v8 = *(_DWORD *)(v4 + 24);
      if (v8 >= *(_DWORD *)(v4 + 28))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(v4 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v8) = v7;
      ++*(_DWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 96) = v5;
    }
    if (v5 + 64 <= (unint64_t)a2)
    {
      do
      {
        result = llvm::Type::getInt64Ty(*(llvm::Type **)v4, a2);
        v11 = result;
        v12 = *(unsigned int *)(v4 + 24);
        if (v12 >= *(unsigned int *)(v4 + 28))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = *(unsigned int *)(v4 + 24);
        }
        *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v12) = v11;
        ++*(_DWORD *)(v4 + 24);
        v13 = *(_QWORD *)(v4 + 96);
        v5 = v13 + 64;
        *(_QWORD *)(v4 + 96) = v13 + 64;
      }
      while (v13 + 128 <= (unint64_t)a2);
    }
    if ((unint64_t)a2 > v5)
    {
      result = llvm::IntegerType::get();
      v9 = result;
      v10 = *(_DWORD *)(v4 + 24);
      if (v10 >= *(_DWORD *)(v4 + 28))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *(_DWORD *)(v4 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v10) = v9;
      ++*(_DWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 96) = a2;
    }
  }
  return result;
}

uint64_t sub_22E6BEA1C(uint64_t result, llvm::LLVMContext *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;

  v4 = a4;
  if (!((unint64_t)a2 % a4))
  {
    v7 = result;
    if (a4 <= 0x3F)
      *(_BYTE *)(result + 104) = 1;
    result = sub_22E6BE8A4(result, a2);
    v8 = *(_DWORD *)(v7 + 24);
    if (v8 >= *(_DWORD *)(v7 + 28))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8) = a3;
    ++*(_DWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 96) = (char *)a2 + v4;
  }
  return result;
}

uint64_t sub_22E6BEAB8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA6C688;
  sub_22E6BF0D4(*(char **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24FA68C10;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6BEB0C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FA6C688;
  sub_22E6BF0D4(*(char **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24FA68C10;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6BEB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(a3 + 32) != v3)
  {
    v6 = 0;
    v7 = a1 + 16;
    for (i = 1; ; ++i)
    {
      v9 = *(_QWORD *)(v3 + 32 * v6);
      if (llvm::Module::getNamedValue())
        break;
LABEL_20:
      v6 = i;
      v3 = *(_QWORD *)(a3 + 24);
      if (v6 == (*(_QWORD *)(a3 + 32) - v3) >> 5)
        return;
    }
    v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) + 56))(v9 & 0xFFFFFFFFFFFFFFF8);
    v20 = v22;
    v21 = xmmword_22F44E310;
    if (v10)
    {
      v11 = v10;
      v12 = *(_DWORD *)(v10 + 28);
      if ((v12 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        if (sub_22EFC0844(v10)
          || !sub_22E6BF12C((uint64_t *)&v20, *(_QWORD *)(v11 + 48), a2, v7))
        {
          goto LABEL_18;
        }
      }
      else
      {
        if ((v12 & 0x7Fu) - 60 > 6 || sub_22EFBBDAC(v10))
          goto LABEL_18;
        v13 = *(_QWORD *)(v11 + 48);
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
        v15 = v13 & 7 | v14;
        v16 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
        if (v16)
          v17 = (*(_DWORD *)(v16 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v17 = 0;
        if (v17
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3
          && (v18 = v13 & 7 | v14,
              v19 = sub_22F10CF48(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0)),
              v15 = v18,
              (v16 = v19) != 0))
        {
          if ((sub_22E6BFDE8(&v20, v15, v16, a2, v7, "*", 1uLL) & 1) == 0)
            goto LABEL_18;
        }
        else if ((sub_22E6BF12C((uint64_t *)&v20, v15, a2, v7) & 1) == 0)
        {
          goto LABEL_18;
        }
      }
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
LABEL_18:
    if (v20 != v22)
      free(v20);
    goto LABEL_20;
  }
}

void sub_22E6BEDE8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6BEDFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, llvm::LLVMContext *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  llvm::DataLayout *DataLayout;
  llvm::Type *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t ABITypeAlignment;
  llvm::Type **v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[3];
  _BYTE v34[32];
  __int16 v35;
  _QWORD v36[3];
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  __int16 v42;
  _OWORD v43[3];
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  llvm::Type *v54;
  unsigned __int8 v55;
  _OWORD v56[4];

  v10 = a2 + 34;
  v11 = a3[1];
  v56[0] = *a3;
  v56[1] = v11;
  v56[2] = a3[2];
  v42 = 257;
  v32 = sub_22E3C2A7C(a2 + 34, (uint64_t)v56, (uint64_t)&v40);
  v12 = sub_22E6A7CA4((uint64_t)a2);
  sub_22E69BAA8((uint64_t)&v54, a1, (uint64_t)a4);
  v13 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)a4);
  v14 = sub_22E66CB04(*(llvm::Type ****)(a1 + 8), a4);
  v15 = v14;
  v16 = v55;
  if (v55 <= 6u && ((1 << v55) & 0x43) != 0)
  {
    v17 = (uint64_t)v54;
    if (!v54)
      v17 = v14;
    v54 = (llvm::Type *)v17;
  }
  result = llvm::PointerType::get();
  *(_QWORD *)(a5 + 32) = 0;
  v19 = (_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  if (v16 < 2)
  {
    *(_QWORD *)&v49 = v32;
    *((_QWORD *)&v49 + 1) = v12;
    v50 = 4;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v42 = 257;
    sub_22E3BEE6C(v10, &v49, v15, (uint64_t)&v40, a5);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 8) + 16));
    v24 = v54;
    sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v54);
    v26 = (unint64_t)(v25 + 7) >> 3;
    v28 = v27 == 1;
    ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(DataLayout, v24);
    *(_QWORD *)&v40 = (ABITypeAlignment + v26 - 1) / ABITypeAlignment * ABITypeAlignment;
    *((_QWORD *)&v40 + 1) = v28;
    result = llvm::TypeSize::operator unsigned long long();
    v21 = (result + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (!v21)
      return result;
    v20 = v32;
  }
  else
  {
    if (v16 == 4)
    {
      result = llvm::UndefValue::get();
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v15;
      *(_QWORD *)(a5 + 16) = v13;
      *(_DWORD *)(a5 + 24) = 0;
      *v19 = 0;
      *(_QWORD *)(a5 + 40) = 0;
      return result;
    }
    if (v16 - 2 >= 2)
      return result;
    v20 = v32;
    *(_QWORD *)&v44 = v32;
    *((_QWORD *)&v44 + 1) = v12;
    v21 = 4;
    v45 = 4;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v42 = 257;
    sub_22E3BEE6C(v10, &v44, result, (uint64_t)&v40, a5);
    v22 = *(_OWORD *)(a5 + 16);
    v43[0] = *(_OWORD *)a5;
    v43[1] = v22;
    v43[2] = *(_OWORD *)(a5 + 32);
    v42 = 257;
    *(_QWORD *)a5 = sub_22E3C2A7C(v10, (uint64_t)v43, (uint64_t)&v40);
    *(_QWORD *)(a5 + 8) = v15;
    *(_QWORD *)(a5 + 16) = v13;
    *(_DWORD *)(a5 + 24) = 0;
    *v19 = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  v36[0] = v20;
  v36[1] = v12;
  v36[2] = 4;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v35 = 257;
  sub_22F24D74C(v10, (uint64_t)v36, v21, (uint64_t)v34, (uint64_t)&v40);
  if ((v41 & 3) != 0)
    v30 = (llvm::Type **)sub_22F28ABCC(&v40, a2);
  else
    v30 = (llvm::Type **)v40;
  v31 = a3[1];
  v33[0] = *a3;
  v33[1] = v31;
  v33[2] = a3[2];
  return sub_22E3BEDDC((uint64_t)v10, v30, (uint64_t)v33);
}

void sub_22E6BF0D4(char *a1)
{
  if (a1)
  {
    sub_22E6BF0D4(*(_QWORD *)a1);
    sub_22E6BF0D4(*((_QWORD *)a1 + 1));
    if (a1[95] < 0)
      operator delete(*((void **)a1 + 9));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t sub_22E6BF12C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  unint64_t v24;
  _QWORD *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  size_t v38;
  const void *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v47;
  void *v48;
  size_t v49;
  unsigned int v50;
  _WORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  void **v63;
  char *v64;
  __int128 v65;
  _BOOL4 v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  int v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char *v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t i;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  int64_t v108;
  char *v109;
  void *v110;
  char *v111;
  uint64_t v112;
  char v113[8];
  void *__p[2];
  char v115;
  uint64_t v116;
  void *v117;
  __int128 v118;
  _WORD v119[64];
  char *v120;
  uint64_t v121;
  _QWORD v122[66];

  v122[64] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = v7 | a2 & 7;
  v112 = v8;
  v9 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = (*(_DWORD *)(v10 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
  else
    v11 = 0;
  if (v11)
    return sub_22E6BFDE8(a1, v8, v10, a3, a4, "", 0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v10 = sub_22F10CF48(v10);
    if (v10)
      return sub_22E6BFDE8(a1, v8, v10, a3, a4, "", 0);
  }
  sub_22E6BFFA8(a1, v8);
  v12 = *v9;
  v13 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(v13 + 16);
  if (v13)
    v15 = v14 == 11;
  else
    v15 = 0;
  if (v15)
  {
    result = 0;
    v22 = (v14 >> 19) & 0x1FF;
    if (v22 <= 210)
    {
      v23 = "0";
      switch(v22)
      {
        case 165:
          goto LABEL_113;
        case 166:
          v23 = "b";
          goto LABEL_113;
        case 167:
        case 168:
          v23 = "uc";
          goto LABEL_113;
        case 173:
          v23 = "us";
          goto LABEL_113;
        case 174:
          v23 = "ui";
          goto LABEL_113;
        case 175:
          v23 = "ul";
          goto LABEL_113;
        case 176:
          v23 = "ull";
          goto LABEL_113;
        case 179:
          v23 = "sc";
          goto LABEL_113;
        case 181:
          v23 = "ss";
          goto LABEL_113;
        case 182:
          v23 = "si";
          goto LABEL_113;
        case 183:
          v23 = "sl";
          goto LABEL_113;
        case 184:
          v23 = "sll";
          goto LABEL_113;
        default:
          return result;
      }
      return result;
    }
    switch(v22)
    {
      case 211:
        v23 = "ft";
        break;
      case 212:
        v23 = "d";
        break;
      case 213:
        v23 = "ld";
        break;
      default:
        return result;
    }
LABEL_113:
    v77 = strlen(v23);
    v78 = v77;
    v79 = a1[1];
    if (a1[2] < v79 + v77)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v79 = a1[1];
      if (!v78)
        goto LABEL_116;
    }
    else if (!v77)
    {
LABEL_116:
      v21 = v79 + v78;
LABEL_117:
      a1[1] = v21;
      return 1;
    }
    memcpy((void *)(*a1 + v79), v23, v78);
    v79 = a1[1];
    goto LABEL_116;
  }
  if (*(_BYTE *)(v12 + 16) == 39)
    goto LABEL_13;
  if (v14 != 39)
  {
LABEL_28:
    if (v14 == 44)
    {
      v24 = sub_22F10AC24(&v112);
      v25 = sub_22E6C09C8(a4, v24);
      if (v26)
      {
        v27 = v25;
        v28 = v26;
        v29 = a1[1];
        if (a1[2] < v29 + v26)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v29 = a1[1];
        }
        memcpy((void *)(*a1 + v29), v27, v28);
        v21 = a1[1] + v28;
        goto LABEL_117;
      }
      v33 = a1[1];
      v34 = v33;
      if (a1[2] < v33 + 2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v34 = a1[1];
      }
      *(_WORD *)(*a1 + v34) = 10341;
      v35 = a1[2];
      v36 = a1[1] + 2;
      a1[1] = v36;
      if (!v24)
      {
LABEL_43:
        if (v35 < v36 + 2)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v36 = a1[1];
        }
        *(_WORD *)(*a1 + v36) = 31529;
        a1[1] += 2;
        v41 = sub_22F114198(*(_QWORD *)(v13 + 24));
        v42 = sub_22EFC3500(v41);
        if (!v42)
          goto LABEL_143;
        v43 = v42;
        v120 = (char *)v122;
        v121 = 0x1000000000;
        v44 = sub_22E49F9AC(v42);
        sub_22EFC3500(v43);
        if (!v44)
        {
LABEL_120:
          v80 = 126 - 2 * __clz(v121);
          if ((_DWORD)v121)
            v81 = v80;
          else
            v81 = 0;
          sub_22E6C0CD0((uint64_t)v120, (unint64_t)&v120[32 * v121], v81, 1);
          if ((_DWORD)v121)
          {
            v82 = 0;
            v83 = a1[1];
            v84 = 32 * v121;
            while (1)
            {
              v85 = a1[2];
              if (v82)
              {
                if (v83 + 1 > v85)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v83 = a1[1];
                }
                *(_BYTE *)(*a1 + v83) = 44;
                v85 = a1[2];
                v83 = a1[1] + 1;
                a1[1] = v83;
              }
              v86 = v120[v82 + 31];
              v87 = v86 >= 0 ? &v120[v82 + 8] : *(char **)&v120[v82 + 8];
              v88 = v86 >= 0 ? v86 & 0x7F : *(_QWORD *)&v120[v82 + 16];
              if (v85 < v88 + v83)
                break;
              if (v88)
                goto LABEL_137;
LABEL_138:
              v83 += v88;
              a1[1] = v83;
              v82 += 32;
              if (v84 == v82)
                goto LABEL_142;
            }
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v83 = a1[1];
            if (!v88)
              goto LABEL_138;
LABEL_137:
            memcpy((void *)(*a1 + v83), v87, v88);
            v83 = a1[1];
            goto LABEL_138;
          }
LABEL_142:
          sub_22E6C0B54(&v120);
LABEL_143:
          v89 = a1[1];
          if (v89 + 1 > (unint64_t)a1[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v89 = a1[1];
          }
          *(_BYTE *)(*a1 + v89) = 125;
          v91 = *a1;
          v90 = a1[1];
          v92 = v90 + 1;
          a1[1] = v90 + 1;
          if (v90 + 1 < v33)
            v93 = v90 + 1;
          else
            v93 = v33;
          sub_22E6C0BC0(a4, v24, (const void *)(v91 + v93), v92 - v93, 0);
          return 1;
        }
LABEL_47:
        v117 = v119;
        v119[0] = 10349;
        v118 = xmmword_22F45D830;
        v45 = *(_QWORD *)(v44 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v44 + 40) & 7) != 0 || v45 == 0)
        {
          v49 = 0;
        }
        else
        {
          v47 = *(unsigned int **)(v45 + 16);
          v50 = *v47;
          v48 = v47 + 4;
          v49 = v50;
          if (v50 >= 0x7FuLL)
          {
            v110 = v48;
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v48 = v110;
            v51 = v117;
            v52 = v118;
            goto LABEL_54;
          }
          if (v49)
          {
            v51 = v119;
            v52 = 2;
LABEL_54:
            memcpy((char *)v51 + v52, v48, v49);
            v53 = *((_QWORD *)&v118 + 1);
            v54 = v118;
            goto LABEL_55;
          }
        }
        v53 = 128;
        v54 = 2;
LABEL_55:
        v55 = v54 + v49;
        *(_QWORD *)&v118 = v55;
        if (v53 < v55 + 2)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v55 = v118;
        }
        *(_WORD *)((char *)v117 + v55) = 31529;
        *(_QWORD *)&v118 = v118 + 2;
        llvm::APInt::toString();
        v56 = v118;
        if ((unint64_t)(v118 + 1) > *((_QWORD *)&v118 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v56 = v118;
        }
        v57 = 0;
        *((_BYTE *)v117 + v56) = 125;
        *(_QWORD *)&v118 = v118 + 1;
        v58 = *(_QWORD *)(v44 + 40);
        if ((v58 & 7) == 0)
        {
          v59 = v58 & 0xFFFFFFFFFFFFFFF8;
          if (v59)
            v57 = **(unsigned int **)(v59 + 16);
        }
        v60 = v113;
        sub_22E6C0A70((uint64_t)v113, v57 != 0, (uint64_t)&v117);
        v61 = v121;
        v62 = v120;
        if (v121 >= HIDWORD(v121))
        {
          v67 = v120 <= v113 && &v120[32 * v121] > v113;
          v107 = v67;
          if (v67)
            v68 = (v113 - v120) >> 5;
          else
            v68 = -1;
          v108 = v68;
          v116 = 0;
          v109 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          v111 = v120;
          if ((_DWORD)v121)
          {
            v69 = 0;
            v70 = &v120[32 * v121];
            do
            {
              v71 = &v109[v69];
              v72 = &v111[v69];
              *v71 = v111[v69];
              v73 = *(_OWORD *)&v111[v69 + 8];
              *((_QWORD *)v71 + 3) = *(_QWORD *)&v111[v69 + 24];
              *(_OWORD *)(v71 + 8) = v73;
              *((_QWORD *)v72 + 2) = 0;
              *((_QWORD *)v72 + 3) = 0;
              *((_QWORD *)v72 + 1) = 0;
              v69 += 32;
            }
            while (v72 + 32 != v70);
            if ((_DWORD)v121)
            {
              v74 = 32 * v121;
              v75 = v111;
              do
              {
                if (v75[v74 - 1] < 0)
                {
                  operator delete(*(void **)&v75[v74 - 24]);
                  v75 = v111;
                }
                v74 -= 32;
              }
              while (v74);
              v111 = v120;
            }
          }
          v76 = v116;
          if (v111 != (char *)v122)
            free(v111);
          v62 = v109;
          v120 = v109;
          HIDWORD(v121) = v76;
          if (v107)
            v60 = &v109[32 * v108];
          else
            v60 = v113;
          if (v107)
            v63 = (void **)&v109[32 * v108 + 8];
          else
            v63 = __p;
          v61 = v121;
        }
        else
        {
          v63 = __p;
        }
        v64 = &v62[32 * v61];
        *v64 = *v60;
        v65 = *(_OWORD *)v63;
        *((_QWORD *)v64 + 3) = v63[2];
        *(_OWORD *)(v64 + 8) = v65;
        v63[1] = 0;
        v63[2] = 0;
        *v63 = 0;
        LODWORD(v121) = v121 + 1;
        if (v115 < 0)
          operator delete(__p[0]);
        if (v117 != v119)
          free(v117);
        while (1)
        {
          v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v44)
            goto LABEL_120;
          if ((*(_DWORD *)(v44 + 28) & 0x7F) == 0x43)
            goto LABEL_47;
        }
      }
      v37 = *(unsigned int **)(v24 + 16);
      v40 = *v37;
      v39 = v37 + 4;
      v38 = v40;
      if (v35 < (unint64_t)v40 + v36)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v36 = a1[1];
        if (!v38)
          goto LABEL_42;
      }
      else if (!v38)
      {
LABEL_42:
        v36 += v38;
        a1[1] = v36;
        v35 = a1[2];
        goto LABEL_43;
      }
      memcpy((void *)(*a1 + v36), v39, v38);
      v36 = a1[1];
      goto LABEL_42;
    }
    v30 = sub_22F10E26C(v12);
    if (v30 || (v30 = sub_22F10E2FC(*v9)) != 0)
    {
      v31 = v30;
      v32 = sub_22F10AC24(&v112);
      return sub_22E6C0078(a1, v31, a3, a4, v32);
    }
    v94 = *v9;
    if (!*v9 || *(unsigned __int8 *)(v94 + 16) - 27 <= 0xFFFFFFFD)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
        return 0;
      result = sub_22F10CF48(*v9);
      v94 = result;
      if (!result)
        return result;
    }
    v95 = a1[1];
    if (a1[2] < (unint64_t)(v95 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v95 = a1[1];
    }
    *(_WORD *)(*a1 + v95) = 31590;
    a1[1] += 2;
    result = sub_22E6BF12C(a1, *(_QWORD *)(v94 + 24), a3, a4);
    if (!(_DWORD)result)
      return result;
    v96 = a1[1];
    if (a1[2] < (unint64_t)(v96 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v96 = a1[1];
    }
    *(_WORD *)(*a1 + v96) = 10365;
    v18 = a1[1] + 2;
    a1[1] = v18;
    if (*(_BYTE *)(v94 + 16) != 26)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        goto LABEL_182;
      v94 = sub_22F10CF48(v94);
      if (!v94)
      {
        v18 = a1[1];
        goto LABEL_182;
      }
    }
    v97 = *(_QWORD *)(v94 + 16);
    v98 = (unsigned __int16)(v97 >> 38);
    if (!(unsigned __int16)(v97 >> 38))
    {
      v104 = a1[1];
      v105 = a1[2];
      if ((v97 & 0x800000000000000) != 0)
      {
        if (v105 < v104 + 2)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v104 = a1[1];
        }
        *(_WORD *)(*a1 + v104) = 24950;
        v18 = a1[1] + 2;
      }
      else
      {
        if (v104 + 1 > v105)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v104 = a1[1];
        }
        *(_BYTE *)(*a1 + v104) = 48;
        v18 = a1[1] + 1;
      }
      goto LABEL_180;
    }
    result = sub_22E6BF12C(a1, *(_QWORD *)(v94 + 40), a3, a4);
    if (!(_DWORD)result)
      return result;
    v99 = (uint64_t *)(v94 + 48);
    for (i = 8 * v98 - 8; i; i -= 8)
    {
      v101 = a1[1];
      if (v101 + 1 > (unint64_t)a1[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v101 = a1[1];
      }
      *(_BYTE *)(*a1 + v101) = 44;
      ++a1[1];
      v102 = *v99++;
      v103 = sub_22E6BF12C(a1, v102, a3, a4);
      result = 0;
      if ((v103 & 1) == 0)
        return result;
    }
    v18 = a1[1];
    if ((*(_BYTE *)(v94 + 23) & 8) != 0)
    {
      if (a1[2] < (unint64_t)(v18 + 3))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v18 = a1[1];
      }
      v106 = *a1 + v18;
      *(_BYTE *)(v106 + 2) = 97;
      *(_WORD *)v106 = 30252;
      v18 = a1[1] + 3;
LABEL_180:
      a1[1] = v18;
    }
LABEL_182:
    v20 = v18 + 1;
    v19 = a1[2];
    goto LABEL_17;
  }
  v12 = sub_22F10CF48(*v9);
  if (!v12)
  {
    v12 = *v9;
    v13 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v14) = *(_BYTE *)(v13 + 16);
    goto LABEL_28;
  }
LABEL_13:
  v16 = a1[1];
  if (a1[2] < (unint64_t)(v16 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v16 = a1[1];
  }
  *(_WORD *)(*a1 + v16) = 10352;
  a1[1] += 2;
  result = sub_22E6BF12C(a1, *(_QWORD *)(v12 + 32), a3, a4);
  if ((_DWORD)result)
  {
    v18 = a1[1];
    v19 = a1[2];
    v20 = v18 + 1;
LABEL_17:
    if (v20 > v19)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v18 = a1[1];
    }
    *(_BYTE *)(*a1 + v18) = 41;
    v21 = a1[1] + 1;
    goto LABEL_117;
  }
  return result;
}

uint64_t sub_22E6BFDE8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__src, size_t __n)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;

  if ((*(_WORD *)(a3 + 18) & 0x1C0) != 0)
    return 0;
  v15 = a1[1];
  if (a1[2] < (unint64_t)(v15 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v15 = a1[1];
  }
  *(_WORD *)(*a1 + v15) = 10337;
  v16 = a1[1] + 2;
  a1[1] = v16;
  if (*(_BYTE *)(a3 + 16) != 2)
  {
    if (a1[2] < v16 + __n)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = a1[1];
      if (!__n)
        goto LABEL_10;
    }
    else if (!__n)
    {
LABEL_10:
      v17 = v16 + __n;
      a1[1] = v17;
      goto LABEL_11;
    }
    memcpy((void *)(*a1 + v16), __src, __n);
    v16 = a1[1];
    goto LABEL_10;
  }
  llvm::APInt::toString();
  v17 = a1[1];
LABEL_11:
  if (v17 + 1 > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v17 = a1[1];
  }
  *(_BYTE *)(*a1 + v17) = 58;
  ++a1[1];
  sub_22E6BFFA8(a1, a2);
  result = sub_22E6BF12C(a1, *(_QWORD *)(a3 + 32), a4, a5);
  if ((_DWORD)result)
  {
    v18 = a1[1];
    if ((unint64_t)(v18 + 1) > a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v18 = a1[1];
    }
    *(_BYTE *)(*a1 + v18) = 41;
    ++a1[1];
    return 1;
  }
  return result;
}

size_t sub_22E6BFFA8(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;

  if ((a2 & 1) != 0)
  {
    v3 = 1;
    if ((a2 & 2) != 0)
    {
LABEL_6:
      v3 |= 2u;
      goto LABEL_7;
    }
  }
  else
  {
    v3 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
    if ((a2 & 2) != 0)
      goto LABEL_6;
  }
  if ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 2) != 0)
    goto LABEL_6;
LABEL_7:
  if ((a2 & 4) != 0 || (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
    v3 |= 4u;
  v4 = (const char *)*((_QWORD *)&off_24FA6C860 + v3);
  result = strlen(v4);
  v6 = result;
  v7 = a1[1];
  if (a1[2] < v7 + result)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = a1[1];
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (result)
  {
LABEL_12:
    result = (size_t)memcpy((void *)(*a1 + v7), v4, v6);
    v7 = a1[1];
  }
LABEL_13:
  a1[1] = v7 + v6;
  return result;
}

uint64_t sub_22E6C0078(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  size_t v24;
  const void *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  std::string *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v50;
  size_t v51;
  const void *v52;
  unsigned int v53;
  _WORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  _BYTE *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char *v83;
  size_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v92;
  unint64_t v93;
  std::string __dst[2];
  _QWORD v95[9];
  _QWORD v96[2];
  void *v97;
  uint64_t v98;
  _BYTE v99[512];
  _BYTE v100[24];
  _WORD v101[64];
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22E6C09C8(a4, a5);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v14 = a1[1];
    if (a1[2] < v14 + v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v14 = a1[1];
    }
    memcpy((void *)(*a1 + v14), v12, v13);
    a1[1] += v13;
    return 1;
  }
  v15 = a1[1];
  if (sub_22F10E06C(a2))
    v16 = 117;
  else
    v16 = 115;
  v17 = a1[1];
  if (v17 + 1 > (unint64_t)a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v17 = a1[1];
  }
  *(_BYTE *)(*a1 + v17) = v16;
  v18 = a1[1];
  v19 = a1[2];
  v20 = v18 + 1;
  a1[1] = v18 + 1;
  if (v18 + 2 > v19)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v20 = a1[1];
  }
  *(_BYTE *)(*a1 + v20) = 40;
  v21 = a1[2];
  v22 = a1[1] + 1;
  a1[1] = v22;
  if (a5)
  {
    v23 = *(unsigned int **)(a5 + 16);
    v26 = *v23;
    v25 = v23 + 4;
    v24 = v26;
    if (v21 < (unint64_t)v26 + v22)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v22 = a1[1];
      if (!v24)
        goto LABEL_16;
    }
    else if (!v24)
    {
LABEL_16:
      v22 += v24;
      a1[1] = v22;
      v21 = a1[2];
      goto LABEL_17;
    }
    memcpy((void *)(*a1 + v22), v25, v24);
    v22 = a1[1];
    goto LABEL_16;
  }
LABEL_17:
  if (v21 < v22 + 2)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v22 = a1[1];
  }
  *(_WORD *)(*a1 + v22) = 31529;
  a1[1] += 2;
  v27 = sub_22F114198(*(_QWORD *)(a2 + 24));
  v28 = sub_22EFC3500(v27);
  if (!v28 || (v29 = v28, !sub_22EFC3B90(v28)))
  {
    v35 = 0;
LABEL_118:
    v86 = a1[1];
    if (v86 + 1 > (unint64_t)a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v86 = a1[1];
    }
    *(_BYTE *)(*a1 + v86) = 125;
    v88 = *a1;
    v87 = a1[1];
    v89 = v87 + 1;
    a1[1] = v87 + 1;
    if (v87 + 1 < v15)
      v90 = v87 + 1;
    else
      v90 = v15;
    sub_22E6C0BC0(a4, a5, (const void *)(v88 + v90), v89 - v90, v35);
    return 1;
  }
  v93 = v15;
  v97 = v99;
  v98 = 0x1000000000;
  v30 = *a1;
  v92 = a3;
  if (!*a1)
  {
    memset(__dst, 0, 24);
    goto LABEL_36;
  }
  v31 = a1[1];
  if (v31 >= v93)
    v32 = v93;
  else
    v32 = a1[1];
  v33 = v31 - v32;
  if (v31 - v32 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v34 = (std::string *)operator new(v36 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v33;
    __dst[0].__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  }
  else
  {
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v31 - v32;
    v34 = __dst;
    if (v31 <= v93)
      goto LABEL_35;
  }
  memmove(v34, (const void *)(v30 + v32), v33);
LABEL_35:
  v34->__r_.__value_.__s.__data_[v33] = 0;
LABEL_36:
  std::string::push_back(__dst, 125);
  v96[0] = __dst[0].__r_.__value_.__l.__size_;
  v38 = (void *)__dst[0].__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v96 + 7) = *(std::string::size_type *)((char *)&__dst[0].__r_.__value_.__r.__words[1] + 7);
  v39 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  memset(__dst, 0, 24);
  v15 = v93;
  if (a5)
  {
    v40 = sub_22E6C21AC((uint64_t **)a4, a5);
    v41 = *((_QWORD *)v40 + 6);
    v42 = *((_OWORD *)v40 + 2);
    *((_OWORD *)v40 + 2) = *(_OWORD *)v40;
    *((_QWORD *)v40 + 6) = *((_QWORD *)v40 + 2);
    *(_OWORD *)v40 = v42;
    *((_QWORD *)v40 + 2) = v41;
    v43 = *(void **)v40;
    *(_QWORD *)&v100[7] = *(_QWORD *)(v40 + 15);
    *(_QWORD *)v100 = *((_QWORD *)v40 + 1);
    v44 = v40[23];
    v45 = v96[0];
    *(_QWORD *)v40 = v38;
    *((_QWORD *)v40 + 1) = v45;
    *(_QWORD *)(v40 + 15) = *(_QWORD *)((char *)v96 + 7);
    v40[23] = v39;
    v96[0] = *(_QWORD *)v100;
    *(_QWORD *)((char *)v96 + 7) = *(_QWORD *)&v100[7];
    *((_DWORD *)v40 + 6) = 2;
    ++*(_DWORD *)(a4 + 24);
    v39 = v44;
    v38 = v43;
  }
  if (v39 < 0)
    operator delete(v38);
  v46 = sub_22EFC3B90(v29);
  if (!v46)
    goto LABEL_90;
  v47 = v46;
LABEL_42:
  *(_QWORD *)v100 = v101;
  v101[0] = 10349;
  *(_OWORD *)&v100[8] = xmmword_22F45D830;
  v48 = *(_QWORD *)(v47 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v47 + 40) & 7) != 0 || v48 == 0)
  {
    v51 = 0;
    goto LABEL_89;
  }
  v50 = *(unsigned int **)(v48 + 16);
  v53 = *v50;
  v52 = v50 + 4;
  v51 = v53;
  if (v53 >= 0x7FuLL)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v54 = *(_WORD **)v100;
    v55 = *(_QWORD *)&v100[8];
    goto LABEL_49;
  }
  if (!v51)
  {
LABEL_89:
    v56 = 128;
    v57 = 2;
    goto LABEL_50;
  }
  v54 = v101;
  v55 = 2;
LABEL_49:
  memcpy((char *)v54 + v55, v52, v51);
  v57 = *(_QWORD *)&v100[8];
  v56 = *(_QWORD *)&v100[16];
LABEL_50:
  v58 = v57 + v51;
  *(_QWORD *)&v100[8] = v58;
  if (v56 < v58 + 2)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v58 = *(_QWORD *)&v100[8];
  }
  *(_WORD *)(*(_QWORD *)v100 + v58) = 31529;
  v59 = *(_QWORD *)&v100[8];
  v60 = *(_QWORD *)&v100[8] + 2;
  *(_QWORD *)&v100[8] += 2;
  if ((*(_BYTE *)(v47 + 68) & 1) != 0)
  {
    if (*(_QWORD *)&v100[16] < (unint64_t)(v59 + 4))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v60 = *(_QWORD *)&v100[8];
    }
    *(_WORD *)(*(_QWORD *)v100 + v60) = 10338;
    *(_QWORD *)&v100[8] += 2;
    sub_22F242C48((uint64_t)v95, (uint64_t)v100);
    sub_22EFC2EF4(v47, *(_QWORD *)(v92 + 144));
    llvm::raw_ostream::operator<<();
    v65 = *(_QWORD *)&v100[8];
    if ((unint64_t)(*(_QWORD *)&v100[8] + 1) > *(_QWORD *)&v100[16])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v65 = *(_QWORD *)&v100[8];
    }
    *(_BYTE *)(*(_QWORD *)v100 + v65) = 58;
    ++*(_QWORD *)&v100[8];
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v95);
  }
  if (!sub_22E6BF12C(v100, *(_QWORD *)(v47 + 48), v92, a4))
  {
    if (*(_WORD **)v100 != v101)
      free(*(void **)v100);
    sub_22E6C2284(a4, a5);
    v85 = 0;
    v35 = 0;
    goto LABEL_115;
  }
  v61 = *(_QWORD *)&v100[8];
  if ((*(_BYTE *)(v47 + 68) & 1) != 0)
  {
    if ((unint64_t)(*(_QWORD *)&v100[8] + 1) > *(_QWORD *)&v100[16])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v61 = *(_QWORD *)&v100[8];
    }
    *(_BYTE *)(*(_QWORD *)v100 + v61) = 41;
    v61 = ++*(_QWORD *)&v100[8];
  }
  if ((unint64_t)(v61 + 1) > *(_QWORD *)&v100[16])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v61 = *(_QWORD *)&v100[8];
  }
  v62 = 0;
  *(_BYTE *)(*(_QWORD *)v100 + v61) = 125;
  ++*(_QWORD *)&v100[8];
  v63 = *(_QWORD *)(v47 + 40);
  if ((v63 & 7) == 0)
  {
    v64 = v63 & 0xFFFFFFFFFFFFFFF8;
    if (v64)
      v62 = **(unsigned int **)(v64 + 16);
  }
  if (v98 >= HIDWORD(v98))
  {
    v66 = v62 != 0;
    v95[0] = 0;
    v67 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    sub_22E6C0A70((uint64_t)&v67[32 * v98], v66, (uint64_t)v100);
    v68 = v97;
    if ((_DWORD)v98)
    {
      v69 = 0;
      v70 = (char *)v97 + 32 * v98;
      do
      {
        v71 = &v67[v69];
        v72 = &v68[v69];
        *v71 = v68[v69];
        v73 = *(_OWORD *)&v68[v69 + 8];
        *((_QWORD *)v71 + 3) = *(_QWORD *)&v68[v69 + 24];
        *(_OWORD *)(v71 + 8) = v73;
        v72[2] = 0;
        v72[3] = 0;
        v72[1] = 0;
        v69 += 32;
      }
      while (v72 + 4 != (_QWORD *)v70);
      if ((_DWORD)v98)
      {
        v74 = 32 * v98;
        do
        {
          if ((char)v68[v74 - 1] < 0)
            operator delete(*(void **)&v68[v74 - 24]);
          v74 -= 32;
        }
        while (v74);
        v68 = v97;
      }
    }
    v75 = v95[0];
    if (v68 != v99)
      free(v68);
    v97 = v67;
    LODWORD(v98) = v98 + 1;
    HIDWORD(v98) = v75;
    v15 = v93;
  }
  else
  {
    sub_22E6C0A70((uint64_t)v97 + 32 * v98, v62 != 0, (uint64_t)v100);
    LODWORD(v98) = v98 + 1;
  }
  if (*(_WORD **)v100 != v101)
    free(*(void **)v100);
  while (1)
  {
    v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v47)
      break;
    if ((*(_DWORD *)(v47 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_42;
  }
LABEL_90:
  v35 = sub_22E6C2284(a4, a5);
  if (sub_22F10E06C(a2))
  {
    v76 = 126 - 2 * __clz(v98);
    if ((_DWORD)v98)
      v77 = v76;
    else
      v77 = 0;
    sub_22E6C0CD0((uint64_t)v97, (unint64_t)v97 + 32 * v98, v77, 1);
  }
  if ((_DWORD)v98)
  {
    v78 = 0;
    v79 = a1[1];
    v80 = 32 * v98;
    while (1)
    {
      v81 = a1[2];
      if (v78)
      {
        if (v79 + 1 > v81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v79 = a1[1];
        }
        *(_BYTE *)(*a1 + v79) = 44;
        v81 = a1[2];
        v79 = a1[1] + 1;
        a1[1] = v79;
      }
      v82 = *((_BYTE *)v97 + v78 + 31);
      v83 = v82 >= 0 ? (char *)v97 + v78 + 8 : *(char **)((char *)v97 + v78 + 8);
      v84 = v82 >= 0 ? v82 & 0x7F : *(_QWORD *)((char *)v97 + v78 + 16);
      if (v81 < v84 + v79)
        break;
      if (v84)
        goto LABEL_109;
LABEL_110:
      v79 += v84;
      a1[1] = v79;
      v78 += 32;
      if (v80 == v78)
        goto LABEL_114;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v79 = a1[1];
    if (!v84)
      goto LABEL_110;
LABEL_109:
    memcpy((void *)(*a1 + v79), v83, v84);
    v79 = a1[1];
    goto LABEL_110;
  }
LABEL_114:
  v85 = 1;
LABEL_115:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  sub_22E6C0B54((char **)&v97);
  if (v85)
    goto LABEL_118;
  return 0;
}

_QWORD *sub_22E6C09C8(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  int v8;

  if (!a2)
    return 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = (_QWORD *)(a1 + 8);
  do
  {
    v4 = v2[4];
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 == (_QWORD *)(a1 + 8) || v3[4] > a2)
    return 0;
  v8 = *((_DWORD *)v3 + 16);
  if (v8 == 2)
  {
    *((_DWORD *)v3 + 16) = 3;
    ++*(_DWORD *)(a1 + 28);
  }
  else if (v8 == 1 && *(_DWORD *)(a1 + 24))
  {
    return 0;
  }
  if (*((char *)v3 + 63) >= 0)
    return v3 + 5;
  else
    return (_QWORD *)v3[5];
}

uint64_t sub_22E6C0A70(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = a2;
  v5 = *(_QWORD *)(a3 + 8);
  if ((unint64_t)(v5 + 1) > *(_QWORD *)(a3 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = *(_QWORD *)(a3 + 8);
  }
  *(_BYTE *)(*(_QWORD *)a3 + v5) = 0;
  v6 = *(const void **)a3;
  v7 = strlen(*(const char **)a3);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v9;
  }
  else
  {
    v9 = (void *)(a1 + 8);
    *(_BYTE *)(a1 + 31) = v7;
    if (!v7)
      goto LABEL_11;
  }
  memmove(v9, v6, v8);
LABEL_11:
  *((_BYTE *)v9 + v8) = 0;
  return a1;
}

char **sub_22E6C0B54(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

double sub_22E6C0BC0(uint64_t a1, unint64_t a2, const void *a3, size_t a4, int a5)
{
  char *v8;
  double result;
  char *v10;
  char v11;
  int v12;
  uint64_t v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  __int128 __dst;
  unint64_t v18;

  if (a2 && !*(_DWORD *)(a1 + 28))
  {
    v8 = sub_22E6C21AC((uint64_t **)a1, a2);
    v10 = v8;
    if (!a5)
      goto LABEL_7;
    v11 = v8[23];
    v12 = v11;
    v13 = v11 & 0x7F;
    if (v12 < 0)
      v13 = *((_QWORD *)v8 + 1);
    if (!v13)
    {
LABEL_7:
      if (!a3)
      {
        __dst = 0uLL;
        v18 = 0;
LABEL_18:
        if (v10[23] < 0)
          operator delete(*(void **)v10);
        result = *(double *)&__dst;
        *(_OWORD *)v10 = __dst;
        *((_QWORD *)v10 + 2) = v18;
        *((_DWORD *)v10 + 6) = a5;
        return result;
      }
      if (a4 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (a4 >= 0x17)
      {
        v15 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a4 | 7) != 0x17)
          v15 = a4 | 7;
        v16 = v15 + 1;
        p_dst = (__int128 *)operator new(v15 + 1);
        *((_QWORD *)&__dst + 1) = a4;
        v18 = v16 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v18) = a4;
        p_dst = &__dst;
        if (!a4)
          goto LABEL_17;
      }
      memmove(p_dst, a3, a4);
LABEL_17:
      *((_BYTE *)p_dst + a4) = 0;
      goto LABEL_18;
    }
  }
  return result;
}

void sub_22E6C0CD0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  int v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  void **v42;
  unint64_t v43;
  __int128 v44;
  int v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  BOOL v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 v101;
  uint64_t v102;
  void **v103;
  BOOL v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[15];
  _QWORD v115[3];
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v107 = a2 - 64;
  v108 = (unsigned __int8 *)(a2 - 32);
  v106 = a2 - 96;
  v8 = a1;
  v110 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_22E6C1864(v108, (unsigned __int8 *)a1))
        {
          v47 = *(_BYTE *)a1;
          v48 = *(_QWORD *)(a1 + 8);
          v49 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)((char *)v115 + 7) = *(_QWORD *)(a1 + 23);
          v115[0] = v49;
          v50 = *(_BYTE *)(a1 + 31);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_BYTE *)a1 = *(_BYTE *)(a2 - 32);
          v51 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 8) = v51;
          *(_BYTE *)(a2 - 32) = v47;
          *(_QWORD *)(a2 - 24) = v48;
          v52 = v115[0];
          *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v115 + 7);
          *(_QWORD *)(a2 - 16) = v52;
          *(_BYTE *)(a2 - 1) = v50;
        }
        return;
      case 3:
        sub_22E6C1B30(a1, a1 + 32, (uint64_t)v108);
        return;
      case 4:
        sub_22E6C1FEC(a1, a1 + 32, a1 + 64, (uint64_t)v108);
        return;
      case 5:
        sub_22E6C18F8(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v108);
        return;
      default:
        if (v9 <= 767)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v53 = (unsigned __int8 *)(a1 + 32);
              if (a1 + 32 != a2)
              {
                v54 = 0;
                v55 = (_BYTE *)a1;
                do
                {
                  v56 = v53;
                  if (sub_22E6C1864(v53, v55))
                  {
                    LOBYTE(v115[0]) = *v56;
                    v116 = *((_QWORD *)v55 + 7);
                    *(_OWORD *)&v115[1] = *(_OWORD *)(v55 + 40);
                    *((_QWORD *)v55 + 6) = 0;
                    *((_QWORD *)v55 + 7) = 0;
                    *((_QWORD *)v55 + 5) = 0;
                    v57 = v56[31];
                    v58 = v54;
                    while (1)
                    {
                      v59 = v58;
                      v60 = a1 + v58;
                      *(_BYTE *)(v60 + 32) = *(_BYTE *)v60;
                      v61 = (void **)(v60 + 40);
                      if ((v57 & 0x80) != 0)
                        operator delete(*v61);
                      *(_OWORD *)v61 = *(_OWORD *)(v60 + 8);
                      *(_QWORD *)(v60 + 56) = *(_QWORD *)(v60 + 24);
                      *(_BYTE *)(v60 + 31) = 0;
                      *(_BYTE *)(v60 + 8) = 0;
                      if (!v59)
                        break;
                      v58 = v59 - 32;
                      v62 = sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)(v59 - 32 + a1));
                      v57 = 0;
                      if (!v62)
                      {
                        v63 = (_BYTE *)(a1 + v59);
                        goto LABEL_77;
                      }
                    }
                    v63 = (_BYTE *)a1;
LABEL_77:
                    *v63 = v115[0];
                    v64 = a1 + v59;
                    v65 = *(_OWORD *)&v115[1];
                    *(_QWORD *)(v64 + 24) = v116;
                    *(_OWORD *)(v64 + 8) = v65;
                  }
                  v53 = v56 + 32;
                  v54 += 32;
                  v55 = v56;
                }
                while (v56 + 32 != (unsigned __int8 *)v110);
              }
            }
          }
          else if (a1 != a2)
          {
            v98 = (unsigned __int8 *)(a1 + 32);
            if (a1 + 32 != a2)
            {
              v99 = a1 - 32;
              do
              {
                v100 = v98;
                if (sub_22E6C1864(v98, (unsigned __int8 *)a1))
                {
                  LOBYTE(v115[0]) = *v100;
                  v116 = *(_QWORD *)(a1 + 56);
                  *(_OWORD *)&v115[1] = *(_OWORD *)(a1 + 40);
                  *(_QWORD *)(a1 + 48) = 0;
                  *(_QWORD *)(a1 + 56) = 0;
                  *(_QWORD *)(a1 + 40) = 0;
                  v101 = v100[31];
                  v102 = v99;
                  do
                  {
                    *(_BYTE *)(v102 + 64) = *(_BYTE *)(v102 + 32);
                    v103 = (void **)(v102 + 72);
                    if ((v101 & 0x80) != 0)
                      operator delete(*v103);
                    *(_OWORD *)v103 = *(_OWORD *)(v102 + 40);
                    *(_QWORD *)(v102 + 88) = *(_QWORD *)(v102 + 56);
                    *(_BYTE *)(v102 + 63) = 0;
                    *(_BYTE *)(v102 + 40) = 0;
                    v104 = sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)v102);
                    v101 = 0;
                    v102 -= 32;
                  }
                  while (v104);
                  *(_BYTE *)(v102 + 64) = v115[0];
                  v105 = *(_OWORD *)&v115[1];
                  *(_QWORD *)(v102 + 88) = v116;
                  *(_OWORD *)(v102 + 72) = v105;
                }
                v98 = v100 + 32;
                v99 += 32;
                a1 = (uint64_t)v100;
              }
              while (v100 + 32 != (unsigned __int8 *)v110);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = a1 + 32 * v69;
                if (2 * v67 + 2 < v10
                  && sub_22E6C1864((unsigned __int8 *)(a1 + 32 * v69), (unsigned __int8 *)(v70 + 32)))
                {
                  v70 += 32;
                  v69 = 2 * v68 + 2;
                }
                v71 = a1 + 32 * v68;
                if (!sub_22E6C1864((unsigned __int8 *)v70, (unsigned __int8 *)v71))
                {
                  LOBYTE(v115[0]) = *(_BYTE *)v71;
                  v72 = a1 + 32 * v68;
                  v73 = *(_OWORD *)(v72 + 8);
                  v116 = *(_QWORD *)(v72 + 24);
                  *(_OWORD *)&v115[1] = v73;
                  *(_QWORD *)(v72 + 16) = 0;
                  *(_QWORD *)(v72 + 24) = 0;
                  *(_QWORD *)(v72 + 8) = 0;
                  do
                  {
                    v74 = v70;
                    *(_BYTE *)v71 = *(_BYTE *)v70;
                    v75 = *(_OWORD *)(v70 + 8);
                    *(_QWORD *)(v71 + 24) = *(_QWORD *)(v70 + 24);
                    *(_OWORD *)(v71 + 8) = v75;
                    *(_BYTE *)(v70 + 31) = 0;
                    *(_BYTE *)(v70 + 8) = 0;
                    if (v66 < v69)
                      break;
                    v76 = (2 * v69) | 1;
                    v70 = a1 + 32 * v76;
                    v77 = 2 * v69 + 2;
                    if (v77 < v10 && sub_22E6C1864((unsigned __int8 *)(a1 + 32 * v76), (unsigned __int8 *)(v70 + 32)))
                    {
                      v70 += 32;
                      v76 = v77;
                    }
                    v71 = v74;
                    v69 = v76;
                  }
                  while (!sub_22E6C1864((unsigned __int8 *)v70, (unsigned __int8 *)v115));
                  *(_BYTE *)v74 = v115[0];
                  v78 = *(_OWORD *)&v115[1];
                  *(_QWORD *)(v74 + 24) = v116;
                  *(_OWORD *)(v74 + 8) = v78;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v79 = v110;
            do
            {
              v80 = 0;
              v81 = *(_BYTE *)a1;
              v109 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v114[7] = *(_QWORD *)(a1 + 23);
              *(_QWORD *)v114 = *(_QWORD *)(a1 + 16);
              v111 = *(_BYTE *)(a1 + 31);
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v82 = a1;
              do
              {
                v83 = v82 + 32 * v80 + 32;
                v84 = (2 * v80) | 1;
                v85 = 2 * v80 + 2;
                if (v85 < v10
                  && sub_22E6C1864((unsigned __int8 *)(v82 + 32 * v80 + 32), (unsigned __int8 *)(v82 + 32 * v80 + 64)))
                {
                  v83 += 32;
                  v84 = v85;
                }
                *(_BYTE *)v82 = *(_BYTE *)v83;
                v86 = *(_OWORD *)(v83 + 8);
                *(_QWORD *)(v82 + 24) = *(_QWORD *)(v83 + 24);
                *(_OWORD *)(v82 + 8) = v86;
                *(_BYTE *)(v83 + 31) = 0;
                *(_BYTE *)(v83 + 8) = 0;
                v82 = v83;
                v80 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              v87 = v79 - 32;
              if (v83 == v79 - 32)
              {
                *(_BYTE *)v83 = v81;
                *(_QWORD *)(v83 + 8) = v109;
                *(_QWORD *)(v83 + 16) = *(_QWORD *)v114;
                *(_QWORD *)(v83 + 23) = *(_QWORD *)&v114[7];
                *(_BYTE *)(v83 + 31) = v111;
              }
              else
              {
                v88 = (_OWORD *)(v83 + 8);
                *(_BYTE *)v83 = *(_BYTE *)(v79 - 32);
                v89 = *(_OWORD *)(v79 - 24);
                *(_QWORD *)(v83 + 24) = *(_QWORD *)(v79 - 8);
                *(_OWORD *)(v83 + 8) = v89;
                *(_BYTE *)(v79 - 1) = 0;
                *(_BYTE *)(v79 - 32) = v81;
                *(_QWORD *)(v79 - 24) = v109;
                *(_QWORD *)(v79 - 9) = *(_QWORD *)&v114[7];
                *(_QWORD *)(v79 - 16) = *(_QWORD *)v114;
                *(_BYTE *)(v79 - 1) = v111;
                v90 = v83 - a1 + 32;
                if (v90 >= 33)
                {
                  v91 = (((unint64_t)v90 >> 5) - 2) >> 1;
                  v92 = a1 + 32 * v91;
                  if (sub_22E6C1864((unsigned __int8 *)v92, (unsigned __int8 *)v83))
                  {
                    LOBYTE(v115[0]) = *(_BYTE *)v83;
                    v93 = *(_QWORD *)(v83 + 24);
                    *(_OWORD *)&v115[1] = *v88;
                    v116 = v93;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)(v83 + 24) = 0;
                    *(_QWORD *)v88 = 0;
                    do
                    {
                      v94 = v92;
                      *(_BYTE *)v83 = *(_BYTE *)v92;
                      v95 = *(_OWORD *)(v92 + 8);
                      *(_QWORD *)(v83 + 24) = *(_QWORD *)(v92 + 24);
                      *(_OWORD *)(v83 + 8) = v95;
                      *(_BYTE *)(v92 + 31) = 0;
                      *(_BYTE *)(v92 + 8) = 0;
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = a1 + 32 * v91;
                      v83 = v94;
                    }
                    while (sub_22E6C1864((unsigned __int8 *)v92, (unsigned __int8 *)v115));
                    *(_BYTE *)v94 = v115[0];
                    v96 = *(_OWORD *)&v115[1];
                    *(_QWORD *)(v94 + 24) = v116;
                    *(_OWORD *)(v94 + 8) = v96;
                  }
                }
              }
              v79 = v87;
            }
            while (v10-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_22E6C1B30(v12, a1, (uint64_t)v108);
        }
        else
        {
          sub_22E6C1B30(a1, v12, (uint64_t)v108);
          sub_22E6C1B30(a1 + 32, v12 - 32, v107);
          sub_22E6C1B30(a1 + 64, a1 + 32 + 32 * v11, v106);
          sub_22E6C1B30(v12 - 32, v12, a1 + 32 + 32 * v11);
          v13 = *(_BYTE *)a1;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)((char *)v115 + 7) = *(_QWORD *)(a1 + 23);
          v115[0] = v15;
          v16 = *(_BYTE *)(a1 + 31);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_BYTE *)a1 = *(_BYTE *)v12;
          v17 = *(_QWORD *)(v12 + 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v12 + 8);
          *(_QWORD *)(a1 + 24) = v17;
          *(_BYTE *)v12 = v13;
          *(_QWORD *)(v12 + 8) = v14;
          v18 = v115[0];
          *(_QWORD *)(v12 + 23) = *(_QWORD *)((char *)v115 + 7);
          *(_QWORD *)(v12 + 16) = v18;
          *(_BYTE *)(v12 + 31) = v16;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_22E6C1864((unsigned __int8 *)(a1 - 32), (unsigned __int8 *)a1))
        {
          LOBYTE(v115[0]) = *(_BYTE *)a1;
          v34 = *(_QWORD *)(a1 + 24);
          *(_OWORD *)&v115[1] = *(_OWORD *)(a1 + 8);
          v116 = v34;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          if (sub_22E6C1864((unsigned __int8 *)v115, v108))
          {
            v8 = a1;
            do
              v8 += 32;
            while (!sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)v8));
          }
          else
          {
            v35 = (unsigned __int8 *)(a1 + 32);
            do
            {
              v8 = (unint64_t)v35;
              if ((unint64_t)v35 >= a2)
                break;
              v36 = sub_22E6C1864((unsigned __int8 *)v115, v35);
              v35 = (unsigned __int8 *)(v8 + 32);
            }
            while (!v36);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
              v37 -= 32;
            while (sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)v37));
          }
          while (v8 < v37)
          {
            v38 = *(_BYTE *)v8;
            v39 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)((char *)&v113 + 7) = *(_QWORD *)(v8 + 23);
            *(_QWORD *)&v113 = *(_QWORD *)(v8 + 16);
            v40 = *(_BYTE *)(v8 + 31);
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 8) = 0;
            *(_BYTE *)v8 = *(_BYTE *)v37;
            v41 = *(_OWORD *)(v37 + 8);
            *(_QWORD *)(v8 + 24) = *(_QWORD *)(v37 + 24);
            *(_OWORD *)(v8 + 8) = v41;
            *(_BYTE *)v37 = v38;
            *(_QWORD *)(v37 + 8) = v39;
            *(_QWORD *)(v37 + 16) = v113;
            *(_QWORD *)(v37 + 23) = *(_QWORD *)((char *)&v113 + 7);
            *(_BYTE *)(v37 + 31) = v40;
            do
              v8 += 32;
            while (!sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)v8));
            do
              v37 -= 32;
            while (sub_22E6C1864((unsigned __int8 *)v115, (unsigned __int8 *)v37));
          }
          if (v8 - 32 == a1)
          {
            v45 = *(char *)(v8 - 1);
            *(_BYTE *)a1 = v115[0];
            v43 = v8 - 24;
            if (v45 < 0)
              operator delete(*(void **)v43);
          }
          else
          {
            v42 = (void **)(a1 + 8);
            *(_BYTE *)a1 = *(_BYTE *)(v8 - 32);
            if (*(char *)(a1 + 31) < 0)
              operator delete(*v42);
            v43 = v8 - 24;
            v44 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)v42 = v44;
            *(_BYTE *)(v8 - 1) = 0;
            *(_BYTE *)(v8 - 24) = 0;
            *(_BYTE *)(v8 - 32) = v115[0];
            a2 = v110;
          }
          a4 = 0;
          v46 = *(_OWORD *)&v115[1];
          *(_QWORD *)(v43 + 16) = v116;
          *(_OWORD *)v43 = v46;
          continue;
        }
        v19 = 0;
        LOBYTE(v115[0]) = *(_BYTE *)a1;
        v20 = (void **)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 24);
        *(_OWORD *)&v115[1] = *(_OWORD *)(a1 + 8);
        v116 = v21;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        do
          v19 += 32;
        while (sub_22E6C1864((unsigned __int8 *)(v19 + a1), (unsigned __int8 *)v115));
        v22 = a1 + v19;
        v23 = (unsigned __int8 *)v110;
        if (v19 == 32)
        {
          v23 = (unsigned __int8 *)v110;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 -= 32;
          }
          while (!sub_22E6C1864(v23, (unsigned __int8 *)v115));
        }
        else
        {
          do
            v23 -= 32;
          while (!sub_22E6C1864(v23, (unsigned __int8 *)v115));
        }
        v8 = a1 + v19;
        if (v22 < (unint64_t)v23)
        {
          v24 = v23;
          do
          {
            v25 = *(_BYTE *)v8;
            v26 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)((char *)&v112 + 7) = *(_QWORD *)(v8 + 23);
            *(_QWORD *)&v112 = *(_QWORD *)(v8 + 16);
            v27 = *(_BYTE *)(v8 + 31);
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 8) = 0;
            *(_BYTE *)v8 = *v24;
            v28 = *(_OWORD *)(v24 + 8);
            *(_QWORD *)(v8 + 24) = *((_QWORD *)v24 + 3);
            *(_OWORD *)(v8 + 8) = v28;
            *v24 = v25;
            *((_QWORD *)v24 + 1) = v26;
            *((_QWORD *)v24 + 2) = v112;
            *(_QWORD *)(v24 + 23) = *(_QWORD *)((char *)&v112 + 7);
            v24[31] = v27;
            do
              v8 += 32;
            while (sub_22E6C1864((unsigned __int8 *)v8, (unsigned __int8 *)v115));
            do
              v24 -= 32;
            while (!sub_22E6C1864(v24, (unsigned __int8 *)v115));
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 32 == a1)
        {
          v31 = *(char *)(v8 - 1);
          *(_BYTE *)a1 = v115[0];
          v29 = v8 - 24;
          if (v31 < 0)
            operator delete(*(void **)v29);
        }
        else
        {
          *(_BYTE *)a1 = *(_BYTE *)(v8 - 32);
          if (*(char *)(a1 + 31) < 0)
            operator delete(*v20);
          v29 = v8 - 24;
          v30 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)v20 = v30;
          *(_BYTE *)(v8 - 1) = 0;
          *(_BYTE *)(v8 - 24) = 0;
          *(_BYTE *)(v8 - 32) = v115[0];
        }
        a2 = v110;
        v32 = *(_OWORD *)&v115[1];
        *(_QWORD *)(v29 + 16) = v116;
        *(_OWORD *)v29 = v32;
        if (v22 < (unint64_t)v23)
        {
LABEL_34:
          sub_22E6C0CD0(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_22E6C1DA0(a1, v8 - 32);
        if (!sub_22E6C1DA0(v8, v110))
        {
          if (v33)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 32;
        if (!v33)
          goto LABEL_2;
        return;
    }
  }
}

BOOL sub_22E6C1864(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  signed __int8 v6;
  int v7;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  size_t v14;
  size_t v15;
  int v16;

  v2 = *a1;
  if (v2 != *a2)
    return v2 != 0;
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v3 = a2 + 8;
  v4 = v5;
  v6 = v3[23];
  v7 = v6;
  if (v6 >= 0)
    v4 = v3;
  v8 = v6 & 0x7F;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *((_QWORD *)v3 + 1);
  v12 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  v10 = a1 + 8;
  v11 = v12;
  v13 = (char)v10[23];
  if (v13 >= 0)
    v14 = v10[23];
  else
    v14 = *((_QWORD *)v10 + 1);
  if (v13 < 0)
    v10 = v11;
  if (v9 >= v14)
    v15 = v14;
  else
    v15 = v9;
  v16 = memcmp(v10, v4, v15);
  if (v16)
    return v16 < 0;
  else
    return v14 < v9;
}

BOOL sub_22E6C18F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;
  __int128 v22;
  unsigned __int8 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  sub_22E6C1FEC(a1, a2, a3, a4);
  result = sub_22E6C1864((unsigned __int8 *)a5, (unsigned __int8 *)a4);
  if (result)
  {
    v11 = *(_QWORD *)(a4 + 8);
    v12 = *(_BYTE *)a4;
    *(_QWORD *)&v27 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a4 + 23);
    v13 = *(_BYTE *)(a4 + 31);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)a4 = *(_BYTE *)a5;
    v14 = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v14;
    *(_BYTE *)a5 = v12;
    *(_QWORD *)(a5 + 23) = *(_QWORD *)((char *)&v27 + 7);
    *(_QWORD *)(a5 + 8) = v11;
    *(_QWORD *)(a5 + 16) = v27;
    *(_BYTE *)(a5 + 31) = v13;
    result = sub_22E6C1864((unsigned __int8 *)a4, (unsigned __int8 *)a3);
    if (result)
    {
      v15 = *(_QWORD *)(a3 + 8);
      v16 = *(_BYTE *)a3;
      *(_QWORD *)&v28 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a3 + 23);
      v17 = *(_BYTE *)(a3 + 31);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)a3 = *(_BYTE *)a4;
      v18 = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v18;
      *(_BYTE *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v15;
      *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v28 + 7);
      *(_QWORD *)(a4 + 16) = v28;
      *(_BYTE *)(a4 + 31) = v17;
      result = sub_22E6C1864((unsigned __int8 *)a3, (unsigned __int8 *)a2);
      if (result)
      {
        v19 = *(_QWORD *)(a2 + 8);
        v20 = *(_BYTE *)a2;
        *(_QWORD *)&v29 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)(a2 + 23);
        v21 = *(_BYTE *)(a2 + 31);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)a2 = *(_BYTE *)a3;
        v22 = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v22;
        *(_BYTE *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v19;
        *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v29 + 7);
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 31) = v21;
        result = sub_22E6C1864((unsigned __int8 *)a2, (unsigned __int8 *)a1);
        if (result)
        {
          v23 = *(_BYTE *)a1;
          v24 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v30 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a1 + 23);
          v25 = *(_BYTE *)(a1 + 31);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v26 = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v26;
          *(_BYTE *)a2 = v23;
          *(_QWORD *)(a2 + 8) = v24;
          *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v30 + 7);
          *(_QWORD *)(a2 + 16) = v30;
          *(_BYTE *)(a2 + 31) = v25;
        }
      }
    }
  }
  return result;
}

BOOL sub_22E6C1B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  __int128 v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v6 = sub_22E6C1864((unsigned __int8 *)a2, (unsigned __int8 *)a1);
  result = sub_22E6C1864((unsigned __int8 *)a3, (unsigned __int8 *)a2);
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 16);
    if (result)
    {
      v10 = *(_BYTE *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v27 = *v9;
      *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a1 + 23);
      v12 = *(_BYTE *)(a1 + 31);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *v8 = 0;
      *(_BYTE *)a1 = *(_BYTE *)a3;
      v13 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)v8 = v13;
      *(_BYTE *)a3 = v10;
      *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v27 + 7);
      *(_QWORD *)(a3 + 8) = v11;
      *(_QWORD *)(a3 + 16) = v27;
      *(_BYTE *)(a3 + 31) = v12;
    }
    else
    {
      v22 = *(_BYTE *)a1;
      v23 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v30 = *v9;
      *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a1 + 23);
      v24 = *(_BYTE *)(a1 + 31);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *v8 = 0;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v25 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v8 = v25;
      *(_BYTE *)a2 = v22;
      *(_QWORD *)(a2 + 8) = v23;
      *(_QWORD *)(a2 + 16) = v30;
      *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v30 + 7);
      *(_BYTE *)(a2 + 31) = v24;
      result = sub_22E6C1864((unsigned __int8 *)a3, (unsigned __int8 *)a2);
      if (result)
      {
        *(_QWORD *)&v31 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)(a2 + 23);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_BYTE *)a2 = *(_BYTE *)a3;
        v26 = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v26;
        *(_BYTE *)a3 = v22;
        *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v31 + 7);
        *(_QWORD *)(a3 + 8) = v23;
        *(_QWORD *)(a3 + 16) = v31;
        *(_BYTE *)(a3 + 31) = v24;
      }
    }
  }
  else if (result)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_BYTE *)a2;
    *(_QWORD *)&v28 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a2 + 23);
    v16 = *(_BYTE *)(a2 + 31);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)a2 = *(_BYTE *)a3;
    v17 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v17;
    *(_BYTE *)a3 = v15;
    *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v28 + 7);
    *(_QWORD *)(a3 + 8) = v14;
    *(_QWORD *)(a3 + 16) = v28;
    *(_BYTE *)(a3 + 31) = v16;
    result = sub_22E6C1864((unsigned __int8 *)a2, (unsigned __int8 *)a1);
    if (result)
    {
      v18 = *(_BYTE *)a1;
      v19 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v29 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)(a1 + 23);
      v20 = *(_BYTE *)(a1 + 31);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v21 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v21;
      *(_BYTE *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v19;
      *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v29 + 7);
      *(_QWORD *)(a2 + 16) = v29;
      *(_BYTE *)(a2 + 31) = v20;
    }
  }
  return result;
}

BOOL sub_22E6C1DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!sub_22E6C1864((unsigned __int8 *)(a2 - 32), (unsigned __int8 *)a1))
        return 1;
      v6 = *(_BYTE *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v18[0] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a1 + 23);
      v8 = *(_BYTE *)(a1 + 31);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)a1 = *(_BYTE *)(a2 - 32);
      v9 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a2 - 32) = v6;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v18 + 7);
      v10 = v18[0];
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = v10;
      result = 1;
      *(_BYTE *)(a2 - 1) = v8;
      return result;
    case 3:
      sub_22E6C1B30(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      sub_22E6C1FEC(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_22E6C18F8(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v11 = (unsigned __int8 *)(a1 + 64);
      sub_22E6C1B30(a1, a1 + 32, a1 + 64);
      v12 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if (sub_22E6C1864((unsigned __int8 *)v12, v11))
    {
      LOBYTE(v18[0]) = *(_BYTE *)v12;
      *(_OWORD *)&v18[1] = *(_OWORD *)(v12 + 8);
      v19 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      v15 = v13;
      while (1)
      {
        v16 = a1 + v15;
        *(_BYTE *)(v16 + 96) = *(_BYTE *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 104) = *(_OWORD *)(a1 + v15 + 72);
        *(_QWORD *)(v16 + 120) = *(_QWORD *)(a1 + v15 + 88);
        *(_BYTE *)(v16 + 95) = 0;
        *(_BYTE *)(v16 + 72) = 0;
        if (v15 == -64)
          break;
        v15 -= 32;
        if (!sub_22E6C1864((unsigned __int8 *)v18, (unsigned __int8 *)(v16 + 32)))
        {
          v17 = (_BYTE *)(a1 + v15 + 96);
          goto LABEL_12;
        }
      }
      v17 = (_BYTE *)a1;
LABEL_12:
      *v17 = v18[0];
      *(_QWORD *)(v16 + 88) = v19;
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&v18[1];
      if (++v14 == 8)
        return v12 + 32 == a2;
    }
    v11 = (unsigned __int8 *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2)
      return 1;
  }
}

BOOL sub_22E6C1FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;
  __int128 v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  sub_22E6C1B30(a1, a2, a3);
  result = sub_22E6C1864((unsigned __int8 *)a4, (unsigned __int8 *)a3);
  if (result)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = *(_BYTE *)a3;
    *(_QWORD *)&v21 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)(a3 + 23);
    v11 = *(_BYTE *)(a3 + 31);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)a3 = *(_BYTE *)a4;
    v12 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v12;
    *(_BYTE *)a4 = v10;
    *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v21 + 7);
    *(_QWORD *)(a4 + 8) = v9;
    *(_QWORD *)(a4 + 16) = v21;
    *(_BYTE *)(a4 + 31) = v11;
    result = sub_22E6C1864((unsigned __int8 *)a3, (unsigned __int8 *)a2);
    if (result)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_BYTE *)a2;
      *(_QWORD *)&v22 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(a2 + 23);
      v15 = *(_BYTE *)(a2 + 31);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)a2 = *(_BYTE *)a3;
      v16 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v16;
      *(_BYTE *)a3 = v14;
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v22 + 7);
      *(_QWORD *)(a3 + 16) = v22;
      *(_BYTE *)(a3 + 31) = v15;
      result = sub_22E6C1864((unsigned __int8 *)a2, (unsigned __int8 *)a1);
      if (result)
      {
        v17 = *(_BYTE *)a1;
        v18 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v23 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)((char *)&v23 + 7) = *(_QWORD *)(a1 + 23);
        v19 = *(_BYTE *)(a1 + 31);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v20 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v20;
        *(_BYTE *)a2 = v17;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v23 + 7);
        *(_QWORD *)(a2 + 16) = v23;
        *(_BYTE *)(a2 + 31) = v19;
      }
    }
  }
  return result;
}

char *sub_22E6C21AC(uint64_t **a1, unint64_t a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = (char *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_QWORD *)v4 + 4);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 1);
LABEL_9:
    v8 = v6;
    v6 = (char *)operator new(0x60uLL);
    *((_QWORD *)v6 + 4) = a2;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *((_QWORD *)v6 + 11) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_22E49FD00(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 40;
}

BOOL sub_22E6C2284(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;

  if (!a2)
    return 0;
  v4 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    goto LABEL_13;
  v5 = v3;
  v6 = v4;
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t **)v5;
    else
      v9 = (uint64_t **)(v5 + 1);
    if (v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == v4 || v6[4] > a2)
LABEL_13:
    v6 = v4;
  v10 = *((_DWORD *)v6 + 16);
  v11 = v10 == 3;
  if (v10 == 3)
    --*(_DWORD *)(a1 + 28);
  if (*((char *)v6 + 95) < 0)
    v12 = v6[10];
  else
    v12 = *((unsigned __int8 *)v6 + 95);
  v13 = (void **)(v6 + 5);
  v14 = (void **)(v6 + 9);
  if (v12)
  {
    v15 = v6[11];
    v16 = *(_OWORD *)v14;
    *(_OWORD *)v14 = *(_OWORD *)v13;
    v6[11] = v6[7];
    *(_OWORD *)v13 = v16;
    v6[7] = v15;
    if (*((char *)v6 + 95) < 0)
    {
      *(_BYTE *)v6[9] = 0;
      v6[10] = 0;
    }
    else
    {
      *((_BYTE *)v6 + 72) = 0;
      *((_BYTE *)v6 + 95) = 0;
    }
    *((_DWORD *)v6 + 16) = 1;
  }
  else
  {
    v17 = (uint64_t *)v6[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      v19 = v6;
      do
      {
        v18 = (uint64_t *)v19[2];
        v20 = *v18 == (_QWORD)v19;
        v19 = v18;
      }
      while (!v20);
    }
    if (*(uint64_t **)a1 == v6)
      *(_QWORD *)a1 = v18;
    --*(_QWORD *)(a1 + 16);
    sub_22E6C2420(v3, v6);
    if (*((char *)v6 + 95) < 0)
      operator delete(*v14);
    if (*((char *)v6 + 63) < 0)
      operator delete(*v13);
    operator delete(v6);
  }
  --*(_DWORD *)(a1 + 24);
  return v11;
}

uint64_t *sub_22E6C2420(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = (uint64_t *)v7[2];
    if ((uint64_t *)*v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v12 + 24) = 0;
      v18 = (uint64_t *)v7[1];
      *v12 = (uint64_t)v18;
      if (v18)
        v18[2] = (uint64_t)v12;
      v7[2] = v12[2];
      v19 = (uint64_t **)v12[2];
      if (*v19 == v12)
      {
        *v19 = v7;
        v18 = (uint64_t *)*v12;
      }
      else
      {
        v19[1] = v7;
      }
      v7[1] = (uint64_t)v12;
      v12[2] = (uint64_t)v7;
      if (result == v12)
        result = v7;
      v7 = v18;
    }
    v20 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v20 + 24))
      goto LABEL_71;
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v20 && !*((_BYTE *)v20 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v27 = *v21;
        v7[1] = *v21;
        if (v27)
          *(_QWORD *)(v27 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v20 = v7;
      }
      v24 = v21[2];
      *((_BYTE *)v21 + 24) = *(_BYTE *)(v24 + 24);
      *(_BYTE *)(v24 + 24) = 1;
      *((_BYTE *)v20 + 24) = 1;
      v25 = *(uint64_t **)v24;
      v28 = *(_QWORD *)(*(_QWORD *)v24 + 8);
      *(_QWORD *)v24 = v28;
      if (v28)
        *(_QWORD *)(v28 + 16) = v24;
      v25[2] = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
      v25[1] = v24;
      goto LABEL_75;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v22 = v17 == result;
    else
      v22 = 1;
    if (v22)
      goto LABEL_56;
LABEL_52:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v12 + 24) = 0;
    v13 = (uint64_t *)v12[1];
    v14 = *v13;
    v12[1] = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = v12[2];
    *(_QWORD *)(v12[2] + 8 * (*(_QWORD *)v12[2] != (_QWORD)v12)) = v13;
    *v13 = (uint64_t)v12;
    v12[2] = (uint64_t)v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_62;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_56:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_56;
    goto LABEL_52;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_62:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
LABEL_75:
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

_QWORD *sub_22E6C27B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6C27F0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E6C2844()
{
  JUMPOUT(0x2348A0E9CLL);
}

void ***sub_22E6C2858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  llvm::LLVMContext *v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t Int32Ty;
  _BOOL4 v35;
  int v36;
  int v37;
  void **v39;
  int v40;
  uint64_t v41;
  void *v42[6];

  v2 = a2;
  v42[5] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 36);
  if (v4 > 0x39)
  {
    v5 = operator new();
    *(_QWORD *)v5 = v5 + 16;
    *(_QWORD *)(v5 + 8) = 0x600000000;
    sub_22E47EDD0(v5, (v4 + 63) >> 6, 0);
    *(_DWORD *)(v5 + 64) = v4;
  }
  else
  {
    v5 = (v4 << 58) | 1;
  }
  v39 = (void **)v5;
  v40 = *(unsigned __int8 *)(v2 + 8);
  v41 = 8;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), v2) & 1) == 0)
  {
    v6 = *(_QWORD *)(v2 + 40);
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      memset(v42, 0, 27);
      v8 = 192;
    }
    else
    {
      if ((unint64_t)(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v7) - 129) > 0xFFFFFFFFFFFFFF5FLL)
      {
        sub_22E69BE7C((unint64_t)v42, a1, v6);
        goto LABEL_10;
      }
      v9 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6);
      v42[1] = 0;
      v42[0] = 0;
      LOBYTE(v42[3]) = 2;
      v42[2] = (void *)v9;
      v8 = 64;
    }
    *(_WORD *)((char *)&v42[3] + 1) = v8;
LABEL_10:
    *(_OWORD *)(v2 + 48) = *(_OWORD *)v42;
    *(_OWORD *)(v2 + 59) = *(_OWORD *)((char *)&v42[1] + 3);
  }
  sub_22E6C2DCC(a1, *(_BYTE *)(v2 + 72), *(_WORD *)(v2 + 73), *(_QWORD *)(v2 + 40), (uint64_t)&v39);
  v10 = *(_DWORD *)(v2 + 36);
  if (v10)
  {
    v11 = v2 + 80;
    v12 = v2 + 80 + 40 * v10;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = v41;
      v15 = (uint64_t *)(*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF0);
      v16 = *v15;
      v17 = *(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0);
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (v18 == 45)
        v19 = *(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0);
      else
        v19 = 0;
      if (!v19)
        goto LABEL_23;
      v20 = sub_22E69BE08(v19, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
      if (v20 == 1)
        goto LABEL_42;
      if (v20 != 2)
        break;
      v21 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13);
      v22 = 0;
      if ((_DWORD)v14)
        LODWORD(v2) = v2 & 0xFFFFFE00 | 0x40;
      else
        LODWORD(v2) = v2 & 0xFFFFFE00;
LABEL_46:
      v26 = 2;
LABEL_47:
      *(_QWORD *)(v11 + 8) = v22;
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = v21;
      *(_DWORD *)(v11 + 28) = 0;
      *(_BYTE *)(v11 + 32) = v26;
      *(_WORD *)(v11 + 33) = v2;
      v33 = *(_QWORD *)v11;
      v11 += 40;
      sub_22E6C2DCC(a1, v26, v2, v33, (uint64_t)&v39);
      if (v11 == v12)
        return sub_22E54C5D0(&v39);
    }
    v16 = *v15;
    v17 = *(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0);
    v18 = *(unsigned __int8 *)(v17 + 16);
LABEL_23:
    if (v18 == 44)
    {
      v23 = sub_22F114198(*(_QWORD *)(v17 + 24));
      v13 = sub_22E496830(v23);
      v15 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v16 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    }
    v24 = (unint64_t)(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v16) + 31) >> 5;
    if (sub_22E619D68(v13)
      || ((v27 = *v15) != 0 ? (v28 = *(_BYTE *)(*v15 + 16) == 31) : (v28 = 0),
          (v28
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
        && (v27 = sub_22F10CF48(v27)) != 0)
       && sub_22F28C8B4(v27)))
    {
      if (!v19 || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 74) & 0x80) == 0)
      {
        if (sub_22E699BD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v13, 1, 0))
        {
          v21 = 0;
          v22 = 0;
          LODWORD(v2) = v2 & 0xFFFFFE00;
          v26 = 4;
        }
        else
        {
          Int32Ty = llvm::Type::getInt32Ty(**(llvm::Type ***)(*(_QWORD *)(a1 + 8) + 16), v25);
          v42[0] = &v42[2];
          v42[1] = (void *)0x300000000;
          sub_22E4639CC((uint64_t)v42, v24, Int32Ty);
          v22 = llvm::StructType::get();
          if (v24 <= v14)
            LODWORD(v2) = v2 & 0xFFFFFE00 | 0xC0;
          else
            LODWORD(v2) = v2 & 0xFFFFFE00;
          if (v42[0] != &v42[2])
            free(v42[0]);
          v26 = 0;
          v21 = 0;
        }
        goto LABEL_47;
      }
    }
    else
    {
      v29 = *v15;
      if (*v15)
        v30 = *(_BYTE *)(*v15 + 16) == 9;
      else
        v30 = 0;
      if (!v30
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 9
         || (v29 = sub_22F10CF48(v29)) == 0)
        || (*(_DWORD *)(v29 + 32) & 0x1FFFFFEu) < 0x81)
      {
        if (sub_22F2A3AE4(a1, v13))
        {
          v35 = sub_22F110B20(*v15);
          v21 = 0;
          v22 = 0;
          if (v35)
            v36 = v2 & 0xFFFFFE00 | 0x100;
          else
            v36 = v2 & 0xFFFFFE00;
          if (v24 <= v14)
            LODWORD(v2) = v36 | 0x40;
          else
            LODWORD(v2) = v36;
          v26 = 1;
        }
        else
        {
          v37 = v2 & 0xFFFFFE00;
          v26 = 0;
          v21 = 0;
          v22 = 0;
          if (v24 <= v14)
            LODWORD(v2) = v37 | 0xC0;
          else
            LODWORD(v2) = v37 | 0x80;
        }
        goto LABEL_47;
      }
    }
LABEL_42:
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v15);
    v22 = 0;
    if (v31 <= 0x27)
      v32 = 8;
    else
      v32 = 24;
    LODWORD(v2) = v32 | v2 & 0xFFFFFE00;
    v21 = 4;
    goto LABEL_46;
  }
  return sub_22E54C5D0(&v39);
}

double sub_22E6C2D2C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  _OWORD v14[3];

  v8 = a3[1];
  v14[0] = *a3;
  v14[1] = v8;
  v14[2] = a3[2];
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v13);
  v9 = v13[0];
  v10 = v13[1];
  v11 = sub_22E66C868(a2[18] + 280, a4, 0);
  return sub_22E6A0A7C(a5, a2, (uint64_t)v14, v11, v9, v10, 4, 1);
}

uint64_t sub_22E6C2DCC(uint64_t result, char a2, char a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;

  v5 = *(_DWORD *)(a5 + 12);
  if (v5)
  {
    if (!a2)
    {
      if ((a3 & 0x40) == 0)
        return result;
      result = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(result + 8) + 8), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
      v8 = (unint64_t)(result + 31) >> 5;
      v9 = *(_DWORD *)(a5 + 12);
      v10 = v9 >= v8;
      v7 = v9 - v8;
      if (!v10)
        v7 = 0;
      goto LABEL_9;
    }
    if (a2 == 2 && (a3 & 0x40) != 0)
    {
      v7 = v5 - 1;
LABEL_9:
      *(_DWORD *)(a5 + 12) = v7;
    }
  }
  return result;
}

_QWORD *sub_22E6C2E40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6C2E80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6C2ED0()
{
  return 76;
}

uint64_t sub_22E6C2ED8(uint64_t a1)
{
  return (*(_DWORD *)(llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                                                                                 + 16))
                                  + 4)
                      + 27);
}

_QWORD *sub_22E6C2F00(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6C2F40(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E6C2F90(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
  if ((*(_BYTE *)(result[250] + 68) & 0x40) != 0)
  {
    result = sub_22EF5F1F4((uint64_t)result, *a2, (*(_QWORD *)(*a2 + 16) >> 19) & 0x1FE0 | 0xD);
    *a2 = (uint64_t)result;
  }
  return result;
}

_QWORD *sub_22E6C2FE4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22E6C3024(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24FA68C10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6C3074()
{
  return 1;
}

void sub_22E6C3080()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22E6C3094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  double result;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  _BOOL4 v25;
  _OWORD v26[2];

  v4 = *(_QWORD *)(a2 + 40);
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
  {
    memset(v26, 0, 27);
    v7 = 128;
LABEL_3:
    *(_WORD *)((char *)&v26[1] + 9) = v7;
    goto LABEL_20;
  }
  if ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v6) > 0x3F)
    goto LABEL_19;
  v8 = *(_QWORD *)v5;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_16;
LABEL_19:
    sub_22E69BE7C((unint64_t)v26, a1, v4);
    goto LABEL_20;
  }
  if (!v9 || v10 != 44)
  {
    if (v10 == 9)
      goto LABEL_16;
    goto LABEL_19;
  }
  v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if ((*(_BYTE *)(v12 + 74) & 1) == 0 && *(_QWORD *)(v12 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_19;
  }
  v8 = *(_QWORD *)v5;
LABEL_16:
  BYTE8(v26[1]) = 1;
  if (sub_22F110B20(v8))
  {
    memset(v26, 0, 24);
    v7 = 256;
    goto LABEL_3;
  }
  *(_WORD *)((char *)&v26[1] + 9) = 0;
  memset(v26, 0, 24);
LABEL_20:
  *(_OWORD *)(a2 + 48) = v26[0];
  result = *(double *)((char *)v26 + 11);
  *(_OWORD *)(a2 + 59) = *(_OWORD *)((char *)v26 + 11);
  v14 = *(_DWORD *)(a2 + 36);
  if (v14)
  {
    v15 = a2 + 80;
    v16 = a2 + 80 + 40 * v14;
    do
    {
      v17 = *(_QWORD *)v15;
      v18 = (uint64_t *)(*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
      {
        v19 = *(_WORD *)((_BYTE *)&v26[1] + 9) & 0xFE00 | 0x80;
        memset(v26, 0, 25);
      }
      else
      {
        if ((unint64_t)sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *v18) > 0x3F)
          goto LABEL_41;
        v20 = *v18;
        v21 = *(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0);
        v22 = *(_DWORD *)(v21 + 16);
        if (v21)
          v23 = v22 == 11;
        else
          v23 = 0;
        if (v23)
        {
          if (((*(_DWORD *)(v21 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_41;
        }
        else if (v21 && v22 == 44)
        {
          v24 = sub_22F114198(*(_QWORD *)(v21 + 24));
          if ((*(_BYTE *)(v24 + 74) & 1) == 0 && *(_QWORD *)(v24 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v21 + 24)) + 76) & 0x80) != 0)
          {
LABEL_41:
            sub_22E69BAA8((uint64_t)v26, a1, v17);
            goto LABEL_42;
          }
          v20 = *v18;
        }
        else if (v22 != 9)
        {
          goto LABEL_41;
        }
        v25 = sub_22F110B20(v20);
        BYTE8(v26[1]) = 1;
        v19 = *(_WORD *)((_BYTE *)&v26[1] + 9) & 0xFE00;
        if (v25)
          v19 |= 0x100u;
        memset(v26, 0, 24);
      }
      *(_WORD *)((char *)&v26[1] + 9) = v19;
LABEL_42:
      *(_OWORD *)(v15 + 8) = v26[0];
      result = *(double *)((char *)v26 + 11);
      *(_OWORD *)(v15 + 19) = *(_OWORD *)((char *)v26 + 11);
      v15 += 40;
    }
    while (v15 != v16);
  }
  return result;
}

uint64_t sub_22E6C3334(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  *(_DWORD *)(a1 + 792) = 0;
  sub_22E5D120C(a1 + 1056);
  sub_22E605D5C(a1 + 1080);
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned int *)(a1 + 8);
  }
  v5 = *(_QWORD *)a1 + 16 * v4;
  *(_DWORD *)v5 = -1;
  *(_QWORD *)(v5 + 8) = 0;
  ++*(_DWORD *)(a1 + 8);
  v7 = 0;
  result = sub_22E6C33F0(a1, a2, &v7);
  *(_BYTE *)(a1 + 1104) = result ^ 1;
  if (((result ^ 1) & 1) == 0)
    return sub_22E6C36DC(a1);
  return result;
}

uint64_t sub_22E6C33F0(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  int v6;
  int *v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  v5 = 0;
  v33 = *a3;
  v6 = *a2;
  if (v6 == 224)
    v7 = &v33;
  else
    v7 = a3;
  if ((v6 - 102) >= 0x85)
    v8 = &v33;
  else
    v8 = v7;
  if (*a2 > 0x10u)
  {
    if (v6 == 17)
      return 0;
    if (v6 != 100)
      goto LABEL_27;
    v9 = *(unsigned __int16 *)a2;
    if ((v9 & 0x100) != 0 && (v10 = *((_QWORD *)a2 + 3)) != 0)
    {
      result = sub_22E6C33F0(a1, v10, v8);
      if (!(_DWORD)result)
        return result;
      v9 = *(unsigned __int16 *)a2;
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    if ((v9 & 0x200) != 0)
    {
      v29 = *(_QWORD *)&a2[8 * ((v9 >> 8) & 1) + 24];
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
        {
          result = sub_22E6C3824(a1, v30, v8);
          if (!(_DWORD)result)
            return result;
          v5 += result;
        }
      }
    }
LABEL_24:
    v16 = *v8;
    v17 = *(_DWORD *)(a1 + 792);
    if (v17 >= *(_DWORD *)(a1 + 796))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(a1 + 792);
    }
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 784) + 16 * v17);
    *v18 = a2;
    v18[1] = v16;
    ++*(_DWORD *)(a1 + 792);
    goto LABEL_27;
  }
  if (v6 == 12)
  {
    v13 = (unint64_t)(a2 + 8);
    v14 = *((_QWORD *)a2 + 1);
    if ((v14 & 1) != 0)
    {
      v13 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 8;
      v15 = (unsigned __int8 *)(v13 + 8 * *(unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL));
    }
    else if (v14)
    {
      v15 = a2 + 16;
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    if ((unsigned __int8 *)v13 != v15)
    {
      v27 = v13 + 8;
      do
      {
        result = sub_22E6C3824(a1, *(_QWORD *)(v27 - 8), a3);
        if ((_DWORD)result)
          v28 = v27 == (_QWORD)v15;
        else
          v28 = 1;
        v27 += 8;
      }
      while (!v28);
      return result;
    }
    return 1;
  }
  if (v6 == 15)
    goto LABEL_24;
LABEL_27:
  sub_22F0D492C((uint64_t)a2);
  v31 = v34;
  v19 = v36;
  v32 = v35;
  v20 = *((_QWORD *)&v36 + 1);
  v22 = *((_QWORD *)&v34 + 1);
  v21 = (uint64_t *)v34;
  if (v34 == v36)
    return 1;
  while (1)
  {
    *(_QWORD *)&v34 = 0;
    if ((v22 & 3) != 0)
    {
      if ((v22 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = (uint64_t *)((v22 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v21 = (uint64_t *)sub_22F3AC1A8(*v21);
    }
    v23 = (unsigned __int8 *)*v21;
    *(_QWORD *)&v34 = v23;
    if (v23)
      break;
LABEL_45:
    if ((v22 & 3) != 0)
    {
      if (v22 >= 4)
        sub_22F0D8720((uint64_t)&v31);
      else
        sub_22F3F2FE0((uint64_t)&v31, 1);
    }
    else
    {
      *(_QWORD *)&v31 = v31 + 8;
    }
    v22 = *((_QWORD *)&v31 + 1);
    v21 = (uint64_t *)v31;
    if (v31 == __PAIR128__(v20, v19))
      return 1;
  }
  if (v5)
  {
    --v5;
    goto LABEL_45;
  }
  while (1)
  {
    v26 = *v23;
    if ((v26 & 0xFE) != 0x62)
      break;
    if (v26 == 99)
    {
      v24 = v23 + 24;
      goto LABEL_36;
    }
    if (v26 == 98)
    {
      v24 = &v23[8 * (((unint64_t)*(unsigned __int16 *)v23 >> 8) & 1) + 32];
      goto LABEL_36;
    }
LABEL_37:
    v25 = *v8;
    *((_DWORD *)sub_22E65B0E8((uint64_t *)(a1 + 1056), &v34) + 2) = v25;
    *(_QWORD *)&v34 = v23;
  }
  if (v26 == 235)
  {
    v24 = v23 + 16;
LABEL_36:
    v23 = *(unsigned __int8 **)v24;
    goto LABEL_37;
  }
  result = sub_22E6C33F0(a1, v23, v8);
  if ((_DWORD)result)
  {
    v5 = 0;
    v22 = *((_QWORD *)&v31 + 1);
    goto LABEL_45;
  }
  return result;
}

uint64_t sub_22E6C36DC(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t i;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _BYTE v19[31];

  v1 = *(unsigned int *)(result + 792);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t *)result;
    v3 = *(_QWORD *)(result + 784);
    v4 = v3 + 16 * v1;
    v5 = (uint64_t *)(result + 1056);
    v6 = result + 1080;
    do
    {
      v7 = *(_BYTE **)v3;
      v8 = *(unsigned int *)(v3 + 8);
      if (**(_BYTE **)v3 == 15)
      {
        v9 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 48);
        if (v9)
        {
          v18 = v9;
          result = (uint64_t)sub_22E669BD0(v5, &v18);
          v10 = *(unsigned int *)(result + 8);
          while (v8 != v10)
          {
            v11 = *v2;
            if (v8 < v10)
            {
              v12 = (unsigned int *)(v11 + 16 * v10);
              v10 = *v12;
              result = sub_22F294508(v6, (_QWORD *)v12 + 1, (uint64_t)v19);
            }
            else
            {
              v8 = *(unsigned int *)(v11 + 16 * v8);
            }
          }
        }
      }
      else
      {
        for (i = *((_QWORD *)v7 + 1); i; i = *(_QWORD *)(i + 16))
        {
          v18 = i;
          result = (uint64_t)sub_22E669BD0(v5, &v18);
          v14 = *(unsigned int *)(result + 8);
          if (v8 != v14)
          {
            v15 = v8;
            do
            {
              v16 = *v2;
              if (v15 < v14)
              {
                v17 = (unsigned int *)(v16 + 16 * v14);
                v14 = *v17;
                result = sub_22F294508(v6, (_QWORD *)v17 + 1, (uint64_t)v19);
              }
              else
              {
                v15 = *(unsigned int *)(v16 + 16 * v15);
              }
            }
            while (v15 != v14);
          }
        }
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_22E6C3824(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v12;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && sub_22E3CB5E0(a2))
  {
    v6 = *a3;
    v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= *(_DWORD *)(a1 + 12))
    {
      v12 = *a3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v12;
      v7 = *(_DWORD *)(a1 + 8);
    }
    v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
    *v8 = v6;
    v8[1] = a2;
    v9 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v9 + 1;
    *a3 = v9;
  }
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && (v10 = sub_22EFBC5B4(a2)) != 0)
    return sub_22E6C33F0(a1, v10, a3);
  else
    return 1;
}

uint64_t sub_22E6C3914(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  llvm **v6;
  void ***v7;
  void *v8;
  uint64_t v9;
  void ***v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  FILE *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  llvm *v26;
  void *v27;
  void ***v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void **v38;
  uint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  llvm *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_BYTE *)(a1 + 288))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  v3 = *(_DWORD *)(a1 + 336);
  if (!v3 && !*(_DWORD *)(a1 + 340))
    goto LABEL_23;
  v4 = *(unsigned int *)(a1 + 344);
  v5 = *(_QWORD *)(a1 + 328);
  if (v4 <= 4 * v3 || v4 < 0x41)
  {
    if (!(_DWORD)v4)
      goto LABEL_22;
    v10 = (void ***)(v5 + 8);
    v11 = 16 * v4;
    while (1)
    {
      v12 = *((_DWORD *)v10 - 2);
      if (v12 == -1)
        goto LABEL_20;
      if (v12)
        break;
LABEL_21:
      v10 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_22;
    }
    v10 = sub_22E6C9DA0(v10);
LABEL_20:
    *((_DWORD *)v10 - 2) = 0;
    goto LABEL_21;
  }
  v6 = (llvm **)(a1 + 328);
  v7 = (void ***)(v5 + 8);
  v8 = (void *)(16 * v4);
  v9 = 16 * v4;
  do
  {
    if ((*((_DWORD *)v7 - 2) + 1) >= 2)
      v7 = sub_22E6C9DA0(v7);
    v7 += 2;
    v9 -= 16;
  }
  while (v9);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 344))
    {
      llvm::deallocate_buffer(*v6, v8);
      *v6 = 0;
      *(_QWORD *)(a1 + 336) = 0;
      *(_DWORD *)(a1 + 344) = 0;
      goto LABEL_23;
    }
LABEL_22:
    *(_QWORD *)(a1 + 336) = 0;
    goto LABEL_23;
  }
  v65 = 1 << (33 - __clz(v3 - 1));
  if (v65 <= 64)
    v66 = 64;
  else
    v66 = v65;
  v67 = *(llvm **)(a1 + 328);
  if (v66 == *(_DWORD *)(a1 + 344))
  {
    *(_QWORD *)(a1 + 336) = 0;
    v68 = 16 * v66;
    do
    {
      *(_DWORD *)v67 = 0;
      v67 = (llvm *)((char *)v67 + 16);
      v68 -= 16;
    }
    while (v68);
  }
  else
  {
    llvm::deallocate_buffer(v67, v8);
    v69 = (4 * v66 / 3 + 1) | ((unint64_t)(4 * v66 / 3 + 1) >> 1);
    v70 = v69 | (v69 >> 2) | ((v69 | (v69 >> 2)) >> 4);
    LODWORD(v70) = (((v70 | (v70 >> 8)) >> 16) | v70 | (v70 >> 8)) + 1;
    *(_DWORD *)(a1 + 344) = v70;
    v71 = (_DWORD *)MEMORY[0x23489D23C](16 * v70, 8);
    *(_QWORD *)(a1 + 328) = v71;
    *(_QWORD *)(a1 + 336) = 0;
    v72 = *(unsigned int *)(a1 + 344);
    if ((_DWORD)v72)
    {
      v73 = 16 * v72;
      do
      {
        *v71 = 0;
        v71 += 4;
        v73 -= 16;
      }
      while (v73);
    }
  }
LABEL_23:
  v13 = *(_QWORD *)(a1 + 248);
  if (v13 && *(_BYTE *)(a1 + 297))
  {
    v61 = *(_QWORD *)(v13 + 56);
    v62 = *(_QWORD *)(v61 + 224);
    v63 = *(_QWORD *)(v61 + 232);
    while (v62 != v63)
    {
      v64 = *(_QWORD *)(v62 + 24);
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      v62 += 32;
    }
  }
  sub_22F2A45B0(a1);
  if (getenv("LIBCLANG_OBJTRACKING"))
  {
    v14 = (FILE *)*MEMORY[0x24BDAC8D8];
    do
    {
      v15 = __ldaxr(&dword_255E04E60);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, &dword_255E04E60));
    fprintf(v14, "--- %u translation units\n", v16);
  }
  sub_22E6C6358(a1 + 1896);
  v17 = *(void **)(a1 + 1872);
  if (v17)
  {
    *(_QWORD *)(a1 + 1880) = v17;
    operator delete(v17);
  }
  v18 = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(a1 + 1864) = 0;
  if (v18)
  {
    v19 = sub_22F2A49B4(v18);
    MEMORY[0x2348A0E9C](v19, 0x1020C40CF3CB23CLL);
  }
  v20 = *(std::__shared_weak_count **)(a1 + 1856);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(void **)(a1 + 1816);
  if (v23)
  {
    *(_QWORD *)(a1 + 1824) = v23;
    operator delete(v23);
  }
  v24 = *(_QWORD *)(a1 + 1800);
  *(_QWORD *)(a1 + 1800) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (*(_BYTE *)(a1 + 1792))
  {
    sub_22F2AEB38((uint64_t *)(a1 + 1688));
    *(_BYTE *)(a1 + 1792) = 0;
  }
  sub_22F27B320(a1 + 1656);
  sub_22F2A5208((char **)(a1 + 1240));
  sub_22F2A5208((char **)(a1 + 840));
  sub_22F2A51A4((char **)(a1 + 376));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v25 = *(unsigned int *)(a1 + 344);
  v26 = *(llvm **)(a1 + 328);
  if ((_DWORD)v25)
  {
    v28 = (void ***)((char *)v26 + 8);
    v29 = 16 * v25;
    do
    {
      if ((*((_DWORD *)v28 - 2) + 1) >= 2)
        v28 = sub_22E6C9DA0(v28);
      v28 += 2;
      v29 -= 16;
    }
    while (v29);
    v26 = *(llvm **)(a1 + 328);
    v27 = (void *)(16 * *(unsigned int *)(a1 + 344));
  }
  else
  {
    v27 = 0;
  }
  llvm::deallocate_buffer(v26, v27);
  v30 = *(void **)(a1 + 304);
  if (v30)
  {
    *(_QWORD *)(a1 + 312) = v30;
    operator delete(v30);
  }
  v31 = *(std::__shared_weak_count **)(a1 + 256);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v34)
  {
    v35 = sub_22E8FFA2C(v34);
    MEMORY[0x2348A0E9C](v35, 0x10F3C40F108FF96);
  }
  v36 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v37 = *(void ***)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v37)
  {
    v38 = sub_22F2A5E04(v37);
    MEMORY[0x2348A0E9C](v38, 0x10F2C40689BE73ALL);
  }
  v39 = *(_QWORD *)(a1 + 136);
  if (v39)
  {
    v40 = *(_DWORD *)(v39 + 32) - 1;
    *(_DWORD *)(v39 + 32) = v40;
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)(v39 + 24) + 8))(v39 + 24);
  }
  v41 = *(std::__shared_weak_count **)(a1 + 128);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(std::__shared_weak_count **)(a1 + 112);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(std::__shared_weak_count **)(a1 + 96);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_22F2A50D8((_DWORD **)(a1 + 80));
  v50 = *(std::__shared_weak_count **)(a1 + 72);
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(_DWORD **)(a1 + 56);
  if (v53)
  {
    v54 = v53[2] - 1;
    v53[2] = v54;
    if (!v54)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
  }
  v55 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v55)
  {
    v56 = sub_22E6C6660(v55);
    MEMORY[0x2348A0E9C](v56, 0x10F2C40BAE81D25);
  }
  sub_22E6C6300((_DWORD **)(a1 + 40));
  sub_22F2A5160((_DWORD **)(a1 + 32));
  sub_22F2A511C((_DWORD **)(a1 + 24));
  sub_22E6C62BC((_DWORD **)(a1 + 16));
  v57 = *(std::__shared_weak_count **)(a1 + 8);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return a1;
}

uint64_t sub_22E6C3F18(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

unsigned int *sub_22E6C3F7C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (result[3])
  {
    v1 = result;
    v2 = result[2];
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)v1;
        result = *(unsigned int **)(*(_QWORD *)v1 + v3);
        if (result)
          v6 = result + 2 == 0;
        else
          v6 = 1;
        if (!v6)
          result = (unsigned int *)llvm::deallocate_buffer((llvm *)result, (void *)(*(_QWORD *)result + 17));
        *(_QWORD *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

uint64_t sub_22E6C3FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, __int128 *a5@<X4>, char a6@<W6>, int a7@<W7>, uint64_t *a8@<X8>, char a9, char a10)
{
  uint64_t v16;
  FILE *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  int8x16_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _DWORD *v29;
  llvm::vfs *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  __int128 *p_dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  int v113;
  char v114;
  BOOL v115;
  _BYTE *v116;
  size_t v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const void *v122;
  const void *v123;
  char v124;
  const void *v125;
  size_t v126;
  size_t v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t result;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v156[3];
  __int16 v157;
  uint64_t v158;
  _DWORD *v159;
  int v160;
  __int128 v161;
  __int128 __dst;
  unint64_t v163;
  _DWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD *v170;

  v16 = operator new();
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_BYTE *)(v16 + 144) = 0;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *(_WORD *)(v16 + 272) = 0;
  *(_QWORD *)(v16 + 264) = &off_24FA6D050;
  *(_BYTE *)(v16 + 280) = 0;
  *(_DWORD *)(v16 + 284) = 0;
  *(_BYTE *)(v16 + 288) = 1;
  *(_DWORD *)(v16 + 292) = 0;
  *(_BYTE *)(v16 + 296) = getenv("LIBCLANG_TIMING") != 0;
  *(_BYTE *)(v16 + 297) = 1;
  *(_QWORD *)(v16 + 352) = 0;
  *(_OWORD *)(v16 + 360) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 332) = 0u;
  *(_QWORD *)(v16 + 376) = v16 + 392;
  *(_QWORD *)(v16 + 384) = 0x400000000;
  *(_QWORD *)(v16 + 840) = v16 + 856;
  *(_QWORD *)(v16 + 848) = 0x400000000;
  *(_QWORD *)(v16 + 1240) = v16 + 1256;
  *(_QWORD *)(v16 + 1248) = 0x400000000;
  *(_QWORD *)(v16 + 1640) = 0;
  *(_DWORD *)(v16 + 1648) = 0;
  *(_OWORD *)(v16 + 1656) = 0u;
  *(_QWORD *)(v16 + 1672) = 0x1000000000;
  *(_BYTE *)(v16 + 1688) = 0;
  *(_BYTE *)(v16 + 1792) = 0;
  *(_QWORD *)(v16 + 1800) = 0;
  *(_DWORD *)(v16 + 1808) = 0;
  *(_QWORD *)(v16 + 1832) = 0;
  *(_OWORD *)(v16 + 1816) = 0u;
  *(_BYTE *)(v16 + 1840) &= 0xF8u;
  *(_OWORD *)(v16 + 1848) = 0u;
  *(_OWORD *)(v16 + 1864) = 0u;
  *(_OWORD *)(v16 + 1880) = 0u;
  *(_OWORD *)(v16 + 1896) = 0u;
  *(_QWORD *)(v16 + 1912) = 0x1000000000;
  *(_QWORD *)(v16 + 1928) = 0;
  *(_DWORD *)(v16 + 1936) = 0;
  *(_BYTE *)(v16 + 1940) &= ~1u;
  *(_DWORD *)(v16 + 1944) = 0;
  *(_QWORD *)(v16 + 1952) = 0;
  if (getenv("LIBCLANG_OBJTRACKING"))
  {
    v17 = (FILE *)*MEMORY[0x24BDAC8D8];
    do
    {
      v18 = __ldaxr(&dword_255E04E60);
      v19 = v18 + 1;
    }
    while (__stlxr(v19, &dword_255E04E60));
    fprintf(v17, "+++ %u translation units\n", v19);
  }
  v20 = sub_22F2A526C(v16);
  if (v20)
    llvm::CrashRecoveryContext::registerCleanup();
  v21 = sub_22F2A5324(*a4);
  if (v21)
    llvm::CrashRecoveryContext::registerCleanup();
  v170 = (_DWORD *)*a4;
  v152 = v21;
  v153 = v20;
  if (v170)
  {
    ++*v170;
    v22 = v170;
  }
  else
  {
    v22 = 0;
  }
  sub_22F2A462C((uint64_t)v22, v16, a7);
  sub_22E6C62BC(&v170);
  v23 = operator new(0x378uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_24FA6D170;
  v24 = sub_22F1D4230((uint64_t)(v23 + 3));
  v25 = *(std::__shared_weak_count **)(v16 + 8);
  *(_QWORD *)v16 = v26;
  *(_QWORD *)(v16 + 8) = v23;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, int8x16_t))v25->__on_zero_shared)(v25, v24);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_BYTE *)(v16 + 280) = a6;
  *(_DWORD *)(v16 + 284) = a7;
  v29 = (_DWORD *)*a4;
  if (*a4)
    ++*v29;
  v169 = *(_DWORD **)(v16 + 16);
  *(_QWORD *)(v16 + 16) = v29;
  v30 = (llvm::vfs *)sub_22E6C62BC(&v169);
  llvm::vfs::getRealFileSystem(v30);
  v31 = operator new();
  v166 = v168;
  if (v168)
  {
    v32 = (unsigned int *)(v168 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (_DWORD *)sub_22F41ABB4(v31, a5, &v166);
  ++*v34;
  v167 = *(_DWORD **)(v16 + 24);
  *(_QWORD *)(v16 + 24) = v34;
  sub_22F2A511C(&v167);
  v35 = v166;
  if (v166)
  {
    v36 = (unsigned int *)(v166 + 8);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (a10)
    v39 = 4;
  else
    v39 = 0;
  *(_BYTE *)(v16 + 1840) = *(_BYTE *)(v16 + 1840) & 0xFB | v39;
  v40 = operator new();
  v41 = (_DWORD *)sub_22F4233E4(v40, *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), a10);
  ++*v41;
  v165 = *(_DWORD **)(v16 + 32);
  *(_QWORD *)(v16 + 32) = v41;
  sub_22F2A5160(&v165);
  v42 = operator new();
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = 0x1800000000;
  *(_DWORD *)v42 = 1;
  v164 = *(_DWORD **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v42;
  sub_22E6C6300(&v164);
  v43 = operator new(0x370uLL);
  *((_QWORD *)v43 + 1) = 0;
  *((_QWORD *)v43 + 2) = 0;
  *(_QWORD *)v43 = &off_24FA6D1A8;
  v44 = sub_22E6C6410((char *)v43 + 24, "/", 1uLL);
  v45 = *(std::__shared_weak_count **)(v16 + 112);
  *(_QWORD *)(v16 + 104) = v44;
  *(_QWORD *)(v16 + 112) = v43;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_147;
  v50 = (const void *)v48;
  v51 = v49;
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    p_dst = (__int128 *)operator new(v53 + 1);
    *((_QWORD *)&__dst + 1) = v51;
    v163 = v54 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_42;
  }
  HIBYTE(v163) = v49;
  p_dst = &__dst;
  if (v49)
LABEL_42:
    memmove(p_dst, v50, v51);
  *((_BYTE *)p_dst + v51) = 0;
  v55 = *(_QWORD *)(v16 + 104);
  v56 = v55 + 192;
  if (*(char *)(v55 + 215) < 0)
    operator delete(*(void **)v56);
  *(_OWORD *)v56 = __dst;
  *(_QWORD *)(v56 + 16) = v163;
  v57 = operator new();
  v58 = *(_QWORD *)(v16 + 112);
  *(_QWORD *)&v161 = *(_QWORD *)(v16 + 104);
  *((_QWORD *)&v161 + 1) = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = sub_22F13778C(v57, &v161, *(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 16), *(_QWORD *)v16, 0);
  v62 = *(_QWORD *)(v16 + 48);
  *(_QWORD *)(v16 + 48) = v61;
  if (v62)
  {
    v63 = sub_22E6C6660(v62);
    MEMORY[0x2348A0E9C](v63, 0x10F2C40BAE81D25);
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (char *)operator new(0x150uLL);
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 2) = 0;
  *(_QWORD *)v67 = &off_24FA6D1E0;
  *(_OWORD *)(v67 + 40) = 0u;
  *(_OWORD *)(v67 + 56) = 0u;
  *(_OWORD *)(v67 + 72) = 0u;
  *((_QWORD *)v67 + 11) = 0;
  *((_DWORD *)v67 + 24) = 1;
  *(_OWORD *)(v67 + 104) = 0u;
  *(_OWORD *)(v67 + 120) = 0u;
  *(_OWORD *)(v67 + 136) = 0u;
  *(_OWORD *)(v67 + 152) = 0u;
  *(_OWORD *)(v67 + 167) = 0u;
  *((_QWORD *)v67 + 25) = 0;
  *((_QWORD *)v67 + 24) = 0;
  *((_QWORD *)v67 + 23) = v67 + 192;
  *((_DWORD *)v67 + 52) = 0;
  v67[212] = 0;
  *((_DWORD *)v67 + 54) = 16777472;
  v67[220] = 1;
  *((_QWORD *)v67 + 40) = 0;
  *((_WORD *)v67 + 164) = 0;
  *((_DWORD *)v67 + 83) = 0;
  *((_WORD *)v67 + 136) = 0;
  *((_OWORD *)v67 + 15) = 0u;
  *((_OWORD *)v67 + 16) = 0u;
  *((_OWORD *)v67 + 14) = 0u;
  *((_DWORD *)v67 + 73) = 0;
  v68 = v67 + 284;
  v69 = *(std::__shared_weak_count **)(v16 + 128);
  *(_QWORD *)(v16 + 128) = v67;
  *(_OWORD *)(v67 + 24) = 0u;
  v67 += 24;
  *(_QWORD *)(v67 + 252) = 0;
  *v68 = 0;
  *(_QWORD *)(v16 + 120) = v67;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *(_QWORD *)(v16 + 48);
  v160 = 0;
  v73 = *(_QWORD *)(v16 + 16);
  v74 = *(_QWORD *)v16;
  v75 = *(_QWORD *)(v16 + 32);
  v76 = operator new(0xBC0uLL);
  v77 = v76;
  v76[2] = 0;
  *v76 = &unk_24FA6D218;
  v76[1] = 0;
  v78 = v76 + 3;
  v79 = *(_QWORD *)(v16 + 128);
  *(_QWORD *)&__dst = *(_QWORD *)(v16 + 120);
  *((_QWORD *)&__dst + 1) = v79;
  if (v79)
  {
    v80 = (unint64_t *)(v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  sub_22F18C5EC((uint64_t)(v76 + 3), &__dst, v73, v74, v75, v72, v16 + 264, 0, 0, 0);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *(std::__shared_weak_count **)(v16 + 72);
  *(_QWORD *)(v16 + 64) = v78;
  *(_QWORD *)(v16 + 72) = v77;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *(_QWORD **)(v16 + 64);
  if (a3 >= 1)
  {
    v149 = operator new();
    v150 = (_DWORD *)sub_22EF57A38(v149, *(_QWORD *)v16, *(llvm::SpecialCaseList **)(v16 + 32), (uint64_t)(v88 + 68), (uint64_t)(v88 + 84), v88[85], *(_DWORD *)(v16 + 292));
    ++*v150;
    v159 = *(_DWORD **)(v16 + 80);
    *(_QWORD *)(v16 + 80) = v150;
    sub_22F2A50D8(&v159);
  }
  if (getenv("LIBCLANG_DISABLE_PCH_VALIDATION"))
    v89 = 3;
  else
    v89 = 0;
  v90 = operator new();
  v91 = *(_DWORD **)(v16 + 40);
  v92 = *(_QWORD *)(v16 + 80);
  v158 = 0;
  v94 = sub_22E78B02C(v90, v88, v91, v92, a2, 0, 0, v93, "", 0, v89, a9, 0, 0, 0, 1, &v158);
  ++*(_DWORD *)(v94 + 32);
  v95 = *(_QWORD *)(v16 + 136);
  *(_QWORD *)(v16 + 136) = v90;
  if (v95)
  {
    v96 = *(_DWORD *)(v95 + 32) - 1;
    *(_DWORD *)(v95 + 32) = v96;
    if (!v96)
      (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 24) + 8))(v95 + 24);
  }
  v151 = v88;
  v97 = a8;
  v98 = v158;
  v158 = 0;
  if (v98)
  {
    v99 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v99, 0x10B2C402AE41D3ELL);
  }
  v100 = *(_QWORD *)(v16 + 136);
  v101 = *(_QWORD *)(v16 + 64);
  v102 = *(_QWORD *)(v16 + 80);
  v103 = *(_QWORD *)(v16 + 104);
  v104 = *(_QWORD *)(v16 + 120);
  v105 = *(_QWORD *)v16;
  v106 = operator new();
  *(_QWORD *)v106 = &off_24FA6D250;
  *(_QWORD *)(v106 + 8) = v101;
  *(_QWORD *)(v106 + 16) = v102;
  *(_QWORD *)(v106 + 24) = v103;
  *(_QWORD *)(v106 + 32) = v104;
  *(_QWORD *)(v106 + 40) = v105;
  *(_QWORD *)(v106 + 48) = v16 + 88;
  *(_QWORD *)(v106 + 56) = v16 + 56;
  *(_QWORD *)(v106 + 64) = &v160;
  *(_WORD *)(v106 + 72) = 0;
  v107 = *(_QWORD *)(v100 + 56);
  *(_QWORD *)(v100 + 56) = v106;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *(_QWORD *)(v16 + 80);
  v109 = *(_QWORD *)(v16 + 136);
  if (v108)
  {
    v110 = a1;
    if (v109)
    {
      ++*(_DWORD *)(v109 + 32);
      v111 = v109 + 24;
    }
    else
    {
      v111 = 0;
    }
    v112 = *(_DWORD **)(v108 + 16048);
    *(_QWORD *)(v108 + 16048) = v111;
    if (v112)
    {
      v113 = v112[2] - 1;
      v112[2] = v113;
      if (!v113)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v112 + 8))(v112);
        v109 = *(_QWORD *)(v16 + 136);
      }
    }
  }
  else
  {
    v110 = a1;
  }
  v114 = *(_BYTE *)(v110 + 23);
  v115 = v114 < 0;
  if (v114 >= 0)
    v116 = (_BYTE *)v110;
  else
    v116 = *(_BYTE **)v110;
  v117 = v114 & 0x7F;
  if (v115)
    v118 = *(_QWORD *)(v110 + 8);
  else
    v118 = v117;
  if (sub_22E77A990(v109, v116, v118, 4u, 0, 0, 0) - 1 <= 5)
  {
    v119 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(v119 + 312) = 0x31300000000;
    if (*(char *)(v119 + 311) < 0)
    {
      **(_BYTE **)(v119 + 288) = 0;
      *(_QWORD *)(v119 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v119 + 288) = 0;
      *(_BYTE *)(v119 + 311) = 0;
    }
    v156[0] = v119 + 320;
    v156[1] = 0;
    v156[2] = v119;
    v157 = 1;
    *(_BYTE *)(v119 + 320) = 0;
    *(_DWORD *)(v119 + 664) = 0;
    v141 = *(unsigned int *)(v119 + 776);
    if ((_DWORD)v141)
    {
      v142 = *(_QWORD *)(v119 + 768);
      v143 = 56 * v141;
      do
      {
        if (*(char *)(v142 + v143 - 9) < 0)
          operator delete(*(void **)(v142 + v143 - 32));
        v143 -= 56;
      }
      while (v143);
    }
    *(_DWORD *)(v119 + 776) = 0;
    sub_22E3BB0B8((uint64_t)v156);
    v140 = 0;
    v133 = v152;
    v132 = v153;
    goto LABEL_133;
  }
  v120 = **(_QWORD **)(*(_QWORD *)(v16 + 136) + 144);
  v123 = *(const void **)(v120 + 128);
  v121 = v120 + 128;
  v122 = v123;
  v124 = *(_BYTE *)(v121 + 23);
  if (v124 >= 0)
    v125 = (const void *)v121;
  else
    v125 = v122;
  v126 = *(_QWORD *)(v121 + 8);
  if (v124 >= 0)
    v127 = v124 & 0x7F;
  else
    v127 = v126;
  if (v127 > 0x7FFFFFFFFFFFFFF7)
LABEL_147:
    abort();
  if (v127 >= 0x17)
  {
    v130 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v130 = v127 | 7;
    v131 = v130 + 1;
    v128 = (__int128 *)operator new(v130 + 1);
    *((_QWORD *)&__dst + 1) = v127;
    v163 = v131 | 0x8000000000000000;
    *(_QWORD *)&__dst = v128;
    v129 = v16 + 352;
  }
  else
  {
    HIBYTE(v163) = v127;
    v128 = &__dst;
    v129 = v16 + 352;
    if (!v127)
      goto LABEL_116;
  }
  memmove(v128, v125, v127);
LABEL_116:
  v132 = v153;
  *((_BYTE *)v128 + v127) = 0;
  if (*(char *)(v16 + 375) < 0)
    operator delete(*(void **)v129);
  *(_OWORD *)v129 = __dst;
  *(_QWORD *)(v129 + 16) = v163;
  *((_DWORD *)v151 + 133) = v160;
  v133 = v152;
  if (a3 >= 1)
  {
    v134 = operator new();
    *(_QWORD *)v134 = &unk_24FABA2C8;
    *(_BYTE *)(v134 + 8) = 0;
    v135 = *(_QWORD *)(v16 + 232);
    *(_QWORD *)(v16 + 232) = v134;
    if (v135)
      (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
    if (a3 >= 2)
    {
      v136 = operator new();
      v137 = sub_22E8FCE54(v136, v151, *(_QWORD *)(v16 + 80), *(_QWORD *)(v16 + 232), 0, 0);
      v138 = *(_QWORD *)(v16 + 240);
      *(_QWORD *)(v16 + 240) = v137;
      if (v138)
      {
        v139 = sub_22E8FFA2C(v138);
        MEMORY[0x2348A0E9C](v139, 0x10F3C40F108FF96);
        v137 = *(_QWORD *)(v16 + 240);
      }
      sub_22E8FD98C(v137);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 136) + 176))(*(_QWORD *)(v16 + 136), *(_QWORD *)(v16 + 240));
    }
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v16 + 16) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 48), v151[7], v151);
  v140 = v16;
  v16 = 0;
LABEL_133:
  *v97 = v140;
  result = v168;
  if (v168)
  {
    v145 = (unsigned int *)(v168 + 8);
    do
    {
      v146 = __ldaxr(v145);
      v147 = v146 - 1;
    }
    while (__stlxr(v147, v145));
    if (!v147)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (v133 && !*(_BYTE *)(v133 + 16))
    result = llvm::CrashRecoveryContext::unregisterCleanup();
  if (v132 && !*(_BYTE *)(v132 + 16))
    result = llvm::CrashRecoveryContext::unregisterCleanup();
  if (v16)
  {
    v148 = sub_22E6C3914(v16);
    return MEMORY[0x2348A0E9C](v148, 0x10B2C408FD5D9F4);
  }
  return result;
}

BOOL sub_22E6C4D08(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v7;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  _BOOL8 result;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;

  v7 = a2 & 0x7FFFFFFF;
  v9 = a3 + 1;
  if (a3 + 1 > 1)
  {
    if ((a3 & 0x80000000) != 0)
    {
      v11 = -2 - a3;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a3) >> 6)) >> (-2 - a3)) & 1) != 0)
        v10 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v11);
      else
        v10 = (_DWORD *)sub_22F1E1134(a1, v11, 0);
    }
    else
    {
      v10 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * a3);
    }
  }
  else
  {
    v10 = *(_DWORD **)(a1 + 184);
  }
  if ((*v10 & 0x7FFFFFFFu) > v7)
    return 0;
  if (a3 == -2)
  {
    result = 1;
    if (!a4)
      return result;
    goto LABEL_20;
  }
  if (v9 == *(_DWORD *)(a1 + 192))
  {
    v13 = *(_DWORD *)(a1 + 216);
  }
  else
  {
    if ((v9 & 0x80000000) != 0)
    {
      v15 = -3 - a3;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-3 - a3) >> 6)) >> (-3 - a3)) & 1) != 0)
        v14 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v15);
      else
        v14 = (_DWORD *)sub_22F1E1134(a1, v15, 0);
    }
    else
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * v9);
    }
    v13 = *v14 & 0x7FFFFFFF;
  }
  result = v13 > v7;
  if (a4)
  {
LABEL_20:
    if (result)
    {
      if (v9 > 1)
      {
        if ((a3 & 0x80000000) != 0)
        {
          v17 = -2 - a3;
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * ((-2 - a3) >> 6)) >> (-2 - a3)) & 1) != 0)
            v16 = (_DWORD *)(*(_QWORD *)(a1 + 200) + 24 * v17);
          else
            v16 = (_DWORD *)sub_22F1E1134(a1, v17, 0);
        }
        else
        {
          v16 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 24 * a3);
        }
      }
      else
      {
        v16 = *(_DWORD **)(a1 + 184);
      }
      *a4 = v7 - (*v16 & 0x7FFFFFFF);
      return 1;
    }
  }
  return result;
}

void sub_22E6C4EBC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6C4ED0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 40) = a2;
  if (a3)
    *(_QWORD *)(result + 48) = *(_QWORD *)(a3 + 88);
  return result;
}

void sub_22E6C4EE4(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _DWORD *v11;
  char v12;
  const void *v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  size_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t i;
  char v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  unsigned int v59;
  unint64_t v60;
  void ***v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  BOOL v65;
  char *v66;
  _BYTE *v67;
  uint64_t v68;
  void **v69;
  __int128 v70;
  std::string::size_type v71;
  __int128 v72;
  std::string::size_type v73;
  int v74;
  void *__p[2];
  __int128 v76;
  __int128 v77;
  _BYTE v78[24];
  void *v79;
  char v80;
  void *v81;
  void *v82;
  uint64_t v83;
  char v84;
  int v85;
  __int128 __dst;
  std::string v87;
  char v88;

  v85 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    if (a2 == 3)
    {
      ++*(_DWORD *)(a1 + 8);
    }
    else if (a2 >= 4)
    {
      ++*(_DWORD *)(a1 + 12);
    }
  }
  v6 = *(_QWORD *)(*a3 + 64);
  if (!v6)
  {
    if (a2 <= 3 && !*(_BYTE *)(a1 + 32))
      return;
LABEL_15:
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      sub_22F2A4A34(v8, &v85, a3);
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        return;
      v9 = (_BYTE *)(**(_QWORD **)(a1 + 16) + 96 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8) - 96);
      v78[0] = 0;
      v84 = 0;
    }
    else
    {
      if (!*(_QWORD *)(a1 + 24))
        return;
      v78[0] = 0;
      v84 = 0;
      v9 = v78;
      sub_22F1CE30C((uint64_t)v78, a2, a3);
      v84 = 1;
      v10 = *(_QWORD *)(a1 + 24);
    }
    v11 = *(_DWORD **)(a1 + 40);
    v73 = 0;
    v72 = 0uLL;
    *(_OWORD *)__p = 0u;
    v76 = 0u;
    v77 = 0u;
    v69 = *(void ***)v9;
    v12 = v9[47];
    if (v12 >= 0)
      v13 = v9 + 24;
    else
      v13 = (const void *)*((_QWORD *)v9 + 3);
    if (v12 >= 0)
      v14 = v12 & 0x7F;
    else
      v14 = *((_QWORD *)v9 + 4);
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_112;
    v68 = v10;
    if (v14 >= 0x17)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      v87.__r_.__value_.__r.__words[0] = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      v87.__r_.__value_.__s.__data_[7] = v14;
      p_dst = &__dst;
      if (!v14)
      {
LABEL_32:
        *((_BYTE *)p_dst + v14) = 0;
        v70 = __dst;
        v71 = v87.__r_.__value_.__r.__words[0];
        v74 = 0;
        v18 = *((_DWORD *)v9 + 2);
        if (!v18)
          goto LABEL_91;
        v19 = (_QWORD *)*((_QWORD *)v9 + 2);
        if ((v18 & 0x80000000) != 0)
          v18 = sub_22F423AE4(*((_QWORD *)v9 + 2), v18);
        v20 = v18;
        v21 = sub_22F1E27D0(v19, v18);
        if (v22 <= 0x7FFFFFFFFFFFFFF7)
        {
          v23 = (const void *)v21;
          v24 = v22;
          if (v22 >= 0x17)
          {
            v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v26 = v22 | 7;
            v27 = v26 + 1;
            v25 = (__int128 *)operator new(v26 + 1);
            *((_QWORD *)&__dst + 1) = v24;
            v87.__r_.__value_.__r.__words[0] = v27 | 0x8000000000000000;
            *(_QWORD *)&__dst = v25;
          }
          else
          {
            v87.__r_.__value_.__s.__data_[7] = v22;
            v25 = &__dst;
            if (!v22)
              goto LABEL_43;
          }
          memmove(v25, v23, v24);
LABEL_43:
          *((_BYTE *)v25 + v24) = 0;
          v73 = v87.__r_.__value_.__r.__words[0];
          v72 = __dst;
          v28 = v87.__r_.__value_.__s.__data_[7] & 0x7F;
          if (v87.__r_.__value_.__s.__data_[7] < 0)
            v28 = *((_QWORD *)&v72 + 1);
          if (v28)
          {
            v74 = sub_22E677168((uint64_t)v19, v20) >> 32;
            v29 = *((_QWORD *)v9 + 6);
            v30 = *((_QWORD *)v9 + 7);
            v67 = v9;
            if (v30 != v29)
            {
              v31 = (char *)__p[1];
              do
              {
                v20 = v20 & 0xFFFFFFFF00000000 | *(unsigned int *)(v29 + 8);
                v32 = sub_22E6C581C(*(_QWORD *)v29, v20, (uint64_t)v19, v11);
                v33 = v32;
                if ((unint64_t)v31 >= (unint64_t)v76)
                {
                  v35 = (char *)__p[0];
                  v36 = (v31 - (char *)__p[0]) >> 3;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61)
                    goto LABEL_112;
                  v38 = v76 - (unint64_t)__p[0];
                  if ((uint64_t)(v76 - (unint64_t)__p[0]) >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                  {
                    if (v39 >> 61)
LABEL_113:
                      sub_22E3B3F8C();
                    v40 = (char *)operator new(8 * v39);
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v41 = (unint64_t *)&v40[8 * v36];
                  *v41 = v33;
                  v34 = v41 + 1;
                  if (v31 != v35)
                  {
                    do
                    {
                      v42 = *((_QWORD *)v31 - 1);
                      v31 -= 8;
                      *--v41 = v42;
                    }
                    while (v31 != v35);
                    v31 = (char *)__p[0];
                  }
                  __p[0] = v41;
                  __p[1] = v34;
                  *(_QWORD *)&v76 = &v40[8 * v39];
                  if (v31)
                    operator delete(v31);
                }
                else
                {
                  *(_QWORD *)v31 = v32;
                  v34 = v31 + 8;
                }
                __p[1] = v34;
                v29 += 12;
                v31 = (char *)v34;
              }
              while (v29 != v30);
            }
            v43 = *((_QWORD *)v67 + 9);
            for (i = *((_QWORD *)v67 + 10); v43 != i; v43 += 56)
            {
              __dst = 0u;
              memset(&v87, 0, sizeof(v87));
              *(_QWORD *)&__dst = sub_22E6C581C(*(_QWORD *)v43, *(_DWORD *)(v43 + 8), (uint64_t)v19, v11);
              *((_QWORD *)&__dst + 1) = sub_22E6C581C(*(_QWORD *)(v43 + 12), *(_DWORD *)(v43 + 20), (uint64_t)v19, v11);
              std::string::operator=(&v87, (const std::string *)(v43 + 24));
              v45 = *(_BYTE *)(v43 + 48);
              v88 = v45;
              v46 = v77;
              if ((unint64_t)v77 >= *((_QWORD *)&v77 + 1))
              {
                v49 = *((_QWORD *)&v76 + 1);
                v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *((_QWORD *)&v76 + 1)) >> 4);
                v51 = v50 + 1;
                if (v50 + 1 > 0x555555555555555)
                  goto LABEL_112;
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v77 + 1) - *((_QWORD *)&v76 + 1)) >> 4) > v51)
                  v51 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v77 + 1) - *((_QWORD *)&v76 + 1)) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v77 + 1) - *((_QWORD *)&v76 + 1)) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v52 = 0x555555555555555;
                else
                  v52 = v51;
                if (v52 > 0x555555555555555)
                  goto LABEL_113;
                v53 = (char *)operator new(48 * v52);
                v54 = &v53[16 * ((uint64_t)(v77 - *((_QWORD *)&v76 + 1)) >> 4)];
                v55 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
                *(_OWORD *)v54 = __dst;
                *((_OWORD *)v54 + 1) = v55;
                *((_QWORD *)v54 + 4) = *((_QWORD *)&v87.__r_.__value_.__l + 2);
                memset(&v87, 0, sizeof(v87));
                v54[40] = v45;
                if (v46 == v49)
                {
                  v48 = v54 + 48;
                  *((_QWORD *)&v76 + 1) = &v53[48 * v50];
                  *((_QWORD *)&v77 + 1) = &v53[48 * v52];
                  if (!v46)
                    goto LABEL_85;
                }
                else
                {
                  v56 = v46;
                  v57 = &v53[48 * v50];
                  do
                  {
                    *((_OWORD *)v57 - 3) = *(_OWORD *)(v56 - 48);
                    v58 = *(_OWORD *)(v56 - 32);
                    *((_QWORD *)v57 - 2) = *(_QWORD *)(v56 - 16);
                    *((_OWORD *)v57 - 2) = v58;
                    *(_QWORD *)(v56 - 24) = 0;
                    *(_QWORD *)(v56 - 16) = 0;
                    *(_QWORD *)(v56 - 32) = 0;
                    *(v57 - 8) = *(_BYTE *)(v56 - 8);
                    v57 -= 48;
                    v56 -= 48;
                  }
                  while (v56 != v49);
                  v48 = v54 + 48;
                  *((_QWORD *)&v76 + 1) = v57;
                  *(_QWORD *)&v77 = v54 + 48;
                  *((_QWORD *)&v77 + 1) = &v53[48 * v52];
                  do
                  {
                    if (*(char *)(v46 - 9) < 0)
                      operator delete(*(void **)(v46 - 32));
                    v46 -= 48;
                  }
                  while (v46 != v49);
                  v46 = v49;
                  if (!v49)
                    goto LABEL_85;
                }
                operator delete((void *)v46);
              }
              else
              {
                *(_OWORD *)v77 = __dst;
                v47 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
                *(_QWORD *)(v46 + 32) = *((_QWORD *)&v87.__r_.__value_.__l + 2);
                *(_OWORD *)(v46 + 16) = v47;
                memset(&v87, 0, sizeof(v87));
                *(_BYTE *)(v46 + 40) = v88;
                v48 = (char *)(v46 + 48);
              }
LABEL_85:
              *(_QWORD *)&v77 = v48;
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v87.__r_.__value_.__l.__data_);
            }
          }
LABEL_91:
          v59 = *(_DWORD *)(v68 + 8);
          v60 = *(_QWORD *)v68;
          v61 = &v69;
          if (v59 >= *(_DWORD *)(v68 + 12))
          {
            v65 = v60 + 112 * v59 > (unint64_t)&v69;
            if (v60 <= (unint64_t)&v69 && v65)
            {
              v66 = (char *)&v69 - v60;
              sub_22F2A4B84(v68);
              v60 = *(_QWORD *)v68;
              v61 = (void ***)&v66[*(_QWORD *)v68];
            }
            else
            {
              sub_22F2A4B84(v68);
              v60 = *(_QWORD *)v68;
              v61 = &v69;
            }
          }
          v62 = v60 + 112 * *(unsigned int *)(v68 + 8);
          *(_QWORD *)v62 = *v61;
          v63 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v62 + 24) = v61[3];
          *(_OWORD *)(v62 + 8) = v63;
          v61[2] = 0;
          v61[3] = 0;
          v61[1] = 0;
          v64 = *((_OWORD *)v61 + 2);
          *(_QWORD *)(v62 + 48) = v61[6];
          *(_OWORD *)(v62 + 32) = v64;
          v61[5] = 0;
          v61[6] = 0;
          v61[4] = 0;
          *(_DWORD *)(v62 + 56) = *((_DWORD *)v61 + 14);
          *(_QWORD *)(v62 + 72) = 0;
          *(_QWORD *)(v62 + 80) = 0;
          *(_QWORD *)(v62 + 64) = 0;
          *(_OWORD *)(v62 + 64) = *((_OWORD *)v61 + 4);
          *(_QWORD *)(v62 + 80) = v61[10];
          v61[8] = 0;
          v61[9] = 0;
          v61[10] = 0;
          *(_QWORD *)(v62 + 88) = 0;
          *(_QWORD *)(v62 + 96) = 0;
          *(_QWORD *)(v62 + 104) = 0;
          *(_OWORD *)(v62 + 88) = *(_OWORD *)(v61 + 11);
          *(_QWORD *)(v62 + 104) = v61[13];
          v61[11] = 0;
          v61[12] = 0;
          v61[13] = 0;
          ++*(_DWORD *)(v68 + 8);
          *(_QWORD *)&__dst = (char *)&v76 + 8;
          sub_22E63B7B0((void ***)&__dst);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (SHIBYTE(v73) < 0)
            operator delete((void *)v72);
          if (SHIBYTE(v71) < 0)
            operator delete((void *)v70);
          if (v84)
          {
            v69 = (void **)&v83;
            sub_22E6C60B8(&v69);
            if (v81)
            {
              v82 = v81;
              operator delete(v81);
            }
            if (v80 < 0)
              operator delete(v79);
            v84 = 0;
          }
          return;
        }
LABEL_112:
        abort();
      }
    }
    memmove(p_dst, v13, v14);
    goto LABEL_32;
  }
  if (v6 == *(_QWORD *)(a1 + 48))
  {
    if (a2 > 3 || *(_BYTE *)(a1 + 32))
      goto LABEL_15;
    v7 = *(_DWORD *)(*a3 + 312);
    if (v7)
    {
      if (v7 < 0)
        v7 = sub_22F1E22F0(*(_QWORD **)(*a3 + 64), v7);
      if (sub_22F2A4A8C(v6, v7))
        goto LABEL_15;
    }
  }
}

void sub_22E6C5690(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  void *v11;
  void **v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 96 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 48) = v3[3];
      *(_QWORD *)(a2 + 64) = *((_QWORD *)v3 + 8);
      *((_QWORD *)v3 + 6) = 0;
      *((_QWORD *)v3 + 7) = 0;
      *((_QWORD *)v3 + 8) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)v3 + 72);
      *(_QWORD *)(a2 + 88) = *((_QWORD *)v3 + 11);
      *((_QWORD *)v3 + 9) = 0;
      *((_QWORD *)v3 + 10) = 0;
      *((_QWORD *)v3 + 11) = 0;
      v3 += 6;
      a2 += 96;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*a1;
      v9 = 6 * v7;
      do
      {
        v10 = &v8[v9];
        v12 = (void **)&v8[v9 - 1] - 1;
        sub_22E6C60B8(&v12);
        v11 = *(void **)&v8[v9 - 3];
        if (v11)
        {
          *((_QWORD *)v10 - 5) = v11;
          operator delete(v11);
        }
        if (*((char *)v10 - 49) < 0)
          operator delete(*((void **)&v8[v9 - 4] - 1));
        v9 -= 6;
      }
      while (v9 * 16);
    }
  }
}

__n128 sub_22E6C5798(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

unint64_t sub_22E6C581C(unint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v5;
  int v6;
  unsigned int v7;

  v5 = sub_22F141C1C(a1, a2, a3, a4);
  v6 = HIDWORD(v5);
  v7 = sub_22E677168(a3, v5) >> 32;
  return sub_22E677168(a3, v6) & 0xFFFFFFFF00000000 | v7;
}

uint64_t sub_22E6C586C(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 88);
  sub_22E63B7B0(&v4);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22E6C58D4(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 7;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char **sub_22E6C5940@<X0>(char **result@<X0>, char **a2@<X8>)
{
  char *v3;
  char **v4;
  char **v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  v3 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)v3 + 48))(v3, MEMORY[0x24BED7780]))
    {
      *a2 = 0;
      v4 = (char **)*((_QWORD *)v3 + 1);
      v5 = (char **)*((_QWORD *)v3 + 2);
      if (v4 != v5)
      {
        v6 = 0;
        v7 = MEMORY[0x24BED5A38];
        do
        {
          v10 = v6;
          v8 = *v4;
          *v4 = 0;
          if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v8 + 48))(v8, v7))
          {
            (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
            v8 = 0;
          }
          v9 = v8;
          sub_22F2436E4(&v10, &v9, &v11);
          v6 = v11;
          *a2 = v11;
          v11 = 0;
          if (v9)
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          ++v4;
        }
        while (v4 != v5);
      }
      return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v3 + 48))(v3, MEMORY[0x24BED5A38]);
      if ((_DWORD)result)
      {
        *a2 = 0;
        return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 8))(v3);
      }
      else
      {
        *a2 = v3;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_22E6C5AA8(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(4 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFFCLL];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        v9 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v8 - 1) = v9;
        v8 -= 4;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[4 * a2];
    if (v2)
      operator delete(v2);
  }
}

void sub_22E6C5B48(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 *v12;
  BOOL v13;
  _QWORD *v14;
  __int128 *v15;
  __int128 *v16;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(_QWORD **)(v6 + 8) : (_QWORD *)v6;
    if (v8)
    {
      v9 = sub_22E679A94((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 4), (const std::string *)(v10 + 2));
          std::string::operator=((std::string *)(v11 + 7), (const std::string *)((char *)v10 + 56));
          sub_22F2A4C7C((uint64_t)a1, v11);
          if (v9)
            v9 = sub_22E679A94((uint64_t)v9);
          else
            v9 = 0;
          v12 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_22E54B6D0((uint64_t)a1, v8);
      if (v9)
      {
        do
        {
          v14 = v9;
          v9 = (_QWORD *)v9[2];
        }
        while (v9);
        sub_22E54B6D0((uint64_t)a1, v14);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_22F2A4D8C((uint64_t)a1, a2 + 2);
      v15 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

void sub_22E6C5CBC(void ***a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  std::string *v14;
  void *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  void **v23;
  void *v24;

  v6 = __str;
  v8 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= a4)
  {
    v13 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v8) >> 4) >= a4)
    {
      if (__str == a3)
      {
        v23 = *a1;
      }
      else
      {
        v23 = *a1;
        do
        {
          std::string::operator=((std::string *)v8, v6);
          v24 = (void *)v6[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v8[5] = v24;
          v23 += 6;
          v6 += 2;
          v8 += 6;
        }
        while (v6 != a3);
        v13 = a1[1];
      }
      while (v13 != v23)
      {
        if (*((char *)v13 - 25) < 0)
          operator delete(*(v13 - 6));
        v13 -= 6;
      }
      a1[1] = v23;
    }
    else
    {
      v14 = (std::string *)((char *)__str + 16 * (((char *)v13 - (char *)v8) >> 4));
      if (v13 != v8)
      {
        do
        {
          std::string::operator=((std::string *)v8, v6);
          v15 = (void *)v6[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v8[5] = v15;
          v6 += 2;
          v8 += 6;
        }
        while (v6 != v14);
        v8 = a1[1];
      }
      v16 = (char *)v8;
      if (v14 != a3)
      {
        v17 = 0;
        do
        {
          v18 = (char *)&v8[v17 / 8];
          v19 = (char *)&v14[v17 / 0x18];
          if (SHIBYTE(v14[v17 / 0x18].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v20 = *(_OWORD *)v19;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v21 = (char *)&v8[v17 / 8];
          v22 = *(_OWORD *)&v14[v17 / 0x18 + 1].__r_.__value_.__l.__data_;
          *((_QWORD *)v21 + 5) = *((_QWORD *)&v14[v17 / 0x18 + 1].__r_.__value_.__l + 2);
          *(_OWORD *)(v21 + 24) = v22;
          v17 += 48;
        }
        while (&v14[v17 / 0x18] != a3);
        v16 = (char *)&v8[v17 / 8];
      }
      a1[1] = (void **)v16;
    }
  }
  else
  {
    sub_22E6C5F20((void **)a1);
    if (a4 > 0x555555555555555)
      goto LABEL_38;
    v9 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v9;
    if (v10 > 0x555555555555555)
LABEL_38:
      abort();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    *a1 = (void **)v12;
    a1[1] = (void **)v12;
    a1[2] = (void **)&v12[16 * v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        *((_QWORD *)v12 + 2) = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v12 + 24) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
      *((_QWORD *)v12 + 5) = *((_QWORD *)&v6[1].__r_.__value_.__l + 2);
      v6 += 2;
      v12 += 48;
    }
    a1[1] = (void **)v12;
  }
}

void sub_22E6C5F20(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*(v3 - 6));
        v3 -= 6;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_22E6C5F8C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 24);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 13) = *(_QWORD *)((char *)v6 - 11);
      *(_OWORD *)v4 = v7;
      result = (_QWORD *)(v4 + 24);
      if (*((char *)v6 + 23) < 0)
      {
        result = sub_22E3BB2B4(result, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v6 + 2);
        *(_OWORD *)result = v8;
      }
      v9 = (uint64_t)v6 - 24;
      *(_BYTE *)(v4 + 48) = *((_BYTE *)v6 + 24);
      v4 += 56;
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v9 + 56 != a3);
  }
  v3[1] = v4;
  return result;
}

_QWORD *sub_22E6C6020(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      abort();
    v6 = result;
    v7 = 56 * a4;
    v8 = (char *)operator new(56 * a4);
    *v6 = v8;
    v6[1] = v8;
    v6[2] = &v8[v7];
    return sub_22E6C5F8C(v6, a2, a3);
  }
  return result;
}

void sub_22E6C60B8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 7;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E6C6130(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    sub_22E6C61A4((uint64_t **)(a1 + 88));
    operator delete(*v2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    sub_22E6C6204((uint64_t **)(a1 + 64));
    operator delete(*(void **)(a1 + 64));
  }
  if (*(_QWORD *)(a1 + 40))
  {
    sub_22E3B485C((uint64_t *)(a1 + 40));
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_22E6C61A4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 3;
    do
    {
      if (*v4)
      {
        sub_22E3B485C(v4);
        operator delete((void *)*v4);
      }
      v5 = v4 - 1;
      v4 -= 4;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

void sub_22E6C6204(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 3;
    do
    {
      if (*v4)
      {
        sub_22E3B485C(v4);
        operator delete((void *)*v4);
      }
      v5 = v4 - 2;
      v4 -= 5;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_22E6C6264(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 72);
  sub_22E6C60B8(&v4);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

_DWORD *sub_22E6C62BC(_DWORD **a1)
{
  _DWORD *result;

  result = *a1;
  if (result)
  {
    if ((*result)-- == 1)
    {
      sub_22F1CB5CC((uint64_t)result);
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

_DWORD **sub_22E6C6300(_DWORD **result)
{
  _DWORD *v1;

  v1 = *result;
  if (*result)
  {
    if ((*v1)-- == 1)
    {
      sub_22F2A4FE4((uint64_t)(v1 + 2));
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

uint64_t sub_22E6C6358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  BOOL v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = (llvm *)((char *)v5 + 8) == 0;
        else
          v6 = 1;
        if (!v6)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

_DWORD *sub_22E6C63D0(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 40);
  if ((*result)-- == 1)
  {
    sub_22F1CB5CC((uint64_t)result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

char *sub_22E6C6410(char *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)__dst + 1) = __len;
    *((_QWORD *)__dst + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)__dst = v6;
  }
  else
  {
    __dst[23] = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  v9 = 0;
  *((_BYTE *)v6 + __len) = 0;
  *((_QWORD *)__dst + 19) = 0;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_WORD *)(__dst + 215) = 3;
  *((_DWORD *)__dst + 48) = 7823730;
  *(_QWORD *)(__dst + 220) = 0x28DE8000093A80;
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 17) = 0;
  *((_QWORD *)__dst + 18) = __dst + 152;
  *((_QWORD *)__dst + 22) = 0;
  *((_QWORD *)__dst + 23) = 0;
  *((_QWORD *)__dst + 29) = 0;
  *((_QWORD *)__dst + 30) = 1;
  do
  {
    v10 = &__dst[v9];
    *((_QWORD *)v10 + 31) = -4096;
    *((_QWORD *)v10 + 32) = 0;
    v9 += 16;
  }
  while (v9 != 256);
  *((_QWORD *)__dst + 63) = __dst + 520;
  *((_QWORD *)__dst + 64) = 0x1000000000;
  *((_QWORD *)__dst + 99) = 0;
  *((_QWORD *)__dst + 98) = 0;
  *((_QWORD *)__dst + 97) = __dst + 784;
  *((_OWORD *)__dst + 50) = 0u;
  *((_OWORD *)__dst + 51) = 0u;
  *((_OWORD *)__dst + 52) = 0u;
  *((_WORD *)__dst + 424) = *((_WORD *)__dst + 424) & 0xE000 | 0x40B;
  return __dst;
}

uint64_t sub_22E6C656C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 824);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 800);
  sub_22E3B3CC8(&v3);
  sub_22E5EFB0C(a1 + 776, *(char **)(a1 + 784));
  sub_22E58304C((void **)(a1 + 504));
  sub_22E5830E4(a1 + 240);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  v3 = (void **)(a1 + 168);
  sub_22E3B3CC8(&v3);
  sub_22E54B6D0(a1 + 144, *(_QWORD **)(a1 + 152));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v3 = (void **)(a1 + 48);
  sub_22E6187CC(&v3);
  v3 = (void **)(a1 + 24);
  sub_22E6187CC(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22E6C6660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **v11;

  free(*(void **)(a1 + 1936));
  sub_22E3B4EF4(a1 + 1960);
  sub_22E6C67F0(a1 + 1912);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1912), (void *)(96 * *(unsigned int *)(a1 + 1928)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1888), (void *)(16 * *(unsigned int *)(a1 + 1904)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1864), (void *)(16 * *(unsigned int *)(a1 + 1880)));
  sub_22F151AD0(a1 + 488);
  v11 = (void **)(a1 + 464);
  sub_22E6C6860(&v11);
  v2 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v2)
  {
    v3 = sub_22E6C693C(v2);
    MEMORY[0x2348A0E9C](v3, 0x1090C404A2D5703);
  }
  free(*(void **)(a1 + 336));
  sub_22E3B4EF4(a1 + 360);
  free(*(void **)(a1 + 216));
  sub_22E3B4EF4(a1 + 240);
  v4 = *(void ***)(a1 + 192);
  if (v4)
  {
    sub_22E6C69C0((void **)(a1 + 192), v4);
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  v11 = (void **)(a1 + 120);
  sub_22E6187CC(&v11);
  v5 = *(void **)(a1 + 80);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(_QWORD *)(a1 + 64) = v6;
    operator delete(v6);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(8 * *(unsigned int *)(a1 + 32)));
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_22E6C67F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 96 * v1;
    v3 = *(_QWORD *)a1 + 32;
    do
    {
      v4 = *(_QWORD *)(v3 - 32);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = *(void **)(v3 - 24);
        if ((void *)v3 != v5)
        {
          v6 = v3;
          v7 = v2;
          free(v5);
          v3 = v6;
          v2 = v7;
        }
      }
      v3 += 96;
      v2 -= 96;
    }
    while (v2);
  }
}

void sub_22E6C6860(void ***a1)
{
  void **v1;
  uint64_t **v2;
  uint64_t **v4;
  void *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v1 = *a1;
  v2 = (uint64_t **)**a1;
  if (v2)
  {
    v4 = (uint64_t **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
          sub_22E6C68E4((uint64_t)v6, v7);
        v8 = v6 - 1;
        v6 -= 2;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E6C68E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    sub_22F244DD0((uint64_t)(a2 + 2));
    v3 = *a2;
    *a2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x2348A0E9CLL);
  }
}

uint64_t sub_22E6C693C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        v6 = v5 == -8 || v5 == 0;
        if (!v6 && *(char *)(v5 + 31) < 0)
          operator delete(*(void **)(v5 + 8));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  sub_22E3B4EF4(a1 + 24);
  return a1;
}

void **sub_22E6C69C0(void **result, void **a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  v3 = result;
  v4 = (void **)result[1];
  if (v4 != a2)
  {
    v5 = v4 - 16;
    do
    {
      sub_22E6C6A2C(v5);
      sub_22E6C6AB4((uint64_t)(v5 - 3), *(v5 - 2));
      result = sub_22E6C6A2C(v5 - 19);
      v6 = v5 - 23;
      v5 -= 39;
    }
    while (v6 != a2);
  }
  v3[1] = a2;
  return result;
}

void **sub_22E6C6A2C(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 56 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 56];
      if (&v6[v3 - 32] != v4)
        free(v4);
      v3 -= 56;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

void sub_22E6C6AB4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    sub_22E6C6AB4(a1, *a2);
    sub_22E6C6AB4(a1, a2[1]);
    v4 = (_QWORD *)a2[4];
    if (v4 != a2 + 7)
      free(v4);
    operator delete(a2);
  }
}

uint64_t sub_22E6C6B18(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v9;

  v2 = (_QWORD *)(a1 + 272);
  v3 = *(_QWORD **)(a1 + 296);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v9 = (void **)(a1 + 224);
  sub_22E6187CC(&v9);
  v9 = (void **)(a1 + 200);
  sub_22E576240(&v9);
  sub_22E5EFB0C(a1 + 160, *(char **)(a1 + 168));
  v9 = (void **)(a1 + 128);
  sub_22E3B3CC8(&v9);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v9 = (void **)(a1 + 48);
  sub_22E3B3CC8(&v9);
  v9 = (void **)(a1 + 24);
  sub_22E3B3CC8(&v9);
  v9 = (void **)a1;
  sub_22E6187CC(&v9);
  return a1;
}

void sub_22E6C6C34()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E6C6C48(uint64_t a1, const void *a2, uint64_t a3)
{
  int v5;
  void *v6;
  _QWORD *v7;
  size_t v8;
  _BOOL8 v9;
  _QWORD v11[2];
  char v12;

  sub_22F20D5D0(v11);
  v5 = v12;
  v6 = (void *)v11[0];
  if (v12 >= 0)
    v7 = v11;
  else
    v7 = (_QWORD *)v11[0];
  if (v12 >= 0)
    v8 = v12 & 0x7F;
  else
    v8 = v11[1];
  if (a3 == v8)
  {
    if (!v8)
    {
      v9 = 0;
      if ((v12 & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v9 = memcmp(a2, v7, v8) != 0;
    if (v5 < 0)
LABEL_12:
      operator delete(v6);
  }
  else
  {
    v9 = 1;
    if (v12 < 0)
      goto LABEL_12;
  }
  return v9;
}

uint64_t sub_22E6C6CF4(uint64_t a1, __int128 *a2)
{
  if (!*(_BYTE *)(a1 + 72))
  {
    sub_22F2A46A8(*(_QWORD *)(a1 + 40), a2);
    *(_BYTE *)(a1 + 72) = 1;
    sub_22E6C7180(a1);
  }
  return 0;
}

uint64_t sub_22E6C6D38(_QWORD *a1, __int128 *a2)
{
  void *v4;
  char *v5;
  char **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD **v12;
  _DWORD *v13;
  int v14;

  if (!*(_QWORD *)a1[7])
  {
    v4 = operator new(0x1A8uLL);
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &unk_24FA6D308;
    *((_QWORD *)v4 + 1) = 0;
    v5 = sub_22E6C7230((char *)v4 + 24, a2);
    v6 = (char **)a1[6];
    v7 = (std::__shared_weak_count *)v6[1];
    *v6 = v5;
    v6[1] = (char *)v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = sub_22F1EBCCC(*(_QWORD *)(a1[1] + 48), a1[6]);
    v11 = (_DWORD *)v10;
    if (v10)
      ++*(_DWORD *)(v10 + 8);
    v12 = (_DWORD **)a1[7];
    v13 = *v12;
    *v12 = v11;
    if (v13)
    {
      v14 = v13[2] - 1;
      v13[2] = v14;
      if (!v14)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    }
    sub_22E6C7180((uint64_t)a1);
  }
  return 0;
}

uint64_t sub_22E6C6E30()
{
  return 0;
}

uint64_t sub_22E6C6E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10[2];
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  int v14[2];
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18[2];
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  std::string **v22;

  v4 = *(_QWORD *)(a1 + 24);
  v20 = 0;
  v21 = 0;
  v5 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)v18 = v4 + 24;
  v19 = 0;
  sub_22E6C7694(&v19, v5, *(_QWORD *)(v4 + 32), (*(_QWORD *)(v4 + 32) - v5) >> 5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 48);
  *(_QWORD *)v14 = v6 + 48;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_22E6C7744(&v15, v7, *(_QWORD *)(v6 + 56), (*(_QWORD *)(v6 + 56) - v7) >> 5);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v10 = v8 + 824;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_22E618148(&v11, *(_QWORD *)(v8 + 824), *(_QWORD *)(v8 + 832), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 832) - *(_QWORD *)(v8 + 824)) >> 3));
  sub_22F2A5564(*(_QWORD *)(a1 + 24), a2);
  if (*(std::string ***)v10 != &v11)
    sub_22E63B120(*(uint64_t *)v10, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
  v22 = &v11;
  sub_22E3B3CC8((void ***)&v22);
  if (*(std::string ***)v14 != &v15)
    sub_22E6C7A88(*(uint64_t *)v14, v15, v16, ((char *)v16 - (char *)v15) >> 5);
  *(_QWORD *)v10 = &v15;
  sub_22E6187CC((void ***)v10);
  if (*(std::string ***)v18 != &v19)
    sub_22E6C77EC(*(uint64_t *)v18, v19, v20, ((char *)v20 - (char *)v19) >> 5);
  *(_QWORD *)v14 = &v19;
  sub_22E6187CC((void ***)v14);
  return 0;
}

uint64_t sub_22E6C6F90(uint64_t a1, std::string **a2)
{
  std::string **v4;
  std::string **v5;
  std::string **v6;
  std::string **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;

  if (!*(_BYTE *)(a1 + 73))
  {
    v4 = *(std::string ***)(a1 + 24);
    v5 = a2;
    if (v4 != a2)
    {
      sub_22E6C77EC((uint64_t)(v4 + 3), a2[3], a2[4], ((char *)a2[4] - (char *)a2[3]) >> 5);
      v6 = *(std::string ***)(a1 + 24);
      v5 = a2;
      if (v6 != a2)
      {
        sub_22E6C7A88((uint64_t)(v6 + 6), a2[6], a2[7], ((char *)a2[7] - (char *)a2[6]) >> 5);
        v7 = *(std::string ***)(a1 + 24);
        v5 = a2;
        if (v7 != a2)
        {
          sub_22E63B120((uint64_t)(v7 + 103), a2[103], a2[104], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[104] - (char *)a2[103]) >> 3));
          v5 = *(std::string ***)(a1 + 24);
        }
      }
    }
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v8 + 80);
    v10 = (uint64_t)v5[100];
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5[101] - v10) >> 3);
    v12 = (uint64_t)a2[103];
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2[104] - v12) >> 3);
    v14 = *(_QWORD *)(v8 + 48);
    v15 = *(_QWORD *)(v9 + 8);
    v32 = v15;
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_22E71E8E0(v10, v11, v12, v13, v14, &v32, &v33);
    v18 = v33;
    v33 = 0;
    v19 = *(unsigned int **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v18;
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
      v23 = v33;
      if (v33)
      {
        v24 = (unsigned int *)(v33 + 8);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    v27 = v32;
    if (v32)
    {
      v28 = (unsigned int *)(v32 + 8);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    *(_BYTE *)(a1 + 73) = 1;
  }
  return 0;
}

uint64_t sub_22E6C714C(uint64_t a1, uint64_t a2)
{
  sub_22F2A5884(*(_QWORD *)(a1 + 32), a2);
  return 0;
}

uint64_t sub_22E6C7168(uint64_t result, uint64_t a2, int a3)
{
  **(_DWORD **)(result + 64) = a3;
  return result;
}

uint64_t sub_22E6C7178()
{
  return 0;
}

uint64_t sub_22E6C7180(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;

  result = **(_QWORD **)(a1 + 56);
  if (result && *(_BYTE *)(a1 + 72))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 424))(result, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *(_QWORD *)(a1 + 40));
    sub_22F4181CC(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 56), 0);
    result = *(_QWORD *)(a1 + 16);
    if (result)
    {
      sub_22EF596EC(result, **(uint64_t ***)(a1 + 56), 0);
      v3 = *(_QWORD *)(a1 + 16);
      sub_22E462F04((unint64_t *)&v4, *(unsigned int **)(a1 + 40));
      *(_OWORD *)(v3 + 15104) = v4;
      return sub_22F3A7EF0(*(_QWORD *)(a1 + 16) + 16328, (const void ***)(*(_QWORD *)(a1 + 40) + 544));
    }
  }
  return result;
}

char *sub_22E6C7230(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v8 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
  }
  v9 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_22E3BB2B4(v9, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v9 = v10;
  }
  v11 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_22E3BB2B4(v11, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v12 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v11 = v12;
  }
  v13 = __dst + 120;
  if (*((char *)a2 + 143) < 0)
  {
    sub_22E3BB2B4(v13, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v13 = v14;
  }
  *((_DWORD *)__dst + 36) = *((_DWORD *)a2 + 36);
  v15 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_22E3BB2B4(v15, *((void **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v16 = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)__dst + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)v15 = v16;
  }
  *((_QWORD *)__dst + 23) = 0;
  *((_QWORD *)__dst + 24) = 0;
  *((_QWORD *)__dst + 22) = 0;
  sub_22E618148((_QWORD *)__dst + 22, *((_QWORD *)a2 + 22), *((_QWORD *)a2 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3));
  *((_QWORD *)__dst + 25) = 0;
  *((_QWORD *)__dst + 26) = 0;
  *((_QWORD *)__dst + 27) = 0;
  sub_22E618148((_QWORD *)__dst + 25, *((_QWORD *)a2 + 25), *((_QWORD *)a2 + 26), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3));
  sub_22E6C7490((llvm::StringMapImpl *)(__dst + 224), (_QWORD *)a2 + 28);
  sub_22E6C7490((llvm::StringMapImpl *)(__dst + 256), (_QWORD *)a2 + 32);
  *((_QWORD *)__dst + 36) = 0;
  *((_QWORD *)__dst + 37) = 0;
  *((_QWORD *)__dst + 38) = 0;
  sub_22E618148((_QWORD *)__dst + 36, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 3));
  *((_QWORD *)__dst + 39) = *((_QWORD *)a2 + 39);
  v17 = __dst + 320;
  if (*((char *)a2 + 343) < 0)
  {
    sub_22E3BB2B4(v17, *((void **)a2 + 40), *((_QWORD *)a2 + 41));
  }
  else
  {
    v18 = a2[20];
    *((_QWORD *)__dst + 42) = *((_QWORD *)a2 + 42);
    *(_OWORD *)v17 = v18;
  }
  *(_OWORD *)(__dst + 344) = *(__int128 *)((char *)a2 + 344);
  v19 = __dst + 360;
  if (*((char *)a2 + 383) < 0)
  {
    sub_22E3BB2B4(v19, *((void **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v20 = *(__int128 *)((char *)a2 + 360);
    *((_QWORD *)__dst + 47) = *((_QWORD *)a2 + 47);
    *(_OWORD *)v19 = v20;
  }
  *((_OWORD *)__dst + 24) = a2[24];
  return __dst;
}

llvm::StringMapImpl *sub_22E6C7490(llvm::StringMapImpl *this, _QWORD *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this);
    v5 = *(_QWORD *)this;
    v6 = *((unsigned int *)this + 2);
    v7 = *a2;
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)((char *)a2 + 12);
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = v5 + 8 * v6 + 8;
      v10 = v7 + 8 * v6 + 8;
      do
      {
        v11 = *(_QWORD *)(*a2 + 8 * v8);
        if (v11)
          v12 = v11 == -8;
        else
          v12 = 1;
        if (v12)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v8) = v11;
        }
        else
        {
          v13 = *(_QWORD *)v11;
          v14 = MEMORY[0x23489D23C](*(_QWORD *)v11 + 17, 8);
          v15 = v14;
          v16 = v14 + 16;
          if (v13)
            memcpy((void *)(v14 + 16), (const void *)(v11 + 16), v13);
          *(_BYTE *)(v16 + v13) = 0;
          *(_QWORD *)v15 = v13;
          *(_BYTE *)(v15 + 8) = *(_BYTE *)(v11 + 8);
          *(_QWORD *)(*(_QWORD *)this + 8 * v8) = v15;
          *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v10 + 4 * v8);
        }
        ++v8;
      }
      while (v6 != v8);
    }
  }
  return this;
}

uint64_t sub_22E6C759C(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v3 = (void **)(a1 + 288);
  sub_22E3B3CC8(&v3);
  sub_22E622C5C(a1 + 256);
  sub_22E622C5C(a1 + 224);
  v3 = (void **)(a1 + 200);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 176);
  sub_22E3B3CC8(&v3);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22E6C7694(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_22E3BB2B4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      *((_DWORD *)v8 + 6) = *(_DWORD *)(a2 + 24);
      *((_BYTE *)v8 + 28) = *(_BYTE *)(a2 + 28);
      a2 += 32;
      v8 += 4;
    }
    v7[1] = v8;
  }
  return result;
}

_QWORD *sub_22E6C7744(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        result = sub_22E3BB2B4(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v8 = *(_OWORD *)a2;
        v8[2] = *(_QWORD *)(a2 + 16);
      }
      *((_BYTE *)v8 + 24) = *(_BYTE *)(a2 + 24);
      a2 += 32;
      v8 += 4;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_22E6C77EC(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  std::string::value_type v16;
  std::string *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int v23;
  std::string *v24;
  std::string::value_type v25;

  v6 = __str;
  v8 = *(std::string **)a1;
  if (a4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    v13 = *(std::string **)(a1 + 8);
    v14 = ((char *)v13 - (char *)v8) >> 5;
    if (v14 >= a4)
    {
      if (__str == a3)
      {
        v24 = *(std::string **)a1;
      }
      else
      {
        v24 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8, v6);
          v25 = v6[1].__r_.__value_.__s.__data_[4];
          LODWORD(v8[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
          v8[1].__r_.__value_.__s.__data_[4] = v25;
          v24 = (std::string *)((char *)v24 + 32);
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != a3);
        v13 = *(std::string **)(a1 + 8);
      }
      while (v13 != v24)
      {
        if (v13[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v13[-2].__r_.__value_.__r.__words[2]);
        v13 = (std::string *)((char *)v13 - 32);
      }
      *(_QWORD *)(a1 + 8) = v24;
    }
    else
    {
      v15 = (std::string *)((char *)__str + 32 * v14);
      if (v13 != v8)
      {
        do
        {
          std::string::operator=(v8, v6);
          v16 = v6[1].__r_.__value_.__s.__data_[4];
          LODWORD(v8[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
          v8[1].__r_.__value_.__s.__data_[4] = v16;
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != v15);
        v8 = *(std::string **)(a1 + 8);
      }
      v17 = v8;
      if (v15 != a3)
      {
        v18 = 0;
        do
        {
          v19 = (char *)v8 + v18;
          v20 = (char *)v15 + v18;
          if (SHIBYTE(v15->__r_.__value_.__r.__words[v18 / 8 + 2]) < 0)
          {
            sub_22E3BB2B4(v19, *(void **)v20, *((_QWORD *)v20 + 1));
          }
          else
          {
            v21 = *(_OWORD *)v20;
            *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v21;
          }
          v22 = (char *)v8 + v18;
          v23 = *(_DWORD *)((char *)&v15[1].__r_.__value_.__l.__data_ + v18);
          v22[28] = v15[1].__r_.__value_.__s.__data_[v18 + 4];
          *((_DWORD *)v22 + 6) = v23;
          v18 += 32;
        }
        while ((std::string *)((char *)v15 + v18) != a3);
        v17 = (std::string *)((char *)v8 + v18);
      }
      *(_QWORD *)(a1 + 8) = v17;
    }
  }
  else
  {
    sub_22E6C7A1C((void **)a1);
    if (a4 >> 59)
      goto LABEL_38;
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v10;
    if (v11 >> 59)
LABEL_38:
      abort();
    v12 = operator new(32 * v11);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[4 * v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      *((_DWORD *)v12 + 6) = v6[1].__r_.__value_.__l.__data_;
      *((_BYTE *)v12 + 28) = v6[1].__r_.__value_.__s.__data_[4];
      v6 = (std::string *)((char *)v6 + 32);
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

void sub_22E6C7A1C(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_22E6C7A88(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  std::string *v21;

  v6 = __str;
  v8 = *(std::string **)a1;
  if (a4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    v13 = *(std::string **)(a1 + 8);
    v14 = ((char *)v13 - (char *)v8) >> 5;
    if (v14 >= a4)
    {
      if (__str == a3)
      {
        v21 = *(std::string **)a1;
      }
      else
      {
        v21 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8, v6);
          v8[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          v21 = (std::string *)((char *)v21 + 32);
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != a3);
        v13 = *(std::string **)(a1 + 8);
      }
      while (v13 != v21)
      {
        if (v13[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v13[-2].__r_.__value_.__r.__words[2]);
        v13 = (std::string *)((char *)v13 - 32);
      }
      *(_QWORD *)(a1 + 8) = v21;
    }
    else
    {
      v15 = (std::string *)((char *)__str + 32 * v14);
      if (v13 != v8)
      {
        do
        {
          std::string::operator=(v8, v6);
          v8[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != v15);
        v8 = *(std::string **)(a1 + 8);
      }
      v16 = v8;
      if (v15 != a3)
      {
        v17 = 0;
        do
        {
          v18 = (char *)v8 + v17;
          v19 = (char *)v15 + v17;
          if (SHIBYTE(v15->__r_.__value_.__r.__words[v17 / 8 + 2]) < 0)
          {
            sub_22E3BB2B4(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v20 = *(_OWORD *)v19;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v8[1].__r_.__value_.__s.__data_[v17] = v15[1].__r_.__value_.__s.__data_[v17];
          v17 += 32;
        }
        while ((std::string *)((char *)v15 + v17) != a3);
        v16 = (std::string *)((char *)v8 + v17);
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    sub_22E6C7A1C((void **)a1);
    if (a4 >> 59)
      goto LABEL_38;
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v10;
    if (v11 >> 59)
LABEL_38:
      abort();
    v12 = operator new(32 * v11);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[4 * v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      *((_BYTE *)v12 + 24) = v6[1].__r_.__value_.__s.__data_[0];
      v6 = (std::string *)((char *)v6 + 32);
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

void sub_22E6C7C98(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  BOOL v13;
  _QWORD *v14;
  __int128 *v15;
  __int128 *v16;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(_QWORD **)(v6 + 8) : (_QWORD *)v6;
    if (v8)
    {
      v9 = sub_22E679A94((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = (uint64_t)v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v10 + 2));
          std::string::operator=((std::string *)(v11 + 56), (const std::string *)((char *)v10 + 56));
          sub_22F2A56D0((uint64_t)a1, v11);
          if (v9)
            v9 = sub_22E679A94((uint64_t)v9);
          else
            v9 = 0;
          v12 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_22E54B6D0((uint64_t)a1, v8);
      if (v9)
      {
        do
        {
          v14 = v9;
          v9 = (_QWORD *)v9[2];
        }
        while (v9);
        sub_22E54B6D0((uint64_t)a1, v14);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_22F2A5744((uint64_t)a1, a2 + 2);
      v15 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

unsigned int *sub_22E6C7E0C(unsigned int *result, _DWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = *a2 & 0xFFFFFFFE | *result & 1;
  *result = v6;
  result[1] = a2[1];
  v7 = result + 2;
  v8 = a2 + 2;
  if ((v6 & 1) != 0)
    goto LABEL_4;
  while (v5 < v3[4])
  {
    v9 = (_QWORD *)*v7;
    while (1)
    {
      v10 = v8;
      if ((*(_BYTE *)a2 & 1) == 0)
        v10 = (_QWORD *)*v8;
      sub_22E58269C(&v9[v4], (uint64_t)&v10[v4]);
      v11 = v7;
      if ((*(_BYTE *)v3 & 1) == 0)
        v11 = (_QWORD *)*v7;
      v14[0] = -4096;
      v14[1] = 0;
      if ((sub_22E583260((uint64_t)&v11[v4], (uint64_t)v14) & 1) == 0)
      {
        v12 = v7;
        if ((*(_BYTE *)v3 & 1) == 0)
          v12 = (_QWORD *)*v7;
        v13[0] = -8192;
        v13[1] = 0;
        sub_22E583260((uint64_t)&v12[v4], (uint64_t)v13);
        if (v13[0] != -8192 && v13[0] != -4096 && v13[0])
          MEMORY[0x2348A0E84]();
      }
      result = (unsigned int *)v14[0];
      if (v14[0] != -8192 && v14[0] != -4096)
      {
        if (v14[0])
          result = (unsigned int *)MEMORY[0x2348A0E84]();
      }
      ++v5;
      v4 += 2;
      if ((*v3 & 1) == 0)
        break;
LABEL_4:
      v9 = v7;
      if (v5 >= 0x10)
        return result;
    }
  }
  return result;
}

uint64_t sub_22E6C7F6C(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v24;
  char v25;

  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      if ((_DWORD)v5)
      {
        sub_22E6C80EC(a3, (uint64_t)&v24, *(_QWORD *)a2, *(_QWORD *)a2 + 16 * v5, *(uint64_t **)a1);
        v8 = v7;
        v9 = *(uint64_t **)a1;
        v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v9 = *(uint64_t **)a1;
        v8 = *(uint64_t **)a1;
      }
      for (i = &v9[2 * v6]; i != v8; i -= 2)
      {
        v12 = *(i - 2);
        v11 = v12;
        if (v12 != -8192 && v11 != -4096 && v11 != 0)
          MEMORY[0x2348A0E84]();
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v14 = 16 * v6;
        v15 = *(_QWORD *)a1 - 16;
        do
        {
          v16 = *(_QWORD *)(v15 + v14);
          if (v16 != -8192 && v16 != -4096 && v16 != 0)
            MEMORY[0x2348A0E84]();
          v14 -= 16;
        }
        while (v14);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F27893C(a1);
    }
    else if ((_DWORD)v6)
    {
      sub_22E6C80EC(a3, (uint64_t)&v25, *(_QWORD *)a2, *(_QWORD *)a2 + 16 * v6, *(uint64_t **)a1);
      goto LABEL_28;
    }
    v6 = 0;
LABEL_28:
    v18 = *(unsigned int *)(a2 + 8);
    if (v6 != v18)
    {
      v19 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
      v20 = *(_QWORD *)a2 + 16 * v6;
      v21 = 16 * v18 - 16 * v6;
      do
      {
        v22 = sub_22E58269C(v19, v20);
        v20 += 16;
        v19 = v22 + 2;
        v21 -= 16;
      }
      while (v21);
    }
LABEL_31:
    *(_DWORD *)(a1 + 8) = v5;
  }
  return a1;
}

uint64_t sub_22E6C80EC(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  __n128 v13;

  v6 = a3;
  if (a3 == a4)
    return a3;
  v7 = a4;
  do
  {
    a1.n128_u64[0] = *(_QWORD *)(v6 + 8);
    v8 = *(void **)v6;
    if ((*(_QWORD *)v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = a1.n128_u32[0];
      v13 = a1;
      v8 = (void *)operator new[]();
      memcpy(v8, *(const void **)v6, v9);
      a1 = v13;
    }
    v10 = *a5;
    *a5 = (uint64_t)v8;
    a5[1] = a1.n128_u64[0];
    if (v10 != -8192 && v10 != -4096 && v10 != 0)
      MEMORY[0x2348A0E84]();
    v6 += 16;
    a5 += 2;
  }
  while (v6 != v7);
  return v7;
}

void sub_22E6C81CC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(char **)(v6 + 8) : (char *)v6;
    if (v8)
    {
      v9 = (char *)sub_22E679A94((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = (uint64_t)v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v10 + 4));
          sub_22F2A56D0((uint64_t)a1, v11);
          if (v9)
            v9 = (char *)sub_22E679A94((uint64_t)v9);
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v13 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_22E5EFB0C((uint64_t)a1, v8);
      if (v9)
      {
        do
        {
          v14 = v9;
          v9 = (char *)*((_QWORD *)v9 + 2);
        }
        while (v9);
        sub_22E5EFB0C((uint64_t)a1, v14);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_22E6C8328((uint64_t)a1, (uint64_t)(a2 + 4));
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

uint64_t sub_22E6C8328(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];

  sub_22E5F0018(a1, a2, (uint64_t)v9);
  v3 = (uint64_t **)sub_22F2A07E8(a1, &v8, (const void **)(v9[0] + 32));
  v5 = v8;
  v4 = (uint64_t *)v9[0];
  *(_QWORD *)v9[0] = 0;
  v4[1] = 0;
  v4[2] = v5;
  *v3 = v4;
  v6 = **(_QWORD **)a1;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v4 = *v3;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v4);
  ++*(_QWORD *)(a1 + 16);
  return v9[0];
}

_QWORD *sub_22E6C83A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_22E6C841C(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  __int128 *v6;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = (__int128 *)__str;
  v8 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_22F2A5ACC((void **)a1);
    if (a4 > 0x555555555555555)
      goto LABEL_25;
    v16 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v16 <= a4)
      v16 = a4;
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v16;
    if (v17 > 0x555555555555555)
LABEL_25:
      abort();
    v18 = 3 * v17;
    v19 = (char *)operator new(48 * v17);
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = &v19[16 * v18];
    while (v6 != (__int128 *)a3)
    {
      v20 = sub_22E579A24(v19, v6);
      v6 += 3;
      v19 = v20 + 48;
    }
    *(_QWORD *)(a1 + 8) = v19;
  }
  else if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4) >= a4)
  {
    sub_22E6C85BC(__str, a3, v8);
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 8);
    if (v15 != v13)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        if (*(char *)(v15 - 25) < 0)
          operator delete(*(void **)(v15 - 48));
        v15 -= 48;
      }
      while (v15 != v14);
    }
    *(_QWORD *)(a1 + 8) = v14;
  }
  else
  {
    v9 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4));
    sub_22E6C85BC(__str, v9, v8);
    v10 = *(_QWORD *)(a1 + 8);
    if (v9 != a3)
    {
      v11 = *(char **)(a1 + 8);
      do
      {
        v12 = sub_22E579A24(v11, (__int128 *)v9);
        v9 += 2;
        v11 = v12 + 48;
        v10 += 48;
      }
      while (v9 != a3);
    }
    *(_QWORD *)(a1 + 8) = v10;
  }
}

std::string *sub_22E6C85BC(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::operator=(this + 1, v4 + 1);
    this += 2;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

void sub_22E6C8628(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  std::string *v21;

  v6 = __str;
  v8 = *(std::string **)a1;
  if (a4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    v13 = *(std::string **)(a1 + 8);
    v14 = ((char *)v13 - (char *)v8) >> 5;
    if (v14 >= a4)
    {
      if (__str == a3)
      {
        v21 = *(std::string **)a1;
      }
      else
      {
        v21 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8, v6);
          v8[1].__r_.__value_.__r.__words[0] = v6[1].__r_.__value_.__r.__words[0];
          v21 = (std::string *)((char *)v21 + 32);
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != a3);
        v13 = *(std::string **)(a1 + 8);
      }
      while (v13 != v21)
      {
        if (v13[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v13[-2].__r_.__value_.__r.__words[2]);
        v13 = (std::string *)((char *)v13 - 32);
      }
      *(_QWORD *)(a1 + 8) = v21;
    }
    else
    {
      v15 = (std::string *)((char *)__str + 32 * v14);
      if (v13 != v8)
      {
        do
        {
          std::string::operator=(v8, v6);
          v8[1].__r_.__value_.__r.__words[0] = v6[1].__r_.__value_.__r.__words[0];
          v6 = (std::string *)((char *)v6 + 32);
          v8 = (std::string *)((char *)v8 + 32);
        }
        while (v6 != v15);
        v8 = *(std::string **)(a1 + 8);
      }
      v16 = v8;
      if (v15 != a3)
      {
        v17 = 0;
        do
        {
          v18 = (char *)v8 + v17 * 8;
          v19 = (char *)v15 + v17 * 8;
          if (SHIBYTE(v15->__r_.__value_.__r.__words[v17 + 2]) < 0)
          {
            sub_22E3BB2B4(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v20 = *(_OWORD *)v19;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v8[1].__r_.__value_.__r.__words[v17] = v15[1].__r_.__value_.__r.__words[v17];
          v17 += 4;
        }
        while ((std::string *)((char *)v15 + v17 * 8) != a3);
        v16 = (std::string *)((char *)v8 + v17 * 8);
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    sub_22E6C7A1C((void **)a1);
    if (a4 >> 59)
      goto LABEL_38;
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v10;
    if (v11 >> 59)
LABEL_38:
      abort();
    v12 = operator new(32 * v11);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[4 * v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      v12[3] = v6[1].__r_.__value_.__l.__data_;
      v6 = (std::string *)((char *)v6 + 32);
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

uint64_t sub_22E6C8838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_22E618148((_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  return a1;
}

char *sub_22E6C88B4(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  __dst[48] = *((_BYTE *)a2 + 48);
  v7 = *((_QWORD *)a2 + 8);
  *((_QWORD *)__dst + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)__dst + 8) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)a2 + 10);
  *((_QWORD *)__dst + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)__dst + 10) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_22E3BB2B4(v13, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 88);
    *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v13 = v14;
  }
  v15 = __dst + 112;
  if (*((char *)a2 + 135) < 0)
  {
    sub_22E3BB2B4(v15, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v16 = a2[7];
    *((_QWORD *)__dst + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)v15 = v16;
  }
  __dst[136] = *((_BYTE *)a2 + 136);
  return __dst;
}

uint64_t sub_22E6C89D4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  v5 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v8 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_22E618148((_QWORD *)(a1 + 72), *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_22E6C8B30((char *)(a1 + 96), *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5);
  v9 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_22E3BB2B4(v9, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v9 = v10;
  }
  v11 = (_BYTE *)(a1 + 144);
  if (*((char *)a2 + 167) < 0)
  {
    sub_22E3BB2B4(v11, *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v12 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)v11 = v12;
  }
  v13 = (_BYTE *)(a1 + 168);
  if (*((char *)a2 + 191) < 0)
  {
    sub_22E3BB2B4(v13, *((void **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *(_OWORD *)v13 = v14;
  }
  return a1;
}

char *sub_22E6C8B30(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = (char *)operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        result = &v8[v9];
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_22E3BB2B4(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v7[1] = v8;
  }
  return result;
}

char *sub_22E6C8BF0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v8 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
  }
  return __dst;
}

uint64_t sub_22E6C8C94(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  int v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  _BYTE *v25;
  __int128 v26;
  _BYTE *v27;
  __int128 v28;
  _BYTE *v29;
  __int128 v30;
  _BYTE *v31;
  __int128 v32;
  _BYTE *v33;
  __int128 v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE *v37;
  __int128 v38;
  _BYTE *v39;
  __int128 v40;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v8 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)v7 = v8;
  }
  v9 = (_BYTE *)(a1 + 72);
  if (*((char *)a2 + 95) < 0)
  {
    sub_22E3BB2B4(v9, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v9 = v10;
  }
  v11 = (_BYTE *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_22E3BB2B4(v11, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v12 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v11 = v12;
  }
  v13 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_22E3BB2B4(v13, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_OWORD *)v13 = v14;
  }
  v15 = *((_DWORD *)a2 + 36);
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 160) = 0;
  if (*((_DWORD *)a2 + 40))
    sub_22E6C9200(a1 + 152, (uint64_t *)a2 + 19);
  if (*((char *)a2 + 191) < 0)
  {
    sub_22E3BB2B4((_BYTE *)(a1 + 168), *((void **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v16 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v16;
  }
  v17 = (_BYTE *)(a1 + 192);
  if (*((char *)a2 + 215) < 0)
  {
    sub_22E3BB2B4(v17, *((void **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v18 = a2[12];
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_OWORD *)v17 = v18;
  }
  v19 = (_BYTE *)(a1 + 216);
  if (*((char *)a2 + 239) < 0)
  {
    sub_22E3BB2B4(v19, *((void **)a2 + 27), *((_QWORD *)a2 + 28));
  }
  else
  {
    v20 = *(__int128 *)((char *)a2 + 216);
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    *(_OWORD *)v19 = v20;
  }
  v21 = (_BYTE *)(a1 + 240);
  if (*((char *)a2 + 263) < 0)
  {
    sub_22E3BB2B4(v21, *((void **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    v22 = a2[15];
    *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
    *(_OWORD *)v21 = v22;
  }
  v23 = (_BYTE *)(a1 + 264);
  if (*((char *)a2 + 287) < 0)
  {
    sub_22E3BB2B4(v23, *((void **)a2 + 33), *((_QWORD *)a2 + 34));
  }
  else
  {
    v24 = *(__int128 *)((char *)a2 + 264);
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    *(_OWORD *)v23 = v24;
  }
  v25 = (_BYTE *)(a1 + 288);
  if (*((char *)a2 + 311) < 0)
  {
    sub_22E3BB2B4(v25, *((void **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v26 = a2[18];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    *(_OWORD *)v25 = v26;
  }
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  v27 = (_BYTE *)(a1 + 328);
  if (*((char *)a2 + 351) < 0)
  {
    sub_22E3BB2B4(v27, *((void **)a2 + 41), *((_QWORD *)a2 + 42));
  }
  else
  {
    v28 = *(__int128 *)((char *)a2 + 328);
    *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
    *(_OWORD *)v27 = v28;
  }
  v29 = (_BYTE *)(a1 + 352);
  if (*((char *)a2 + 375) < 0)
  {
    sub_22E3BB2B4(v29, *((void **)a2 + 44), *((_QWORD *)a2 + 45));
  }
  else
  {
    v30 = a2[22];
    *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
    *(_OWORD *)v29 = v30;
  }
  v31 = (_BYTE *)(a1 + 376);
  if (*((char *)a2 + 399) < 0)
  {
    sub_22E3BB2B4(v31, *((void **)a2 + 47), *((_QWORD *)a2 + 48));
  }
  else
  {
    v32 = *(__int128 *)((char *)a2 + 376);
    *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
    *(_OWORD *)v31 = v32;
  }
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  sub_22E618148((_QWORD *)(a1 + 400), *((_QWORD *)a2 + 50), *((_QWORD *)a2 + 51), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 51) - *((_QWORD *)a2 + 50)) >> 3));
  v33 = (_BYTE *)(a1 + 424);
  if (*((char *)a2 + 447) < 0)
  {
    sub_22E3BB2B4(v33, *((void **)a2 + 53), *((_QWORD *)a2 + 54));
  }
  else
  {
    v34 = *(__int128 *)((char *)a2 + 424);
    *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
    *(_OWORD *)v33 = v34;
  }
  sub_22E6C94B0(a1 + 448, (const void ***)a2 + 56);
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_22E618148((_QWORD *)(a1 + 472), *((_QWORD *)a2 + 59), *((_QWORD *)a2 + 60), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 60) - *((_QWORD *)a2 + 59)) >> 3));
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  sub_22E618148((_QWORD *)(a1 + 496), *((_QWORD *)a2 + 62), *((_QWORD *)a2 + 63), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 63) - *((_QWORD *)a2 + 62)) >> 3));
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  sub_22E6C95B8((_QWORD *)(a1 + 520), *((_QWORD **)a2 + 65), *((_QWORD **)a2 + 66), (uint64_t)(*((_QWORD *)a2 + 66) - *((_QWORD *)a2 + 65)) >> 4);
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  sub_22E618148((_QWORD *)(a1 + 544), *((_QWORD *)a2 + 68), *((_QWORD *)a2 + 69), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 69) - *((_QWORD *)a2 + 68)) >> 3));
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  sub_22E618148((_QWORD *)(a1 + 568), *((_QWORD *)a2 + 71), *((_QWORD *)a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 72) - *((_QWORD *)a2 + 71)) >> 3));
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  sub_22E618148((_QWORD *)(a1 + 592), *((_QWORD *)a2 + 74), *((_QWORD *)a2 + 75), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 75) - *((_QWORD *)a2 + 74)) >> 3));
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  sub_22E618148((_QWORD *)(a1 + 616), *((_QWORD *)a2 + 77), *((_QWORD *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 3));
  *(_QWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  sub_22E6C9644((char *)(a1 + 640), *((__int128 **)a2 + 80), *((__int128 **)a2 + 81), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 81) - *((_QWORD *)a2 + 80)) >> 4));
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  sub_22E618148((_QWORD *)(a1 + 664), *((_QWORD *)a2 + 83), *((_QWORD *)a2 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 84) - *((_QWORD *)a2 + 83)) >> 3));
  v35 = (_BYTE *)(a1 + 688);
  if (*((char *)a2 + 711) < 0)
  {
    sub_22E3BB2B4(v35, *((void **)a2 + 86), *((_QWORD *)a2 + 87));
  }
  else
  {
    v36 = a2[43];
    *(_QWORD *)(a1 + 704) = *((_QWORD *)a2 + 88);
    *(_OWORD *)v35 = v36;
  }
  v37 = (_BYTE *)(a1 + 712);
  if (*((char *)a2 + 735) < 0)
  {
    sub_22E3BB2B4(v37, *((void **)a2 + 89), *((_QWORD *)a2 + 90));
  }
  else
  {
    v38 = *(__int128 *)((char *)a2 + 712);
    *(_QWORD *)(a1 + 728) = *((_QWORD *)a2 + 91);
    *(_OWORD *)v37 = v38;
  }
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  if (*((_BYTE *)a2 + 760))
    sub_22E6C96C4((void **)(a1 + 736), a2 + 46);
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  if (*((_BYTE *)a2 + 792))
    sub_22E6C9730(a1 + 768, (uint64_t *)a2 + 96);
  v39 = (_BYTE *)(a1 + 800);
  if (*((char *)a2 + 823) < 0)
  {
    sub_22E3BB2B4(v39, *((void **)a2 + 100), *((_QWORD *)a2 + 101));
  }
  else
  {
    v40 = a2[50];
    *(_QWORD *)(a1 + 816) = *((_QWORD *)a2 + 102);
    *(_OWORD *)v39 = v40;
  }
  *(_DWORD *)(a1 + 824) = *((_DWORD *)a2 + 206);
  return a1;
}

uint64_t sub_22E6C9200(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v12 = *a2;
        v13 = *a2 + 88 * v4;
        v14 = *(_QWORD *)a1;
        do
        {
          std::string::operator=((std::string *)v14, (const std::string *)v12);
          v15 = *(_OWORD *)(v12 + 40);
          v16 = *(_OWORD *)(v12 + 56);
          v17 = *(_OWORD *)(v12 + 69);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v12 + 24);
          *(_OWORD *)(v14 + 69) = v17;
          *(_OWORD *)(v14 + 56) = v16;
          *(_OWORD *)(v14 + 40) = v15;
          v14 += 88;
          v12 += 88;
        }
        while (v12 != v13);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
      }
      else
      {
        v18 = *(_QWORD *)a1;
        v14 = *(_QWORD *)a1;
      }
      for (i = v18 + 88 * v5; i != v14; i -= 88)
      {
        if (*(char *)(i - 65) < 0)
          operator delete(*(void **)(i - 88));
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v20 = *(_QWORD *)a1;
        v21 = 88 * v5;
        do
        {
          if (*(char *)(v20 + v21 - 65) < 0)
            operator delete(*(void **)(v20 + v21 - 88));
          v21 -= 88;
        }
        while (v21);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2A5C10(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 88 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        std::string::operator=((std::string *)v8, (const std::string *)v6);
        v9 = *(_OWORD *)(v6 + 40);
        v10 = *(_OWORD *)(v6 + 56);
        v11 = *(_OWORD *)(v6 + 69);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v8 + 69) = v11;
        *(_OWORD *)(v8 + 56) = v10;
        *(_OWORD *)(v8 + 40) = v9;
        v6 += 88;
        v8 += 88;
      }
      while (v6 != v7);
LABEL_25:
      v22 = *((unsigned int *)a2 + 2);
      if (v5 != v22)
      {
        v23 = *a2;
        v24 = *(_QWORD *)a1;
        v25 = 88 * v5;
        v26 = 88 * v22;
        do
        {
          v27 = v24 + v25;
          v28 = (__int128 *)(v23 + v25);
          if (*(char *)(v23 + v25 + 23) < 0)
          {
            sub_22E3BB2B4((_BYTE *)v27, *(void **)v28, *((_QWORD *)v28 + 1));
          }
          else
          {
            v29 = *v28;
            *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
            *(_OWORD *)v27 = v29;
          }
          v30 = v23 + v25;
          v23 += 88;
          v31 = v24 + v25;
          v32 = *(_OWORD *)(v30 + 24);
          v33 = *(_OWORD *)(v30 + 40);
          v34 = *(_OWORD *)(v30 + 56);
          *(_OWORD *)(v31 + 69) = *(_OWORD *)(v30 + 69);
          *(_OWORD *)(v31 + 56) = v34;
          *(_OWORD *)(v31 + 40) = v33;
          *(_OWORD *)(v31 + 24) = v32;
          v24 += 88;
          v26 -= 88;
        }
        while (v25 != v26);
      }
LABEL_31:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_25;
  }
  return a1;
}

void sub_22E6C940C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  __int128 *v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 88 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v6 = *(__int128 *)((char *)v3 + 24);
      v7 = *(__int128 *)((char *)v3 + 40);
      v8 = *(__int128 *)((char *)v3 + 56);
      *(_OWORD *)(a2 + 69) = *(__int128 *)((char *)v3 + 69);
      *(_OWORD *)(a2 + 56) = v8;
      *(_OWORD *)(a2 + 40) = v7;
      *(_OWORD *)(a2 + 24) = v6;
      v3 = (__int128 *)((char *)v3 + 88);
      a2 += 88;
    }
    while (v3 != (__int128 *)v4);
    v9 = *((_DWORD *)a1 + 2);
    if (v9)
    {
      v10 = (__int128 *)*a1;
      v11 = 88 * v9;
      do
      {
        if (*((char *)v10 + v11 - 65) < 0)
          operator delete(*(void **)((char *)v10 + v11 - 88));
        v11 -= 88;
      }
      while (v11);
    }
  }
}

uint64_t sub_22E6C94B0(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22F2A5C80((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_22E6C9544(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[3] = 0;
  sub_22E618148(__dst + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return __dst;
}

_QWORD *sub_22E6C95B8(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v7 = result;
    result = operator new(16 * a4);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    while (a2 != a3)
    {
      v8 = a2[1];
      *result = *a2;
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v7[1] = result;
  }
  return result;
}

char *sub_22E6C9644(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = (char *)operator new(48 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[16 * v7];
    while (a2 != a3)
    {
      v8 = sub_22E579A24(result, a2);
      a2 += 3;
      result = v8 + 48;
    }
    v6[1] = result;
  }
  return result;
}

void sub_22E6C96C4(void **__dst, __int128 *a2)
{
  __int128 v4;

  if (*((_BYTE *)__dst + 24))
  {
    if (*((char *)__dst + 23) < 0)
      operator delete(*__dst);
    *((_BYTE *)__dst + 24) = 0;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = (void *)*((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_BYTE *)__dst + 24) = 1;
}

_QWORD *sub_22E6C9730(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  void **v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    sub_22E3B3CC8(&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = sub_22E618148((_QWORD *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t sub_22E6C97A0(uint64_t a1)
{
  void **v3;

  sub_22E6C9858(a1 + 2208);
  if (*(char *)(a1 + 2207) < 0)
    operator delete(*(void **)(a1 + 2184));
  if (*(char *)(a1 + 2183) < 0)
    operator delete(*(void **)(a1 + 2160));
  if (*(char *)(a1 + 2159) < 0)
    operator delete(*(void **)(a1 + 2136));
  sub_22E6C9B70(a1 + 1944);
  sub_22E618378(a1 + 216);
  sub_22F2A5D30(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v3 = (void **)(a1 + 48);
  sub_22E3B3CC8(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_22E6C9858(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 823) < 0)
    operator delete(*(void **)(a1 + 800));
  if (*(_BYTE *)(a1 + 792))
  {
    v3 = (void **)(a1 + 768);
    sub_22E3B3CC8(&v3);
    *(_BYTE *)(a1 + 792) = 0;
  }
  if (*(_BYTE *)(a1 + 760))
  {
    if (*(char *)(a1 + 759) < 0)
      operator delete(*(void **)(a1 + 736));
    *(_BYTE *)(a1 + 760) = 0;
  }
  if (*(char *)(a1 + 735) < 0)
    operator delete(*(void **)(a1 + 712));
  if (*(char *)(a1 + 711) < 0)
    operator delete(*(void **)(a1 + 688));
  v3 = (void **)(a1 + 664);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 640);
  sub_22E576240(&v3);
  v3 = (void **)(a1 + 616);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 592);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 568);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 544);
  sub_22E3B3CC8(&v3);
  if (*(_QWORD *)(a1 + 520))
  {
    sub_22E3B485C((uint64_t *)(a1 + 520));
    operator delete(*(void **)(a1 + 520));
  }
  v3 = (void **)(a1 + 496);
  sub_22E3B3CC8(&v3);
  v3 = (void **)(a1 + 472);
  sub_22E3B3CC8(&v3);
  sub_22E6C9A98(a1 + 448, *(char **)(a1 + 456));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  v3 = (void **)(a1 + 400);
  sub_22E3B3CC8(&v3);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  sub_22E6C9B00((char **)(a1 + 152));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22E6C9A98(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_22E6C9A98(a1, *(_QWORD *)a2);
    sub_22E6C9A98(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 56);
    sub_22E3B3CC8(&v4);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

char **sub_22E6C9B00(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      if (v2[v4 - 65] < 0)
        operator delete(*(void **)&v2[v4 - 88]);
      v4 -= 88;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E6C9B70(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v3 = (void **)(a1 + 96);
  sub_22E6187CC(&v3);
  v3 = (void **)(a1 + 72);
  sub_22E3B3CC8(&v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t *sub_22E6C9C08(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_22E6C97A0(v2 + 80);
    sub_22E6D86EC(v2);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

void sub_22E6C9C58(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_22E6C97A0(a2 + 80);
    sub_22E6D86EC(a2);
    JUMPOUT(0x2348A0E9CLL);
  }
}

void sub_22E6C9C9C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 56 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 13) = *(_QWORD *)((char *)v3 + 13);
      *(_OWORD *)a2 = v5;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *(_BYTE *)(a2 + 48) = *((_BYTE *)v3 + 48);
      v3 = (__int128 *)((char *)v3 + 56);
      a2 += 56;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*a1;
      v9 = 56 * v7;
      do
      {
        if (*((char *)v8 + v9 - 9) < 0)
          operator delete(*(void **)((char *)v8 + v9 - 32));
        v9 -= 56;
      }
      while (v9);
    }
  }
}

unint64_t sub_22E6C9D38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2A5F44(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2A5F44(a1);
    }
  }
  return v3;
}

void ***sub_22E6C9DA0(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x1080C40EADE5B18);
  }
  return a1;
}

void sub_22E6C9DF8(_QWORD *a1@<X0>, _DWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const void *v30;
  int v31;
  size_t v32;
  size_t v33;
  size_t v34;
  void **p_dst;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91;
  void **v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  char v123;
  int v124;
  size_t v125;
  size_t v126;
  void *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  _BYTE *v132;
  size_t v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  _QWORD *v139;
  __int128 v140;
  char *v141;
  _DWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v150;
  int v151;
  uint64_t v153;
  _QWORD v154[3];
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  char v160;
  uint64_t v161;
  int v162;
  void **v163;
  void *__p[2];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  _DWORD *v174;
  void **__dst;
  size_t v176;
  unint64_t v177;
  char v178;
  char v179;
  char v180;
  char v181;
  int v182;
  char v183;
  uint64_t v184;
  __int128 v185;
  char *v186;
  void *v187;
  uint64_t v188;
  _BYTE v189[7];
  char v190;
  char *v191[2];
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD v195[6];

  v3 = a1;
  v195[4] = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v5 = *(_QWORD *)(v4 + 56);
  v185 = 0uLL;
  v186 = 0;
  v151 = *(_DWORD *)(*(_QWORD *)(v4 + 2440) + 80);
  v193 = v195;
  v194 = 0x400000000;
  v191[0] = (char *)&v192;
  v191[1] = (char *)0x400000000;
  v6 = *(_QWORD *)(v5 + 136);
  v153 = v5;
  v150 = -1431655765 * ((unint64_t)(v6 - *(_QWORD *)(v5 + 128)) >> 3);
  if (!(_DWORD)v150)
    goto LABEL_165;
  v7 = 0;
  v147 = (std::__shared_weak_count *)(MEMORY[0x24BED83D8] + 16);
  do
  {
    v184 = 0;
    v8 = (uint64_t *)operator new();
    v9 = v3[2];
    v10 = sub_22E6D84EC(v8, v9);
    sub_22F2A5B9C((uint64_t)(v10 + 10), v9 + 80);
    sub_22E6C9C08(&v184, (uint64_t)v8);
    v11 = v184;
    v12 = *(_QWORD *)(v184 + 56);
    v13 = *(_QWORD *)(v12 + 128);
    v14 = *(_QWORD *)(v12 + 136);
    v15 = v12;
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v11 = v184;
      v15 = *(_QWORD *)(v184 + 56);
    }
    *(_QWORD *)(v12 + 136) = v13;
    if (*(char *)(v15 + 127) < 0)
    {
      **(_BYTE **)(v15 + 104) = 0;
      *(_QWORD *)(v15 + 112) = 0;
      v11 = v184;
    }
    else
    {
      *(_BYTE *)(v15 + 104) = 0;
      *(_BYTE *)(v15 + 127) = 0;
    }
    v16 = *(_QWORD *)(v11 + 56);
    *(_DWORD *)(v16 + 152) = 1;
    v17 = *(_QWORD *)(v16 + 24);
    v18 = *(_QWORD *)(v16 + 32);
    v19 = (uint64_t *)v16;
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v11 = v184;
      v19 = *(uint64_t **)(v184 + 56);
    }
    *(_QWORD *)(v16 + 32) = v17;
    v20 = v19[6];
    v21 = v19[7];
    v22 = v19;
    if (v21 != v20)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0)
          operator delete(*(void **)(v21 - 24));
        v21 -= 24;
      }
      while (v21 != v20);
      v11 = v184;
      v22 = *(uint64_t **)(v184 + 56);
    }
    v19[7] = v20;
    v23 = *v22;
    v24 = v22[1];
    if (v24 != *v22)
    {
      do
      {
        if (*(char *)(v24 - 9) < 0)
          operator delete(*(void **)(v24 - 32));
        v24 -= 32;
      }
      while (v24 != v23);
      v11 = v184;
    }
    v22[1] = v23;
    v25 = *(_DWORD *)(v11 + 2448);
    if (v25)
    {
      v26 = *(_QWORD *)(v11 + 2440);
      v27 = 88 * v25;
      do
      {
        if (*(char *)(v26 + v27 - 65) < 0)
          operator delete(*(void **)(v26 + v27 - 88));
        v27 -= 88;
      }
      while (v27);
    }
    *(_DWORD *)(v11 + 2448) = 0;
    v28 = *(_QWORD *)(v153 + 128) + 24 * v7;
    v29 = *(_BYTE *)(v28 + 23);
    if (v29 >= 0)
      v30 = (const void *)(*(_QWORD *)(v153 + 128) + 24 * v7);
    else
      v30 = *(const void **)v28;
    if (!v30)
    {
      __dst = 0;
      v176 = 0;
      v177 = 0;
      goto LABEL_48;
    }
    v31 = v29;
    v32 = *(_QWORD *)(v28 + 8);
    v33 = v29 & 0x7F;
    if (v31 >= 0)
      v34 = v33;
    else
      v34 = v32;
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
LABEL_206:
      abort();
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v36 + 1;
      p_dst = (void **)operator new(v36 + 1);
      v176 = v34;
      v177 = v37 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v177) = v34;
      p_dst = (void **)&__dst;
      if (!v34)
        goto LABEL_47;
    }
    memmove(p_dst, v30, v34);
LABEL_47:
    *((_BYTE *)p_dst + v34) = 0;
LABEL_48:
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = v151;
    v183 = 0;
    v38 = v184;
    v39 = sub_22E6CB434(v184 + 2440, (unint64_t)&__dst, 1);
    v40 = *(_QWORD *)(v38 + 2440);
    v41 = *(_DWORD *)(v38 + 2448);
    v42 = v40 + 88 * v41;
    if (*(char *)(v39 + 23) < 0)
    {
      sub_22E3BB2B4((_BYTE *)v42, *(void **)v39, *(_QWORD *)(v39 + 8));
    }
    else
    {
      v43 = *(_OWORD *)v39;
      *(_QWORD *)(v42 + 16) = *(_QWORD *)(v39 + 16);
      *(_OWORD *)v42 = v43;
    }
    v44 = v40 + 88 * v41;
    v45 = *(_OWORD *)(v39 + 24);
    v46 = *(_OWORD *)(v39 + 40);
    v47 = *(_OWORD *)(v39 + 56);
    *(_OWORD *)(v44 + 69) = *(_OWORD *)(v39 + 69);
    *(_OWORD *)(v44 + 56) = v47;
    *(_OWORD *)(v44 + 40) = v46;
    *(_OWORD *)(v44 + 24) = v45;
    ++*(_DWORD *)(v38 + 2448);
    v48 = operator new();
    v49 = llvm::errs((llvm *)v48);
    v50 = operator new();
    *(_OWORD *)(v50 + 48) = 0u;
    *(_OWORD *)(v50 + 64) = 0u;
    *(_OWORD *)(v50 + 80) = 0u;
    *(_OWORD *)(v50 + 96) = 0u;
    *(_OWORD *)(v50 + 112) = 0u;
    *(_OWORD *)(v50 + 128) = 0u;
    *(_OWORD *)(v50 + 144) = 0u;
    *(_OWORD *)(v50 + 160) = 0u;
    *(_OWORD *)(v50 + 176) = 0u;
    v51 = *(_DWORD *)(v50 + 4) & 0xFF800000 | 0x6F0;
    v52 = *(_BYTE *)(v50 + 40) & 0x80;
    *(_QWORD *)(v50 + 24) = 0x100000032;
    *(_QWORD *)(v50 + 32) = 8;
    *(_QWORD *)(v50 + 8) = 0x600000000;
    *(_QWORD *)(v50 + 16) = 0xA0000000ALL;
    *(_BYTE *)(v50 + 40) = v52;
    *(_QWORD *)v48 = &off_24FA71900;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 16) = v49;
    *(_QWORD *)(v48 + 24) = v50;
    *(_DWORD *)v50 = 1;
    *(_DWORD *)(v50 + 4) = v51;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_BYTE *)(v48 + 64) &= ~1u;
    v53 = (_DWORD *)operator new();
    *((_QWORD *)v53 + 1) = 0;
    v174 = v53;
    *v53 = 1;
    v54 = operator new();
    v172 = v174;
    if (v174)
      ++*v174;
    v55 = *(_DWORD **)(v3[2] + 32);
    v171 = v55;
    if (v55)
      ++*v55;
    v173 = (_DWORD *)sub_22F1CB3A4(v54, &v172, (uint64_t *)&v171, v48, 1);
    ++*v173;
    sub_22E3B3C18((uint64_t *)&v171);
    sub_22E3B3D40((uint64_t *)&v172);
    v56 = operator new();
    v57 = v56;
    v58 = (std::__shared_weak_count *)v3[37];
    v169 = v3[36];
    v170 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
    }
    sub_22F2A673C(v56, (uint64_t)&v169, 0);
    v61 = v170;
    if (v170)
    {
      v62 = (unint64_t *)&v170->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    *(_QWORD *)&v168 = v184;
    if (v184)
    {
      v64 = (_QWORD *)operator new();
      v65 = v184;
      *v64 = &unk_24FA6D340;
      v64[1] = 0;
      v64[2] = 0;
      v64[3] = v65;
    }
    else
    {
      v64 = 0;
    }
    *((_QWORD *)&v168 + 1) = v64;
    v184 = 0;
    sub_22E6C3F18(v57 + 16, &v168);
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
    if (*((_QWORD *)&v168 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v173;
    if (v173)
      ++*v173;
    v155 = *(std::__shared_weak_count **)(v57 + 32);
    *(_QWORD *)(v57 + 32) = v69;
    sub_22E6C62BC((_DWORD **)&v155);
    v70 = sub_22F1EBCCC(*(_QWORD *)(v57 + 32), *(_QWORD *)(v57 + 16) + 16);
    sub_22F2A69A8(v57, v70);
    v167 = 0;
    sub_22E6CC4D4((_QWORD *)v57, &v167);
    v71 = v167;
    if (v167)
    {
      v72 = (unsigned int *)(v167 + 8);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    }
    sub_22E6CC69C(v57, *(_QWORD *)(v57 + 160));
    sub_22E6CC70C(v57, 1);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v57 + 32) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(v57 + 32) + 48), **(_QWORD **)(v57 + 16), *(_QWORD *)(v57 + 192));
    sub_22F2A6C34(v57);
    v75 = (std::__shared_weak_count *)operator new(0x50uLL);
    v75->__shared_owners_ = 0;
    v76 = (unint64_t *)&v75->__shared_owners_;
    v75->__shared_weak_owners_ = 0;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_24FA6D728;
    v75[1].std::__shared_count = 0u;
    *(_OWORD *)&v75[2].__shared_owners_ = 0u;
    v75[3].__vftable = 0;
    *(_OWORD *)&v75[1].__shared_weak_owners_ = 0u;
    v75[2].__vftable = (std::__shared_weak_count_vtbl *)&v75[3];
    v75[2].__shared_owners_ = 0;
    v75[2].__shared_weak_owners_ = 0;
    v77 = *(_QWORD *)(v57 + 184);
    v78 = *(_QWORD *)(v57 + 192);
    v79 = operator new();
    v80 = v79;
    v155 = v75 + 1;
    v156 = v75;
    do
      v81 = __ldxr(v76);
    while (__stxr(v81 + 1, v76));
    sub_22E8048F0(v79, v78, v77, "-", 1uLL, "", 0, (uint64_t)&v155, 0, 0, 1, 1, 0);
    v82 = v156;
    if (v156)
    {
      v83 = (unint64_t *)&v156->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(_QWORD *)(v57 + 208);
    *(_QWORD *)(v85 + 16056) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 136))(v80);
    v166 = v80;
    sub_22F2A6A24(v57, &v166);
    v86 = v166;
    v166 = 0;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    sub_22F2A76DC((_QWORD *)v57, 1, 0);
    if (v7)
    {
      v187 = v189;
      v188 = 0x400000000;
      if ((_DWORD)v194)
      {
        v87 = v193;
        v88 = 8 * v194;
        do
        {
          llvm::MemoryBuffer::getMemBuffer();
          sub_22E6CADC4((uint64_t)&v187, (char *)&v155);
          v89 = v155;
          v155 = 0;
          if (v89)
            ((void (*)(std::__shared_weak_count *))v89->~__shared_weak_count_0)(v89);
          ++v87;
          v88 -= 8;
        }
        while (v88);
      }
      v90 = *(_QWORD *)(v153 + 128) + 24 * (v7 - 1);
      if (*(char *)(v90 + 23) < 0)
      {
        sub_22E3BB2B4(__p, *(void **)v90, *(_QWORD *)(v90 + 8));
      }
      else
      {
        v91 = *(_OWORD *)v90;
        v165 = *(_QWORD *)(v90 + 16);
        *(_OWORD *)__p = v91;
      }
      LODWORD(v156) = 0;
      v160 = 0;
      v161 = 0;
      v162 = 1;
      v158 = 0;
      v159 = 0;
      v157 = 0;
      v155 = v147;
      v163 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      if ((unint64_t)(v158 - (_QWORD)v159) > 3)
        *v159++ = 1751347246;
      else
        llvm::raw_ostream::write((llvm::raw_ostream *)&v155, ".pch");
      llvm::raw_ostream::operator<<();
      sub_22E5EFE94((uint64_t)v191, (unint64_t)v163);
      if (v165 >= 0)
        v92 = __p;
      else
        v92 = (void **)__p[0];
      if (v165 >= 0)
        v93 = HIBYTE(v165) & 0x7F;
      else
        v93 = (size_t)__p[1];
      v94 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v57 + 224) + 144))(*(_QWORD *)(v57 + 224));
      v95 = sub_22E6CAE48((_QWORD *)v57, v92, v93, &v187, (uint64_t)v191, v94);
      v96 = v95;
      if (v95)
      {
        *(_DWORD *)(v95 + 32) += 2;
        v97 = *(_QWORD *)(v57 + 264);
        *(_QWORD *)(v57 + 264) = v96;
        if (v97)
        {
          v98 = *(_DWORD *)(v97 + 32) - 1;
          *(_DWORD *)(v97 + 32) = v98;
          if (!v98)
            (*(void (**)(uint64_t))(*(_QWORD *)(v97 + 24) + 8))(v97 + 24);
        }
        v99 = *(_QWORD *)(v57 + 208);
        ++*(_DWORD *)(v96 + 32);
        v100 = *(_DWORD **)(v99 + 16048);
        *(_QWORD *)(v99 + 16048) = v96 + 24;
        if (v100)
        {
          v122 = v100[2] - 1;
          v100[2] = v122;
          if (!v122)
            (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 8))(v100);
        }
        v101 = *(_DWORD *)(v96 + 32) - 1;
        *(_DWORD *)(v96 + 32) = v101;
        if (!v101)
          (*(void (**)(uint64_t))(*(_QWORD *)(v96 + 24) + 8))(v96 + 24);
      }
      else
      {
        *a3 = 0;
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v155);
      if (SHIBYTE(v165) < 0)
        operator delete(__p[0]);
      v102 = v187;
      if ((_DWORD)v188)
      {
        v103 = 8 * v188;
        v104 = (char *)v187 - 8;
        do
        {
          v105 = *(_QWORD *)&v104[v103];
          *(_QWORD *)&v104[v103] = 0;
          if (v105)
            (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
          v103 -= 8;
        }
        while (v103);
        v102 = v187;
      }
      if (v102 != v189)
        free(v102);
      if (!v96)
      {
        v109 = 0;
        goto LABEL_151;
      }
    }
    else
    {
      sub_22F1C9CA8(*(_QWORD *)(*(_QWORD *)(v57 + 192) + 680), (unsigned int *)(*(_QWORD *)(v57 + 192) + 544), *(_QWORD *)(*(_QWORD *)(v57 + 192) + 56));
    }
    if ((sub_22E6CE89C((uint64_t)&__dst, *(_QWORD *)(v57 + 32), *(llvm::MemoryBuffer **)(v57 + 160), *(_QWORD *)(v57 + 176)) & 1) != 0)
    {
      sub_22E80B400(*(_QWORD *)(v57 + 240), 0, 0);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v57 + 32) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v57 + 32) + 48));
      LOWORD(v159) = 257;
      llvm::MemoryBuffer::getMemBufferCopy();
      sub_22E6CADC4((uint64_t)&v193, (char *)&v187);
      v106 = v187;
      v187 = 0;
      if (v106)
        (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
      v75[2].__shared_owners_ = 0;
      v107 = (_QWORD *)*((_QWORD *)&v185 + 1);
      if (*((_QWORD *)&v185 + 1) >= (unint64_t)v186)
      {
        v110 = (_QWORD *)v185;
        v111 = (uint64_t)(*((_QWORD *)&v185 + 1) - v185) >> 3;
        v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61)
          goto LABEL_206;
        v113 = (uint64_t)&v186[-v185];
        if ((uint64_t)&v186[-v185] >> 2 > v112)
          v112 = v113 >> 2;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v114 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v114 = v112;
        if (v114)
        {
          if (v114 >> 61)
            sub_22E3B3F8C();
          v115 = (char *)operator new(8 * v114);
        }
        else
        {
          v115 = 0;
        }
        v116 = (uint64_t *)&v115[8 * v111];
        *v116 = v57;
        v108 = v116 + 1;
        if (v107 == v110)
        {
          *(_QWORD *)&v185 = v116;
          v186 = &v115[8 * v114];
        }
        else
        {
          do
          {
            v117 = *--v107;
            *v107 = 0;
            *--v116 = v117;
          }
          while (v107 != v110);
          v118 = (_QWORD *)*((_QWORD *)&v185 + 1);
          v107 = (_QWORD *)v185;
          *(_QWORD *)&v185 = v116;
          v186 = &v115[8 * v114];
          while (v118 != v107)
          {
            v120 = *--v118;
            v119 = v120;
            *v118 = 0;
            if (v120)
              (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
          }
        }
        if (v107)
          operator delete(v107);
      }
      else
      {
        **((_QWORD **)&v185 + 1) = v57;
        v108 = v107 + 1;
      }
      v57 = 0;
      *((_QWORD *)&v185 + 1) = v108;
      v109 = 1;
    }
    else
    {
      v109 = 0;
      *a3 = 0;
    }
    do
LABEL_151:
      v121 = __ldaxr(v76);
    while (__stlxr(v121 - 1, v76));
    if (v121)
    {
      if (!v57)
        goto LABEL_155;
LABEL_154:
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      goto LABEL_155;
    }
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    if (v57)
      goto LABEL_154;
LABEL_155:
    sub_22E6C62BC(&v173);
    sub_22E3B3D40((uint64_t *)&v174);
    v3 = a1;
    if (SHIBYTE(v177) < 0)
      operator delete(__dst);
    sub_22E6C9C08(&v184, 0);
    if ((v109 & 1) == 0)
      goto LABEL_197;
    ++v7;
  }
  while (v7 != v150);
  v6 = *(_QWORD *)(v153 + 136);
LABEL_165:
  v123 = *(_BYTE *)(v6 - 1);
  v124 = v123;
  v125 = v123 & 0x7F;
  if (v124 >= 0)
    v126 = v125;
  else
    v126 = *(_QWORD *)(v6 - 16);
  sub_22E3B8BF4((uint64_t)&v187, v126 + 10);
  if (v190 >= 0)
    v127 = &v187;
  else
    v127 = v187;
  if (v126)
  {
    v130 = *(char **)(v6 - 24);
    v129 = (char *)(v6 - 24);
    v128 = v130;
    if (v129[23] >= 0)
      v131 = v129;
    else
      v131 = v128;
    memmove(v127, v131, v126);
  }
  strcpy((char *)v127 + v126, ".pch-final");
  sub_22E5EFE94((uint64_t)v191, (unint64_t)&v187);
  if (v190 >= 0)
    v132 = &v187;
  else
    v132 = v187;
  if (v190 >= 0)
    v133 = v190 & 0x7F;
  else
    v133 = v188;
  v134 = sub_22E6CAE48(v3, v132, v133, &v193, (uint64_t)v191, 0);
  if (v134)
    v135 = (_DWORD *)(v134 + 24);
  else
    v135 = 0;
  if (v134)
    ++*(_DWORD *)(v134 + 32);
  v136 = *a2;
  *a2 = v135;
  if (v136 && (v137 = v136[2] - 1, (v136[2] = v137) == 0))
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v136 + 8))(v136);
    if (!*a2)
      goto LABEL_194;
LABEL_190:
    v138 = operator new();
    v139 = (_QWORD *)v138;
    v140 = v185;
    v141 = v186;
    v185 = 0uLL;
    v186 = 0;
    v142 = *a2;
    if (*a2)
      ++v142[2];
    memset(v154, 0, sizeof(v154));
    v156 = 0;
    v157 = 0;
    v155 = 0;
    *(_QWORD *)(v138 + 56) = 0;
    *(_QWORD *)(v138 + 48) = &off_24FA6D598;
    *(_OWORD *)(v138 + 64) = v140;
    *(_QWORD *)(v138 + 80) = v141;
    v176 = 0;
    v177 = 0;
    __dst = 0;
    __p[0] = &__dst;
    sub_22E3B4AF8((void ***)__p);
    v139[11] = v142;
    __dst = (void **)&v155;
    sub_22E3B4AF8(&__dst);
    v139[4] = v139 + 6;
    v139[2] = v139 + 4;
    v139[5] = v142;
    v139[3] = 0x200000002;
    *v139 = &off_24FA6D408;
    v139[1] = 1;
    *a3 = v139;
    __dst = (void **)v154;
    sub_22E3B4AF8(&__dst);
  }
  else
  {
    if (v134)
      goto LABEL_190;
LABEL_194:
    *a3 = 0;
  }
  if (v190 < 0)
    operator delete(v187);
LABEL_197:
  sub_22E3B9848(v191);
  v143 = v193;
  if ((_DWORD)v194)
  {
    v144 = v194;
    v145 = v193 - 1;
    do
    {
      v146 = v145[v144];
      v145[v144] = 0;
      if (v146)
        (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
      --v144;
    }
    while (v144 * 8);
    v143 = v193;
  }
  if (v143 != v195)
    free(v143);
  v191[0] = (char *)&v185;
  sub_22E3B4AF8((void ***)v191);
}

void sub_22E6CADC4(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_22F2A6390(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_22F2A6390(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_22E6CAE48(_QWORD *a1, _BYTE *a2, size_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  const void *v23;
  size_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  size_t v29;
  size_t v30;
  uint64_t v32;
  uint64_t v33;

  v12 = (_QWORD *)a1[24];
  v13 = operator new();
  v14 = (_DWORD *)a1[23];
  v15 = a1[26];
  v16 = sub_22E6CB02C(a1);
  v32 = 0;
  sub_22E78B02C(v13, v12, v14, v15, v16, 0, 0, v17, "", 0, 1, 0, 0, 0, 0, 1, &v32);
  if (v32)
  {
    v18 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v18, 0x10B2C402AE41D3ELL);
  }
  if (*(_DWORD *)(a5 + 8))
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)a5 + v19;
      v22 = *(_BYTE *)(v21 + 23);
      if (v22 >= 0)
        v23 = (const void *)(*(_QWORD *)a5 + v19);
      else
        v23 = *(const void **)v21;
      if (v22 >= 0)
        v24 = v22 & 0x7F;
      else
        v24 = *(_QWORD *)(v21 + 8);
      v25 = *(_QWORD *)(*a4 + 8 * v20);
      *(_QWORD *)(*a4 + 8 * v20) = 0;
      v33 = v25;
      sub_22F2DFF80(v13 + 144, v23, v24, &v33);
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      ++v20;
      v19 += 24;
    }
    while (v20 < *(unsigned int *)(a5 + 8));
  }
  *(_QWORD *)(v13 + 64) = a6;
  *(_BYTE *)(v13 + 72) = 0;
  if (sub_22E77A990(v13, a2, a3, 2u, 0, 0, 0))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return 0;
  }
  else
  {
    v26 = *(_BYTE *)(v13 + 11015);
    v27 = v26;
    if (v26 >= 0)
      v28 = (void *)(v13 + 10992);
    else
      v28 = *(void **)(v13 + 10992);
    v29 = v26 & 0x7F;
    if (v27 >= 0)
      v30 = v29;
    else
      v30 = *(_QWORD *)(v13 + 11000);
    sub_22E6CB154((uint64_t)v12, v28, v30);
  }
  return v13;
}

uint64_t sub_22E6CB02C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  size_t v17;
  unsigned __int8 *v18[3];
  __int16 v19;

  v2 = *(_QWORD *)(a1[2] + 40);
  v5 = *(void **)(v2 + 192);
  v3 = v2 + 192;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  if (v6 >= 0)
    v7 = (void *)v3;
  else
    v7 = v4;
  v8 = *(_QWORD *)(v3 + 8);
  if (v6 >= 0)
    v9 = v6 & 0x7F;
  else
    v9 = v8;
  result = *(_QWORD *)(*sub_22F2A6164((llvm::StringMapImpl *)(a1[36] + 32), v7, v9) + 8);
  if (!result)
  {
    v11 = a1[4];
    if (v11)
    {
      *(_QWORD *)(v11 + 312) = 0x2700000000;
      if (*(char *)(v11 + 311) < 0)
      {
        **(_BYTE **)(v11 + 288) = 0;
        *(_QWORD *)(v11 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v11 + 288) = 0;
        *(_BYTE *)(v11 + 311) = 0;
      }
      v18[0] = (unsigned __int8 *)(v11 + 320);
      v18[1] = 0;
      v18[2] = (unsigned __int8 *)v11;
      v19 = 1;
      *(_BYTE *)(v11 + 320) = 0;
      *(_DWORD *)(v11 + 664) = 0;
      v12 = *(unsigned int *)(v11 + 776);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v11 + 768);
        v14 = 56 * v12;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
      }
      *(_DWORD *)(v11 + 776) = 0;
      sub_22E3B89A8(v18, v7, v9);
      sub_22E3BB0B8((uint64_t)v18);
    }
    v15 = llvm::report_fatal_error((llvm *)"unknown module format", (const char *)1);
    return sub_22E6CB154(v15, v16, v17);
  }
  return result;
}

double sub_22E6CB154(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 2240);
  if (*(char *)(a1 + 2263) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 2256) = v12;
  return result;
}

uint64_t sub_22E6CB220(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  void **v5;

  v2 = *(_DWORD **)(sub_22F30564C((_QWORD *)a1) + 88);
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  *(_QWORD *)(a1 + 48) = &off_24FA6D598;
  v5 = (void **)(a1 + 64);
  sub_22E3B4AF8(&v5);
  nullsub_910(a1 + 48);
  return a1;
}

void sub_22E6CB298(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  void **v4;

  v2 = *(_DWORD **)(sub_22F30564C((_QWORD *)a1) + 88);
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  *(_QWORD *)(a1 + 48) = &off_24FA6D598;
  v4 = (void **)(a1 + 64);
  sub_22E3B4AF8(&v4);
  nullsub_910(a1 + 48);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E6CB320(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_24FA6D598;
  v3 = (void **)(a1 + 16);
  sub_22E3B4AF8(&v3);
  return nullsub_910(a1);
}

void sub_22E6CB364(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &off_24FA6D598;
  v2 = (void **)(a1 + 16);
  sub_22E3B4AF8(&v2);
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E6CB3BC(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[3] - result[2];
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    v4 = result;
    v5 = 0;
    v6 = (v2 >> 3);
    do
    {
      result = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4[2] + 8 * v5) + 208) + 16048);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 200))(result, a2);
      ++v5;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_22E6CB42C()
{
  return 0;
}

unint64_t sub_22E6CB434(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 88 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2A5C10(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2A5C10(a1);
    }
  }
  return v3;
}

uint64_t sub_22E6CB49C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _DWORD *v39;
  int v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  _DWORD *v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  *(_QWORD *)a1 = &off_24FA6D7A8;
  v2 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 448);
  if (v3 == (_QWORD *)(a1 + 424))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 424);
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_7;
  }
LABEL_8:
  v5 = *(std::__shared_weak_count **)(a1 + 416);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 400);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_22E54B6D0(a1 + 328, *(_QWORD **)(a1 + 336));
  v12 = *(_QWORD *)(a1 + 304);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 312);
    v14 = *(void **)(a1 + 304);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 304);
    }
    *(_QWORD *)(a1 + 312) = v12;
    operator delete(v14);
  }
  v18 = *(std::__shared_weak_count **)(a1 + 296);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 280);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(a1 + 264);
  if (v24)
  {
    v25 = *(_DWORD *)(v24 + 32) - 1;
    *(_DWORD *)(v24 + 32) = v25;
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 24) + 8))(v24 + 24);
  }
  v26 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v26)
  {
    v27 = MEMORY[0x23489EEC8]();
    MEMORY[0x2348A0E9C](v27, 0x10B2C402AE41D3ELL);
  }
  v28 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v28)
  {
    v29 = MEMORY[0x23489C234]();
    MEMORY[0x2348A0E9C](v29, 0x10B2C402416CA65);
  }
  v30 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v30)
  {
    v31 = sub_22E8FFA2C(v30);
    MEMORY[0x2348A0E9C](v31, 0x10F3C40F108FF96);
  }
  v32 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_DWORD **)(a1 + 216);
  if (v34)
  {
    v35 = v34[2] - 1;
    v34[2] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  sub_22F2A50D8((_DWORD **)(a1 + 208));
  v36 = *(std::__shared_weak_count **)(a1 + 200);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_22E6C6300((_DWORD **)(a1 + 184));
  sub_22F2A5160((_DWORD **)(a1 + 176));
  v39 = *(_DWORD **)(a1 + 168);
  if (v39)
  {
    v40 = v39[2] - 1;
    v39[2] = v40;
    if (!v40)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 32))(v39);
  }
  sub_22F2A511C((_DWORD **)(a1 + 160));
  if (*(_BYTE *)(a1 + 152))
  {
    v41 = *(void **)(a1 + 96);
    if (v41 != (void *)(a1 + 120))
      free(v41);
    *(_BYTE *)(a1 + 152) = 0;
  }
  v42 = *(std::__shared_weak_count **)(a1 + 80);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(std::__shared_weak_count **)(a1 + 64);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = *(_DWORD **)(a1 + 48);
  if (v48)
  {
    v49 = v48[2] - 1;
    v48[2] = v49;
    if (!v49)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
  }
  v50 = *(_DWORD **)(a1 + 40);
  if (v50)
  {
    v51 = v50[2] - 1;
    v50[2] = v51;
    if (!v51)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
  }
  sub_22E6C62BC((_DWORD **)(a1 + 32));
  v52 = *(std::__shared_weak_count **)(a1 + 24);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return a1;
}

uint64_t sub_22E6CB8FC(_QWORD *a1)
{
  uint64_t result;
  _DWORD *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  _OWORD *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  __int16 v31;
  _QWORD v32[3];
  __int16 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;

  result = sub_22F1EBCCC(a1[4], a1[2] + 16);
  if (result)
    ++*(_DWORD *)(result + 8);
  v3 = (_DWORD *)a1[5];
  a1[5] = result;
  if (v3)
  {
    v4 = v3[2] - 1;
    v3[2] = v4;
    if (!v4)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      result = a1[5];
    }
  }
  if (result)
  {
    if (a1[6])
      goto LABEL_33;
    v5 = (uint64_t *)a1[2];
    v6 = *v5;
    if ((*(_BYTE *)(*v5 + 68) & 0x20) == 0 && (*(_BYTE *)(v6 + 76) & 8) == 0 && (*(_BYTE *)(v6 + 104) & 4) == 0)
      goto LABEL_33;
    if (*((char *)v5 + 3023) < 0)
    {
      if (!v5[376])
        goto LABEL_33;
    }
    else if (!*((_BYTE *)v5 + 3023))
    {
LABEL_33:
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
      v20 = (_QWORD *)a1[2];
      if ((v19 & 1) == 0 && (*(_QWORD *)(*v20 + 140) & 0x4000000000000000) == 0)
      {
        v21 = *(_DWORD *)(*v20 + 244);
        if ((v21 & 0x70) != 0x10)
        {
          v22 = a1[4];
          *(_QWORD *)(v22 + 312) = 0x36800000000;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          v32[0] = v22 + 320;
          v32[1] = 0;
          v32[2] = v22;
          v33 = 1;
          *(_BYTE *)(v22 + 320) = 0;
          *(_DWORD *)(v22 + 664) = 0;
          v23 = *(unsigned int *)(v22 + 776);
          if ((_DWORD)v23)
          {
            v24 = *(_QWORD *)(v22 + 768);
            v25 = 56 * v23;
            do
            {
              if (*(char *)(v24 + v25 - 9) < 0)
                operator delete(*(void **)(v24 + v25 - 32));
              v25 -= 56;
            }
            while (v25);
          }
          *(_DWORD *)(v22 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v32);
          *(_DWORD *)(*(_QWORD *)a1[2] + 244) = *(_DWORD *)(*(_QWORD *)a1[2] + 244) & 0xFFFFFF8F | 0x10;
          v20 = (_QWORD *)a1[2];
          v21 = *(_DWORD *)(*v20 + 244);
        }
        if ((v21 & 0x180) != 0)
        {
          v26 = a1[4];
          *(_QWORD *)(v26 + 312) = 0x36700000000;
          if (*(char *)(v26 + 311) < 0)
          {
            **(_BYTE **)(v26 + 288) = 0;
            *(_QWORD *)(v26 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v26 + 288) = 0;
            *(_BYTE *)(v26 + 311) = 0;
          }
          v30[0] = v26 + 320;
          v30[1] = 0;
          v30[2] = v26;
          v31 = 1;
          *(_BYTE *)(v26 + 320) = 0;
          *(_DWORD *)(v26 + 664) = 0;
          v27 = *(unsigned int *)(v26 + 776);
          if ((_DWORD)v27)
          {
            v28 = *(_QWORD *)(v26 + 768);
            v29 = 56 * v27;
            do
            {
              if (*(char *)(v28 + v29 - 9) < 0)
                operator delete(*(void **)(v28 + v29 - 32));
              v29 -= 56;
            }
            while (v29);
          }
          *(_DWORD *)(v26 + 776) = 0;
          sub_22E3BB0B8((uint64_t)v30);
          *(_DWORD *)(*(_QWORD *)a1[2] + 244) &= 0xFFFFFE7F;
          v20 = (_QWORD *)a1[2];
        }
      }
      if ((*(_DWORD *)(*v20 + 52) & 0x40000000) == 0
        || (result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)a1[5] + 840))(a1[5], *v20, a1[4]),
            (_DWORD)result))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[5] + 424))(a1[5], a1[4]);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)a1[5] + 432))(a1[5], a1[2] + 296, *(_QWORD *)(a1[2] + 16));
        if (a1[6])
          (*(void (**)(_QWORD))(*(_QWORD *)a1[5] + 848))(a1[5]);
        return 1;
      }
      return result;
    }
    v7 = (char *)operator new(0x1A8uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &unk_24FA6D308;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_OWORD *)(v7 + 280) = 0u;
    *(_OWORD *)(v7 + 296) = 0u;
    *(_OWORD *)(v7 + 312) = 0u;
    *(_OWORD *)(v7 + 328) = 0u;
    *(_OWORD *)(v7 + 344) = 0u;
    *((_DWORD *)v7 + 67) = 16;
    *((_QWORD *)v7 + 36) = 0;
    *((_QWORD *)v7 + 35) = 0;
    *((_QWORD *)v7 + 37) = 0x1000000000;
    *((_QWORD *)v7 + 39) = 0;
    *((_QWORD *)v7 + 41) = 0;
    *((_QWORD *)v7 + 40) = 0;
    *(_DWORD *)(v7 + 335) = 0;
    *(_OWORD *)(v7 + 360) = 0u;
    *(_OWORD *)(v7 + 376) = 0u;
    *(_OWORD *)(v7 + 392) = 0u;
    *(_OWORD *)(v7 + 408) = 0u;
    v36 = v7 + 24;
    v37 = (std::__shared_weak_count *)v7;
    llvm::Triple::normalize();
    v8 = v36;
    v9 = (std::string *)v36;
    if (v36[23] < 0)
    {
      operator delete(*(void **)v36);
      v9 = (std::string *)v36;
    }
    v10 = v34;
    *((_QWORD *)v36 + 2) = v35;
    *v8 = v10;
    v11 = a1[2];
    if (*(_BYTE *)(v11 + 3048))
    {
      std::string::operator=(v9 + 2, (const std::string *)(v11 + 3024));
      v11 = a1[2];
      v9 = (std::string *)v36;
    }
    if (*(_BYTE *)(v11 + 3080) && &v9[7].__r_.__value_.__r.__words[1] != (std::string::size_type *)(v11 + 3056))
    {
      sub_22E63B120((uint64_t)&v9[7].__r_.__value_.__l.__size_, *(std::string **)(v11 + 3056), *(std::string **)(v11 + 3064), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 3064) - *(_QWORD *)(v11 + 3056)) >> 3));
      v9 = (std::string *)v36;
    }
    std::string::operator=(v9 + 1, (const std::string *)(a1[5] + 32));
    v12 = sub_22F1EBCCC(a1[4], (uint64_t)&v36);
    v13 = v12;
    if (v12)
      ++*(_DWORD *)(v12 + 8);
    v14 = (_DWORD *)a1[6];
    a1[6] = v13;
    if (v14)
    {
      v15 = v14[2] - 1;
      v14[2] = v15;
      if (!v15)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    }
    v16 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    result = a1[5];
    goto LABEL_33;
  }
  return result;
}

_DWORD *sub_22E6CBDAC(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;
  _DWORD *v4;

  if (a2)
    ++*a2;
  v4 = *(_DWORD **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = a2;
  result = sub_22F2A50D8(&v4);
  if (*(_QWORD *)(a1 + 208))
  {
    result = *(_DWORD **)(a1 + 224);
    if (result)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

_DWORD *sub_22E6CBE10(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v6;

  sub_22E6CBE60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), a2, a3, *(_QWORD *)(a1 + 16) + 296, (uint64_t *)&v6);
  v4 = v6;
  v6 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  return sub_22E6C62BC(&v6);
}

uint64_t *sub_22E6CBE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  void *v28;
  size_t v29;
  size_t v30;
  std::string *v31;
  size_t size;
  uint64_t v33;
  char v34;
  const void *v35;
  size_t v36;
  __int128 *p_dst;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  const void *v47;
  size_t v48;
  std::string::size_type v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string v63;
  __int128 __dst;
  unint64_t v65;
  __int16 v66;
  std::error_code v67;

  v10 = operator new();
  *(_QWORD *)(v10 + 8) = 0;
  v62 = v10;
  *(_DWORD *)v10 = 1;
  v11 = operator new();
  v12 = v11;
  v60 = a1;
  v61 = v10;
  ++*(_DWORD *)v10;
  if (a1)
    ++*(_DWORD *)a1;
  sub_22F1CB3A4(v11, &v61, &v60, 0, 1);
  *a5 = v12;
  ++*(_DWORD *)v12;
  sub_22E3B3C18(&v60);
  sub_22E3B3D40(&v61);
  if (a2)
  {
    if (a3)
      v13 = a2;
    else
      v13 = 0;
    v14 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v12 + 56) = v13;
    if (!v14)
      goto LABEL_8;
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    goto LABEL_8;
  }
  a2 = operator new();
  v16 = llvm::errs((llvm *)a2);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = &off_24FA71900;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = a1;
  if (a1)
    ++*(_DWORD *)a1;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_BYTE *)(a2 + 64) &= ~1u;
  v14 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v12 + 56) = a2;
  if (v14)
    goto LABEL_14;
LABEL_8:
  *(_QWORD *)(v12 + 48) = a2;
  if ((*(_BYTE *)(a1 + 6) & 0x10) != 0)
  {
    v58 = operator new();
    sub_22F2AFC44(v58, v12);
    v59 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v12 + 56) = v58;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    *(_QWORD *)(v12 + 48) = v58;
  }
  if (*(char *)(a1 + 71) < 0)
    v15 = *(_QWORD *)(a1 + 56);
  else
    v15 = *(unsigned __int8 *)(a1 + 71);
  if (v15)
  {
    v67.__val_ = 0;
    v67.__cat_ = std::system_category();
    v17 = llvm::errs((llvm *)v67.__cat_);
    v18 = *(unsigned __int8 *)(a1 + 71);
    if ((v18 & 0x80u) == 0)
      v19 = v18 & 0x7F;
    else
      v19 = *(_QWORD *)(a1 + 56);
    if (v19 != 1
      || ((v18 & 0x80) != 0
        ? (const void *)(v20 = *(const void **)(a1 + 48), v18 = *(_QWORD *)(a1 + 56))
        : (v20 = (const void *)(a1 + 48)),
          (v21 = memcmp(v20, "-", v18 != 0), v18 != 1) || v21))
    {
      v22 = (llvm::raw_ostream *)operator new();
      llvm::raw_fd_ostream::raw_fd_ostream();
      if (!v67.__val_)
      {
        if (*((_QWORD *)v22 + 4) != *((_QWORD *)v22 + 2))
          llvm::raw_ostream::flush_nonempty(v22);
        llvm::raw_ostream::SetBufferAndMode();
        v17 = (uint64_t)v22;
LABEL_54:
        v33 = operator new();
        *(_QWORD *)(v33 + 8) = 0;
        *(_QWORD *)v33 = &off_24FA70FC8;
        *(_QWORD *)(v33 + 16) = v17;
        *(_QWORD *)(v33 + 24) = v22;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 40) = a1;
        ++*(_DWORD *)a1;
        *(_DWORD *)(v33 + 48) = 0;
        *(_DWORD *)(v33 + 56) = 0;
        *(_QWORD *)(v33 + 64) = 0;
        *(_QWORD *)(v33 + 72) = v33 + 88;
        *(_QWORD *)(v33 + 80) = 0x800000000;
        *(_OWORD *)(v33 + 856) = 0u;
        *(_OWORD *)(v33 + 872) = 0u;
        *(_OWORD *)(v33 + 888) = 0u;
        if (!a4)
        {
LABEL_72:
          v41 = *(_QWORD *)(v12 + 56);
          v42 = (_QWORD *)operator new();
          if (v41)
          {
            v43 = 0;
            v44 = *(_QWORD *)(v12 + 56);
            v45 = v44;
          }
          else
          {
            v44 = 0;
            v45 = *(_QWORD *)(v12 + 48);
            v43 = *(_QWORD *)(v12 + 56);
          }
          *v42 = &off_24FA6D3B0;
          v42[1] = 0;
          v42[2] = v44;
          v42[3] = v45;
          v42[4] = v33;
          *(_QWORD *)(v12 + 56) = v42;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          *(_QWORD *)(v12 + 48) = v42;
          goto LABEL_78;
        }
        v34 = *(_BYTE *)(a4 + 383);
        if (v34 >= 0)
          v35 = (const void *)(a4 + 360);
        else
          v35 = *(const void **)(a4 + 360);
        if (v34 >= 0)
          v36 = v34 & 0x7F;
        else
          v36 = *(_QWORD *)(a4 + 368);
        if (v36 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v36 >= 0x17)
        {
          v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v38 = v36 | 7;
          v39 = v38 + 1;
          p_dst = (__int128 *)operator new(v38 + 1);
          *((_QWORD *)&__dst + 1) = v36;
          v65 = v39 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v65) = v36;
          p_dst = &__dst;
          if (!v36)
            goto LABEL_69;
        }
        memmove(p_dst, v35, v36);
LABEL_69:
        *((_BYTE *)p_dst + v36) = 0;
        v40 = (void **)(v33 + 880);
        if (*(char *)(v33 + 903) < 0)
          operator delete(*v40);
        *(_OWORD *)v40 = __dst;
        *(_QWORD *)(v33 + 896) = v65;
        goto LABEL_72;
      }
      *(_QWORD *)(v12 + 312) = 0x36A00000000;
      if (*(char *)(v12 + 311) < 0)
      {
        **(_BYTE **)(v12 + 288) = 0;
        *(_QWORD *)(v12 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v12 + 288) = 0;
        *(_BYTE *)(v12 + 311) = 0;
      }
      __dst = (unint64_t)(v12 + 320);
      v65 = v12;
      v66 = 1;
      *(_BYTE *)(v12 + 320) = 0;
      *(_DWORD *)(v12 + 664) = 0;
      v23 = *(unsigned int *)(v12 + 776);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v12 + 768);
        v25 = 56 * v23;
        do
        {
          if (*(char *)(v24 + v25 - 9) < 0)
            operator delete(*(void **)(v24 + v25 - 32));
          v25 -= 56;
        }
        while (v25);
      }
      *(_DWORD *)(v12 + 776) = 0;
      v26 = *(_BYTE *)(a1 + 71);
      v27 = v26 < 0;
      if (v26 >= 0)
        v28 = (void *)(a1 + 48);
      else
        v28 = *(void **)(a1 + 48);
      v29 = v26 & 0x7F;
      if (v27)
        v30 = *(_QWORD *)(a1 + 56);
      else
        v30 = v29;
      sub_22E3B89A8((unsigned __int8 **)&__dst, v28, v30);
      std::error_code::message(&v63, &v67);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v63;
      else
        v31 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v63.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v63.__r_.__value_.__l.__size_;
      sub_22E3B89A8((unsigned __int8 **)&__dst, v31, size);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      sub_22E3BB0B8((uint64_t)&__dst);
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v22 + 8))(v22);
    }
    v22 = 0;
    goto LABEL_54;
  }
LABEL_78:
  v46 = *(_BYTE *)(a1 + 95);
  if (v46 < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_95;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_95;
  }
  if (v46 >= 0)
    v47 = (const void *)(a1 + 72);
  else
    v47 = *(const void **)(a1 + 72);
  if (v46 >= 0)
    v48 = *(unsigned __int8 *)(a1 + 95);
  else
    v48 = *(_QWORD *)(a1 + 80);
  v63.__r_.__value_.__r.__words[0] = 0;
  sub_22E73EDEC(v47, v48, (_DWORD *)a1, 0, (uint64_t *)&v63, (uint64_t *)&__dst);
  v49 = v63.__r_.__value_.__r.__words[0];
  v63.__r_.__value_.__r.__words[0] = 0;
  if (v49)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(v12 + 56);
  v51 = (_QWORD *)operator new();
  if (v50)
  {
    v52 = 0;
    v53 = *(_QWORD *)(v12 + 56);
    v54 = v53;
  }
  else
  {
    v53 = 0;
    v54 = *(_QWORD *)(v12 + 48);
    v52 = *(_QWORD *)(v12 + 56);
  }
  v55 = __dst;
  *(_QWORD *)&__dst = 0;
  *v51 = &off_24FA6D3B0;
  v51[1] = 0;
  v51[2] = v53;
  v51[3] = v54;
  v51[4] = v55;
  *(_QWORD *)(v12 + 56) = v51;
  if (v52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v57 = __dst;
    *(_QWORD *)(v12 + 48) = v51;
    *(_QWORD *)&__dst = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  else
  {
    *(_QWORD *)(v12 + 48) = v51;
  }
LABEL_95:
  sub_22F20DA74(v12, a1, 1);
  return sub_22E3B3D40(&v62);
}

uint64_t sub_22E6CC4D4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  if (!*a2)
  {
    v4 = a1[20];
    if (v4)
    {
      v18 = *(_QWORD *)(v4 + 8);
      if (v18)
      {
        v19 = (unsigned int *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v37 = *a2;
        v21 = v37;
        *a2 = v18;
        if (v21)
        {
          v22 = (unsigned int *)(v21 + 8);
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      else
      {
        v37 = 0;
        *a2 = 0;
      }
    }
    else
    {
      v5 = a1[2];
      v6 = a1[4];
      v7 = (std::__shared_weak_count *)a1[8];
      v35 = a1[7];
      v36 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      sub_22F2A8FF8(v5, v6, (uint64_t)&v35, &v37);
      v10 = v37;
      v37 = *a2;
      v11 = v37;
      *a2 = v10;
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 8);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      v15 = v36;
      if (v36)
      {
        v16 = (unint64_t *)&v36->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v25 = operator new();
  v26 = (__int128 *)(a1[2] + 2216);
  v33 = *a2;
  *a2 = 0;
  v27 = (_DWORD *)sub_22F41ABB4(v25, v26, &v33);
  ++*v27;
  v34 = (_DWORD *)a1[20];
  a1[20] = v27;
  sub_22F2A511C(&v34);
  v28 = v33;
  if (v33)
  {
    v29 = (unsigned int *)(v33 + 8);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  return a1[20];
}

_DWORD *sub_22E6CC69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v7;

  v4 = operator new();
  v5 = (_DWORD *)sub_22F4233E4(v4, *(_QWORD *)(a1 + 32), a2, 0);
  ++*v5;
  v7 = *(_DWORD **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v5;
  return sub_22F2A5160(&v7);
}

void sub_22E6CC70C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  const void **i;
  char v35;
  BOOL v36;
  const void *v37;
  size_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  BOOL v46;
  void *v47;
  size_t v48;
  size_t v49;
  void *v50;
  const void **v51;
  const void **v52;
  char v53;
  int v54;
  const void **v55;
  const void *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  size_t v62;
  unint64_t v63;
  uint64_t v64;
  const void *v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  BOOL v73;
  size_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  BOOL v80;
  void *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  const void **v89;
  uint64_t v90;
  uint64_t v91;
  llvm *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  const void *v109;
  size_t v110;
  uint64_t v111;
  char v112;
  const void *v113;
  size_t v114;
  char *v115;
  char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  char v135;
  BOOL v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  llvm::vfs *File;
  std::string::size_type v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  std::string::size_type v189;
  char *v190;
  uint64_t v191;
  char v192;
  BOOL v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  int v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  char v209;
  const char *v210;
  size_t v211;
  int v212;
  void **v213;
  size_t v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  const void *v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  uint64_t v224;
  std::string *p_p;
  size_t size;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  int v231;
  size_t v232;
  size_t v233;
  size_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v242;
  _BYTE *v243;
  char *v244;
  std::__shared_weak_count *v245;
  _QWORD *v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  _QWORD v252[2];
  void *v253[2];
  int64_t v254;
  __int16 v255;
  std::string __p;
  _BYTE __dst[24];
  _WORD v258[444];
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v4 = *(_QWORD *)(a1 + 264);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 32) - 1;
    *(_DWORD *)(v4 + 32) = v5;
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 24) + 8))(v4 + 24);
  }
  *(_QWORD *)(a1 + 264) = 0;
  v6 = operator new();
  v7 = v6;
  v8 = *(uint64_t **)(a1 + 16);
  v9 = v8[6];
  *(_QWORD *)&v249 = v8[5];
  *((_QWORD *)&v249 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v8 = *(uint64_t **)(a1 + 16);
  }
  sub_22F13778C(v6, &v249, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 32), *v8, *(_QWORD *)(a1 + 40));
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
  if (*((_QWORD *)&v249 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(uint64_t **)(a1 + 16);
  v16 = v15[7];
  v17 = v15[8];
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v15 = *(uint64_t **)(a1 + 16);
  }
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *v15;
  v22 = *(_QWORD *)(a1 + 176);
  v23 = operator new(0xBC0uLL);
  v23[2] = 0;
  *v23 = &unk_24FA6D218;
  v23[1] = 0;
  *(_QWORD *)__dst = v16;
  *(_QWORD *)&__dst[8] = v17;
  sub_22F18C5EC((uint64_t)(v23 + 3), __dst, v20, v21, v22, v7, a1, 0, 1, a2);
  v24 = *(std::__shared_weak_count **)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v23 + 3;
  *(_QWORD *)(a1 + 200) = v23;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 424))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 16));
  sub_22F4181CC(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(v3 + 73))
    sub_22F418734(*(_QWORD **)(a1 + 192));
  v30 = *(_QWORD **)(a1 + 192);
  v31 = v30[6];
  v32 = v30[10];
  v242 = v30[11];
  v33 = *(const void ***)(v3 + 224);
  for (i = *(const void ***)(v3 + 232); v33 != i; v33 += 4)
  {
    v35 = *((_BYTE *)v33 + 23);
    v36 = v35 < 0;
    if (v35 >= 0)
      v37 = v33;
    else
      v37 = *v33;
    v38 = v35 & 0x7F;
    if (v36)
      v39 = (size_t)v33[1];
    else
      v39 = v38;
    v40 = sub_22F1D1104(v32, v37, v39, *((_QWORD *)v33[3] + 2) - *((_QWORD *)v33[3] + 1), 0);
    do
    {
      v41 = *(_QWORD *)(v40 + 8);
      v40 = v41 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v41 & 2) != 0 && v40);
    if (v40)
    {
      if (*(_BYTE *)(v3 + 248))
      {
        llvm::MemoryBuffer::getMemBufferRef((llvm::MemoryBuffer *)v33[3]);
        sub_22F2A7BC4(v242, v40);
        continue;
      }
      v253[0] = (void *)v33[3];
      sub_22F42393C(v242, v40, (uint64_t *)v253);
      v50 = v253[0];
      v253[0] = 0;
      if (!v50)
        continue;
    }
    else
    {
      *(_QWORD *)(v31 + 312) = 0x30B00000000;
      if (*(char *)(v31 + 311) < 0)
      {
        **(_BYTE **)(v31 + 288) = 0;
        *(_QWORD *)(v31 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v31 + 288) = 0;
        *(_BYTE *)(v31 + 311) = 0;
      }
      *(_QWORD *)__dst = v31 + 320;
      *(_QWORD *)&__dst[8] = 0;
      *(_QWORD *)&__dst[16] = v31;
      v258[0] = 1;
      *(_BYTE *)(v31 + 320) = 0;
      *(_DWORD *)(v31 + 664) = 0;
      v42 = *(unsigned int *)(v31 + 776);
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(v31 + 768);
        v44 = 56 * v42;
        do
        {
          if (*(char *)(v43 + v44 - 9) < 0)
            operator delete(*(void **)(v43 + v44 - 32));
          v44 -= 56;
        }
        while (v44);
      }
      *(_DWORD *)(v31 + 776) = 0;
      v45 = *((_BYTE *)v33 + 23);
      v46 = v45 < 0;
      if (v45 >= 0)
        v47 = v33;
      else
        v47 = (void *)*v33;
      v48 = v45 & 0x7F;
      if (v46)
        v49 = (size_t)v33[1];
      else
        v49 = v48;
      sub_22E3B89A8((unsigned __int8 **)__dst, v47, v49);
      sub_22E3BB0B8((uint64_t)__dst);
      if (*(_BYTE *)(v3 + 248))
        continue;
      v50 = (void *)v33[3];
      if (!v50)
        continue;
    }
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  }
  v51 = *(const void ***)(v3 + 200);
  v52 = *(const void ***)(v3 + 208);
  if (v51 != v52)
  {
    while (1)
    {
      v53 = *((_BYTE *)v51 + 47);
      v54 = v53;
      v55 = v53 >= 0 ? v51 + 3 : (const void **)v51[3];
      v56 = (const void *)(v53 & 0x7F);
      v57 = (size_t)(v54 >= 0 ? v56 : v51[4]);
      v58 = sub_22F2A7C2C(v32, v55, v57, 0, 1);
      if (!v58)
        break;
      v59 = v58;
      v60 = *((_BYTE *)v51 + 23);
      v61 = v60;
      v62 = v60 & 0x7F;
      v63 = v58;
      do
      {
        v64 = *(_QWORD *)(v63 + 8);
        v63 = v64 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v64 & 2) != 0 && v63);
      if (v61 >= 0)
        v65 = v51;
      else
        v65 = *v51;
      if (v61 >= 0)
        v66 = v62;
      else
        v66 = (size_t)v51[1];
      v67 = sub_22F1D1104(v32, v65, v66, *(_QWORD *)(v63 + 24), 0);
      do
      {
        v68 = *(_QWORD *)(v67 + 8);
        v67 = v68 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v68 & 2) != 0 && v67);
      if (!v67)
      {
        *(_QWORD *)(v31 + 312) = 0x30B00000000;
        if (*(char *)(v31 + 311) < 0)
        {
          **(_BYTE **)(v31 + 288) = 0;
          *(_QWORD *)(v31 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v31 + 288) = 0;
          *(_BYTE *)(v31 + 311) = 0;
        }
        *(_QWORD *)__dst = v31 + 320;
        *(_QWORD *)&__dst[8] = 0;
        *(_QWORD *)&__dst[16] = v31;
        v258[0] = 1;
        *(_BYTE *)(v31 + 320) = 0;
        *(_DWORD *)(v31 + 664) = 0;
        v69 = *(unsigned int *)(v31 + 776);
        if ((_DWORD)v69)
        {
          v70 = *(_QWORD *)(v31 + 768);
          v71 = 56 * v69;
          do
          {
            if (*(char *)(v70 + v71 - 9) < 0)
              operator delete(*(void **)(v70 + v71 - 32));
            v71 -= 56;
          }
          while (v71);
        }
        *(_DWORD *)(v31 + 776) = 0;
        v72 = *((_BYTE *)v51 + 23);
        v73 = v72 < 0;
        v74 = (size_t)v51[1];
        if (v72 >= 0)
          v75 = v51;
        else
          v75 = (void *)*v51;
LABEL_112:
        v84 = v72 & 0x7F;
        if (v73)
          v85 = v74;
        else
          v85 = v84;
        sub_22E3B89A8((unsigned __int8 **)__dst, v75, v85);
        sub_22E3BB0B8((uint64_t)__dst);
        goto LABEL_116;
      }
      sub_22F423A50(v242, v67, v59);
LABEL_116:
      v51 += 6;
      if (v51 == v52)
        goto LABEL_119;
    }
    *(_QWORD *)(v31 + 312) = 0x30C00000000;
    if (*(char *)(v31 + 311) < 0)
    {
      **(_BYTE **)(v31 + 288) = 0;
      *(_QWORD *)(v31 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v31 + 288) = 0;
      *(_BYTE *)(v31 + 311) = 0;
    }
    *(_QWORD *)__dst = v31 + 320;
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = v31;
    v258[0] = 1;
    *(_BYTE *)(v31 + 320) = 0;
    *(_DWORD *)(v31 + 664) = 0;
    v76 = *(unsigned int *)(v31 + 776);
    if ((_DWORD)v76)
    {
      v77 = *(_QWORD *)(v31 + 768);
      v78 = 56 * v76;
      do
      {
        if (*(char *)(v77 + v78 - 9) < 0)
          operator delete(*(void **)(v77 + v78 - 32));
        v78 -= 56;
      }
      while (v78);
    }
    *(_DWORD *)(v31 + 776) = 0;
    v79 = *((_BYTE *)v51 + 23);
    v80 = v79 < 0;
    if (v79 >= 0)
      v81 = v51;
    else
      v81 = (void *)*v51;
    v82 = v79 & 0x7F;
    if (v80)
      v83 = (size_t)v51[1];
    else
      v83 = v82;
    sub_22E3B89A8((unsigned __int8 **)__dst, v81, v83);
    v72 = *((_BYTE *)v51 + 47);
    v73 = v72 < 0;
    v74 = (size_t)v51[4];
    if (v72 >= 0)
      v75 = v51 + 3;
    else
      v75 = (void *)v51[3];
    goto LABEL_112;
  }
LABEL_119:
  *(_BYTE *)(v242 + 144) = *(_BYTE *)(v3 + 196);
  v86 = *(uint64_t **)(a1 + 192);
  v87 = sub_22E6CB02C((_QWORD *)a1);
  sub_22E7334B0(v86, v3, v87, *(_QWORD *)(a1 + 16) + 2288);
  v88 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v88 + 2448))
  {
    v89 = *(const void ***)(v88 + 2440);
    if (!*((_BYTE *)v89 + 56))
    {
      v217 = *(_QWORD *)(a1 + 192);
      v218 = *(_QWORD *)(v217 + 88);
      v219 = *((_BYTE *)v89 + 23);
      if (v219 >= 0)
        v220 = v89;
      else
        v220 = *v89;
      if (!v220)
      {
        v253[0] = 0;
        v253[1] = 0;
        v254 = 0;
LABEL_373:
        sub_22E6CDAD4(&__p, (_QWORD *)a1);
        v238 = operator new();
        *(_QWORD *)&__dst[16] = v254;
        *(_OWORD *)__dst = *(_OWORD *)v253;
        v253[0] = 0;
        v253[1] = 0;
        v254 = 0;
        v239 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *(_QWORD *)v238 = &off_24FA6D940;
        *(_QWORD *)(v238 + 8) = v218;
        *(_OWORD *)(v238 + 16) = v239;
        *(_DWORD *)(v238 + 32) = 0;
        *(_QWORD *)(v238 + 40) = kdebug_trace_string();
        *(_QWORD *)(v238 + 48) = v238 + 64;
        *(_QWORD *)(v238 + 56) = 0x800000000;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v248 = v238;
        sub_22F2968D4(v217, &v248);
        v240 = v248;
        v248 = 0;
        if (v240)
          (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
        goto LABEL_121;
      }
      v231 = v219;
      v232 = (size_t)v89[1];
      v233 = v219 & 0x7F;
      if (v231 >= 0)
        v234 = v233;
      else
        v234 = v232;
      if (v234 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_377;
      if (v234 >= 0x17)
      {
        v236 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v234 | 7) != 0x17)
          v236 = v234 | 7;
        v237 = v236 + 1;
        v235 = operator new(v236 + 1);
        v253[1] = (void *)v234;
        v254 = v237 | 0x8000000000000000;
        v253[0] = v235;
      }
      else
      {
        HIBYTE(v254) = v234;
        v235 = v253;
        if (!v234)
          goto LABEL_372;
      }
      memmove(v235, v220, v234);
LABEL_372:
      *((_BYTE *)v235 + v234) = 0;
      goto LABEL_373;
    }
  }
LABEL_121:
  v90 = *(_QWORD *)(a1 + 192);
  v91 = *(_QWORD *)(v90 + 64);
  v92 = (llvm *)(v91 + 32);
  if (*(_DWORD *)(v91 + 68) == 22)
  {
    v93 = *(_QWORD *)(v90 + 72);
    if (v93)
      v92 = (llvm *)(v93 + 32);
  }
  sub_22F13D8C4(*(_QWORD **)(v90 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), *(_QWORD **)(v90 + 56), v92);
  *(_WORD *)(*(_QWORD *)(a1 + 192) + 536) = *(_WORD *)(*(_QWORD *)(a1 + 192) + 536) & 0xFDFF | ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 3120) & 1) << 9);
  if ((~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 56) + 20) & 0x100200000000000) == 0)
  {
    sub_22E711880(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 32), v253);
    if (v254 >= 0)
      v213 = v253;
    else
      v213 = (void **)v253[0];
    if (v254 >= 0)
      v214 = HIBYTE(v254) & 0x7F;
    else
      v214 = (size_t)v253[1];
    if (v214 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_377;
    v215 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
    if (v214 >= 0x17)
    {
      v221 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v214 | 7) != 0x17)
        v221 = v214 | 7;
      v222 = v221 + 1;
      v216 = operator new(v221 + 1);
      *(_QWORD *)&__dst[8] = v214;
      *(_QWORD *)&__dst[16] = v222 | 0x8000000000000000;
      *(_QWORD *)__dst = v216;
    }
    else
    {
      __dst[23] = v214;
      v216 = __dst;
      if (!v214)
      {
LABEL_339:
        v216[v214] = 0;
        v223 = (void **)(v215 + 144);
        if (*(char *)(v215 + 167) < 0)
          operator delete(*v223);
        *(_OWORD *)v223 = *(_OWORD *)__dst;
        *(_QWORD *)(v215 + 160) = *(_QWORD *)&__dst[16];
        v224 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
        sub_22F2A6A84(a1, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __p.__r_.__value_.__l.__size_;
        if (size <= 0x7FFFFFFFFFFFFFF7)
        {
          if (size >= 0x17)
          {
            v228 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((size | 7) != 0x17)
              v228 = size | 7;
            v229 = v228 + 1;
            v227 = operator new(v228 + 1);
            *(_QWORD *)&__dst[8] = size;
            *(_QWORD *)&__dst[16] = v229 | 0x8000000000000000;
            *(_QWORD *)__dst = v227;
          }
          else
          {
            __dst[23] = size;
            v227 = __dst;
            if (!size)
              goto LABEL_355;
          }
          memmove(v227, p_p, size);
LABEL_355:
          v227[size] = 0;
          v230 = (void **)(v224 + 168);
          if (*(char *)(v224 + 191) < 0)
            operator delete(*v230);
          *(_OWORD *)v230 = *(_OWORD *)__dst;
          *(_QWORD *)(v224 + 184) = *(_QWORD *)&__dst[16];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v254) < 0)
            operator delete(v253[0]);
          goto LABEL_125;
        }
LABEL_377:
        abort();
      }
    }
    memmove(v216, v213, v214);
    goto LABEL_339;
  }
LABEL_125:
  v94 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v94 + 2071) < 0)
    v95 = *(_QWORD *)(v94 + 2056);
  else
    v95 = *(unsigned __int8 *)(v94 + 2071);
  if (v95)
  {
    v96 = (std::__shared_weak_count *)operator new(0xA0uLL);
    v97 = v96;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA6DAB8;
    v98 = &v96[1].__vftable;
    v99 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)__dst = v99;
    if (v99)
      ++*(_DWORD *)(v99 + 8);
    sub_22E725BFC((uint64_t)&v96[1], v94 + 2024, __dst);
    v100 = *(_QWORD *)__dst;
    if (*(_QWORD *)__dst)
    {
      v101 = *(_DWORD *)(*(_QWORD *)__dst + 8) - 1;
      *(_DWORD *)(*(_QWORD *)__dst + 8) = v101;
      if (!v101)
        (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
    }
    v246 = v98;
    v247 = v97;
    v102 = *(_QWORD **)(a1 + 312);
    if ((unint64_t)v102 >= *(_QWORD *)(a1 + 320))
    {
      v103 = sub_22E6D58A8((char **)(a1 + 304), (uint64_t)&v246);
      v104 = v247;
      *(_QWORD *)(a1 + 312) = v103;
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
    }
    else
    {
      *v102 = v98;
      v102[1] = v97;
      v246 = 0;
      v247 = 0;
      *(_QWORD *)(a1 + 312) = v102 + 2;
    }
  }
  v107 = *(_BYTE *)(v94 + 2191);
  if (v107 < 0)
    v108 = *(_QWORD *)(v94 + 2176);
  else
    v108 = *(unsigned __int8 *)(v94 + 2191);
  v243 = (_BYTE *)(v94 + 2024);
  if (v108)
  {
    if (v107 >= 0)
      v109 = (const void *)(v94 + 2168);
    else
      v109 = *(const void **)(v94 + 2168);
    if (v107 >= 0)
      v110 = *(unsigned __int8 *)(v94 + 2191);
    else
      v110 = *(_QWORD *)(v94 + 2176);
    v111 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
    v112 = *(_BYTE *)(v111 + 23);
    if (v112 >= 0)
      v113 = *(const void **)(*(_QWORD *)(a1 + 16) + 40);
    else
      v113 = *(const void **)v111;
    if (v112 >= 0)
      v114 = v112 & 0x7F;
    else
      v114 = *(_QWORD *)(v111 + 8);
    sub_22E726D34(*(_QWORD *)(a1 + 192), v109, v110, v113, v114);
  }
  v115 = *(char **)(a1 + 272);
  if (v115)
    goto LABEL_172;
  if (*(char *)(v94 + 2215) < 0)
  {
    if (!*(_QWORD *)(v94 + 2200))
      goto LABEL_171;
LABEL_163:
    v116 = (char *)operator new(0xF0uLL);
    *((_QWORD *)v116 + 1) = 0;
    *((_QWORD *)v116 + 2) = 0;
    *(_QWORD *)v116 = &off_24FA6DAF0;
    v115 = v116 + 24;
    if (*(char *)(v94 + 2215) < 0)
    {
      sub_22E3BB2B4(__dst, *(void **)(v94 + 2192), *(_QWORD *)(v94 + 2200));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v94 + 2192);
      *(_QWORD *)&__dst[16] = *(_QWORD *)(v94 + 2208);
    }
    *((_QWORD *)v116 + 5) = 0;
    *((_QWORD *)v116 + 6) = 0x800000000;
    *((_QWORD *)v116 + 9) = 0;
    *((_QWORD *)v116 + 10) = 0;
    *((_QWORD *)v116 + 8) = 0;
    *((_QWORD *)v116 + 3) = &off_24FA71048;
    *((_QWORD *)v116 + 4) = 0;
    *(_OWORD *)(v116 + 88) = *(_OWORD *)__dst;
    *((_QWORD *)v116 + 13) = *(_QWORD *)&__dst[16];
    v116[112] = 0;
    *((_QWORD *)v116 + 15) = 0;
    *((_QWORD *)v116 + 16) = 0;
    *((_QWORD *)v116 + 17) = 0x800000000;
    *((_QWORD *)v116 + 19) = 0;
    *((_QWORD *)v116 + 20) = 0;
    *(_QWORD *)(v116 + 174) = 0;
    *((_QWORD *)v116 + 21) = 0;
    *(_OWORD *)(v116 + 212) = 0u;
    *(_OWORD *)(v116 + 200) = 0u;
    *(_OWORD *)(v116 + 184) = 0u;
    *((_DWORD *)v116 + 57) = 32;
    v117 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = v115;
    *(_QWORD *)(a1 + 280) = v116;
    if (!v117)
      goto LABEL_172;
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
    goto LABEL_171;
  }
  if (*(_BYTE *)(v94 + 2215))
    goto LABEL_163;
LABEL_171:
  v115 = *(char **)(a1 + 272);
  if (!v115)
    goto LABEL_296;
LABEL_172:
  v120 = *(std::__shared_weak_count **)(a1 + 280);
  v244 = v115;
  v245 = v120;
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v123 = *(_QWORD **)(a1 + 312);
  if ((unint64_t)v123 >= *(_QWORD *)(a1 + 320))
  {
    v124 = sub_22E6D58A8((char **)(a1 + 304), (uint64_t)&v244);
    v125 = v245;
    *(_QWORD *)(a1 + 312) = v124;
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
  }
  else
  {
    *v123 = v115;
    v123[1] = v245;
    v244 = 0;
    v245 = 0;
    *(_QWORD *)(a1 + 312) = v123 + 2;
  }
  v128 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 104);
  v130 = *(_QWORD *)(a1 + 272);
  v129 = *(std::__shared_weak_count **)(a1 + 280);
  if (v129)
  {
    v131 = (unint64_t *)&v129->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  *(_QWORD *)__dst = &__dst[16];
  *(_QWORD *)&__dst[8] = 0x400000000;
  sub_22F137CE8(v128, (uint64_t)__dst);
  if (*(_DWORD *)&__dst[8])
  {
    v133 = *(uint64_t **)__dst;
    v134 = 24 * *(unsigned int *)&__dst[8];
    do
    {
      v135 = *((_BYTE *)v133 + 23);
      v136 = v135 < 0;
      if (v135 >= 0)
        v137 = v133;
      else
        v137 = (uint64_t *)*v133;
      v138 = v135 & 0x7F;
      if (v136)
        v139 = v133[1];
      else
        v139 = v138;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v130 + 72))(v130, v137, v139, 0, 0);
      v133 += 3;
      v134 -= 24;
    }
    while (v134);
  }
  sub_22E3B9848((char **)__dst);
  if (v129)
  {
    v140 = (unint64_t *)&v129->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v143 = *(_QWORD *)(a1 + 272);
  v142 = *(std::__shared_weak_count **)(a1 + 280);
  if (v142)
  {
    v144 = (unint64_t *)&v142->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  v146 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v147 = *(unsigned __int8 *)(v146 + 127);
  if (*(char *)(v146 + 127) < 0)
  {
    if (!*(_QWORD *)(v146 + 112))
      goto LABEL_243;
  }
  else if (!*(_BYTE *)(v146 + 127))
  {
    goto LABEL_243;
  }
  v148 = (char *)(v146 + 104);
  v150 = *(char **)(v146 + 104);
  v149 = *(_QWORD *)(v146 + 112);
  if ((v147 & 0x80u) == 0)
    v151 = v148;
  else
    v151 = v150;
  if ((v147 & 0x80u) == 0)
    v152 = v147;
  else
    v152 = v149;
  v153 = *(_QWORD *)(a1 + 160);
  v154 = sub_22E6D59C0(v153, v151, v152, 1);
  if (!v154)
  {
    (*(void (**)(uint64_t, char *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v143 + 72))(v143, v151, v152, 0, 0);
    if (v142)
      goto LABEL_244;
    goto LABEL_249;
  }
  v155 = (void **)v154;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
  *(_QWORD *)__dst = v258;
  *(_OWORD *)&__dst[8] = xmmword_22F44E310;
  v156 = *v155;
  v255 = 261;
  v253[0] = v155 + 4;
  v253[1] = v156;
  llvm::sys::path::native();
  v157 = *(_QWORD *)(v153 + 8);
  v158 = *(_QWORD *)(a1 + 192);
  v252[0] = &off_24FA71FF0;
  v252[1] = v158;
  v255 = 261;
  v253[0] = *(void **)__dst;
  v253[1] = *(void **)&__dst[8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, std::string *))(*(_QWORD *)v157 + 32))(&v250, v157, v253, &__p);
  v253[0] = 0;
  v253[1] = 0;
  while (!sub_22E6D5ADC(&v250, (uint64_t *)v253) && !LODWORD(__p.__r_.__value_.__l.__data_))
  {
    v159 = *(_BYTE *)(v250 + 31);
    if (v159 >= 0)
      v160 = (_BYTE *)(v250 + 8);
    else
      v160 = *(_BYTE **)(v250 + 8);
    if (v159 >= 0)
      v161 = v159 & 0x7F;
    else
      v161 = *(_QWORD *)(v250 + 16);
    v162 = *(_QWORD *)(a1 + 184);
    v163 = sub_22E6CB02C((_QWORD *)a1);
    if ((sub_22E77FFEC(v160, v161, v153, v162, v163, 0, (uint64_t)v252, 0) & 1) == 0)
    {
      v164 = *(_BYTE *)(v250 + 31);
      if (v164 >= 0)
        v165 = v250 + 8;
      else
        v165 = *(_QWORD *)(v250 + 8);
      if (v164 >= 0)
        v166 = v164 & 0x7F;
      else
        v166 = *(_QWORD *)(v250 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v143 + 72))(v143, v165, v166, 0, 0);
    }
    sub_22E6D5A44(&v250, &__p);
  }
  v167 = (std::__shared_weak_count *)v253[1];
  if (v253[1])
  {
    v168 = (unint64_t *)((char *)v253[1] + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = v251;
  if (v251)
  {
    v171 = (unint64_t *)&v251->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  if (*(_WORD **)__dst != v258)
    free(*(void **)__dst);
LABEL_243:
  if (v142)
  {
LABEL_244:
    v173 = (unint64_t *)&v142->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
LABEL_249:
  v176 = *(_QWORD *)(a1 + 272);
  v175 = *(std::__shared_weak_count **)(a1 + 280);
  if (v175)
  {
    v177 = (unint64_t *)&v175->__shared_owners_;
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  v179 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v180 = *(char **)(v179 + 824);
  v181 = *(char **)(v179 + 832);
  if (v180 != v181)
  {
    *(_QWORD *)__dst = &__dst[16];
    *(_QWORD *)&__dst[8] = 0x1000000000;
    while (1)
    {
      v255 = 260;
      v253[0] = v180;
      File = (llvm::vfs *)llvm::MemoryBuffer::getFile();
      if ((__p.__r_.__value_.__s.__data_[16] & 1) != 0)
        break;
      v183 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      v252[0] = v183;
      llvm::vfs::getRealFileSystem(File);
      llvm::vfs::collectVFSFromYAML();
      v184 = v250;
      if (v250)
      {
        v185 = (unsigned int *)(v250 + 8);
        do
        {
          v186 = __ldaxr(v185);
          v187 = v186 - 1;
        }
        while (__stlxr(v187, v185));
        if (!v187)
          (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
      }
      v188 = v252[0];
      v252[0] = 0;
      if (v188)
        (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
      if ((__p.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        v189 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v189)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v189 + 8))(v189);
      }
      v180 += 24;
      if (v180 == v181)
      {
        v190 = *(char **)__dst;
        if (!*(_DWORD *)&__dst[8])
          goto LABEL_289;
        v191 = 56 * *(unsigned int *)&__dst[8];
        do
        {
          v192 = v190[23];
          v193 = v192 < 0;
          if (v192 >= 0)
            v194 = v190;
          else
            v194 = *(char **)v190;
          v195 = v192 & 0x7F;
          if (v193)
            v196 = *((_QWORD *)v190 + 1);
          else
            v196 = v195;
          v197 = v190[47];
          v198 = v197;
          if (v197 >= 0)
            v199 = v190 + 24;
          else
            v199 = (char *)*((_QWORD *)v190 + 3);
          v200 = v197 & 0x7F;
          if (v198 >= 0)
            v201 = v200;
          else
            v201 = *((_QWORD *)v190 + 4);
          (*(void (**)(uint64_t, char *, uint64_t, char *, uint64_t))(*(_QWORD *)v176 + 72))(v176, v194, v196, v199, v201);
          v190 += 56;
          v191 -= 56;
        }
        while (v191);
        break;
      }
    }
    v190 = *(char **)__dst;
    if (*(_DWORD *)&__dst[8])
    {
      v202 = 56 * *(unsigned int *)&__dst[8];
      do
      {
        v203 = (void **)&v190[v202];
        if (v190[v202 - 9] < 0)
          operator delete(*(v203 - 4));
        if (*((char *)v203 - 33) < 0)
          operator delete(*(v203 - 7));
        v202 -= 56;
      }
      while (v202);
      v190 = *(char **)__dst;
    }
LABEL_289:
    if (v190 != &__dst[16])
      free(v190);
  }
  if (v175)
  {
    v204 = (unint64_t *)&v175->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
LABEL_296:
  if (!*(_QWORD *)(a1 + 168))
    sub_22F2A6BAC(a1);
  v206 = *(uint64_t **)(a1 + 304);
  v207 = *(uint64_t **)(a1 + 312);
  while (v206 != v207)
  {
    v208 = *v206;
    v206 += 2;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v208 + 16))(v208, *(_QWORD *)(a1 + 192));
  }
  if ((*v243 & 2) != 0)
    sub_22E731670(*(llvm **)(a1 + 192), (uint64_t)v243, 0, 0, 0, 1, 0);
  v209 = *(_BYTE *)(v94 + 2095);
  if (v209 < 0)
  {
    if (!*(_QWORD *)(v94 + 2080))
      goto LABEL_317;
  }
  else if (!*(_BYTE *)(v94 + 2095))
  {
    goto LABEL_317;
  }
  if (v209 >= 0)
    v210 = (const char *)(v94 + 2072);
  else
    v210 = *(const char **)(v94 + 2072);
  if (v209 >= 0)
    v211 = *(unsigned __int8 *)(v94 + 2095);
  else
    v211 = *(_QWORD *)(v94 + 2080);
  if (v211 == 1)
  {
    v212 = *(unsigned __int8 *)v210;
    v211 = v212 != 45;
    if (v212 == 45)
      v210 = "";
  }
  sub_22E731670(*(llvm **)(a1 + 192), (uint64_t)v243, 1, v210, v211, 0, 0);
LABEL_317:
  if (*(_DWORD *)(v94 + 2036))
    sub_22E731670(*(llvm **)(a1 + 192), (uint64_t)v243, 1, "", 0, 1, 1);
}

