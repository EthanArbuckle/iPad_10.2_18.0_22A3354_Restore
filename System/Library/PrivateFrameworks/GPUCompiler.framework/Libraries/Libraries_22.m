_QWORD *sub_22EED0840(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;

  v4 = result[4];
  v5 = v4 + 16 * a2;
  if (*(_DWORD *)v5 != 21 && (*(_DWORD *)v5 & 3) == 3)
  {
    v8 = *(_QWORD *)(result[10] + 8 * a2);
    v9 = result[2];
    v10 = *(_QWORD *)(v4 + 16 * a2 + 8);
    v11 = !sub_22EEBD170(v8);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BOOL8, BOOL))(*(_QWORD *)v9 + 16))(v9, v8, v10, a3, v11, *(_DWORD *)v5 == 3);
    a3 = 0;
    v7 = 21;
  }
  else
  {
    if (*(_DWORD *)v5 == 21)
      return result;
    v7 = 3;
  }
  *(_DWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = a3;
  return result;
}

uint64_t sub_22EED08F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;

  v5 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 52 <= 5)
    return sub_22EEBCD28(a1, (_QWORD *)v5, a3);
  else
    return 0;
}

uint64_t sub_22EED0954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;

  v2 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = sub_22E3CD3D4(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8, 120, 3);
  v6 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v6 + 1;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_22EED453C((uint64_t *)v5, *(_QWORD *)(a1 + 32), 4uLL);
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 48) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  sub_22EED45BC((uint64_t *)(v5 + 56), *(_QWORD *)(a1 + 32));
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  sub_22EED45BC((uint64_t *)(v5 + 80), *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v5 + 104) &= ~1u;
  *(_QWORD *)(v5 + 112) = a1;
  v7 = *(uint64_t **)(a1 + 48);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 56))
  {
    sub_22EED463C(v2, *(_QWORD *)(a1 + 32), 1uLL);
    v7 = *(uint64_t **)(a1 + 48);
  }
  *v7 = v5;
  v8 = *(uint64_t **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8 + 1;
  if (v3 == v4)
  {
    v10 = *v8;
    *(_QWORD *)a1 = *v8;
    *(_QWORD *)(a1 + 8) = v10;
  }
  return *v8;
}

uint64_t sub_22EED0A54@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t **a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t i;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  _BOOL4 v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  int v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t **v89;
  uint64_t *v90;
  unsigned __int8 *v91;
  int v92;
  llvm *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t *v112;
  char *v113;
  char *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  llvm *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t result;
  uint64_t *v145;
  void *v146;
  uint64_t **v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  __int128 v152;
  __int128 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  __int128 v161;
  __int128 v162;
  int v163;
  llvm *v164;
  uint64_t v165;
  unsigned int v166;
  void *__p;
  uint64_t **v168;
  uint64_t v169;
  uint64_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  void *v175;
  uint64_t v176;
  _BYTE v177[64];
  llvm *v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  llvm *v182;
  unsigned int v183;
  void *v184;
  uint64_t v185;
  _BYTE v186[128];
  char v187;
  _BYTE *v188;
  char v189;
  __int128 v190;
  llvm *v191[7];

  v191[4] = *(llvm **)MEMORY[0x24BDAC8D0];
  v150 = a3;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *((_DWORD *)v9 + 6) = 0;
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 16) = v10 + 32;
  *(_DWORD *)(v10 + 28) = 4;
  *(_QWORD *)(v10 + 80) = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_QWORD *)(v10 + 64) = v10 + 80;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 88) = 1;
  v9[4] = v10 | 4;
  v9[6] = 0;
  v9[7] = 0;
  v9[5] = 0;
  sub_22EED463C((uint64_t)(v9 + 5), v10 | 4, 0xAuLL);
  *(_OWORD *)((char *)v9 + 92) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  v151 = v9;
  v152 = 0u;
  v153 = 0u;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v161 = 0u;
  v162 = 0u;
  v160 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  __p = 0;
  v168 = 0;
  v169 = 0;
  v170 = 1;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v171 = v11;
  v172 = v11;
  v173 = v11;
  v174 = v11;
  v175 = v177;
  v176 = 0x800000000;
  v180 = 0;
  v178 = 0;
  v179 = 0;
  v12 = 376;
  v181 = 1;
  do
  {
    *(int64x2_t *)((char *)&v150 + v12) = v11;
    v12 += 16;
  }
  while (v12 != 504);
  v184 = v186;
  v185 = 0x1000000000;
  v187 = 0;
  v188 = a4;
  v189 = 0;
  v190 = 0u;
  memset(v191, 0, 28);
  if (!a2)
    goto LABEL_85;
  v13 = sub_22EED0954((uint64_t)v151);
  v14 = v13;
  if (*((_QWORD *)&v152 + 1))
    sub_22EED1CAC(v13, *((uint64_t **)&v152 + 1), 0, v151 + 4);
  *(_QWORD *)&v152 = 0;
  *((_QWORD *)&v152 + 1) = v14;
  if (!a1 || !v188[51] || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x39)
    goto LABEL_84;
  v15 = *(_WORD *)(a1 + 80) & 0x7F;
  v16 = -40;
  if (v15 > 0x46)
  {
    if (v15 == 83)
      goto LABEL_25;
    if (v15 == 71)
    {
      v16 = -56;
      goto LABEL_25;
    }
    if (v15 != 81)
    {
LABEL_20:
      v17 = v15 - 52;
      v18 = v15 - 33 >= 5;
      v19 = -48;
      if (!v18)
        v19 = -64;
      if (v17 >= 6)
        v16 = v19;
      else
        v16 = -72;
    }
  }
  else
  {
    if (v15 > 0x18)
      goto LABEL_19;
    if (v15 == 16)
    {
LABEL_12:
      v16 = -48;
      goto LABEL_25;
    }
    if (((1 << v15) & 0x1066) == 0)
    {
      if (v15 == 24)
        goto LABEL_12;
LABEL_19:
      if (v15 == 70)
      {
        v16 = -64;
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
LABEL_25:
  v20 = a5;
  v21 = *(_QWORD *)(a1 + 72 + v16 + 16);
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 4) != 0)
    v22 = (_QWORD *)*v22;
  if (v22)
    v23 = (uint64_t)(v22 - 8);
  else
    v23 = 0;
  v24 = sub_22E483108(v23);
  if (v24 != v25)
  {
    v26 = v24;
    v27 = v25;
    v28 = v24;
    do
    {
      v29 = *(_QWORD *)(**(_QWORD **)(v28 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
        v29 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v28 + 16));
      v30 = sub_22F10C2A4(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0));
      if (v30)
      {
        v31 = v30;
        if ((*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 <= 2)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v30 + 104) + 96), *(_QWORD *)(v30 + 104));
          if ((**(_QWORD **)(v31 + 128) & 0x100000000000) == 0)
          {
            v32 = (uint64_t *)v152;
            if (!(_QWORD)v152)
            {
              v33 = sub_22EED0954((uint64_t)v151);
              v32 = (uint64_t *)v33;
              if (*((_QWORD *)&v152 + 1))
                sub_22EED1CAC(v33, *((uint64_t **)&v152 + 1), 0, v151 + 4);
              *(_QWORD *)&v152 = v32;
            }
            v34 = (uint64_t *)v32[1];
            if ((unint64_t)v34 >= v32[2])
            {
              sub_22EED453C(v32, v151[4], 1uLL);
              v34 = (uint64_t *)v32[1];
            }
            *v34 = v26 | 3;
            v34[1] = 2;
            v32[1] = (uint64_t)(v34 + 2);
          }
        }
      }
      v28 += 24;
      v26 += 24;
    }
    while (v28 != v27);
  }
  v35 = sub_22E46A3A0(v23);
  if (v35 != v36)
  {
    v37 = v35;
    v38 = v36;
    v39 = v35;
    do
    {
      if ((*(_BYTE *)(v39 + 12) & 1) == 0)
      {
        v40 = *(_QWORD *)(**(_QWORD **)(v39 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v40 + 8) & 0xF) != 0)
          v40 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v39 + 16));
        v41 = sub_22F10C2A4(*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0));
        if (v41)
        {
          v42 = v41;
          if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 35 <= 2)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v41 + 104) + 96), *(_QWORD *)(v41 + 104));
            if ((**(_QWORD **)(v42 + 128) & 0x100000000000) == 0)
            {
              v43 = (uint64_t *)v152;
              if (!(_QWORD)v152)
              {
                v44 = sub_22EED0954((uint64_t)v151);
                v43 = (uint64_t *)v44;
                if (*((_QWORD *)&v152 + 1))
                  sub_22EED1CAC(v44, *((uint64_t **)&v152 + 1), 0, v151 + 4);
                *(_QWORD *)&v152 = v43;
              }
              v45 = (uint64_t *)v43[1];
              if ((unint64_t)v45 >= v43[2])
              {
                sub_22EED453C(v43, v151[4], 1uLL);
                v45 = (uint64_t *)v43[1];
              }
              *v45 = v37 | 3;
              v45[1] = 2;
              v43[1] = (uint64_t)(v45 + 2);
            }
          }
        }
      }
      v39 += 24;
      v37 += 24;
    }
    while (v39 != v38);
  }
  v46 = sub_22EFC3B90(v23);
  a5 = v20;
  if (!v46)
    goto LABEL_84;
  v47 = v46;
LABEL_63:
  for (i = *(_QWORD *)(v47 + 48); ; i = *(_QWORD *)(v50 + 32))
  {
    v49 = sub_22EF5C728(v150, i);
    if (!v49)
      break;
    v50 = v49;
    if (*(_BYTE *)(v49 + 16) != 2)
      break;
    v51 = (_QWORD *)(v49 + 40);
    v52 = *(_DWORD *)(v49 + 48);
    if (v52 >= 0x41)
    {
      if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v49 + 40)) > 0x40)
        continue;
      v51 = (_QWORD *)*v51;
    }
    if (!*v51)
      break;
  }
  v53 = sub_22F10C2A4(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
  a5 = v20;
  if (v53)
  {
    v54 = v53;
    if ((*(_DWORD *)(v53 + 28) & 0x7Fu) - 35 <= 2)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v53 + 104) + 96), *(_QWORD *)(v53 + 104));
      if ((**(_QWORD **)(v54 + 128) & 0x100000000000) == 0)
      {
        v55 = (uint64_t *)v152;
        if (!(_QWORD)v152)
        {
          v56 = sub_22EED0954((uint64_t)v151);
          v55 = (uint64_t *)v56;
          if (*((_QWORD *)&v152 + 1))
            sub_22EED1CAC(v56, *((uint64_t **)&v152 + 1), 0, v151 + 4);
          *(_QWORD *)&v152 = v55;
        }
        v57 = (unint64_t *)v55[1];
        if ((unint64_t)v57 >= v55[2])
        {
          sub_22EED453C(v55, v151[4], 1uLL);
          v57 = (unint64_t *)v55[1];
        }
        *v57 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        v57[1] = 3;
        v55[1] = (uint64_t)(v57 + 2);
      }
    }
  }
  while (1)
  {
    v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v47)
      break;
    if ((*(_DWORD *)(v47 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_63;
  }
LABEL_84:
  v58 = sub_22EED47D4((uint64_t)&v150, a2, 1u, 0);
  if (v187)
  {
LABEL_85:
    v59 = 0;
    goto LABEL_212;
  }
  v60 = v58;
  v147 = a5;
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x37)
    goto LABEL_145;
  v61 = sub_22EFD7ED0(a1);
  v62 = 0;
  v63 = sub_22EFD7ED0(a1) + 8 * ((*(_QWORD *)(a1 + 80) >> 40) & 0x1FFFFFLL);
  while (v63 != v61)
  {
    v65 = *(_QWORD *)(v63 - 8);
    v63 -= 8;
    v64 = v65;
    v66 = v188;
    if (v188[62])
      v67 = v62 == 0;
    else
      v67 = 0;
    if (v67)
    {
      if ((*(_BYTE *)v64 & 6) != 0 || (*(_WORD *)(v64 + 28) & 3) != 2)
      {
        v62 = 0;
      }
      else
      {
        if (!v60)
          v60 = (uint64_t *)v151[1];
        *((_QWORD *)&v152 + 1) = v60;
        v68 = sub_22EED0954((uint64_t)v151);
        v69 = v68;
        if (*((_QWORD *)&v152 + 1))
          sub_22EED1CAC(v68, *((uint64_t **)&v152 + 1), 0, v151 + 4);
        *(_QWORD *)&v152 = v69;
        v66 = v188;
        v62 = v60;
      }
    }
    if (v66[50])
    {
      v70 = *(unsigned __int8 **)(v64 + 8);
      if (v70)
      {
        v71 = *v70;
        v72 = v71 == 173;
        if (v66[54] && v71 == 173)
        {
          LOBYTE(v148) = 0;
          v72 = 1;
          DWORD1(v148) = 1;
          *((_QWORD *)&v148 + 1) = 0;
          v149 = 0;
          sub_22EEDCCF8((uint64_t)&v150, *((_QWORD *)v70 + 2), 0, (uint64_t)&v148);
        }
      }
      else
      {
        v72 = 0;
      }
      v73 = (uint64_t *)v152;
      if (!(_QWORD)v152)
      {
        v74 = sub_22EED0954((uint64_t)v151);
        v73 = (uint64_t *)v74;
        if (*((_QWORD *)&v152 + 1))
          sub_22EED1CAC(v74, *((uint64_t **)&v152 + 1), 0, v151 + 4);
        *(_QWORD *)&v152 = v73;
      }
      v75 = (unint64_t *)v73[1];
      if ((unint64_t)v75 >= v73[2])
      {
        sub_22EED453C(v73, v151[4], 1uLL);
        v75 = (unint64_t *)v73[1];
      }
      *v75 = v64 & 0xFFFFFFFFFFFFFFFCLL;
      v75[1] = 0;
      v73[1] = (uint64_t)(v75 + 2);
      if (v70)
      {
        v76 = *v70;
        v77 = (_QWORD *)sub_22E3CD3D4(v151[4] & 0xFFFFFFFFFFFFFFF8, 24, 3);
        *v77 = 0;
        v77[1] = v64;
        v77[2] = 9;
        v78 = v70;
        if (v76 == 106)
          v78 = (unsigned __int8 *)*((_QWORD *)v70 + 3);
        sub_22EEDC7AC((uint64_t)&v150, (uint64_t)v77, v78);
        if (v72)
        {
          v79 = *((_QWORD *)v70 + 2);
LABEL_133:
          v60 = sub_22EED47D4((uint64_t)&v150, v79, 0, 0);
          goto LABEL_134;
        }
        if (!v188[58] || *v70 != 121)
        {
          v79 = (uint64_t)v70;
          goto LABEL_133;
        }
        v80 = (uint64_t *)v152;
        if (!(_QWORD)v152)
        {
          v81 = sub_22EED0954((uint64_t)v151);
          v80 = (uint64_t *)v81;
          if (*((_QWORD *)&v152 + 1))
            sub_22EED1CAC(v81, *((uint64_t **)&v152 + 1), 0, v151 + 4);
          *(_QWORD *)&v152 = v80;
        }
        sub_22EED9328(&v150, v80, (unint64_t)v70);
        v82 = *((_QWORD *)v70 + 2);
        v83 = *(_QWORD *)(v82 + 72) & 3;
        if ((_DWORD)v83)
          v84 = (_DWORD)v83 == 3;
        else
          v84 = 1;
        if (!v84)
        {
          v85 = (_QWORD *)(*(_QWORD *)(v82 + 72) & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_BYTE *)(v82 + 68) & 1) != 0)
            v85 = (_QWORD *)*v85;
          if (v85)
          {
            v86 = sub_22EED47D4((uint64_t)&v150, (uint64_t)v85, 0, 0);
            if (v86)
              *(_QWORD *)&v152 = v86;
          }
        }
      }
    }
    v60 = (uint64_t *)v152;
LABEL_134:
    if (v187)
    {
      v59 = 0;
      goto LABEL_212;
    }
  }
  if (!v62)
  {
LABEL_145:
    if (v60)
      goto LABEL_146;
    goto LABEL_147;
  }
  *((_QWORD *)&v152 + 1) = v62;
  v87 = sub_22EED0954((uint64_t)v151);
  v60 = (uint64_t *)v87;
  if (*((_QWORD *)&v152 + 1))
    sub_22EED1CAC(v87, *((uint64_t **)&v152 + 1), 0, v151 + 4);
  v60[4] = 4;
  sub_22EED1CAC((uint64_t)v60, (uint64_t *)v152, (uint64_t *)(2 * ((_QWORD)v152 == 0)), v151 + 4);
LABEL_146:
  *((_QWORD *)&v152 + 1) = v60;
LABEL_147:
  v88 = (uint64_t **)__p;
  v89 = v168;
  if (__p != v168)
  {
    while (2)
    {
      v90 = *v88;
      v91 = (unsigned __int8 *)((*v88)[4] & 0xFFFFFFFFFFFFFFF8);
      v92 = *v91;
      if (v92 != 15)
        goto LABEL_193;
      v93 = v164;
      v94 = v166;
      v95 = sub_22EED4700((uint64_t)v164, v166, *((_QWORD *)v91 + 1));
      if ((uint64_t *)((char *)v93 + 32 * v94) != v95)
      {
        v96 = (uint64_t *)v95[1];
        v97 = v95[2];
        v98 = *((_DWORD *)v95 + 6);
        if (v188[52])
        {
          v99 = v88[1];
          v100 = *((_DWORD *)v88 + 4);
          if (v99 == (uint64_t *)v97)
          {
            v101 = 0;
            v102 = *((_DWORD *)v88 + 4);
          }
          else
          {
            v101 = 0;
            v102 = *((_DWORD *)v88 + 4);
            v103 = v88[1];
            do
            {
              v101 += v102;
              v102 = *((_DWORD *)v103 + 10);
              v103 = (uint64_t *)v103[4];
            }
            while (v103 != (uint64_t *)v97);
          }
          v104 = (char *)*v90;
          v148 = xmmword_22F4555C0;
          v105 = sub_22EEDDDE0(v90, v104, v101 - v98 + v102, &v148, v151[4]);
          if (v99 != (uint64_t *)v97 || v100 != v98)
          {
            v106 = (unint64_t *)(v105 - 8);
            do
            {
              --v100;
              v107 = v90[4] & 0xFFFFFFFFFFFFFFF8 | 1;
              *(v106 - 1) = *(_QWORD *)(v99[1] + 8 * v100) & 0xFFFFFFFFFFFFFFFCLL;
              *v106 = v107;
              if (!v100)
              {
                v100 = *((_DWORD *)v99 + 10);
                v99 = (uint64_t *)v99[4];
              }
              v106 -= 2;
            }
            while (v99 != (uint64_t *)v97 || v100 != v98);
          }
        }
        if (v188[51])
        {
          v108 = v88[1];
          v109 = *((_DWORD *)v88 + 4);
          if (v108 == (uint64_t *)v97)
          {
            v110 = 0;
            v111 = *((_DWORD *)v88 + 4);
          }
          else
          {
            v110 = 0;
            v111 = *((_DWORD *)v88 + 4);
            v112 = v88[1];
            do
            {
              v110 += v111;
              v111 = *((_DWORD *)v112 + 10);
              v112 = (uint64_t *)v112[4];
            }
            while (v112 != (uint64_t *)v97);
          }
          v113 = (char *)*v90;
          v148 = xmmword_22F45E160;
          v114 = sub_22EEDDDE0(v90, v113, v110 - v98 + v111, &v148, v151[4]);
          if (v108 != (uint64_t *)v97 || v109 != v98)
          {
            v115 = (unint64_t *)(v114 - 8);
            do
            {
              --v109;
              v116 = v90[4] & 0xFFFFFFFFFFFFFFF8 | 2;
              *(v115 - 1) = *(_QWORD *)(v108[1] + 8 * v109) & 0xFFFFFFFFFFFFFFFCLL | 1;
              *v115 = v116;
              if (!v109)
              {
                v109 = *((_DWORD *)v108 + 10);
                v108 = (uint64_t *)v108[4];
              }
              v115 -= 2;
            }
            while (v108 != (uint64_t *)v97 || v109 != v98);
          }
        }
        if (v188[55])
        {
          v118 = v88[1];
          v117 = v88[2];
          v119 = (char *)*v90;
          v148 = xmmword_22F460510;
          v120 = sub_22EEDDDE0(v90, v119, 1, &v148, v151[4]);
          if (v118 == (uint64_t *)v97 && (_DWORD)v117 == v98)
          {
            v121 = v97;
          }
          else
          {
            do
            {
              v122 = (int)v117;
              v121 = (uint64_t)v118;
              if (v118)
              {
                LODWORD(v117) = (_DWORD)v117 - 1;
                if (!(_DWORD)v117)
                {
                  v118 = (uint64_t *)v118[4];
                  LODWORD(v117) = *(_DWORD *)(v121 + 40);
                }
              }
            }
            while (v118 != (uint64_t *)v97 || (_DWORD)v117 != v98);
            LODWORD(v117) = v122;
          }
          v123 = v90[4] & 0xFFFFFFFFFFFFFFF8;
          v124 = *(_QWORD *)(*(_QWORD *)(v121 + 8) + 8 * ((_DWORD)v117 - 1)) & 0xFFFFFFFFFFFFFFFCLL;
          *((_QWORD *)v120 - 2) = v124 | 2;
          *((_QWORD *)v120 - 1) = v123;
          if (v188[55])
          {
            v125 = (unint64_t *)v96[1];
            if ((unint64_t)v125 >= v96[2])
            {
              sub_22EED453C(v96, v151[4], 1uLL);
              v125 = (unint64_t *)v96[1];
            }
            *v125 = v124 | 1;
            v125[1] = (unint64_t)v91;
            v96[1] = (uint64_t)(v125 + 2);
          }
        }
        sub_22EED1CAC((uint64_t)v90, v96, (uint64_t *)(2 * (v96 == 0)), v151 + 4);
        v91 = (unsigned __int8 *)(v90[4] & 0xFFFFFFFFFFFFFFF8);
        v92 = *v91;
LABEL_193:
        if (v92 == 1)
        {
          v127 = v88[3];
          v88 += 3;
          v126 = v127;
          v128 = *((unsigned int *)v91 + 20);
          if ((_DWORD)v128)
          {
            v129 = *((_QWORD *)v91 + 4) + 8 * *((unsigned int *)v91 + 4) + 8 * *((unsigned int *)v91 + 5);
            v130 = 8 * v128;
            do
            {
              v131 = v164;
              v132 = v166;
              v133 = sub_22EED4700((uint64_t)v164, v166, *(_QWORD *)(*(_QWORD *)v129 + 24));
              if ((uint64_t *)((char *)v131 + 32 * v132) != v133)
              {
                v134 = (uint64_t *)v133[1];
                if (v134 != v126)
                  sub_22EED1CAC((uint64_t)v90, v134, (uint64_t *)(2 * (v134 == 0)), v151 + 4);
              }
              v129 += 8;
              v130 -= 8;
            }
            while (v130);
          }
        }
      }
      v88 += 3;
      if (v88 == v89)
        break;
      continue;
    }
  }
  v135 = v151;
  v136 = v151[2];
  if (v136)
  {
    a5 = v147;
    if ((_DWORD)v176)
    {
      v137 = (uint64_t *)v175;
      v138 = 8 * v176;
      do
      {
        v139 = v164;
        v140 = v166;
        v141 = sub_22EED4700((uint64_t)v164, v166, *v137);
        if ((uint64_t *)((char *)v139 + 32 * v140) != v141)
          sub_22EED1CAC(v136, (uint64_t *)v141[1], (uint64_t *)(2 * (v141[1] == 0)), v151 + 4);
        ++v137;
        v138 -= 8;
      }
      while (v138);
      v135 = v151;
    }
  }
  else
  {
    a5 = v147;
  }
  v142 = sub_22EED0954((uint64_t)v135);
  v143 = v142;
  if (*((_QWORD *)&v152 + 1))
    sub_22EED1CAC(v142, *((uint64_t **)&v152 + 1), 0, v151 + 4);
  *v135 = v143;
  v59 = v151;
  v151 = 0;
LABEL_212:
  *a5 = v59;
  llvm::deallocate_buffer(v191[1], (void *)(16 * LODWORD(v191[3])));
  if (v184 != v186)
    free(v184);
  if ((v181 & 1) == 0)
    llvm::deallocate_buffer(v182, (void *)(8 * v183));
  llvm::deallocate_buffer(v178, (void *)(16 * v180));
  if (v175 != v177)
    free(v175);
  if ((v170 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v171.i64[0], (void *)(8 * v171.u32[2]));
  if (__p)
  {
    v168 = (uint64_t **)__p;
    operator delete(__p);
  }
  result = llvm::deallocate_buffer(v164, (void *)(32 * v166));
  v145 = v151;
  v151 = 0;
  if (v145)
  {
    llvm::deallocate_buffer((llvm *)v145[11], (void *)(16 * *((unsigned int *)v145 + 26)));
    v146 = (void *)v145[8];
    if (v146)
    {
      v145[9] = (uint64_t)v146;
      operator delete(v146);
    }
    sub_22EEB7ABC(v145 + 4);
    return MEMORY[0x2348A0E9C](v145, 0x10A0C4073B7F643);
  }
  return result;
}

void sub_22EED1954(uint64_t a1)
{
  __asm { BR              X12 }
}

unint64_t sub_22EED1994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v3 = (unsigned __int8 *)sub_22EFBC5B4(a1 & 0xFFFFFFFFFFFFFFFCLL);
    if (v3)
      v2 = sub_22EED1AF8(v3, 0);
  }
  while (1)
  {
    v4 = sub_22EF5C728(v1, v2);
    if (!v4)
      break;
    v2 = *(_QWORD *)(v4 + 32);
  }
  v5 = sub_22F10C2A4(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0));
  if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
    v5 = 0;
  return sub_22EFD10F8(v5);
}

uint64_t sub_22EED1A98@<X0>(uint64_t a1@<X8>)
{
  return **(_QWORD **)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 16);
}

uint64_t sub_22EED1AF8(unsigned __int8 *a1, _BYTE *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v9[2];
  _BYTE v10[48];
  void *v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  do
  {
    while (1)
    {
      while (1)
      {
        do
        {
          v4 = a1;
          LODWORD(v5) = *a1;
          if (v5 > 0xD5)
          {
            if ((_DWORD)v5 == 233)
            {
              LODWORD(v5) = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
                goto LABEL_20;
              v6 = a1 + 16;
            }
            else
            {
              if ((_DWORD)v5 != 214)
                break;
              v6 = a1 + 24;
            }
          }
          else if ((_DWORD)v5 == 155)
          {
            if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
              goto LABEL_20;
            v6 = a1 + 24;
            if (!a1[48])
              v6 = a1 + 32;
            LOBYTE(v5) = -101;
          }
          else
          {
            if ((_DWORD)v5 != 176)
              break;
            v5 = *((unsigned int *)a1 + 5);
            if ((_DWORD)v5 == -1)
              goto LABEL_20;
            v6 = &a1[8 * v5 + 40];
            LOBYTE(v5) = -80;
          }
          a1 = *(unsigned __int8 **)v6;
        }
        while (*(unsigned __int8 **)v6 != v4);
        if (v5 != 186)
          break;
        v7 = *((_QWORD *)v4 + 2);
        a1 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 4) != 0)
          a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
        if (a2)
          *a2 = 1;
      }
      if (v5 != 173)
        break;
      a1 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    }
LABEL_20:
    v11[0] = v12;
    v11[1] = (void *)0x200000000;
    v9[0] = v10;
    v9[1] = (void *)0x200000000;
    a1 = sub_22EFF59A4(v4, (uint64_t)v11, (uint64_t)v9);
    if (v9[0] != v10)
      free(v9[0]);
    if (v11[0] != v12)
      free(v11[0]);
  }
  while (a1 != v4);
  return *((_QWORD *)v4 + 1);
}

uint64_t sub_22EED1CAC(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t **v15;

  v7 = result;
  if (a2)
  {
    if ((a3 & 2) != 0)
      v8 = 0;
    else
      v8 = result;
    v9 = (a3 & 2) != 0 || result == 0;
    v10 = 2;
    if (!v9)
      v10 = 0;
    v11 = v10 | result & ((uint64_t)((_QWORD)a3 << 62) >> 63) & 0xFFFFFFFFFFFFFFF9;
    v12 = (uint64_t *)a2[8];
    if ((unint64_t)v12 >= a2[9])
    {
      result = sub_22EED45BC(a2 + 7, *a4);
      v12 = (uint64_t *)a2[8];
    }
    *v12 = v8;
    v12[1] = v11;
    a2[8] += 16;
  }
  v13 = (uint64_t *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8);
  if (((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (_QWORD *)v13[8];
    if ((unint64_t)v14 >= v13[9])
    {
      result = sub_22EED45BC(v13 + 7, *a4);
      v14 = (_QWORD *)v13[8];
    }
    *v14 = 0;
    v14[1] = v7 & 0xFFFFFFFFFFFFFFF9 | 2;
    v13[8] += 16;
  }
  v15 = *(uint64_t ***)(v7 + 88);
  if ((unint64_t)v15 >= *(_QWORD *)(v7 + 96))
  {
    result = sub_22EED45BC((uint64_t *)(v7 + 80), *a4);
    v15 = *(uint64_t ***)(v7 + 88);
  }
  *v15 = a2;
  v15[1] = a3;
  *(_QWORD *)(v7 + 88) += 16;
  return result;
}

uint64_t sub_22EED1DA0(char *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t result;
  _BYTE *v5;
  _BYTE *v6;

  v3 = *a1;
  if (!a2 && (*a1 & 1) != 0)
    return 1;
  result = 0;
  if (a2 && a3 && (v3 & 2) != 0)
  {
    v5 = (_BYTE *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
      if (*v5 == 100 && (*(_WORD *)v5 & 0x400) != 0)
      {
        v6 = *(_BYTE **)(a3 + 24);
        if (!v6 || *v6 != 98)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EED1E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;

  *(_QWORD *)a1 = &off_24FAB9738;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (a2)
  {
    v6 = *(uint64_t ***)(a2 + 40);
    v7 = *(uint64_t ***)(a2 + 48);
    while (1)
    {
      if (v6 == v7)
        return a1;
      v9 = **v6;
      v8 = (*v6)[1];
      if (v8 != v9)
        break;
LABEL_31:
      ++v6;
    }
    v10 = 1;
    while (1)
    {
      v12 = *(_QWORD *)(v8 - 16);
      v8 -= 16;
      v11 = v12;
      if ((unint64_t)((v12 & 3 | (4 * (*(_DWORD *)(v8 + 8) & 3u))) - 9) < 0xFFFFFFFD)
        goto LABEL_7;
      v13 = (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = *((_DWORD *)*v6 + 12);
      v15 = sub_22F24C2B0(v4, (uint64_t *)&v24);
      *((_DWORD *)v15 + 2) = v14;
      *((_DWORD *)v15 + 3) = v10;
      v16 = *v13;
      if (v16 > 0xF)
        break;
      switch(v16)
      {
        case 4u:
          v20 = *((_QWORD *)v13 + 2);
          if (v20)
            goto LABEL_30;
          break;
        case 0xEu:
          goto LABEL_17;
        case 0xCu:
          v20 = *((_QWORD *)v13 + 1);
LABEL_30:
          v23 = v20;
          v21 = sub_22F24C2B0(v5, &v23);
          *((_DWORD *)v21 + 2) = v14;
          *((_DWORD *)v21 + 3) = v10;
          break;
      }
LABEL_7:
      ++v10;
      if (v8 == v9)
        goto LABEL_31;
    }
    if (v16 == 16)
    {
      v18 = *(unsigned __int16 *)v13;
      if ((v18 & 0x1000) == 0)
        goto LABEL_7;
      v17 = *(_QWORD *)&v13[8 * ((v18 >> 13) & 1) + 16];
      if (!v17)
        goto LABEL_7;
    }
    else if (v16 == 100)
    {
      v19 = *(unsigned __int16 *)v13;
      if ((v19 & 0x200) == 0)
        goto LABEL_7;
      v17 = *(_QWORD *)&v13[8 * ((v19 >> 8) & 1) + 24];
      if (!v17)
        goto LABEL_7;
    }
    else
    {
      if (v16 != 236 || (*(_WORD *)v13 & 0x100) == 0)
        goto LABEL_7;
LABEL_17:
      v17 = *((_QWORD *)v13 + 2);
      if (!v17)
        goto LABEL_7;
    }
    v20 = *(_QWORD *)(v17 + 8);
    if (v20)
      goto LABEL_30;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_22EED1FAC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB9738;
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(16 * *(unsigned int *)(a1 + 48)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

void sub_22EED2000(llvm::raw_ostream *this, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  _DWORD *v10;
  _WORD *v11;
  unint64_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _WORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  size_t v25;
  void *v26;
  llvm::raw_ostream *v27;
  const char *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _BYTE *v41;
  _WORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  _QWORD *v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  _BYTE *v63;
  uint64_t **v64;
  const char *v65;
  void *v66;
  llvm::raw_ostream *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  _OWORD *v71;
  _WORD *v72;
  llvm::raw_ostream *v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  size_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  _WORD *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  llvm::raw_ostream *v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  size_t v90;
  const void *v91;
  unsigned int v92;
  void *p_p;
  _BYTE *v94;
  llvm::raw_ostream *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  unsigned int *v103;
  const void *v104;
  size_t v105;
  unsigned int v106;
  void *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  _BYTE *v113;
  void *v114;
  uint64_t v115;
  llvm::raw_ostream *v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  const void *v120;
  size_t v121;
  unsigned int v122;
  void *v123;
  void *v124;
  _OWORD *v125;
  _WORD *v126;
  llvm::raw_ostream *v127;
  const char **v128;
  const char *v129;
  size_t v130;
  void *v131;
  _WORD *v132;
  _WORD *v133;
  void *v134;
  _WORD *v135;
  llvm::raw_ostream *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  BOOL v142;
  unsigned int *v143;
  const void *v144;
  size_t v145;
  unsigned int v146;
  void *v147;
  _WORD *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  const char *v153;
  llvm::raw_ostream *v154;
  _WORD *v155;
  void *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _WORD *v163;
  uint64_t **v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  _WORD *v168;
  const char **v169;
  const char *v170;
  size_t v171;
  void *v172;
  _WORD *v173;
  char *v174;
  size_t v175;
  _WORD *v176;
  _BYTE *v177;
  int v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  llvm::raw_ostream *v186;
  _WORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  unsigned int v190;
  int v191;
  uint64_t v192;
  _WORD *v193;
  _WORD *v194;
  void *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  llvm::raw_ostream *v200;
  _WORD *v201;
  uint64_t *v202;
  uint64_t *v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  llvm::raw_ostream *v210;
  const char *v211;
  uint64_t *v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  _QWORD *__dst;
  _WORD *__dsta;
  int v221;
  uint64_t v222;
  _QWORD *v223;
  __int128 __p;
  int64_t v225;
  uint64_t v226;
  __int16 v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;

  v7 = a3;
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a3 + 48);
  if (a5)
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 24))(this, 3, 1, 0);
  v10 = (_DWORD *)*((_QWORD *)this + 4);
  v223 = (_QWORD *)((char *)this + 32);
  if (*((_QWORD *)this + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 1113268234;
    *v223 += 4;
  }
  else
  {
    llvm::raw_ostream::write(this, "\n [B");
  }
  llvm::raw_ostream::operator<<();
  if (*a2 == v7)
  {
    v15 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v15) <= 9)
    {
      v13 = " (ENTRY)]\n";
      v14 = this;
      goto LABEL_19;
    }
    *(_WORD *)(v15 + 8) = 2653;
    *(_QWORD *)v15 = *(_QWORD *)" (ENTRY)]\n";
    v215 = (uint64_t *)((char *)this + 32);
    v216 = *v223 + 10;
  }
  else if (a2[1] == v7)
  {
    v16 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 8)
    {
      v13 = " (EXIT)]\n";
      v14 = this;
      goto LABEL_19;
    }
    *(_BYTE *)(v16 + 8) = 10;
    *(_QWORD *)v16 = *(_QWORD *)" (EXIT)]\n";
    v215 = (uint64_t *)((char *)this + 32);
    v216 = *v223 + 9;
  }
  else if (a2[2] == v7)
  {
    v17 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v17 <= 0x1AuLL)
    {
      v13 = " (INDIRECT GOTO DISPATCH)]\n";
      v14 = this;
      goto LABEL_19;
    }
    qmemcpy(v17, " (INDIRECT GOTO DISPATCH)]\n", 27);
    v215 = (uint64_t *)((char *)this + 32);
    v216 = *v223 + 27;
  }
  else
  {
    v11 = (_WORD *)*((_QWORD *)this + 4);
    v12 = *((_QWORD *)this + 3) - (_QWORD)v11;
    if ((*(_BYTE *)(v7 + 104) & 1) != 0)
    {
      if (v12 <= 0xC)
      {
        v13 = " (NORETURN)]\n";
        v14 = this;
        goto LABEL_19;
      }
      qmemcpy(v11, " (NORETURN)]\n", 13);
      v215 = (uint64_t *)((char *)this + 32);
      v216 = *v223 + 13;
    }
    else
    {
      if (v12 <= 1)
      {
        v13 = "]\n";
        v14 = this;
LABEL_19:
        llvm::raw_ostream::write(v14, v13);
        goto LABEL_20;
      }
      *v11 = 2653;
      v215 = (uint64_t *)((char *)this + 32);
      v216 = *v223 + 2;
    }
  }
  *v215 = v216;
LABEL_20:
  v221 = a5;
  if (a5)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
  v18 = *(_QWORD **)(v7 + 24);
  if (v18)
  {
    v19 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v19 > 1uLL)
    {
      *v19 = 8224;
      *v223 += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "  ");
    }
    v20 = *(unsigned __int8 *)v18;
    if (v20 > 0x61)
    {
      switch(v20)
      {
        case 0x62u:
          v31 = *((_QWORD *)this + 4);
          v21 = v7;
          if ((unint64_t)(*((_QWORD *)this + 3) - v31) > 4)
          {
            *(_BYTE *)(v31 + 4) = 32;
            *(_DWORD *)v31 = 1702060387;
            *v223 += 5;
          }
          else
          {
            llvm::raw_ostream::write(this, "case ");
          }
          v32 = (_DWORD *)v18[3];
          if (v32)
          {
            sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(a4 + 64));
            sub_22F0D9044(v32, (uint64_t)this, a4, &__p, 0, "\n", 1uLL, 0);
          }
          v33 = *(unsigned __int16 *)v18;
          if ((v33 & 0x100) != 0)
          {
            v34 = (_DWORD *)v18[((v33 >> 8) & 1) + 3];
            if (v34)
            {
              v35 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v35) > 4)
              {
                *(_BYTE *)(v35 + 4) = 32;
                *(_DWORD *)v35 = 774778400;
                *v223 += 5;
              }
              else
              {
                llvm::raw_ostream::write(this, " ... ");
              }
              sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(a4 + 64));
              sub_22F0D9044(v34, (uint64_t)this, a4, &__p, 0, "\n", 1uLL, 0);
            }
          }
          goto LABEL_62;
        case 0x63u:
          v21 = v7;
          v36 = (_DWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v36 <= 6uLL)
          {
            v28 = "default";
            v27 = this;
            goto LABEL_61;
          }
          *(_DWORD *)((char *)v36 + 3) = 1953264993;
          *v36 = 1634100580;
          v217 = (uint64_t *)((char *)this + 32);
          v218 = *v223 + 7;
LABEL_423:
          *v217 = v218;
          goto LABEL_62;
        case 0xEBu:
          v21 = v7;
          v22 = *(_QWORD *)(v18[1] + 40);
          if ((v22 & 7) != 0)
            v23 = 0;
          else
            v23 = v22 & 0xFFFFFFFFFFFFFFF8;
          v24 = (const char *)(*(_QWORD *)(v23 + 16) + 16);
          v25 = strlen(v24);
          v26 = (void *)*((_QWORD *)this + 4);
          if (v25 > *((_QWORD *)this + 3) - (_QWORD)v26)
          {
            v27 = this;
            v28 = v24;
LABEL_61:
            llvm::raw_ostream::write(v27, v28);
LABEL_62:
            v42 = (_WORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v42 > 1uLL)
            {
              *v42 = 2618;
              *v223 += 2;
            }
            else
            {
              llvm::raw_ostream::write(this, ":\n");
            }
            v7 = v21;
            goto LABEL_65;
          }
          if (!v25)
            goto LABEL_62;
          memcpy(v26, v24, v25);
          v217 = (uint64_t *)((char *)this + 32);
          v218 = *v223 + v25;
          goto LABEL_423;
      }
      goto LABEL_56;
    }
    if (v20 == 4)
    {
      v37 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v37 > 6uLL)
      {
        *(_DWORD *)((char *)v37 + 3) = 673212515;
        *v37 = 1668571491;
        *v223 += 7;
      }
      else
      {
        llvm::raw_ostream::write(this, "catch (");
      }
      v30 = v18[2];
      if (v30)
      {
LABEL_39:
        v21 = v7;
        sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(a4 + 64));
        sub_22F3B8394(v30, (uint64_t)this, &__p, 0, 0);
LABEL_59:
        v41 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v41)
        {
          v28 = ")";
          v27 = this;
          goto LABEL_61;
        }
        *v41 = 41;
        v217 = (uint64_t *)((char *)this + 32);
        v218 = *v223 + 1;
        goto LABEL_423;
      }
    }
    else
    {
      if (v20 != 86)
      {
LABEL_56:
        v39 = *((_QWORD *)this + 4);
        v21 = v7;
        if ((unint64_t)(*((_QWORD *)this + 3) - v39) > 9)
        {
          *(_WORD *)(v39 + 8) = 10272;
          *(_QWORD *)v39 = *(_QWORD *)"__except (";
          *v223 += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, "__except (");
        }
        v40 = (_DWORD *)v18[2];
        sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(a4 + 64));
        sub_22F0D9044(v40, (uint64_t)this, a4, &__p, 0, "\n", 1uLL, 0);
        goto LABEL_59;
      }
      v29 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v29 > 7uLL)
      {
        *v29 = 0x2820686374616340;
        *v223 += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "@catch (");
      }
      v30 = v18[1];
      if (v30)
        goto LABEL_39;
    }
    v38 = *((_QWORD *)this + 4);
    v21 = v7;
    if ((unint64_t)(*((_QWORD *)this + 3) - v38) > 2)
    {
      *(_BYTE *)(v38 + 2) = 46;
      *(_WORD *)v38 = 11822;
      *v223 += 3;
    }
    else
    {
      llvm::raw_ostream::write(this, "...");
    }
    goto LABEL_59;
  }
LABEL_65:
  v44 = *(_QWORD **)v7;
  v43 = *(_QWORD **)(v7 + 8);
  if (v43 != *(_QWORD **)v7)
  {
    v45 = 1;
    while (1)
    {
      v46 = v43;
      v47 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v47)
      {
        llvm::raw_ostream::write(this, " ");
      }
      else
      {
        *v47 = 32;
        ++*v223;
      }
      *(_QWORD *)&__p = &unk_24FA65F98;
      *((_QWORD *)&__p + 1) = "%3d";
      v225 = v45;
      v48 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v49 = (_WORD *)*((_QWORD *)v48 + 4);
      if (*((_QWORD *)v48 + 3) - (_QWORD)v49 > 1uLL)
      {
        *v49 = 8250;
        *((_QWORD *)v48 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v48, ": ");
      }
      *(_DWORD *)(a4 + 60) = v45;
      v51 = *(v43 - 2);
      v50 = *(v43 - 1);
      v43 -= 2;
      switch(v51 & 3 | (4 * (v50 & 3)))
      {
        case 0:
          sub_22EEDE368(this, a4, (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFCLL));
          goto LABEL_176;
        case 1:
          v66 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v66 <= 0xDuLL)
          {
            v67 = this;
            v68 = "CFGScopeBegin(";
            goto LABEL_98;
          }
          qmemcpy(v66, "CFGScopeBegin(", 14);
          v159 = (uint64_t *)((char *)this + 32);
          v160 = *v223 + 14;
          goto LABEL_240;
        case 2:
          v69 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v69) > 0xB)
          {
            *(_DWORD *)(v69 + 8) = 677670469;
            *(_QWORD *)v69 = *(_QWORD *)"CFGScopeEnd(";
            v159 = (uint64_t *)((char *)this + 32);
            v160 = *v223 + 12;
LABEL_240:
            *v159 = v160;
          }
          else
          {
            v67 = this;
            v68 = "CFGScopeEnd(";
LABEL_98:
            llvm::raw_ostream::write(v67, v68);
          }
          if ((*v43 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            sub_22EFB9E74(*v43 & 0xFFFFFFFFFFFFFFFCLL, &__p);
            v70 = v225 >= 0 ? (const char *)&__p : (const char *)__p;
            llvm::raw_ostream::write(this, v70);
            if (SHIBYTE(v225) < 0)
              operator delete((void *)__p);
          }
LABEL_109:
          v72 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v72 <= 1uLL)
          {
            v73 = this;
            v74 = ")\n";
            goto LABEL_234;
          }
          *v72 = 2601;
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 2;
          goto LABEL_285;
        case 3:
          v71 = (_OWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v71 > 0xFuLL)
          {
            *v71 = *(_OWORD *)"CFGNewAllocator(";
            *v223 += 16;
          }
          else
          {
            llvm::raw_ostream::write(this, "CFGNewAllocator(");
          }
          if ((*v43 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v230 = *(_QWORD *)((*v43 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            sub_22E462F04(&v228, *(unsigned int **)(a4 + 64));
            v227 = 257;
            sub_22F119558((uint64_t *)&v230, (uint64_t **)this, (uint64_t)&v228, (const void ***)&__p, 0);
          }
          goto LABEL_109;
        case 4:
          sub_22EEDE604(a4, v51 & 0xFFFFFFFFFFFFFFFCLL, this);
          v75 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v75) <= 0x10)
          {
            v73 = this;
            v74 = " (Lifetime ends)\n";
            goto LABEL_234;
          }
          *(_BYTE *)(v75 + 16) = 10;
          *(_OWORD *)v75 = *(_OWORD *)" (Lifetime ends)\n";
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 17;
          goto LABEL_285;
        case 5:
          v76 = *(const char **)sub_22F0D3748(*(unsigned __int8 *)(v51 & 0xFFFFFFFFFFFFFFFCLL));
          v73 = this;
          if (v76)
          {
            v77 = strlen(v76);
            if (v77 <= *((_QWORD *)this + 3) - *((_QWORD *)this + 4))
            {
              v73 = this;
              if (v77)
              {
                memcpy(*((void **)this + 4), v76, v77);
                *v223 += v77;
                v73 = this;
              }
            }
            else
            {
              v73 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, v76);
            }
          }
          v78 = *((_QWORD *)v73 + 4);
          if ((unint64_t)(*((_QWORD *)v73 + 3) - v78) <= 0xB)
          {
            v74 = " (LoopExit)\n";
            goto LABEL_234;
          }
          *(_DWORD *)(v78 + 8) = 170488937;
          *(_QWORD *)v78 = *(_QWORD *)" (LoopExit)\n";
          *((_QWORD *)v73 + 4) += 12;
          goto LABEL_235;
        case 6:
        case 7:
        case 8:
          v52 = (unsigned __int8 *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
          v53 = *(unsigned __int8 *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
          if (v53 != 224)
          {
            if ((v53 & 0xFE) == 0x70 && (*(_DWORD *)v52 & 0xFC0000) == 0x800000)
            {
              v56 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v56) > 5)
              {
                *(_WORD *)(v56 + 4) = 8236;
                *(_DWORD *)v56 = 539897390;
                *v223 += 6;
              }
              else
              {
                llvm::raw_ostream::write(this, "... , ");
              }
              (*(void (**)(uint64_t, _QWORD, llvm::raw_ostream *))(*(_QWORD *)a4 + 16))(a4, *((_QWORD *)v52 + 3), this);
              v57 = (_BYTE *)*((_QWORD *)this + 4);
              if ((unint64_t)v57 < *((_QWORD *)this + 3))
              {
                v58 = v57 + 1;
                v59 = (_QWORD *)((char *)this + 32);
LABEL_178:
                *v59 = v58;
                *v57 = 10;
                goto LABEL_235;
              }
              goto LABEL_179;
            }
LABEL_84:
            sub_22E462F04((unint64_t *)&__p, *(unsigned int **)(a4 + 64));
            sub_22F0D9044((_DWORD *)(v51 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)this, a4, &__p, 0, "\n", 1uLL, 0);
            v60 = *(v46 - 1);
            v61 = *v52;
            if ((*(_DWORD *)(v46 - 2) & 3 | (4 * (v60 & 3))) == 8)
            {
              v62 = (_DWORD *)*v223;
              if (v61 == 141)
              {
                if (*((_QWORD *)this + 3) - (_QWORD)v62 > 0xEuLL)
                {
                  qmemcpy(v62, " (OperatorCall)", 15);
                  v62 = (_DWORD *)(*v223 + 15);
                  *v223 = v62;
                }
                else
                {
                  llvm::raw_ostream::write(this, " (OperatorCall)");
                  v62 = (_DWORD *)*((_QWORD *)this + 4);
                }
              }
              if (*((_QWORD *)this + 3) - (_QWORD)v62 > 0x13uLL)
              {
                v62[4] = 1819042115;
                *(_OWORD *)v62 = *(_OWORD *)" (CXXRecordTypedCall";
                *v223 += 20;
              }
              else
              {
                llvm::raw_ostream::write(this, " (CXXRecordTypedCall");
              }
              sub_22EEDE008(this, a4, v60 & 0xFFFFFFFFFFFFFFFCLL);
              v63 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v63)
              {
                v64 = (uint64_t **)this;
                goto LABEL_92;
              }
              *v63 = 41;
              v166 = (uint64_t *)((char *)this + 32);
              v167 = *v223 + 1;
LABEL_290:
              *v166 = v167;
LABEL_175:
              if (*v52 - 102 > 0x84)
                goto LABEL_235;
LABEL_176:
              v57 = (_BYTE *)*((_QWORD *)this + 4);
              if ((unint64_t)v57 < *((_QWORD *)this + 3))
              {
                v58 = v57 + 1;
                v59 = (_QWORD *)((char *)this + 32);
                goto LABEL_178;
              }
LABEL_179:
              llvm::raw_ostream::write(this);
              goto LABEL_235;
            }
            if (v61 == 116)
            {
              v125 = (_OWORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v125 > 0xFuLL)
              {
                *v125 = *(_OWORD *)" (BindTemporary)";
                v166 = (uint64_t *)((char *)this + 32);
                v167 = *v223 + 16;
                goto LABEL_290;
              }
              v64 = (uint64_t **)this;
              v65 = " (BindTemporary)";
              goto LABEL_174;
            }
            if (v61 == 141)
            {
              v124 = (void *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v124 > 0xEuLL)
              {
                qmemcpy(v124, " (OperatorCall)", 15);
                v166 = (uint64_t *)((char *)this + 32);
                v167 = *v223 + 15;
                goto LABEL_290;
              }
              v64 = (uint64_t **)this;
              v65 = " (OperatorCall)";
              goto LABEL_174;
            }
            if ((v61 & 0xFE) == 0x76)
            {
              v161 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v161) > 0x11)
              {
                *(_WORD *)(v161 + 16) = 29296;
                *(_OWORD *)v161 = *(_OWORD *)" (CXXConstructExpr";
                *v223 += 18;
              }
              else
              {
                llvm::raw_ostream::write(this, " (CXXConstructExpr");
              }
              v162 = *(v46 - 1);
              if ((*(_DWORD *)(v46 - 2) & 3 | (4 * (v162 & 3))) == 7)
                sub_22EEDE008(this, a4, v162 & 0xFFFFFFFFFFFFFFFCLL);
              v163 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v163 > 1uLL)
              {
                *v163 = 8236;
                *v223 += 2;
                v164 = (uint64_t **)this;
              }
              else
              {
                v164 = (uint64_t **)llvm::raw_ostream::write(this, ", ");
              }
              v64 = sub_22F40B69C(v164, *((_QWORD *)v52 + 1));
              v165 = v64[4];
              if (v64[3] != v165)
              {
                *(_BYTE *)v165 = 41;
                v64[4] = (uint64_t *)((char *)v64[4] + 1);
                goto LABEL_175;
              }
LABEL_92:
              v65 = ")";
LABEL_174:
              llvm::raw_ostream::write((llvm::raw_ostream *)v64, v65);
              goto LABEL_175;
            }
            if ((v61 + 102) >= 0xF5u)
            {
              v168 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v168 > 1uLL)
              {
                *v168 = 10272;
                *v223 += 2;
                v127 = this;
              }
              else
              {
                v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " (");
              }
              v169 = (const char **)sub_22F0D3748(*v52);
              v170 = *v169;
              if (*v169)
              {
                v171 = strlen(*v169);
                v172 = (void *)*((_QWORD *)v127 + 4);
                if (v171 <= *((_QWORD *)v127 + 3) - (_QWORD)v172)
                {
                  if (v171)
                  {
                    memcpy(v172, v170, v171);
                    *((_QWORD *)v127 + 4) += v171;
                  }
                }
                else
                {
                  v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(v127, v170);
                }
              }
              v173 = (_WORD *)*((_QWORD *)v127 + 4);
              if (*((_QWORD *)v127 + 3) - (_QWORD)v173 > 1uLL)
              {
                *v173 = 8236;
                __dsta = (_WORD *)(*((_QWORD *)v127 + 4) + 2);
                *((_QWORD *)v127 + 4) = __dsta;
              }
              else
              {
                v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(v127, ", ");
                __dsta = (_WORD *)*((_QWORD *)v127 + 4);
              }
              v174 = sub_22F3C1C54((*(_DWORD *)v52 >> 18) & 0x7F);
              v175 = strlen(v174);
              v176 = __dsta;
              if (v175 <= *((_QWORD *)v127 + 3) - (_QWORD)__dsta)
              {
                if (v175)
                {
                  memcpy(__dsta, v174, v175);
                  v176 = (_WORD *)(*((_QWORD *)v127 + 4) + v175);
                  *((_QWORD *)v127 + 4) = v176;
                }
              }
              else
              {
                v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(v127, v174);
                v176 = (_WORD *)*((_QWORD *)v127 + 4);
              }
              if (*((_QWORD *)v127 + 3) - (_QWORD)v176 <= 1uLL)
                goto LABEL_277;
              *v176 = 8236;
LABEL_301:
              *((_QWORD *)v127 + 4) += 2;
            }
            else
            {
              if (v61 != 168)
                goto LABEL_175;
              v126 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v126 > 1uLL)
              {
                *v126 = 10272;
                *v223 += 2;
                v127 = this;
              }
              else
              {
                v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, " (");
              }
              v128 = (const char **)sub_22F0D3748(*v52);
              v129 = *v128;
              if (*v128)
              {
                v130 = strlen(*v128);
                v131 = (void *)*((_QWORD *)v127 + 4);
                if (v130 <= *((_QWORD *)v127 + 3) - (_QWORD)v131)
                {
                  if (v130)
                  {
                    memcpy(v131, v129, v130);
                    *((_QWORD *)v127 + 4) += v130;
                  }
                }
                else
                {
                  v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(v127, v129);
                }
              }
              v132 = (_WORD *)*((_QWORD *)v127 + 4);
              if (*((_QWORD *)v127 + 3) - (_QWORD)v132 > 1uLL)
              {
                *v132 = 8236;
                goto LABEL_301;
              }
LABEL_277:
              v127 = (llvm::raw_ostream *)llvm::raw_ostream::write(v127, ", ");
            }
            sub_22F40B69C((uint64_t **)v127, *((_QWORD *)v52 + 1));
            v177 = (_BYTE *)*((_QWORD *)v127 + 4);
            if (*((_BYTE **)v127 + 3) == v177)
            {
              llvm::raw_ostream::write(v127, ")");
            }
            else
            {
              *v177 = 41;
              ++*((_QWORD *)v127 + 4);
            }
            goto LABEL_175;
          }
          if (**((_DWORD **)v52 + 2) < 0x100u)
            goto LABEL_84;
          v54 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v54) > 8)
          {
            *(_BYTE *)(v54 + 8) = 32;
            *(_QWORD *)v54 = *(_QWORD *)"({ ... ; ";
            *v223 += 9;
          }
          else
          {
            llvm::raw_ostream::write(this, "({ ... ; ");
          }
          (*(void (**)(uint64_t, _QWORD, llvm::raw_ostream *))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)(*((_QWORD *)v52 + 2) + (((unint64_t)**((unsigned int **)v52 + 2) >> 5) & 0x7FFFFF8) + 8), this);
          v55 = (_DWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v55 <= 3uLL)
          {
            llvm::raw_ostream::write(this, " })\n");
            goto LABEL_235;
          }
          *v55 = 170491168;
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 4;
LABEL_285:
          *v157 = v158;
LABEL_235:
          ++v45;
          if (v43 == v44)
            goto LABEL_305;
          break;
        case 9:
          v79 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          sub_22EEDE604(a4, v79, this);
          v80 = *(_QWORD *)(v79 + 48);
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFE) == 0x28)
          {
            v81 = (unsigned __int8 *)sub_22EFBC5B4(v79);
            v80 = sub_22EED1AF8(v81, 0);
          }
          v82 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v82 > 1uLL)
          {
            *v82 = 32302;
            *v223 += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, ".~");
          }
          v83 = *(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v83 + 8) & 0xF) != 0)
            v83 = (unint64_t)sub_22F10D2BC(v80);
          v230 = v83 & 0xFFFFFFFFFFFFFFF0;
          sub_22E462F04(&v228, *(unsigned int **)(a4 + 64));
          v227 = 257;
          sub_22F119558((uint64_t *)&v230, (uint64_t **)this, (uint64_t)&v228, (const void ***)&__p, 0);
          v84 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v84 <= 0x18uLL)
          {
            v73 = this;
            v74 = "() (Implicit destructor)\n";
            goto LABEL_234;
          }
          qmemcpy(v84, "() (Implicit destructor)\n", 25);
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 25;
          goto LABEL_285;
        case 0xALL:
          if ((v51 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            goto LABEL_235;
          (*(void (**)(uint64_t, _QWORD, llvm::raw_ostream *))(*(_QWORD *)a4 + 16))(a4, *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFFCLL) + 24), this);
          v85 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v85) > 2)
          {
            *(_BYTE *)(v85 + 2) = 126;
            *(_WORD *)v85 = 15917;
            *v223 += 3;
            v86 = this;
          }
          else
          {
            v86 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "->~");
          }
          v87 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          if ((v87 & 7) != 0 || (v88 = v87 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            v90 = 0;
            HIBYTE(v225) = 0;
            p_p = &__p;
          }
          else
          {
            v89 = *(unsigned int **)(v88 + 16);
            v92 = *v89;
            v91 = v89 + 4;
            v90 = v92;
            if (v92 >= 0x17uLL)
            {
              __dst = v44;
              v150 = v7;
              if ((v90 | 7) == 0x17)
                v151 = (v90 & 0xFFFFFFF8) + 8;
              else
                v151 = v90 | 7;
              p_p = operator new(v151 + 1);
              v152 = v151 - 0x7FFFFFFFFFFFFFFFLL;
              v7 = v150;
              v44 = __dst;
              *((_QWORD *)&__p + 1) = v90;
              v225 = v152;
              *(_QWORD *)&__p = p_p;
            }
            else
            {
              HIBYTE(v225) = v90;
              p_p = &__p;
              if (!v90)
                goto LABEL_225;
            }
            memmove(p_p, v91, v90);
          }
LABEL_225:
          *((_BYTE *)p_p + v90) = 0;
          if (v225 >= 0)
            v153 = (const char *)&__p;
          else
            v153 = (const char *)__p;
          v154 = (llvm::raw_ostream *)llvm::raw_ostream::write(v86, v153);
          v155 = (_WORD *)*((_QWORD *)v154 + 4);
          if (*((_QWORD *)v154 + 3) - (_QWORD)v155 > 1uLL)
          {
            *v155 = 10536;
            *((_QWORD *)v154 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v154, "()");
          }
          if (SHIBYTE(v225) < 0)
            operator delete((void *)__p);
          v156 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v156 <= 0x16uLL)
          {
            v73 = this;
            v74 = " (Implicit destructor)\n";
            goto LABEL_234;
          }
          qmemcpy(v156, " (Implicit destructor)\n", 23);
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 23;
          goto LABEL_285;
        case 0xBLL:
          v94 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v94)
          {
            v95 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "~");
          }
          else
          {
            *v94 = 126;
            ++*v223;
            v95 = this;
          }
          v96 = *(_QWORD *)(**(_QWORD **)((v51 & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v96 + 8) & 0xF) != 0)
            v96 = (unint64_t)sub_22F10D2BC(**(_QWORD **)((v51 & 0xFFFFFFFFFFFFFFFCLL) + 16));
          v97 = sub_22F10C2A4(*(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0));
          if ((*(_DWORD *)(v97 + 28) & 0x7Fu) - 35 >= 3)
            v98 = 0;
          else
            v98 = v97;
          v99 = *(_QWORD *)(v98 + 40);
          v100 = v99 & 7;
          v101 = v99 & 0xFFFFFFFFFFFFFFF8;
          if (v100)
            v102 = 1;
          else
            v102 = v101 == 0;
          if (!v102)
          {
            v103 = *(unsigned int **)(v101 + 16);
            v106 = *v103;
            v104 = v103 + 4;
            v105 = v106;
            v107 = (void *)*((_QWORD *)v95 + 4);
            if ((unint64_t)v106 <= *((_QWORD *)v95 + 3) - (_QWORD)v107)
            {
              if (v105)
              {
                memcpy(v107, v104, v105);
                *((_QWORD *)v95 + 4) += v105;
              }
            }
            else
            {
              v95 = (llvm::raw_ostream *)llvm::raw_ostream::write(v95, (const char *)v104);
            }
          }
          v133 = (_WORD *)*((_QWORD *)v95 + 4);
          if (*((_QWORD *)v95 + 3) - (_QWORD)v133 > 1uLL)
          {
            *v133 = 10536;
            *((_QWORD *)v95 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v95, "()");
          }
          v134 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v134 <= 0x19uLL)
          {
            v73 = this;
            v74 = " (Base object destructor)\n";
            goto LABEL_234;
          }
          qmemcpy(v134, " (Base object destructor)\n", 26);
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 26;
          goto LABEL_285;
        case 0xCLL:
          v108 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          v109 = (_QWORD *)(v108 + 48);
          while (2)
          {
            v110 = *(_QWORD *)(*v109 & 0xFFFFFFFFFFFFFFF0);
            if (v110)
              v111 = (*(_DWORD *)(v110 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
            else
              v111 = 0;
            if (v111)
            {
              v112 = *(_QWORD *)(*v109 & 0xFFFFFFFFFFFFFFF0);
LABEL_156:
              v109 = (_QWORD *)(v112 + 32);
              continue;
            }
            break;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
          {
            v112 = sub_22F10CF48(v110);
            if (v112)
              goto LABEL_156;
          }
          v115 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v115) > 5)
          {
            *(_WORD *)(v115 + 4) = 15917;
            *(_DWORD *)v115 = 1936287860;
            *v223 += 6;
            v116 = this;
          }
          else
          {
            v116 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "this->");
          }
          v117 = *(_QWORD *)(v108 + 40);
          if ((v117 & 7) == 0)
          {
            v118 = v117 & 0xFFFFFFFFFFFFFFF8;
            if (v118)
            {
              v119 = *(unsigned int **)(v118 + 16);
              v122 = *v119;
              v120 = v119 + 4;
              v121 = v122;
              v123 = (void *)*((_QWORD *)v116 + 4);
              if ((unint64_t)v122 <= *((_QWORD *)v116 + 3) - (_QWORD)v123)
              {
                if (v121)
                {
                  memcpy(v123, v120, v121);
                  *((_QWORD *)v116 + 4) += v121;
                }
              }
              else
              {
                llvm::raw_ostream::write(v116, (const char *)v120);
              }
            }
          }
          v135 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v135 > 1uLL)
          {
            *v135 = 32302;
            *v223 += 2;
            v136 = this;
          }
          else
          {
            v136 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, ".~");
          }
          v137 = sub_22F10C2A4(v110);
          if ((*(_DWORD *)(v137 + 28) & 0x7Fu) - 35 >= 3)
            v138 = 0;
          else
            v138 = v137;
          v139 = *(_QWORD *)(v138 + 40);
          v140 = v139 & 7;
          v141 = v139 & 0xFFFFFFFFFFFFFFF8;
          if (v140)
            v142 = 1;
          else
            v142 = v141 == 0;
          if (!v142)
          {
            v143 = *(unsigned int **)(v141 + 16);
            v146 = *v143;
            v144 = v143 + 4;
            v145 = v146;
            v147 = (void *)*((_QWORD *)v136 + 4);
            if ((unint64_t)v146 <= *((_QWORD *)v136 + 3) - (_QWORD)v147)
            {
              if (v145)
              {
                memcpy(v147, v144, v145);
                *((_QWORD *)v136 + 4) += v145;
              }
            }
            else
            {
              v136 = (llvm::raw_ostream *)llvm::raw_ostream::write(v136, (const char *)v144);
            }
          }
          v148 = (_WORD *)*((_QWORD *)v136 + 4);
          if (*((_QWORD *)v136 + 3) - (_QWORD)v148 > 1uLL)
          {
            *v148 = 10536;
            *((_QWORD *)v136 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v136, "()");
          }
          v149 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v149 <= 0x1BuLL)
          {
            v73 = this;
            v74 = " (Member object destructor)\n";
LABEL_234:
            llvm::raw_ostream::write(v73, v74);
            goto LABEL_235;
          }
          qmemcpy(v149, " (Member object destructor)\n", 28);
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 28;
          goto LABEL_285;
        case 0xDLL:
          v113 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v113)
          {
            llvm::raw_ostream::write(this, "~");
          }
          else
          {
            *v113 = 126;
            ++*v223;
          }
          v230 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          sub_22E462F04(&v228, *(unsigned int **)(a4 + 64));
          v227 = 257;
          sub_22F119558((uint64_t *)&v230, (uint64_t **)this, (uint64_t)&v228, (const void ***)&__p, 0);
          v114 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v114 <= 0x20uLL)
          {
            v73 = this;
            v74 = "() (Temporary object destructor)\n";
            goto LABEL_234;
          }
          qmemcpy(v114, "() (Temporary object destructor)\n", 33);
          v157 = (uint64_t *)((char *)this + 32);
          v158 = *v223 + 33;
          goto LABEL_285;
        default:
          goto LABEL_235;
      }
    }
  }
LABEL_305:
  v178 = v221;
  if (*(_QWORD *)(v7 + 32))
  {
    if (v221)
    {
      (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, 2, 0, 0);
      v179 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v179) > 5)
      {
        *(_WORD *)(v179 + 4) = 8250;
        *(_DWORD *)v179 = 1411391520;
        *v223 += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "   T: ");
      }
      *(_DWORD *)(a4 + 56) = -1;
      sub_22E462F04(&v228, *(unsigned int **)(a4 + 64));
      *(_QWORD *)&__p = this;
      *((_QWORD *)&__p + 1) = a4;
      v226 = v229;
      v225 = v228 & 0xFFFFFFF7FFFFFFFFLL;
      sub_22EED42A0((uint64_t)&__p, *(_QWORD *)(v7 + 32));
      v180 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v180 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *v223 = v180 + 1;
        *v180 = 10;
      }
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
    }
    else
    {
      v181 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v181) > 5)
      {
        *(_WORD *)(v181 + 4) = 8250;
        *(_DWORD *)v181 = 1411391520;
        *v223 += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "   T: ");
      }
      *(_DWORD *)(a4 + 56) = -1;
      sub_22E462F04(&v228, *(unsigned int **)(a4 + 64));
      *(_QWORD *)&__p = this;
      *((_QWORD *)&__p + 1) = a4;
      v226 = v229;
      v225 = v228 & 0xFFFFFFF7FFFFFFFFLL;
      sub_22EED42A0((uint64_t)&__p, *(_QWORD *)(v7 + 32));
      v182 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v182 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this);
      }
      else
      {
        *v223 = v182 + 1;
        *v182 = 10;
      }
    }
  }
  if (*(_QWORD *)(v7 + 56) != *(_QWORD *)(v7 + 64))
  {
    if (v221)
    {
      (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, 4, 0, 0);
      v183 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v183) > 8)
      {
        *(_BYTE *)(v183 + 8) = 32;
        *(_QWORD *)v183 = *(_QWORD *)"   Preds ";
        *v223 += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, "   Preds ");
      }
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
    }
    else
    {
      v184 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v184) > 8)
      {
        *(_BYTE *)(v184 + 8) = 32;
        *(_QWORD *)v184 = *(_QWORD *)"   Preds ";
        *v223 += 9;
      }
      else
      {
        llvm::raw_ostream::write(this, "   Preds ");
      }
    }
    v185 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v185 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this);
    }
    else
    {
      *v223 = v185 + 1;
      *v185 = 40;
    }
    v186 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v187 = (_WORD *)*((_QWORD *)v186 + 4);
    if (*((_QWORD *)v186 + 3) - (_QWORD)v187 > 1uLL)
    {
      *v187 = 14889;
      *((_QWORD *)v186 + 4) += 2;
      if (!v221)
        goto LABEL_331;
    }
    else
    {
      llvm::raw_ostream::write(v186, "):");
      if (!v221)
      {
LABEL_331:
        v222 = v7;
        v188 = *(_QWORD **)(v7 + 56);
        v189 = *(_QWORD **)(v7 + 64);
        if (v188 != v189)
        {
          v190 = 0;
          v191 = 8;
          do
          {
            if (!(v191 + 10 * (v190 / 0xA)))
            {
              v192 = *((_QWORD *)this + 4);
              if ((unint64_t)(*((_QWORD *)this + 3) - v192) > 5)
              {
                *(_WORD *)(v192 + 4) = 8224;
                *(_DWORD *)v192 = 538976266;
                *v223 += 6;
              }
              else
              {
                llvm::raw_ostream::write(this, "\n     ");
              }
            }
            if (*v188)
            {
              v193 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v193 > 1uLL)
              {
                *v193 = 16928;
                *v223 += 2;
              }
              else
              {
                llvm::raw_ostream::write(this, " B");
              }
              llvm::raw_ostream::operator<<();
            }
            else
            {
              v194 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v194 > 1uLL)
              {
                *v194 = 16928;
                *v223 += 2;
              }
              else
              {
                llvm::raw_ostream::write(this, " B");
              }
              llvm::raw_ostream::operator<<();
              v195 = (void *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v195 > 0xCuLL)
              {
                qmemcpy(v195, "(Unreachable)", 13);
                *v223 += 13;
              }
              else
              {
                llvm::raw_ostream::write(this, "(Unreachable)");
              }
            }
            v188 += 2;
            ++v190;
            --v191;
          }
          while (v188 != v189);
        }
        v178 = v221;
        if ((v221 & 1) != 0)
          (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
        v196 = (_BYTE *)*((_QWORD *)this + 4);
        v7 = v222;
        if ((unint64_t)v196 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *v223 = v196 + 1;
          *v196 = 10;
        }
        goto LABEL_355;
      }
    }
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, 4, 0, 0);
    goto LABEL_331;
  }
LABEL_355:
  if (*(_QWORD *)(v7 + 80) == *(_QWORD *)(v7 + 88))
    return;
  if (v178)
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, 5, 0, 0);
    v197 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v197) > 8)
    {
      *(_BYTE *)(v197 + 8) = 32;
      *(_QWORD *)v197 = *(_QWORD *)"   Succs ";
      *v223 += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "   Succs ");
    }
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
  }
  else
  {
    v198 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v198) > 8)
    {
      *(_BYTE *)(v198 + 8) = 32;
      *(_QWORD *)v198 = *(_QWORD *)"   Succs ";
      *v223 += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "   Succs ");
    }
  }
  v199 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v199 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *v223 = v199 + 1;
    *v199 = 40;
  }
  v200 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v201 = (_WORD *)*((_QWORD *)v200 + 4);
  if (*((_QWORD *)v200 + 3) - (_QWORD)v201 > 1uLL)
  {
    *v201 = 14889;
    *((_QWORD *)v200 + 4) += 2;
    if (!v178)
      goto LABEL_368;
    goto LABEL_367;
  }
  llvm::raw_ostream::write(v200, "):");
  if (v178)
LABEL_367:
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 24))(this, 5, 0, 0);
LABEL_368:
  v202 = *(uint64_t **)(v7 + 80);
  v203 = *(uint64_t **)(v7 + 88);
  if (v202 != v203)
  {
    v204 = 0;
    v205 = 8;
    while (1)
    {
      if (!(v205 + 10 * (v204 / 0xA)))
      {
        v206 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v206) > 4)
        {
          *(_BYTE *)(v206 + 4) = 32;
          *(_DWORD *)v206 = 538976266;
          *v223 += 5;
        }
        else
        {
          llvm::raw_ostream::write(this, "\n    ");
        }
      }
      v207 = *v202;
      if (*v202)
        break;
      v208 = *v223;
      if ((v202[1] & 0xFFFFFFFFFFFFFFF8) != 0)
        goto LABEL_376;
      if ((unint64_t)(*((_QWORD *)this + 3) - v208) > 4)
      {
        *(_BYTE *)(v208 + 4) = 76;
        *(_DWORD *)v208 = 1280658976;
        v212 = (uint64_t *)((char *)this + 32);
        v213 = *v223 + 5;
        goto LABEL_390;
      }
      v210 = this;
      v211 = " NULL";
LABEL_383:
      llvm::raw_ostream::write(v210, v211);
LABEL_384:
      v202 += 2;
      ++v204;
      --v205;
      if (v202 == v203)
        goto LABEL_391;
    }
    v208 = *v223;
LABEL_376:
    if ((unint64_t)(*((_QWORD *)this + 3) - v208) > 1)
    {
      *(_WORD *)v208 = 16928;
      *v223 += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, " B");
    }
    llvm::raw_ostream::operator<<();
    if (v207)
      goto LABEL_384;
    v209 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v209 > 0xCuLL)
    {
      qmemcpy(v209, "(Unreachable)", 13);
      v212 = (uint64_t *)((char *)this + 32);
      v213 = *v223 + 13;
LABEL_390:
      *v212 = v213;
      goto LABEL_384;
    }
    v210 = this;
    v211 = "(Unreachable)";
    goto LABEL_383;
  }
LABEL_391:
  if ((v221 & 1) != 0)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)this + 32))(this);
  v214 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v214 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this);
  }
  else
  {
    *v223 = v214 + 1;
    *v214 = 10;
  }
}

void sub_22EED42A0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;

  v4 = (a2 >> 1) & 3;
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v7 = *(llvm::raw_ostream **)a1;
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v8) > 0xB)
      {
        *(_DWORD *)(v8 + 8) = 539587183;
        *(_QWORD *)v8 = *(_QWORD *)"(Temp Dtor) ";
        *((_QWORD *)v7 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v7, "(Temp Dtor) ");
      }
    }
    else if (v4)
    {
      return;
    }
    sub_22EEDE758(a1, (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8));
    return;
  }
  v5 = *(llvm::raw_ostream **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v6 > 0x38uLL)
  {
    qmemcpy(v6, "(See if most derived ctor has already initialized vbases)", 57);
    *((_QWORD *)v5 + 4) += 57;
  }
  else
  {
    llvm::raw_ostream::write(v5, "(See if most derived ctor has already initialized vbases)");
  }
}

unsigned __int8 *sub_22EED4398(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8);
  if (!result)
    return result;
  v3 = *result;
  if (v3 > 0x63)
  {
    if (*result > 0x6Fu)
    {
      if (v3 == 112 || v3 == 155)
      {
LABEL_15:
        v5 = result + 16;
        goto LABEL_16;
      }
      if (v3 == 236)
      {
        v4 = &result[8 * (((unint64_t)*(unsigned __int16 *)result >> 8) & 1)];
LABEL_14:
        v5 = v4 + 16;
        goto LABEL_16;
      }
    }
    else
    {
      switch(v3)
      {
        case 'd':
          v5 = &result[8 * (HIBYTE(*(unsigned __int16 *)result) & 1) + 24 + 8 * ((*(unsigned __int16 *)result >> 9) & 1)];
          goto LABEL_16;
        case 'f':
          v5 = result + 32;
          goto LABEL_16;
        case 'g':
LABEL_9:
          v5 = result + 24;
LABEL_16:
          v6 = *(unsigned __int8 **)v5;
          if ((a2 & 1) == 0)
            return v6;
          if (v6)
          {
            while (1)
            {
              result = v6;
              v7 = *v6;
              if (v7 > 213)
              {
                if (v7 == 233)
                {
                  if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
                    return result;
                  v9 = result + 16;
                }
                else
                {
                  if (v7 != 214)
                    return result;
                  v9 = result + 24;
                }
              }
              else if (v7 == 155)
              {
                if ((**((_DWORD **)result + 2) & 0x18000) != 0)
                  return result;
                if (result[48])
                  v9 = result + 24;
                else
                  v9 = result + 32;
              }
              else
              {
                if (v7 != 176)
                  return result;
                v8 = *((unsigned int *)result + 5);
                if ((_DWORD)v8 == -1)
                  return result;
                v9 = &result[8 * v8 + 40];
              }
              v6 = *(unsigned __int8 **)v9;
              if (v6 == result)
                return result;
            }
          }
          break;
      }
    }
    return 0;
  }
  switch(*result)
  {
    case 0xDu:
    case 0x11u:
      goto LABEL_15;
    case 0xEu:
      goto LABEL_9;
    case 0xFu:
      return 0;
    case 0x10u:
      v4 = &result[8 * ((*(unsigned __int16 *)result >> 13) & 1) + 8 * ((*(unsigned __int16 *)result >> 12) & 1)];
      goto LABEL_14;
    default:
      if (v3 == 5)
      {
        v5 = result + 48;
        goto LABEL_16;
      }
      if (v3 != 92)
        return 0;
      break;
  }
  return result;
}

uint64_t sub_22EED453C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t result;
  __int128 *v8;
  __int128 *v9;
  _OWORD *v10;
  __int128 v11;

  v4 = a1[1];
  v5 = (_OWORD *)*a1;
  if ((a1[2] - *a1) >> 3 <= a3)
    v6 = a3;
  else
    v6 = (a1[2] - *a1) >> 3;
  result = sub_22E3CD3D4(a2 & 0xFFFFFFFFFFFFFFF8, 16 * v6, 3);
  v8 = (__int128 *)*a1;
  v9 = (__int128 *)a1[1];
  if ((__int128 *)*a1 != v9)
  {
    v10 = (_OWORD *)result;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while (v8 != v9);
  }
  *a1 = result;
  a1[1] = result + v4 - (_QWORD)v5;
  a1[2] = result + 16 * v6;
  return result;
}

uint64_t sub_22EED45BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t result;
  __int128 *v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;

  v3 = a1[1];
  v4 = (_OWORD *)*a1;
  if ((unint64_t)((a1[2] - *a1) >> 3) <= 1)
    v5 = 1;
  else
    v5 = (a1[2] - *a1) >> 3;
  result = sub_22E3CD3D4(a2 & 0xFFFFFFFFFFFFFFF8, 16 * v5, 3);
  v7 = (__int128 *)*a1;
  v8 = (__int128 *)a1[1];
  if ((__int128 *)*a1 != v8)
  {
    v9 = (_OWORD *)result;
    do
    {
      v10 = *v7++;
      *v9++ = v10;
    }
    while (v7 != v8);
  }
  *a1 = result;
  a1[1] = result + v3 - (_QWORD)v4;
  a1[2] = result + 16 * v5;
  return result;
}

char *sub_22EED463C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  size_t v4;
  uint64_t v5;
  char *result;
  char *v7;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2 <= a3)
    v5 = a3;
  else
    v5 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2;
  result = (char *)sub_22E3CD3D4(a2 & 0xFFFFFFFFFFFFFFF8, 8 * v5, 3);
  v7 = result;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    result = (char *)memcpy(result, *(const void **)a1, v4);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = &v7[v4];
  *(_QWORD *)(a1 + 16) = &v7[8 * v5];
  return result;
}

uint64_t sub_22EED46B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = sub_22EED0954(*(_QWORD *)(a1 + 8));
  v3 = v2;
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    sub_22EED1CAC(v2, v4, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
  return v3;
}

uint64_t *sub_22EED4700(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2)
  {
    v3 = a2 - 1;
    v4 = (uint64_t *)(a1 + 32 * (((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1)));
    v5 = *v4;
    if (*v4 == a3)
      return v4;
    v6 = 1;
    LODWORD(v7) = ((a3 >> 4) ^ (a3 >> 9)) & v3;
    while (v5 != -4096)
    {
      v8 = v7 + v6++;
      v7 = v8 & v3;
      v5 = *(_QWORD *)(a1 + 32 * v7);
      if (v5 == a3)
        return (uint64_t *)(a1 + 32 * v7);
    }
  }
  v7 = a2;
  return (uint64_t *)(a1 + 32 * v7);
}

uint64_t sub_22EED4764(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v7;

  if (*(_BYTE *)(*(_QWORD *)(result + 656) + 55))
  {
    v7 = (unint64_t *)a2[1];
    if ((unint64_t)v7 >= a2[2])
    {
      result = sub_22EED453C(a2, *(_QWORD *)(*(_QWORD *)(result + 8) + 32), 1uLL);
      v7 = (unint64_t *)a2[1];
    }
    *v7 = a3 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v7[1] = a4 & 0xFFFFFFFFFFFFFFFCLL;
    a2[1] = (uint64_t)(v7 + 2);
  }
  return result;
}

uint64_t *sub_22EED47D4(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 **v17;
  _BYTE **v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  unsigned __int8 **v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  _BOOL4 v74;
  int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t *result;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unsigned __int8 **v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  unsigned int v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unint64_t v141;
  char *v142;
  _QWORD *v143;
  _QWORD *v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  BOOL v151;
  void *v152;
  uint64_t *v153;
  uint64_t *v154;
  unsigned int *v155;
  unsigned __int8 **i;
  int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t j;
  uint64_t *v168;
  uint64_t v169;
  unsigned __int8 **v170;
  unint64_t v171;
  unsigned __int8 *v172;
  int v173;
  _QWORD *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 **v178;
  unint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  unint64_t v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  unsigned int v224;
  unsigned __int8 **v225;
  uint64_t v226;
  uint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t *v244;
  unsigned __int8 **v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  BOOL v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t *v281;
  _QWORD *v282;
  unsigned int v283;
  unsigned __int8 **v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t v295;
  unint64_t v296;
  unsigned int *v297;
  uint64_t v298;
  _QWORD *v299;
  unsigned __int8 **v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  unsigned __int8 **v308;
  unsigned __int8 **v309;
  unsigned __int8 **v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  _BYTE *v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t *v336;
  char v337;
  uint64_t *v338;
  unsigned __int8 *v339;
  __int128 *v340;
  uint64_t *v341;
  uint64_t v342;
  char v343;
  unint64_t *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t *v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t *v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  unsigned __int8 **v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  char v372;
  unint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t *v388;
  uint64_t *v389;
  unsigned __int8 **v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  int v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned __int8 **v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  char *v412;
  _QWORD *v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  uint64_t v418;
  unsigned __int8 **v419;
  _QWORD *v420;
  int v421;
  char v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  _BOOL4 v427;
  int v428;
  uint64_t v429;
  BOOL v430;
  uint64_t v431;
  BOOL v432;
  unint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unsigned __int8 **v439;
  _QWORD *v440;
  uint64_t v441;
  _BYTE *v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  unint64_t v448;
  uint64_t *v449;
  _QWORD *v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  char *v455;
  _QWORD *v456;
  uint64_t *v457;
  uint64_t *v458;
  _QWORD *v459;
  uint64_t *v460;
  uint64_t *v461;
  uint64_t v462;
  _QWORD *v463;
  unint64_t v464;
  uint64_t *v465;
  _QWORD *v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  char *v472;
  unint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  char *v480;
  uint64_t *v481;
  char *v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  unsigned __int8 *v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t *v492;
  __int128 v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  _QWORD *v498;
  _QWORD *v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  char *v505;
  __int128 v506;
  uint64_t *v507;
  __int128 v508;
  int v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t *v515;
  unsigned __int8 **v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unsigned __int8 *v523;
  uint64_t v524;
  uint64_t v525;
  unsigned __int8 *v526;
  uint64_t v527;
  llvm *v528;
  unint64_t v529;
  unint64_t v530;
  int v531;
  unsigned int v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t *v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unsigned __int8 *v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  int v557;
  uint64_t *v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unsigned int v570;
  int v571;
  unint64_t v572;
  uint64_t *v573;
  BOOL v574;
  uint64_t v575;
  uint64_t v576;
  BOOL v577;
  unint64_t v578;
  uint64_t *v579;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unsigned __int8 *v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  int v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  int v598;
  int v599;
  uint64_t *v600;
  _QWORD *v601;
  _QWORD *v602;
  int v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  void *v613[2];
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  void *v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  void *v626[2];
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  _OWORD v631[3];
  _QWORD v632[7];
  uint64_t v633;
  uint64_t v634;

  v634 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
LABEL_229:
    v384 = 0;
LABEL_230:
    *(_BYTE *)(a1 + 648) = 1;
    return v384;
  }
  v6 = a2;
  v7 = (uint64_t *)(a1 + 32);
  v8 = a1 + 56;
  v9 = a1 + 128;
  v10 = (_QWORD *)&v630 + 1;
  while (1)
  {
LABEL_3:
    LOBYTE(v11) = *(_BYTE *)v6;
    if ((*(_BYTE *)v6 + 21) >= 0x7Bu)
    {
      while (1)
      {
        if (v11 > 0xD5u)
        {
          if (v11 == 233)
          {
            LODWORD(v11) = *(_DWORD *)v6;
            if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
              break;
            v18 = (_BYTE **)(v6 + 16);
          }
          else
          {
            if (v11 != 214)
              break;
            v18 = (_BYTE **)(v6 + 24);
            LOBYTE(v11) = -42;
          }
        }
        else if (v11 == 155)
        {
          if ((**(_DWORD **)(v6 + 16) & 0x18000) != 0)
          {
            LOBYTE(v11) = -101;
            break;
          }
          v18 = (_BYTE **)(v6 + 24);
          if (!*(_BYTE *)(v6 + 48))
            v18 = (_BYTE **)(v6 + 32);
          LOBYTE(v11) = -101;
        }
        else
        {
          if (v11 != 176)
            break;
          v11 = *(unsigned int *)(v6 + 20);
          if ((_DWORD)v11 == -1)
          {
            LOBYTE(v11) = -80;
            break;
          }
          v18 = (_BYTE **)(v6 + 8 * v11 + 40);
          LOBYTE(v11) = -80;
        }
        v19 = *v18;
        if (v19 == (_BYTE *)v6)
          break;
        LOBYTE(v11) = *v19;
        v6 = (uint64_t)v19;
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 2000) + 72) && (v11 - 86) >= 0xBFu)
    {
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v133 = *(uint64_t **)(a1 + 16);
        if (!v133)
        {
          v133 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v133;
        }
        sub_22EED9328((_QWORD *)a1, v133, v6);
      }
      v134 = *(uint64_t **)(v6 + 24);
      if (v134)
      {
        v136 = *(_DWORD *)v134;
        v134 += 2;
        v135 = v136;
      }
      else
      {
        v135 = 0;
      }
      v384 = *(uint64_t **)(a1 + 16);
      sub_22F34CA1C((uint64_t)v626, v134, v135);
      sub_22F34CA1C((uint64_t)v632, &v134[v135], 0);
      v631[1] = v628;
      v631[2] = v629;
      v137 = *(_OWORD *)v626;
      v630 = *(_OWORD *)v626;
      v631[0] = v627;
      v626[0] = &v627;
      v626[1] = (void *)0x800000000;
      v618 = v137;
      v619 = v627;
      v620 = v628;
      v621 = v629;
      v138 = v632[0];
      v622 = v630;
      v623 = v627;
      v624 = v628;
      v625 = v629;
      if ((_QWORD)v630 == v632[0])
      {
        v140 = 0;
        v139 = 0;
        v141 = 8;
      }
      else
      {
        v139 = 0;
        do
        {
          ++v139;
          sub_22EED9548((uint64_t **)&v622);
        }
        while ((_QWORD)v622 != v138);
        v140 = v626[1];
        v141 = HIDWORD(v626[1]);
      }
      if (v139 + (unint64_t)v140 > v141)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v140 = v626[1];
      }
      v622 = v618;
      v623 = v619;
      v624 = v620;
      v625 = v621;
      v142 = (char *)v626[0];
      if ((_QWORD)v618 != v138)
      {
        v143 = (char *)v626[0] + 8 * v140;
        do
        {
          if ((BYTE8(v623) & 3) != 0)
          {
            if ((*((_QWORD *)&v623 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v144 = (_QWORD *)((*((_QWORD *)&v623 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v144 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v623);
          }
          else
          {
            v144 = (_QWORD *)v623;
          }
          *v143++ = *v144;
          sub_22EED9548((uint64_t **)&v622);
        }
        while ((_QWORD)v622 != v138);
        v140 = v626[1];
        v142 = (char *)v626[0];
      }
      v145 = v140 + v139;
      LODWORD(v626[1]) = v145;
      if (v145)
      {
        v146 = 8 * v145;
        v147 = v142 - 8;
        do
        {
          v148 = sub_22EED47D4(a1, *(_QWORD *)&v147[v146], 0, 0);
          if (v148)
            v384 = (uint64_t *)v148;
          v146 -= 8;
        }
        while (v146);
      }
      v149 = *(unsigned __int8 *)v6 - 75;
      v26 = v149 > 5;
      v150 = (1 << v149) & 0x23;
      v151 = v26 || v150 == 0;
      if (v151)
      {
        v155 = *(unsigned int **)(v6 + 24);
        if (v155)
        {
          if (*((_BYTE *)v155 + 8))
          {
            for (i = *(unsigned __int8 ***)&v155[2 * *v155 + 4 + 2 * v155[1]];
                  ;
                  i = (unsigned __int8 **)i[*((unsigned int *)i + 2) + 4])
            {
              v157 = *(unsigned __int8 *)i;
              if (v157 != 7)
                break;
            }
            if (v157 != 8)
            {
              v162 = *(_QWORD **)(a1 + 128);
              v163 = *(_QWORD *)(a1 + 136);
              sub_22EED9630((uint64_t *)a1, i);
              sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v162, v163, (uint64_t)i);
            }
            v164 = sub_22EED47D4(a1, i, 1, 0);
            if (v164)
              v384 = (uint64_t *)v164;
          }
        }
      }
      v152 = v626[0];
      if (v626[0] != &v627)
LABEL_343:
        free(v152);
      return v384;
    }
    if (v11 <= 0xD1u)
      break;
    if (v11 <= 0xE7u)
    {
      if (v11 != 210)
      {
        if (v11 == 217)
        {
          v109 = *(uint64_t **)(a1 + 16);
          if (!v109)
          {
            v109 = (uint64_t *)sub_22EED46B8(a1);
            *(_QWORD *)(a1 + 16) = v109;
          }
          sub_22EED9328((_QWORD *)a1, v109, v6);
          v384 = *(uint64_t **)(a1 + 16);
          v110 = (*(_DWORD *)v6 >> 18);
          v111 = (v110 - 1);
          if (v110 != 1)
          {
            v112 = v6 + 16;
            do
            {
              v113 = *(unsigned __int8 **)(v112 + 8 * v111);
              if (*v113 == 210)
                v113 = (unsigned __int8 *)*((_QWORD *)v113 + 2);
              v114 = sub_22EED47D4(a1, v113, 0, 0);
              if (v114)
                v384 = (uint64_t *)v114;
              --v111;
            }
            while ((_DWORD)v111);
          }
          return v384;
        }
        if (v11 != 224)
          return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
        if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
        {
          v93 = *(uint64_t **)(a1 + 16);
          if (!v93)
          {
            v93 = (uint64_t *)sub_22EED46B8(a1);
            *(_QWORD *)(a1 + 16) = v93;
          }
          sub_22EED9328((_QWORD *)a1, v93, v6);
        }
        return (uint64_t *)sub_22EED904C(a1, *(unsigned __int8 ***)(v6 + 16), 1);
      }
      return *(uint64_t **)(a1 + 16);
    }
    switch((char)v11)
    {
      case -24:
        if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
        {
          v102 = *(uint64_t **)(a1 + 16);
          if (!v102)
          {
            v102 = (uint64_t *)sub_22EED46B8(a1);
            *(_QWORD *)(a1 + 16) = v102;
          }
          sub_22EED9328((_QWORD *)a1, v102, v6);
        }
        v384 = *(uint64_t **)(a1 + 16);
        if ((*(_DWORD *)v6 & 0x7C0000) == 0x400000)
        {
          v103 = sub_22EEDDB7C(*(_QWORD *)(**(_QWORD **)(v6 + 16) & 0xFFFFFFFFFFFFFFF0));
          if (v103)
          {
            v104 = v103;
            do
            {
              v384 = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(v104 + 40), 1, 0);
              v104 = sub_22EEDDB7C(*(_QWORD *)(*(_QWORD *)(v104 + 32) & 0xFFFFFFFFFFFFFFF0));
            }
            while (v104);
          }
        }
        return v384;
      case -23:
        if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
        {
          v12 = *(uint64_t **)(a1 + 16);
          if (!v12)
          {
            v12 = (uint64_t *)sub_22EED46B8(a1);
            *(_QWORD *)(a1 + 16) = v12;
          }
          sub_22EED9328((_QWORD *)a1, v12, v6);
        }
        if ((*(_DWORD *)v6 & 0x7C0000) != 0x240000)
          goto LABEL_160;
        v13 = *(unsigned __int8 **)(v6 + 16);
        if (!v13)
          goto LABEL_158;
        while (2)
        {
          v14 = (uint64_t)v13;
          v15 = *v13;
          if (v15 > 213)
          {
            if (v15 == 233)
            {
              if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
                goto LABEL_159;
              v17 = (unsigned __int8 **)(v14 + 16);
            }
            else
            {
              if (v15 != 214)
                goto LABEL_159;
              v17 = (unsigned __int8 **)(v14 + 24);
            }
LABEL_30:
            v13 = *v17;
            if (v13 == (unsigned __int8 *)v14)
              goto LABEL_159;
            continue;
          }
          break;
        }
        if (v15 == 155)
        {
          if ((**(_DWORD **)(v14 + 16) & 0x18000) != 0)
            goto LABEL_159;
          if (*(_BYTE *)(v14 + 48))
            v17 = (unsigned __int8 **)(v14 + 24);
          else
            v17 = (unsigned __int8 **)(v14 + 32);
          goto LABEL_30;
        }
        if (v15 == 176)
        {
          v16 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v16 != -1)
          {
            v17 = (unsigned __int8 **)(v14 + 8 * v16 + 40);
            goto LABEL_30;
          }
        }
LABEL_159:
        sub_22EEDABEC(a1, v14);
LABEL_160:
        a3 = 0;
LABEL_161:
        v45 = (uint64_t *)(v6 + 16);
LABEL_162:
        a4 = 0;
        v6 = *v45;
        if (!*v45)
          goto LABEL_229;
        break;
      case -21:
        sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), 1, 0);
        v384 = *(uint64_t **)(a1 + 16);
        if (!v384)
          v384 = (uint64_t *)sub_22EED46B8(a1);
        v94 = *(_QWORD *)(a1 + 128);
        v95 = *(_QWORD *)(a1 + 136);
        v96 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)&v622 = 0;
        v97 = sub_22EEDDD4C(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), v96, &v622);
        v98 = (uint64_t *)v622;
        if ((v97 & 1) != 0)
          goto LABEL_250;
        v626[0] = (void *)v622;
        v99 = *(_DWORD *)(a1 + 152);
        v100 = *(unsigned int *)(a1 + 160);
        if (4 * v99 + 4 >= (3 * v100))
        {
          v101 = 2 * v100;
        }
        else
        {
          v101 = *(_DWORD *)(a1 + 160);
          if ((int)v100 + ~v99 - *(_DWORD *)(a1 + 156) > v100 >> 3)
            goto LABEL_247;
        }
        v528 = *(llvm **)(a1 + 144);
        v529 = (v101 - 1) | ((unint64_t)(v101 - 1) >> 1);
        v530 = v529 | (v529 >> 2) | ((v529 | (v529 >> 2)) >> 4);
        v531 = ((v530 | (v530 >> 8)) >> 16) | v530 | (v530 >> 8);
        if ((v531 + 1) > 0x40)
          v532 = v531 + 1;
        else
          v532 = 64;
        *(_DWORD *)(a1 + 160) = v532;
        v533 = (_QWORD *)MEMORY[0x23489D23C](32 * v532, 8);
        *(_QWORD *)(a1 + 144) = v533;
        if (v528)
        {
          *(_QWORD *)(a1 + 152) = 0;
          v534 = *(unsigned int *)(a1 + 160);
          if ((_DWORD)v534)
          {
            v535 = 32 * v534;
            do
            {
              *v533 = -4096;
              v533 += 4;
              v535 -= 32;
            }
            while (v535);
          }
          v617 = (void *)(32 * v100);
          if ((_DWORD)v100)
          {
            v536 = (char *)v528 + 8;
            v537 = 32 * v100;
            do
            {
              v538 = *((_QWORD *)v536 - 1);
              if ((v538 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                *(_QWORD *)&v630 = 0;
                sub_22EEDDD4C(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), v538, &v630);
                v539 = v630;
                *(_QWORD *)v630 = v538;
                v540 = *(_OWORD *)v536;
                *(_QWORD *)(v539 + 24) = *((_QWORD *)v536 + 2);
                *(_OWORD *)(v539 + 8) = v540;
                ++*(_DWORD *)(a1 + 152);
              }
              v536 += 32;
              v537 -= 32;
            }
            while (v537);
          }
          llvm::deallocate_buffer(v528, v617);
          v533 = *(_QWORD **)(a1 + 144);
          LODWORD(v541) = *(_DWORD *)(a1 + 160);
        }
        else
        {
          *(_QWORD *)(a1 + 152) = 0;
          v541 = *(unsigned int *)(a1 + 160);
          if ((_DWORD)v541)
          {
            v542 = 0;
            do
            {
              v533[v542] = -4096;
              v542 += 4;
            }
            while (4 * v541 != v542);
          }
        }
        sub_22EEDDD4C((uint64_t)v533, v541, v96, v626);
        v99 = *(_DWORD *)(a1 + 152);
        v98 = (uint64_t *)v626[0];
LABEL_247:
        *(_DWORD *)(a1 + 152) = v99 + 1;
        if (*v98 != -4096)
          --*(_DWORD *)(a1 + 156);
        *v98 = v96;
        v98[1] = 0;
        v98[2] = 0;
        v98[3] = 0;
LABEL_250:
        v98[1] = (uint64_t)v384;
        v98[2] = v94;
        v98[3] = v95;
        goto LABEL_251;
      case -20:
        v105 = v8;
        v622 = *(_OWORD *)v9;
        v106 = *(_QWORD **)(a1 + 128);
        v107 = *(_QWORD *)(a1 + 136);
        if ((*(_WORD *)v6 & 0x100) != 0)
        {
          v548 = *(_QWORD *)(v6 + 16);
          if (v548)
          {
            v549 = *(_QWORD *)(v548 + 8);
            if (v549)
            {
              sub_22EED9EF4((uint64_t *)a1, v549, 0);
              sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v106, v107, v6);
            }
          }
        }
        sub_22EEDDCC8(a1, v6);
        v108 = *(_QWORD *)(a1 + 16);
        if (v108)
        {
          if (*(_BYTE *)(a1 + 648))
          {
            v384 = 0;
            goto LABEL_1018;
          }
          v612 = v9;
          *(_QWORD *)(a1 + 16) = 0;
          v115 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v612 = v9;
          v115 = *(_QWORD *)(a1 + 24);
          v108 = v115;
        }
        v630 = *(_OWORD *)v7;
        *(_QWORD *)&v631[0] = v7[2];
        *(_OWORD *)v626 = *(_OWORD *)v105;
        *(_QWORD *)&v627 = *(_QWORD *)(v105 + 16);
        v116 = sub_22EED0954(*(_QWORD *)(a1 + 8));
        *(_QWORD *)(a1 + 24) = v116;
        *(_QWORD *)(v116 + 40) = v6;
        *(_QWORD *)(a1 + 32) = v116;
        *(_QWORD *)(a1 + 40) = v106;
        v117 = *(_QWORD **)(a1 + 128);
        v118 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 48) = v107;
        *(_QWORD *)(a1 + 56) = v108;
        *(_QWORD *)(a1 + 64) = v117;
        *(_QWORD *)(a1 + 72) = v118;
        sub_22EED9700(a1, v117, v118, v106, v107, v6);
        v119 = (unint64_t *)(v6 + 16);
        v120 = *(unsigned __int8 ***)(v6 + 16 + 8 * (((unint64_t)*(unsigned __int16 *)v6 >> 8) & 1) + 8);
        v606 = v108;
        if (*(_BYTE *)v120 != 8)
        {
          v121 = *(_QWORD **)(a1 + 128);
          v122 = *(_QWORD *)(a1 + 136);
          sub_22EED9630((uint64_t *)a1, v120);
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v121, v122, (uint64_t)v120);
          v120 = (unsigned __int8 **)v119[(((unint64_t)*(unsigned __int16 *)v6 >> 8) & 1) + 1];
        }
        v123 = sub_22EED47D4(a1, v120, 1, 0);
        if (v123)
        {
          v124 = v123;
          if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 648))
          {
            v384 = 0;
            *(_OWORD *)v105 = *(_OWORD *)v626;
            *(_QWORD *)(v105 + 16) = v627;
            *(_OWORD *)v7 = v630;
            v7[2] = *(_QWORD *)&v631[0];
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = v115;
            goto LABEL_1017;
          }
        }
        else
        {
          v124 = *v7;
        }
        *(_OWORD *)v105 = *(_OWORD *)v626;
        *(_QWORD *)(v105 + 16) = v627;
        *(_OWORD *)v7 = v630;
        v7[2] = *(_QWORD *)&v631[0];
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v115;
        v125 = v119[((unint64_t)*(unsigned __int16 *)v6 >> 8) & 1];
        v126 = (unsigned __int8 *)v125;
        do
        {
          v127 = (uint64_t)v126;
          LODWORD(v128) = *v126;
          if (v128 > 0xD5)
          {
            if ((_DWORD)v128 == 233)
            {
              LOBYTE(v128) = *(_DWORD *)v126;
              if ((*(_DWORD *)v126 & 0x7C0000) != 0x300000)
                break;
              v129 = v126 + 16;
            }
            else
            {
              if ((_DWORD)v128 != 214)
                break;
              v129 = v126 + 24;
            }
          }
          else if ((_DWORD)v128 == 155)
          {
            if ((**((_DWORD **)v126 + 2) & 0x18000) != 0)
              goto LABEL_305;
            v129 = v126 + 24;
            if (!*(_BYTE *)(v127 + 48))
              v129 = (unsigned __int8 *)(v127 + 32);
            LOBYTE(v128) = -101;
          }
          else
          {
            if ((_DWORD)v128 != 176)
              break;
            v128 = *((unsigned int *)v126 + 5);
            if ((_DWORD)v128 == -1)
              goto LABEL_305;
            v129 = &v126[8 * v128 + 40];
            LOBYTE(v128) = -80;
          }
          v126 = *(unsigned __int8 **)v129;
        }
        while (v126 != (unsigned __int8 *)v127);
        if ((v128 & 0xFE) == 0x70 && ((*(_DWORD *)v127 >> 18) & 0x3Fu) - 19 <= 1)
        {
          v384 = (uint64_t *)sub_22EEDA7CC(a1, v127, v6, v124, v606);
          goto LABEL_1016;
        }
LABEL_305:
        v130 = sub_22EED0954(*(_QWORD *)(a1 + 8));
        *(_QWORD *)(v130 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
        *(_QWORD *)(a1 + 16) = v130;
        v131 = sub_22EED47D4(a1, v125, 1, 0);
        v132 = (uint64_t *)v131;
        *(_QWORD *)(a1 + 16) = v131;
        if ((*(_WORD *)v6 & 0x100) != 0)
        {
          v550 = *v119;
          if (*v119)
          {
            v551 = *(_QWORD *)(v550 + 8);
            if (v551)
            {
              v552 = sub_22EFBC5B4(*(_QWORD *)(v550 + 8));
              if (v552)
              {
                v553 = (unsigned __int8 *)v552;
                if (v132 || (*(_QWORD *)(a1 + 16) = sub_22EED46B8(a1), (*(_WORD *)v6 & 0x100) != 0))
                  v554 = *v119;
                else
                  v554 = 0;
                v555 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
                *v555 = 0;
                v555[1] = v554;
                v555[2] = 0;
                sub_22EEDC7AC(a1, (uint64_t)v555, v553);
                sub_22EED9328((_QWORD *)a1, *(uint64_t **)(a1 + 16), v554);
                v132 = (uint64_t *)sub_22EED47D4(a1, v553, 1, 0);
                v556 = *(_QWORD *)(a1 + 128);
                if ((v556 || *(_DWORD *)(a1 + 136)) && **(_QWORD **)(v556 + 8) == v551)
                  sub_22EED4764(a1, v132, v551, v125);
              }
            }
          }
          v384 = v132;
          if (!*(_QWORD *)(a1 + 16))
            goto LABEL_1009;
        }
        else
        {
          v384 = (uint64_t *)v131;
          if (!v131)
            goto LABEL_1009;
        }
        if (*(_BYTE *)(a1 + 648))
        {
          v384 = 0;
          goto LABEL_1017;
        }
LABEL_1009:
        v557 = sub_22EEDABEC(a1, v125);
        if (v557)
          v558 = (uint64_t *)v124;
        else
          v558 = 0;
        sub_22EED1CAC(v130, v558, (uint64_t *)(2 * (v558 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
        if (v557 == 1)
          v559 = 0;
        else
          v559 = (uint64_t *)v606;
        sub_22EED1CAC(v130, v559, (uint64_t *)(2 * (v559 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
LABEL_1016:
        sub_22EED1CAC(v116, v384, (uint64_t *)(2 * (v384 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v384;
LABEL_1017:
        v9 = v612;
LABEL_1018:
        *(_QWORD *)v9 = v622;
        *(_DWORD *)(v9 + 8) = DWORD2(v622);
        return v384;
      default:
        return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
    }
  }
  switch((char)v11)
  {
    case 86:
      return sub_22EED91E8(a1, v6);
    case 87:
    case 105:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 113:
    case 117:
    case 120:
    case 121:
    case 123:
    case 124:
    case 125:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -121:
    case -120:
    case -119:
    case -117:
    case -113:
    case -112:
    case -110:
    case -109:
    case -108:
    case -107:
    case -106:
    case -105:
    case -104:
    case -102:
    case -100:
    case -99:
    case -98:
    case -97:
    case -96:
    case -95:
    case -94:
    case -93:
    case -92:
    case -91:
    case -90:
    case -89:
    case -87:
    case -86:
    case -85:
    case -82:
    case -81:
    case -80:
    case -79:
    case -78:
    case -75:
    case -73:
    case -72:
    case -69:
    case -67:
    case -66:
    case -65:
    case -64:
    case -63:
    case -62:
    case -61:
    case -60:
    case -59:
    case -58:
    case -57:
      return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
    case 88:
      v46 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 1, 0);
      if (v46)
      {
        if (*(_BYTE *)(a1 + 648))
          return 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v46;
LABEL_106:
        v47 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v47;
        goto LABEL_178;
      }
      v47 = *(uint64_t **)(a1 + 16);
      if (!v47)
        goto LABEL_106;
LABEL_178:
      sub_22EED9328((_QWORD *)a1, v47, v6);
LABEL_179:
      v45 = (uint64_t *)(v6 + 16);
      a3 = 1;
      goto LABEL_162;
    case 89:
    case -122:
      if (*(_BYTE *)(a1 + 648))
        return 0;
      v158 = sub_22EED0954(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 16) = v158;
      v159 = *(uint64_t **)(a1 + 120);
      v160 = *(_QWORD *)(a1 + 8);
      if (v159)
      {
        v161 = 0;
      }
      else
      {
        v159 = *(uint64_t **)(v160 + 8);
        v161 = (uint64_t *)(2 * (v159 == 0));
      }
      sub_22EED1CAC(v158, v159, v161, (uint64_t *)(v160 + 32));
      return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, 1);
    case 90:
      v384 = *(uint64_t **)(a1 + 16);
      if (v384)
      {
        v249 = *(_QWORD *)(a1 + 16);
        if (*(_BYTE *)(a1 + 648))
          return 0;
      }
      else
      {
        v249 = *(_QWORD *)(a1 + 24);
      }
      if (((*(unsigned __int16 *)(v6 + 12) | (*(unsigned __int8 *)(v6 + 14) << 16)) & 0x10000) != 0
        && *(_QWORD *)(v6 + 8 * (*(unsigned __int16 *)(v6 + 12) + 1) + 16))
      {
        goto LABEL_230;
      }
      v341 = *(uint64_t **)(a1 + 120);
      v342 = sub_22EED0954(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(v342 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
      if (!*(_WORD *)(v6 + 12))
        goto LABEL_653;
      v343 = 0;
      v344 = (unint64_t *)(v6 + 24);
      v345 = 8 * *(unsigned __int16 *)(v6 + 12);
      do
      {
        v346 = *v344;
        *(_QWORD *)(a1 + 24) = v249;
        v347 = *(_QWORD *)(v346 + 8);
        *(_QWORD *)(a1 + 16) = 0;
        v348 = sub_22EED91E8(a1, v346);
        if (!v348)
          return 0;
        v343 |= v347 == 0;
        sub_22EED1CAC(v342, v348, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
        ++v344;
        v345 -= 8;
      }
      while (v345);
      if ((v343 & 1) == 0)
      {
LABEL_653:
        v349 = *(_QWORD *)(a1 + 8);
        if (v341)
        {
          v350 = 0;
        }
        else
        {
          v341 = *(uint64_t **)(v349 + 8);
          v350 = (uint64_t *)(2 * (v341 == 0));
        }
        sub_22EED1CAC(v342, v341, v350, (uint64_t *)(v349 + 32));
      }
      *(_QWORD *)(a1 + 24) = v249;
      v446 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v342;
      v447 = *(_QWORD **)(a1 + 8);
      v449 = (uint64_t *)v447[9];
      v473 = v447[10];
      if ((unint64_t)v449 < v473)
        goto LABEL_823;
      v475 = (_QWORD *)v447[8];
      v476 = v449 - v475;
      v477 = v476 + 1;
      if ((unint64_t)(v476 + 1) >> 61)
        goto LABEL_983;
      v478 = v473 - (_QWORD)v475;
      if (v478 >> 2 > v477)
        v477 = v478 >> 2;
      if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFFF8)
        v479 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v479 = v477;
      if (!v479)
      {
        v480 = 0;
        goto LABEL_913;
      }
      if (!(v479 >> 61))
      {
        v480 = (char *)operator new(8 * v479);
LABEL_913:
        v481 = (uint64_t *)&v480[8 * v476];
        v482 = &v480[8 * v479];
        *v481 = v342;
        v474 = v481 + 1;
        if (v449 == v475)
          goto LABEL_916;
        do
        {
          v512 = *--v449;
          *--v481 = v512;
        }
        while (v449 != v475);
LABEL_915:
        v449 = (uint64_t *)v447[8];
LABEL_916:
        v447[8] = v481;
        v447[9] = v474;
        v447[10] = v482;
        if (v449)
          operator delete(v449);
        goto LABEL_918;
      }
      goto LABEL_984;
    case 91:
      goto LABEL_179;
    case 92:
      v51 = *(uint64_t **)(a1 + 16);
      v611 = v9;
      if (v51)
      {
        if (*(_BYTE *)(a1 + 648))
          return 0;
        v52 = v10;
        *(_QWORD *)(a1 + 16) = 0;
      }
      else
      {
        v52 = v10;
        v51 = *(uint64_t **)(a1 + 24);
      }
      v77 = (uint64_t *)sub_22EED0954(*(_QWORD *)(a1 + 8));
      v77[4] = v6 & 0xFFFFFFFFFFFFFFF9;
      sub_22EED9328((_QWORD *)a1, v77, v6);
      *(_QWORD *)(a1 + 16) = v77;
      v78 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 8), 0, 0);
      v79 = v78;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_185;
      if (*(_BYTE *)(a1 + 648))
        return 0;
      *(_QWORD *)(a1 + 16) = 0;
LABEL_185:
      *(_QWORD *)(a1 + 24) = v78;
      v630 = *(_OWORD *)v7;
      *(_QWORD *)&v631[0] = v7[2];
      *(_OWORD *)v626 = *(_OWORD *)v8;
      *(_QWORD *)&v627 = *(_QWORD *)(v8 + 16);
      v80 = sub_22EED46B8(a1);
      *(_QWORD *)(a1 + 24) = v80;
      *(_QWORD *)(v80 + 40) = v6;
      v81 = *(_QWORD *)(a1 + 128);
      v82 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 64) = v81;
      *(_QWORD *)(a1 + 72) = v82;
      *(_QWORD *)(a1 + 32) = v80;
      *(_QWORD *)(a1 + 40) = v81;
      *(_QWORD *)(a1 + 48) = v82;
      *(_QWORD *)(a1 + 56) = v51;
      v83 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 1, 0);
      if (v83)
      {
        v84 = (uint64_t *)v83;
        if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 648))
        {
          v384 = 0;
          *(_OWORD *)v8 = *(_OWORD *)v626;
          *(_QWORD *)(v8 + 16) = v627;
          *(_OWORD *)v7 = v630;
          v7[2] = *(_QWORD *)&v631[0];
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = v79;
          return v384;
        }
      }
      else
      {
        v84 = (uint64_t *)*v7;
      }
      sub_22EED1CAC((uint64_t)v77, v84, (uint64_t *)(2 * (v84 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
      *(_OWORD *)v8 = *(_OWORD *)v626;
      *(_QWORD *)(v8 + 16) = v627;
      *(_OWORD *)v7 = v630;
      v7[2] = *(_QWORD *)&v631[0];
      v85 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v79;
      sub_22EED1CAC((uint64_t)v77, v51, (uint64_t *)(2 * (v51 == 0)), v85);
      *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
      v45 = (uint64_t *)(v6 + 16);
      a3 = 1;
      v9 = v611;
      v10 = v52;
      goto LABEL_162;
    case 93:
LABEL_62:
      *(_QWORD *)(a1 + 16) = sub_22EED0954(*(_QWORD *)(a1 + 8));
      sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), 0, 0, v6);
      if (*(_BYTE *)v6 == 93)
      {
        v27 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
        *v27 = 0;
        v27[1] = v6;
        v27[2] = 2;
        sub_22EEDC7AC(a1, (uint64_t)v27, *(unsigned __int8 **)(v6 + 8));
      }
      v28 = *(_QWORD *)(a1 + 16);
      if ((*(_BYTE *)(v28 + 104) & 1) == 0)
      {
        sub_22EED1CAC(*(_QWORD *)(a1 + 16), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)(2 * (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
        v28 = *(_QWORD *)(a1 + 16);
      }
      sub_22EED9328((_QWORD *)a1, (uint64_t *)v28, v6);
      if (*(_BYTE *)v6 != 93)
        return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        return *(uint64_t **)(a1 + 16);
      a3 = 1;
      a4 = 1;
      goto LABEL_3;
    case 94:
      return sub_22EED928C(a1, v6);
    case 95:
      return (uint64_t *)sub_22EED904C(a1, *(unsigned __int8 ***)(v6 + 16), 0);
    case 96:
      if (*(_BYTE *)(a1 + 648))
        return 0;
      v202 = sub_22EED0954(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 16) = v202;
      *(_QWORD *)(v202 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
      if (!*(_QWORD *)(a1 + 80))
      {
LABEL_628:
        v384 = (uint64_t *)v202;
        goto LABEL_230;
      }
      sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 96), v6);
      v203 = *(uint64_t **)(a1 + 80);
LABEL_565:
      v291 = (uint64_t *)(2 * (v203 == 0));
      v292 = *(_QWORD *)(a1 + 16);
      v293 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
      goto LABEL_566;
    case 97:
      v384 = *(uint64_t **)(a1 + 16);
      if (v384)
      {
        v204 = *(_QWORD *)(a1 + 16);
        if (*(_BYTE *)(a1 + 648))
          return 0;
      }
      else
      {
        v204 = *(_QWORD *)(a1 + 24);
      }
      if (**(_BYTE **)(v6 + 24) == 95)
        goto LABEL_230;
      v331 = *(uint64_t **)(a1 + 120);
      v332 = sub_22EED0954(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(v332 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
      v333 = *(_BYTE **)(v6 + 24);
      if (*v333 != 94)
        goto LABEL_638;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v204;
      v334 = sub_22EED928C(a1, (unint64_t)v333);
      if (!v334)
        return 0;
      sub_22EED1CAC(v332, v334, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
LABEL_638:
      v335 = *(_QWORD *)(a1 + 8);
      if (v331)
      {
        v336 = 0;
      }
      else
      {
        v331 = *(uint64_t **)(v335 + 8);
        v336 = (uint64_t *)(2 * (v331 == 0));
      }
      sub_22EED1CAC(v332, v331, v336, (uint64_t *)(v335 + 32));
      *(_QWORD *)(a1 + 24) = v204;
      v462 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v332;
      v463 = *(_QWORD **)(a1 + 8);
      v465 = (uint64_t *)v463[9];
      v464 = v463[10];
      if ((unint64_t)v465 < v464)
      {
        *v465 = v332;
        v466 = v465 + 1;
LABEL_925:
        v463[9] = v466;
        *(_QWORD *)&v631[0] = *(_QWORD *)(a1 + 96);
        v630 = *(_OWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v204;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 16) = 0;
        result = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), 1, 0);
        *(_OWORD *)(a1 + 80) = v630;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)&v631[0];
        *(_QWORD *)(a1 + 120) = v462;
        return result;
      }
      v467 = (_QWORD *)v463[8];
      v468 = v465 - v467;
      v469 = v468 + 1;
      if ((unint64_t)(v468 + 1) >> 61)
        goto LABEL_983;
      v470 = v464 - (_QWORD)v467;
      if (v470 >> 2 > v469)
        v469 = v470 >> 2;
      if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFF8)
        v471 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v471 = v469;
      if (!v471)
      {
        v472 = 0;
        goto LABEL_920;
      }
      if (!(v471 >> 61))
      {
        v472 = (char *)operator new(8 * v471);
LABEL_920:
        v513 = (uint64_t *)&v472[8 * v468];
        *v513 = v332;
        v466 = v513 + 1;
        if (v465 != v467)
        {
          do
          {
            v514 = *--v465;
            *--v513 = v514;
          }
          while (v465 != v467);
          v465 = (uint64_t *)v463[8];
        }
        v463[8] = v513;
        v463[9] = v466;
        v463[10] = &v472[8 * v471];
        if (v465)
          operator delete(v465);
        goto LABEL_925;
      }
      goto LABEL_984;
    case 98:
      v242 = *(_BYTE **)(v6 + 8 * (((unint64_t)*(unsigned __int16 *)v6 >> 8) & 1) + 32);
      if (v242)
      {
        if (*v242 == 98)
        {
          v243 = 0;
          v244 = 0;
          v245 = (unsigned __int8 **)v6;
          do
          {
            v6 = (uint64_t)v242;
            v246 = (uint64_t *)sub_22EED0954(*(_QWORD *)(a1 + 8));
            v246[3] = (uint64_t)v245;
            v384 = v246;
            if (v244)
            {
              sub_22EED1CAC(v243, v246, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
              v384 = v244;
            }
            v247 = *(_QWORD *)(a1 + 104);
            if (sub_22EEDCB58((_BYTE *)(a1 + 664), *(_QWORD *)(a1 + 672), v245, *(_QWORD *)a1))
              v248 = v246;
            else
              v248 = 0;
            sub_22EED1CAC(v247, v248, (uint64_t *)(2 * (v248 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
            v242 = *(_BYTE **)(v6 + 8 * (((unint64_t)*(unsigned __int16 *)v6 >> 8) & 1) + 32);
            v243 = (uint64_t)v246;
            v244 = v384;
            v245 = (unsigned __int8 **)v6;
          }
          while (*v242 == 98);
        }
        else
        {
          v384 = 0;
          v246 = 0;
        }
        sub_22EED47D4(a1, v242, 1, 0);
      }
      else
      {
        v384 = 0;
        v246 = 0;
      }
      v385 = *(_QWORD *)(a1 + 16);
      if (!v385)
        v385 = sub_22EED46B8(a1);
      *(_QWORD *)(v385 + 24) = v6;
      if (*(_BYTE *)(a1 + 648))
        return 0;
      v386 = *(_QWORD *)(a1 + 104);
      v387 = sub_22EEDCB58((_BYTE *)(a1 + 664), *(_QWORD *)(a1 + 672), (unsigned __int8 **)v6, *(_QWORD *)a1);
      if (v387)
        v388 = 0;
      else
        v388 = (uint64_t *)(v385 & 0xFFFFFFFFFFFFFFF9 | 2);
      if (v387)
        v389 = (uint64_t *)v385;
      else
        v389 = 0;
      sub_22EED1CAC(v386, v389, v388, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
      *(_QWORD *)(a1 + 16) = 0;
      if (v384)
        sub_22EED1CAC((uint64_t)v246, (uint64_t *)v385, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
      else
        v384 = (uint64_t *)v385;
      goto LABEL_807;
    case 99:
      v201 = *(_QWORD *)(v6 + 24);
      if (v201)
        sub_22EED47D4(a1, v201, 1, 0);
      v384 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 112) = v384;
      if (!v384)
      {
        v384 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 112) = v384;
      }
LABEL_251:
      v384[3] = v6;
      if (*(_BYTE *)(a1 + 648))
        return 0;
LABEL_806:
      *(_QWORD *)(a1 + 16) = 0;
LABEL_807:
      *(_QWORD *)(a1 + 24) = v384;
      return v384;
    case 100:
      v223 = *(_QWORD **)(a1 + 128);
      v222 = *(_QWORD *)(a1 + 136);
      v224 = *(unsigned __int16 *)v6;
      if ((v224 & 0x100) != 0)
      {
        v225 = *(unsigned __int8 ***)(v6 + 24);
        if (v225)
        {
          sub_22EED9630((uint64_t *)a1, v225);
          v224 = *(unsigned __int16 *)v6;
        }
      }
      if ((v224 & 0x200) != 0)
      {
        v560 = *(_QWORD *)(v6 + 8 * ((v224 >> 8) & 1) + 24);
        if (v560)
        {
          v561 = *(_QWORD *)(v560 + 8);
          if (v561)
            sub_22EED9EF4((uint64_t *)a1, v561, 0);
        }
      }
      sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v223, v222, v6);
      v226 = *(_QWORD *)(a1 + 16);
      if (v226)
      {
        if (*(_BYTE *)(a1 + 648))
        {
LABEL_584:
          v384 = 0;
          goto LABEL_1069;
        }
      }
      else
      {
        v226 = *(_QWORD *)(a1 + 24);
      }
      *(_OWORD *)v613 = *(_OWORD *)(a1 + 104);
      *(_OWORD *)v626 = *(_OWORD *)v8;
      *(_QWORD *)&v627 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(a1 + 112) = v226;
      *(_QWORD *)(a1 + 104) = sub_22EED0954(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 56) = v226;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v226;
      v337 = *(_BYTE *)(a1 + 664);
      *(_BYTE *)(a1 + 664) = 0;
      LOWORD(v630) = 0;
      *((_QWORD *)&v630 + 1) = 0;
      LODWORD(v631[0]) = 0;
      v338 = (uint64_t *)(v6 + 24);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 48)
        && (v339 = (unsigned __int8 *)v338[(HIBYTE(*(unsigned __int16 *)v6) & 1) + ((*(unsigned __int16 *)v6 >> 9) & 1u)],
            (*(_DWORD *)v339 & 0x18000) == 0))
      {
        if (sub_22F005120(v339, (uint64_t)&v630, *(_QWORD *)a1, 0))
          v340 = &v630;
        else
          v340 = 0;
      }
      else
      {
        v340 = 0;
      }
      v418 = *(_QWORD *)(a1 + 672);
      *(_QWORD *)(a1 + 672) = v340;
      v419 = (unsigned __int8 **)v338[((*(unsigned __int16 *)v6 >> 9) & 1) + 1 + (HIBYTE(*(unsigned __int16 *)v6) & 1u)];
      if (*(_BYTE *)v419 != 8)
      {
        v420 = v223;
        v421 = v222;
        v222 = v418;
        v422 = v337;
        v423 = v8;
        v424 = *(_QWORD **)(a1 + 128);
        v425 = *(_QWORD *)(a1 + 136);
        sub_22EED9630((uint64_t *)a1, v419);
        v426 = v424;
        v8 = v423;
        v337 = v422;
        v418 = v222;
        LODWORD(v222) = v421;
        v223 = v420;
        v338 = (uint64_t *)(v6 + 24);
        sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v426, v425, (uint64_t)v419);
        v419 = *(unsigned __int8 ***)(v6
                                    + 24
                                    + 8
                                    * (((*(unsigned __int16 *)v6 >> 9) & 1) + (HIBYTE(*(unsigned __int16 *)v6) & 1u) + 1));
      }
      sub_22EED47D4(a1, v419, 1, 0);
      if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 648))
      {
        v384 = 0;
      }
      else
      {
        v427 = (*(_WORD *)v6 & 0x400) != 0 && *(_QWORD *)(v6 + 8) != 0;
        v428 = v427 | *(unsigned __int8 *)(a1 + 664);
        v429 = *(_QWORD *)(a1 + 112);
        if (v429)
          v430 = v428 == 0;
        else
          v430 = 0;
        v431 = 2;
        if (v430)
          v431 = 0;
        v432 = v428 == 0;
        if (v428)
          v433 = v429 & 0xFFFFFFFFFFFFFFF9;
        else
          v433 = 0;
        if (v432)
          v434 = *(uint64_t **)(a1 + 112);
        else
          v434 = 0;
        sub_22EED1CAC(*(_QWORD *)(a1 + 104), v434, (uint64_t *)(v433 | v431), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
        v435 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(v435 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
        *(_QWORD *)(a1 + 16) = v435;
        v384 = (uint64_t *)sub_22EED47D4(a1, v338[(HIBYTE(*(unsigned __int16 *)v6) & 1) + ((*(unsigned __int16 *)v6 >> 9) & 1u)], 1, 0);
        v436 = *(unsigned __int16 *)v6;
        if ((v436 & 0x200) != 0)
        {
          v565 = v338[(v436 >> 8) & 1];
          if (v565)
          {
            v593 = *(_QWORD *)(v565 + 8);
            if (v593)
            {
              v591 = sub_22EFBC5B4(v593);
              if (v591)
              {
                v566 = *(uint64_t **)(a1 + 16);
                if (v566
                  || (v566 = (uint64_t *)sub_22EED46B8(a1),
                      *(_QWORD *)(a1 + 16) = v566,
                      LODWORD(v436) = *(unsigned __int16 *)v6,
                      (v436 & 0x200) != 0))
                {
                  v567 = v338[(v436 >> 8) & 1];
                }
                else
                {
                  v567 = 0;
                }
                sub_22EED9328((_QWORD *)a1, v566, v567);
                v384 = (uint64_t *)sub_22EED47D4(a1, v591, 1, 0);
                v589 = *(_QWORD *)(a1 + 128);
                if ((v589 || *(_DWORD *)(a1 + 136)) && **(_QWORD **)(v589 + 8) == v593)
                  sub_22EED4764(a1, v384, v593, v591);
              }
            }
          }
        }
        if ((*(_WORD *)v6 & 0x100) != 0)
        {
          v437 = *v338;
          if (*v338)
          {
            if (!*(_QWORD *)(a1 + 16))
              *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
            v384 = (uint64_t *)sub_22EED47D4(a1, v437, 1, 0);
          }
        }
      }
      *(_QWORD *)(a1 + 672) = v418;
      if (LODWORD(v631[0]) >= 2)
        sub_22EF53BC0((uint64_t *)v631);
      *(_BYTE *)(a1 + 664) = v337;
      *(_OWORD *)v8 = *(_OWORD *)v626;
      *(_QWORD *)(v8 + 16) = v627;
      *(_OWORD *)(a1 + 104) = *(_OWORD *)v613;
      goto LABEL_1069;
    case 101:
      v165 = *(unsigned int *)v6;
      v166 = v165 >> 8;
      if (v165 >= 0x100)
      {
        v328 = 8 * v166;
        for (j = v6 + 16; *(_WORD *)(*(_QWORD *)j + 32) != 39; j += 8)
        {
          v328 -= 8;
          if (!v328)
            return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
        }
      }
      else
      {
        j = v6 + 16;
      }
      if (j != v6 + 16 + 8 * v166 && (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1))
      {
        v168 = *(uint64_t **)(a1 + 16);
        if (!v168)
        {
          v168 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v168;
        }
        sub_22EED9328((_QWORD *)a1, v168, v6);
      }
      return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
    case 102:
    case 103:
      return (uint64_t *)sub_22EED8D64(a1, v6);
    case 104:
      *(_QWORD *)&v630 = *(_QWORD *)(v6 + 24);
      sub_22F34CD6C(a1 + 192, (uint64_t *)&v630);
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v511 = *(uint64_t **)(a1 + 16);
        if (!v511)
        {
          v511 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v511;
        }
        sub_22EED9328((_QWORD *)a1, v511, v6);
      }
      return *(uint64_t **)(a1 + 16);
    case 106:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v219 = *(uint64_t **)(a1 + 16);
        if (!v219)
        {
          v219 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v219;
        }
        sub_22EED9328((_QWORD *)a1, v219, v6);
      }
      v384 = *(uint64_t **)(a1 + 16);
      v220 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 0, 0);
      if (v220)
        v384 = (uint64_t *)v220;
      v221 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
      goto LABEL_625;
    case 112:
      v43 = (*(_DWORD *)v6 >> 18) & 0x3F;
      if ((v43 - 19) <= 1)
      {
        v314 = *(uint64_t **)(a1 + 16);
        if (!v314)
          v314 = (uint64_t *)sub_22EED46B8(a1);
        sub_22EED9328((_QWORD *)a1, v314, v6);
        if (*(_BYTE *)(a1 + 648))
          return 0;
        return (uint64_t *)sub_22EEDA7CC(a1, v6, 0, (uint64_t)v314, (uint64_t)v314);
      }
      if (v43 == 32)
      {
        v44 = *(uint64_t **)(a1 + 16);
        if (!v44)
        {
          v44 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v44;
        }
        sub_22EED9328((_QWORD *)a1, v44, v6);
        v45 = (uint64_t *)(v6 + 16);
        a3 = 1;
        sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 1, 0);
      }
      else
      {
        v72 = v10;
        v73 = v43 - 21;
        v74 = sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6);
        v75 = a3 == 1 || v74;
        if (v73 > 0xA)
        {
          if (v75)
          {
            v329 = *(uint64_t **)(a1 + 16);
            if (!v329)
            {
              v329 = (uint64_t *)sub_22EED46B8(a1);
              *(_QWORD *)(a1 + 16) = v329;
            }
            sub_22EED9328((_QWORD *)a1, v329, v6);
          }
          if ((*(_DWORD *)v6 & 0xF80000) == 0x380000 || ((*(_DWORD *)v6 >> 18) & 0x3Eu) - 10 <= 3)
            sub_22EEDABEC(a1, v6);
          v384 = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 0, 0);
          v221 = *(_QWORD *)(v6 + 16);
LABEL_625:
          v330 = sub_22EED47D4(a1, v221, 0, 0);
          if (v330)
            return (uint64_t *)v330;
          return v384;
        }
        v10 = v72;
        if (v75)
        {
          v76 = *(uint64_t **)(a1 + 16);
          if (!v76)
          {
            v76 = (uint64_t *)sub_22EED46B8(a1);
            *(_QWORD *)(a1 + 16) = v76;
          }
          sub_22EED9328((_QWORD *)a1, v76, v6);
        }
        sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), 0, 0);
        a3 = 0;
        v45 = (uint64_t *)(v6 + 24);
      }
      goto LABEL_162;
    case 114:
      v384 = (uint64_t *)sub_22EEDC67C((_QWORD *)a1, (_BYTE *)v6, a3);
      v237 = *(_QWORD *)(v6 + 16);
      v238 = *(unsigned int *)(v237 + 112);
      if ((_DWORD)v238)
      {
        v239 = 16 * v238;
        v240 = (_QWORD *)(*(_QWORD *)(v237 + 104) + 8);
        do
        {
          if (*v240)
          {
            v241 = sub_22EED47D4(a1, *v240, 0, 0);
            if (v241)
              v384 = (uint64_t *)v241;
          }
          v240 += 2;
          v239 -= 16;
        }
        while (v239);
      }
      return v384;
    case 115:
      v210 = a3;
      v211 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), a3, 0);
      if ((*(_DWORD *)(v6 + 4) & 0x7FFFFFFF) == 2)
        return (uint64_t *)v211;
      v212 = 8 * ((*(_DWORD *)(v6 + 4) & 0x7FFFFFFFu) - 2);
      v213 = v6 + 24;
      do
      {
        v384 = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(*(_QWORD *)(v213 + v212) + 16), v210, 0);
        v212 -= 8;
      }
      while (v212);
      return v384;
    case 116:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v48 = *(uint64_t **)(a1 + 16);
        if (!v48)
        {
          v48 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v48;
        }
        sub_22EED9328((_QWORD *)a1, v48, v6);
        v49 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
        *v49 = 0;
        v49[1] = v6;
        v49[2] = 4;
        sub_22EEDC7AC(a1, (uint64_t)v49, *(unsigned __int8 **)(v6 + 24));
      }
      v50 = (uint64_t *)(v6 + 24);
      goto LABEL_214;
    case 118:
      v250 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v250)
      {
        v251 = 0;
        v252 = 8 * v250;
        v253 = 7;
        do
        {
          v254 = *(unsigned __int8 *)v6;
          v255 = v254 == 119;
          if (v254 == 119)
            v256 = v6;
          else
            v256 = 0;
          v257 = v256 + 48;
          if (!v255)
            v257 = v6 + 40;
          v258 = *(_QWORD *)(v257 + v251);
          v259 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v258 + 8) & 0xFFFFFFFFFFFFFFF0));
          if (v259 && (*(_DWORD *)(v259 + 28) & 0x7Fu) - 35 <= 2 && (*(_BYTE *)(v258 + 1) & 3) == 0)
          {
            v260 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
            *v260 = 0;
            v260[1] = v6;
            v260[2] = v253;
            sub_22EEDC7AC(a1, (uint64_t)v260, (unsigned __int8 *)v258);
          }
          v253 += 0x100000000;
          v251 += 8;
        }
        while (v252 != v251);
      }
      goto LABEL_503;
    case 119:
      v190 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v190)
      {
        v191 = 0;
        v192 = 8 * v190;
        v193 = 7;
        do
        {
          v194 = *(unsigned __int8 *)v6;
          v195 = v194 == 119;
          if (v194 == 119)
            v196 = v6;
          else
            v196 = 0;
          v197 = v196 + 48;
          if (!v195)
            v197 = v6 + 40;
          v198 = *(_QWORD *)(v197 + v191);
          v199 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v198 + 8) & 0xFFFFFFFFFFFFFFF0));
          if (v199 && (*(_DWORD *)(v199 + 28) & 0x7Fu) - 35 <= 2 && (*(_BYTE *)(v198 + 1) & 3) == 0)
          {
            v200 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
            *v200 = 0;
            v200[1] = v6;
            v200[2] = v193;
            sub_22EEDC7AC(a1, (uint64_t)v200, (unsigned __int8 *)v198);
          }
          v193 += 0x100000000;
          v191 += 8;
        }
        while (v192 != v191);
      }
LABEL_503:
      v261 = *(uint64_t **)(a1 + 16);
      if (!v261)
      {
        v261 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v261;
      }
      sub_22EEDD5A8(a1, v261, v6);
      return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
    case 122:
      v227 = *(uint64_t **)(a1 + 16);
      if (!v227)
      {
        v227 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v227;
      }
      sub_22EED9328((_QWORD *)a1, v227, v6);
      v228 = sub_22F0602E8(v6);
      if (v228 < 0x10)
        return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
      v229 = v228;
      v230 = *(_QWORD *)(v228 & 0xFFFFFFFFFFFFFFF0);
      if (v230)
      {
        v231 = *(_DWORD *)(v230 + 16);
        if ((v231 & 0xFE) == 0x28)
          goto LABEL_987;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v230 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      {
        v230 = sub_22F10CF48(v230);
        if (v230)
        {
          v231 = *(_DWORD *)(v230 + 16);
LABEL_987:
          if ((v231 & 0x100000) != 0)
          {
            do
            {
              v230 = *(_QWORD *)(*(_QWORD *)(v230 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v230)
              {
                v547 = *(_DWORD *)(v230 + 16);
                if ((v547 & 0xFE) == 0x28)
                  continue;
              }
              v230 = sub_22F10CF48(v230);
              v547 = *(_DWORD *)(v230 + 16);
            }
            while ((v547 & 0x100000) != 0);
          }
          v229 = *(_QWORD *)(v230 + 32);
        }
      }
      v232 = sub_22EF5BA38(*(_QWORD *)a1, v229);
      v233 = sub_22F10C2A4(*(_QWORD *)(v232 & 0xFFFFFFFFFFFFFFF0));
      if (v233)
      {
        v234 = v233;
        if ((*(_DWORD *)(v233 + 28) & 0x7Fu) - 35 <= 2 && (*(_BYTE *)(v233 + 74) & 1) != 0)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v233 + 104) + 96), *(_QWORD *)(v233 + 104));
          if ((**(_QWORD **)(v234 + 128) & 0x100000000000) == 0)
          {
            v235 = *(_QWORD *)(a1 + 16);
            v236 = *(unint64_t **)(v235 + 8);
            if ((unint64_t)v236 >= *(_QWORD *)(v235 + 16))
            {
              sub_22EED453C(*(uint64_t **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
              v236 = *(unint64_t **)(v235 + 8);
            }
            *v236 = v234 & 0xFFFFFFFFFFFFFFFCLL | 2;
            v236[1] = v6 & 0xFFFFFFFFFFFFFFFCLL | 2;
            *(_QWORD *)(v235 + 8) = v236 + 2;
          }
        }
      }
      return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
    case 126:
      v205 = *(uint64_t **)(a1 + 16);
      if (!v205)
      {
        v205 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v205;
      }
      sub_22EED9328((_QWORD *)a1, v205, v6);
      v206 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
      *v206 = 0;
      v206[1] = v6;
      v206[2] = 1;
      v207 = *(unsigned int *)v6;
      if ((v207 & 0x1800000) != 0 && (v208 = *(unsigned __int8 **)(v6 + 8 * ((v207 >> 19) & 1) + 56)) != 0)
      {
        if ((*v208 & 0xFE) == 0x76)
          v209 = v208;
        else
          v209 = 0;
      }
      else
      {
        v209 = 0;
      }
      sub_22EEDC7AC(a1, (uint64_t)v206, v209);
      v315 = *(unsigned int *)v6;
      if ((v315 & 0x1800000) != 0)
      {
        v316 = *(_QWORD *)(v6 + 8 * ((v315 >> 19) & 1) + 56);
        if (v316)
          *(_QWORD *)(a1 + 16) = sub_22EED47D4(a1, v316, 0, 0);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 57))
      {
        v317 = *(_QWORD *)(a1 + 16);
        v318 = *(uint64_t **)(v317 + 8);
        if ((unint64_t)v318 >= *(_QWORD *)(v317 + 16))
        {
          sub_22EED453C(*(uint64_t **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
          v318 = *(uint64_t **)(v317 + 8);
        }
        *v318 = v6 | 3;
        v318[1] = 0;
        *(_QWORD *)(v317 + 8) = v318 + 2;
      }
      v319 = *(_DWORD *)v6;
      if ((*(_DWORD *)v6 & 0x80000) != 0)
      {
        v320 = *(_QWORD *)(v6 + 56);
        if (v320)
        {
          *(_QWORD *)(a1 + 16) = sub_22EED47D4(a1, v320, 0, 0);
          v319 = *(_DWORD *)v6;
        }
      }
      v321 = (v319 >> 19) & 1;
      if ((v319 & 0x1800000) != 0)
        ++v321;
      v322 = *(unsigned int *)(v6 + 4);
      if (!(_DWORD)v322)
        return *(uint64_t **)(a1 + 16);
      v323 = (uint64_t *)(v6 + 8 * v321 + 56);
      v324 = 8 * v322;
      do
      {
        v325 = *v323++;
        v384 = (uint64_t *)sub_22EED47D4(a1, v325, 0, 0);
        *(_QWORD *)(a1 + 16) = v384;
        v324 -= 8;
      }
      while (v324);
      return v384;
    case -118:
    case -116:
    case -115:
    case -114:
      v20 = *(_QWORD *)(v6 + *(unsigned __int8 *)(v6 + 3));
      v21 = *(_QWORD *)(v20 + 8);
      if (v21 == *(_QWORD *)(*(_QWORD *)a1 + 16848))
      {
        v22 = sub_22EFFAC68((unsigned __int8 *)v20);
        if (v22 >= 0x10)
          v21 = v22;
      }
      v23 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
      v24 = *(unsigned __int8 *)(v23 + 16);
      if (v24 == 39)
      {
        v25 = v23;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
          goto LABEL_75;
        v25 = sub_22F10CF48(v23);
        if (!v25)
        {
          v24 = *(unsigned __int8 *)(v23 + 16);
LABEL_75:
          if ((v24 - 27) > 0xFFFFFFFD)
            goto LABEL_76;
          goto LABEL_216;
        }
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v23)
        v26 = *(unsigned __int8 *)(v23 + 16) - 27 > 0xFFFFFFFD;
      else
        v26 = 0;
      if (v26)
      {
LABEL_76:
        v30 = *(_DWORD *)(v23 + 16) >> 19;
        goto LABEL_77;
      }
LABEL_216:
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
      {
        v23 = sub_22F10CF48(v23);
        if (v23)
          goto LABEL_76;
      }
      v30 = 0;
LABEL_77:
      v31 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 2000) + 8) & 0x100000000000) != 0
         && *(_BYTE *)(*(_QWORD *)(a1 + 656) + 49) != 0;
      v605 = (v30 >> 5) & 1;
      v32 = sub_22EFFA604(*(unsigned __int8 **)(v6 + *(unsigned __int8 *)(v6 + 3)));
      v33 = v32;
      if (v32)
      {
        v34 = v10;
        if ((*(_DWORD *)(v32 + 28) & 0x7Eu) - 52 > 5)
        {
          LODWORD(v33) = 0;
        }
        else
        {
          v597 = v31;
          v600 = v7;
          v610 = v9;
          v35 = v8;
          if ((sub_22EFBF68C(v32) & 1) == 0)
          {
            v36 = *(unsigned int *)(v6 + 16);
            if ((_DWORD)v36)
            {
              v37 = 0;
              v38 = 8 * v36;
              v39 = 7;
              do
              {
                v40 = *(_QWORD *)(v6
                                + v37
                                + ((unint64_t)*(unsigned int *)v6 >> 24)
                                + 8 * (((unint64_t)*(unsigned int *)v6 >> 18) & 1)
                                + 8);
                v41 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0));
                if (v41 && (*(_DWORD *)(v41 + 28) & 0x7Fu) - 35 <= 2 && (*(_BYTE *)(v40 + 1) & 3) == 0)
                {
                  v42 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
                  *v42 = 0;
                  v42[1] = v6;
                  v42[2] = v39;
                  sub_22EEDC7AC(a1, (uint64_t)v42, (unsigned __int8 *)v40);
                }
                v39 += 0x100000000;
                v37 += 8;
              }
              while (v38 != v37);
            }
          }
          if ((sub_22EFC0BA0(v33) & 1) != 0 || sub_22F000500((unsigned int *)v6, *(_QWORD *)a1))
            v605 = 1;
          v31 = v597 & !sub_22E4725AC(v33);
          v8 = v35;
          v9 = v610;
          LODWORD(v33) = sub_22EFC01DC(v33, 0) == 475 || sub_22EFC01DC(v33, 0) == 476;
          v7 = v600;
        }
      }
      else
      {
        v34 = v10;
      }
      v86 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + *(unsigned __int8 *)(v6 + 3)) + 8) & 0xFFFFFFFFFFFFFFF0);
      v87 = *v86;
      if (*v86 && *(_BYTE *)(v87 + 16) == 39)
      {
        v88 = *v86;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
          goto LABEL_199;
        v88 = sub_22F10CF48(v87);
        v87 = *v86;
        if (!v88)
          goto LABEL_199;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2)
        goto LABEL_200;
LABEL_199:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
        goto LABEL_201;
LABEL_200:
      v87 = *(_QWORD *)(sub_22F10ACF8(v87) & 0xFFFFFFFFFFFFFFF0);
LABEL_201:
      v89 = *(unsigned __int8 *)(v87 + 16);
      if (v87)
        v90 = (v89 - 27) > 0xFFFFFFFD;
      else
        v90 = 0;
      v10 = v34;
      if (v90)
        goto LABEL_206;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
        || (v87 = sub_22F10CF48(v87)) == 0)
      {
        if (!(_DWORD)v33)
          goto LABEL_344;
LABEL_211:
        v91 = *(uint64_t **)(a1 + 16);
        if (!v91)
        {
          v91 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v91;
        }
        sub_22EED9328((_QWORD *)a1, v91, v6);
        v50 = (uint64_t *)(v6 + *(unsigned __int8 *)(v6 + 3));
LABEL_214:
        a3 = 0;
        a4 = 0;
        v6 = *v50;
        if (!*v50)
          goto LABEL_229;
        goto LABEL_3;
      }
      v89 = *(unsigned __int8 *)(v87 + 16);
LABEL_206:
      if (v89 == 26
        && ((*(_QWORD *)(v87 + 16) >> 54) & 0xF) - 9 >= 2
        && !sub_22F113A44(v87))
      {
        v31 = 0;
      }
      if ((_DWORD)v33)
        goto LABEL_211;
LABEL_344:
      v153 = *(uint64_t **)(a1 + 16);
      if (((v605 | v31) & 1) != 0)
      {
        if (!v153 || (*(_QWORD *)(a1 + 24) = v153, !*(_BYTE *)(a1 + 648)))
        {
          if (v605)
            v154 = (uint64_t *)sub_22EEDA490(a1);
          else
            v154 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v154;
          sub_22EEDC6E4((_QWORD *)a1, v154, v6);
          if (v31)
          {
            v326 = *(uint64_t **)(a1 + 120);
            v327 = *(_QWORD *)(a1 + 8);
            if (!v326)
              v326 = *(uint64_t **)(v327 + 8);
            sub_22EED1CAC(*(_QWORD *)(a1 + 16), v326, 0, (uint64_t *)(v327 + 32));
          }
          return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
        }
        return 0;
      }
      else
      {
        if (!v153)
        {
          v153 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v153;
        }
        sub_22EEDC6E4((_QWORD *)a1, v153, v6);
        return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
      }
    case -111:
    case -68:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v29 = *(uint64_t **)(a1 + 16);
        if (!v29)
        {
          v29 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v29;
        }
        sub_22EED9328((_QWORD *)a1, v29, v6);
      }
      goto LABEL_160;
    case -103:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v64 = *(uint64_t **)(a1 + 16);
        if (!v64)
        {
          v64 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v64;
        }
        sub_22EED9328((_QWORD *)a1, v64, v6);
      }
      if ((*(_DWORD *)v6 & 0x1FC0000) != 0x7C0000)
        goto LABEL_160;
      v65 = *(unsigned __int8 **)(v6 + 16);
      if (!v65)
      {
LABEL_158:
        v14 = 0;
        goto LABEL_159;
      }
      while (2)
      {
        v14 = (uint64_t)v65;
        v66 = *v65;
        if (v66 > 213)
        {
          if (v66 == 233)
          {
            if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
              goto LABEL_159;
            v68 = (unsigned __int8 **)(v14 + 16);
          }
          else
          {
            if (v66 != 214)
              goto LABEL_159;
            v68 = (unsigned __int8 **)(v14 + 24);
          }
        }
        else if (v66 == 155)
        {
          if ((**(_DWORD **)(v14 + 16) & 0x18000) != 0)
            goto LABEL_159;
          if (*(_BYTE *)(v14 + 48))
            v68 = (unsigned __int8 **)(v14 + 24);
          else
            v68 = (unsigned __int8 **)(v14 + 32);
        }
        else
        {
          if (v66 != 176)
            goto LABEL_159;
          v67 = *(unsigned int *)(v14 + 20);
          if ((_DWORD)v67 == -1)
            goto LABEL_159;
          v68 = (unsigned __int8 **)(v14 + 8 * v67 + 40);
        }
        v65 = *v68;
        if (v65 == (unsigned __int8 *)v14)
          goto LABEL_159;
        continue;
      }
    case -101:
      v601 = v10;
      v54 = *(uint64_t **)(a1 + 16);
      if (!v54)
        v54 = (uint64_t *)sub_22EED46B8(a1);
      sub_22EED9328((_QWORD *)a1, v54, v6);
      if (*(_BYTE *)(a1 + 648))
        return 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v54;
      v55 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 1, 0);
      if (*(_BYTE *)(a1 + 648))
        return 0;
      v56 = (uint64_t *)v55;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = v54;
      v57 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 32), 1, 0);
      if (*(_BYTE *)(a1 + 648))
        return 0;
      v58 = (uint64_t *)v57;
      *(_QWORD *)(a1 + 16) = sub_22EED0954(*(_QWORD *)(a1 + 8));
      v45 = (uint64_t *)(v6 + 16);
      v59 = v7;
      v60 = v9;
      v61 = sub_22EEDABEC(a1, *(_QWORD *)(v6 + 16));
      if (v61)
        v62 = v56;
      else
        v62 = 0;
      sub_22EED1CAC(*(_QWORD *)(a1 + 16), v62, (uint64_t *)(2 * (v62 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
      v151 = v61 == 1;
      v9 = v60;
      v7 = v59;
      if (v151)
        v63 = 0;
      else
        v63 = v58;
      sub_22EED1CAC(*(_QWORD *)(a1 + 16), v63, (uint64_t *)(2 * (v63 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
      a3 = 1;
      v10 = v601;
      goto LABEL_162;
    case -88:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v53 = *(uint64_t **)(a1 + 16);
        if (!v53)
        {
          v53 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v53;
        }
        sub_22EED9328((_QWORD *)a1, v53, v6);
      }
      goto LABEL_161;
    case -84:
      goto LABEL_160;
    case -83:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 54))
      {
        LOBYTE(v630) = 0;
        a3 = 1;
        DWORD1(v630) = 1;
        *v10 = 0;
        v10[1] = 0;
        sub_22EEDCCF8(a1, *(_QWORD *)(v6 + 16), a4 & 1, (uint64_t)&v630);
      }
      goto LABEL_161;
    case -77:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 656) + 63))
        return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
      return *(uint64_t **)(a1 + 16);
    case -76:
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6) || a3 == 1)
      {
        v262 = *(uint64_t **)(a1 + 16);
        if (!v262)
        {
          v262 = (uint64_t *)sub_22EED46B8(a1);
          *(_QWORD *)(a1 + 16) = v262;
        }
        sub_22EED9328((_QWORD *)a1, v262, v6);
      }
      v384 = *(uint64_t **)(a1 + 16);
      sub_22EEDA5B4((uint64_t)&v630, (unsigned __int8 *)v6);
      if (v633)
      {
        v263 = 8 * v633;
        v264 = v632[6] - 8;
        do
        {
          v265 = *(_QWORD *)(v264 + v263);
          if (v265)
          {
            v266 = sub_22EED47D4(a1, *(_QWORD *)(v264 + v263), 0, 0);
            if (v266)
              v384 = (uint64_t *)v266;
            if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 59) && *(_BYTE *)v265 == 121)
            {
              v267 = *(_QWORD *)(v265 + 16);
              v268 = *(_QWORD *)(v267 + 72) & 3;
              if ((_DWORD)v268 && (_DWORD)v268 != 3)
              {
                v270 = (_QWORD *)(*(_QWORD *)(v267 + 72) & 0xFFFFFFFFFFFFFFFCLL);
                if ((*(_BYTE *)(v267 + 68) & 1) != 0)
                  v270 = (_QWORD *)*v270;
                if (v270)
                {
                  v271 = sub_22EED47D4(a1, v270, 0, 0);
                  if (v271)
                    v384 = (uint64_t *)v271;
                }
              }
            }
          }
          v263 -= 8;
        }
        while (v263);
      }
      v152 = (void *)v630;
      if ((_OWORD *)v630 == v631)
        return v384;
      goto LABEL_343;
    case -74:
      v384 = (uint64_t *)sub_22EEDC67C((_QWORD *)a1, (_BYTE *)v6, a3);
      if (*(_WORD *)(v6 + 4))
      {
        v169 = 0;
        v170 = (unsigned __int8 **)(v6 + 32);
        v171 = (unint64_t)*(unsigned __int16 *)(v6 + 4) << 32;
        do
        {
          v172 = *v170;
          if (*v170)
          {
            v173 = *v172;
            v174 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
            *v174 = 0;
            v174[1] = v6;
            v174[2] = v169 + 8;
            v175 = v172;
            if (v173 == 106)
              v175 = (unsigned __int8 *)*((_QWORD *)v172 + 3);
            sub_22EEDC7AC(a1, (uint64_t)v174, v175);
            v176 = sub_22EED47D4(a1, v172, 0, 0);
            if (v176)
              v384 = (uint64_t *)v176;
          }
          ++v170;
          v169 += 0x100000000;
        }
        while (v171 != v169);
      }
      return v384;
    case -71:
      v214 = a3;
      v384 = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), a3, 0);
      v215 = *(_DWORD *)(v6 + 4);
      if ((v215 & 0x80000000) == 0)
      {
        v216 = v215 - 1;
        if (v216)
        {
          v217 = 8 * v216;
          v218 = v6 + 16;
          do
          {
            v384 = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(*(_QWORD *)(v218 + v217) + 16), v214, 0);
            v217 -= 8;
          }
          while (v217);
        }
      }
      return v384;
    case -70:
      v272 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
      *v272 = 0;
      v272[1] = v6;
      v272[2] = 3;
      v273 = *(_QWORD *)(v6 + 16);
      v274 = v273 & 0xFFFFFFFFFFFFFFF8;
      if ((v273 & 4) != 0)
        v274 = *(_QWORD *)(v274 + 40);
      sub_22EEDC7AC(a1, (uint64_t)v272, (unsigned __int8 *)v274);
      return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
    case -56:
      if (*(_WORD *)(v6 + 24))
      {
        v177 = 0;
        v178 = (unsigned __int8 **)(v6 + 48);
        v179 = (unint64_t)*(unsigned __int16 *)(v6 + 24) << 32;
        do
        {
          v180 = *v178;
          v181 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)*v178 + 1) & 0xFFFFFFFFFFFFFFF0));
          if (v181 && (*(_DWORD *)(v181 + 28) & 0x7Fu) - 35 <= 2 && (v180[1] & 3) == 0)
          {
            v182 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
            *v182 = 0;
            v182[1] = v6;
            v182[2] = v177 + 7;
            sub_22EEDC7AC(a1, (uint64_t)v182, v180);
          }
          v177 += 0x100000000;
          ++v178;
        }
        while (v179 != v177);
      }
      v183 = *(uint64_t **)(a1 + 16);
      if (!v183)
      {
        v183 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v183;
      }
      if (sub_22EED93A4((_QWORD *)a1, (_BYTE *)v6))
      {
        v184 = *(_QWORD *)(a1 + 680);
        if (v184)
          *(_QWORD *)(v184 + 8) = v183;
      }
      sub_22EEDCA94(a1, v6);
      v186 = (unint64_t *)v183[1];
      v187 = v183[2];
      if (v185)
      {
        v188 = v185;
        if ((unint64_t)v186 >= v187)
        {
          sub_22EED453C(v183, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
          v186 = (unint64_t *)v183[1];
        }
        v189 = v188 | 2;
        *v186 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        if ((unint64_t)v186 >= v187)
        {
          sub_22EED453C(v183, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
          v186 = (unint64_t *)v183[1];
        }
        *v186 = v6 & 0xFFFFFFFFFFFFFFFCLL | 2;
        v189 = 1;
      }
      v186[1] = v189;
      v183[1] = (uint64_t)(v186 + 2);
      return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
    default:
      switch((char)v11)
      {
        case 1:
          if (!*(_DWORD *)(v6 + 80))
            return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
          v275 = *(_QWORD *)(a1 + 16);
          if (v275)
          {
            *(_QWORD *)(a1 + 24) = v275;
            if (*(_BYTE *)(a1 + 648))
              return 0;
          }
          v276 = sub_22EED46B8(a1);
          v277 = v276;
          *(_QWORD *)(a1 + 16) = v276;
          *(_QWORD *)(v276 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          v279 = *(_QWORD *)(a1 + 128);
          v278 = *(_QWORD *)(a1 + 136);
          v281 = *(uint64_t **)(a1 + 176);
          v280 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v281 >= v280)
          {
            v408 = *(_QWORD **)(a1 + 168);
            v409 = 0xAAAAAAAAAAAAAAABLL * (v281 - v408) + 1;
            if (v409 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_983;
            v410 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v280 - (_QWORD)v408) >> 3);
            if (2 * v410 > v409)
              v409 = 2 * v410;
            if (v410 >= 0x555555555555555)
              v411 = 0xAAAAAAAAAAAAAAALL;
            else
              v411 = v409;
            if (v411)
            {
              if (v411 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_984;
              v412 = (char *)operator new(24 * v411);
            }
            else
            {
              v412 = 0;
            }
            v492 = (uint64_t *)&v412[8 * (v281 - v408)];
            *v492 = v277;
            v492[1] = v279;
            v492[2] = v278;
            v282 = v492 + 3;
            if (v281 != v408)
            {
              do
              {
                v493 = *(_OWORD *)(v281 - 3);
                *(v492 - 1) = *(v281 - 1);
                *(_OWORD *)(v492 - 3) = v493;
                v492 -= 3;
                v281 -= 3;
              }
              while (v281 != v408);
              v281 = *(uint64_t **)(a1 + 168);
            }
            *(_QWORD *)(a1 + 168) = v492;
            *(_QWORD *)(a1 + 176) = v282;
            *(_QWORD *)(a1 + 184) = &v412[24 * v411];
            if (v281)
              operator delete(v281);
          }
          else
          {
            *v281 = v276;
            v281[1] = v279;
            v282 = v281 + 3;
            v281[2] = v278;
          }
          *(_QWORD *)(a1 + 176) = v282;
          v494 = *(_QWORD *)(a1 + 24);
          v496 = *(_QWORD *)(a1 + 128);
          v495 = *(_QWORD *)(a1 + 136);
          v497 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v282 < v497)
          {
            *v282 = v494;
            v282[1] = v496;
            v498 = v282 + 3;
            v282[2] = v495;
            goto LABEL_887;
          }
          v499 = *(_QWORD **)(a1 + 168);
          v500 = 0xAAAAAAAAAAAAAAABLL * (v282 - v499) + 1;
          if (v500 <= 0xAAAAAAAAAAAAAAALL)
          {
            v501 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v497 - (_QWORD)v499) >> 3);
            if (2 * v501 > v500)
              v500 = 2 * v501;
            if (v501 >= 0x555555555555555)
              v502 = 0xAAAAAAAAAAAAAAALL;
            else
              v502 = v500;
            if (!v502)
            {
              v503 = 0;
              goto LABEL_881;
            }
            if (v502 <= 0xAAAAAAAAAAAAAAALL)
            {
              v503 = (char *)operator new(24 * v502);
LABEL_881:
              v504 = &v503[8 * (v282 - v499)];
              v505 = &v503[24 * v502];
              *(_QWORD *)v504 = v494;
              *((_QWORD *)v504 + 1) = v496;
              *((_QWORD *)v504 + 2) = v495;
              v498 = v504 + 24;
              if (v282 == v499)
              {
                *(_QWORD *)(a1 + 168) = v504;
                *(_QWORD *)(a1 + 176) = v498;
                *(_QWORD *)(a1 + 184) = v505;
              }
              else
              {
                do
                {
                  v506 = *(_OWORD *)(v282 - 3);
                  *((_QWORD *)v504 - 1) = *(v282 - 1);
                  *(_OWORD *)(v504 - 24) = v506;
                  v504 -= 24;
                  v282 -= 3;
                }
                while (v282 != v499);
                v282 = *(_QWORD **)(a1 + 168);
                *(_QWORD *)(a1 + 168) = v504;
                *(_QWORD *)(a1 + 176) = v498;
                *(_QWORD *)(a1 + 184) = v505;
                if (!v282)
                  goto LABEL_887;
              }
              operator delete(v282);
LABEL_887:
              *(_QWORD *)(a1 + 176) = v498;
              return (uint64_t *)sub_22EEDA4F0(a1, (unsigned __int8 *)v6);
            }
LABEL_984:
            sub_22E3B3F8C();
          }
          goto LABEL_983;
        case 3:
          if (*(_BYTE *)(a1 + 648))
            return 0;
          v202 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 16) = v202;
          *(_QWORD *)(v202 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          if (!*(_QWORD *)(a1 + 56))
            goto LABEL_628;
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD **)(a1 + 64), *(_QWORD *)(a1 + 72), v6);
          v203 = *(uint64_t **)(a1 + 56);
          goto LABEL_565;
        case 4:
          return sub_22EED9114(a1, v6);
        case 5:
          v223 = *(_QWORD **)(a1 + 128);
          v222 = *(_QWORD *)(a1 + 136);
          v308 = *(unsigned __int8 ***)(v6 + 24);
          if (v308)
            sub_22EED9630((uint64_t *)a1, v308);
          v309 = *(unsigned __int8 ***)(v6 + 32);
          if (v309)
            sub_22EED9630((uint64_t *)a1, v309);
          v608 = v8;
          v310 = *(unsigned __int8 ***)(v6 + 40);
          if (v310)
            sub_22EED9630((uint64_t *)a1, v310);
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v223, v222, v6);
          v311 = *(_QWORD *)(a1 + 128);
          v312 = *(_QWORD *)(a1 + 136);
          v313 = *(uint64_t **)(a1 + 16);
          if (v313)
          {
            if (*(_BYTE *)(a1 + 648))
              goto LABEL_584;
          }
          else
          {
            v313 = *(uint64_t **)(a1 + 24);
          }
          v630 = *(_OWORD *)v608;
          *(_QWORD *)&v631[0] = *(_QWORD *)(v608 + 16);
          *(_QWORD *)(a1 + 56) = v313;
          *(_QWORD *)(a1 + 64) = v311;
          *(_QWORD *)(a1 + 72) = v312;
          v379 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          v380 = v379;
          *(_QWORD *)(v379 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          v381 = *(_QWORD *)(v6 + 48);
          if (v381 && (*(_QWORD *)(a1 + 16) = v379, sub_22EED47D4(a1, v381, 1, 0), *(_BYTE *)(a1 + 648)))
          {
            v384 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 24) = v380;
            v382 = *(_QWORD *)(v6 + 48);
            if (v382)
            {
              v383 = sub_22EEDABEC(a1, v382);
              v616 = *(_QWORD *)(a1 + 24);
            }
            else
            {
              v383 = 1;
              v616 = v380;
            }
            v604 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)v626 = *(_OWORD *)v7;
            *(_QWORD *)&v627 = v7[2];
            *(_QWORD *)(a1 + 16) = 0;
            v438 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 56), 1, 0);
            *(_QWORD *)(a1 + 24) = v438;
            if (*(_BYTE *)(a1 + 648))
              goto LABEL_781;
            v599 = v383;
            *(_QWORD *)(a1 + 32) = v438;
            *(_QWORD *)(a1 + 40) = v311;
            *(_QWORD *)(a1 + 48) = v312;
            *(_QWORD *)(v438 + 40) = v6;
            *(_QWORD *)(a1 + 16) = 0;
            v439 = *(unsigned __int8 ***)(v6 + 64);
            v440 = *(_QWORD **)(a1 + 128);
            v441 = *(_QWORD *)(a1 + 136);
            sub_22EED9630((uint64_t *)a1, v439);
            sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v440, v441, (uint64_t)v439);
            v442 = *(_BYTE **)(v6 + 72);
            if (*v442 != 8)
            {
              v443 = *(_QWORD **)(a1 + 128);
              v444 = *(_QWORD *)(a1 + 136);
              sub_22EED9630((uint64_t *)a1, *(unsigned __int8 ***)(v6 + 72));
              sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v443, v444, (uint64_t)v442);
              v442 = *(_BYTE **)(v6 + 72);
            }
            sub_22EED47D4(a1, v442, 1, 0);
            if (*(_BYTE *)(a1 + 648)
              || (v445 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 64), 1, 0), *(_BYTE *)(a1 + 648)))
            {
LABEL_781:
              v384 = 0;
              *(_OWORD *)v7 = *(_OWORD *)v626;
              v7[2] = v627;
              *(_QWORD *)(a1 + 16) = v604;
              *(_QWORD *)(a1 + 24) = v616;
            }
            else
            {
              if (v599)
                v543 = (uint64_t *)v445;
              else
                v543 = 0;
              sub_22EED1CAC(v380, v543, (uint64_t *)(2 * (v543 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
              *(_OWORD *)v7 = *(_OWORD *)v626;
              v7[2] = v627;
              *(_QWORD *)(a1 + 16) = v604;
              *(_QWORD *)(a1 + 24) = v616;
              if (v599 == 1)
                v544 = 0;
              else
                v544 = v313;
              sub_22EED1CAC(v380, v544, (uint64_t *)(2 * (v544 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
              *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
              sub_22EED47D4(a1, *(_QWORD *)(v6 + 32), 1, 0);
              sub_22EED47D4(a1, *(_QWORD *)(v6 + 40), 1, 0);
              v545 = sub_22EED47D4(a1, *(_QWORD *)(v6 + 24), 1, 0);
              v546 = *(_QWORD *)(v6 + 16);
              if (v546)
                v545 = sub_22EED47D4(a1, v546, 1, 0);
              v384 = (uint64_t *)v545;
            }
          }
          *(_OWORD *)v608 = v630;
          *(_QWORD *)(v608 + 16) = *(_QWORD *)&v631[0];
          goto LABEL_1069;
        case 6:
          v307 = *(_QWORD *)(a1 + 16);
          if (v307)
          {
            if (*(_BYTE *)(a1 + 648))
              return 0;
          }
          else
          {
            v307 = *(_QWORD *)(a1 + 24);
          }
          v370 = *(uint64_t **)(a1 + 120);
          v342 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          *(_QWORD *)(v342 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          v371 = *(unsigned int *)(v6 + 12);
          if (!(_DWORD)v371)
            goto LABEL_677;
          v372 = 0;
          v373 = (unint64_t *)(v6 + 24);
          do
          {
            *(_QWORD *)(a1 + 24) = v307;
            v374 = *v373;
            v375 = *(_QWORD *)(*v373 + 16);
            *(_QWORD *)(a1 + 16) = 0;
            v376 = sub_22EED9114(a1, v374);
            if (!v376)
              return 0;
            v372 |= v375 == 0;
            sub_22EED1CAC(v342, v376, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
            ++v373;
            --v371;
          }
          while (v371);
          if ((v372 & 1) == 0)
          {
LABEL_677:
            v377 = *(_QWORD *)(a1 + 8);
            if (v370)
            {
              v378 = 0;
            }
            else
            {
              v370 = *(uint64_t **)(v377 + 8);
              v378 = (uint64_t *)(2 * (v370 == 0));
            }
            sub_22EED1CAC(v342, v370, v378, (uint64_t *)(v377 + 32));
          }
          *(_QWORD *)(a1 + 24) = v307;
          v446 = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v342;
          v447 = *(_QWORD **)(a1 + 8);
          v449 = (uint64_t *)v447[9];
          v448 = v447[10];
          if ((unint64_t)v449 < v448)
          {
LABEL_823:
            *v449 = v342;
            v474 = v449 + 1;
LABEL_918:
            v447[9] = v474;
            *(_QWORD *)(a1 + 16) = 0;
            result = (uint64_t *)sub_22EED47D4(a1, *(_QWORD *)(v6 + 16), 1, 0);
            *(_QWORD *)(a1 + 120) = v446;
            return result;
          }
          v450 = (_QWORD *)v447[8];
          v451 = v449 - v450;
          v452 = v451 + 1;
          if ((unint64_t)(v451 + 1) >> 61)
            goto LABEL_983;
          v453 = v448 - (_QWORD)v450;
          if (v453 >> 2 > v452)
            v452 = v453 >> 2;
          if ((unint64_t)v453 >= 0x7FFFFFFFFFFFFFF8)
            v454 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v454 = v452;
          if (v454)
          {
            if (v454 >> 61)
              goto LABEL_984;
            v455 = (char *)operator new(8 * v454);
          }
          else
          {
            v455 = 0;
          }
          v481 = (uint64_t *)&v455[8 * v451];
          v482 = &v455[8 * v454];
          *v481 = v342;
          v474 = v481 + 1;
          if (v449 == v450)
            goto LABEL_916;
          do
          {
            v483 = *--v449;
            *--v481 = v483;
          }
          while (v449 != v450);
          goto LABEL_915;
        case 8:
          return (uint64_t *)sub_22EED904C(a1, (unsigned __int8 **)v6, a4 & 1);
        case 9:
          if (*(_BYTE *)(a1 + 648))
            return 0;
          v202 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 16) = v202;
          *(_QWORD *)(v202 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          if (!*(_QWORD *)(a1 + 32))
            goto LABEL_628;
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 48), v6);
          v203 = *(uint64_t **)(a1 + 32);
          goto LABEL_565;
        case 10:
          goto LABEL_62;
        case 12:
          v296 = v6 + 8;
          v295 = *(_QWORD *)(v6 + 8);
          if (!v295)
            v296 = 0;
          v297 = (unsigned int *)(v295 & 0xFFFFFFFFFFFFFFFELL);
          if ((v295 & 1) != 0)
            v296 = (v295 & 0xFFFFFFFFFFFFFFFELL) + 8;
          if ((*(_DWORD *)(*(_QWORD *)v296 + 28) & 0x7F) == 0xF)
            return *(uint64_t **)(a1 + 16);
          if ((v295 & 1) == 0)
            return sub_22EEDD654(a1, v6);
          v394 = *v297;
          if (!(_DWORD)v394)
            return 0;
          v395 = 2 * v394;
          do
          {
            v396 = *(_QWORD *)&v297[v395];
            v397 = sub_22E3CD3D4(*(_QWORD *)a1 + 2032, 24, 3);
            v398 = *(_DWORD *)(v396 + 24);
            v399 = sub_22EEDDB2C(v396);
            *(_BYTE *)v397 = 12;
            if (byte_255E04EB3)
            {
              v400 = sub_22F0D3748(12);
              ++*((_DWORD *)v400 + 2);
            }
            *(_QWORD *)(v397 + 8) = v396;
            *(_DWORD *)(v397 + 16) = v398;
            *(_DWORD *)(v397 + 20) = v399;
            v401 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v630 = v397;
            sub_22EEDDBEC(v401 + 88, (uint64_t *)&v630)[1] = v6;
            v384 = sub_22EEDD654(a1, v397);
            v395 -= 2;
          }
          while (v395 * 4);
          return v384;
        case 13:
          sub_22EEDDCC8(a1, v6);
          v294 = *(uint64_t **)(a1 + 16);
          if (v294)
          {
            if (*(_BYTE *)(a1 + 648))
              return 0;
          }
          else
          {
            v294 = *(uint64_t **)(a1 + 24);
          }
          v358 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          v359 = (uint64_t *)v358;
          *(_QWORD *)(v358 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          v360 = *(_QWORD *)(v6 + 16);
          v384 = (uint64_t *)v358;
          if (v360)
          {
            *(_QWORD *)(a1 + 16) = v358;
            v384 = (uint64_t *)sub_22EED47D4(a1, v360, 1, 0);
            if (*(_QWORD *)(a1 + 16))
            {
              if (*(_BYTE *)(a1 + 648))
                return 0;
            }
          }
          *(_QWORD *)(a1 + 24) = v384;
          v603 = sub_22EEDABEC(a1, *(_QWORD *)(v6 + 16));
          v361 = *(_QWORD *)(a1 + 16);
          v362 = *(_QWORD *)(a1 + 24);
          v630 = *(_OWORD *)v7;
          v363 = v7;
          *(_QWORD *)&v631[0] = v7[2];
          *(_QWORD *)&v627 = *(_QWORD *)(v8 + 16);
          v364 = v8;
          *(_OWORD *)v626 = *(_OWORD *)v8;
          v365 = *(_QWORD **)(a1 + 128);
          v366 = *(_QWORD *)(a1 + 136);
          *(_QWORD *)(a1 + 32) = v384;
          *(_QWORD *)(a1 + 40) = v365;
          *(_QWORD *)(a1 + 48) = v366;
          *(_QWORD *)(a1 + 56) = v294;
          *(_QWORD *)(a1 + 64) = v365;
          *(_QWORD *)(a1 + 72) = v366;
          *(_QWORD *)(a1 + 16) = 0;
          v367 = *(unsigned __int8 ***)(v6 + 8);
          v609 = v362;
          v614 = v361;
          if (*(_BYTE *)v367 != 8)
          {
            sub_22EED9630((uint64_t *)a1, v367);
            sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v365, v366, (uint64_t)v367);
            v367 = *(unsigned __int8 ***)(v6 + 8);
          }
          v368 = sub_22EED47D4(a1, v367, 1, 0);
          if (!v368)
            goto LABEL_797;
          if (*(_QWORD *)(a1 + 16))
          {
            v384 = (uint64_t *)v368;
            if (*(_BYTE *)(a1 + 648))
            {
              v384 = 0;
              *(_OWORD *)v364 = *(_OWORD *)v626;
              *(_QWORD *)(v364 + 16) = v627;
              *(_OWORD *)v363 = v630;
              v363[2] = *(_QWORD *)&v631[0];
              *(_QWORD *)(a1 + 16) = v614;
              *(_QWORD *)(a1 + 24) = v609;
              return v384;
            }
          }
          else
          {
            v384 = (uint64_t *)v368;
          }
LABEL_797:
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = v384;
          v458 = (uint64_t *)sub_22EED46B8(a1);
          v458[5] = v6;
          if (v603)
          {
            sub_22EED1CAC((uint64_t)v359, v458, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
          }
          else
          {
            v459 = (_QWORD *)v359[11];
            if ((unint64_t)v459 >= v359[12])
            {
              sub_22EED45BC(v359 + 10, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
              v459 = (_QWORD *)v359[11];
            }
            *v459 = 0;
            v459[1] = 2;
            v359[11] += 16;
          }
          *(_OWORD *)v364 = *(_OWORD *)v626;
          *(_QWORD *)(v364 + 16) = v627;
          *(_OWORD *)v363 = v630;
          v363[2] = *(_QWORD *)&v631[0];
          if (v603 == 1)
            v460 = 0;
          else
            v460 = v294;
          v461 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
          *(_QWORD *)(a1 + 16) = v614;
          *(_QWORD *)(a1 + 24) = v609;
          sub_22EED1CAC((uint64_t)v359, v460, (uint64_t *)(2 * (v460 == 0)), v461);
          goto LABEL_806;
        case 14:
          v607 = v8;
          v299 = *(_QWORD **)(a1 + 128);
          v298 = *(_QWORD *)(a1 + 136);
          v300 = *(unsigned __int8 ***)(v6 + 8);
          v301 = v298;
          v302 = v299;
          if (v300)
          {
            sub_22EED9630((uint64_t *)a1, v300);
            v302 = *(_QWORD **)(a1 + 128);
            v301 = *(_QWORD *)(a1 + 136);
          }
          v303 = *(_QWORD *)(v6 + 16);
          v304 = v301;
          v305 = v302;
          if (v303)
          {
            v564 = *(_QWORD *)(v303 + 8);
            v304 = v301;
            v305 = v302;
            if (v564)
            {
              sub_22EED9EF4((uint64_t *)a1, v564, 0);
              v305 = *(_QWORD **)(a1 + 128);
              v304 = *(_QWORD *)(a1 + 136);
            }
          }
          v602 = v299;
          sub_22EED9700(a1, v305, v304, v299, v298, v6);
          sub_22EEDDCC8(a1, v6);
          v306 = *(_QWORD *)(a1 + 16);
          if (v306)
          {
            if (*(_BYTE *)(a1 + 648))
            {
              v384 = 0;
              goto LABEL_724;
            }
            v615 = v9;
            v596 = *(_QWORD *)(a1 + 24);
            v598 = v298;
            v369 = *(_QWORD *)(a1 + 16);
          }
          else
          {
            v598 = v298;
            v615 = v9;
            v369 = *(_QWORD *)(a1 + 24);
            v596 = v369;
          }
          v630 = *(_OWORD *)v607;
          *(_QWORD *)&v631[0] = *(_QWORD *)(v607 + 16);
          *(_QWORD *)(a1 + 56) = v369;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)v626 = *(_OWORD *)v7;
          *(_QWORD *)&v627 = v7[2];
          v402 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          v403 = v402;
          *(_QWORD *)(a1 + 16) = v402;
          *(_QWORD *)(a1 + 24) = v402;
          *(_QWORD *)(v402 + 40) = v6;
          v404 = *(_QWORD *)(v6 + 32);
          if (v404)
          {
            v402 = sub_22EED47D4(a1, v404, 1, 0);
            *(_QWORD *)(a1 + 24) = v402;
            if (!*(_QWORD *)(a1 + 16))
              goto LABEL_718;
          }
          if (*(_BYTE *)(a1 + 648))
            goto LABEL_722;
          *(_QWORD *)(a1 + 16) = 0;
LABEL_718:
          *(_QWORD *)(a1 + 32) = v402;
          *(_QWORD *)(a1 + 40) = v305;
          *(_QWORD *)(a1 + 48) = v304;
          *(_QWORD *)(v402 + 40) = v6;
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v302, v301, v6);
          v405 = *(unsigned __int8 ***)(v6 + 40);
          if (*(_BYTE *)v405 != 8)
          {
            v406 = *(_QWORD *)(a1 + 136);
            v594 = *(_QWORD **)(a1 + 128);
            sub_22EED9630((uint64_t *)a1, v405);
            sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v594, v406, (uint64_t)v405);
            v405 = *(unsigned __int8 ***)(v6 + 40);
          }
          v407 = sub_22EED47D4(a1, v405, 1, 0);
          if (v407)
          {
            if (*(_BYTE *)(a1 + 648))
            {
LABEL_722:
              v384 = 0;
              *(_OWORD *)v7 = *(_OWORD *)v626;
              v7[2] = v627;
              *(_QWORD *)(a1 + 16) = v306;
              *(_QWORD *)(a1 + 24) = v596;
              goto LABEL_723;
            }
            v457 = (uint64_t *)v407;
            v590 = v369;
            v592 = v301;
            v595 = v403;
            v456 = v302;
          }
          else
          {
            v590 = v369;
            v592 = v301;
            v595 = v403;
            v456 = v302;
            v457 = (uint64_t *)*v7;
          }
          *(_OWORD *)v7 = *(_OWORD *)v626;
          v7[2] = v627;
          *(_QWORD *)(a1 + 16) = v306;
          *(_QWORD *)(a1 + 24) = v596;
          v484 = *(uint64_t **)(v6 + 24);
          *(_OWORD *)v626 = *(_OWORD *)v615;
          if (!v484)
            goto LABEL_858;
          v485 = v484;
          do
          {
            v486 = (uint64_t)v485;
            LODWORD(v487) = *(unsigned __int8 *)v485;
            if (v487 > 0xD5)
            {
              if ((_DWORD)v487 == 233)
              {
                LOBYTE(v487) = *(_DWORD *)v485;
                if ((*(_DWORD *)v485 & 0x7C0000) != 0x300000)
                  break;
                v488 = (unsigned __int8 *)(v485 + 2);
              }
              else
              {
                if ((_DWORD)v487 != 214)
                  break;
                v488 = (unsigned __int8 *)(v485 + 3);
              }
            }
            else if ((_DWORD)v487 == 155)
            {
              if ((*(_DWORD *)v485[2] & 0x18000) != 0)
                goto LABEL_858;
              v488 = (unsigned __int8 *)(v485 + 3);
              if (!*(_BYTE *)(v486 + 48))
                v488 = (unsigned __int8 *)(v486 + 32);
              LOBYTE(v487) = -101;
            }
            else
            {
              if ((_DWORD)v487 != 176)
                break;
              v487 = *((unsigned int *)v485 + 5);
              if ((_DWORD)v487 == -1)
                goto LABEL_858;
              v488 = (unsigned __int8 *)&v485[v487 + 5];
              LOBYTE(v487) = -80;
            }
            v485 = *(uint64_t **)v488;
          }
          while (v485 != (uint64_t *)v486);
          if ((v487 & 0xFE) == 0x70 && ((*(_DWORD *)v486 >> 18) & 0x3Fu) - 19 <= 1)
          {
            v384 = (uint64_t *)sub_22EEDA7CC(a1, v486, v6, (uint64_t)v457, v590);
            goto LABEL_904;
          }
LABEL_858:
          v489 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          v490 = v489;
          *(_QWORD *)(v489 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          if (v484)
          {
            *(_QWORD *)(a1 + 16) = v489;
            v384 = (uint64_t *)sub_22EED47D4(a1, v484, 1, 0);
            v491 = *(_QWORD *)(v6 + 16);
            if (v491)
            {
              v584 = *(_QWORD *)(v491 + 8);
              if (v584)
              {
                v585 = sub_22EFBC5B4(*(_QWORD *)(v491 + 8));
                if (v585)
                {
                  v586 = (unsigned __int8 *)v585;
                  if (!*(_QWORD *)(a1 + 16))
                  {
                    *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
                    v491 = *(_QWORD *)(v6 + 16);
                  }
                  v587 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
                  *v587 = 0;
                  v587[1] = v491;
                  v587[2] = 0;
                  sub_22EEDC7AC(a1, (uint64_t)v587, v586);
                  sub_22EED9328((_QWORD *)a1, *(uint64_t **)(a1 + 16), v491);
                  v384 = (uint64_t *)sub_22EED47D4(a1, v586, 1, 0);
                  v588 = *(_QWORD *)(a1 + 128);
                  if ((v588 || *(_DWORD *)(a1 + 136)) && **(_QWORD **)(v588 + 8) == v584)
                    sub_22EED4764(a1, v384, v584, (uint64_t)v484);
                }
              }
            }
            if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 648))
            {
              v384 = 0;
              goto LABEL_723;
            }
            v509 = sub_22EEDABEC(a1, (uint64_t)v484);
            if (!v509)
              v457 = 0;
            if (v509 == 1)
              v484 = 0;
            else
              v484 = (uint64_t *)v590;
          }
          else
          {
            v384 = (uint64_t *)v489;
          }
          sub_22EED1CAC(v490, v457, (uint64_t *)(2 * (v457 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
          sub_22EED1CAC(v490, v484, (uint64_t *)(2 * (v484 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
LABEL_904:
          *(void **)v615 = v626[0];
          *(_DWORD *)(v615 + 8) = v626[1];
          sub_22EED1CAC(v595, v384, (uint64_t *)(2 * (v384 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
          *(_QWORD *)(a1 + 24) = v384;
          v510 = *(_QWORD *)(v6 + 8);
          if (v510)
          {
            *(_QWORD *)(a1 + 128) = v456;
            *(_DWORD *)(a1 + 136) = v592;
            *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
            v384 = (uint64_t *)sub_22EED47D4(a1, v510, 1, 0);
          }
          else
          {
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = v384;
          }
LABEL_723:
          *(_OWORD *)v607 = v630;
          *(_QWORD *)(v607 + 16) = *(_QWORD *)&v631[0];
          LODWORD(v298) = v598;
LABEL_724:
          *(_QWORD *)(a1 + 128) = v602;
          *(_DWORD *)(a1 + 136) = v298;
          return v384;
        case 15:
          v286 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 16) = v286;
          *(_QWORD *)(v286 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          v287 = *(_QWORD *)(a1 + 144);
          v288 = *(unsigned int *)(a1 + 160);
          v289 = sub_22EED4700(v287, *(_DWORD *)(a1 + 160), *(_QWORD *)(v6 + 8));
          if ((uint64_t *)(v287 + 32 * v288) != v289)
          {
            v290 = (uint64_t *)v289[1];
            sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), (_QWORD *)v289[2], v289[3], v6);
            v291 = (uint64_t *)(2 * (v290 == 0));
            v292 = *(_QWORD *)(a1 + 16);
            v293 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
            v203 = v290;
LABEL_566:
            sub_22EED1CAC(v292, v203, v291, v293);
            return *(uint64_t **)(a1 + 16);
          }
          v354 = *(_QWORD *)(a1 + 128);
          v353 = *(_QWORD *)(a1 + 136);
          v356 = *(uint64_t **)(a1 + 176);
          v355 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v356 >= v355)
          {
            v413 = *(_QWORD **)(a1 + 168);
            v414 = 0xAAAAAAAAAAAAAAABLL * (v356 - v413) + 1;
            if (v414 > 0xAAAAAAAAAAAAAAALL)
LABEL_983:
              abort();
            v415 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v355 - (_QWORD)v413) >> 3);
            if (2 * v415 > v414)
              v414 = 2 * v415;
            if (v415 >= 0x555555555555555)
              v416 = 0xAAAAAAAAAAAAAAALL;
            else
              v416 = v414;
            if (v416)
            {
              if (v416 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_984;
              v417 = (char *)operator new(24 * v416);
            }
            else
            {
              v417 = 0;
            }
            v507 = (uint64_t *)&v417[8 * (v356 - v413)];
            *v507 = v286;
            v507[1] = v354;
            v507[2] = v353;
            v357 = v507 + 3;
            if (v356 != v413)
            {
              do
              {
                v508 = *(_OWORD *)(v356 - 3);
                *(v507 - 1) = *(v356 - 1);
                *(_OWORD *)(v507 - 3) = v508;
                v507 -= 3;
                v356 -= 3;
              }
              while (v356 != v413);
              v356 = *(uint64_t **)(a1 + 168);
            }
            *(_QWORD *)(a1 + 168) = v507;
            *(_QWORD *)(a1 + 176) = v357;
            *(_QWORD *)(a1 + 184) = &v417[24 * v416];
            if (v356)
              operator delete(v356);
          }
          else
          {
            *v356 = v286;
            v356[1] = v354;
            v357 = v356 + 3;
            v356[2] = v353;
          }
          *(_QWORD *)(a1 + 176) = v357;
          return *(uint64_t **)(a1 + 16);
        case 16:
          v223 = *(_QWORD **)(a1 + 128);
          v222 = *(_QWORD *)(a1 + 136);
          v283 = *(unsigned __int16 *)v6;
          if ((v283 & 0x2000) != 0)
          {
            v284 = *(unsigned __int8 ***)(v6 + 16);
            if (v284)
            {
              sub_22EED9630((uint64_t *)a1, v284);
              v283 = *(unsigned __int16 *)v6;
            }
          }
          if ((v283 & 0x1000) != 0)
          {
            v562 = *(_QWORD *)(v6 + 8 * ((v283 >> 13) & 1) + 16);
            if (v562)
            {
              v563 = *(_QWORD *)(v562 + 8);
              if (v563)
                sub_22EED9EF4((uint64_t *)a1, v563, 0);
            }
          }
          sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v223, v222, v6);
          v285 = *(uint64_t **)(a1 + 16);
          if (v285)
          {
            *(_QWORD *)(a1 + 24) = v285;
            if (*(_BYTE *)(a1 + 648))
              goto LABEL_584;
          }
          else
          {
            v285 = *(uint64_t **)(a1 + 24);
          }
          v351 = *(unsigned __int16 *)v6;
          if ((v351 & 0x800) != 0)
          {
            v390 = *(unsigned __int8 ***)(v6 + 8 * (((v351 >> 13) & 1) + ((v351 >> 12) & 1) + 2) + 16);
            v352 = (uint64_t)v285;
            if (v390)
            {
              *(_QWORD *)(a1 + 16) = 0;
              if (*(_BYTE *)v390 != 8)
              {
                v391 = *(_QWORD **)(a1 + 128);
                v392 = *(_QWORD *)(a1 + 136);
                sub_22EED9630((uint64_t *)a1, v390);
                sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v391, v392, (uint64_t)v390);
              }
              v393 = sub_22EED47D4(a1, v390, 1, 0);
              v352 = (uint64_t)v285;
              if (v393)
              {
                if (*(_QWORD *)(a1 + 16))
                {
                  v352 = v393;
                  if (*(_BYTE *)(a1 + 648))
                  {
LABEL_933:
                    v384 = 0;
                    *(_QWORD *)(a1 + 24) = v285;
                    goto LABEL_1069;
                  }
                }
                else
                {
                  v352 = v393;
                }
              }
              *(_QWORD *)(a1 + 24) = v285;
              v351 = *(unsigned __int16 *)v6;
            }
          }
          else
          {
            v352 = (uint64_t)v285;
          }
          v515 = (uint64_t *)(v6 + 16);
          v516 = *(unsigned __int8 ***)(v6 + 16 + 8 * (((v351 >> 12) & 1) + ((v351 >> 13) & 1) + 1));
          *(_QWORD *)(a1 + 16) = 0;
          if (*(_BYTE *)v516 != 8)
          {
            v517 = *(_QWORD **)(a1 + 128);
            v518 = *(_QWORD *)(a1 + 136);
            sub_22EED9630((uint64_t *)a1, v516);
            sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v517, v518, (uint64_t)v516);
          }
          v519 = sub_22EED47D4(a1, v516, 1, 0);
          if (v519)
          {
            v520 = v519;
            if (*(_QWORD *)(a1 + 16) && *(_BYTE *)(a1 + 648))
              goto LABEL_933;
          }
          else
          {
            v520 = sub_22EED0954(*(_QWORD *)(a1 + 8));
            sub_22EED1CAC(v520, v285, (uint64_t *)(2 * (v285 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
          }
          *(_QWORD *)(a1 + 24) = v285;
          v521 = *(unsigned __int16 *)v6;
          if ((v521 & 0x600) == 0x200)
            goto LABEL_1035;
          v522 = (v521 >> 13) & 1;
          if ((v521 & 0x1000) != 0)
          {
            v568 = v515[v522];
            if (v568)
            {
              if (*(_QWORD *)(v568 + 8))
                goto LABEL_1035;
            }
          }
          v523 = (unsigned __int8 *)v515[v522 + ((v521 >> 12) & 1)];
          do
          {
            v524 = (uint64_t)v523;
            LODWORD(v525) = *v523;
            if (v525 > 0xD5)
            {
              if ((_DWORD)v525 == 233)
              {
                LOBYTE(v525) = *(_DWORD *)v523;
                if ((*(_DWORD *)v523 & 0x7C0000) != 0x300000)
                  break;
                v526 = v523 + 16;
              }
              else
              {
                if ((_DWORD)v525 != 214)
                  break;
                v526 = v523 + 24;
              }
            }
            else if ((_DWORD)v525 == 155)
            {
              if ((**((_DWORD **)v523 + 2) & 0x18000) != 0)
                goto LABEL_1035;
              v526 = v523 + 24;
              if (!*(_BYTE *)(v524 + 48))
                v526 = (unsigned __int8 *)(v524 + 32);
              LOBYTE(v525) = -101;
            }
            else
            {
              if ((_DWORD)v525 != 176)
                break;
              v525 = *((unsigned int *)v523 + 5);
              if ((_DWORD)v525 == -1)
                goto LABEL_1035;
              v526 = &v523[8 * v525 + 40];
              LOBYTE(v525) = -80;
            }
            v523 = *(unsigned __int8 **)v526;
          }
          while (v523 != (unsigned __int8 *)v524);
          if ((v525 & 0xFE) != 0x70 || ((*(_DWORD *)v524 >> 18) & 0x3Fu) - 19 > 1)
          {
LABEL_1035:
            v569 = sub_22EED0954(*(_QWORD *)(a1 + 8));
            *(_QWORD *)(a1 + 16) = v569;
            *(_QWORD *)(v569 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
            v570 = *(unsigned __int16 *)v6;
            if ((v570 & 0x600) == 0x200)
            {
              v571 = -1;
            }
            else
            {
              v571 = sub_22EEDABEC(a1, v515[((v570 >> 13) & 1) + ((v570 >> 12) & 1)]);
              v569 = *(_QWORD *)(a1 + 16);
            }
            if (v571 == 1)
              v572 = v352 & 0xFFFFFFFFFFFFFFF9;
            else
              v572 = 0;
            if (v571 == 1)
              v573 = 0;
            else
              v573 = (uint64_t *)v352;
            v574 = v571 == 1 || v352 == 0;
            v575 = 2;
            if (v574)
              v576 = 2;
            else
              v576 = 0;
            v577 = v571 == 0;
            v578 = v520 & 0xFFFFFFFFFFFFFFF9;
            if (v577)
            {
              v579 = 0;
            }
            else
            {
              v578 = 0;
              v579 = (uint64_t *)v520;
            }
            if (!v577 && v520 != 0)
              v575 = 0;
            sub_22EED1CAC(v569, v579, (uint64_t *)(v575 | v578), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
            sub_22EED1CAC(*(_QWORD *)(a1 + 16), v573, (uint64_t *)(v576 | v572), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
            v384 = (uint64_t *)sub_22EED47D4(a1, v515[((*(unsigned __int16 *)v6 >> 13) & 1) + ((*(unsigned __int16 *)v6 >> 12) & 1u)], 1, 0);
            v581 = *(unsigned __int16 *)v6;
            if ((v581 & 0x1000) == 0 || (v582 = v515[(v581 >> 13) & 1]) == 0)
            {
LABEL_1064:
              if ((*(_WORD *)v6 & 0x2000) != 0)
              {
                v583 = *v515;
                if (*v515)
                {
                  if (!*(_QWORD *)(a1 + 16))
                    *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
                  v384 = (uint64_t *)sub_22EED47D4(a1, v583, 1, 0);
                }
              }
LABEL_1069:
              *(_QWORD *)(a1 + 128) = v223;
              *(_DWORD *)(a1 + 136) = v222;
              return v384;
            }
            if (!*(_QWORD *)(a1 + 16))
              *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
            v527 = sub_22EED47D4(a1, v582, 1, 0);
          }
          else
          {
            v527 = sub_22EEDA7CC(a1, v524, v6, v520, v352);
          }
          v384 = (uint64_t *)v527;
          goto LABEL_1064;
        case 17:
          v69 = *(_QWORD *)(a1 + 8);
          v70 = *(uint64_t **)(v69 + 16);
          if (!v70)
          {
            v70 = (uint64_t *)sub_22EED0954(v69);
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = v70;
          }
          if (*(_BYTE *)(a1 + 648))
            return 0;
          v71 = sub_22EED0954(*(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 16) = v71;
          *(_QWORD *)(v71 + 32) = v6 & 0xFFFFFFFFFFFFFFF9;
          sub_22EED1CAC(v71, v70, (uint64_t *)(2 * (v70 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
          goto LABEL_179;
        case 19:
          return *(uint64_t **)(a1 + 16);
        default:
          return (uint64_t *)sub_22EED8CF8((_QWORD *)a1, (unsigned __int8 *)v6, a3);
      }
  }
}

uint64_t sub_22EED8CF8(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t *v6;

  if (sub_22EED93A4(a1, a2) || a3 == 1)
  {
    v6 = (uint64_t *)a1[2];
    if (!v6)
    {
      v6 = (uint64_t *)sub_22EED46B8((uint64_t)a1);
      a1[2] = v6;
    }
    sub_22EED9328(a1, v6, (unint64_t)a2);
  }
  return sub_22EEDA4F0((uint64_t)a1, a2);
}

uint64_t sub_22EED8D64(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  if (*(_BYTE *)a2 == 102)
    v4 = a2;
  else
    v4 = 0;
  if (v4)
    v5 = *(_QWORD *)(v4 + 56);
  else
    v5 = 0;
  v6 = *(uint64_t **)(a1 + 16);
  if (!v6)
    v6 = (uint64_t *)sub_22EED46B8(a1);
  sub_22EED9328((_QWORD *)a1, v6, a2);
  if (*(_BYTE *)(a1 + 648))
    return 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (*(_BYTE *)a2 == 103)
    v8 = *(_QWORD *)(a2 + 32);
  else
    v8 = *(_QWORD *)(a2 + 40);
  v9 = (uint64_t)v6;
  if (v8 != v5)
  {
    v10 = sub_22EED47D4(a1, v8, 1, 0);
    if (*(_BYTE *)(a1 + 648))
      return 0;
    v9 = v10;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_QWORD *)(a1 + 24) = v6;
  v11 = 48;
  if (*(_BYTE *)a2 == 103)
    v11 = 40;
  v12 = sub_22EED47D4(a1, *(_QWORD *)(a2 + v11), 1, 0);
  if (*(_BYTE *)(a1 + 648))
    return 0;
  v13 = v12;
  v14 = 32;
  if (*(_BYTE *)a2 == 103)
    v14 = 24;
  v15 = *(unsigned __int8 **)(a2 + v14);
  do
  {
    v16 = (uint64_t)v15;
    LODWORD(v17) = *v15;
    if (v17 > 0xD5)
    {
      if ((_DWORD)v17 == 233)
      {
        LOBYTE(v17) = *(_DWORD *)v15;
        if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
          break;
        v18 = v15 + 16;
      }
      else
      {
        if ((_DWORD)v17 != 214)
          break;
        v18 = v15 + 24;
      }
    }
    else if ((_DWORD)v17 == 155)
    {
      if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
        goto LABEL_41;
      v18 = v15 + 24;
      if (!*(_BYTE *)(v16 + 48))
        v18 = (unsigned __int8 *)(v16 + 32);
      LOBYTE(v17) = -101;
    }
    else
    {
      if ((_DWORD)v17 != 176)
        break;
      v17 = *((unsigned int *)v15 + 5);
      if ((_DWORD)v17 == -1)
        goto LABEL_41;
      v18 = &v15[8 * v17 + 40];
      LOBYTE(v17) = -80;
    }
    v15 = *(unsigned __int8 **)v18;
  }
  while (v15 != (unsigned __int8 *)v16);
  if ((v17 & 0xFE) == 0x70 && ((*(_DWORD *)v16 >> 18) & 0x3Fu) - 19 <= 1)
    return sub_22EEDA7CC(a1, v16, a2, v9, v12);
LABEL_41:
  *(_QWORD *)(a1 + 16) = sub_22EED0954(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)a2 == 103)
    v19 = 24;
  else
    v19 = 32;
  v20 = sub_22EEDABEC(a1, *(_QWORD *)(a2 + v19));
  if (v20 == 1)
    v21 = v13 & 0xFFFFFFFFFFFFFFF9;
  else
    v21 = 0;
  if (v20 == 1)
    v22 = 0;
  else
    v22 = (uint64_t *)v13;
  v23 = v20 == 1 || v13 == 0;
  v24 = 2;
  if (v23)
    v25 = 2;
  else
    v25 = 0;
  v26 = v9 & 0xFFFFFFFFFFFFFFF9;
  if (v20)
  {
    v26 = 0;
    v27 = (uint64_t *)v9;
  }
  else
  {
    v27 = 0;
  }
  if (v20)
    v28 = v9 == 0;
  else
    v28 = 1;
  if (!v28)
    v24 = 0;
  sub_22EED1CAC(*(_QWORD *)(a1 + 16), v27, (uint64_t *)(v24 | v26), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
  sub_22EED1CAC(*(_QWORD *)(a1 + 16), v22, (uint64_t *)(v25 | v21), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) = a2 & 0xFFFFFFFFFFFFFFF9;
  if (*(_BYTE *)a2 == 103)
    v29 = 24;
  else
    v29 = 32;
  v30 = *(_QWORD *)(a2 + v29);
  if (v5)
  {
    if (v30 != v5)
      sub_22EED47D4(a1, v30, 1, 0);
    v30 = *(_QWORD *)(v4 + 24);
  }
  return sub_22EED47D4(a1, v30, 1, 0);
}

uint64_t sub_22EED904C(uint64_t a1, unsigned __int8 **a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t i;
  uint64_t v12;

  v6 = *(_QWORD **)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 136);
  sub_22EED9630((uint64_t *)a1, a2);
  v8 = *(unsigned int *)a2;
  if (v8 >= 0x100 && **(unsigned __int8 **)((char *)a2 + ((v8 >> 5) & 0x7FFFFF8) + 8) != 93)
  {
    sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v6, v7, (uint64_t)a2);
    LODWORD(v8) = *(_DWORD *)a2;
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = a2 + 1;
  for (i = v8 >> 8; i * 8; --i)
  {
    v12 = sub_22EED47D4(a1, v10[i], 1, a3 & 1);
    a3 = 0;
    if (v12)
      v9 = v12;
    if (*(_BYTE *)(a1 + 648))
      return 0;
  }
  return v9;
}

uint64_t *sub_22EED9114(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v10;

  v10 = *(_OWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD **)(a1 + 128);
    v6 = *(_QWORD *)(a1 + 136);
    sub_22EED9EF4((uint64_t *)a1, v4, 0);
    sub_22EED9700(a1, *(_QWORD **)(a1 + 128), *(_QWORD *)(a1 + 136), v5, v6, a2);
  }
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
    sub_22EED47D4(a1, v7, 1, 0);
  v8 = *(uint64_t **)(a1 + 16);
  if (!v8)
    v8 = (uint64_t *)sub_22EED46B8(a1);
  sub_22EED9328((_QWORD *)a1, v8, a2);
  v8[3] = a2;
  if (*(_BYTE *)(a1 + 648))
    v8 = 0;
  else
    *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 128) = v10;
  *(_DWORD *)(a1 + 136) = DWORD2(v10);
  return v8;
}

uint64_t *sub_22EED91E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  __int128 v7;

  v7 = *(_OWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    sub_22EED47D4(a1, v4, 1, 0);
  v5 = *(uint64_t **)(a1 + 16);
  if (!v5)
    v5 = (uint64_t *)sub_22EED46B8(a1);
  sub_22EED9328((_QWORD *)a1, v5, a2);
  v5[3] = a2;
  if (*(_BYTE *)(a1 + 648))
    v5 = 0;
  else
    *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 128) = v7;
  *(_DWORD *)(a1 + 136) = DWORD2(v7);
  return v5;
}

uint64_t *sub_22EED928C(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 128);
  sub_22EED47D4(a1, *(_QWORD *)(a2 + 24), 1, 0);
  v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
    v4 = (uint64_t *)sub_22EED46B8(a1);
  sub_22EED9328((_QWORD *)a1, v4, a2);
  v4[3] = a2;
  if (*(_BYTE *)(a1 + 648))
    v4 = 0;
  else
    *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 128) = v6;
  *(_DWORD *)(a1 + 136) = DWORD2(v6);
  return v4;
}

uint64_t sub_22EED9328(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;

  result = sub_22EED93A4(a1, (_BYTE *)a3);
  if ((_DWORD)result)
  {
    v7 = a1[85];
    if (v7)
      *(_QWORD *)(v7 + 8) = a2;
  }
  v8 = (unint64_t *)a2[1];
  if ((unint64_t)v8 >= a2[2])
  {
    result = sub_22EED453C(a2, *(_QWORD *)(a1[1] + 32), 1uLL);
    v8 = (unint64_t *)a2[1];
  }
  *v8 = a3 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v8[1] = 1;
  a2[1] = (uint64_t)(v8 + 2);
  return result;
}

BOOL sub_22EED93A4(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t *v5;
  uint64_t v7;
  BOOL v8;
  _BYTE *v10;
  uint64_t v11;

  v2 = a1[82];
  v3 = (1 << *a2) & *(_QWORD *)(v2 + (((unint64_t)*a2 >> 3) & 0x18));
  v4 = v3 != 0;
  v5 = *(uint64_t **)(v2 + 32);
  if (v5)
  {
    if ((_BYTE *)a1[86] == a2)
    {
      return (a1[85] | v3) != 0;
    }
    else
    {
      a1[86] = a2;
      v7 = *v5;
      if (*v5)
      {
        v10 = a2;
        v11 = 0;
        if (sub_22EEB7B50(v7, &v10, &v11))
          v8 = v11 == *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16);
        else
          v8 = 1;
        if (v8)
        {
          a1[85] = 0;
        }
        else
        {
          a1[85] = v11;
          return 1;
        }
      }
    }
  }
  return v4;
}

uint64_t **sub_22EED946C(uint64_t **result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = result + 2;
  v2 = result + 5;
  if (result[2] == result[5] && result[3] == result[6])
  {
    v4 = result;
    v5 = *result;
    v6 = result[1];
    if (*result != v6)
    {
      do
      {
        v7 = v5 + 1;
        *v4 = v7;
        if (v7 == v6)
          break;
        sub_22F3EA0C0(*v7);
        *(_OWORD *)v1 = v8;
        v1[2] = v9;
        result = (uint64_t **)sub_22F3EA0C0(**v4);
        *(_OWORD *)v2 = v10;
        v2[2] = v11;
        if (v4[2] != v4[5])
          break;
        if (v4[3] != v4[6])
          break;
        v5 = *v4;
        v6 = v4[1];
      }
      while (*v4 != v6);
    }
  }
  return result;
}

uint64_t **sub_22EED9548(uint64_t **a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;

  v2 = a1 + 2;
  v3 = (unint64_t)a1[3];
  if ((v3 & 3) != 0)
  {
    v8 = (uint64_t)(a1 + 2);
    if (v3 < 4)
      sub_22F3F2FE0(v8, 1);
    else
      sub_22F0D8720(v8);
  }
  else
  {
    *v2 += 8;
  }
  if (a1[2] == a1[5] && a1[3] == a1[6])
  {
    v5 = a1[1];
    if (*a1 != v5)
    {
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 != v5)
      {
        sub_22F3EA0C0(*v6);
        *(_OWORD *)v2 = v9;
        v2[2] = v10;
        sub_22F3EA0C0(**a1);
        *(_OWORD *)(a1 + 5) = v11;
        a1[7] = v12;
      }
    }
    sub_22EED946C(a1);
  }
  return a1;
}

uint64_t *sub_22EED9630(uint64_t *result, unsigned __int8 **a2)
{
  uint64_t *v2;
  _BYTE *v3;
  unsigned __int8 ***v4;
  uint64_t *v5;
  unint64_t v6;

  v2 = result;
  v3 = (_BYTE *)result[82];
  if (v3[51] || v3[52] || v3[55])
  {
    if (*(_BYTE *)a2 == 8)
    {
      v4 = (unsigned __int8 ***)(a2 + 2);
      if (*(_DWORD *)a2 >= 0x100u)
      {
        v5 = 0;
        v6 = 8 * ((unint64_t)*(unsigned int *)a2 >> 8);
        do
        {
          result = (uint64_t *)sub_22F0D48C8(*v4);
          if (*(_BYTE *)result == 12)
          {
            result = sub_22EED9E4C(v2, (uint64_t)result, v5);
            v5 = result;
          }
          ++v4;
          v6 -= 8;
        }
        while (v6);
      }
    }
    else
    {
      result = (uint64_t *)sub_22F0D48C8(a2);
      if (*(_BYTE *)result == 12)
        return sub_22EED9E4C(v2, (uint64_t)result, 0);
    }
  }
  return result;
}

void sub_22EED9700(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  _QWORD v75[2];
  void *v76;
  uint64_t v77;
  _BYTE v78[80];
  void *v79;
  uint64_t v80;
  _QWORD v81[12];

  v8 = a3;
  v9 = a2;
  v81[10] = *MEMORY[0x24BDAC8D0];
  v79 = a2;
  v80 = a3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 55) && (a2 != a4 || (_DWORD)a3 != a5))
  {
    v11 = sub_22EEDA194(&v79, a4, a5);
    v13 = v11;
    v14 = v12;
    if (v9 == (_QWORD *)v11)
    {
      v15 = 0;
      v16 = v8;
    }
    else
    {
      v15 = 0;
      v16 = v8;
      v17 = v9;
      do
      {
        v15 += v16;
        v16 = *((_DWORD *)v17 + 10);
        v17 = (_QWORD *)v17[4];
      }
      while (v17 != (_QWORD *)v11);
    }
    if (v15 - v12 + v16 >= 1 && (v9 != (_QWORD *)v11 || (_DWORD)v8 != v12))
    {
      v56 = v9;
      v57 = v8;
      do
      {
        if (v57 == 1)
        {
          v76 = *(void **)v56[1];
          sub_22F34CAB4(a1 + 368, (uint64_t *)&v76);
          v57 = *((_DWORD *)v56 + 10);
          v56 = (_QWORD *)v56[4];
        }
        else
        {
          v57 -= v56 != 0;
        }
      }
      while (v56 != (_QWORD *)v13 || v57 != v14);
    }
  }
  v18 = *(_QWORD *)(a1 + 656);
  if (*(_BYTE *)(v18 + 55) && !*(_BYTE *)(v18 + 51))
  {
    if (!*(_QWORD *)(a1 + 16))
      *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
    v19 = *(unsigned int *)(a1 + 512);
    if ((_DWORD)v19)
    {
      v20 = 8 * v19;
      v21 = *(_QWORD *)(a1 + 504) - 8;
      do
      {
        sub_22EEDA420(a1, *(uint64_t **)(a1 + 16), *(_QWORD *)(v21 + v20), a6);
        v20 -= 8;
      }
      while (v20);
    }
  }
  v22 = *(_QWORD *)(a1 + 656);
  if (*(_BYTE *)(v22 + 51))
  {
    v23 = a5;
    if (v9 != a4 || (_DWORD)v8 != a5)
    {
      v79 = v81;
      v80 = 0xA00000000;
      if (v9 == a4)
      {
        v24 = 0;
        v25 = v8;
      }
      else
      {
        v24 = 0;
        v25 = v8;
        v26 = v9;
        do
        {
          v24 += v25;
          v25 = *((_DWORD *)v26 + 10);
          v26 = (_QWORD *)v26[4];
        }
        while (v26 != a4);
      }
      if (v25 - a5 + v24 < 0xB)
      {
        v27 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v80;
      }
      if (v9 != a4 || (_DWORD)v8 != a5)
      {
        v51 = v8;
        v52 = v9;
        do
        {
          v53 = *(_QWORD *)(v52[1] + 8 * --v51);
          if (v27 >= HIDWORD(v80))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = v80;
          }
          *((_QWORD *)v79 + v27) = v53;
          v27 = v80 + 1;
          LODWORD(v80) = v80 + 1;
          if (!v51)
          {
            v51 = *((_DWORD *)v52 + 10);
            v52 = (_QWORD *)v52[4];
          }
        }
        while (v52 != a4 || v51 != a5);
      }
      v28 = v79;
      if (v27)
      {
        v73 = a1 + 368;
        v29 = a6 & 0xFFFFFFFFFFFFFFFCLL | 2;
        v30 = 8 * v27;
        v31 = (char *)v79 - 8;
        while (1)
        {
          v32 = *(_QWORD *)&v31[v30];
          if (!sub_22EED9FF0((uint64_t *)a1, v32))
            break;
          if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 55) && sub_22F33A234(v73, v32, &v76))
          {
            v33 = *(uint64_t **)(a1 + 16);
            if (!v33)
            {
              v33 = (uint64_t *)sub_22EED46B8(a1);
              *(_QWORD *)(a1 + 16) = v33;
            }
            sub_22EEDA420(a1, v33, v32, a6);
          }
LABEL_55:
          v30 -= 8;
          if (!v30)
          {
            v28 = v79;
            v23 = a5;
            goto LABEL_59;
          }
        }
        v34 = a6;
        v35 = *(_QWORD *)(v32 + 48);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28)
        {
          v36 = (unsigned __int8 *)sub_22EFBC5B4(v32);
          v35 = sub_22EED1AF8(v36, 0);
        }
        v37 = sub_22EF5BA38(*(_QWORD *)a1, v35);
        v38 = sub_22F10C2A4(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0));
        if ((*(_DWORD *)(v38 + 28) & 0x7Fu) - 35 >= 3)
          v39 = 0;
        else
          v39 = v38;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v39 + 104) + 96), *(_QWORD *)(v39 + 104));
        if (((*(unsigned __int16 *)(*(_QWORD *)(v39 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(v39 + 128) + 10) << 16)) & 0x80000) != 0)
        {
          v41 = sub_22EEDA490(a1);
        }
        else
        {
          v40 = *(uint64_t **)(a1 + 16);
          if (v40)
            goto LABEL_51;
          v41 = sub_22EED46B8(a1);
        }
        v40 = (uint64_t *)v41;
        *(_QWORD *)(a1 + 16) = v41;
LABEL_51:
        if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 55))
        {
          v43 = sub_22F33A234(v73, v32, &v76);
          v40 = *(uint64_t **)(a1 + 16);
          if (v43)
          {
            sub_22EEDA420(a1, *(uint64_t **)(a1 + 16), v32, v34);
            v40 = *(uint64_t **)(a1 + 16);
          }
        }
        v42 = (unint64_t *)v40[1];
        if ((unint64_t)v42 >= v40[2])
        {
          sub_22EED453C(v40, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
          v42 = (unint64_t *)v40[1];
        }
        *v42 = v32 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v42[1] = v29;
        v40[1] = (uint64_t)(v42 + 2);
        a6 = v34;
        goto LABEL_55;
      }
LABEL_59:
      if (v28 != v81)
        free(v28);
      v22 = *(_QWORD *)(a1 + 656);
    }
  }
  else
  {
    v23 = a5;
  }
  if (*(_BYTE *)(v22 + 52))
  {
    v75[0] = v9;
    v75[1] = v8;
    if (v9 != a4 || (_DWORD)v8 != v23)
    {
      v44 = sub_22EEDA194(v75, a4, v23);
      v46 = v44;
      v47 = v45;
      if (v9 == (_QWORD *)v44)
      {
        v48 = 0;
        v49 = v8;
      }
      else
      {
        v48 = 0;
        v49 = v8;
        v50 = v9;
        do
        {
          v48 += v49;
          v49 = *((_DWORD *)v50 + 10);
          v50 = (_QWORD *)v50[4];
        }
        while (v50 != (_QWORD *)v44);
      }
      v54 = v49 - v45 + v48;
      if (v54 >= 1)
      {
        v79 = v81;
        v80 = 0xA00000000;
        v76 = v78;
        v77 = 0xA00000000;
        if (v54 < 0xB)
        {
          v55 = 10;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v55 = HIDWORD(v77);
        }
        if (v55 < v54)
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        while (v9 != (_QWORD *)v46 || (_DWORD)v8 != v47)
        {
          LODWORD(v8) = v8 - 1;
          v58 = sub_22EED9FF0((uint64_t *)a1, *(_QWORD *)(v9[1] + 8 * v8));
          v59 = *(_QWORD *)(v9[1] + 8 * v8);
          if (v58)
          {
            v60 = v80;
            v61 = &v79;
            if (v80 >= (unint64_t)HIDWORD(v80))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v80;
            }
          }
          else
          {
            v60 = v77;
            v61 = &v76;
            if (v77 >= (unint64_t)HIDWORD(v77))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v77;
            }
          }
          *((_QWORD *)*v61 + v60) = v59;
          ++*((_DWORD *)v61 + 2);
          if (!(_DWORD)v8)
          {
            LODWORD(v8) = *((_DWORD *)v9 + 10);
            v9 = (_QWORD *)v9[4];
          }
        }
        if (!*(_QWORD *)(a1 + 16))
          *(_QWORD *)(a1 + 16) = sub_22EED46B8(a1);
        if ((_DWORD)v80)
        {
          v62 = 8 * v80;
          v63 = (char *)v79 - 8;
          do
          {
            v64 = *(_QWORD *)&v63[v62];
            v65 = *(_QWORD *)(a1 + 16);
            v66 = *(unint64_t **)(v65 + 8);
            if ((unint64_t)v66 >= *(_QWORD *)(v65 + 16))
            {
              sub_22EED453C(*(uint64_t **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
              v66 = *(unint64_t **)(v65 + 8);
            }
            *v66 = v64 & 0xFFFFFFFFFFFFFFFCLL;
            v66[1] = a6 & 0xFFFFFFFFFFFFFFFCLL | 1;
            *(_QWORD *)(v65 + 8) = v66 + 2;
            v62 -= 8;
          }
          while (v62);
        }
        v67 = v76;
        if ((_DWORD)v77)
        {
          v68 = 8 * v77;
          v69 = (char *)v76 - 8;
          do
          {
            v70 = *(_QWORD *)&v69[v68];
            v71 = *(_QWORD *)(a1 + 16);
            v72 = *(unint64_t **)(v71 + 8);
            if ((unint64_t)v72 >= *(_QWORD *)(v71 + 16))
            {
              sub_22EED453C(*(uint64_t **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
              v72 = *(unint64_t **)(v71 + 8);
            }
            *v72 = v70 & 0xFFFFFFFFFFFFFFFCLL;
            v72[1] = a6 & 0xFFFFFFFFFFFFFFFCLL | 1;
            *(_QWORD *)(v71 + 8) = v72 + 2;
            v68 -= 8;
          }
          while (v68);
          v67 = v76;
        }
        if (v67 != v78)
          free(v67);
        if (v79 != v81)
          free(v79);
      }
    }
  }
}

uint64_t *sub_22EED9E4C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v4 = (_BYTE *)a1[82];
  if (v4[51] || v4[52] || v4[55])
  {
    v5 = *(_QWORD *)(a2 + 8);
    if ((v5 & 1) != 0)
    {
      v6 = (uint64_t *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v7 = &v6[*(unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL)];
    }
    else
    {
      if (v5)
        v6 = (uint64_t *)(a2 + 8);
      else
        v6 = 0;
      if (v5)
        v7 = (uint64_t *)(a2 + 16);
      else
        v7 = 0;
    }
    while (v6 != v7)
    {
      if (*v6)
        v8 = (*(_DWORD *)(*v6 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
      else
        v8 = 0;
      if (v8)
        a3 = sub_22EED9EF4(a1, *v6, a3);
      ++v6;
    }
  }
  return a3;
}

uint64_t *sub_22EED9EF4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v5 = a1;
  v6 = (unsigned __int8 *)a1[82];
  v7 = v6[51];
  if (v6[51] || v6[52] || v6[55])
  {
    v8 = *(_BYTE *)(a2 + 96) & 7;
    v9 = v8 > 5;
    v10 = (1 << v8) & 0x31;
    if (!v9 && v10 != 0)
    {
      if (v7)
      {
        if (sub_22EED9FF0(a1, a2) && !*(_BYTE *)(v5[82] + 55))
          return a3;
        a1 = v5;
      }
      v12 = sub_22EEDA124(a1, a3);
      v13 = v12;
      v14 = (uint64_t *)v12[2];
      if ((unint64_t)v14 >= v12[3])
      {
        sub_22EED463C((uint64_t)(v12 + 1), *v12, 1uLL);
        v14 = (uint64_t *)v13[2];
      }
      *v14 = a2;
      v15 = v13[1];
      v16 = v13[2] + 8;
      v13[2] = v16;
      v17 = v16 - v15;
      if ((v17 & 0x7FFFFFFF8) != 0)
      {
        v18 = v17 >> 3;
        a3 = v13;
      }
      else
      {
        a3 = v13;
        v13 = (uint64_t *)v13[4];
        v18 = *((_DWORD *)a3 + 10);
      }
      v5[16] = (uint64_t)v13;
      *((_DWORD *)v5 + 34) = v18;
    }
  }
  return a3;
}

uint64_t sub_22EED9FF0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v4 = (unsigned __int8 *)sub_22EFBC5B4(a2);
    if (v4)
    {
      v13 = 0;
      v5 = sub_22EED1AF8(v4, &v13);
      if (v13)
      {
        v3 = v5;
        goto LABEL_5;
      }
    }
    return 1;
  }
LABEL_5:
  while (1)
  {
    v6 = sub_22EF5C728(*a1, v3);
    if (!v6)
      break;
    v7 = v6;
    if (*(_BYTE *)(v6 + 16) != 2)
      break;
    v8 = (_QWORD *)(v6 + 40);
    v9 = *(_DWORD *)(v6 + 48);
    if (v9 >= 0x41)
    {
      if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 40)) > 0x40)
        goto LABEL_11;
      v8 = (_QWORD *)*v8;
    }
    if (!*v8)
      return 1;
LABEL_11:
    v3 = *(_QWORD *)(v7 + 32);
  }
  v10 = sub_22F10C2A4(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0));
  if (!v10)
    return 1;
  v12 = v10;
  if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 > 2)
    return 1;
  if (!*(_QWORD *)(v10 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104));
    if (!*(_QWORD *)(v12 + 128))
      return 1;
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 104) + 96), *(_QWORD *)(v12 + 104));
  return (**(_QWORD **)(v12 + 128) >> 44) & 1;
}

_QWORD *sub_22EEDA124(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if (!a2)
  {
    v4 = *(_QWORD *)(a1[1] + 32) & 0xFFFFFFFFFFFFFFF8;
    v2 = (_QWORD *)sub_22E3CD3D4(v4, 48, 3);
    v6 = a1[16];
    v5 = a1[17];
    *v2 = v4;
    v2[2] = 0;
    v2[3] = 0;
    v2[1] = 0;
    sub_22EED463C((uint64_t)(v2 + 1), v4, 4uLL);
    v2[4] = v6;
    v2[5] = v5;
  }
  return v2;
}

uint64_t sub_22EEDA194(_QWORD *a1, const void *a2, unsigned int a3)
{
  unint64_t v4;
  const void *v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  BOOL v14;
  uint64_t *v15;
  void **v16;
  uint64_t *v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];

  v4 = (unint64_t)a2;
  v19 = v23;
  v20 = v23;
  v21 = 4;
  v22 = 0;
  sub_22E3BA850((uint64_t)&v19, a2);
  if (v4 | a3)
  {
    do
    {
      v6 = *(const void **)(v4 + 32);
      v7 = *(_DWORD *)(v4 + 40);
      sub_22E3BA850((uint64_t)&v19, v6);
      if (v6)
        v8 = 0;
      else
        v8 = v7 == 0;
      v4 = (unint64_t)v6;
    }
    while (!v8);
  }
  v11 = a1;
  v10 = *a1;
  v9 = v11[1];
  v12 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v19, (void *)v10);
  v13 = v20;
  v14 = v20 == v19;
  v15 = (uint64_t *)((char *)&v21 + 4);
  if (v20 != v19)
    v15 = &v21;
  if (v12 == (void **)&v20[8 * *(unsigned int *)v15])
  {
    do
    {
      v9 = v9 & 0xFFFFFFFF00000000 | *(unsigned int *)(v10 + 40);
      v10 = *(_QWORD *)(v10 + 32);
      v16 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v19, (void *)v10);
      v13 = v20;
      v14 = v20 == v19;
      v17 = (uint64_t *)((char *)&v21 + 4);
      if (v20 != v19)
        v17 = &v21;
    }
    while (v16 == (void **)&v20[8 * *(unsigned int *)v17]);
  }
  if (!v14)
    free(v13);
  return v10;
}

uint64_t sub_22EEDA2B4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 136; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F34CCAC(a1, v14, v8);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F34CCAC(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

uint64_t sub_22EEDA420(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v7;

  if (*(_BYTE *)(*(_QWORD *)(result + 656) + 55))
  {
    v7 = (unint64_t *)a2[1];
    if ((unint64_t)v7 >= a2[2])
    {
      result = sub_22EED453C(a2, *(_QWORD *)(*(_QWORD *)(result + 8) + 32), 1uLL);
      v7 = (unint64_t *)a2[1];
    }
    *v7 = a3 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v7[1] = a4 & 0xFFFFFFFFFFFFFFFCLL;
    a2[1] = (uint64_t)(v7 + 2);
  }
  return result;
}

uint64_t sub_22EEDA490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _BOOL8 v7;

  v2 = sub_22EED0954(*(_QWORD *)(a1 + 8));
  v3 = v2;
  *(_BYTE *)(v2 + 104) |= 1u;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(uint64_t **)(v4 + 8);
  v6 = *(uint64_t **)(a1 + 24);
  v7 = v5 == v6;
  if (v5 == v6)
    v6 = 0;
  sub_22EED1CAC(v2, v5, (uint64_t *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF9 | (4 * v7)), (uint64_t *)(v4 + 32));
  return v3;
}

uint64_t sub_22EEDA4F0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  _QWORD v10[13];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  sub_22EEDA5B4((uint64_t)&v9, a2);
  if (v11)
  {
    v4 = 8 * v11;
    v5 = v10[12] - 8;
    do
    {
      v6 = *(_QWORD *)(v5 + v4);
      if (v6)
      {
        v7 = sub_22EED47D4(a1, v6, 0, 0);
        if (v7)
          v3 = v7;
      }
      v4 -= 8;
    }
    while (v4);
  }
  if (v9 != v10)
    free(v9);
  return v3;
}

uint64_t sub_22EEDA5B4(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 8) = 0xC00000000;
  *(_QWORD *)(a1 + 120) = 0;
  v3 = *a2;
  if ((v3 + 113) >= 0xFBu)
  {
    v6 = *(unsigned int *)a2;
    v4 = &a2[v6 >> 24];
    v5 = *((_DWORD *)a2 + 4) + ((v6 >> 18) & 1) + 1;
    goto LABEL_5;
  }
  if (v3 == 180)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v5 = ((*((_QWORD *)a2 + 3) - (_QWORD)v4) >> 3);
LABEL_5:
    *(_QWORD *)(a1 + 112) = v4;
    goto LABEL_37;
  }
  sub_22F0D492C((uint64_t)a2);
  v7 = *(_DWORD *)(a1 + 8);
  v21 = v18;
  v22 = v19;
  v9 = *((_QWORD *)&v18 + 1);
  v8 = v18;
  if (v18 == v20)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if ((v9 & 3) != 0)
      {
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v21, 1);
        else
          sub_22F0D8720((uint64_t)&v21);
      }
      else
      {
        *(_QWORD *)&v21 = v8 + 8;
      }
      v9 = *((_QWORD *)&v21 + 1);
      v8 = v21;
      ++v10;
    }
    while ((_QWORD)v21 != (_QWORD)v20 || *((_QWORD *)&v21 + 1) != *((_QWORD *)&v20 + 1));
    v7 = *(_DWORD *)(a1 + 8);
  }
  if (v10 + (unint64_t)v7 <= *(unsigned int *)(a1 + 12))
  {
    v12 = v7;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(unsigned int *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 8);
  }
  v21 = v18;
  v22 = v19;
  v14 = *((_QWORD *)&v18 + 1);
  v13 = (uint64_t *)v18;
  if (v18 != v20)
  {
    v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v12);
    do
    {
      if ((v14 & 3) != 0)
      {
        if ((v14 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          *v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          sub_22F0D8720((uint64_t)&v21);
        }
        else
        {
          *v15 = *(_QWORD *)sub_22F3AC1A8(*v13);
          sub_22F3F2FE0((uint64_t)&v21, 1);
        }
      }
      else
      {
        *v15 = *v13;
        *(_QWORD *)&v21 = v13 + 1;
      }
      ++v15;
      v14 = *((_QWORD *)&v21 + 1);
      v13 = (uint64_t *)v21;
    }
    while ((_QWORD)v21 != (_QWORD)v20 || *((_QWORD *)&v21 + 1) != *((_QWORD *)&v20 + 1));
    v7 = *(_DWORD *)(a1 + 8);
  }
  v5 = v7 + v10;
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)a1;
LABEL_37:
  *(_QWORD *)(a1 + 120) = v5;
  return a1;
}

uint64_t sub_22EEDA7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  BOOL v58;

  v10 = *(unsigned __int8 **)(a2 + 24);
  do
  {
    v11 = (uint64_t)v10;
    LODWORD(v12) = *v10;
    if (v12 > 0xD5)
    {
      if ((_DWORD)v12 == 233)
      {
        LOBYTE(v12) = *(_DWORD *)v10;
        if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
          break;
        v13 = v10 + 16;
      }
      else
      {
        if ((_DWORD)v12 != 214)
          break;
        v13 = v10 + 24;
      }
    }
    else if ((_DWORD)v12 == 155)
    {
      if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
        goto LABEL_20;
      v13 = v10 + 24;
      if (!*(_BYTE *)(v11 + 48))
        v13 = (unsigned __int8 *)(v11 + 32);
      LOBYTE(v12) = -101;
    }
    else
    {
      if ((_DWORD)v12 != 176)
        break;
      v12 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v12 == -1)
        goto LABEL_20;
      v13 = &v10[8 * v12 + 40];
      LOBYTE(v12) = -80;
    }
    v10 = *(unsigned __int8 **)v13;
  }
  while (v10 != (unsigned __int8 *)v11);
  if ((v12 & 0xFE) == 0x70 && ((*(_DWORD *)v11 >> 18) & 0x3Fu) - 19 <= 1)
  {
    v14 = sub_22EEDA7CC(a1, v11, a3, a4, a5);
    goto LABEL_46;
  }
LABEL_20:
  v15 = sub_22EED0954(*(_QWORD *)(a1 + 8));
  v16 = sub_22EEDABEC(a1, v11);
  if (v16 < 0)
  {
    v16 = sub_22EEDABEC(a1, a2);
    if (a3)
      goto LABEL_22;
  }
  else if (a3)
  {
LABEL_22:
    if (v16 == 1)
      v17 = a5 & 0xFFFFFFFFFFFFFFF9;
    else
      v17 = 0;
    if (v16 == 1)
      v18 = 0;
    else
      v18 = (uint64_t *)a5;
    v19 = v16 == 1 || a5 == 0;
    v20 = 2;
    if (v19)
      v21 = 2;
    else
      v21 = 0;
    v22 = a4 & 0xFFFFFFFFFFFFFFF9;
    if (v16)
    {
      v22 = 0;
      v23 = (uint64_t *)a4;
    }
    else
    {
      v23 = 0;
    }
    *(_QWORD *)(v15 + 32) = a3 & 0xFFFFFFFFFFFFFFF9;
    if (v16)
      v24 = a4 == 0;
    else
      v24 = 1;
    if (!v24)
      v20 = 0;
    sub_22EED1CAC(v15, v23, (uint64_t *)(v20 | v22), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
    v25 = (uint64_t *)(v21 | v17);
    goto LABEL_45;
  }
  v25 = (uint64_t *)(2 * (a4 == 0));
  v18 = (uint64_t *)a4;
LABEL_45:
  sub_22EED1CAC(v15, v18, v25, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
  *(_QWORD *)(a1 + 16) = v15;
  v14 = sub_22EED47D4(a1, v11, 1, 0);
LABEL_46:
  if (*(_BYTE *)(a1 + 648))
    return 0;
  v26 = *(unsigned __int8 **)(a2 + 16);
  do
  {
    v27 = (uint64_t)v26;
    LODWORD(v28) = *v26;
    if (v28 > 0xD5)
    {
      if ((_DWORD)v28 == 233)
      {
        LOBYTE(v28) = *(_DWORD *)v26;
        if ((*(_DWORD *)v26 & 0x7C0000) != 0x300000)
          break;
        v29 = v26 + 16;
      }
      else
      {
        if ((_DWORD)v28 != 214)
          break;
        v29 = v26 + 24;
      }
    }
    else if ((_DWORD)v28 == 155)
    {
      if ((**((_DWORD **)v26 + 2) & 0x18000) != 0)
        goto LABEL_72;
      v29 = v26 + 24;
      if (!*(_BYTE *)(v27 + 48))
        v29 = (unsigned __int8 *)(v27 + 32);
      LOBYTE(v28) = -101;
    }
    else
    {
      if ((_DWORD)v28 != 176)
        break;
      v28 = *((unsigned int *)v26 + 5);
      if ((_DWORD)v28 == -1)
        goto LABEL_72;
      v29 = &v26[8 * v28 + 40];
      LOBYTE(v28) = -80;
    }
    v26 = *(unsigned __int8 **)v29;
  }
  while (v26 != (unsigned __int8 *)v27);
  if ((v28 & 0xFE) == 0x70 && ((*(_DWORD *)v27 >> 18) & 0x3Fu) - 19 <= 1)
  {
    v30 = *(_DWORD *)a2 & 0xFC0000;
    if (v30 == 5242880)
      v31 = v14;
    else
      v31 = a5;
    if (v30 == 5242880)
      v32 = a4;
    else
      v32 = v14;
    return sub_22EEDA7CC(a1, v27, a2, v32, v31);
  }
LABEL_72:
  v34 = sub_22EED0954(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(v34 + 32) = a2 & 0xFFFFFFFFFFFFFFF9;
  *(_QWORD *)(a1 + 16) = v34;
  v35 = sub_22EED47D4(a1, v27, 1, 0);
  if (*(_BYTE *)(a1 + 648))
    return 0;
  v33 = v35;
  v37 = sub_22EEDABEC(a1, v27);
  v38 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
  if ((*(_DWORD *)a2 & 0xFC0000) == 0x500000)
  {
    if (v37 == 1)
      v39 = v14 & 0xFFFFFFFFFFFFFFF9;
    else
      v39 = 0;
    if (v37 == 1)
      v40 = 0;
    else
      v40 = (uint64_t *)v14;
    v41 = v37 == 1 || v14 == 0;
    v42 = 2;
    if (v41)
      v43 = 2;
    else
      v43 = 0;
    v44 = a4 & 0xFFFFFFFFFFFFFFF9;
    if (v37)
    {
      v44 = 0;
      v45 = (uint64_t *)a4;
    }
    else
    {
      v45 = 0;
    }
    if (v37)
      v46 = a4 == 0;
    else
      v46 = 1;
    if (!v46)
      v42 = 0;
    sub_22EED1CAC(v34, v45, (uint64_t *)(v42 | v44), v38);
    v47 = (uint64_t *)(v43 | v39);
    v48 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
    v49 = v34;
    v50 = v40;
  }
  else
  {
    if (v37 == 1)
      v51 = a5 & 0xFFFFFFFFFFFFFFF9;
    else
      v51 = 0;
    if (v37 == 1)
      v52 = 0;
    else
      v52 = (uint64_t *)a5;
    v53 = v37 == 1 || a5 == 0;
    v54 = 2;
    if (v53)
      v55 = 2;
    else
      v55 = 0;
    v56 = v14 & 0xFFFFFFFFFFFFFFF9;
    if (v37)
    {
      v56 = 0;
      v57 = (uint64_t *)v14;
    }
    else
    {
      v57 = 0;
    }
    if (v37)
      v58 = v14 == 0;
    else
      v58 = 1;
    if (!v58)
      v54 = 0;
    sub_22EED1CAC(v34, v57, (uint64_t *)(v54 | v56), v38);
    v47 = (uint64_t *)(v55 | v51);
    v48 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 32);
    v49 = v34;
    v50 = v52;
  }
  sub_22EED1CAC(v49, v50, v47, v48);
  return v33;
}

uint64_t sub_22EEDABEC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  llvm *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 48))
  {
    v3 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 & 0x18000) == 0)
    {
      if ((*(_DWORD *)a2 & 0xFE) != 0x70)
        return sub_22EEDB0C0((uint64_t *)a1, (int *)a2);
      v7 = (v3 >> 18) & 0x3F;
      if ((v3 & 0xF80000) == 0x380000 || (v7 - 19) <= 1)
      {
        v9 = *(_QWORD *)(a1 + 696);
        v10 = *(unsigned int *)(a1 + 712);
        if ((_DWORD)v10)
        {
          LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v12 = (uint64_t *)(v9 + 16 * v11);
          v13 = *v12;
          if (*v12 == a2)
            goto LABEL_25;
          v14 = 1;
          while (v13 != -4096)
          {
            v15 = v11 + v14++;
            v11 = v15 & (v10 - 1);
            v13 = *(_QWORD *)(v9 + 16 * v11);
            if (v13 == a2)
            {
              v12 = (uint64_t *)(v9 + 16 * v11);
              goto LABEL_25;
            }
          }
        }
        v12 = (uint64_t *)(v9 + 16 * v10);
LABEL_25:
        if (v12 != (uint64_t *)(v9 + 16 * v10))
          return *((unsigned int *)v12 + 2);
        v4 = sub_22EEDB0C0((uint64_t *)a1, (int *)a2);
        v42 = 0;
        v18 = sub_22ECB1B60(*(_QWORD *)(a1 + 696), *(_DWORD *)(a1 + 712), a2, &v42);
        v19 = v42;
        if ((v18 & 1) != 0)
        {
LABEL_33:
          *(_DWORD *)(v19 + 8) = v4;
          return v4;
        }
        v45 = v42;
        v20 = *(_DWORD *)(a1 + 704);
        v21 = *(unsigned int *)(a1 + 712);
        if (4 * v20 + 4 >= (3 * v21))
        {
          v22 = 2 * v21;
        }
        else
        {
          v22 = *(_DWORD *)(a1 + 712);
          if ((int)v21 + ~v20 - *(_DWORD *)(a1 + 708) > v21 >> 3)
          {
LABEL_30:
            *(_DWORD *)(a1 + 704) = v20 + 1;
            if (*(_QWORD *)v19 != -4096)
              --*(_DWORD *)(a1 + 708);
            *(_QWORD *)v19 = a2;
            *(_DWORD *)(v19 + 8) = -1;
            goto LABEL_33;
          }
        }
        v27 = *(llvm **)(a1 + 696);
        v28 = (v22 - 1) | ((unint64_t)(v22 - 1) >> 1);
        v29 = v28 | (v28 >> 2) | ((v28 | (v28 >> 2)) >> 4);
        v30 = ((v29 | (v29 >> 8)) >> 16) | v29 | (v29 >> 8);
        if ((v30 + 1) > 0x40)
          v31 = v30 + 1;
        else
          v31 = 64;
        *(_DWORD *)(a1 + 712) = v31;
        v32 = (_QWORD *)MEMORY[0x23489D23C](16 * v31, 8);
        *(_QWORD *)(a1 + 696) = v32;
        if (v27)
        {
          *(_QWORD *)(a1 + 704) = 0;
          v33 = *(unsigned int *)(a1 + 712);
          if ((_DWORD)v33)
          {
            v34 = 16 * v33;
            do
            {
              *v32 = -4096;
              v32 += 2;
              v34 -= 16;
            }
            while (v34);
          }
          v35 = (void *)(16 * v21);
          if ((_DWORD)v21)
          {
            v36 = (_DWORD *)((char *)v27 + 8);
            v37 = 16 * v21;
            do
            {
              v38 = *((_QWORD *)v36 - 1);
              if ((v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v51[0] = 0;
                sub_22ECB1B60(*(_QWORD *)(a1 + 696), *(_DWORD *)(a1 + 712), v38, v51);
                v39 = v51[0];
                *(_QWORD *)v51[0] = v38;
                *(_DWORD *)(v39 + 8) = *v36;
                ++*(_DWORD *)(a1 + 704);
              }
              v36 += 4;
              v37 -= 16;
            }
            while (v37);
          }
          llvm::deallocate_buffer(v27, v35);
          v32 = *(_QWORD **)(a1 + 696);
          LODWORD(v40) = *(_DWORD *)(a1 + 712);
        }
        else
        {
          *(_QWORD *)(a1 + 704) = 0;
          v40 = *(unsigned int *)(a1 + 712);
          if ((_DWORD)v40)
          {
            v41 = 0;
            do
            {
              v32[v41] = -4096;
              v41 += 2;
            }
            while (2 * v40 != v41);
          }
        }
        sub_22ECB1B60((uint64_t)v32, v40, a2, &v45);
        v20 = *(_DWORD *)(a1 + 704);
        v19 = v45;
        goto LABEL_30;
      }
      if (v7 != 16 && v7 != 2)
        return sub_22EEDB0C0((uint64_t *)a1, (int *)a2);
      LOWORD(v51[0]) = 0;
      v51[1] = 0;
      LODWORD(v52) = 0;
      if (sub_22F00554C(*(_QWORD *)(a2 + 16), (uint64_t)v51, *(_QWORD *)a1, 0, 0))
      {
        LODWORD(v46) = v54;
        if (v54 <= 0x40)
        {
          v17 = v53;
          goto LABEL_36;
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v45, (const llvm::APInt *)&v53);
        v23 = v46;
        BYTE4(v46) = v55;
        if (v46 <= 0x40)
        {
          v17 = v45;
LABEL_36:
          if (v17)
            goto LABEL_37;
LABEL_47:
          v24 = 1;
          goto LABEL_54;
        }
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v45) == v23)
        {
          if (v45)
            MEMORY[0x2348A0E84](v45, 0x1000C8000313F17);
          goto LABEL_47;
        }
        if (v45)
          MEMORY[0x2348A0E84](v45, 0x1000C8000313F17);
      }
LABEL_37:
      LOWORD(v45) = 0;
      v46 = 0;
      LODWORD(v47) = 0;
      v24 = 0;
      if (!sub_22F00554C(*(_QWORD *)(a2 + 24), (uint64_t)&v45, *(_QWORD *)a1, 0, 0))
        goto LABEL_52;
      v43 = v49;
      if (v49 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v42, (const llvm::APInt *)&v48);
        v26 = v43;
        v44 = v50;
        if (v43 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v42) != v26)
          {
            if (v42)
              MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
            goto LABEL_43;
          }
          if (v42)
            MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
LABEL_51:
          v24 = 1;
LABEL_52:
          if (v47 >= 2)
            sub_22EF53BC0(&v47);
LABEL_54:
          if (v52 >= 2)
            sub_22EF53BC0(&v52);
          if (v24)
            return 0;
          return sub_22EEDB0C0((uint64_t *)a1, (int *)a2);
        }
        v25 = v42;
      }
      else
      {
        v25 = v48;
      }
      if (v25)
      {
LABEL_43:
        v24 = 0;
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_22EEDB0C0(uint64_t *a1, int *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  _BOOL4 v25;
  _BOOL4 v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  char v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unsigned int v65;
  unint64_t *v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unint64_t *v69;
  int v70;
  unsigned int *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  unsigned int *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  char v89;
  unsigned __int8 *v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned __int8 v104;
  int v105;
  llvm::APInt *v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  _BOOL4 v120;
  _BOOL4 v122;
  char v123;
  uint64_t v124;
  uint64_t i;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  unsigned __int8 v134;
  unint64_t v135;
  unsigned int v136;
  char v137;
  unint64_t v138;
  unsigned int v139;
  unsigned __int8 v140;
  unint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unsigned int v144;
  unsigned __int8 v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  char v149;
  _BYTE v150[16];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  char v156;
  unsigned __int8 *v157;
  uint64_t v158;
  unsigned __int8 *v159;
  unint64_t v160;
  unsigned int v161;
  unsigned __int8 v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (*(_BYTE *)a2 & 0xFE) != 0x70)
    goto LABEL_264;
  v4 = *a2;
  v5 = (*a2 >> 18) & 0x3F;
  if ((v5 - 19) > 1)
  {
    if ((v4 & 0xF80000) == 0x380000)
    {
      v10 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      if (v10)
      {
        while (1)
        {
          v11 = v10;
          v12 = *v10;
          if (v12 > 213)
          {
            if (v12 == 233)
            {
              if ((*(_DWORD *)v11 & 0x7C0000) != 0x300000)
                goto LABEL_72;
              v14 = v11 + 16;
            }
            else
            {
              if (v12 != 214)
                goto LABEL_72;
              v14 = v11 + 24;
            }
          }
          else if (v12 == 155)
          {
            if ((**((_DWORD **)v11 + 2) & 0x18000) != 0)
              goto LABEL_72;
            if (v11[48])
              v14 = v11 + 24;
            else
              v14 = v11 + 32;
          }
          else
          {
            if (v12 != 176)
              goto LABEL_72;
            v13 = *((unsigned int *)v11 + 5);
            if ((_DWORD)v13 == -1)
              goto LABEL_72;
            v14 = &v11[8 * v13 + 40];
          }
          v10 = *(unsigned __int8 **)v14;
          if (v10 == v11)
            goto LABEL_72;
        }
      }
      v11 = 0;
LABEL_72:
      v33 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      if (v33)
      {
        while (1)
        {
          v34 = v33;
          v35 = *v33;
          if (v35 > 213)
          {
            if (v35 == 233)
            {
              if ((*(_DWORD *)v34 & 0x7C0000) != 0x300000)
                goto LABEL_90;
              v37 = v34 + 16;
            }
            else
            {
              if (v35 != 214)
                goto LABEL_90;
              v37 = v34 + 24;
            }
          }
          else if (v35 == 155)
          {
            if ((**((_DWORD **)v34 + 2) & 0x18000) != 0)
              goto LABEL_90;
            if (v34[48])
              v37 = v34 + 24;
            else
              v37 = v34 + 32;
          }
          else
          {
            if (v35 != 176)
              goto LABEL_90;
            v36 = *((unsigned int *)v34 + 5);
            if ((_DWORD)v36 == -1)
              goto LABEL_90;
            v37 = &v34[8 * v36 + 40];
          }
          v33 = *(unsigned __int8 **)v37;
          if (v33 == v34)
            goto LABEL_90;
        }
      }
      v34 = 0;
LABEL_90:
      if (*v11 == 181)
      {
        v38 = v11;
        v11 = v34;
      }
      else
      {
        v38 = v34;
        if (*v34 != 181)
          goto LABEL_264;
      }
      if ((*v11 & 0xFE) == 0x70 && ((*(_DWORD *)v11 >> 18) & 0x3D | 2) == 0x12)
      {
        v39 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
        if (v39)
        {
          do
          {
            v40 = v39;
            v41 = *v39;
            if (v41 > 0xD5)
            {
              if (v41 == 233)
              {
                if ((*(_DWORD *)v39 & 0x7C0000) != 0x300000)
                  goto LABEL_112;
                v41 = *(_DWORD *)v39;
                v43 = v39 + 16;
              }
              else
              {
                if (v41 != 214)
                  break;
                v43 = v39 + 24;
              }
            }
            else if (v41 == 155)
            {
              if ((**((_DWORD **)v39 + 2) & 0x18000) != 0)
                goto LABEL_112;
              v43 = v39 + 24;
              if (!v40[48])
                v43 = v40 + 32;
              v41 = 155;
            }
            else
            {
              if (v41 != 176)
                break;
              v42 = *((unsigned int *)v39 + 5);
              if ((_DWORD)v42 == -1)
                goto LABEL_112;
              v43 = &v39[8 * v42 + 40];
              v41 = 176;
            }
            v39 = *(unsigned __int8 **)v43;
          }
          while (v39 != v40);
          if (v41 == 181)
            goto LABEL_179;
LABEL_112:
          v44 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
          if (v44)
          {
            do
            {
              v40 = v44;
              v45 = *v44;
              if (v45 > 0xD5)
              {
                if (v45 == 233)
                {
                  if ((*(_DWORD *)v44 & 0x7C0000) != 0x300000)
                    goto LABEL_264;
                  v45 = *(_DWORD *)v44;
                  v47 = v44 + 16;
                }
                else
                {
                  if (v45 != 214)
                    break;
                  v47 = v44 + 24;
                }
              }
              else if (v45 == 155)
              {
                if ((**((_DWORD **)v44 + 2) & 0x18000) != 0)
                  goto LABEL_264;
                v47 = v44 + 24;
                if (!v40[48])
                  v47 = v40 + 32;
                v45 = 155;
              }
              else
              {
                if (v45 != 176)
                  break;
                v46 = *((unsigned int *)v44 + 5);
                if ((_DWORD)v46 == -1)
                  goto LABEL_264;
                v47 = &v44[8 * v46 + 40];
                v45 = 176;
              }
              v44 = *(unsigned __int8 **)v47;
            }
            while (v44 != v40);
            if (v45 != 181)
              goto LABEL_264;
LABEL_179:
            sub_22F257F94((uint64_t)(v38 + 16), (llvm::APInt *)&v157);
            sub_22F257F94((uint64_t)(v40 + 16), (llvm::APInt *)&v151);
            v64 = *(_DWORD *)v11 & 0xFC0000;
            if (v64 != 0x400000)
            {
              if (v64 != 4718592)
                goto LABEL_258;
LABEL_188:
              v133 = v152;
              if (v152 >= 0x41)
              {
                v69 = &v132;
                llvm::APInt::initSlowCase((llvm::APInt *)&v132, (const llvm::APInt *)&v151);
                if (v133 > 0x40)
                {
                  llvm::APInt::orAssignSlowCase((llvm::APInt *)&v132, (const llvm::APInt *)&v157);
                  v91 = v132;
                  v136 = v133;
                  v135 = v132;
                  v133 = 0;
                  if (v136 > 0x40)
                  {
                    v92 = llvm::APInt::equalSlowCase((llvm::APInt *)&v135, (const llvm::APInt *)&v157);
                    if (v91)
                    {
                      MEMORY[0x2348A0E84](v91, 0x1000C8000313F17);
                      if (v133 >= 0x41)
                      {
                        if (v132)
                          MEMORY[0x2348A0E84](v132, 0x1000C8000313F17);
                      }
                    }
                    goto LABEL_235;
                  }
                  v90 = v157;
LABEL_234:
                  v92 = v91 == (_QWORD)v90;
LABEL_235:
                  if (v64 == 0x400000)
                  {
                    v89 = v92 ^ 1;
                    v65 = v142;
LABEL_249:
                    if (v65 >= 0x41)
                    {
                      v68 = v141;
                      if (v141)
LABEL_251:
                        MEMORY[0x2348A0E84](v68, 0x1000C8000313F17);
                    }
LABEL_252:
                    if (v139 >= 0x41 && v138)
                      MEMORY[0x2348A0E84](v138, 0x1000C8000313F17);
                    if ((v89 & 1) == 0)
                      goto LABEL_258;
                    goto LABEL_256;
                  }
                  if ((v92 & 1) == 0)
                  {
LABEL_256:
                    v94 = *(_QWORD *)(a1[82] + 40);
                    if (v94)
                      (*(void (**)(uint64_t, int *, BOOL))(*(_QWORD *)v94 + 24))(v94, a2, (*a2 & 0xFC0000) != 3670016);
                  }
LABEL_258:
                  if (v152 >= 0x41 && v151)
                    MEMORY[0x2348A0E84](v151, 0x1000C8000313F17);
                  if (v158 >= 0x41 && v157)
                    MEMORY[0x2348A0E84](v157, 0x1000C8000313F17);
                  goto LABEL_264;
                }
              }
              else
              {
                v69 = (unint64_t *)&v151;
              }
              v90 = v157;
              v91 = (unint64_t)v157 | *v69;
              v132 = v91;
              v133 = 0;
              goto LABEL_234;
            }
            v65 = v152;
            v139 = v152;
            if (v152 >= 0x41)
            {
              v66 = &v138;
              llvm::APInt::initSlowCase((llvm::APInt *)&v138, (const llvm::APInt *)&v151);
              v65 = v139;
              if (v139 > 0x40)
              {
                llvm::APInt::andAssignSlowCase((llvm::APInt *)&v138, (const llvm::APInt *)&v157);
                v65 = v139;
                v68 = v138;
                v142 = v139;
                v141 = v138;
                v139 = 0;
                if (v142 > 0x40)
                {
                  if (!llvm::APInt::equalSlowCase((llvm::APInt *)&v141, (const llvm::APInt *)&v157))
                  {
                    v89 = 1;
                    if (!v68)
                      goto LABEL_252;
                    goto LABEL_251;
                  }
                  goto LABEL_187;
                }
                v67 = v157;
LABEL_186:
                if ((unsigned __int8 *)v68 != v67)
                {
                  v89 = 1;
                  goto LABEL_252;
                }
LABEL_187:
                if ((*(_DWORD *)v11 & 0xFC0000) != 0x480000)
                {
                  v89 = 0;
                  goto LABEL_249;
                }
                goto LABEL_188;
              }
            }
            else
            {
              v66 = (unint64_t *)&v151;
            }
            v67 = v157;
            v68 = (unint64_t)v157 & *v66;
            v138 = v68;
            v142 = v65;
            v141 = v68;
            v139 = 0;
            goto LABEL_186;
          }
        }
        v40 = 0;
        goto LABEL_179;
      }
      if (sub_22EFF5C90(v11, 1))
      {
        sub_22F257F94((uint64_t)(v38 + 16), (llvm::APInt *)&v157);
        v48 = v158;
        if (v158 >= 0x41)
        {
          v96 = v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v157);
          v49 = v157;
          if (v96 >= 0x41)
            goto LABEL_277;
          v50 = *(unsigned __int8 **)v157;
          if (*(_QWORD *)v157 == 1)
          {
            v97 = -1;
            goto LABEL_297;
          }
LABEL_276:
          if (!v50)
          {
            v97 = -1;
            goto LABEL_295;
          }
LABEL_277:
          v97 = (*a2 & 0xFC0000) != 3670016;
LABEL_295:
          if (v48 < 0x41 || !v49)
          {
LABEL_298:
            if ((v97 & 0x80000000) == 0)
              return v97 == 1;
            goto LABEL_264;
          }
LABEL_297:
          MEMORY[0x2348A0E84](v49, 0x1000C8000313F17);
          goto LABEL_298;
        }
        v49 = v157;
        if (v157 != (unsigned __int8 *)1)
        {
          v50 = v157;
          goto LABEL_276;
        }
      }
LABEL_264:
      LOBYTE(v157) = 0;
      v95 = sub_22F005310((unsigned __int8 *)a2, (uint64_t)&v157, *a1, 0);
      v21 = v157;
      v22 = v95 == 0;
LABEL_265:
      if (v22)
        return 0xFFFFFFFFLL;
      else
        return v21;
    }
    if (((v4 >> 18) & 0x3E) - 10 > 3)
    {
      if (v5 == 18)
      {
        v28 = sub_22EFFA6B0(*((unsigned __int8 **)a2 + 2));
        v29 = sub_22EEDC4A8(v28);
        v30 = sub_22EFFA6B0(*((unsigned __int8 **)a2 + 3));
        v31 = sub_22EEDC4A8(v30);
        if ((v29 != 0) != (v31 != 0))
        {
          if (v29)
            v31 = v29;
          LOWORD(v157) = 0;
          v158 = 0;
          LODWORD(v159) = 0;
          v32 = 0;
          if (sub_22F00554C((uint64_t)v31, (uint64_t)&v157, *a1, 0, 0))
          {
            if (sub_22E42E5EC((uint64_t)&v160, 0))
            {
              v32 = 0;
            }
            else
            {
              v93 = *(_QWORD *)(a1[82] + 40);
              if (v93)
                (*(void (**)(uint64_t, int *))(*(_QWORD *)v93 + 32))(v93, a2);
              v32 = 1;
            }
          }
          if (v159 >= 2)
            sub_22EF53BC0((uint64_t *)&v159);
          if ((v32 & 1) != 0)
            return 1;
        }
      }
      goto LABEL_264;
    }
    v15 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if (v15)
    {
      while (1)
      {
        v16 = v15;
        v17 = *v15;
        if (v17 > 213)
        {
          if (v17 == 233)
          {
            if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
              goto LABEL_152;
            v19 = v16 + 16;
          }
          else
          {
            if (v17 != 214)
              goto LABEL_152;
            v19 = v16 + 24;
          }
        }
        else if (v17 == 155)
        {
          if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
            goto LABEL_152;
          if (v16[48])
            v19 = v16 + 24;
          else
            v19 = v16 + 32;
        }
        else
        {
          if (v17 != 176)
            goto LABEL_152;
          v18 = *((unsigned int *)v16 + 5);
          if ((_DWORD)v18 == -1)
            goto LABEL_152;
          v19 = &v16[8 * v18 + 40];
        }
        v15 = *(unsigned __int8 **)v19;
        if (v15 == v16)
          goto LABEL_152;
      }
    }
    v16 = 0;
LABEL_152:
    v55 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
    if (v55)
    {
      while (1)
      {
        v56 = v55;
        v57 = *v55;
        if (v57 > 213)
        {
          if (v57 == 233)
          {
            if ((*(_DWORD *)v56 & 0x7C0000) != 0x300000)
              goto LABEL_170;
            v59 = v56 + 16;
          }
          else
          {
            if (v57 != 214)
              goto LABEL_170;
            v59 = v56 + 24;
          }
        }
        else if (v57 == 155)
        {
          if ((**((_DWORD **)v56 + 2) & 0x18000) != 0)
            goto LABEL_170;
          if (v56[48])
            v59 = v56 + 24;
          else
            v59 = v56 + 32;
        }
        else
        {
          if (v57 != 176)
            goto LABEL_170;
          v58 = *((unsigned int *)v56 + 5);
          if ((_DWORD)v58 == -1)
            goto LABEL_170;
          v59 = &v56[8 * v58 + 40];
        }
        v55 = *(unsigned __int8 **)v59;
        if (v55 == v56)
          goto LABEL_170;
      }
    }
    v56 = 0;
LABEL_170:
    if (*v16 == 181)
    {
      v60 = 1;
      v61 = v16;
    }
    else
    {
      if (*v56 != 181)
        goto LABEL_264;
      v60 = 0;
      v61 = v56;
      v56 = v16;
    }
    if (!sub_22EFF5C90(v56, 1))
      goto LABEL_264;
    sub_22F257F94((uint64_t)(v61 + 16), (llvm::APInt *)&v157);
    v62 = v158;
    if (v158 >= 0x41)
    {
      if (v62 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v157) >= 0x41)
      {
LABEL_281:
        if (sub_22F110B50(*(_QWORD *)(*((_QWORD *)v61 + 1) & 0xFFFFFFFFFFFFFFF0)))
        {
          v98 = 1;
        }
        else
        {
          v99 = (unsigned __int8 *)&v157;
          if (v158 >= 0x41)
            v99 = &v157[8 * ((v158 - 1) >> 6)];
          v98 = ((*(_QWORD *)v99 >> (v158 - 1)) & 1) == 0;
        }
        v100 = (*a2 >> 18) & 0x3F;
        if (v100 == 13 || v100 == 11)
          v7 = v60 == v98;
        else
          v7 = v60 != v98;
LABEL_301:
        if (v158 >= 0x41 && v157)
          MEMORY[0x2348A0E84](v157, 0x1000C8000313F17);
        if ((v7 & 0x80000000) == 0)
          return v7 == 1;
        goto LABEL_264;
      }
      v63 = *(unsigned __int8 **)v157;
      if (*(_QWORD *)v157 == 1)
      {
LABEL_287:
        v7 = -1;
        goto LABEL_301;
      }
    }
    else
    {
      v63 = v157;
      if (v157 == (unsigned __int8 *)1)
        goto LABEL_264;
    }
    if (v63)
      goto LABEL_281;
    goto LABEL_287;
  }
  v6 = sub_22EEDABEC(a1, *((_QWORD *)a2 + 2));
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if ((v6 == 1) == ((*a2 & 0xFC0000) != 5242880))
    {
      v23 = sub_22EEDABEC(a1, *((_QWORD *)a2 + 3));
      if (v23 < 0)
        return 0xFFFFFFFFLL;
      v25 = v7 == 1 && v23 == 1;
      v27 = v7 == 1 || v23 == 1;
      if ((*a2 & 0xFC0000) == 0x500000)
        return v27;
      else
        return v25;
    }
    return v7 == 1;
  }
  v20 = sub_22EEDABEC(a1, *((_QWORD *)a2 + 3));
  if ((v20 & 0x80000000) == 0)
  {
    v21 = v20 == 1;
    v22 = v21 == ((*a2 & 0xFC0000) != 5242880);
    goto LABEL_265;
  }
  v51 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  while (1)
  {
    v52 = v51;
    LODWORD(v53) = *v51;
    if (v53 > 0xD5)
    {
      if ((_DWORD)v53 == 233)
      {
        LOBYTE(v53) = *(_DWORD *)v51;
        if ((*(_DWORD *)v51 & 0x7C0000) != 0x300000)
          goto LABEL_192;
        v54 = v51 + 16;
      }
      else
      {
        if ((_DWORD)v53 != 214)
          goto LABEL_192;
        v54 = v51 + 24;
      }
      goto LABEL_149;
    }
    if ((_DWORD)v53 != 155)
      break;
    if ((**((_DWORD **)v51 + 2) & 0x18000) != 0)
    {
      LOBYTE(v53) = -101;
      goto LABEL_192;
    }
    v54 = v51 + 24;
    if (!v52[48])
      v54 = v52 + 32;
    LOBYTE(v53) = -101;
LABEL_149:
    v51 = *(unsigned __int8 **)v54;
    if (v51 == v52)
      goto LABEL_192;
  }
  if ((_DWORD)v53 != 176)
    goto LABEL_192;
  v53 = *((unsigned int *)v51 + 5);
  if ((_DWORD)v53 != -1)
  {
    v54 = &v51[8 * v53 + 40];
    LOBYTE(v53) = -80;
    goto LABEL_149;
  }
  LOBYTE(v53) = -80;
LABEL_192:
  v70 = v53 & 0xFE;
  if (v70 == 112)
    v71 = (unsigned int *)v52;
  else
    v71 = 0;
  v72 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  do
  {
    v73 = v72;
    LODWORD(v74) = *v72;
    if (v74 > 0xD5)
    {
      if ((_DWORD)v74 == 233)
      {
        LOBYTE(v74) = *(_DWORD *)v72;
        if ((*(_DWORD *)v72 & 0x7C0000) != 0x300000)
          break;
        v75 = v72 + 16;
      }
      else
      {
        if ((_DWORD)v74 != 214)
          break;
        v75 = v72 + 24;
      }
    }
    else if ((_DWORD)v74 == 155)
    {
      if ((**((_DWORD **)v72 + 2) & 0x18000) != 0)
        return 0xFFFFFFFFLL;
      v75 = v72 + 24;
      if (!v73[48])
        v75 = v73 + 32;
      LOBYTE(v74) = -101;
    }
    else
    {
      if ((_DWORD)v74 != 176)
        break;
      v74 = *((unsigned int *)v72 + 5);
      if ((_DWORD)v74 == -1)
        return 0xFFFFFFFFLL;
      v75 = &v72[8 * v74 + 40];
      LOBYTE(v74) = -80;
    }
    v72 = *(unsigned __int8 **)v75;
  }
  while (v72 != v73);
  v76 = v74 & 0xFE;
  if (v76 == 112)
    v77 = (unsigned int *)v73;
  else
    v77 = 0;
  if (v70 != 112)
    return 0xFFFFFFFFLL;
  if (v76 != 112)
    return 0xFFFFFFFFLL;
  if (((*v71 >> 18) & 0x3F) - 9 > 6)
    return 0xFFFFFFFFLL;
  if (((*v77 >> 18) & 0x3F) - 9 > 6)
    return 0xFFFFFFFFLL;
  sub_22EEDC2E4((uint64_t)&v157, v71);
  v78 = v157;
  if (!v157)
    return 0xFFFFFFFFLL;
  v79 = v159;
  if (!v159)
    return 0xFFFFFFFFLL;
  v80 = v158;
  sub_22EEDC2E4((uint64_t)&v157, v77);
  if (!v157)
    return 0xFFFFFFFFLL;
  v81 = v159;
  if (!v159)
    return 0xFFFFFFFFLL;
  v82 = v158;
  if (!sub_22F001ED4(v78, v157))
    return 0xFFFFFFFFLL;
  v83 = *v79;
  v84 = *v81;
  if (v83 == 161 && v84 == 161)
  {
    v85 = *(_QWORD *)(*((_QWORD *)v79 + 2) + 16);
    v86 = (_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF8);
    if ((v85 & 4) != 0)
      v86 = (_QWORD *)*v86;
    v87 = *(_QWORD *)(*((_QWORD *)v81 + 2) + 16);
    v88 = (_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF8);
    if ((v87 & 4) != 0)
      v88 = (_QWORD *)*v88;
    if (v86 != v88)
      return 0xFFFFFFFFLL;
  }
  else if ((v83 == 161) != (v84 == 161))
  {
    return 0xFFFFFFFFLL;
  }
  LOWORD(v157) = 0;
  v158 = 0;
  LODWORD(v159) = 0;
  LOWORD(v151) = 0;
  v152 = 0;
  LODWORD(v153) = 0;
  if (sub_22F00554C((uint64_t)v79, (uint64_t)&v157, *a1, 0, 0)
    && (v127 = v82, v128 = v80, sub_22F00554C((uint64_t)v81, (uint64_t)&v151, *a1, 0, 0)))
  {
    v139 = v161;
    if (v161 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v138, (const llvm::APInt *)&v160);
    else
      v138 = v160;
    v102 = v162;
    v140 = v162;
    v103 = v155;
    v136 = v155;
    if (v155 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v135, (const llvm::APInt *)&v154);
      v102 = v140;
      v103 = v136;
    }
    else
    {
      v135 = v154;
    }
    v137 = v156;
    LODWORD(v101) = -1;
    if ((v102 == 0) != (v156 != 0) && v139 == (_DWORD)v103)
    {
      sub_22E51FAEC(v103, v102 != 0, (uint64_t)&v141);
      v144 = v139;
      if (v139 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v143, (const llvm::APInt *)&v138);
      else
        v143 = v138;
      v104 = v140;
      v145 = v140;
      if (v140)
        v105 = llvm::APInt::compare((llvm::APInt *)&v138, (const llvm::APInt *)&v135);
      else
        v105 = llvm::APInt::compareSigned((llvm::APInt *)&v138, (const llvm::APInt *)&v135);
      if (v105 >= 0)
        v106 = (llvm::APInt *)&v135;
      else
        v106 = (llvm::APInt *)&v138;
      v107 = v139;
      v131 = v139;
      if (v139 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v130);
        v104 = v140;
        v107 = v131;
        v109 = v130;
      }
      else
      {
        if (v139)
          v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v139;
        else
          LOBYTE(v108) = 0;
        v109 = v108 & 1;
        v130 = v109;
      }
      v133 = v107;
      v132 = v109;
      v131 = 0;
      v134 = v104;
      sub_22E4EBD50(v106, (uint64_t)&v146);
      v148 = v136;
      if (v136 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v147, (const llvm::APInt *)&v135);
      else
        v147 = v135;
      v149 = v137;
      sub_22E51FC38(v139, v140, (uint64_t)v150);
      if (v133 >= 0x41 && v132)
        MEMORY[0x2348A0E84](v132, 0x1000C8000313F17);
      if (v131 >= 0x41 && v130)
        MEMORY[0x2348A0E84](v130, 0x1000C8000313F17);
      v110 = 0;
      LODWORD(v101) = 1;
      v111 = 1;
      LOBYTE(v129) = 1;
      LOBYTE(v112) = 1;
      LOBYTE(v113) = 1;
      LOBYTE(v114) = 1;
      while (1)
      {
        v115 = v111;
        v116 = v101;
        v117 = sub_22EEDC350(v128, (llvm::APInt *)((char *)&v141 + v110), (llvm::APInt *)&v138);
        v118 = sub_22EEDC350(v127, (llvm::APInt *)((char *)&v141 + v110), (llvm::APInt *)&v135);
        LODWORD(v101) = -1;
        if (v117 < 0 || v118 < 0)
          break;
        v120 = v117 == 1 || v118 == 1;
        v122 = v117 == 1 && v118 == 1;
        if ((*a2 & 0xFC0000) == 0x4C0000)
          v120 = v122;
        v111 = v115 & !v120;
        v101 = v116 & v120;
        v114 = v114 & (v117 == 1);
        v113 = v113 & (v117 == 0);
        v112 = v112 & (v118 == 1);
        v129 = v129 & (v118 == 0);
        v110 += 16;
        if (v110 == 80)
        {
          if (v120)
            v123 = v116;
          else
            v123 = v115;
          if ((v123 & 1) != 0)
          {
            if (((v114 | v113 | v112 | v129) & 1) == 0)
            {
              v124 = *(_QWORD *)(a1[82] + 40);
              if (v124)
                (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v124 + 16))(v124, a2, v101);
            }
          }
          else
          {
            LODWORD(v101) = -1;
          }
          break;
        }
      }
      for (i = 0; i != -80; i -= 16)
      {
        if (*(_DWORD *)&v150[i + 8] >= 0x41u)
        {
          v126 = *(_QWORD *)&v150[i];
          if (v126)
            MEMORY[0x2348A0E84](v126, 0x1000C8000313F17);
        }
      }
      LODWORD(v103) = v136;
    }
    if (v103 >= 0x41 && v135)
      MEMORY[0x2348A0E84](v135, 0x1000C8000313F17);
    if (v139 >= 0x41 && v138)
      MEMORY[0x2348A0E84](v138, 0x1000C8000313F17);
  }
  else
  {
    LODWORD(v101) = -1;
  }
  if (v153 >= 2)
    sub_22EF53BC0(&v153);
  if (v159 >= 2)
    sub_22EF53BC0((uint64_t *)&v159);
  if ((int)v101 >= 0)
    return (_DWORD)v101 == 1;
  else
    return 0xFFFFFFFFLL;
}

unsigned __int8 *sub_22EEDC2E4(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *result;

  v3 = ((unint64_t)*a2 >> 18) & 0x3F;
  v4 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  result = sub_22EEDC4A8(v5);
  if (!result)
  {
    if ((v3 - 10) <= 3)
      LODWORD(v3) = dword_22F49C420[v3 - 10];
    result = sub_22EEDC4A8(v4);
    v4 = v5;
  }
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_22EEDC350(int a1, llvm::APInt *this, llvm::APInt *a3)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;

  switch(a1)
  {
    case 10:
      if (*((_BYTE *)this + 12))
        v3 = llvm::APInt::compare(this, a3);
      else
        v3 = llvm::APInt::compareSigned(this, a3);
      result = v3 >> 31;
      break;
    case 11:
      if (*((_BYTE *)this + 12))
        v5 = llvm::APInt::compare(this, a3);
      else
        v5 = llvm::APInt::compareSigned(this, a3);
      result = v5 > 0;
      break;
    case 12:
      if (*((_BYTE *)this + 12))
        v6 = llvm::APInt::compare(this, a3);
      else
        v6 = llvm::APInt::compareSigned(this, a3);
      result = v6 < 1;
      break;
    case 13:
      if (*((_BYTE *)this + 12))
        v7 = llvm::APInt::compare(this, a3);
      else
        v7 = llvm::APInt::compareSigned(this, a3);
      result = v7 >= 0;
      break;
    case 14:
      if (*((_DWORD *)this + 2) > 0x40u)
        result = llvm::APInt::equalSlowCase(this, a3);
      else
        result = *(_QWORD *)this == *(_QWORD *)a3;
      break;
    case 15:
      if (*((_DWORD *)this + 2) > 0x40u)
        v8 = llvm::APInt::equalSlowCase(this, a3);
      else
        v8 = *(_QWORD *)this == *(_QWORD *)a3;
      result = v8 ^ 1u;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

unsigned __int8 *sub_22EEDC4A8(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 **v9;

  do
  {
    result = a1;
    v3 = *a1;
    if (v3 > 213)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
          break;
        v5 = (unsigned __int8 **)(result + 16);
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = (unsigned __int8 **)(result + 24);
      }
      goto LABEL_15;
    }
    if (v3 == 155)
    {
      if ((**((_DWORD **)result + 2) & 0x18000) != 0)
        break;
      if (result[48])
        v5 = (unsigned __int8 **)(result + 24);
      else
        v5 = (unsigned __int8 **)(result + 32);
      goto LABEL_15;
    }
    if (v3 != 176)
      break;
    v4 = *((unsigned int *)result + 5);
    if ((_DWORD)v4 == -1)
      break;
    v5 = (unsigned __int8 **)&result[8 * v4 + 40];
LABEL_15:
    a1 = *v5;
  }
  while (a1 != result);
  v6 = result;
  do
  {
    v7 = v6;
    LODWORD(v8) = *v6;
    if (v8 > 0xD5)
    {
      if ((_DWORD)v8 == 233)
      {
        LODWORD(v8) = *(_DWORD *)v6;
        if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
          break;
        v9 = (unsigned __int8 **)(v6 + 16);
      }
      else
      {
        if ((_DWORD)v8 != 214)
          break;
        v9 = (unsigned __int8 **)(v6 + 24);
      }
    }
    else if ((_DWORD)v8 == 155)
    {
      if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
        goto LABEL_39;
      v9 = (unsigned __int8 **)(v6 + 24);
      if (!v7[48])
        v9 = (unsigned __int8 **)(v7 + 32);
      LOBYTE(v8) = -101;
    }
    else
    {
      if ((_DWORD)v8 != 176)
        break;
      v8 = *((unsigned int *)v6 + 5);
      if ((_DWORD)v8 == -1)
        goto LABEL_39;
      v9 = (unsigned __int8 **)&v6[8 * v8 + 40];
      LOBYTE(v8) = -80;
    }
    v6 = *v9;
  }
  while (v6 != v7);
  if ((v8 + 102) < 0xF5u)
  {
LABEL_35:
    if (v8 == 233)
    {
      if ((*(_DWORD *)v7 & 0x7C0000) != 0x1C0000)
        goto LABEL_39;
      LOBYTE(v8) = **((_BYTE **)v7 + 2);
    }
    if (v8 == 181)
      return result;
    goto LABEL_39;
  }
  if ((*(_DWORD *)v7 & 0x1FC0000) == 0x780000)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    LOBYTE(v8) = *v7;
    goto LABEL_35;
  }
LABEL_39:
  result = sub_22EFFA6B0(result);
  if (*result != 161)
    return 0;
  if ((*(_DWORD *)(*((_QWORD *)result + 2) + 28) & 0x7F) != 0x43)
    return 0;
  return result;
}

uint64_t sub_22EEDC67C(_QWORD *a1, _BYTE *a2, int a3)
{
  uint64_t *v6;

  if (sub_22EED93A4(a1, a2) || a3 == 1)
  {
    v6 = (uint64_t *)a1[2];
    if (!v6)
    {
      v6 = (uint64_t *)sub_22EED46B8((uint64_t)a1);
      a1[2] = v6;
    }
    sub_22EED9328(a1, v6, (unint64_t)a2);
  }
  return a1[2];
}

void sub_22EEDC6E4(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (sub_22EED93A4(a1, (_BYTE *)a3))
  {
    v6 = a1[85];
    if (v6)
      *(_QWORD *)(v6 + 8) = a2;
  }
  sub_22EEDCA94((uint64_t)a1, a3);
  v8 = (unint64_t *)a2[1];
  v9 = a2[2];
  if (v7)
  {
    v10 = v7;
    if ((unint64_t)v8 >= v9)
    {
      sub_22EED453C(a2, *(_QWORD *)(a1[1] + 32), 1uLL);
      v8 = (unint64_t *)a2[1];
    }
    v11 = v10 | 2;
    *v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    if ((unint64_t)v8 >= v9)
    {
      sub_22EED453C(a2, *(_QWORD *)(a1[1] + 32), 1uLL);
      v8 = (unint64_t *)a2[1];
    }
    *v8 = a3 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v11 = 1;
  }
  v8[1] = v11;
  a2[1] = (uint64_t)(v8 + 2);
}

uint64_t sub_22EEDC7AC(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 **v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned __int8 *v15;
  _QWORD *v16;

  if (!a3)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(result + 656);
  if (!*(_BYTE *)(v4 + 60))
    return result;
  v5 = a3;
  while (1)
  {
    v7 = *v5;
    if (v7 <= 0xAC)
    {
      if (*v5 > 0x90u)
      {
        if (v7 != 145 && (v7 != 153 || ((*(_DWORD *)v5 >> 18) & 0x6F | 0x10) != 0x15))
          return result;
LABEL_15:
        v8 = (unsigned __int8 **)(v5 + 16);
        goto LABEL_22;
      }
      if (*v5 > 0x75u)
      {
        if (v7 - 140 < 3)
          goto LABEL_47;
        if (v7 - 118 >= 2)
        {
          if (v7 != 138)
            return result;
          goto LABEL_47;
        }
        if (*(_BYTE *)(v4 + 61) && (v5[2] & 4) != 0)
        {
          v11 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
          *v11 = a2;
          v11[1] = v5;
          v11[2] = 6;
          v12 = v5 + 40;
          v13 = *v5;
          v14 = v13 == 119;
          if (v13 == 119)
            v15 = v5;
          else
            v15 = 0;
          v16 = v15 + 48;
          if (v14)
            v12 = v16;
          sub_22EEDC7AC(v3, v11, *v12);
        }
        return sub_22EEDCA34(v3, a2, (uint64_t)v5);
      }
      if (v7 == 103)
      {
        if (*(_DWORD *)(a2 + 16) != 3)
          return result;
        result = sub_22EEDC7AC(v3, a2, *((_QWORD *)v5 + 4));
        v8 = (unsigned __int8 **)(v5 + 40);
        v4 = *(_QWORD *)(v3 + 656);
LABEL_22:
        v5 = *v8;
        if (!*v8)
          return result;
        goto LABEL_23;
      }
      if (v7 != 116)
        return result;
      result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v5;
      *(_QWORD *)(result + 16) = 4;
      v10 = (unsigned __int8 **)(v5 + 24);
      goto LABEL_31;
    }
    if (*v5 <= 0xB9u)
    {
      if (v7 != 173)
      {
        if (v7 != 180)
          return result;
        result = sub_22EFFD7E8((uint64_t)v5);
        if (!(_DWORD)result)
          return result;
        v8 = (unsigned __int8 **)*((_QWORD *)v5 + 2);
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (v7 == 214)
    {
      v8 = (unsigned __int8 **)(v5 + 24);
      goto LABEL_22;
    }
    if (v7 != 186)
      break;
    if (*(_DWORD *)(a2 + 16) != 6)
      return result;
    result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 3;
    v9 = *((_QWORD *)v5 + 2);
    v5 = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 4) == 0)
      goto LABEL_32;
    v10 = (unsigned __int8 **)(v5 + 40);
LABEL_31:
    v5 = *v10;
LABEL_32:
    a2 = result;
    if (!v5)
      return result;
    v4 = *(_QWORD *)(v3 + 656);
LABEL_23:
    if (!*(_BYTE *)(v4 + 60))
      return result;
  }
  if (v7 != 200)
    return result;
LABEL_47:
  if ((v5[1] & 3) == 0)
  {
    result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
    if (result)
    {
      if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 < 3)
        return sub_22EEDCA34(v3, a2, (uint64_t)v5);
    }
  }
  return result;
}

uint64_t sub_22EEDCA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  v7 = 0;
  result = sub_22F24C318(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), a3, &v7);
  if ((result & 1) == 0 || !*(_QWORD *)(v7 + 8))
  {
    result = (uint64_t)sub_22F24C2B0(a1 + 344, &v6);
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void sub_22EEDCA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 60))
  {
    v5 = 0;
    if ((sub_22F24C318(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), a2, &v5) & 1) != 0)
    {
      v4 = v5[1];
      if (v4)
      {
        v5 = 0;
        if (sub_22F24C318(*(_QWORD *)(a1 + 344), *(_DWORD *)(a1 + 360), a2, &v5))
        {
          *v5 = -8192;
          *(int32x2_t *)(a1 + 352) = vadd_s32(*(int32x2_t *)(a1 + 352), (int32x2_t)0x1FFFFFFFFLL);
        }
        sub_22F34D2F8(*(_QWORD *)(a1 + 8) + 32, v4);
      }
    }
  }
}

uint64_t sub_22EEDCB58(_BYTE *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  _BOOL8 v5;
  unsigned __int16 *v9;
  int v10;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;

  if (!a2)
    return 1;
  if (*a1)
    return 0;
  if (*(_DWORD *)(a2 + 16) != 2)
    return 1;
  v9 = (unsigned __int16 *)(a3 + 3);
  sub_22F007D7C(a3[3], a4, 0, (uint64_t)&v18);
  if (*(_DWORD *)(a2 + 32) > 0x40u)
  {
    if (!llvm::APInt::equalSlowCase((llvm::APInt *)(a2 + 24), (const llvm::APInt *)&v18))
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 36))
        v10 = llvm::APInt::compare((llvm::APInt *)(a2 + 24), (const llvm::APInt *)&v18);
      else
        v10 = llvm::APInt::compareSigned((llvm::APInt *)(a2 + 24), (const llvm::APInt *)&v18);
      if (v10 >= 1
        && (v12 = *(unsigned __int16 *)a3, (v12 & 0x100) != 0)
        && (v13 = *(unsigned __int8 **)&v9[4 * ((v12 >> 8) & 1)]) != 0)
      {
        sub_22F007D7C(v13, a4, 0, (uint64_t)&v15);
        if (v17)
          v14 = llvm::APInt::compare((llvm::APInt *)&v15, (const llvm::APInt *)(a2 + 24));
        else
          v14 = llvm::APInt::compareSigned((llvm::APInt *)&v15, (const llvm::APInt *)(a2 + 24));
        if ((v14 & 0x80000000) == 0)
          *a1 = 1;
        v5 = v14 >= 0;
        if (v16 >= 0x41 && v15)
          MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_20;
    }
  }
  else if (*(_QWORD *)(a2 + 24) != v18)
  {
    goto LABEL_7;
  }
  v5 = 1;
  *a1 = 1;
LABEL_20:
  if (v19 >= 0x41 && v18)
    MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
  return v5;
}

uint64_t sub_22EEDCCF8(uint64_t a1, unint64_t a2, BOOL a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t *v44;
  int v45;
  int v46;
  int v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t *v69;
  __int128 v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[6];
  void *v74;
  uint64_t v75;
  _QWORD v76[3];

  v76[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
LABEL_42:
    v20 = 0;
    *(_BYTE *)(a1 + 648) = 1;
    return v20;
  }
  v7 = a2;
  while (1)
  {
    v8 = *(unsigned __int8 *)v7;
    if (v8 <= 0x98)
    {
      if (*(unsigned __int8 *)v7 <= 0x90u)
      {
        switch(*(_BYTE *)v7)
        {
          case 'p':
            if ((*(_DWORD *)v7 & 0xFC0000) == 0x800000)
            {
              v20 = sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 16), 0, a4);
              v26 = sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 24), a3, a4);
              if (v26)
                return v26;
              return v20;
            }
            v53 = (*(_DWORD *)v7 >> 18) & 0x3F;
            if ((v53 - 19) <= 1)
            {
              sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 16), 0, a4);
              v54 = sub_22EEDABEC(a1, *(_QWORD *)(v7 + 16));
              if ((v54 & 0x80000000) == 0)
                v54 ^= (*(_DWORD *)v7 & 0xFC0000) == 5242880;
              v55 = *(_DWORD *)(a4 + 4);
              v56 = v55 | v54;
              v58 = v55 == 1 && v54 == 1;
              if (v56 < 0)
                v58 = -1;
              LOBYTE(v71) = 1;
              HIDWORD(v71) = v58;
              v72 = 0;
              v73[0] = 0;
              sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 24), 0, &v71);
              goto LABEL_106;
            }
            if ((v53 - 21) > 0xA)
              goto LABEL_115;
            v59 = sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 24), 0, a4);
            v60 = sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 16), 0, a4);
            if (v60)
              return v60;
            else
              return v59;
          case 'q':
          case 's':
          case 'u':
          case 'v':
          case 'w':
            goto LABEL_48;
          case 'r':
            return *(_QWORD *)(a1 + 16);
          case 't':
            v20 = sub_22EEDCCF8(a1, *(_QWORD *)(v7 + 24), 1, a4);
            if (a3)
              return v20;
            v27 = **(_QWORD **)(v7 + 16);
            v28 = v27 + 72;
            v29 = *(_WORD *)(v27 + 80) & 0x7F;
            v30 = -40;
            if (v29 > 70)
            {
              if (v29 == 83)
                goto LABEL_129;
              if (v29 == 71)
              {
                v30 = -56;
                goto LABEL_129;
              }
              if (v29 != 81)
              {
LABEL_124:
                v61 = v29 - 52;
                v62 = (v29 - 33) >= 5;
                v63 = -48;
                if (!v62)
                  v63 = -64;
                if (v61 >= 6)
                  v30 = v63;
                else
                  v30 = -72;
              }
            }
            else
            {
              if (v29 > 0x18)
                goto LABEL_123;
              if (v29 == 16)
              {
LABEL_57:
                v30 = -48;
                goto LABEL_129;
              }
              if (((1 << v29) & 0x1066) == 0)
              {
                if (v29 == 24)
                  goto LABEL_57;
LABEL_123:
                if (v29 == 70)
                {
                  v30 = -64;
                  goto LABEL_129;
                }
                goto LABEL_124;
              }
            }
LABEL_129:
            v64 = *(_QWORD *)(v28 + v30 + 16);
            v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
            if ((v64 & 4) != 0)
              v65 = (_QWORD *)*v65;
            if (v65)
              v66 = v65 - 8;
            else
              v66 = 0;
            sub_22E3CD31C((uint64_t *)(v66[13] + 96), v66[13]);
            if (((*(unsigned __int16 *)(v66[16] + 8) | (*(unsigned __int8 *)(v66[16] + 10) << 16)) & 0x80000) != 0)
            {
              if (v20)
                *(_QWORD *)(a1 + 24) = v20;
              v67 = sub_22EEDA490(a1);
            }
            else
            {
              if (!*(_BYTE *)a4 || *(_QWORD *)(a4 + 16))
              {
                v68 = *(uint64_t **)(a1 + 16);
                if (v68)
                  goto LABEL_145;
              }
              else if (v20)
              {
                *(_QWORD *)(a1 + 24) = v20;
              }
              v67 = sub_22EED46B8(a1);
            }
            v68 = (uint64_t *)v67;
            *(_QWORD *)(a1 + 16) = v67;
LABEL_145:
            if (*(_BYTE *)a4 && !*(_QWORD *)(a4 + 16))
            {
              *(_QWORD *)(a4 + 8) = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a4 + 16) = v7;
            }
            v69 = (unint64_t *)v68[1];
            v20 = (uint64_t)v68;
            if ((unint64_t)v69 >= v68[2])
            {
              sub_22EED453C(v68, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
              v69 = (unint64_t *)v68[1];
              v20 = *(_QWORD *)(a1 + 16);
            }
            *v69 = v7 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v69[1] = 3;
            v68[1] = (uint64_t)(v69 + 2);
            return v20;
          case 'x':
            v9 = (_BYTE *)sub_22EFBC5B4(*(_QWORD *)(v7 + 16));
            if (!v9)
              goto LABEL_42;
            v7 = (unint64_t)v9;
            if ((*v9 & 0xFE) == 0xAC)
              goto LABEL_17;
            goto LABEL_19;
          case 'y':
            v10 = *(_QWORD *)(v7 + 16);
            v11 = *(_QWORD *)(v10 + 72) & 3;
            if ((_DWORD)v11)
              v12 = (_DWORD)v11 == 3;
            else
              v12 = 1;
            if (v12)
              goto LABEL_42;
            v7 = *(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFFFFCLL;
            if ((*(_BYTE *)(v10 + 68) & 1) == 0)
              goto LABEL_19;
            goto LABEL_18;
          default:
            if (v8 == 102)
            {
              v22 = (_QWORD *)(v7 + 32);
            }
            else
            {
              if (v8 != 103)
                goto LABEL_48;
              v22 = (_QWORD *)(v7 + 24);
            }
            sub_22EEDCCF8(a1, *v22, 0, a4);
            v35 = 24;
            if (*(_BYTE *)v7 != 103)
              v35 = 32;
            v70 = *(_OWORD *)(a1 + 16);
            v36 = sub_22EEDABEC(a1, *(_QWORD *)(v7 + v35));
            v37 = v36 ^ (v36 >= 0);
            v38 = *(_DWORD *)(a4 + 4);
            v39 = v38 | v36;
            v41 = v38 == 1 && v36 == 1;
            if (v39 < 0)
              v41 = -1;
            LOBYTE(v71) = 1;
            HIDWORD(v71) = v41;
            v72 = 0;
            v73[0] = 0;
            if (*(_BYTE *)v7 == 103)
              v42 = 32;
            else
              v42 = 40;
            v43 = a3;
            sub_22EEDCCF8(a1, *(_QWORD *)(v7 + v42), v43, &v71);
            v44 = *(uint64_t **)(a1 + 16);
            *(_OWORD *)(a1 + 16) = v70;
            v45 = *(_DWORD *)(a4 + 4);
            v46 = v45 | v37;
            v48 = v45 == 1 && v37 == 1;
            if (v46 < 0)
              v48 = -1;
            LOBYTE(v74) = 1;
            HIDWORD(v74) = v48;
            v75 = 0;
            v76[0] = 0;
            v49 = 48;
            if (*(_BYTE *)v7 == 103)
              v49 = 40;
            sub_22EEDCCF8(a1, *(_QWORD *)(v7 + v49), v43, &v74);
            if (v73[0] && v76[0])
            {
              v50 = &v74;
              v51 = a1;
              v52 = v44;
            }
            else
            {
              if (v73[0])
              {
                *(_QWORD *)(a1 + 16) = v44;
LABEL_106:
                v50 = &v71;
              }
              else
              {
                v50 = &v74;
              }
              v51 = a1;
              v52 = 0;
            }
            sub_22EEDD4E0(v51, (uint64_t)v50, v52);
            return *(_QWORD *)(a1 + 16);
        }
      }
      if (v8 != 145)
        goto LABEL_48;
      goto LABEL_17;
    }
    if (*(unsigned __int8 *)v7 <= 0xB3u)
    {
      if (v8 != 153 && v8 != 172)
        goto LABEL_48;
LABEL_17:
      v7 += 16;
      goto LABEL_18;
    }
    if (*(unsigned __int8 *)v7 > 0xD5u)
    {
      if (v8 == 214)
      {
        v7 += 24;
LABEL_18:
        v7 = *(_QWORD *)v7;
        goto LABEL_19;
      }
      if (v8 == 224)
        return *(_QWORD *)(a1 + 16);
LABEL_48:
      v23 = a1;
      v24 = (unsigned __int8 *)v7;
      v25 = 0;
      return sub_22EEDD3C8(v23, v24, v25, a4);
    }
    if (v8 == 180)
    {
LABEL_115:
      v25 = a3;
      v23 = a1;
      v24 = (unsigned __int8 *)v7;
      return sub_22EEDD3C8(v23, v24, v25, a4);
    }
    if (v8 == 182)
      break;
    if (v8 != 186)
      goto LABEL_48;
    v13 = *(_QWORD *)(v7 + 16);
    if ((v13 & 4) != 0)
    {
      v15 = sub_22F3B2674(v13 & 0xFFFFFFFFFFFFFFF8);
      v13 = *(_QWORD *)(v7 + 16);
      v14 = v13 & 4;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v74 = v76;
    a3 = v15 != 0;
    v75 = 0x200000000;
    v71 = v73;
    v72 = 0x200000000;
    v16 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
      v16 = *(_QWORD *)(v16 + 40);
    v7 = (unint64_t)sub_22EFF59A4((unsigned __int8 *)v16, (uint64_t)&v74, (uint64_t)&v71);
    if ((_DWORD)v75)
    {
      v17 = (uint64_t *)v74;
      v18 = 8 * v75;
      do
      {
        v19 = *v17++;
        sub_22EEDCCF8(a1, v19, 0, a4);
        v18 -= 8;
      }
      while (v18);
    }
    if (v71 != v73)
      free(v71);
    if (v74 != v76)
      free(v74);
LABEL_19:
    if (!v7)
      goto LABEL_42;
  }
  v20 = *(_QWORD *)(a1 + 16);
  v31 = *(unsigned __int16 *)(v7 + 4);
  if (*(_WORD *)(v7 + 4))
  {
    v32 = (_QWORD *)(v7 + 32);
    v33 = 8 * v31;
    do
    {
      if (*v32)
      {
        v34 = sub_22EEDCCF8(a1, *v32, 1, a4);
        if (v34)
          v20 = v34;
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  return v20;
}

uint64_t sub_22EEDD3C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (*a2 != 182)
  {
    sub_22F0D492C((uint64_t)a2);
    v16 = v18;
    v8 = v20;
    v17 = v19;
    v9 = v21;
    v11 = *((_QWORD *)&v18 + 1);
    v10 = (uint64_t *)v18;
    if ((_QWORD)v18 != v20 || *((_QWORD *)&v18 + 1) != v21)
    {
      do
      {
        v13 = v10;
        if ((v11 & 3) != 0)
        {
          if ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v13 = (_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v13 = (_QWORD *)sub_22F3AC1A8(*v10);
        }
        if (*v13)
        {
          v14 = sub_22EEDCCF8(a1, *v13, a3, a4);
          if (v14)
            v4 = v14;
        }
        if ((v11 & 3) != 0)
        {
          if (v11 < 4)
            sub_22F3F2FE0((uint64_t)&v16, 1);
          else
            sub_22F0D8720((uint64_t)&v16);
        }
        else
        {
          *(_QWORD *)&v16 = v10 + 1;
        }
        v11 = *((_QWORD *)&v16 + 1);
        v10 = (uint64_t *)v16;
      }
      while (v16 != __PAIR128__(v9, v8));
    }
  }
  return v4;
}

uint64_t sub_22EEDD4E0(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v19;

  if (*(_QWORD *)(a2 + 16))
  {
    v5 = result;
    v6 = sub_22EED0954(*(_QWORD *)(result + 8));
    v7 = v6;
    v8 = *(_DWORD *)(a2 + 4) == 0;
    v10 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(v5 + 16);
    v11 = v9 & 0xFFFFFFFFFFFFFFF9;
    if (*(_DWORD *)(a2 + 4))
    {
      v11 = 0;
      v12 = *(uint64_t **)(v5 + 16);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF9 | 2;
    if (v8 || v9 == 0)
      v14 = 2;
    else
      v14 = 0;
    sub_22EED1CAC(v6, v12, (uint64_t *)(v14 | v11), (uint64_t *)(v10 + 32));
    v15 = *(uint64_t **)(a2 + 8);
    if (a3)
      v15 = a3;
    v16 = (unint64_t)v15 & 0xFFFFFFFFFFFFFFF9;
    if (*(_DWORD *)(a2 + 4) == 1)
    {
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = v15;
    }
    if (*(_DWORD *)(a2 + 4) == 1 || v15 == 0)
      v19 = 2;
    else
      v19 = 0;
    result = sub_22EED1CAC(v7, v17, (uint64_t *)(v16 | v19), (uint64_t *)(*(_QWORD *)(v5 + 8) + 32));
    *(_QWORD *)(v5 + 16) = v7;
  }
  return result;
}

void sub_22EEDD5A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_22EEDCA94(a1, a3);
  v7 = (_QWORD *)a2[1];
  v8 = a2[2];
  if (v6)
  {
    v9 = v6;
    if ((unint64_t)v7 >= v8)
    {
      sub_22EED453C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
      v7 = (_QWORD *)a2[1];
    }
    v10 = v9 | 1;
    *v7 = a3 | 3;
  }
  else
  {
    if ((unint64_t)v7 >= v8)
    {
      sub_22EED453C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), 1uLL);
      v7 = (_QWORD *)a2[1];
    }
    *v7 = a3 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v10 = 1;
  }
  v7[1] = v10;
  a2[1] = (uint64_t)(v7 + 2);
}

uint64_t *sub_22EEDD654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int8 *v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v50;
  uint64_t *v51;
  uint64_t v52[3];

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(v4 + 28) & 0x7F;
  if (v4)
    v6 = (*(_DWORD *)(v4 + 28) & 0x7Fu) - 42 >= 0xFFFFFFFD;
  else
    v6 = 0;
  if (v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 80) & 0xFFFFFFFFFFFFFFF8)
                               + ((2 * *(_QWORD *)(v4 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
    v9 = *(uint64_t **)(a1 + 16);
    if ((*(_BYTE *)(v8 + 17) & 8) != 0)
    {
      if (!v9)
      {
        v9 = (uint64_t *)sub_22EED46B8(a1);
        *(_QWORD *)(a1 + 16) = v9;
      }
      sub_22EED9328((_QWORD *)a1, v9, a2);
      v9 = *(uint64_t **)(a1 + 16);
      v10 = sub_22EEDDB7C(v8);
      if (v10)
      {
        v11 = v10;
        do
        {
          v12 = sub_22EED47D4(a1, *(_QWORD *)(v11 + 40), 1, 0);
          if (v12)
            v9 = (uint64_t *)v12;
          v11 = sub_22EEDDB7C(*(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0));
        }
        while (v11);
      }
    }
    return v9;
  }
  if ((v5 - 67) <= 0xFFFFFFF8)
  {
    v7 = a1 + 16;
    return *(uint64_t **)v7;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 656) + 56))
    goto LABEL_30;
  v13 = *(_BYTE *)(v4 + 96);
  if ((v13 & 7) != 2 && ((*(_BYTE *)(v4 + 96) & 7) != 0 || (v13 & 0x18) != 0x10))
    goto LABEL_30;
  if (v5 != 64 && v5 != 62)
  {
    v14 = *(_QWORD *)(v4 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)(v15 + 8);
    v16 = 0;
    v17 = *(_WORD *)(sub_22EFCBB30(v15) + 8) & 0x7F;
    if (v17 == 16 || v17 == 83)
      goto LABEL_31;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x40)
    {
      v18 = *(_QWORD *)(v4 + 16);
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v19 = *(_QWORD *)v19;
      if ((*(_WORD *)(v19 + 8) & 0x7Eu) - 34 < 4)
      {
LABEL_30:
        v16 = 0;
        goto LABEL_31;
      }
    }
  }
  v16 = *(uint64_t **)(a1 + 16);
  if (v16)
  {
    v9 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v16;
    if (*(_BYTE *)(a1 + 648))
      return v9;
  }
  else
  {
    v16 = *(uint64_t **)(a1 + 24);
  }
LABEL_31:
  v20 = (unsigned __int8 *)sub_22EFBC5B4(v4);
  v21 = v20;
  v51 = v16;
  if (v20)
  {
    v22 = *v20;
    v23 = v22 == 173;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 656) + 54) && v22 == 173)
    {
      LOBYTE(v52[0]) = 0;
      v23 = 1;
      HIDWORD(v52[0]) = 1;
      v52[1] = 0;
      v52[2] = 0;
      sub_22EEDCCF8(a1, *((_QWORD *)v20 + 2), 1, (uint64_t)v52);
    }
  }
  else
  {
    v23 = 0;
  }
  v50 = v23;
  if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x3D)
  {
    v24 = *(unsigned int *)(v4 + 100);
    if ((_DWORD)v24)
    {
      v25 = 8 * v24;
      do
      {
        v26 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 96 + v25) + 64);
        if (v26)
        {
          v27 = sub_22EFFED0C(v26);
          if (*v27 == 161)
          {
            v28 = *((_QWORD *)v27 + 2);
            if (v28)
            {
              v29 = sub_22E3CD3D4(*(_QWORD *)a1 + 2032, 24, 3);
              v30 = *(_DWORD *)(v28 + 24);
              v31 = sub_22EEDDB2C(v28);
              *(_BYTE *)v29 = 12;
              if (byte_255E04EB3)
              {
                v32 = sub_22F0D3748(12);
                ++*((_DWORD *)v32 + 2);
              }
              *(_QWORD *)(v29 + 8) = v28;
              *(_DWORD *)(v29 + 16) = v30;
              *(_DWORD *)(v29 + 20) = v31;
              v33 = *(_QWORD *)(a1 + 8);
              v52[0] = v29;
              sub_22EEDDBEC(v33 + 88, v52)[1] = a2;
              *(_QWORD *)(a1 + 16) = sub_22EEDD654(a1, v29);
            }
          }
        }
        v25 -= 8;
      }
      while (v25);
    }
  }
  v7 = a1 + 16;
  v34 = *(uint64_t **)(a1 + 16);
  if (!v34)
  {
    v34 = (uint64_t *)sub_22EED46B8(a1);
    *(_QWORD *)(a1 + 16) = v34;
  }
  sub_22EED9328((_QWORD *)a1, v34, a2);
  if (v21)
  {
    if (*v21 == 106)
      v35 = v21;
    else
      v35 = 0;
  }
  else
  {
    v35 = 0;
  }
  v36 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) & 0xFFFFFFFFFFFFFFF8, 24, 3);
  *v36 = 0;
  v36[1] = a2;
  v36[2] = 0;
  v37 = v21;
  if (v35)
    v37 = (unsigned __int8 *)*((_QWORD *)v35 + 3);
  sub_22EEDC7AC(a1, (uint64_t)v36, v37);
  v9 = *(uint64_t **)(a1 + 16);
  if (v21)
  {
    if (v50)
    {
      v38 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
      v39 = a1;
    }
    else
    {
      v39 = a1;
      v38 = v21;
    }
    v40 = sub_22EED47D4(v39, v38, 0, 0);
    if (v40)
      v9 = (uint64_t *)v40;
  }
  v41 = sub_22EEDDB7C(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v41)
  {
    v42 = v41;
    do
    {
      v43 = sub_22EED47D4(a1, *(_QWORD *)(v42 + 40), 1, 0);
      if (v43)
        v9 = (uint64_t *)v43;
      v42 = sub_22EEDDB7C(*(_QWORD *)(*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0));
    }
    while (v42);
  }
  v44 = *(_QWORD *)(a1 + 128);
  if (v44 || *(_DWORD *)(a1 + 136))
  {
    v45 = *(_QWORD **)(v44 + 8);
    if (*v45 == v4)
    {
      sub_22EED4764(a1, *(uint64_t **)(a1 + 16), v4, a2);
      v44 = *(_QWORD *)(a1 + 128);
      if (!v44)
        goto LABEL_74;
      v45 = *(_QWORD **)(v44 + 8);
    }
    v46 = *(_DWORD *)(a1 + 136) - 1;
    if (v4 == v45[v46])
    {
      *(_DWORD *)(a1 + 136) = v46;
      if (!v46)
      {
        v47 = *(_QWORD *)(v44 + 32);
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(v44 + 40);
        *(_QWORD *)(a1 + 128) = v47;
      }
    }
  }
LABEL_74:
  if (v51)
  {
    *(_QWORD *)(a1 + 24) = v9;
    v48 = sub_22EED0954(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 16) = v48;
    *(_QWORD *)(v48 + 32) = a2 & 0xFFFFFFFFFFFFFFF9;
    sub_22EED1CAC(v48, v51, 0, (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
    sub_22EED1CAC(*(_QWORD *)(a1 + 16), v9, (uint64_t *)(2 * (v9 == 0)), (uint64_t *)(*(_QWORD *)(a1 + 8) + 32));
    return *(uint64_t **)v7;
  }
  return v9;
}

unint64_t sub_22EEDDB2C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  if (!a1)
    return *(unsigned int *)(a1 + 24);
  if ((*(_DWORD *)(a1 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return *(unsigned int *)(a1 + 24);
  v2 = sub_22EFBC5B4(a1);
  if (!v2)
    return *(unsigned int *)(a1 + 24);
  sub_22F0D4E74(v2);
  return HIDWORD(v3);
}

uint64_t sub_22EEDDB7C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;

  v1 = 0;
  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 16);
    if ((v2 & 0xFEu) - 6 >= 0xFFFFFFFC)
    {
      while (v2 != 5 || !*(_QWORD *)(a1 + 40))
      {
        a1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
        LOBYTE(v2) = *(_DWORD *)(a1 + 16);
        if (a1)
          v3 = (*(_DWORD *)(a1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v3 = 0;
        if (!v3)
          return 0;
      }
      return a1;
    }
  }
  return v1;
}

uint64_t *sub_22EEDDBEC(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_22E4D6980(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_22E7B5828(a1, v7);
    v8 = 0;
    sub_22E4D6980(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_22EEDDCC8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;

  if (*(_BYTE *)(*(_QWORD *)(result + 656) + 53))
  {
    v3 = result;
    v4 = *(uint64_t **)(result + 16);
    if (!v4)
    {
      result = sub_22EED46B8(result);
      v4 = (uint64_t *)result;
      *(_QWORD *)(v3 + 16) = result;
    }
    v5 = (unint64_t *)v4[1];
    if ((unint64_t)v5 >= v4[2])
    {
      result = sub_22EED453C(v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 32), 1uLL);
      v5 = (unint64_t *)v4[1];
    }
    *v5 = a2 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v5[1] = 1;
    v4[1] = (uint64_t)(v5 + 2);
  }
  return result;
}

uint64_t sub_22EEDDD4C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

char *sub_22EEDDDE0(uint64_t *a1, char *a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  char *result;
  char *v12;
  __int128 v13;

  v8 = (char *)a1[1];
  if ((unint64_t)&v8[16 * a3] > a1[2])
  {
    v9 = &a2[-*a1];
    sub_22EED453C(a1, a5, a3 + ((uint64_t)&v8[-*a1] >> 4));
    v8 = (char *)a1[1];
    a2 = &v9[*a1];
  }
  v10 = 16 * a3;
  result = &a2[16 * a3];
  if (v8 != a2)
  {
    do
    {
      v12 = &v8[v10];
      v13 = *((_OWORD *)v8 - 1);
      v8 -= 16;
      *((_OWORD *)v12 - 1) = v13;
    }
    while (&v8[v10] != result);
  }
  if (a3)
  {
    do
    {
      *(_OWORD *)a2 = *a4;
      a2 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  a1[1] += 16 * a3;
  return result;
}

void sub_22EEDDE8C(uint64_t a1)
{
  sub_22EED1FAC(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEDDEB0(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  BOOL v5;
  uint64_t v6;
  int v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v14;

  v14 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v14))
    v5 = v14 == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24);
  else
    v5 = 1;
  if (v5)
    return 0;
  v7 = *(_DWORD *)(a1 + 56);
  if ((v7 & 0x80000000) == 0 && *(_DWORD *)(v14 + 8) == v7 && *(_DWORD *)(v14 + 12) == *(_DWORD *)(a1 + 60))
    return 0;
  v8 = (_WORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 16987;
    *((_QWORD *)a3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a3, "[B");
  }
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v10)
  {
    llvm::raw_ostream::write(v9, ".");
  }
  else
  {
    *v10 = 46;
    ++*((_QWORD *)v9 + 4);
  }
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    v6 = 1;
    llvm::raw_ostream::write(v11, "]");
  }
  else
  {
    *v12 = 93;
    ++*((_QWORD *)v11 + 4);
    return 1;
  }
  return v6;
}

void sub_22EEDE008(llvm::raw_ostream *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  _BYTE *v18;
  __int128 v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
    case 4:
    case 7:
      v6 = *(_QWORD *)(a3 + 16);
      v7 = 1;
      v8 = &v19;
      goto LABEL_11;
    case 1:
    case 5:
    case 8:
      v6 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&v19 = *(_QWORD *)(a3 + 16);
      v8 = (__int128 *)((char *)&v19 + 8);
      v7 = 2;
      goto LABEL_11;
    case 2:
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ");
      }
      sub_22EEDE368(this, a2, *(uint64_t **)(a3 + 16));
      return;
    case 3:
      v10 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ");
      }
      sub_22EEDE368(this, a2, *(uint64_t **)(a3 + 16));
      *(_QWORD *)&v19 = *(_QWORD *)(a3 + 24);
      v11 = (uint64_t *)&v19;
      v12 = (char *)&v19 + 8;
      goto LABEL_12;
    case 6:
      v6 = *(_QWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 16);
      v8 = (__int128 *)v20;
      v7 = 3;
LABEL_11:
      *(_QWORD *)v8 = v6;
      v12 = (char *)&v20[v7 - 2];
      v11 = (uint64_t *)&v19;
      do
      {
LABEL_12:
        v13 = *v11;
        if (*v11)
        {
          v14 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v14 > 1uLL)
          {
            *v14 = 8236;
            *((_QWORD *)this + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ");
          }
          (*(void (**)(uint64_t, uint64_t, llvm::raw_ostream *))(*(_QWORD *)a2 + 16))(a2, v13, this);
        }
        ++v11;
      }
      while (v11 != (uint64_t *)v12);
      return;
    case 9:
      v15 = *(_QWORD *)(a3 + 32);
      if (v15)
      {
        v16 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
        {
          *v16 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ");
        }
        (*(void (**)(uint64_t, uint64_t, llvm::raw_ostream *))(*(_QWORD *)a2 + 16))(a2, v15, this);
      }
      v17 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v17 > 1uLL)
      {
        *v17 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ");
      }
      goto LABEL_25;
    case 0xA:
LABEL_25:
      (*(void (**)(uint64_t, _QWORD, llvm::raw_ostream *))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a3 + 16), this);
      v18 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v18)
      {
        llvm::raw_ostream::write(this, "+");
      }
      else
      {
        *v18 = 43;
        ++*((_QWORD *)this + 4);
      }
      llvm::raw_ostream::operator<<();
      break;
    default:
      return;
  }
}

void sub_22EEDE368(llvm::raw_ostream *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int *v17;
  const void *v18;
  size_t v19;
  unsigned int v20;
  void *v21;
  _BYTE *v22;
  _DWORD *v23;
  _BYTE *v24;
  void *v25;
  const char *v26;
  llvm::raw_ostream *v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;

  v6 = *a3;
  v7 = *a3 & 6;
  if (v7 == 2)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_12;
  }
  if (v7)
  {
    v13 = *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 56)
                    + 8 * *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 64)
                    - 8);
LABEL_12:
    v14 = *(_QWORD *)(v13 + 40);
    v15 = v14 & 7;
    v12 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      v16 = 1;
    else
      v16 = v12 == 0;
    if (v16)
      goto LABEL_20;
    goto LABEL_16;
  }
  v8 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 35 >= 3)
    v9 = 0;
  else
    v9 = v8;
  v10 = *(_QWORD *)(v9 + 40);
  v11 = (v10 & 7) != 0;
  v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (!v12)
    v11 = 1;
  if (!v11)
  {
LABEL_16:
    v17 = *(unsigned int **)(v12 + 16);
    v20 = *v17;
    v18 = v17 + 4;
    v19 = v20;
    v21 = (void *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v20 <= *((_QWORD *)a1 + 3) - (_QWORD)v21)
    {
      if (v19)
      {
        memcpy(v21, v18, v19);
        *((_QWORD *)a1 + 4) += v19;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, (const char *)v18);
    }
  }
LABEL_20:
  v22 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v22)
  {
    llvm::raw_ostream::write(a1, "(");
  }
  else
  {
    *v22 = 40;
    ++*((_QWORD *)a1 + 4);
  }
  v23 = (_DWORD *)a3[1];
  if (v23)
  {
    sub_22E462F04((unint64_t *)&v31, *(unsigned int **)(a2 + 64));
    sub_22F0D9044(v23, (uint64_t)a1, a2, &v31, 0, "\n", 1uLL, 0);
  }
  v24 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v24)
  {
    llvm::raw_ostream::write(a1, ")");
  }
  else
  {
    *v24 = 41;
    ++*((_QWORD *)a1 + 4);
  }
  if ((*(_BYTE *)a3 & 6) != 0)
  {
    v25 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v25 <= 0x14uLL)
    {
      v26 = " (Member initializer)";
      v27 = a1;
LABEL_34:
      llvm::raw_ostream::write(v27, v26);
      return;
    }
    qmemcpy(v25, " (Member initializer)", 21);
    v30 = *((_QWORD *)a1 + 4) + 21;
  }
  else
  {
    v28 = (_OWORD *)*((_QWORD *)a1 + 4);
    v29 = *((_QWORD *)a1 + 3) - (_QWORD)v28;
    if ((*((_WORD *)a3 + 14) & 1) != 0)
    {
      if (v29 <= 0x18)
      {
        v26 = " (Delegating initializer)";
        v27 = a1;
        goto LABEL_34;
      }
      qmemcpy(v28, " (Delegating initializer)", 25);
      v30 = *((_QWORD *)a1 + 4) + 25;
    }
    else
    {
      if (v29 <= 0x12)
      {
        v26 = " (Base initializer)";
        v27 = a1;
        goto LABEL_34;
      }
      *(_DWORD *)((char *)v28 + 15) = 695362938;
      *v28 = *(_OWORD *)" (Base initializer)";
      v30 = *((_QWORD *)a1 + 4) + 19;
    }
  }
  *((_QWORD *)a1 + 4) = v30;
}

llvm::raw_ostream *sub_22EEDE604(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *result;
  BOOL v6;
  int v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = 0;
  result = (llvm::raw_ostream *)sub_22F24C318(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), a2, &v12);
  if ((_DWORD)result)
    v6 = v12 == *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *(_DWORD *)(a1 + 56);
    if (v7 < 0 || *(_DWORD *)(v12 + 8) != v7 || *(_DWORD *)(v12 + 12) != *(_DWORD *)(a1 + 60))
    {
      v8 = (_WORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v8 > 1uLL)
      {
        *v8 = 16987;
        *((_QWORD *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, "[B");
      }
      v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if (*((_BYTE **)v9 + 3) == v10)
      {
        llvm::raw_ostream::write(v9, ".");
      }
      else
      {
        *v10 = 46;
        ++*((_QWORD *)v9 + 4);
      }
      result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v11 = (_BYTE *)*((_QWORD *)result + 4);
      if (*((_BYTE **)result + 3) == v11)
      {
        return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "]");
      }
      else
      {
        *v11 = 93;
        ++*((_QWORD *)result + 4);
      }
    }
  }
  return result;
}

void sub_22EEDE758(uint64_t a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x3F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
        sub_22EEDEE34(a1, a2);
        return;
      default:
        goto LABEL_8;
    }
  }
  if (a2 && v2 == 233)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x1F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        sub_22F0D9044(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), 0, "\n", 1uLL, 0);
        return;
      default:
LABEL_8:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22EEDE848()
{
  _BYTE *v0;
  uint64_t v1;

  return sub_22EEDEF48(v1, v0);
}

llvm::raw_ostream *sub_22EEDE860()
{
  llvm::raw_ostream **v0;
  llvm::raw_ostream *result;
  _DWORD *v2;

  result = *v0;
  v2 = (_DWORD *)*((_QWORD *)*v0 + 4);
  if (*((_QWORD *)*v0 + 3) - (_QWORD)v2 <= 6uLL)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "try ...");
  *(_DWORD *)((char *)v2 + 3) = 774778400;
  *v2 = 544830068;
  *((_QWORD *)result + 4) += 7;
  return result;
}

void sub_22EEDEE34(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  _DWORD *v5;
  int v6;
  llvm::raw_ostream *v7;
  int *v8;
  unint64_t v9;
  const char *v10;
  int v11;

  v4 = *a2;
  if (((*a2 >> 18) & 0x3F) - 19 >= 2)
  {
    sub_22F0D9044(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), 0, "\n", 1uLL, 0);
    return;
  }
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    sub_22F0D9044(v5, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), 0, "\n", 1uLL, 0);
    v4 = *a2;
  }
  v6 = v4 & 0xFC0000;
  v7 = *(llvm::raw_ostream **)a1;
  v8 = *(int **)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v8;
  if (v6 == 5242880)
  {
    if (v9 <= 6)
    {
      v10 = " || ...";
LABEL_10:
      llvm::raw_ostream::write(v7, v10);
      return;
    }
    *(int *)((char *)v8 + 3) = 774778400;
    v11 = 545029152;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = " && ...";
      goto LABEL_10;
    }
    *(int *)((char *)v8 + 3) = 774778400;
    v11 = 539371040;
  }
  *v8 = v11;
  *((_QWORD *)v7 + 4) += 7;
}

llvm::raw_ostream *sub_22EEDEF48(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _DWORD *v4;
  llvm::raw_ostream *result;
  uint64_t v6;

  v3 = 32;
  if (*a2 == 103)
    v3 = 24;
  v4 = *(_DWORD **)&a2[v3];
  if (v4)
    sub_22F0D9044(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), 0, "\n", 1uLL, 0);
  result = *(llvm::raw_ostream **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v6) <= 0xB)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, " ? ... : ...");
  *(_DWORD *)(v6 + 8) = 774778400;
  *(_QWORD *)v6 = *(_QWORD *)" ? ... : ...";
  *((_QWORD *)result + 4) += 12;
  return result;
}

void sub_22EEDEFF4(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29[2];
  _DWORD v30[14];
  void *v31;
  uint64_t v32;
  _QWORD v33[12];

  v33[11] = *MEMORY[0x24BDAC8D0];
  v31 = v33;
  v32 = 0xB00000000;
  v4 = *(_DWORD *)(a1 + 64);
  v29[0] = v30;
  v29[1] = (void *)0x600000000;
  sub_22E47EDD0((uint64_t)v29, (v4 + 63) >> 6, 0);
  v30[12] = v4;
  v28 = *(_DWORD *)(a2 + 48);
  v5 = sub_22F34D108(a1 + 72, &v28);
  v6 = v5;
  v7 = *(_DWORD *)(a1 + 64);
  v8 = v5[4];
  if ((v5[18] & 0x3F) != 0)
  {
    v27 = *((_QWORD *)v5 + 1) + 8 * v8;
    *(_QWORD *)(v27 - 8) &= ~(-1 << (v5[18] & 0x3F));
  }
  v9 = v8;
  v10 = v5 + 2;
  v5[18] = v7;
  v11 = v7 + 63;
  if ((_DWORD)v8 != (v7 + 63) >> 6)
  {
    v12 = v11 >> 6;
    if (v8 > v12)
    {
      v5[4] = v12;
      v9 = v11 >> 6;
    }
    else
    {
      v13 = v8;
      if (v12 > v5[5])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v6[4];
        v9 = v6[4];
      }
      if (v12 != v8)
        bzero((void *)(*v10 + 8 * v13), 8 * (v12 - v8));
      v9 += v12 - v8;
      v6[4] = v9;
      v7 = v6[18];
    }
  }
  v14 = v7 & 0x3F;
  if (v14)
    *(_QWORD *)(*v10 + 8 * v9 - 8) &= ~(-1 << v14);
  v15 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v32;
  }
  *((_QWORD *)v31 + v15) = a2;
  v16 = __CFADD__((_DWORD)v32, 1);
  v17 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  if (!v16)
  {
    v18 = 1;
    do
    {
      while (1)
      {
        v19 = *((_QWORD *)v31 + --v17);
        LODWORD(v32) = v17;
        v20 = *(unsigned int *)(v19 + 48);
        v21 = v20 >> 6;
        v22 = *((_QWORD *)v29[0] + (v20 >> 6));
        v23 = 1 << v20;
        if ((v23 & v22) == 0)
          break;
        if (!v17)
          goto LABEL_29;
      }
      *((_QWORD *)v29[0] + v21) = v23 | v22;
      if ((v18 & 1) == 0)
        *(_QWORD *)(*v10 + 8 * v21) |= v23;
      v24 = *(uint64_t **)(v19 + 56);
      v25 = *(uint64_t **)(v19 + 64);
      while (v24 != v25)
      {
        v26 = *v24;
        if (*v24)
        {
          if (v17 >= HIDWORD(v32))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = v32;
          }
          *((_QWORD *)v31 + v17) = v26;
          v17 = v32 + 1;
          LODWORD(v32) = v32 + 1;
        }
        v24 += 2;
      }
      v18 = 0;
    }
    while (v17);
  }
LABEL_29:
  if (v29[0] != v30)
    free(v29[0]);
  if (v31 != v33)
    free(v31);
}

uint64_t sub_22EEDF2D0(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 80 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22EEDF36C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 80 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F34D00C(a1, (uint64_t)v4, (uint64_t)v4 + 80 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(80 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 80 * v10;
      do
      {
        *result = -1;
        result += 20;
        v11 -= 80;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EEDF438(uint64_t a1)
{
  unint64_t v1;
  _DWORD *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  int v15;
  int v16;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a1 + 40) & 7) != 0 || v1 == 0)
    return 0;
  v3 = *(_DWORD **)(v1 + 16);
  v6 = *v3;
  v4 = (unsigned __int8 *)(v3 + 4);
  v5 = v6;
  if (!v6)
    return 0;
  v7 = &v4[v5];
  v8 = v4;
  while (1)
  {
    v9 = *v8;
    if (v9 == 67)
      goto LABEL_12;
    if (v9 != 99)
      goto LABEL_11;
    v10 = v4;
    if (v8 != v4)
    {
      if ((word_22F4ADB24[*(v8 - 1)] & 0x60) != 0)
      {
LABEL_11:
        ++v8;
        goto LABEL_33;
      }
LABEL_12:
      v10 = v8;
    }
    v8 = v10 + 1;
    if (v10 + 1 == v7)
      return 0;
    v11 = (unsigned __int8 *)(v5 >= v8 - v4 ? v8 - v4 : v5);
    v12 = &v11[(_QWORD)v4];
    v13 = v5 - (_QWORD)v11;
    if (v13 >= 5)
      break;
    if (v13 >= 3)
      goto LABEL_24;
LABEL_33:
    if (v8 == v7)
      return 0;
  }
  if (*(_DWORD *)v12 == 1952540018 && v12[4] == 101)
  {
    v18 = 5;
    goto LABEL_31;
  }
LABEL_24:
  v15 = *(unsigned __int16 *)v12;
  v16 = v12[2];
  if (v15 != 28783 || v16 != 121)
    goto LABEL_33;
  v18 = 3;
LABEL_31:
  v8 += v18;
  if (v8 != v7 && (word_22F4ADB24[*v8] & 0x40) != 0)
    goto LABEL_33;
  return 1;
}

unint64_t sub_22EEDF554(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;

  if (*a2 != 173 || (a2[2] & 4) != 0 || (a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2)) != 0)
  {
    while (1)
    {
      v3 = (uint64_t)a2;
      v4 = *a2;
      if (v4 > 0xD5)
      {
        if (v4 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_20;
          v6 = a2 + 16;
        }
        else
        {
          if (v4 != 214)
            goto LABEL_20;
          v6 = a2 + 24;
        }
      }
      else if (v4 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_20;
        if (a2[48])
          v6 = a2 + 24;
        else
          v6 = a2 + 32;
      }
      else
      {
        if (v4 != 176)
          goto LABEL_20;
        v5 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v5 == -1)
          goto LABEL_20;
        v6 = &a2[8 * v5 + 40];
      }
      a2 = *(unsigned __int8 **)v6;
      if (*(_QWORD *)v6 == v3)
        goto LABEL_20;
    }
  }
  v3 = 0;
LABEL_20:
  v8 = 0;
  if (sub_22F34E2E8(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), v3, &v8))
    return v8;
  else
    return *(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6);
}

uint64_t sub_22EEDF660(_DWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1 == 1)
  {
    v5 = a1 + 2;
    return *v5;
  }
  if (v2 == 5)
  {
    v10 = *((_QWORD *)a1 + 1);
    v11 = 0;
    if (sub_22F24C318(*(_QWORD *)(a2 + 40), *(_DWORD *)(a2 + 56), v10, &v11))
    {
      v7 = v11;
      v8 = *(_QWORD *)(a2 + 40);
      v9 = *(unsigned int *)(a2 + 56);
      goto LABEL_15;
    }
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(unsigned int *)(a2 + 56);
LABEL_14:
    v7 = v8 + 16 * v9;
    goto LABEL_15;
  }
  if (v2 != 4)
    return 0;
  v6 = *((_QWORD *)a1 + 1);
  v11 = 0;
  if (!sub_22F24C318(*(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 32), v6, &v11))
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(unsigned int *)(a2 + 32);
    goto LABEL_14;
  }
  v7 = v11;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned int *)(a2 + 32);
LABEL_15:
  if (v7 == v8 + 16 * v9)
    return 0;
  v5 = (unsigned int *)(v7 + 8);
  return *v5;
}

_QWORD *sub_22EEDF734(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _QWORD *result;
  uint64_t v6;

  v6 = a3;
  if (a2 == 4)
    result = sub_22F29449C(a1 + 16, &v6);
  else
    result = sub_22F29449C(a1 + 40, &v6);
  *((_DWORD *)result + 2) = a4;
  return result;
}

void sub_22EEDF788(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *p_p;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  void **v40;
  void *v41;
  void *v42[2];
  char v43;
  void *__p;
  uint64_t v45;
  char v46;

  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    i = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      for (i = *(uint64_t **)v8; *(_WORD *)(*i + 32) != 139; ++i)
      {
        v12 -= 8;
        if (!v12)
          return;
      }
    }
    if (i != &v9[v10])
    {
      do
      {
        v14 = *v9++;
        v13 = v14;
      }
      while (*(_WORD *)(v14 + 32) != 139);
      v15 = a1[1];
      if (*(_DWORD *)a2 != 4)
      {
        v16 = sub_22EEDF660((_DWORD *)a2, a1[1]);
        if (!v16)
          return;
        v17 = v16;
        v18 = *(unsigned int *)(v13 + 36);
        if ((_DWORD)v18)
        {
          v19 = *(int **)(v13 + 40);
          v20 = 4 * v18;
          do
          {
            v21 = *v19;
            v22 = v21 > 2 ? 0 : dword_22F49CA00[v21];
            if (v22 == v16)
              return;
            ++v19;
            v20 -= 4;
          }
          while (v20);
        }
        v23 = *(_QWORD *)(*a1 + 64);
        sub_22EFC683C((uint64_t *)(a3 + 40), &__p);
        if (v46 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v46 >= 0)
          v25 = v46 & 0x7F;
        else
          v25 = v45;
        (*(void (**)(uint64_t, void *, uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v23 + 64))(v23, p_p, v25, off_24FAB9908[v17 - 1], qword_22F49C9C8[v17 - 1], a4);
LABEL_25:
        if (v46 < 0)
          operator delete(__p);
        return;
      }
      v26 = *(_QWORD *)(a2 + 8);
      __p = 0;
      if (sub_22F24C318(*(_QWORD *)(v15 + 16), *(_DWORD *)(v15 + 32), v26, &__p))
      {
        v27 = __p;
        v28 = *(_QWORD *)(v15 + 16);
        v29 = *(unsigned int *)(v15 + 32);
      }
      else
      {
        v28 = *(_QWORD *)(v15 + 16);
        v29 = *(unsigned int *)(v15 + 32);
        v27 = (_DWORD *)(v28 + 16 * v29);
      }
      if (v27 == (_DWORD *)(v28 + 16 * v29))
        return;
      v30 = v27[2];
      if (!v30)
        return;
      v31 = *(unsigned int *)(v13 + 36);
      if (!(_DWORD)v31)
      {
LABEL_40:
        v36 = *(_QWORD *)(*a1 + 64);
        v37 = (uint64_t *)(a3 + 40);
        v38 = &__p;
        sub_22EFC683C(v37, &__p);
        if (v46 >= 0)
        {
          v39 = v46 & 0x7F;
        }
        else
        {
          v38 = __p;
          v39 = v45;
        }
        sub_22EFC683C((uint64_t *)(*(_QWORD *)(a2 + 8) + 40), v42);
        if (v43 >= 0)
          v40 = v42;
        else
          v40 = (void **)v42[0];
        if (v43 >= 0)
          v41 = (void *)(v43 & 0x7F);
        else
          v41 = v42[1];
        (*(void (**)(uint64_t, void *, uint64_t, void **, void *, char *, _QWORD, _QWORD))(*(_QWORD *)v36 + 72))(v36, v38, v39, v40, v41, off_24FAB9908[v30 - 1], qword_22F49C9C8[v30 - 1], a4);
        if (v43 < 0)
          operator delete(v42[0]);
        goto LABEL_25;
      }
      v32 = *(int **)(v13 + 40);
      v33 = 4 * v31;
      while (1)
      {
        v34 = *v32;
        v35 = v34 > 2 ? 0 : dword_22F49CA00[v34];
        if (v35 == v30)
          break;
        ++v32;
        v33 -= 4;
        if (!v33)
          goto LABEL_40;
      }
    }
  }
}

uint64_t sub_22EEDFA54(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  _BOOL4 v7;
  unsigned __int8 *v8;
  _BOOL8 v9;
  unint64_t i;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _BYTE v76[24];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _OWORD v81[3];
  uint64_t v82;

  v7 = *a2 == 141 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 54 < 4;
  if (v7 < *((_DWORD *)a2 + 4))
  {
    v8 = a2 + 8;
    v9 = v7;
    for (i = v7; i < *((unsigned int *)a2 + 4); ++i)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v11)
        v12 = *(_BYTE *)(v11 + 16) == 26;
      else
        v12 = 0;
      if (!v12)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          break;
        v11 = sub_22F10CF48(v11);
        if (!v11)
          break;
      }
      if (i - v9 >= (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38))
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(a4 + 120) + 8 * (i - v9));
      v14 = *(_QWORD *)(v13 + 48);
      v15 = sub_22EEDF554((uint64_t)a1, *(unsigned __int8 **)&v8[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8 * i+ ((unint64_t)*(unsigned int *)a2 >> 24)]);
      if (a1[2] + ((unint64_t)*((unsigned int *)a1 + 8) << 6) != v15)
      {
        v16 = (__int128 *)(v15 + 8);
        if ((*(_DWORD *)(v15 + 8) & 0xFFFFFFFE) != 2)
        {
          v17 = *(_OWORD *)(v15 + 24);
          v77 = *v16;
          v78 = v17;
          v79 = *(_OWORD *)(v15 + 40);
          v80 = *(_QWORD *)(v15 + 56);
          if ((*(_BYTE *)(v13 + 29) & 1) != 0)
          {
            sub_22EFC8E88(v13);
            v19 = *(uint64_t **)v18;
            v20 = *(unsigned int *)(v18 + 8);
            v21 = *(uint64_t **)v18;
            if ((_DWORD)v20)
            {
              v22 = 8 * v20;
              v21 = *(uint64_t **)v18;
              while (*(_WORD *)(*v21 + 32) != 277)
              {
                ++v21;
                v22 -= 8;
                if (!v22)
                  goto LABEL_24;
              }
            }
            if (v21 != &v19[v20])
            {
              do
              {
                v24 = *v19++;
                v23 = v24;
              }
              while (*(_WORD *)(v24 + 32) != 277);
              v25 = sub_22EEDF660(&v77, a1[1]);
              v26 = dword_22F49CA00[*(int *)(v23 + 36)];
              if (v25 != v26)
              {
                v74 = *(_QWORD *)(*a1 + 64);
                v73 = v25;
                sub_22EFF605C(*(_QWORD *)&v8[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                                           + 8 * i
                                           + ((unint64_t)*(unsigned int *)a2 >> 24)]);
                (*(void (**)(uint64_t, _QWORD, char *, _QWORD, char *, _QWORD))(*(_QWORD *)v74 + 40))(v74, v27, off_24FAB9908[v26 - 1], qword_22F49C9C8[v26 - 1], off_24FAB9920[v73], qword_22F49C9E0[v73]);
              }
            }
          }
LABEL_24:
          if ((*(_DWORD *)v16 & 0xFFFFFFFE) == 4)
          {
            if ((*(_BYTE *)(v13 + 29) & 1) == 0)
              goto LABEL_34;
            sub_22EFC8E88(v13);
            v29 = *(uint64_t **)v28;
            v30 = *(unsigned int *)(v28 + 8);
            v31 = *(uint64_t **)v28;
            if ((_DWORD)v30)
            {
              v32 = 8 * v30;
              v31 = *(uint64_t **)v28;
              while (*(_WORD *)(*v31 + 32) != 299)
              {
                ++v31;
                v32 -= 8;
                if (!v32)
                  goto LABEL_34;
              }
            }
            if (v31 == &v29[v30])
            {
LABEL_34:
              v39 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 41
                || sub_22EEE0018(v14))
              {
                v35 = a1[1];
                v37 = v77;
                v38 = *((_QWORD *)&v77 + 1);
                v36 = 3;
              }
              else
              {
                v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                if (v40 != 39 && (v40 & 0xFE) != 0x28)
                  continue;
                v41 = sub_22F10ACF8(*v39);
                if ((v41 & 1) != 0 || (*(_BYTE *)((v41 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
                {
                  v42 = sub_22F10AEAC(*v39);
                  if (!v42 || !sub_22EEE1DFC(v42))
                    continue;
                }
                v35 = a1[1];
                v37 = v77;
                v38 = *((_QWORD *)&v77 + 1);
                v36 = 1;
              }
            }
            else
            {
              do
              {
                v34 = *v29++;
                v33 = v34;
              }
              while (*(_WORD *)(v34 + 32) != 299);
              v35 = a1[1];
              v36 = dword_22F49CA00[*(int *)(v33 + 36)];
              v37 = v77;
              v38 = *((_QWORD *)&v77 + 1);
            }
            sub_22EEDF734(v35, v37, v38, v36);
          }
        }
      }
    }
  }
  if (!a3)
    return 0;
  v43 = sub_22EEDF554((uint64_t)a1, a3);
  v44 = (uint64_t)(a1 + 2);
  if (a1[2] + ((unint64_t)*((unsigned int *)a1 + 8) << 6) == v43)
    return 0;
  v45 = *(_OWORD *)(v43 + 24);
  v81[0] = *(_OWORD *)(v43 + 8);
  v81[1] = v45;
  v81[2] = *(_OWORD *)(v43 + 40);
  v82 = *(_QWORD *)(v43 + 56);
  sub_22EFF605C((uint64_t)a2);
  sub_22EEDF788(a1, (uint64_t)v81, a4, v46);
  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    goto LABEL_62;
  sub_22EFC8E88(a4);
  v48 = *(uint64_t **)v47;
  v49 = *(unsigned int *)(v47 + 8);
  v50 = *(uint64_t **)v47;
  if ((_DWORD)v49)
  {
    v51 = 8 * v49;
    v50 = *(uint64_t **)v47;
    while (*(_WORD *)(*v50 + 32) != 308)
    {
      ++v50;
      v51 -= 8;
      if (!v51)
        goto LABEL_62;
    }
  }
  if (v50 == &v48[v49])
  {
LABEL_62:
    if ((*(_BYTE *)(a4 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a4);
      v58 = *((unsigned int *)v57 + 2);
      if ((_DWORD)v58)
      {
        v59 = 8 * v58;
        for (j = *v57; *(_WORD *)(*(_QWORD *)j + 32) != 329; j += 8)
        {
          v59 -= 8;
          if (!v59)
            return 0;
        }
      }
      else
      {
        j = *v57;
      }
      if (j != *v57 + 8 * v58 && LODWORD(v81[0]) == 4)
      {
        v62 = *((_QWORD *)&v81[0] + 1);
        sub_22EFC8E88(a4);
        v64 = *v63;
        v65 = *((unsigned int *)v63 + 2);
        if ((_DWORD)v65 && *(_WORD *)(*v64 + 32) != 329)
        {
          v66 = 8 * v65 - 8;
          v67 = *v63;
          do
          {
            v68 = v67[1];
            ++v67;
            v66 -= 8;
          }
          while (*(_WORD *)(v68 + 32) != 329);
        }
        do
        {
          v70 = *v64++;
          v69 = v70;
        }
        while (*(_WORD *)(v70 + 32) != 329);
        if (*(_DWORD *)(v69 + 36) == 1)
          v71 = 2;
        else
          v71 = 3;
        *(_QWORD *)&v77 = a2;
        DWORD2(v77) = 2;
        *(_QWORD *)&v78 = v62;
        DWORD2(v78) = v71;
        sub_22F34E37C((uint64_t)v76, v44, (uint64_t *)&v77, (__int128 *)((char *)&v77 + 8));
      }
    }
    return 0;
  }
  do
  {
    v53 = *v48++;
    v52 = v53;
  }
  while (*(_WORD *)(v53 + 32) != 308);
  if (LODWORD(v81[0]) == 5)
  {
    v72 = a1[1];
    v55 = dword_22F49CA00[*(int *)(v52 + 36)];
    *(_QWORD *)&v77 = *((_QWORD *)&v81[0] + 1);
    v56 = sub_22F29449C(v72 + 40, (uint64_t *)&v77);
    goto LABEL_82;
  }
  if (LODWORD(v81[0]) != 4)
    return 0;
  v54 = a1[1];
  v55 = dword_22F49CA00[*(int *)(v52 + 36)];
  *(_QWORD *)&v77 = *((_QWORD *)&v81[0] + 1);
  v56 = sub_22F29449C(v54 + 16, (uint64_t *)&v77);
LABEL_82:
  *((_DWORD *)v56 + 2) = v55;
  return 1;
}

BOOL sub_22EEE0018(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v2 == 39)
    return 0;
  if ((v2 & 0xFE) == 0x28)
    return 0;
  v3 = sub_22F10C2A4(v1);
  return v3 && (*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 <= 2 && sub_22F327708(v3);
}

uint64_t sub_22EEE0080(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 35 >= 3)
    v1 = 0;
  sub_22EFC8E88(v1);
  v3 = *v2;
  v4 = *((unsigned int *)v2 + 2);
  if ((_DWORD)v4 && *(_WORD *)(*v3 + 32) != 151)
  {
    v5 = 8 * v4 - 8;
    v6 = *v2;
    do
    {
      v7 = v6[1];
      ++v6;
      v5 -= 8;
    }
    while (*(_WORD *)(v7 + 32) != 151);
  }
  do
  {
    v9 = *v3++;
    v8 = v9;
  }
  while (*(_WORD *)(v9 + 32) != 151);
  return dword_22F49CA00[*(int *)(v8 + 36)];
}

uint64_t sub_22EEE0110(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  int v18;
  BOOL v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  unsigned __int8 **v26;
  int v27;
  BOOL v28;
  unsigned __int8 *v29;
  unsigned __int8 **v30;
  _BYTE v31[24];
  unsigned __int8 *v32;
  __int128 v33;

  v4 = *((_QWORD *)a2 + 2);
  v5 = sub_22EFD7558(v4);
  v6 = sub_22F10ACF8(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
  result = sub_22EEE0018(v6);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(v4 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v4);
      v9 = *(uint64_t **)v8;
      v10 = *(unsigned int *)(v8 + 8);
      v11 = *(uint64_t **)v8;
      if ((_DWORD)v10)
      {
        v16 = 8 * v10;
        v11 = *(uint64_t **)v8;
        while (*(_WORD *)(*v11 + 32) != 299)
        {
          ++v11;
          v16 -= 8;
          if (!v16)
            goto LABEL_10;
        }
      }
      if (v11 != &v9[v10])
      {
        do
        {
          v13 = *v9++;
          v12 = v13;
        }
        while (*(_WORD *)(v13 + 32) != 299);
        v14 = dword_22F49CA00[*(int *)(v12 + 36)];
        v15 = a1 + 16;
        v32 = a2;
        LODWORD(v33) = 1;
        DWORD2(v33) = v14;
        return sub_22F34E37C((uint64_t)v31, v15, (uint64_t *)&v32, &v33);
      }
    }
LABEL_10:
    if (!sub_22EFC0EB8(v4))
    {
      v15 = a1 + 16;
      v32 = a2;
      LODWORD(v33) = 1;
      DWORD2(v33) = 3;
      return sub_22F34E37C((uint64_t)v31, v15, (uint64_t *)&v32, &v33);
    }
    if (sub_22EFD83B0(v4, (int *)&v32))
    {
      v17 = (unsigned __int8 **)(a2 + 40);
      v18 = *a2;
      v19 = v18 == 119;
      if (v18 == 119)
        v20 = a2;
      else
        v20 = 0;
      v21 = (unsigned __int8 **)(v20 + 48);
      if (v19)
        v17 = v21;
      return (uint64_t)sub_22F34D83C(a1, *v17, a2, 3);
    }
    else
    {
      if (!sub_22EFD3AF0(v4, (int *)&v32))
      {
        v25 = sub_22EEE0080(v6);
        v15 = a1 + 16;
        v32 = a2;
        LODWORD(v33) = 1;
        DWORD2(v33) = v25;
        return sub_22F34E37C((uint64_t)v31, v15, (uint64_t *)&v32, &v33);
      }
      v22 = sub_22EFD7558(v4);
      v23 = sub_22F10AEAC(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
      if (v23)
        v24 = sub_22EEE1DFC(v23);
      else
        v24 = 0;
      v26 = (unsigned __int8 **)(a2 + 40);
      v27 = *a2;
      v28 = v27 == 119;
      if (v27 == 119)
        v29 = a2;
      else
        v29 = 0;
      v30 = (unsigned __int8 **)(v29 + 48);
      if (v28)
        v26 = v30;
      return (uint64_t)sub_22F34D83C(a1, *v26, a2, v24);
    }
  }
  return result;
}

void sub_22EEE0310(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *v21;
  uint64_t *v22;
  void *__p[2];
  char v24;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = (uint64_t *)(v4 + 16 * v5);
  if (*(_DWORD *)(a1 + 24))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *(uint64_t **)(a1 + 16);
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(uint64_t **)(a1 + 16);
    }
  }
  else
  {
LABEL_6:
    v8 = (uint64_t *)(v4 + 16 * v5);
  }
  v9 = (uint64_t *)(v4 + 16 * v5);
  if (v8 != v9)
  {
    v10 = a2;
    do
    {
      v11 = *v8;
      if ((*(_DWORD *)(*v8 + 28) & 0x17F) == 0x140)
      {
        sub_22EFC8E88(*v8);
        v13 = *(uint64_t **)v12;
        v14 = *(unsigned int *)(v12 + 8);
        v15 = *(uint64_t **)v12;
        if ((_DWORD)v14)
        {
          v16 = 8 * v14;
          v15 = *(uint64_t **)v12;
          while (*(_WORD *)(*v15 + 32) != 299)
          {
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_27;
          }
        }
        if (v15 != &v13[v14])
        {
          do
          {
            v18 = *v13++;
            v17 = v18;
          }
          while (*(_WORD *)(v18 + 32) != 299);
          v19 = dword_22F49CA00[*(int *)(v17 + 36)];
          if (*((_DWORD *)v8 + 2) != v19)
          {
            sub_22EFC683C((uint64_t *)(v11 + 40), __p);
            if (v24 >= 0)
              v20 = __p;
            else
              v20 = (void **)__p[0];
            if (v24 >= 0)
              v21 = (void *)(v24 & 0x7F);
            else
              v21 = __p[1];
            (*(void (**)(uint64_t, uint64_t, void **, void *, char *, _QWORD, char *, _QWORD))(*(_QWORD *)a3 + 32))(a3, v10, v20, v21, off_24FAB9908[v19 - 1], qword_22F49C9C8[v19 - 1], off_24FAB9920[*((int *)v8 + 2)], qword_22F49C9E0[*((int *)v8 + 2)]);
            if (v24 < 0)
              operator delete(__p[0]);
          }
        }
      }
LABEL_27:
      v22 = v8 + 2;
      v8 = v6;
      if (v22 != v6)
      {
        v8 = v22;
        while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 2;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
    }
    while (v8 != v9);
  }
}

uint64_t sub_22EEE0500(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (v3)
    v4 = v3 == *(_QWORD *)(a2 + 8);
  else
    v4 = 0;
  if (v4 && *(_BYTE *)a2 == 0)
  {
    *(_BYTE *)result = 0;
    sub_22F278254(result + 16);
    return sub_22F278254(v2 + 40);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(unsigned int *)(a2 + 32);
    v8 = v6 + 16 * v7;
    if (*(_DWORD *)(a2 + 24))
    {
      if ((_DWORD)v7)
      {
        v9 = 16 * v7;
        v10 = *(_QWORD *)(a2 + 16);
        while ((*(_QWORD *)v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 16;
          v9 -= 16;
          if (!v9)
            goto LABEL_13;
        }
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
LABEL_13:
      v10 = v6 + 16 * v7;
    }
    v11 = v6 + 16 * v7;
    while (v10 != v11)
    {
      v12 = *(_QWORD *)v10;
      v19 = 0;
      result = sub_22F24C318(*(_QWORD *)(v2 + 16), *(_DWORD *)(v2 + 32), v12, &v19);
      if ((_DWORD)result)
      {
        v13 = v19;
        v14 = *(_QWORD *)(v2 + 16);
        v15 = *(unsigned int *)(v2 + 32);
      }
      else
      {
        v14 = *(_QWORD *)(v2 + 16);
        v15 = *(unsigned int *)(v2 + 32);
        v13 = v14 + 16 * v15;
      }
      if (v13 != v14 + 16 * v15)
      {
        v16 = *(_DWORD *)(v13 + 8);
        if (v16)
          v17 = v16 == *(_DWORD *)(v10 + 8);
        else
          v17 = 1;
        if (!v17)
        {
          result = (uint64_t)sub_22F29449C(v2 + 16, (uint64_t *)v10);
          *(_DWORD *)(result + 8) = 1;
        }
      }
      v18 = v10 + 16;
      v10 = v8;
      if (v18 != v8)
      {
        v10 = v18;
        while ((*(_QWORD *)v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 16;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EEE0680(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *p_p;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  _BYTE *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t i;
  _QWORD **v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v86;
  uint64_t **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  int *v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  _BYTE *v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  _BYTE *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  _BYTE *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  _BYTE *v183;
  BOOL v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  _BYTE *v210;
  llvm *v211;
  uint64_t v212;
  unsigned int v213;
  _BYTE *v214;
  _BYTE *v215;
  uint64_t v216;
  __int128 __p;
  char *v218;
  __int128 v219;
  char *v220;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return result;
  if ((*(_DWORD *)(v2 + 28) & 0x7Eu) - 52 > 5)
    return result;
  v4 = result;
  result = sub_22EEB5AAC(a2);
  if (!result)
    return result;
  v5 = result;
  if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x37)
  {
    v6 = sub_22EFD7558(v2);
    v7 = sub_22F10ACF8(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  }
  else
  {
    v7 = sub_22E8BBA74(v2);
  }
  v8 = v7;
  v209 = v7;
  if ((*(_BYTE *)(v2 + 29) & 1) == 0)
    goto LABEL_19;
  sub_22EFC8E88(v2);
  v10 = *(uint64_t **)v9;
  v11 = *(unsigned int *)(v9 + 8);
  v12 = *(uint64_t **)v9;
  if ((_DWORD)v11)
  {
    v17 = 8 * v11;
    v12 = *(uint64_t **)v9;
    while (*(_WORD *)(*v12 + 32) != 299)
    {
      ++v12;
      v17 -= 8;
      if (!v17)
        goto LABEL_19;
    }
  }
  if (v12 == &v10[v11])
  {
LABEL_19:
    v16 = sub_22EEE0018(v8);
    if (!v16)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
    v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v19 == 39)
      goto LABEL_23;
    if ((v19 & 0xFE) == 0x28)
      goto LABEL_23;
    v20 = sub_22F10C2A4(v18);
    if (!v20 || (*(_DWORD *)(v20 + 28) & 0x100) == 0 || (*(_DWORD *)(v20 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD)
      goto LABEL_23;
    sub_22EFC8E88(v20);
    v194 = *((unsigned int *)v193 + 2);
    if ((_DWORD)v194)
    {
      v198 = 8 * v194;
      v195 = *v193;
      while (*(_WORD *)(*(_QWORD *)v195 + 32) != 152)
      {
        v195 += 8;
        v198 -= 8;
        if (!v198)
          goto LABEL_23;
      }
    }
    else
    {
      v195 = *v193;
    }
    if (v195 == *v193 + 8 * v194)
    {
LABEL_23:
      v16 = sub_22EEE0080(v8);
      goto LABEL_33;
    }
  }
  else
  {
    do
    {
      v14 = *v10++;
      v13 = v14;
    }
    while (*(_WORD *)(v14 + 32) != 299);
    v15 = sub_22F10C2A4(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0));
    if (v15 && (*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 <= 2 && sub_22F327708(v15))
    {
      v16 = dword_22F49CA00[*(int *)(v13 + 36)];
      goto LABEL_33;
    }
    v21 = *(_QWORD *)(v4 + 64);
    v22 = *(unsigned int *)(v13 + 16);
    sub_22F1192C0(&v209, (uint64_t)&__p);
    if (SHIBYTE(v218) >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if (SHIBYTE(v218) >= 0)
      v24 = HIBYTE(v218) & 0x7F;
    else
      v24 = *((_QWORD *)&__p + 1);
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v21 + 48))(v21, v22, p_p, v24);
    if (SHIBYTE(v218) < 0)
      operator delete((void *)__p);
  }
  v16 = 0;
LABEL_33:
  *(_DWORD *)(v4 + 56) = v16;
  v25 = sub_22EEBD4E0(a2);
  v26 = *(unsigned int *)(v5 + 24);
  v218 = 0;
  __p = 0uLL;
  if ((_DWORD)v26)
  {
    v28 = (char *)operator new(8 * v26);
    v27 = &v28[8 * v26];
    *(_QWORD *)&__p = v28;
    v218 = v27;
    bzero(v28, 8 * v26);
    *((_QWORD *)&__p + 1) = v27;
    v30 = 4 * v26;
    v29 = (char *)operator new(4 * v26);
    v31 = &v29[4 * v26];
    *(_QWORD *)&v219 = v29;
    v220 = v31;
    bzero(v29, v30);
    *((_QWORD *)&v219 + 1) = v31;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v219 = 0uLL;
    v220 = 0;
  }
  v33 = *(_QWORD *)(v25 + 8);
  v32 = *(_QWORD *)(v25 + 16);
  if (v32 != v33)
  {
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(v32 - 8);
      v32 -= 8;
      *(_DWORD *)&v29[4 * *(unsigned int *)(v35 + 48)] = v34++;
    }
    while (v32 != v33);
  }
  v36 = v27;
  if (*(_QWORD *)v4)
  {
    sub_22E8939A4(v4, *(_QWORD **)v4);
    operator delete(*(void **)v4);
    v36 = (char *)*((_QWORD *)&__p + 1);
    v28 = (char *)__p;
    v27 = v218;
  }
  *(_QWORD *)v4 = v28;
  *(_QWORD *)(v4 + 8) = v36;
  *(_QWORD *)(v4 + 16) = v27;
  v218 = 0;
  __p = 0uLL;
  v37 = *(void **)(v4 + 24);
  if (v37)
  {
    *(_QWORD *)(v4 + 32) = v37;
    operator delete(v37);
  }
  *(_OWORD *)(v4 + 24) = v219;
  *(_QWORD *)(v4 + 40) = v220;
  v220 = 0;
  v219 = 0uLL;
  sub_22F2F20B4((void **)&__p);
  v38 = operator new();
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_BYTE *)v38 = 1;
  v39 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  *(_QWORD *)(v38 + 24) = 0;
  *(_DWORD *)(v38 + 32) = 0;
  *(_DWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  *(_QWORD *)(v38 + 48) = 0;
  v202 = (uint64_t *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v38;
  if (v39)
  {
    v196 = sub_22F2F206C(v39);
    MEMORY[0x2348A0E9C](v196, 0x1060C40194CB704);
    v38 = *v202;
  }
  v209 = v4;
  v210 = (_BYTE *)v38;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v40 = *(uint64_t **)(v2 + 120);
  v41 = *(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v41 && *(_BYTE *)(v41 + 16) == 26)
  {
    v42 = (uint64_t *)(v4 + 48);
  }
  else
  {
    v42 = (uint64_t *)(v4 + 48);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_51;
    v41 = sub_22F10CF48(v41);
    if (!v41)
      goto LABEL_51;
  }
  v43 = *(_QWORD *)(v41 + 16);
  if ((v43 & 0x3FFFC000000000) != 0)
  {
    v44 = 8 * (unsigned __int16)(v43 >> 38);
    do
    {
      v45 = *v40++;
      sub_22F34DE20((uint64_t)&v209, v45);
      v44 -= 8;
    }
    while (v44);
  }
LABEL_51:
  v47 = *(_QWORD *)(v25 + 8);
  v46 = *(_QWORD *)(v25 + 16);
  if (v46 != v47)
  {
    v205 = (uint64_t *)v4;
    v199 = *(_QWORD *)(v25 + 8);
    v200 = v2;
    do
    {
      v49 = *(uint64_t **)(v46 - 8);
      v46 -= 8;
      v48 = v49;
      v50 = (_BYTE *)*v42;
      if (!*v42)
      {
        v51 = *((unsigned int *)v48 + 12);
        v52 = *(_QWORD **)v4;
        v54 = v48[7];
        v53 = v48[8];
        if (((v53 - v54) & 0xFFFFFFFE0) == 0 || v54 == v53)
        {
LABEL_59:
          v50 = (_BYTE *)v52[v51];
          v52[v51] = 0;
        }
        else
        {
          while (!*(_QWORD *)v54
               || *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4 * v51) >= *(_DWORD *)(*(_QWORD *)(v4 + 24)
                                                                           + 4
                                                                           * *(unsigned int *)(*(_QWORD *)v54 + 48)))
          {
            v54 += 16;
            if (v54 == v53)
              goto LABEL_59;
          }
          v56 = v48;
          v57 = v52[v51];
          v50 = (_BYTE *)operator new();
          *v50 = *(_BYTE *)v57;
          *((_QWORD *)v50 + 1) = *(_QWORD *)(v57 + 8);
          v58 = v57 + 16;
          v48 = v56;
          *((_DWORD *)v50 + 8) = 0;
          *((_QWORD *)v50 + 3) = 0;
          *((_QWORD *)v50 + 2) = 0;
          sub_22E5D08E0((uint64_t)(v50 + 16), v58);
          *((_QWORD *)v50 + 5) = 0;
          *((_QWORD *)v50 + 6) = 0;
          *((_DWORD *)v50 + 14) = 0;
        }
        v55 = *v42;
        *v42 = (uint64_t)v50;
        if (v55)
        {
          v59 = sub_22F2F206C(v55);
          MEMORY[0x2348A0E9C](v59, 0x1060C40194CB704);
          v50 = (_BYTE *)*v42;
          if (!*v42)
            continue;
        }
        else if (!v50)
        {
          continue;
        }
      }
      if (*v50)
      {
        v201 = v46;
        v210 = v50;
        v62 = *v48;
        v61 = v48[1];
        v208 = v48;
        if (v61 == *v48)
        {
LABEL_69:
          v63 = (_BYTE *)operator new();
          v64 = *v42;
          *v63 = *(_BYTE *)*v42;
          *((_QWORD *)v63 + 1) = *(_QWORD *)(v64 + 8);
          *((_QWORD *)v63 + 2) = 0;
          v65 = (uint64_t)(v63 + 16);
          *((_DWORD *)v63 + 8) = 0;
          *((_QWORD *)v63 + 3) = 0;
          sub_22E5D08E0((uint64_t)(v63 + 16), v64 + 16);
          *((_QWORD *)v63 + 5) = 0;
          *((_QWORD *)v63 + 6) = 0;
          *((_DWORD *)v63 + 14) = 0;
          v66 = (unsigned __int8 *)(v208[4] & 0xFFFFFFFFFFFFFFF8);
          if (!v66)
            goto LABEL_70;
          v138 = *v66;
          if (v138 == 16)
          {
            v139 = *(_QWORD *)&v66[8 * ((*(unsigned __int16 *)v66 >> 13) & 1)
                                 + 16
                                 + 8 * ((*(unsigned __int16 *)v66 >> 12) & 1)];
            v140 = sub_22EEE1E5C((uint64_t)&v209, (unsigned __int8 *)v139);
            if ((llvm *)((char *)v211 + 64 * (unint64_t)v213) == (llvm *)v140
              || (v141 = *(_DWORD *)(v140 + 8)) == 0)
            {
              if ((*(_BYTE *)v139 & 0xFE) != 0x70)
                goto LABEL_70;
              v140 = sub_22EEE1E5C((uint64_t)&v209, *(unsigned __int8 **)(v139 + 24));
              if ((llvm *)((char *)v211 + 64 * (unint64_t)v213) == (llvm *)v140)
                goto LABEL_70;
              v141 = *(_DWORD *)(v140 + 8);
            }
            v142 = *(_QWORD *)(v140 + 16);
            v143 = *(_DWORD *)(v140 + 24);
            if (v141 != 3)
            {
              if (v141 != 2)
              {
LABEL_70:
                v67 = sub_22F2F206C((uint64_t)v63);
                MEMORY[0x2348A0E9C](v67, 0x1060C40194CB704);
                *(_QWORD *)(*v42 + 8) = 0;
                v68 = v208;
                v69 = (uint64_t *)v208[10];
                v206 = (uint64_t *)v208[11];
                v70 = (unint64_t)((char *)v206 - (char *)v69) >> 4;
                v4 = (uint64_t)v205;
                if (v70 > 1
                  || (_DWORD)v70 == 1 && ((*(_QWORD *)(*v69 + 64) - *(_QWORD *)(*v69 + 56)) & 0xFFFFFFFE0) != 0)
                {
                  v63 = (_BYTE *)*v42;
                  if (v69 == v206)
                  {
                    v42 = v202;
                  }
                  else
                  {
                    do
                    {
                      v71 = *v69;
                      if (*v69)
                      {
                        v72 = *(_QWORD *)(v4 + 24);
                        v73 = *(_DWORD *)(v72 + 4 * *((unsigned int *)v68 + 12));
                        v74 = *(unsigned int *)(v71 + 48);
                        v75 = *(_QWORD **)v4;
                        if (v73 <= *(_DWORD *)(v72 + 4 * v74))
                        {
                          sub_22F34E1B4((uint64_t)v75, v74, (uint64_t)v63, v202);
                        }
                        else
                        {
                          v76 = v75[v74];
                          v203 = *(_QWORD *)(v4 + 64);
                          while (1)
                          {
                            v77 = v68[4] & 0xFFFFFFFFFFFFFFF8;
                            if (v77)
                              break;
                            for (i = *v68; i != v68[1]; i += 16)
                            {
                              if ((*(_QWORD *)i & 3 | (4 * (*(_DWORD *)(i + 8) & 3u))) - 9 >= 0xFFFFFFFD)
                              {
                                v77 = *(_QWORD *)i & 0xFFFFFFFFFFFFFFFCLL;
                                goto LABEL_95;
                              }
                            }
                            v79 = (_QWORD **)v68[10];
                            v80 = v68[11];
LABEL_83:
                            if (((v80 - (_QWORD)v79) & 0xFFFFFFFF0) == 0x10)
                            {
                              v81 = *v79;
                              if (v81)
                              {
                                v82 = v81[1];
                                do
                                {
                                  if (v82 == *v81)
                                  {
                                    v85 = v81 + 10;
                                    v79 = (_QWORD **)v81[10];
                                    v80 = v85[1];
                                    goto LABEL_83;
                                  }
                                  v84 = *(_QWORD *)(v82 - 16);
                                  v82 -= 16;
                                  v83 = v84;
                                }
                                while ((unint64_t)((v84 & 3 | (4 * (*(_DWORD *)(v82 + 8) & 3u))) - 9) < 0xFFFFFFFD);
                                sub_22F0D5A50(v83 & 0xFFFFFFFFFFFFFFFCLL);
                                if (v86)
                                  goto LABEL_96;
                              }
                            }
                            v87 = (uint64_t **)v68[7];
                            if (((v68[8] - (_QWORD)v87) & 0xFFFFFFFF0) == 0x10)
                            {
                              v68 = *v87;
                              if (*v87)
                                continue;
                            }
                            v86 = 0;
                            goto LABEL_96;
                          }
LABEL_95:
                          sub_22F0D5A50(v77);
LABEL_96:
                          v88 = *((_QWORD *)v63 + 2);
                          v89 = *((unsigned int *)v63 + 8);
                          v90 = v88 + 16 * v89;
                          if (*((_DWORD *)v63 + 6))
                          {
                            if (*((_DWORD *)v63 + 8))
                            {
                              v91 = 16 * v89;
                              v92 = *((_QWORD *)v63 + 2);
                              while ((*(_QWORD *)v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
                              {
                                v92 += 16;
                                v91 -= 16;
                                if (!v91)
                                  goto LABEL_101;
                              }
                            }
                            else
                            {
                              v92 = *((_QWORD *)v63 + 2);
                            }
                          }
                          else
                          {
LABEL_101:
                            v92 = v88 + 16 * v89;
                          }
                          v93 = v88 + 16 * v89;
                          if (v92 != v93)
                          {
                            v94 = v86;
                            do
                            {
                              v95 = *(_QWORD *)v92;
                              *(_QWORD *)&__p = 0;
                              if (sub_22F24C318(*(_QWORD *)(v76 + 16), *(_DWORD *)(v76 + 32), v95, &__p))
                              {
                                v96 = __p;
                                v97 = *(_QWORD *)(v76 + 16);
                                v98 = *(unsigned int *)(v76 + 32);
                              }
                              else
                              {
                                v97 = *(_QWORD *)(v76 + 16);
                                v98 = *(unsigned int *)(v76 + 32);
                                v96 = v97 + 16 * v98;
                              }
                              if (v96 != v97 + 16 * v98)
                              {
                                v99 = *(_DWORD *)(v96 + 8);
                                if (v99 && v99 != *(_DWORD *)(v92 + 8))
                                {
                                  *((_DWORD *)sub_22F29449C(v76 + 16, (uint64_t *)v92) + 2) = 1;
                                  sub_22EFC683C((uint64_t *)(*(_QWORD *)v92 + 40), &__p);
                                  v102 = SHIBYTE(v218) >= 0 ? &__p : (__int128 *)__p;
                                  v103 = SHIBYTE(v218) >= 0 ? HIBYTE(v218) & 0x7F : *((_QWORD *)&__p + 1);
                                  (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v203 + 24))(v203, v94, v102, v103);
                                  if (SHIBYTE(v218) < 0)
                                    operator delete((void *)__p);
                                }
                              }
                              v101 = v92 + 16;
                              v92 = v90;
                              if (v101 != v90)
                              {
                                v92 = v101;
                                while ((*(_QWORD *)v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
                                {
                                  v92 += 16;
                                  if (v92 == v90)
                                  {
                                    v92 = v90;
                                    break;
                                  }
                                }
                              }
                            }
                            while (v92 != v93);
                            v71 = *v69;
                            v72 = v205[3];
                            v73 = *(_DWORD *)(v72 + 4 * *((unsigned int *)v208 + 12));
                          }
                          v104 = *(_QWORD *)(v71 + 56);
                          v105 = *(_QWORD *)(v71 + 64);
                          v4 = (uint64_t)v205;
                          v68 = v208;
                          if (v104 == v105)
                          {
LABEL_133:
                            v106 = *(unsigned int *)(v71 + 48);
                            v107 = *(_QWORD *)(*v205 + 8 * v106);
                            *(_QWORD *)(*v205 + 8 * v106) = 0;
                            if (v107)
                            {
                              v108 = sub_22F2F206C(v107);
                              MEMORY[0x2348A0E9C](v108, 0x1060C40194CB704);
                            }
                          }
                          else
                          {
                            while (!*(_QWORD *)v104
                                 || v73 >= *(_DWORD *)(v72 + 4 * *(unsigned int *)(*(_QWORD *)v104 + 48)))
                            {
                              v104 += 16;
                              if (v104 == v105)
                                goto LABEL_133;
                            }
                          }
                        }
                      }
                      v69 += 2;
                    }
                    while (v69 != v206);
                    v42 = v202;
                    v63 = (_BYTE *)*v202;
                  }
                  *v42 = 0;
                  if (v63)
                    goto LABEL_317;
                }
                goto LABEL_222;
              }
              *(_QWORD *)(*v42 + 8) = v139;
              *((_QWORD *)v63 + 1) = v139;
              v144 = (_BYTE *)*v42;
              v146 = (uint64_t *)(*v42 + 16);
              v145 = *v146;
              *(_QWORD *)&__p = 0;
              if (sub_22F24C318(v145, *((_DWORD *)v144 + 8), v142, &__p))
              {
                v147 = __p;
                v148 = *((_QWORD *)v144 + 2);
                v149 = *((unsigned int *)v144 + 8);
              }
              else
              {
                v148 = *((_QWORD *)v144 + 2);
                v149 = *((unsigned int *)v144 + 8);
                v147 = v148 + 16 * v149;
              }
              if (v147 == v148 + 16 * v149)
              {
                v170 = 0;
                goto LABEL_251;
              }
              v170 = *(_DWORD *)(v147 + 8);
              if (v170 == 1)
              {
                *(_QWORD *)&__p = v142;
                *((_DWORD *)sub_22F29449C((uint64_t)v146, (uint64_t *)&__p) + 2) = v143;
                v174 = dword_22F49CA10[v143];
                *(_QWORD *)&__p = v142;
                goto LABEL_304;
              }
LABEL_251:
              if (v170 == dword_22F49CA10[v143])
              {
                *v144 = 0;
                v175 = v144 + 40;
                v176 = (uint64_t)v146;
                goto LABEL_253;
              }
              if (v170 != v143)
              {
LABEL_310:
                v186 = (uint64_t *)v208[10];
                v187 = *v186;
                v188 = (_BYTE *)*v42;
                *v42 = 0;
                if (v187)
                {
                  v215 = v188;
                  v4 = (uint64_t)v205;
                  sub_22F34E28C(*v205, *(_DWORD *)(v187 + 48), (uint64_t *)&v215);
                  v188 = v215;
                  if (!v215)
                    goto LABEL_315;
                }
                else
                {
                  v4 = (uint64_t)v205;
                  if (!v188)
                  {
LABEL_315:
                    v190 = v186[2];
                    if (!v190)
                    {
                      v68 = v208;
                      goto LABEL_317;
                    }
                    v214 = v63;
                    sub_22F34E28C(*(_QWORD *)v4, *(_DWORD *)(v190 + 48), (uint64_t *)&v214);
                    v63 = v214;
                    v68 = v208;
                    if (v214)
                    {
LABEL_317:
                      v191 = sub_22F2F206C((uint64_t)v63);
                      MEMORY[0x2348A0E9C](v191, 0x1060C40194CB704);
                    }
LABEL_222:
                    v46 = v201;
                    v47 = v199;
                    if (v68 == *(uint64_t **)(sub_22EEB5AAC(a2) + 8))
                    {
                      v157 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22E8BBA74(v200) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                      if (v157 && (*(_DWORD *)(v157 + 16) & 0xFF800FF) == 86507531)
                        sub_22EEE0310(*(_QWORD *)(v4 + 48), *(_DWORD *)(v200 + 24), *(_QWORD *)(v4 + 64));
                    }
                    continue;
                  }
                }
                v189 = sub_22F2F206C((uint64_t)v188);
                MEMORY[0x2348A0E9C](v189, 0x1060C40194CB704);
                goto LABEL_315;
              }
LABEL_308:
              *v63 = 0;
              sub_22F278254(v65);
              v177 = (uint64_t)(v63 + 40);
LABEL_309:
              sub_22F278254(v177);
              goto LABEL_310;
            }
            v159 = *(_QWORD *)(v140 + 32);
            v160 = v42;
            v161 = *(_DWORD *)(v140 + 40);
            v162 = *(_QWORD *)(v140 + 48);
            v163 = *(_DWORD *)(v140 + 56);
            *(_QWORD *)(*v160 + 8) = v142;
            *((_QWORD *)v63 + 1) = v142;
            v164 = *v160;
            v207 = v162;
            v204 = v163;
            if (v159)
            {
              *(_QWORD *)&__p = 0;
              if (sub_22F24C318(*(_QWORD *)(v164 + 16), *(_DWORD *)(v164 + 32), v159, &__p))
              {
                v171 = __p;
                v172 = *(_QWORD *)(v164 + 16);
                v173 = *(unsigned int *)(v164 + 32);
              }
              else
              {
                v172 = *(_QWORD *)(v164 + 16);
                v173 = *(unsigned int *)(v164 + 32);
                v171 = v172 + 16 * v173;
              }
              if (v171 == v172 + 16 * v173)
                v165 = 0;
              else
                v165 = *(_DWORD *)(v171 + 8);
              v162 = v207;
            }
            else
            {
              v165 = 0;
            }
            if (v162)
            {
              *(_QWORD *)&__p = 0;
              if (sub_22F24C318(*(_QWORD *)(v164 + 16), *(_DWORD *)(v164 + 32), v162, &__p))
              {
                v179 = __p;
                v180 = *(_QWORD *)(v164 + 16);
                v181 = *(unsigned int *)(v164 + 32);
              }
              else
              {
                v180 = *(_QWORD *)(v164 + 16);
                v181 = *(unsigned int *)(v164 + 32);
                v179 = v180 + 16 * v181;
              }
              if (v179 == v180 + 16 * v181)
                v178 = 0;
              else
                v178 = *(_DWORD *)(v179 + 8);
              v162 = v207;
            }
            else
            {
              v178 = 0;
            }
            if (!v159)
              goto LABEL_297;
            if (v143)
            {
              if (v165 == 1)
              {
                v182 = dword_22F49CA10[v161];
                *(_QWORD *)&__p = v159;
                *((_DWORD *)sub_22F29449C(v65, (uint64_t *)&__p) + 2) = v182;
                goto LABEL_296;
              }
              if (v165 != v161)
              {
                v184 = v165 == dword_22F49CA10[v161] && (v178 & 0xFFFFFFFE) == 2;
LABEL_290:
                v162 = v207;
                if (!v184)
                  goto LABEL_297;
                if (v178 != v204)
                  goto LABEL_294;
              }
              *v63 = 0;
              sub_22F278254(v65);
              v185 = (uint64_t)(v63 + 40);
              goto LABEL_295;
            }
            if (v165 == 1)
            {
              *(_QWORD *)&__p = v159;
              *((_DWORD *)sub_22F29449C(v164 + 16, (uint64_t *)&__p) + 2) = v161;
              goto LABEL_296;
            }
            if (v165 != dword_22F49CA10[v161])
            {
              v184 = v165 == v161 && (v178 & 0xFFFFFFFE) == 2;
              goto LABEL_290;
            }
LABEL_294:
            *(_BYTE *)v164 = 0;
            sub_22F278254(v164 + 16);
            v185 = v164 + 40;
LABEL_295:
            sub_22F278254(v185);
LABEL_296:
            v162 = v207;
LABEL_297:
            v42 = v202;
            if (!v162)
              goto LABEL_310;
            v152 = v204;
            if (!v143)
            {
              if (v178 == 1)
              {
                *(_QWORD *)&__p = v162;
                v169 = v164 + 16;
                goto LABEL_301;
              }
              if (v178 != dword_22F49CA10[v204])
                goto LABEL_310;
              *(_BYTE *)v164 = 0;
              v175 = (_BYTE *)(v164 + 40);
              v176 = v164 + 16;
              goto LABEL_253;
            }
            if (v178 != 1)
            {
              if (v178 != v204)
                goto LABEL_310;
              goto LABEL_308;
            }
            v174 = dword_22F49CA10[v204];
            *(_QWORD *)&__p = v162;
          }
          else
          {
            if ((v138 & 0xFE) != 0x70)
              goto LABEL_70;
            v150 = sub_22EEE1E5C((uint64_t)&v209, *((unsigned __int8 **)v66 + 2));
            if ((llvm *)((char *)v211 + 64 * (unint64_t)v213) == (llvm *)v150 || *(_DWORD *)(v150 + 8) != 2)
            {
              v66 = (unsigned __int8 *)*((_QWORD *)v66 + 2);
              if (!v66)
                goto LABEL_70;
              if ((*v66 & 0xFE) != 0x70)
                goto LABEL_70;
              v150 = sub_22EEE1E5C((uint64_t)&v209, *((unsigned __int8 **)v66 + 3));
              if ((llvm *)((char *)v211 + 64 * (unint64_t)v213) == (llvm *)v150 || *(_DWORD *)(v150 + 8) != 2)
                goto LABEL_70;
            }
            v151 = *(_QWORD *)(v150 + 16);
            v152 = *(_DWORD *)(v150 + 24);
            *(_QWORD *)(*v42 + 8) = v66;
            *((_QWORD *)v63 + 1) = v66;
            v153 = (_BYTE *)*v42;
            *(_QWORD *)&__p = 0;
            if (sub_22F24C318(*((_QWORD *)v153 + 2), *((_DWORD *)v153 + 8), v151, &__p))
            {
              v154 = __p;
              v155 = *((_QWORD *)v153 + 2);
              v156 = *((unsigned int *)v153 + 8);
            }
            else
            {
              v155 = *((_QWORD *)v153 + 2);
              v156 = *((unsigned int *)v153 + 8);
              v154 = v155 + 16 * v156;
            }
            if (v154 == v155 + 16 * v156)
              v166 = 0;
            else
              v166 = *(_DWORD *)(v154 + 8);
            v167 = (*(_DWORD *)v66 >> 18) & 0x3F;
            if (v167 != 20)
            {
              if (v167 != 19)
                goto LABEL_310;
              if (v166 == 1)
              {
                v168 = (_BYTE *)*v42;
                *(_QWORD *)&__p = v151;
                v169 = (uint64_t)(v168 + 16);
LABEL_301:
                *((_DWORD *)sub_22F29449C(v169, (uint64_t *)&__p) + 2) = v152;
                goto LABEL_310;
              }
              if (v166 != dword_22F49CA10[v152])
                goto LABEL_310;
              v183 = (_BYTE *)*v42;
              v176 = *v42 + 16;
              *v183 = 0;
              v175 = v183 + 40;
LABEL_253:
              sub_22F278254(v176);
              v177 = (uint64_t)v175;
              goto LABEL_309;
            }
            if (v166 != 1)
            {
              if (v166 != v152)
                goto LABEL_310;
              goto LABEL_308;
            }
            v174 = dword_22F49CA10[v152];
            *(_QWORD *)&__p = v151;
          }
LABEL_304:
          *((_DWORD *)sub_22F29449C(v65, (uint64_t *)&__p) + 2) = v174;
          goto LABEL_310;
        }
        while (2)
        {
          v110 = *(_QWORD *)(v61 - 16);
          v109 = *(_QWORD *)(v61 - 8);
          v61 -= 16;
          v111 = v110 & 3 | (4 * (v109 & 3));
          if (v111 == 6)
          {
            v121 = (int *)(v110 & 0xFFFFFFFFFFFFFFFCLL);
            v122 = *(unsigned __int8 *)(v110 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v110 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (v122 & 0xFE) == 0x70)
            {
              v123 = *v121;
              switch((*v121 >> 18) & 0x3F)
              {
                case 0u:
                case 1u:
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                case 0xCu:
                case 0xDu:
                case 0xEu:
                case 0xFu:
                case 0x10u:
                case 0x11u:
                case 0x12u:
                case 0x13u:
                case 0x14u:
                case 0x15u:
                case 0x16u:
                case 0x17u:
                case 0x18u:
                case 0x19u:
                case 0x1Au:
                case 0x1Bu:
                case 0x1Cu:
                case 0x1Du:
                case 0x1Eu:
                case 0x1Fu:
                case 0x20u:
                  sub_22F34DB08((unint64_t)&v209, v110 & 0xFFFFFFFFFFFFFFFCLL);
                  goto LABEL_199;
                default:
                  goto LABEL_197;
              }
            }
            if (v121 && v122 == 233)
            {
              v123 = *v121;
              switch((*v121 >> 18) & 0x1F)
              {
                case 0u:
                case 1u:
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 6u:
                case 7u:
                case 8u:
                case 9u:
                case 0xAu:
                case 0xBu:
                case 0xCu:
                case 0xDu:
                  sub_22F34E030((uint64_t)&v209, v110 & 0xFFFFFFFFFFFFFFFCLL);
                  goto LABEL_199;
                default:
LABEL_197:
                  v122 = v123;
                  break;
              }
            }
            __asm { BR              X9 }
          }
          if (v111 != 9)
          {
            if (v111 == 13)
            {
              v215 = (_BYTE *)v110;
              v216 = v109;
              v112 = v110 & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(__p) = 5;
              *((_QWORD *)&__p + 1) = v110 & 0xFFFFFFFFFFFFFFFCLL;
              v113 = *(_QWORD *)(a2 + 8);
              if (!v113 || (*(_DWORD *)(v113 + 28) & 0x7F) != 0x53)
              {
                while (2)
                {
                  v114 = *(_QWORD *)(v113 + 16);
                  v115 = v114 & 0xFFFFFFFFFFFFFFF8;
                  if ((v114 & 4) != 0)
                    v115 = *(_QWORD *)v115;
                  v116 = *(_WORD *)(v115 + 8) & 0x7F;
                  if (v116 == 83)
                    break;
                  v117 = -40;
                  if ((*(_WORD *)(v115 + 8) & 0x7Fu) > 0x46)
                  {
                    if (v116 == 71)
                    {
                      v117 = -56;
                    }
                    else if (v116 != 81)
                    {
                      goto LABEL_156;
                    }
                  }
                  else
                  {
                    if (v116 > 0x18)
                      goto LABEL_155;
                    if (v116 == 16)
                      goto LABEL_149;
                    if (((1 << v116) & 0x1066) == 0)
                    {
                      if (v116 == 24)
                      {
LABEL_149:
                        v117 = -48;
                      }
                      else
                      {
LABEL_155:
                        if (v116 == 70)
                        {
                          v117 = -64;
                        }
                        else
                        {
LABEL_156:
                          v118 = v116 - 52;
                          v119 = v116 - 33 >= 5;
                          v120 = -64;
                          if (v119)
                            v120 = -48;
                          v119 = v118 >= 6;
                          v117 = -72;
                          if (v119)
                            v117 = v120;
                        }
                      }
                    }
                  }
                  v113 = v115 + v117;
                  continue;
                }
              }
              sub_22EED1954((uint64_t)&v215);
              v135 = v134;
              sub_22EFF605C(v110 & 0xFFFFFFFFFFFFFFFCLL);
              sub_22EEDF788(&v209, (uint64_t)&__p, v135, v136);
              v137 = (_BYTE *)*v42;
              *(_QWORD *)&__p = 0;
              if (sub_22F24C318(*((_QWORD *)v137 + 5), *((_DWORD *)v137 + 14), v112, &__p))
              {
                *(_QWORD *)__p = -8192;
                *((int32x2_t *)v137 + 6) = vadd_s32(*(int32x2_t *)(v137 + 48), (int32x2_t)0x1FFFFFFFFLL);
              }
            }
LABEL_199:
            if (v61 == v62)
              goto LABEL_69;
            continue;
          }
          break;
        }
        v215 = (_BYTE *)v110;
        v216 = v109;
        sub_22F0D60E4(v109 & 0xFFFFFFFFFFFFFFFCLL);
        v125 = v124;
        LODWORD(__p) = 4;
        *((_QWORD *)&__p + 1) = v110 & 0xFFFFFFFFFFFFFFFCLL;
        v126 = *(_QWORD *)(a2 + 8);
        if (v126 && (*(_DWORD *)(v126 + 28) & 0x7F) == 0x53)
        {
LABEL_193:
          sub_22EED1954((uint64_t)&v215);
          sub_22EEDF788(&v209, (uint64_t)&__p, v133, v125);
          goto LABEL_199;
        }
        while (2)
        {
          v127 = *(_QWORD *)(v126 + 16);
          v128 = v127 & 0xFFFFFFFFFFFFFFF8;
          if ((v127 & 4) != 0)
            v128 = *(_QWORD *)v128;
          v129 = *(_WORD *)(v128 + 8) & 0x7F;
          if (v129 == 83)
            goto LABEL_193;
          v130 = -40;
          if ((*(_WORD *)(v128 + 8) & 0x7Fu) > 0x46)
          {
            if (v129 == 71)
            {
              v130 = -56;
            }
            else if (v129 != 81)
            {
              goto LABEL_184;
            }
          }
          else
          {
            if (v129 > 0x18)
              goto LABEL_183;
            if (v129 == 16)
              goto LABEL_177;
            if (((1 << v129) & 0x1066) == 0)
            {
              if (v129 == 24)
              {
LABEL_177:
                v130 = -48;
              }
              else
              {
LABEL_183:
                if (v129 == 70)
                {
                  v130 = -64;
                }
                else
                {
LABEL_184:
                  v131 = v129 - 52;
                  v119 = v129 - 33 >= 5;
                  v132 = -64;
                  if (v119)
                    v132 = -48;
                  v119 = v131 >= 6;
                  v130 = -72;
                  if (v119)
                    v130 = v132;
                }
              }
            }
          }
          v126 = v128 + v130;
          continue;
        }
      }
      *v42 = 0;
      v60 = sub_22F2F206C((uint64_t)v50);
      MEMORY[0x2348A0E9C](v60, 0x1060C40194CB704);
    }
    while (v46 != v47);
  }
  v192 = (_BYTE *)*v42;
  *v42 = 0;
  if (v192)
  {
    v197 = sub_22F2F206C((uint64_t)v192);
    MEMORY[0x2348A0E9C](v197, 0x1060C40194CB704);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 64) + 16))(*(_QWORD *)(v4 + 64));
  return llvm::deallocate_buffer(v211, (void *)((unint64_t)v213 << 6));
}

BOOL sub_22EEE1DFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 153)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22EEE1E5C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;

  if (*a2 != 173 || (a2[2] & 4) != 0 || (a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2)) != 0)
  {
    while (1)
    {
      v3 = (uint64_t)a2;
      v4 = *a2;
      if (v4 > 0xD5)
      {
        if (v4 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_20;
          v6 = a2 + 16;
        }
        else
        {
          if (v4 != 214)
            goto LABEL_20;
          v6 = a2 + 24;
        }
      }
      else if (v4 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_20;
        if (a2[48])
          v6 = a2 + 24;
        else
          v6 = a2 + 32;
      }
      else
      {
        if (v4 != 176)
          goto LABEL_20;
        v5 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v5 == -1)
          goto LABEL_20;
        v6 = &a2[8 * v5 + 40];
      }
      a2 = *(unsigned __int8 **)v6;
      if (*(_QWORD *)v6 == v3)
        goto LABEL_20;
    }
  }
  v3 = 0;
LABEL_20:
  v8 = 0;
  if (sub_22F34E2E8(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), v3, &v8))
    return v8;
  else
    return *(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6);
}

_QWORD *sub_22EEE1F68(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C]((unint64_t)v8 << 6, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F34E4D8(a1, (uint64_t)v4, (uint64_t)v4 + 64 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -4096;
        result += 8;
        v11 -= 64;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_22EEE2028(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  *a1 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "raise", 5uLL) | 1;
  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "NSException", 0xBuLL);
  a1[2] = 0;
  a1[1] = v4;
  a1[3] = 0;
  v6[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "raise", 5uLL);
  v6[1] = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "format", 6uLL);
  a1[2] = sub_22F1D3E5C(*(uint64_t **)(a2 + 15200), 2u, v6);
  v6[2] = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "arguments", 9uLL);
  a1[3] = sub_22F1D3E5C(*(uint64_t **)(a2 + 15200), 3u, v6);
  return a1;
}

BOOL sub_22EEE2224(uint64_t *a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *(_DWORD *)(a2 + 24);
  v4 = (_QWORD *)(a2 + 16);
  if ((v3 & 0x1000000) != 0)
    v4 = (_QWORD *)(*v4 + 40);
  v5 = *v4;
  if ((v3 & 0xFD0000) == 0x10000)
  {
    v6 = *a1;
  }
  else
  {
    v9 = sub_22F3C7A68(a2);
    if (!v9)
      return 0;
    v10 = a1[1];
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 40);
      v12 = (v11 & 7) != 0 ? 0 : v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == v10)
        break;
      v9 = sub_22F3B46CC(v9);
      v7 = 0;
      if (!v9)
        return v7;
    }
    if (a1[2] == v5)
      return 1;
    v6 = v5;
    v5 = a1[3];
  }
  return v5 == v6;
}

uint64_t sub_22EEE22E0(uint64_t a1, uint64_t a2)
{
  void **v4;
  int v5;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16[2];
  _DWORD v17[14];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24FAB9950;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  sub_22EEE24E0(a1 + 8, *(unsigned int *)(a2 + 24));
  v5 = *(_DWORD *)(a2 + 24);
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  sub_22E47EDD0((uint64_t)v16, (v5 + 63) >> 6, 0);
  v17[12] = v5;
  sub_22EEE276C(&v12, *(_QWORD *)a2, v16);
  while (v14)
  {
    v7 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) + 1;
    *(_DWORD *)(sub_22EEE28D8(a1 + 32, (uint64_t *)v13 + 2 * v14 - 2) + 8) = v7;
    v8 = v14;
    v9 = *(uint64_t **)(a1 + 16);
    v10 = *((_QWORD *)v13 + 2 * v14 - 2);
    if ((unint64_t)v9 >= *(_QWORD *)(a1 + 24))
    {
      v11 = sub_22E566A8C(v4, v10);
      v8 = v14;
    }
    else
    {
      *v9 = v10;
      v11 = v9 + 1;
    }
    *(_QWORD *)(a1 + 16) = v11;
    v14 = v8 - 1;
    if (v8 != 1)
      sub_22EEE27E0((uint64_t)&v12);
  }
  if (v13 != &v15)
    free(v13);
  if (v16[0] != v17)
    free(v16[0]);
  return a1;
}

void sub_22EEE24E0(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * a2];
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_22EEE2574@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_22EEB5AAC(a1);
  if (result)
  {
    v4 = result;
    v5 = operator new();
    result = sub_22EEE22E0(v5, v4);
  }
  *a2 = result;
  return result;
}

BOOL sub_22EEE25C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  int v17;
  int v18;
  int v19;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(unsigned int *)(*(_QWORD *)a1 + 48);
  if ((_DWORD)v4)
  {
    v5 = v4 - 1;
    LODWORD(v6) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t *)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_3;
    v16 = 1;
    while (v8 != -4096)
    {
      v17 = v6 + v16++;
      v6 = v17 & v5;
      v8 = *(_QWORD *)(v3 + 16 * v6);
      if (v8 == a2)
        goto LABEL_12;
    }
  }
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 48);
LABEL_12:
  v7 = (uint64_t *)(v3 + 16 * v6);
  if (!(_DWORD)v4)
    goto LABEL_19;
  v5 = v4 - 1;
LABEL_3:
  LODWORD(v9) = v5 & ((a3 >> 4) ^ (a3 >> 9));
  v10 = (uint64_t *)(v3 + 16 * v9);
  v11 = *v10;
  if (*v10 == a3)
    goto LABEL_4;
  v18 = 1;
  while (v11 != -4096)
  {
    v19 = v9 + v18++;
    v9 = v19 & v5;
    v11 = *(_QWORD *)(v3 + 16 * v9);
    if (v11 == a3)
    {
      v10 = (uint64_t *)(v3 + 16 * v9);
      goto LABEL_4;
    }
  }
LABEL_19:
  v10 = (uint64_t *)(v3 + 16 * v4);
LABEL_4:
  v12 = (uint64_t *)(v3 + 16 * v4);
  if (v7 == v12)
    v13 = 0;
  else
    v13 = *((_DWORD *)v7 + 2);
  if (v10 == v12)
    v14 = 0;
  else
    v14 = *((_DWORD *)v10 + 2);
  return v13 > v14;
}

void sub_22EEE26BC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24FAB9950;
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(16 * *(unsigned int *)(a1 + 48)));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEE271C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24FAB9950;
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(16 * *(unsigned int *)(a1 + 48)));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_22EEE276C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = a3;
  a1[1] = a1 + 3;
  a1[2] = 0x800000000;
  if (a2)
  {
    v4 = *(unsigned int *)(a2 + 48);
    v5 = 1 << v4;
    v6 = v4 >> 6;
    v7 = *(_QWORD *)(*a3 + 8 * v6);
    if ((v5 & v7) == 0)
    {
      *(_QWORD *)(*a3 + 8 * v6) = v5 | v7;
      v8 = *(_QWORD *)(a2 + 80);
      a1[3] = a2;
      a1[4] = v8;
      *((_DWORD *)a1 + 4) = 1;
      sub_22EEE27E0((uint64_t)a1);
    }
  }
  return a1;
}

uint64_t sub_22EEE27E0(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)(result + 16);
  v3 = v1 + 16 * v2;
  v6 = *(uint64_t **)(v3 - 8);
  v4 = (_QWORD *)(v3 - 8);
  v5 = v6;
  if (v6 != *(uint64_t **)(*(v4 - 1) + 88))
  {
    v7 = result;
    do
    {
      v8 = *v5;
      *v4 = v5 + 2;
      if (v8)
      {
        v9 = *(unsigned int *)(v8 + 48);
        v10 = 1 << v9;
        v11 = v9 >> 6;
        v12 = **(_QWORD **)v7;
        v13 = *(_QWORD *)(v12 + 8 * v11);
        if ((v10 & v13) == 0)
        {
          *(_QWORD *)(v12 + 8 * v11) = v10 | v13;
          v14 = *(_QWORD *)(v8 + 80);
          if (v2 >= *(_DWORD *)(v7 + 20))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1 = *(_QWORD *)(v7 + 8);
            v2 = *(_DWORD *)(v7 + 16);
          }
          v15 = (_QWORD *)(v1 + 16 * v2);
          *v15 = v8;
          v15[1] = v14;
          v2 = *(_DWORD *)(v7 + 16) + 1;
          *(_DWORD *)(v7 + 16) = v2;
          v1 = *(_QWORD *)(v7 + 8);
        }
      }
      v16 = v1 + 16 * v2;
      v17 = *(uint64_t **)(v16 - 8);
      v4 = (_QWORD *)(v16 - 8);
      v5 = v17;
    }
    while (v17 != *(uint64_t **)(*(v4 - 1) + 88));
  }
  return result;
}

uint64_t sub_22EEE28D8(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_22EEE2B14(a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = ((*a2 >> 4) ^ (*a2 >> 9)) & v14;
    result = *(_QWORD *)a1 + 16 * v15;
    v16 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
      goto LABEL_19;
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_QWORD *)result;
      if (v13 == *(_QWORD *)result)
        goto LABEL_19;
    }
    if (v17)
      result = v17;
  }
  else if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_22EEE2B14(a1, v4);
    v21 = 0;
    sub_22EEE2A94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v21);
    result = v21;
  }
  v13 = *(_QWORD *)result;
LABEL_19:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_22EEE2A94(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

_QWORD *sub_22EEE2B14(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *(_QWORD *)a1 + 16 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *(_QWORD *)a1 + 16 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 16);
      }
      while (v12 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      do
      {
        *result = -4096;
        result += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t sub_22EEE2C98(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t *v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  char v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[34];

  v29[32] = *MEMORY[0x24BDAC8D0];
  v28 = 32;
  v6 = *(unsigned int *)(a1 + 48);
  v7 = v6 >> 6;
  v8 = *(_QWORD *)(*a2 + 8 * (v6 >> 6));
  v9 = 1 << v6;
  if ((v9 & v8) != 0)
  {
    v10 = 0;
  }
  else
  {
    *(_QWORD *)(*a2 + 8 * v7) = v9 | v8;
    v10 = 1;
  }
  v29[0] = a1;
  v26 = a4 ^ 1;
  v11 = 1;
  do
  {
    v12 = (_QWORD *)v29[--v11];
    v27 = v11;
    v13 = (unint64_t *)v12[10];
    v14 = (unint64_t *)v12[11];
    if (v13 == v14)
      continue;
    v15 = 0;
    v16 = v26;
    do
    {
      v17 = *v13;
      if (*v13)
        goto LABEL_8;
      v17 = v13[1] & 0xFFFFFFFFFFFFFFF8;
      if (!v17)
        goto LABEL_23;
      if (!v16)
      {
        v23 = (unsigned __int8 *)(v12[4] & 0xFFFFFFFFFFFFFFF8);
        if (!v23)
          goto LABEL_18;
        v24 = *v23;
        if (v24 != 100)
        {
          if ((v24 & 0xFE) != 0x70)
LABEL_18:
            v23 = sub_22EED4398((uint64_t)v12, 0);
          v15 = sub_22EEE3518(v23, a3, 0, 1, 0);
          goto LABEL_20;
        }
        v15 = 1;
      }
LABEL_20:
      v16 = 1;
      if (!v15)
      {
        v15 = 0;
        goto LABEL_23;
      }
      v15 = 1;
LABEL_8:
      v18 = *(unsigned int *)(v17 + 48);
      v19 = v18 >> 6;
      v20 = *(_QWORD *)(*a2 + 8 * (v18 >> 6));
      v21 = 1 << v18;
      if ((v21 & v20) == 0)
      {
        *(_QWORD *)(*a2 + 8 * v19) = v21 | v20;
        v22 = v27;
        if (v27 >= (unint64_t)v28)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v27;
        }
        v29[v22] = v17;
        ++v27;
        v10 = (v10 + 1);
      }
LABEL_23:
      v13 += 2;
    }
    while (v13 != v14);
    v11 = v27;
  }
  while (v11);
  return v10;
}

void sub_22EEE2EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  void **v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned __int8 **v56;
  unsigned __int8 **v57;
  uint64_t **v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v65[2];
  _DWORD v66[14];
  void **v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[80];
  uint64_t v71;
  uint64_t v72;
  void *__base;
  size_t __nel;
  _BYTE v75[192];
  void *v76[2];
  _BYTE v77[48];
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEB5AAC(a1);
  if (v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(v4 + 24);
    v76[0] = v77;
    v76[1] = (void *)0x600000000;
    sub_22E47EDD0((uint64_t)v76, (v6 + 63) >> 6, 0);
    v78 = v6;
    v7 = sub_22EEE2C98(*(_QWORD *)v5, v76, a2, 1);
    v8 = *(_DWORD *)(v5 + 24);
    if (v7 != v8)
    {
      v9 = v7;
      v62 = v5;
      if (*(_BYTE *)(a1 + 89))
        goto LABEL_9;
      v10 = *(uint64_t **)(v5 + 64);
      v11 = *(uint64_t **)(v5 + 72);
      if (v10 == v11)
      {
        v5 = v62;
      }
      else
      {
        do
        {
          v12 = *v10++;
          v9 += sub_22EEE2C98(v12, v76, a2, 1);
        }
        while (v10 != v11);
        v5 = v62;
        v8 = *(_DWORD *)(v62 + 24);
      }
      if (v9 != v8)
      {
LABEL_9:
        v14 = *(uint64_t **)(v5 + 40);
        v13 = *(uint64_t **)(v5 + 48);
        if (v14 != v13)
        {
          v60 = *(uint64_t **)(v5 + 48);
          v61 = a2;
          do
          {
            v15 = *v14;
            if (((*(_QWORD *)((char *)v76[0] + (((unint64_t)*(unsigned int *)(*v14 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(*v14 + 48)) & 1) != 0)
              goto LABEL_97;
            v16 = *(_QWORD *)(a1 + 8);
            if (!v16 || (*(_DWORD *)(v16 + 28) & 0x7F) != 0x53)
            {
              while (1)
              {
                v17 = *(_QWORD *)(v16 + 16);
                v18 = v17 & 0xFFFFFFFFFFFFFFF8;
                if ((v17 & 4) != 0)
                  v18 = *(_QWORD *)v18;
                v19 = *(_WORD *)(v18 + 8) & 0x7F;
                if (v19 == 83)
                {
                  v16 = v18 - 40;
                  break;
                }
                v20 = -40;
                if ((*(_WORD *)(v18 + 8) & 0x7Fu) > 0x46)
                {
                  if (v19 == 71)
                  {
                    v20 = -56;
                    goto LABEL_33;
                  }
                  if (v19 != 81)
                    goto LABEL_27;
                }
                else
                {
                  if (v19 > 0x18)
                    goto LABEL_26;
                  if (v19 == 16)
                    goto LABEL_20;
                  if (((1 << v19) & 0x1066) == 0)
                  {
                    if (v19 == 24)
                    {
LABEL_20:
                      v20 = -48;
                      goto LABEL_33;
                    }
LABEL_26:
                    if (v19 == 70)
                    {
                      v20 = -64;
                      goto LABEL_33;
                    }
LABEL_27:
                    v21 = v19 - 52;
                    v22 = v19 - 33 >= 5;
                    v23 = -64;
                    if (v22)
                      v23 = -48;
                    v22 = v21 >= 6;
                    v20 = -72;
                    if (v22)
                      v20 = v23;
                  }
                }
LABEL_33:
                v16 = v18 + v20;
              }
            }
            v24 = *(_QWORD *)(v16 + 88);
            v25 = v78;
            v65[0] = v66;
            v65[1] = (void *)0x600000000;
            sub_22E47EDD0((uint64_t)v65, (v78 + 63) >> 6, 0);
            v66[12] = v25;
            v67 = v76;
            v68 = v70;
            v69 = 0xA00000000;
            v71 = a2;
            v72 = v24;
            __base = v75;
            __nel = 0xC00000000;
            sub_22EEE3920((uint64_t)v65, v15);
            v26 = v69;
            if ((_DWORD)v69)
            {
              v27 = 0;
              while (1)
              {
                v28 = v67;
                v29 = *((_QWORD *)v68 + v26 - 1);
                v30 = v26 - 1;
                LODWORD(v69) = v26 - 1;
                if (((*(_QWORD *)((char *)*v67 + (((unint64_t)*(unsigned int *)(v29 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v29 + 48)) & 1) == 0)
                {
                  v32 = *(uint64_t **)v29;
                  v31 = *(_QWORD *)(v29 + 8);
                  while ((uint64_t *)v31 != v32)
                  {
                    v34 = *(_QWORD *)(v31 - 16);
                    v31 -= 16;
                    v33 = v34;
                    if ((unint64_t)((v34 & 3 | (4 * (*(_DWORD *)(v31 + 8) & 3u))) - 9) >= 0xFFFFFFFD)
                    {
                      v35 = (unsigned __int8 *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
                      sub_22F0D5A50(v33 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v36)
                      {
                        if ((*v35 & 0xFE) != 0x70 || (*(_DWORD *)v35 & 0xFC0000) != 0x800000)
                          goto LABEL_62;
                      }
                    }
                  }
                  v37 = *(_QWORD *)(v29 + 32);
                  v35 = (unsigned __int8 *)(v37 & 0xFFFFFFFFFFFFFFF8);
                  v38 = (v37 & 6) != 0 || v35 == 0;
                  if (v38
                    || (sub_22F0D5A50(v37 & 0xFFFFFFFFFFFFFFF8),
                        !v41 || (*v35 & 0xFE) == 0x70 && (*(_DWORD *)v35 & 0xFC0000) == 0x800000))
                  {
                    v39 = *(uint64_t **)(v29 + 56);
                    v40 = *(uint64_t **)(v29 + 64);
                    while (v39 != v40)
                    {
                      if (*v39)
                        sub_22EEE3920((uint64_t)v65, *v39);
                      v39 += 2;
                    }
                  }
                  else
                  {
LABEL_62:
                    sub_22F0D5A50((uint64_t)v35);
                    if (v42 < 0)
                    {
                      v51 = v71;
                      v53 = v29;
                      v52 = v28;
                      goto LABEL_76;
                    }
                    v44 = *(uint64_t **)(v29 + 56);
                    v43 = *(uint64_t **)(v29 + 64);
                    if (v44 == v43)
                      goto LABEL_74;
                    v45 = 1;
                    do
                    {
                      v46 = *v44;
                      if (*v44)
                      {
                        v47 = *(unsigned int *)(v46 + 48);
                        v48 = v47 >> 6;
                        v49 = *((_QWORD *)v65[0] + (v47 >> 6));
                        v50 = 1 << v47;
                        if ((v50 & v49) != 0)
                        {
                          v45 = 0;
                        }
                        else if ((*((_QWORD *)*v67 + v48) & v50) == 0)
                        {
                          *((_QWORD *)v65[0] + v48) = v50 | v49;
                          if (v30 >= HIDWORD(v69))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v30 = v69;
                          }
                          v45 = 0;
                          *((_QWORD *)v68 + v30) = v46;
                          v30 = v69 + 1;
                          LODWORD(v69) = v69 + 1;
                        }
                      }
                      v44 += 2;
                    }
                    while (v44 != v43);
                    if ((v45 & 1) != 0)
                    {
LABEL_74:
                      sub_22EEE39C0((uint64_t)v65, (uint64_t **)v29, v35, a3);
                      v51 = v71;
                      v52 = v67;
                      v53 = v29;
LABEL_76:
                      v27 += sub_22EEE2C98(v53, v52, v51, 1);
                      goto LABEL_40;
                    }
                    v54 = __nel;
                    if (__nel >= (unint64_t)HIDWORD(__nel))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v54 = __nel;
                    }
                    v55 = (uint64_t *)((char *)__base + 16 * v54);
                    *v55 = v29;
                    v55[1] = (uint64_t)v35;
                    LODWORD(__nel) = __nel + 1;
                  }
                }
LABEL_40:
                v26 = v69;
                if (!(_DWORD)v69)
                  goto LABEL_81;
              }
            }
            v27 = 0;
LABEL_81:
            if ((_DWORD)__nel)
            {
              if ((_DWORD)__nel == 1)
              {
                v56 = (unsigned __int8 **)__base;
                v57 = (unsigned __int8 **)((char *)__base + 16);
              }
              else
              {
                qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_22EEE3EC4);
                if (!(_DWORD)__nel)
                  goto LABEL_90;
                v56 = (unsigned __int8 **)__base;
                v57 = (unsigned __int8 **)((char *)__base + 16 * __nel);
              }
              do
              {
                v58 = (uint64_t **)*v56;
                if (((*(_QWORD *)((char *)*v67 + (((unint64_t)*((unsigned int *)*v56 + 12) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)*v56 + 12)) & 1) == 0)
                {
                  sub_22EEE39C0((uint64_t)v65, (uint64_t **)*v56, v56[1], a3);
                  v27 += sub_22EEE2C98((uint64_t)v58, v67, v71, 1);
                }
                v56 += 2;
              }
              while (v56 != v57);
            }
LABEL_90:
            v59 = *(_DWORD *)(v62 + 24);
            if (__base != v75)
              free(__base);
            a2 = v61;
            if (v68 != v70)
              free(v68);
            if (v65[0] != v66)
              free(v65[0]);
            v9 += v27;
            v13 = v60;
            if (v9 == v59)
              break;
LABEL_97:
            ++v14;
          }
          while (v14 != v13);
        }
      }
    }
    if (v76[0] != v77)
      free(v76[0]);
  }
}

uint64_t sub_22EEE3518(unsigned __int8 *a1, uint64_t a2, int *a3, int a4, char a5)
{
  uint64_t v6;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  int v45;

  if (!a1)
    return 0;
  LODWORD(v6) = a4;
  v9 = a1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v10 = *v9;
        if ((v10 + 21) < 0x7Bu)
          goto LABEL_5;
        v11 = sub_22EFFED0C(v9);
        v9 = v11;
        v10 = *v11;
        if ((v10 + 21) < 0x7Bu)
          goto LABEL_5;
        v20 = sub_22F3C22D4(v11);
        v9 = v20;
        v10 = *v20;
        if (v10 != 214)
          break;
        if ((*((_DWORD *)v20 + 4) & 0x80000000) != 0)
          goto LABEL_28;
        v19 = 0;
        v9 = (unsigned __int8 *)*((_QWORD *)v20 + 3);
        a5 = 1;
        if (!v9)
          return v19;
      }
      if ((v10 + 21) >= 0x7Bu)
      {
LABEL_28:
        v9 = sub_22F3C22D4(v20);
        v10 = *v9;
      }
LABEL_5:
      if (v10 != 233)
        break;
      v12 = (*(_DWORD *)v9 >> 18) & 0x1F;
      if (v12 != 9 && v12 != 7)
        return 0;
      if (a3)
      {
        v27 = *a3;
        v19 = sub_22EEE3518(*((_QWORD *)v9 + 2), a2, a3, v6 & 1, a5 & 1);
        if (!v27)
        {
          v28 = *a3;
          if (*a3)
          {
            v29 = sub_22F3C22D4(*((unsigned __int8 **)v9 + 2));
            sub_22F0D4E74((uint64_t)v29);
            if (v28 == v31 && a3[1] == v30)
            {
              sub_22F0D4E74((uint64_t)v9);
              *(_QWORD *)a3 = v32;
            }
          }
        }
        return v19;
      }
      v9 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
      if (!v9)
        return 0;
    }
    if (v10 > 180)
      break;
    if (v10 > 137)
    {
      if (v10 == 138)
      {
        v24 = sub_22EFFA604(*(unsigned __int8 **)&v9[v9[3]]);
        if (!v24 || (*(_DWORD *)(v24 + 28) & 0x7Eu) - 52 > 5)
          return 0;
        v25 = (*(_BYTE *)(v24 + 83) & 0xC0) == 0;
        return !v25;
      }
      if (v10 != 161)
        return 0;
      v21 = *((_QWORD *)v9 + 2);
      return sub_22EEE38A4(v21, a2);
    }
    if (v10 != 112)
    {
      if (v10 != 117)
        return 0;
LABEL_45:
      v23 = 0;
      if ((v6 & 1) == 0)
        return 0;
LABEL_54:
      if (a3 && !*a3)
      {
        sub_22F0D4E74((uint64_t)v9);
        *(_QWORD *)a3 = v26;
      }
      if ((a5 & 1) != 0)
        return 1;
      sub_22F0D5A50((uint64_t)v9);
      if ((v33 & 0x80000000) == 0)
        return 0;
      v34 = *(_QWORD **)(a2 + 88);
      if (v23)
      {
        do
        {
          v35 = v33;
          v33 = sub_22F2AB344(v34, v33);
        }
        while ((v33 & 0x80000000) != 0);
        v36 = sub_22F142460(v35, *(_QWORD *)(a2 + 88), *(_DWORD **)(a2 + 56));
        if (v37 != 2)
        {
          if (v37 != 3)
            return 1;
          v38 = *((unsigned __int8 *)v36 + 2);
          v39 = *(unsigned __int16 *)v36 == 17753;
          v40 = 83;
LABEL_77:
          v25 = v39 && v38 == v40;
          return !v25;
        }
        v44 = *(unsigned __int16 *)v36;
        v45 = 20302;
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)(a2 + 56) + 1) & 1) != 0)
          return 1;
        do
        {
          v41 = v33;
          v33 = sub_22F2AB344(v34, v33);
        }
        while ((v33 & 0x80000000) != 0);
        v42 = sub_22F142460(v41, *(_QWORD *)(a2 + 88), *(_DWORD **)(a2 + 56));
        if (v43 != 4)
        {
          if (v43 != 5)
            return 1;
          v38 = *((unsigned __int8 *)v42 + 4);
          v39 = *(_DWORD *)v42 == 1936482662;
          v40 = 101;
          goto LABEL_77;
        }
        v44 = *(_DWORD *)v42;
        v45 = 1702195828;
      }
      v25 = v44 == v45;
      return !v25;
    }
    v14 = (*(_DWORD *)v9 >> 18) & 0x3F;
    v15 = v14 - 19;
    v16 = v14 - 9;
    v18 = v15 < 2 || v16 < 7;
    v6 = v6 & v18;
    v19 = sub_22EEE3518(*((_QWORD *)v9 + 2), a2, a3, v6, 0);
    if ((v19 & 1) == 0)
    {
      a5 = 0;
      v9 = (unsigned __int8 *)*((_QWORD *)v9 + 3);
      if (v9)
        continue;
    }
    return v19;
  }
  if (v10 <= 194)
  {
    if (v10 == 181)
      goto LABEL_45;
    if (v10 != 188)
      return 0;
    v21 = *((_QWORD *)v9 + 3);
    return sub_22EEE38A4(v21, a2);
  }
  if (v10 == 195)
  {
    v23 = 1;
    if ((v6 & 1) == 0)
      return 0;
    goto LABEL_54;
  }
  return v10 == 232;
}

uint64_t sub_22EEE38A4(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && v3 == 67)
    return sub_22EEE3518(*(_QWORD *)(a1 + 56), a2, 0, 1, 0);
  if ((v3 - 60) > 6)
    return 0;
  if (sub_22E3CB5E0(a1))
    return *(_BYTE *)(a1 + 48) & 1;
  return 1;
}

uint64_t sub_22EEE3920(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a2 + 48);
  v3 = v2 >> 6;
  v4 = *(_QWORD *)(**(_QWORD **)(result + 72) + 8 * (v2 >> 6));
  v5 = 1 << v2;
  if ((v4 & v5) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)result + 8 * v3);
    if ((v6 & v5) == 0)
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v3) = v6 | v5;
      v7 = *(_DWORD *)(result + 88);
      if (v7 >= *(_DWORD *)(result + 92))
      {
        v8 = a2;
        v9 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v8;
        result = v9;
        v7 = *(_DWORD *)(v9 + 88);
      }
      *(_QWORD *)(*(_QWORD *)(result + 80) + 8 * v7) = a2;
      ++*(_DWORD *)(result + 88);
    }
  }
  return result;
}

uint64_t sub_22EEE39C0(uint64_t a1, uint64_t **a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t ***v22;
  _QWORD *v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned __int8 *v51;

  v5 = a3;
  v6 = *a3;
  if (v6 == 3)
  {
    v51 = 0;
    v7 = 1;
    goto LABEL_49;
  }
  v10 = (unint64_t)a2[4] & 0xFFFFFFFFFFFFFFF8;
  if (v10 && *(_BYTE *)v10 == 13 && sub_22EFFBBCC(*(unsigned __int8 **)(v10 + 16)) == a3)
  {
    result = (uint64_t)sub_22EFFBBCC(v5);
    v34 = *(unsigned __int8 *)result;
    if (v34 > 0xB4)
    {
      v46 = v34 - 181;
      if (v46 <= 0x2C && ((1 << v46) & 0x100000004001) != 0)
        return result;
    }
    else if (v34 == 117 || v34 == 154 || v34 == 161 && (*(_DWORD *)(*(_QWORD *)(result + 16) + 28) & 0x7F) == 0x43)
    {
      return result;
    }
  }
  if (v6 != 161
    || (v11 = *((_QWORD *)v5 + 2)) == 0
    || (*(_DWORD *)(v11 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA
    || (*(_QWORD *)(v11 + 40) >= 8uLL ? (v12 = (*(_QWORD *)(v11 + 40) & 7) == 0) : (v12 = 0),
        !v12 || (result = sub_22EFC01DC(v11, 0), (_DWORD)result != 505)))
  {
    v14 = *a2;
    if (*a2 == a2[1]
      || (v15 = *v14, (unint64_t)((*v14 & 3 | (4 * ((_DWORD)v14[1] & 3u))) - 6) > 2)
      || (v16 = v15 & 0xFFFFFFFFFFFFFFFCLL, (*(_BYTE *)(v15 & 0xFFFFFFFFFFFFFFFCLL) + 118) > 4u)
      || (v47 = *(_QWORD *)(a1 + 184), sub_22F3C22D4(*(unsigned __int8 **)(v16 + *(unsigned __int8 *)(v16 + 3))) != v5)
      || (result = sub_22F000500((unsigned int *)v16, v47), (result & 1) == 0))
    {
      v17 = a2;
      while (1)
      {
        for (i = *v17; ; i += 2)
        {
          if (i == v17[1])
            goto LABEL_26;
          v19 = *i;
          if ((unint64_t)((*i & 3 | (4 * ((_DWORD)i[1] & 3u))) - 9) >= 0xFFFFFFFD)
            break;
        }
        v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(_BYTE *)(v19 & 0xFFFFFFFFFFFFFFFCLL) == 93)
        {
          if ((unsigned __int8 *)v20 == v5)
            goto LABEL_48;
          v21 = *(unsigned __int8 **)(v20 + 8);
          if (v21)
            break;
        }
LABEL_26:
        if (((unint64_t)v17[4] & 6) == 2)
        {
          v17 = (uint64_t **)v17[10][2];
          continue;
        }
        if ((unint64_t)v17[4] <= 7)
        {
          v23 = v17 + 10;
          v22 = (uint64_t ***)v17[10];
          if (((v23[1] - (_QWORD)v22) & 0xFFFFFFFF0) == 0x10)
          {
            v17 = *v22;
            if ((((char *)v17[8] - (char *)v17[7]) & 0xFFFFFFFE0) == 0)
              continue;
          }
        }
        goto LABEL_31;
      }
      v35 = sub_22EFFBBCC(v21);
      if (v35 == v5)
      {
LABEL_48:
        v7 = 0;
        v51 = 0;
        goto LABEL_49;
      }
      sub_22F3EFC10((uint64_t *)&v49, v35);
      v50 = 0;
      v51 = v5;
      if (!sub_22F246C54(v49, &v51, &v50))
      {
        sub_22F3EFC78((uint64_t *)&v49);
LABEL_31:
        v51 = 0;
        goto LABEL_32;
      }
      v48 = *(_QWORD *)(v50 + 8);
      sub_22F3EFC78((uint64_t *)&v49);
      v7 = 0;
      v51 = 0;
      if (v48)
        goto LABEL_49;
LABEL_32:
      v24 = a2[5];
      if (!v24)
      {
        v31 = a2[7];
        if (v31 != a2[8])
        {
          v32 = v31[1] & 0xFFFFFFFFFFFFFFF8;
          if (v32)
          {
            v33 = sub_22EED4398(v32, 0);
            sub_22EEE3518(v33, *(_QWORD *)(a1 + 176), (int *)&v51, 1, 0);
          }
        }
        v7 = 3;
LABEL_49:
        v36 = *v5;
        if ((v36 + 21) >= 0x7Bu)
        {
          v5 = sub_22EFFA6B0(v5);
          v36 = *v5;
        }
        if (v36 <= 143)
        {
          switch(v36)
          {
            case 'f':
            case 'g':
              v37 = 0;
              LODWORD(v38) = 0;
              v39 = 0;
              LODWORD(v40) = 0;
              v41 = *((_DWORD *)v5 + 4);
              break;
            case 'h':
            case 'i':
            case 'j':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
              goto LABEL_66;
            case 'k':
            case 'q':
              sub_22F0D4E74(*((_QWORD *)v5 + 2));
              LODWORD(v38) = v44;
              v37 = v44 & 0xFFFFFFFF00000000;
              sub_22F0D4E74(*((_QWORD *)v5 + 3));
              v39 = v40 & 0xFFFFFFFF00000000;
              goto LABEL_69;
            case 'p':
              v37 = 0;
              LODWORD(v38) = 0;
              v39 = 0;
              LODWORD(v40) = 0;
              goto LABEL_69;
            default:
              if (v36 != 6)
                goto LABEL_66;
              v37 = 0;
              LODWORD(v38) = 0;
              v39 = 0;
              LODWORD(v40) = 0;
              v41 = *(_DWORD *)(*((_QWORD *)v5 + 3) + 8);
              break;
          }
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, v7, v41, v51, v38 | v37, v40 | v39);
        }
        if (v36 <= 151)
        {
          if (v36 != 144)
          {
            if (v36 == 145)
            {
              sub_22F0D4E74(*((_QWORD *)v5 + 2));
              LODWORD(v38) = v42;
              v37 = v42 & 0xFFFFFFFF00000000;
              v43 = sub_22F0613F8((uint64_t)v5);
LABEL_67:
              v41 = v43;
              v39 = 0;
              LODWORD(v40) = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, v7, v41, v51, v38 | v37, v40 | v39);
            }
LABEL_66:
            sub_22F0D4E74((uint64_t)v5);
            LODWORD(v38) = v45;
            v37 = v45 & 0xFFFFFFFF00000000;
            sub_22F0D5A50((uint64_t)v5);
            goto LABEL_67;
          }
        }
        else if (v36 != 152)
        {
          if (v36 == 188)
          {
            sub_22F0D4E74((uint64_t)v5);
            v38 = v40;
            v39 = 0;
            LODWORD(v40) = 0;
            v37 = v38 & 0xFFFFFFFF00000000;
            v41 = *((_DWORD *)v5 + 10);
            return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, v7, v41, v51, v38 | v37, v40 | v39);
          }
          if (v36 == 233)
          {
            sub_22F0D4E74(*((_QWORD *)v5 + 2));
            v38 = v40;
            v39 = 0;
            LODWORD(v40) = 0;
            v37 = v38 & 0xFFFFFFFF00000000;
LABEL_69:
            v41 = *((_DWORD *)v5 + 1);
            return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, v7, v41, v51, v38 | v37, v40 | v39);
          }
          goto LABEL_66;
        }
        sub_22F0D4E74(*((_QWORD *)v5 + 2));
        v38 = v40;
        v39 = 0;
        LODWORD(v40) = 0;
        v37 = v38 & 0xFFFFFFFF00000000;
        v41 = *((_DWORD *)v5 + 8);
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, unint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, v7, v41, v51, v38 | v37, v40 | v39);
      }
      sub_22F0D5A50((uint64_t)a2[5]);
      if (*(_BYTE *)v24 == 14)
      {
        v26 = v24[4];
        sub_22F0D5A50(v26);
        v28 = v27;
        sub_22F0D4E74(v26);
        v30 = v29;
      }
      else
      {
        v28 = v25;
        v30 = 0;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, 2, v28, 0, v28 | ((unint64_t)v28 << 32), v30);
    }
  }
  return result;
}

uint64_t sub_22EEE3EC4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  sub_22F0D5A50(*(_QWORD *)(a1 + 8));
  v4 = v3;
  sub_22F0D5A50(*(_QWORD *)(a2 + 8));
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  else
    return v5 < v4;
}

void sub_22EEE3F04(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void **v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  void **v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  void **v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  void **v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  void **v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int *v170;
  int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  void **v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int *v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  void **v269;
  unsigned int *v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int v281;
  void **v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int *v286;
  unsigned int *v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int v348;
  unsigned int v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  uint64_t v352;
  unint64_t v353;
  int i;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  void **v363;
  uint64_t v364;
  uint64_t v365;
  void **v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  char *v371;
  void *v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  _BYTE *v377;
  char v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  int v387;
  BOOL v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _BYTE *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  int v410;
  BOOL v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  BOOL v416;
  int v417;
  uint64_t v418;
  llvm *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t *v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  uint64_t (***v433)(_QWORD);
  uint64_t v434;
  uint64_t *v435;
  _QWORD *v436;
  _QWORD *v437;
  int v438;
  char *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  __int128 v443;
  uint64_t v444;
  void *v445;
  llvm *v446;
  char *v447;
  _QWORD *v448;
  char *v449;
  void *v450;
  _QWORD *v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  llvm *v456;
  uint64_t v457;
  unint64_t v458;
  _QWORD *j;
  _QWORD *v460;
  int v461;
  uint64_t v462;
  _BYTE v463[16];
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  char v471;
  int32x2_t v472;
  uint64_t v473;
  void *v474;
  void *__p;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  unsigned int *v479;
  uint64_t v480;
  int v481;
  unsigned int *v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  unsigned int *v488;
  _BYTE v489[16];
  uint64_t v490;
  __int16 v491;
  char v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  _BYTE v497[16];
  uint64_t v498;
  _BYTE v499[16];
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  _BYTE v504[16];
  uint64_t v505;
  char *v506;
  int v507;
  uint64_t v508;
  uint64_t (**v509)();
  void *v510;
  char *v511;
  uint64_t v512;
  __int128 v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  _BYTE v519[12];
  uint64_t v520;
  uint64_t v521;
  void **v522;
  void **v523;
  _BYTE v524[4];
  int32x2_t v525;
  uint64_t v526;
  _BYTE v527[24];
  unsigned int *v528;
  _BYTE v529[12];
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  __int128 v538;
  int v539;
  unsigned int *v540;
  uint64_t v541;
  int v542;
  unsigned int *v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  unsigned int *v549;
  uint64_t *v550;
  uint64_t v551;
  unsigned int *v552;
  unsigned int *v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t *v560[2];
  uint64_t v561;
  uint64_t *v562;
  char *v563;
  __int128 v564;
  uint64_t v565;
  int v566;
  __int128 v567;
  uint64_t v568;
  __int128 v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  __int128 v578;
  _BYTE v579[112];
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  _BYTE *v584;
  _BYTE *v585;
  uint64_t v586;
  int v587;
  _BYTE v588[136];
  char v589;
  uint64_t v590;
  uint64_t **v591;
  unsigned int v592;
  unsigned int *v593;
  uint64_t v594;
  unsigned int v595;
  unsigned int *v596;
  uint64_t *v597[4];

  v597[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v582 = 0u;
  v583 = 0u;
  v580 = 0u;
  v581 = 0u;
  v578 = 0u;
  memset(v579, 0, sizeof(v579));
  v584 = v588;
  v585 = v588;
  v586 = 16;
  v587 = 0;
  v588[128] = 0;
  v589 = 0;
  v590 = 0;
  v509 = &off_24FAB9978;
  v510 = 0;
  v512 = 0;
  v511 = 0;
  v4 = operator new();
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)v4 = v4 + 32;
  *(_QWORD *)(v4 + 8) = v4 + 32;
  *(_DWORD *)(v4 + 16) = 16;
  v514 = 0;
  v513 = (unint64_t)v4;
  v515 = 0;
  v594 = 11051;
  HIBYTE(v596) = 2;
  v527[0] = 0;
  *(int32x2_t *)&v527[4] = vdup_n_s32(0x1A5u);
  *(_QWORD *)&v527[16] = sub_22EEFB948((uint64_t)&v594);
  v5 = (unsigned int *)(*(_QWORD *)&v527[16] + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  sub_22EEE65D4((uint64_t)&v534);
  sub_22F3510EC((uint64_t)&v521, (int *)&v534);
  v7 = operator new();
  v8 = v7;
  *(_DWORD *)(v7 + 8) = 0;
  v9 = (unsigned int *)(v7 + 8);
  *(_QWORD *)v7 = &off_24FAB9B68;
  *(_QWORD *)(v7 + 16) = v521;
  *(_DWORD *)(v7 + 24) = (_DWORD)v522;
  v10 = v523;
  *(_QWORD *)(v7 + 32) = v523;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  do
    v13 = __ldxr(v9);
  while (__stxr(v13 + 1, v9));
  v458 = a1;
  v524[0] = 0;
  v525 = vdup_n_s32(0x119u);
  v526 = v7;
  do
    v14 = __ldxr(v9);
  while (__stxr(v14 + 1, v9));
  sub_22F350FC8((uint64_t)&v474, (uint64_t *)v527, (uint64_t)v524);
  sub_22F34E5B0((uint64_t)&v562, (uint64_t)&v474, "op", 2uLL);
  v591 = &v562;
  sub_22EEE8250((uint64_t)v504, (uint64_t **)&v591, 1);
  v15 = v564;
  if ((_QWORD)v564)
  {
    v16 = (unsigned int *)(v564 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = v476;
  if (v476)
  {
    v20 = (unsigned int *)(v476 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v23 = v526;
  if (v526)
  {
    v24 = (unsigned int *)(v526 + 8);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  do
  {
    v27 = __ldaxr(v9);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v9));
  if (!v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v29 = v523;
  if (v523)
  {
    v30 = (unsigned int *)(v523 + 1);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*((void (**)(void **))*v29 + 1))(v29);
  }
  sub_22F355ED4(&v535);
  v33 = *(_QWORD *)&v527[16];
  if (*(_QWORD *)&v527[16])
  {
    v34 = (unsigned int *)(*(_QWORD *)&v527[16] + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  if (SHIBYTE(v596) < 0)
    operator delete((void *)v594);
  sub_22F34E5B0((uint64_t)&v506, (uint64_t)v504, "Increment", 9uLL);
  v594 = 11565;
  HIBYTE(v596) = 2;
  v37 = sub_22EEFB948((uint64_t)&v594);
  v527[0] = 0;
  *(int32x2_t *)&v527[4] = vdup_n_s32(0x1A5u);
  *(_QWORD *)&v527[16] = v37;
  v38 = (unsigned int *)(v37 + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  sub_22EEE65D4((uint64_t)&v534);
  sub_22F3510EC((uint64_t)&v521, (int *)&v534);
  v40 = operator new();
  v41 = v40;
  *(_DWORD *)(v40 + 8) = 0;
  v42 = (unsigned int *)(v40 + 8);
  *(_QWORD *)v40 = &off_24FAB9B68;
  *(_QWORD *)(v40 + 16) = v521;
  *(_DWORD *)(v40 + 24) = (_DWORD)v522;
  v43 = v523;
  *(_QWORD *)(v40 + 32) = v523;
  if (v43)
  {
    v44 = (unsigned int *)(v43 + 1);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  do
    v46 = __ldxr(v42);
  while (__stxr(v46 + 1, v42));
  v524[0] = 0;
  v525 = vdup_n_s32(0x119u);
  v526 = v40;
  do
    v47 = __ldxr(v42);
  while (__stxr(v47 + 1, v42));
  sub_22F350FC8((uint64_t)&v474, (uint64_t *)v527, (uint64_t)v524);
  sub_22F34E5B0((uint64_t)&v562, (uint64_t)&v474, "op", 2uLL);
  v591 = &v562;
  sub_22EEE8250((uint64_t)v499, (uint64_t **)&v591, 1);
  v48 = v564;
  if ((_QWORD)v564)
  {
    v49 = (unsigned int *)(v564 + 8);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  v52 = v476;
  if (v476)
  {
    v53 = (unsigned int *)(v476 + 8);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  v56 = v526;
  if (v526)
  {
    v57 = (unsigned int *)(v526 + 8);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  do
  {
    v60 = __ldaxr(v42);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v42));
  if (!v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v62 = v523;
  if (v523)
  {
    v63 = (unsigned int *)(v523 + 1);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
      (*((void (**)(void **))*v62 + 1))(v62);
  }
  sub_22F355ED4(&v535);
  v66 = *(_QWORD *)&v527[16];
  if (*(_QWORD *)&v527[16])
  {
    v67 = (unsigned int *)(*(_QWORD *)&v527[16] + 8);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
  if (SHIBYTE(v596) < 0)
    operator delete((void *)v594);
  sub_22F34E5B0((uint64_t)&v501, (uint64_t)v499, "Decrement", 9uLL);
  sub_22EEE65D4((uint64_t)&v534);
  sub_22F3510EC((uint64_t)&v521, (int *)&v534);
  v70 = operator new();
  *(_DWORD *)(v70 + 8) = 0;
  v71 = (unsigned int *)(v70 + 8);
  *(_QWORD *)v70 = &off_24FAB9B68;
  *(_QWORD *)(v70 + 16) = v521;
  *(_DWORD *)(v70 + 24) = (_DWORD)v522;
  v72 = v523;
  *(_QWORD *)(v70 + 32) = v523;
  if (v72)
  {
    v73 = (unsigned int *)(v72 + 1);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  do
    v75 = __ldxr(v71);
  while (__stxr(v75 + 1, v71));
  v76 = operator new();
  *(_DWORD *)(v76 + 8) = 0;
  v77 = (unsigned int *)(v76 + 8);
  *(_QWORD *)v76 = &off_24FAB9BD8;
  *(_BYTE *)(v76 + 16) = 0;
  *(int32x2_t *)(v76 + 20) = vdup_n_s32(0x119u);
  *(_QWORD *)(v76 + 32) = v70;
  do
    v78 = __ldxr(v71);
  while (__stxr(v78 + 1, v71));
  do
    v79 = __ldxr(v77);
  while (__stxr(v79 + 1, v77));
  v462 = a2;
  v80 = operator new();
  *(_QWORD *)v80 = &off_24FAB9C48;
  *(_DWORD *)(v80 + 12) = 0;
  *(_DWORD *)(v80 + 8) = 0;
  v81 = (unsigned int *)(v80 + 8);
  v520 = v80;
  v519[0] = 0;
  *(int32x2_t *)&v519[4] = vdup_n_s32(0x16Fu);
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
  v562 = (uint64_t *)v519;
  sub_22F351FF8((uint64_t)&v591, &v562, 1);
  v83 = v591;
  v84 = v593;
  if (v593)
  {
    v85 = v593 + 2;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = sub_22EF95614(0x119u, v592);
  v88 = operator new();
  *(_DWORD *)(v88 + 8) = 0;
  v89 = (unsigned int *)(v88 + 8);
  *(_QWORD *)v88 = &off_24FAB9C10;
  *(_QWORD *)(v88 + 16) = v83 | 0x11900000000;
  *(_DWORD *)(v88 + 24) = v87;
  *(_QWORD *)(v88 + 32) = v84;
  if (v84)
  {
    v90 = v84 + 2;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  do
    v92 = __ldxr(v89);
  while (__stxr(v92 + 1, v89));
  sub_22EEE72EC((uint64_t)&v474);
  sub_22F351978((uint64_t)&v516, (int *)&v474);
  v93 = operator new();
  *(_DWORD *)(v93 + 8) = 0;
  v94 = (unsigned int *)(v93 + 8);
  *(_QWORD *)v93 = &off_24FAB9B68;
  *(_QWORD *)(v93 + 16) = v516;
  *(_DWORD *)(v93 + 24) = v517;
  v95 = v518;
  *(_QWORD *)(v93 + 32) = v518;
  if (v95)
  {
    v96 = (unsigned int *)(v95 + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  do
    v98 = __ldxr(v94);
  while (__stxr(v98 + 1, v94));
  v99 = operator new();
  *(_DWORD *)(v99 + 8) = 0;
  v100 = (unsigned int *)(v99 + 8);
  *(_QWORD *)v99 = &off_24FAB9BD8;
  *(_BYTE *)(v99 + 16) = 0;
  *(int32x2_t *)(v99 + 20) = vdup_n_s32(0x119u);
  *(_QWORD *)(v99 + 32) = v93;
  do
    v101 = __ldxr(v94);
  while (__stxr(v101 + 1, v94));
  do
    v102 = __ldxr(v100);
  while (__stxr(v102 + 1, v100));
  LODWORD(v562) = 1;
  LODWORD(v563) = 0;
  LOBYTE(v564) = 0;
  *(_WORD *)((char *)&v564 + 1) = v494;
  BYTE3(v564) = BYTE2(v494);
  *(int32x2_t *)((char *)&v564 + 4) = vdup_n_s32(0x120u);
  v565 = v76;
  v566 = 4;
  LOBYTE(v567) = 0;
  *(_WORD *)((char *)&v567 + 1) = v491;
  BYTE3(v567) = v492;
  *(_QWORD *)((char *)&v567 + 4) = *(_QWORD *)((char *)&v564 + 4);
  v568 = v88;
  LOBYTE(v569) = 0;
  *(_QWORD *)((char *)&v569 + 4) = *(_QWORD *)((char *)&v564 + 4);
  v570 = v99;
  sub_22F351A40((uint64_t)v524, (int *)&v562);
  *(_QWORD *)v527 = v524;
  sub_22F351B08((uint64_t)&v594, (uint64_t **)v527, 1);
  sub_22F34E5B0((uint64_t)v527, (uint64_t)&v594, "arraySubscr", 0xBuLL);
  v560[0] = (uint64_t *)v527;
  sub_22EEE8250((uint64_t)v497, v560, 1);
  v103 = *(_QWORD *)&v527[16];
  if (*(_QWORD *)&v527[16])
  {
    v104 = (unsigned int *)(*(_QWORD *)&v527[16] + 8);
    do
    {
      v105 = __ldaxr(v104);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, v104));
    if (!v106)
      (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  }
  v107 = v596;
  if (v596)
  {
    v108 = v596 + 2;
    do
    {
      v109 = __ldaxr(v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v108));
    if (!v110)
      (*(void (**)(unsigned int *))(*(_QWORD *)v107 + 8))(v107);
  }
  v111 = v526;
  if (v526)
  {
    v112 = (unsigned int *)(v526 + 8);
    do
    {
      v113 = __ldaxr(v112);
      v114 = v113 - 1;
    }
    while (__stlxr(v114, v112));
    if (!v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  }
  v115 = v570;
  if (v570)
  {
    v116 = (unsigned int *)(v570 + 8);
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, v116));
    if (!v118)
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  }
  v119 = v568;
  if (v568)
  {
    v120 = (unsigned int *)(v568 + 8);
    do
    {
      v121 = __ldaxr(v120);
      v122 = v121 - 1;
    }
    while (__stlxr(v122, v120));
    if (!v122)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  v123 = v565;
  if (v565)
  {
    v124 = (unsigned int *)(v565 + 8);
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  }
  do
  {
    v127 = __ldaxr(v94);
    v128 = v127 - 1;
  }
  while (__stlxr(v128, v94));
  if (!v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v129 = v518;
  if (v518)
  {
    v130 = (unsigned int *)(v518 + 8);
    do
    {
      v131 = __ldaxr(v130);
      v132 = v131 - 1;
    }
    while (__stlxr(v132, v130));
    if (!v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  }
  sub_22F355E30(&__p);
  if (v84)
  {
    v133 = v84 + 2;
    do
    {
      v134 = __ldaxr(v133);
      v135 = v134 - 1;
    }
    while (__stlxr(v135, v133));
    if (!v135)
      (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
  }
  v136 = v593;
  if (v593)
  {
    v137 = v593 + 2;
    do
    {
      v138 = __ldaxr(v137);
      v139 = v138 - 1;
    }
    while (__stlxr(v139, v137));
    if (!v139)
      (*(void (**)(unsigned int *))(*(_QWORD *)v136 + 8))(v136);
  }
  v140 = v520;
  if (v520)
  {
    v141 = (unsigned int *)(v520 + 8);
    do
    {
      v142 = __ldaxr(v141);
      v143 = v142 - 1;
    }
    while (__stlxr(v143, v141));
    if (!v143)
      (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  }
  do
  {
    v144 = __ldaxr(v71);
    v145 = v144 - 1;
  }
  while (__stlxr(v145, v71));
  if (!v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v146 = v523;
  if (v523)
  {
    v147 = (unsigned int *)(v523 + 1);
    do
    {
      v148 = __ldaxr(v147);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, v147));
    if (!v149)
      (*((void (**)(void **))*v146 + 1))(v146);
  }
  sub_22F355ED4(&v535);
  sub_22F34E5B0((uint64_t)v519, (uint64_t)v497, "ArraySubscript", 0xEuLL);
  v150 = (unsigned int *)operator new();
  *((_QWORD *)v150 + 1) = 0;
  v151 = v150 + 2;
  *(_QWORD *)v150 = &off_24FAB9C88;
  do
    v152 = __ldxr(v151);
  while (__stxr(v152 + 1, v151));
  do
    v153 = __ldxr(v151);
  while (__stxr(v153 + 1, v151));
  sub_22F352784((uint64_t)&v534);
  v154 = operator new();
  *(_DWORD *)(v154 + 8) = 0;
  v155 = (unsigned int *)(v154 + 8);
  *(_QWORD *)v154 = &unk_24FAB9EB8;
  *(_QWORD *)(v154 + 16) = v534;
  *(_DWORD *)(v154 + 24) = v535;
  v156 = v536;
  *(_QWORD *)(v154 + 32) = v536;
  if (v156)
  {
    v157 = (unsigned int *)(v156 + 8);
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
  }
  do
    v159 = __ldxr(v155);
  while (__stxr(v159 + 1, v155));
  do
    v160 = __ldxr(v155);
  while (__stxr(v160 + 1, v155));
  *(_DWORD *)v527 = 1;
  v527[8] = 0;
  *(_QWORD *)&v527[12] = 0x600000006;
  v528 = v150;
  v529[0] = 0;
  *(_QWORD *)&v529[4] = 0x600000006;
  v530 = v154;
  do
  {
    v161 = __ldaxr(v155);
    v162 = v161 - 1;
  }
  while (__stlxr(v162, v155));
  if (!v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v163 = v536;
  if (v536)
  {
    v164 = (unsigned int *)(v536 + 8);
    do
    {
      v165 = __ldaxr(v164);
      v166 = v165 - 1;
    }
    while (__stlxr(v166, v164));
    if (!v166)
      (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  }
  do
  {
    v167 = __ldaxr(v151);
    v168 = v167 - 1;
  }
  while (__stlxr(v168, v151));
  if (!v168)
    (*(void (**)(unsigned int *))(*(_QWORD *)v150 + 8))(v150);
  sub_22EEE65D4((uint64_t)&v534);
  sub_22F3510EC((uint64_t)v524, (int *)&v534);
  v562 = (uint64_t *)v524;
  sub_22F352B0C((uint64_t)&v594, &v562, 1);
  sub_22F34E5B0((uint64_t)&v562, (uint64_t)&v594, "ptrAddPtr", 9uLL);
  v169 = v562;
  v170 = (unsigned int *)v564;
  if ((_QWORD)v564)
  {
    v172 = (unsigned int *)(v564 + 8);
    do
      v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
    v171 = sub_22EF95614(0x119u, v563);
    do
      v174 = __ldxr(v172);
    while (__stxr(v174 + 1, v172));
  }
  else
  {
    v171 = sub_22EF95614(0x119u, v563);
  }
  v175 = v169 | 0x11900000000;
  sub_22F3525BC((uint64_t)&v521, (int *)v527);
  v176 = (unsigned int *)v523;
  if (v523)
  {
    v177 = (unsigned int *)(v523 + 1);
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
  }
  LODWORD(v474) = 0;
  __p = (void *)43;
  BYTE7(v477) = 1;
  *((_QWORD *)&v477 + 1) = v175;
  LODWORD(v478) = v171;
  v479 = v170;
  v480 = v521;
  v481 = (int)v522;
  v482 = v176;
  if (v176)
  {
    v179 = v176 + 2;
    do
    {
      v180 = __ldaxr(v179);
      v181 = v180 - 1;
    }
    while (__stlxr(v181, v179));
    if (!v181)
      (*(void (**)(unsigned int *))(*(_QWORD *)v176 + 8))(v176);
  }
  if (v170)
  {
    v182 = v170 + 2;
    do
    {
      v183 = __ldaxr(v182);
      v184 = v183 - 1;
    }
    while (__stlxr(v184, v182));
    if (!v184)
      (*(void (**)(unsigned int *))(*(_QWORD *)v170 + 8))(v170);
  }
  v185 = v564;
  if ((_QWORD)v564)
  {
    v186 = (unsigned int *)(v564 + 8);
    do
    {
      v187 = __ldaxr(v186);
      v188 = v187 - 1;
    }
    while (__stlxr(v188, v186));
    if (!v188)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  }
  v189 = v596;
  if (v596)
  {
    v190 = v596 + 2;
    do
    {
      v191 = __ldaxr(v190);
      v192 = v191 - 1;
    }
    while (__stlxr(v192, v190));
    if (!v192)
      (*(void (**)(unsigned int *))(*(_QWORD *)v189 + 8))(v189);
  }
  v193 = v526;
  if (v526)
  {
    v194 = (unsigned int *)(v526 + 8);
    do
    {
      v195 = __ldaxr(v194);
      v196 = v195 - 1;
    }
    while (__stlxr(v196, v194));
    if (!v196)
      (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  }
  sub_22F355ED4(&v535);
  sub_22EEE65D4((uint64_t)&v562);
  sub_22F3510EC((uint64_t)&v521, (int *)&v562);
  v534 = &v521;
  sub_22F352B0C((uint64_t)v524, (uint64_t **)&v534, 1);
  sub_22F34E5B0((uint64_t)&v594, (uint64_t)v524, "ptrAddPtr", 9uLL);
  v197 = v594;
  v198 = v596;
  if (v596)
  {
    v200 = v596 + 2;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
    v199 = sub_22EF95614(0x119u, v595);
    do
      v202 = __ldxr(v200);
    while (__stxr(v202 + 1, v200));
  }
  else
  {
    v199 = sub_22EF95614(0x119u, v595);
  }
  v203 = v197 | 0x11900000000;
  sub_22F3525BC((uint64_t)&v591, (int *)v527);
  v204 = v593;
  if (v593)
  {
    v205 = v593 + 2;
    do
      v206 = __ldxr(v205);
    while (__stxr(v206 + 1, v205));
  }
  LODWORD(v534) = 0;
  LODWORD(v535) = 1;
  v536 = 43;
  BYTE7(v538) = 1;
  *((_QWORD *)&v538 + 1) = 45;
  HIBYTE(v540) = 1;
  v541 = 15659;
  HIBYTE(v543) = 2;
  v544 = 15661;
  HIBYTE(v546) = 2;
  v547 = v203;
  v548 = v199;
  v549 = v198;
  v550 = (uint64_t *)v591;
  LODWORD(v551) = v592;
  v552 = v204;
  if (v204)
  {
    v207 = v204 + 2;
    do
    {
      v208 = __ldaxr(v207);
      v209 = v208 - 1;
    }
    while (__stlxr(v209, v207));
    if (!v209)
      (*(void (**)(unsigned int *))(*(_QWORD *)v204 + 8))(v204);
  }
  if (v198)
  {
    v210 = v198 + 2;
    do
    {
      v211 = __ldaxr(v210);
      v212 = v211 - 1;
    }
    while (__stlxr(v212, v210));
    if (!v212)
      (*(void (**)(unsigned int *))(*(_QWORD *)v198 + 8))(v198);
  }
  v213 = v596;
  if (v596)
  {
    v214 = v596 + 2;
    do
    {
      v215 = __ldaxr(v214);
      v216 = v215 - 1;
    }
    while (__stlxr(v216, v214));
    if (!v216)
      (*(void (**)(unsigned int *))(*(_QWORD *)v213 + 8))(v213);
  }
  v217 = v526;
  if (v526)
  {
    v218 = (unsigned int *)(v526 + 8);
    do
    {
      v219 = __ldaxr(v218);
      v220 = v219 - 1;
    }
    while (__stlxr(v220, v218));
    if (!v220)
      (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  }
  v221 = v523;
  if (v523)
  {
    v222 = (unsigned int *)(v523 + 1);
    do
    {
      v223 = __ldaxr(v222);
      v224 = v223 - 1;
    }
    while (__stlxr(v224, v222));
    if (!v224)
      (*((void (**)(void **))*v221 + 1))(v221);
  }
  sub_22F355ED4(&v563);
  LODWORD(v521) = 1;
  v522 = &v534;
  v523 = &v474;
  sub_22F352684((uint64_t)v524, (int *)&v521);
  v562 = (uint64_t *)v524;
  sub_22F352E6C((uint64_t)&v594, &v562, 1);
  sub_22F34E5B0((uint64_t)&v562, (uint64_t)&v594, "ptrAdd", 6uLL);
  v591 = &v562;
  sub_22EEE8250((uint64_t)v560, (uint64_t **)&v591, 1);
  v225 = v564;
  if ((_QWORD)v564)
  {
    v226 = (unsigned int *)(v564 + 8);
    do
    {
      v227 = __ldaxr(v226);
      v228 = v227 - 1;
    }
    while (__stlxr(v228, v226));
    if (!v228)
      (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  }
  v229 = v596;
  if (v596)
  {
    v230 = v596 + 2;
    do
    {
      v231 = __ldaxr(v230);
      v232 = v231 - 1;
    }
    while (__stlxr(v232, v230));
    if (!v232)
      (*(void (**)(unsigned int *))(*(_QWORD *)v229 + 8))(v229);
  }
  v233 = v526;
  if (v526)
  {
    v234 = (unsigned int *)(v526 + 8);
    do
    {
      v235 = __ldaxr(v234);
      v236 = v235 - 1;
    }
    while (__stlxr(v236, v234));
    if (!v236)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  }
  sub_22F353750((uint64_t)&v535);
  v237 = v482;
  if (v482)
  {
    v238 = v482 + 2;
    do
    {
      v239 = __ldaxr(v238);
      v240 = v239 - 1;
    }
    while (__stlxr(v240, v238));
    if (!v240)
      (*(void (**)(unsigned int *))(*(_QWORD *)v237 + 8))(v237);
  }
  v241 = v479;
  if (v479)
  {
    v242 = v479 + 2;
    do
    {
      v243 = __ldaxr(v242);
      v244 = v243 - 1;
    }
    while (__stlxr(v244, v242));
    if (!v244)
      (*(void (**)(unsigned int *))(*(_QWORD *)v241 + 8))(v241);
  }
  if (SBYTE7(v477) < 0)
    operator delete(__p);
  v245 = v530;
  if (v530)
  {
    v246 = (unsigned int *)(v530 + 8);
    do
    {
      v247 = __ldaxr(v246);
      v248 = v247 - 1;
    }
    while (__stlxr(v248, v246));
    if (!v248)
      (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  }
  v249 = v528;
  if (v528)
  {
    v250 = v528 + 2;
    do
    {
      v251 = __ldaxr(v250);
      v252 = v251 - 1;
    }
    while (__stlxr(v252, v250));
    if (!v252)
      (*(void (**)(unsigned int *))(*(_QWORD *)v249 + 8))(v249);
  }
  sub_22F34E5B0((uint64_t)&v516, (uint64_t)v560, "PointerArithmetic", 0x11uLL);
  sub_22EEE65D4((uint64_t)&v474);
  sub_22EEE72EC((uint64_t)v527);
  LODWORD(v534) = 1;
  LODWORD(v535) = (_DWORD)v474;
  v536 = (uint64_t)__p;
  v537 = v476;
  v538 = v477;
  v539 = v478;
  v542 = v481;
  v253 = v479;
  *(_QWORD *)&v477 = 0;
  v479 = 0;
  v540 = v253;
  v541 = v480;
  v545 = v484;
  v543 = v482;
  v544 = v483;
  v254 = v485;
  v482 = 0;
  v485 = 0;
  v546 = v254;
  v547 = v486;
  v548 = v487;
  v549 = v488;
  v488 = 0;
  LODWORD(v550) = *(_DWORD *)v527;
  LODWORD(v552) = *(_DWORD *)&v527[16];
  v551 = *(_QWORD *)&v527[8];
  v555 = *(_DWORD *)&v529[8];
  v553 = v528;
  v554 = *(_QWORD *)v529;
  v558 = v532;
  v255 = v530;
  v528 = 0;
  v530 = 0;
  v556 = v255;
  v557 = v531;
  v559 = v533;
  v533 = 0;
  sub_22F34E6C4((uint64_t)v489, (int *)&v534);
  sub_22F3558E8((uint64_t)&v468);
  v256 = operator new();
  *(_DWORD *)(v256 + 8) = 0;
  v257 = (unsigned int *)(v256 + 8);
  *(_QWORD *)v256 = &off_24FAB9E80;
  *(_QWORD *)(v256 + 16) = v468;
  *(_DWORD *)(v256 + 24) = v469;
  v258 = v470;
  *(_QWORD *)(v256 + 32) = v470;
  if (v258)
  {
    v259 = (unsigned int *)(v258 + 8);
    do
      v260 = __ldxr(v259);
    while (__stxr(v260 + 1, v259));
  }
  v471 = 0;
  v472 = vdup_n_s32(0x15Au);
  v473 = v256;
  do
    v261 = __ldxr(v257);
  while (__stxr(v261 + 1, v257));
  v562 = (uint64_t *)v489;
  v563 = &v471;
  sub_22F3537D0((uint64_t)&v491, &v562, 2);
  sub_22F34E5B0((uint64_t)&v494, (uint64_t)&v491, "any_dre", 7uLL);
  sub_22F355AF8((uint64_t)v463);
  sub_22F34E5B0((uint64_t)&v465, (uint64_t)v463, "any_ds", 6uLL);
  LODWORD(v562) = 1;
  v563 = v506;
  LODWORD(v564) = v507;
  v262 = v508;
  v508 = 0;
  *((_QWORD *)&v564 + 1) = v262;
  v565 = v501;
  v566 = v502;
  v263 = v503;
  v503 = 0;
  *(_QWORD *)&v567 = v263;
  *((_QWORD *)&v567 + 1) = *(_QWORD *)v519;
  LODWORD(v568) = *(_DWORD *)&v519[8];
  v264 = v520;
  v520 = 0;
  LODWORD(v570) = v517;
  *(_QWORD *)&v569 = v264;
  *((_QWORD *)&v569 + 1) = v516;
  v265 = v518;
  v518 = 0;
  v573 = v495;
  v571 = v265;
  v572 = v494;
  v266 = v496;
  v496 = 0;
  v576 = v466;
  v574 = v266;
  v575 = v465;
  v577 = v467;
  v467 = 0;
  sub_22F34E78C((uint64_t)&v591, (int *)&v562);
  v594 = (uint64_t)&v591;
  sub_22EEE8250((uint64_t)&v521, (uint64_t **)&v594, 1);
  v267 = operator new();
  *(_DWORD *)(v267 + 8) = 0;
  v268 = (unsigned int *)(v267 + 8);
  *(_QWORD *)v267 = &off_24FAB9AC0;
  *(_QWORD *)(v267 + 16) = v521;
  *(_DWORD *)(v267 + 24) = (_DWORD)v522;
  v269 = v523;
  *(_QWORD *)(v267 + 32) = v523;
  if (v269)
  {
    v270 = (unsigned int *)(v269 + 1);
    do
      v271 = __ldxr(v270);
    while (__stxr(v271 + 1, v270));
  }
  v524[0] = 0;
  v525 = (int32x2_t)0xAC000000ACLL;
  v526 = v267;
  v272 = v458;
  do
    v273 = __ldxr(v268);
  while (__stxr(v273 + 1, v268));
  v597[0] = (uint64_t *)v524;
  sub_22EEE8250((uint64_t)&v594, v597, 1);
  sub_22F359570((uint64_t)&v578, (uint64_t)&v594, &v509);
  v274 = v596;
  if (v596)
  {
    v275 = v596 + 2;
    do
    {
      v276 = __ldaxr(v275);
      v277 = v276 - 1;
    }
    while (__stlxr(v277, v275));
    if (!v277)
      (*(void (**)(unsigned int *))(*(_QWORD *)v274 + 8))(v274);
  }
  v278 = v526;
  if (v526)
  {
    v279 = (unsigned int *)(v526 + 8);
    do
    {
      v280 = __ldaxr(v279);
      v281 = v280 - 1;
    }
    while (__stlxr(v281, v279));
    if (!v281)
      (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  }
  v282 = v523;
  if (v523)
  {
    v283 = (unsigned int *)(v523 + 1);
    do
    {
      v284 = __ldaxr(v283);
      v285 = v284 - 1;
    }
    while (__stlxr(v285, v283));
    if (!v285)
      (*((void (**)(void **))*v282 + 1))(v282);
  }
  v286 = v593;
  if (v593)
  {
    v287 = v593 + 2;
    do
    {
      v288 = __ldaxr(v287);
      v289 = v288 - 1;
    }
    while (__stlxr(v289, v287));
    if (!v289)
      (*(void (**)(unsigned int *))(*(_QWORD *)v286 + 8))(v286);
  }
  sub_22F355D08(&v563);
  v290 = v467;
  if (v467)
  {
    v291 = (unsigned int *)(v467 + 8);
    do
    {
      v292 = __ldaxr(v291);
      v293 = v292 - 1;
    }
    while (__stlxr(v293, v291));
    if (!v293)
      (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  }
  v294 = v464;
  if (v464)
  {
    v295 = (unsigned int *)(v464 + 8);
    do
    {
      v296 = __ldaxr(v295);
      v297 = v296 - 1;
    }
    while (__stlxr(v297, v295));
    if (!v297)
      (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  }
  v298 = v496;
  if (v496)
  {
    v299 = (unsigned int *)(v496 + 8);
    do
    {
      v300 = __ldaxr(v299);
      v301 = v300 - 1;
    }
    while (__stlxr(v301, v299));
    if (!v301)
      (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  }
  v302 = v493;
  if (v493)
  {
    v303 = (unsigned int *)(v493 + 8);
    do
    {
      v304 = __ldaxr(v303);
      v305 = v304 - 1;
    }
    while (__stlxr(v305, v303));
    if (!v305)
      (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  }
  v306 = v473;
  if (v473)
  {
    v307 = (unsigned int *)(v473 + 8);
    do
    {
      v308 = __ldaxr(v307);
      v309 = v308 - 1;
    }
    while (__stlxr(v309, v307));
    if (!v309)
      (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  }
  v310 = v470;
  if (v470)
  {
    v311 = (unsigned int *)(v470 + 8);
    do
    {
      v312 = __ldaxr(v311);
      v313 = v312 - 1;
    }
    while (__stlxr(v313, v311));
    if (!v313)
      (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
  }
  v314 = v490;
  if (v490)
  {
    v315 = (unsigned int *)(v490 + 8);
    do
    {
      v316 = __ldaxr(v315);
      v317 = v316 - 1;
    }
    while (__stlxr(v317, v315));
    if (!v317)
      (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  }
  sub_22F355E30(&v551);
  sub_22F355ED4(&v536);
  sub_22F355E30(&v527[8]);
  sub_22F355ED4(&__p);
  v318 = v518;
  if (v518)
  {
    v319 = (unsigned int *)(v518 + 8);
    do
    {
      v320 = __ldaxr(v319);
      v321 = v320 - 1;
    }
    while (__stlxr(v321, v319));
    if (!v321)
      (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  }
  v322 = v561;
  if (v561)
  {
    v323 = (unsigned int *)(v561 + 8);
    do
    {
      v324 = __ldaxr(v323);
      v325 = v324 - 1;
    }
    while (__stlxr(v325, v323));
    if (!v325)
      (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  }
  v326 = v520;
  if (v520)
  {
    v327 = (unsigned int *)(v520 + 8);
    do
    {
      v328 = __ldaxr(v327);
      v329 = v328 - 1;
    }
    while (__stlxr(v329, v327));
    if (!v329)
      (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  }
  v330 = v498;
  if (v498)
  {
    v331 = (unsigned int *)(v498 + 8);
    do
    {
      v332 = __ldaxr(v331);
      v333 = v332 - 1;
    }
    while (__stlxr(v333, v331));
    if (!v333)
      (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  }
  v334 = v503;
  if (v503)
  {
    v335 = (unsigned int *)(v503 + 8);
    do
    {
      v336 = __ldaxr(v335);
      v337 = v336 - 1;
    }
    while (__stlxr(v337, v335));
    if (!v337)
      (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  }
  v338 = v500;
  if (v500)
  {
    v339 = (unsigned int *)(v500 + 8);
    do
    {
      v340 = __ldaxr(v339);
      v341 = v340 - 1;
    }
    while (__stlxr(v341, v339));
    if (!v341)
      (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
  }
  v342 = v508;
  if (v508)
  {
    v343 = (unsigned int *)(v508 + 8);
    do
    {
      v344 = __ldaxr(v343);
      v345 = v344 - 1;
    }
    while (__stlxr(v345, v343));
    if (!v345)
      (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  }
  v346 = v505;
  if (v505)
  {
    v347 = (unsigned int *)(v505 + 8);
    do
    {
      v348 = __ldaxr(v347);
      v349 = v348 - 1;
    }
    while (__stlxr(v349, v347));
    if (!v349)
      (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  }
  v350 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v458 + 64))(v458);
  v351 = v350;
  if ((*(_DWORD *)(v458 + 28) & 0x7F) != 0x53)
  {
    v352 = *(_QWORD *)(v458 + 16);
    v353 = v352 & 0xFFFFFFFFFFFFFFF8;
    if ((v352 & 4) != 0)
      v353 = *(_QWORD *)v353;
    for (i = *(_WORD *)(v353 + 8) & 0x7F; i != 83; i = *(_WORD *)(v353 + 8) & 0x7F)
    {
      v355 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v355 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_405;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_404;
        if (i == 16)
          goto LABEL_398;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_411;
        if (i == 24)
        {
LABEL_398:
          v355 = -48;
        }
        else
        {
LABEL_404:
          if (i != 70)
          {
LABEL_405:
            v356 = i - 52;
            if ((i - 33) >= 5)
              v357 = -48;
            else
              v357 = -64;
            if (v356 >= 6)
              v355 = v357;
            else
              v355 = -72;
            goto LABEL_411;
          }
          v355 = -64;
        }
      }
LABEL_411:
      v358 = *(_QWORD *)(v353 + v355 + 16);
      v353 = v358 & 0xFFFFFFFFFFFFFFF8;
      if ((v358 & 4) != 0)
        v353 = *(_QWORD *)v353;
    }
    v272 = v353 - 40;
  }
  v359 = *(_QWORD *)(v272 + 88);
  LODWORD(v534) = sub_22F379890(v350);
  v535 = (uint64_t)v351;
  sub_22EF0C604((uint64_t)&v578, (unsigned int *)&v534, v359);
  v360 = (char *)v510;
  v361 = v511;
  if (v510 == v511)
  {
    v362 = (char *)v510;
  }
  else
  {
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v360 + 16))(&v534);
      v363 = (void **)v534;
      if ((_DWORD)v535)
      {
        v364 = 8 * v535;
        do
        {
          v365 = v513;
          v366 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)v513, *v363);
          v367 = *(_QWORD *)(v365 + 8);
          if (v367 == *(_QWORD *)v365)
            v368 = 20;
          else
            v368 = 16;
          if (v366 != (void **)(v367 + 8 * *(unsigned int *)(v365 + v368)))
          {
            *v366 = (void *)-2;
            ++*(_DWORD *)(v365 + 24);
          }
          ++v363;
          v364 -= 8;
        }
        while (v364);
        v363 = (void **)v534;
      }
      if (v363 != (void **)&v536)
        free(v363);
      v360 += 8;
    }
    while (v360 != v361);
    v362 = (char *)v510;
    v360 = v511;
  }
  v474 = v362;
  __p = v360;
  v476 = v512;
  v511 = 0;
  v512 = 0;
  v510 = 0;
  v477 = v513;
  v478 = v514;
  v514 = 0;
  v369 = v515;
  LODWORD(v479) = v515;
  v515 = 0;
  v513 = 0uLL;
  v509 = &off_24FAB9978;
  llvm::deallocate_buffer(0, 0);
  sub_22EEFDCB8((void ***)&v513);
  v370 = (char *)v510;
  if (v510)
  {
    v371 = v511;
    v372 = v510;
    if (v511 != v510)
    {
      do
      {
        v374 = *((_QWORD *)v371 - 1);
        v371 -= 8;
        v373 = v374;
        *(_QWORD *)v371 = 0;
        if (v374)
          (*(void (**)(uint64_t))(*(_QWORD *)v373 + 40))(v373);
      }
      while (v371 != v370);
      v372 = v510;
    }
    v511 = v370;
    operator delete(v372);
  }
  if (v589)
    v589 = 0;
  sub_22F3597F4((uint64_t)&v578);
  memset(v527, 0, 20);
  v457 = v369;
  if (v362 == v360)
  {
    v419 = 0;
    LODWORD(v376) = 0;
    v510 = 0;
    v509 = 0;
    LODWORD(v511) = 0;
    goto LABEL_530;
  }
  v375 = 0;
  v376 = 0;
  v377 = v579;
  do
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v362 + 16))(&v578);
    if (!DWORD2(v578))
    {
LABEL_518:
      if (((***(uint64_t (****)(_QWORD))v362)(*(_QWORD *)v362) & 1) == 0)
      {
        v418 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v362 + 8))(*(_QWORD *)v362);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v462 + 16))(v462, v418, 0);
      }
      goto LABEL_520;
    }
    v378 = 0;
    v379 = v578;
    v380 = v578 + 8 * DWORD2(v578);
    do
    {
      while (1)
      {
        v381 = *(_QWORD *)(*(_QWORD *)v379 + 16);
        if (!v381 || (*(_DWORD *)(v381 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
          break;
        if (!(_DWORD)v376)
        {
          v384 = 0;
          goto LABEL_464;
        }
        v383 = ((v381 >> 4) ^ (v381 >> 9)) & ((_DWORD)v376 - 1);
        v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v383);
        v385 = *v384;
        if (v381 != *v384)
        {
          v386 = 0;
          v387 = 1;
          while (v385 != -4096)
          {
            if (v386)
              v388 = 0;
            else
              v388 = v385 == -8192;
            if (v388)
              v386 = v384;
            v389 = v383 + v387++;
            v383 = v389 & (v376 - 1);
            v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v383);
            v385 = *v384;
            if (v381 == *v384)
              goto LABEL_470;
          }
          if (v386)
            v384 = v386;
LABEL_464:
          if (4 * v375 + 4 >= (3 * v376))
          {
            sub_22EEFDFF0((uint64_t)v527, 2 * v376);
            v376 = *(unsigned int *)&v527[16];
            v407 = (*(_DWORD *)&v527[16] - 1) & ((v381 >> 4) ^ (v381 >> 9));
            v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v407);
            v408 = *v384;
            if (v381 == *v384)
              goto LABEL_504;
            v409 = 0;
            v410 = 1;
            while (v408 != -4096)
            {
              if (v409)
                v411 = 0;
              else
                v411 = v408 == -8192;
              if (v411)
                v409 = v384;
              v412 = v407 + v410++;
              v407 = v412 & (*(_DWORD *)&v527[16] - 1);
              v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v407);
              v408 = *v384;
              if (v381 == *v384)
                goto LABEL_504;
            }
          }
          else
          {
            if ((int)v376 + ~v375 - *(_DWORD *)&v527[12] > v376 >> 3)
              goto LABEL_466;
            sub_22EEFDFF0((uint64_t)v527, v376);
            v376 = *(unsigned int *)&v527[16];
            v413 = (*(_DWORD *)&v527[16] - 1) & ((v381 >> 4) ^ (v381 >> 9));
            v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v413);
            v414 = *v384;
            if (v381 == *v384)
            {
LABEL_504:
              v390 = v381;
              goto LABEL_467;
            }
            v409 = 0;
            v415 = 1;
            while (v414 != -4096)
            {
              if (v409)
                v416 = 0;
              else
                v416 = v414 == -8192;
              if (v416)
                v409 = v384;
              v417 = v413 + v415++;
              v413 = v417 & (*(_DWORD *)&v527[16] - 1);
              v384 = (_QWORD *)(*(_QWORD *)v527 + 32 * v413);
              v414 = *v384;
              if (v381 == *v384)
                goto LABEL_504;
            }
          }
          if (v409)
            v384 = v409;
LABEL_466:
          v390 = *v384;
LABEL_467:
          v375 = ++*(_DWORD *)&v527[8];
          if (v390 != -4096)
            --*(_DWORD *)&v527[12];
          *v384 = v381;
          v384[1] = 0;
          v384[2] = 0;
          v384[3] = 0;
        }
LABEL_470:
        v391 = *(_QWORD *)v362;
        v393 = (_QWORD *)v384[2];
        v392 = v384[3];
        if ((unint64_t)v393 >= v392)
        {
          v461 = v375;
          v395 = v384[1];
          v396 = ((uint64_t)v393 - v395) >> 3;
          if ((unint64_t)(v396 + 1) >> 61)
            abort();
          v397 = v376;
          v398 = v377;
          v399 = v392 - v395;
          v400 = v399 >> 2;
          if (v399 >> 2 <= (unint64_t)(v396 + 1))
            v400 = v396 + 1;
          if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8)
            v401 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v401 = v400;
          if (v401)
          {
            if (v401 >> 61)
              sub_22E3B3F8C();
            v402 = (char *)operator new(8 * v401);
          }
          else
          {
            v402 = 0;
          }
          v403 = &v402[8 * v396];
          *(_QWORD *)v403 = v391;
          v394 = v403 + 8;
          v405 = (char *)v384[1];
          v404 = (char *)v384[2];
          if (v404 != v405)
          {
            do
            {
              v406 = *((_QWORD *)v404 - 1);
              v404 -= 8;
              *((_QWORD *)v403 - 1) = v406;
              v403 -= 8;
            }
            while (v404 != v405);
            v404 = (char *)v384[1];
          }
          v384[1] = v403;
          v384[2] = v394;
          v384[3] = &v402[8 * v401];
          if (v404)
            operator delete(v404);
          v377 = v398;
          v376 = v397;
          v375 = v461;
        }
        else
        {
          *v393 = v391;
          v394 = v393 + 1;
        }
        v384[2] = v394;
        v379 += 8;
        v378 = 1;
        if (v379 == v380)
          goto LABEL_520;
      }
      v379 += 8;
    }
    while (v379 != v380);
    if ((v378 & 1) == 0)
      goto LABEL_518;
LABEL_520:
    if ((_BYTE *)v578 != v377)
      free((void *)v578);
    v362 += 8;
  }
  while (v362 != v360);
  v510 = 0;
  v509 = 0;
  LODWORD(v511) = 0;
  v419 = *(llvm **)v527;
  if (!v375)
  {
LABEL_530:
    v420 = v376;
    v423 = (uint64_t *)((char *)v419 + 32 * v376);
    v421 = (uint64_t)v423;
    goto LABEL_531;
  }
  v420 = v376;
  v421 = *(_QWORD *)v527 + 32 * v376;
  if ((_DWORD)v376)
  {
    v422 = 0;
    while ((*(_QWORD *)(*(_QWORD *)v527 + v422) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v422 += 32;
      if (32 * v376 == v422)
      {
        LODWORD(v376) = 1;
        v423 = (uint64_t *)v421;
        goto LABEL_531;
      }
    }
    v423 = (uint64_t *)(*(_QWORD *)v527 + v422);
    LODWORD(v376) = 1;
  }
  else
  {
    v420 = 0;
    v423 = *(uint64_t **)v527;
  }
LABEL_531:
  v424 = (uint64_t *)((char *)v419 + 32 * v420);
  if (v423 == v424)
  {
    v446 = 0;
    v445 = 0;
  }
  else
  {
    v455 = v420;
    v456 = v419;
    v425 = (_QWORD *)v477;
    v460 = (_QWORD *)v477;
    do
    {
      v426 = (_QWORD *)v423[1];
      v427 = (_QWORD *)v423[2];
      if (v426 != v427)
      {
        v428 = *v423;
        while (((**(uint64_t (***)(_QWORD))*v426)(*v426) & 1) != 0)
        {
          if (++v426 == v427)
            goto LABEL_557;
        }
        LOBYTE(v578) = 0;
        LOBYTE(v580) = 0;
        v429 = 0;
        if ((sub_22EEE63E4(v425, v428) & 1) == 0)
        {
          if (((sub_22E3CEC2C(v428) & 1) != 0 || (*(_DWORD *)(v428 + 28) & 0x7F) == 0x40)
            && (v430 = *(_QWORD *)(*(_QWORD *)(v428 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
            && *(_BYTE *)(v430 + 16) == 2)
          {
            sub_22EEE64F0((uint64_t)&v509, v428, 3);
            v429 = 1;
          }
          else
          {
            v429 = 0;
          }
        }
        if ((sub_22EEE63E4(v425, v428) & 1) == 0 && ((v429 | sub_22E3CEC2C(v428) ^ 1) & 1) == 0)
        {
          sub_22EEE64F0((uint64_t)&v509, v428, 1);
          v534 = &v536;
          v535 = 0x200000000;
          sub_22F356030((uint64_t)&v578, (uint64_t)&v534);
          sub_22E3BB1BC((char **)&v534);
          v437 = (_QWORD *)v423[1];
          v436 = (_QWORD *)v423[2];
          for (j = v436; v437 != v436; v436 = j)
          {
            (*(void (**)(void **__return_ptr, _QWORD, uint64_t (***)()))(*(_QWORD *)*v437 + 24))(&v534, *v437, &v509);
            v438 = v549;
            if ((_BYTE)v549)
            {
              if ((_DWORD)v535)
              {
                v439 = (char *)v534;
                v440 = 56 * v535;
                do
                {
                  v441 = sub_22E6C9D38((uint64_t)&v578, (unint64_t)v439, 1);
                  v442 = v578 + 56 * DWORD2(v578);
                  v443 = *(_OWORD *)v441;
                  *(_QWORD *)(v442 + 13) = *(_QWORD *)(v441 + 13);
                  *(_OWORD *)v442 = v443;
                  v444 = *(_QWORD *)(v441 + 40);
                  *(_OWORD *)(v442 + 24) = *(_OWORD *)(v441 + 24);
                  *(_QWORD *)(v442 + 40) = v444;
                  *(_QWORD *)(v441 + 32) = 0;
                  *(_QWORD *)(v441 + 40) = 0;
                  *(_QWORD *)(v441 + 24) = 0;
                  *(_BYTE *)(v442 + 48) = *(_BYTE *)(v441 + 48);
                  ++DWORD2(v578);
                  v439 += 56;
                  v440 -= 56;
                }
                while (v440);
              }
            }
            else
            {
              LOBYTE(v562) = 0;
              LOBYTE(v575) = 0;
              sub_22F355FD0((uint64_t)&v578, (uint64_t)&v562);
              if ((_BYTE)v575)
                sub_22E3BB1BC((char **)&v562);
            }
            if ((_BYTE)v549)
              sub_22E3BB1BC((char **)&v534);
            v425 = v460;
            if (!v438)
              break;
            ++v437;
          }
        }
        sub_22EEE64F0((uint64_t)&v509, v428, 0);
        v534 = &v536;
        v535 = 0x200000000;
        if ((_BYTE)v580 && DWORD2(v578))
          sub_22EEFDD0C((uint64_t)&v534, (uint64_t)&v578);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v462 + 24))(v462, v428, &v534);
        sub_22E3BB1BC((char **)&v534);
        v431 = (_QWORD *)v423[1];
        v432 = (_QWORD *)v423[2];
        while (v431 != v432)
        {
          v433 = (uint64_t (***)(_QWORD))*v431;
          if (((**(uint64_t (***)(_QWORD))*v431)(*v431) & 1) == 0)
          {
            v434 = (*v433)[1](v433);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v462 + 16))(v462, v434, 1);
          }
          ++v431;
        }
        if ((_BYTE)v580)
          sub_22E3BB1BC((char **)&v578);
      }
LABEL_557:
      v435 = v423 + 4;
      v423 = (uint64_t *)v421;
      if (v435 != (uint64_t *)v421)
      {
        v423 = v435;
        while ((*v423 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v423 += 4;
          if (v423 == (uint64_t *)v421)
          {
            v423 = (uint64_t *)v421;
            break;
          }
        }
      }
    }
    while (v423 != v424);
    v445 = (void *)(16 * v511);
    v446 = (llvm *)v509;
    v420 = v455;
    v419 = v456;
  }
  llvm::deallocate_buffer(v446, v445);
  v447 = (char *)(32 * v420);
  if ((_DWORD)v376)
  {
    v448 = (_QWORD *)((char *)v419 + 16);
    v449 = v447;
    do
    {
      if ((*(v448 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v450 = (void *)*(v448 - 1);
        if (v450)
        {
          *v448 = v450;
          operator delete(v450);
        }
      }
      v448 += 4;
      v449 -= 32;
    }
    while (v449);
  }
  llvm::deallocate_buffer(v419, v447);
  llvm::deallocate_buffer(*((llvm **)&v477 + 1), (void *)(16 * v457));
  sub_22EEFDCB8((void ***)&v477);
  v451 = v474;
  if (v474)
  {
    v452 = __p;
    while (v452 != v451)
    {
      v454 = *--v452;
      v453 = v454;
      *v452 = 0;
      if (v454)
        (*(void (**)(uint64_t))(*(_QWORD *)v453 + 40))(v453);
    }
    operator delete(v451);
  }
}

uint64_t sub_22EEE63E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  _BOOL8 v11;
  uint64_t v12;

  v3 = a1[1];
  if (v3 == *a1)
    v4 = (unsigned int *)a1 + 5;
  else
    v4 = (unsigned int *)(a1 + 2);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    for (i = a1[1]; *(_QWORD *)i >= 0xFFFFFFFFFFFFFFFELL; i += 8)
    {
      v6 -= 8;
      if (!v6)
        return 0;
    }
  }
  else
  {
    i = a1[1];
  }
  v8 = v3 + 8 * v5;
  if (i == v8)
    return 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)i + 16) + 32))(*(_QWORD *)(*(_QWORD *)i + 16));
  if (v9 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
    return 1;
  for (j = i + 8; ; j += 8)
  {
    v11 = j != v8;
    if (j == v8)
      break;
    if (*(_QWORD *)j < 0xFFFFFFFFFFFFFFFELL)
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)j + 16) + 32))(*(_QWORD *)(*(_QWORD *)j + 16));
      if (v12 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
        break;
    }
  }
  return v11;
}

uint64_t sub_22EEE64F0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  result = sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
    goto LABEL_7;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_9;
  }
  if (v9 + ~v8 - *(_DWORD *)(a1 + 12) <= v9 >> 3)
  {
LABEL_9:
    sub_22ECF7140(a1, v9);
    v10 = 0;
    result = sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
    v7 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = 0;
LABEL_7:
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

uint64_t sub_22EEE65D4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t result;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  char v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  __int16 v197;
  char v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  char v202;
  int32x2_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  __int16 v208;
  char v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  int32x2_t v217;
  uint64_t v218;
  __int16 v219;
  char v220;
  __int16 v221;
  char v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t *v226;
  int v227;
  _BYTE v228[12];
  uint64_t v229;
  uint64_t *v230;
  int v231;
  char *v232;
  int v233;
  uint64_t v234;
  char *v235;
  int v236;
  unsigned int *v237;
  uint64_t *v238[3];

  v238[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  sub_22F353C8C((uint64_t)&v223);
  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 0;
  v3 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = &off_24FAB9D68;
  *(_QWORD *)(v2 + 16) = v223;
  *(_DWORD *)(v2 + 24) = v224;
  v4 = v225;
  *(_QWORD *)(v2 + 32) = v225;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  do
    v7 = __ldxr(v3);
  while (__stxr(v7 + 1, v3));
  v8 = operator new();
  *(_DWORD *)(v8 + 8) = 0;
  v9 = (unsigned int *)(v8 + 8);
  *(_QWORD *)v8 = &unk_24FAB9EB8;
  *(_BYTE *)(v8 + 16) = 0;
  *(int32x2_t *)(v8 + 20) = vdup_n_s32(0x1A9u);
  v179 = v8;
  *(_QWORD *)(v8 + 32) = v2;
  do
    v10 = __ldxr(v3);
  while (__stxr(v10 + 1, v3));
  do
    v11 = __ldxr(v9);
  while (__stxr(v11 + 1, v9));
  v175 = v2;
  do
    v12 = __ldxr(v9);
  while (__stxr(v12 + 1, v9));
  sub_22F353C8C((uint64_t)&v210);
  v13 = operator new();
  *(_DWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)v13 = &off_24FAB9D68;
  *(_QWORD *)(v13 + 16) = v210;
  *(_DWORD *)(v13 + 24) = v211;
  v15 = v212;
  *(_QWORD *)(v13 + 32) = v212;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = operator new();
  *(_DWORD *)(v19 + 8) = 0;
  v20 = (unsigned int *)(v19 + 8);
  *(_QWORD *)v19 = &unk_24FAB9EB8;
  *(_BYTE *)(v19 + 16) = 0;
  *(int32x2_t *)(v19 + 20) = vdup_n_s32(0x1A9u);
  *(_QWORD *)(v19 + 32) = v13;
  do
    v21 = __ldxr(v14);
  while (__stxr(v21 + 1, v14));
  v213 = 0;
  v214 = 0x600000006;
  v215 = v19;
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  v232 = &v213;
  sub_22F3541FC((uint64_t)&v235, (uint64_t **)&v232, 1);
  v230 = (uint64_t *)v235;
  v231 = v236;
  v23 = v237;
  v24 = operator new();
  *(_DWORD *)(v24 + 8) = 0;
  v25 = (unsigned int *)(v24 + 8);
  *(_QWORD *)v24 = &off_24FAB9DA0;
  *(_QWORD *)(v24 + 16) = v230;
  *(_DWORD *)(v24 + 24) = v231;
  *(_QWORD *)(v24 + 32) = v23;
  if (v23)
  {
    v26 = v23 + 2;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v174 = v13;
  *(_QWORD *)(v24 + 40) = sub_22F350CE0;
  *(_QWORD *)(v24 + 48) = 0;
  v216 = 0;
  v217 = vdup_n_s32(0x1BAu);
  v218 = v24;
  do
    v28 = __ldxr(v25);
  while (__stxr(v28 + 1, v25));
  v235 = &v216;
  sub_22F353E9C((uint64_t)&v232, (uint64_t **)&v235, 1);
  v29 = operator new();
  *(_DWORD *)(v29 + 8) = 0;
  v30 = (unsigned int *)(v29 + 8);
  *(_QWORD *)v29 = &unk_24FAB9EB8;
  *(_QWORD *)(v29 + 16) = v232;
  *(_DWORD *)(v29 + 24) = v233;
  v31 = v234;
  v178 = v29;
  *(_QWORD *)(v29 + 32) = v234;
  if (v31)
  {
    v32 = (unsigned int *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  do
    v34 = __ldxr(v30);
  while (__stxr(v34 + 1, v30));
  v173 = v23;
  v221 = v219;
  v222 = v220;
  do
    v35 = __ldxr(v30);
  while (__stxr(v35 + 1, v30));
  sub_22F353C8C((uint64_t)&v199);
  v36 = operator new();
  *(_DWORD *)(v36 + 8) = 0;
  v37 = (unsigned int *)(v36 + 8);
  *(_QWORD *)v36 = &unk_24FAB9EB8;
  *(_QWORD *)(v36 + 16) = v199;
  *(_DWORD *)(v36 + 24) = v200;
  v38 = v201;
  *(_QWORD *)(v36 + 32) = v201;
  if (v38)
  {
    v39 = (unsigned int *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  do
    v41 = __ldxr(v37);
  while (__stxr(v41 + 1, v37));
  v42 = operator new();
  *(_DWORD *)(v42 + 8) = 0;
  v43 = (unsigned int *)(v42 + 8);
  *(_QWORD *)v42 = &off_24FAB9DD8;
  *(_BYTE *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 20) = 0x600000006;
  *(_QWORD *)(v42 + 32) = v36;
  do
    v44 = __ldxr(v37);
  while (__stxr(v44 + 1, v37));
  v172 = v36;
  v202 = 0;
  v203 = vdup_n_s32(0x1ABu);
  v204 = v42;
  do
    v45 = __ldxr(v43);
  while (__stxr(v45 + 1, v43));
  v235 = &v202;
  sub_22F3545E8((uint64_t)&v205, (uint64_t **)&v235, 1);
  v46 = operator new();
  *(_DWORD *)(v46 + 8) = 0;
  v47 = (unsigned int *)(v46 + 8);
  *(_QWORD *)v46 = &unk_24FAB9EB8;
  *(_QWORD *)(v46 + 16) = v205;
  *(_DWORD *)(v46 + 24) = v206;
  v48 = v207;
  v177 = v46;
  *(_QWORD *)(v46 + 32) = v207;
  if (v48)
  {
    v49 = (unsigned int *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  do
    v51 = __ldxr(v47);
  while (__stxr(v51 + 1, v47));
  do
    v52 = __ldxr(v47);
  while (__stxr(v52 + 1, v47));
  sub_22F353C8C((uint64_t)&v188);
  v53 = operator new();
  *(_DWORD *)(v53 + 8) = 0;
  v54 = (unsigned int *)(v53 + 8);
  *(_QWORD *)v53 = &off_24FAB9D68;
  *(_QWORD *)(v53 + 16) = v188;
  *(_DWORD *)(v53 + 24) = v189;
  v55 = v190;
  *(_QWORD *)(v53 + 32) = v190;
  if (v55)
  {
    v56 = (unsigned int *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  do
    v58 = __ldxr(v54);
  while (__stxr(v58 + 1, v54));
  v191 = 0x1C500000000;
  v171 = v53;
  v193 = v53;
  do
    v59 = __ldxr(v54);
  while (__stxr(v59 + 1, v54));
  v192 = sub_22EF95614(0x1C5u, 0x1A9u);
  v235 = (char *)&v191;
  sub_22F354A78((uint64_t)&v194, (uint64_t **)&v235, 1);
  v60 = operator new();
  *(_DWORD *)(v60 + 8) = 0;
  v61 = (unsigned int *)(v60 + 8);
  *(_QWORD *)v60 = &unk_24FAB9EB8;
  *(_QWORD *)(v60 + 16) = v194;
  *(_DWORD *)(v60 + 24) = v195;
  v62 = v196;
  v176 = v60;
  *(_QWORD *)(v60 + 32) = v196;
  if (v62)
  {
    v63 = (unsigned int *)(v62 + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  do
    v65 = __ldxr(v61);
  while (__stxr(v65 + 1, v61));
  do
    v66 = __ldxr(v61);
  while (__stxr(v66 + 1, v61));
  sub_22F353C8C((uint64_t)&v180);
  v67 = operator new();
  *(_DWORD *)(v67 + 8) = 0;
  v68 = (unsigned int *)(v67 + 8);
  *(_QWORD *)v67 = &unk_24FAB9EB8;
  *(_QWORD *)(v67 + 16) = v180;
  *(_DWORD *)(v67 + 24) = v181;
  v69 = v182;
  *(_QWORD *)(v67 + 32) = v182;
  if (v69)
  {
    v70 = (unsigned int *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v183 = 0;
  v184 = 0x600000006;
  v185 = v67;
  do
    v72 = __ldxr(v68);
  while (__stxr(v72 + 1, v68));
  *(_QWORD *)v228 = &v183;
  sub_22F3541FC((uint64_t)&v235, (uint64_t **)v228, 1);
  v226 = (uint64_t *)v235;
  v227 = v236;
  v73 = v237;
  v74 = operator new();
  *(_DWORD *)(v74 + 8) = 0;
  v75 = (unsigned int *)(v74 + 8);
  *(_QWORD *)v74 = &off_24FAB9E10;
  *(_QWORD *)(v74 + 16) = v226;
  *(_DWORD *)(v74 + 24) = v227;
  *(_QWORD *)(v74 + 32) = v73;
  if (v73)
  {
    v76 = v73 + 2;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  *(_QWORD *)(v74 + 40) = sub_22F350DFC;
  *(_QWORD *)(v74 + 48) = 0;
  v228[0] = 0;
  *(int32x2_t *)&v228[4] = vdup_n_s32(0x1DBu);
  v229 = v74;
  do
    v78 = __ldxr(v75);
  while (__stxr(v78 + 1, v75));
  v238[0] = (uint64_t *)v228;
  sub_22F354DD8((uint64_t)&v235, v238, 1);
  v79 = operator new();
  *(_DWORD *)(v79 + 8) = 0;
  v80 = (unsigned int *)(v79 + 8);
  *(_QWORD *)v79 = &unk_24FAB9EB8;
  *(_QWORD *)(v79 + 16) = v235;
  *(_DWORD *)(v79 + 24) = v236;
  v81 = v237;
  *(_QWORD *)(v79 + 32) = v237;
  if (v81)
  {
    v82 = v81 + 2;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  do
    v84 = __ldxr(v80);
  while (__stxr(v84 + 1, v80));
  do
    v85 = __ldxr(v80);
  while (__stxr(v85 + 1, v80));
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 9) = v238[0];
  *(_BYTE *)(a1 + 11) = BYTE2(v238[0]);
  *(_QWORD *)(a1 + 12) = 0x600000006;
  *(_QWORD *)(a1 + 24) = v179;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 33) = v221;
  *(_BYTE *)(a1 + 35) = v222;
  *(_QWORD *)(a1 + 36) = 0x600000006;
  *(_QWORD *)(a1 + 48) = v178;
  *(_BYTE *)(a1 + 56) = 0;
  v86 = v208;
  *(_BYTE *)(a1 + 59) = v209;
  *(_WORD *)(a1 + 57) = v86;
  *(_QWORD *)(a1 + 60) = 0x600000006;
  *(_QWORD *)(a1 + 72) = v177;
  *(_BYTE *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 81) = v197;
  *(_BYTE *)(a1 + 83) = v198;
  *(_QWORD *)(a1 + 84) = 0x600000006;
  *(_QWORD *)(a1 + 96) = v176;
  *(_BYTE *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 105) = v186;
  *(_BYTE *)(a1 + 107) = v187;
  *(_QWORD *)(a1 + 108) = 0x600000006;
  *(_QWORD *)(a1 + 120) = v79;
  do
  {
    v87 = __ldaxr(v80);
    v88 = v87 - 1;
  }
  while (__stlxr(v88, v80));
  if (!v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v89 = v237;
  if (v237)
  {
    v90 = v237 + 2;
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
      (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
  }
  v93 = v229;
  if (v229)
  {
    v94 = (unsigned int *)(v229 + 8);
    do
    {
      v95 = __ldaxr(v94);
      v96 = v95 - 1;
    }
    while (__stlxr(v96, v94));
    if (!v96)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  }
  if (v73)
  {
    v97 = v73 + 2;
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
      (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
  }
  v100 = v185;
  if (v185)
  {
    v101 = (unsigned int *)(v185 + 8);
    do
    {
      v102 = __ldaxr(v101);
      v103 = v102 - 1;
    }
    while (__stlxr(v103, v101));
    if (!v103)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  }
  v104 = v182;
  if (v182)
  {
    v105 = (unsigned int *)(v182 + 8);
    do
    {
      v106 = __ldaxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
  do
  {
    v108 = __ldaxr(v61);
    v109 = v108 - 1;
  }
  while (__stlxr(v109, v61));
  if (!v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v110 = v196;
  if (v196)
  {
    v111 = (unsigned int *)(v196 + 8);
    do
    {
      v112 = __ldaxr(v111);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, v111));
    if (!v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  }
  v114 = v193;
  if (v193)
  {
    v115 = (unsigned int *)(v193 + 8);
    do
    {
      v116 = __ldaxr(v115);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v115));
    if (!v117)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  }
  do
  {
    v118 = __ldaxr(v54);
    v119 = v118 - 1;
  }
  while (__stlxr(v119, v54));
  if (!v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v120 = v190;
  if (v190)
  {
    v121 = (unsigned int *)(v190 + 8);
    do
    {
      v122 = __ldaxr(v121);
      v123 = v122 - 1;
    }
    while (__stlxr(v123, v121));
    if (!v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  }
  do
  {
    v124 = __ldaxr(v47);
    v125 = v124 - 1;
  }
  while (__stlxr(v125, v47));
  if (!v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v126 = v207;
  if (v207)
  {
    v127 = (unsigned int *)(v207 + 8);
    do
    {
      v128 = __ldaxr(v127);
      v129 = v128 - 1;
    }
    while (__stlxr(v129, v127));
    if (!v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  }
  v130 = v204;
  if (v204)
  {
    v131 = (unsigned int *)(v204 + 8);
    do
    {
      v132 = __ldaxr(v131);
      v133 = v132 - 1;
    }
    while (__stlxr(v133, v131));
    if (!v133)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  }
  do
  {
    v134 = __ldaxr(v37);
    v135 = v134 - 1;
  }
  while (__stlxr(v135, v37));
  if (!v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v136 = v201;
  if (v201)
  {
    v137 = (unsigned int *)(v201 + 8);
    do
    {
      v138 = __ldaxr(v137);
      v139 = v138 - 1;
    }
    while (__stlxr(v139, v137));
    if (!v139)
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  }
  do
  {
    v140 = __ldaxr(v30);
    v141 = v140 - 1;
  }
  while (__stlxr(v141, v30));
  if (!v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v142 = v234;
  if (v234)
  {
    v143 = (unsigned int *)(v234 + 8);
    do
    {
      v144 = __ldaxr(v143);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, v143));
    if (!v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  }
  v146 = v218;
  if (v218)
  {
    v147 = (unsigned int *)(v218 + 8);
    do
    {
      v148 = __ldaxr(v147);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, v147));
    if (!v149)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  }
  if (v173)
  {
    v150 = v173 + 2;
    do
    {
      v151 = __ldaxr(v150);
      v152 = v151 - 1;
    }
    while (__stlxr(v152, v150));
    if (!v152)
      (*(void (**)(unsigned int *))(*(_QWORD *)v173 + 8))(v173);
  }
  v153 = v215;
  if (v215)
  {
    v154 = (unsigned int *)(v215 + 8);
    do
    {
      v155 = __ldaxr(v154);
      v156 = v155 - 1;
    }
    while (__stlxr(v156, v154));
    if (!v156)
      (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  }
  do
  {
    v157 = __ldaxr(v14);
    v158 = v157 - 1;
  }
  while (__stlxr(v158, v14));
  if (!v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v159 = v212;
  if (v212)
  {
    v160 = (unsigned int *)(v212 + 8);
    do
    {
      v161 = __ldaxr(v160);
      v162 = v161 - 1;
    }
    while (__stlxr(v162, v160));
    if (!v162)
      (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  }
  do
  {
    v163 = __ldaxr(v9);
    v164 = v163 - 1;
  }
  while (__stlxr(v164, v9));
  if (!v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  do
  {
    v165 = __ldaxr(v3);
    v166 = v165 - 1;
  }
  while (__stlxr(v166, v3));
  if (!v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  result = v225;
  if (v225)
  {
    v168 = (unsigned int *)(v225 + 8);
    do
    {
      v169 = __ldaxr(v168);
      v170 = v169 - 1;
    }
    while (__stlxr(v170, v168));
    if (!v170)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEE72EC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t result;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  char v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int *v119;
  uint64_t *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BYTE v125[12];
  uint64_t v126;
  uint64_t *v127[3];

  v127[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  sub_22F3552B4((uint64_t)&v114);
  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 0;
  v3 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = &off_24FAB9D68;
  *(_QWORD *)(v2 + 16) = v114;
  *(_DWORD *)(v2 + 24) = v115;
  v4 = v116;
  *(_QWORD *)(v2 + 32) = v116;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  do
    v7 = __ldxr(v3);
  while (__stxr(v7 + 1, v3));
  v8 = operator new();
  *(_DWORD *)(v8 + 8) = 0;
  v9 = (unsigned int *)(v8 + 8);
  *(_QWORD *)v8 = &unk_24FAB9EB8;
  *(_BYTE *)(v8 + 16) = 0;
  *(int32x2_t *)(v8 + 20) = vdup_n_s32(0x1A9u);
  v99 = v8;
  *(_QWORD *)(v8 + 32) = v2;
  do
    v10 = __ldxr(v3);
  while (__stxr(v10 + 1, v3));
  do
    v11 = __ldxr(v9);
  while (__stxr(v11 + 1, v9));
  do
    v12 = __ldxr(v9);
  while (__stxr(v12 + 1, v9));
  sub_22F3552B4((uint64_t)&v106);
  v13 = operator new();
  *(_DWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)v13 = &off_24FAB9D68;
  *(_QWORD *)(v13 + 16) = v106;
  *(_DWORD *)(v13 + 24) = v107;
  v15 = v108;
  *(_QWORD *)(v13 + 32) = v108;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = operator new();
  *(_DWORD *)(v19 + 8) = 0;
  v20 = (unsigned int *)(v19 + 8);
  *(_QWORD *)v19 = &unk_24FAB9EB8;
  *(_BYTE *)(v19 + 16) = 0;
  *(int32x2_t *)(v19 + 20) = vdup_n_s32(0x1A9u);
  *(_QWORD *)(v19 + 32) = v13;
  do
    v21 = __ldxr(v14);
  while (__stxr(v21 + 1, v14));
  v109 = 0;
  v110 = 0x600000006;
  v111 = v19;
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  *(_QWORD *)v125 = &v109;
  sub_22F3541FC((uint64_t)&v117, (uint64_t **)v125, 1);
  v123 = v117;
  v124 = v118;
  v23 = v119;
  v24 = operator new();
  *(_DWORD *)(v24 + 8) = 0;
  v25 = (unsigned int *)(v24 + 8);
  *(_QWORD *)v24 = &off_24FAB9DA0;
  *(_QWORD *)(v24 + 16) = v123;
  *(_DWORD *)(v24 + 24) = v124;
  *(_QWORD *)(v24 + 32) = v23;
  if (v23)
  {
    v26 = v23 + 2;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v98 = v2;
  *(_QWORD *)(v24 + 40) = sub_22F350CE0;
  *(_QWORD *)(v24 + 48) = 0;
  v125[0] = 0;
  *(int32x2_t *)&v125[4] = vdup_n_s32(0x1BAu);
  v126 = v24;
  do
    v28 = __ldxr(v25);
  while (__stxr(v28 + 1, v25));
  v120 = (uint64_t *)v125;
  sub_22F353E9C((uint64_t)&v117, &v120, 1);
  v29 = operator new();
  *(_DWORD *)(v29 + 8) = 0;
  v30 = (unsigned int *)(v29 + 8);
  *(_QWORD *)v29 = &unk_24FAB9EB8;
  *(_QWORD *)(v29 + 16) = v117;
  *(_DWORD *)(v29 + 24) = v118;
  v31 = v119;
  *(_QWORD *)(v29 + 32) = v119;
  if (v31)
  {
    v32 = v31 + 2;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  do
    v34 = __ldxr(v30);
  while (__stxr(v34 + 1, v30));
  do
    v35 = __ldxr(v30);
  while (__stxr(v35 + 1, v30));
  sub_22F3552B4((uint64_t)&v100);
  v36 = operator new();
  v37 = v36;
  *(_DWORD *)(v36 + 8) = 0;
  v38 = (unsigned int *)(v36 + 8);
  *(_QWORD *)v36 = &off_24FAB9D68;
  *(_QWORD *)(v36 + 16) = v100;
  *(_DWORD *)(v36 + 24) = v101;
  v39 = v102;
  *(_QWORD *)(v36 + 32) = v102;
  if (v39)
  {
    v40 = (unsigned int *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  do
    v42 = __ldxr(v38);
  while (__stxr(v42 + 1, v38));
  v103 = 0x1C500000000;
  v105 = v36;
  do
    v43 = __ldxr(v38);
  while (__stxr(v43 + 1, v38));
  v104 = sub_22EF95614(0x1C5u, 0x1A9u);
  v127[0] = &v103;
  sub_22F354A78((uint64_t)&v120, v127, 1);
  v44 = operator new();
  *(_DWORD *)(v44 + 8) = 0;
  v45 = (unsigned int *)(v44 + 8);
  *(_QWORD *)v44 = &unk_24FAB9EB8;
  *(_QWORD *)(v44 + 16) = v120;
  *(_DWORD *)(v44 + 24) = v121;
  v46 = v122;
  *(_QWORD *)(v44 + 32) = v122;
  if (v46)
  {
    v47 = (unsigned int *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  do
    v49 = __ldxr(v45);
  while (__stxr(v49 + 1, v45));
  do
    v50 = __ldxr(v45);
  while (__stxr(v50 + 1, v45));
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 9) = v127[0];
  *(_BYTE *)(a1 + 11) = BYTE2(v127[0]);
  *(_QWORD *)(a1 + 12) = 0x600000006;
  *(_QWORD *)(a1 + 24) = v99;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 33) = v112;
  *(_BYTE *)(a1 + 35) = v113;
  *(_QWORD *)(a1 + 36) = 0x600000006;
  *(_QWORD *)(a1 + 48) = v29;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 60) = 0x600000006;
  *(_QWORD *)(a1 + 72) = v44;
  do
  {
    v51 = __ldaxr(v45);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v45));
  if (!v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v53 = v122;
  if (v122)
  {
    v54 = (unsigned int *)(v122 + 8);
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v57 = v105;
  if (v105)
  {
    v58 = (unsigned int *)(v105 + 8);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  do
  {
    v61 = __ldaxr(v38);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v38));
  if (!v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v63 = v102;
  if (v102)
  {
    v64 = (unsigned int *)(v102 + 8);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  do
  {
    v67 = __ldaxr(v30);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, v30));
  if (!v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v69 = v119;
  if (v119)
  {
    v70 = v119 + 2;
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
      (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
  }
  v73 = v126;
  if (v126)
  {
    v74 = (unsigned int *)(v126 + 8);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  }
  if (v23)
  {
    v77 = v23 + 2;
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
  }
  v80 = v111;
  if (v111)
  {
    v81 = (unsigned int *)(v111 + 8);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  }
  do
  {
    v84 = __ldaxr(v14);
    v85 = v84 - 1;
  }
  while (__stlxr(v85, v14));
  if (!v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v86 = v108;
  if (v108)
  {
    v87 = (unsigned int *)(v108 + 8);
    do
    {
      v88 = __ldaxr(v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v87));
    if (!v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  }
  do
  {
    v90 = __ldaxr(v9);
    v91 = v90 - 1;
  }
  while (__stlxr(v91, v9));
  if (!v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  do
  {
    v92 = __ldaxr(v3);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v3));
  if (!v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  result = v116;
  if (v116)
  {
    v95 = (unsigned int *)(v116 + 8);
    do
    {
      v96 = __ldaxr(v95);
      v97 = v96 - 1;
    }
    while (__stlxr(v97, v95));
    if (!v97)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEE7A68(uint64_t a1)
{
  void ***v2;

  *(_QWORD *)a1 = &off_24FAB9978;
  v2 = (void ***)(a1 + 32);
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(16 * *(unsigned int *)(a1 + 56)));
  sub_22EEFDCB8(v2);
  sub_22EEFDC4C((_QWORD *)(a1 + 8));
  return a1;
}

void sub_22EEE7ABC(uint64_t a1)
{
  void ***v2;

  *(_QWORD *)a1 = &off_24FAB9978;
  v2 = (void ***)(a1 + 32);
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(16 * *(unsigned int *)(a1 + 56)));
  sub_22EEFDCB8(v2);
  sub_22EEFDC4C((_QWORD *)(a1 + 8));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEE7B20(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (const void *)sub_22F34E85C(a2);
  if (v4)
    sub_22E3BA850(*(_QWORD *)(a1 + 32), v4);
  v5 = sub_22F34E96C(a2);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 8);
    if ((v7 & 1) != 0)
    {
      v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) + 8;
      v9 = v8 + 8 * *(unsigned int *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v8 = v7 ? v5 + 8 : 0;
      v9 = v7 ? v5 + 16 : 0;
    }
    for (; v8 != v9; v8 += 8)
    {
      v15 = *(_QWORD *)v8;
      if ((*(_DWORD *)(*(_QWORD *)v8 + 28) & 0x7Fu) - 60 >= 7)
        v15 = 0;
      v17 = v15;
      if (v15)
        sub_22F24C2B0(a1 + 40, &v17)[1] = v6;
    }
  }
  if (sub_22F34E9F0(a2, (uint64_t)"Increment", 9))
  {
    v11 = (char **)(a1 + 8);
    v13 = operator new();
    v12 = v13;
    *(_DWORD *)(v13 + 8) = 0;
    v14 = off_24FAB99C0;
LABEL_26:
    *(_QWORD *)v13 = v14;
    v16 = sub_22F34EA68(a2);
LABEL_27:
    *(_QWORD *)(v12 + 16) = v16;
    goto LABEL_28;
  }
  if (sub_22F34E9F0(a2, (uint64_t)"Decrement", 9))
  {
    v11 = (char **)(a1 + 8);
    v13 = operator new();
    v12 = v13;
    *(_DWORD *)(v13 + 8) = 1;
    v14 = off_24FAB9A00;
    goto LABEL_26;
  }
  if (sub_22F34E9F0(a2, (uint64_t)"ArraySubscript", 14))
  {
    v11 = (char **)(a1 + 8);
    v12 = operator new();
    *(_DWORD *)(v12 + 8) = 2;
    *(_QWORD *)v12 = off_24FAB9A40;
    v16 = sub_22F34EAEC(a2);
    goto LABEL_27;
  }
  result = sub_22F34E9F0(a2, (uint64_t)"PointerArithmetic", 17);
  if (!result)
    return result;
  v11 = (char **)(a1 + 8);
  v12 = operator new();
  *(_DWORD *)(v12 + 8) = 3;
  *(_QWORD *)v12 = off_24FAB9A80;
  *(_QWORD *)(v12 + 16) = sub_22F34EB70(a2);
  *(_QWORD *)(v12 + 24) = sub_22F34EBF4(a2);
LABEL_28:
  v17 = v12;
  sub_22EEE7D80(v11, &v17);
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  return result;
}

void sub_22EEE7D80(char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 61)
        sub_22E3B3F8C();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = *a2;
    *a2 = 0;
    *(_QWORD *)v13 = v15;
    v7 = v13 + 8;
    v16 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v13 - 1) = v18;
        v13 -= 8;
      }
      while (v17 != v16);
      v17 = *a1;
      v19 = a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while (v19 != v17)
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        v20 = v21;
        *(_QWORD *)v19 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)v5 = v6;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

uint64_t sub_22EEE7EA0()
{
  return 0;
}

uint64_t sub_22EEE7EA8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unsigned __int8 *sub_22EEE7EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *result;
  int v4;
  int v5;

  result = sub_22EFFA6B0(*(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 16));
  v4 = *result;
  *(_QWORD *)a2 = a2 + 16;
  if (v4 == 161)
  {
    *(_QWORD *)(a2 + 16) = result;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = 1;
  return result;
}

void sub_22EEE7F04(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[128] = 0;
}

void sub_22EEE7F14()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEE7F28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unsigned __int8 *sub_22EEE7F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *result;
  int v4;
  int v5;

  result = sub_22EFFA6B0(*(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 16));
  v4 = *result;
  *(_QWORD *)a2 = a2 + 16;
  if (v4 == 161)
  {
    *(_QWORD *)(a2 + 16) = result;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = 1;
  return result;
}

void sub_22EEE7F88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEE7F9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unsigned __int8 *sub_22EEE7FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *result;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (unsigned __int8 **)(v3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_DWORD *)(v5 + 16);
  if (v5)
    v7 = v6 == 11;
  else
    v7 = 0;
  if (v7)
  {
    if (((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v5 || v6 != 44)
  {
    if (v6 != 9)
      goto LABEL_13;
LABEL_12:
    v4 = (unsigned __int8 **)(v3 + 16);
    goto LABEL_13;
  }
  v8 = sub_22F114198(*(_QWORD *)(v5 + 24));
  if (((*(_BYTE *)(v8 + 74) & 1) != 0 || *(_QWORD *)(v8 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v5 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_12;
  }
LABEL_13:
  result = sub_22EFFA6B0(*v4);
  v10 = *result;
  *(_QWORD *)a2 = a2 + 16;
  if (v10 == 161)
  {
    *(_QWORD *)(a2 + 16) = result;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = 1;
  return result;
}

void sub_22EEE8094(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[15];

  v8[14] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if ((_DWORD)v7)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 16) + 28) & 0x7Fu) - 60 >= 7)
      v5 = 0;
    else
      v5 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  }
  else
  {
    v5 = 0;
  }
  if (v6 != v8)
    free(v6);
  if (v5
    && (v6 = 0, sub_22ECB1B60(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v5, &v6))
    && v6 != (void *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
    && *((_DWORD *)v6 + 2) == 1)
  {
    v6 = v8;
    v7 = 0x200000000;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x200000000;
    *(_BYTE *)(a3 + 128) = 1;
    sub_22E3BB1BC((char **)&v6);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 128) = 0;
  }
}

void sub_22EEE81CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEE81E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unsigned __int8 *sub_22EEE81E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *result;
  int v4;
  int v5;

  result = sub_22EFFA6B0(*(unsigned __int8 **)(a1 + 24));
  v4 = *result;
  *(_QWORD *)a2 = a2 + 16;
  if (v4 == 161)
  {
    *(_QWORD *)(a2 + 16) = result;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = 1;
  return result;
}

void sub_22EEE823C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22EEE8250(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v3;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD v36[3];
  void **v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  void **v43;

  v3 = a2;
  if (a3 == 1)
  {
    v8 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v8 + 2);
    v9 = v8[2];
    *(_QWORD *)(a1 + 16) = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else if (a3)
  {
    v5 = 8 * a3;
    if (8 * a3)
    {
      if (v5 >= 0x5555555555555551)
        abort();
      v12 = &a2[a3];
      v13 = (8 * a3) >> 3;
      v14 = 3 * v13;
      v7 = operator new(24 * v13);
      v5 = (unint64_t)&v7[2 * v14];
      v6 = v7;
      do
      {
        v15 = *v3;
        v16 = **v3;
        v6[2] = *((_DWORD *)*v3 + 2);
        *(_QWORD *)v6 = v16;
        v17 = v15[2];
        *((_QWORD *)v6 + 2) = v17;
        if (v17)
        {
          v18 = (unsigned int *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        ++v3;
        v6 += 6;
      }
      while (v3 != v12);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v36[0] = v7;
    v36[1] = v6;
    v36[2] = v5;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    sub_22F35A360(0);
    v20 = v39;
    if (v39)
    {
      v21 = v39 + 2;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = sub_22EF95614(0xACu, v38);
    *(_QWORD *)a1 = v37 | 0xAC00000000;
    *(_DWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v20;
    if (v20)
    {
      v24 = v20 + 2;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      do
      {
        v26 = __ldaxr(v24);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v24));
      if (!v27)
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
    if (v39)
    {
      v28 = v39 + 2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
    v43 = (void **)v36;
    sub_22EEE8494(&v43);
    v37 = (void **)&v40;
    sub_22EEE8494(&v37);
  }
  else
  {
    sub_22F34EC78((uint64_t)&v40);
    *(_QWORD *)a1 = v40;
    *(_DWORD *)(a1 + 8) = v41;
    v31 = v42;
    *(_QWORD *)(a1 + 16) = v42;
    if (v31)
    {
      v32 = v31 + 2;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
      {
        v34 = __ldaxr(v32);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v32));
      if (!v35)
        (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
}

void sub_22EEE8494(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22EEE8528(uint64_t a1, unsigned int *a2)
{
  _BOOL4 v2;
  uint64_t v3;
  unsigned __int8 *v6;

  *(_BYTE *)(a1 + 68) = 0;
  v3 = *a2;
  if ((_DWORD)v3)
  {
    if (v3 == 172)
    {
      v2 = 1;
    }
    else
    {
      do
        v3 = dword_24FABB2A0[4 * v3];
      while ((_DWORD)v3 != 172 && v3 != 0);
      v2 = v3 == 172;
    }
    LODWORD(v3) = 0;
    if (v2)
    {
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if (v6)
      {
        if (sub_22F34EF24(a1, *((unsigned __int8 **)a2 + 1)) && *v6 != 182)
          sub_22EEE85E0(a1, (uint64_t)v6);
        sub_22EEF4FFC(*(_QWORD *)(a1 + 16), (unsigned int *)(a1 + 24));
        v2 = *(_BYTE *)(a1 + 68) != 0;
        LODWORD(v3) = 1;
      }
    }
  }
  return v3 & v2;
}

uint64_t sub_22EEE85E0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v12;
  _QWORD v13[10];

  v13[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v13[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v12 = 0x800000001;
    v2 = 1;
    do
    {
      v3 = v2;
      v4 = &v13[v2];
      v5 = *(v4 - 1);
      if ((v5 & 4) != 0)
      {
        v2 = v3 - 1;
        LODWORD(v12) = v3 - 1;
      }
      else
      {
        *(v4 - 1) = v5 | 4;
        v6 = *(unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFF8) - 1;
        if (v6 <= 0xEB)
          __asm { BR              X9 }
        v2 = v12;
        if ((_DWORD)v3 != (_DWORD)v12)
        {
          v7 = &v13[v12 - 1];
          if (&v13[v3] < v7)
          {
            v8 = &v13[v3 + 1];
            do
            {
              v9 = *(v8 - 1);
              *(v8 - 1) = *v7;
              *v7-- = v9;
            }
            while (v8++ < v7);
          }
        }
      }
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_22EEF4FFC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void ***v21;
  uint64_t v22;
  uint64_t v23;

  if ((unsigned int *)a1 != a2)
  {
    v4 = a2[2];
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v10 = *(uint64_t **)a2;
        v11 = *(uint64_t **)a1;
        v12 = (_QWORD *)(*(_QWORD *)a2 + 8);
        v13 = 24 * v4;
        do
        {
          if (v10 != v11)
            sub_22EEF51B0(v11, (_QWORD *)*v10, v12);
          v10 += 3;
          v11 += 3;
          v12 += 3;
          v13 -= 24;
        }
        while (v13);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v14 = *(uint64_t **)a1;
      }
      else
      {
        v14 = *(uint64_t **)a1;
        v11 = *(uint64_t **)a1;
      }
      v15 = &v14[3 * v5];
      if (v15 != v11)
      {
        do
        {
          v16 = v15 - 3;
          sub_22E5EFB0C((uint64_t)(v15 - 3), (char *)*(v15 - 2));
          v15 = v16;
        }
        while (v16 != v11);
      }
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(uint64_t **)a1;
        v18 = 3 * v5;
        do
        {
          sub_22E5EFB0C((uint64_t)&v17[v18 - 3], (char *)v17[v18 - 2]);
          v18 -= 3;
        }
        while (v18 * 8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F34F048(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)a2;
      v7 = *(uint64_t **)a1;
      v8 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v9 = 24 * v5;
      do
      {
        if (v6 != v7)
          sub_22EEF51B0(v7, (_QWORD *)*v6, v8);
        v6 += 3;
        v7 += 3;
        v8 += 3;
        v9 -= 24;
      }
      while (v9);
      goto LABEL_25;
    }
    v5 = 0;
LABEL_25:
    v19 = a2[2];
    if (v5 != v19)
    {
      v20 = *(_QWORD *)a1 + 24 * v5;
      v21 = (const void ***)(*(_QWORD *)a2 + 24 * v5);
      v22 = 24 * v19 - 24 * v5;
      do
      {
        v23 = sub_22EEF5424(v20, v21);
        v21 += 3;
        v20 = v23 + 24;
        v22 -= 24;
      }
      while (v22);
    }
LABEL_28:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_22EEF51B0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  BOOL v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(char **)(v6 + 8) : (char *)v6;
    if (v8)
    {
      v9 = (char *)sub_22E679A94((uint64_t)v8);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          v11 = (uint64_t)v8;
          v8 = v9;
          std::string::operator=((std::string *)(v11 + 32), (const std::string *)(v10 + 4));
          v12 = v10[11];
          v13 = *(_OWORD *)(v10 + 9);
          *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 7);
          *(_OWORD *)(v11 + 72) = v13;
          *(_QWORD *)(v11 + 88) = v12;
          sub_22F2A56D0((uint64_t)a1, v11);
          if (v9)
            v9 = (char *)sub_22E679A94((uint64_t)v9);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v8)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
      sub_22E5EFB0C((uint64_t)a1, v8);
      if (v9)
      {
        do
        {
          v16 = v9;
          v9 = (char *)*((_QWORD *)v9 + 2);
        }
        while (v9);
        sub_22E5EFB0C((uint64_t)a1, v16);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_22EEF5324((uint64_t)a1, (uint64_t)(a2 + 4));
      v17 = (_QWORD *)a2[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)a2[2];
          v15 = *v18 == (_QWORD)a2;
          a2 = v18;
        }
        while (!v15);
      }
      a2 = v18;
    }
    while (v18 != a3);
  }
}

uint64_t sub_22EEF5324(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];

  sub_22EEF53A0(a1, a2, (uint64_t)v9);
  v3 = (uint64_t **)sub_22F2A07E8(a1, &v8, (const void **)(v9[0] + 32));
  v5 = v8;
  v4 = (uint64_t *)v9[0];
  *(_QWORD *)v9[0] = 0;
  v4[1] = 0;
  v4[2] = v5;
  *v3 = v4;
  v6 = **(_QWORD **)a1;
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v4 = *v3;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 8), v4);
  ++*(_QWORD *)(a1 + 16);
  return v9[0];
}

__n128 sub_22EEF53A0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_22E3BB2B4(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v6 + 72) = result;
  *((_QWORD *)v6 + 11) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_22EEF5424(uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_22F34F15C((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t sub_22EEF54B8(uint64_t a1, unint64_t a2)
{
  int v4;
  unint64_t *v5;
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t i;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t **v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t **v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t **v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int v161;
  BOOL v162;
  uint64_t v163;
  uint64_t **v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  BOOL v169;
  uint64_t v170;
  uint64_t **v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  BOOL v182;
  unint64_t v183;
  unsigned __int8 *v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 *v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t **v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t **v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  BOOL v209;
  uint64_t v210;
  uint64_t **v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t **v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  unsigned __int8 *v229;
  BOOL v230;
  BOOL v231;
  BOOL v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t **v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  uint64_t **v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  BOOL v254;
  BOOL v255;

  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v4 == 38)
      return sub_22EEF7540(a1, a2);
    else
      return 1;
  }
  else
  {
    switch(v4)
    {
      case 0:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 1:
        v5 = *(unint64_t **)(a2 + 96);
        if (v5)
        {
          result = sub_22EEF7850(a1, *v5, (uint64_t)(v5 + 1));
          if (!(_DWORD)result)
            return result;
        }
        v7 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
        if (v7)
        {
          v229 = v7;
          result = sub_22F34EF24(a1, v7);
          if (!(_DWORD)result)
            return result;
          if (*v229 != 182)
          {
            result = sub_22EEE85E0(a1, v229);
            if (!(_DWORD)result)
              return result;
          }
        }
        v8 = *(unsigned int *)(a2 + 112);
        if (!(_DWORD)v8)
          goto LABEL_239;
        v9 = 16 * v8;
        v10 = (unsigned __int8 **)(*(_QWORD *)(a2 + 104) + 8);
        while (1)
        {
          v11 = *v10;
          if (*v10)
          {
            result = sub_22F34EF24(a1, *v10);
            if (!(_DWORD)result)
              break;
            if (*v11 != 182)
            {
              result = sub_22EEE85E0(a1, v11);
              if (!(_DWORD)result)
                break;
            }
          }
          v10 += 2;
          v9 -= 16;
          if (!v9)
          {
LABEL_239:
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v156 = *v155;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v158 = *(_QWORD *)v157 + 8 * *(unsigned int *)(v157 + 8);
              }
              else
              {
                v158 = 0;
              }
              while (v156 != (uint64_t *)v158)
              {
                if ((sub_22EEF87C8(a1, *v156) & 1) == 0)
                  return 0;
                ++v156;
              }
            }
            return 1;
          }
        }
        return result;
      case 2:
        v85 = *(_QWORD *)(a2 + 80);
        v86 = (unsigned __int8 *)(v85 & 0xFFFFFFFFFFFFFFF8);
        if ((v85 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          result = sub_22F34EF24(a1, (unsigned __int8 *)(v85 & 0xFFFFFFFFFFFFFFF8));
          if (!(_DWORD)result)
            return result;
          if (*v86 != 182)
          {
            result = sub_22EEE85E0(a1, v86);
            if (!(_DWORD)result)
              return result;
          }
        }
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v88 = *v87;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v90 = *(_QWORD *)v89 + 8 * *(unsigned int *)(v89 + 8);
        }
        else
        {
          v90 = 0;
        }
        while (2)
        {
          if (v88 == (uint64_t *)v90)
            return 1;
          if ((sub_22EEF87C8(a1, *v88) & 1) != 0)
          {
            ++v88;
            continue;
          }
          break;
        }
        return 0;
      case 3:
        result = sub_22F34F228(a1);
        if (!(_DWORD)result)
          return result;
        v205 = *(_QWORD *)(a2 + 48);
        if (!v205)
          goto LABEL_451;
        v206 = *(unsigned int *)(v205 + 8);
        if (!(_DWORD)v206)
          goto LABEL_451;
        v207 = v205 + 16;
        while ((sub_22EEF85E0(a1, v207) & 1) != 0)
        {
          v207 += 32;
          if (!--v206)
          {
LABEL_451:
            v208 = *(_DWORD *)(a2 + 28) & 0x7F;
            v209 = v208 > 0x39 || ((1 << v208) & 0x3F0003E01011066) == 0;
            if (v209
              && (v208 - 70 <= 0xD ? (v255 = ((1 << (v208 - 70)) & 0x2803) == 0) : (v255 = 1), v255 && v208 - 19 > 4))
            {
              v210 = 0;
            }
            else
            {
              v210 = sub_22EFCAE04(a2);
            }
            result = sub_22EEF8724(a1, v210);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v212 = *v211;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v214 = *(_QWORD *)v213 + 8 * *(unsigned int *)(v213 + 8);
              }
              else
              {
                v214 = 0;
              }
              while (v212 != (uint64_t *)v214)
              {
                if ((sub_22EEF87C8(a1, *v212) & 1) == 0)
                  return 0;
                ++v212;
              }
            }
            return 1;
          }
        }
        return 0;
      case 4:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 5:
        return (sub_22F34F444(a1, a2) & 1) != 0;
      case 6:
        return (sub_22F34F444(a1, a2) & 1) != 0;
      case 7:
        v91 = *(unsigned __int8 **)(a2 + 40);
        if (v91)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40));
          if (!(_DWORD)result)
            return result;
          if (*v91 != 182)
          {
            result = sub_22EEE85E0(a1, v91);
            if (!(_DWORD)result)
              return result;
          }
        }
        v92 = *(_DWORD *)(a2 + 28) & 0x7F;
        v93 = v92 > 0x39 || ((1 << v92) & 0x3F0003E01011066) == 0;
        v94 = !v93 || v92 - 70 <= 0xD && ((1 << (v92 - 70)) & 0x2803) != 0 || v92 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
        result = sub_22EEF8724(a1, v94);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v96 = *v95;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v98 = *(_QWORD *)v97 + 8 * *(unsigned int *)(v97 + 8);
        }
        else
        {
          v98 = 0;
        }
        while (2)
        {
          if (v96 == (uint64_t *)v98)
            return 1;
          if ((sub_22EEF87C8(a1, *v96) & 1) != 0)
          {
            ++v96;
            continue;
          }
          break;
        }
        return 0;
      case 8:
        return (sub_22F34F4B4(a1, a2) & 1) != 0;
      case 9:
        v109 = *(_QWORD *)(a2 + 48);
        v110 = (unint64_t *)(v109 & 0xFFFFFFFFFFFFFFF8);
        if ((v109 & 4) != 0 && v110)
        {
          if ((sub_22EEF7850(a1, *v110, (uint64_t)(v110 + 1)) & 1) == 0)
            return 0;
        }
        else
        {
          result = sub_22F34F228(a1);
          if (!(_DWORD)result)
            return result;
        }
        v111 = *(unsigned int *)(a2 + 36);
        if ((_DWORD)v111)
        {
          for (i = 0; i != v111; ++i)
          {
            v113 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
            v114 = *(_DWORD *)(v113 + 12) & 0x1FFFFFFF;
            if ((_DWORD)v114)
            {
              v115 = v113 + 16;
              v116 = 8 * v114;
              do
              {
                if ((sub_22F34F228(a1) & 1) == 0)
                  return 0;
                v115 += 8;
                v116 -= 8;
              }
              while (v116);
            }
          }
        }
        v117 = *(_DWORD *)(a2 + 28) & 0x7F;
        v118 = v117 > 0x39 || ((1 << v117) & 0x3F0003E01011066) == 0;
        if (v118
          && (v117 - 70 <= 0xD ? (v232 = ((1 << (v117 - 70)) & 0x2803) == 0) : (v232 = 1), v232 && v117 - 19 > 4))
        {
          v119 = 0;
        }
        else
        {
          v119 = sub_22EFCAE04(a2);
        }
        result = sub_22EEF8724(a1, v119);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v121 = *v120;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v123 = *(_QWORD *)v122 + 8 * *(unsigned int *)(v122 + 8);
        }
        else
        {
          v123 = 0;
        }
        while (1)
        {
          if (v121 == (uint64_t *)v123)
            return 1;
          if ((sub_22EEF87C8(a1, *v121) & 1) == 0)
            break;
          ++v121;
        }
        return 0;
      case 10:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 11:
        return (sub_22EEF75B4(a1, a2) & 1) != 0;
      case 12:
        return (sub_22F34F444(a1, a2) & 1) != 0;
      case 13:
        return (sub_22F34F584(a1, a2) & 1) != 0;
      case 14:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 15:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 16:
        return (sub_22F34F654(a1, a2) & 1) != 0;
      case 17:
        return (sub_22F34F6C4(a1, a2) & 1) != 0;
      case 18:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 19:
        v99 = *(_QWORD *)(a2 + 112);
        if (!v99)
          goto LABEL_160;
        v100 = *(unsigned int *)(v99 + 8);
        if (!(_DWORD)v100)
          goto LABEL_160;
        v101 = (uint64_t *)(v99 + 16);
        v102 = 8 * v100;
        while ((sub_22F34FF2C(a1, *v101) & 1) != 0)
        {
          ++v101;
          v102 -= 8;
          if (!v102)
          {
LABEL_160:
            result = sub_22EEF8724(a1, a2 + 48);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v104 = *v103;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v106 = *(_QWORD *)v105 + 8 * *(unsigned int *)(v105 + 8);
              }
              else
              {
                v106 = 0;
              }
              while (v104 != (uint64_t *)v106)
              {
                if ((sub_22EEF87C8(a1, *v104) & 1) == 0)
                  return 0;
                ++v104;
              }
            }
            return 1;
          }
        }
        return 0;
      case 20:
        return (sub_22F34F654(a1, a2) & 1) != 0;
      case 21:
        return (sub_22F34F654(a1, a2) & 1) != 0;
      case 22:
        v71 = *(_QWORD *)(a2 + 112);
        if (!v71)
          goto LABEL_115;
        v72 = *(unsigned int *)(v71 + 8);
        if (!(_DWORD)v72)
          goto LABEL_115;
        v73 = (uint64_t *)(v71 + 16);
        v74 = 8 * v72;
        while ((sub_22F34FF2C(a1, *v73) & 1) != 0)
        {
          ++v73;
          v74 -= 8;
          if (!v74)
          {
LABEL_115:
            v75 = (unint64_t *)sub_22F259044(a2);
            if (v75)
            {
              result = sub_22EEF7850(a1, *v75, (uint64_t)(v75 + 1));
              if (!(_DWORD)result)
                return result;
            }
            v76 = *(_QWORD *)(a2 + 120);
            if (!v76)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
              v76 = *(_QWORD *)(a2 + 120);
            }
            if (v76 < 8)
              v77 = 0;
            else
              v77 = *(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF8);
            if (v77 == a2)
            {
              v247 = sub_22F2590A8(a2);
              v248 = sub_22F25910C(a2);
              v249 = sub_22F259178(a2);
              v250 = sub_22F2591DC(a2);
              if (v247 != v248 && v249 != v250)
              {
                v251 = v249 + 4;
                v252 = v247 + 8;
                do
                {
                  if (v252 == v248)
                    break;
                  v252 += 8;
                  v31 = v251 == v250;
                  v251 += 4;
                }
                while (!v31);
              }
            }
            result = sub_22EEF8724(a1, a2 + 48);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v225 = *v224;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v227 = *(_QWORD *)v226 + 8 * *(unsigned int *)(v226 + 8);
              }
              else
              {
                v227 = 0;
              }
              while (v225 != (uint64_t *)v227)
              {
                if ((sub_22EEF87C8(a1, *v225) & 1) == 0)
                  return 0;
                ++v225;
              }
            }
            return 1;
          }
        }
        return 0;
      case 23:
        v60 = *(_QWORD *)(a2 + 104);
        if (!v60)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
          v60 = *(_QWORD *)(a2 + 104);
        }
        if (v60 < 8)
          v61 = 0;
        else
          v61 = *(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
        if (v61 == a2)
        {
          v217 = sub_22F259248(a2);
          v219 = v218;
          v220 = sub_22F2592CC(a2);
          if (v217 != v219 && v220 != v221)
          {
            v222 = v220 + 4;
            v223 = v217 + 8;
            do
            {
              if (v223 == v219)
                break;
              v223 += 8;
              v31 = v222 == v221;
              v222 += 4;
            }
            while (!v31);
          }
        }
        result = sub_22EEF8724(a1, a2 + 48);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v172 = *v171;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v174 = *(_QWORD *)v173 + 8 * *(unsigned int *)(v173 + 8);
        }
        else
        {
          v174 = 0;
        }
        while (2)
        {
          if (v172 == (uint64_t *)v174)
            return 1;
          if ((sub_22EEF87C8(a1, *v172) & 1) != 0)
          {
            ++v172;
            continue;
          }
          break;
        }
        return 0;
      case 24:
        v51 = *(unint64_t **)(a2 + 88);
        if (v51)
        {
          result = sub_22EEF7850(a1, *v51, (uint64_t)(v51 + 1));
          if (!(_DWORD)result)
            return result;
        }
        v52 = *(unsigned int *)(a2 + 104);
        if (!(_DWORD)v52)
          goto LABEL_79;
        v53 = *(_QWORD *)(a2 + 96);
        v54 = 8 * v52;
        while ((sub_22F34F228(a1) & 1) != 0)
        {
          v53 += 8;
          v54 -= 8;
          if (!v54)
          {
LABEL_79:
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
            {
              v55 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
              if (v55)
              {
                v233 = v55;
                result = sub_22F34EF24(a1, v55);
                if (!(_DWORD)result)
                  return result;
                if (*v233 != 182)
                {
                  result = sub_22EEE85E0(a1, v233);
                  if (!(_DWORD)result)
                    return result;
                }
              }
            }
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *v56;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v59 = *(_QWORD *)v58 + 8 * *(unsigned int *)(v58 + 8);
              }
              else
              {
                v59 = 0;
              }
              while (v57 != (uint64_t *)v59)
              {
                if ((sub_22EEF87C8(a1, *v57) & 1) == 0)
                  return 0;
                ++v57;
              }
            }
            return 1;
          }
        }
        return 0;
      case 25:
        return (sub_22F34F738(a1, a2) & 1) != 0;
      case 26:
        return (sub_22F34F7D0(a1, a2) & 1) != 0;
      case 27:
        result = sub_22EEF91E8(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
        v78 = *(unsigned __int8 **)(a2 + 64);
        if (v78)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 64));
          if (!(_DWORD)result)
            return result;
          if (*v78 != 182)
          {
            result = sub_22EEE85E0(a1, v78);
            if (!(_DWORD)result)
              return result;
          }
        }
        if ((v79 = *(_DWORD *)(a2 + 28) & 0x7F, v79 <= 0x39) && ((1 << v79) & 0x3F0003E01011066) != 0
          || (v79 - 70 <= 0xD ? (v230 = ((1 << (v79 - 70)) & 0x2803) == 0) : (v230 = 1), !v230 || v79 - 19 <= 4))
        {
          v80 = sub_22EFCAE04(a2);
        }
        else
        {
          v80 = 0;
        }
        result = sub_22EEF8724(a1, v80);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v82 = *v81;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v84 = *(_QWORD *)v83 + 8 * *(unsigned int *)(v83 + 8);
        }
        else
        {
          v84 = 0;
        }
        while (2)
        {
          if (v82 == (uint64_t *)v84)
            return 1;
          if ((sub_22EEF87C8(a1, *v82) & 1) != 0)
          {
            ++v82;
            continue;
          }
          break;
        }
        return 0;
      case 28:
        return (sub_22F34F86C(a1, (uint64_t *)a2) & 1) != 0;
      case 29:
        return (sub_22F34F948(a1, (uint64_t *)a2) & 1) != 0;
      case 30:
        return (sub_22F34FA24(a1, a2) & 1) != 0;
      case 31:
        return (sub_22F34FAD0(a1, (uint64_t *)a2) & 1) != 0;
      case 32:
        return (sub_22F34FBAC(a1, a2) & 1) != 0;
      case 33:
        return (sub_22F34FC88(a1, a2) & 1) != 0;
      case 34:
        return (sub_22F34FD74(a1, a2) & 1) != 0;
      case 35:
        return (sub_22F34FDF0(a1, a2) & 1) != 0;
      case 36:
        return (sub_22F34FE6C(a1, a2) & 1) != 0;
      case 37:
        v135 = *(_QWORD *)(a2 + 184);
        if (!v135)
          goto LABEL_215;
        v136 = *(_DWORD *)(v135 + 12) & 0x1FFFFFFF;
        if (!(_DWORD)v136)
          goto LABEL_215;
        v137 = v135 + 16;
        v138 = 8 * v136;
        while ((sub_22F34F228(a1) & 1) != 0)
        {
          v137 += 8;
          v138 -= 8;
          if (!v138)
          {
LABEL_215:
            v139 = *(_QWORD *)(a2 + 192);
            v140 = *(unsigned int *)(v139 + 8);
            if ((_DWORD)v140)
            {
              v141 = v139 + 16;
              while ((sub_22EEF85E0(a1, v141) & 1) != 0)
              {
                v141 += 32;
                if (!--v140)
                  goto LABEL_219;
              }
              return 0;
            }
LABEL_219:
            result = sub_22F350E7C(a1, a2);
            if (!(_DWORD)result)
              return result;
            result = sub_22EEF8724(a1, a2 + 64);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v143 = *v142;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v145 = *(_QWORD *)v144 + 8 * *(unsigned int *)(v144 + 8);
              }
              else
              {
                v145 = 0;
              }
              while (v143 != (uint64_t *)v145)
              {
                if ((sub_22EEF87C8(a1, *v143) & 1) == 0)
                  return 0;
                ++v143;
              }
            }
            return 1;
          }
        }
        return 0;
      case 38:
        v62 = *(_QWORD *)(a2 + 48);
        if (v62)
        {
          result = sub_22EEF7FC0(a1, v62 & 0xFFFFFFFFFFFFFFF0);
          if (!(_DWORD)result)
            return result;
        }
        result = sub_22EEF7540(a1, a2);
        if (!(_DWORD)result)
          return result;
        v63 = *(_QWORD *)(a2 + 72);
        if (v63 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
        {
          v64 = (unint64_t *)(v63 & 0xFFFFFFFFFFFFFFF8);
          if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v64)
            v64 = (unint64_t *)v64[1];
          result = sub_22EEF7850(a1, *v64, (uint64_t)(v64 + 1));
          if (!(_DWORD)result)
            return result;
        }
        if ((v65 = *(_DWORD *)(a2 + 28) & 0x7F, v65 <= 0x39) && ((1 << v65) & 0x3F0003E01011066) != 0
          || v65 - 70 <= 0xD && ((1 << (v65 - 70)) & 0x2803) != 0
          || v65 - 19 <= 4)
        {
          v66 = sub_22EFCAE04(a2);
        }
        else
        {
          v66 = 0;
        }
        result = sub_22EEF8724(a1, v66);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v68 = *v67;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v70 = *(_QWORD *)v69 + 8 * *(unsigned int *)(v69 + 8);
        }
        else
        {
          v70 = 0;
        }
        while (2)
        {
          if (v68 == (uint64_t *)v70)
            return 1;
          if ((sub_22EEF87C8(a1, *v68) & 1) != 0)
          {
            ++v68;
            continue;
          }
          break;
        }
        return 0;
      case 39:
        return (sub_22F34FF2C(a1, a2) & 1) != 0;
      case 40:
        return (sub_22F34FFE4(a1, a2) & 1) != 0;
      case 41:
        return (sub_22F34FFE4(a1, a2) & 1) != 0;
      case 42:
        return (sub_22F350094(a1, a2) & 1) != 0;
      case 43:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 44:
        return (sub_22F350134(a1, a2) & 1) != 0;
      case 45:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 46:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 47:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 48:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 49:
        result = sub_22F350EF4(a1, a2);
        if (!(_DWORD)result)
          return result;
        v215 = *(_QWORD *)(a2 + 72);
        if ((*(_BYTE *)(a2 + 68) & 1) != 0)
        {
          v234 = (unsigned __int8 *)(v215 & 0xFFFFFFFFFFFFFFFCLL);
          v235 = *(_QWORD *)(a2 + 72) & 3;
          if ((_DWORD)v235 && (_DWORD)v235 != 3)
            v234 = (unsigned __int8 *)*((_QWORD *)v234 + 1);
          if (v234)
          {
            result = sub_22F34EF24(a1, v234);
            if (!(_DWORD)result)
              return result;
            if (*v234 != 182 && (sub_22EEE85E0(a1, v234) & 1) == 0)
              return 0;
          }
        }
        else if ((v215 & 3) != 0 && (v215 & 3) != 3)
        {
          v216 = (unsigned __int8 *)(v215 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v215 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            result = sub_22F34EF24(a1, (unsigned __int8 *)(v215 & 0xFFFFFFFFFFFFFFFCLL));
            if (!(_DWORD)result)
              return result;
            if (*v216 != 182)
            {
              result = sub_22EEE85E0(a1, v216);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        v236 = *(_DWORD *)(a2 + 28) & 0x7F;
        if (v236 <= 0x39 && ((1 << v236) & 0x3F0003E01011066) != 0
          || v236 - 70 <= 0xD && ((1 << (v236 - 70)) & 0x2803) != 0
          || v236 - 19 <= 4)
        {
          v237 = sub_22EFCAE04(a2);
        }
        else
        {
          v237 = 0;
        }
        result = sub_22EEF8724(a1, v237);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v239 = *v238;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v241 = *(_QWORD *)v240 + 8 * *(unsigned int *)(v240 + 8);
        }
        else
        {
          v241 = 0;
        }
        while (1)
        {
          if (v239 == (uint64_t *)v241)
            return 1;
          if ((sub_22EEF87C8(a1, *v239) & 1) == 0)
            break;
          ++v239;
        }
        return 0;
      case 50:
        result = sub_22F350EF4(a1, a2);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 68) & 1) != 0)
        {
          v198 = (unsigned __int8 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
            v198 = (unsigned __int8 *)*((_QWORD *)v198 + 1);
          if (v198)
          {
            result = sub_22F34EF24(a1, v198);
            if (!(_DWORD)result)
              return result;
            if (*v198 != 182)
            {
              result = sub_22EEE85E0(a1, v198);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        if ((v199 = *(_DWORD *)(a2 + 28) & 0x7F, v199 <= 0x39) && ((1 << v199) & 0x3F0003E01011066) != 0
          || (v199 - 70 <= 0xD ? (v254 = ((1 << (v199 - 70)) & 0x2803) == 0) : (v254 = 1), !v254 || v199 - 19 <= 4))
        {
          v200 = sub_22EFCAE04(a2);
        }
        else
        {
          v200 = 0;
        }
        result = sub_22EEF8724(a1, v200);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v202 = *v201;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v204 = *(_QWORD *)v203 + 8 * *(unsigned int *)(v203 + 8);
        }
        else
        {
          v204 = 0;
        }
        while (2)
        {
          if (v202 == (uint64_t *)v204)
            return 1;
          if ((sub_22EEF87C8(a1, *v202) & 1) != 0)
          {
            ++v202;
            continue;
          }
          break;
        }
        return 0;
      case 51:
        result = sub_22F350EF4(a1, a2);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 68) & 1) != 0)
        {
          v191 = (unsigned __int8 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
            v191 = (unsigned __int8 *)*((_QWORD *)v191 + 1);
          if (v191)
          {
            result = sub_22F34EF24(a1, v191);
            if (!(_DWORD)result)
              return result;
            if (*v191 != 182)
            {
              result = sub_22EEE85E0(a1, v191);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        if ((v192 = *(_DWORD *)(a2 + 28) & 0x7F, v192 <= 0x39) && ((1 << v192) & 0x3F0003E01011066) != 0
          || (v192 - 70 <= 0xD ? (v253 = ((1 << (v192 - 70)) & 0x2803) == 0) : (v253 = 1), !v253 || v192 - 19 <= 4))
        {
          v193 = sub_22EFCAE04(a2);
        }
        else
        {
          v193 = 0;
        }
        result = sub_22EEF8724(a1, v193);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v195 = *v194;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v197 = *(_QWORD *)v196 + 8 * *(unsigned int *)(v196 + 8);
        }
        else
        {
          v197 = 0;
        }
        while (2)
        {
          if (v195 == (uint64_t *)v197)
            return 1;
          if ((sub_22EEF87C8(a1, *v195) & 1) != 0)
          {
            ++v195;
            continue;
          }
          break;
        }
        return 0;
      case 52:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 53:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 54:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 55:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 56:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 57:
        return (sub_22F3501D4(a1, a2) & 1) != 0;
      case 58:
        return (sub_22F350240(a1, a2) & 1) != 0;
      case 59:
        result = sub_22F350EF4(a1, a2);
        if (!(_DWORD)result)
          return result;
        v183 = *(_QWORD *)(a2 + 72);
        if (v183 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
        {
          v184 = (unsigned __int8 *)(v183 & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v184)
            v184 = (unsigned __int8 *)*((_QWORD *)v184 + 1);
          if (v184)
          {
            result = sub_22F34EF24(a1, v184);
            if (!(_DWORD)result)
              return result;
            if (*v184 != 182)
            {
              result = sub_22EEE85E0(a1, v184);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        if ((v185 = *(_DWORD *)(a2 + 28) & 0x7F, v185 <= 0x39) && ((1 << v185) & 0x3F0003E01011066) != 0
          || v185 - 70 <= 0xD && ((1 << (v185 - 70)) & 0x2803) != 0
          || v185 - 19 <= 4)
        {
          v186 = sub_22EFCAE04(a2);
        }
        else
        {
          v186 = 0;
        }
        result = sub_22EEF8724(a1, v186);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v188 = *v187;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
        }
        else
        {
          v190 = 0;
        }
        while (2)
        {
          if (v188 == (uint64_t *)v190)
            return 1;
          if ((sub_22EEF87C8(a1, *v188) & 1) != 0)
          {
            ++v188;
            continue;
          }
          break;
        }
        return 0;
      case 60:
        return (sub_22F3502D8(a1, a2) & 1) != 0;
      case 61:
        return (sub_22F350370(a1, a2) & 1) != 0;
      case 62:
        return (sub_22F3502D8(a1, a2) & 1) != 0;
      case 63:
        return (sub_22F3502D8(a1, a2) & 1) != 0;
      case 64:
        result = sub_22EEF99DC(a1, a2);
        if (!(_DWORD)result)
          return result;
        v124 = *(_DWORD *)(a2 + 96) & 0x600;
        if (v124 == 1024)
        {
          v125 = *(_QWORD *)(a2 + 88);
          v126 = (unsigned __int8 *)(v125 & 0xFFFFFFFFFFFFFFF8);
          if ((v125 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            result = sub_22F34EF24(a1, (unsigned __int8 *)(v125 & 0xFFFFFFFFFFFFFFF8));
            if (!(_DWORD)result)
              return result;
            if (*v126 != 182)
            {
              result = sub_22EEE85E0(a1, v126);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        v127 = *(_DWORD *)(a2 + 96) & 0x600;
        if (v127 != 1024 && v127 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
        {
          v128 = sub_22EFBC5B4(a2);
          if (v128)
          {
            v242 = (unsigned __int8 *)v128;
            if ((*(_BYTE *)v128 & 0xFE) != 0xAC || (v242 = *(unsigned __int8 **)(v128 + 16)) != 0)
            {
              result = sub_22F34EF24(a1, v242);
              if (!(_DWORD)result)
                return result;
              if (*v242 != 182)
              {
                result = sub_22EEE85E0(a1, v242);
                if (!(_DWORD)result)
                  return result;
              }
            }
          }
        }
        if ((v129 = *(_DWORD *)(a2 + 28) & 0x7F, v129 <= 0x39) && ((1 << v129) & 0x3F0003E01011066) != 0
          || v129 - 70 <= 0xD && ((1 << (v129 - 70)) & 0x2803) != 0
          || v129 - 19 <= 4)
        {
          v130 = sub_22EFCAE04(a2);
        }
        else
        {
          v130 = 0;
        }
        result = sub_22EEF8724(a1, v130);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v132 = *v131;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v134 = *(_QWORD *)v133 + 8 * *(unsigned int *)(v133 + 8);
        }
        else
        {
          v134 = 0;
        }
        while (2)
        {
          if (v132 == (uint64_t *)v134)
            return 1;
          if ((sub_22EEF87C8(a1, *v132) & 1) != 0)
          {
            ++v132;
            continue;
          }
          break;
        }
        return 0;
      case 65:
        return (sub_22F35043C(a1, a2) & 1) != 0;
      case 66:
        v37 = *(_QWORD *)(a2 + 424);
        if (!v37)
          goto LABEL_56;
        v38 = *(_DWORD *)(v37 + 12) & 0x1FFFFFFF;
        if (!(_DWORD)v38)
          goto LABEL_56;
        v39 = v37 + 16;
        v40 = 8 * v38;
        while ((sub_22F34F228(a1) & 1) != 0)
        {
          v39 += 8;
          v40 -= 8;
          if (!v40)
          {
LABEL_56:
            v41 = *(_QWORD *)(a2 + 432);
            v42 = *(unsigned int *)(v41 + 8);
            if ((_DWORD)v42)
            {
              v43 = v41 + 16;
              while ((sub_22EEF85E0(a1, v43) & 1) != 0)
              {
                v43 += 32;
                if (!--v42)
                  goto LABEL_60;
              }
              return 0;
            }
LABEL_60:
            result = sub_22EEF99DC(a1, a2);
            if (!(_DWORD)result)
              return result;
            v44 = *(_DWORD *)(a2 + 28) & 0x7F;
            v45 = v44 > 0x39 || ((1 << v44) & 0x3F0003E01011066) == 0;
            if (v45
              && (v44 - 70 <= 0xD ? (v231 = ((1 << (v44 - 70)) & 0x2803) == 0) : (v231 = 1), v231 && v44 - 19 > 4))
            {
              v46 = 0;
            }
            else
            {
              v46 = sub_22EFCAE04(a2);
            }
            result = sub_22EEF8724(a1, v46);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v48 = *v47;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v50 = *(_QWORD *)v49 + 8 * *(unsigned int *)(v49 + 8);
              }
              else
              {
                v50 = 0;
              }
              while (v48 != (uint64_t *)v50)
              {
                if ((sub_22EEF87C8(a1, *v48) & 1) == 0)
                  return 0;
                ++v48;
              }
            }
            return 1;
          }
        }
        return 0;
      case 67:
        v29 = *(unsigned __int8 **)(a2 + 56);
        if (v29)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 56));
          if (!(_DWORD)result)
            return result;
          if (*v29 != 182)
          {
            result = sub_22EEE85E0(a1, v29);
            if (!(_DWORD)result)
              return result;
          }
        }
        v30 = *(_DWORD *)(a2 + 28) & 0x7F;
        v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
        v32 = !v31 || v30 - 70 <= 0xD && ((1 << (v30 - 70)) & 0x2803) != 0 || v30 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
        result = sub_22EEF8724(a1, v32);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v34 = *v33;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v36 = *(_QWORD *)v35 + 8 * *(unsigned int *)(v35 + 8);
        }
        else
        {
          v36 = 0;
        }
        while (2)
        {
          if (v34 == (uint64_t *)v36)
            return 1;
          if ((sub_22EEF87C8(a1, *v34) & 1) != 0)
          {
            ++v34;
            continue;
          }
          break;
        }
        return 0;
      case 68:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 69:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 70:
        return (sub_22F350518(a1, a2) & 1) != 0;
      case 71:
        v107 = *(unsigned __int8 **)(a2 + 88);
        if (v107)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 88));
          if (!(_DWORD)result)
            return result;
          if (*v107 != 182)
          {
            result = sub_22EEE85E0(a1, v107);
            if (!(_DWORD)result)
              return result;
          }
        }
        v108 = *(unsigned __int8 **)(a2 + 96);
        if (v108)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 96));
          if (!(_DWORD)result)
            return result;
          if (*v108 != 182)
          {
            result = sub_22EEE85E0(a1, v108);
            if (!(_DWORD)result)
              return result;
          }
        }
        return (sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      case 72:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 73:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 74:
        return (sub_22F34F584(a1, a2) & 1) != 0;
      case 75:
        v12 = *(unsigned int **)(a2 + 40);
        v13 = *v12;
        v14 = v12[1];
        if (!(_DWORD)v14)
          goto LABEL_245;
        v15 = (unsigned __int8 **)&v12[2 * v13 + 4];
        v16 = 8 * v14;
        while (1)
        {
          v17 = *v15;
          if (*v15)
          {
            result = sub_22F34EF24(a1, *v15);
            if (!(_DWORD)result)
              return result;
            if (*v17 != 182)
            {
              result = sub_22EEE85E0(a1, v17);
              if (!(_DWORD)result)
                return result;
            }
          }
          ++v15;
          v16 -= 8;
          if (!v16)
          {
            v12 = *(unsigned int **)(a2 + 40);
            v13 = *v12;
LABEL_245:
            if ((_DWORD)v13)
            {
              v159 = (uint64_t *)(v12 + 4);
              v160 = 8 * v13;
              while ((sub_22EEF9A60(a1, *v159) & 1) != 0)
              {
                ++v159;
                v160 -= 8;
                if (!v160)
                  goto LABEL_249;
              }
              return 0;
            }
LABEL_249:
            v161 = *(_DWORD *)(a2 + 28) & 0x7F;
            v162 = v161 > 0x39 || ((1 << v161) & 0x3F0003E01011066) == 0;
            if (v162
              && (v161 - 70 <= 0xD ? (v228 = ((1 << (v161 - 70)) & 0x2803) == 0) : (v228 = 1), v228 && v161 - 19 > 4))
            {
              v163 = 0;
            }
            else
            {
              v163 = sub_22EFCAE04(a2);
            }
            result = sub_22EEF8724(a1, v163);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v165 = *v164;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v167 = *(_QWORD *)v166 + 8 * *(unsigned int *)(v166 + 8);
              }
              else
              {
                v167 = 0;
              }
              while (v165 != (uint64_t *)v167)
              {
                if ((sub_22EEF87C8(a1, *v165) & 1) == 0)
                  return 0;
                ++v165;
              }
            }
            return 1;
          }
        }
      case 76:
        return (sub_22F350588(a1, a2) & 1) != 0;
      case 77:
        v24 = *(unsigned int **)(a2 + 40);
        v25 = v24[1];
        if (!(_DWORD)v25)
          goto LABEL_305;
        v26 = (unsigned __int8 **)&v24[2 * *v24 + 4];
        v27 = 8 * v25;
        break;
      case 78:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 79:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 80:
        return (sub_22F34F3B4(a1, a2) & 1) != 0;
      case 81:
        return (sub_22F35064C(a1, a2) & 1) != 0;
      case 82:
        v146 = *(_QWORD *)(a2 + 40);
        v147 = (unsigned __int8 *)(v146 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v146 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          result = sub_22F34EF24(a1, (unsigned __int8 *)(v146 & 0xFFFFFFFFFFFFFFFCLL));
          if (!(_DWORD)result)
            return result;
          if (*v147 != 182)
          {
            result = sub_22EEE85E0(a1, v147);
            if (!(_DWORD)result)
              return result;
          }
        }
        v148 = *(unsigned __int8 **)(a2 + 48);
        if (v148)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 48));
          if (!(_DWORD)result)
            return result;
          if (*v148 != 182)
          {
            result = sub_22EEE85E0(a1, v148);
            if (!(_DWORD)result)
              return result;
          }
        }
        if ((v149 = *(_DWORD *)(a2 + 28) & 0x7F, v149 <= 0x39) && ((1 << v149) & 0x3F0003E01011066) != 0
          || (v149 - 70 <= 0xD ? (v182 = ((1 << (v149 - 70)) & 0x2803) == 0) : (v182 = 1), !v182 || v149 - 19 <= 4))
        {
          v150 = sub_22EFCAE04(a2);
        }
        else
        {
          v150 = 0;
        }
        result = sub_22EEF8724(a1, v150);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v152 = *v151;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v154 = *(_QWORD *)v153 + 8 * *(unsigned int *)(v153 + 8);
        }
        else
        {
          v154 = 0;
        }
        while (2)
        {
          if (v152 == (uint64_t *)v154)
            return 1;
          if ((sub_22EEF87C8(a1, *v152) & 1) != 0)
          {
            ++v152;
            continue;
          }
          break;
        }
        return 0;
      case 83:
        v18 = *(_QWORD *)(a2 + 88);
        v19 = *(_BYTE **)(v18 + 19016);
        v20 = *(_BYTE **)(v18 + 19024);
        v21 = v20 - v19;
        if (v20 == v19)
        {
          v22 = 0;
          v23 = 0;
        }
        else
        {
          if (v21 < 0)
            abort();
          v22 = (char *)operator new(v20 - v19);
          memmove(v22, v19, v21);
          v23 = &v22[8 * (v21 >> 3)];
        }
        if (v23 - v22 == 8 && (*(_DWORD *)(*(_QWORD *)v22 + 28) & 0x7F) == 0x53)
        {
          operator delete(v22);
          result = sub_22EEF8724(a1, a2 + 40);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v22 != v23)
          {
            v175 = v22;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)v175 + 28) & 0x7Fu) - 1 >= 2
                && ((*(_DWORD *)(*(_QWORD *)v175 + 28) & 0x7Fu) - 35 > 2
                 || (v176 = *(_QWORD *)(*(_QWORD *)v175 + 128)) == 0
                 || ((*(unsigned __int16 *)(v176 + 8) | (*(unsigned __int8 *)(v176 + 10) << 16)) & 0x100000) == 0)
                && !sub_22F34F228(a1))
              {
                if (v22)
                  operator delete(v22);
                return 0;
              }
              v175 += 8;
            }
            while (v175 != v23);
          }
          if (v22)
            operator delete(v22);
        }
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v178 = *v177;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v180 = *(_QWORD *)v179 + 8 * *(unsigned int *)(v179 + 8);
        }
        else
        {
          v180 = 0;
        }
        while (1)
        {
          if (v178 == (uint64_t *)v180)
            return 1;
          if ((sub_22EEF87C8(a1, *v178) & 1) == 0)
            break;
          ++v178;
        }
        return 0;
      default:
        return 1;
    }
    while (1)
    {
      v28 = *v26;
      if (*v26)
      {
        result = sub_22F34EF24(a1, *v26);
        if (!(_DWORD)result)
          break;
        if (*v28 != 182)
        {
          result = sub_22EEE85E0(a1, v28);
          if (!(_DWORD)result)
            break;
        }
      }
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v168 = *(_DWORD *)(a2 + 28) & 0x7F;
        v169 = v168 > 0x39 || ((1 << v168) & 0x3F0003E01011066) == 0;
        if (v169
          && (v168 - 70 <= 0xD ? (v181 = ((1 << (v168 - 70)) & 0x2803) == 0) : (v181 = 1), v181 && v168 - 19 > 4))
        {
LABEL_305:
          v170 = 0;
        }
        else
        {
          v170 = sub_22EFCAE04(a2);
        }
        result = sub_22EEF8724(a1, v170);
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v244 = *v243;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v246 = *(_QWORD *)v245 + 8 * *(unsigned int *)(v245 + 8);
          }
          else
          {
            v246 = 0;
          }
          while (v244 != (uint64_t *)v246)
          {
            if ((sub_22EEF87C8(a1, *v244) & 1) == 0)
              return 0;
            ++v244;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EEF7540(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) == 0)
    return 1;
  v3 = *(unsigned __int8 **)(a2 + 152);
  if (!v3)
  {
    result = sub_22EEF76F4(a1, a2 + 80);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 152));
  if ((_DWORD)result)
    return *v3 == 182 || (sub_22EEE85E0(a1, v3) & 1) != 0;
  return result;
}

uint64_t sub_22EEF75B4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(unsigned __int8 **)(a2 + 40);
  if (!v4
    || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40)), (_DWORD)result)
    && (*v4 == 182 || (result = sub_22EEE85E0(a1, v4), (_DWORD)result)))
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v9 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v9 = 1), v9 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EEF8724(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v11 = *v10;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v13 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
      }
      else
      {
        v13 = 0;
      }
      if (v11 == v13)
      {
        return 1;
      }
      else
      {
        v14 = v11 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v14 - 8));
          if ((_DWORD)result)
            v15 = v14 == v13;
          else
            v15 = 1;
          v14 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t sub_22EEF76F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22F3506C8(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EEF7794(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EEF85E0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EEF7794(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (unint64_t *)a2[2];
      if (v6)
      {
        if ((sub_22EEF7850(a1, *v6, (uint64_t)(v6 + 1)) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_17;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_17:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22F350CE8(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EEF7850(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  int v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  if (!a2)
    return 1;
  v4 = a2;
  result = 1;
  while (1)
  {
    v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if ((v4 & 0xF) == 0)
      break;
LABEL_4:
    if ((v7 & 0xFFFFFFFFFFFFFFF0) != 0)
      v8 = *(_QWORD *)((char *)&unk_22F49D240
                     + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v8 = 1;
    a3 = (a3 + v8 - 1) & -v8;
    v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
LABEL_17:
    if (!v4)
      return 1;
  }
  switch(*(_BYTE *)(v7 + 16))
  {
    case 0:
    case 1:
    case 0x16:
    case 0x17:
    case 0x36:
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 >= 0x10 && (v4 & 0xF) == 0)
        v14 = *(_QWORD *)((char *)&unk_22F49D240
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v14 = 1;
      v10 = a3 + v14 - 1;
      goto LABEL_15;
    case 2:
    case 3:
    case 4:
    case 5:
      v15 = *(_QWORD *)(v4 + 32);
      if (v15 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v48 = *(_QWORD *)((char *)&unk_22F49D240
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v48 = 1;
      result = sub_22EEF7850(a1, v15, (a3 + v48 + 15) & -v48);
      if (!(_DWORD)result)
        return result;
      v17 = *(unsigned __int8 **)(a3 + 8);
      if (v17)
        goto LABEL_45;
      return 1;
    case 6:
      return sub_22F350764(a1, v4, a3);
    case 7:
    case 0x25:
      return sub_22F3507B4(a1, v4, a3);
    case 8:
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 >= 0x10 && (v4 & 0xF) == 0)
        v14 = *(_QWORD *)((char *)&unk_22F49D240
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v14 = 1;
      v10 = v14 + a3;
LABEL_15:
      a3 = v10 & -v14;
      goto LABEL_17;
    case 0xA:
    case 0x20:
    case 0x24:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
      return sub_22F350804(a1, v4, a3);
    case 0xC:
    case 0x37:
    case 0x38:
      goto LABEL_42;
    case 0xD:
    case 0x30:
      v17 = *(unsigned __int8 **)(v4 + 24);
      if (!v17)
        return 1;
      goto LABEL_45;
    case 0xE:
      return sub_22F350854(a1, v4, a3);
    case 0xF:
      result = sub_22F350CE8(a1, *(_QWORD *)(v4 + 40));
      if (!(_DWORD)result)
        return result;
      v19 = *(_QWORD *)(v4 + 24);
      return sub_22EEF7FC0(a1, v19);
    case 0x10:
    case 0x13:
      v18 = *(unsigned __int8 **)(v4 + 40);
      if (v18)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 40));
        if (!(_DWORD)result)
          return result;
        if (*v18 != 182)
        {
          result = sub_22EEE85E0(a1, v18);
          if (!(_DWORD)result)
            return result;
        }
      }
      v19 = *(_QWORD *)(v4 + 48);
      return sub_22EEF7FC0(a1, v19);
    case 0x11:
      v17 = (unsigned __int8 *)(*(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL);
      if (!v17)
        return 1;
LABEL_45:
      result = sub_22F34EF24(a1, v17);
      if (!(_DWORD)result)
        return result;
      if (*v17 == 182)
        return 1;
      return sub_22EEE85E0(a1, v17);
    case 0x12:
      return sub_22F3506C8(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
    case 0x14:
      v22 = *(_QWORD *)(a3 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v4 + 32);
        if (v23)
        {
          result = sub_22F3506C8(a1, v23, v22);
          if (!(_DWORD)result)
            return result;
        }
      }
      v24 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v24)
        return 1;
      v25 = v4 + 48;
      v26 = (uint64_t *)(a3 + 32);
      v27 = v24 - 1;
      do
      {
        v28 = *v26++;
        v50 = *(_OWORD *)v25;
        v51 = *(_QWORD *)(v25 + 16);
        v52 = v28;
        result = sub_22EEF85E0(a1, (uint64_t)&v50);
        v30 = v27-- != 0;
        if (!(_DWORD)result)
          break;
        v25 += 24;
      }
      while (v30);
      return result;
    case 0x15:
      v31 = *(unsigned __int8 **)(v4 + 48);
      if (v31)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 48));
        if (!(_DWORD)result)
          return result;
        if (*v31 != 182)
        {
          result = sub_22EEE85E0(a1, v31);
          if (!(_DWORD)result)
            return result;
        }
      }
      v19 = *(_QWORD *)(v4 + 40);
      return sub_22EEF7FC0(a1, v19);
    case 0x18:
      return sub_22F350934(a1, v4, a3);
    case 0x19:
      *(_QWORD *)&v50 = v4;
      *((_QWORD *)&v50 + 1) = a3;
      v32 = *(_QWORD *)(v4 + 24);
      v33 = sub_22E47EE80(&v50);
      return sub_22EEF7850(a1, v32, v33);
    case 0x1A:
      *(_QWORD *)&v50 = v4;
      *((_QWORD *)&v50 + 1) = a3;
      v34 = *(_QWORD *)(v4 + 24);
      v35 = sub_22E47EE80(&v50);
      result = sub_22EEF7850(a1, v34, v35);
      if (!(_DWORD)result)
        return result;
      v36 = v50;
      v37 = *(_QWORD *)(v50 + 16);
      if (*(_BYTE *)(v50 + 16) == 25 || (v37 & 0x3FFFC000000000) == 0)
        goto LABEL_76;
      v39 = 0;
      v40 = (unsigned __int16)(v37 >> 38);
      break;
    case 0x1C:
      return sub_22F3509B0(a1, v4, a3);
    case 0x1D:
    case 0x1E:
      v20 = *(unsigned __int8 **)(a3 + 16);
      if (v20)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a3 + 16));
        if (!(_DWORD)result)
          return result;
        if (*v20 != 182)
        {
          result = sub_22EEE85E0(a1, v20);
          if (!(_DWORD)result)
            return result;
        }
      }
      v21 = *(unsigned __int8 **)(a3 + 24);
      if (v21)
      {
        result = sub_22F34EF24(a1, v21);
        if (!(_DWORD)result)
          return result;
        if (*v21 != 182)
        {
          result = sub_22EEE85E0(a1, v21);
          if (!(_DWORD)result)
            return result;
        }
      }
LABEL_42:
      v19 = *(_QWORD *)(v4 + 32);
      return sub_22EEF7FC0(a1, v19);
    case 0x1F:
      return sub_22F350A00(a1, v4, a3);
    case 0x21:
      return sub_22F350A94(a1, v4, a3);
    case 0x2A:
      v41 = *(_DWORD *)(v4 + 20);
      *((_QWORD *)&v50 + 1) = *(_QWORD *)(v4 + 40);
      LODWORD(v50) = 8;
      DWORD1(v50) = v41;
      return sub_22EEF84EC(a1, (uint64_t)&v50);
    case 0x2B:
      v19 = *(_QWORD *)(v4 + 8);
      return sub_22EEF7FC0(a1, v19);
    case 0x2E:
      return sub_22F350B64(a1, v4, a3);
    case 0x31:
    case 0x33:
      v11 = *(unint64_t **)(a3 + 16);
      v12 = *v11;
      a3 = (uint64_t)(v11 + 1);
      v4 = v12;
      goto LABEL_17;
    case 0x39:
      goto LABEL_4;
    default:
      return result;
  }
  do
  {
    if (*(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v39 + 16))
    {
      if ((sub_22F34F228(a1) & 1) == 0)
        return 0;
    }
    else if (v39 < (unsigned __int16)(*(_QWORD *)(v36 + 16) >> 38))
    {
      result = sub_22EEF7FC0(a1, *(_QWORD *)(v36 + 40 + 8 * v39));
      if (!(_DWORD)result)
        return result;
    }
    ++v39;
  }
  while (v40 != v39);
  v37 = *(_QWORD *)(v36 + 16);
LABEL_76:
  if ((v37 & 0x3C0000000000000) == 0x80000000000000)
  {
    v42 = (_DWORD *)((v36 + 8 * (unsigned __int16)(v37 >> 38) + 4 * ((v37 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
    v45 = *v42;
    v44 = (unint64_t *)(v42 + 2);
    v43 = v45;
    if (v45)
    {
      v46 = 8 * v43;
      while ((sub_22EEF7FC0(a1, *v44) & 1) != 0)
      {
        ++v44;
        v46 -= 8;
        if (!v46)
          goto LABEL_81;
      }
      return 0;
    }
  }
LABEL_81:
  v47 = (unsigned __int8 *)sub_22F257D3C(v36);
  if (!v47)
    return 1;
  v49 = v47;
  result = sub_22F34EF24(a1, v47);
  if ((_DWORD)result)
  {
    if (*v49 == 182)
      return 1;
    result = sub_22EEE85E0(a1, v49);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EEF7FC0(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _DWORD v39[2];
  uint64_t v40;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    result = 1;
    switch(*(_BYTE *)(v4 + 16))
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 0xA:
      case 0xC:
      case 0x1D:
      case 0x20:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x36:
      case 0x37:
      case 0x38:
        goto LABEL_5;
      case 2:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) != 0)
        {
          v14 = *(unsigned __int8 **)(v4 + 56);
          if (v14)
            goto LABEL_57;
        }
        return 1;
      case 3:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(unsigned __int8 **)(v4 + 48);
        if (v14)
          goto LABEL_57;
        return 1;
      case 5:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(unsigned __int8 **)(v4 + 40);
        if (!v13)
          return 1;
LABEL_76:
        result = sub_22F34EF24(a1, v13);
        if (!(_DWORD)result)
          return result;
        if (*v13 == 182)
          return 1;
        return sub_22EEE85E0(a1, v13);
      case 0xD:
      case 0x30:
        v13 = *(unsigned __int8 **)(v4 + 24);
        if (v13)
          goto LABEL_76;
        return result;
      case 0xE:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22F34F228(a1);
        if (!(_DWORD)result)
          return result;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22EEF84EC(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 0xF:
        result = sub_22F350CE8(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_42;
        return result;
      case 0x10:
      case 0x13:
        v6 = *(unsigned __int8 **)(v4 + 40);
        if (v6)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 40));
          if (!(_DWORD)result)
            return result;
          if (*v6 != 182)
          {
            result = sub_22EEE85E0(a1, v6);
            if (!(_DWORD)result)
              return result;
          }
        }
        v5 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 0x11:
        v13 = (unsigned __int8 *)(*(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL);
        if (v13)
          goto LABEL_76;
        return result;
      case 0x12:
        return sub_22F350D60(a1, *(_QWORD *)(v4 + 32));
      case 0x14:
        result = sub_22F350D60(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v31 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v31)
          return 1;
        v32 = v4 + 48;
        v33 = v31 - 1;
        do
        {
          result = sub_22EEF84EC(a1, v32);
          v18 = v33-- != 0;
          v34 = v18;
          if (!(_DWORD)result)
            break;
          v32 += 24;
        }
        while ((v34 & 1) != 0);
        return result;
      case 0x15:
        v7 = *(unsigned __int8 **)(v4 + 48);
        if (v7)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 48));
          if (!(_DWORD)result)
            return result;
          if (*v7 != 182)
          {
            result = sub_22EEE85E0(a1, v7);
            if (!(_DWORD)result)
              return result;
          }
        }
        goto LABEL_24;
      case 0x16:
        v8 = *(unsigned __int8 **)(v4 + 56);
        if (v8)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 56));
          if (!(_DWORD)result)
            return result;
          if (*v8 != 182)
          {
            result = sub_22EEE85E0(a1, v8);
            if (!(_DWORD)result)
              return result;
          }
        }
        goto LABEL_5;
      case 0x17:
        v9 = *(unsigned __int8 **)(v4 + 64);
        if (v9)
          goto LABEL_37;
        goto LABEL_27;
      case 0x18:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22F350D60(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_24:
        v5 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 0x19:
      case 0x1C:
      case 0x31:
LABEL_42:
        v5 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 0x1A:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v20 = *(_QWORD *)(v4 + 16);
        v21 = (unsigned __int16)(v20 >> 38);
        if (!(unsigned __int16)(v20 >> 38))
          goto LABEL_85;
        v22 = 8 * v21;
        v23 = (_QWORD *)(v4 + 40);
        break;
      case 0x1E:
        v11 = *(unsigned __int8 **)(v4 + 48);
        if (v11)
        {
          result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 48));
          if (!(_DWORD)result)
            return result;
          if (*v11 != 182)
          {
            result = sub_22EEE85E0(a1, v11);
            if (!(_DWORD)result)
              return result;
          }
        }
        v9 = *(unsigned __int8 **)(v4 + 56);
        if (!v9)
          goto LABEL_27;
LABEL_37:
        result = sub_22F34EF24(a1, v9);
        if (!(_DWORD)result)
          return result;
        if (*v9 != 182)
        {
          result = sub_22EEE85E0(a1, v9);
          if (!(_DWORD)result)
            return result;
        }
LABEL_27:
        a2 = *(_QWORD *)(v4 + 32);
LABEL_7:
        if (a2 < 0x10)
          return 1;
        continue;
      case 0x1F:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_31;
      case 0x21:
        return sub_22F350BF4(a1, *(_QWORD **)(a2 & 0xFFFFFFFFFFFFFFF0));
      case 0x28:
      case 0x29:
        return sub_22F350C78(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      case 0x2A:
        v30 = *(_DWORD *)(v4 + 20);
        v40 = *(_QWORD *)(v4 + 40);
        v39[0] = 8;
        v39[1] = v30;
        return sub_22EEF84EC(a1, (uint64_t)v39);
      case 0x2B:
        v5 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 0x2E:
        result = sub_22F350CE8(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v35 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v35)
          return 1;
        v36 = v4 + 40;
        v37 = v35 - 1;
        do
        {
          result = sub_22EEF84EC(a1, v36);
          v18 = v37-- != 0;
          v38 = v18;
          if (!(_DWORD)result)
            break;
          v36 += 24;
        }
        while ((v38 & 1) != 0);
        return result;
      case 0x33:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_31:
        result = sub_22EEF7FC0(a1, v12);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v5 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v5;
        goto LABEL_7;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EEF7FC0(a1, *v23) & 1) == 0)
      return 0;
    ++v23;
    v22 -= 8;
  }
  while (v22);
  v20 = *(_QWORD *)(v4 + 16);
  v21 = (unsigned __int16)(v20 >> 38);
LABEL_85:
  if ((v20 & 0x3C0000000000000) == 0x80000000000000)
  {
    v24 = (_DWORD *)((v4 + 40 + 8 * v21 + 4 * ((v20 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v27 = *v24;
    v26 = v24 + 2;
    v25 = v27;
    if (v27)
    {
      v28 = 8 * v25;
      while ((sub_22EEF7FC0(a1, *v26) & 1) != 0)
      {
        ++v26;
        v28 -= 8;
        if (!v28)
          goto LABEL_90;
      }
      return 0;
    }
  }
LABEL_90:
  v29 = sub_22F257D3C(v4);
  if (!v29)
    return 1;
  v14 = (unsigned __int8 *)v29;
LABEL_57:
  result = sub_22F34EF24(a1, v14);
  if ((_DWORD)result)
  {
    if (*v14 == 182)
      return 1;
    result = sub_22EEE85E0(a1, v14);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EEF84EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22F350CE8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      v4 = *(unsigned __int8 **)(a2 + 8);
      if (v4)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 8));
        if ((_DWORD)result)
        {
          if (*v4 == 182)
            result = 1;
          else
            result = sub_22EEE85E0(a1, v4);
        }
      }
      break;
    case 8:
      v5 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(a2 + 8);
        v7 = v5 - 1;
        do
        {
          result = sub_22EEF84EC(a1, v6);
          v9 = v7-- != 0;
          if (!(_DWORD)result)
            break;
          v6 += 24;
        }
        while (v9);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EEF85E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t *v13;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v5)
        result = sub_22EEF7850(a1, *v5, v5 + 1);
      else
        result = sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v13 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v13 || (result = sub_22F3506C8(a1, *v13, v13[1]), (_DWORD)result))
        result = sub_22F350CE8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      v6 = *(_QWORD *)(a2 + 24);
      v7 = (unsigned __int8 *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        result = sub_22F34EF24(a1, (unsigned __int8 *)(v6 & 0xFFFFFFFFFFFFFFFCLL));
        if ((_DWORD)result)
        {
          if (*v7 == 182)
            result = 1;
          else
            result = sub_22EEE85E0(a1, v7);
        }
      }
      break;
    case 8:
      v8 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(a2 + 8);
        v10 = v8 - 1;
        do
        {
          result = sub_22EEF84EC(a1, v9);
          v12 = v10-- != 0;
          if (!(_DWORD)result)
            break;
          v9 += 24;
        }
        while (v12);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EEF8724(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22F34F228(a1, v4);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EEF87C8(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EEF88C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 56);
    v4 = 8 * v2;
    while (1)
    {
      v5 = *v3;
      if (*v3)
      {
        if (!sub_22F34EF24(v0, *v3) || *v5 != 182 && !sub_22EEE85E0(v0, (uint64_t)v5))
          break;
      }
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v6 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v6)
      JUMPOUT(0x22EEF88B0);
    v7 = *(unsigned __int8 ***)(v1 + 72);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7 && (!sub_22F34EF24(v0, *v7) || *v9 != 182 && !sub_22EEE85E0(v0, (uint64_t)v9)))
        break;
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  JUMPOUT(0x22EEF88B4);
}

uint64_t sub_22EEF91E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22F34F228(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = v5 & 0x1FFFFFFF;
    v9 = *(unsigned __int8 **)(v4 + 8 * v8);
    if (!v9)
      return 1;
    result = sub_22F34EF24(a1, *(unsigned __int8 **)(v4 + 8 * v8));
    if ((_DWORD)result)
    {
      if (*v9 == 182)
        return 1;
      result = sub_22EEE85E0(a1, v9);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EEF92A8(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  sub_22EFE95D4(a2);
  v4 = *(uint64_t **)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (1)
  {
    if (v4 == (uint64_t *)v6)
      return 1;
    v7 = sub_22E6939D8(*v4);
    if (v7)
      break;
LABEL_14:
    ++v4;
  }
  v8 = v7;
  v9 = 0;
  v10 = v7;
  while (1)
  {
    if ((*(_BYTE *)(v10 + 180) & 6) == 0)
    {
      result = sub_22F34F228(a1);
      if (!(_DWORD)result)
        return result;
    }
    if ((*(_BYTE *)(v10 + 96) & 3) != 0)
    {
      if (v9)
        goto LABEL_14;
      v9 = 1;
    }
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 96), v10);
    if (v11 != v8)
    {
      v10 = v11;
      if (v11)
        continue;
    }
    goto LABEL_14;
  }
}

uint64_t sub_22EEF9388(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v16;
  unint64_t v17;
  uint64_t result;

  sub_22EFE95D4(a2);
  v4 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (v4 != v6)
  {
    v7 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
    v8 = sub_22E3CD31C((uint64_t *)(v7 + 104), v7);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = v8;
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 144) & 6;
        v13 = (_DWORD *)(*(_QWORD *)(v11 + 144) & 0xFFFFFFFFFFFFFFF8);
        if (v12 != 4 || v13 == 0)
        {
          if (v12 != 2 || v13 == 0)
            goto LABEL_15;
        }
        else
        {
          v13 += 4;
        }
        v16 = (*v13 >> 1) & 3;
        if ((v16 - 2) < 2)
        {
          result = sub_22F34F228(a1);
          if (!(_DWORD)result)
            return result;
          goto LABEL_19;
        }
        if (!v16)
        {
LABEL_15:
          if ((sub_22F34F228(a1) & 1) == 0)
            return 0;
        }
LABEL_19:
        if ((*(_BYTE *)(v11 + 104) & 3) != 0)
        {
          if (v10)
            break;
          v10 = 1;
        }
        v17 = sub_22E3CD31C((uint64_t *)(v11 + 104), v11);
        if (v17 != v9)
        {
          v11 = v17;
          if (v17)
            continue;
        }
        break;
      }
    }
    v4 += 8;
  }
  return 1;
}

uint64_t sub_22EEF94C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  sub_22EFE95D4(a2);
  v4 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (1)
  {
    if (v4 == v6)
      return 1;
    v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v4 + 80) + 72), *(_QWORD *)(*(_QWORD *)v4 + 80));
    if (v7)
      break;
LABEL_14:
    v4 += 8;
  }
  v8 = v7;
  v9 = 0;
  v10 = v7;
  while (1)
  {
    if ((*(_BYTE *)(v10 + 420) & 6) == 0)
    {
      result = sub_22F34F228(a1);
      if (!(_DWORD)result)
        return result;
    }
    if ((*(_BYTE *)(v10 + 72) & 3) != 0)
    {
      if (v9)
        goto LABEL_14;
      v9 = 1;
    }
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
    if (v11 != v8)
    {
      v10 = v11;
      if (v11)
        continue;
    }
    goto LABEL_14;
  }
}

uint64_t sub_22EEF95B0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unsigned __int8 *v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EEF91E8(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22F3506C8(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v41 = *(_QWORD *)(a2 + 40);
    v42 = v10;
    v43 = v11;
    result = sub_22EEF7794(a1, &v41);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EEF85E0(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EEF7850(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = v17 & 0xFFFFFFFFFFFFFFF8, (v20 = *(unsigned __int8 **)(v19 + 40)) == 0)
        || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(v19 + 40)), (_DWORD)result)
        && (*v20 == 182 || (result = sub_22EEE85E0(a1, v20), (_DWORD)result)))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v21 = sub_22EFD7ED0(a2);
          v22 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v21 != v22)
          {
            v23 = *(_QWORD *)v21;
            if ((*(_WORD *)(*(_QWORD *)v21 + 28) & 4) != 0)
            {
              v24 = (unint64_t *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v23 & 6) != 0 || v24 == 0)
                goto LABEL_98;
              result = sub_22EEF7850(a1, *v24, (uint64_t)(v24 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v23 + 28) & 4) != 0)
              {
LABEL_98:
                v26 = *(unsigned __int8 **)(v23 + 8);
                if (v26)
                {
                  result = sub_22F34EF24(a1, v26);
                  if (!(_DWORD)result)
                    return result;
                  if (*v26 != 182)
                  {
                    result = sub_22EEE85E0(a1, v26);
                    if (!(_DWORD)result)
                      return result;
                  }
                }
              }
            }
            v21 += 8;
          }
        }
        v27 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_73;
        v28 = *(_WORD *)(a2 + 80) & 0x7F;
        v29 = -40;
        if (v28 > 0x46)
        {
          if (v28 == 83)
            goto LABEL_63;
          if (v28 == 71)
          {
            v29 = -56;
            goto LABEL_63;
          }
          if (v28 != 81)
          {
LABEL_58:
            v30 = v28 - 52;
            v31 = v28 - 33 >= 5;
            v32 = -48;
            if (!v31)
              v32 = -64;
            if (v30 >= 6)
              v29 = v32;
            else
              v29 = -72;
          }
        }
        else
        {
          if (v28 > 0x18)
            goto LABEL_57;
          if (v28 == 16)
          {
LABEL_49:
            v29 = -48;
            goto LABEL_63;
          }
          if (((1 << v28) & 0x1066) == 0)
          {
            if (v28 == 24)
              goto LABEL_49;
LABEL_57:
            if (v28 == 70)
            {
              v29 = -64;
              goto LABEL_63;
            }
            goto LABEL_58;
          }
        }
LABEL_63:
        v33 = *(_QWORD *)(a2 + 72 + v29 + 16);
        v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
        if ((v33 & 4) != 0)
          v34 = (_QWORD *)*v34;
        if (v34)
        {
          v35 = v34[8];
          if (v35)
          {
            if (((*(unsigned __int16 *)(v35 + 8) | (*(unsigned __int8 *)(v35 + 10) << 16)) & 0x100000) != 0)
            {
              v36 = sub_22EFD462C((unint64_t)(v34 - 8));
              if (v36)
              {
                if ((*(_DWORD *)(v36 + 28) & 0x7F) != 0x1D || (v36 = *(_QWORD *)(v36 + 48)) != 0)
                {
                  if (v36 == a2
                    || (v37 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v36 + 32))(v36),
                        v37 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v27)
                      return 1;
LABEL_74:
                    v38 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    if (v38)
                    {
                      v40 = v38;
                      result = sub_22F34EF24(a1, v38);
                      if (!(_DWORD)result)
                        return result;
                      if (*v40 != 182)
                      {
                        result = sub_22EEE85E0(a1, v40);
                        if (!(_DWORD)result)
                          return result;
                      }
                    }
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v39 = *(_QWORD *)(a2 + 88);
                    if (v39)
                    {
                      while (1)
                      {
                        if ((*(_DWORD *)(v39 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22F34F228(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        v39 = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF8;
                        if (!v39)
                          return 1;
                      }
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_73:
        if (!v27)
          return 1;
        goto LABEL_74;
      }
    }
  }
  return result;
}

uint64_t sub_22EEF99DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  result = sub_22F350EF4(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = (unsigned __int8 *)sub_22EFBC5B4(a2);
    if (!v5)
      return 1;
    v6 = v5;
    result = sub_22F34EF24(a1, v5);
    if ((_DWORD)result)
    {
      if (*v6 == 182)
        return 1;
      result = sub_22EEE85E0(a1, v6);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EEF9A60(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 **v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 **v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 **v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned __int8 **v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 **v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned __int8 **v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  unsigned __int8 **v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 **v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 **v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 **v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned __int8 **v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 **v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 **v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned __int8 **v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 **v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 **v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 **v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  unsigned __int8 **v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 **v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 **v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 **i;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned __int8 **v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned __int8 **v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  unsigned __int8 **v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unsigned __int8 **v174;
  uint64_t v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned __int8 **v178;
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unsigned __int8 **v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  unsigned __int8 **v186;
  uint64_t v187;
  unsigned __int8 *v188;
  uint64_t v189;
  unsigned __int8 **v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 **v194;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unsigned __int8 **v198;
  uint64_t v199;
  unsigned __int8 *v200;
  uint64_t v201;
  unsigned __int8 **v202;
  uint64_t v203;
  unsigned __int8 *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 **v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 **v213;
  unsigned __int8 *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned __int8 **v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 **v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 **v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 **v236;
  unsigned __int8 *v237;
  uint64_t v238;
  unsigned __int8 **v239;
  uint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unsigned __int8 **v243;
  uint64_t v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned __int8 **v247;
  uint64_t v248;
  unsigned __int8 *v249;
  uint64_t v250;
  unsigned __int8 **v251;
  uint64_t v252;
  unsigned __int8 *v253;
  uint64_t v254;
  unsigned __int8 **v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  unsigned __int8 **v259;
  uint64_t v260;
  unsigned __int8 *v261;
  uint64_t v262;
  unsigned __int8 **v263;
  uint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  unsigned __int8 **v267;
  uint64_t v268;
  unsigned __int8 *v269;
  uint64_t v270;
  unsigned __int8 **v271;
  uint64_t v272;
  unsigned __int8 *v273;
  uint64_t v274;
  unsigned __int8 **v275;
  uint64_t v276;
  unsigned __int8 *v277;
  uint64_t v278;
  unsigned __int8 **v279;
  uint64_t v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unsigned __int8 **v283;
  uint64_t v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unsigned __int8 **v287;
  uint64_t v288;
  unsigned __int8 *v289;
  __int128 v290;
  uint64_t v291;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v68 = (unsigned __int8 **)(a2 + 24);
      v69 = *(unsigned int *)(a2 + 16);
      v70 = *(unsigned __int8 **)(a2 + 24 + 8 * v69);
      if (v70)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24 + 8 * v69));
        if (!(_DWORD)result)
          return result;
        if (*v70 != 182)
        {
          result = sub_22EEE85E0(a1, v70);
          if (!(_DWORD)result)
            return result;
        }
        v69 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v69)
          return 1;
      }
      else if (!(_DWORD)v69)
      {
        return 1;
      }
      v71 = 8 * v69;
      while (1)
      {
        v72 = *v68;
        if (*v68)
        {
          result = sub_22F34EF24(a1, *v68);
          if (!(_DWORD)result)
            break;
          if (*v72 != 182)
          {
            result = sub_22EEE85E0(a1, v72);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v68;
        v71 -= 8;
        if (!v71)
          return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(unsigned __int8 **)(a2 + 16);
      if (v5)
        goto LABEL_229;
      return 1;
    case 5:
      v58 = (unsigned __int8 **)(a2 + 24);
      v59 = *(unsigned int *)(a2 + 16);
      v60 = *(unsigned __int8 **)(a2 + 24 + 8 * v59);
      if (v60)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24 + 8 * v59));
        if (!(_DWORD)result)
          return result;
        if (*v60 != 182)
        {
          result = sub_22EEE85E0(a1, v60);
          if (!(_DWORD)result)
            return result;
        }
        v59 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v59)
          return 1;
      }
      else if (!(_DWORD)v59)
      {
        return 1;
      }
      v61 = 8 * v59;
      while (1)
      {
        v62 = *v58;
        if (*v58)
        {
          result = sub_22F34EF24(a1, *v58);
          if (!(_DWORD)result)
            break;
          if (*v62 != 182)
          {
            result = sub_22EEE85E0(a1, v62);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v58;
        v61 -= 8;
        if (!v61)
          return 1;
      }
      return result;
    case 6:
      v53 = *(unsigned __int8 **)(a2 + 24);
      if (v53)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24));
        if (!(_DWORD)result)
          return result;
        if (*v53 != 182)
        {
          result = sub_22EEE85E0(a1, v53);
          if (!(_DWORD)result)
            return result;
        }
      }
      v54 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v54)
        return 1;
      v55 = (unsigned __int8 **)(a2 + 40);
      v56 = 8 * v54;
      while (1)
      {
        v57 = *v55;
        if (*v55)
        {
          result = sub_22F34EF24(a1, *v55);
          if (!(_DWORD)result)
            break;
          if (*v57 != 182)
          {
            result = sub_22EEE85E0(a1, v57);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v55;
        v56 -= 8;
        if (!v56)
          return 1;
      }
      return result;
    case 0xE:
      v48 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v48)
        return 1;
      v49 = a2 + 24;
      v50 = 8 * v48;
      v51 = (unsigned __int8 **)(a2 + 24);
      while (1)
      {
        v52 = *v51;
        if (*v51)
        {
          result = sub_22F34EF24(a1, *v51);
          if (!(_DWORD)result)
            break;
          if (*v52 != 182)
          {
            result = sub_22EEE85E0(a1, v52);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v51;
        v50 -= 8;
        if (!v50)
        {
          v149 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v149)
            return 1;
          v150 = 8 * v149;
          v151 = (unsigned __int8 **)(v49 + 8 * v149);
          while (1)
          {
            v152 = *v151;
            if (*v151)
            {
              result = sub_22F34EF24(a1, *v151);
              if (!(_DWORD)result)
                break;
              if (*v152 != 182)
              {
                result = sub_22EEE85E0(a1, v152);
                if (!(_DWORD)result)
                  break;
              }
            }
            ++v151;
            v150 -= 8;
            if (!v150)
            {
              v173 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v173)
                return 1;
              v174 = (unsigned __int8 **)(v49 + 8 * v173 + 8 * v173);
              v175 = 8 * v173;
              while (1)
              {
                v176 = *v174;
                if (*v174)
                {
                  result = sub_22F34EF24(a1, *v174);
                  if (!(_DWORD)result)
                    break;
                  if (*v176 != 182)
                  {
                    result = sub_22EEE85E0(a1, v176);
                    if (!(_DWORD)result)
                      break;
                  }
                }
                ++v174;
                v175 -= 8;
                if (!v175)
                {
                  v189 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v189)
                    return 1;
                  v190 = (unsigned __int8 **)(v49 + 8 * v189 + 8 * v189 + 8 * v189);
                  v191 = 8 * v189;
                  while (1)
                  {
                    v192 = *v190;
                    if (*v190)
                    {
                      result = sub_22F34EF24(a1, *v190);
                      if (!(_DWORD)result)
                        break;
                      if (*v192 != 182)
                      {
                        result = sub_22EEE85E0(a1, v192);
                        if (!(_DWORD)result)
                          break;
                      }
                    }
                    ++v190;
                    v191 -= 8;
                    if (!v191)
                      return 1;
                  }
                  return result;
                }
              }
              return result;
            }
          }
          return result;
        }
      }
      return result;
    case 0xF:
      v89 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v89)
        return 1;
      v90 = a2 + 24;
      v91 = 8 * v89;
      v92 = (unsigned __int8 **)(a2 + 24);
      while (1)
      {
        v93 = *v92;
        if (*v92)
        {
          result = sub_22F34EF24(a1, *v92);
          if (!(_DWORD)result)
            break;
          if (*v93 != 182)
          {
            result = sub_22EEE85E0(a1, v93);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v92;
        v91 -= 8;
        if (!v91)
        {
          v153 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v153)
            return 1;
          v154 = 8 * v153;
          v155 = (unsigned __int8 **)(v90 + 8 * v153);
          while (1)
          {
            v156 = *v155;
            if (*v155)
            {
              result = sub_22F34EF24(a1, *v155);
              if (!(_DWORD)result)
                break;
              if (*v156 != 182)
              {
                result = sub_22EEE85E0(a1, v156);
                if (!(_DWORD)result)
                  break;
              }
            }
            ++v155;
            v154 -= 8;
            if (!v154)
            {
              v177 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v177)
                return 1;
              v178 = (unsigned __int8 **)(v90 + 8 * v177 + 8 * v177);
              v179 = 8 * v177;
              while (1)
              {
                v180 = *v178;
                if (*v178)
                {
                  result = sub_22F34EF24(a1, *v178);
                  if (!(_DWORD)result)
                    break;
                  if (*v180 != 182)
                  {
                    result = sub_22EEE85E0(a1, v180);
                    if (!(_DWORD)result)
                      break;
                  }
                }
                ++v178;
                v179 -= 8;
                if (!v179)
                {
                  v193 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v193)
                    return 1;
                  v194 = (unsigned __int8 **)(v90 + 8 * v193 + 8 * v193 + 8 * v193);
                  v195 = 8 * v193;
                  while (1)
                  {
                    v196 = *v194;
                    if (*v194)
                    {
                      result = sub_22F34EF24(a1, *v194);
                      if (!(_DWORD)result)
                        break;
                      if (*v196 != 182)
                      {
                        result = sub_22EEE85E0(a1, v196);
                        if (!(_DWORD)result)
                          break;
                      }
                    }
                    ++v194;
                    v195 -= 8;
                    if (!v195)
                      return 1;
                  }
                  return result;
                }
              }
              return result;
            }
          }
          return result;
        }
      }
      return result;
    case 0x12:
      v44 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v44)
        return 1;
      v45 = (unsigned __int8 **)(a2 + 40);
      v46 = 8 * v44;
      while (1)
      {
        v47 = *v45;
        if (*v45)
        {
          result = sub_22F34EF24(a1, *v45);
          if (!(_DWORD)result)
            break;
          if (*v47 != 182)
          {
            result = sub_22EEE85E0(a1, v47);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v45;
        v46 -= 8;
        if (!v46)
          return 1;
      }
      return result;
    case 0x14:
    case 0x58:
      v5 = *(unsigned __int8 **)(a2 + 24);
      if (v5)
        goto LABEL_229;
      return 1;
    case 0x16:
      v63 = *(unsigned __int8 **)(a2 + 16);
      if (v63)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 16));
        if (!(_DWORD)result)
          return result;
        if (*v63 != 182)
        {
          result = sub_22EEE85E0(a1, v63);
          if (!(_DWORD)result)
            return result;
        }
      }
      v5 = *(unsigned __int8 **)(a2 + 40);
      if (v5)
        goto LABEL_229;
      return 1;
    case 0x18:
      v43 = *(unsigned __int8 **)(a2 + 16);
      if (v43)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 16));
        if (!(_DWORD)result)
          return result;
        if (*v43 != 182)
        {
          result = sub_22EEE85E0(a1, v43);
          if (!(_DWORD)result)
            return result;
        }
      }
      v5 = *(unsigned __int8 **)(a2 + 48);
      if (v5)
        goto LABEL_229;
      return 1;
    case 0x1A:
      v85 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v85)
        return 1;
      v86 = (unsigned __int8 **)(a2 + 24);
      v87 = 8 * v85;
      while (1)
      {
        v88 = *v86;
        if (*v86)
        {
          result = sub_22F34EF24(a1, *v86);
          if (!(_DWORD)result)
            break;
          if (*v88 != 182)
          {
            result = sub_22EEE85E0(a1, v88);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v86;
        v87 -= 8;
        if (!v87)
          return 1;
      }
      return result;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      v4 = *(unsigned __int8 **)(a2 + 16);
      if (v4)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 16));
        if (!(_DWORD)result)
          return result;
        if (*v4 != 182)
        {
          result = sub_22EEE85E0(a1, v4);
          if (!(_DWORD)result)
            return result;
        }
      }
      v5 = *(unsigned __int8 **)(a2 + 32);
      if (v5)
        goto LABEL_229;
      return 1;
    case 0x1D:
      v94 = a2 + 40;
      v95 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v95)
        goto LABEL_271;
      v96 = 8 * v95;
      v97 = (unsigned __int8 **)(a2 + 40);
      while (1)
      {
        v98 = *v97;
        if (*v97)
        {
          result = sub_22F34EF24(a1, *v97);
          if (!(_DWORD)result)
            break;
          if (*v98 != 182)
          {
            result = sub_22EEE85E0(a1, v98);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v97;
        v96 -= 8;
        if (!v96)
        {
LABEL_271:
          v132 = *(unsigned __int8 **)(a2 + 24);
          if (!v132
            || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24)), (_DWORD)result)
            && (*v132 == 182 || (result = sub_22EEE85E0(a1, v132), (_DWORD)result)))
          {
            v133 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v133)
              return 1;
            v134 = 8 * v133;
            v135 = (unsigned __int8 **)(v94 + 8 * v133);
            while (1)
            {
              v136 = *v135;
              if (*v135)
              {
                result = sub_22F34EF24(a1, *v135);
                if (!(_DWORD)result)
                  break;
                if (*v136 != 182)
                {
                  result = sub_22EEE85E0(a1, v136);
                  if (!(_DWORD)result)
                    break;
                }
              }
              ++v135;
              v134 -= 8;
              if (!v134)
              {
                v161 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v161)
                  return 1;
                v162 = (unsigned __int8 **)(v94 + 8 * v161 + 8 * v161);
                v163 = 8 * v161;
                while (1)
                {
                  v164 = *v162;
                  if (*v162)
                  {
                    result = sub_22F34EF24(a1, *v162);
                    if (!(_DWORD)result)
                      break;
                    if (*v164 != 182)
                    {
                      result = sub_22EEE85E0(a1, v164);
                      if (!(_DWORD)result)
                        break;
                    }
                  }
                  ++v162;
                  v163 -= 8;
                  if (!v163)
                    return 1;
                }
                return result;
              }
            }
          }
          return result;
        }
      }
      return result;
    case 0x1E:
      v35 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v35)
        return 1;
      v36 = (unsigned __int8 **)(a2 + 24);
      v37 = 8 * v35;
      while (1)
      {
        v38 = *v36;
        if (*v36)
        {
          result = sub_22F34EF24(a1, *v36);
          if (!(_DWORD)result)
            break;
          if (*v38 != 182)
          {
            result = sub_22EEE85E0(a1, v38);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v36;
        v37 -= 8;
        if (!v37)
          return 1;
      }
      return result;
    case 0x1F:
      v64 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v64)
        return 1;
      v65 = (unsigned __int8 **)(a2 + 104);
      v66 = 8 * v64;
      while (1)
      {
        v67 = *v65;
        if (*v65)
        {
          result = sub_22F34EF24(a1, *v65);
          if (!(_DWORD)result)
            break;
          if (*v67 != 182)
          {
            result = sub_22EEE85E0(a1, v67);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v65;
        v66 -= 8;
        if (!v66)
          return 1;
      }
      return result;
    case 0x22:
      v39 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v39)
        return 1;
      v40 = (unsigned __int8 **)(a2 + 80);
      v41 = 8 * v39;
      while (1)
      {
        v42 = *v40;
        if (*v40)
        {
          result = sub_22F34EF24(a1, *v40);
          if (!(_DWORD)result)
            break;
          if (*v42 != 182)
          {
            result = sub_22EEE85E0(a1, v42);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v40;
        v41 -= 8;
        if (!v41)
          return 1;
      }
      return result;
    case 0x25:
      if (!sub_22F3506C8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v290 = *(_OWORD *)(a2 + 72);
      v291 = *(_QWORD *)(a2 + 88);
      if (!sub_22EEF7794(a1, (uint64_t *)&v290))
        return 0;
      v210 = a2 + 96;
      v211 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v211)
        goto LABEL_538;
      v212 = 8 * v211;
      v213 = (unsigned __int8 **)(a2 + 96);
      while (1)
      {
        v214 = *v213;
        if (*v213)
        {
          if (!sub_22F34EF24(a1, *v213) || *v214 != 182 && !sub_22EEE85E0(a1, v214))
            break;
        }
        ++v213;
        v212 -= 8;
        if (!v212)
        {
LABEL_538:
          v226 = *(unsigned __int8 **)(a2 + 24);
          if (!v226
            || sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24))
            && (*v226 == 182 || sub_22EEE85E0(a1, v226)))
          {
            v227 = *(unsigned __int8 **)(a2 + 40);
            if (!v227
              || sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40))
              && (*v227 == 182 || sub_22EEE85E0(a1, v227)))
            {
              v228 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v228)
                return 1;
              v229 = 8 * v228;
              v230 = (unsigned __int8 **)(v210 + 8 * v228);
              while (1)
              {
                v231 = *v230;
                if (*v230)
                {
                  if (!sub_22F34EF24(a1, *v230) || *v231 != 182 && !sub_22EEE85E0(a1, v231))
                    break;
                }
                ++v230;
                v229 -= 8;
                if (!v229)
                {
                  v242 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v242)
                    return 1;
                  v243 = (unsigned __int8 **)(v210 + 8 * v242 + 8 * v242);
                  v244 = 8 * v242;
                  while (1)
                  {
                    v245 = *v243;
                    if (*v243)
                    {
                      if (!sub_22F34EF24(a1, *v243) || *v245 != 182 && !sub_22EEE85E0(a1, v245))
                        break;
                    }
                    ++v243;
                    v244 -= 8;
                    if (!v244)
                    {
                      v254 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v254)
                        return 1;
                      v255 = (unsigned __int8 **)(v210 + 8 * v254 + 8 * v254 + 8 * v254);
                      v256 = 8 * v254;
                      while (1)
                      {
                        v257 = *v255;
                        if (*v255)
                        {
                          if (!sub_22F34EF24(a1, *v255) || *v257 != 182 && !sub_22EEE85E0(a1, v257))
                            break;
                        }
                        ++v255;
                        v256 -= 8;
                        if (!v256)
                        {
                          v266 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v266)
                            return 1;
                          v267 = (unsigned __int8 **)(v210 + 8 * v266 + 8 * v266 + 8 * v266 + 8 * v266);
                          v268 = 8 * v266;
                          while (1)
                          {
                            v269 = *v267;
                            if (*v267)
                            {
                              if (!sub_22F34EF24(a1, *v267) || *v269 != 182 && !sub_22EEE85E0(a1, v269))
                                break;
                            }
                            ++v267;
                            v268 -= 8;
                            if (!v268)
                            {
                              v286 = *(unsigned int *)(a2 + 16);
                              if (!(_DWORD)v286)
                                return 1;
                              v287 = (unsigned __int8 **)(v210 + 8 * v286 + 8 * v286 + 8 * v286 + 8 * v286 + 8 * v286);
                              v288 = 8 * v286;
                              while (1)
                              {
                                v289 = *v287;
                                if (*v287)
                                {
                                  if (!sub_22F34EF24(a1, *v287)
                                    || *v289 != 182 && !sub_22EEE85E0(a1, v289))
                                  {
                                    break;
                                  }
                                }
                                ++v287;
                                v288 -= 8;
                                if (!v288)
                                  return 1;
                              }
                              return 0;
                            }
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v109 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v109)
        return 1;
      v110 = (unsigned __int8 **)(a2 + 24);
      v111 = 8 * v109;
      while (1)
      {
        v112 = *v110;
        if (*v110)
        {
          result = sub_22F34EF24(a1, *v110);
          if (!(_DWORD)result)
            break;
          if (*v112 != 182)
          {
            result = sub_22EEE85E0(a1, v112);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v110;
        v111 -= 8;
        if (!v111)
          return 1;
      }
      return result;
    case 0x29:
      v73 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v73)
        return 1;
      v74 = (unsigned __int8 **)(a2 + 32);
      v75 = 8 * v73;
      while (1)
      {
        v76 = *v74;
        if (*v74)
        {
          result = sub_22F34EF24(a1, *v74);
          if (!(_DWORD)result)
            break;
          if (*v76 != 182)
          {
            result = sub_22EEE85E0(a1, v76);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v74;
        v75 -= 8;
        if (!v75)
          return 1;
      }
      return result;
    case 0x2A:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (unsigned __int8 **)(a2 + 80);
      v18 = 8 * v16;
      while (1)
      {
        v19 = *v17;
        if (*v17)
        {
          result = sub_22F34EF24(a1, *v17);
          if (!(_DWORD)result)
            break;
          if (*v19 != 182)
          {
            result = sub_22EEE85E0(a1, v19);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return result;
    case 0x2B:
      v11 = a2 + 64;
      v12 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v12)
        goto LABEL_260;
      v13 = 8 * v12;
      v14 = (unsigned __int8 **)(a2 + 64);
      while (1)
      {
        v15 = *v14;
        if (*v14)
        {
          result = sub_22F34EF24(a1, *v14);
          if (!(_DWORD)result)
            break;
          if (*v15 != 182)
          {
            result = sub_22EEE85E0(a1, v15);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v14;
        v13 -= 8;
        if (!v13)
        {
LABEL_260:
          v126 = *(unsigned __int8 **)(a2 + 24);
          if (!v126
            || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24)), (_DWORD)result)
            && (*v126 == 182 || (result = sub_22EEE85E0(a1, v126), (_DWORD)result)))
          {
            v127 = *(unsigned __int8 **)(a2 + 40);
            if (!v127
              || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40)), (_DWORD)result)
              && (*v127 == 182 || (result = sub_22EEE85E0(a1, v127), (_DWORD)result)))
            {
              v128 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v128)
                return 1;
              v129 = 8 * v128;
              v130 = (unsigned __int8 **)(v11 + 8 * v128);
              while (1)
              {
                v131 = *v130;
                if (*v130)
                {
                  result = sub_22F34EF24(a1, *v130);
                  if (!(_DWORD)result)
                    break;
                  if (*v131 != 182)
                  {
                    result = sub_22EEE85E0(a1, v131);
                    if (!(_DWORD)result)
                      break;
                  }
                }
                ++v130;
                v129 -= 8;
                if (!v129)
                {
                  v165 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v165)
                    return 1;
                  v166 = (unsigned __int8 **)(v11 + 8 * v165 + 8 * v165);
                  v167 = 8 * v165;
                  while (1)
                  {
                    v168 = *v166;
                    if (*v166)
                    {
                      result = sub_22F34EF24(a1, *v166);
                      if (!(_DWORD)result)
                        break;
                      if (*v168 != 182)
                      {
                        result = sub_22EEE85E0(a1, v168);
                        if (!(_DWORD)result)
                          break;
                      }
                    }
                    ++v166;
                    v167 -= 8;
                    if (!v167)
                    {
                      v181 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v181)
                        return 1;
                      v182 = (unsigned __int8 **)(v11 + 8 * v181 + 8 * v181 + 8 * v181);
                      v183 = 8 * v181;
                      while (1)
                      {
                        v184 = *v182;
                        if (*v182)
                        {
                          result = sub_22F34EF24(a1, *v182);
                          if (!(_DWORD)result)
                            break;
                          if (*v184 != 182)
                          {
                            result = sub_22EEE85E0(a1, v184);
                            if (!(_DWORD)result)
                              break;
                          }
                        }
                        ++v182;
                        v183 -= 8;
                        if (!v183)
                        {
                          v197 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v197)
                            return 1;
                          v198 = (unsigned __int8 **)(v11 + 8 * v197 + 8 * v197 + 8 * v197 + 8 * v197);
                          v199 = 8 * v197;
                          while (1)
                          {
                            v200 = *v198;
                            if (*v198)
                            {
                              result = sub_22F34EF24(a1, *v198);
                              if (!(_DWORD)result)
                                break;
                              if (*v200 != 182)
                              {
                                result = sub_22EEE85E0(a1, v200);
                                if (!(_DWORD)result)
                                  break;
                              }
                            }
                            ++v198;
                            v199 -= 8;
                            if (!v199)
                              return 1;
                          }
                          return result;
                        }
                      }
                      return result;
                    }
                  }
                  return result;
                }
              }
            }
          }
          return result;
        }
      }
      return result;
    case 0x2C:
      v99 = a2 + 64;
      v100 = *(unsigned int *)(a2 + 16);
      v101 = a2 + 64 + 8 * v100 + 8 * v100 + 8 * v100 + 8 * v100;
      v102 = *(unsigned __int8 **)(v101 + 8 * v100);
      if (v102)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(v101 + 8 * v100));
        if (!(_DWORD)result)
          return result;
        if (*v102 != 182)
        {
          result = sub_22EEE85E0(a1, v102);
          if (!(_DWORD)result)
            return result;
        }
      }
      v103 = v99
           + 8 * *(unsigned int *)(a2 + 16)
           + 8 * *(unsigned int *)(a2 + 16)
           + 8 * *(unsigned int *)(a2 + 16)
           + 8 * *(unsigned int *)(a2 + 16)
           + 8 * *(unsigned int *)(a2 + 16);
      v104 = *(unsigned __int8 **)(v103 + 8);
      if (v104)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(v103 + 8));
        if (!(_DWORD)result)
          return result;
        if (*v104 != 182)
        {
          result = sub_22EEE85E0(a1, v104);
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v105)
        goto LABEL_281;
      v106 = 8 * v105;
      v107 = (unsigned __int8 **)(a2 + 64);
      while (1)
      {
        v108 = *v107;
        if (*v107)
        {
          result = sub_22F34EF24(a1, *v107);
          if (!(_DWORD)result)
            break;
          if (*v108 != 182)
          {
            result = sub_22EEE85E0(a1, v108);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v107;
        v106 -= 8;
        if (!v106)
        {
LABEL_281:
          v137 = *(unsigned __int8 **)(a2 + 24);
          if (!v137
            || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24)), (_DWORD)result)
            && (*v137 == 182 || (result = sub_22EEE85E0(a1, v137), (_DWORD)result)))
          {
            v138 = *(unsigned __int8 **)(a2 + 40);
            if (!v138
              || (result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40)), (_DWORD)result)
              && (*v138 == 182 || (result = sub_22EEE85E0(a1, v138), (_DWORD)result)))
            {
              v139 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v139)
                return 1;
              v140 = 8 * v139;
              v141 = (unsigned __int8 **)(v99 + 8 * v139);
              while (1)
              {
                v142 = *v141;
                if (*v141)
                {
                  result = sub_22F34EF24(a1, *v141);
                  if (!(_DWORD)result)
                    break;
                  if (*v142 != 182)
                  {
                    result = sub_22EEE85E0(a1, v142);
                    if (!(_DWORD)result)
                      break;
                  }
                }
                ++v141;
                v140 -= 8;
                if (!v140)
                {
                  v169 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v169)
                    return 1;
                  v170 = (unsigned __int8 **)(v99 + 8 * v169 + 8 * v169);
                  v171 = 8 * v169;
                  while (1)
                  {
                    v172 = *v170;
                    if (*v170)
                    {
                      result = sub_22F34EF24(a1, *v170);
                      if (!(_DWORD)result)
                        break;
                      if (*v172 != 182)
                      {
                        result = sub_22EEE85E0(a1, v172);
                        if (!(_DWORD)result)
                          break;
                      }
                    }
                    ++v170;
                    v171 -= 8;
                    if (!v171)
                    {
                      v185 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v185)
                        return 1;
                      v186 = (unsigned __int8 **)(v99 + 8 * v185 + 8 * v185 + 8 * v185);
                      v187 = 8 * v185;
                      while (1)
                      {
                        v188 = *v186;
                        if (*v186)
                        {
                          result = sub_22F34EF24(a1, *v186);
                          if (!(_DWORD)result)
                            break;
                          if (*v188 != 182)
                          {
                            result = sub_22EEE85E0(a1, v188);
                            if (!(_DWORD)result)
                              break;
                          }
                        }
                        ++v186;
                        v187 -= 8;
                        if (!v187)
                        {
                          v201 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v201)
                            return 1;
                          v202 = (unsigned __int8 **)(v99 + 8 * v201 + 8 * v201 + 8 * v201 + 8 * v201);
                          v203 = 8 * v201;
                          while (1)
                          {
                            v204 = *v202;
                            if (*v202)
                            {
                              result = sub_22F34EF24(a1, *v202);
                              if (!(_DWORD)result)
                                break;
                              if (*v204 != 182)
                              {
                                result = sub_22EEE85E0(a1, v204);
                                if (!(_DWORD)result)
                                  break;
                              }
                            }
                            ++v202;
                            v203 -= 8;
                            if (!v203)
                              return 1;
                          }
                          return result;
                        }
                      }
                      return result;
                    }
                  }
                  return result;
                }
              }
            }
          }
          return result;
        }
      }
      return result;
    case 0x2E:
      v31 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v31)
        return 1;
      v32 = (unsigned __int8 **)(a2 + 136);
      v33 = 8 * v31;
      while (1)
      {
        v34 = *v32;
        if (*v32)
        {
          result = sub_22F34EF24(a1, *v32);
          if (!(_DWORD)result)
            break;
          if (*v34 != 182)
          {
            result = sub_22EEE85E0(a1, v34);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v32;
        v33 -= 8;
        if (!v33)
          return 1;
      }
      return result;
    case 0x35:
      v20 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v20)
        return 1;
      v21 = 8 * v20;
      v22 = (unsigned __int8 **)(a2 + 24);
      while (1)
      {
        v23 = *v22;
        if (*v22)
        {
          result = sub_22F34EF24(a1, *v22);
          if (!(_DWORD)result)
            break;
          if (*v23 != 182)
          {
            result = sub_22EEE85E0(a1, v23);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v22;
        v21 -= 8;
        if (!v21)
        {
          v143 = *(unsigned int *)(a2 + 16);
          v144 = (uint64_t *)(a2 + 24 + 8 * v143);
          v290 = (unint64_t)v144;
          if (!(_DWORD)v143)
            return 1;
          v145 = 0;
          v146 = &v144[v143];
          while (1)
          {
            v147 = (unsigned __int8 **)v144;
            if ((v145 & 3) != 0)
            {
              if ((v145 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                v147 = (unsigned __int8 **)((v145 & 0xFFFFFFFFFFFFFFFCLL) + 40);
              else
                v147 = (unsigned __int8 **)sub_22F3AC1A8(*v144);
            }
            v148 = *v147;
            if (*v147)
            {
              if (!sub_22F34EF24(a1, v148) || *v148 != 182 && !sub_22EEE85E0(a1, v148))
                break;
            }
            if ((v145 & 3) != 0)
            {
              if (v145 < 4)
                sub_22F3F2FE0((uint64_t)&v290, 1);
              else
                sub_22F0D8720((uint64_t)&v290);
            }
            else
            {
              *(_QWORD *)&v290 = v144 + 1;
            }
            v145 = *((_QWORD *)&v290 + 1);
            v144 = (uint64_t *)v290;
            if (v290 == (unint64_t)v146)
              return 1;
          }
          return 0;
        }
      }
      return result;
    case 0x3F:
      v114 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v114)
        return 1;
      v115 = 8 * v114;
      v116 = (unsigned __int8 **)(a2 + 24);
      while (1)
      {
        v117 = *v116;
        if (*v116)
        {
          result = sub_22F34EF24(a1, *v116);
          if (!(_DWORD)result)
            break;
          if (*v117 != 182)
          {
            result = sub_22EEE85E0(a1, v117);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v116;
        v115 -= 8;
        if (!v115)
        {
          v157 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v157)
            return 1;
          v158 = 8 * v157;
          for (i = (unsigned __int8 **)(a2 + 24 + 8 * v157); ; ++i)
          {
            v160 = *i;
            if (*i)
            {
              result = sub_22F34EF24(a1, *i);
              if (!(_DWORD)result)
                break;
              if (*v160 != 182)
              {
                result = sub_22EEE85E0(a1, v160);
                if (!(_DWORD)result)
                  break;
              }
            }
            v158 -= 8;
            if (!v158)
              return 1;
          }
          return result;
        }
      }
      return result;
    case 0x42:
      if (!sub_22F3506C8(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v290 = *(_OWORD *)(a2 + 80);
      v291 = *(_QWORD *)(a2 + 96);
      if (!sub_22EEF7794(a1, (uint64_t *)&v290))
        return 0;
      v215 = a2 + 104;
      v216 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v216)
        goto LABEL_549;
      v217 = 8 * v216;
      v218 = (unsigned __int8 **)(a2 + 104);
      while (1)
      {
        v219 = *v218;
        if (*v218)
        {
          if (!sub_22F34EF24(a1, *v218) || *v219 != 182 && !sub_22EEE85E0(a1, v219))
            return 0;
        }
        ++v218;
        v217 -= 8;
        if (!v217)
        {
LABEL_549:
          v232 = *(unsigned __int8 **)(a2 + 24);
          if (!v232
            || sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24))
            && (*v232 == 182 || sub_22EEE85E0(a1, v232)))
          {
            v233 = *(unsigned __int8 **)(a2 + 40);
            if (!v233
              || sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40))
              && (*v233 == 182 || sub_22EEE85E0(a1, v233)))
            {
              v234 = *(unsigned int *)(a2 + 16);
              if ((_DWORD)v234)
              {
                v235 = 8 * v234;
                v236 = (unsigned __int8 **)(v215 + 8 * v234);
                while (1)
                {
                  v237 = *v236;
                  if (*v236)
                  {
                    if (!sub_22F34EF24(a1, *v236) || *v237 != 182 && !sub_22EEE85E0(a1, v237))
                      break;
                  }
                  ++v236;
                  v235 -= 8;
                  if (!v235)
                  {
                    v246 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v246)
                      goto LABEL_641;
                    v247 = (unsigned __int8 **)(v215 + 8 * v246 + 8 * v246);
                    v248 = 8 * v246;
                    while (1)
                    {
                      v249 = *v247;
                      if (*v247)
                      {
                        if (!sub_22F34EF24(a1, *v247) || *v249 != 182 && !sub_22EEE85E0(a1, v249))
                          return 0;
                      }
                      ++v247;
                      v248 -= 8;
                      if (!v248)
                      {
                        v258 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v258)
                          goto LABEL_641;
                        v259 = (unsigned __int8 **)(v215 + 8 * v258 + 8 * v258 + 8 * v258);
                        v260 = 8 * v258;
                        while (1)
                        {
                          v261 = *v259;
                          if (*v259)
                          {
                            if (!sub_22F34EF24(a1, *v259) || *v261 != 182 && !sub_22EEE85E0(a1, v261))
                              return 0;
                          }
                          ++v259;
                          v260 -= 8;
                          if (!v260)
                          {
                            v270 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v270)
                              goto LABEL_641;
                            v271 = (unsigned __int8 **)(v215 + 8 * v270 + 8 * v270 + 8 * v270 + 8 * v270);
                            v272 = 8 * v270;
                            while (1)
                            {
                              v273 = *v271;
                              if (*v271)
                              {
                                if (!sub_22F34EF24(a1, *v271) || *v273 != 182 && !sub_22EEE85E0(a1, v273))
                                  return 0;
                              }
                              ++v271;
                              v272 -= 8;
                              if (!v272)
                                goto LABEL_641;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
LABEL_641:
                if (*(_DWORD *)(a2 + 48) != 1)
                  return 1;
                v274 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v274)
                  return 1;
                v275 = (unsigned __int8 **)(v215 + 8 * v274 + 8 * v274 + 8 * v274 + 8 * v274 + 8 * v274);
                v276 = 8 * v274;
                while (1)
                {
                  v277 = *v275;
                  if (*v275)
                  {
                    if (!sub_22F34EF24(a1, *v275) || *v277 != 182 && !sub_22EEE85E0(a1, v277))
                      break;
                  }
                  ++v275;
                  v276 -= 8;
                  if (!v276)
                  {
                    v278 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v278)
                      return 1;
                    v279 = (unsigned __int8 **)(v215 + 8 * v278 + 8 * v278 + 8 * v278 + 8 * v278 + 8 * v278 + 8 * v278);
                    v280 = 8 * v278;
                    while (1)
                    {
                      v281 = *v279;
                      if (*v279)
                      {
                        if (!sub_22F34EF24(a1, *v279) || *v281 != 182 && !sub_22EEE85E0(a1, v281))
                          break;
                      }
                      ++v279;
                      v280 -= 8;
                      if (!v280)
                      {
                        v282 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v282)
                          return 1;
                        v283 = (unsigned __int8 **)(v215
                                                  + 8 * v282
                                                  + 8 * v282
                                                  + 8 * v282
                                                  + 8 * v282
                                                  + 8 * v282
                                                  + 8 * v282
                                                  + 8 * v282);
                        v284 = 8 * v282;
                        while (1)
                        {
                          v285 = *v283;
                          if (*v283)
                          {
                            if (!sub_22F34EF24(a1, *v283) || *v285 != 182 && !sub_22EEE85E0(a1, v285))
                              break;
                          }
                          ++v283;
                          v284 -= 8;
                          if (!v284)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
              }
            }
          }
          return 0;
        }
      }
    case 0x47:
      v113 = *(unsigned __int8 **)(a2 + 16);
      if (v113)
      {
        result = sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 16));
        if (!(_DWORD)result)
          return result;
        if (*v113 != 182)
        {
          result = sub_22EEE85E0(a1, v113);
          if (!(_DWORD)result)
            return result;
        }
      }
      v5 = *(unsigned __int8 **)(a2 + 64);
      if (!v5)
        return 1;
LABEL_229:
      result = sub_22F34EF24(a1, v5);
      if (!(_DWORD)result)
        return result;
      return *v5 == 182 || (sub_22EEE85E0(a1, v5) & 1) != 0;
    case 0x49:
      v118 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v118)
        return 1;
      v119 = (unsigned __int8 **)(a2 + 24);
      v120 = 8 * v118;
      while (1)
      {
        v121 = *v119;
        if (*v119)
        {
          result = sub_22F34EF24(a1, *v119);
          if (!(_DWORD)result)
            break;
          if (*v121 != 182)
          {
            result = sub_22EEE85E0(a1, v121);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v119;
        v120 -= 8;
        if (!v120)
          return 1;
      }
      return result;
    case 0x4C:
      v7 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v7)
        return 1;
      v8 = (unsigned __int8 **)(a2 + 24);
      v9 = 8 * v7;
      while (1)
      {
        v10 = *v8;
        if (*v8)
        {
          result = sub_22F34EF24(a1, *v8);
          if (!(_DWORD)result)
            break;
          if (*v10 != 182)
          {
            result = sub_22EEE85E0(a1, v10);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v8;
        v9 -= 8;
        if (!v9)
          return 1;
      }
      return result;
    case 0x4D:
      if (!sub_22F3506C8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v290 = *(_OWORD *)(a2 + 72);
      v291 = *(_QWORD *)(a2 + 88);
      if (!sub_22EEF7794(a1, (uint64_t *)&v290))
        return 0;
      v205 = a2 + 96;
      v206 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v206)
        goto LABEL_527;
      v207 = 8 * v206;
      v208 = (unsigned __int8 **)(a2 + 96);
      do
      {
        v209 = *v208;
        if (*v208 && (!sub_22F34EF24(a1, *v208) || *v209 != 182 && !sub_22EEE85E0(a1, v209)))
          return 0;
        ++v208;
        v207 -= 8;
      }
      while (v207);
LABEL_527:
      v220 = *(unsigned __int8 **)(a2 + 24);
      if (v220
        && (!sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 24)) || *v220 != 182 && !sub_22EEE85E0(a1, v220)))
      {
        return 0;
      }
      v221 = *(unsigned __int8 **)(a2 + 40);
      if (v221)
      {
        if (!sub_22F34EF24(a1, *(unsigned __int8 **)(a2 + 40))
          || *v221 != 182 && !sub_22EEE85E0(a1, v221))
        {
          return 0;
        }
      }
      v222 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v222)
      {
        v223 = 8 * v222;
        v224 = (unsigned __int8 **)(v205 + 8 * v222);
        while (1)
        {
          v225 = *v224;
          if (*v224)
          {
            if (!sub_22F34EF24(a1, *v224) || *v225 != 182 && !sub_22EEE85E0(a1, v225))
              break;
          }
          ++v224;
          v223 -= 8;
          if (!v223)
          {
            v238 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v238)
              return 1;
            v239 = (unsigned __int8 **)(v205 + 8 * v238 + 8 * v238);
            v240 = 8 * v238;
            while (1)
            {
              v241 = *v239;
              if (*v239)
              {
                if (!sub_22F34EF24(a1, *v239) || *v241 != 182 && !sub_22EEE85E0(a1, v241))
                  break;
              }
              ++v239;
              v240 -= 8;
              if (!v240)
              {
                v250 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v250)
                  return 1;
                v251 = (unsigned __int8 **)(v205 + 8 * v250 + 8 * v250 + 8 * v250);
                v252 = 8 * v250;
                while (1)
                {
                  v253 = *v251;
                  if (*v251)
                  {
                    if (!sub_22F34EF24(a1, *v251) || *v253 != 182 && !sub_22EEE85E0(a1, v253))
                      break;
                  }
                  ++v251;
                  v252 -= 8;
                  if (!v252)
                  {
                    v262 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v262)
                      return 1;
                    v263 = (unsigned __int8 **)(v205 + 8 * v262 + 8 * v262 + 8 * v262 + 8 * v262);
                    v264 = 8 * v262;
                    while (1)
                    {
                      v265 = *v263;
                      if (*v263)
                      {
                        if (!sub_22F34EF24(a1, *v263) || *v265 != 182 && !sub_22EEE85E0(a1, v265))
                          break;
                      }
                      ++v263;
                      v264 -= 8;
                      if (!v264)
                        return 1;
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
            return 0;
          }
        }
        return 0;
      }
      return 1;
    case 0x51:
      v81 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v81)
        return 1;
      v82 = (unsigned __int8 **)(a2 + 104);
      v83 = 8 * v81;
      while (1)
      {
        v84 = *v82;
        if (*v82)
        {
          result = sub_22F34EF24(a1, *v82);
          if (!(_DWORD)result)
            break;
          if (*v84 != 182)
          {
            result = sub_22EEE85E0(a1, v84);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v82;
        v83 -= 8;
        if (!v83)
          return 1;
      }
      return result;
    case 0x59:
      v77 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v77)
        return 1;
      v78 = (unsigned __int8 **)(a2 + 80);
      v79 = 8 * v77;
      while (1)
      {
        v80 = *v78;
        if (*v78)
        {
          result = sub_22F34EF24(a1, *v78);
          if (!(_DWORD)result)
            break;
          if (*v80 != 182)
          {
            result = sub_22EEE85E0(a1, v80);
            if (!(_DWORD)result)
              break;
          }
        }
        ++v78;
        v79 -= 8;
        if (!v79)
          return 1;
      }
      return result;
    case 0x5A:
      v122 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v122)
        return 1;
      v123 = (unsigned __int8 **)(a2 + 80);
      v124 = 8 * v122;
      break;
    case 0x5B:
      v24 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = 0;
        v27 = a2 + 24;
        v28 = 1;
        do
        {
          v29 = *(unsigned __int8 **)(v27 + 8 * v25);
          v30 = *(unsigned __int8 **)(v27 + 8 * (v25 + 1));
          if (v29
            && (!sub_22F34EF24(a1, *(unsigned __int8 **)(v27 + 8 * v25))
             || *v29 != 182 && !sub_22EEE85E0(a1, v29)))
          {
            break;
          }
          if (v30 && (!sub_22F34EF24(a1, v30) || *v30 != 182 && !sub_22EEE85E0(a1, v30)))
            break;
          v26 = v28 >= v24;
          v25 += 2;
          ++v28;
        }
        while (2 * v24 != v25);
        if (!v26)
          return 0;
      }
      return 1;
    default:
      return 1;
  }
  while (1)
  {
    v125 = *v123;
    if (*v123)
    {
      result = sub_22F34EF24(a1, *v123);
      if (!(_DWORD)result)
        break;
      if (*v125 != 182)
      {
        result = sub_22EEE85E0(a1, v125);
        if (!(_DWORD)result)
          break;
      }
    }
    ++v123;
    v124 -= 8;
    if (!v124)
      return 1;
  }
  return result;
}

uint64_t sub_22EEFB798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  if (!a2)
    return 1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = *(uint64_t **)(a2 + 24);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 16);
  v12 = 0;
  v13 = 0;
  v11 = v5;
  if (v5 == v4)
    return 1;
  v7 = 0;
  while (1)
  {
    v8 = (unsigned __int8 **)v5;
    if ((v7 & 3) != 0)
    {
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (unsigned __int8 **)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (unsigned __int8 **)sub_22F3AC1A8(*v5);
    }
    v9 = *v8;
    if (*v8)
    {
      result = sub_22F34EF24(a1, v9);
      if (!(_DWORD)result)
        break;
      if (*v9 != 182)
      {
        result = sub_22EEE85E0(a1, v9);
        if (!(_DWORD)result)
          break;
      }
    }
    if ((v7 & 3) != 0)
    {
      if (v7 < 4)
        sub_22F3F2FE0((uint64_t)&v11, 1);
      else
        sub_22F0D8720((uint64_t)&v11);
    }
    else
    {
      v11 = v5 + 1;
    }
    v5 = v11;
    v7 = v12;
    if (v11 == v4 && !v12)
      return 1;
  }
  return result;
}

_QWORD *sub_22EEFB89C(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = **a2;
      *((_DWORD *)result + 2) = *((_DWORD *)*a2 + 2);
      *result = v9;
      v10 = v8[2];
      result[2] = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      ++a2;
      result += 3;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t sub_22EEFB948(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)v2 = off_24FAB9B30;
  v3 = (_BYTE *)(v2 + 16);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a1;
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 16);
  }
  return v2;
}

uint64_t sub_22EEFB9B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAB9B30;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22EEFB9F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAB9B30;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEFBA40(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t result;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[4];
  int32x2_t v46;
  uint64_t v47;
  char v48;
  int32x2_t v49;
  uint64_t v50;
  char v51;
  int32x2_t v52;
  uint64_t v53;
  char v54;
  int32x2_t v55;
  uint64_t v56;
  char v57;
  int32x2_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9BA0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v45[0] = 0;
  v46 = vdup_n_s32(0x119u);
  v47 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9BA0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v48 = 0;
  v49 = vdup_n_s32(0x119u);
  v50 = v10;
  v16 = operator new();
  *(_DWORD *)(v16 + 8) = 0;
  v17 = (unsigned int *)(v16 + 8);
  *(_QWORD *)v16 = &off_24FAB9BA0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v16 + 32) = v18;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  v51 = 0;
  v52 = vdup_n_s32(0x119u);
  v53 = v16;
  v22 = operator new();
  *(_DWORD *)(v22 + 8) = 0;
  v23 = (unsigned int *)(v22 + 8);
  *(_QWORD *)v22 = &off_24FAB9BA0;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v22 + 32) = v24;
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  do
    v27 = __ldxr(v23);
  while (__stxr(v27 + 1, v23));
  v54 = 0;
  v55 = vdup_n_s32(0x119u);
  v56 = v22;
  v28 = operator new();
  *(_DWORD *)(v28 + 8) = 0;
  v29 = (unsigned int *)(v28 + 8);
  *(_QWORD *)v28 = &off_24FAB9BA0;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(v28 + 24) = *(_DWORD *)(a2 + 112);
  v30 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v28 + 32) = v30;
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  do
    v33 = __ldxr(v29);
  while (__stxr(v33 + 1, v29));
  v57 = 0;
  v58 = vdup_n_s32(0x119u);
  v59 = v28;
  v34 = operator new(0x78uLL);
  v35 = 0;
  *a1 = v34;
  a1[2] = v34 + 30;
  do
  {
    v36 = &v45[24 * v35];
    *(_QWORD *)v34 = *(_QWORD *)v36;
    v34[2] = *((_DWORD *)v36 + 2);
    v37 = *((_QWORD *)v36 + 2);
    *((_QWORD *)v34 + 2) = v37;
    if (v37)
    {
      v38 = (unsigned int *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    ++v35;
    v34 += 6;
  }
  while (v35 != 5);
  v40 = &v60;
  a1[1] = v34;
  do
  {
    result = *(v40 - 1);
    if (result)
    {
      v42 = (unsigned int *)(result + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v40 -= 3;
  }
  while (v40 != (uint64_t *)v45);
  return result;
}

uint64_t sub_22EEFBDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned __int8 **)(a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v9 || v10 != 44)
  {
    if (v10 != 9)
      goto LABEL_13;
LABEL_12:
    v8 = (unsigned __int8 **)(a2 + 16);
    goto LABEL_13;
  }
  v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if (((*(_BYTE *)(v12 + 74) & 1) != 0 || *(_QWORD *)(v12 + 128) > 7uLL)
    && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 72) & 0x8000000000) == 0)
  {
    goto LABEL_12;
  }
LABEL_13:
  v13 = *v8;
  if (!*v8)
    return 0;
  v15 = sub_22F379890(*v8);
  v16 = v13;
  return sub_22F35A7A4(a1 + 16, &v15, a3, a4);
}

uint64_t sub_22EEFBEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned __int8 **)(a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v9 || v10 != 44)
  {
    if (v10 == 9)
      goto LABEL_13;
LABEL_12:
    v8 = (unsigned __int8 **)(a2 + 16);
    goto LABEL_13;
  }
  v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if ((*(_BYTE *)(v12 + 74) & 1) == 0 && *(_QWORD *)(v12 + 128) <= 7uLL
    || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v9 + 24)) + 72) & 0x8000000000) != 0)
  {
    goto LABEL_12;
  }
LABEL_13:
  v13 = *v8;
  if (!*v8)
    return 0;
  v15 = sub_22F379890(*v8);
  v16 = v13;
  return sub_22F35A7A4(a1 + 16, &v15, a3, a4);
}

uint64_t sub_22EEFC014(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE v33[4];
  int32x2_t v34;
  uint64_t v35;
  char v36;
  int32x2_t v37;
  uint64_t v38;
  char v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9BA0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v33[0] = 0;
  v34 = vdup_n_s32(0x119u);
  v35 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9BA0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v36 = 0;
  v37 = vdup_n_s32(0x119u);
  v38 = v10;
  v16 = operator new();
  *(_DWORD *)(v16 + 8) = 0;
  v17 = (unsigned int *)(v16 + 8);
  *(_QWORD *)v16 = &off_24FAB9BA0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v16 + 32) = v18;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  v39 = 0;
  v40 = vdup_n_s32(0x119u);
  v41 = v16;
  v22 = operator new(0x48uLL);
  v23 = 0;
  *a1 = v22;
  a1[2] = v22 + 18;
  do
  {
    v24 = &v33[24 * v23];
    *(_QWORD *)v22 = *(_QWORD *)v24;
    v22[2] = *((_DWORD *)v24 + 2);
    v25 = *((_QWORD *)v24 + 2);
    *((_QWORD *)v22 + 2) = v25;
    if (v25)
    {
      v26 = (unsigned int *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ++v23;
    v22 += 6;
  }
  while (v23 != 3);
  v28 = &v42;
  a1[1] = v22;
  do
  {
    result = *(v28 - 1);
    if (result)
    {
      v30 = (unsigned int *)(result + 8);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v28 -= 3;
  }
  while (v28 != (uint64_t *)v33);
  return result;
}

uint64_t sub_22EEFC288(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_22F35242C((uint64_t)&v25, (int *)(a2 + 8));
  v30 = v25;
  v31 = v26;
  v32 = v27;
  v4 = *(_QWORD *)(a2 + 72);
  v27 = 0;
  v28 = v4;
  v29 = *(_DWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v33 = v28;
  v34 = v29;
  v35 = v5;
  v8 = operator new(0x30uLL);
  v9 = 0;
  v10 = 0;
  *a1 = v8;
  a1[2] = v8 + 12;
  do
  {
    v11 = v9;
    v12 = &v30 + 3 * v10;
    *(_QWORD *)v8 = *v12;
    v8[2] = *((_DWORD *)v12 + 2);
    v13 = v12[2];
    *((_QWORD *)v8 + 2) = v13;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v8 += 6;
    v9 = 1;
    v10 = 1;
  }
  while ((v11 & 1) == 0);
  v16 = &v36;
  a1[1] = v8;
  do
  {
    v17 = (unsigned int *)*(v16 - 1);
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
    v16 -= 3;
  }
  while (v16 != &v30);
  result = v27;
  if (v27)
  {
    v22 = (unsigned int *)(v27 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEFC428(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = *(_QWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v28 = v26;
  v29 = v27;
  v30 = v3;
  sub_22F3524F4((uint64_t)&v23, (int *)(a2 + 32));
  v31 = v23;
  v32 = v24;
  v33 = v25;
  v25 = 0;
  v6 = operator new(0x30uLL);
  v7 = 0;
  v8 = 0;
  *a1 = v6;
  a1[2] = v6 + 12;
  do
  {
    v9 = v7;
    v10 = &v28 + 3 * v8;
    *(_QWORD *)v6 = *v10;
    v6[2] = *((_DWORD *)v10 + 2);
    v11 = v10[2];
    *((_QWORD *)v6 + 2) = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v6 += 6;
    v7 = 1;
    v8 = 1;
  }
  while ((v9 & 1) == 0);
  v14 = &v34;
  a1[1] = v6;
  do
  {
    v15 = (unsigned int *)*(v14 - 1);
    if (v15)
    {
      v16 = v15 + 2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
    v14 -= 3;
  }
  while (v14 != &v28);
  result = v25;
  if (v25)
  {
    v20 = (unsigned int *)(v25 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_DWORD *sub_22EEFC5C4(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  _DWORD *result;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a2 + 16);
  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = operator new(0x18uLL);
  *a1 = result;
  v7 = (char *)(result + 6);
  a1[2] = result + 6;
  *(_QWORD *)result = v12;
  result[2] = v13;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v8 = v3 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a1[1] = v7;
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
      return (_DWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    a1[1] = v7;
  }
  return result;
}

uint64_t sub_22EEFC6D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  char v17;
  uint64_t v18;
  char v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t result;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[4];
  int32x2_t v30;
  uint64_t v31;
  char v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9BA0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v29[0] = 0;
  v30 = vdup_n_s32(0x119u);
  v31 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9BA0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v32 = 0;
  v33 = vdup_n_s32(0x119u);
  v34 = v10;
  v16 = operator new(0x30uLL);
  v17 = 0;
  v18 = 0;
  *a1 = v16;
  a1[2] = v16 + 12;
  do
  {
    v19 = v17;
    v20 = &v29[24 * v18];
    *(_QWORD *)v16 = *(_QWORD *)v20;
    v16[2] = *((_DWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 2);
    *((_QWORD *)v16 + 2) = v21;
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v16 += 6;
    v17 = 1;
    v18 = 1;
  }
  while ((v19 & 1) == 0);
  v24 = &v35;
  a1[1] = v16;
  do
  {
    result = *(v24 - 1);
    if (result)
    {
      v26 = (unsigned int *)(result + 8);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v24 -= 3;
  }
  while (v24 != (uint64_t *)v29);
  return result;
}

uint64_t sub_22EEFC8D4(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22EEFC934(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  sub_22F3531CC((uint64_t)&v28, *(int **)(a2 + 8));
  v32 = v29;
  v33 = v30;
  v30 = 0;
  v31 = v28;
  sub_22F353294((uint64_t)&v25, *(int **)(a2 + 16));
  v34 = v25;
  v35 = v26;
  v36 = v27;
  v27 = 0;
  v4 = operator new(0x30uLL);
  v5 = 0;
  v6 = 0;
  *a1 = v4;
  a1[2] = v4 + 12;
  do
  {
    v7 = v5;
    v8 = &v31 + 3 * v6;
    *(_QWORD *)v4 = *v8;
    v4[2] = *((_DWORD *)v8 + 2);
    v9 = v8[2];
    *((_QWORD *)v4 + 2) = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v4 += 6;
    v5 = 1;
    v6 = 1;
  }
  while ((v7 & 1) == 0);
  v12 = &v37;
  a1[1] = v4;
  do
  {
    v13 = (unsigned int *)*(v12 - 1);
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
    v12 -= 3;
  }
  while (v12 != &v31);
  v17 = v27;
  if (v27)
  {
    v18 = (unsigned int *)(v27 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  result = v30;
  if (v30)
  {
    v22 = (unsigned int *)(v30 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEFCAE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t result;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  int32x2_t v38;
  uint64_t v39;
  char v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  sub_22F35335C((uint64_t)&v31, (int *)(a2 + 8));
  v35 = v32;
  v36 = v33;
  v33 = 0;
  v34 = v31;
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9CF8;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v37 = 0;
  v38 = vdup_n_s32(0x125u);
  v39 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9D30;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v40 = 0;
  v41 = vdup_n_s32(0x125u);
  v42 = v10;
  v16 = operator new(0x48uLL);
  v17 = 0;
  *a1 = v16;
  a1[2] = v16 + 18;
  do
  {
    v18 = &v34 + 3 * v17;
    *(_QWORD *)v16 = *v18;
    v16[2] = *((_DWORD *)v18 + 2);
    v19 = v18[2];
    *((_QWORD *)v16 + 2) = v19;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ++v17;
    v16 += 6;
  }
  while (v17 != 3);
  v22 = &v43;
  a1[1] = v16;
  do
  {
    v23 = (unsigned int *)*(v22 - 1);
    if (v23)
    {
      v24 = v23 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
    v22 -= 3;
  }
  while (v22 != &v34);
  result = v33;
  if (v33)
  {
    v28 = (unsigned int *)(v33 + 8);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEFCD38(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t result;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[4];
  int32x2_t v28;
  uint64_t v29;
  char v30;
  int32x2_t v31;
  uint64_t v32;
  char v33;
  int32x2_t v34;
  uint64_t v35;
  char v36;
  int32x2_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEFCEFC(a2 + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v27[0] = 0;
  v28 = vdup_n_s32(0x125u);
  v29 = v4;
  v7 = sub_22EEFCEFC(a2 + 32);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v30 = 0;
  v31 = vdup_n_s32(0x125u);
  v32 = v7;
  v10 = sub_22EEFCEFC(a2 + 56);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v33 = 0;
  v34 = vdup_n_s32(0x125u);
  v35 = v10;
  v13 = sub_22EEFCEFC(a2 + 80);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v36 = 0;
  v37 = vdup_n_s32(0x125u);
  v38 = v13;
  v16 = operator new(0x60uLL);
  v17 = 0;
  *a1 = v16;
  a1[2] = v16 + 24;
  do
  {
    v18 = &v27[24 * v17];
    *(_QWORD *)v16 = *(_QWORD *)v18;
    v16[2] = *((_DWORD *)v18 + 2);
    v19 = *((_QWORD *)v18 + 2);
    *((_QWORD *)v16 + 2) = v19;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ++v17;
    v16 += 6;
  }
  while (v17 != 4);
  v22 = &v39;
  a1[1] = v16;
  do
  {
    result = *(v22 - 1);
    if (result)
    {
      v24 = (unsigned int *)(result + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v22 -= 3;
  }
  while (v22 != (uint64_t *)v27);
  return result;
}

uint64_t sub_22EEFCEFC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = operator new();
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)v2 = off_24FAB9CC0;
  v3 = (_BYTE *)(v2 + 16);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_22E3BB2B4(v3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a1;
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 16);
  }
  return v2;
}

uint64_t sub_22EEFCF6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAB9CC0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22EEFCFA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FAB9CC0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EEFCFF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t result;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[4];
  int32x2_t v31;
  uint64_t v32;
  char v33;
  int32x2_t v34;
  uint64_t v35;
  char v36;
  int32x2_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EEFCEFC(a2 + 8);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v30[0] = 0;
  v31 = vdup_n_s32(0x125u);
  v32 = v4;
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  v8 = (unsigned int *)(v7 + 8);
  *(_QWORD *)v7 = &off_24FAB9D30;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v7 + 32) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  do
    v12 = __ldxr(v8);
  while (__stxr(v12 + 1, v8));
  v33 = 0;
  v34 = vdup_n_s32(0x125u);
  v35 = v7;
  v13 = operator new();
  *(_DWORD *)(v13 + 8) = 0;
  v14 = (unsigned int *)(v13 + 8);
  *(_QWORD *)v13 = &off_24FAB9CF8;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v13 + 32) = v15;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v36 = 0;
  v37 = vdup_n_s32(0x125u);
  v38 = v13;
  v19 = operator new(0x48uLL);
  v20 = 0;
  *a1 = v19;
  a1[2] = v19 + 18;
  do
  {
    v21 = &v30[24 * v20];
    *(_QWORD *)v19 = *(_QWORD *)v21;
    v19[2] = *((_DWORD *)v21 + 2);
    v22 = *((_QWORD *)v21 + 2);
    *((_QWORD *)v19 + 2) = v22;
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ++v20;
    v19 += 6;
  }
  while (v20 != 3);
  v25 = &v39;
  a1[1] = v19;
  do
  {
    result = *(v25 - 1);
    if (result)
    {
      v27 = (unsigned int *)(result + 8);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v25 -= 3;
  }
  while (v25 != (uint64_t *)v30);
  return result;
}

uint64_t sub_22EEFD228(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  sub_22F3554C4((uint64_t)&v28, (int *)(a2 + 8));
  v32 = v29;
  v33 = v30;
  v30 = 0;
  v31 = v28;
  sub_22F35558C((uint64_t)&v25, (int *)(a2 + 136));
  v34 = v25;
  v35 = v26;
  v36 = v27;
  v27 = 0;
  v4 = operator new(0x30uLL);
  v5 = 0;
  v6 = 0;
  *a1 = v4;
  a1[2] = v4 + 12;
  do
  {
    v7 = v5;
    v8 = &v31 + 3 * v6;
    *(_QWORD *)v4 = *v8;
    v4[2] = *((_DWORD *)v8 + 2);
    v9 = v8[2];
    *((_QWORD *)v4 + 2) = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v4 += 6;
    v5 = 1;
    v6 = 1;
  }
  while ((v7 & 1) == 0);
  v12 = &v37;
  a1[1] = v4;
  do
  {
    v13 = (unsigned int *)*(v12 - 1);
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
    v12 -= 3;
  }
  while (v12 != &v31);
  v17 = v27;
  if (v27)
  {
    v18 = (unsigned int *)(v27 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  result = v30;
  if (v30)
  {
    v22 = (unsigned int *)(v30 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22EEFD3D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t result;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[4];
  int32x2_t v46;
  uint64_t v47;
  char v48;
  int32x2_t v49;
  uint64_t v50;
  char v51;
  int32x2_t v52;
  uint64_t v53;
  char v54;
  int32x2_t v55;
  uint64_t v56;
  char v57;
  int32x2_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9E48;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v45[0] = 0;
  v46 = vdup_n_s32(0x15Au);
  v47 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9E48;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v48 = 0;
  v49 = vdup_n_s32(0x15Au);
  v50 = v10;
  v16 = operator new();
  *(_DWORD *)(v16 + 8) = 0;
  v17 = (unsigned int *)(v16 + 8);
  *(_QWORD *)v16 = &off_24FAB9E48;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v16 + 32) = v18;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  v51 = 0;
  v52 = vdup_n_s32(0x15Au);
  v53 = v16;
  v22 = operator new();
  *(_DWORD *)(v22 + 8) = 0;
  v23 = (unsigned int *)(v22 + 8);
  *(_QWORD *)v22 = &off_24FAB9E48;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v22 + 32) = v24;
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  do
    v27 = __ldxr(v23);
  while (__stxr(v27 + 1, v23));
  v54 = 0;
  v55 = vdup_n_s32(0x15Au);
  v56 = v22;
  v28 = operator new();
  *(_DWORD *)(v28 + 8) = 0;
  v29 = (unsigned int *)(v28 + 8);
  *(_QWORD *)v28 = &off_24FAB9E48;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(v28 + 24) = *(_DWORD *)(a2 + 112);
  v30 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v28 + 32) = v30;
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  do
    v33 = __ldxr(v29);
  while (__stxr(v33 + 1, v29));
  v57 = 0;
  v58 = vdup_n_s32(0x15Au);
  v59 = v28;
  v34 = operator new(0x78uLL);
  v35 = 0;
  *a1 = v34;
  a1[2] = v34 + 30;
  do
  {
    v36 = &v45[24 * v35];
    *(_QWORD *)v34 = *(_QWORD *)v36;
    v34[2] = *((_DWORD *)v36 + 2);
    v37 = *((_QWORD *)v36 + 2);
    *((_QWORD *)v34 + 2) = v37;
    if (v37)
    {
      v38 = (unsigned int *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    ++v35;
    v34 += 6;
  }
  while (v35 != 5);
  v40 = &v60;
  a1[1] = v34;
  do
  {
    result = *(v40 - 1);
    if (result)
    {
      v42 = (unsigned int *)(result + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v40 -= 3;
  }
  while (v40 != (uint64_t *)v45);
  return result;
}

uint64_t sub_22EEFD73C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t result;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE v33[4];
  int32x2_t v34;
  uint64_t v35;
  char v36;
  int32x2_t v37;
  uint64_t v38;
  char v39;
  int32x2_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  v5 = (unsigned int *)(v4 + 8);
  *(_QWORD *)v4 = &off_24FAB9E48;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  v33[0] = 0;
  v34 = vdup_n_s32(0x15Au);
  v35 = v4;
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 0;
  v11 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = &off_24FAB9E48;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v36 = 0;
  v37 = vdup_n_s32(0x15Au);
  v38 = v10;
  v16 = operator new();
  *(_DWORD *)(v16 + 8) = 0;
  v17 = (unsigned int *)(v16 + 8);
  *(_QWORD *)v16 = &off_24FAB9E48;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v16 + 32) = v18;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  v39 = 0;
  v40 = vdup_n_s32(0x15Au);
  v41 = v16;
  v22 = operator new(0x48uLL);
  v23 = 0;
  *a1 = v22;
  a1[2] = v22 + 18;
  do
  {
    v24 = &v33[24 * v23];
    *(_QWORD *)v22 = *(_QWORD *)v24;
    v22[2] = *((_DWORD *)v24 + 2);
    v25 = *((_QWORD *)v24 + 2);
    *((_QWORD *)v22 + 2) = v25;
    if (v25)
    {
      v26 = (unsigned int *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ++v23;
    v22 += 6;
  }
  while (v23 != 3);
  v28 = &v42;
  a1[1] = v22;
  do
  {
    result = *(v28 - 1);
    if (result)
    {
      v30 = (unsigned int *)(result + 8);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v28 -= 3;
  }
  while (v28 != (uint64_t *)v33);
  return result;
}

uint64_t sub_22EEFD9B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t result;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v42 = *(_QWORD *)(a2 + 8);
  v43 = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v44 = v42;
  v45 = v43;
  v46 = v3;
  v40 = *(_QWORD *)(a2 + 32);
  v41 = *(_DWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v47 = v40;
  v48 = v41;
  v49 = v6;
  v38 = *(_QWORD *)(a2 + 56);
  v39 = *(_DWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v50 = v38;
  v51 = v39;
  v52 = v9;
  v36 = *(_QWORD *)(a2 + 80);
  v37 = *(_DWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v53 = v36;
  v54 = v37;
  v55 = v12;
  v34 = *(_QWORD *)(a2 + 104);
  v35 = *(_DWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v56 = v34;
  v57 = v35;
  v58 = v15;
  v32 = *(_QWORD *)(a2 + 128);
  v33 = *(_DWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 144);
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v59 = v32;
  v60 = v33;
  v61 = v18;
  v21 = operator new(0x90uLL);
  v22 = 0;
  *a1 = v21;
  a1[2] = v21 + 36;
  do
  {
    v23 = &v44 + 3 * v22;
    *(_QWORD *)v21 = *v23;
    v21[2] = *((_DWORD *)v23 + 2);
    v24 = v23[2];
    *((_QWORD *)v21 + 2) = v24;
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    ++v22;
    v21 += 6;
  }
  while (v22 != 6);
  v27 = &v62;
  a1[1] = v21;
  do
  {
    result = *(v27 - 1);
    if (result)
    {
      v29 = (unsigned int *)(result + 8);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v27 -= 3;
  }
  while (v27 != &v44);
  return result;
}

_QWORD *sub_22EEFDC4C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_22EEFDCB8(void ***result)
{
  void **v1;
  void *v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1[1];
    if (v2 != *v1)
      free(v2);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22EEFDD0C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 56 * v7;
        do
        {
          if (v6[v8 - 9] < 0)
            operator delete(*(void **)&v6[v8 - 32]);
          v8 -= 56;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v9 = 0;
      return a1;
    }
    v9 = (_DWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v11)
    {
      v13 = *(_QWORD *)a1;
      if (v11)
      {
        v14 = sub_22EEFDF64(v4, (__int128 *)((char *)v4 + 56 * v11), v13);
        v13 = *(_QWORD *)a1;
        LODWORD(v12) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v14 = *(_QWORD *)a1;
      }
      for (i = v13 + 56 * v12; i != v14; i -= 56)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      *(_DWORD *)(a1 + 8) = v11;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = *(__int128 **)a2;
        v18 = 56 * v16;
        do
        {
          if (*((char *)v17 + v18 - 9) < 0)
            operator delete(*(void **)((char *)v17 + v18 - 32));
          v18 -= 56;
        }
        while (v18);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v11)
    {
      if ((_DWORD)v12)
      {
        v19 = *(_QWORD *)a1;
        v20 = 56 * v12;
        do
        {
          if (*(char *)(v19 + v20 - 9) < 0)
            operator delete(*(void **)(v19 + v20 - 32));
          v20 -= 56;
        }
        while (v20);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F2A5F44(a1);
    }
    else if ((_DWORD)v12)
    {
      sub_22EEFDF64(v4, (__int128 *)((char *)v4 + 56 * v12), *(_QWORD *)a1);
LABEL_39:
      v21 = *(__int128 **)a2;
      v22 = *(unsigned int *)(a2 + 8);
      if (v12 != v22)
      {
        v23 = (char *)v21 + 56 * v22;
        v24 = *(_QWORD *)a1 + 56 * v12;
        v25 = (char *)v21 + 56 * v12;
        do
        {
          v26 = *(_OWORD *)v25;
          *(_QWORD *)(v24 + 13) = *(_QWORD *)(v25 + 13);
          *(_OWORD *)v24 = v26;
          v27 = *(_OWORD *)(v25 + 24);
          *(_QWORD *)(v24 + 40) = *((_QWORD *)v25 + 5);
          *(_OWORD *)(v24 + 24) = v27;
          *((_QWORD *)v25 + 4) = 0;
          *((_QWORD *)v25 + 5) = 0;
          *((_QWORD *)v25 + 3) = 0;
          *(_BYTE *)(v24 + 48) = v25[48];
          v25 += 56;
          v24 += 56;
        }
        while (v25 != v23);
        v21 = *(__int128 **)a2;
      }
      *(_DWORD *)(a1 + 8) = v11;
      v28 = *v9;
      if ((_DWORD)v28)
      {
        v29 = 56 * v28;
        do
        {
          if (*((char *)v21 + v29 - 9) < 0)
            operator delete(*(void **)((char *)v21 + v29 - 32));
          v29 -= 56;
        }
        while (v29);
      }
      goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_39;
  }
  return a1;
}

uint64_t sub_22EEFDF64(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  void **v7;
  __int128 v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)((char *)v5 + 13);
      *(_OWORD *)a3 = v6;
      v7 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0)
        operator delete(*v7);
      v8 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a3 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v7 = v8;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      *(_BYTE *)(a3 + 48) = *((_BYTE *)v5 + 48);
      a3 += 56;
      v5 = (__int128 *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *sub_22EEFDFF0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  llvm *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = ((v15 >> 4) ^ (v15 >> 9)) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 32 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 32 * v16);
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v19)
              v17 = v19;
          }
LABEL_12:
          *v17 = v15;
          v17[1] = 0;
          v17[2] = 0;
          v17[3] = 0;
          *(_OWORD *)(v17 + 1) = *(_OWORD *)((char *)v14 + 8);
          v17[3] = *((_QWORD *)v14 + 3);
          ++v12;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = 0;
          *((_QWORD *)v14 + 3) = 0;
          *(_DWORD *)(a1 + 8) = v12;
        }
        v14 = (llvm *)((char *)v14 + 32);
      }
      while (v14 != (llvm *)((char *)v4 + 32 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v23)
    {
      v24 = 32 * v23;
      do
      {
        *result = -4096;
        result += 4;
        v24 -= 32;
      }
      while (v24);
    }
  }
  return result;
}

void sub_22EEFE184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  void **v33;
  unint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t *v40;
  char *v41;
  const void *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  void *v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  __int128 *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  _BYTE *v163;
  __int128 *v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  _DWORD *v173;
  int v174;
  int v175;
  void *v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  unsigned int v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  _DWORD *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t i;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  int v216;
  void **p_s2;
  const char *v218;
  uint64_t v219;
  void **p_s1;
  int v221;
  unsigned __int16 **v222;
  _OWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t *v236;
  uint64_t *v237;
  char v238;
  uint64_t v239;
  _BYTE *v240;
  unsigned int *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  int v260;
  _BOOL4 v261;
  void **v262;
  unsigned __int8 *v263;
  int v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  int v269;
  int v270;
  unsigned __int8 *v271;
  int v272;
  int v273;
  int v274;
  uint64_t **v275;
  int v276;
  char v277;
  BOOL v278;
  uint64_t v279;
  unsigned __int8 **v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  unsigned __int8 *v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t **v296;
  int v297;
  char v298;
  uint64_t v300;
  unsigned __int8 **v301;
  uint64_t v302;
  unsigned __int8 *v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  unsigned __int8 *v310;
  uint64_t v311;
  uint64_t v312;
  const char *v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  _QWORD *v318;
  int v319;
  char v320;
  uint64_t v322;
  unsigned __int8 **v323;
  uint64_t v324;
  unsigned __int8 *v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  char v332;
  unsigned __int8 *v333;
  uint64_t v334;
  uint64_t v335;
  const char *v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  int v340;
  int v341;
  int v342;
  _QWORD *v343;
  int v344;
  int v345;
  _OWORD *v346;
  uint64_t v347;
  uint64_t v348;
  unsigned __int8 *v349;
  __int128 *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  int v362;
  unint64_t v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  BOOL v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  _OWORD *v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  _OWORD *v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  unsigned __int8 **v406;
  unsigned __int8 **v407;
  int v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  char v414;
  _BYTE *v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  unsigned int v419;
  unsigned int *v420;
  uint64_t *v421;
  uint64_t *v422;
  int v423;
  int v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t **v427;
  uint64_t **v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  char v436;
  char v437;
  int v438;
  unsigned int v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t *v444;
  uint64_t *v445;
  uint64_t v446;
  char *v447;
  int64x2_t *v448;
  uint64_t v449;
  void **v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unsigned __int8 v461;
  unsigned __int8 *v462;
  uint64_t v463;
  void *v464;
  __int128 v465;
  uint64_t v466;
  void *v467;
  uint64_t v468;
  _BYTE v469[64];
  int64x2_t v470;
  int v471;
  _DWORD *v472;
  void *v473;
  uint64_t v474;
  _DWORD v475[16];
  void *v476[2];
  _DWORD v477[14];
  void *__s2;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  void *__s1;
  _BYTE v491[24];
  void *v492;
  __int128 v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char v498;
  uint64_t v499;

  v499 = *MEMORY[0x24BDAC8D0];
  v456 = 0;
  v457 = 0;
  v458 = 0;
  if (!sub_22F3564F4(&v456, a2))
    return;
  v4 = v456;
  j = (*(_DWORD *)(*(_QWORD *)(v457 + 8) + 28) & 0x7Fu) - 13 >= 0x3E ? 0 : *(_QWORD *)(v457 + 8);
  v6 = (*(_DWORD *)(j + 28) & 0x7Eu) - 52 >= 6 ? 0 : j;
  v7 = (*(_DWORD *)(j + 28) & 0x7Eu) - 54 >= 4 ? 0 : j;
  *(_QWORD *)(a1 + 328) = v7;
  if (sub_22F356560(j) || (*(_DWORD *)(j + 28) & 0x7F) == 0x37 || (*(_DWORD *)(j + 28) & 0x7F) == 0x39)
    return;
  v412 = a2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 320) + 120))(*(_QWORD *)(a1 + 320), v6);
  v418 = v4;
  v8 = *(unsigned int *)(v4 + 24);
  *(_OWORD *)v491 = xmmword_22F4559B0;
  __s1 = &v491[16];
  v492 = &v494;
  v493 = xmmword_22F4559B0;
  v498 = 0;
  v497 = 0;
  v495 = 0;
  v496 = 0;
  v9 = *(_QWORD *)(a1 + 496);
  v10 = *(_QWORD *)(a1 + 504);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 5);
  v12 = v8 - v11;
  v446 = a1;
  v430 = j;
  v411 = v6;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v49 = (uint64_t *)(v9 + 96 * v8);
      if ((uint64_t *)v10 != v49)
      {
        v50 = (uint64_t *)(v10 - 40);
        do
        {
          v51 = v50[2];
          if (v51)
          {
            v52 = *(_DWORD *)(v51 + 68) - 1;
            *(_DWORD *)(v51 + 68) = v52;
            if (!v52)
              sub_22F3563E0(v51);
          }
          v53 = v50[1];
          if (v53)
          {
            v54 = *(_DWORD *)(v53 + 68) - 1;
            *(_DWORD *)(v53 + 68) = v54;
            if (!v54)
              sub_22F3563E0(v53);
          }
          v55 = (uint64_t *)*(v50 - 3);
          if (v50 != v55)
            free(v55);
          v56 = (uint64_t *)*(v50 - 7);
          if (v50 - 4 != v56)
            free(v56);
          v57 = v50 - 7;
          v50 -= 12;
        }
        while (v57 != v49);
      }
      *(_QWORD *)(a1 + 504) = v49;
    }
    goto LABEL_86;
  }
  v13 = *(_QWORD *)(a1 + 512);
  if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 5) >= v12)
  {
    v58 = v10 + 96 * v12;
    v59 = 96 * v8 - 32 * ((v10 - v9) >> 5);
    do
    {
      sub_22EF03694(v10, &__s1);
      v10 += 96;
      v59 -= 96;
    }
    while (v59);
    *(_QWORD *)(a1 + 504) = v58;
    goto LABEL_86;
  }
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 5);
  v15 = 2 * v14;
  if (2 * v14 <= v8)
    v15 = v8;
  if (v14 >= 0x155555555555555)
    v16 = 0x2AAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16 > 0x2AAAAAAAAAAAAAALL)
    sub_22E3B3F8C();
  v17 = (char *)operator new(96 * v16);
  v18 = &v17[96 * v11];
  v19 = &v17[96 * v8];
  v20 = 96 * v8;
  v21 = (uint64_t)v18;
  v22 = v20 - 96 * v11;
  do
  {
    sub_22EF03694(v21, &__s1);
    v21 += 96;
    v22 -= 96;
  }
  while (v22);
  v23 = &v17[96 * v16];
  v24 = (_QWORD *)a1;
  v27 = a1 + 496;
  v26 = *(char **)(a1 + 496);
  v25 = *(char **)(v27 + 8);
  if (v25 == v26)
  {
    v24[62] = v18;
    v24[63] = v19;
    v24[64] = v23;
    a1 = (uint64_t)v24;
    goto LABEL_84;
  }
  v441 = v23;
  v447 = v19;
  v28 = 0;
  v29 = xmmword_22F4559B0;
  do
  {
    v30 = &v18[v28];
    v31 = &v25[v28];
    v32 = &v18[v28 - 72];
    *(_QWORD *)&v18[v28 - 96] = v32;
    v33 = (void **)&v18[v28 - 96];
    *(_OWORD *)&v18[v28 - 88] = v29;
    if (v18 != v25)
    {
      v35 = v31 - 88;
      v34 = *((_QWORD *)v31 - 11);
      if (v34)
      {
        v36 = (void *)*((_QWORD *)v31 - 12);
        v37 = (uint64_t)&v25[v28 - 72];
        if ((void *)v37 != v36)
        {
          *v33 = v36;
          *((_QWORD *)v30 - 11) = v34;
          *((_QWORD *)v30 - 10) = *(_QWORD *)&v25[v28 - 80];
          *((_QWORD *)v31 - 12) = v37;
          *(_QWORD *)v35 = 0;
          *((_QWORD *)v31 - 10) = 0;
          goto LABEL_31;
        }
        if (v34 >= 5)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v48 = *(_QWORD *)v35;
          if (!*(_QWORD *)v35)
            goto LABEL_44;
          v36 = (void *)*((_QWORD *)v31 - 12);
          v32 = (char *)*v33;
        }
        else
        {
          v48 = *((_QWORD *)v31 - 11);
        }
        memcpy(v32, v36, 2 * v48);
LABEL_44:
        *((_QWORD *)v30 - 11) = v34;
        *(_QWORD *)v35 = 0;
        v29 = xmmword_22F4559B0;
      }
    }
LABEL_31:
    v38 = v30 - 40;
    *((_QWORD *)v30 - 8) = v30 - 40;
    *(_OWORD *)(v30 - 56) = v29;
    v40 = (unint64_t *)(v31 - 56);
    v39 = *((_QWORD *)v31 - 7);
    if (v39 && v30 != v31)
    {
      v41 = &v25[v28];
      v42 = *(const void **)&v25[v28 - 64];
      v43 = (uint64_t)&v25[v28 - 40];
      if ((const void *)v43 != v42)
      {
        *((_QWORD *)v30 - 8) = v42;
        *((_QWORD *)v30 - 7) = v39;
        *((_QWORD *)v30 - 6) = *(_QWORD *)&v25[v28 - 48];
        *((_QWORD *)v41 - 8) = v43;
        *v40 = 0;
        v40[1] = 0;
        goto LABEL_35;
      }
      if (v39 < 5)
      {
        v47 = v39;
        goto LABEL_39;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v47 = *v40;
      if (*v40)
      {
        v42 = (const void *)*((_QWORD *)v41 - 8);
        v38 = (char *)*((_QWORD *)v30 - 8);
LABEL_39:
        memcpy(v38, v42, 2 * v47);
      }
      *((_QWORD *)v30 - 7) = v39;
      *v40 = 0;
      v29 = xmmword_22F4559B0;
    }
LABEL_35:
    v44 = &v18[v28];
    v45 = &v25[v28];
    *((_QWORD *)v44 - 4) = *(_QWORD *)&v25[v28 - 32];
    *((_QWORD *)v45 - 4) = 0;
    *((_QWORD *)v44 - 3) = *(_QWORD *)&v25[v28 - 24];
    *((_QWORD *)v45 - 3) = 0;
    v46 = *(_QWORD *)&v25[v28 - 16];
    *(_QWORD *)(v44 - 11) = *(_QWORD *)&v25[v28 - 11];
    *((_QWORD *)v44 - 2) = v46;
    v28 -= 96;
  }
  while (&v25[v28] != v26);
  a1 = v446;
  v25 = *(char **)(v446 + 496);
  v60 = *(char **)(v446 + 504);
  *(_QWORD *)(v446 + 496) = &v18[v28];
  *(_QWORD *)(v446 + 504) = v447;
  *(_QWORD *)(v446 + 512) = v441;
  if (v60 == v25)
  {
    j = v430;
  }
  else
  {
    v61 = (uint64_t *)(v60 - 40);
    j = v430;
    do
    {
      v62 = v61[2];
      if (v62)
      {
        v63 = *(_DWORD *)(v62 + 68) - 1;
        *(_DWORD *)(v62 + 68) = v63;
        if (!v63)
          sub_22F3563E0(v62);
      }
      v64 = v61[1];
      if (v64)
      {
        v65 = *(_DWORD *)(v64 + 68) - 1;
        *(_DWORD *)(v64 + 68) = v65;
        if (!v65)
          sub_22F3563E0(v64);
      }
      v66 = (uint64_t *)*(v61 - 3);
      if (v61 != v66)
        free(v66);
      v67 = (uint64_t *)*(v61 - 7);
      if (v61 - 4 != v67)
        free(v67);
      v68 = v61 - 7;
      v61 -= 12;
    }
    while (v68 != (uint64_t *)v25);
  }
LABEL_84:
  if (v25)
    operator delete(v25);
LABEL_86:
  v69 = v496;
  if (v496)
  {
    v70 = *(_DWORD *)(v496 + 68) - 1;
    *(_DWORD *)(v496 + 68) = v70;
    if (!v70)
      sub_22F3563E0(v69);
  }
  v71 = v495;
  if (v495)
  {
    v72 = *(_DWORD *)(v495 + 68) - 1;
    *(_DWORD *)(v495 + 68) = v72;
    if (!v72)
      sub_22F3563E0(v71);
  }
  if (v492 != &v494)
    free(v492);
  v448 = (int64x2_t *)(a1 + 336);
  if (__s1 != &v491[16])
    free(__s1);
  v73 = v458;
  v74 = *(_DWORD *)(v418 + 24);
  v476[0] = v477;
  v476[1] = (void *)0x600000000;
  sub_22E47EDD0((uint64_t)v476, (v74 + 63) >> 6, 0);
  v477[12] = v74;
  *(_BYTE *)(*(_QWORD *)(a1 + 496) + 96 * *(unsigned int *)(*(_QWORD *)v418 + 48) + 92) = 1;
  v75 = *(_DWORD *)(v418 + 24);
  v473 = v475;
  v474 = 0x600000000;
  sub_22E47EDD0((uint64_t)&v473, (v75 + 63) >> 6, 0);
  v475[12] = v75;
  v76 = *(_QWORD *)(v73 + 16);
  v416 = v73;
  v426 = *(_QWORD *)(v73 + 8);
  if (v76 != v426)
  {
    v450 = (void **)(a1 + 424);
    do
    {
      v77 = *(uint64_t **)(v76 - 8);
      v432 = v76 - 8;
      v78 = *((unsigned int *)v77 + 12);
      v442 = *(_QWORD *)(a1 + 496);
      v79 = *((_QWORD *)v473 + (v78 >> 6));
      if ((v79 & (1 << v78)) == 0)
        *((_QWORD *)v473 + (v78 >> 6)) = v79 | (1 << v78);
      v81 = v77[7];
      v80 = v77[8];
      v434 = v77;
      v439 = v78;
      if (v81 != v80)
      {
        v82 = 0;
        v83 = (uint64_t *)(v442 + 96 * v78 + 64);
        v84 = 1;
        while (1)
        {
          if (!*(_QWORD *)v81
            || (v85 = *(unsigned int *)(*(_QWORD *)v81 + 48),
                ((*(_QWORD *)((char *)v473 + ((v85 >> 3) & 0x1FFFFFF8)) >> v85) & 1) == 0))
          {
            v82 = 1;
            goto LABEL_111;
          }
          v86 = *(_QWORD *)(a1 + 496);
          if ((v84 & 1) != 0)
          {
            v87 = *(_QWORD *)(v86 + 96 * v85 + 72);
            if (v87)
              ++*(_DWORD *)(v87 + 68);
            v88 = *v83;
            *v83 = v87;
            if (v88)
            {
              v89 = *(_DWORD *)(v88 + 68) - 1;
              *(_DWORD *)(v88 + 68) = v89;
              if (!v89)
                goto LABEL_171;
            }
            goto LABEL_109;
          }
          v88 = *v83;
          if (*v83)
            ++*(_DWORD *)(v88 + 68);
          v90 = *(_QWORD *)(v86 + 96 * v85 + 72);
          if (v90)
            ++*(_DWORD *)(v90 + 68);
          v419 = v82;
          if (v88)
            ++*(_DWORD *)(v88 + 68);
          v421 = v83;
          sub_22F356758(&__s1, v88);
          v91 = 0;
          v488 = 0u;
          v489 = 0u;
          v486 = 0u;
          v487 = 0u;
          v484 = 0u;
          v485 = 0u;
          v482 = 0u;
          v483 = 0u;
          v480 = 0u;
          v481 = 0u;
          __s2 = &v480;
          v479 = 0x1400000000;
          v92 = v88;
          v93 = *(unsigned int *)v491;
          while (1)
          {
            v94 = __s1;
            if (v93 == v91)
            {
              v95 = (__int128 *)__s2;
              if (!memcmp(__s1, __s2, 8 * v91))
                break;
            }
            v96 = v94[v93 - 1] & 0xFFFFFFFFFFFFFFFCLL;
            v97 = *(_QWORD *)(v96 + 48);
            if (v90)
            {
              v98 = v90;
              while (1)
              {
                v99 = *(_QWORD *)(v98 + 48);
                if (v97 == v99)
                  break;
                if (v97 >= v99)
                  v100 = 16;
                else
                  v100 = 8;
                v98 = *(_QWORD *)(v98 + v100);
                if (!v98)
                  goto LABEL_129;
              }
              if (*(_DWORD *)(v98 + 56) != *(_DWORD *)(v96 + 56))
              {
                if (v92)
                {
                  ++*(_DWORD *)(v92 + 68);
                  sub_22EF03880(&v470, (uint64_t)v448, v97, v92);
                  v106 = v470.i64[0];
                  v470.i64[0] = 0;
                  v109 = *(_DWORD *)(v92 + 68) - 1;
                  *(_DWORD *)(v92 + 68) = v109;
                  if (!v109)
                  {
                    sub_22F3563E0(v92);
                    v108 = v470.i64[0];
                    if (v470.i64[0])
                    {
                      v112 = *(_DWORD *)(v470.i64[0] + 68) - 1;
                      *(_DWORD *)(v470.i64[0] + 68) = v112;
                      if (!v112)
LABEL_139:
                        sub_22F3563E0(v108);
                    }
                  }
                  v107 = *(_DWORD *)(v92 + 68);
                  goto LABEL_144;
                }
                sub_22EF03880(&v470, (uint64_t)v448, v97, 0);
                v106 = v470.i64[0];
LABEL_146:
                v92 = v106;
                goto LABEL_147;
              }
            }
            else
            {
LABEL_129:
              if (v92)
              {
                v101 = *(_DWORD *)(v92 + 68);
                v470.i64[0] = *(_QWORD *)(v96 + 48);
                v102 = v101 + 2;
                v103 = v92;
                while (1)
                {
                  v104 = *(_QWORD *)(v103 + 48);
                  if (v97 == v104)
                    break;
                  if (v97 >= v104)
                    v105 = 16;
                  else
                    v105 = 8;
                  v103 = *(_QWORD *)(v103 + v105);
                  if (!v103)
                  {
                    v106 = v92;
                    goto LABEL_137;
                  }
                }
                *(_DWORD *)(v92 + 68) = v101 + 3;
                sub_22F3567F4((uint64_t *)&v467, (uint64_t)v448, (uint64_t *)v92, (unint64_t *)&v470);
                v106 = (uint64_t)v467;
                v467 = 0;
                v111 = *(_DWORD *)(v92 + 68) - 1;
                *(_DWORD *)(v92 + 68) = v111;
                if (!v111)
                {
                  sub_22F3563E0(v92);
                  v113 = v467;
                  if (v467)
                  {
                    v114 = *((_DWORD *)v467 + 17) - 1;
                    *((_DWORD *)v467 + 17) = v114;
                    if (!v114)
                      sub_22F3563E0((uint64_t)v113);
                  }
                }
                v102 = *(_DWORD *)(v92 + 68) - 1;
                *(_DWORD *)(v92 + 68) = v102;
                if (!v102)
                {
                  sub_22F3563E0(v92);
                  v102 = *(_DWORD *)(v92 + 68);
                }
LABEL_137:
                v107 = v102 - 1;
                *(_DWORD *)(v92 + 68) = v107;
                if (!v107)
                {
                  v108 = v92;
                  goto LABEL_139;
                }
LABEL_144:
                v110 = v107 - 1;
                *(_DWORD *)(v92 + 68) = v110;
                if (!v110)
                  sub_22F3563E0(v92);
                goto LABEL_146;
              }
            }
            do
            {
LABEL_147:
              sub_22EF03A24((uint64_t *)&__s1);
              v93 = *(unsigned int *)v491;
            }
            while (*(_DWORD *)v491 && (*((_QWORD *)__s1 + *(unsigned int *)v491 - 1) & 3) != 1);
            v91 = v479;
          }
          if (v95 != &v480)
          {
            free(v95);
            v94 = __s1;
          }
          if (v94 != (_QWORD *)&v491[8])
            free(v94);
          v83 = v421;
          v115 = *v421;
          *v421 = v92;
          if (v115)
          {
            v116 = *(_DWORD *)(v115 + 68) - 1;
            *(_DWORD *)(v115 + 68) = v116;
            if (!v116)
              sub_22F3563E0(v115);
          }
          a1 = v446;
          LODWORD(v78) = v439;
          if (v90)
          {
            v117 = *(_DWORD *)(v90 + 68) - 1;
            *(_DWORD *)(v90 + 68) = v117;
            if (!v117)
            {
              sub_22F3563E0(v90);
              if (!v88)
                goto LABEL_173;
LABEL_170:
              v118 = *(_DWORD *)(v88 + 68) - 1;
              *(_DWORD *)(v88 + 68) = v118;
              v77 = v434;
              v82 = v419;
              if (!v118)
              {
LABEL_171:
                v119 = v88;
                v120 = v82;
                sub_22F3563E0(v119);
                v82 = v120;
              }
LABEL_109:
              v84 = 0;
              goto LABEL_111;
            }
          }
          if (v88)
            goto LABEL_170;
LABEL_173:
          v84 = 0;
          v77 = v434;
          v82 = v419;
LABEL_111:
          v81 += 16;
          if (v81 == v80)
          {
            if ((v82 & 1) == 0)
              break;
            v422 = v83;
            v158 = *v83;
            if (*v83)
              ++*(_DWORD *)(v158 + 68);
            v159 = v77;
            sub_22F356758(&__s1, v158);
            v160 = 0;
            v161 = 0;
            v488 = 0u;
            v489 = 0u;
            v486 = 0u;
            v487 = 0u;
            v484 = 0u;
            v485 = 0u;
            v482 = 0u;
            v483 = 0u;
            v480 = 0u;
            v481 = 0u;
            __s2 = &v480;
            v479 = 0x1400000000;
            v162 = *(unsigned int *)v491;
LABEL_254:
            v163 = __s1;
            if (v162 == v160)
            {
              v164 = (__int128 *)__s2;
              if (!memcmp(__s1, __s2, 8 * v160))
              {
                if (v164 != &v480)
                {
                  free(v164);
                  v163 = __s1;
                }
                if (v163 != &v491[8])
                  free(v163);
                v178 = *v422;
                *v422 = (uint64_t)v161;
                v77 = v159;
                if (v178)
                {
                  v179 = *(_DWORD *)(v178 + 68) - 1;
                  *(_DWORD *)(v178 + 68) = v179;
                  if (!v179)
                    sub_22F3563E0(v178);
                }
                LODWORD(v78) = v439;
                if (v158)
                {
                  v180 = *(_DWORD *)(v158 + 68) - 1;
                  *(_DWORD *)(v158 + 68) = v180;
                  if (!v180)
                    sub_22F3563E0(v158);
                }
                break;
              }
            }
            v165 = *(_QWORD *)&v163[8 * v162 - 8] & 0xFFFFFFFFFFFFFFFCLL;
            v166 = *(_QWORD *)(v165 + 48);
            v167 = *(_DWORD *)(v165 + 56);
            if (v161)
            {
              v168 = (*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 5;
              v161[17] += 2;
              sub_22F356C4C((uint64_t *)&v467, (uint64_t)v448, v161, v166, v168);
              v169 = v161[17] - 1;
              v161[17] = v169;
              if (!v169)
              {
                sub_22F3563E0((uint64_t)v161);
                v169 = v161[17];
              }
              v470 = (int64x2_t)v166;
              v471 = v167;
              v472 = v161;
              v161[17] = v169 + 2;
            }
            else
            {
              sub_22F356C4C((uint64_t *)&v467, (uint64_t)v448, 0, v166, (*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 5);
              v470 = (int64x2_t)v166;
              v471 = v167;
              v472 = 0;
            }
            sub_22EF01568(v450, (__int128 *)v470.i8);
            v170 = (uint64_t)v472;
            if (v472 && (v171 = v472[17] - 1, (v472[17] = v171) == 0))
            {
              sub_22F3563E0(v170);
              if (!v161)
                goto LABEL_271;
LABEL_264:
              v172 = v161[17] - 1;
              v161[17] = v172;
              if (!v172)
              {
                sub_22F3563E0((uint64_t)v161);
                v172 = v161[17];
              }
              v173 = v467;
              v467 = 0;
              v174 = v172 - 1;
              v161[17] = v174;
              if (!v174)
              {
                sub_22F3563E0((uint64_t)v161);
                v176 = v467;
                if (v467)
                {
                  v177 = *((_DWORD *)v467 + 17) - 1;
                  *((_DWORD *)v467 + 17) = v177;
                  if (!v177)
                    sub_22F3563E0((uint64_t)v176);
                }
              }
              v175 = v161[17] - 1;
              v161[17] = v175;
              if (!v175)
                sub_22F3563E0((uint64_t)v161);
              v161 = v173;
            }
            else
            {
              if (v161)
                goto LABEL_264;
LABEL_271:
              v161 = v467;
            }
            do
            {
              sub_22EF03A24((uint64_t *)&__s1);
              v162 = *(unsigned int *)v491;
            }
            while (*(_DWORD *)v491 && (*((_QWORD *)__s1 + *(unsigned int *)v491 - 1) & 3) != 1);
            v160 = v479;
            goto LABEL_254;
          }
        }
      }
      v121 = v442 + 96 * v78;
      v124 = *(_QWORD *)(v121 + 64);
      v123 = (uint64_t *)(v121 + 64);
      v122 = v124;
      if (v124)
      {
        ++*(_DWORD *)(v122 + 68);
        sub_22EF03754(v448, 0, v122);
        v125 = *(_DWORD *)(v122 + 68) - 1;
        *(_DWORD *)(v122 + 68) = v125;
        if (!v125)
          sub_22F3563E0(v122);
      }
      else
      {
        sub_22EF03754(v448, 0, 0);
      }
      *(_DWORD *)(v442 + 96 * v439 + 88) = ((*(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448)) >> 4) - 1;
      v126 = *v123;
      if (*v123)
      {
        v127 = *(_DWORD *)(v126 + 68);
        v470.i64[0] = (uint64_t)v448;
        v470.i64[1] = v126;
        *(_DWORD *)(v126 + 68) = v127 + 1;
        if (v127 == -1)
          sub_22F3563E0(v126);
      }
      else
      {
        v470 = (int64x2_t)(unint64_t)v448;
      }
      v130 = v77;
      v129 = *v77;
      v128 = v130[1];
      if (v128 != v129)
      {
        do
        {
          v132 = *(_QWORD *)(v128 - 16);
          v128 -= 16;
          v131 = v132;
          if ((v132 & 3 | (4 * (*(_DWORD *)(v128 + 8) & 3u))) == 6)
          {
            v133 = (_DWORD *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
            v278 = (v131 & 0xFFFFFFFFFFFFFFFCLL) == 0;
            v134 = *(unsigned __int8 *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
            if (!v278 && (v134 & 0xFE) == 0x70)
            {
              switch((*v133 >> 18) & 0x3F)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                  sub_22EF03FB4(&v470, (uint64_t)v133);
                  continue;
                default:
                  goto LABEL_191;
              }
            }
            if (!v133 || v134 != 233)
LABEL_191:
              __asm { BR              X9 }
          }
        }
        while (v128 != v129);
        v126 = v470.i64[1];
      }
      if (v126)
        ++*(_DWORD *)(v126 + 68);
      v135 = (uint64_t *)(v442 + 96 * v439 + 72);
      v136 = *v135;
      *v135 = v126;
      if (v136)
      {
        v137 = *(_DWORD *)(v136 + 68) - 1;
        *(_DWORD *)(v136 + 68) = v137;
        if (!v137)
          sub_22F3563E0(v136);
      }
      v138 = v434[10];
      v139 = v434[11];
      while (v138 != v139)
      {
        if (!*(_QWORD *)v138)
          goto LABEL_203;
        v140 = *(unsigned int *)(*(_QWORD *)v138 + 48);
        if (((*(_QWORD *)((char *)v473 + ((v140 >> 3) & 0x1FFFFFF8)) >> v140) & 1) == 0)
          goto LABEL_203;
        v141 = *(_QWORD *)(*(_QWORD *)(a1 + 496) + 96 * v140 + 64);
        if (v141)
          ++*(_DWORD *)(v141 + 68);
        v142 = *v135;
        if (*v135)
        {
          ++*(_DWORD *)(v142 + 68);
          if (v141)
          {
LABEL_242:
            ++*(_DWORD *)(v141 + 68);
            if (!v142)
              goto LABEL_210;
LABEL_209:
            ++*(_DWORD *)(v142 + 68);
            goto LABEL_210;
          }
        }
        else if (v141)
        {
          goto LABEL_242;
        }
        if (v142)
          goto LABEL_209;
LABEL_210:
        v443 = v135;
        sub_22F356758(&__s1, v141);
        v143 = 0;
        v488 = 0u;
        v489 = 0u;
        v486 = 0u;
        v487 = 0u;
        v484 = 0u;
        v485 = 0u;
        v482 = 0u;
        v483 = 0u;
        v480 = 0u;
        v481 = 0u;
        __s2 = &v480;
        v479 = 0x1400000000;
        v144 = *(unsigned int *)v491;
        while (1)
        {
          v145 = __s1;
          if (v144 == v143)
          {
            v146 = (__int128 *)__s2;
            if (!memcmp(__s1, __s2, 8 * v143))
              break;
          }
          v147 = v145[v144 - 1] & 0xFFFFFFFFFFFFFFFCLL;
          v148 = *(unsigned int *)(v147 + 56);
          if (!v142)
            goto LABEL_222;
          v149 = *(_QWORD *)(v147 + 48);
          v150 = v142;
          while (1)
          {
            v151 = *(_QWORD *)(v150 + 48);
            if (v149 == v151)
              break;
            if (v149 >= v151)
              v152 = 16;
            else
              v152 = 8;
            v150 = *(_QWORD *)(v150 + v152);
            if (!v150)
              goto LABEL_222;
          }
          if (*(_DWORD *)(v150 + 56) != (_DWORD)v148)
LABEL_222:
            *((_DWORD *)*v450 + 8 * v148 + 4) = 0;
          do
          {
            sub_22EF03A24((uint64_t *)&__s1);
            v144 = *(unsigned int *)v491;
          }
          while (*(_DWORD *)v491 && (*((_QWORD *)__s1 + *(unsigned int *)v491 - 1) & 3) != 1);
          v143 = v479;
        }
        if (v146 != &v480)
        {
          free(v146);
          v145 = __s1;
        }
        if (v145 != (_QWORD *)&v491[8])
          free(v145);
        a1 = v446;
        if (v142)
        {
          v153 = *(_DWORD *)(v142 + 68) - 1;
          *(_DWORD *)(v142 + 68) = v153;
          if (!v153)
            sub_22F3563E0(v142);
        }
        v135 = v443;
        if (v141 && (v154 = *(_DWORD *)(v141 + 68) - 1, (*(_DWORD *)(v141 + 68) = v154) == 0))
        {
          sub_22F3563E0(v141);
          if (v142)
          {
LABEL_236:
            v155 = *(_DWORD *)(v142 + 68) - 1;
            *(_DWORD *)(v142 + 68) = v155;
            if (!v155)
              sub_22F3563E0(v142);
          }
        }
        else if (v142)
        {
          goto LABEL_236;
        }
        if (v141)
        {
          v156 = *(_DWORD *)(v141 + 68) - 1;
          *(_DWORD *)(v141 + 68) = v156;
          if (!v156)
            sub_22F3563E0(v141);
        }
LABEL_203:
        v138 += 16;
      }
      if (v126)
      {
        v157 = *(_DWORD *)(v126 + 68) - 1;
        *(_DWORD *)(v126 + 68) = v157;
        if (!v157)
          sub_22F3563E0(v126);
      }
      v76 = v432;
      j = v430;
    }
    while (v432 != v426);
  }
  v181 = *(_QWORD *)(*(_QWORD *)(a1 + 496) + 96 * *(unsigned int *)(*(_QWORD *)(v418 + 8) + 48) + 72);
  if (v181)
  {
    ++*(_DWORD *)(v181 + 68);
    sub_22EF03754(v448, 0, v181);
    v182 = *(_DWORD *)(v181 + 68) - 1;
    *(_DWORD *)(v181 + 68) = v182;
    if (!v182)
      sub_22F3563E0(v181);
  }
  else
  {
    sub_22EF03754(v448, 0, 0);
  }
  if (v473 != v475)
    free(v473);
  v183 = *(_QWORD *)(v416 + 16);
  v440 = *(_QWORD *)(v416 + 8);
  if (v183 != v440)
  {
    v184 = *(_QWORD *)(a1 + 496);
    v185 = *(_QWORD *)(v416 + 16);
    do
    {
      v187 = *(_QWORD *)(v185 - 8);
      v185 -= 8;
      v186 = (uint64_t *)v187;
      v188 = *(_DWORD *)(v187 + 48);
      v189 = *(_QWORD *)(v187 + 32) & 0xFFFFFFFFFFFFFFF8;
      if (v189)
      {
        sub_22F0D5A50(v189);
        *(int32x2_t *)(v184 + 96 * v188 + 80) = vdup_n_s32(v190);
      }
      else
      {
        for (i = *v186; i != v186[1]; i += 16)
        {
          if ((*(_QWORD *)i & 3 | (4 * (*(_DWORD *)(i + 8) & 3u))) - 9 >= 0xFFFFFFFD)
          {
            sub_22F0D5A50(*(_QWORD *)i & 0xFFFFFFFFFFFFFFFCLL);
            *(_DWORD *)(v184 + 96 * v188 + 84) = v203;
            break;
          }
        }
      }
      v191 = v184 + 96 * v188;
      v193 = *(_DWORD *)(v191 + 84);
      v192 = (_DWORD *)(v191 + 84);
      if (v193)
      {
        v194 = v186[1];
        while (v194 != *v186)
        {
          v196 = *(_QWORD *)(v194 - 16);
          v194 -= 16;
          v195 = v196;
          if ((unint64_t)((v196 & 3 | (4 * (*(_DWORD *)(v194 + 8) & 3u))) - 9) >= 0xFFFFFFFD)
          {
            sub_22F0D5A50(v195 & 0xFFFFFFFFFFFFFFFCLL);
            goto LABEL_315;
          }
        }
      }
      else
      {
        v199 = (uint64_t *)v186[7];
        if (((v186[8] - (_QWORD)v199) & 0xFFFFFFFF0) == 0x10)
        {
          v200 = *v199;
          if (v200)
          {
            if (v186 != *(uint64_t **)(v418 + 8))
            {
              v197 = *(_DWORD *)(v184 + 96 * *(unsigned int *)(v200 + 48) + 84);
              goto LABEL_314;
            }
          }
        }
        v201 = (uint64_t *)v186[10];
        if (((v186[11] - (_QWORD)v201) & 0xFFFFFFFF0) == 0x10)
        {
          v202 = *v201;
          if (v202)
          {
            v197 = *(_DWORD *)(v184 + 96 * *(unsigned int *)(v202 + 48) + 80);
LABEL_314:
            *v192 = v197;
LABEL_315:
            *(_DWORD *)(v184 + 96 * v188 + 80) = v197;
          }
        }
      }
    }
    while (v185 != v440);
  }
  v473 = v475;
  v474 = 0x400000000;
  v470.i64[0] = (uint64_t)&v471;
  v470.i64[1] = 0x400000000;
  v467 = v469;
  v468 = 0x400000000;
  v204 = v412;
  if (v183 != v440)
  {
    if ((*(_BYTE *)(j + 29) & 1) != 0)
    {
      v205 = *(_DWORD *)(*(_QWORD *)(v183 - 8) + 48);
      v206 = *(_QWORD *)(a1 + 496);
      v207 = &v491[8];
      __s1 = &v491[8];
      *(_QWORD *)v491 = 0x400000000;
      __s2 = &v480;
      v479 = 0x400000000;
      LODWORD(v208) = *(_DWORD *)(j + 24);
      sub_22EFC8E88(j);
      v210 = *v209;
      if ((*(_BYTE *)(j + 29) & 1) != 0)
      {
        sub_22EFC8E88(j);
        v212 = *(_QWORD *)v211 + 8 * *(unsigned int *)(v211 + 8);
      }
      else
      {
        v212 = 0;
      }
      if (v210 != (uint64_t *)v212)
      {
        v213 = 5;
        v214 = "mutex";
        while (1)
        {
          v215 = *v210;
          v208 = *(_QWORD *)(*v210 + 16);
          v216 = *(unsigned __int16 *)(*v210 + 32);
          if (*v210)
          {
            if (v216 == 296)
              break;
          }
          if (v215 && v216 == 294)
          {
            if (!*(_DWORD *)(v215 + 36))
              goto LABEL_351;
            if (sub_22F27A238(*v210))
              p_s2 = &__s2;
            else
              p_s2 = &__s1;
            sub_22EF01924(v446, (uint64_t)p_s2, v215, 0, v430, 0);
            sub_22EF01924(v446, (uint64_t)&v467, v215, 0, v430, 0);
            v218 = sub_22EF01AA8(*(_DWORD *)(v215 + 36), *(unsigned __int8 ***)(v215 + 40));
            goto LABEL_348;
          }
          if (v215 && v216 == 93)
          {
            if (!*(_DWORD *)(v215 + 36))
              goto LABEL_351;
            if (sub_22F3566A4(*v210))
              p_s1 = (void **)&v470;
            else
              p_s1 = &v473;
            goto LABEL_347;
          }
          v221 = *(unsigned __int16 *)(*v210 + 32);
          if (v221 == 173 || v221 == 309 || v221 == 333)
          {
LABEL_351:
            if (__s2 != &v480)
              free(__s2);
LABEL_642:
            if (__s1 != v207)
              free(__s1);
            goto LABEL_644;
          }
LABEL_349:
          if (++v210 == (uint64_t *)v212)
            goto LABEL_354;
        }
        if (sub_22F3565C0(*v210))
          p_s1 = &__s2;
        else
          p_s1 = &__s1;
LABEL_347:
        sub_22EF01924(v446, (uint64_t)p_s1, v215, 0, v430, 0);
        v218 = sub_22EF01AA8(*(_DWORD *)(v215 + 36), *(unsigned __int8 ***)(v215 + 40));
LABEL_348:
        v214 = v218;
        v213 = v219;
        goto LABEL_349;
      }
      v214 = "mutex";
      v213 = 5;
LABEL_354:
      v222 = (unsigned __int16 **)(v206 + 96 * v205);
      if (*(_DWORD *)v491)
      {
        v223 = __s1;
        v224 = 16 * *(unsigned int *)v491;
        do
        {
          v225 = operator new();
          *(_OWORD *)(v225 + 8) = *v223;
          *(_WORD *)(v225 + 17) = 513;
          *(_DWORD *)(v225 + 20) = v208;
          *(_QWORD *)v225 = &off_24FAB9EF0;
          v455 = v225;
          sub_22EF01B38((char **)v446, v222, &v455, (uint64_t)v214, v213, 1);
          v226 = v455;
          v455 = 0;
          if (v226)
            (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
          ++v223;
          v224 -= 16;
        }
        while (v224);
      }
      v227 = (__int128 *)__s2;
      if ((_DWORD)v479)
      {
        v228 = 16 * v479;
        do
        {
          v229 = operator new();
          *(_OWORD *)(v229 + 8) = *v227;
          *(_WORD *)(v229 + 17) = 512;
          *(_DWORD *)(v229 + 20) = v208;
          *(_QWORD *)v229 = &off_24FAB9EF0;
          v454 = v229;
          sub_22EF01B38((char **)v446, v222, &v454, (uint64_t)v214, v213, 1);
          v230 = v454;
          v454 = 0;
          if (v230)
            (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
          ++v227;
          v228 -= 16;
        }
        while (v228);
        v227 = (__int128 *)__s2;
      }
      a1 = v446;
      j = v430;
      if (v227 != &v480)
        free(v227);
      v204 = v412;
      if (__s1 != &v491[8])
        free(__s1);
      v183 = *(_QWORD *)(v416 + 16);
      v440 = *(_QWORD *)(v416 + 8);
    }
    if (v183 != v440)
    {
      v451 = (uint64_t *)(a1 + 104);
      while (1)
      {
        v231 = *(uint64_t **)(v183 - 8);
        v431 = v183 - 8;
        v232 = *((unsigned int *)v231 + 12);
        v233 = *(_QWORD *)(a1 + 496);
        v234 = *((_QWORD *)v476[0] + (v232 >> 6));
        if ((v234 & (1 << v232)) == 0)
          *((_QWORD *)v476[0] + (v232 >> 6)) = v234 | (1 << v232);
        v433 = v233;
        v235 = (_QWORD *)(v233 + 96 * v232);
        v237 = (uint64_t *)v231[7];
        v236 = (uint64_t *)v231[8];
        v438 = v232;
        if (v237 != v236)
        {
          v238 = 0;
          v239 = v233 + 96 * v232;
          v240 = (_BYTE *)(v239 + 92);
          v241 = (unsigned int *)(v239 + 80);
          while (1)
          {
            v242 = *v237;
            if (*v237)
            {
              v243 = *(unsigned int *)(v242 + 48);
              if (((*(_QWORD *)((char *)v476[0] + ((v243 >> 3) & 0x1FFFFFF8)) >> v243) & 1) != 0
                && (*(_BYTE *)(v242 + 104) & 1) == 0)
              {
                v244 = *(_QWORD *)(a1 + 496);
                v245 = *(_QWORD *)v242;
                if (*(_QWORD *)v242 == *(_QWORD *)(v242 + 8)
                  || (*(_QWORD *)v245 & 3 | (4 * (*(_DWORD *)(v245 + 8) & 3u))) - 6 > 2
                  || *(unsigned __int8 *)(*(_QWORD *)v245 & 0xFFFFFFFFFFFFFFFCLL) != 134)
                {
                  if (*(_BYTE *)(v244 + 96 * v243 + 92))
                    break;
                }
              }
            }
LABEL_383:
            v237 += 2;
            if (v237 == v236)
              goto LABEL_530;
          }
          v414 = v238;
          v420 = v241;
          v415 = v240;
          v417 = v236;
          v444 = v231;
          *v240 = 1;
          v464 = &v466;
          v465 = xmmword_22F4559B0;
          sub_22F2F3E84((uint64_t)&v464, v244 + 96 * v243 + 32);
          v246 = sub_22EED4398(v242, 1);
          if (!v246 || *(_BYTE *)(*(_QWORD *)(v242 + 32) & 0xFFFFFFFFFFFFFFF8) == 103)
          {
LABEL_519:
            if ((v414 & 1) != 0)
            {
              v354 = *(_QWORD *)(*v237 + 32) & 0xFFFFFFFFFFFFFFF8;
              if (v354)
                LODWORD(v354) = *(unsigned __int8 *)v354 == 9;
              sub_22EF03330(a1, v235, (uint64_t)&v464, *v420, v354 ^ 1, v354 ^ 1);
            }
            else
            {
              sub_22F2F3E84((uint64_t)v235, (uint64_t)&v464);
            }
            if (v464 != &v466)
              free(v464);
            v238 = 1;
            v231 = v444;
            v240 = v415;
            v236 = v417;
            v241 = v420;
            goto LABEL_383;
          }
          v461 = 0;
          v247 = *(_QWORD *)(*(_QWORD *)(a1 + 496) + 96 * *(unsigned int *)(v242 + 48) + 72);
          v460 = v247;
          if (v247)
            ++*(_DWORD *)(v247 + 68);
          v248 = sub_22EF06110(a1, v246, &v460, &v461);
          v249 = v460;
          if (v460 && (v250 = *(_DWORD *)(v460 + 68) - 1, (*(_DWORD *)(v460 + 68) = v250) == 0))
          {
            sub_22F3563E0(v249);
            if (v248)
              goto LABEL_392;
          }
          else if (v248)
          {
LABEL_392:
            v251 = sub_22EFFA604(*(unsigned __int8 **)((char *)v248 + *((unsigned __int8 *)v248 + 3)));
            if (v251)
            {
              v252 = v251;
              if ((*(_DWORD *)(v251 + 28) & 0x100) != 0 && (*(_DWORD *)(v251 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
              {
                __s1 = &v491[8];
                *(_QWORD *)v491 = 0x400000000;
                __s2 = &v480;
                v479 = 0x400000000;
                sub_22EFC8E88(v251);
                v254 = *v253;
                if ((*(_BYTE *)(v252 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(v252);
                  v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
                }
                else
                {
                  v256 = 0;
                }
                if (v254 != (uint64_t *)v256)
                {
                  v257 = 5;
                  v258 = "mutex";
                  v409 = v256;
                  v410 = v235;
                  while (1)
                  {
                    v259 = *v254;
                    v260 = *(unsigned __int16 *)(*v254 + 32);
                    v449 = *v254;
                    if (v260 == 173)
                      break;
                    if (v260 == 309)
                    {
                      v271 = *(unsigned __int8 **)(v259 + 40);
                      v272 = v461;
                      v413 = v254;
                      if (!v271)
                        goto LABEL_415;
                      v273 = *v271;
                      if (v273 == 117)
                      {
                        v274 = (v271[2] >> 2) & 1;
                      }
                      else if (v273 == 181)
                      {
                        sub_22F257F94((uint64_t)(v271 + 16), (llvm::APInt *)&v462);
                        v341 = v463;
                        if (v463 > 0x40)
                        {
                          v274 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v462) != v341;
                          if (v462)
                            MEMORY[0x2348A0E84](v462, 0x1000C8000313F17);
                        }
                        else
                        {
                          v274 = v462 != 0;
                        }
                      }
                      else
                      {
LABEL_415:
                        v274 = 0;
                      }
                      v296 = *(uint64_t ***)(v242 + 80);
                      v428 = *(uint64_t ***)(v242 + 88);
                      if (v296 != v428)
                      {
                        v297 = 0;
                        v424 = (v272 == 0) ^ v274;
                        v298 = 1;
                        do
                        {
                          v437 = v298;
                          if (*v296 == v444 && v297 == v424)
                          {
                            v300 = *(unsigned int *)(v449 + 48);
                            if ((_DWORD)v300)
                            {
                              v301 = *(unsigned __int8 ***)(v449 + 56);
                              v302 = 8 * v300;
                              do
                              {
                                v303 = sub_22EF082F0(v451, *v301, v252, v248, 0);
                                v462 = v303;
                                v463 = v304;
                                if (v303)
                                {
                                  if (*v303 == 1)
                                  {
                                    v305 = *(_QWORD *)(v446 + 320);
                                    v306 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                    v308 = v307;
                                    sub_22EFF605C((uint64_t)v248);
                                    if (v309)
                                      (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v305 + 16))(v305, v306, v308, v309);
                                  }
                                  else
                                  {
                                    sub_22EF04294((uint64_t)&__s2, &v462);
                                  }
                                }
                                ++v301;
                                v302 -= 8;
                              }
                              while (v302);
                            }
                            else
                            {
                              v310 = sub_22EF082F0(v451, 0, v252, v248, 0);
                              v462 = v310;
                              v463 = v311;
                              if (v310)
                              {
                                if (*v310 == 1)
                                {
                                  v312 = *(_QWORD *)(v446 + 320);
                                  v313 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                  v315 = v314;
                                  sub_22EFF605C((uint64_t)v248);
                                  if (v316)
                                    (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v312 + 16))(v312, v313, v315, v316);
                                }
                                else
                                {
                                  sub_22EF04294((uint64_t)&__s2, &v462);
                                }
                              }
                            }
                          }
                          v296 += 2;
                          v297 = 1;
                          v298 = 0;
                        }
                        while ((v437 & (v296 != v428)) != 0);
                      }
                      goto LABEL_463;
                    }
                    if (v260 == 333)
                    {
                      v261 = sub_22F27A238(v259);
                      v262 = &__s1;
                      if (v261)
                        v262 = &__s2;
                      v435 = (uint64_t)v262;
                      v263 = *(unsigned __int8 **)(v259 + 40);
                      v264 = v461;
                      v413 = v254;
                      if (v263)
                      {
                        v265 = *v263;
                        if (v265 == 117)
                        {
                          v266 = (v263[2] >> 2) & 1;
                        }
                        else
                        {
                          if (v265 != 181)
                            goto LABEL_407;
                          sub_22F257F94((uint64_t)(v263 + 16), (llvm::APInt *)&v462);
                          v342 = v463;
                          if (v463 > 0x40)
                          {
                            v266 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v462) != v342;
                            if (v462)
                              MEMORY[0x2348A0E84](v462, 0x1000C8000313F17);
                          }
                          else
                          {
                            v266 = v462 != 0;
                          }
                        }
                      }
                      else
                      {
LABEL_407:
                        v266 = 0;
                      }
                      v318 = *(_QWORD **)(v242 + 80);
                      v425 = *(_QWORD **)(v242 + 88);
                      if (v318 != v425)
                      {
                        v319 = 0;
                        v408 = (v264 == 0) ^ v266;
                        v320 = 1;
                        do
                        {
                          v429 = v318;
                          if ((uint64_t *)*v318 == v444 && v319 == v408)
                          {
                            v322 = *(unsigned int *)(v449 + 48);
                            if ((_DWORD)v322)
                            {
                              v323 = *(unsigned __int8 ***)(v449 + 56);
                              v324 = 8 * v322;
                              do
                              {
                                v325 = sub_22EF082F0(v451, *v323, v252, v248, 0);
                                v462 = v325;
                                v463 = v326;
                                if (v325)
                                {
                                  if (*v325 == 1)
                                  {
                                    v327 = *(_QWORD *)(v446 + 320);
                                    v328 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                    v330 = v329;
                                    sub_22EFF605C((uint64_t)v248);
                                    if (v331)
                                      (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v327 + 16))(v327, v328, v330, v331);
                                  }
                                  else
                                  {
                                    sub_22EF04294(v435, &v462);
                                  }
                                }
                                ++v323;
                                v324 -= 8;
                              }
                              while (v324);
                            }
                            else
                            {
                              v333 = sub_22EF082F0(v451, 0, v252, v248, 0);
                              v462 = v333;
                              v463 = v334;
                              if (v333)
                              {
                                if (*v333 == 1)
                                {
                                  v335 = *(_QWORD *)(v446 + 320);
                                  v336 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                  v338 = v337;
                                  sub_22EFF605C((uint64_t)v248);
                                  if (v339)
                                    (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v335 + 16))(v335, v336, v338, v339);
                                }
                                else
                                {
                                  sub_22EF04294(v435, &v462);
                                }
                              }
                            }
                          }
                          v318 = v429 + 2;
                          v332 = v320 & (v429 + 2 != v425);
                          v319 = 1;
                          v320 = 0;
                        }
                        while ((v332 & 1) != 0);
                      }
LABEL_463:
                      v258 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                      v257 = v317;
                      v256 = v409;
                      v235 = v410;
                      v254 = v413;
                    }
                    if (++v254 == (uint64_t *)v256)
                      goto LABEL_503;
                  }
                  v267 = *(unsigned __int8 **)(v259 + 40);
                  v268 = v461;
                  v413 = v254;
                  if (v267)
                  {
                    v269 = *v267;
                    if (v269 == 117)
                    {
                      v270 = (v267[2] >> 2) & 1;
LABEL_417:
                      v275 = *(uint64_t ***)(v242 + 80);
                      v427 = *(uint64_t ***)(v242 + 88);
                      if (v275 != v427)
                      {
                        v276 = 0;
                        v423 = (v268 == 0) ^ v270;
                        v277 = 1;
                        do
                        {
                          v436 = v277;
                          v278 = *v275 == v444 && v276 == v423;
                          if (v278)
                          {
                            v279 = *(unsigned int *)(v449 + 48);
                            if ((_DWORD)v279)
                            {
                              v280 = *(unsigned __int8 ***)(v449 + 56);
                              v281 = 8 * v279;
                              do
                              {
                                v282 = sub_22EF082F0(v451, *v280, v252, v248, 0);
                                v462 = v282;
                                v463 = v283;
                                if (v282)
                                {
                                  if (*v282 == 1)
                                  {
                                    v284 = *(_QWORD *)(v446 + 320);
                                    v285 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                    v287 = v286;
                                    sub_22EFF605C((uint64_t)v248);
                                    if (v288)
                                      (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v284 + 16))(v284, v285, v287, v288);
                                  }
                                  else
                                  {
                                    sub_22EF04294((uint64_t)&__s1, &v462);
                                  }
                                }
                                ++v280;
                                v281 -= 8;
                              }
                              while (v281);
                            }
                            else
                            {
                              v289 = sub_22EF082F0(v451, 0, v252, v248, 0);
                              v462 = v289;
                              v463 = v290;
                              if (v289)
                              {
                                if (*v289 == 1)
                                {
                                  v291 = *(_QWORD *)(v446 + 320);
                                  v292 = sub_22EF01AA8(*(_DWORD *)(v449 + 48), *(unsigned __int8 ***)(v449 + 56));
                                  v294 = v293;
                                  sub_22EFF605C((uint64_t)v248);
                                  if (v295)
                                    (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v291 + 16))(v291, v292, v294, v295);
                                }
                                else
                                {
                                  sub_22EF04294((uint64_t)&__s1, &v462);
                                }
                              }
                            }
                          }
                          v275 += 2;
                          v276 = 1;
                          v277 = 0;
                        }
                        while ((v436 & (v275 != v427)) != 0);
                      }
                      goto LABEL_463;
                    }
                    if (v269 == 181)
                    {
                      sub_22F257F94((uint64_t)(v267 + 16), (llvm::APInt *)&v462);
                      v340 = v463;
                      if (v463 > 0x40)
                      {
                        v270 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v462) != v340;
                        if (v462)
                          MEMORY[0x2348A0E84](v462, 0x1000C8000313F17);
                      }
                      else
                      {
                        v270 = v462 != 0;
                      }
                      goto LABEL_417;
                    }
                  }
                  v270 = 0;
                  goto LABEL_417;
                }
                v258 = "mutex";
                v257 = 5;
LABEL_503:
                v343 = v235;
                sub_22EFF605C((uint64_t)v248);
                v345 = v344;
                if (*(_DWORD *)v491)
                {
                  v346 = __s1;
                  v347 = 16 * *(unsigned int *)v491;
                  do
                  {
                    v348 = operator new();
                    *(_OWORD *)(v348 + 8) = *v346;
                    *(_WORD *)(v348 + 17) = 1;
                    *(_DWORD *)(v348 + 20) = v345;
                    *(_QWORD *)v348 = &off_24FAB9EF0;
                    v462 = (unsigned __int8 *)v348;
                    sub_22EF01B38((char **)v446, (unsigned __int16 **)&v464, (uint64_t *)&v462, (uint64_t)v258, v257, 0);
                    v349 = v462;
                    v462 = 0;
                    if (v349)
                      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v349 + 8))(v349);
                    ++v346;
                    v347 -= 16;
                  }
                  while (v347);
                }
                v350 = (__int128 *)__s2;
                if ((_DWORD)v479)
                {
                  v351 = 16 * v479;
                  do
                  {
                    v352 = operator new();
                    *(_OWORD *)(v352 + 8) = *v350;
                    *(_WORD *)(v352 + 17) = 0;
                    *(_DWORD *)(v352 + 20) = v345;
                    *(_QWORD *)v352 = &off_24FAB9EF0;
                    v459 = v352;
                    sub_22EF01B38((char **)v446, (unsigned __int16 **)&v464, &v459, (uint64_t)v258, v257, 0);
                    v353 = v459;
                    v459 = 0;
                    if (v353)
                      (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
                    ++v350;
                    v351 -= 16;
                  }
                  while (v351);
                  v350 = (__int128 *)__s2;
                }
                v204 = v412;
                LODWORD(v232) = v438;
                v235 = v343;
                if (v350 != &v480)
                  free(v350);
                if (__s1 != &v491[8])
                  free(__s1);
              }
            }
          }
          a1 = v446;
          j = v430;
          goto LABEL_519;
        }
LABEL_530:
        v183 = v431;
        if (*(_BYTE *)(v433 + 96 * v232 + 92))
          break;
LABEL_531:
        if (v183 == v440)
          goto LABEL_625;
      }
      __s1 = (void *)a1;
      *(_QWORD *)v491 = &v492;
      *(_OWORD *)&v491[8] = xmmword_22F4559B0;
      if (v235[1])
      {
        v355 = (uint64_t)v235;
        v356 = v231;
        sub_22F2F3E84((uint64_t)v491, v355);
        v231 = v356;
      }
      v357 = *(_QWORD *)(v433 + 96 * v232 + 64);
      *(_QWORD *)&v493 = v357;
      if (v357)
        ++*(_DWORD *)(v357 + 68);
      DWORD2(v493) = *(_DWORD *)(v433 + 96 * v232 + 88);
      v359 = *v231;
      v358 = v231[1];
      v445 = v231;
      while (2)
      {
        while (2)
        {
          while (2)
          {
            if (v358 == v359)
            {
              sub_22F2F3E84(v433 + 96 * v232 + 32, (uint64_t)v491);
              a1 = v446;
              v388 = v445[10];
              v389 = v445[11];
              for (j = v430; v388 != v389; v388 += 16)
              {
                if (*(_QWORD *)v388)
                {
                  v390 = *(unsigned int *)(*(_QWORD *)v388 + 48);
                  if (((*(_QWORD *)((char *)v476[0] + ((v390 >> 3) & 0x1FFFFFF8)) >> v390) & 1) != 0)
                    sub_22EF03330(v446, (_QWORD *)(*(_QWORD *)(v446 + 496) + 96 * v390), *(_QWORD *)(v446 + 496) + 96 * v232 + 32, *(_DWORD *)(*(_QWORD *)(v446 + 496) + 96 * v390 + 80), 0, 0);
                }
              }
              v391 = v493;
              if ((_QWORD)v493)
              {
                v392 = *(_DWORD *)(v493 + 68) - 1;
                *(_DWORD *)(v493 + 68) = v392;
                if (!v392)
                  sub_22F3563E0(v391);
              }
              if (*(void ***)v491 != &v492)
                free(*(void **)v491);
              goto LABEL_531;
            }
            v360 = *(_QWORD *)(v358 - 16);
            v361 = *(_QWORD *)(v358 - 8);
            v358 -= 16;
            v362 = v360 & 3 | (4 * (v361 & 3));
            if (v362 != 9)
            {
              if (v362 == 6)
              {
                v363 = v360 & 0xFFFFFFFFFFFFFFFCLL;
                v278 = (v360 & 0xFFFFFFFFFFFFFFFCLL) == 0;
                v364 = *(unsigned __int8 *)(v360 & 0xFFFFFFFFFFFFFFFCLL);
                if (!v278 && (v364 & 0xFE) == 0x70)
                {
                  switch((*(_DWORD *)v363 >> 18) & 0x3F)
                  {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0xB:
                    case 0xC:
                    case 0xD:
                    case 0xE:
                    case 0xF:
                    case 0x10:
                    case 0x11:
                    case 0x12:
                    case 0x13:
                    case 0x14:
                    case 0x15:
                    case 0x16:
                    case 0x17:
                    case 0x18:
                    case 0x19:
                    case 0x1A:
                    case 0x1B:
                    case 0x1C:
                    case 0x1D:
                    case 0x1E:
                    case 0x1F:
                    case 0x20:
                      sub_22EF06720((uint64_t)&__s1, v363);
                      continue;
                    default:
                      goto LABEL_604;
                  }
                }
                if (!v363 || v364 != 233)
LABEL_604:
                  __asm { BR              X9 }
                if ((*(_DWORD *)v363 & 0x700000) == 0)
                  sub_22EF06B10((uint64_t *)&__s1, *(unsigned __int8 **)(v363 + 16), 1, 1);
              }
              continue;
            }
            break;
          }
          v464 = (void *)v360;
          *(_QWORD *)&v465 = v361;
          v365 = *(_QWORD *)(v204 + 8);
          if (!v365 || (*(_DWORD *)(v365 + 28) & 0x7F) != 0x53)
          {
            while (2)
            {
              v366 = *(_QWORD *)(v365 + 16);
              v367 = v366 & 0xFFFFFFFFFFFFFFF8;
              if ((v366 & 4) != 0)
                v367 = *(_QWORD *)v367;
              v368 = *(_WORD *)(v367 + 8) & 0x7F;
              if (v368 == 83)
                break;
              v369 = -40;
              if ((*(_WORD *)(v367 + 8) & 0x7Fu) > 0x46)
              {
                if (v368 == 71)
                {
                  v369 = -56;
                }
                else if (v368 != 81)
                {
                  goto LABEL_560;
                }
              }
              else
              {
                if (v368 > 0x18)
                  goto LABEL_559;
                if (v368 == 16)
                  goto LABEL_553;
                if (((1 << v368) & 0x1066) == 0)
                {
                  if (v368 == 24)
                  {
LABEL_553:
                    v369 = -48;
                  }
                  else
                  {
LABEL_559:
                    if (v368 == 70)
                    {
                      v369 = -64;
                    }
                    else
                    {
LABEL_560:
                      v370 = v368 - 52;
                      v371 = v368 - 33 >= 5;
                      v372 = -64;
                      if (v371)
                        v372 = -48;
                      if (v370 >= 6)
                        v369 = v372;
                      else
                        v369 = -72;
                    }
                  }
                }
              }
              v365 = v367 + v369;
              continue;
            }
          }
          sub_22EED1954((uint64_t)&v464);
          if ((*(_BYTE *)(v373 + 29) & 1) == 0)
            continue;
          break;
        }
        v374 = v373;
        v375 = (unint64_t)v464 & 0xFFFFFFFFFFFFFFFCLL;
        if (((unint64_t)v464 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v375 + 28) & 0x7F) == 0x53)
        {
          v382 = (unint64_t)v464 & 0xFFFFFFFFFFFFFFFCLL;
          goto LABEL_600;
        }
        v376 = *(_QWORD *)(v375 + 16);
LABEL_573:
        v377 = v376 & 0xFFFFFFFFFFFFFFF8;
        if ((v376 & 4) != 0)
          v377 = *(_QWORD *)v377;
        v378 = *(_WORD *)(v377 + 8) & 0x7F;
        if (v378 == 83)
        {
          v382 = v377 - 40;
LABEL_600:
          v383 = *(_QWORD *)(v382 + 88);
          v232 = *(_QWORD *)(v375 + 48);
          v384 = *(_QWORD *)(v232 & 0xFFFFFFFFFFFFFFF0);
          if (v384 && (v385 = *(_DWORD *)(v384 + 16), (v385 & 0xFE) == 0x28))
          {
LABEL_608:
            if ((v385 & 0x100000) != 0)
            {
              do
              {
                v384 = *(_QWORD *)(*(_QWORD *)(v384 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v384 || (v387 = *(_DWORD *)(v384 + 16), (v387 & 0xFE) != 0x28))
                {
                  v384 = sub_22F10CF48(v384);
                  v387 = *(_DWORD *)(v384 + 16);
                }
                v204 = v412;
                v183 = v431;
              }
              while ((v387 & 0x100000) != 0);
            }
            v232 = *(_QWORD *)(v384 + 32);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v384 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v384 = sub_22F10CF48(v384);
            if (v384)
            {
              v385 = *(_DWORD *)(v384 + 16);
              goto LABEL_608;
            }
          }
          sub_22F0D60E4(v465 & 0xFFFFFFFFFFFFFFFCLL);
          v462 = 0;
          sub_22EFF69F0((uint64_t)&__s2, v383, v375, 0, v232, 1, v386, &v462, 0);
          sub_22EF01E94((uint64_t)&__s1, (unsigned int *)&__s2, v374, 0);
          LODWORD(v232) = v438;
          continue;
        }
        break;
      }
      v379 = -40;
      if ((*(_WORD *)(v377 + 8) & 0x7Fu) > 0x46)
      {
        if (v378 == 71)
        {
          v379 = -56;
        }
        else if (v378 != 81)
        {
          goto LABEL_586;
        }
      }
      else
      {
        if (v378 > 0x18)
          goto LABEL_585;
        if (v378 == 16)
          goto LABEL_579;
        if (((1 << v378) & 0x1066) == 0)
        {
          if (v378 == 24)
          {
LABEL_579:
            v379 = -48;
          }
          else
          {
LABEL_585:
            if (v378 == 70)
            {
              v379 = -64;
            }
            else
            {
LABEL_586:
              v380 = v378 - 52;
              v371 = v378 - 33 >= 5;
              v381 = -64;
              if (v371)
                v381 = -48;
              if (v380 >= 6)
                v379 = v381;
              else
                v379 = -72;
            }
          }
        }
      }
      v376 = *(_QWORD *)(v377 + v379 + 16);
      goto LABEL_573;
    }
  }
LABEL_625:
  v393 = *(_QWORD *)(a1 + 496);
  v394 = *(_DWORD *)(*(_QWORD *)(v418 + 8) + 48);
  if (*(_BYTE *)(v393 + 96 * v394 + 92))
  {
    v395 = v393 + 96 * *(unsigned int *)(*(_QWORD *)v418 + 48);
    v207 = &v491[16];
    __s1 = &v491[16];
    *(_OWORD *)v491 = xmmword_22F4559B0;
    if (*(_QWORD *)(v395 + 8))
      sub_22F2F3E84((uint64_t)&__s1, v395);
    if ((_DWORD)v474)
    {
      v396 = v473;
      v397 = 16 * v474;
      do
      {
        v398 = *(_DWORD *)(j + 24);
        v399 = operator new();
        *(_OWORD *)(v399 + 8) = *v396;
        *(_WORD *)(v399 + 17) = 1;
        *(_DWORD *)(v399 + 20) = v398;
        *(_QWORD *)v399 = &off_24FAB9EF0;
        v453 = v399;
        sub_22EF030E4(&__s1, (char **)(v446 + 472), &v453);
        v400 = v453;
        v453 = 0;
        if (v400)
          (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
        ++v396;
        v397 -= 16;
      }
      while (v397);
    }
    if (v470.i32[2])
    {
      v401 = (_OWORD *)v470.i64[0];
      v402 = 16 * v470.u32[2];
      do
      {
        v403 = *(_DWORD *)(j + 24);
        v404 = operator new();
        *(_OWORD *)(v404 + 8) = *v401;
        *(_WORD *)(v404 + 17) = 0;
        *(_DWORD *)(v404 + 20) = v403;
        *(_QWORD *)v404 = &off_24FAB9EF0;
        v452 = v404;
        sub_22EF030E4(&__s1, (char **)(v446 + 472), &v452);
        v405 = v452;
        v452 = 0;
        if (v405)
          (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
        ++v401;
        v402 -= 16;
      }
      while (v402);
    }
    if ((_DWORD)v468)
    {
      v406 = (unsigned __int8 **)v467;
      v407 = (unsigned __int8 **)((char *)v467 + 16 * v468);
      do
      {
        sub_22EF03258(&__s1, *(_QWORD *)(v446 + 472), *v406, *((_BYTE *)v406 + 8));
        v406 += 2;
      }
      while (v406 != v407);
    }
    sub_22EF03330(v446, &__s1, v393 + 96 * v394 + 32, *(_DWORD *)(v393 + 96 * v394 + 84), 2u, 3u);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v446 + 320) + 128))(*(_QWORD *)(v446 + 320), v411);
    goto LABEL_642;
  }
LABEL_644:
  if (v467 != v469)
    free(v467);
  if ((int *)v470.i64[0] != &v471)
    free((void *)v470.i64[0]);
  if (v473 != v475)
    free(v473);
  if (v476[0] != v477)
    free(v476[0]);
}

void sub_22EF01568(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = (v5 - (_BYTE *)*a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v11 = v4 - v8;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12 >> 59)
      sub_22E3B3F8C();
    v13 = (char *)operator new(32 * v12);
    v14 = &v13[32 * v9];
    *(_OWORD *)v14 = *a2;
    *((_DWORD *)v14 + 4) = *((_DWORD *)a2 + 4);
    *((_QWORD *)v14 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v7 = v14 + 32;
    if (v5 == v8)
    {
      v15 = v14;
    }
    else
    {
      do
      {
        v15 = v14 - 32;
        v16 = *((_OWORD *)v5 - 2);
        *((_DWORD *)v14 - 4) = *((_DWORD *)v5 - 4);
        *((_OWORD *)v14 - 2) = v16;
        *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
        *((_QWORD *)v5 - 1) = 0;
        v5 -= 32;
        v14 -= 32;
      }
      while (v5 != v8);
    }
    v17 = (char *)*a1;
    v18 = (char *)a1[1];
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v13[32 * v12];
    while (v18 != v17)
    {
      v19 = *((_QWORD *)v18 - 1);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 68) - 1;
        *(_DWORD *)(v19 + 68) = v20;
        if (!v20)
          sub_22F3563E0(v19);
      }
      v18 -= 32;
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *((_DWORD *)v5 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v5 = v6;
    *((_QWORD *)v5 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v7 = v5 + 32;
  }
  a1[1] = v7;
}

uint64_t sub_22EF016D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  unint64_t v13;
  int v14;
  _BYTE v15[12];

  if (a1)
  {
    v5 = a1;
    if ((*(_BYTE *)(a1 + 43) & 0x20) != 0)
    {
      LODWORD(a1) = *(_DWORD *)(a1 + 64);
    }
    else
    {
      LODWORD(a1) = sub_22EF016D0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 48);
      *(_DWORD *)(v5 + 64) = a1;
      *(_DWORD *)(v5 + 40) |= 0x20000000u;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)a3;
  *(_DWORD *)&v15[8] = *(_DWORD *)(a3 + 8);
  v6 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v12 = __cxa_guard_acquire(&qword_253E4AB98);
    LODWORD(a1) = v14;
    if (v12)
    {
      v13 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v13 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v13;
      __cxa_guard_release(&qword_253E4AB98);
      LODWORD(a1) = v14;
    }
  }
  v7 = 0x9DDFEA08EB382D69 * (*(_QWORD *)v15 ^ qword_253E4AB90 ^ __ROR8__(*(_QWORD *)&v15[4] + 12, 12));
  v8 = __ROR8__(*(_QWORD *)&v15[4] + 12, 12) ^ (v7 >> 47);
  v9 = a1
     + ((-348639895
       * ((((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 32) >> 15) ^ (-348639895
                                                                            * (v8 ^ v7)))) ^ *(_DWORD *)&v15[4]);
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 43) & 0x20) != 0)
    {
      v10 = *(_DWORD *)(a2 + 64);
    }
    else
    {
      v10 = sub_22EF016D0(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), a2 + 48);
      *(_DWORD *)(a2 + 64) = v10;
      *(_DWORD *)(a2 + 40) |= 0x20000000u;
    }
    return (v10 + v9);
  }
  return v9;
}

uint64_t sub_22EF0189C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 68) - 1;
    *(_DWORD *)(v2 + 68) = v3;
    if (!v3)
      sub_22F3563E0(v2);
  }
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 68) - 1;
    *(_DWORD *)(v4 + 68) = v5;
    if (!v5)
      sub_22F3563E0(v4);
  }
  v6 = *(void **)(a1 + 32);
  if (v6 != (void *)(a1 + 56))
    free(v6);
  if (*(_QWORD *)a1 != a1 + 24)
    free(*(void **)a1);
  return a1;
}

void sub_22EF01924(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 *v33;
  uint64_t v34;

  v11 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v11)
  {
    v12 = *(unsigned __int8 ***)(a3 + 40);
    v13 = (uint64_t *)(a1 + 104);
    v14 = 8 * v11;
    do
    {
      v15 = sub_22EF082F0(v13, *v12, a5, a4, a6);
      v33 = v15;
      v34 = v16;
      if (v15)
      {
        if (*v15 == 1)
        {
          v17 = *(_QWORD *)(a1 + 320);
          v18 = sub_22EF01AA8(*(_DWORD *)(a3 + 36), *(unsigned __int8 ***)(a3 + 40));
          if (a4)
          {
            v20 = v18;
            v21 = v19;
            sub_22EFF605C((uint64_t)a4);
            if (v22)
              (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, v20, v21, v22);
          }
        }
        else
        {
          sub_22EF04294(a2, &v33);
        }
      }
      ++v12;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    v23 = sub_22EF082F0((uint64_t *)(a1 + 104), 0, a5, a4, a6);
    v33 = v23;
    v34 = v24;
    if (v23)
    {
      if (*v23 == 1)
      {
        v25 = *(_QWORD *)(a1 + 320);
        v26 = sub_22EF01AA8(*(_DWORD *)(a3 + 36), *(unsigned __int8 ***)(a3 + 40));
        if (a4)
        {
          v28 = v26;
          v29 = v27;
          sub_22EFF605C((uint64_t)a4);
          if (v30)
            (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, v28, v29, v30);
        }
      }
      else
      {
        sub_22EF04294(a2, &v33);
      }
    }
  }
}

const char *sub_22EF01AA8(int a1, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  const char *result;
  unsigned __int8 **i;
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  if (!a1)
    return "mutex";
  v2 = a2;
  v3 = &a2[a1];
  result = "mutex";
  while (1)
  {
    for (i = v2; ; i = (unsigned __int8 **)(v6 + 16))
    {
      v6 = *i;
      v7 = *v6;
      if (v7 != 153)
        break;
    }
    if (v7 == 161)
      break;
    if (v7 == 188)
    {
      v8 = (uint64_t *)(v6 + 24);
      goto LABEL_10;
    }
LABEL_11:
    if (++v2 == v3)
      return result;
  }
  v8 = (uint64_t *)(v6 + 16);
LABEL_10:
  v9 = *v8;
  if (!v9)
    goto LABEL_11;
  return sub_22EF04588(*(_QWORD *)(v9 + 48));
}

char **sub_22EF01B38(char **result, unsigned __int16 **a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  char **v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  int v20;
  char *v21;
  uint64_t v22;
  void **v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void **v28;
  void (**v29)(void **);
  unsigned __int8 *v30;
  int v31;
  uint64_t *v32;
  char **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *__p[2];
  char v40;
  void **v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[7];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v7 = (unsigned __int8 **)(*a3 + 8);
  v8 = *v7;
  if (!*v7)
    return result;
  v13 = result;
  if ((a6 & 1) == 0 && !*(_BYTE *)(v6 + 16))
  {
    v35 = *(_QWORD *)(*a3 + 8);
    v36 = 1;
    v14 = (uint64_t)result[59];
    if (sub_22EF054D8(*a2, (uint64_t)a2[1], v14, v8, 1u))
    {
      sub_22EF03258(a2, v14, v8, 1u);
    }
    else if (sub_22EF0557C((uint64_t)v13, v8) && *(unsigned __int8 *)(v6 + 18) << 8 != 256)
    {
      v15 = v13[40];
      sub_22EF04954((uint64_t)&v42, (uint64_t)v7);
      if (v45 >= 0)
        v16 = &v42;
      else
        v16 = v42;
      if (v45 >= 0)
        v17 = v45 & 0x7F;
      else
        v17 = v43;
      sub_22EF04954((uint64_t)__p, (uint64_t)&v35);
      if (v40 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v40 >= 0)
        v19 = (void *)(v40 & 0x7F);
      else
        v19 = __p[1];
      (*(void (**)(char *, uint64_t, uint64_t, void *, uint64_t, void **, void *, _QWORD))(*(_QWORD *)v15 + 80))(v15, a4, a5, v16, v17, v18, v19, *(unsigned int *)(*a3 + 20));
      if (v40 < 0)
        operator delete(__p[0]);
      if (v45 < 0)
        operator delete(v42);
    }
    v6 = *a3;
  }
  if (v13[40][8])
  {
    v20 = *(unsigned __int8 *)(v6 + 18) << 8;
    if (v20 != 256 && v20 != 512)
    {
      v21 = v13[65];
      if (!*(_BYTE *)(v6 + 16))
      {
        v30 = *(unsigned __int8 **)(v6 + 8);
        if (v30)
        {
          v31 = *v30;
          if (v31 == 4)
          {
            v32 = (uint64_t *)(v30 + 16);
            goto LABEL_52;
          }
          if (v31 == 12)
          {
            v32 = (uint64_t *)(v30 + 56);
LABEL_52:
            v22 = *v32;
LABEL_30:
            v37 = *(_DWORD *)(v6 + 20);
            v35 = a4;
            v36 = a5;
            v34 = v22;
            v42 = v44;
            v43 = 0x800000000;
            v23 = (void **)operator new(0x48uLL);
            *v23 = &off_24FAB9F28;
            v23[1] = v21;
            v23[2] = v13;
            v23[3] = &v42;
            v23[4] = a2;
            v23[5] = &v34;
            v23[6] = &v35;
            v23[7] = &v37;
            v23[8] = __p;
            v41 = v23;
            v38 = v22;
            sub_22EF05920((uint64_t)v23, &v38);
            v24 = v42;
            if ((_DWORD)v43)
            {
              v25 = 8 * v43;
              v26 = (uint64_t *)v42;
              do
              {
                v27 = *v26++;
                *(_DWORD *)(v27 + 48) = 0;
                v25 -= 8;
              }
              while (v25);
            }
            v28 = v41;
            if (v41 == __p)
            {
              v29 = (void (**)(void **))((char *)__p[0] + 32);
              v28 = __p;
            }
            else
            {
              if (!v41)
              {
LABEL_42:
                if (v24 != v44)
                  free(v24);
                v6 = *a3;
                goto LABEL_45;
              }
              v29 = (void (**)(void **))((char *)*v41 + 40);
            }
            (*v29)(v28);
            v24 = v42;
            goto LABEL_42;
          }
        }
      }
      v22 = 0;
      goto LABEL_30;
    }
  }
LABEL_45:
  result = (char **)sub_22EF054D8(*a2, (uint64_t)a2[1], (uint64_t)v13[59], *(unsigned __int8 **)(v6 + 8), *(_BYTE *)(v6 + 16));
  if (result)
  {
    if (*(unsigned __int8 *)(v6 + 18) << 8 != 256)
      return (char **)(*((uint64_t (**)(char **, unsigned __int16 **, char **, uint64_t, char *, uint64_t, uint64_t))*result
                       + 3))(result, a2, v13 + 59, v6, v13[40], a4, a5);
  }
  else
  {
    *a3 = 0;
    v33 = (char **)v6;
    sub_22EF030E4(a2, v13 + 59, (uint64_t *)&v33);
    result = v33;
    if (v33)
      return (char **)(*((uint64_t (**)(char **))*v33 + 1))(v33);
  }
  return result;
}

void sub_22EF01E94(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int16 v21;
  _OWORD *v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int16 v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int i;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  char **v79;
  char *v80;
  unsigned int v81;
  char *v82;
  void *v83;
  uint64_t v84;
  void *p_p;
  uint64_t v86;
  unsigned int v87;
  char **v88;
  uint64_t v89;
  unsigned __int8 **v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  char *v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  char *v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  unsigned int v107;
  char **v108;
  uint64_t v109;
  unsigned __int8 **v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unsigned int v120;
  _BYTE *v121;
  uint64_t v122;
  char **v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 **v129;
  uint64_t v130;
  unsigned int v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  char **v136;
  uint64_t v137;
  unsigned __int8 **v138;
  uint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  char *v142;
  const char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  char **v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  char **v154;
  uint64_t v155;
  unsigned __int8 **v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  char **v167;
  __int16 v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void **v174;
  const char *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  char *v179;
  const char *v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  unsigned int v184;
  unsigned __int8 *v185;
  uint64_t v186;
  char *v187;
  const char *v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  unsigned int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  char *v195;
  const char *v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  void **v202;
  _BOOL4 v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t *v208;
  unsigned __int8 **v209;
  unsigned __int8 **v210;
  unsigned __int8 *v211;
  unsigned __int16 **v212;
  _BOOL4 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *__p;
  uint64_t v226;
  char v227;
  _QWORD v228[2];
  void *v229;
  uint64_t v230;
  _BYTE v231[7];
  char v232;
  void *v233;
  uint64_t v234;
  _BYTE v235[64];
  void *v236;
  uint64_t v237;
  _BYTE v238[64];
  void *v239;
  uint64_t v240;
  _BYTE v241[64];
  void *v242;
  uint64_t v243;
  _BYTE v244[64];
  void *v245;
  uint64_t v246;
  _BYTE v247[64];
  _QWORD *v248;
  uint64_t v249;
  _QWORD v250[10];

  v250[8] = *MEMORY[0x24BDAC8D0];
  sub_22EFF605C((uint64_t)a2);
  v218 = v7;
  v248 = v250;
  v249 = 0x400000000;
  v245 = v247;
  v246 = 0x400000000;
  v242 = v244;
  v243 = 0x400000000;
  v239 = v241;
  v240 = 0x400000000;
  v236 = v238;
  v237 = 0x400000000;
  v233 = v235;
  v234 = 0x400000000;
  v216 = a4;
  if (!a4)
    goto LABEL_22;
  v213 = 0;
  if (!a3 || (*(_DWORD *)(a3 + 28) & 0x7F) != 0x37)
    goto LABEL_23;
  v8 = *(_WORD *)(a3 + 80) & 0x7F;
  v9 = -40;
  if (v8 <= 0x46)
  {
    if (v8 <= 0x18)
    {
      if (v8 == 16)
      {
LABEL_7:
        v9 = -48;
        goto LABEL_19;
      }
      if (((1 << v8) & 0x1066) != 0)
        goto LABEL_19;
      if (v8 == 24)
        goto LABEL_7;
    }
    if (v8 == 70)
    {
LABEL_17:
      v9 = -64;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (v8 == 83)
    goto LABEL_19;
  if (v8 == 71)
  {
    v9 = -56;
    goto LABEL_19;
  }
  if (v8 != 81)
  {
LABEL_15:
    if (v8 - 52 >= 6)
    {
      if (v8 - 33 >= 5)
        goto LABEL_7;
      goto LABEL_17;
    }
    v9 = -72;
  }
LABEL_19:
  v10 = *(_QWORD *)(a3 + 72 + v9 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
  {
    v213 = sub_22F3276A8((uint64_t)(v11 - 8));
    goto LABEL_23;
  }
LABEL_22:
  v213 = 0;
LABEL_23:
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v66 = *v65;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v68 = *(_QWORD *)v67 + 8 * *(unsigned int *)(v67 + 8);
    }
    else
    {
      v68 = 0;
    }
    if (v66 != (uint64_t *)v68)
    {
      v212 = (unsigned __int16 **)(a1 + 8);
      v204 = (uint64_t *)(a3 + 40);
      v205 = v68;
      v12 = "mutex";
      v13 = 5;
      v215 = a3;
      while (1)
      {
        v69 = *v66;
        v70 = *(unsigned __int16 *)(*v66 + 32);
        v214 = *v66;
        if (v70 <= 0x6F)
        {
          switch(v70)
          {
            case 'n':
              v208 = v66;
              v229 = v231;
              v230 = 0x400000000;
              v154 = *(char ***)a1;
              v155 = *(unsigned int *)(v69 + 36);
              if ((_DWORD)v155)
              {
                v156 = *(unsigned __int8 ***)(v69 + 40);
                v157 = 8 * v155;
                do
                {
                  v158 = sub_22EF082F0((uint64_t *)v154 + 13, *v156, v215, a2, v216);
                  __p = v158;
                  v226 = v159;
                  if (v158)
                  {
                    if (*v158 == 1)
                    {
                      v160 = v154[40];
                      v161 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                      if (a2)
                      {
                        v163 = v161;
                        v164 = v162;
                        sub_22EFF605C((uint64_t)a2);
                        if (v165)
                          (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v160 + 16))(v160, v163, v164, v165);
                      }
                    }
                    else
                    {
                      sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                    }
                  }
                  ++v156;
                  v157 -= 8;
                }
                while (v157);
              }
              else
              {
                v185 = sub_22EF082F0((uint64_t *)v154 + 13, 0, v215, a2, v216);
                __p = v185;
                v226 = v186;
                if (v185)
                {
                  if (*v185 == 1)
                  {
                    v187 = v154[40];
                    v188 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
                    if (a2)
                    {
                      v190 = v188;
                      v191 = v189;
                      sub_22EFF605C((uint64_t)a2);
                      if (v192)
                        (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v187 + 16))(v187, v190, v191, v192);
                    }
                  }
                  else
                  {
                    sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                  }
                }
              }
              v121 = v229;
              if ((_DWORD)v230)
              {
                v166 = 16 * v230;
                v66 = v208;
                do
                {
                  v167 = *(char ***)a1;
                  v168 = !sub_22F27A238(v214);
                  v169 = operator new();
                  *(_OWORD *)(v169 + 8) = *(_OWORD *)v121;
                  *(_WORD *)(v169 + 17) = v168 | 0x100;
                  *(_DWORD *)(v169 + 20) = v218;
                  *(_QWORD *)v169 = &off_24FAB9EF0;
                  v222 = v169;
                  v170 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                  sub_22EF01B38(v167, v212, &v222, (uint64_t)v170, v171, 0);
                  v172 = v222;
                  v222 = 0;
                  if (v172)
                    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
                  v121 += 16;
                  v166 -= 16;
                }
                while (v166);
                v121 = v229;
              }
              else
              {
                v66 = v208;
              }
              v68 = v205;
              a3 = v215;
              if (v121 == v231)
                break;
              goto LABEL_232;
            case 'o':
              v207 = v66;
              v229 = v231;
              v230 = 0x400000000;
              v108 = *(char ***)a1;
              v109 = *(unsigned int *)(v69 + 36);
              if ((_DWORD)v109)
              {
                v110 = *(unsigned __int8 ***)(v69 + 40);
                v111 = (uint64_t *)(v108 + 13);
                v112 = 8 * v109;
                do
                {
                  v113 = sub_22EF082F0(v111, *v110, v215, a2, v216);
                  __p = v113;
                  v226 = v114;
                  if (v113)
                  {
                    if (*v113 == 1)
                    {
                      v115 = v108[40];
                      v116 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                      if (a2)
                      {
                        v118 = v117;
                        v119 = v116;
                        sub_22EFF605C((uint64_t)a2);
                        v111 = (uint64_t *)(v108 + 13);
                        if (v120)
                          (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v115 + 16))(v115, v119, v118, v120);
                      }
                    }
                    else
                    {
                      sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                    }
                  }
                  ++v110;
                  v112 -= 8;
                }
                while (v112);
              }
              else
              {
                v193 = sub_22EF082F0((uint64_t *)v108 + 13, 0, v215, a2, v216);
                __p = v193;
                v226 = v194;
                if (v193)
                {
                  if (*v193 == 1)
                  {
                    v195 = v108[40];
                    v196 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
                    if (a2)
                    {
                      v198 = v196;
                      v199 = v197;
                      sub_22EFF605C((uint64_t)a2);
                      if (v200)
                        (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v195 + 16))(v195, v198, v199, v200);
                    }
                  }
                  else
                  {
                    sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                  }
                }
              }
              v121 = v229;
              if ((_DWORD)v230)
              {
                v122 = 16 * v230;
                a3 = v215;
                v66 = v207;
                v68 = v205;
                do
                {
                  v123 = *(char ***)a1;
                  v124 = operator new();
                  *(_OWORD *)(v124 + 8) = *(_OWORD *)v121;
                  *(_WORD *)(v124 + 17) = 257;
                  *(_DWORD *)(v124 + 20) = v218;
                  *(_QWORD *)v124 = &off_24FAB9EF0;
                  v224 = v124;
                  v125 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                  sub_22EF01B38(v123, v212, &v224, (uint64_t)v125, v126, 0);
                  v127 = v224;
                  v224 = 0;
                  if (v127)
                    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
                  v121 += 16;
                  v122 -= 16;
                }
                while (v122);
LABEL_196:
                v121 = v229;
LABEL_213:
                if (v121 == v231)
                  break;
LABEL_232:
                free(v121);
                break;
              }
LABEL_212:
              a3 = v215;
              v66 = v207;
              v68 = v205;
              goto LABEL_213;
            case ']':
              v173 = *(_QWORD *)a1;
              if (sub_22F3566A4(v69))
                v174 = &v245;
              else
                v174 = (void **)&v248;
              sub_22EF01924(v173, (uint64_t)v174, v69, a2, a3, v216);
              v175 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
              goto LABEL_244;
          }
        }
        else
        {
          if (*(unsigned __int16 *)(*v66 + 32) <= 0x125u)
          {
            if (v70 == 112)
            {
              v207 = v66;
              v229 = v231;
              v230 = 0x400000000;
              v136 = *(char ***)a1;
              v137 = *(unsigned int *)(v69 + 36);
              if ((_DWORD)v137)
              {
                v138 = *(unsigned __int8 ***)(v69 + 40);
                v139 = 8 * v137;
                do
                {
                  v140 = sub_22EF082F0((uint64_t *)v136 + 13, *v138, v215, a2, v216);
                  __p = v140;
                  v226 = v141;
                  if (v140)
                  {
                    if (*v140 == 1)
                    {
                      v142 = v136[40];
                      v143 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                      if (a2)
                      {
                        v145 = v143;
                        v146 = v144;
                        sub_22EFF605C((uint64_t)a2);
                        if (v147)
                          (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v142 + 16))(v142, v145, v146, v147);
                      }
                    }
                    else
                    {
                      sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                    }
                  }
                  ++v138;
                  v139 -= 8;
                }
                while (v139);
              }
              else
              {
                v177 = sub_22EF082F0((uint64_t *)v136 + 13, 0, v215, a2, v216);
                __p = v177;
                v226 = v178;
                if (v177)
                {
                  if (*v177 == 1)
                  {
                    v179 = v136[40];
                    v180 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
                    if (a2)
                    {
                      v182 = v180;
                      v183 = v181;
                      sub_22EFF605C((uint64_t)a2);
                      if (v184)
                        (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v179 + 16))(v179, v182, v183, v184);
                    }
                  }
                  else
                  {
                    sub_22EF04294((uint64_t)&v229, (unsigned __int8 **)&__p);
                  }
                }
              }
              v121 = v229;
              if ((_DWORD)v230)
              {
                v148 = 16 * v230;
                a3 = v215;
                v66 = v207;
                v68 = v205;
                do
                {
                  v149 = *(char ***)a1;
                  v150 = operator new();
                  *(_OWORD *)(v150 + 8) = *(_OWORD *)v121;
                  *(_WORD *)(v150 + 17) = 256;
                  *(_DWORD *)(v150 + 20) = v218;
                  *(_QWORD *)v150 = &off_24FAB9EF0;
                  v223 = v150;
                  v151 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                  sub_22EF01B38(v149, v212, &v223, (uint64_t)v151, v152, 0);
                  v153 = v223;
                  v223 = 0;
                  if (v153)
                    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
                  v121 += 16;
                  v148 -= 16;
                }
                while (v148);
                goto LABEL_196;
              }
              goto LABEL_212;
            }
            if (v70 != 198)
              goto LABEL_233;
            v71 = *(unsigned int *)(v69 + 36);
            if (!(_DWORD)v71)
              goto LABEL_233;
            v72 = *(unsigned __int8 ***)(v69 + 40);
            v206 = v66;
            v209 = &v72[v71];
            do
            {
              v210 = v72;
              v73 = *v72;
              v74 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
              v76 = v75;
              v77 = sub_22EF082F0((uint64_t *)(*(_QWORD *)a1 + 104), v73, a3, a2, 0);
              v228[0] = v77;
              v228[1] = v78;
              if (v77)
              {
                v79 = *(char ***)a1;
                if (*v77 == 1)
                {
                  if (a2)
                  {
                    v80 = v79[40];
                    sub_22EFF605C((uint64_t)a2);
                    if (v81)
                      (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v80 + 16))(v80, v74, v76, v81);
                  }
                }
                else if (sub_22EF054D8(*(unsigned __int16 **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)v79[59], v77, v78))
                {
                  v82 = v79[40];
                  sub_22EFC683C(v204, &v229);
                  if (v232 >= 0)
                    v83 = &v229;
                  else
                    v83 = v229;
                  if (v232 >= 0)
                    v84 = v232 & 0x7F;
                  else
                    v84 = v230;
                  sub_22EF04954((uint64_t)&__p, (uint64_t)v228);
                  if (v227 >= 0)
                    p_p = &__p;
                  else
                    p_p = __p;
                  if (v227 >= 0)
                    v86 = v227 & 0x7F;
                  else
                    v86 = v226;
                  sub_22EFF605C((uint64_t)a2);
                  (*(void (**)(char *, const char *, uint64_t, void *, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)v82 + 96))(v82, v74, v76, v83, v84, p_p, v86, v87);
                  if (v227 < 0)
                    operator delete(__p);
                  if (v232 < 0)
                    operator delete(v229);
                  a3 = v215;
                }
              }
              if (v213)
              {
                v88 = *(char ***)a1;
                v89 = *(unsigned int *)(v214 + 36);
                if ((_DWORD)v89)
                {
                  v90 = *(unsigned __int8 ***)(v214 + 40);
                  v91 = 8 * v89;
                  do
                  {
                    v92 = sub_22EF082F0((uint64_t *)v88 + 13, *v90, a3, a2, v216);
                    v229 = v92;
                    v230 = v93;
                    if (v92)
                    {
                      if (*v92 == 1)
                      {
                        v94 = v88[40];
                        v95 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                        if (a2)
                        {
                          v97 = v95;
                          v98 = v96;
                          sub_22EFF605C((uint64_t)a2);
                          if (v99)
                            (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v94 + 16))(v94, v97, v98, v99);
                        }
                      }
                      else
                      {
                        sub_22EF04294((uint64_t)&v233, (unsigned __int8 **)&v229);
                      }
                    }
                    ++v90;
                    v91 -= 8;
                    a3 = v215;
                  }
                  while (v91);
                }
                else
                {
                  v100 = sub_22EF082F0((uint64_t *)v88 + 13, 0, a3, a2, v216);
                  v229 = v100;
                  v230 = v101;
                  if (v100)
                  {
                    if (*v100 == 1)
                    {
                      v102 = v88[40];
                      v103 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                      if (a2)
                      {
                        v105 = v103;
                        v106 = v104;
                        sub_22EFF605C((uint64_t)a2);
                        if (v107)
                          (*(void (**)(char *, const char *, uint64_t, _QWORD))(*(_QWORD *)v102 + 16))(v102, v105, v106, v107);
                      }
                    }
                    else
                    {
                      sub_22EF04294((uint64_t)&v233, (unsigned __int8 **)&v229);
                    }
                  }
                }
              }
              v72 = v210 + 1;
              v69 = v214;
            }
            while (v210 + 1 != v209);
            goto LABEL_181;
          }
          if (v70 == 296)
          {
            v128 = *(unsigned int *)(v69 + 36);
            if ((_DWORD)v128)
            {
              v206 = v66;
              v129 = *(unsigned __int8 ***)(v69 + 40);
              v130 = 8 * v128;
              do
              {
                v211 = *v129;
                v131 = !sub_22F3565C0(v214);
                v132 = sub_22EF01AA8(*(_DWORD *)(v214 + 36), *(unsigned __int8 ***)(v214 + 40));
                v134 = v133;
                sub_22EFF605C((uint64_t)a2);
                sub_22EF07168((uint64_t *)a1, v215, a2, v131, v211, 2u, (uint64_t)v132, v134, v135);
                if (v213)
                  sub_22EF01924(*(_QWORD *)a1, (uint64_t)&v233, v214, a2, v215, v216);
                ++v129;
                v130 -= 8;
              }
              while (v130);
              a3 = v215;
LABEL_181:
              v66 = v206;
              v68 = v205;
            }
          }
          else if (v70 == 294)
          {
            if (sub_22F3565C0(v69))
            {
              v201 = *(_QWORD *)a1;
              v202 = &v236;
            }
            else
            {
              v203 = sub_22F27A238(v69);
              v201 = *(_QWORD *)a1;
              if (v203)
                v202 = &v239;
              else
                v202 = &v242;
            }
            sub_22EF01924(v201, (uint64_t)v202, v69, a2, a3, v216);
            v175 = sub_22EF01AA8(*(_DWORD *)(v69 + 36), *(unsigned __int8 ***)(v69 + 40));
LABEL_244:
            v12 = v175;
            v13 = v176;
          }
        }
LABEL_233:
        if (++v66 == (uint64_t *)v68)
          goto LABEL_25;
      }
    }
  }
  v12 = "mutex";
  v13 = 5;
LABEL_25:
  v14 = *(_DWORD *)(a3 + 28) & 0x7F;
  if ((_DWORD)v243)
  {
    v15 = (char *)v242;
    v16 = 16 * v243;
    do
    {
      sub_22EF07758(*(_QWORD *)a1, a1 + 8, (uint64_t)v15, v218, v14 == 57, 1, (uint64_t)v12, v13);
      v15 += 16;
      v16 -= 16;
    }
    while (v16);
  }
  if ((_DWORD)v240)
  {
    v17 = (char *)v239;
    v18 = 16 * v240;
    do
    {
      sub_22EF07758(*(_QWORD *)a1, a1 + 8, (uint64_t)v17, v218, v14 == 57, 0, (uint64_t)v12, v13);
      v17 += 16;
      v18 -= 16;
    }
    while (v18);
  }
  if ((_DWORD)v237)
  {
    v19 = (char *)v236;
    v20 = 16 * v237;
    do
    {
      sub_22EF07758(*(_QWORD *)a1, a1 + 8, (uint64_t)v19, v218, v14 == 57, 2, (uint64_t)v12, v13);
      v19 += 16;
      v20 -= 16;
    }
    while (v20);
  }
  if (v213)
    v21 = 3;
  else
    v21 = 0;
  if ((_DWORD)v249)
  {
    v22 = v248;
    v23 = 16 * v249;
    do
    {
      v24 = *(char ***)a1;
      v25 = operator new();
      *(_OWORD *)(v25 + 8) = *v22;
      *(_WORD *)(v25 + 17) = (v21 << 8) | 1;
      *(_DWORD *)(v25 + 20) = v218;
      *(_QWORD *)v25 = &off_24FAB9EF0;
      v221 = v25;
      sub_22EF01B38(v24, (unsigned __int16 **)(a1 + 8), &v221, (uint64_t)v12, v13, 0);
      v26 = v221;
      v221 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      ++v22;
      v23 -= 16;
    }
    while (v23);
  }
  if ((_DWORD)v246)
  {
    v27 = v245;
    v28 = v21 << 8;
    v29 = 16 * v246;
    do
    {
      v30 = *(char ***)a1;
      v31 = operator new();
      *(_OWORD *)(v31 + 8) = *v27;
      *(_WORD *)(v31 + 17) = v28;
      *(_DWORD *)(v31 + 20) = v218;
      *(_QWORD *)v31 = &off_24FAB9EF0;
      v220 = v31;
      sub_22EF01B38(v30, (unsigned __int16 **)(a1 + 8), &v220, (uint64_t)v12, v13, 0);
      v32 = v220;
      v220 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      ++v27;
      v29 -= 16;
    }
    while (v29);
  }
  if (v213)
  {
    v33 = *(_DWORD *)(v216 + 24);
    if (!v216 || (v34 = v216, (*(_DWORD *)(v216 + 28) & 0x7F) != 0x53))
    {
      v35 = *(_QWORD *)(v216 + 16);
      v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if ((v35 & 4) != 0)
        v36 = *(_QWORD *)v36;
      for (i = *(_WORD *)(v36 + 8) & 0x7F; i != 83; i = *(_WORD *)(v36 + 8) & 0x7F)
      {
        v38 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v38 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_63;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_62;
          if (i == 16)
            goto LABEL_56;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_69;
          if (i == 24)
          {
LABEL_56:
            v38 = -48;
          }
          else
          {
LABEL_62:
            if (i != 70)
            {
LABEL_63:
              v39 = i - 52;
              if ((i - 33) >= 5)
                v40 = -48;
              else
                v40 = -64;
              if (v39 >= 6)
                v38 = v40;
              else
                v38 = -72;
              goto LABEL_69;
            }
            v38 = -64;
          }
        }
LABEL_69:
        v41 = *(_QWORD *)(v36 + v38 + 16);
        v36 = v41 & 0xFFFFFFFFFFFFFFF8;
        if ((v41 & 4) != 0)
          v36 = *(_QWORD *)v36;
      }
      v34 = v36 - 40;
    }
    v42 = *(_QWORD *)(v34 + 88);
    v43 = *(_QWORD *)(v216 + 48);
    __p = 0;
    sub_22EFF69F0((uint64_t)&v229, v42, v216, 0, v43, 1, v33, &__p, 0);
    v44 = sub_22EF085F4((uint64_t *)(*(_QWORD *)a1 + 104), (unsigned __int8 *)&v229, 0);
    v46 = v45;
    v47 = operator new();
    *(_QWORD *)(v47 + 8) = v44;
    *(_QWORD *)(v47 + 16) = v46;
    *(_WORD *)(v47 + 17) = 1;
    *(_DWORD *)(v47 + 20) = v33;
    *(_QWORD *)v47 = &off_24FAB9F70;
    *(_QWORD *)(v47 + 24) = v47 + 40;
    v48 = v47 + 24;
    *(_QWORD *)(v47 + 32) = 0x400000000;
    if ((_DWORD)v249)
    {
      v49 = v248;
      v50 = 16 * v249;
      do
      {
        v51 = *v49;
        v49 += 2;
        sub_22EF07FEC(v48, v51, 0);
        v50 -= 16;
      }
      while (v50);
    }
    if ((_DWORD)v246)
    {
      v52 = (uint64_t *)v245;
      v53 = 16 * v246;
      do
      {
        v54 = *v52;
        v52 += 2;
        sub_22EF07FEC(v48, v54, 0);
        v53 -= 16;
      }
      while (v53);
    }
    if ((_DWORD)v234)
    {
      v55 = (uint64_t *)v233;
      v56 = 16 * v234;
      do
      {
        v57 = *v55;
        v55 += 2;
        sub_22EF07FEC(v48, v57, 0);
        v56 -= 16;
      }
      while (v56);
    }
    if ((_DWORD)v243)
    {
      v58 = (uint64_t *)v242;
      v59 = 16 * v243;
      do
      {
        v60 = *v58;
        v58 += 2;
        sub_22EF07FEC(v48, v60, 2u);
        v59 -= 16;
      }
      while (v59);
    }
    if ((_DWORD)v240)
    {
      v61 = (uint64_t *)v239;
      v62 = 16 * v240;
      do
      {
        v63 = *v61;
        v61 += 2;
        sub_22EF07FEC(v48, v63, 1u);
        v62 -= 16;
      }
      while (v62);
    }
    v64 = *(char ***)a1;
    v219 = v47;
    sub_22EF01B38(v64, (unsigned __int16 **)(a1 + 8), &v219, (uint64_t)v12, v13, 0);
    if (v219)
      (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  }
  if (v233 != v235)
    free(v233);
  if (v236 != v238)
    free(v236);
  if (v239 != v241)
    free(v239);
  if (v242 != v244)
    free(v242);
  if (v245 != v247)
    free(v245);
  if (v248 != v250)
    free(v248);
}

void sub_22EF030E4(_QWORD *a1, char **a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v5 = *a3;
  *a3 = 0;
  v7 = a2[1];
  v6 = (unint64_t)a2[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = *a2;
    v10 = (v7 - *a2) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_22E3B3F8C();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v5;
    v8 = v15 + 8;
    if (v7 == v9)
    {
      *a2 = v15;
      a2[1] = v8;
      a2[2] = v16;
    }
    else
    {
      do
      {
        v17 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v17;
        v15 -= 8;
      }
      while (v7 != v9);
      v7 = *a2;
      v18 = a2[1];
      *a2 = v15;
      a2[1] = v8;
      a2[2] = v16;
      while (v18 != v7)
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        v19 = v20;
        *(_QWORD *)v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
    }
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = v5;
    v8 = v7 + 8;
  }
  a2[1] = v8;
  v21 = *a2;
  v22 = a1[1];
  if ((unint64_t)(v22 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v22 = a1[1];
  }
  *(_WORD *)(*a1 + 2 * v22) = (((_DWORD)v8 - (_DWORD)v21) >> 3) - 1;
  ++a1[1];
}

_QWORD *sub_22EF03258(_QWORD *result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  uint64_t v4;
  _QWORD *v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  if ((_DWORD)v4)
  {
    v7 = result;
    v8 = a4;
    v9 = (_WORD *)*result;
    v10 = (v4 - 1);
    if ((_DWORD)v4 != 1)
    {
      v11 = (v4 - 1);
      v12 = (_WORD *)*result;
      while (1)
      {
        v13 = *(_QWORD *)(a2 + 8 * (unsigned __int16)*v12);
        if (*(unsigned __int8 *)(v13 + 16) == v8)
        {
          result = (_QWORD *)sub_22F358338(*(unsigned __int8 **)(v13 + 8), a3);
          if ((_DWORD)result)
            break;
        }
        ++v12;
        if (!--v11)
          goto LABEL_10;
      }
      *v12 = v9[v10];
LABEL_13:
      v7[1] = v4 - 1;
      return result;
    }
    v10 = 0;
LABEL_10:
    v14 = *(_QWORD *)(a2 + 8 * (unsigned __int16)v9[v10]);
    if (*(unsigned __int8 *)(v14 + 16) == v8)
    {
      result = (_QWORD *)sub_22F358338(*(unsigned __int8 **)(v14 + 8), a3);
      if ((_DWORD)result)
        goto LABEL_13;
    }
  }
  return result;
}

void sub_22EF03330(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  char v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  void **v25;
  void *v26;
  unsigned __int16 *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v36;
  uint64_t *v38;
  void *__p[2];
  char v40;
  unsigned __int16 *v41;
  __int128 v42;
  _QWORD v43[2];

  v43[1] = *MEMORY[0x24BDAC8D0];
  v41 = (unsigned __int16 *)v43;
  v42 = xmmword_22F4559B0;
  if (a2[1])
    sub_22F2F3E84((uint64_t)&v41, (uint64_t)a2);
  v33 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v8 = *(_WORD **)a3;
    v36 = *(_QWORD *)a3 + 2 * v7;
    v38 = (uint64_t *)(a1 + 472);
    do
    {
      v9 = (unsigned __int16)*v8;
      v10 = *v38;
      v11 = *(_QWORD *)(*v38 + 8 * v9);
      v12 = (_WORD *)*a2;
      v13 = a2[1];
      if (v13)
      {
        v14 = *(unsigned __int8 *)(v11 + 16);
        v15 = 2 * v13;
        v16 = (_WORD *)*a2;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * (unsigned __int16)*v16);
          if (*(unsigned __int8 *)(v17 + 16) == v14
            && (sub_22F358338(*(unsigned __int8 **)(v17 + 8), *(unsigned __int8 **)(v11 + 8)) & 1) != 0)
          {
            break;
          }
          ++v16;
          v15 -= 2;
          if (!v15)
            goto LABEL_32;
        }
      }
      else
      {
        v16 = (_WORD *)*a2;
      }
      if (v16 == &v12[v13])
      {
LABEL_32:
        if (*(unsigned __int8 *)(v11 + 18) << 8 != 768)
          (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, v33, v38, a4, a5, *(_QWORD *)(a1 + 320));
        goto LABEL_38;
      }
      v18 = *(_QWORD *)(v10 + 8 * (unsigned __int16)*v16);
      v19 = *(_WORD *)(v18 + 17);
      v20 = *(_WORD *)(v11 + 17);
      v21 = v20 ^ v19;
      v22 = v19 & 0xFF00;
      if (v21)
      {
        if ((v22 | 0x200) != 0x300
          || ((v20 & 0xFD00 | 0x200) == 0x300 ? (v23 = (a5 | *(_WORD *)(v11 + 17)) == 0) : (v23 = 1),
              v23))
        {
          v24 = *(_QWORD *)(a1 + 320);
          sub_22EF04954((uint64_t)__p, v11 + 8);
          if (v40 >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          if (v40 >= 0)
            v26 = (void *)(v40 & 0x7F);
          else
            v26 = __p[1];
          (*(void (**)(uint64_t, const char *, uint64_t, void **, void *, _QWORD, _QWORD))(*(_QWORD *)v24 + 56))(v24, "mutex", 5, v25, v26, *(unsigned int *)(v11 + 20), *(unsigned int *)(v18 + 20));
          if (v40 < 0)
            operator delete(__p[0]);
          if (!a5 || *(_BYTE *)(v11 + 17) != 1)
            goto LABEL_38;
          LOWORD(v9) = *v8;
        }
        else if (*(_WORD *)(v11 + 17))
        {
          goto LABEL_38;
        }
      }
      else if (!a5 || v22 != 256 || (v20 & 0xFF00) == 0x100)
      {
        goto LABEL_38;
      }
      *v16 = v9;
LABEL_38:
      ++v8;
    }
    while (v8 != (_WORD *)v36);
  }
  v27 = v41;
  if ((_QWORD)v42)
  {
    v28 = (uint64_t *)(a1 + 472);
    v29 = 2 * v42;
    do
    {
      v30 = *(_QWORD *)(*v28 + 8 * *v27);
      if (!sub_22EF054D8(*(unsigned __int16 **)v33, *(_QWORD *)(v33 + 8), *v28, *(unsigned __int8 **)(v30 + 8), *(_BYTE *)(v30 + 16)))
      {
        if (!a6 || *(unsigned __int8 *)(v30 + 18) << 8 != 768)
          (*(void (**)(uint64_t, unsigned __int16 **, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 16))(v30, &v41, v28, a4, a6, *(_QWORD *)(a1 + 320));
        if (a6 == 1)
          sub_22EF03258(a2, *v28, *(unsigned __int8 **)(v30 + 8), *(_BYTE *)(v30 + 16));
      }
      ++v27;
      v29 -= 2;
    }
    while (v29);
    v27 = v41;
  }
  if (v27 != (unsigned __int16 *)v43)
    free(v27);
}

uint64_t sub_22EF03694(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = a1 + 24;
  v4 = xmmword_22F4559B0;
  *(_OWORD *)(a1 + 8) = xmmword_22F4559B0;
  if (a2[1])
  {
    sub_22F2F3E84(a1, (uint64_t)a2);
    v4 = xmmword_22F4559B0;
  }
  *(_QWORD *)(a1 + 32) = a1 + 56;
  result = a1 + 32;
  *(_OWORD *)(a1 + 40) = v4;
  if (a2[5])
    result = sub_22F2F3E84(result, (uint64_t)(a2 + 4));
  v6 = a2[8];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
    ++*(_DWORD *)(v6 + 68);
  v7 = a2[9];
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    ++*(_DWORD *)(v7 + 68);
  v8 = a2[10];
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v8;
  return result;
}

int64x2_t *sub_22EF03754(int64x2_t *result, uint64_t a2, uint64_t a3)
{
  int64x2_t *v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int64x2_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  int64x2_t *v21;

  v5 = result;
  if (a3)
    ++*(_DWORD *)(a3 + 68);
  v6 = result[8].u64[0];
  v7 = (char *)result[7].i64[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)result[7].i64[0];
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    if ((uint64_t)(v6 - (_QWORD)v9) >> 3 > v11)
      v11 = (uint64_t)(v6 - (_QWORD)v9) >> 3;
    if (v6 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v21 = result + 8;
    if (v12 >> 60)
      sub_22E3B3F8C();
    v13 = (char *)operator new(16 * v12);
    v14 = &v13[16 * v10];
    *(_QWORD *)v14 = a2;
    *((_QWORD *)v14 + 1) = a3;
    if (v7 == v9)
    {
      v15 = vdupq_n_s64((unint64_t)v7);
      v16 = &v13[16 * v10];
    }
    else
    {
      v16 = &v13[16 * v10];
      do
      {
        v17 = *((_OWORD *)v7 - 1);
        v7 -= 16;
        *((_OWORD *)v16 - 1) = v17;
        v16 -= 16;
        *((_QWORD *)v7 + 1) = 0;
      }
      while (v7 != v9);
      v15 = v5[7];
      v6 = v5[8].u64[0];
    }
    v8 = v14 + 16;
    v5[7].i64[0] = (uint64_t)v16;
    v5[7].i64[1] = (uint64_t)(v14 + 16);
    v19 = v15;
    v5[8].i64[0] = (uint64_t)&v13[16 * v12];
    v20 = v6;
    v18 = v15.i64[0];
    result = (int64x2_t *)sub_22F356D88((uint64_t)&v18);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = v7 + 16;
  }
  v5[7].i64[1] = (uint64_t)v8;
  return result;
}

_QWORD *sub_22EF03880(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v17 = a3;
  *result = a4;
  if (a4)
  {
    v6 = result;
    v7 = *(_DWORD *)(a4 + 68);
    *(_DWORD *)(a4 + 68) = v7 + 1;
    v8 = a4;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 48);
      if (v9 == a3)
        break;
      if (v9 <= a3)
        v10 = 16;
      else
        v10 = 8;
      v8 = *(_QWORD *)(v8 + v10);
      if (!v8)
        return result;
    }
    *(_DWORD *)(a4 + 68) = v7 + 2;
    sub_22F3567F4(&v16, a2, (uint64_t *)a4, &v17);
    v11 = v16;
    v12 = *(_DWORD *)(a4 + 68) - 1;
    *(_DWORD *)(a4 + 68) = v12;
    if (!v12)
    {
      sub_22F3563E0(a4);
      v12 = *(_DWORD *)(a4 + 68);
    }
    v13 = v12 - 1;
    *(_DWORD *)(a4 + 68) = v13;
    if (!v13)
      sub_22F3563E0(a4);
    if (v11)
    {
      ++*(_DWORD *)(v11 + 68);
      result = (_QWORD *)sub_22F356C4C(&v16, a2, (_QWORD *)v11, v17, 0);
      *v6 = v16;
      v14 = *(_DWORD *)(v11 + 68) - 1;
      *(_DWORD *)(v11 + 68) = v14;
      if (!v14)
      {
        result = sub_22F3563E0(v11);
        v14 = *(_DWORD *)(v11 + 68);
      }
      v15 = v14 - 1;
      *(_DWORD *)(v11 + 68) = v15;
      if (!v15)
        return sub_22F3563E0(v11);
    }
    else
    {
      result = (_QWORD *)sub_22F356C4C(&v16, a2, 0, v17, 0);
      *v6 = v16;
    }
  }
  return result;
}

uint64_t *sub_22EF039CC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  *result = (uint64_t)(result + 2);
  result[1] = 0x1400000000;
  if (a2)
  {
    result[2] = a2;
    *((_DWORD *)result + 2) = 1;
    do
    {
      result = sub_22EF03A24(result);
      v2 = *((unsigned int *)result + 2);
    }
    while ((_DWORD)v2 && (*(_QWORD *)(*result + 8 * v2 - 8) & 3) != 1);
  }
  return result;
}

uint64_t *sub_22EF03A24(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  v4 = *a1 + 8 * v3;
  v5 = *(_QWORD *)(v4 - 8);
  if ((v5 & 3) == 3)
  {
    v9 = v3 - 1;
    *((_DWORD *)a1 + 2) = v9;
    if (v9)
    {
      v10 = v2 + 8 * v9;
      v11 = *(_QWORD *)(v10 - 8);
      if ((v11 & 3) != 0)
        v12 = v11 | 3;
      else
        v12 = v11 | 1;
      *(_QWORD *)(v10 - 8) = v12;
    }
  }
  else
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_QWORD *)(v4 - 8) & 3) == 1)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (!v7)
      {
        v8 = v5 | 3;
LABEL_13:
        *(_QWORD *)(v4 - 8) = v8;
        return a1;
      }
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7)
      {
        v8 = v5 | 1;
        goto LABEL_13;
      }
    }
    if (v3 >= *((_DWORD *)a1 + 3))
    {
      v14 = v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = v14;
      v2 = *a1;
      v3 = *((unsigned int *)a1 + 2);
    }
    *(_QWORD *)(v2 + 8 * v3) = v7;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

uint64_t sub_22EF03B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  _BYTE v18[160];
  void *v19;
  unsigned int v20;
  uint64_t v21;
  void *__s2;
  uint64_t i;
  _BYTE v24[160];
  void *__s1;
  unsigned int v26;
  _QWORD v27[22];

  v2 = a2;
  v27[20] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 40);
    if ((v3 & 0x40000000) == 0)
    {
      if ((v3 & 0x20000000) != 0)
      {
        v5 = *(_DWORD *)(a2 + 64);
      }
      else
      {
        v5 = sub_22EF016D0(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), a2 + 48);
        *(_DWORD *)(v2 + 64) = v5;
        *(_DWORD *)(v2 + 40) |= 0x20000000u;
      }
      LODWORD(__s1) = v5 & 0xFFFFFFFD;
      v6 = sub_22E3C32F4(a1, &__s1);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        while (1)
        {
          sub_22EF039CC((uint64_t *)&v19, v7);
          memset(v18, 0, sizeof(v18));
          sub_22EF039CC((uint64_t *)&__s1, v2);
          v8 = 0;
          memset(v24, 0, sizeof(v24));
          __s2 = v24;
          for (i = 0x1400000000; ; v8 = i)
          {
            v9 = v26;
            if (v26 == v8 && !memcmp(__s1, __s2, 8 * v8))
              break;
            v10 = v20;
            v11 = v19;
            if (!v20 && !memcmp(v19, v18, 0)
              || (v12 = *((_QWORD *)__s1 + v9 - 1) & 0xFFFFFFFFFFFFFFFCLL,
                  v13 = v11[v10 - 1] & 0xFFFFFFFFFFFFFFFCLL,
                  *(_QWORD *)(v12 + 48) != *(_QWORD *)(v13 + 48))
              || *(_DWORD *)(v12 + 56) != *(_DWORD *)(v13 + 56))
            {
              v14 = 0;
              goto LABEL_20;
            }
            do
              sub_22EF03A24((uint64_t *)&__s1);
            while (v26 && (*((_QWORD *)__s1 + v26 - 1) & 3) != 1);
            do
              sub_22EF03A24((uint64_t *)&v19);
            while (v20 && (*((_QWORD *)v19 + v20 - 1) & 3) != 1);
          }
          v14 = 1;
LABEL_20:
          if (__s2 != v24)
            free(__s2);
          if (__s1 != v27)
            free(__s1);
          if (v14 && !v20 && !memcmp(v19, v18, 0))
          {
            if (!*(_DWORD *)(v2 + 68))
              sub_22F3563E0(v2);
            v15 = 0;
            v17 = v7;
          }
          else
          {
            v15 = 1;
          }
          if (v19 != &v21)
            free(v19);
          if (!v15)
            return v17;
          v7 = *(_QWORD *)(v7 + 32);
          if (!v7)
          {
            *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) = v2;
            *(_QWORD *)(v2 + 32) = *(_QWORD *)(v6 + 8);
            goto LABEL_38;
          }
        }
      }
      else
      {
LABEL_38:
        *(_QWORD *)(v6 + 8) = v2;
        *(_DWORD *)(v2 + 40) |= 0x40000000u;
      }
    }
  }
  return v2;
}

uint64_t sub_22EF03E10(_QWORD *a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;

  v8 = a1[8];
  if (a1[7] != v8)
  {
    v9 = *(_QWORD *)(v8 - 8);
    a1[8] = v8 - 8;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v10 = 0;
    if (a4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v9 = sub_22E3CD3D4(a1[3] & 0xFFFFFFFFFFFFFFFELL, 72, 3);
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v10 = *(_DWORD *)(a2 + 40) & 0xFFFFFFF;
  if (a4)
  {
LABEL_4:
    v11 = *(_DWORD *)(a4 + 40) & 0xFFFFFFF;
    goto LABEL_8;
  }
LABEL_7:
  v11 = 0;
LABEL_8:
  if (v10 <= v11)
    v10 = v11;
  v12 = *(_DWORD *)(v9 + 40) & 0x80000000;
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = a4;
  *(_DWORD *)(v9 + 40) = ((v10 | v12) + 1) | 0x10000000;
  *(_OWORD *)(v9 + 48) = *a3;
  *(_QWORD *)(v9 + 64) = 0;
  if (a2)
    ++*(_DWORD *)(a2 + 68);
  if (a4)
    ++*(_DWORD *)(a4 + 68);
  v14 = (uint64_t *)a1[5];
  v13 = a1[6];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (_QWORD *)a1[4];
    v17 = v14 - v16;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      abort();
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_22E3B3F8C();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = (uint64_t *)&v21[8 * v17];
    *v22 = v9;
    v15 = v22 + 1;
    if (v14 != v16)
    {
      do
      {
        v23 = *--v14;
        *--v22 = v23;
      }
      while (v14 != v16);
      v14 = (uint64_t *)a1[4];
    }
    a1[4] = v22;
    a1[5] = v15;
    a1[6] = &v21[8 * v20];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v9;
    v15 = v14 + 1;
  }
  a1[5] = v15;
  return v9;
}

int64x2_t *sub_22EF03FB4(int64x2_t *result, uint64_t a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int64x2_t *v23;
  uint64_t v24;
  int v25;
  void **v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;

  v2 = *(_DWORD *)a2;
  if (((*(_DWORD *)a2 >> 18) & 0x3Fu) - 21 > 0xA)
    return result;
  v4 = (uint64_t *)result;
  result = (int64x2_t *)sub_22EFFBBCC(*(unsigned __int8 **)(a2 + 16));
  if (result->u8[0] != 161)
    return result;
  v5 = v4[1];
  if (!v5)
    return result;
  v6 = result[1].u64[0];
  v7 = v4[1];
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 48);
    if (v6 == v8)
      break;
    if (v6 >= v8)
      v9 = 16;
    else
      v9 = 8;
    v7 = *(_QWORD *)(v7 + v9);
    if (!v7)
      return result;
  }
  if ((v2 & 0xFC0000) == 0x540000)
  {
    v10 = *v4;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_DWORD *)(v5 + 68);
    *(_DWORD *)(v5 + 68) = v12 + 1;
    v40 = v6;
    v13 = v5;
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 48);
      if (v6 == v14)
        break;
      if (v6 >= v14)
        v15 = 16;
      else
        v15 = 8;
      v13 = *(_QWORD *)(v13 + v15);
      if (!v13)
      {
        v16 = v5;
        v17 = v5;
        v5 = 0;
        goto LABEL_19;
      }
    }
    v26 = (void **)(v10 + 88);
    v27 = (*(_QWORD *)(v10 + 96) - *(_QWORD *)(v10 + 88)) >> 5;
    *(_DWORD *)(v5 + 68) = v12 + 2;
    sub_22F3567F4(&v36, v10, (uint64_t *)v5, &v40);
    v28 = *(_DWORD *)(v5 + 68) - 1;
    *(_DWORD *)(v5 + 68) = v28;
    if (!v28)
      sub_22F3563E0(v5);
    v29 = v36;
    if (v36)
      ++*(_DWORD *)(v36 + 68);
    sub_22F356C4C((uint64_t *)&v37, v10, (_QWORD *)v29, v40, v27);
    v17 = v37;
    if (v29)
    {
      v30 = *(_DWORD *)(v29 + 68) - 1;
      *(_DWORD *)(v29 + 68) = v30;
      if (!v30)
      {
        sub_22F3563E0(v29);
        v30 = *(_DWORD *)(v29 + 68);
      }
      v31 = v30 - 1;
      *(_DWORD *)(v29 + 68) = v31;
      if (!v31)
        sub_22F3563E0(v29);
    }
    v32 = *(_DWORD *)(v5 + 68);
    *(_QWORD *)&v37 = v40;
    *((_QWORD *)&v37 + 1) = v11;
    v38 = 0;
    v39 = v5;
    *(_DWORD *)(v5 + 68) = v32 + 2;
    sub_22EF01568(v26, &v37);
    v33 = v39;
    if (v39)
    {
      v34 = *(_DWORD *)(v39 + 68) - 1;
      *(_DWORD *)(v39 + 68) = v34;
      if (!v34)
        sub_22F3563E0(v33);
    }
    v35 = *(_DWORD *)(v5 + 68) - 1;
    *(_DWORD *)(v5 + 68) = v35;
    if (!v35)
      sub_22F3563E0(v5);
    v16 = v4[1];
LABEL_19:
    v4[1] = v17;
    if (v16)
    {
      v18 = *(_DWORD *)(v16 + 68) - 1;
      *(_DWORD *)(v16 + 68) = v18;
      if (!v18)
        sub_22F3563E0(v16);
    }
    if (!v5)
      goto LABEL_29;
  }
  else
  {
    v19 = *v4;
    ++*(_DWORD *)(v5 + 68);
    sub_22EF03880(&v37, v19, v6, v5);
    v20 = v4[1];
    v4[1] = v37;
    if (v20)
    {
      v21 = *(_DWORD *)(v20 + 68) - 1;
      *(_DWORD *)(v20 + 68) = v21;
      if (!v21)
        sub_22F3563E0(v20);
    }
  }
  v22 = *(_DWORD *)(v5 + 68) - 1;
  *(_DWORD *)(v5 + 68) = v22;
  if (!v22)
    sub_22F3563E0(v5);
LABEL_29:
  v23 = (int64x2_t *)*v4;
  v24 = v4[1];
  if (!v24)
    return sub_22EF03754(v23, a2, 0);
  ++*(_DWORD *)(v24 + 68);
  result = sub_22EF03754(v23, a2, v24);
  v25 = *(_DWORD *)(v24 + 68) - 1;
  *(_DWORD *)(v24 + 68) = v25;
  if (!v25)
    return (int64x2_t *)sub_22F3563E0(v24);
  return result;
}

uint64_t sub_22EF04294(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;

  v3 = result;
  v4 = *a2;
  v5 = *(_QWORD *)result;
  v6 = *(unsigned int *)(result + 8);
  if ((_DWORD)v6)
  {
    v7 = *((unsigned __int8 *)a2 + 8);
    v8 = 16 * v6;
    v9 = (unsigned __int8 *)(v5 + 8);
    while (1)
    {
      if (*v9 == v7)
      {
        v10 = (unsigned __int8 *)*((_QWORD *)v9 - 1);
        if (*v4 == *v10)
        {
          result = sub_22EF04364(v4, v10);
          if ((result & 1) != 0)
            break;
        }
      }
      v9 += 16;
      v8 -= 16;
      if (!v8)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = a2[1];
    if (v6 >= *(_DWORD *)(v3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(unsigned int *)(v3 + 8);
      v5 = *(_QWORD *)v3;
    }
    v12 = (unsigned __int8 **)(v5 + 16 * v6);
    *v12 = v4;
    v12[1] = v11;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

uint64_t sub_22EF04364(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  size_t v12;

  v3 = a1;
  v4 = *a1;
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = a2 - 8;
        if (!a2)
          v5 = 0;
        v6 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        if (!v6 || (a2 = (unsigned __int8 *)*((_QWORD *)v5 + 4)) == 0)
        {
          v9 = v3 - 8;
          return v9 == v5;
        }
        v4 = *v6;
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        if (v4 == *a2)
          continue;
        return 0;
      case 1:
      case 2:
      case 3:
        return 1;
      case 4:
        v9 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v5 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        return v9 == v5;
      case 5:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        return v3 == a2;
      case 6:
      case 30:
        return sub_22F356DEC((uint64_t)v3, (uint64_t)a2);
      case 7:
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
        goto LABEL_14;
      case 8:
      case 9:
      case 10:
      case 16:
      case 17:
      case 18:
        return sub_22F356E5C((uint64_t)v3, (uint64_t)a2);
      case 11:
        return sub_22F356EC4((uint64_t)v3, (uint64_t)a2);
      case 12:
        v10 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if (*v10 != *v11)
          return 0;
        result = sub_22EF04364(v10, v11);
        if (!(_DWORD)result)
          return result;
        v9 = (unsigned __int8 *)*((_QWORD *)v3 + 7);
        v5 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
        return v9 == v5;
      case 13:
      case 15:
      case 27:
        goto LABEL_13;
      case 14:
        if (*((unsigned __int16 *)v3 + 1) == *((unsigned __int16 *)a2 + 1))
          goto LABEL_13;
        return 0;
      case 19:
      case 21:
        if (a2[2] != v3[2])
          return 0;
LABEL_13:
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
LABEL_14:
        v4 = *v3;
        if (v4 != *a2)
          return 0;
        continue;
      case 20:
        return sub_22F356F50((uint64_t)v3, (uint64_t)a2);
      case 28:
        v12 = *((_QWORD *)v3 + 3);
        if (v12 != *((_QWORD *)a2 + 3))
          return 0;
        if (!v12)
          return 1;
        return memcmp(*((const void **)v3 + 2), *((const void **)a2 + 2), v12) == 0;
      case 29:
        return sub_22F356FC8(v3, a2);
      default:
        return 0;
    }
  }
}

const char *sub_22EF04588(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3 && *(_BYTE *)(v3 + 16) == 45)
  {
    v4 = sub_22F114198(*(_QWORD *)(v3 + 24));
    if (v4 && (*(_BYTE *)(v4 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v4);
      v6 = *(uint64_t **)v5;
      v7 = *(unsigned int *)(v5 + 8);
      v8 = *(uint64_t **)v5;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        v8 = *(uint64_t **)v5;
        result = "mutex";
        while (*(_WORD *)(*v8 + 32) != 141)
        {
          ++v8;
          v9 -= 8;
          if (!v9)
            return result;
        }
      }
      if (v8 != &v6[v7])
      {
        do
        {
          v21 = *v6++;
          v20 = v21;
        }
        while (*(_WORD *)(v21 + 32) != 141);
        return *(const char **)(v20 + 40);
      }
    }
  }
  else
  {
    v11 = sub_22F10D4DC(v2);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 && (*(_BYTE *)(v12 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v12);
        v14 = *(uint64_t **)v13;
        v15 = *(unsigned int *)(v13 + 8);
        v16 = *(uint64_t **)v13;
        if ((_DWORD)v15)
        {
          v17 = 8 * v15;
          v16 = *(uint64_t **)v13;
          result = "mutex";
          while (*(_WORD *)(*v16 + 32) != 141)
          {
            ++v16;
            v17 -= 8;
            if (!v17)
              return result;
          }
        }
        if (v16 != &v14[v15])
        {
          do
          {
            v22 = *v14++;
            v20 = v22;
          }
          while (*(_WORD *)(v22 + 32) != 141);
          return *(const char **)(v20 + 40);
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v18 == 39 || (v18 & 0xFE) == 0x28)
      {
        v19 = sub_22F10ACF8(*v1);
        return (const char *)sub_22EF04588(v19);
      }
    }
  }
  return "mutex";
}

void sub_22EF04710()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22EF04724(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  void **v11;
  void *v12;
  void *__p[2];
  char v14;

  if (*(unsigned __int8 *)(a1 + 18) << 8 != 256 && !*(_BYTE *)(a1 + 16))
  {
    v10 = *(_BYTE **)(a1 + 8);
    if (!v10 || *v10 != 2)
    {
      sub_22EF04954((uint64_t)__p, a1 + 8);
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if (v14 >= 0)
        v12 = (void *)(v14 & 0x7F);
      else
        v12 = __p[1];
      (*(void (**)(uint64_t, const char *, uint64_t, void **, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a6 + 48))(a6, "mutex", 5, v11, v12, *(unsigned int *)(a1 + 20), a4, a5);
      if (v14 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_22EF047F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void **v12;
  void *v13;
  void *__p[2];
  char v15;

  sub_22EF04954((uint64_t)__p, a4 + 8);
  if (v15 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v15 >= 0)
    v13 = (void *)(v15 & 0x7F);
  else
    v13 = __p[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void *, _QWORD, _QWORD))(*(_QWORD *)a5 + 40))(a5, a6, a7, v12, v13, *(unsigned int *)(a1 + 20), *(unsigned int *)(a4 + 20));
  if (v15 < 0)
    operator delete(__p[0]);
}

_QWORD *sub_22EF04894(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, int a5)
{
  _QWORD *result;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;

  result = sub_22EF03258(a2, *a3, *(unsigned __int8 **)a4, *(_BYTE *)(a4 + 8));
  if (!*(_BYTE *)(a4 + 8))
  {
    v10 = *(unsigned __int8 **)a4;
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 16) = 257;
    *(_DWORD *)(v11 + 20) = a5;
    *(_QWORD *)v11 = &off_24FAB9EF0;
    v12 = (_QWORD *)v11;
    sub_22EF030E4(a2, (char **)a3, (uint64_t *)&v12);
    result = v12;
    if (v12)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
  }
  return result;
}

void sub_22EF04954(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string v5;

  if (*(_BYTE *)(a2 + 8))
  {
    sub_22F357050((uint64_t)&v5, *(unsigned __int8 **)a2);
    v3 = std::string::insert(&v5, 0, "!");
    v4 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)a1 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 16) = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_22F357050(a1, *(unsigned __int8 **)a2);
  }
}

uint64_t sub_22EF049E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22EF04AD8(uint64_t a1, _QWORD *a2)
{
  _DWORD *v4;
  int v5;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *__p[2];
  char v16;

  v4 = *(_DWORD **)(a1 + 24);
  if (v4)
  {
    sub_22F35899C(v4, (uint64_t)__p);
    if (v16 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v16 >= 0)
      v14 = v16 & 0x7F;
    else
      v14 = (uint64_t)__p[1];
    sub_22EF0506C(a2, (uint64_t)v13, v14);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    switch((char)v5)
    {
      case 0:
        v6 = "void";
        goto LABEL_15;
      case 1:
        if (*(_BYTE *)(a1 + 32))
        {
          v6 = "true";
          goto LABEL_15;
        }
        v6 = "false";
LABEL_26:
        v11 = a2;
        v12 = 5;
        goto LABEL_27;
      case 2:
        switch(BYTE1(v5))
        {
          case 2:
            if ((v5 & 0x10000) != 0)
            {
              LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
              v9 = __p;
              v8 = a2;
            }
            else
            {
              v7 = sub_22EF0506C(a2, (uint64_t)"'", 1);
              LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
              v8 = sub_22EF0506C(v7, (uint64_t)__p, 1);
              v9 = (void **)"'";
            }
            sub_22EF0506C(v8, (uint64_t)v9, 1);
            break;
          case 3:
            if ((v5 & 0x10000) != 0)
              std::ostream::operator<<();
            else
              std::ostream::operator<<();
            break;
          case 4:
            if ((v5 & 0x10000) != 0)
              std::ostream::operator<<();
            else
              std::ostream::operator<<();
            break;
          case 5:
            if ((v5 & 0x10000) != 0)
              std::ostream::operator<<();
            else
              std::ostream::operator<<();
            break;
          default:
            goto LABEL_12;
        }
        return;
      case 3:
        v10 = BYTE1(v5);
        if (v10 == 5)
        {
          std::ostream::operator<<();
        }
        else if (v10 == 4)
        {
          std::ostream::operator<<();
        }
        else
        {
LABEL_12:
          v6 = "#lit";
LABEL_15:
          v11 = a2;
          v12 = 4;
LABEL_27:
          sub_22EF0506C(v11, (uint64_t)v6, v12);
        }
        break;
      case 4:
        sub_22EF0506C(a2, (uint64_t)"\"", 1);
        std::ostream::write();
        sub_22EF0506C(a2, (uint64_t)"\"", 1);
        return;
      case 5:
        v6 = "#ptr";
        goto LABEL_15;
      case 6:
        v6 = "#vref";
        goto LABEL_26;
      default:
        goto LABEL_12;
    }
  }
}

void sub_22EF04D98(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v6;

  sub_22EFC683C((uint64_t *)(a1 + 40), __p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v6 >= 0)
    v4 = v6 & 0x7F;
  else
    v4 = (uint64_t)__p[1];
  sub_22EF0506C(a2, (uint64_t)v3, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_22EF04E00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *__p[2];
  char v15;

  v6 = *(unsigned __int8 **)(a2 + 16);
  if (!*(_BYTE *)(a1 + 2))
    goto LABEL_7;
  v7 = *v6;
  if (v7 != 2)
  {
    if (v7 == 11)
    {
      v8 = *((_QWORD *)v6 + 2);
      if (*(_BYTE *)v8 == 5 && !*((_QWORD *)v6 + 3) && *(_WORD *)(v8 + 2) == 2)
      {
LABEL_21:
        sub_22EF05290(a2);
        std::ostream::write();
        return;
      }
    }
LABEL_7:
    sub_22F3570D0(a1, v6, a3, 1, 1);
    if (*(_BYTE *)(a1 + 2) && (*(_WORD *)(a2 + 2) & 1) != 0)
    {
      v9 = "->";
      v10 = a3;
      v11 = 2;
    }
    else
    {
      v9 = ".";
      v10 = a3;
      v11 = 1;
    }
    sub_22EF0506C(v10, (uint64_t)v9, v11);
    goto LABEL_21;
  }
  sub_22EF0506C(a3, (uint64_t)"&", 1);
  sub_22EFB9E74(*(_QWORD *)(a2 + 56), __p);
  if (v15 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v15 >= 0)
    v13 = v15 & 0x7F;
  else
    v13 = (uint64_t)__p[1];
  sub_22EF0506C(a3, (uint64_t)v12, v13);
  if (v15 < 0)
    operator delete(__p[0]);
}

uint64_t sub_22EF04F4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)"new ", 4);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 3, 1);
}

uint64_t sub_22EF04FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::ostream::write();
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 2, 1);
}

uint64_t sub_22EF05018(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)"return ", 7);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 4, 1);
}

_QWORD *sub_22EF0506C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  std::locale::__imp *p_b;
  uint64_t v17;
  uint64_t v18;
  std::locale *v19;
  uint64_t v20;
  _BYTE v22[16];
  std::locale __b;
  size_t v24;
  int64_t v25;

  MEMORY[0x2348A0CEC](v22, a1);
  if (v22[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
      v9 = a2 + a3;
    else
      v9 = a2;
    v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_30:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_31;
      }
    }
    else if (!v7)
    {
      goto LABEL_30;
    }
    v12 = *((_QWORD *)v6 + 3);
    v13 = v12 <= a3;
    v14 = v12 - a3;
    if (v13)
      v15 = 0;
    else
      v15 = v14;
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v15 >= 1)
    {
      if (v15 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v15 >= 0x17)
      {
        v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v17 = v15 | 7;
        v18 = v17 + 1;
        p_b = (std::locale::__imp *)operator new(v17 + 1);
        v24 = v15;
        v25 = v18 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v25) = v15;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v10, v15);
      *((_BYTE *)p_b + v15) = 0;
      v19 = v25 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v20 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v19, v15);
      if (SHIBYTE(v25) < 0)
        operator delete(__b.__locale_);
      if (v20 != v15)
        goto LABEL_30;
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_30;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x2348A0CF8](v22);
  return a1;
}

const char *sub_22EF05290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40);
  if ((v1 & 7) != 0)
  {
    v3 = a1 + 24;
    if (!*(_BYTE *)(a1 + 48))
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_WORD *)(a1 + 47) = 256;
      v7 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 1;
      v9 = 0;
      v10 = 0;
      v8 = 0;
      v6 = MEMORY[0x24BED83D8] + 16;
      v14 = a1 + 24;
      llvm::raw_ostream::SetBufferAndMode();
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56), &v6);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v6);
    }
    if (*(char *)(a1 + 47) >= 0)
      return (const char *)v3;
    else
      return *(const char **)(a1 + 24);
  }
  else
  {
    v5 = v1 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      return (const char *)(*(_QWORD *)(v5 + 16) + 16);
    else
      return "";
  }
}

_QWORD *sub_22EF0537C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a2;
  v6 = *a2;
  if (v6 == 5)
  {
    sub_22EF0506C(a3, (uint64_t)"let ", 4);
    std::ostream::write();
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_22EF0506C(v7, (uint64_t)" = ", 3);
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 4);
  }
  else if (v6 != 16)
  {
    sub_22EF0506C(a3, (uint64_t)"let _x", 6);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_22EF0506C(v8, (uint64_t)" = ", 3);
  }
  sub_22F3570D0(a1, v4, a3, 6, v6 == 5);
  v9 = sub_22EF0506C(a3, (uint64_t)";", 1);
  return sub_22EF0506C(v9, (uint64_t)"\n", 1);
}

uint64_t sub_22EF05460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x24BEDB7F0];
  v2 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  return std::iostream::~basic_iostream();
}

uint64_t sub_22EF054D8(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 a5)
{
  unsigned __int16 *i;
  int v10;
  uint64_t v11;
  uint64_t v12;

  i = a1;
  if (a2)
  {
    v10 = a5;
    v11 = 2 * a2;
    for (i = a1; ; ++i)
    {
      v12 = *(_QWORD *)(a3 + 8 * *i);
      if (*(unsigned __int8 *)(v12 + 16) == v10 && (sub_22F358338(*(unsigned __int8 **)(v12 + 8), a4) & 1) != 0)
        break;
      v11 -= 2;
      if (!v11)
        return 0;
    }
  }
  if (i == &a1[a2])
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * *i);
}

BOOL sub_22EF0557C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *a2;
  if (v2 != 12)
  {
    if (v2 == 4)
    {
      v3 = *((_QWORD *)a2 + 2);
      if (!sub_22EFC8010(v3))
      {
        v4 = *(_QWORD *)(v3 + 16);
        v5 = v4 & 0xFFFFFFFFFFFFFFF8;
        if ((v4 & 4) != 0)
          v5 = *(_QWORD *)v5;
        return (*(_WORD *)(v5 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD;
      }
    }
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 328);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (_QWORD *)*v9;
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  return v9 == v11;
}

uint64_t sub_22EF0561C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  size_t v16;

  v3 = a1;
  v4 = *a1;
  result = 1;
  while (2)
  {
    switch(v4)
    {
      case 0:
        v6 = a2 - 8;
        if (!a2)
          v6 = 0;
        v7 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        if (!v7 || (a2 = (unsigned __int8 *)*((_QWORD *)v6 + 4)) == 0)
        {
          v11 = v3 - 8;
          goto LABEL_29;
        }
        v4 = *v7;
        if (v4 == 2)
          goto LABEL_36;
        v8 = *a2;
        if (v8 == 2)
          goto LABEL_36;
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        if (v4 == v8)
          continue;
        goto LABEL_20;
      case 1:
      case 2:
      case 3:
        return result;
      case 4:
        v11 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        goto LABEL_29;
      case 5:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        v10 = v3 == a2;
        goto LABEL_30;
      case 6:
      case 30:
        return sub_22F358378((uint64_t)v3, (uint64_t)a2);
      case 7:
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 3);
        v4 = *v3;
        if (v4 == 2)
          goto LABEL_36;
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
        goto LABEL_18;
      case 8:
      case 9:
      case 10:
      case 16:
      case 17:
      case 18:
        return sub_22F358414((uint64_t)v3, (uint64_t)a2);
      case 11:
        return sub_22F3584A8((uint64_t)v3, (uint64_t)a2);
      case 12:
        v12 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v13 = *v12;
        if (v13 == 2)
          goto LABEL_28;
        v14 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v15 = *v14;
        if (v15 == 2)
          goto LABEL_28;
        if (v13 != v15)
          goto LABEL_20;
        result = sub_22EF0561C(v12, v14);
        if (!(_DWORD)result)
          return result;
LABEL_28:
        v11 = (unsigned __int8 *)*((_QWORD *)v3 + 7);
        v6 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
LABEL_29:
        v10 = v11 == v6;
        goto LABEL_30;
      case 13:
      case 15:
      case 27:
        goto LABEL_16;
      case 14:
        if (*((unsigned __int16 *)v3 + 1) == *((unsigned __int16 *)a2 + 1))
          goto LABEL_16;
        goto LABEL_20;
      case 19:
      case 21:
        if (a2[2] != v3[2])
          goto LABEL_20;
LABEL_16:
        v3 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v4 = *v3;
        if (v4 == 2)
          goto LABEL_36;
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
LABEL_18:
        v9 = *a2;
        if (v9 == 2)
          goto LABEL_36;
        if (v4 == v9)
          continue;
LABEL_20:
        result = 0;
        break;
      case 20:
        return sub_22F358560((uint64_t)v3, (uint64_t)a2);
      case 28:
        v16 = *((_QWORD *)v3 + 3);
        if (v16 != *((_QWORD *)a2 + 3))
          goto LABEL_20;
        if (v16)
        {
          v10 = memcmp(*((const void **)v3 + 2), *((const void **)a2 + 2), v16) == 0;
LABEL_30:
          result = v10;
        }
        else
        {
LABEL_36:
          result = 1;
        }
        break;
      case 29:
        return sub_22F358604(v3, a2);
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_22EF05884()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22EF05898(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FAB9F28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_22EF058E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FAB9F28;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_22EF05920(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 **v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 **v22;
  unint64_t v23;
  _DWORD *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_22EF05BD8(v4, *a2, *(_QWORD *)(a1 + 16));
  v6 = *(_DWORD *)(v5 + 48) == 1;
  if ((*(_DWORD *)(v5 + 48) - 1) < 2)
    return v6;
  v7 = v5;
  if (!*(_DWORD *)(v5 + 8))
    return v6;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 48) = 1;
  v10 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v10)
  {
LABEL_42:
    *(_DWORD *)(v7 + 48) = 2;
    return v6;
  }
  v11 = *(uint64_t **)v7;
  v12 = *(_QWORD *)v7 + 8 * v10;
  while (2)
  {
    v13 = *v11;
    v14 = *(unsigned __int16 ***)(a1 + 32);
    v15 = v14[1];
    if (!v15)
      goto LABEL_31;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *v14;
    v18 = 2 * (_QWORD)v15;
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 472) + 8 * *v17);
      if (*(_BYTE *)(v19 + 16))
      {
LABEL_11:
        v20 = 0;
        goto LABEL_12;
      }
      v20 = *(unsigned __int8 **)(v19 + 8);
      if (v20)
      {
        v21 = *v20;
        if (v21 == 4)
        {
          v22 = (unsigned __int8 **)(v20 + 16);
        }
        else
        {
          if (v21 != 12)
            goto LABEL_11;
          v22 = (unsigned __int8 **)(v20 + 56);
        }
        v20 = *v22;
      }
LABEL_12:
      if (v20 == (unsigned __int8 *)v13)
        break;
      ++v17;
      v18 -= 2;
      if (!v18)
        goto LABEL_31;
    }
    v23 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) & 7) != 0 || v23 == 0)
    {
      v27 = 0;
      v26 = "";
    }
    else
    {
      v25 = *(_DWORD **)(v23 + 16);
      v28 = *v25;
      v26 = (const char *)(v25 + 4);
      v27 = v28;
    }
    v29 = 0;
    v30 = *(_QWORD *)(v13 + 40);
    v31 = "";
    if ((v30 & 7) == 0)
    {
      v32 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v32)
      {
        v33 = *(_DWORD **)(v32 + 16);
        v34 = *v33;
        v31 = (const char *)(v33 + 4);
        v29 = v34;
      }
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD, const char *, uint64_t, const char *, uint64_t, _QWORD))(**(_QWORD **)(v16 + 320) + 104))(*(_QWORD *)(v16 + 320), **(_QWORD **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), v26, v27, v31, v29, **(unsigned int **)(a1 + 56));
LABEL_31:
    v35 = *(_QWORD *)(a1 + 64);
    v47[0] = v13;
    v36 = *(_QWORD *)(v35 + 24);
    if (v36)
    {
      if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v36 + 48))(v36, v47))
      {
        v47[0] = 0;
        if (!sub_22F24C318(*(_QWORD *)(v4 + 24), *(_DWORD *)(v4 + 40), v2, v47)
          || v47[0] == *(_QWORD *)(v4 + 24) + 16 * *(unsigned int *)(v4 + 40))
        {
          v48 = v2;
          v49 = 1;
          sub_22F285F28((uint64_t)v47, v4 + 24, &v48, &v49);
          v37 = 0;
          v38 = *(_QWORD *)(v2 + 40);
          v39 = "";
          if ((v38 & 7) == 0)
          {
            v40 = v38 & 0xFFFFFFFFFFFFFFF8;
            if (v40)
            {
              v41 = *(_DWORD **)(v40 + 16);
              v42 = *v41;
              v39 = (const char *)(v41 + 4);
              v37 = v42;
            }
          }
          (*(void (**)(_QWORD, const char *, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 320)
                                                                        + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 320), v39, v37, *(unsigned int *)(v2 + 24));
        }
      }
      if (++v11 == (uint64_t *)v12)
        goto LABEL_42;
      continue;
    }
    break;
  }
  sub_22E4A06C4();
  return sub_22EF05BD8(v44, v45, v46);
}

uint64_t sub_22EF05BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  uint64_t v8;

  v8 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8))
    v6 = v8 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v6 = 1;
  if (v6)
    return sub_22EF05C64(a1, a2, a3);
  else
    return *(_QWORD *)(v8 + 8);
}

uint64_t sub_22EF05C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t i;
  unsigned __int8 *v21;
  char v22;
  BOOL v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 **v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  BOOL v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a2;
  v6 = sub_22F3586CC(a1, &v39);
  v7 = v6[1];
  if (!v7)
  {
    v8 = v6;
    v9 = operator new();
    *(_OWORD *)(v9 + 32) = 0u;
    *(_QWORD *)(v9 + 48) = 0;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 0x400000000;
    v10 = (void **)v8[1];
    v8[1] = v9;
    if (v10)
    {
      if (*v10 != v10 + 2)
        free(*v10);
      MEMORY[0x2348A0E9C](v10, 0x1080C402C4B44A1);
      v7 = v8[1];
    }
    else
    {
      v7 = v9;
    }
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v13 = *v12;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (v13 != (uint64_t *)v15)
    {
      while (1)
      {
        v16 = *v13;
        v17 = *(unsigned __int16 *)(*v13 + 32);
        if (v17 == 94)
          break;
        if (v17 == 95)
        {
          v18 = *(unsigned int *)(v16 + 36);
          if ((_DWORD)v18)
          {
            v19 = *(unsigned __int8 ***)(v16 + 40);
            for (i = 8 * v18; i; i -= 8)
            {
              v21 = sub_22EF085F4((uint64_t *)(a3 + 104), *v19, 0);
              if (v22)
                v23 = 1;
              else
                v23 = v21 == 0;
              if (!v23)
              {
                v24 = *v21;
                if (v24 == 4)
                {
                  v25 = (uint64_t *)(v21 + 16);
LABEL_24:
                  v26 = *v25;
                  if (*v25)
                  {
                    v27 = *(unsigned int *)(v7 + 8);
                    if (v27 >= *(unsigned int *)(v7 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v27 = *(unsigned int *)(v7 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v7 + 8 * v27) = v26;
                    ++*(_DWORD *)(v7 + 8);
                    v40 = 0;
                    if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v26, &v40))
                      v28 = v40 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
                    else
                      v28 = 1;
                    if (v28)
                      sub_22EF05C64(a1, v26, a3);
                  }
                  goto LABEL_25;
                }
                if (v24 == 12)
                {
                  v25 = (uint64_t *)(v21 + 56);
                  goto LABEL_24;
                }
              }
LABEL_25:
              ++v19;
            }
          }
        }
LABEL_50:
        if (++v13 == (uint64_t *)v15)
          return v7;
      }
      v29 = *(unsigned int *)(v16 + 36);
      if (!(_DWORD)v29)
        goto LABEL_50;
      v30 = *(unsigned __int8 ***)(v16 + 40);
      v31 = 8 * v29;
      while (1)
      {
        v32 = sub_22EF085F4((uint64_t *)(a3 + 104), *v30, 0);
        if (v33)
          v34 = 1;
        else
          v34 = v32 == 0;
        if (!v34)
        {
          v35 = *v32;
          if (v35 == 4)
          {
            v36 = v32 + 16;
LABEL_45:
            if (*v36)
            {
              v37 = sub_22EF05BD8(a1, *v36, a3);
              v38 = *(unsigned int *)(v37 + 8);
              if (v38 >= *(unsigned int *)(v37 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v38 = *(unsigned int *)(v37 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = a2;
              ++*(_DWORD *)(v37 + 8);
            }
            goto LABEL_49;
          }
          if (v35 == 12)
          {
            v36 = v32 + 56;
            goto LABEL_45;
          }
        }
LABEL_49:
        ++v30;
        v31 -= 8;
        if (!v31)
          goto LABEL_50;
      }
    }
  }
  return v7;
}

_QWORD *sub_22EF05F60(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void ***v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (char *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = (void ***)((char *)v4 + 8);
      v14 = v12;
      do
      {
        v15 = (uint64_t)*(v13 - 1);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          v16 = v20;
          *v20 = *(v13 - 1);
          v17 = *v13;
          *v13 = 0;
          v16[1] = v17;
          ++*(_DWORD *)(a1 + 8);
          sub_22EF060B8(v13);
        }
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 16 * v18;
      do
      {
        *result = -4096;
        result += 2;
        v19 -= 16;
      }
      while (v19);
    }
  }
  return result;
}

void ***sub_22EF060B8(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x1080C402C4B44A1);
  }
  return a1;
}

unsigned int *sub_22EF06110(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, _BYTE *a4)
{
  unsigned int *v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = (unsigned int *)a2;
  if (!a2)
    return v4;
  v8 = *a2;
  if ((v8 + 113) >= 0xFBu)
  {
    if (sub_22EFFA8F0((uint64_t)a2) == 499)
    {
      v11 = *(_QWORD *)((char *)&v4[2 * (((unint64_t)*v4 >> 18) & 1) + 2] + ((unint64_t)*v4 >> 24));
      v54 = *a3;
      if (v54)
        ++*(_DWORD *)(v54 + 68);
      v4 = (unsigned int *)sub_22EF06110(a1, v11, &v54, a4);
      v10 = v54;
      if (v54)
        goto LABEL_63;
    }
    return v4;
  }
  if (v8 == 153)
  {
    v12 = *((_QWORD *)a2 + 2);
    v52 = *a3;
    if (v52)
      ++*(_DWORD *)(v52 + 68);
    v4 = (unsigned int *)sub_22EF06110(a1, v12, &v52, a4);
    v10 = v52;
    if (v52)
      goto LABEL_63;
    return v4;
  }
  if (v8 == 214)
  {
    v9 = *((_QWORD *)a2 + 3);
    v53 = *a3;
    if (v53)
      ++*(_DWORD *)(v53 + 68);
    v4 = (unsigned int *)sub_22EF06110(a1, v9, &v53, a4);
    v10 = v53;
    if (!v53)
      return v4;
LABEL_63:
    v30 = *(_DWORD *)(v10 + 68) - 1;
    *(_DWORD *)(v10 + 68) = v30;
    if (!v30)
      sub_22F3563E0(v10);
    return v4;
  }
  if ((v8 & 0xFE) != 0xAC)
  {
    if (v8 == 233)
    {
      if ((*(_DWORD *)a2 & 0x7C0000) == 0x240000)
      {
        *a4 ^= 1u;
        v19 = *((_QWORD *)a2 + 2);
        v20 = *a3;
        v49 = v20;
        if (v20)
          ++*(_DWORD *)(v20 + 68);
        v4 = (unsigned int *)sub_22EF06110(a1, v19, &v49, a4);
        v10 = v49;
        if (v49)
          goto LABEL_63;
        return v4;
      }
    }
    else
    {
      if (v8 == 161)
      {
        v14 = *a3;
        if (*a3)
        {
          v15 = *((_QWORD *)a2 + 2);
          v16 = *a3;
          while (1)
          {
            v17 = *(_QWORD *)(v16 + 48);
            if (v17 == v15)
              break;
            if (v17 <= v15)
              v18 = 16;
            else
              v18 = 8;
            v16 = *(_QWORD *)(v16 + v18);
            if (!v16)
              goto LABEL_59;
          }
          v27 = *(unsigned int *)(v16 + 56);
          if (!(_DWORD)v27)
          {
LABEL_59:
            v26 = 0;
            v29 = *a3;
            goto LABEL_60;
          }
          while (1)
          {
            v28 = *(_QWORD *)(a1 + 424) + 32 * v27;
            v26 = *(_QWORD *)(v28 + 8);
            if (v26)
              break;
            v27 = *(unsigned int *)(v28 + 16);
            if (!(_DWORD)v27)
              goto LABEL_59;
          }
          v29 = *(_QWORD *)(v28 + 24);
          if (v29)
            ++*(_DWORD *)(v29 + 68);
          *a3 = v29;
          v34 = *(_DWORD *)(v14 + 68) - 1;
          *(_DWORD *)(v14 + 68) = v34;
          if (!v34)
          {
            sub_22F3563E0(v14);
            v26 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 32 * v27 + 8);
            v29 = *a3;
          }
LABEL_60:
          v50 = v29;
          if (v29)
            ++*(_DWORD *)(v29 + 68);
        }
        else
        {
          v26 = 0;
          v50 = 0;
        }
        v4 = (unsigned int *)sub_22EF06110(a1, v26, &v50, a4);
        v10 = v50;
        if (v50)
          goto LABEL_63;
        return v4;
      }
      if ((v8 & 0xFE) == 0x70)
      {
        v21 = (*(_DWORD *)a2 >> 18) & 0x3F;
        if ((v21 - 14) < 2)
        {
          if ((*(_DWORD *)a2 & 0xFC0000) == 0x3C0000)
            *a4 ^= 1u;
          v48 = 0;
          if (sub_22EF06640(*((unsigned __int8 **)a2 + 3), &v48))
          {
            if (!v48)
              *a4 ^= 1u;
            v32 = *((_QWORD *)v4 + 2);
            v33 = *a3;
            v47 = v33;
            if (v33)
              ++*(_DWORD *)(v33 + 68);
            v4 = (unsigned int *)sub_22EF06110(a1, v32, &v47, a4);
            v10 = v47;
            if (v47)
              goto LABEL_63;
            return v4;
          }
          v48 = 0;
          if (sub_22EF06640(*((unsigned __int8 **)v4 + 2), &v48))
          {
            if (!v48)
              *a4 ^= 1u;
            v37 = *((_QWORD *)v4 + 3);
            v38 = *a3;
            v46 = v38;
            if (v38)
              ++*(_DWORD *)(v38 + 68);
            v4 = (unsigned int *)sub_22EF06110(a1, v37, &v46, a4);
            v10 = v46;
            if (v46)
              goto LABEL_63;
            return v4;
          }
        }
        else
        {
          if (v21 == 19)
          {
            v35 = *((_QWORD *)a2 + 3);
            v36 = *a3;
            v45 = v36;
            if (v36)
              ++*(_DWORD *)(v36 + 68);
            v4 = (unsigned int *)sub_22EF06110(a1, v35, &v45, a4);
            v10 = v45;
            if (v45)
              goto LABEL_63;
            return v4;
          }
          if (v21 == 20)
          {
            v22 = *((_QWORD *)a2 + 3);
            v23 = *a3;
            v44 = v23;
            if (v23)
              ++*(_DWORD *)(v23 + 68);
            v4 = (unsigned int *)sub_22EF06110(a1, v22, &v44, a4);
            v10 = v44;
            if (v44)
              goto LABEL_63;
            return v4;
          }
        }
      }
      else if (v8 == 103)
      {
        v48 = 0;
        v43 = 0;
        if (sub_22EF06640(*((unsigned __int8 **)a2 + 4), &v48))
        {
          if (sub_22EF06640(*((unsigned __int8 **)v4 + 5), &v43))
          {
            if (v48 && !v43)
            {
              v24 = *((_QWORD *)v4 + 3);
              v25 = *a3;
              v42 = v25;
              if (v25)
                ++*(_DWORD *)(v25 + 68);
              v4 = (unsigned int *)sub_22EF06110(a1, v24, &v42, a4);
              v10 = v42;
              if (v42)
                goto LABEL_63;
              return v4;
            }
            if (!v48 && v43)
            {
              *a4 ^= 1u;
              v39 = *((_QWORD *)v4 + 3);
              v40 = *a3;
              v41 = v40;
              if (v40)
                ++*(_DWORD *)(v40 + 68);
              v4 = (unsigned int *)sub_22EF06110(a1, v39, &v41, a4);
              v10 = v41;
              if (v41)
                goto LABEL_63;
              return v4;
            }
          }
        }
      }
    }
    return 0;
  }
  v13 = *((_QWORD *)a2 + 2);
  v51 = *a3;
  if (v51)
    ++*(_DWORD *)(v51 + 68);
  v4 = (unsigned int *)sub_22EF06110(a1, v13, &v51, a4);
  v10 = v51;
  if (v51)
    goto LABEL_63;
  return v4;
}

uint64_t sub_22EF06640(unsigned __int8 *a1, BOOL *a2)
{
  int v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  while (1)
  {
    v3 = *a1;
    if (v3 != 153)
      break;
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  }
  if (*a1 <= 0xAEu)
  {
    if (v3 != 117)
    {
      if (v3 != 128)
        return 0;
      goto LABEL_8;
    }
    v4 = (*(_DWORD *)a1 >> 18) & 1;
LABEL_10:
    *a2 = v4;
    return 1;
  }
  if (v3 == 175)
  {
LABEL_8:
    *a2 = 0;
    return 1;
  }
  if (v3 == 181)
  {
    sub_22F257F94((uint64_t)(a1 + 16), (llvm::APInt *)&v7);
    v6 = v8;
    if (v8 > 0x40)
    {
      *a2 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v7) != v6;
      if (v7)
        MEMORY[0x2348A0E84](v7, 0x1000C8000313F17);
      return 1;
    }
    LOBYTE(v4) = v7 != 0;
    goto LABEL_10;
  }
  return 0;
}

void sub_22EF06720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (((*(_DWORD *)a2 >> 18) & 0x3Fu) - 21 <= 0xA)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      ++*(_DWORD *)(v5 + 68);
    v6 = (*(_DWORD *)(a1 + 48) + 1);
    v7 = *(_QWORD *)(v4 + 448);
    if (*(_QWORD *)(v7 + 16 * v6) == a2)
    {
      *(_DWORD *)(a1 + 48) = v6;
      v9 = *(_QWORD *)(v7 + 16 * v6 + 8);
      if (v9)
        ++*(_DWORD *)(v9 + 68);
      v8 = v5;
    }
    else
    {
      v8 = 0;
      v9 = v5;
    }
    *(_QWORD *)(a1 + 40) = v9;
    if (v5 && (v10 = *(_DWORD *)(v5 + 68) - 1, (*(_DWORD *)(v5 + 68) = v10) == 0))
    {
      sub_22F3563E0(v5);
      if (v8)
      {
LABEL_13:
        v11 = *(_DWORD *)(v8 + 68) - 1;
        *(_DWORD *)(v8 + 68) = v11;
        if (!v11)
          sub_22F3563E0(v8);
      }
    }
    else if (v8)
    {
      goto LABEL_13;
    }
    sub_22EF06B10((uint64_t *)a1, *(unsigned __int8 **)(a2 + 16), 1, 1);
  }
}

void sub_22EF06820(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *((_QWORD *)a2 + 2);
  if (v4 && sub_22EFD3AF0(v4, &v15))
  {
    v5 = (unsigned __int8 **)(a2 + 40);
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = (unsigned __int8 **)(v8 + 48);
    if (v7)
      v5 = v9;
    sub_22EF06B10(a1, *v5, 0, 1);
  }
  else
  {
    v10 = *a2;
    v11 = v10 == 119;
    if (v10 == 119)
      v12 = a2;
    else
      v12 = 0;
    v13 = (uint64_t)(v12 + 48);
    if (v11)
      v14 = v13;
    else
      v14 = (uint64_t)(a2 + 40);
    sub_22EF0761C(a1, v4, v14, v14 + 8 * *((unsigned int *)a2 + 8), 0);
  }
}

void sub_22EF068D0(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  int v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  if (v4 != 141)
  {
    if (v4 == 140)
    {
      v5 = *(unsigned __int8 **)&a2[a2[3]];
      v6 = *v5;
      v7 = sub_22F060FB4((uint64_t)a2);
      if (v6 == 188 && v7 != 0)
      {
        v9 = *(_DWORD *)v5;
        v10 = (unsigned int *)sub_22F060ED0((uint64_t)a2);
        if ((v9 & 0x40000) != 0)
          sub_22EF06E88(a1, v10, 0, 1);
        else
          sub_22EF06B10(a1, (unsigned __int8 *)v10, 0, 1);
      }
    }
    v24 = *(unsigned int *)a2;
    v25 = (unsigned __int8 **)&a2[v24 >> 24];
    v26 = sub_22EFFA604(*v25);
    if (v26)
    {
      if ((*(_DWORD *)(v26 + 28) & 0x7Eu) - 52 >= 6)
        v18 = 0;
      else
        v18 = v26;
    }
    else
    {
      v18 = 0;
    }
    v20 = (uint64_t)&v25[((v24 >> 18) & 1) + 1];
    v21 = v20 + 8 * *((unsigned int *)a2 + 4);
    v23 = a1;
    v22 = 0;
    goto LABEL_27;
  }
  v11 = *(_QWORD *)a2;
  v12 = HIDWORD(*(_QWORD *)a2) & 0x3FLL;
  if ((HIDWORD(*(_QWORD *)a2) & 0x3F) > 0x28)
  {
    if ((_DWORD)v12 != 41 && (_DWORD)v12 != 43)
    {
LABEL_16:
      sub_22EF06B10(a1, *(unsigned __int8 **)&a2[8 * ((v11 >> 18) & 1) + 8 + BYTE3(v11)], 0, 1);
      v15 = *(unsigned int *)a2;
      v16 = (unsigned __int8 **)&a2[v15 >> 24];
      v17 = sub_22EFFA604(*v16);
      if ((*(_DWORD *)(v17 + 28) & 0x7Eu) - 52 >= 6)
        v18 = 0;
      else
        v18 = v17;
      v19 = &v16[(v15 >> 18) & 1];
      v20 = (uint64_t)(v19 + 2);
      v21 = (uint64_t)&v19[*((unsigned int *)a2 + 4) + 1];
      v22 = (*(_DWORD *)(v18 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC;
      v23 = a1;
LABEL_27:
      sub_22EF0761C(v23, v18, v20, v21, v22);
      goto LABEL_28;
    }
LABEL_15:
    sub_22EF06E88(a1, *(unsigned int **)&a2[8 * ((v11 >> 18) & 1) + 8 + BYTE3(v11)], 0, 1);
    LODWORD(v11) = *(_DWORD *)a2;
    goto LABEL_16;
  }
  if ((_DWORD)v12 == 7)
  {
    if (*((_DWORD *)a2 + 4) > 1u)
      goto LABEL_16;
    goto LABEL_15;
  }
  if ((_DWORD)v12 != 15)
    goto LABEL_16;
  v13 = (uint64_t)&a2[8 * ((v11 >> 18) & 1) + BYTE3(v11)];
  v14 = *(unsigned __int8 **)(v13 + 16);
  sub_22EF06B10(a1, *(unsigned __int8 **)(v13 + 8), 1, 1);
  sub_22EF06B10(a1, v14, 0, 1);
LABEL_28:
  v27 = sub_22EFFA604(*(unsigned __int8 **)&a2[a2[3]]);
  if (v27 && (*(_DWORD *)(v27 + 28) & 0x100) != 0 && (*(_DWORD *)(v27 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
    sub_22EF01E94((uint64_t)a1, (unsigned int *)a2, v27, 0);
}

void sub_22EF06B10(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v18;
  unsigned __int8 *i;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  unsigned int j;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *k;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;

  v7 = sub_22EFFED0C(a2);
  v8 = sub_22EFFBBCC(v7);
  sub_22EFF605C((uint64_t)v8);
  v10 = v9;
  while (1)
  {
    v11 = v8;
    v12 = *v8;
    if (v12 != 161)
      break;
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v8 + 2) + 32))(*((_QWORD *)v8 + 2));
    if (v13)
      v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
    else
      v14 = 0;
    if (v14)
    {
      v15 = v13;
      if (sub_22E3CEC2C(v13))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28)
        {
          v16 = sub_22EFBC5B4(v15);
          v8 = (unsigned __int8 *)v16;
          if (v16 && v16 != (_QWORD)v11)
            continue;
        }
      }
    }
    v12 = *v11;
    break;
  }
  switch(v12)
  {
    case 107:
      goto LABEL_20;
    case 188:
      v18 = (unsigned int *)*((_QWORD *)v11 + 2);
      if ((v11[2] & 4) != 0)
        sub_22EF06E88(a1, v18, a3, a4);
      else
        sub_22EF06B10(a1, v18, a3);
      break;
    case 233:
      if ((*(_DWORD *)v11 & 0x7C0000) == 0x140000)
      {
LABEL_20:
        sub_22EF06E88(a1, *((unsigned int **)v11 + 2), a3, a4);
        return;
      }
      return;
  }
  for (i = v11; ; i = (unsigned __int8 *)*((_QWORD *)i + 2))
  {
    v20 = *i;
    if (v20 != 153)
      break;
  }
  if (v20 == 161)
  {
    v21 = (uint64_t *)(i + 16);
  }
  else
  {
    if (v20 != 188)
      return;
    v21 = (uint64_t *)(i + 24);
  }
  v22 = *v21;
  if (*v21 && (*(_BYTE *)(v22 + 29) & 1) != 0)
  {
    v24.n128_f64[0] = sub_22EFC8E88(v22);
    v25 = *((unsigned int *)v23 + 2);
    if ((_DWORD)v25)
    {
      v31 = 8 * v25;
      v26 = *v23;
      while (*(_WORD *)(*(_QWORD *)v26 + 32) != 183)
      {
        v26 += 8;
        v31 -= 8;
        if (!v31)
          goto LABEL_45;
      }
    }
    else
    {
      v26 = *v23;
    }
    if (v26 != *v23 + 8 * v25)
    {
      v27 = *a1;
      v28 = a1[2];
      if (v28)
      {
        v29 = (unsigned __int16 *)a1[1];
        v30 = 2 * v28;
        while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 472) + 8 * *v29) + 16))
        {
          ++v29;
          v30 -= 2;
          if (!v30)
            goto LABEL_41;
        }
      }
      else
      {
LABEL_41:
        (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __n128))(**(_QWORD **)(v27 + 320) + 64))(*(_QWORD *)(v27 + 320), "mutex", 5, v22, a4, a3, v10, v24);
      }
    }
LABEL_45:
    v32 = (uint64_t *)sub_22F255ABC(v22);
    v34 = v33;
    for (j = v10; ; sub_22EF07168(a1, v22, (unsigned int *)v11, a3, v40, a4, (uint64_t)v45, v47, j))
    {
      v36 = v32;
      if (v32 >= v34)
      {
        if (v32 == v34)
          return;
        v37 = v34;
        while (*(_WORD *)(*v37 + 32) != 182)
        {
          if (++v37 == v32)
            return;
        }
        v36 = v32;
      }
      else
      {
        while (*(_WORD *)(*v36 + 32) != 182)
        {
          if (++v36 == v34)
            return;
        }
        v37 = v34;
      }
      if (v36 == v37)
        return;
      do
      {
        v39 = *v32++;
        v38 = v39;
      }
      while (*(_WORD *)(v39 + 32) != 182);
      v40 = *(unsigned __int8 **)(v38 + 40);
      for (k = v40; ; k = (unsigned __int8 *)*((_QWORD *)k + 2))
      {
        v42 = *k;
        if (v42 != 153)
          break;
      }
      if (v42 == 161)
      {
        v43 = (uint64_t *)(k + 16);
      }
      else
      {
        if (v42 != 188)
          goto LABEL_68;
        v43 = (uint64_t *)(k + 24);
      }
      v44 = *v43;
      if (v44)
      {
        v45 = sub_22EF04588(*(_QWORD *)(v44 + 48));
        v47 = v46;
        continue;
      }
LABEL_68:
      v45 = "mutex";
      v47 = 5;
    }
  }
}

void sub_22EF06E88(uint64_t *a1, unsigned int *a2, uint64_t a3, int a4)
{
  int v7;
  unsigned int **v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *i;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;

  while (1)
  {
    v7 = *(unsigned __int8 *)a2;
    if (v7 == 214)
    {
      v8 = (unsigned int **)(a2 + 6);
      goto LABEL_5;
    }
    if ((v7 + 102) < 0xF5u)
      break;
    v9 = *a2;
    v8 = (unsigned int **)(a2 + 4);
    if ((v9 & 0x1FC0000) == 0x300000)
    {
      sub_22EF06B10(a1, *v8, a3);
      return;
    }
LABEL_5:
    a2 = *v8;
  }
  v10 = 4 * (a4 == 3);
  v11 = a2;
  while (v7 == 153)
  {
    v11 = (unsigned int *)*((_QWORD *)v11 + 2);
    LOBYTE(v7) = *(_BYTE *)v11;
  }
  if (v7 == 161)
  {
    v12 = (uint64_t *)(v11 + 4);
    goto LABEL_14;
  }
  if (v7 == 188)
  {
    v12 = (uint64_t *)(v11 + 6);
LABEL_14:
    v13 = *v12;
    if (*v12)
    {
      if ((*(_BYTE *)(v13 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v13);
        v15 = *((unsigned int *)v14 + 2);
        if ((_DWORD)v15)
        {
          v23 = 8 * v15;
          v16 = *v14;
          while (*(_WORD *)(*(_QWORD *)v16 + 32) != 288)
          {
            v16 += 8;
            v23 -= 8;
            if (!v23)
              goto LABEL_28;
          }
        }
        else
        {
          v16 = *v14;
        }
        if (v16 != *v14 + 8 * v15)
        {
          v17 = *a1;
          v18 = a1[2];
          if (v18)
          {
            v19 = (unsigned __int16 *)a1[1];
            v20 = 2 * v18;
            while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 472) + 8 * *v19) + 16))
            {
              ++v19;
              v20 -= 2;
              if (!v20)
                goto LABEL_24;
            }
          }
          else
          {
LABEL_24:
            v21 = *(_QWORD *)(v17 + 320);
            sub_22EFF605C((uint64_t)a2);
            (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 64))(v21, "mutex", 5, v13, v10, a3, v22);
          }
        }
LABEL_28:
        v24 = (uint64_t *)sub_22F255ABC(v13);
        v26 = v25;
        while (1)
        {
          v27 = v24;
          if (v24 >= v26)
          {
            if (v24 == v26)
              return;
            v28 = v26;
            while (*(_WORD *)(*v28 + 32) != 287)
            {
              if (++v28 == v24)
                return;
            }
            v27 = v24;
          }
          else
          {
            while (*(_WORD *)(*v27 + 32) != 287)
            {
              if (++v27 == v26)
                return;
            }
            v28 = v26;
          }
          if (v27 == v28)
            return;
          do
          {
            v30 = *v24++;
            v29 = v30;
          }
          while (*(_WORD *)(v30 + 32) != 287);
          v31 = *(unsigned __int8 **)(v29 + 40);
          for (i = v31; ; i = (unsigned __int8 *)*((_QWORD *)i + 2))
          {
            v33 = *i;
            if (v33 != 153)
              break;
          }
          if (v33 == 161)
          {
            v34 = (uint64_t *)(i + 16);
          }
          else
          {
            if (v33 != 188)
              goto LABEL_51;
            v34 = (uint64_t *)(i + 24);
          }
          v35 = *v34;
          if (v35)
          {
            v36 = sub_22EF04588(*(_QWORD *)(v35 + 48));
            v38 = v37;
            goto LABEL_52;
          }
LABEL_51:
          v36 = "mutex";
          v38 = 5;
LABEL_52:
          sub_22EFF605C((uint64_t)a2);
          sub_22EF07168(a1, v13, a2, a3, v31, v10, (uint64_t)v36, v38, v39);
        }
      }
    }
  }
}

void sub_22EF07168(uint64_t *a1, uint64_t a2, unsigned int *a3, unsigned int a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v14;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *p_p;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  void *__p;
  uint64_t v68;
  char v69;
  void *v70;
  uint64_t v71;
  char v72;
  _QWORD v73[2];

  v14 = a2;
  v16 = sub_22EF082F0((uint64_t *)(*a1 + 104), a5, a2, a3, 0);
  v73[0] = v16;
  v73[1] = v17;
  if (!v16)
    return;
  v18 = v16;
  v19 = *v16;
  if (v19 == 1)
  {
    if (a3)
    {
      v20 = *(_QWORD *)(*a1 + 320);
      sub_22EFF605C((uint64_t)a3);
      if (v21)
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, a7, a8, v21);
    }
    return;
  }
  v22 = v17;
  v63 = a4;
  v64 = a6;
  v23 = *a1;
  v24 = (unsigned __int16 *)a1[1];
  v25 = a1[2];
  if ((_BYTE)v17)
  {
    v26 = a7;
    v27 = *(_QWORD *)(v23 + 472);
    v28 = v17 ^ 1;
    v29 = v23;
    if (!sub_22EF054D8(v24, v25, v27, v16, v17 ^ 1u))
    {
      if (!sub_22EF0557C(v29, v18) || sub_22EF054D8(v24, v25, v27, v18, v22))
        return;
      v57 = *(_QWORD *)(v29 + 320);
      sub_22EF04954((uint64_t)&v70, (uint64_t)v73);
      if (v72 >= 0)
        v58 = &v70;
      else
        v58 = v70;
      if (v72 >= 0)
        v59 = v72 & 0x7F;
      else
        v59 = v71;
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)v57 + 88))(v57, v14, v58, v59, a9);
      goto LABEL_68;
    }
    v30 = *(_QWORD *)(v29 + 320);
    sub_22EFC683C((uint64_t *)(v14 + 40), &v70);
    if (v72 >= 0)
      v31 = &v70;
    else
      v31 = v70;
    if (v72 >= 0)
      v32 = v72 & 0x7F;
    else
      v32 = v71;
    v65 = v18;
    v66 = v28;
    sub_22EF04954((uint64_t)&__p, (uint64_t)&v65);
    if (v69 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v69 >= 0)
      v34 = v69 & 0x7F;
    else
      v34 = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)v30 + 96))(v30, v26, a8, v31, v32, p_p, v34, a9);
    goto LABEL_21;
  }
  v61 = a7;
  v62 = a8;
  v35 = 2 * v25;
  v36 = (unsigned __int16 *)a1[1];
  if (v25)
  {
    v37 = *(_QWORD *)(v23 + 472);
    v38 = 2 * v25;
    v36 = (unsigned __int16 *)a1[1];
    v60 = v14;
    while (1)
    {
      v39 = *(_QWORD *)(v37 + 8 * *v36);
      v40 = *(unsigned __int8 **)(v39 + 8);
      if (v40)
      {
        if (*v40 == 2)
          break;
      }
      if (!*(_BYTE *)(v39 + 16))
      {
        v41 = v23;
        v42 = sub_22F358338(v40, v18);
        v23 = v41;
        v14 = v60;
        if ((v42 & 1) != 0)
          break;
      }
      ++v36;
      v38 -= 2;
      if (!v38)
        goto LABEL_42;
    }
  }
  if (v36 != &v24[v25])
  {
    v43 = *(_QWORD *)(*(_QWORD *)(v23 + 472) + 8 * *v36);
    if (v43)
    {
      if (!v63 || *(_BYTE *)(v43 + 17) == 1)
        return;
      v44 = *(_QWORD *)(v23 + 320);
      sub_22EF04954((uint64_t)&v70, (uint64_t)v73);
      if (v72 >= 0)
        v45 = &v70;
      else
        v45 = v70;
      if (v72 >= 0)
        v46 = v72 & 0x7F;
      else
        v46 = v71;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v44 + 72))(v44, v61, v62, v14, v64, v45, v46, 1, a9, 0);
      goto LABEL_68;
    }
  }
LABEL_42:
  if (v25)
  {
    while (1)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v23 + 472) + 8 * *v24);
      if (!*(_BYTE *)(v47 + 16))
      {
        v48 = *(_QWORD *)(v47 + 8);
        if (v48)
        {
          if (v19 == 12 && *(_BYTE *)v48 == 12 && *(_QWORD *)(v48 + 56) == *((_QWORD *)v18 + 7))
            break;
        }
      }
      ++v24;
      v35 -= 2;
      if (!v35)
        goto LABEL_61;
    }
    sub_22EF04954((uint64_t)&v70, v47 + 8);
    v49 = (unsigned __int8 *)v70;
    if (v72 >= 0)
      v49 = (unsigned __int8 *)&v70;
    v50 = v72 & 0x7F;
    if (v72 < 0)
      v50 = v71;
    v65 = v49;
    v66 = v50;
    v51 = *(_QWORD *)(*a1 + 320);
    sub_22EF04954((uint64_t)&__p, (uint64_t)v73);
    if (v69 >= 0)
      v52 = &__p;
    else
      v52 = __p;
    if (v69 >= 0)
      v53 = v69 & 0x7F;
    else
      v53 = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD, unsigned __int8 **))(*(_QWORD *)v51 + 72))(v51, v61, v62, v14, v64, v52, v53, v63, a9, &v65);
LABEL_21:
    if (v69 < 0)
      operator delete(__p);
    goto LABEL_68;
  }
LABEL_61:
  v54 = *(_QWORD *)(v23 + 320);
  sub_22EF04954((uint64_t)&v70, (uint64_t)v73);
  if (v72 >= 0)
    v55 = &v70;
  else
    v55 = v70;
  if (v72 >= 0)
    v56 = v72 & 0x7F;
  else
    v56 = v71;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v54 + 72))(v54, v61, v62, v14, v64, v55, v56, v63, a9, 0);
LABEL_68:
  if (v72 < 0)
    operator delete(v70);
}

void sub_22EF0761C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || sub_22F356560(a2))
    return;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (v12)
    goto LABEL_9;
  v18 = *(_QWORD *)(a2 + 120);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
  {
    v13 = 0;
    v10 = v18;
    goto LABEL_10;
  }
  v11 = sub_22F10CF48(v11);
  v10 = v18;
  if (v11)
LABEL_9:
    v13 = (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38);
  else
    v13 = 0;
LABEL_10:
  if (v13 != a5 && a3 != a4)
  {
    v14 = a5;
    v15 = v10 + 8 * a5;
    v16 = 8 * v13 - 8 * v14 - 8;
    v17 = a3 + 8;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
        sub_22EF06B10(a1, *(unsigned __int8 **)(v17 - 8), 0, 3);
      if (!v16)
        break;
      v15 += 8;
      v16 -= 8;
      v12 = v17 == a4;
      v17 += 8;
    }
    while (!v12);
  }
}

void sub_22EF07758(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *p_p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *__p;
  uint64_t v32;
  char v33;

  v8 = *(unsigned __int8 **)a3;
  if (*(_QWORD *)a3)
  {
    v13 = *(unsigned __int16 **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a1 + 472);
    v16 = *(_BYTE *)(a3 + 8);
    v17 = sub_22EF054D8(*(unsigned __int16 **)a2, v14, v15, v8, v16);
    if (v17)
    {
      v18 = v17;
      if ((_DWORD)a6 != 2 && *(unsigned __int8 *)(v17 + 17) != (_DWORD)a6)
      {
        v19 = *(_QWORD *)(a1 + 320);
        sub_22EF04954((uint64_t)&__p, a3);
        if (v33 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v33 >= 0)
          v21 = v33 & 0x7F;
        else
          v21 = v32;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 32))(v19, a7, a8, p_p, v21, *(unsigned __int8 *)(v18 + 17), a6, *(unsigned int *)(v18 + 20), a4);
        if (v33 < 0)
          operator delete(__p);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, a2, a1 + 472, a3, a4, a5, *(_QWORD *)(a1 + 320));
    }
    else
    {
      v22 = sub_22EF054D8(v13, v14, v15, v8, v16 ^ 1u);
      if (v22)
        v23 = *(unsigned int *)(v22 + 20);
      else
        v23 = 0;
      v24 = *(_QWORD *)(a1 + 320);
      sub_22EF04954((uint64_t)&__p, a3);
      if (v33 >= 0)
        v25 = &__p;
      else
        v25 = __p;
      if (v33 >= 0)
        v26 = v33 & 0x7F;
      else
        v26 = v32;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v24 + 24))(v24, a7, a8, v25, v26, a4, v23);
      if (v33 < 0)
        operator delete(__p);
    }
  }
}

_QWORD *sub_22EF07934(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAB9F70;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

void sub_22EF07974(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAB9F70;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22EF079C4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  void **v17;
  void *v18;
  void *__p[2];
  char v20;

  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6)
  {
    v12 = *(uint64_t **)(a1 + 24);
    v13 = a4;
    v14 = 8 * v6;
    do
    {
      v15 = *v12;
      v16 = (unsigned __int8 *)(*v12 & 0xFFFFFFFFFFFFFFF8);
      if (((v15 & 6) == 0) == (sub_22EF054D8(*(unsigned __int16 **)a2, *(_QWORD *)(a2 + 8), *a3, v16, 0) != 0))
      {
        sub_22F357050((uint64_t)__p, v16);
        if (v20 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if (v20 >= 0)
          v18 = (void *)(v20 & 0x7F);
        else
          v18 = __p[1];
        (*(void (**)(uint64_t, const char *, uint64_t, void **, void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a6 + 48))(a6, "mutex", 5, v17, v18, *(unsigned int *)(a1 + 20), v13, a5);
        if (v20 < 0)
          operator delete(__p[0]);
      }
      ++v12;
      v14 -= 8;
    }
    while (v14);
  }
}

void sub_22EF07AD8(uint64_t a1, unsigned __int16 **a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = 8 * v7;
    do
    {
      v16 = *v14;
      v17 = *v14 & 0xFFFFFFFFFFFFFFF8;
      v18 = 0;
      if ((v16 & 6) != 0)
        sub_22EF07E34(a2, a3, (uint64_t)&v17, *(_DWORD *)(a4 + 20), a5, a6, a7);
      else
        sub_22EF07CB8((uint64_t)a2, (uint64_t *)a3, (uint64_t)&v17, *(_BYTE *)(a4 + 17), *(_DWORD *)(a4 + 20), a5, a6, a7);
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
}

void sub_22EF07BA4(uint64_t a1, unsigned __int16 **a2, uint64_t *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char v22;

  v10 = a6;
  v14 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(a1 + 24);
    if (a6)
      v16 = 0;
    else
      v16 = a7;
    v18 = 8 * v14;
    do
    {
      v19 = *v15;
      v21 = *v15 & 0xFFFFFFFFFFFFFFF8;
      v22 = 0;
      v20 = (v19 >> 1) & 3;
      if (v20)
        sub_22EF07CB8((uint64_t)a2, a3, (uint64_t)&v21, v20 != 1, a5, v16, a9, a10);
      else
        sub_22EF07E34(a2, (char **)a3, (uint64_t)&v21, a5, v16, a9, a10);
      ++v15;
      v18 -= 8;
    }
    while (v18);
  }
  if ((v10 & 1) != 0)
    sub_22EF03258(a2, *a3, *(unsigned __int8 **)a4, *(_BYTE *)(a4 + 8));
}

void sub_22EF07CB8(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v24;
  void *__p[2];
  char v26;

  v14 = *a2;
  v15 = *(unsigned __int8 **)a3;
  v16 = *(_BYTE *)(a3 + 8);
  v17 = sub_22EF054D8(*(unsigned __int16 **)a1, *(_QWORD *)(a1 + 8), *a2, *(unsigned __int8 **)a3, v16);
  if (v17)
  {
    if (a6)
    {
      v18 = v17;
      sub_22EF04954((uint64_t)__p, a3);
      if (v26 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if (v26 >= 0)
        v20 = (void *)(v26 & 0x7F);
      else
        v20 = __p[1];
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void *, _QWORD, _QWORD))(*(_QWORD *)a6 + 40))(a6, a7, a8, v19, v20, *(unsigned int *)(v18 + 20), a5);
      if (v26 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    sub_22EF03258((_QWORD *)a1, v14, v15, v16 ^ 1);
    v21 = operator new();
    *(_OWORD *)(v21 + 8) = *(_OWORD *)a3;
    *(_WORD *)(v21 + 17) = a4 | 0x300;
    *(_DWORD *)(v21 + 20) = a5;
    *(_QWORD *)v21 = &off_24FAB9EF0;
    v24 = v21;
    sub_22EF030E4((_QWORD *)a1, (char **)a2, &v24);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
}

void sub_22EF07E34(unsigned __int16 **a1, char **a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unsigned __int16 *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void *__p[2];
  char v27;
  uint64_t v28;

  v13 = *a1;
  v12 = (uint64_t)a1[1];
  v14 = *a2;
  v15 = *(unsigned __int8 **)a3;
  v16 = *(_BYTE *)(a3 + 8);
  if (sub_22EF054D8(*a1, v12, (uint64_t)*a2, *(unsigned __int8 **)a3, v16))
  {
    sub_22EF03258(a1, (uint64_t)v14, v15, v16);
    v17 = *(unsigned __int8 **)a3;
    v18 = *(unsigned __int8 *)(a3 + 8) ^ 1;
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = v17;
    *(_QWORD *)(v19 + 16) = v18;
    *(_WORD *)(v19 + 17) = 1;
    *(_DWORD *)(v19 + 20) = a4;
    *(_QWORD *)v19 = &off_24FAB9EF0;
    v28 = v19;
    sub_22EF030E4(a1, a2, &v28);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  else if (a5)
  {
    v20 = sub_22EF054D8(v13, v12, (uint64_t)v14, v15, v16 ^ 1u);
    if (v20)
      v21 = *(unsigned int *)(v20 + 20);
    else
      v21 = 0;
    sub_22EF04954((uint64_t)__p, a3);
    if (v27 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if (v27 >= 0)
      v23 = (void *)(v27 & 0x7F);
    else
      v23 = __p[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void *, _QWORD, uint64_t))(*(_QWORD *)a5 + 24))(a5, a6, a7, v22, v23, a4, v21);
    if (v27 < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_22EF07FEC(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8)) = a2 & 0xFFFFFFFFFFFFFFF9 | (2 * a3);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v6) = a2 & 0xFFFFFFFFFFFFFFF9 | (2 * a3);
  }
  *(_DWORD *)(v5 + 8) = v6 + 1;
  return result;
}

void sub_22EF08074(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  int v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        if (v6)
        {
          v7 = *(_DWORD *)(v6 + 68) - 1;
          *(_DWORD *)(v6 + 68) = v7;
          if (!v7)
            sub_22F3563E0(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22EF08100(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_22F358904(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22EF08170(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  void ***v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (void ***)((char *)v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_22EF060B8(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

void sub_22EF081E0(_BYTE *a1@<X8>)
{
  llvm::APInt::toString();
  a1[23] = 0;
  *a1 = 0;
}

unsigned __int8 *sub_22EF082F0(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  uint64_t *v6;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int i;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v34;
  _BYTE v35[32];
  _QWORD v36[2];
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;

  v5 = a2;
  v6 = a1;
  if (!a4)
    return sub_22EF085F4(a1, a2, 0);
  v8 = a4;
  v36[0] = 0;
  v36[1] = a3;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v9 = *(unsigned __int8 *)a4;
  if (v9 == 140)
  {
    v11 = sub_22F060ED0((uint64_t)a4);
    v37 = (_BYTE *)v11;
    v12 = *v8;
    v13 = (unsigned __int8 **)((char *)v8 + (v12 >> 24));
    v14 = sub_22EFFBBCC(*v13);
    if (*v14 == 188)
      v15 = (v14[2] >> 2) & 1;
    else
      LOBYTE(v15) = 0;
    v40 = v15;
    v38 = v8[4];
    v39 = (uint64_t)&v13[((v12 >> 18) & 1) + 1];
    v8 = (unsigned int *)v11;
    if (!a5)
      goto LABEL_56;
    goto LABEL_23;
  }
  if (v9 != 188)
  {
    if ((v9 + 113) >= 0xFBu)
    {
      v38 = a4[4];
      v18 = (unint64_t)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24);
    }
    else
    {
      if ((v9 & 0xFE) != 0x76)
      {
        if (a3 && (*(_DWORD *)(a3 + 28) & 0x7F) == 0x39)
        {
          v37 = a4;
          goto LABEL_56;
        }
LABEL_22:
        v8 = 0;
        if (!a5)
          goto LABEL_56;
        goto LABEL_23;
      }
      v38 = a4[8];
      v16 = v9 == 119;
      if (v9 == 119)
        v17 = a4;
      else
        v17 = 0;
      v18 = (unint64_t)(v17 + 12);
      if (!v16)
        v18 = (unint64_t)(a4 + 10);
    }
    v39 = v18;
    goto LABEL_22;
  }
  v10 = *a4;
  v8 = (unsigned int *)*((_QWORD *)a4 + 2);
  v37 = v8;
  v40 = (v10 & 0x40000) != 0;
  if (!a5)
    goto LABEL_56;
LABEL_23:
  if (!v8)
  {
    v19 = a5;
    if ((*(_DWORD *)(a5 + 28) & 0x7F) != 0x53)
    {
      v20 = *(_QWORD *)(a5 + 16);
      v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 4) != 0)
        v21 = *(_QWORD *)v21;
      for (i = *(_WORD *)(v21 + 8) & 0x7F; i != 83; i = *(_WORD *)(v21 + 8) & 0x7F)
      {
        v23 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v23 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_38;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_37;
          if (i == 16)
            goto LABEL_31;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_44;
          if (i == 24)
          {
LABEL_31:
            v23 = -48;
          }
          else
          {
LABEL_37:
            if (i != 70)
            {
LABEL_38:
              v24 = i - 52;
              if ((i - 33) >= 5)
                v25 = -48;
              else
                v25 = -64;
              if (v24 >= 6)
                v23 = v25;
              else
                v23 = -72;
              goto LABEL_44;
            }
            v23 = -64;
          }
        }
LABEL_44:
        v26 = *(_QWORD *)(v21 + v23 + 16);
        v21 = v26 & 0xFFFFFFFFFFFFFFF8;
        if ((v26 & 4) != 0)
          v21 = *(_QWORD *)v21;
      }
      v19 = v21 - 40;
    }
    v27 = *(_QWORD *)(v19 + 88);
    v28 = *(_QWORD *)(a5 + 48);
    v29 = *(_DWORD *)(a5 + 24);
    v34 = 0;
    sub_22EFF69F0((uint64_t)v35, v27, a5, 0, v28, 1, v29, &v34, 0);
    v37 = v35;
    if (!v5)
    {
      v30 = v35;
      v31 = v6;
      v32 = 0;
      return sub_22EF085F4(v31, v30, (uint64_t)v32);
    }
LABEL_57:
    v32 = v36;
    v31 = v6;
    v30 = v5;
    return sub_22EF085F4(v31, v30, (uint64_t)v32);
  }
LABEL_56:
  if (v5)
    goto LABEL_57;
  a1 = v6;
  a2 = (unsigned __int8 *)v8;
  return sub_22EF085F4(a1, a2, 0);
}

unsigned __int8 *sub_22EF085F4(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  int v6;

  if (!a2)
    return 0;
  v3 = *a2;
  switch(v3)
  {
    case 141:
      if ((*(_QWORD *)a2 & 0x3F00000000) != 0xE00000000)
        break;
      v5 = &a2[8 * ((*(_QWORD *)a2 >> 18) & 1) + 8 + BYTE3(*(_QWORD *)a2)];
LABEL_12:
      a2 = *(unsigned __int8 **)v5;
      break;
    case 233:
      if ((*(_DWORD *)a2 & 0x7C0000) != 0x240000)
        break;
      v5 = a2 + 16;
      goto LABEL_12;
    case 225:
      if (((*(_DWORD *)a2 >> 21) & 7) * *((_DWORD *)a2 + 4) == 1 && a2[4 * *((unsigned int *)a2 + 1) + 20] == 42)
      {
        result = (unsigned __int8 *)sub_22E3CD3D4(*a1, 16, 3);
        *result = 2;
        *(_QWORD *)(result + 1) = 0;
        *((_QWORD *)result + 1) = 0;
        return result;
      }
      return 0;
  }
  result = (unsigned __int8 *)sub_22EF0870C((uint64_t)a1, a2, a3);
  if (!result)
    return result;
  v6 = *result;
  if (v6 == 3)
    return 0;
  if (v6 == 21 && result[2] == 5)
    return (unsigned __int8 *)*((_QWORD *)result + 2);
  return result;
}

uint64_t sub_22EF0870C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  const void *p_p;
  size_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t (*i)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  void *__p;
  unint64_t v59;
  unsigned __int8 v60;

  if (!a2)
    return 0;
  v5 = a2;
  while (2)
  {
    __p = 0;
    if (sub_22F24C318(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), (uint64_t)v5, &__p))
      v7 = __p == (void *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40));
    else
      v7 = 1;
    if (!v7)
    {
      v3 = *((_QWORD *)__p + 1);
      if (v3)
        return v3;
    }
    v8 = *v5;
    if (v8 > 0xA9)
    {
      if (*v5 <= 0xD5u)
      {
        switch(*v5)
        {
          case 0xAAu:
          case 0xAFu:
          case 0xB2u:
          case 0xB5u:
            goto LABEL_87;
          case 0xABu:
          case 0xAEu:
          case 0xB0u:
          case 0xB1u:
          case 0xB3u:
          case 0xB4u:
          case 0xB6u:
          case 0xB7u:
          case 0xB8u:
          case 0xB9u:
          case 0xBBu:
            goto LABEL_74;
          case 0xACu:
          case 0xADu:
            goto LABEL_21;
          case 0xBAu:
            v9 = *((_QWORD *)v5 + 2);
            v10 = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFF8);
            if ((v9 & 4) != 0)
              v10 = (unsigned __int8 *)*((_QWORD *)v10 + 5);
            goto LABEL_79;
          case 0xBCu:
            v42 = (unsigned __int8 *)sub_22EF0870C(a1, *((_QWORD *)v5 + 2));
            v43 = sub_22E3CD3D4(*(_QWORD *)a1, 32, 3);
            *(_BYTE *)v43 = 11;
            *(_QWORD *)(v43 + 8) = 0;
            *(_QWORD *)(v43 + 16) = v42;
            *(_QWORD *)(v43 + 1) = 0;
            *(_QWORD *)(v43 + 24) = 0;
            v44 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 3) + 32))(*((_QWORD *)v5 + 3));
            v45 = (uint64_t)v44;
            if (v44)
              v46 = (v44[7] & 0x7Eu) - 58 >= 0xFFFFFFFC;
            else
              v46 = 0;
            if (v46)
            {
              for (i = *(uint64_t (**)(void))(*(_QWORD *)v44 + 32); ; i = *(uint64_t (**)(void))(**(_QWORD **)v48 + 32))
              {
                v45 = i();
                v48 = sub_22EFD7394(v45);
                if (v48 == v49)
                  break;
              }
            }
            v3 = sub_22E3CD3D4(*(_QWORD *)a1, 64, 3);
            *(_BYTE *)v3 = 12;
            *(_QWORD *)(v3 + 1) = 0;
            *(_QWORD *)(v3 + 8) = 0;
            *(_QWORD *)(v3 + 16) = v43;
            *(_BYTE *)(v3 + 24) = 0;
            *(_BYTE *)(v3 + 48) = 0;
            *(_QWORD *)(v3 + 56) = v45;
            if (sub_22EF090E4(v42))
              goto LABEL_132;
            return v3;
          default:
            if (v8 == 204)
              goto LABEL_87;
            if (v8 != 199)
              goto LABEL_74;
            result = sub_22F358A88((uint64_t *)a1, (uint64_t)v5);
            break;
        }
        return result;
      }
      switch(v8)
      {
        case 0xD6u:
LABEL_23:
          v10 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
          goto LABEL_79;
        case 0xE9u:
          switch((*(_DWORD *)v5 >> 18) & 0x1F)
          {
            case 4:
              v10 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
              if (*v10 != 161)
                goto LABEL_79;
              if (!sub_22EFBAEF8(*((_QWORD *)v10 + 2)))
                goto LABEL_21;
              v54 = sub_22E3CD3D4(*(_QWORD *)a1, 16, 3);
              *(_BYTE *)v54 = 2;
              *(_QWORD *)(v54 + 1) = 0;
              *(_QWORD *)(v54 + 8) = 0;
              v3 = sub_22E3CD3D4(*(_QWORD *)a1, 64, 3);
              v55 = *((_QWORD *)v10 + 2);
              *(_BYTE *)v3 = 12;
              *(_QWORD *)(v3 + 8) = 0;
              *(_QWORD *)(v3 + 16) = v54;
              *(_QWORD *)(v3 + 1) = 0;
              *(_BYTE *)(v3 + 24) = 0;
              *(_BYTE *)(v3 + 48) = 0;
              *(_QWORD *)(v3 + 56) = v55;
              return v3;
            case 5:
            case 6:
LABEL_21:
              v10 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
              goto LABEL_79;
            case 7:
              v3 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
              v53 = sub_22EF0870C(a1, *((_QWORD *)v5 + 2));
              *(_BYTE *)v3 = 19;
              *(_QWORD *)(v3 + 1) = 0;
              *(_QWORD *)(v3 + 8) = 0;
              *(_QWORD *)(v3 + 16) = v53;
              return v3;
            case 8:
              v3 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
              v50 = sub_22EF0870C(a1, *((_QWORD *)v5 + 2));
              *(_BYTE *)v3 = 19;
              *(_QWORD *)(v3 + 1) = 0;
              *(_QWORD *)(v3 + 8) = 0;
              *(_QWORD *)(v3 + 16) = v50;
LABEL_132:
              v51 = 1;
              goto LABEL_134;
            case 9:
              v3 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
              v52 = sub_22EF0870C(a1, *((_QWORD *)v5 + 2));
              *(_BYTE *)v3 = 19;
              *(_QWORD *)(v3 + 1) = 0;
              *(_QWORD *)(v3 + 8) = 0;
              *(_QWORD *)(v3 + 16) = v52;
              v51 = 2;
LABEL_134:
              *(_WORD *)(v3 + 2) = v51;
              break;
            default:
              goto LABEL_88;
          }
          return v3;
        case 0xE1u:
LABEL_87:
          v3 = sub_22E3CD3D4(*(_QWORD *)a1, 32, 3);
          *(_BYTE *)v3 = 3;
          *(_QWORD *)(v3 + 9) = 0;
          *(_QWORD *)(v3 + 1) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          *(_QWORD *)(v3 + 24) = v5;
          return v3;
      }
LABEL_74:
      if ((v8 + 102) < 0xF5u)
      {
LABEL_88:
        v27 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
        v3 = v27;
        v28 = 1;
        goto LABEL_96;
      }
      v23 = (*(_DWORD *)v5 >> 18) & 0x7F;
      if (v23 > 0xD || ((1 << v23) & 0x31A0) != 0 || v23 != 4)
      {
        v24 = (unsigned __int8 **)(v5 + 16);
      }
      else
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
        v24 = (unsigned __int8 **)(v5 + 16);
        v10 = v25;
        if (*v25 != 161)
          goto LABEL_79;
        v26 = sub_22F35912C(a1, *((_QWORD *)v10 + 2));
        if (v26)
          return v26;
      }
      v10 = *v24;
      goto LABEL_79;
    }
    if (*v5 <= 0x84u)
    {
      switch(*v5)
      {
        case 'f':
        case 'g':
          return sub_22EF09024((uint64_t *)a1, v5);
        case 'h':
        case 'i':
        case 'j':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'r':
        case 's':
          goto LABEL_74;
        case 'k':
          return sub_22F358EDC((uint64_t *)a1, (uint64_t)v5);
        case 'p':
        case 'q':
          return sub_22F358D40((uint64_t *)a1, (uint64_t)v5, a3);
        case 't':
          goto LABEL_23;
        case 'u':
          goto LABEL_87;
        default:
          if (v8 == 128)
            goto LABEL_87;
          if (v8 != 12)
            goto LABEL_74;
          result = sub_22F358F9C(a1, (uint64_t)v5);
          break;
      }
      return result;
    }
    switch(*v5)
    {
      case 0x85u:
        if (a3)
        {
          v10 = *(unsigned __int8 **)(a3 + 16);
          if (v10)
            goto LABEL_61;
        }
        return *(_QWORD *)(a1 + 8);
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
        goto LABEL_74;
      case 0x8Au:
        return sub_22F358B48((uint64_t *)a1, (unsigned int *)v5, a3, 0);
      case 0x8Cu:
        v30 = sub_22F060FB4((uint64_t)v5);
        sub_22EFC683C((uint64_t *)(v30 + 40), &__p);
        v31 = v60;
        if ((v60 & 0x80u) == 0)
          v32 = v60 & 0x7F;
        else
          v32 = v59;
        if (v32 == 3
          && ((v33 = __p, (v60 & 0x80u) == 0) ? (v34 = v60) : (v34 = v59),
              (v60 & 0x80u) == 0 ? (p_p = &__p) : (p_p = __p),
              v34 >= 3 ? (v36 = 3) : (v36 = v34),
              !memcmp(p_p, "get", v36) && v34 == 3))
        {
          v37 = *((_DWORD *)v5 + 4);
          if ((v31 & 0x80) != 0)
            operator delete(v33);
          if (!v37)
          {
            v38 = sub_22F060ED0((uint64_t)v5);
            v39 = sub_22EF0870C(a1, v38);
            v3 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
            *(_BYTE *)v3 = 21;
            *(_QWORD *)(v3 + 1) = 0;
            *(_QWORD *)(v3 + 8) = 0;
            *(_QWORD *)(v3 + 16) = v39;
            *(_WORD *)(v3 + 2) = 5;
            return v3;
          }
        }
        else if ((v31 & 0x80) != 0)
        {
          operator delete(__p);
        }
        v56 = sub_22F060ED0((uint64_t)v5);
        return sub_22F358B48((uint64_t *)a1, (unsigned int *)v5, a3, v56);
      case 0x8Du:
        v40 = HIDWORD(*(_QWORD *)v5) & 0x3FLL;
        if ((_DWORD)v40 == 41 || (_DWORD)v40 == 7)
        {
          v41 = sub_22EF0870C(a1, *(_QWORD *)&v5[8 * ((*(_QWORD *)v5 >> 18) & 1) + 8 + BYTE3(*(_QWORD *)v5)]);
          v3 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
          *(_BYTE *)v3 = 21;
          *(_QWORD *)(v3 + 1) = 0;
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = v41;
          *(_WORD *)(v3 + 2) = 5;
        }
        if ((_DWORD)v40 == 7 || (_DWORD)v40 == 41)
          return v3;
        return sub_22F358B48((uint64_t *)a1, (unsigned int *)v5, a3, 0);
      default:
        if (v8 != 161)
        {
          if (v8 == 154)
            goto LABEL_87;
          goto LABEL_74;
        }
        v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 2) + 32))(*((_QWORD *)v5 + 2));
        v5 = (unsigned __int8 *)v11;
        if (!v11 || (*(_DWORD *)(v11 + 28) & 0x7F) != 0x40)
          goto LABEL_95;
        v3 = (*(_DWORD *)(v11 + 96) >> 20);
        if ((_DWORD)v3 != 255)
          goto LABEL_52;
        v12 = *(_QWORD *)(v11 + 16);
        break;
    }
    while (1)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v13 = *(_QWORD *)v13;
      v14 = *(_WORD *)(v13 + 8) & 0x7F;
      if (v14 == 83)
        break;
      v15 = -40;
      if ((*(_WORD *)(v13 + 8) & 0x7Fu) > 0x46)
      {
        if (v14 == 71)
        {
          v15 = -56;
          goto LABEL_48;
        }
        if (v14 != 81)
          goto LABEL_42;
      }
      else
      {
        if (v14 > 0x18)
          goto LABEL_41;
        if (v14 == 16)
          goto LABEL_35;
        if (((1 << v14) & 0x1066) == 0)
        {
          if (v14 == 24)
          {
LABEL_35:
            v15 = -48;
            goto LABEL_48;
          }
LABEL_41:
          if (v14 == 70)
          {
            v15 = -64;
            goto LABEL_48;
          }
LABEL_42:
          v16 = v14 - 52;
          v46 = v14 - 33 >= 5;
          v17 = -64;
          if (v46)
            v17 = -48;
          v46 = v16 >= 6;
          v15 = -72;
          if (v46)
            v15 = v17;
        }
      }
LABEL_48:
      v12 = *(_QWORD *)(v13 + v15 + 16);
    }
    v3 = sub_22F36F2CC(*(_QWORD *)(v13 + 48), v11);
LABEL_52:
    v18 = *((_QWORD *)v5 + 2);
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 4) != 0)
      v19 = *(_QWORD *)v19;
    if (a3 && *(_QWORD *)(a3 + 32))
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 32))(*(_QWORD *)(a3 + 8));
      if ((*(_WORD *)(v19 + 8) & 0x7Eu) - 52 > 5)
      {
        v21 = v19 - 48;
        v22 = *(_QWORD *)(v19 - 48);
      }
      else
      {
        v21 = v19 - 72;
        v22 = *(_QWORD *)(v19 - 72);
      }
      if ((*(uint64_t (**)(unint64_t))(v22 + 32))(v21) == v20)
      {
        v10 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 32) + 8 * v3);
LABEL_61:
        a3 = *(_QWORD *)a3;
LABEL_79:
        v5 = v10;
        if (!v10)
          return 0;
        continue;
      }
    }
    break;
  }
  if ((*(_WORD *)(v19 + 8) & 0x7Eu) - 52 > 5)
    v29 = (_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v19 - 48) + 32))(v19 - 48) + 96);
  else
    v29 = (_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v19 - 72) + 32))(v19 - 72) + 120);
  v5 = *(unsigned __int8 **)(*v29 + 8 * v3);
LABEL_95:
  v27 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
  v3 = v27;
  v28 = 4;
LABEL_96:
  *(_BYTE *)v27 = v28;
  *(_QWORD *)(v27 + 1) = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = v5;
  return v3;
}

uint64_t sub_22EF09024(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = 24;
  if (*a2 != 103)
    v4 = 32;
  v5 = sub_22EF0870C(a1, *(_QWORD *)&a2[v4]);
  if (*a2 == 103)
    v6 = 32;
  else
    v6 = 40;
  v7 = sub_22EF0870C(a1, *(_QWORD *)&a2[v6]);
  v8 = 48;
  if (*a2 == 103)
    v8 = 40;
  v9 = sub_22EF0870C(a1, *(_QWORD *)&a2[v8]);
  result = sub_22E3CD3D4(*a1, 40, 3);
  *(_BYTE *)result = 29;
  *(_QWORD *)(result + 1) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v7;
  *(_QWORD *)(result + 32) = v9;
  return result;
}

BOOL sub_22EF090E4(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v1 = 0;
  v2 = *a1;
  if (v2 <= 0xB)
  {
    if (v2 == 4)
    {
      v3 = (uint64_t *)(a1 + 16);
      goto LABEL_11;
    }
    if (v2 != 5)
      return v1;
  }
  else
  {
    if (v2 == 12)
    {
      v3 = (uint64_t *)(a1 + 56);
      goto LABEL_11;
    }
    if (v2 == 21)
      return a1[2] == 5;
    if (v2 != 24)
      return v1;
  }
  v3 = (uint64_t *)(a1 + 40);
LABEL_11:
  v4 = *v3;
  if (!v4)
    return 0;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  v1 = 1;
  if (v5 != 32 && v5 != 39)
    return 0;
  return v1;
}

uint64_t sub_22EF09190(uint64_t *a1, __int16 a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v8 = *(unsigned __int8 **)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = sub_22EF0870C(a1, v8);
  v11 = (unsigned __int8 *)sub_22EF0870C(a1, v9);
  if (*v8 != 161)
  {
    if ((a5 & 1) != 0)
    {
LABEL_3:
      result = sub_22E3CD3D4(*a1, 32, 3);
      *(_BYTE *)result = 16;
      *(_QWORD *)(result + 1) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v10;
      *(_QWORD *)(result + 24) = v11;
      return result;
    }
    v13 = 0;
LABEL_8:
    v16 = sub_22E3CD3D4(*a1, 24, 3);
    v15 = 0;
    *(_BYTE *)v16 = 15;
    *(_QWORD *)(v16 + 1) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = v10;
    goto LABEL_9;
  }
  v13 = *((_QWORD *)v8 + 2);
  v14 = sub_22F35912C((uint64_t)a1, v13);
  v15 = v14;
  if ((a5 & 1) != 0)
    goto LABEL_10;
  v16 = v14;
  if (!v14)
    goto LABEL_8;
LABEL_9:
  v17 = sub_22E3CD3D4(*a1, 32, 3);
  *(_BYTE *)v17 = 20;
  *(_QWORD *)(v17 + 1) = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v11;
  *(_WORD *)(v17 + 2) = a2;
  v11 = sub_22F35919C((uint64_t)a1, (unsigned __int8 *)v17, v13);
LABEL_10:
  if (v13)
    v18 = v15 == 0;
  else
    v18 = 1;
  if (v18)
    goto LABEL_3;
  return sub_22F359284((uint64_t)a1, v13, (uint64_t)v11);
}

_QWORD *sub_22EF092E8(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 60)
      abort();
    v7 = result;
    result = operator new(16 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    if (a2 != a3)
    {
      v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFF0;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_22EF09370(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t **i;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t j;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  int v64;
  char v65;
  _DWORD *v66;
  uint64_t v67;
  void ***v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  _DWORD *v75;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  llvm *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t (**v84)();
  void *v85[2];
  _DWORD v86[14];
  char v87;
  int v88;
  void *v89[2];
  _DWORD v90[14];
  void *v91[2];
  _DWORD v92[14];
  void *v93;
  uint64_t v94;
  _DWORD v95[14];
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[160];
  uint64_t v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  _BYTE v104[64];
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v93 = (void *)1;
  v101 = a2;
  v102 = v104;
  v103 = 0x800000000;
  sub_22E54C5D0((void ***)&v93);
  v106 = 0;
  v107 = 0;
  v105 = 1;
  v108 = 0;
  if ((*(_BYTE *)(a1 + 8) & 0x80) != 0)
    sub_22EFCC320(a1);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    while ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 60 > 6)
    {
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        goto LABEL_6;
    }
    v64 = 0;
LABEL_85:
    v84 = (uint64_t (**)())v8;
    if (sub_22EF0A288(v8, (_QWORD *)a1))
    {
      v93 = 0;
      v65 = sub_22F25AFD8((uint64_t *)&v106, &v84, &v93);
      v66 = v93;
      if ((v65 & 1) == 0)
      {
        v66 = sub_22E4D1B3C((uint64_t)&v106, (uint64_t)&v84, &v84, v93);
        *(_QWORD *)v66 = v84;
        v66[2] = 0;
      }
      v66[2] = v64++;
    }
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        break;
      if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 60 < 7)
        goto LABEL_85;
    }
  }
LABEL_6:
  v9 = (2 * v107);
  sub_22E97F810((unint64_t *)&v105, v9, 0);
  v10 = v101[6];
  v75 = a5;
  v77 = a3;
  if ((_DWORD)v10)
  {
    v11 = v103;
    v12 = 8 * v10;
    if ((_DWORD)v103 != (_DWORD)v10)
    {
      if (v103 > v10)
      {
        v67 = v12 - 8 * v103;
        v68 = (void ***)&v102[8 * v103 - 8];
        do
        {
          v68 = sub_22E54C5D0(v68) - 1;
          v67 += 8;
        }
        while (v67);
      }
      else
      {
        if (HIDWORD(v103) < v10)
        {
          v93 = 0;
          v13 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          v14 = v102;
          if ((_DWORD)v103)
          {
            v69 = 8 * v103;
            v70 = v69;
            v71 = (_QWORD *)v13;
            v72 = v102;
            do
            {
              *v71++ = *(_QWORD *)v72;
              *(_QWORD *)v72 = 1;
              v72 += 8;
              v70 -= 8;
            }
            while (v70);
            v73 = v14 - 8;
            do
            {
              sub_22E54C5D0((void ***)&v73[v69]);
              v69 -= 8;
            }
            while (v69);
            v14 = v102;
          }
          v15 = (int)v93;
          if (v14 != v104)
            free(v14);
          v102 = (char *)v13;
          HIDWORD(v103) = v15;
          v11 = v103;
        }
        if (v10 != v11)
          memset_pattern16(&v102[8 * v11], &xmmword_22F44E3E0, 8 * (v10 - v11));
      }
      LODWORD(v103) = v10;
    }
    v16 = (unint64_t *)v102;
    do
    {
      sub_22E97F810(v16++, v9, 0);
      v12 -= 8;
    }
    while (v12);
  }
  if ((_DWORD)v107)
  {
    *a5 = v107;
    v17 = sub_22EFCAE04(*(_QWORD *)(a3 + 8));
    v80 = 0;
    v81 = 0;
    v79 = v17;
    v82 = 0;
    v19 = (uint64_t **)*((_QWORD *)a2 + 5);
    for (i = (uint64_t **)*((_QWORD *)a2 + 6); v19 != i; ++v19)
    {
      v21 = **v19;
      v20 = (*v19)[1];
      while (v20 != v21)
      {
        v23 = *(_QWORD *)(v20 - 16);
        v20 -= 16;
        v22 = v23;
        if ((unint64_t)((v23 & 3 | (4 * (*(_DWORD *)(v20 + 8) & 3u))) - 9) >= 0xFFFFFFFD)
        {
          v25 = v22 & 0xFFFFFFFFFFFFFFFCLL;
          v24 = (v22 & 0xFFFFFFFFFFFFFFFCLL) == 0;
          v26 = *(unsigned __int8 *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v24 && (v26 & 0xFE) == 0x70)
          {
            switch((*(_DWORD *)v25 >> 18) & 0x3F)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
                sub_22EF0BE30(&v79, v25);
                continue;
              default:
                goto LABEL_32;
            }
          }
          if (!v25 || v26 != 233)
LABEL_32:
            __asm { BR              X9 }
          if ((*(_DWORD *)v25 & 0x700000) == 0)
            sub_22EF0C3BC(&v79, *(unsigned __int8 **)(v25 + 16), 1);
        }
      }
    }
    v27 = v107;
    v28 = a5;
    v29 = (uint64_t)a2;
    if ((_DWORD)v107)
    {
      v30 = 0;
      v31 = &v102[8 * *(unsigned int *)(*(_QWORD *)a2 + 48)];
      do
      {
        for (j = 0; j != 2; ++j)
        {
          v93 = v31;
          v94 = 2 * (v30 & 0x7FFFFFFF) + j;
          sub_22EF0B094((uint64_t)&v93, j == 1);
        }
        ++v30;
      }
      while (v30 != v27);
    }
    v33 = v77;
    v34 = sub_22EEBD4E0(v77);
    v35 = a2[6];
    v93 = v95;
    v94 = 0x600000000;
    sub_22E47EDD0((uint64_t)&v93, (v35 + 63) >> 6, 0);
    v95[12] = v35;
    v96 = v34;
    v97 = v99;
    v98 = 0x1400000000;
    v100 = v34;
    v36 = a2[6];
    v91[0] = v92;
    v91[1] = (void *)0x600000000;
    sub_22E47EDD0((uint64_t)v91, (v36 + 63) >> 6, 0);
    v92[12] = v36;
    v37 = *(uint64_t **)(*(_QWORD *)a2 + 80);
    v38 = *(uint64_t **)(*(_QWORD *)a2 + 88);
    while (v37 != v38)
    {
      v39 = *v37;
      v37 += 2;
      sub_22EF0A3C8((uint64_t)&v93, v39);
    }
    v40 = a2[6];
    v89[0] = v90;
    v89[1] = (void *)0x600000000;
    sub_22E47EDD0((uint64_t)v89, (v40 + 63) >> 6, 0);
    v90[12] = v40;
    *(_QWORD *)((char *)v89[0] + (((unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 48) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(*(_QWORD *)a2 + 48);
    v41 = a2[6];
    v84 = &off_24FABA048;
    v85[0] = v86;
    v85[1] = (void *)0x600000000;
    sub_22E47EDD0((uint64_t)v85, (v41 + 63) >> 6, 0);
    v86[12] = v41;
    v87 = 0;
    v88 = 0;
    v42 = v98;
    if ((_DWORD)v98)
    {
      do
      {
        v43 = *(_QWORD *)v97;
        v83 = v100;
        if (v42 != 1)
        {
          v78 = v97;
          v44 = 0;
          v45 = v97;
          do
          {
            v46 = &v45[v44];
            v49 = v46[1];
            v47 = v46 + 1;
            v48 = v49;
            v50 = (2 * v44) | 1;
            v51 = 2 * v44 + 2;
            if (v51 < v42)
            {
              v52 = v47[1];
              if (sub_22EEE25C0((uint64_t)&v83, v52, v48))
              {
                v48 = v52;
                ++v47;
                v50 = v51;
              }
            }
            *v45 = v48;
            v45 = v47;
            v44 = v50;
          }
          while (v50 <= (uint64_t)(((unint64_t)v42 - 2) >> 1));
          v53 = (uint64_t *)&v78[8 * v42 - 8];
          if (v47 == v53)
          {
            *v47 = v43;
          }
          else
          {
            *v47 = *v53;
            *v53 = v43;
            sub_22EF0A474((_BOOL8)v78, (uint64_t)(v47 + 1), (uint64_t)&v83, ((char *)(v47 + 1) - v78) >> 3);
            v42 = v98;
          }
          v28 = v75;
          v29 = (uint64_t)a2;
          v33 = v77;
        }
        LODWORD(v98) = v42 - 1;
        v54 = *(unsigned int *)(v43 + 48);
        *(_QWORD *)((char *)v93 + ((v54 >> 3) & 0x1FFFFFF8)) &= ~(1 << v54);
        v88 = v54;
        v55 = sub_22EF09CCC(v43, v29, v33, (uint64_t)&v101, (uint64_t)&v79, v89, (uint64_t)&v84);
        ++v28[1];
        if ((v55 & 1) != 0
          || ((*(_QWORD *)((char *)v91[0] + (((unint64_t)*(unsigned int *)(v43 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v43 + 48)) & 1) == 0)
        {
          v56 = *(uint64_t **)(v43 + 80);
          v57 = *(uint64_t **)(v43 + 88);
          while (v56 != v57)
          {
            v58 = *v56;
            v56 += 2;
            sub_22EF0A3C8((uint64_t)&v93, v58);
          }
        }
        *(_QWORD *)((char *)v91[0] + (((unint64_t)*(unsigned int *)(v43 + 48) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v43 + 48);
        v42 = v98;
      }
      while ((_DWORD)v98);
      if (v87)
      {
        v59 = *(uint64_t **)(v29 + 40);
        v60 = *(uint64_t **)(v29 + 48);
        while (v59 != v60)
        {
          if (((*(_QWORD *)((char *)v85[0] + (((unint64_t)*(unsigned int *)(*v59 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(*v59 + 48)) & 1) != 0)
          {
            sub_22EF09CCC(*v59, v29, v33, (uint64_t)&v101, (uint64_t)&v79, v89, a4);
            ++v28[1];
          }
          ++v59;
        }
      }
    }
    v84 = &off_24FABA048;
    if (v85[0] != v86)
      free(v85[0]);
    if (v89[0] != v90)
      free(v89[0]);
    if (v91[0] != v92)
      free(v91[0]);
    if (v97 != v99)
      free(v97);
    if (v93 != v95)
      free(v93);
    llvm::deallocate_buffer(v80, (void *)(16 * v82));
  }
  llvm::deallocate_buffer(v106, (void *)(16 * v108));
  sub_22E54C5D0((void ***)&v105);
  v61 = v102;
  if ((_DWORD)v103)
  {
    v62 = 8 * v103;
    v63 = v102 - 8;
    do
    {
      sub_22E54C5D0((void ***)&v63[v62]);
      v62 -= 8;
    }
    while (v62);
    v61 = v102;
  }
  if (v61 != v104)
    free(v61);
}

uint64_t sub_22EF09CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int i;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v51[5];
  uint64_t v52[5];

  *(_QWORD *)(*a6 + (((unint64_t)*(unsigned int *)(a1 + 48) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(a1 + 48);
  v15 = (uint64_t *)(a4 + 88);
  v14 = *(_QWORD *)(a4 + 88);
  if ((v14 & 1) != 0)
  {
    *v15 = v14 & 0xFC00000000000000 | 1;
  }
  else
  {
    v16 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v16)
      bzero(*(void **)v14, 8 * v16);
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  if (v17 != v18)
  {
    v19 = 1;
    do
    {
      if (*(_QWORD *)v17)
      {
        v20 = *(unsigned int *)(*(_QWORD *)v17 + 48);
        if (((*(_QWORD *)(*a6 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0)
        {
          v21 = (uint64_t *)(*(_QWORD *)(a4 + 8) + 8 * v20);
          if ((v19 & 1) != 0)
            sub_22EF0A100(v15, v21);
          else
            sub_22EF0ADFC((unint64_t *)v15, (unint64_t *)v21);
          v19 = 0;
        }
      }
      v17 += 16;
    }
    while (v17 != v18);
  }
  v51[0] = a4;
  v51[1] = a2;
  v51[2] = a1;
  v51[3] = a3;
  v51[4] = a5;
  v22 = *(_QWORD *)(a3 + 8);
  if (!v22 || (*(_DWORD *)(v22 + 28) & 0x7F) != 0x53)
  {
    v23 = *(_QWORD *)(v22 + 16);
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 4) != 0)
      v24 = *(_QWORD *)v24;
    for (i = *(_WORD *)(v24 + 8) & 0x7F; i != 83; i = *(_WORD *)(v24 + 8) & 0x7F)
    {
      v26 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v26 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_29;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_28;
        if (i == 16)
          goto LABEL_22;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_35;
        if (i == 24)
        {
LABEL_22:
          v26 = -48;
        }
        else
        {
LABEL_28:
          if (i != 70)
          {
LABEL_29:
            v27 = i - 52;
            if ((i - 33) >= 5)
              v28 = -48;
            else
              v28 = -64;
            if (v27 >= 6)
              v26 = v28;
            else
              v26 = -72;
            goto LABEL_35;
          }
          v26 = -64;
        }
      }
LABEL_35:
      v29 = *(_QWORD *)(v24 + v26 + 16);
      v24 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v24 = *(_QWORD *)v24;
    }
    v22 = v24 - 40;
  }
  sub_22EEE2028(v52, *(_QWORD *)(v22 + 88));
  v52[4] = a7;
  v31 = *(_QWORD *)a1;
  v30 = *(_QWORD *)(a1 + 8);
  while (v30 != v31)
  {
    v33 = *(_QWORD *)(v30 - 16);
    v30 -= 16;
    v32 = v33;
    if ((unint64_t)((v33 & 3 | (4 * (*(_DWORD *)(v30 + 8) & 3u))) - 9) >= 0xFFFFFFFD)
      sub_22EF0A5E8((uint64_t)v51, (_DWORD *)(v32 & 0xFFFFFFFFFFFFFFFCLL));
  }
  v34 = (_DWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8);
  if (v34 && *(_BYTE *)v34 == 1 && v34[20])
    sub_22EF0A5E8((uint64_t)v51, v34);
  v35 = (uint64_t *)(*(_QWORD *)(a4 + 8) + 8 * *(unsigned int *)(a1 + 48));
  v36 = *v35;
  v37 = *(_QWORD *)(a4 + 88);
  if ((*v35 & 1) != 0)
  {
    v38 = v36 >> 58;
    if ((v37 & 1) != 0)
      goto LABEL_52;
  }
  else
  {
    v38 = *(unsigned int *)(v36 + 64);
    if ((v37 & 1) != 0)
    {
LABEL_52:
      v39 = v37 >> 58;
      goto LABEL_55;
    }
  }
  v39 = *(unsigned int *)(v37 + 64);
LABEL_55:
  if (v38 != v39)
    goto LABEL_74;
  if ((v36 & 1) != 0)
  {
    if ((v37 & 1) == 0)
    {
      v41 = v36 >> 58;
      if (!(v36 >> 58))
        return 0;
LABEL_65:
      v42 = 0;
      v43 = v41 - 1;
      do
      {
        v44 = v42 >> 6;
        v45 = v42;
        v46 = (v36 >> 1) & ~(-1 << (v36 >> 58));
        if ((v36 & 1) == 0)
        {
          v45 = v42 & 0x3F;
          v46 = *(_QWORD *)(*(_QWORD *)v36 + 8 * v44);
        }
        v47 = v42;
        v48 = (v37 >> 1) & ~(-1 << (v37 >> 58));
        if ((v37 & 1) == 0)
        {
          v47 = v42 & 0x3F;
          v48 = *(_QWORD *)(*(_QWORD *)v37 + 8 * v44);
        }
        v49 = ((v46 & (1 << v45)) != 0) ^ (v48 >> v47);
        if ((v49 & 1) != 0)
          break;
      }
      while (v43 != v42++);
      if ((v49 & 1) != 0)
        goto LABEL_74;
      return 0;
    }
    if (((v36 >> 1) & ~(-1 << (v36 >> 58))) == ((v37 >> 1) & ~(-1 << (v37 >> 58))))
      return 0;
LABEL_74:
    sub_22EF0A100(v35, v15);
    return 1;
  }
  if ((v37 & 1) != 0)
  {
    v41 = *(unsigned int *)(v36 + 64);
    if (!*(_DWORD *)(v36 + 64))
      return 0;
    goto LABEL_65;
  }
  if (*(_DWORD *)(v36 + 64) != *(_DWORD *)(v37 + 64))
    goto LABEL_74;
  result = memcmp(*(const void **)v36, *(const void **)v37, 8 * *(unsigned int *)(v36 + 8));
  if ((_DWORD)result)
    goto LABEL_74;
  return result;
}

_QWORD *sub_22EF0A0C0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FABA048;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

uint64_t *sub_22EF0A100(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  if ((*a1 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      if (v4 == v5)
      {
LABEL_11:
        *(_DWORD *)(v4 + 64) = *(_DWORD *)(v5 + 64);
        return a1;
      }
      v6 = *(unsigned int *)(v5 + 8);
      v7 = *(unsigned int *)(v4 + 8);
      if (v7 >= v6)
      {
        if ((_DWORD)v6)
          memmove(*(void **)v4, *(const void **)v5, 8 * v6);
        goto LABEL_10;
      }
      if (*(_DWORD *)(v4 + 12) < v6)
      {
        *(_DWORD *)(v4 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      else if ((_DWORD)v7)
      {
        memmove(*(void **)v4, *(const void **)v5, 8 * v7);
LABEL_8:
        v8 = *(unsigned int *)(v5 + 8);
        if (v7 != v8)
          memcpy((void *)(*(_QWORD *)v4 + 8 * v7), (const void *)(*(_QWORD *)v5 + 8 * v7), *(_QWORD *)v5 + 8 * v8 - (*(_QWORD *)v5 + 8 * v7));
LABEL_10:
        *(_DWORD *)(v4 + 8) = v6;
        goto LABEL_11;
      }
      v7 = 0;
      goto LABEL_8;
    }
    if (v4)
    {
      if (*(_QWORD *)v4 != v4 + 16)
        free(*(void **)v4);
      MEMORY[0x2348A0E9C](v4, 0x1080C40EF38A13ELL);
      v5 = *a2;
    }
LABEL_17:
    *a1 = v5;
    return a1;
  }
  if ((v5 & 1) != 0)
    goto LABEL_17;
  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = *a2;
  *v10 = v10 + 2;
  v10[1] = 0x600000000;
  if (*(_DWORD *)(v12 + 8))
    sub_22E861BFC((uint64_t)v10, v12);
  *((_DWORD *)v11 + 16) = *(_DWORD *)(v12 + 64);
  *a1 = (uint64_t)v11;
  return a1;
}

unint64_t sub_22EF0A288(uint64_t a1, _QWORD *a2)
{
  unint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 v15;

  result = sub_22E3CEC2C(a1);
  if (!(_DWORD)result)
    return result;
  result = sub_22E3CB5E0(a1);
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)(a1 + 28);
  if ((v5 & 0x7F) == 0x40)
  {
    if ((v5 & 0x200) != 0)
      return 0;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 0x200) != 0 || v6 & 0x10000 | v5 & 0x200)
      return 0;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  if (v8 != a2)
    return 0;
  v9 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(v10 + 16);
  v12 = v11;
  if (v10)
    v13 = v11 == 11;
  else
    v13 = 0;
  if (v13)
  {
    if (((v11 >> 19) & 0x1FF) - 166 >= 0x35)
    {
      v12 = 11;
      return v12 == 45 || (v12 - 55) < 2;
    }
    return 1;
  }
  if (v10 && v11 == 44)
  {
    v14 = sub_22F114198(*(_QWORD *)(v10 + 24));
    if ((*(_BYTE *)(v14 + 74) & 1) == 0 && *(_QWORD *)(v14 + 128) <= 7uLL)
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      return v12 == 45 || (v12 - 55) < 2;
    }
    return 1;
  }
  v15 = v11 - 9;
  if (v15 < 0x1Fu && ((0x40C0000Bu >> v15) & 1) != 0)
    return 1;
  return v12 == 45 || (v12 - 55) < 2;
}

uint64_t sub_22EF0A3C8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v2 = *(unsigned int *)(a2 + 48);
    v3 = v2 >> 6;
    v4 = *(_QWORD *)(*(_QWORD *)result + 8 * (v2 >> 6));
    v5 = 1 << v2;
    if ((v5 & v4) == 0)
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v3) = v5 | v4;
      v6 = *(_DWORD *)(result + 88);
      if (v6 >= *(_DWORD *)(result + 92))
      {
        v9 = a2;
        v10 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v9;
        result = v10;
        v6 = *(_DWORD *)(v10 + 88);
      }
      *(_QWORD *)(*(_QWORD *)(result + 80) + 8 * v6) = a2;
      v7 = (*(_DWORD *)(result + 88) + 1);
      *(_DWORD *)(result + 88) = v7;
      v8 = *(_QWORD *)(result + 80);
      v11 = *(_QWORD *)(result + 256);
      return sub_22EF0A474(v8, v8 + 8 * v7, (uint64_t)&v11, v7);
    }
  }
  return result;
}

BOOL sub_22EF0A474(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v11 = (uint64_t *)(a2 - 8);
    v10 = *(_QWORD *)(a2 - 8);
    result = sub_22EEE25C0(a3, v10, *v8);
    if (result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v9 = *v8;
        result = sub_22EEE25C0(a3, v10, *v8);
        v11 = v12;
      }
      while (result);
      *v12 = v10;
    }
  }
  return result;
}

void sub_22EF0A514(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FABA048;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EF0A564(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + (((unint64_t)*(unsigned int *)(result + 84) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(result + 84);
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t sub_22EF0A590(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + (((unint64_t)*(unsigned int *)(result + 84) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(result + 84);
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t sub_22EF0A5BC(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + (((unint64_t)*(unsigned int *)(result + 84) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(result + 84);
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t sub_22EF0A5E8(uint64_t result, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22EF0B124(result, (uint64_t)a2);
      default:
        goto LABEL_7;
    }
  }
  if (!a2 || v2 != 233)
LABEL_7:
    __asm { BR              X10 }
  return result;
}

unint64_t *sub_22EF0ADFC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];

  v4 = *a1;
  if ((*a1 & 1) != 0)
    v5 = v4 >> 58;
  else
    v5 = *(unsigned int *)(v4 + 64);
  v6 = *a2;
  if ((*a2 & 1) != 0)
    v7 = v6 >> 58;
  else
    v7 = *(unsigned int *)(v6 + 64);
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  sub_22E97F810(a1, v8, 0);
  v9 = *a1;
  v10 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v10 & 1) != 0)
    {
      *a1 = v9 & 0xFC00000000000000 | (2
                                       * (((v10 >> 1) & ~(-1 << (v10 >> 58)) | (v9 >> 1) & ~(-1 << (v9 >> 58))) & ~(-1 << (v9 >> 58)))) | 1;
      return a1;
    }
    v16 = *(unsigned int *)(v10 + 64);
    if (!*(_DWORD *)(v10 + 64))
      return a1;
LABEL_21:
    v17 = 0;
    while (1)
    {
      v18 = *a1;
      if ((*a1 & 1) != 0)
      {
        if (((1 << v17) & (v18 >> 1) & ~(-1 << (v18 >> 58))) == 0)
        {
LABEL_26:
          v20 = *a2;
          if ((*a2 & 1) != 0)
            v21 = (1 << v17) & (v20 >> 1) & ~(-1 << (v20 >> 58));
          else
            v21 = *(_QWORD *)(*(_QWORD *)v20 + 8 * (v17 >> 6)) & (1 << v17);
          v19 = v21 != 0;
          goto LABEL_30;
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v18 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
      {
        goto LABEL_26;
      }
      v19 = 1;
LABEL_30:
      v30[0] = a1;
      v30[1] = v17;
      sub_22EF0B094((uint64_t)v30, v19);
      if (v16 == ++v17)
        return a1;
    }
  }
  if ((v10 & 1) != 0)
  {
    v16 = v10 >> 58;
    if (!(v10 >> 58))
      return a1;
    goto LABEL_21;
  }
  v11 = *(_DWORD *)(v10 + 64);
  if (*(_DWORD *)(v9 + 64) < v11)
  {
    v23 = *(_DWORD *)(v9 + 64) & 0x3F;
    v24 = *(unsigned int *)(v9 + 8);
    if (v23)
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v24 - 8) &= ~(-1 << v23);
    v25 = v24;
    *(_DWORD *)(v9 + 64) = v11;
    v26 = v11 + 63;
    if ((_DWORD)v24 != (v11 + 63) >> 6)
    {
      v27 = v26 >> 6;
      if (v24 > v27)
      {
        *(_DWORD *)(v9 + 8) = v27;
        v25 = v26 >> 6;
      }
      else
      {
        v28 = v24;
        if (v27 > *(_DWORD *)(v9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = *(unsigned int *)(v9 + 8);
          v25 = *(_DWORD *)(v9 + 8);
        }
        if (v27 != v24)
          bzero((void *)(*(_QWORD *)v9 + 8 * v28), 8 * (v27 - v24));
        v25 += v27 - v24;
        *(_DWORD *)(v9 + 8) = v25;
        v11 = *(_DWORD *)(v9 + 64);
      }
    }
    v29 = v11 & 0x3F;
    if (v29)
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v25 - 8) &= ~(-1 << v29);
  }
  v12 = *(unsigned int *)(v10 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)v10;
    v14 = *(_QWORD **)v9;
    do
    {
      v15 = *v13++;
      *v14++ |= v15;
      --v12;
    }
    while (v12);
  }
  return a1;
}

uint64_t sub_22EF0B094(uint64_t a1, int a2)
{
  unint64_t *v4;
  unsigned int v5;
  unint64_t v6;

  v4 = *(unint64_t **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    sub_22E54C570(v4, v5);
  }
  else
  {
    v6 = *v4;
    if ((*v4 & 1) != 0)
      *v4 = ((2 * ~((-1 << (v6 >> 58)) | (1 << v5))) | 0xFC00000000000000) & v6 | 1;
    else
      *(_QWORD *)(*(_QWORD *)v6 + 8 * (v5 >> 6)) &= ~(1 << v5);
  }
  return a1;
}

uint64_t sub_22EF0B124(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if ((*(_DWORD *)a2 & 0xFC0000) == 0x540000)
  {
    v2 = (uint64_t *)result;
    v3 = *(unsigned __int8 **)(a2 + 16);
    v4 = sub_22EFCAE04(*(_QWORD *)(*(_QWORD *)(result + 24) + 8));
    result = sub_22EF0B220(v3, v4);
    if (result)
    {
      v5 = *v2;
      v6 = sub_22EF0B474(*v2 + 96, result);
      v7 = 0;
      v8 = v5 + 88;
      v9 = (2 * v6);
      do
      {
        v10[0] = v8;
        v10[1] = v9 + v7;
        result = sub_22EF0B094((uint64_t)v10, v7++ == 0);
      }
      while (v7 != 2);
    }
  }
  return result;
}

uint64_t sub_22EF0B1C0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  result = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (result)
  {
    v4 = result;
    if (sub_22E47254C(result))
    {
      v5 = 1;
      return sub_22EF0BD98(*a1, v5);
    }
    result = sub_22F359510(v4);
    if ((_DWORD)result)
    {
      v5 = 0;
      return sub_22EF0BD98(*a1, v5);
    }
  }
  return result;
}

uint64_t sub_22EF0B220(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  BOOL v20;

  v3 = *(_WORD *)(a2 + 8) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_17;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_17;
    }
    if (v3 != 81)
    {
LABEL_12:
      v5 = v3 - 52;
      v20 = v3 - 33 >= 5;
      v6 = -48;
      if (!v20)
        v6 = -64;
      if (v5 >= 6)
        v4 = v6;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_11;
    if (v3 == 16)
    {
LABEL_4:
      v4 = -48;
      goto LABEL_17;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_4;
LABEL_11:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v7 = a2 + v4;
  if ((*(_DWORD *)(v7 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_31;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_30;
        if (i == 16)
          goto LABEL_24;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_37;
        if (i == 24)
        {
LABEL_24:
          v11 = -48;
        }
        else
        {
LABEL_30:
          if (i != 70)
          {
LABEL_31:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_37;
          }
          v11 = -64;
        }
      }
LABEL_37:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  if (a1)
  {
    v15 = *(_QWORD *)(v7 + 88);
    while (1)
    {
      v16 = sub_22EFFF40C(a1, v15);
      v17 = v16;
      v18 = *v16;
      if ((v18 + 102) < 0xF5u)
        break;
      if ((*(_DWORD *)v16 & 0x1FC0000) != 0x80000)
        goto LABEL_50;
      a1 = (unsigned __int8 *)*((_QWORD *)v16 + 2);
      if (!a1)
        goto LABEL_49;
    }
  }
  else
  {
LABEL_49:
    v17 = 0;
LABEL_50:
    v18 = *v17;
  }
  if (v18 != 161)
    return 0;
  v19 = *((_QWORD *)v17 + 2);
  v20 = v19 && (*(_DWORD *)(v19 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
  if (!v20)
    return 0;
  if (sub_22EF0A288(*((_QWORD *)v17 + 2), (_QWORD *)a2))
    return v19;
  return 0;
}

uint64_t sub_22EF0B474(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_22F25AFD8((uint64_t *)a1, &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(unsigned int *)(v3 + 8) | 0x100000000;
}

unint64_t sub_22EF0B4E4(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 45)
    return 0;
  result = sub_22EFBC5B4(a1);
  if (result)
  {
    v3 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v7 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v8 = i - 52;
              if ((i - 33) >= 5)
                v9 = -48;
              else
                v9 = -64;
              if (v8 >= 6)
                v7 = v9;
              else
                v7 = -72;
              goto LABEL_23;
            }
            v7 = -64;
          }
        }
LABEL_23:
        v10 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v3 = v5 - 40;
    }
    v11 = *(_QWORD *)(v3 + 88);
    while (1)
    {
      result = (unint64_t)sub_22EFFF40C((unsigned __int8 *)result, v11);
      LOBYTE(v12) = *(_BYTE *)result;
      if ((*(_BYTE *)result + 102) < 0xF5u)
        break;
      v12 = *(_DWORD *)result;
      if ((*(_DWORD *)result & 0x1FC0000) != 0x80000)
        break;
      result = *(_QWORD *)(result + 16);
    }
    if (v12 != 161 || *(_QWORD *)(result + 16) != a1)
      return 0;
  }
  return result;
}

uint64_t sub_22EF0B680(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  __int128 v17;
  uint64_t v18[2];
  __int128 v19;
  _QWORD v20[8];
  _OWORD v21[4];

  v4 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v6 = *(_DWORD *)v4;
    v4 += 2;
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  sub_22F34CA1C((uint64_t)v21, v4, v5);
  result = sub_22F34CA1C((uint64_t)v20, &v4[v5], 0);
  *(_OWORD *)v16 = v21[0];
  v17 = v21[1];
  *(_OWORD *)v18 = v21[2];
  v19 = v21[3];
  v8 = v20[0];
  while (v16[0] != v8)
  {
    if ((BYTE8(v17) & 3) != 0)
    {
      if ((*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v9 = (_QWORD *)((*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v9 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v17);
    }
    else
    {
      v9 = (_QWORD *)v17;
    }
    sub_22EF0A5E8(a1, *v9);
    result = (uint64_t)sub_22EED9548((uint64_t **)v16);
  }
  v10 = *a2 - 75;
  v11 = v10 > 5;
  v12 = (1 << v10) & 0x23;
  if (v11 || v12 == 0)
  {
    v14 = *((_QWORD *)a2 + 3);
    if (v14)
    {
      if (*(_BYTE *)(v14 + 8))
      {
        v15 = sub_22F0D89F8(a2);
        return sub_22EF0A5E8(a1, v15);
      }
    }
  }
  return result;
}

void sub_22EF0B798(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  BOOL v50;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[32];
  void *v72[2];
  _BYTE v73[128];
  void *v74;
  uint64_t v75;
  _QWORD v76[34];

  v76[32] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = sub_22EF0B474(*a1 + 96, a3);
  v8 = sub_22EF0BD30(*(_QWORD *)(v6 + 88), v7);
  v9 = v8 == 2;
  if (v8 >= 2)
  {
    v10 = a1[9];
    v11 = v9;
    v66 = a2;
    v67 = 0;
    v68 = v11;
    v69 = v71;
    v70 = 0x200000000;
    if (!v9)
    {
      v62 = v10;
      v74 = v76;
      v75 = 0x2000000000;
      v12 = *(unsigned int *)(a1[1] + 24);
      v72[0] = v73;
      v72[1] = (void *)0x2000000000;
      sub_22E80A6E8((uint64_t)v72, v12, 0);
      v13 = a1[2];
      v14 = v75;
      if (v75 >= HIDWORD(v75))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v75;
      }
      *((_QWORD *)v74 + v14) = v13;
      LODWORD(v75) = v75 + 1;
      *((_DWORD *)v72[0] + *(unsigned int *)(a1[2] + 48)) = (*(_QWORD *)(a1[2] + 88) - *(_QWORD *)(a1[2] + 80)) >> 4;
      v15 = v75;
      if ((_DWORD)v75)
      {
        while (1)
        {
          v16 = *((_QWORD *)v74 + --v15);
          LODWORD(v75) = v15;
          if (v16 == *(_QWORD *)a1[1])
            LOBYTE(v67) = 1;
          v17 = *(uint64_t **)(v16 + 56);
          v18 = *(uint64_t **)(v16 + 64);
          if (v17 != v18)
            break;
LABEL_49:
          if (!v15)
            goto LABEL_50;
        }
        while (1)
        {
          v19 = *v17;
          if (*v17)
          {
            v20 = *a1;
            v21 = sub_22EF0B474(*a1 + 96, a3);
            v22 = sub_22EF0BD30(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * *(unsigned int *)(v19 + 48)), v21);
            if (v22 != 1)
            {
              if (v22 != 3)
                goto LABEL_34;
              v23 = *a1;
              v24 = sub_22EF0B474(*a1 + 96, a3);
              if (sub_22EF0BD30(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * *(unsigned int *)(v16 + 48)), v24) != 2)
              {
                v25 = *(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF8;
                if (!v25
                  || *(_BYTE *)v25 != 1
                  || !*(_DWORD *)(v25 + 80)
                  || (v26 = *(unsigned int *)(v25 + 16), !(_DWORD)v26))
                {
LABEL_34:
                  v35 = *(unsigned int *)(v19 + 48);
                  v36 = v72[0];
                  v37 = *((_DWORD *)v72[0] + v35);
                  if (v37)
                  {
                    v38 = *(char **)(v19 + 80);
                    v39 = *(char **)(v19 + 88);
                  }
                  else
                  {
                    v38 = *(char **)(v19 + 80);
                    v39 = *(char **)(v19 + 88);
                    if (v38 == v39)
                    {
                      v37 = 0;
                      v39 = *(char **)(v19 + 80);
                    }
                    else
                    {
                      v37 = 0;
                      v40 = *(char **)(v19 + 80);
                      do
                      {
                        if (!*(_QWORD *)v40)
                          v36[v35] = ++v37;
                        v40 += 16;
                      }
                      while (v40 != v39);
                    }
                  }
                  v41 = v37 + 1;
                  v36[v35] = v41;
                  if (v41 == ((unint64_t)(v39 - v38) >> 4))
                  {
                    v42 = v75;
                    if (v75 >= (unint64_t)HIDWORD(v75))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v42 = v75;
                    }
                    *((_QWORD *)v74 + v42) = v19;
                    LODWORD(v75) = v75 + 1;
                  }
                  goto LABEL_47;
                }
                v27 = **(_QWORD **)(v19 + 80);
                v28 = *(unsigned __int8 ***)(v25 + 32);
                v65 = (unint64_t)&v28[v26];
                while (1)
                {
                  v29 = *v28;
                  v30 = sub_22EFCAE04(*(_QWORD *)(a1[3] + 8));
                  if (sub_22EF0B220(v29, v30) == a3)
                  {
                    v31 = *(unsigned int *)(v25 + 80);
                    if ((_DWORD)v31)
                      break;
                  }
LABEL_23:
                  if (++v28 == (unsigned __int8 **)v65)
                    goto LABEL_34;
                }
                v32 = *(_QWORD *)(v25 + 32) + 8 * *(unsigned int *)(v25 + 16) + 8 * *(unsigned int *)(v25 + 20);
                v33 = 8 * v31;
                while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v32 + 24) + 48) != *(_QWORD *)(v16 + 24) || v16 == v27)
                {
                  v32 += 8;
                  v33 -= 8;
                  if (!v33)
                    goto LABEL_23;
                }
              }
              HIBYTE(v67) = 1;
            }
          }
LABEL_47:
          v17 += 2;
          if (v17 == v18)
          {
            v15 = v75;
            goto LABEL_49;
          }
        }
      }
LABEL_50:
      v43 = a1[1];
      v44 = *(uint64_t **)(v43 + 40);
      v64 = *(uint64_t **)(v43 + 48);
      if (v44 != v64)
      {
        while (1)
        {
          v45 = *v44;
          v46 = *((_DWORD *)v72[0] + *(unsigned int *)(*v44 + 48));
          if (v46)
          {
            v47 = (_BYTE *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF8);
            v49 = *(char **)(v45 + 80);
            v48 = *(char **)(v45 + 88);
            v50 = v48 == v49 || v46 >= ((unint64_t)(v48 - v49) >> 4);
            if (!v50 && v47 != 0)
              break;
          }
LABEL_60:
          if (++v44 == v64)
            goto LABEL_77;
        }
        v52 = *(char **)(v45 + 80);
        while (1)
        {
          v53 = *(_QWORD *)v52;
          if (!*(_QWORD *)v52)
            goto LABEL_75;
          if (*((_DWORD *)v72[0] + *(unsigned int *)(v53 + 48)) < ((*(_QWORD *)(v53 + 88)
                                                                                 - *(_QWORD *)(v53 + 80)) >> 4))
            goto LABEL_75;
          v54 = *a1;
          v55 = sub_22EF0B474(*a1 + 96, a3);
          if (sub_22EF0BD30(*(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * *(unsigned int *)(v45 + 48)), v55) != 2)
            goto LABEL_75;
          if (*v47 == 100)
          {
            v56 = *(_BYTE **)(v53 + 24);
            if (!v56 || (*v56 & 0xFE) != 0x62)
              goto LABEL_75;
            v57 = v70;
            if (v70 >= (unint64_t)HIDWORD(v70))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v57 = v70;
            }
            v58 = v63 & 0xFFFFFFFF00000000;
            v59 = (char *)v69 + 16 * v57;
            *(_QWORD *)v59 = v56;
            v63 &= 0xFFFFFFFF00000000;
          }
          else
          {
            v60 = *(_QWORD *)(v45 + 80);
            v61 = v70;
            if (v70 >= (unint64_t)HIDWORD(v70))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v61 = v70;
            }
            v59 = (char *)v69 + 16 * v61;
            *(_QWORD *)v59 = v47;
            v65 = v65 & 0xFFFFFFFF00000000 | ((unint64_t)&v49[-v60] >> 4);
            v58 = v65;
          }
          *((_QWORD *)v59 + 1) = v58;
          LODWORD(v70) = v70 + 1;
LABEL_75:
          v52 += 16;
          v49 += 16;
          if (v52 == v48)
            goto LABEL_60;
        }
      }
LABEL_77:
      if (v72[0] != v73)
        free(v72[0]);
      if (v74 != v76)
        free(v74);
      v10 = v62;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 16))(v10, a3, &v66);
    if (v69 != v71)
      free(v69);
  }
}

uint64_t sub_22EF0BD30(unint64_t a1, int a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  unint64_t v7;

  v2 = 0;
  v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    v5 = v2;
    v6 = v3 | (2 * a2);
    v7 = (a1 >> 1) & ~(-1 << (a1 >> 58));
    if ((a1 & 1) == 0)
    {
      v6 &= 0x3Fu;
      v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * ((unint64_t)(2 * a2) >> 6));
    }
    v4 = v4 | (((v7 >> v6) & 1) << v3);
    v2 = 1;
    v3 = 1;
  }
  while ((v5 & 1) == 0);
  return v4;
}

uint64_t sub_22EF0BD98(uint64_t result, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  _QWORD v10[2];

  v4 = result + 88;
  v3 = *(_QWORD *)(result + 88);
  if ((v3 & 1) != 0)
    v5 = v3 >> 58;
  else
    v5 = *(unsigned int *)(v3 + 64);
  if (v5 >= 2)
  {
    v6 = 0;
    v7 = 0;
    v8 = v5 >> 1;
    do
    {
      for (i = 0; i != 2; ++i)
      {
        v10[0] = v4;
        v10[1] = v6 + i;
        result = sub_22EF0B094((uint64_t)v10, (a2 >> i) & 1);
      }
      ++v7;
      v6 += 2;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t *sub_22EF0BE30(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (((*(_DWORD *)a2 >> 18) & 0x3Eu) - 22 < 0xA)
  {
    v2 = 1;
    return sub_22EF0C3BC(result, *(unsigned __int8 **)(a2 + 16), v2);
  }
  v3 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v3 == 32 || v3 == 21)
  {
    v2 = 4;
    return sub_22EF0C3BC(result, *(unsigned __int8 **)(a2 + 16), v2);
  }
  return result;
}

uint64_t sub_22EF0BE70(uint64_t *a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *i;
  unsigned __int8 *v31;
  int v32;

  result = sub_22EFFA8F0((uint64_t)a2);
  v5 = *a2;
  v6 = (unsigned __int8 **)((char *)a2 + (v5 >> 24));
  if ((_DWORD)result == 1192)
  {
    v7 = v6[((v5 >> 18) & 1) + 1];
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 45)
      return (uint64_t)sub_22EF0C3BC(a1, v7, 1);
    return result;
  }
  result = sub_22EFFA604(*v6);
  if (!result || (*(_DWORD *)(result + 28) & 0x7Eu) - 52 > 5)
    goto LABEL_15;
  v8 = *(_QWORD *)(result + 144) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(result + 144) & 6) == 4 && v8 != 0)
  {
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
      result = *(_QWORD *)(v10 + 48);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  if (result && *(_BYTE *)result == 8 && *(_DWORD *)result < 0x100u)
    v11 = 4;
  else
LABEL_15:
    v11 = 3;
  v12 = a2[4];
  if ((_DWORD)v12)
  {
    v13 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
    v14 = v13 + 8 * v12;
    while (1)
    {
      v15 = *(unsigned __int8 **)v13;
      v16 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if ((*(_BYTE *)(*(_QWORD *)v13 + 1) & 3) == 0)
        break;
      if ((v16 & 1) == 0 && (*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
        goto LABEL_75;
      v17 = a1;
      v18 = v11;
LABEL_74:
      result = (uint64_t)sub_22EF0C3BC(v17, v15, v18);
LABEL_75:
      v13 += 8;
      if (v13 == v14)
        return result;
    }
    result = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v19 != 39 && v19 != 32)
      goto LABEL_75;
    result = sub_22F10ACF8(result);
    if ((result & 1) == 0 && (*(_BYTE *)((result & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      goto LABEL_75;
    v20 = *(_WORD *)(*a1 + 8) & 0x7F;
    v21 = -40;
    if (v20 > 0x46)
    {
      if (v20 == 83)
        goto LABEL_42;
      if (v20 == 71)
      {
        v21 = -56;
        goto LABEL_42;
      }
      if (v20 != 81)
      {
LABEL_37:
        if (v20 - 52 < 6)
        {
          v21 = -72;
        }
        else if (v20 - 33 >= 5)
        {
          v21 = -48;
        }
        else
        {
          v21 = -64;
        }
      }
    }
    else
    {
      if (v20 > 0x18)
        goto LABEL_36;
      if (v20 == 16)
      {
LABEL_29:
        v21 = -48;
        goto LABEL_42;
      }
      if (((1 << v20) & 0x1066) == 0)
      {
        if (v20 == 24)
          goto LABEL_29;
LABEL_36:
        if (v20 == 70)
        {
          v21 = -64;
          goto LABEL_42;
        }
        goto LABEL_37;
      }
    }
LABEL_42:
    v22 = *a1 + v21;
    if ((*(_DWORD *)(v22 + 28) & 0x7F) == 0x53)
    {
LABEL_66:
      v29 = *(_QWORD *)(v22 + 88);
      for (i = *(unsigned __int8 **)v13; ; i = (unsigned __int8 *)*((_QWORD *)v31 + 2))
      {
        v31 = sub_22EFFF40C(i, v29);
        v15 = v31;
        LOBYTE(v32) = *v31;
        if ((*v31 + 102) < 0xF5u)
          break;
        v32 = *(_DWORD *)v31;
        if ((*(_DWORD *)v31 & 0x1FC0000) != 0x80000)
          break;
      }
      if (v32 == 233 && (*(_DWORD *)v31 & 0x7C0000) == 0x100000)
        v15 = (unsigned __int8 *)*((_QWORD *)v31 + 2);
      v17 = a1;
      v18 = 4;
      goto LABEL_74;
    }
    while (1)
    {
      v23 = *(_QWORD *)(v22 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v24 = *(_QWORD *)v24;
      v25 = *(_WORD *)(v24 + 8) & 0x7F;
      if (v25 == 83)
      {
        v22 = v24 - 40;
        goto LABEL_66;
      }
      v26 = -40;
      if ((*(_WORD *)(v24 + 8) & 0x7Fu) > 0x46)
      {
        if (v25 == 71)
        {
          v26 = -56;
          goto LABEL_62;
        }
        if (v25 != 81)
          goto LABEL_56;
      }
      else
      {
        if (v25 > 0x18)
          goto LABEL_55;
        if (v25 == 16)
          goto LABEL_49;
        if (((1 << v25) & 0x1066) == 0)
        {
          if (v25 == 24)
          {
LABEL_49:
            v26 = -48;
            goto LABEL_62;
          }
LABEL_55:
          if (v25 == 70)
          {
            v26 = -64;
            goto LABEL_62;
          }
LABEL_56:
          v27 = v25 - 52;
          if (v25 - 33 >= 5)
            v28 = -48;
          else
            v28 = -64;
          if (v27 >= 6)
            v26 = v28;
          else
            v26 = -72;
        }
      }
LABEL_62:
      v22 = v24 + v26;
    }
  }
  return result;
}

uint64_t sub_22EF0C214(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;

  v9 = 0;
  v4 = sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_22ECF7140(a1, v7);
    v9 = 0;
    sub_22ECB1B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = 0;
  return v5 + 8;
}

uint64_t sub_22EF0C2F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int8 **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[8];
  _OWORD v13[4];

  v2 = a2;
  if (a2)
  {
    v2 = a2 + 2;
    v4 = *(unsigned int *)a2;
  }
  else
  {
    v4 = 0;
  }
  sub_22F34CA1C((uint64_t)v13, v2, v4);
  result = sub_22F34CA1C((uint64_t)v12, &v2[v4], 0);
  v8 = v13[0];
  v9 = v13[1];
  v10 = v13[2];
  v11 = v13[3];
  v6 = v12[0];
  while ((_QWORD)v8 != v6)
  {
    if ((BYTE8(v9) & 3) != 0)
    {
      if ((*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v7 = (unsigned __int8 **)((*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v7 = (unsigned __int8 **)sub_22F3AC1A8(*(_QWORD *)v9);
    }
    else
    {
      v7 = (unsigned __int8 **)v9;
    }
    sub_22EF0C3BC(a1, *v7, 1);
    result = (uint64_t)sub_22EED9548((uint64_t **)&v8);
  }
  return result;
}

uint64_t *sub_22EF0C3BC(uint64_t *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v4 = result;
  while (1)
  {
    do
    {
      v5 = a2;
      v6 = *a2;
      if (v6 > 0xD5)
      {
        if (v6 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_36;
          v6 = *(_DWORD *)a2;
          v8 = a2 + 16;
        }
        else
        {
          if (v6 != 214)
            break;
          v8 = a2 + 24;
        }
      }
      else if (v6 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          goto LABEL_36;
        v8 = a2 + 24;
        if (!a2[48])
          v8 = a2 + 32;
        v6 = 155;
      }
      else
      {
        if (v6 != 176)
          break;
        v7 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v7 == -1)
          goto LABEL_36;
        v8 = &a2[8 * v7 + 40];
        v6 = 176;
      }
      a2 = *(unsigned __int8 **)v8;
    }
    while (*(unsigned __int8 **)v8 != v5);
    if (v6 > 187)
    {
      if (v6 == 188)
      {
        v11 = *((_QWORD *)v5 + 3);
        if (!v11 || (*(_DWORD *)(v11 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
          return result;
        if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x40)
        {
          v12 = *(_QWORD *)(v11 + 16);
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          if ((v12 & 4) != 0)
            v13 = *(_QWORD *)v13;
          if ((*(_WORD *)(v13 + 8) & 0x7Eu) - 34 < 4)
            return result;
        }
LABEL_34:
        v9 = (unsigned __int8 **)(v5 + 16);
        goto LABEL_35;
      }
      if (v6 == 210)
        goto LABEL_34;
    }
    else
    {
      if (v6 == 102)
      {
        v9 = (unsigned __int8 **)(v5 + 48);
        goto LABEL_35;
      }
      if (v6 == 103)
      {
        result = (uint64_t *)sub_22EF0C3BC(v4, *((_QWORD *)v5 + 4), a3);
        v9 = (unsigned __int8 **)(v5 + 40);
        goto LABEL_35;
      }
    }
    if ((v6 & 0xFE) != 0x70)
      break;
    v10 = (*(_DWORD *)v5 >> 18) & 0x3F;
    if (v10 < 2)
      goto LABEL_34;
    if (v10 != 32)
      return result;
    v9 = (unsigned __int8 **)(v5 + 24);
LABEL_35:
    a2 = *v9;
  }
LABEL_36:
  result = (uint64_t *)sub_22EF0B220(v5, *v4);
  v17 = v14;
  if (v14)
  {
    v15 = (uint64_t)(v4 + 1);
    v16 = *(_DWORD *)sub_22EF0C214(v15, &v17);
    if (v16 > (int)a3)
      LODWORD(a3) = v16;
    result = (uint64_t *)sub_22EF0C214(v15, &v17);
    *(_DWORD *)result = a3;
  }
  return result;
}

uint64_t *sub_22EF0C598(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(_DWORD *)a2 & 0x1FC0000) == 0x100000)
  {
    v2 = 1;
    return sub_22EF0C3BC(result, *(unsigned __int8 **)(a2 + 16), v2);
  }
  if (*(_DWORD *)a2 == 144)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v3 && (*(_DWORD *)(v3 + 16) & 0xFF800FF) == 86507531)
    {
      v2 = 4;
      return sub_22EF0C3BC(result, *(unsigned __int8 **)(a2 + 16), v2);
    }
  }
  return result;
}

uint64_t sub_22EF0C604(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v27)();
  __int16 v28;
  char v29;
  __int128 v30;
  _BYTE v31[28];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _QWORD v46[2];
  _QWORD v47[6];

  v47[5] = *MEMORY[0x24BDAC8D0];
  v27 = &off_24FABA080;
  v28 = 0;
  v29 = 0;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v32 = 48;
  v34 = 0;
  v35 = 0;
  v33 = a1;
  v36 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v46[0] = 0;
  v46[1] = 0;
  v45 = v46;
  v37 = a1 + 352;
  v38 = a3;
  v3 = *a2;
  if (!(_DWORD)v3)
  {
    v8 = *((_QWORD *)a2 + 1);
    v4 = a2 + 2;
    v5 = v8;
    v7 = v8 != 0;
LABEL_6:
    v9 = v5 == 0;
    goto LABEL_7;
  }
  if (v3 == 76)
  {
    v6 = *((_QWORD *)a2 + 1);
    v4 = a2 + 2;
    v5 = v6;
    if (!v6)
    {
      v7 = 0;
      goto LABEL_23;
    }
LABEL_62:
    v17 = sub_22F379878(v5);
    goto LABEL_34;
  }
  v10 = *a2;
  do
    v10 = dword_24FABB2A0[4 * v10];
  while ((_DWORD)v10 != 76 && v10 != 0);
  v12 = *((_QWORD *)a2 + 1);
  v4 = a2 + 2;
  v5 = v12;
  v7 = v12 != 0;
  if (v10 == 76 && v5 != 0)
    goto LABEL_62;
  if (v3 == 172)
  {
    if (v5)
    {
LABEL_33:
      v17 = sub_22F379890((unsigned __int8 *)v5);
LABEL_34:
      LODWORD(v47[0]) = v17;
      v47[1] = v5;
      sub_22EF25358((uint64_t)&v27, (unsigned int *)v47);
      return sub_22EF0C8C4((uint64_t)&v27);
    }
    v7 = 0;
    goto LABEL_44;
  }
LABEL_23:
  v14 = v3;
  do
    v14 = dword_24FABB2A0[4 * v14];
  while ((_DWORD)v14 != 172 && v14 != 0);
  if (v14 == 172 && v7)
    goto LABEL_33;
  if (v3 == 425)
  {
    if (v7)
    {
LABEL_54:
      v47[0] = v5 & 0xFFFFFFFFFFFFFFF0;
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_QWORD *)(a1 + 32);
      v4 = v47;
LABEL_57:
      sub_22EF25964(&v27, v4, v22, v23);
      return sub_22EF0C8C4((uint64_t)&v27);
    }
    goto LABEL_6;
  }
LABEL_44:
  v19 = v3;
  do
    v19 = dword_24FABB2A0[4 * v19];
  while ((_DWORD)v19 != 425 && v19 != 0);
  if (v19 == 425 && v7)
    goto LABEL_54;
  if (v3 == 6)
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    goto LABEL_57;
  }
  v9 = v5 == 0;
  if (v3 == 75 && v5)
  {
    sub_22EF2484C(&v27, v5);
    return sub_22EF0C8C4((uint64_t)&v27);
  }
LABEL_7:
  switch(v3)
  {
    case 5:
      sub_22EF24A04(&v27, (unint64_t)v4);
      return sub_22EF0C8C4((uint64_t)&v27);
    case 0:
      return sub_22EF0C8C4((uint64_t)&v27);
    case 72:
LABEL_40:
      sub_22EF24BFC(&v27, (unint64_t)v4);
      return sub_22EF0C8C4((uint64_t)&v27);
  }
  v18 = v3;
  while (1)
  {
    v18 = dword_24FABB2A0[4 * v18];
    if (!(_DWORD)v18)
      break;
    if (v18 == 72)
      goto LABEL_40;
  }
  if (v3 != 74)
    v9 = 1;
  if (!v9)
  {
    sub_22EF24DF8(&v27, (_QWORD *)v5);
    return sub_22EF0C8C4((uint64_t)&v27);
  }
  if (v3 == 2)
  {
    sub_22EF24FA8(&v27, (unint64_t)v4);
    return sub_22EF0C8C4((uint64_t)&v27);
  }
  if (v3 == 572)
  {
    if (!v7)
      return sub_22EF0C8C4((uint64_t)&v27);
    goto LABEL_79;
  }
  do
    v3 = dword_24FABB2A0[4 * v3];
  while ((_DWORD)v3 != 572 && v3 != 0);
  if (v3 == 572 && v7)
LABEL_79:
    sub_22EF251A0(&v27, v5);
  return sub_22EF0C8C4((uint64_t)&v27);
}

uint64_t sub_22EF0C8C4(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  void *v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD v15[2];
  int v16;
  int v17;

  *(_QWORD *)a1 = &off_24FABA080;
  v2 = *(uint64_t ***)(a1 + 104);
  if (*((_BYTE *)v2 + 8))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_DWORD *)(a1 + 56);
    v17 = *(_DWORD *)(a1 + 60);
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    v6 = *v2;
    v7 = *v6;
    *v6 = v3;
    v15[0] = v7;
    v8 = v6[1];
    v6[1] = v5;
    v15[1] = v8;
    LODWORD(v3) = *((_DWORD *)v6 + 4);
    *((_DWORD *)v6 + 4) = v4;
    v16 = v3;
    sub_22F359F64((uint64_t)v15);
  }
  sub_22EF0E6B4(*(char ***)(a1 + 176));
  sub_22F359FDC((unsigned int *)(a1 + 144));
  llvm::deallocate_buffer(*(llvm **)(a1 + 144), (void *)(56 * *(unsigned int *)(a1 + 160)));
  v9 = *(unsigned int *)(a1 + 136);
  v10 = *(llvm **)(a1 + 120);
  if ((_DWORD)v9)
  {
    v12 = (_QWORD **)((char *)v10 + 16);
    v13 = 32 * v9;
    do
    {
      if (((unint64_t)*(v12 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_22F258024(*v12);
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    v10 = *(llvm **)(a1 + 120);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 136));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer(v10, v11);
  sub_22F35A040((unsigned int *)(a1 + 80));
  llvm::deallocate_buffer(*(llvm **)(a1 + 80), (void *)(32 * *(unsigned int *)(a1 + 96)));
  sub_22F359F64(a1 + 40);
  return a1;
}

void sub_22EF0C9FC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (unsigned int *)*((_QWORD *)v4 - 2);
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22EF0CA90(uint64_t a1)
{
  sub_22EF0C8C4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EF0CAB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[6];

  v33[5] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if (!*(_QWORD *)(a2 + 128))
      return 0;
  }
  v10 = sub_22E46A3A0(a2);
  if (v10 == v11)
    return 0;
  v12 = v10;
  v13 = v11;
  v29 = (char *)&v32;
  while (1)
  {
    v14 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
      v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
    v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    if ((sub_22EF0DFF4(a1, *(_QWORD *)(v15 + 8), a3, a4) & 1) != 0)
      return 1;
    v16 = sub_22F10C2A4(v15);
    if (v16 && (v19 = v16, (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 < 3))
    {
LABEL_14:
      if (v19)
        v20 = v19 == a2;
      else
        v20 = 1;
      if (!v20)
      {
        v30 = v29;
        v31 = 0x100000000;
        if (a4[2])
          sub_22EEF4FFC((uint64_t)&v30, a4);
        LODWORD(v33[0]) = sub_22F379878(v19);
        v33[1] = v19;
        if (sub_22F35A7A4(a3, (unsigned int *)v33, a1, (uint64_t)&v30))
        {
          sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v30);
          v22 = 0;
        }
        else if ((a5 & 1) != 0
               || (v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD))(*(_QWORD *)a1 + 16))(a1, v19, a3, a4, 0), v22 = 0, (v23 & 1) == 0))
        {
          v22 = 1;
        }
        v28 = v22;
        v24 = a5;
        v25 = (char *)v30;
        if ((_DWORD)v31)
        {
          v26 = 24 * v31;
          do
          {
            sub_22E5EFB0C((uint64_t)&v25[v26 - 24], *(char **)&v25[v26 - 16]);
            v26 -= 24;
          }
          while (v26);
          v25 = (char *)v30;
        }
        if (v25 != v29)
          free(v25);
        a5 = v24;
        if (!v28)
          return 1;
      }
    }
    else
    {
      for (i = v15; ; i = *(_QWORD *)(*(_QWORD *)(v18 + 24 * *(unsigned int *)(v18 + 20) + 40) & 0xFFFFFFFFFFFFFFF0))
      {
        v18 = sub_22F10D628(i);
        if (!v18)
          break;
        if ((*(_BYTE *)(v18 + 18) & 8) == 0)
        {
          v33[0] = *(_QWORD *)(v18 + 32);
          v21 = sub_22F0F08CC(v33);
          if (v21 && (*(_DWORD *)(v21 + 28) & 0x7F) == 0x1C)
          {
            v19 = *(_QWORD *)(v21 + 48);
            goto LABEL_14;
          }
          break;
        }
      }
    }
    v12 += 24;
    if (v12 == v13)
      return 0;
  }
}

uint64_t sub_22EF0CD54(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int *a4, char a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result = sub_22F3B46CC(a2);
  if (!result)
    return result;
  v10 = result;
  while (1)
  {
    v28 = 0;
    if (sub_22F285220(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), v10, &v28)
      && v28 != *(_QWORD *)(a1 + 144) + 56 * *(unsigned int *)(a1 + 160))
    {
      v12 = *(_QWORD *)(v28 + 16);
      v13 = 24;
      if (v12 == *(_QWORD *)(v28 + 8))
        v13 = 28;
      v14 = *(unsigned int *)(v28 + v13);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        v16 = *(uint64_t **)(v28 + 16);
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v16;
          v15 -= 8;
          if (!v15)
            goto LABEL_30;
        }
      }
      else
      {
        v16 = *(uint64_t **)(v28 + 16);
      }
      v17 = (_QWORD *)(v12 + 8 * v14);
      if (v16 != v17)
        break;
    }
LABEL_30:
    if ((sub_22EF0DFF4(a1, *(_QWORD *)(*(_QWORD *)(v10 + 104) + 8), a3, a4) & 1) != 0)
      return 1;
    LODWORD(v28) = sub_22F379878(v10);
    v29 = v10;
    result = sub_22F35A7A4(a3, (unsigned int *)&v28, a1, (uint64_t)a4);
    if ((result & 1) == 0 && (a5 & 1) == 0)
    {
      v10 = sub_22F3B46CC(v10);
      result = 0;
      if (v10)
        continue;
    }
    return result;
  }
  v18 = *v16;
LABEL_17:
  v25 = v27;
  v26 = 0x100000000;
  if (a4[2])
    sub_22EEF4FFC((uint64_t)&v25, a4);
  LODWORD(v28) = sub_22F379878(v18);
  v29 = v18;
  if (!sub_22F35A7A4(a3, (unsigned int *)&v28, a1, (uint64_t)&v25))
  {
    v19 = (char *)v25;
    if ((_DWORD)v26)
    {
      v20 = 24 * v26;
      do
      {
        sub_22E5EFB0C((uint64_t)&v19[v20 - 24], *(char **)&v19[v20 - 16]);
        v20 -= 24;
      }
      while (v20);
      v19 = (char *)v25;
    }
    if (v19 != v27)
      free(v19);
    v21 = (unint64_t *)(v16 + 1);
    while (v21 != v17)
    {
      v22 = *v21++;
      v18 = v22;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v16 = (uint64_t *)(v21 - 1);
        goto LABEL_17;
      }
    }
    goto LABEL_30;
  }
  sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v25);
  v23 = (char *)v25;
  if ((_DWORD)v26)
  {
    v24 = 24 * v26;
    do
    {
      sub_22E5EFB0C((uint64_t)&v23[v24 - 24], *(char **)&v23[v24 - 16]);
      v24 -= 24;
    }
    while (v24);
    v23 = (char *)v25;
  }
  if (v23 != v27)
    free(v23);
  return 1;
}

uint64_t sub_22EF0CFDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_22EF0CFE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_22EF0CFEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

BOOL sub_22EF0CFF4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 184) >= 0x2711uLL)
  {
    v12 = (_QWORD *)(a1 + 176);
    sub_22EF0E6B4(*(char ***)(a1 + 176));
    *(_QWORD *)(a1 + 168) = a1 + 176;
    *v12 = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  return sub_22EF0E414(a1, a2, a3, a4, a5, 1, a6);
}

BOOL sub_22EF0D07C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 184) >= 0x2711uLL)
  {
    v12 = (_QWORD *)(a1 + 176);
    sub_22EF0E6B4(*(char ***)(a1 + 176));
    *(_QWORD *)(a1 + 168) = a1 + 176;
    *v12 = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  return sub_22EF0E414(a1, a2, a3, a4, a5, 0x7FFFFFFF, a6);
}

uint64_t sub_22EF0D104(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  uint64_t *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  __int128 *v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  size_t v87;
  uint64_t *v88;
  uint64_t *v89;
  size_t v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *i;
  void *v108;
  unint64_t v109;
  char *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v119;
  unsigned int *v120;
  unsigned int *v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  char v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *__p;
  uint64_t __pa;
  void *__pb;
  void *__dstc;
  void *__dst;
  char *__dsta;
  unint64_t __dstb;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  uint64_t *v143;
  char *v144;
  uint64_t v146;
  llvm *v148[2];
  unsigned int v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  char *v159;
  char v160;
  void *v161;
  uint64_t v162;
  _BYTE v163[24];
  __int128 v164;
  _OWORD v165[2];
  __int128 v166;
  _BYTE v167[25];
  uint64_t v168;

  v9 = a1;
  v168 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a1[23] >= 0x2711)
  {
    v10 = a1 + 22;
    sub_22EF0E6B4((char **)a1[22]);
    v9[21] = (uint64_t)(v9 + 22);
    *v10 = 0;
    v9[23] = 0;
  }
  if (a6 == 1)
  {
    v119 = sub_22F365534(v9[14]);
    v120 = (unsigned int *)&v166;
    sub_22F3BA594(v119, a2, (uint64_t)&v166);
    if (v167[24])
    {
      v121 = (unsigned int *)&v167[24];
    }
    else
    {
      v120 = (unsigned int *)v166;
      v121 = (unsigned int *)(v166 + 40 * *((_QWORD *)&v166 + 1));
    }
    for (; v120 != v121; v120 += 10)
    {
      *(_QWORD *)&v164 = v165;
      *((_QWORD *)&v164 + 1) = 0x100000000;
      if (a5[2])
        sub_22EEF4FFC((uint64_t)&v164, a5);
      if (sub_22F35A7A4(a4, v120, (uint64_t)v9, (uint64_t)&v164))
      {
        sub_22EF0E1E4((uint64_t)a5, (uint64_t)&v164);
        v128 = (char *)v164;
        if (DWORD2(v164))
        {
          v129 = 24 * DWORD2(v164);
          do
          {
            sub_22E5EFB0C((uint64_t)&v128[v129 - 24], *(char **)&v128[v129 - 16]);
            v129 -= 24;
          }
          while (v129);
          v128 = (char *)v164;
        }
        if (v128 != (char *)v165)
          free(v128);
        return 1;
      }
      v122 = (char *)v164;
      if (DWORD2(v164))
      {
        v123 = 24 * DWORD2(v164);
        do
        {
          sub_22E5EFB0C((uint64_t)&v122[v123 - 24], *(char **)&v122[v123 - 16]);
          v123 -= 24;
        }
        while (v123);
        v122 = (char *)v164;
      }
      if (v122 != (char *)v165)
        free(v122);
    }
    return 0;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = (uint64_t **)(v9 + 21);
  v15 = *((_OWORD *)a2 + 1);
  v154 = *(_OWORD *)a2;
  v155 = v15;
  v156 = *((_QWORD *)a2 + 4);
  v167[24] = 0;
  v143 = v9 + 22;
  v166 = 0uLL;
  v146 = (uint64_t)v9;
  while (1)
  {
    if (!sub_22EF0E6FC(*(int ***)a5, a5[2]))
      goto LABEL_27;
    if (v11 >= v13)
    {
      v16 = 0x4EC4EC4EC4EC4EC5 * ((v11 - v12) >> 3) + 1;
      if (v16 > 0x276276276276276)
        abort();
      if (0x9D89D89D89D89D8ALL * ((v13 - v12) >> 3) > v16)
        v16 = 0x9D89D89D89D89D8ALL * ((v13 - v12) >> 3);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v13 - v12) >> 3)) >= 0x13B13B13B13B13BLL)
        v16 = 0x276276276276276;
      if (v16 > 0x276276276276276)
LABEL_198:
        sub_22E3B3F8C();
      v17 = 104 * v16;
      v18 = (char *)operator new(104 * v16);
      v19 = &v18[8 * ((v11 - v12) >> 3)];
      *((_QWORD *)v19 + 12) = 0;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_QWORD *)v19 + 7) = v19 + 72;
      *((_QWORD *)v19 + 8) = 0x100000000;
      *((_DWORD *)v19 + 24) = 0;
      v20 = v19;
      if (v11 != v12)
      {
        v141 = v17;
        v21 = 0;
        do
        {
          v22 = &v11[v21];
          v23 = *(_OWORD *)&v11[v21 - 104];
          v24 = *(_OWORD *)&v11[v21 - 88];
          v25 = *(_OWORD *)&v11[v21 - 72];
          v26 = *(_QWORD *)&v11[v21 - 56];
          *(_QWORD *)&v19[v21 - 48] = &v19[v21 - 32];
          v27 = (uint64_t)&v19[v21 - 48];
          *(_QWORD *)(v27 - 8) = v26;
          *(_OWORD *)(v27 - 24) = v25;
          *(_OWORD *)(v27 - 40) = v24;
          *(_OWORD *)(v27 - 56) = v23;
          *(_QWORD *)(v27 + 8) = 0x100000000;
          if (*(_DWORD *)&v11[v21 - 40])
            sub_22EF0E1E4(v27, (uint64_t)(v22 - 48));
          *(_QWORD *)&v19[v21 - 8] = *((_QWORD *)v22 - 1);
          v21 -= 104;
        }
        while (&v11[v21] != v12);
        v20 = &v19[v21];
        do
        {
          sub_22F359998((char **)v11 - 6);
          v11 -= 104;
        }
        while (v11 != v12);
        v17 = v141;
      }
      v13 = &v18[v17];
      v11 = v19 + 104;
      if (v12)
        operator delete(v12);
      v12 = v20;
    }
    else
    {
      *((_QWORD *)v11 + 12) = 0;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_QWORD *)v11 + 7) = v11 + 72;
      *((_DWORD *)v11 + 17) = 1;
      v11 += 104;
    }
    v28 = *(_QWORD *)(a4 + 16);
    *((_DWORD *)v11 - 26) = *(_DWORD *)(a4 + 8);
    v29 = v11 - 104;
    *((_QWORD *)v29 + 1) = v28;
    v30 = v154;
    v31 = v155;
    *((_QWORD *)v29 + 6) = v156;
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v31;
    sub_22EEF4FFC((uint64_t)(v11 - 48), a5);
    *((_QWORD *)v11 - 1) = *(unsigned int *)(sub_22F365534(a3) + 8);
    v32 = sub_22EF0EAE0((uint64_t)v14, (uint64_t)(v11 - 104));
    if (v143 != v32)
      break;
    v9 = (uint64_t *)v146;
LABEL_27:
    v33 = sub_22F365534(v9[14]);
    sub_22F3BA594(v33, (unsigned int *)&v154, (uint64_t)&v164);
    *(_OWORD *)&v167[9] = *(_OWORD *)((char *)v165 + 9);
    v166 = v164;
    *(_OWORD *)v167 = v165[0];
    v34 = (__int128 *)(v164 + 40 * *((_QWORD *)&v164 + 1));
    if (BYTE8(v165[1]))
    {
      v34 = (__int128 *)&v167[24];
      v35 = &v166;
    }
    else
    {
      v35 = (__int128 *)v166;
    }
    if ((char *)v34 - (char *)v35 != 40)
    {
      if (v35 == v34)
      {
LABEL_160:
        if (v12 == v11)
        {
          v44 = 0;
          v12 = v11;
        }
        else
        {
          v116 = (uint64_t)v12;
          do
          {
            v117 = sub_22EF0EB58(v14, v116);
            *v117 = 0;
            sub_22EEF4FFC((uint64_t)(v117 + 8), a5);
            v116 += 104;
          }
          while ((char *)v116 != v11);
          v44 = 0;
        }
        goto LABEL_165;
      }
      v45 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (char *)v35) >> 3);
      memset(v165, 0, sizeof(v165));
      v164 = 0u;
      if ((v45 + 1) % 0x66)
        v46 = (v45 + 1) / 0x66 + 1;
      else
        v46 = (v45 + 1) / 0x66;
      if (v46)
      {
        v159 = (char *)v165 + 8;
        *(_QWORD *)&v157 = operator new(8 * v46);
        *((_QWORD *)&v157 + 1) = v157;
        *(_QWORD *)&v158 = v157;
        *((_QWORD *)&v158 + 1) = v157 + 8 * v46;
        do
        {
          *(_QWORD *)&v151 = operator new(0xFF0uLL);
          sub_22F2D2D80((uint64_t)&v157, &v151);
          --v46;
        }
        while (v46);
        v47 = (_QWORD *)*((_QWORD *)&v164 + 1);
        v48 = *(_QWORD **)&v165[0];
        while (v48 != v47)
        {
          sub_22F2D2EA4((void **)&v157, --v48);
          v47 = (_QWORD *)*((_QWORD *)&v164 + 1);
        }
        v49 = (void *)v164;
        v50 = *((_QWORD *)&v157 + 1);
        v164 = v157;
        v165[0] = v158;
        if (v49)
        {
          operator delete(v49);
          v51 = *(_QWORD *)&v165[1];
          v50 = *((_QWORD *)&v164 + 1);
          v52 = *(_QWORD *)&v165[0];
        }
        else
        {
          v51 = *(_QWORD *)&v165[1];
          v52 = v158;
        }
        v54 = *((_QWORD *)&v165[1] + 1);
        v55 = v51 + *((_QWORD *)&v165[1] + 1);
        v56 = (v51 + *((_QWORD *)&v165[1] + 1)) / 0x66uLL;
        v53 = (_QWORD *)(v50 + 8 * v56);
        if (v52 != v50)
        {
          v57 = *v53 + 40 * (v55 - 102 * v56);
          goto LABEL_62;
        }
      }
      else
      {
        v53 = 0;
        v54 = 0;
      }
      v57 = 0;
LABEL_62:
      v58 = v45 - 0x3333333333333333 * ((v57 - *v53) >> 3);
      if (v58 < 1)
      {
        v61 = 101 - v58;
        v59 = &v53[-(v61 / 0x66)];
        v60 = *v59 + 40 * (102 * (v61 / 0x66) - v61) + 4040;
      }
      else
      {
        v59 = &v53[v58 / 0x66uLL];
        v60 = *v59 + 40 * (v58 % 0x66uLL);
      }
      if (v57 != v60)
      {
        do
        {
          v62 = v60;
          if (v53 != v59)
            v62 = *v53 + 4080;
          if (v57 == v62)
          {
            v62 = v57;
          }
          else
          {
            v63 = v57;
            do
            {
              v64 = *v35;
              v65 = v35[1];
              *(_QWORD *)(v63 + 32) = *((_QWORD *)v35 + 4);
              *(_OWORD *)v63 = v64;
              *(_OWORD *)(v63 + 16) = v65;
              v63 += 40;
              v35 = (__int128 *)((char *)v35 + 40);
            }
            while (v63 != v62);
            v54 = *((_QWORD *)&v165[1] + 1);
          }
          v54 -= 0x3333333333333333 * ((v62 - v57) >> 3);
          *((_QWORD *)&v165[1] + 1) = v54;
          if (v53 == v59)
            break;
          v66 = v53[1];
          ++v53;
          v57 = v66;
        }
        while (v66 != v60);
      }
      v148[0] = 0;
      v148[1] = 0;
      v149 = 0;
      while (*((_QWORD *)&v165[1] + 1))
      {
        v161 = v163;
        v162 = 0x100000000;
        if (a5[2])
          sub_22EEF4FFC((uint64_t)&v161, a5);
        v67 = sub_22F35A7A4(a4, (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v164 + 1) + 8 * (*(_QWORD *)&v165[1] / 0x66uLL))+ 40 * (*(_QWORD *)&v165[1] % 0x66uLL)), v146, (uint64_t)&v161);
        if (v67)
        {
          sub_22EF0E1E4((uint64_t)a5, (uint64_t)&v161);
          if (v12 != v11)
          {
            v68 = (uint64_t)v12;
            do
            {
              v69 = sub_22EF0EB58(v14, v68);
              *v69 = 1;
              sub_22EEF4FFC((uint64_t)(v69 + 8), a5);
              v68 += 104;
            }
            while ((char *)v68 != v11);
          }
        }
        else
        {
          v72 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v164 + 1) + 8 * (*(_QWORD *)&v165[1] / 0x66uLL))
                               + 40 * (*(_QWORD *)&v165[1] % 0x66uLL));
          v73 = sub_22F365534(*(_QWORD *)(v146 + 112));
          sub_22F3BA594(v73, v72, (uint64_t)&v157);
          if (v160)
            v74 = &v157;
          else
            v74 = (__int128 *)v157;
          v75 = (char *)(v157 + 40 * *((_QWORD *)&v157 + 1));
          if (v160)
            v75 = &v160;
          v144 = v75;
          while (v74 != (__int128 *)v75)
          {
            if (*(int *)v74 < 73)
              v76 = 0;
            else
              v76 = (void *)*((_QWORD *)v74 + 1);
            v150 = v76;
            sub_22F25884C((uint64_t)&v151, (uint64_t)v148, (uint64_t *)&v150);
            if ((_BYTE)v152)
            {
              v142 = v74;
              v77 = *(char **)&v165[0];
              v78 = *((_QWORD *)&v164 + 1);
              v79 = (uint64_t)(*(_QWORD *)&v165[0] - *((_QWORD *)&v164 + 1)) >> 3;
              if (*(_QWORD *)&v165[0] == *((_QWORD *)&v164 + 1))
                v80 = 0;
              else
                v80 = 102 * v79 - 1;
              v81 = *((_QWORD *)&v165[1] + 1) + *(_QWORD *)&v165[1];
              if (v80 == *((_QWORD *)&v165[1] + 1) + *(_QWORD *)&v165[1])
              {
                if (*(_QWORD *)&v165[1] < 0x66uLL)
                {
                  if (*(_QWORD *)&v165[0] - *((_QWORD *)&v164 + 1) >= *((_QWORD *)&v165[0] + 1) - (_QWORD)v164)
                  {
                    if (*((_QWORD *)&v165[0] + 1) == (_QWORD)v164)
                      v106 = 1;
                    else
                      v106 = (uint64_t)(*((_QWORD *)&v165[0] + 1) - v164) >> 2;
                    v153 = (char *)v165 + 8;
                    if (v106 >> 61)
                      goto LABEL_198;
                    *(_QWORD *)&v151 = operator new(8 * v106);
                    *((_QWORD *)&v151 + 1) = v151 + 8 * v79;
                    *(_QWORD *)&v152 = *((_QWORD *)&v151 + 1);
                    *((_QWORD *)&v152 + 1) = v151 + 8 * v106;
                    v150 = operator new(0xFF0uLL);
                    sub_22F2D2D80((uint64_t)&v151, &v150);
                    for (i = *(_QWORD **)&v165[0]; i != *((_QWORD **)&v164 + 1); sub_22F2D2EA4((void **)&v151, i))
                      --i;
                    v108 = (void *)v164;
                    v164 = v151;
                    v165[0] = v152;
                    if (v108)
                      operator delete(v108);
                  }
                  else if (*((_QWORD *)&v165[0] + 1) == *(_QWORD *)&v165[0])
                  {
                    *(_QWORD *)&v151 = operator new(0xFF0uLL);
                    sub_22F2D2EA4((void **)&v164, &v151);
                    v100 = *(char **)&v165[0];
                    v102 = (char *)(*((_QWORD *)&v164 + 1) + 8);
                    v101 = **((_QWORD **)&v164 + 1);
                    *((_QWORD *)&v164 + 1) += 8;
                    if (*(_QWORD *)&v165[0] == *((_QWORD *)&v165[0] + 1))
                    {
                      v140 = v101;
                      if ((unint64_t)v102 <= (unint64_t)v164)
                      {
                        v109 = (uint64_t)(*(_QWORD *)&v165[0] - v164) >> 2;
                        if (*(_QWORD *)&v165[0] == (_QWORD)v164)
                          v109 = 1;
                        __pb = (void *)v164;
                        __dstb = v109;
                        if (v109 >> 61)
                          goto LABEL_198;
                        v110 = (char *)operator new(8 * v109);
                        v112 = v100 - v102;
                        v111 = v100 == v102;
                        v100 = &v110[8 * (__dstb >> 2)];
                        if (!v111)
                        {
                          v100 = &v110[8 * (__dstb >> 2) + (v112 & 0xFFFFFFFFFFFFFFF8)];
                          v113 = 8 * (v112 >> 3);
                          v114 = &v110[8 * (__dstb >> 2)];
                          do
                          {
                            v115 = *(_QWORD *)v102;
                            v102 += 8;
                            *(_QWORD *)v114 = v115;
                            v114 += 8;
                            v113 -= 8;
                          }
                          while (v113);
                        }
                        *(_QWORD *)&v164 = v110;
                        *((_QWORD *)&v164 + 1) = &v110[8 * (__dstb >> 2)];
                        v101 = v140;
                        *(_QWORD *)&v165[0] = v100;
                        *((_QWORD *)&v165[0] + 1) = &v110[8 * __dstb];
                        if (__pb)
                        {
                          operator delete(__pb);
                          v101 = v140;
                          v100 = *(char **)&v165[0];
                        }
                      }
                      else
                      {
                        v103 = (uint64_t)&v102[-v164] >> 3;
                        if (v103 >= -1)
                          v104 = v103 + 1;
                        else
                          v104 = v103 + 2;
                        __pa = v104;
                        __dsta = &v102[-8 * (v104 >> 1)];
                        v105 = *(_QWORD *)&v165[0] - (_QWORD)v102;
                        if (*(_QWORD *)&v165[0] != (_QWORD)v102)
                        {
                          memmove(__dsta, v102, *(_QWORD *)&v165[0] - (_QWORD)v102);
                          v102 = (char *)*((_QWORD *)&v164 + 1);
                        }
                        v100 = &__dsta[v105];
                        *((_QWORD *)&v164 + 1) = &v102[-8 * (__pa >> 1)];
                        *(_QWORD *)&v165[0] = v100;
                        v101 = v140;
                      }
                    }
                    *(_QWORD *)v100 = v101;
                    *(_QWORD *)&v165[0] += 8;
                  }
                  else
                  {
                    *(_QWORD *)&v151 = operator new(0xFF0uLL);
                    sub_22F2D2D80((uint64_t)&v164, &v151);
                  }
                }
                else
                {
                  *(_QWORD *)&v165[1] -= 102;
                  v83 = (uint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                  v82 = **((_QWORD **)&v164 + 1);
                  *((_QWORD *)&v164 + 1) += 8;
                  if (*(_QWORD *)&v165[0] == *((_QWORD *)&v165[0] + 1))
                  {
                    if ((unint64_t)v83 <= (unint64_t)v164)
                    {
                      __dst = (void *)v164;
                      v139 = v82;
                      if (*(_QWORD *)&v165[0] == (_QWORD)v164)
                        v94 = 1;
                      else
                        v94 = (uint64_t)(*(_QWORD *)&v165[0] - v164) >> 2;
                      __p = *(uint64_t **)&v165[0];
                      if (v94 >> 61)
                        goto LABEL_198;
                      v130 = v94;
                      v95 = (char *)operator new(8 * v94);
                      v96 = (char *)__p - (char *)v83;
                      v77 = &v95[8 * (v130 >> 2)];
                      if (__p != v83)
                      {
                        v77 = &v95[8 * (v130 >> 2) + (v96 & 0xFFFFFFFFFFFFFFF8)];
                        v97 = 8 * (v96 >> 3);
                        v98 = &v95[8 * (v130 >> 2)];
                        do
                        {
                          v99 = *v83++;
                          *(_QWORD *)v98 = v99;
                          v98 += 8;
                          v97 -= 8;
                        }
                        while (v97);
                      }
                      *(_QWORD *)&v164 = v95;
                      *((_QWORD *)&v164 + 1) = &v95[8 * (v130 >> 2)];
                      *(_QWORD *)&v165[0] = v77;
                      *((_QWORD *)&v165[0] + 1) = &v95[8 * v130];
                      v82 = v139;
                      if (__dst)
                      {
                        operator delete(__dst);
                        v82 = v139;
                        v77 = *(char **)&v165[0];
                      }
                    }
                    else
                    {
                      v84 = (uint64_t)((uint64_t)v83 - v164) >> 3;
                      if (v84 >= -1)
                        v85 = v84 + 1;
                      else
                        v85 = v84 + 2;
                      v86 = &v83[-(v85 >> 1)];
                      v87 = *(_QWORD *)&v165[0] - (_QWORD)v83;
                      if (*(uint64_t **)&v165[0] != v83)
                      {
                        v88 = &v83[-(v85 >> 1)];
                        v89 = v83;
                        v90 = *(_QWORD *)&v165[0] - (_QWORD)v83;
                        __dstc = (void *)v85;
                        v138 = v82;
                        memmove(v88, v89, v87);
                        v85 = (uint64_t)__dstc;
                        v82 = v138;
                        v87 = v90;
                        v77 = (char *)*((_QWORD *)&v164 + 1);
                      }
                      *((_QWORD *)&v164 + 1) = &v77[-8 * (v85 >> 1)];
                      *(_QWORD *)&v165[0] = (char *)v86 + v87;
                      v77 = (char *)v86 + v87;
                    }
                  }
                  *(_QWORD *)v77 = v82;
                  *(_QWORD *)&v165[0] += 8;
                }
                v78 = *((_QWORD *)&v164 + 1);
                v81 = *(_QWORD *)&v165[1] + *((_QWORD *)&v165[1] + 1);
              }
              v91 = *(_QWORD *)(v78 + 8 * (v81 / 0x66)) + 40 * (v81 % 0x66);
              v74 = v142;
              v92 = *v142;
              v93 = v142[1];
              *(_QWORD *)(v91 + 32) = *((_QWORD *)v142 + 4);
              *(_OWORD *)v91 = v92;
              *(_OWORD *)(v91 + 16) = v93;
              ++*((_QWORD *)&v165[1] + 1);
            }
            v74 = (__int128 *)((char *)v74 + 40);
            v75 = v144;
          }
          v165[1] = vaddq_s64((int64x2_t)v165[1], (int64x2_t)xmmword_22F45F5B0);
          if (*(_QWORD *)&v165[1] >= 0xCCuLL)
          {
            operator delete(**((void ***)&v164 + 1));
            *((_QWORD *)&v164 + 1) += 8;
            *(_QWORD *)&v165[1] -= 102;
          }
        }
        v70 = (char *)v161;
        if ((_DWORD)v162)
        {
          v71 = 24 * v162;
          do
          {
            sub_22E5EFB0C((uint64_t)&v70[v71 - 24], *(char **)&v70[v71 - 16]);
            v71 -= 24;
          }
          while (v71);
          v70 = (char *)v161;
        }
        if (v70 != v163)
          free(v70);
        if (v67)
        {
          llvm::deallocate_buffer(v148[0], (void *)(8 * v149));
          sub_22EF24788((uint64_t)&v164);
          goto LABEL_44;
        }
      }
      llvm::deallocate_buffer(v148[0], (void *)(8 * v149));
      sub_22EF24788((uint64_t)&v164);
      goto LABEL_160;
    }
    v36 = *v35;
    v37 = v35[1];
    v156 = *((_QWORD *)v35 + 4);
    v154 = v36;
    v155 = v37;
    *(_QWORD *)&v164 = v165;
    *((_QWORD *)&v164 + 1) = 0x100000000;
    if (a5[2])
      sub_22EEF4FFC((uint64_t)&v164, a5);
    v38 = sub_22F35A7A4(a4, (unsigned int *)&v154, (uint64_t)v9, (uint64_t)&v164);
    v39 = v38;
    if (v38)
    {
      sub_22EF0E1E4((uint64_t)a5, (uint64_t)&v164);
      if (v12 != v11)
      {
        v40 = (uint64_t)v12;
        do
        {
          v41 = sub_22EF0EB58(v14, v40);
          *v41 = 1;
          sub_22EEF4FFC((uint64_t)(v41 + 8), a5);
          v40 += 104;
        }
        while ((char *)v40 != v11);
      }
    }
    v42 = (char *)v164;
    if (DWORD2(v164))
    {
      v43 = 24 * DWORD2(v164);
      do
      {
        sub_22E5EFB0C((uint64_t)&v42[v43 - 24], *(char **)&v42[v43 - 16]);
        v43 -= 24;
      }
      while (v43);
      v42 = (char *)v164;
    }
    if (v42 != (char *)v165)
      free(v42);
    if ((v39 & 1) != 0)
    {
LABEL_44:
      v44 = 1;
      goto LABEL_165;
    }
  }
  v124 = v32;
  sub_22F359998((char **)v11 - 6);
  sub_22EEF4FFC((uint64_t)a5, (unsigned int *)v124 + 36);
  v125 = *((_BYTE *)v124 + 136);
  v44 = v125 != 0;
  if (v12 == v29)
  {
    v11 = v12;
  }
  else
  {
    v126 = (uint64_t)v12;
    do
    {
      v127 = sub_22EF0EB58(v14, v126);
      *v127 = v125;
      sub_22EEF4FFC((uint64_t)(v127 + 8), a5);
      v126 += 104;
    }
    while ((char *)v126 != v29);
    v11 -= 104;
  }
LABEL_165:
  if (v12)
  {
    for (; v11 != v12; v11 -= 104)
      sub_22F359998((char **)v11 - 6);
    operator delete(v12);
  }
  return v44;
}

uint64_t sub_22EF0DFE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t sub_22EF0DFEC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 10) = a2;
  return result;
}

uint64_t sub_22EF0DFF4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[24];
  _QWORD v22[6];

  v22[5] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v22[0] = 0;
  if (sub_22F258E38(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), v7, v22))
    v8 = v22[0] == *(_QWORD *)(a1 + 120) + 32 * *(unsigned int *)(a1 + 136);
  else
    v8 = 1;
  if (v8)
    return 0;
  v9 = *(_QWORD **)(v22[0] + 8);
  v10 = v22[0] + 16;
  if (v9 == (_QWORD *)(v22[0] + 16))
    return 0;
  while (1)
  {
    v11 = v9[4];
    v19 = v21;
    v20 = 0x100000000;
    if (a4[2])
      sub_22EEF4FFC((uint64_t)&v19, a4);
    LODWORD(v22[0]) = sub_22F379878(v11);
    v22[1] = v11;
    if (sub_22F35A7A4(a3, (unsigned int *)v22, a1, (uint64_t)&v19))
      break;
    v12 = (char *)v19;
    if ((_DWORD)v20)
    {
      v13 = 24 * v20;
      do
      {
        sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
        v13 -= 24;
      }
      while (v13);
      v12 = (char *)v19;
    }
    if (v12 != v21)
      free(v12);
    v14 = (_QWORD *)v9[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v9[2];
        v8 = *v15 == (_QWORD)v9;
        v9 = v15;
      }
      while (!v8);
    }
    result = 0;
    v9 = v15;
    if (v15 == (_QWORD *)v10)
      return result;
  }
  sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v19);
  v17 = (char *)v19;
  if ((_DWORD)v20)
  {
    v18 = 24 * v20;
    do
    {
      sub_22E5EFB0C((uint64_t)&v17[v18 - 24], *(char **)&v17[v18 - 16]);
      v18 -= 24;
    }
    while (v18);
    v17 = (char *)v19;
  }
  if (v17 != v21)
    free(v17);
  return 1;
}

uint64_t sub_22EF0E1E4(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = 24 * v5;
          do
          {
            sub_22F359930((uint64_t)v9, v4);
            v4 += 24;
            v9 += 24;
            v10 -= 24;
          }
          while (v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v11 = *(char **)a1;
        }
        else
        {
          v11 = *(char **)a1;
        }
        v12 = &v11[24 * v6];
        if (v12 != v9)
        {
          do
          {
            v13 = v12 - 24;
            sub_22E5EFB0C((uint64_t)(v12 - 24), *((char **)v12 - 2));
            v12 = v13;
          }
          while (v13 != v9);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v14 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v14)
        {
          v15 = *(char **)a2;
          v16 = 24 * v14;
          do
          {
            sub_22E5EFB0C((uint64_t)&v15[v16 - 24], *(char **)&v15[v16 - 16]);
            v16 -= 24;
          }
          while (v16);
        }
        goto LABEL_36;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v17 = *(char **)a1;
          v18 = 24 * v6;
          do
          {
            sub_22E5EFB0C((uint64_t)&v17[v18 - 24], *(char **)&v17[v18 - 16]);
            v18 -= 24;
          }
          while (v18);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F34F048(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1;
        v8 = 24 * v6;
        do
        {
          sub_22F359930(v7, v4);
          v4 += 24;
          v7 += 24;
          v8 -= 24;
        }
        while (v8);
        goto LABEL_26;
      }
      v6 = 0;
LABEL_26:
      v19 = *(char **)a2;
      v20 = *(unsigned int *)(a2 + 8);
      if (v6 != v20)
      {
        v21 = *(char **)a1;
        v22 = 24 * v6;
        v23 = 24 * v20;
        do
        {
          v24 = (uint64_t *)&v21[v22];
          *v24 = *(_QWORD *)&v19[24 * v6];
          v25 = &v19[v22 + 8];
          v26 = *(_QWORD *)v25;
          *(_QWORD *)&v21[v22 + 8] = *(_QWORD *)v25;
          v27 = (uint64_t)&v21[v22 + 8];
          v28 = *(_QWORD *)&v19[v22 + 16];
          v24[2] = v28;
          if (v28)
          {
            *(_QWORD *)(v26 + 16) = v27;
            *(_QWORD *)&v19[24 * v6] = v25;
            *(_QWORD *)v25 = 0;
            *(_QWORD *)&v19[v22 + 16] = 0;
          }
          else
          {
            *v24 = v27;
          }
          v21 += 24;
          v19 += 24;
          v23 -= 24;
        }
        while (v22 != v23);
        v19 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v29 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v29)
      {
        v30 = 24 * v29;
        do
        {
          sub_22E5EFB0C((uint64_t)&v19[v30 - 24], *(char **)&v19[v30 - 16]);
          v30 -= 24;
        }
        while (v30);
      }
LABEL_36:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F3598AC((char **)a1, (char **)a2);
  }
  return a1;
}

BOOL sub_22EF0E414(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  BOOL v13;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[24];
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[24];
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v13 = *(int *)a2 < 73 || *((_QWORD *)a2 + 1) == 0;
  if (v13 || (sub_22EF0E6FC(*(int ***)a5, *(_DWORD *)(a5 + 8)) & 1) == 0)
    return sub_22EF0E780((_BYTE *)a1, (unsigned int *)a2, a4, a5, a6, a7);
  v38 = 0x100000000;
  v40 = 0;
  v16 = *(_QWORD *)(a4 + 16);
  v32 = *(_DWORD *)(a4 + 8);
  v33 = v16;
  v17 = a2[1];
  v34 = *a2;
  v35 = v17;
  v36 = *((_QWORD *)a2 + 4);
  v37 = v39;
  sub_22EEF4FFC((uint64_t)&v37, (unsigned int *)a5);
  v18 = sub_22F365534(a3);
  if (a6 == 1)
    v19 = 2;
  else
    v19 = 1;
  v40 = *(_DWORD *)(v18 + 8);
  v41 = v19;
  v20 = (unsigned int *)sub_22EF0EAE0(a1 + 168, (uint64_t)&v32);
  if ((unsigned int *)(a1 + 176) == v20)
  {
    v29 = v31;
    v30 = 0x100000000;
    sub_22EEF4FFC((uint64_t)&v29, (unsigned int *)a5);
    v28 = sub_22EF0E780((_BYTE *)a1, (unsigned int *)a2, a4, (uint64_t)&v29, a6, a7);
    v23 = sub_22EF0EB58((uint64_t **)(a1 + 168), (uint64_t)&v32);
    *v23 = v28;
    sub_22EF0E1E4((uint64_t)(v23 + 8), (uint64_t)&v29);
    sub_22EEF4FFC(a5, (unsigned int *)v23 + 2);
    v22 = *v23;
    v24 = (char *)v29;
    if ((_DWORD)v30)
    {
      v25 = 24 * v30;
      do
      {
        sub_22E5EFB0C((uint64_t)&v24[v25 - 24], *(char **)&v24[v25 - 16]);
        v25 -= 24;
      }
      while (v25);
      v24 = (char *)v29;
    }
    if (v24 != v31)
      free(v24);
  }
  else
  {
    v21 = v20;
    sub_22EEF4FFC(a5, v20 + 36);
    v22 = *((unsigned __int8 *)v21 + 136);
  }
  v26 = (char *)v37;
  if ((_DWORD)v38)
  {
    v27 = 24 * v38;
    do
    {
      sub_22E5EFB0C((uint64_t)&v26[v27 - 24], *(char **)&v26[v27 - 16]);
      v27 -= 24;
    }
    while (v27);
    v26 = (char *)v37;
  }
  if (v26 != v39)
    free(v26);
  return v22 != 0;
}

void sub_22EF0E6B4(char **a1)
{
  if (a1)
  {
    sub_22EF0E6B4(*a1);
    sub_22EF0E6B4(a1[1]);
    sub_22F359998(a1 + 18);
    sub_22F359998(a1 + 11);
    operator delete(a1);
  }
}

uint64_t sub_22EF0E6FC(int **a1, unsigned int a2)
{
  int **v2;
  int *v3;
  int *v4;
  int **v5;
  BOOL v6;

  if (!a2)
    return 1;
  v2 = &a1[3 * a2];
  while (1)
  {
    v3 = *a1;
    if (*a1 != (int *)(a1 + 1))
      break;
LABEL_12:
    a1 += 3;
    if (a1 == v2)
      return 1;
  }
  while (v3[14] >= 73 && *((_QWORD *)v3 + 8))
  {
    v4 = (int *)*((_QWORD *)v3 + 1);
    if (v4)
    {
      do
      {
        v5 = (int **)v4;
        v4 = *(int **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (int **)*((_QWORD *)v3 + 2);
        v6 = *v5 == v3;
        v3 = (int *)v5;
      }
      while (!v6);
    }
    v3 = (int *)v5;
    if (v5 == a1 + 1)
      goto LABEL_12;
  }
  return 0;
}

BOOL sub_22EF0E780(_BYTE *a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *v17;
  __int128 *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  _BOOL8 result;
  uint64_t v31;
  _QWORD v34[2];
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _DWORD v38[8];
  BOOL v39;
  int v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1[8])
    v12 = 1;
  else
    v12 = a1[10] != 0;
  v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
  v14 = *(_DWORD *)(sub_22F365534(v13) + 8) == 1;
  v15 = a1[8];
  a1[8] = v12;
  v34[0] = a3;
  v34[1] = a1;
  v35 = a4;
  v36 = v38;
  v37 = 0x100000000;
  v39 = v14;
  v40 = a6;
  v41 = 0;
  v38[6] = 0;
  v38[7] = a5;
  v16 = *a2;
  if (!(_DWORD)v16)
    goto LABEL_22;
  if (v16 == 76)
  {
    v18 = (__int128 *)(a2 + 2);
    v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if (!v17)
    {
      v19 = 0;
      goto LABEL_29;
    }
LABEL_21:
    sub_22EF0EC94((uint64_t)v34, (unint64_t)v17);
    goto LABEL_22;
  }
  v20 = *a2;
  do
    v20 = dword_24FABB2A0[4 * v20];
  while ((_DWORD)v20 != 76 && v20 != 0);
  v18 = (__int128 *)(a2 + 2);
  v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v19 = v17 != 0;
  if (v20 == 76 && v17 != 0)
    goto LABEL_21;
  if (v16 == 172)
  {
    v23 = 172;
    goto LABEL_35;
  }
LABEL_29:
  v23 = *a2;
  do
    v23 = dword_24FABB2A0[4 * v23];
  while ((_DWORD)v23 != 172 && v23 != 0);
LABEL_35:
  if (v23 != 172 || !v19)
  {
    if (v16 == 75 && v17)
    {
      if (sub_22EF207F8((uint64_t)v34, (uint64_t)v17))
        sub_22EF229C0((uint64_t)v34, (uint64_t)v17);
    }
    else
    {
      switch(v16)
      {
        case 5:
          if (sub_22EF22A20((uint64_t)v34, v18))
            sub_22EF22C1C((uint64_t)v34, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
          break;
        case 6:
          if (sub_22EF20CF8((uint64_t)v34, (uint64_t *)v18))
            sub_22EF22CA4((uint64_t)v34, *(_QWORD *)v18);
          break;
        case 72:
LABEL_52:
          if (sub_22EF2322C((uint64_t)v34, v18))
            sub_22EF23440((uint64_t)v34, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
          break;
        default:
          v31 = *a2;
          while (1)
          {
            v31 = dword_24FABB2A0[4 * v31];
            if (!(_DWORD)v31)
              break;
            if (v31 == 72)
              goto LABEL_52;
          }
          if (v16 == 74 && v17)
          {
            sub_22EF0EEB0((uint64_t)v34, (uint64_t)v17);
            break;
          }
          if (v16 == 2)
          {
            sub_22EF0F0F8((uint64_t)v34, v18);
          }
          else
          {
            if (v16 == 572)
            {
              if (!v19)
                break;
            }
            else
            {
              do
                v16 = dword_24FABB2A0[4 * v16];
              while ((_DWORD)v16 != 572 && v16 != 0);
              if (v16 != 572 || !v19)
                break;
            }
            if (sub_22EF23C04((uint64_t)v34, (uint64_t)v17))
              sub_22EF23E10((uint64_t)v34, (uint64_t)v17);
          }
          break;
      }
    }
  }
  else if (sub_22EF13A30((uint64_t)v34, v17))
  {
    sub_22EF13C3C((uint64_t)v34, (uint64_t)v17, 0);
  }
LABEL_22:
  sub_22EEF4FFC(v35, (unsigned int *)&v36);
  v24 = v41;
  v25 = (char *)v36;
  if ((_DWORD)v37)
  {
    v26 = 24 * v37;
    do
    {
      sub_22E5EFB0C((uint64_t)&v25[v26 - 24], *(char **)&v25[v26 - 16]);
      v26 -= 24;
    }
    while (v26);
    v25 = (char *)v36;
  }
  if (v25 != (char *)v38)
    free(v25);
  result = v24 != 0;
  a1[8] = v15;
  return result;
}

_QWORD *sub_22EF0EAE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_22EF243AC((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_22EF243AC(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

char *sub_22EF0EB58(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = (uint64_t)(v4 + 4);
        if (!sub_22EF243AC(a2, (uint64_t)(v4 + 4)))
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!sub_22EF243AC(v7, a2))
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
    v8 = v6;
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0xB8uLL);
    v9 = *(_OWORD *)(a2 + 16);
    v8[2] = *(_OWORD *)a2;
    v8[3] = v9;
    v8[4] = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 48);
    *((_QWORD *)v8 + 11) = (char *)v8 + 104;
    *((_QWORD *)v8 + 12) = 0x100000000;
    if (*(_DWORD *)(a2 + 64))
      sub_22EEF4FFC((uint64_t)v8 + 88, (unsigned int *)(a2 + 56));
    *((_QWORD *)v8 + 16) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)((char *)v8 + 136) = 0u;
    *(_OWORD *)((char *)v8 + 152) = 0u;
    *(_OWORD *)((char *)v8 + 168) = 0u;
    *((_QWORD *)v8 + 18) = v8 + 10;
    *((_DWORD *)v8 + 39) = 1;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v6;
    *v5 = (uint64_t *)v8;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v8;
    if (v10)
    {
      *a1 = v10;
      v11 = *v5;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (char *)v8 + 136;
}

uint64_t sub_22EF0EC94(uint64_t a1, unint64_t a2)
{
  int v4;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 64);
  if (!v4 || v4 > *(_DWORD *)(a1 + 68))
    return sub_22EF0F3C0(a1, a2);
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22F379878(a2);
    v17 = a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return sub_22EF0F3C0(a1, a2);
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22F379878(a2);
  v17 = a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  if ((v13 & 1) == 0)
    return sub_22EF0F3C0(a1, a2);
  return 0;
}

uint64_t sub_22EF0EEB0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t result;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 && v4 <= *(_DWORD *)(a1 + 68))
  {
    if (*(_DWORD *)(a1 + 76) == 1)
    {
      v8 = *(unsigned int **)(a1 + 16);
      v18 = v20;
      v19 = 0x100000000;
      if (v8[2])
        sub_22EEF4FFC((uint64_t)&v18, v8);
      v16 = 74;
      v17 = a2;
      if (sub_22F35A7A4(*(_QWORD *)a1, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
      {
        *(_BYTE *)(a1 + 80) = 1;
        sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
      }
      v9 = (char *)v18;
      if ((_DWORD)v19)
      {
        v10 = 24 * v19;
        do
        {
          sub_22E5EFB0C((uint64_t)&v9[v10 - 24], *(char **)&v9[v10 - 16]);
          v10 -= 24;
        }
        while (v10);
        v9 = (char *)v18;
      }
      if (v9 != (char *)v20)
        free(v9);
    }
    else
    {
      v11 = *(unsigned int **)(a1 + 16);
      v18 = v20;
      v19 = 0x100000000;
      if (v11[2])
        sub_22EEF4FFC((uint64_t)&v18, v11);
      v16 = 74;
      v17 = a2;
      v12 = sub_22F35A7A4(*(_QWORD *)a1, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
      v13 = v12;
      if (v12)
      {
        *(_BYTE *)(a1 + 80) = 1;
        sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
      }
      v14 = (char *)v18;
      if ((_DWORD)v19)
      {
        v15 = 24 * v19;
        do
        {
          sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
          v15 -= 24;
        }
        while (v15);
        v14 = (char *)v18;
      }
      if (v14 != (char *)v20)
        free(v14);
      if ((v13 & 1) != 0)
        return 0;
    }
  }
  v5 = (uint64_t *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
  v6 = (*(_QWORD *)a2 & 6) != 0 || v5 == 0;
  if (v6 || (result = sub_22EF209EC(a1, *v5, (uint64_t)(v5 + 1)), (_DWORD)result))
  {
    if ((*(_WORD *)(a2 + 28) & 4) == 0 && *(_BYTE *)(a1 + 72))
      return 1;
    result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 8), 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EF0F0F8(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  unsigned int *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  unsigned int *v17;
  __int128 v18;
  int v19;
  char v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 && v4 <= *(_DWORD *)(a1 + 68))
  {
    if (*(_DWORD *)(a1 + 76) == 1)
    {
      v13 = *(unsigned int **)(a1 + 16);
      v26 = v28;
      v27 = 0x100000000;
      if (v13[2])
        sub_22EEF4FFC((uint64_t)&v26, v13);
      v23 = 2;
      v14 = a2[1];
      v24 = *a2;
      v25 = v14;
      if (sub_22F35A7A4(*(_QWORD *)a1, &v23, *(_QWORD *)(a1 + 8), (uint64_t)&v26))
      {
        *(_BYTE *)(a1 + 80) = 1;
        sub_22F35AC28(a1 + 24, (const void ***)v26, (const void ***)v26 + 3 * v27);
      }
      v15 = (char *)v26;
      if ((_DWORD)v27)
      {
        v16 = 24 * v27;
        do
        {
          sub_22E5EFB0C((uint64_t)&v15[v16 - 24], *(char **)&v15[v16 - 16]);
          v16 -= 24;
        }
        while (v16);
        v15 = (char *)v26;
      }
      if (v15 != (char *)v28)
        free(v15);
    }
    else
    {
      v17 = *(unsigned int **)(a1 + 16);
      v26 = v28;
      v27 = 0x100000000;
      if (v17[2])
        sub_22EEF4FFC((uint64_t)&v26, v17);
      v23 = 2;
      v18 = a2[1];
      v24 = *a2;
      v25 = v18;
      v19 = sub_22F35A7A4(*(_QWORD *)a1, &v23, *(_QWORD *)(a1 + 8), (uint64_t)&v26);
      v20 = v19;
      if (v19)
      {
        *(_BYTE *)(a1 + 80) = 1;
        sub_22F35AC28(a1 + 24, (const void ***)v26, (const void ***)v26 + 3 * v27);
      }
      v21 = (char *)v26;
      if ((_DWORD)v27)
      {
        v22 = 24 * v27;
        do
        {
          sub_22E5EFB0C((uint64_t)&v21[v22 - 24], *(char **)&v21[v22 - 16]);
          v22 -= 24;
        }
        while (v22);
        v21 = (char *)v26;
      }
      if (v21 != (char *)v28)
        free(v21);
      if ((v20 & 1) != 0)
        return 0;
    }
  }
  result = 1;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 3);
  switch(*(_DWORD *)a2)
  {
    case 1:
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        result = sub_22EF209EC(a1, *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFCLL), (v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      else
        result = sub_22EF2219C(a1, *((_QWORD *)a2 + 1));
      break;
    case 5:
    case 6:
      v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v8 || (result = sub_22EF206BC(a1, *v8, v8[1]), (_DWORD)result))
        result = sub_22EF20A8C(a1, v6);
      break;
    case 7:
      result = sub_22EF13860(a1, (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFCLL), 0);
      break;
    case 8:
      v9 = *((unsigned int *)a2 + 1);
      if ((_DWORD)v9)
      {
        v10 = v9 - 1;
        do
        {
          result = sub_22EF23160(a1, v6);
          v12 = v10-- != 0;
          if (!(_DWORD)result)
            break;
          v6 += 24;
        }
        while (v12);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EF0F3C0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  BOOL v6;
  uint64_t result;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  int v56;
  __int128 v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  int v79;
  __int128 v80;
  char v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 **v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t **v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  BOOL v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  unsigned int v156;
  BOOL v157;
  uint64_t v158;
  uint64_t **v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t **v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  BOOL v176;
  uint64_t v177;
  uint64_t **v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t **v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  char v190;
  uint64_t v191;
  uint64_t **v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t **v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t *v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t **v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  BOOL v213;
  uint64_t v214;
  uint64_t **v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  int v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t **v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unsigned __int8 *v242;
  uint64_t **v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t **v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  __int128 *v268;
  int v269;
  __int128 v270;
  char v271;
  unsigned int v272;
  BOOL v273;
  uint64_t v274;
  uint64_t **v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t *v288;
  unsigned __int8 *v289;
  uint64_t v290;
  uint64_t v291;
  unsigned __int8 **v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  BOOL v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  uint64_t **v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  uint64_t *v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t **v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  _DWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  BOOL v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  unsigned int v336;
  BOOL v337;
  uint64_t v338;
  uint64_t **v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  uint64_t **v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  uint64_t **v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  BOOL v354;
  uint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t **v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  char v365;
  int v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t **v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  uint64_t **v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  uint64_t **v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t **v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  uint64_t v390;
  uint64_t *v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t **v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t **v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  uint64_t **v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  char v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  char v415;
  uint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  char v424;
  uint64_t **v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  char v434;
  unsigned int v435;
  BOOL v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  char v442;
  unint64_t v443;
  unint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t **v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  char v451;
  unint64_t v452;
  uint64_t v453;
  unsigned int v454;
  BOOL v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  unsigned int v462;
  BOOL v463;
  uint64_t v464;
  uint64_t **v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  char v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t *v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t **v475;
  uint64_t *v476;
  uint64_t v477;
  uint64_t v478;
  char v479;
  unsigned int v480;
  BOOL v481;
  uint64_t v482;
  uint64_t **v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  uint64_t **v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  char v492;
  uint64_t **v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  uint64_t **v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  char v502;
  uint64_t **v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  uint64_t **v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  char v512;
  uint64_t **v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  char v517;
  int v518;
  uint64_t v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t **v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  char v526;
  unint64_t v527;
  unsigned int v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  char v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  char v539;
  uint64_t **v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  char v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t i;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t v551;
  unsigned int v552;
  BOOL v553;
  uint64_t v554;
  uint64_t **v555;
  uint64_t *v556;
  uint64_t v557;
  uint64_t v558;
  char v559;
  unint64_t v560;
  unsigned int v561;
  uint64_t v562;
  uint64_t **v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  char v567;
  uint64_t **v568;
  uint64_t *v569;
  uint64_t v570;
  uint64_t v571;
  char v572;
  uint64_t *v573;
  uint64_t **v574;
  uint64_t *v575;
  uint64_t v576;
  uint64_t v577;
  char v578;
  uint64_t *v579;
  unsigned int v580;
  uint64_t v581;
  uint64_t **v582;
  uint64_t *v583;
  uint64_t v584;
  uint64_t v585;
  char v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t **v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  char v594;
  unsigned int v595;
  uint64_t **v596;
  uint64_t *v597;
  uint64_t v598;
  uint64_t v599;
  char v600;
  uint64_t **v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  char v605;
  uint64_t v606;
  uint64_t **v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  char v611;
  unint64_t v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  uint64_t **v616;
  uint64_t *v617;
  uint64_t v618;
  uint64_t v619;
  char v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  int v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  int v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  _DWORD *v646;
  unint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t **v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  char v662;
  BOOL v663;
  uint64_t **v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  char v668;
  BOOL v669;
  BOOL v670;
  BOOL v671;
  BOOL v672;
  BOOL v673;
  BOOL v674;
  __int128 *v675;
  __int128 v676;
  int v677;
  BOOL v678;
  BOOL v679;
  BOOL v680;
  BOOL v681;
  BOOL v682;
  uint64_t **v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  char v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  __int128 v694;
  __int128 v695;

  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (*(_BYTE *)(a1 + 72))
    v6 = (*(_DWORD *)(a2 + 28) & 0x200) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 == 38)
      return sub_22EF135D0(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v9 = *v8;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v11 = *(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8);
      }
      else
      {
        v11 = 0;
      }
      while (2)
      {
        if (v9 == (uint64_t *)v11)
          return 1;
        sub_22EF222B8(a1, *v9);
        if ((v12 & 1) != 0)
        {
          ++v9;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v288 = *(uint64_t **)(a2 + 96);
      if (v288)
      {
        result = sub_22EF209EC(a1, *v288, (uint64_t)(v288 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v289 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EF13860(a1, v289, 0);
      if (!(_DWORD)result)
        return result;
      v290 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v290)
        goto LABEL_449;
      v291 = 16 * v290;
      v292 = (unsigned __int8 **)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v292)
        {
          result = sub_22EF13860(a1, *v292, 0);
          if (!(_DWORD)result)
            break;
        }
        v292 += 2;
        v291 -= 16;
        if (!v291)
        {
LABEL_449:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v294 = *v293;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
            }
            else
            {
              v296 = 0;
            }
            while (v294 != (uint64_t *)v296)
            {
              sub_22EF222B8(a1, *v294);
              if ((v297 & 1) == 0)
                return 0;
              ++v294;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EF13860(a1, (unsigned __int8 *)(*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8), 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v249 = *v248;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v251 = *(_QWORD *)v250 + 8 * *(unsigned int *)(v250 + 8);
      }
      else
      {
        v251 = 0;
      }
      while (2)
      {
        if (v249 == (uint64_t *)v251)
          return 1;
        sub_22EF222B8(a1, *v249);
        if ((v252 & 1) != 0)
        {
          ++v249;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EF2040C(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v266 = *(_QWORD *)(a2 + 48);
      if (!v266)
        goto LABEL_416;
      v267 = *(unsigned int *)(v266 + 8);
      if (!(_DWORD)v267)
        goto LABEL_416;
      v268 = (__int128 *)(v266 + 16);
      v269 = *(_DWORD *)(a1 + 64) + 1;
      while (1)
      {
        v270 = v268[1];
        v694 = *v268;
        v695 = v270;
        *(_DWORD *)(a1 + 64) = v269;
        v271 = sub_22EF0F0F8(a1, &v694);
        v269 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v269 - 1;
        if ((v271 & 1) == 0)
          break;
        v268 += 2;
        if (!--v267)
        {
LABEL_416:
          v272 = *(_DWORD *)v4 & 0x7F;
          v273 = v272 > 0x39 || ((1 << v272) & 0x3F0003E01011066) == 0;
          if (v273
            && (v272 - 70 <= 0xD ? (v672 = ((1 << (v272 - 70)) & 0x2803) == 0) : (v672 = 1), v672 && v272 - 19 > 4))
          {
            v274 = 0;
          }
          else
          {
            v274 = sub_22EFCAE04(a2);
          }
          result = sub_22EF2221C(a1, v274);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v276 = *v275;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v278 = *(_QWORD *)v277 + 8 * *(unsigned int *)(v277 + 8);
            }
            else
            {
              v278 = 0;
            }
            while (v276 != (uint64_t *)v278)
            {
              sub_22EF222B8(a1, *v276);
              if ((v279 & 1) == 0)
                return 0;
              ++v276;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v199 = *v198;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v201 = *(_QWORD *)v200 + 8 * *(unsigned int *)(v200 + 8);
      }
      else
      {
        v201 = 0;
      }
      while (2)
      {
        if (v199 == (uint64_t *)v201)
          return 1;
        sub_22EF222B8(a1, *v199);
        if ((v202 & 1) != 0)
        {
          ++v199;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EF2221C(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v345 = *v344;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v347 = *(_QWORD *)v346 + 8 * *(unsigned int *)(v346 + 8);
      }
      else
      {
        v347 = 0;
      }
      while (2)
      {
        if (v345 == (uint64_t *)v347)
          return 1;
        sub_22EF222B8(a1, *v345);
        if ((v348 & 1) != 0)
        {
          ++v345;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EF2221C(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v376 = *v375;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v378 = *(_QWORD *)v377 + 8 * *(unsigned int *)(v377 + 8);
      }
      else
      {
        v378 = 0;
      }
      while (2)
      {
        if (v376 == (uint64_t *)v378)
          return 1;
        sub_22EF222B8(a1, *v376);
        if ((v379 & 1) != 0)
        {
          ++v376;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v280 = *(_DWORD *)v4 & 0x7F;
      v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
      v282 = !v281 || v280 - 70 <= 0xD && ((1 << (v280 - 70)) & 0x2803) != 0 || v280 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v282);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        sub_22EF222B8(a1, *v284);
        if ((v287 & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v390 = *(_QWORD *)(a2 + 40);
      v391 = (uint64_t *)(v390 & 0xFFFFFFFFFFFFFFF8);
      if ((v390 & 4) != 0 && v391)
      {
        if ((sub_22EF209EC(a1, *v391, (uint64_t)(v391 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v390 & 4) != 0)
          v560 = 0;
        else
          v560 = v390 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22EF2040C(a1, v560);
        if (!(_DWORD)result)
          return result;
      }
      v561 = *(_DWORD *)v4 & 0x7F;
      if (v561 <= 0x39 && ((1 << v561) & 0x3F0003E01011066) != 0
        || v561 - 70 <= 0xD && ((1 << (v561 - 70)) & 0x2803) != 0
        || v561 - 19 <= 4)
      {
        v562 = sub_22EFCAE04(a2);
      }
      else
      {
        v562 = 0;
      }
      result = sub_22EF2221C(a1, v562);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v564 = *v563;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v566 = *(_QWORD *)v565 + 8 * *(unsigned int *)(v565 + 8);
      }
      else
      {
        v566 = 0;
      }
      while (1)
      {
        if (v564 == (uint64_t *)v566)
          return 1;
        sub_22EF222B8(a1, *v564);
        if ((v567 & 1) == 0)
          break;
        ++v564;
      }
      return 0;
    case 9:
      v235 = *(_QWORD *)(a2 + 48);
      v236 = (uint64_t *)(v235 & 0xFFFFFFFFFFFFFFF8);
      if ((v235 & 4) != 0 && v236)
      {
        if ((sub_22EF209EC(a1, *v236, (uint64_t)(v236 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v235 & 4) != 0)
          v545 = 0;
        else
          v545 = v235 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22EF2040C(a1, v545);
        if (!(_DWORD)result)
          return result;
      }
      v546 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v546)
      {
        for (i = 0; i != v546; ++i)
        {
          v548 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v549 = *(_DWORD *)(v548 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v549)
          {
            v550 = (uint64_t *)(v548 + 16);
            v551 = 8 * v549;
            do
            {
              if ((sub_22EF2040C(a1, *v550) & 1) == 0)
                return 0;
              ++v550;
              v551 -= 8;
            }
            while (v551);
          }
        }
      }
      v552 = *(_DWORD *)v4 & 0x7F;
      v553 = v552 > 0x39 || ((1 << v552) & 0x3F0003E01011066) == 0;
      if (v553 && (v552 - 70 <= 0xD ? (v679 = ((1 << (v552 - 70)) & 0x2803) == 0) : (v679 = 1), v679 && v552 - 19 > 4))
        v554 = 0;
      else
        v554 = sub_22EFCAE04(a2);
      result = sub_22EF2221C(a1, v554);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v556 = *v555;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v558 = *(_QWORD *)v557 + 8 * *(unsigned int *)(v557 + 8);
      }
      else
      {
        v558 = 0;
      }
      while (1)
      {
        if (v556 == (uint64_t *)v558)
          return 1;
        sub_22EF222B8(a1, *v556);
        if ((v559 & 1) == 0)
          break;
        ++v556;
      }
      return 0;
    case 10:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v386 = *v385;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v388 = *(_QWORD *)v387 + 8 * *(unsigned int *)(v387 + 8);
      }
      else
      {
        v388 = 0;
      }
      while (2)
      {
        if (v386 == (uint64_t *)v388)
          return 1;
        sub_22EF222B8(a1, *v386);
        if ((v389 & 1) != 0)
        {
          ++v386;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      sub_22EF13618(a1, a2);
      return (v190 & 1) != 0;
    case 12:
      result = sub_22EF2221C(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v231 = *v230;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v233 = *(_QWORD *)v232 + 8 * *(unsigned int *)(v232 + 8);
      }
      else
      {
        v233 = 0;
      }
      while (2)
      {
        if (v231 == (uint64_t *)v233)
          return 1;
        sub_22EF222B8(a1, *v231);
        if ((v234 & 1) != 0)
        {
          ++v231;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EF206BC(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v366 = *(_DWORD *)(a2 + 24);
      v367 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)&v694 = *(_QWORD *)(a2 + 40);
      DWORD2(v694) = v366;
      *(_QWORD *)&v695 = v367;
      if (!sub_22EF20740(a1, (uint64_t *)&v694))
        return 0;
      if ((v368 = *(_DWORD *)v4 & 0x7F, v368 <= 0x39) && ((1 << v368) & 0x3F0003E01011066) != 0
        || v368 - 70 <= 0xD && ((1 << (v368 - 70)) & 0x2803) != 0
        || v368 - 19 <= 4)
      {
        v369 = sub_22EFCAE04(a2);
      }
      else
      {
        v369 = 0;
      }
      if (!sub_22EF2221C(a1, v369))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v371 = *v370;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v373 = *(_QWORD *)v372 + 8 * *(unsigned int *)(v372 + 8);
      }
      else
      {
        v373 = 0;
      }
      while (2)
      {
        if (v371 == (uint64_t *)v373)
          return 1;
        sub_22EF222B8(a1, *v371);
        if ((v374 & 1) != 0)
        {
          ++v371;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v165 = *v164;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v167 = *(_QWORD *)v166 + 8 * *(unsigned int *)(v166 + 8);
      }
      else
      {
        v167 = 0;
      }
      while (2)
      {
        if (v165 == (uint64_t *)v167)
          return 1;
        sub_22EF222B8(a1, *v165);
        if ((v168 & 1) != 0)
        {
          ++v165;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v254 = *v253;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
      }
      else
      {
        v256 = 0;
      }
      while (2)
      {
        if (v254 == (uint64_t *)v256)
          return 1;
        sub_22EF222B8(a1, *v254);
        if ((v257 & 1) != 0)
        {
          ++v254;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EF2221C(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v144 = *v143;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v146 = *(_QWORD *)v145 + 8 * *(unsigned int *)(v145 + 8);
      }
      else
      {
        v146 = 0;
      }
      while (2)
      {
        if (v144 == (uint64_t *)v146)
          return 1;
        sub_22EF222B8(a1, *v144);
        if ((v147 & 1) != 0)
        {
          ++v144;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EF206BC(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v307 = *v306;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v309 = *(_QWORD *)v308 + 8 * *(unsigned int *)(v308 + 8);
      }
      else
      {
        v309 = 0;
      }
      while (2)
      {
        if (v307 == (uint64_t *)v309)
          return 1;
        sub_22EF222B8(a1, *v307);
        if ((v310 & 1) != 0)
        {
          ++v307;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v381 = *v380;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v383 = *(_QWORD *)v382 + 8 * *(unsigned int *)(v382 + 8);
      }
      else
      {
        v383 = 0;
      }
      while (2)
      {
        if (v381 == (uint64_t *)v383)
          return 1;
        sub_22EF222B8(a1, *v381);
        if ((v384 & 1) != 0)
        {
          ++v381;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v420 = *(_QWORD *)(a2 + 112);
      if (!v420)
        goto LABEL_648;
      v421 = *(unsigned int *)(v420 + 8);
      if (!(_DWORD)v421)
        goto LABEL_648;
      v422 = (uint64_t *)(v420 + 16);
      v423 = 8 * v421;
      while (1)
      {
        sub_22EF13730(a1, *v422);
        if ((v424 & 1) == 0)
          break;
        ++v422;
        v423 -= 8;
        if (!v423)
        {
LABEL_648:
          result = sub_22EF2221C(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v426 = *v425;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v428 = *(_QWORD *)v427 + 8 * *(unsigned int *)(v427 + 8);
            }
            else
            {
              v428 = 0;
            }
            while (v426 != (uint64_t *)v428)
            {
              sub_22EF222B8(a1, *v426);
              if ((v429 & 1) == 0)
                return 0;
              ++v426;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EF2221C(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        sub_22EF222B8(a1, *v329);
        if ((v332 & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EF2221C(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v362 = *v361;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v364 = *(_QWORD *)v363 + 8 * *(unsigned int *)(v363 + 8);
      }
      else
      {
        v364 = 0;
      }
      while (2)
      {
        if (v362 == (uint64_t *)v364)
          return 1;
        sub_22EF222B8(a1, *v362);
        if ((v365 & 1) != 0)
        {
          ++v362;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v411 = *(_QWORD *)(a2 + 112);
      if (!v411)
        goto LABEL_635;
      v412 = *(unsigned int *)(v411 + 8);
      if (!(_DWORD)v412)
        goto LABEL_635;
      v413 = (uint64_t *)(v411 + 16);
      v414 = 8 * v412;
      while (1)
      {
        sub_22EF13730(a1, *v413);
        if ((v415 & 1) == 0)
          break;
        ++v413;
        v414 -= 8;
        if (!v414)
        {
LABEL_635:
          v416 = (uint64_t *)sub_22F259044(a2);
          if (v416)
          {
            result = sub_22EF209EC(a1, *v416, (uint64_t)(v416 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v417 = *(_QWORD *)(a2 + 120);
          if (!v417)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v417 = *(_QWORD *)(a2 + 120);
          }
          if (v417 < 8)
            v418 = 0;
          else
            v418 = *(_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8);
          if (v418 == a2)
          {
            v688 = sub_22F2590A8(a2);
            v689 = sub_22F25910C(a2);
            v690 = sub_22F259178(a2);
            v691 = sub_22F2591DC(a2);
            if (v688 != v689 && v690 != v691)
            {
              v692 = v690 + 4;
              v693 = v688 + 8;
              do
              {
                if (v693 == v689)
                  break;
                v693 += 8;
                v6 = v692 == v691;
                v692 += 4;
              }
              while (!v6);
            }
          }
          result = sub_22EF2221C(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v659 = *v658;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v661 = *(_QWORD *)v660 + 8 * *(unsigned int *)(v660 + 8);
            }
            else
            {
              v661 = 0;
            }
            while (v659 != (uint64_t *)v661)
            {
              sub_22EF222B8(a1, *v659);
              if ((v662 & 1) == 0)
                return 0;
              ++v659;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v452 = *(_QWORD *)(a2 + 104);
      if (!v452)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v452 = *(_QWORD *)(a2 + 104);
      }
      if (v452 < 8)
        v453 = 0;
      else
        v453 = *(_QWORD *)(v452 & 0xFFFFFFFFFFFFFFF8);
      if (v453 == a2)
      {
        v651 = sub_22F259248(a2);
        v653 = v652;
        v654 = sub_22F2592CC(a2);
        if (v651 != v653 && v654 != v655)
        {
          v656 = v654 + 4;
          v657 = v651 + 8;
          do
          {
            if (v657 == v653)
              break;
            v657 += 8;
            v6 = v656 == v655;
            v656 += 4;
          }
          while (!v6);
        }
      }
      result = sub_22EF2221C(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v569 = *v568;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v571 = *(_QWORD *)v570 + 8 * *(unsigned int *)(v570 + 8);
      }
      else
      {
        v571 = 0;
      }
      while (2)
      {
        if (v569 == (uint64_t *)v571)
          return 1;
        sub_22EF222B8(a1, *v569);
        if ((v572 & 1) != 0)
        {
          ++v569;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v238 = *(uint64_t **)(a2 + 88);
      if (v238)
      {
        result = sub_22EF209EC(a1, *v238, (uint64_t)(v238 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v239 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v239)
        goto LABEL_374;
      v240 = *(uint64_t **)(a2 + 96);
      v241 = 8 * v239;
      while ((sub_22EF2040C(a1, *v240) & 1) != 0)
      {
        ++v240;
        v241 -= 8;
        if (!v241)
        {
LABEL_374:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v242 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EF13860(a1, v242, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v244 = *v243;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v246 = *(_QWORD *)v245 + 8 * *(unsigned int *)(v245 + 8);
            }
            else
            {
              v246 = 0;
            }
            while (v244 != (uint64_t *)v246)
            {
              sub_22EF222B8(a1, *v244);
              if ((v247 & 1) == 0)
                return 0;
              ++v244;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v237 = *(uint64_t **)(a2 + 64);
      if (v237)
      {
        if ((sub_22EF209EC(a1, *v237, (uint64_t)(v237 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EF2219C(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v602 = *v601;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v604 = *(_QWORD *)v603 + 8 * *(unsigned int *)(v603 + 8);
      }
      else
      {
        v604 = 0;
      }
      while (2)
      {
        if (v602 == (uint64_t *)v604)
          return 1;
        sub_22EF222B8(a1, *v602);
        if ((v605 & 1) != 0)
        {
          ++v602;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v480 = *(_DWORD *)v4 & 0x7F;
      v481 = v480 > 0x39 || ((1 << v480) & 0x3F0003E01011066) == 0;
      v482 = !v481 || v480 - 70 <= 0xD && ((1 << (v480 - 70)) & 0x2803) != 0 || v480 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v482);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v484 = *v483;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v486 = *(_QWORD *)v485 + 8 * *(unsigned int *)(v485 + 8);
      }
      else
      {
        v486 = 0;
      }
      while (2)
      {
        if (v484 == (uint64_t *)v486)
          return 1;
        sub_22EF222B8(a1, *v484);
        if ((v487 & 1) != 0)
        {
          ++v484;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v131 = *(_DWORD *)v4 & 0x7F, v131 <= 0x39) && ((1 << v131) & 0x3F0003E01011066) != 0
        || v131 - 70 <= 0xD && ((1 << (v131 - 70)) & 0x2803) != 0
        || v131 - 19 <= 4)
      {
        v132 = sub_22EFCAE04(a2);
      }
      else
      {
        v132 = 0;
      }
      result = sub_22EF2221C(a1, v132);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v134 = *v133;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v136 = *(_QWORD *)v135 + 8 * *(unsigned int *)(v135 + 8);
      }
      else
      {
        v136 = 0;
      }
      while (2)
      {
        if (v134 == (uint64_t *)v136)
          return 1;
        sub_22EF222B8(a1, *v134);
        if ((v137 & 1) != 0)
        {
          ++v134;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2040C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) != a2)
        goto LABEL_702;
      sub_22EFE95D4(a2);
      v629 = *(uint64_t **)(sub_22EFE9368(a2) + 32);
      sub_22EFE95D4(a2);
      v630 = sub_22EFE9368(a2);
      v631 = *(_QWORD *)(v630 + 32) + 8 * *(unsigned int *)(v630 + 40);
      while (2)
      {
        if (v629 != (uint64_t *)v631)
        {
          v632 = sub_22E6939D8(*v629);
          if (!v632)
          {
LABEL_1019:
            ++v629;
            continue;
          }
          v633 = v632;
          v634 = 0;
          v635 = v632;
          while (1)
          {
            if ((*(_BYTE *)(v635 + 180) & 6) == 0)
            {
              result = sub_22EF2040C(a1, v635);
              if (!(_DWORD)result)
                return result;
            }
            if ((*(_BYTE *)(v635 + 96) & 3) != 0)
            {
              if (v634)
                goto LABEL_1019;
              v634 = 1;
            }
            v636 = sub_22E3CD31C((uint64_t *)(v635 + 96), v635);
            if (v636 != v633)
            {
              v635 = v636;
              if (v636)
                continue;
            }
            goto LABEL_1019;
          }
        }
        break;
      }
LABEL_702:
      v454 = *(_DWORD *)v4 & 0x7F;
      v455 = v454 > 0x39 || ((1 << v454) & 0x3F0003E01011066) == 0;
      if (v455 && (v454 - 70 <= 0xD ? (v681 = ((1 << (v454 - 70)) & 0x2803) == 0) : (v681 = 1), v681 && v454 - 19 > 4))
        v456 = 0;
      else
        v456 = sub_22EFCAE04(a2);
      result = sub_22EF2221C(a1, v456);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      while (1)
      {
        if (v458 == (uint64_t *)v460)
          return 1;
        sub_22EF222B8(a1, *v458);
        if ((v461 & 1) == 0)
          break;
        ++v458;
      }
      return 0;
    case 29:
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2040C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) != a2)
        goto LABEL_717;
      sub_22EFE95D4(a2);
      v637 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
      sub_22EFE95D4(a2);
      v638 = sub_22EFE9368(a2);
      v639 = *(_QWORD *)(v638 + 32) + 8 * *(unsigned int *)(v638 + 40);
      while (2)
      {
        if (v637 != v639)
        {
          v640 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v637 + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
          v641 = sub_22E3CD31C((uint64_t *)(v640 + 104), v640);
          if (!v641)
          {
LABEL_1046:
            v637 += 8;
            continue;
          }
          v642 = v641;
          v643 = 0;
          v644 = v641;
          while (1)
          {
            v645 = *(_QWORD *)(v644 + 144) & 6;
            v646 = (_DWORD *)(*(_QWORD *)(v644 + 144) & 0xFFFFFFFFFFFFFFF8);
            if (v645 != 4 || v646 == 0)
            {
              if (v645 != 2 || v646 == 0)
                goto LABEL_1034;
            }
            else
            {
              v646 += 4;
            }
            v650 = (*v646 >> 1) & 3;
            if ((v650 - 2) < 2)
            {
              result = sub_22EF2040C(a1, v644);
              if (!(_DWORD)result)
                return result;
              goto LABEL_1035;
            }
            if (!v650)
            {
LABEL_1034:
              if ((sub_22EF2040C(a1, v644) & 1) == 0)
                return 0;
            }
LABEL_1035:
            if ((*(_BYTE *)(v644 + 104) & 3) != 0)
            {
              if (v643)
                goto LABEL_1046;
              v643 = 1;
            }
            v649 = sub_22E3CD31C((uint64_t *)(v644 + 104), v644);
            if (v649 != v642)
            {
              v644 = v649;
              if (v649)
                continue;
            }
            goto LABEL_1046;
          }
        }
        break;
      }
LABEL_717:
      v462 = *(_DWORD *)v4 & 0x7F;
      v463 = v462 > 0x39 || ((1 << v462) & 0x3F0003E01011066) == 0;
      if (v463 && (v462 - 70 <= 0xD ? (v682 = ((1 << (v462 - 70)) & 0x2803) == 0) : (v682 = 1), v682 && v462 - 19 > 4))
        v464 = 0;
      else
        v464 = sub_22EFCAE04(a2);
      result = sub_22EF2221C(a1, v464);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(v4 + 1) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v466 = *v465;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v468 = *(_QWORD *)v467 + 8 * *(unsigned int *)(v467 + 8);
          }
          else
          {
            v468 = 0;
          }
          while (v466 != (uint64_t *)v468)
          {
            sub_22EF222B8(a1, *v466);
            if ((v469 & 1) == 0)
              return 0;
            ++v466;
          }
        }
        return 1;
      }
      return result;
    case 30:
      result = sub_22EF2040C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v392 = *(_DWORD *)v4 & 0x7F, v392 <= 0x39) && ((1 << v392) & 0x3F0003E01011066) != 0
        || v392 - 70 <= 0xD && ((1 << (v392 - 70)) & 0x2803) != 0
        || v392 - 19 <= 4)
      {
        v393 = sub_22EFCAE04(a2);
      }
      else
      {
        v393 = 0;
      }
      result = sub_22EF2221C(a1, v393);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v395 = *v394;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v397 = *(_QWORD *)v396 + 8 * *(unsigned int *)(v396 + 8);
      }
      else
      {
        v397 = 0;
      }
      while (2)
      {
        if (v395 == (uint64_t *)v397)
          return 1;
        sub_22EF222B8(a1, *v395);
        if ((v398 & 1) != 0)
        {
          ++v395;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EF220FC(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2040C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) != a2)
        goto LABEL_458;
      sub_22EFE95D4(a2);
      v621 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
      sub_22EFE95D4(a2);
      v622 = sub_22EFE9368(a2);
      v623 = *(_QWORD *)(v622 + 32) + 8 * *(unsigned int *)(v622 + 40);
      while (2)
      {
        if (v621 != v623)
        {
          v624 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v621 + 80) + 72), *(_QWORD *)(*(_QWORD *)v621 + 80));
          if (!v624)
          {
LABEL_1007:
            v621 += 8;
            continue;
          }
          v625 = v624;
          v626 = 0;
          v627 = v624;
          while (1)
          {
            if ((*(_BYTE *)(v627 + 420) & 6) == 0)
            {
              result = sub_22EF2040C(a1, v627);
              if (!(_DWORD)result)
                return result;
            }
            if ((*(_BYTE *)(v627 + 72) & 3) != 0)
            {
              if (v626)
                goto LABEL_1007;
              v626 = 1;
            }
            v628 = sub_22E3CD31C((uint64_t *)(v627 + 72), v627);
            if (v628 != v625)
            {
              v627 = v628;
              if (v628)
                continue;
            }
            goto LABEL_1007;
          }
        }
        break;
      }
LABEL_458:
      v298 = *(_DWORD *)v4 & 0x7F;
      v299 = v298 > 0x39 || ((1 << v298) & 0x3F0003E01011066) == 0;
      if (v299 && (v298 - 70 <= 0xD ? (v680 = ((1 << (v298 - 70)) & 0x2803) == 0) : (v680 = 1), v680 && v298 - 19 > 4))
        v300 = 0;
      else
        v300 = sub_22EFCAE04(a2);
      result = sub_22EF2221C(a1, v300);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v302 = *v301;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v304 = *(_QWORD *)v303 + 8 * *(unsigned int *)(v303 + 8);
        }
        else
        {
          v304 = 0;
        }
        for (; v302 != (uint64_t *)v304; ++v302)
        {
          sub_22EF222B8(a1, *v302);
          if ((v305 & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 32:
      if (!sub_22EF2040C(a1, *(_QWORD *)(a2 + 48)))
        return 0;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v675 = (__int128 *)sub_22F259350(a2);
        v676 = v675[1];
        v694 = *v675;
        v695 = v676;
        ++*(_DWORD *)(a1 + 64);
        v677 = sub_22EF0F0F8(a1, &v694);
        --*(_DWORD *)(a1 + 64);
        if (!v677)
          return 0;
      }
      if (!sub_22EF220FC(a1, *(_QWORD *)(a2 + 56)))
        return 0;
      if ((v399 = *(_DWORD *)v4 & 0x7F, v399 <= 0x39) && ((1 << v399) & 0x3F0003E01011066) != 0
        || v399 - 70 <= 0xD && ((1 << (v399 - 70)) & 0x2803) != 0
        || v399 - 19 <= 4)
      {
        v400 = sub_22EFCAE04(a2);
      }
      else
      {
        v400 = 0;
      }
      if (!sub_22EF2221C(a1, v400))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v402 = *v401;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v404 = *(_QWORD *)v403 + 8 * *(unsigned int *)(v403 + 8);
      }
      else
      {
        v404 = 0;
      }
      while (2)
      {
        if (v402 == (uint64_t *)v404)
          return 1;
        sub_22EF222B8(a1, *v402);
        if ((v405 & 1) != 0)
        {
          ++v402;
          continue;
        }
        break;
      }
      return 0;
    case 33:
      v169 = *(_QWORD *)(a2 + 120);
      if ((v169 & 4) == 0)
        goto LABEL_253;
      v170 = 0;
      while (1)
      {
        v171 = v169 & 0xFFFFFFFFFFFFFFF8;
        if (v170 >= *(unsigned int *)(v171 + 16))
          break;
        sub_22EF220FC(a1, *(_QWORD *)(*(_QWORD *)(v171 + 24) + 8 * v170++));
        v169 = *(_QWORD *)(a2 + 120);
        if ((v169 & 4) == 0)
        {
LABEL_253:
          v172 = 0;
          v173 = 0;
          goto LABEL_966;
        }
      }
      v172 = *(_QWORD *)v171;
      v173 = *(_QWORD *)(v171 + 8);
LABEL_966:
      result = sub_22EF206BC(a1, v172, v173);
      if (!(_DWORD)result)
        return result;
      v606 = *(_QWORD *)(a2 + 128);
      if ((v606 & 4) != 0 && (v606 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EF209EC(a1, *(_QWORD *)(v606 & 0xFFFFFFFFFFFFFFF8), (v606 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EF2221C(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v608 = *v607;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v610 = *(_QWORD *)v609 + 8 * *(unsigned int *)(v609 + 8);
      }
      else
      {
        v610 = 0;
      }
      if (v608 == (uint64_t *)v610)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v608);
        if ((v611 & 1) == 0)
          break;
        if (++v608 == (uint64_t *)v610)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EF22350(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2221C(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v139 = *v138;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v141 = *(_QWORD *)v140 + 8 * *(unsigned int *)(v140 + 8);
      }
      else
      {
        v141 = 0;
      }
      if (v139 == (uint64_t *)v141)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v139);
        if ((v142 & 1) == 0)
          break;
        if (++v139 == (uint64_t *)v141)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EF223C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2221C(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v118 = *v117;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v120 = *(_QWORD *)v119 + 8 * *(unsigned int *)(v119 + 8);
      }
      else
      {
        v120 = 0;
      }
      if (v118 == (uint64_t *)v120)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v118);
        if ((v121 & 1) == 0)
          break;
        if (++v118 == (uint64_t *)v120)
          return 1;
      }
      return 0;
    case 36:
      v122 = *(uint64_t ***)(a2 + 160);
      if (v122)
      {
        if (*v122)
        {
          result = sub_22EF209EC(a1, **v122, (uint64_t)(*v122 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v123 = *(_QWORD *)(a2 + 120);
      if ((v123 & 4) != 0)
      {
        v573 = (uint64_t *)(v123 & 0xFFFFFFFFFFFFFFF8);
        v124 = *v573;
        v125 = v573[1];
      }
      else
      {
        v124 = 0;
        v125 = 0;
      }
      result = sub_22EF206BC(a1, v124, v125);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF2221C(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v575 = *v574;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v577 = *(_QWORD *)v576 + 8 * *(unsigned int *)(v576 + 8);
      }
      else
      {
        v577 = 0;
      }
      if (v575 == (uint64_t *)v577)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v575);
        if ((v578 & 1) == 0)
          break;
        if (++v575 == (uint64_t *)v577)
          return 1;
      }
      return 0;
    case 37:
      v72 = *(_QWORD *)(a2 + 184);
      if (!v72)
        goto LABEL_105;
      v73 = *(_DWORD *)(v72 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v73)
        goto LABEL_105;
      v74 = (uint64_t *)(v72 + 16);
      v75 = 8 * v73;
      while ((sub_22EF2040C(a1, *v74) & 1) != 0)
      {
        ++v74;
        v75 -= 8;
        if (!v75)
        {
LABEL_105:
          v76 = *(_QWORD *)(a2 + 192);
          v77 = *(unsigned int *)(v76 + 8);
          if ((_DWORD)v77)
          {
            v78 = (__int128 *)(v76 + 16);
            v79 = *(_DWORD *)(a1 + 64) + 1;
            do
            {
              v80 = v78[1];
              v694 = *v78;
              v695 = v80;
              *(_DWORD *)(a1 + 64) = v79;
              v81 = sub_22EF0F0F8(a1, &v694);
              v79 = *(_DWORD *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v79 - 1;
              if ((v81 & 1) == 0)
                return 0;
              v78 += 2;
            }
            while (--v77);
          }
          result = sub_22EF223C4(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EF2221C(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v83 = *v82;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
            }
            else
            {
              v85 = 0;
            }
            if (v83 != (uint64_t *)v85)
            {
              while (1)
              {
                sub_22EF222B8(a1, *v83);
                if ((v86 & 1) == 0)
                  break;
                if (++v83 == (uint64_t *)v85)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v470 = *(_QWORD *)(a2 + 48);
      if (v470)
      {
        result = sub_22EF2219C(a1, v470 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EF135D0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v471 = *(_QWORD *)(a2 + 72);
      if (v471 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v472 = (uint64_t *)(v471 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v472)
          v472 = (uint64_t *)v472[1];
        result = sub_22EF209EC(a1, *v472, (uint64_t)(v472 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v473 = *(_DWORD *)v4 & 0x7F, v473 <= 0x39) && ((1 << v473) & 0x3F0003E01011066) != 0
        || v473 - 70 <= 0xD && ((1 << (v473 - 70)) & 0x2803) != 0
        || v473 - 19 <= 4)
      {
        v474 = sub_22EFCAE04(a2);
      }
      else
      {
        v474 = 0;
      }
      result = sub_22EF2221C(a1, v474);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v476 = *v475;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v478 = *(_QWORD *)v477 + 8 * *(unsigned int *)(v477 + 8);
      }
      else
      {
        v478 = 0;
      }
      if (v476 == (uint64_t *)v478)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v476);
        if ((v479 & 1) == 0)
          break;
        if (++v476 == (uint64_t *)v478)
          return 1;
      }
      return 0;
    case 39:
      sub_22EF13730(a1, a2);
      return (v419 & 1) != 0;
    case 40:
      v203 = *(_QWORD *)(a2 + 80);
      v204 = (uint64_t *)(v203 & 0xFFFFFFFFFFFFFFF8);
      if ((v203 & 4) != 0)
        v204 = (uint64_t *)*v204;
      result = sub_22EF209EC(a1, *v204, (uint64_t)(v204 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v205 = *(_DWORD *)v4 & 0x7F, v205 <= 0x39) && ((1 << v205) & 0x3F0003E01011066) != 0
        || v205 - 70 <= 0xD && ((1 << (v205 - 70)) & 0x2803) != 0
        || v205 - 19 <= 4)
      {
        v206 = sub_22EFCAE04(a2);
      }
      else
      {
        v206 = 0;
      }
      result = sub_22EF2221C(a1, v206);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v208 = *v207;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v210 = *(_QWORD *)v209 + 8 * *(unsigned int *)(v209 + 8);
      }
      else
      {
        v210 = 0;
      }
      if (v208 == (uint64_t *)v210)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v208);
        if ((v211 & 1) == 0)
          break;
        if (++v208 == (uint64_t *)v210)
          return 1;
      }
      return 0;
    case 41:
      v311 = *(_QWORD *)(a2 + 80);
      v312 = (uint64_t *)(v311 & 0xFFFFFFFFFFFFFFF8);
      if ((v311 & 4) != 0)
        v312 = (uint64_t *)*v312;
      result = sub_22EF209EC(a1, *v312, (uint64_t)(v312 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v313 = *(_DWORD *)v4 & 0x7F, v313 <= 0x39) && ((1 << v313) & 0x3F0003E01011066) != 0
        || v313 - 70 <= 0xD && ((1 << (v313 - 70)) & 0x2803) != 0
        || v313 - 19 <= 4)
      {
        v314 = sub_22EFCAE04(a2);
      }
      else
      {
        v314 = 0;
      }
      result = sub_22EF2221C(a1, v314);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v316 = *v315;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v318 = *(_QWORD *)v317 + 8 * *(unsigned int *)(v317 + 8);
      }
      else
      {
        v318 = 0;
      }
      if (v316 == (uint64_t *)v318)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v316);
        if ((v319 & 1) == 0)
          break;
        if (++v316 == (uint64_t *)v318)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EF206BC(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v435 = *(_DWORD *)v4 & 0x7F;
      v436 = v435 > 0x39 || ((1 << v435) & 0x3F0003E01011066) == 0;
      v437 = !v436 || v435 - 70 <= 0xD && ((1 << (v435 - 70)) & 0x2803) != 0 || v435 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v437);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v439);
        if ((v442 & 1) == 0)
          break;
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v45 = *v44;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v47 = *(_QWORD *)v46 + 8 * *(unsigned int *)(v46 + 8);
      }
      else
      {
        v47 = 0;
      }
      if (v45 == (uint64_t *)v47)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v45);
        if ((v48 & 1) == 0)
          break;
        if (++v45 == (uint64_t *)v47)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EF206BC(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v156 = *(_DWORD *)v4 & 0x7F;
      v157 = v156 > 0x39 || ((1 << v156) & 0x3F0003E01011066) == 0;
      v158 = !v157 || v156 - 70 <= 0xD && ((1 << (v156 - 70)) & 0x2803) != 0 || v156 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v158);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v160 = *v159;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v162 = *(_QWORD *)v161 + 8 * *(unsigned int *)(v161 + 8);
      }
      else
      {
        v162 = 0;
      }
      if (v160 == (uint64_t *)v162)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v160);
        if ((v163 & 1) == 0)
          break;
        if (++v160 == (uint64_t *)v162)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v407 = *v406;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v409 = *(_QWORD *)v408 + 8 * *(unsigned int *)(v408 + 8);
      }
      else
      {
        v409 = 0;
      }
      if (v407 == (uint64_t *)v409)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v407);
        if ((v410 & 1) == 0)
          break;
        if (++v407 == (uint64_t *)v409)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v509 = *v508;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v511 = *(_QWORD *)v510 + 8 * *(unsigned int *)(v510 + 8);
      }
      else
      {
        v511 = 0;
      }
      if (v509 == (uint64_t *)v511)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v509);
        if ((v512 & 1) == 0)
          break;
        if (++v509 == (uint64_t *)v511)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v93 = *v92;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v95 = *(_QWORD *)v94 + 8 * *(unsigned int *)(v94 + 8);
      }
      else
      {
        v95 = 0;
      }
      if (v93 == (uint64_t *)v95)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v93);
        if ((v96 & 1) == 0)
          break;
        if (++v93 == (uint64_t *)v95)
          return 1;
      }
      return 0;
    case 48:
      if (*(_BYTE *)(a1 + 72))
        goto LABEL_255;
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if (((v595 = *(_DWORD *)v4 & 0x7F, v595 > 0x39) || ((1 << v595) & 0x3F0003E01011066) == 0)
        && (v595 - 70 <= 0xD ? (v671 = ((1 << (v595 - 70)) & 0x2803) == 0) : (v671 = 1), v671 && v595 - 19 > 4))
      {
LABEL_255:
        v174 = 0;
      }
      else
      {
        v174 = sub_22EFCAE04(a2);
      }
      result = sub_22EF2221C(a1, v174);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v597 = *v596;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v599 = *(_QWORD *)v598 + 8 * *(unsigned int *)(v598 + 8);
      }
      else
      {
        v599 = 0;
      }
      if (v597 == (uint64_t *)v599)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v597);
        if ((v600 & 1) == 0)
          break;
        if (++v597 == (uint64_t *)v599)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EF2243C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v197 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v612 = v197 & 0xFFFFFFFFFFFFFFFCLL;
        v613 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v613 && (_DWORD)v613 != 3)
          v612 = *(_QWORD *)(v612 + 8);
        if ((sub_22EF13860(a1, (unsigned __int8 *)v612, 0) & 1) == 0)
          return 0;
      }
      else if ((v197 & 3) != 0 && (v197 & 3) != 3)
      {
        result = sub_22EF13860(a1, (unsigned __int8 *)(v197 & 0xFFFFFFFFFFFFFFFCLL), 0);
        if (!(_DWORD)result)
          return result;
      }
      v614 = *(_DWORD *)v4 & 0x7F;
      if (v614 <= 0x39 && ((1 << v614) & 0x3F0003E01011066) != 0
        || v614 - 70 <= 0xD && ((1 << (v614 - 70)) & 0x2803) != 0
        || v614 - 19 <= 4)
      {
        v615 = sub_22EFCAE04(a2);
      }
      else
      {
        v615 = 0;
      }
      result = sub_22EF2221C(a1, v615);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v617 = *v616;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v619 = *(_QWORD *)v618 + 8 * *(unsigned int *)(v618 + 8);
        }
        else
        {
          v619 = 0;
        }
        for (; v617 != (uint64_t *)v619; ++v617)
        {
          sub_22EF222B8(a1, *v617);
          if ((v620 & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EF2243C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v36 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v36 = *(_QWORD *)(v36 + 8);
        result = sub_22EF13860(a1, (unsigned __int8 *)v36, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v37 = *(_DWORD *)v4 & 0x7F, v37 <= 0x39) && ((1 << v37) & 0x3F0003E01011066) != 0
        || (v37 - 70 <= 0xD ? (v673 = ((1 << (v37 - 70)) & 0x2803) == 0) : (v673 = 1), !v673 || v37 - 19 <= 4))
      {
        v38 = sub_22EFCAE04(a2);
      }
      else
      {
        v38 = 0;
      }
      result = sub_22EF2221C(a1, v38);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v40 = *v39;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v42 = *(_QWORD *)v41 + 8 * *(unsigned int *)(v41 + 8);
      }
      else
      {
        v42 = 0;
      }
      if (v40 == (uint64_t *)v42)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v40);
        if ((v43 & 1) == 0)
          break;
        if (++v40 == (uint64_t *)v42)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EF2243C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v527 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v527 = *(_QWORD *)(v527 + 8);
        result = sub_22EF13860(a1, (unsigned __int8 *)v527, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v528 = *(_DWORD *)v4 & 0x7F, v528 <= 0x39) && ((1 << v528) & 0x3F0003E01011066) != 0
        || (v528 - 70 <= 0xD ? (v674 = ((1 << (v528 - 70)) & 0x2803) == 0) : (v674 = 1), !v674 || v528 - 19 <= 4))
      {
        v529 = sub_22EFCAE04(a2);
      }
      else
      {
        v529 = 0;
      }
      result = sub_22EF2221C(a1, v529);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v531 = *v530;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
      }
      else
      {
        v533 = 0;
      }
      if (v531 == (uint64_t *)v533)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v531);
        if ((v534 & 1) == 0)
          break;
        if (++v531 == (uint64_t *)v533)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v504 = *v503;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v506 = *(_QWORD *)v505 + 8 * *(unsigned int *)(v505 + 8);
      }
      else
      {
        v506 = 0;
      }
      if (v504 == (uint64_t *)v506)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v504);
        if ((v507 & 1) == 0)
          break;
        if (++v504 == (uint64_t *)v506)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v88 = *v87;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v90 = *(_QWORD *)v89 + 8 * *(unsigned int *)(v89 + 8);
      }
      else
      {
        v90 = 0;
      }
      if (v88 == (uint64_t *)v90)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v88);
        if ((v91 & 1) == 0)
          break;
        if (++v88 == (uint64_t *)v90)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v489 = *v488;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v491 = *(_QWORD *)v490 + 8 * *(unsigned int *)(v490 + 8);
      }
      else
      {
        v491 = 0;
      }
      if (v489 == (uint64_t *)v491)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v489);
        if ((v492 & 1) == 0)
          break;
        if (++v489 == (uint64_t *)v491)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v499 = *v498;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v501 = *(_QWORD *)v500 + 8 * *(unsigned int *)(v500 + 8);
      }
      else
      {
        v501 = 0;
      }
      if (v499 == (uint64_t *)v501)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v499);
        if ((v502 & 1) == 0)
          break;
        if (++v499 == (uint64_t *)v501)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v98 = *v97;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v100 = *(_QWORD *)v99 + 8 * *(unsigned int *)(v99 + 8);
      }
      else
      {
        v100 = 0;
      }
      if (v98 == (uint64_t *)v100)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v98);
        if ((v101 & 1) == 0)
          break;
        if (++v98 == (uint64_t *)v100)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EF22508(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v431);
        if ((v434 & 1) == 0)
          break;
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EF2243C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v175 = *(_DWORD *)v4 & 0x7F;
      v176 = v175 > 0x39 || ((1 << v175) & 0x3F0003E01011066) == 0;
      v177 = !v176 || v175 - 70 <= 0xD && ((1 << (v175 - 70)) & 0x2803) != 0 || v175 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v177);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v179 = *v178;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v181 = *(_QWORD *)v180 + 8 * *(unsigned int *)(v180 + 8);
      }
      else
      {
        v181 = 0;
      }
      if (v179 == (uint64_t *)v181)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v179);
        if ((v182 & 1) == 0)
          break;
        if (++v179 == (uint64_t *)v181)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EF2243C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v443 = *(_QWORD *)(a2 + 72);
      if (v443 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v444 = v443 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v444)
          v444 = *(_QWORD *)(v444 + 8);
        result = sub_22EF13860(a1, (unsigned __int8 *)v444, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v445 = *(_DWORD *)v4 & 0x7F, v445 <= 0x39) && ((1 << v445) & 0x3F0003E01011066) != 0
        || v445 - 70 <= 0xD && ((1 << (v445 - 70)) & 0x2803) != 0
        || v445 - 19 <= 4)
      {
        v446 = sub_22EFCAE04(a2);
      }
      else
      {
        v446 = 0;
      }
      result = sub_22EF2221C(a1, v446);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v448 = *v447;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v450 = *(_QWORD *)v449 + 8 * *(unsigned int *)(v449 + 8);
      }
      else
      {
        v450 = 0;
      }
      if (v448 == (uint64_t *)v450)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v448);
        if ((v451 & 1) == 0)
          break;
        if (++v448 == (uint64_t *)v450)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EF22958(a1, a2);
      if (!(_DWORD)result)
        return result;
      v212 = *(_DWORD *)v4 & 0x7F;
      v213 = v212 > 0x39 || ((1 << v212) & 0x3F0003E01011066) == 0;
      v214 = !v213 || v212 - 70 <= 0xD && ((1 << (v212 - 70)) & 0x2803) != 0 || v212 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v214);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v216 = *v215;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v218 = *(_QWORD *)v217 + 8 * *(unsigned int *)(v217 + 8);
      }
      else
      {
        v218 = 0;
      }
      if (v216 == (uint64_t *)v218)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v216);
        if ((v219 & 1) == 0)
          break;
        if (++v216 == (uint64_t *)v218)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EF22958(a1, a2);
      if (!(_DWORD)result)
        return result;
      v333 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v333)
        goto LABEL_513;
      v334 = (uint64_t *)(a2 + 104);
      v335 = 8 * v333;
      while ((sub_22EF2040C(a1, *v334) & 1) != 0)
      {
        ++v334;
        v335 -= 8;
        if (!v335)
        {
LABEL_513:
          v336 = *(_DWORD *)v4 & 0x7F;
          v337 = v336 > 0x39 || ((1 << v336) & 0x3F0003E01011066) == 0;
          if (v337
            && (v336 - 70 <= 0xD ? (v678 = ((1 << (v336 - 70)) & 0x2803) == 0) : (v678 = 1), v678 && v336 - 19 > 4))
          {
            v338 = 0;
          }
          else
          {
            v338 = sub_22EFCAE04(a2);
          }
          result = sub_22EF2221C(a1, v338);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v340 = *v339;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v342 = *(_QWORD *)v341 + 8 * *(unsigned int *)(v341 + 8);
          }
          else
          {
            v342 = 0;
          }
          if (v340 == (uint64_t *)v342)
            return 1;
          while (1)
          {
            sub_22EF222B8(a1, *v340);
            if ((v343 & 1) == 0)
              break;
            if (++v340 == (uint64_t *)v342)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EF22958(a1, a2);
      if (!(_DWORD)result)
        return result;
      v353 = *(_DWORD *)v4 & 0x7F;
      v354 = v353 > 0x39 || ((1 << v353) & 0x3F0003E01011066) == 0;
      v355 = !v354 || v353 - 70 <= 0xD && ((1 << (v353 - 70)) & 0x2803) != 0 || v353 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v355);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v357 = *v356;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v359 = *(_QWORD *)v358 + 8 * *(unsigned int *)(v358 + 8);
      }
      else
      {
        v359 = 0;
      }
      if (v357 == (uint64_t *)v359)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v357);
        if ((v360 & 1) == 0)
          break;
        if (++v357 == (uint64_t *)v359)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EF22958(a1, a2);
      if (!(_DWORD)result)
        return result;
      v258 = *(_DWORD *)v4 & 0x7F;
      v259 = v258 > 0x39 || ((1 << v258) & 0x3F0003E01011066) == 0;
      v260 = !v259 || v258 - 70 <= 0xD && ((1 << (v258 - 70)) & 0x2803) != 0 || v258 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v260);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v262 = *v261;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v264 = *(_QWORD *)v263 + 8 * *(unsigned int *)(v263 + 8);
      }
      else
      {
        v264 = 0;
      }
      if (v262 == (uint64_t *)v264)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v262);
        if ((v265 & 1) == 0)
          break;
        if (++v262 == (uint64_t *)v264)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EF22958(a1, a2);
      if (!(_DWORD)result)
        return result;
      v220 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v220 != 1024)
        goto LABEL_338;
      result = sub_22EF13860(a1, (unsigned __int8 *)(*(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8), 0);
      if (!(_DWORD)result)
        return result;
      v220 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_338:
      if (v220 != 1024 && v220 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v221 = sub_22EFBC5B4(a2);
        v222 = (unsigned __int8 *)v221;
        if (v221 && (*(_BYTE *)v221 & 0xFE) == 0xAC)
          v222 = *(unsigned __int8 **)(v221 + 16);
        result = sub_22EF13860(a1, v222, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v223 = *(_DWORD *)v4 & 0x7F, v223 <= 0x39) && ((1 << v223) & 0x3F0003E01011066) != 0
        || v223 - 70 <= 0xD && ((1 << (v223 - 70)) & 0x2803) != 0
        || v223 - 19 <= 4)
      {
        v224 = sub_22EFCAE04(a2);
      }
      else
      {
        v224 = 0;
      }
      result = sub_22EF2221C(a1, v224);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v226 = *v225;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v228 = *(_QWORD *)v227 + 8 * *(unsigned int *)(v227 + 8);
      }
      else
      {
        v228 = 0;
      }
      if (v226 == (uint64_t *)v228)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v226);
        if ((v229 & 1) == 0)
          break;
        if (++v226 == (uint64_t *)v228)
          return 1;
      }
      return 0;
    case 65:
      v349 = *(uint64_t ***)(a2 + 120);
      if (v349)
      {
        if (*v349)
        {
          result = sub_22EF209EC(a1, **v349, (uint64_t)(*v349 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v350 = *(_QWORD *)(a2 + 56);
      if ((v350 & 4) != 0)
      {
        v579 = (uint64_t *)(v350 & 0xFFFFFFFFFFFFFFF8);
        v351 = *v579;
        v352 = v579[1];
      }
      else
      {
        v351 = 0;
        v352 = 0;
      }
      result = sub_22EF206BC(a1, v351, v352);
      if (!(_DWORD)result)
        return result;
      if ((v580 = *(_DWORD *)v4 & 0x7F, v580 <= 0x39) && ((1 << v580) & 0x3F0003E01011066) != 0
        || v580 - 70 <= 0xD && ((1 << (v580 - 70)) & 0x2803) != 0
        || v580 - 19 <= 4)
      {
        v581 = sub_22EFCAE04(a2);
      }
      else
      {
        v581 = 0;
      }
      result = sub_22EF2221C(a1, v581);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v583 = *v582;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v585 = *(_QWORD *)v584 + 8 * *(unsigned int *)(v584 + 8);
      }
      else
      {
        v585 = 0;
      }
      if (v583 == (uint64_t *)v585)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v583);
        if ((v586 & 1) == 0)
          break;
        if (++v583 == (uint64_t *)v585)
          return 1;
      }
      return 0;
    case 66:
      v49 = *(_QWORD *)(a2 + 424);
      if (!v49)
        goto LABEL_71;
      v50 = *(_DWORD *)(v49 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v50)
        goto LABEL_71;
      v51 = (uint64_t *)(v49 + 16);
      v52 = 8 * v50;
      while ((sub_22EF2040C(a1, *v51) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
        {
LABEL_71:
          v53 = *(_QWORD *)(a2 + 432);
          v54 = *(unsigned int *)(v53 + 8);
          if ((_DWORD)v54)
          {
            v55 = (__int128 *)(v53 + 16);
            v56 = *(_DWORD *)(a1 + 64) + 1;
            while (1)
            {
              v57 = v55[1];
              v694 = *v55;
              v695 = v57;
              *(_DWORD *)(a1 + 64) = v56;
              v58 = sub_22EF0F0F8(a1, &v694);
              v56 = *(_DWORD *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v56 - 1;
              if ((v58 & 1) == 0)
                break;
              v55 += 2;
              if (!--v54)
                goto LABEL_75;
            }
          }
          else
          {
LABEL_75:
            result = sub_22EF22958(a1, a2);
            if (!(_DWORD)result)
              return result;
            if ((v59 = *(_DWORD *)v4 & 0x7F, v59 <= 0x39) && ((1 << v59) & 0x3F0003E01011066) != 0
              || v59 - 70 <= 0xD && ((1 << (v59 - 70)) & 0x2803) != 0
              || v59 - 19 <= 4)
            {
              v60 = sub_22EFCAE04(a2);
            }
            else
            {
              v60 = 0;
            }
            result = sub_22EF2221C(a1, v60);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v62 = *v61;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v64 = *(_QWORD *)v63 + 8 * *(unsigned int *)(v63 + 8);
            }
            else
            {
              v64 = 0;
            }
            if (v62 == (uint64_t *)v64)
              return 1;
            while (1)
            {
              sub_22EF222B8(a1, *v62);
              if ((v65 & 1) == 0)
                break;
              if (++v62 == (uint64_t *)v64)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v148 = *(_DWORD *)v4 & 0x7F;
      v149 = v148 > 0x39 || ((1 << v148) & 0x3F0003E01011066) == 0;
      v150 = !v149 || v148 - 70 <= 0xD && ((1 << (v148 - 70)) & 0x2803) != 0 || v148 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EF2221C(a1, v150);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v152 = *v151;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v154 = *(_QWORD *)v153 + 8 * *(unsigned int *)(v153 + 8);
      }
      else
      {
        v154 = 0;
      }
      if (v152 == (uint64_t *)v154)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v152);
        if ((v155 & 1) == 0)
          break;
        if (++v152 == (uint64_t *)v154)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v541 = *v540;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v543 = *(_QWORD *)v542 + 8 * *(unsigned int *)(v542 + 8);
      }
      else
      {
        v543 = 0;
      }
      if (v541 == (uint64_t *)v543)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v541);
        if ((v544 & 1) == 0)
          break;
        if (++v541 == (uint64_t *)v543)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v127 = *v126;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v129 = *(_QWORD *)v128 + 8 * *(unsigned int *)(v128 + 8);
      }
      else
      {
        v129 = 0;
      }
      if (v127 == (uint64_t *)v129)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v127);
        if ((v130 & 1) == 0)
          break;
        if (++v127 == (uint64_t *)v129)
          return 1;
      }
      return 0;
    case 70:
      v24 = *(_DWORD **)(a2 + 56);
      v27 = *v24;
      v26 = (uint64_t *)(v24 + 4);
      v25 = v27;
      if (!v27)
        return (sub_22EF2219C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v28 = 8 * v25;
      while ((sub_22EF20F50(a1, *v26) & 1) != 0)
      {
        ++v26;
        v28 -= 8;
        if (!v28)
          return (sub_22EF2219C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v71 = *(unsigned __int8 **)(a2 + 96);
        if (!v71)
          return (sub_22EF2219C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EF13860(a1, v71, 0);
        if ((_DWORD)result)
          return (sub_22EF2219C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v494 = *v493;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v496 = *(_QWORD *)v495 + 8 * *(unsigned int *)(v495 + 8);
      }
      else
      {
        v496 = 0;
      }
      if (v494 == (uint64_t *)v496)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v494);
        if ((v497 & 1) == 0)
          break;
        if (++v494 == (uint64_t *)v496)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v514 = *v513;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v516 = *(_QWORD *)v515 + 8 * *(unsigned int *)(v515 + 8);
      }
      else
      {
        v516 = 0;
      }
      if (v514 == (uint64_t *)v516)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v514);
        if ((v517 & 1) == 0)
          break;
        if (++v514 == (uint64_t *)v516)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EF206BC(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v518 = *(_DWORD *)(a2 + 24);
      v519 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)&v694 = *(_QWORD *)(a2 + 40);
      DWORD2(v694) = v518;
      *(_QWORD *)&v695 = v519;
      if (!sub_22EF20740(a1, (uint64_t *)&v694))
        return 0;
      if ((v520 = *(_DWORD *)v4 & 0x7F, v520 <= 0x39) && ((1 << v520) & 0x3F0003E01011066) != 0
        || v520 - 70 <= 0xD && ((1 << (v520 - 70)) & 0x2803) != 0
        || v520 - 19 <= 4)
      {
        v521 = sub_22EFCAE04(a2);
      }
      else
      {
        v521 = 0;
      }
      if (!sub_22EF2221C(a1, v521))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v523 = *v522;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v525 = *(_QWORD *)v524 + 8 * *(unsigned int *)(v524 + 8);
      }
      else
      {
        v525 = 0;
      }
      while (2)
      {
        if (v523 == (uint64_t *)v525)
          return 1;
        sub_22EF222B8(a1, *v523);
        if ((v526 & 1) != 0)
        {
          ++v523;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v102 = *(unsigned int **)(a2 + 40);
      v103 = *v102;
      v104 = v102[1];
      if (!(_DWORD)v104)
        goto LABEL_147;
      v105 = (unsigned __int8 **)&v102[2 * v103 + 4];
      v106 = 8 * v104;
      while ((sub_22EF13860(a1, *v105, 0) & 1) != 0)
      {
        ++v105;
        v106 -= 8;
        if (!v106)
        {
          v102 = *(unsigned int **)(a2 + 40);
          v103 = *v102;
LABEL_147:
          if ((_DWORD)v103)
          {
            v107 = (uint64_t *)(v102 + 4);
            v108 = 8 * v103;
            while ((sub_22EF20F50(a1, *v107) & 1) != 0)
            {
              ++v107;
              v108 -= 8;
              if (!v108)
                goto LABEL_151;
            }
          }
          else
          {
LABEL_151:
            v109 = *(_DWORD *)v4 & 0x7F;
            v110 = v109 > 0x39 || ((1 << v109) & 0x3F0003E01011066) == 0;
            if (v110
              && (v109 - 70 <= 0xD ? (v670 = ((1 << (v109 - 70)) & 0x2803) == 0) : (v670 = 1), v670 && v109 - 19 > 4))
            {
              v111 = 0;
            }
            else
            {
              v111 = sub_22EFCAE04(a2);
            }
            result = sub_22EF2221C(a1, v111);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v113 = *v112;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v115 = *(_QWORD *)v114 + 8 * *(unsigned int *)(v114 + 8);
            }
            else
            {
              v115 = 0;
            }
            if (v113 == (uint64_t *)v115)
              return 1;
            while (1)
            {
              sub_22EF222B8(a1, *v113);
              if ((v116 & 1) == 0)
                break;
              if (++v113 == (uint64_t *)v115)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v320 = *(_DWORD **)(a2 + 40);
      v323 = *v320;
      v322 = (uint64_t *)(v320 + 4);
      v321 = v323;
      if (!v323)
        goto LABEL_1084;
      v324 = 8 * v321;
      while ((sub_22EF20F50(a1, *v322) & 1) != 0)
      {
        ++v322;
        v324 -= 8;
        if (!v324)
        {
          v325 = *(_DWORD *)v4 & 0x7F;
          v326 = v325 > 0x39 || ((1 << v325) & 0x3F0003E01011066) == 0;
          if (v326
            && (v325 - 70 <= 0xD ? (v669 = ((1 << (v325 - 70)) & 0x2803) == 0) : (v669 = 1), v669 && v325 - 19 > 4))
          {
LABEL_1084:
            v327 = 0;
          }
          else
          {
            v327 = sub_22EFCAE04(a2);
          }
          result = sub_22EF2221C(a1, v327);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v684 = *v683;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v686 = *(_QWORD *)v685 + 8 * *(unsigned int *)(v685 + 8);
          }
          else
          {
            v686 = 0;
          }
          if (v684 == (uint64_t *)v686)
            return 1;
          while (1)
          {
            sub_22EF222B8(a1, *v684);
            if ((v687 & 1) == 0)
              break;
            if (++v684 == (uint64_t *)v686)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v29 = *(unsigned int **)(a2 + 40);
      v30 = v29[1];
      if (!(_DWORD)v30)
        goto LABEL_1069;
      v31 = (unsigned __int8 **)&v29[2 * *v29 + 4];
      v32 = 8 * v30;
      while ((sub_22EF13860(a1, *v31, 0) & 1) != 0)
      {
        ++v31;
        v32 -= 8;
        if (!v32)
        {
          v33 = *(_DWORD *)v4 & 0x7F;
          v34 = v33 > 0x39 || ((1 << v33) & 0x3F0003E01011066) == 0;
          if (v34 && (v33 - 70 <= 0xD ? (v663 = ((1 << (v33 - 70)) & 0x2803) == 0) : (v663 = 1), v663 && v33 - 19 > 4))
LABEL_1069:
            v35 = 0;
          else
            v35 = sub_22EFCAE04(a2);
          result = sub_22EF2221C(a1, v35);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v665 = *v664;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v667 = *(_QWORD *)v666 + 8 * *(unsigned int *)(v666 + 8);
          }
          else
          {
            v667 = 0;
          }
          if (v665 == (uint64_t *)v667)
            return 1;
          while (1)
          {
            sub_22EF222B8(a1, *v665);
            if ((v668 & 1) == 0)
              break;
            if (++v665 == (uint64_t *)v667)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v536 = *v535;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
      }
      else
      {
        v538 = 0;
      }
      if (v536 == (uint64_t *)v538)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v536);
        if ((v539 & 1) == 0)
          break;
        if (++v536 == (uint64_t *)v538)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v20 = *v19;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v22 = *(_QWORD *)v21 + 8 * *(unsigned int *)(v21 + 8);
      }
      else
      {
        v22 = 0;
      }
      if (v20 == (uint64_t *)v22)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v20);
        if ((v23 & 1) == 0)
          break;
        if (++v20 == (uint64_t *)v22)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EF2221C(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v67 = *v66;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v69 = *(_QWORD *)v68 + 8 * *(unsigned int *)(v68 + 8);
      }
      else
      {
        v69 = 0;
      }
      if (v67 == (uint64_t *)v69)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v67);
        if ((v70 & 1) == 0)
          break;
        if (++v67 == (uint64_t *)v69)
          return 1;
      }
      return 0;
    case 81:
      v191 = sub_22EFCAE04(a2);
      result = sub_22EF2221C(a1, v191);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v193 = *v192;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v195 = *(_QWORD *)v194 + 8 * *(unsigned int *)(v194 + 8);
      }
      else
      {
        v195 = 0;
      }
      if (v193 == (uint64_t *)v195)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v193);
        if ((v196 & 1) == 0)
          break;
        if (++v193 == (uint64_t *)v195)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EF13860(a1, (unsigned __int8 *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v183 = *(_DWORD *)v4 & 0x7F, v183 <= 0x39) && ((1 << v183) & 0x3F0003E01011066) != 0
        || v183 - 70 <= 0xD && ((1 << (v183 - 70)) & 0x2803) != 0
        || v183 - 19 <= 4)
      {
        v184 = sub_22EFCAE04(a2);
      }
      else
      {
        v184 = 0;
      }
      result = sub_22EF2221C(a1, v184);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v186 = *v185;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v188 = *(_QWORD *)v187 + 8 * *(unsigned int *)(v187 + 8);
      }
      else
      {
        v188 = 0;
      }
      if (v186 == (uint64_t *)v188)
        return 1;
      while (1)
      {
        sub_22EF222B8(a1, *v186);
        if ((v189 & 1) == 0)
          break;
        if (++v186 == (uint64_t *)v188)
          return 1;
      }
      return 0;
    case 83:
      v13 = *(_QWORD *)(a2 + 88);
      v14 = *(_BYTE **)(v13 + 19016);
      v15 = *(_BYTE **)(v13 + 19024);
      v16 = v15 - v14;
      if (v15 == v14)
      {
        v17 = 0;
        v18 = 0;
      }
      else
      {
        if (v16 < 0)
          abort();
        v17 = (char *)operator new(v15 - v14);
        memmove(v17, v14, v16);
        v18 = (uint64_t *)&v17[8 * (v16 >> 3)];
      }
      if ((char *)v18 - v17 == 8 && (*(_DWORD *)(*(_QWORD *)v17 + 28) & 0x7F) == 0x53)
      {
        operator delete(v17);
        result = sub_22EF2221C(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v17 != (char *)v18)
        {
          v587 = (uint64_t *)v17;
          do
          {
            v588 = *v587;
            if ((*(_DWORD *)(*v587 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*v587 + 28) & 0x7Fu) - 35 > 2
               || (v589 = *(_QWORD *)(v588 + 128)) == 0
               || ((*(unsigned __int16 *)(v589 + 8) | (*(unsigned __int8 *)(v589 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EF2040C(a1, v588))
            {
              if (v17)
                operator delete(v17);
              return 0;
            }
            ++v587;
          }
          while (v587 != v18);
        }
        if (v17)
          operator delete(v17);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v591 = *v590;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v593 = *(_QWORD *)v592 + 8 * *(unsigned int *)(v592 + 8);
        }
        else
        {
          v593 = 0;
        }
        for (; v591 != (uint64_t *)v593; ++v591)
        {
          sub_22EF222B8(a1, *v591);
          if ((v594 & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_22EF135D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EF13860(a1, *(unsigned __int8 **)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EF13974(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

void sub_22EF13618(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;

  if (sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0))
  {
    v4 = *(_DWORD *)(a2 + 28) & 0x7F;
    v5 = v4 > 0x39 || ((1 << v4) & 0x3F0003E01011066) == 0;
    if (v5 && (v4 - 70 <= 0xD ? (v7 = ((1 << (v4 - 70)) & 0x2803) == 0) : (v7 = 1), v7 && v4 - 19 > 4))
      v6 = 0;
    else
      v6 = sub_22EFCAE04(a2);
    if (sub_22EF2221C(a1, v6) && (*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v9 = *v8;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v11 = *(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8);
      }
      else
      {
        v11 = 0;
      }
      if (v9 != v11)
      {
        v12 = v9 + 8;
        do
        {
          sub_22EF222B8(a1, *(_QWORD *)(v12 - 8));
          if (v13)
            v14 = v12 == v11;
          else
            v14 = 1;
          v12 += 8;
        }
        while (!v14);
      }
    }
  }
}

void sub_22EF13730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (uint64_t *)*v5;
  if (sub_22EF209EC(a1, *v5, (uint64_t)(v5 + 1)))
  {
LABEL_5:
    v6 = *(_DWORD *)(a2 + 28) & 0x7F;
    v7 = v6 > 0x39 || ((1 << v6) & 0x3F0003E01011066) == 0;
    if (v7 && (v6 - 70 <= 0xD ? (v9 = ((1 << (v6 - 70)) & 0x2803) == 0) : (v9 = 1), v9 && v6 - 19 > 4))
      v8 = 0;
    else
      v8 = sub_22EFCAE04(a2);
    if (sub_22EF2221C(a1, v8) && (*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v11 = *v10;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v13 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
      }
      else
      {
        v13 = 0;
      }
      if (v11 != v13)
      {
        v14 = v11 + 8;
        do
        {
          sub_22EF222B8(a1, *(_QWORD *)(v14 - 8));
          if (v15)
            v16 = v14 == v13;
          else
            v16 = 1;
          v14 += 8;
        }
        while (!v16);
      }
    }
  }
}

uint64_t sub_22EF13860(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  int v7;
  BOOL v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 64);
  if (!v5 || ((v7 = *(_DWORD *)(a1 + 68), v5 <= v7) ? (v8 = v7 == 0x7FFFFFFF) : (v8 = 1), !v8))
    a3 = 0;
  *(_DWORD *)(a1 + 64) = v5 + 1;
  if (a2
    && ((v9 = *a2, v10 = a2, (v9 - 102) > 0x84)
     || v9 == 182
     && (v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)),
         v10 = a2,
         *(_DWORD *)(sub_22F365534(v12) + 8) == 1)
     || (v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)),
         v10 = a2,
         !*(_DWORD *)(sub_22F365534(v13) + 8))
     || (v10 = sub_22EFFF5EC(a2)) != 0)
    && (!*(_BYTE *)(a1 + 72) || *a2 != 120))
  {
    result = sub_22EF13A30(a1, v10);
    if ((_DWORD)result)
      result = sub_22EF13C3C(a1, (uint64_t)v10, a3);
  }
  else
  {
    result = 1;
  }
  --*(_DWORD *)(a1 + 64);
  return result;
}

uint64_t sub_22EF13974(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  int v8;
  __int128 v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];

  result = sub_22EF206BC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EF20740(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = (_OWORD *)(v5 + 16);
        v8 = *(_DWORD *)(a1 + 64) + 1;
        while (1)
        {
          v9 = v7[1];
          v13[0] = *v7;
          v13[1] = v9;
          *(_DWORD *)(a1 + 64) = v8;
          v10 = sub_22EF0F0F8(a1, v13);
          v8 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v8 - 1;
          if ((v10 & 1) == 0)
            break;
          v7 += 2;
          if (!--v6)
            return 1;
        }
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL sub_22EF13A30(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22F379890(a2);
    v17 = a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return 1;
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22F379890(a2);
  v17 = a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  return (v13 & 1) == 0;
}

uint64_t sub_22EF13C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[22];

  v17[20] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22EF2040C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t result;
  int v6;
  int *v7;
  uint64_t v8;

  if (!a2)
  {
    v7 = (int *)(a1 + 64);
    v6 = *(_DWORD *)(a1 + 64);
    result = 1;
    v4 = v7;
    goto LABEL_5;
  }
  if ((*(_BYTE *)(a2 + 29) & 2) == 0
    || (v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)),
        *(_DWORD *)(sub_22F365534(v8) + 8) != 1))
  {
    v4 = (int *)(a1 + 64);
    ++*(_DWORD *)(a1 + 64);
    result = sub_22EF0EC94(a1, a2);
    v6 = *(_DWORD *)(a1 + 64) - 1;
LABEL_5:
    *v4 = v6;
    return result;
  }
  return sub_22EF0F3C0(a1, a2);
}

BOOL sub_22EF204B0(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22F379878(a2);
    v17 = a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return 1;
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22F379878(a2);
  v17 = a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  return (v13 & 1) == 0;
}

uint64_t sub_22EF206BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v7;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  if (!a2)
    return 1;
  ++*(_DWORD *)(a1 + 64);
  result = sub_22EF207F8(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22EF22A20(a1, &v7);
    if ((_DWORD)result)
      result = sub_22EF22C1C(a1, a2, a3);
  }
  --*(_DWORD *)(a1 + 64);
  return result;
}

uint64_t sub_22EF20740(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22EF209EC(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EF20A8C(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL sub_22EF207F8(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  char v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v16 = v18;
    v17 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v16, v6);
    v14 = 75;
    v15 = a2;
    if (sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
    }
    v7 = (char *)v16;
    if ((_DWORD)v17)
    {
      v8 = 24 * v17;
      do
      {
        sub_22E5EFB0C((uint64_t)&v7[v8 - 24], *(char **)&v7[v8 - 16]);
        v8 -= 24;
      }
      while (v8);
      v7 = (char *)v16;
    }
    if (v7 != (char *)v18)
      free(v7);
    return 1;
  }
  v9 = *(unsigned int **)(a1 + 16);
  v16 = v18;
  v17 = 0x100000000;
  if (v9[2])
    sub_22EEF4FFC((uint64_t)&v16, v9);
  v14 = 75;
  v15 = a2;
  v10 = sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16);
  v11 = v10;
  if (v10)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
  }
  v12 = (char *)v16;
  if ((_DWORD)v17)
  {
    v13 = 24 * v17;
    do
    {
      sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v16;
  }
  if (v12 != (char *)v18)
    free(v12);
  return (v11 & 1) == 0;
}

uint64_t sub_22EF209EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  if (!a2)
    return 1;
  ++*(_DWORD *)(a1 + 64);
  result = sub_22EF20AEC(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if ((_DWORD)result)
  {
    v7 = a2;
    result = sub_22EF20CF8(a1, &v7);
    if ((_DWORD)result)
    {
      result = sub_22EF2322C(a1, v8);
      if ((_DWORD)result)
        result = sub_22EF23440(a1, a2, a3);
    }
  }
  --*(_DWORD *)(a1 + 64);
  return result;
}

uint64_t sub_22EF20A8C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22EF20EF4(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22EF20EF4(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

BOOL sub_22EF20AEC(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22F37A00C(a2);
    v17 = a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return 1;
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22F37A00C(a2);
  v17 = a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  return (v13 & 1) == 0;
}

BOOL sub_22EF20CF8(uint64_t a1, uint64_t *a2)
{
  int v2;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  char v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v16 = v18;
    v17 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v16, v6);
    v14 = 6;
    v15 = *a2;
    if (sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
    }
    v7 = (char *)v16;
    if ((_DWORD)v17)
    {
      v8 = 24 * v17;
      do
      {
        sub_22E5EFB0C((uint64_t)&v7[v8 - 24], *(char **)&v7[v8 - 16]);
        v8 -= 24;
      }
      while (v8);
      v7 = (char *)v16;
    }
    if (v7 != (char *)v18)
      free(v7);
    return 1;
  }
  v9 = *(unsigned int **)(a1 + 16);
  v16 = v18;
  v17 = 0x100000000;
  if (v9[2])
    sub_22EEF4FFC((uint64_t)&v16, v9);
  v14 = 6;
  v15 = *a2;
  v10 = sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16);
  v11 = v10;
  if (v10)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
  }
  v12 = (char *)v16;
  if ((_DWORD)v17)
  {
    v13 = 24 * v17;
    do
    {
      sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v16;
  }
  if (v12 != (char *)v18)
    free(v12);
  return (v11 & 1) == 0;
}

uint64_t sub_22EF20EF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  ++*(_DWORD *)(a1 + 64);
  if (a2)
  {
    result = sub_22EF207F8(a1, a2);
    if ((_DWORD)result)
      result = sub_22EF229C0(a1, a2);
  }
  else
  {
    result = 1;
  }
  --*(_DWORD *)(a1 + 64);
  return result;
}

uint64_t sub_22EF20F50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EF13860(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EF13860(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EF13860(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EF13860(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EF13860(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EF13860(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EF13860(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EF13860(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EF13860(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EF13860(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EF13860(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EF13860(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EF13860(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EF13860(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EF13860(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EF13860(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EF13860(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EF13860(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EF13860(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EF206BC(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EF20740(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EF13860(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EF13860(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EF13860(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EF13860(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EF13860(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EF13860(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EF13860(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EF13860(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EF13860(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EF13860(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EF13860(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EF13860(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EF13860(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EF13860(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF13860(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EF13860(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EF13860(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EF13860(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EF13860(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EF13860(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EF13860(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EF13860(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EF13860(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EF13860(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EF13860(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EF13860(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EF206BC(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EF20740(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EF13860(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EF13860(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EF13860(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EF13860(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EF13860(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EF13860(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EF13860(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EF13860(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EF13860(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EF13860(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EF13860(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EF206BC(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EF20740(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EF13860(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EF13860(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EF13860(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EF13860(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EF13860(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EF13860(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EF13860(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EF13860(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EF13860(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EF13860(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EF13860(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EF13860(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EF22004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EF13860(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EF13860(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

uint64_t sub_22EF220FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = (uint64_t *)(a2 + 16);
    while ((sub_22EF2040C(a1, *v7) & 1) != 0)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EF13860(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EF2219C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  v5 = a2;
  if (a2 < 0x10)
    return 1;
  ++*(_DWORD *)(a1 + 64);
  result = sub_22EF20AEC(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if ((_DWORD)result)
  {
    result = sub_22EF20CF8(a1, (uint64_t *)&v5);
    if ((_DWORD)result)
      result = sub_22EF22CA4(a1, a2);
  }
  --*(_DWORD *)(a1 + 64);
  return result;
}

uint64_t sub_22EF2221C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EF2040C(a1, v4);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

void sub_22EF222B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a2)
  {
    if (((*(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16)) & 0x40000) == 0
      || (v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)),
          *(_DWORD *)(sub_22F365534(v4) + 8) != 1))
    {
      ++*(_DWORD *)(a1 + 64);
      if (sub_22EF23C04(a1, a2))
        sub_22EF23E10(a1, a2);
      --*(_DWORD *)(a1 + 64);
    }
  }
}

uint64_t sub_22EF22350(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EF220FC(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EF206BC(a1, v7, v8);
}

uint64_t sub_22EF223C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EF22350(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EF209EC(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EF2243C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EF220FC(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EF206BC(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(uint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EF209EC(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EF209EC(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EF2219C(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EF22508(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48[2];

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EF220FC(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EF206BC(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v45 = *(_QWORD *)(a2 + 40);
    v46 = v10;
    v47 = v11;
    result = sub_22EF20740(a1, &v45);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = (__int128 *)(v14 + 16);
            v17 = *(_DWORD *)(a1 + 64);
            do
            {
              v18 = v16[1];
              v48[0] = *v16;
              v48[1] = v18;
              *(_DWORD *)(a1 + 64) = v17 + 1;
              v19 = sub_22EF0F0F8(a1, v48);
              v17 = *(_DWORD *)(a1 + 64) - 1;
              *(_DWORD *)(a1 + 64) = v17;
              if ((v19 & 1) == 0)
                return 0;
              v16 += 2;
            }
            while (--v15);
          }
        }
      }
      v20 = *(_QWORD *)(a2 + 56);
      v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 4) != 0)
        v21 = (uint64_t *)v21[4];
      if (v21)
      {
        if ((sub_22EF209EC(a1, *v21, (uint64_t)(v21 + 1)) & 1) == 0)
          return 0;
      }
      else if (!*(_BYTE *)(a1 + 72))
      {
        v28 = *(uint64_t **)(a2 + 120);
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
        v30 = v29 && *(_BYTE *)(v29 + 16) == 26;
        if (v30
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v29 = sub_22F10CF48(v29)) != 0)
        {
          v31 = *(_QWORD *)(v29 + 16);
          if ((v31 & 0x3FFFC000000000) != 0)
          {
            v32 = 8 * (unsigned __int16)(v31 >> 38);
            while ((sub_22EF2040C(a1, *v28) & 1) != 0)
            {
              ++v28;
              v32 -= 8;
              if (!v32)
                goto LABEL_25;
            }
            return 0;
          }
        }
      }
LABEL_25:
      v22 = *(_QWORD *)(a2 + 56);
      if ((v22 & 4) == 0
        || (v23 = *(unsigned __int8 **)((v22 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EF13860(a1, v23, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v24 = sub_22EFD7ED0(a2);
          v25 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v24 != v25)
          {
            v26 = *(_QWORD *)v24;
            if ((*(_WORD *)(*(_QWORD *)v24 + 28) & 4) != 0 || !*(_BYTE *)(a1 + 72))
            {
              ++*(_DWORD *)(a1 + 64);
              result = sub_22EF0EEB0(a1, v26);
              --*(_DWORD *)(a1 + 64);
              if (!(_DWORD)result)
                return result;
            }
            v24 += 8;
          }
        }
        if (sub_22E49F868(a2))
          v27 = (*(_BYTE *)(a2 + 83) & 2) == 0 || *(_BYTE *)(a1 + 72) == 0;
        else
          v27 = 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_77;
        v33 = *(_WORD *)(a2 + 80) & 0x7F;
        v34 = -40;
        if (v33 > 0x46)
        {
          if (v33 == 83)
            goto LABEL_67;
          if (v33 == 71)
          {
            v34 = -56;
            goto LABEL_67;
          }
          if (v33 != 81)
          {
LABEL_62:
            v35 = v33 - 52;
            v36 = v33 - 33 >= 5;
            v37 = -48;
            if (!v36)
              v37 = -64;
            if (v35 >= 6)
              v34 = v37;
            else
              v34 = -72;
          }
        }
        else
        {
          if (v33 > 0x18)
            goto LABEL_61;
          if (v33 == 16)
          {
LABEL_54:
            v34 = -48;
            goto LABEL_67;
          }
          if (((1 << v33) & 0x1066) == 0)
          {
            if (v33 == 24)
              goto LABEL_54;
LABEL_61:
            if (v33 == 70)
            {
              v34 = -64;
              goto LABEL_67;
            }
            goto LABEL_62;
          }
        }
LABEL_67:
        v38 = *(_QWORD *)(a2 + 72 + v34 + 16);
        v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
        if ((v38 & 4) != 0)
          v39 = (_QWORD *)*v39;
        if (v39)
        {
          v40 = v39[8];
          if (v40)
          {
            if (((*(unsigned __int16 *)(v40 + 8) | (*(unsigned __int8 *)(v40 + 10) << 16)) & 0x100000) != 0)
            {
              v41 = sub_22EFD462C((unint64_t)(v39 - 8));
              if (v41)
              {
                if ((*(_DWORD *)(v41 + 28) & 0x7F) != 0x1D || (v41 = *(_QWORD *)(v41 + 48)) != 0)
                {
                  if (v41 == a2
                    || (v42 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v41 + 32))(v41),
                        v42 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v27)
                      return 1;
LABEL_78:
                    v43 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EF13860(a1, v43, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v44 = *(_QWORD *)(a2 + 88);
                    if (v44)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v44 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EF2040C(a1, v44);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v44);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_77:
        if (!v27)
          return 1;
        goto LABEL_78;
      }
    }
  }
  return result;
}

uint64_t sub_22EF22958(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;

  result = sub_22EF2243C(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(a2 + 97) & 8) != 0 && *(_BYTE *)(a1 + 72))
      return 1;
    v5 = (unsigned __int8 *)sub_22EFBC5B4(a2);
    result = sub_22EF13860(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EF229C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if ((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == 0 || (result = sub_22EF20EF4(a1), (_DWORD)result))
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EF2219C(a1, v5 & 0xFFFFFFFFFFFFFFF0);
    else
      return 1;
  }
  return result;
}

BOOL sub_22EF22A20(uint64_t a1, __int128 *a2)
{
  int v2;
  unsigned int *v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  char v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v16 = v18;
    v17 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v16, v6);
    v14 = 5;
    v15 = *a2;
    if (sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
    }
    v7 = (char *)v16;
    if ((_DWORD)v17)
    {
      v8 = 24 * v17;
      do
      {
        sub_22E5EFB0C((uint64_t)&v7[v8 - 24], *(char **)&v7[v8 - 16]);
        v8 -= 24;
      }
      while (v8);
      v7 = (char *)v16;
    }
    if (v7 != (char *)v18)
      free(v7);
    return 1;
  }
  v9 = *(unsigned int **)(a1 + 16);
  v16 = v18;
  v17 = 0x100000000;
  if (v9[2])
    sub_22EEF4FFC((uint64_t)&v16, v9);
  v14 = 5;
  v15 = *a2;
  v10 = sub_22F35A7A4(*(_QWORD *)a1, &v14, *(_QWORD *)(a1 + 8), (uint64_t)&v16);
  v11 = v10;
  if (v10)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v16, (const void ***)v16 + 3 * v17);
  }
  v12 = (char *)v16;
  if ((_DWORD)v17)
  {
    v13 = 24 * v17;
    do
    {
      sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v16;
  }
  if (v12 != (char *)v18)
    free(v12);
  return (v11 & 1) == 0;
}

uint64_t sub_22EF22C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EF206BC(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EF209EC(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EF22CA4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_DWORD *)(v4 + 16);
  result = 1;
  switch((char)v5)
  {
    case 0:
    case 1:
    case 4:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 29:
    case 32:
    case 36:
    case 37:
    case 38:
    case 39:
    case 54:
    case 55:
    case 56:
      goto LABEL_5;
    case 2:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 32));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 19) & 2) == 0)
        return 1;
      v8 = *(_QWORD *)(v4 + 56);
      if (!v8)
        return 1;
      goto LABEL_19;
    case 3:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 32));
      if (!(_DWORD)result)
        return result;
      v8 = *(_QWORD *)(v4 + 48);
      if (v8)
        goto LABEL_19;
      return 1;
    case 5:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 32));
      if (!(_DWORD)result)
        return result;
      v7 = *(_QWORD *)(v4 + 40);
      return sub_22EF13860(a1, v7, 0);
    case 13:
    case 48:
      v7 = *(_QWORD *)(v4 + 24);
      return sub_22EF13860(a1, v7, 0);
    case 14:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 24));
      if (!(_DWORD)result)
        return result;
      v9 = *(_QWORD *)(v4 + 40);
      if (!v9)
        return 1;
      result = sub_22EF2040C(a1, v9);
      if (!(_DWORD)result)
        return result;
      v10 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v10)
        return 1;
      v11 = v4 + 48;
      v12 = v10 - 1;
      do
      {
        result = sub_22EF23160(a1, v11);
        v13 = v12-- != 0;
        v14 = v13;
        if (!(_DWORD)result)
          break;
        v11 += 24;
      }
      while ((v14 & 1) != 0);
      return result;
    case 15:
      result = sub_22EF20A8C(a1, *(_QWORD *)(v4 + 40));
      if ((_DWORD)result)
        goto LABEL_35;
      return result;
    case 16:
      v15 = *(_QWORD *)(v4 + 40);
      goto LABEL_41;
    case 17:
      v7 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
      return sub_22EF13860(a1, v7, 0);
    case 18:
      return sub_22EF20EF4(a1);
    case 19:
      v15 = *(_QWORD *)(v4 + 40);
      if (!v15)
        goto LABEL_42;
LABEL_41:
      result = sub_22EF13860(a1, v15, 0);
      if (!(_DWORD)result)
        return result;
LABEL_42:
      v6 = *(_QWORD *)(v4 + 48);
      return sub_22EF2219C(a1, v6);
    case 20:
      result = sub_22EF20EF4(a1);
      if (!(_DWORD)result)
        return result;
      v16 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v16)
        return 1;
      v17 = v4 + 48;
      v18 = v16 - 1;
      do
      {
        result = sub_22EF23160(a1, v17);
        v13 = v18-- != 0;
        v19 = v13;
        if (!(_DWORD)result)
          break;
        v17 += 24;
      }
      while ((v19 & 1) != 0);
      return result;
    case 21:
      v20 = *(_QWORD *)(v4 + 48);
      if (!v20)
        goto LABEL_59;
      result = sub_22EF13860(a1, v20, 0);
      if ((_DWORD)result)
        goto LABEL_59;
      return result;
    case 22:
      goto LABEL_75;
    case 23:
      v21 = *(_QWORD *)(v4 + 64);
      if (!v21)
        goto LABEL_5;
      goto LABEL_76;
    case 24:
      if (*(_QWORD *)(v4 + 32))
      {
        result = sub_22EF20EF4(a1);
        if (!(_DWORD)result)
          return result;
      }
LABEL_59:
      v6 = *(_QWORD *)(v4 + 40);
      return sub_22EF2219C(a1, v6);
    case 25:
    case 28:
    case 49:
LABEL_35:
      v6 = *(_QWORD *)(v4 + 24);
      return sub_22EF2219C(a1, v6);
    case 26:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 24));
      if (!(_DWORD)result)
        return result;
      v22 = *(_QWORD *)(v4 + 16);
      v23 = (unsigned __int16)(v22 >> 38);
      if (!(unsigned __int16)(v22 >> 38))
        goto LABEL_66;
      v24 = 8 * v23;
      v25 = (_QWORD *)(v4 + 40);
      do
      {
        if ((sub_22EF2219C(a1, *v25) & 1) == 0)
          return 0;
        ++v25;
        v24 -= 8;
      }
      while (v24);
      v22 = *(_QWORD *)(v4 + 16);
      v23 = (unsigned __int16)(v22 >> 38);
LABEL_66:
      if ((v22 & 0x3C0000000000000) == 0x80000000000000)
      {
        v26 = (_DWORD *)((v4 + 40 + 8 * v23 + 4 * ((v22 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
        v29 = *v26;
        v28 = v26 + 2;
        v27 = v29;
        if (v29)
        {
          v30 = 8 * v27;
          while ((sub_22EF2219C(a1, *v28) & 1) != 0)
          {
            ++v28;
            v30 -= 8;
            if (!v30)
              goto LABEL_71;
          }
          return 0;
        }
      }
LABEL_71:
      v31 = sub_22F257D3C(v4);
      if (v31)
      {
        v8 = v31;
LABEL_19:
        result = sub_22EF13860(a1, v8, 0);
        if (!(_DWORD)result)
          return result;
      }
      return 1;
    case 30:
      v32 = *(_QWORD *)(v4 + 48);
      if (v32)
      {
        result = sub_22EF13860(a1, v32, 0);
        if (!(_DWORD)result)
          return result;
      }
LABEL_75:
      v21 = *(_QWORD *)(v4 + 56);
      if (!v21)
        goto LABEL_5;
LABEL_76:
      result = sub_22EF13860(a1, v21, 0);
      if ((_DWORD)result)
        goto LABEL_5;
      return result;
    case 31:
      v33 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_108;
    case 33:
      v34 = *(_QWORD *)(v4 + 24);
      if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
      {
        result = sub_22EF2219C(a1, v34);
        if (!(_DWORD)result)
          return result;
      }
      v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
      if (!v35)
        return 1;
      v36 = (uint64_t *)(v4 + 48);
      v37 = 8 * v35 - 8;
      do
      {
        v38 = *v36++;
        result = sub_22EF2219C(a1, v38);
        if ((_DWORD)result)
          v39 = v37 == 0;
        else
          v39 = 1;
        v37 -= 8;
      }
      while (!v39);
      return result;
    case 40:
      if ((v5 & 0x100000) == 0)
        goto LABEL_5;
      break;
    case 41:
      while ((v5 & 0x100000) != 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v4)
        {
          v5 = *(_DWORD *)(v4 + 16);
          if ((v5 & 0xFE) == 0x28)
            continue;
        }
        v4 = sub_22F10CF48(v4);
        v5 = *(_DWORD *)(v4 + 16);
      }
      goto LABEL_5;
    case 42:
      v41 = *(_DWORD *)(v4 + 20);
      v47 = *(_QWORD *)(v4 + 40);
      v46[0] = 8;
      v46[1] = v41;
      return sub_22EF23160(a1, (uint64_t)v46);
    case 43:
      v6 = *(_QWORD *)(v4 + 8);
      return sub_22EF2219C(a1, v6);
    case 46:
      result = sub_22EF20A8C(a1, *(_QWORD *)(v4 + 32));
      if (!(_DWORD)result)
        return result;
      v42 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v42)
        return 1;
      v43 = v4 + 40;
      v44 = v42 - 1;
      do
      {
        result = sub_22EF23160(a1, v43);
        v13 = v44-- != 0;
        v45 = v13;
        if (!(_DWORD)result)
          break;
        v43 += 24;
      }
      while ((v45 & 1) != 0);
      return result;
    case 51:
      v33 = *(_QWORD *)(v4 + 24);
LABEL_108:
      result = sub_22EF2219C(a1, v33);
      if ((_DWORD)result)
        goto LABEL_5;
      return result;
    default:
      return result;
  }
  do
  {
    while (1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v4)
        break;
      v40 = *(_DWORD *)(v4 + 16);
      if ((v40 & 0xFE) != 0x28)
        break;
      if ((v40 & 0x100000) == 0)
        goto LABEL_5;
    }
    v4 = sub_22F10CF48(v4);
  }
  while ((*(_DWORD *)(v4 + 16) & 0x100000) != 0);
LABEL_5:
  v6 = *(_QWORD *)(v4 + 32);
  return sub_22EF2219C(a1, v6);
}

uint64_t sub_22EF23160(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EF2219C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EF20A8C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EF13860(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EF23160(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22EF2322C(uint64_t a1, _QWORD *a2)
{
  int v2;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22F37A024(a2);
    v17 = *(_OWORD *)a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return 1;
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22F37A024(a2);
  v17 = *(_OWORD *)a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  return (v13 & 1) == 0;
}

uint64_t sub_22EF23440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  int v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  if (!a2)
    return 1;
  v4 = a2;
  result = 1;
  while (1)
  {
    v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if ((v4 & 0xF) == 0)
      break;
LABEL_4:
    if ((v7 & 0xFFFFFFFFFFFFFFF0) != 0)
      v8 = *(_QWORD *)((char *)&unk_22F49E2A0
                     + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v8 = 1;
    a3 = (a3 + v8 - 1) & -v8;
    v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (!v7)
      return 1;
  }
  switch(*(_BYTE *)(v7 + 16))
  {
    case 0:
    case 1:
    case 0x16:
    case 0x17:
    case 0x36:
      v9 = *(_QWORD *)(v4 + 32);
      if (v9 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v78 = 1;
      v11 = a3 + v78 - 1;
      goto LABEL_159;
    case 2:
    case 3:
    case 4:
    case 5:
      v13 = *(_QWORD *)(v4 + 32);
      if (v13 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v79 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v79 = 1;
      result = sub_22EF209EC(a1, v13, (a3 + v79 + 15) & -v79);
      if (!(_DWORD)result)
        return result;
      v15 = *(_QWORD *)(a3 + 8);
      return sub_22EF13860(a1, v15, 0);
    case 6:
      v9 = *(_QWORD *)(v4 + 32);
      if (v9 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v78 = 1;
      v11 = a3 + v78 + 11;
      goto LABEL_159;
    case 7:
    case 0x25:
      v9 = *(_QWORD *)(v4 + 32);
      if (v9 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v78 = 1;
      v11 = a3 + v78 + 7;
      goto LABEL_159;
    case 8:
      v9 = *(_QWORD *)(v4 + 32);
      if (v9 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v78 = 1;
      v11 = v78 + a3;
      goto LABEL_159;
    case 0xA:
    case 0x20:
    case 0x24:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
      v9 = *(_QWORD *)(v4 + 32);
      goto LABEL_11;
    case 0xC:
    case 0x37:
    case 0x38:
      goto LABEL_43;
    case 0xD:
    case 0x30:
      v15 = *(_QWORD *)(v4 + 24);
      return sub_22EF13860(a1, v15, 0);
    case 0xE:
      result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 24));
      if (!(_DWORD)result)
        return result;
      if (!*(_QWORD *)(v4 + 40))
        return 1;
      result = sub_22EF206BC(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
      if (!(_DWORD)result)
        return result;
      v23 = *(_DWORD *)(a3 + 28);
      v80 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
      v81 = v23;
      sub_22EFC6DC4((uint64_t)&v82, v80);
      result = sub_22EF20740(a1, &v80);
      if (!(_DWORD)result)
        return result;
      v24 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v24)
        return 1;
      v25 = *(_DWORD *)(a1 + 64) + 1;
      v26 = (__int128 *)(v4 + 48);
      v27 = (uint64_t *)(a3 + 56);
      v28 = v24 - 1;
      do
      {
        v29 = *v27++;
        v83 = *v26;
        v84 = *((_QWORD *)v26 + 2);
        v85 = v29;
        *(_DWORD *)(a1 + 64) = v25;
        result = sub_22EF0F0F8(a1, &v83);
        v25 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v25 - 1;
        v30 = v28-- != 0;
        v31 = v30;
        if (!(_DWORD)result)
          break;
        v26 = (__int128 *)((char *)v26 + 24);
      }
      while ((v31 & 1) != 0);
      return result;
    case 0xF:
      result = sub_22EF20A8C(a1, *(_QWORD *)(v4 + 40));
      if (!(_DWORD)result)
        return result;
      v17 = *(_QWORD *)(v4 + 24);
      return sub_22EF2219C(a1, v17);
    case 0x10:
      v32 = *(_QWORD *)(v4 + 40);
      goto LABEL_78;
    case 0x11:
      v15 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
      return sub_22EF13860(a1, v15, 0);
    case 0x12:
      return sub_22EF206BC(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
    case 0x13:
      v32 = *(_QWORD *)(v4 + 40);
      if (!v32)
        goto LABEL_79;
LABEL_78:
      result = sub_22EF13860(a1, v32, 0);
      if (!(_DWORD)result)
        return result;
LABEL_79:
      v17 = *(_QWORD *)(v4 + 48);
      return sub_22EF2219C(a1, v17);
    case 0x14:
      v33 = *(_QWORD *)(a3 + 8);
      if (v33)
      {
        v34 = *(_QWORD *)(v4 + 32);
        if (v34)
        {
          result = sub_22EF206BC(a1, v34, v33);
          if (!(_DWORD)result)
            return result;
        }
      }
      v35 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v35)
        return 1;
      v36 = (__int128 *)(v4 + 48);
      v37 = (uint64_t *)(a3 + 32);
      v38 = *(_DWORD *)(a1 + 64) + 1;
      v39 = v35 - 1;
      do
      {
        v40 = *v37++;
        v83 = *v36;
        v84 = *((_QWORD *)v36 + 2);
        v85 = v40;
        *(_DWORD *)(a1 + 64) = v38;
        result = sub_22EF0F0F8(a1, &v83);
        v38 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v38 - 1;
        v30 = v39-- != 0;
        v41 = v30;
        if (!(_DWORD)result)
          break;
        v36 = (__int128 *)((char *)v36 + 24);
      }
      while ((v41 & 1) != 0);
      return result;
    case 0x15:
      v42 = *(_QWORD *)(v4 + 48);
      if (v42)
      {
        result = sub_22EF13860(a1, v42, 0);
        if (!(_DWORD)result)
          return result;
      }
      v17 = *(_QWORD *)(v4 + 40);
      return sub_22EF2219C(a1, v17);
    case 0x18:
      v43 = *(_QWORD *)(v4 + 32);
      if (v43)
      {
        result = sub_22EF206BC(a1, v43, *(_QWORD *)(a3 + 8));
        if (!(_DWORD)result)
          return result;
      }
      v9 = *(_QWORD *)(v4 + 40);
      if (v9 >= 0x10 && (*(_QWORD *)(v4 + 40) & 0xFLL) == 0)
        goto LABEL_157;
      v78 = 1;
      goto LABEL_158;
    case 0x19:
      *(_QWORD *)&v83 = v4;
      *((_QWORD *)&v83 + 1) = a3;
      v45 = *(_QWORD *)(v4 + 24);
      v46 = sub_22E47EE80(&v83);
      return sub_22EF209EC(a1, v45, v46);
    case 0x1A:
      *(_QWORD *)&v83 = v4;
      *((_QWORD *)&v83 + 1) = a3;
      v47 = *(_QWORD *)(v4 + 24);
      v48 = sub_22E47EE80(&v83);
      result = sub_22EF209EC(a1, v47, v48);
      if (!(_DWORD)result)
        return result;
      v49 = v83;
      v50 = *(_QWORD *)(v83 + 16);
      if (*(_BYTE *)(v83 + 16) == 25 || (v50 & 0x3FFFC000000000) == 0)
        goto LABEL_115;
      v52 = 0;
      v53 = (unsigned __int16)(v50 >> 38);
      break;
    case 0x1C:
      v9 = *(_QWORD *)(v4 + 24);
LABEL_11:
      if (v9 >= 0x10 && (v9 & 0xF) == 0)
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v78 = 1;
      v11 = a3 + v78 + 3;
      goto LABEL_159;
    case 0x1D:
    case 0x1E:
      result = sub_22EF13860(a1, *(_QWORD *)(a3 + 16), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EF13860(a1, *(_QWORD *)(a3 + 24), 0);
      if (!(_DWORD)result)
        return result;
LABEL_43:
      v17 = *(_QWORD *)(v4 + 32);
      return sub_22EF2219C(a1, v17);
    case 0x1F:
      v61 = *(_QWORD **)(a3 + 8);
      if (v61)
      {
        if ((sub_22EF209EC(a1, *v61, v61 + 1) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EF2219C(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      v9 = *(_QWORD *)(v4 + 32);
      v78 = 1;
      if (v9 >= 0x10 && (v9 & 0xF) == 0)
LABEL_157:
        v78 = *(_QWORD *)((char *)&unk_22F49E2A0
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
LABEL_158:
      v11 = a3 + v78 + 15;
LABEL_159:
      v19 = (_QWORD *)(v11 & -v78);
      return sub_22EF209EC(a1, v9, v19);
    case 0x21:
      v62 = *(_QWORD *)(v4 + 24);
      v63 = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0);
      if (v63 != v4)
      {
        v64 = 1;
        if (v62 >= 0x10 && (v62 & 0xF) == 0)
          v64 = *(_QWORD *)((char *)&unk_22F49E2A0
                          + ((uint64_t)((unint64_t)*(unsigned int *)(v63 + 16) << 56) >> 53));
        result = sub_22EF209EC(a1, v62, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v64- 1) & -v64);
        if (!(_DWORD)result)
          return result;
      }
      v65 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
      if (!(_DWORD)v65)
        return 1;
      v66 = (_QWORD *)(a3 + 24);
      v67 = v65 - 1;
      do
      {
        v68 = (_QWORD *)*v66++;
        result = sub_22EF209EC(a1, *v68, v68 + 1);
        v30 = v67-- != 0;
        v69 = v30;
      }
      while ((_DWORD)result && (v69 & 1) != 0);
      return result;
    case 0x2A:
      v70 = *(_DWORD *)(v4 + 20);
      *((_QWORD *)&v83 + 1) = *(_QWORD *)(v4 + 40);
      LODWORD(v83) = 8;
      DWORD1(v83) = v70;
      return sub_22EF23160(a1, (uint64_t)&v83);
    case 0x2B:
      v17 = *(_QWORD *)(v4 + 8);
      return sub_22EF2219C(a1, v17);
    case 0x2E:
      result = sub_22EF20A8C(a1, *(_QWORD *)(v4 + 32));
      if (!(_DWORD)result)
        return result;
      v71 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v71)
        return 1;
      v72 = (__int128 *)(v4 + 40);
      v73 = (uint64_t *)(a3 + 16);
      v74 = *(_DWORD *)(a1 + 64) + 1;
      v75 = v71 - 1;
      do
      {
        v76 = *v73++;
        v83 = *v72;
        v84 = *((_QWORD *)v72 + 2);
        v85 = v76;
        *(_DWORD *)(a1 + 64) = v74;
        result = sub_22EF0F0F8(a1, &v83);
        v74 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v74 - 1;
        v30 = v75-- != 0;
        v77 = v30;
        if (!(_DWORD)result)
          break;
        v72 = (__int128 *)((char *)v72 + 24);
      }
      while ((v77 & 1) != 0);
      return result;
    case 0x31:
    case 0x33:
      v18 = *(unint64_t **)(a3 + 16);
      v20 = *v18;
      v19 = v18 + 1;
      v9 = v20;
      return sub_22EF209EC(a1, v9, v19);
    case 0x39:
      goto LABEL_4;
    default:
      return result;
  }
  do
  {
    v54 = *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * v52 + 16);
    if (v54)
    {
      if ((sub_22EF2040C(a1, v54) & 1) == 0)
        return 0;
    }
    else if (v52 < (unsigned __int16)(*(_QWORD *)(v49 + 16) >> 38))
    {
      result = sub_22EF2219C(a1, *(_QWORD *)(v49 + 40 + 8 * v52));
      if (!(_DWORD)result)
        return result;
    }
    ++v52;
  }
  while (v53 != v52);
  v50 = *(_QWORD *)(v49 + 16);
LABEL_115:
  if ((v50 & 0x3C0000000000000) == 0x80000000000000)
  {
    v55 = (_DWORD *)((v49 + 8 * (unsigned __int16)(v50 >> 38) + 4 * ((v50 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
    v58 = *v55;
    v57 = (unint64_t *)(v55 + 2);
    v56 = v58;
    if (v58)
    {
      v59 = 8 * v56;
      while ((sub_22EF2219C(a1, *v57) & 1) != 0)
      {
        ++v57;
        v59 -= 8;
        if (!v59)
          goto LABEL_120;
      }
      return 0;
    }
  }
LABEL_120:
  v60 = sub_22F257D3C(v49);
  if (!v60)
    return 1;
  result = sub_22EF13860(a1, v60, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL sub_22EF23C04(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  char v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2 || v2 > *(_DWORD *)(a1 + 68))
    return 1;
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v6 = *(unsigned int **)(a1 + 16);
    v18 = v20;
    v19 = 0x100000000;
    if (v6[2])
      sub_22EEF4FFC((uint64_t)&v18, v6);
    v7 = *(_QWORD *)a1;
    v16 = sub_22EF9568C(a2);
    v17 = a2;
    if (sub_22F35A7A4(v7, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18))
    {
      *(_BYTE *)(a1 + 80) = 1;
      sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
    }
    v8 = (char *)v18;
    if ((_DWORD)v19)
    {
      v9 = 24 * v19;
      do
      {
        sub_22E5EFB0C((uint64_t)&v8[v9 - 24], *(char **)&v8[v9 - 16]);
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v18;
    }
    if (v8 != (char *)v20)
      free(v8);
    return 1;
  }
  v10 = *(unsigned int **)(a1 + 16);
  v18 = v20;
  v19 = 0x100000000;
  if (v10[2])
    sub_22EEF4FFC((uint64_t)&v18, v10);
  v11 = *(_QWORD *)a1;
  v16 = sub_22EF9568C(a2);
  v17 = a2;
  v12 = sub_22F35A7A4(v11, &v16, *(_QWORD *)(a1 + 8), (uint64_t)&v18);
  v13 = v12;
  if (v12)
  {
    *(_BYTE *)(a1 + 80) = 1;
    sub_22F35AC28(a1 + 24, (const void ***)v18, (const void ***)v18 + 3 * v19);
  }
  v14 = (char *)v18;
  if ((_DWORD)v19)
  {
    v15 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
      v15 -= 24;
    }
    while (v15);
    v14 = (char *)v18;
  }
  if (v14 != (char *)v20)
    free(v14);
  return (v13 & 1) == 0;
}

void sub_22EF23E10(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22EF23E58()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0);
}

void sub_22EF23E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v2 = *(uint64_t **)(v1 + 40);
  if (v2)
    sub_22EF209EC(v0, *v2, (uint64_t)(v2 + 1));
  sub_22EF23E48();
}

void sub_22EF23E94()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
    JUMPOUT(0x22EF23E5CLL);
  sub_22EF23E48();
}

void sub_22EF23EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EF13860(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EF23E8CLL);
    v6 = *(unsigned __int8 ***)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EF13860(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  sub_22EF23E48();
}

void sub_22EF23FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EF23E8CLL);
    v3 = *(unsigned __int8 ***)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF240DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(unsigned __int8 ***)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EF13860(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EF23FE0);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EF23E8CLL);
    v6 = *(unsigned __int8 ***)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EF13860(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  sub_22EF23E48();
}

void sub_22EF24190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF241C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned __int8 ***)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EF23E8CLL);
    v3 = *(unsigned __int8 ***)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF2424C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EF23E8CLL);
    v3 = *(unsigned __int8 ***)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EF13860(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  sub_22EF23E48();
}

void sub_22EF24298()
{
  JUMPOUT(0x22EF23E78);
}

void sub_22EF242A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  BOOL v18;

  if (sub_22EF13860(v0, *(unsigned __int8 **)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(unsigned __int8 ***)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EF13860(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_32:
      JUMPOUT(0x22EF23FE0);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(unsigned __int8 ***)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EF13860(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_32;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned __int8 ***)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EF13860(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_32;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(unsigned __int8 ***)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EF13860(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_32;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EF23E8CLL);
    v15 = *(unsigned __int8 ***)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EF13860(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  sub_22EF23E48();
}

uint64_t sub_22EF243AC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int **v14;

  v2 = *(_DWORD *)(a1 + 96);
  v3 = *(_DWORD *)(a2 + 96);
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
  {
    v7 = *(_DWORD *)(a1 + 100);
    v8 = *(_DWORD *)(a2 + 100);
    if (v7 >= v8)
    {
      if (v8 < v7)
        return 0;
      if (*(_DWORD *)a1 >= *(_DWORD *)a2)
      {
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
          return 0;
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a2 + 8);
        if (v9 >= v10)
        {
          if (v10 < v9)
            return 0;
          if ((sub_22F359A04((unsigned int *)(a1 + 16), (unsigned int *)(a2 + 16)) & 1) == 0)
          {
            if ((sub_22F359A04((unsigned int *)(a2 + 16), (unsigned int *)(a1 + 16)) & 1) != 0)
              return 0;
            v11 = *(_QWORD *)(a1 + 56);
            v12 = (unsigned int **)(v11 + 24 * *(unsigned int *)(a1 + 64));
            v13 = *(_QWORD *)(a2 + 56);
            v14 = (unsigned int **)(v13 + 24 * *(unsigned int *)(a2 + 64));
            if ((sub_22EF244B4(v11, v12, v13, (uint64_t)v14) & 1) == 0)
            {
              sub_22EF244B4(v13, v14, v11, (uint64_t)v12);
              return 0;
            }
          }
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_22EF244B4(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unsigned int **v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  char v12;
  uint64_t result;
  BOOL v14;

  if (a3 == a4)
    return 0;
  v6 = (unsigned int **)a1;
  v7 = (unsigned int *)(a1 + 8);
  v8 = a3 + 24;
  v9 = (unsigned int *)(a3 + 8);
  while (v6 != a2)
  {
    v10 = *v6;
    v11 = *(unsigned int **)(v8 - 24);
    if ((sub_22EF24578(*v6, v7, v11, v9) & 1) != 0)
      break;
    v12 = sub_22EF24578(v11, v9, v10, v7);
    result = 0;
    if ((v12 & 1) == 0)
    {
      v6 += 3;
      v7 += 6;
      v9 += 6;
      v14 = v8 == a4;
      v8 += 24;
      if (!v14)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t sub_22EF24578(_QWORD *a1, _QWORD *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v4;
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v9;
  char v10;
  size_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  BOOL v16;
  size_t v17;
  int v18;
  BOOL v19;
  size_t v20;
  size_t v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  unsigned int *v29;
  unsigned int *v30;

  if (a3 == a4)
    return 0;
  v4 = a3;
  while (a1 != a2)
  {
    v6 = *((unsigned __int8 *)v4 + 55);
    if ((v6 & 0x80u) == 0)
      v7 = v4 + 8;
    else
      v7 = (const void *)*((_QWORD *)v4 + 4);
    v8 = *((_QWORD *)v4 + 5);
    if ((v6 & 0x80u) == 0)
      v9 = v6 & 0x7F;
    else
      v9 = *((_QWORD *)v4 + 5);
    v10 = *((_BYTE *)a1 + 55);
    v11 = a1[5];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)a1 + 55);
    else
      v12 = a1[5];
    if (v10 >= 0)
      v13 = a1 + 4;
    else
      v13 = (const void *)a1[4];
    if (v9 >= v12)
      v14 = v12;
    else
      v14 = v9;
    v15 = memcmp(v13, v7, v14);
    v16 = v12 < v9;
    if (v15)
      v16 = v15 < 0;
    if (v16)
      break;
    if ((v6 & 0x80u) != 0)
      v6 = v8;
    if (v12 >= v6)
      v17 = v6;
    else
      v17 = v12;
    v18 = memcmp(v7, v13, v17);
    v19 = v6 < v12;
    if (v18)
      v19 = v18 < 0;
    if (!v19 && (sub_22F359A04((unsigned int *)a1 + 14, v4 + 14) & 1) != 0)
      break;
    if (v10 >= 0)
      v20 = v10 & 0x7F;
    else
      v20 = v11;
    if (v20 >= v6)
      v21 = v6;
    else
      v21 = v20;
    v22 = memcmp(v7, v13, v21);
    v23 = v6 < v20;
    if (v22)
      v23 = v22 < 0;
    if (!v23)
    {
      v24 = memcmp(v13, v7, v17);
      v25 = v12 < v6;
      if (v24)
        v25 = v24 < 0;
      if (v25 || (sub_22F359A04(v4 + 14, (unsigned int *)a1 + 14) & 1) == 0)
      {
        v26 = (_QWORD *)a1[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)a1[2];
            v28 = *v27 == (_QWORD)a1;
            a1 = v27;
          }
          while (!v28);
        }
        v29 = (unsigned int *)*((_QWORD *)v4 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(unsigned int **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (unsigned int *)*((_QWORD *)v4 + 2);
            v28 = *(_QWORD *)v30 == (_QWORD)v4;
            v4 = v30;
          }
          while (!v28);
        }
        a1 = v27;
        v4 = v30;
        if (v30 != a4)
          continue;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_22EF24788(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 102;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_22EF2484C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::StringMapImpl *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t (**v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v19 = 0;
  v4 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 56);
  if (v4 != v5)
  {
    v18 = (llvm::StringMapImpl *)(a1 + 5);
    v8 = a1 + 2;
    v9 = a2 | 4;
    do
    {
      if (v3)
      {
        v10 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v12 = sub_22F359DB0(v18, v10, v11);
        sub_22EF25730(&v19, *v12 + 8);
      }
      v20 = v22;
      v21 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFFBLL;
      a1[3] = v9;
      LODWORD(v23) = 75;
      v24 = (_QWORD *)a2;
      if (sub_22F35A7A4(v4, (unsigned int *)&v23, (uint64_t)a1, (uint64_t)&v20))
      {
        v15 = a1[14];
        v16 = *(_QWORD *)(v4 + 24);
        v23 = &off_24FABA0F0;
        v24 = v8;
        v25 = v15;
        v26 = v16;
        sub_22F35A23C((uint64_t)&v20, (uint64_t)&v23);
      }
      *v8 = 0;
      v8[1] = 0;
      v13 = (char *)v20;
      if ((_DWORD)v21)
      {
        v14 = 24 * v21;
        do
        {
          sub_22E5EFB0C((uint64_t)&v13[v14 - 24], *(char **)&v13[v14 - 16]);
          v14 -= 24;
        }
        while (v14);
        v13 = (char *)v20;
      }
      if (v13 != v22)
        free(v13);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v19, 0);
}

uint64_t *sub_22EF24A04(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::StringMapImpl *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v28 = 0;
  v4 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 80);
  if (v4 != v5)
  {
    v6 = (_OWORD *)a2;
    v26 = (llvm::StringMapImpl *)(a1 + 5);
    v8 = (char *)&v31;
    v9 = a1 + 2;
    v10 = a2 | 6;
    v11 = v33;
    v27 = a1 + 2;
    do
    {
      if ((_DWORD)v3)
      {
        v12 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v14 = sub_22F359DB0(v26, v12, v13);
        sub_22EF25730(&v28, *v14 + 8);
      }
      v29 = v8;
      v30 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFFBLL;
      a1[3] = v10;
      LODWORD(v32) = 5;
      *v11 = *v6;
      if (sub_22F35A7A4(v4, (unsigned int *)&v32, (uint64_t)a1, (uint64_t)&v29))
      {
        v23 = a1[14];
        v24 = *(_QWORD *)(v4 + 24);
        v32 = &off_24FABA0F0;
        v33[0] = v9;
        v33[1] = v23;
        v33[2] = v24;
        sub_22F35A23C((uint64_t)&v29, (uint64_t)&v32);
      }
      *v9 = 0;
      v9[1] = 0;
      v15 = (char *)v29;
      if ((_DWORD)v30)
      {
        v16 = v8;
        v17 = v5;
        v18 = v6;
        v19 = v3;
        v20 = v11;
        v21 = v10;
        v22 = 24 * v30;
        do
        {
          sub_22E5EFB0C((uint64_t)&v15[v22 - 24], *(char **)&v15[v22 - 16]);
          v22 -= 24;
        }
        while (v22);
        v15 = (char *)v29;
        v10 = v21;
        v11 = v20;
        v3 = v19;
        v6 = v18;
        v5 = v17;
        v8 = v16;
        v9 = v27;
      }
      if (v15 != v8)
        free(v15);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v28, 0);
}

uint64_t *sub_22EF24BFC(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::StringMapImpl *v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v28 = 0;
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(v2 + 104);
  if (v4 != v5)
  {
    v6 = (_QWORD *)a2;
    v26 = (llvm::StringMapImpl *)(a1 + 5);
    v8 = (char *)&v31;
    v9 = a1 + 2;
    v10 = a2 | 2;
    v11 = v33;
    do
    {
      if ((_DWORD)v3)
      {
        v12 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v14 = sub_22F359DB0(v26, v12, v13);
        sub_22EF25730(&v28, *v14 + 8);
      }
      v29 = v8;
      v30 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFFBLL;
      a1[3] = v10;
      LODWORD(v32) = sub_22F37A024(v6);
      *v11 = *(_OWORD *)v6;
      if (sub_22F35A7A4(v4, (unsigned int *)&v32, (uint64_t)a1, (uint64_t)&v29))
      {
        v23 = a1[14];
        v24 = *(_QWORD *)(v4 + 24);
        v32 = &off_24FABA0F0;
        v33[0] = v9;
        v33[1] = v23;
        v33[2] = v24;
        sub_22F35A23C((uint64_t)&v29, (uint64_t)&v32);
      }
      *v9 = 0;
      v9[1] = 0;
      v15 = (char *)v29;
      if ((_DWORD)v30)
      {
        v16 = v9;
        v17 = v8;
        v18 = v5;
        v19 = v3;
        v20 = v11;
        v21 = v10;
        v22 = 24 * v30;
        do
        {
          sub_22E5EFB0C((uint64_t)&v15[v22 - 24], *(char **)&v15[v22 - 16]);
          v22 -= 24;
        }
        while (v22);
        v15 = (char *)v29;
        v10 = v21;
        v11 = v20;
        v3 = v19;
        v5 = v18;
        v8 = v17;
        v9 = v16;
        v6 = (_QWORD *)a2;
      }
      if (v15 != v8)
        free(v15);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v28, 0);
}

uint64_t *sub_22EF24DF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  llvm::StringMapImpl *v8;
  _QWORD *v9;
  const void *v10;
  size_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t (**v22)();
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v18 = 0;
  v4 = *(_QWORD *)(v2 + 120);
  v5 = *(_QWORD *)(v2 + 128);
  if (v4 != v5)
  {
    v8 = (llvm::StringMapImpl *)(a1 + 5);
    v9 = a1 + 2;
    do
    {
      if (v3)
      {
        v10 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v12 = sub_22F359DB0(v8, v10, v11);
        sub_22EF25730(&v18, *v12 + 8);
      }
      v19 = v21;
      v20 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) | 4;
      a1[3] = a2;
      LODWORD(v22) = 74;
      v23 = a2;
      if (sub_22F35A7A4(v4, (unsigned int *)&v22, (uint64_t)a1, (uint64_t)&v19))
      {
        v15 = a1[14];
        v16 = *(_QWORD *)(v4 + 24);
        v22 = &off_24FABA0F0;
        v23 = v9;
        v24 = v15;
        v25 = v16;
        sub_22F35A23C((uint64_t)&v19, (uint64_t)&v22);
      }
      *v9 = 0;
      v9[1] = 0;
      v13 = (char *)v19;
      if ((_DWORD)v20)
      {
        v14 = 24 * v20;
        do
        {
          sub_22E5EFB0C((uint64_t)&v13[v14 - 24], *(char **)&v13[v14 - 16]);
          v14 -= 24;
        }
        while (v14);
        v13 = (char *)v19;
      }
      if (v13 != v21)
        free(v13);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v18, 0);
}

uint64_t *sub_22EF24FA8(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t *v14;
  __int128 v15;
  char *v16;
  _OWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::StringMapImpl *v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v29 = 0;
  v4 = *(_QWORD *)(v2 + 144);
  v5 = *(_QWORD *)(v2 + 152);
  if (v4 != v5)
  {
    v6 = (_OWORD *)a2;
    v27 = (llvm::StringMapImpl *)(a1 + 5);
    v8 = (char *)&v32;
    v9 = a1 + 2;
    v10 = a2 | 2;
    v11 = v34;
    do
    {
      if ((_DWORD)v3)
      {
        v12 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v14 = sub_22F359DB0(v27, v12, v13);
        sub_22EF25730(&v29, *v14 + 8);
      }
      v30 = v8;
      v31 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) | 4;
      a1[3] = v10;
      LODWORD(v33) = 2;
      v15 = v6[1];
      *v11 = *v6;
      v11[1] = v15;
      if (sub_22F35A7A4(v4, (unsigned int *)&v33, (uint64_t)a1, (uint64_t)&v30))
      {
        v24 = a1[14];
        v25 = *(_QWORD *)(v4 + 24);
        v33 = &off_24FABA0F0;
        v34[0] = v9;
        v34[1] = v24;
        v34[2] = v25;
        sub_22F35A23C((uint64_t)&v30, (uint64_t)&v33);
      }
      *v9 = 0;
      v9[1] = 0;
      v16 = (char *)v30;
      if ((_DWORD)v31)
      {
        v17 = v11;
        v18 = v9;
        v19 = v8;
        v20 = v5;
        v21 = v3;
        v22 = v10;
        v23 = 24 * v31;
        do
        {
          sub_22E5EFB0C((uint64_t)&v16[v23 - 24], *(char **)&v16[v23 - 16]);
          v23 -= 24;
        }
        while (v23);
        v16 = (char *)v30;
        v10 = v22;
        v3 = v21;
        v5 = v20;
        v8 = v19;
        v9 = v18;
        v11 = v17;
        v6 = (_OWORD *)a2;
      }
      if (v16 != v8)
        free(v16);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v29, 0);
}

uint64_t *sub_22EF251A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::StringMapImpl *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t (**v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = a1[9];
  v3 = *(unsigned __int8 *)(a1[13] + 8);
  v19 = 0;
  v4 = *(_QWORD *)(v2 + 168);
  v5 = *(_QWORD *)(v2 + 176);
  if (v4 != v5)
  {
    v18 = (llvm::StringMapImpl *)(a1 + 5);
    v8 = a1 + 2;
    v9 = a2 | 4;
    do
    {
      if (v3)
      {
        v10 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24));
        v12 = sub_22F359DB0(v18, v10, v11);
        sub_22EF25730(&v19, *v12 + 8);
      }
      v20 = v22;
      v21 = 0x100000000;
      a1[2] = *(_QWORD *)(v4 + 24) | 4;
      a1[3] = v9;
      LODWORD(v23) = sub_22EF9568C(a2);
      v24 = (_QWORD *)a2;
      if (sub_22F35A7A4(v4, (unsigned int *)&v23, (uint64_t)a1, (uint64_t)&v20))
      {
        v15 = a1[14];
        v16 = *(_QWORD *)(v4 + 24);
        v23 = &off_24FABA0F0;
        v24 = v8;
        v25 = v15;
        v26 = v16;
        sub_22F35A23C((uint64_t)&v20, (uint64_t)&v23);
      }
      *v8 = 0;
      v8[1] = 0;
      v13 = (char *)v20;
      if ((_DWORD)v21)
      {
        v14 = 24 * v21;
        do
        {
          sub_22E5EFB0C((uint64_t)&v13[v14 - 24], *(char **)&v13[v14 - 16]);
          v14 -= 24;
        }
        while (v14);
        v13 = (char *)v20;
      }
      if (v13 != v22)
        free(v13);
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_22EF25730(&v19, 0);
}

void sub_22EF25358(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  _QWORD v62[5];
  void *v63;
  uint64_t v64;
  _QWORD v65[5];

  v65[3] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a1 + 80;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(unsigned int *)(a1 + 96);
  v7 = sub_22F2B2548(v5, v6, *a2);
  if ((int *)(v5 + 32 * v6) == v7)
  {
    LODWORD(v63) = v3;
    v32 = sub_22F359AD0(v4, (int *)&v63);
    v8 = v32 + 2;
    v33 = *(_QWORD **)(a1 + 72);
    v34 = v33[1] - *v33;
    if ((v34 & 0x1FFFFFFFE0) != 0)
    {
      v35 = v32;
      v36 = 0;
      v37 = (v34 >> 5);
      v55 = v37;
      v57 = *(_QWORD **)(a1 + 72);
      do
      {
        if (v3)
        {
          v38 = *(_DWORD *)(*v33 + 32 * v36 + 8);
          if (v38)
          {
            v39 = v3;
            if (v38 != v3)
            {
              v39 = v3;
              do
                v39 = dword_24FABB2A0[4 * v39];
              while (v39 != v38 && v39 != 0);
            }
            if (v39 == v38)
            {
              v42 = (unsigned __int16 *)v35[2];
              v41 = v35[3];
              if ((unint64_t)v42 >= v41)
              {
                v44 = *(unsigned __int16 **)v8;
                v45 = (uint64_t)v42 - *(_QWORD *)v8;
                if (v45 <= -3)
                  abort();
                v46 = v45 >> 1;
                v47 = v41 - (_QWORD)v44;
                if (v47 <= (v45 >> 1) + 1)
                  v48 = v46 + 1;
                else
                  v48 = v47;
                v49 = v47 >= 0x7FFFFFFFFFFFFFFELL;
                v50 = 0x7FFFFFFFFFFFFFFFLL;
                if (!v49)
                  v50 = v48;
                v59 = v50;
                if (v50)
                {
                  if (v50 < 0)
                    sub_22E3B3F8C();
                  v51 = (char *)operator new(2 * v50);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[2 * v46];
                *(_WORD *)v52 = v36;
                v43 = v52 + 2;
                if (v42 == v44)
                {
                  v53 = v59;
                }
                else
                {
                  v53 = v59;
                  do
                  {
                    v54 = *--v42;
                    *((_WORD *)v52 - 1) = v54;
                    v52 -= 2;
                  }
                  while (v42 != v44);
                }
                v35[1] = v52;
                v35[2] = v43;
                v35[3] = &v51[2 * v53];
                if (v44)
                  operator delete(v44);
                v37 = v55;
                v33 = v57;
              }
              else
              {
                *v42 = v36;
                v43 = v42 + 1;
              }
              v35[2] = v43;
            }
          }
        }
        ++v36;
      }
      while (v36 != v37);
    }
  }
  else
  {
    v8 = v7 + 2;
  }
  v9 = *(unsigned __int16 **)v8;
  v10 = (unsigned __int16 *)*((_QWORD *)v8 + 1);
  if (*(unsigned __int16 **)v8 != v10)
  {
    v58 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 104) + 8);
    v61 = 0;
    v56 = *(uint64_t **)(a1 + 72);
    do
    {
      v11 = *v9;
      v12 = *v56;
      v13 = *v56 + 32 * v11;
      if (v58)
      {
        v14 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24));
        v16 = sub_22F359DB0((llvm::StringMapImpl *)(a1 + 40), v14, v15);
        sub_22EF25730(&v61, *v16 + 8);
      }
      v63 = v65;
      v64 = 0x100000000;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 16) + 24))(*(_QWORD *)(v13 + 16));
      v19 = sub_22F365534(v17);
      v20 = v19;
      v21 = *(_DWORD *)(v19 + 8);
      if ((v18 & 0xFF00000000) != 0)
        *(_DWORD *)(v19 + 8) = v18;
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v23 = sub_22F365534(v22);
      sub_22EFECD0C(v23, a2, (uint64_t)v62);
      v24 = sub_22F359EAC((unsigned int *)v62, a2);
      *(_DWORD *)(v20 + 8) = v21;
      if (v24)
      {
        v27 = v12 + 32 * v11;
        v29 = *(_QWORD *)(v27 + 24);
        v28 = (uint64_t *)(v27 + 24);
        *(_QWORD *)(a1 + 16) = v29 | 4;
        *(_QWORD *)(a1 + 24) = (unint64_t)a2 | 6;
        if (sub_22F35A7A4(v13, a2, a1, (uint64_t)&v63))
        {
          v30 = *(_QWORD *)(a1 + 112);
          v31 = *v28;
          v62[0] = &off_24FABA0F0;
          v62[1] = a1 + 16;
          v62[2] = v30;
          v62[3] = v31;
          sub_22F35A23C((uint64_t)&v63, (uint64_t)v62);
        }
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      v25 = (char *)v63;
      if ((_DWORD)v64)
      {
        v26 = 24 * v64;
        do
        {
          sub_22E5EFB0C((uint64_t)&v25[v26 - 24], *(char **)&v25[v26 - 16]);
          v26 -= 24;
        }
        while (v26);
        v25 = (char *)v63;
      }
      if (v25 != (char *)v65)
        free(v25);
      ++v9;
    }
    while (v9 != v10);
    sub_22EF25730(&v61, 0);
  }
}

uint64_t *sub_22EF25730(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  float64x2_t v5;
  double v6;
  int64x2_t v7;

  if (*result != a2)
  {
    v3 = result;
    result = (uint64_t *)llvm::TimeRecord::getCurrentTime((llvm::TimeRecord *)1);
    v4 = *v3;
    if (*v3)
    {
      *(float64x2_t *)v4 = vaddq_f64(v5, *(float64x2_t *)v4);
      *(double *)(v4 + 16) = v6 + *(double *)(v4 + 16);
      *(int64x2_t *)(v4 + 24) = vaddq_s64(*(int64x2_t *)(v4 + 24), v7);
    }
    if (a2)
    {
      *(float64x2_t *)a2 = vsubq_f64(*(float64x2_t *)a2, v5);
      *(double *)(a2 + 16) = *(double *)(a2 + 16) - v6;
      *(int64x2_t *)(a2 + 24) = vsubq_s64(*(int64x2_t *)(a2 + 24), v7);
    }
    *v3 = a2;
  }
  return result;
}

_DWORD *sub_22EF257E4(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F359CD8(a1, v4, &v4[8 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(32 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = 0;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22EF258A0()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22EF258B4(uint64_t a1, const void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  v6 = sub_22F365534(v4);
  v7 = v6;
  v8 = *(_DWORD *)(v6 + 8);
  if ((v5 & 0xFF00000000) != 0)
    *(_DWORD *)(v6 + 8) = v5;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v9 + 16) = a2;
  v12 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v12 + 8);
  sub_22EEF5424((uint64_t)v14, a2);
  v13 = *(_QWORD *)(v10 + 1992);
  v16 = v10;
  v17 = v13;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v14);
  sub_22E5EFB0C((uint64_t)v14, v15);
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v7 + 8) = v8;
}

uint64_t *sub_22EF25964(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  llvm::StringMapImpl *v9;
  _QWORD *v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t (**v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1[13] + 8);
  v19 = 0;
  if (a3 != a4)
  {
    v6 = a3;
    v9 = (llvm::StringMapImpl *)(a1 + 5);
    v10 = a1 + 2;
    do
    {
      if (v4)
      {
        v11 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24));
        v13 = sub_22F359DB0(v9, v11, v12);
        sub_22EF25730(&v19, *v13 + 8);
      }
      v20 = v22;
      v21 = 0x100000000;
      a1[2] = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFFBLL;
      a1[3] = a2;
      LODWORD(v23) = 6;
      v24 = (_QWORD *)*a2;
      if (sub_22F35A7A4(v6, (unsigned int *)&v23, (uint64_t)a1, (uint64_t)&v20))
      {
        v16 = a1[14];
        v17 = *(_QWORD *)(v6 + 24);
        v23 = &off_24FABA0F0;
        v24 = v10;
        v25 = v16;
        v26 = v17;
        sub_22F35A23C((uint64_t)&v20, (uint64_t)&v23);
      }
      *v10 = 0;
      v10[1] = 0;
      v14 = (char *)v20;
      if ((_DWORD)v21)
      {
        v15 = 24 * v21;
        do
        {
          sub_22E5EFB0C((uint64_t)&v14[v15 - 24], *(char **)&v14[v15 - 16]);
          v15 -= 24;
        }
        while (v15);
        v14 = (char *)v20;
      }
      if (v14 != v22)
        free(v14);
      v6 += 32;
    }
    while (v6 != a4);
  }
  return sub_22EF25730(&v19, 0);
}

char *sub_22EF25B18(void **a1, uint64_t a2, uint64_t *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 59)
    sub_22E3B3F8C();
  v12 = (char *)operator new(32 * v9);
  v13 = &v12[32 * v5];
  *(_QWORD *)v13 = *(_QWORD *)a2;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v15 = *a3;
  *((_QWORD *)v13 + 2) = v14;
  *((_QWORD *)v13 + 3) = v15;
  v16 = v13 + 32;
  while (v3 != v4)
  {
    v17 = *((_QWORD *)v3 - 4);
    v3 -= 32;
    v18 = *((_DWORD *)v3 + 2);
    *((_QWORD *)v13 - 4) = v17;
    v13 -= 32;
    *((_DWORD *)v13 + 2) = v18;
    *((_OWORD *)v13 + 1) = *((_OWORD *)v3 + 1);
    *((_QWORD *)v3 + 2) = 0;
  }
  v19 = (char *)*a1;
  v20 = (char *)a1[1];
  *a1 = v13;
  a1[1] = v16;
  a1[2] = &v12[32 * v9];
  while (v20 != v19)
  {
    v21 = (unsigned int *)*((_QWORD *)v20 - 2);
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
    }
    v20 -= 32;
  }
  if (v19)
    operator delete(v19);
  return v16;
}

char *sub_22EF25C54(char **a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v10 = a1[2] - v3;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 59)
      sub_22E3B3F8C();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v5];
  *(_QWORD *)v13 = *(_QWORD *)a2;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v13 + 2) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v3 = *a1;
    v4 = a1[1];
  }
  v17 = &v12[32 * v11];
  *((_QWORD *)v13 + 3) = *a3;
  v18 = v13 + 32;
  if (v4 == v3)
  {
    *a1 = v13;
    a1[1] = v18;
    a1[2] = v17;
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v4 - 4);
      v4 -= 32;
      v20 = *((_DWORD *)v4 + 2);
      *((_QWORD *)v13 - 4) = v19;
      v13 -= 32;
      *((_DWORD *)v13 + 2) = v20;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v4 + 1);
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v3);
    v3 = *a1;
    v21 = a1[1];
    *a1 = v13;
    a1[1] = v18;
    a1[2] = v17;
    while (v21 != v3)
    {
      v22 = (unsigned int *)*((_QWORD *)v21 - 2);
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
      }
      v21 -= 32;
    }
  }
  if (v3)
    operator delete(v3);
  return v18;
}

unsigned int **sub_22EF25DC4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22EF25E14()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EF25E28()
{
  return 1;
}

uint64_t sub_22EF25E30(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = off_24FABA180;
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22EF25E98(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = off_24FABA180;
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EF25F10(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  void *v11;
  char v12;
  int v13;
  void *v14;
  size_t v15;
  size_t v16;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if ((_DWORD)v7)
  {
    v11 = *(void **)(a1 + 16);
    v10 = a1 + 16;
    v9 = v11;
    v12 = *(_BYTE *)(v10 + 23);
    v13 = v12;
    if (v12 >= 0)
      v14 = (void *)v10;
    else
      v14 = v9;
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v16 = v15;
    else
      v16 = *(_QWORD *)(v10 + 8);
    sub_22F35ACC0(a4, v14, v16, a2);
  }
  return v7;
}

uint64_t sub_22EF25F88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
}

void sub_22EF25F98(uint64_t a1, void *__src, size_t __len, __int128 *a4)
{
  void *v8;
  size_t v9;
  size_t v10;
  void **v11;
  _OWORD *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  void *__p[2];
  unint64_t v20;
  uint64_t v21;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __p[1] = (void *)__len;
    v20 = v10 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v20) = __len;
  v8 = __p;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  v11 = (void **)sub_22E5EFEFC(a1, &v21, (const void **)__p);
  v12 = *v11;
  if (!*v11)
  {
    v13 = v11;
    v12 = operator new(0x60uLL);
    v12[2] = *(_OWORD *)__p;
    *((_QWORD *)v12 + 6) = v20;
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    *(_OWORD *)((char *)v12 + 56) = 0u;
    *(_OWORD *)((char *)v12 + 72) = 0u;
    *((_QWORD *)v12 + 11) = 0;
    v14 = v21;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v14;
    *v13 = v12;
    v15 = **(_QWORD **)a1;
    v16 = (uint64_t *)v12;
    if (v15)
    {
      *(_QWORD *)a1 = v15;
      v16 = (uint64_t *)*v13;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v16);
    ++*(_QWORD *)(a1 + 16);
  }
  v17 = *a4;
  v18 = a4[1];
  *((_QWORD *)v12 + 11) = *((_QWORD *)a4 + 4);
  *(_OWORD *)((char *)v12 + 72) = v18;
  *(_OWORD *)((char *)v12 + 56) = v17;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

unint64_t sub_22EF260F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F34F048(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F34F048(a1);
    }
  }
  return v2;
}

uint64_t sub_22EF2615C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA1B0;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return a1;
}

uint64_t sub_22EF261A0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA1B0;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C4037ACD87BLL);
}

uint64_t sub_22EF261F8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24) - v4;
  if (!v5)
    return 1;
  v9 = 24 * (v5 / 24) - 24;
  do
  {
    result = sub_22F35A96C(v4, a2, a3, a4);
    if (!(_DWORD)result)
      break;
    v4 += 24;
    v11 = v9;
    v9 -= 24;
  }
  while (v11);
  return result;
}

uint64_t sub_22EF2628C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA1E0;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return a1;
}

uint64_t sub_22EF262D0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA1E0;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C4037ACD87BLL);
}

uint64_t sub_22EF26328(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 == v4)
    return 0;
  while (1)
  {
    v14 = v16;
    v15 = 0x100000000;
    if (a4[2])
      sub_22EEF4FFC((uint64_t)&v14, a4);
    if (sub_22F35A7A4(v4, a2, a3, (uint64_t)&v14))
      break;
    v9 = (char *)v14;
    if ((_DWORD)v15)
    {
      v10 = 24 * v15;
      do
      {
        sub_22E5EFB0C((uint64_t)&v9[v10 - 24], *(char **)&v9[v10 - 16]);
        v10 -= 24;
      }
      while (v10);
      v9 = (char *)v14;
    }
    if (v9 != (char *)v16)
      free(v9);
    v4 += 24;
    if (v4 == v5)
      return 0;
  }
  sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v14);
  v12 = (char *)v14;
  if ((_DWORD)v15)
  {
    v13 = 24 * v15;
    do
    {
      sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v14;
  }
  if (v12 != (char *)v16)
    free(v12);
  return 1;
}

uint64_t sub_22EF26494(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA210;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return a1;
}

uint64_t sub_22EF264D8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA210;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C4037ACD87BLL);
}

uint64_t sub_22EF26530(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  char v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];
  void *v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v18 = v20;
  v19 = 0x100000000;
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v15 = v17;
      v16 = 0x100000000;
      if (a4[2])
        sub_22EEF4FFC((uint64_t)&v15, a4);
      if (sub_22F35A7A4(v5, a2, a3, (uint64_t)&v15))
      {
        sub_22F35AC28((uint64_t)&v18, (const void ***)v15, (const void ***)v15 + 3 * v16);
        v9 = 1;
      }
      v10 = (char *)v15;
      if ((_DWORD)v16)
      {
        v11 = 24 * v16;
        do
        {
          sub_22E5EFB0C((uint64_t)&v10[v11 - 24], *(char **)&v10[v11 - 16]);
          v11 -= 24;
        }
        while (v11);
        v10 = (char *)v15;
      }
      if (v10 != v17)
        free(v10);
      v5 += 24;
    }
    while (v5 != v6);
  }
  sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v18);
  v12 = (char *)v18;
  if ((_DWORD)v19)
  {
    v13 = 24 * v19;
    do
    {
      sub_22E5EFB0C((uint64_t)&v12[v13 - 24], *(char **)&v12[v13 - 16]);
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v18;
  }
  if (v12 != (char *)v20)
    free(v12);
  return v9 & 1;
}

uint64_t sub_22EF266D8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA240;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return a1;
}

uint64_t sub_22EF2671C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA240;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C4037ACD87BLL);
}

BOOL sub_22EF26774(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24) - v4;
  if (v5 == 24)
  {
    v12 = v14;
    v13 = 0x100000000;
    if (a4[2])
      sub_22EEF4FFC((uint64_t)&v12, a4);
    if (sub_22F35A7A4(v4, a2, a3, (uint64_t)&v12))
      sub_22EF0E1E4((uint64_t)a4, (uint64_t)&v12);
    v10 = (char *)v12;
    if ((_DWORD)v13)
    {
      v11 = 24 * v13;
      do
      {
        sub_22E5EFB0C((uint64_t)&v10[v11 - 24], *(char **)&v10[v11 - 16]);
        v11 -= 24;
      }
      while (v11);
      v10 = (char *)v12;
    }
    if (v10 != (char *)v14)
      free(v10);
  }
  return v5 == 24;
}

uint64_t sub_22EF26888(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA270;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return a1;
}

uint64_t sub_22EF268CC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FABA270;
  v3 = (void **)(a1 + 16);
  sub_22EEE8494(&v3);
  return MEMORY[0x2348A0E9C](a1, 0x10A1C4037ACD87BLL);
}

uint64_t sub_22EF26924(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) - v4 != 24)
    return 0;
  v12 = v14;
  v13 = 0x100000000;
  if (a4[2])
    sub_22EEF4FFC((uint64_t)&v12, a4);
  v9 = sub_22F35A7A4(v4, a2, a3, (uint64_t)&v12);
  v10 = (char *)v12;
  if ((_DWORD)v13)
  {
    v11 = 24 * v13;
    do
    {
      sub_22E5EFB0C((uint64_t)&v10[v11 - 24], *(char **)&v10[v11 - 16]);
      v11 -= 24;
    }
    while (v11);
    v10 = (char *)v12;
  }
  v5 = v9 ^ 1u;
  if (v10 != (char *)v14)
    free(v10);
  return v5;
}

uint64_t sub_22EF26A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE **v10;
  _BYTE **v11;
  _BYTE **v12;
  _BYTE **v14;
  _BYTE **v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(a1 + 72);
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (*(_DWORD *)(a1 + 64))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(_QWORD **)(a1 + 56);
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 56);
    }
  }
  else
  {
LABEL_6:
    v6 = (_QWORD *)(v2 + 16 * v3);
  }
  v7 = (_QWORD *)(v2 + 16 * v3);
LABEL_9:
  while (v6 != v7)
  {
    v8 = v6[1];
    if ((v8 & 4) != 0 && (v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v10 = sub_22F3619F8((_BYTE **)(v8 & 0xFFFFFFFFFFFFFFF8));
      MEMORY[0x2348A0E9C](v10, 0x20C4093837F09);
    }
    v9 = v6 + 2;
    v6 = v4;
    if (v9 != v4)
    {
      v6 = v9;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        if (v6 == v4)
        {
          v6 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  v11 = *(_BYTE ***)(a1 + 32);
  if (v11)
  {
    v14 = sub_22F3619F8(v11);
    MEMORY[0x2348A0E9C](v14, 0x20C4093837F09);
  }
  v12 = *(_BYTE ***)(a1 + 40);
  if (v12)
  {
    v15 = sub_22F3619F8(v12);
    MEMORY[0x2348A0E9C](v15, 0x20C4093837F09);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  return a1;
}

void sub_22EF26B60(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  const llvm::MemoryBuffer *v17;
  const llvm::MemoryBuffer *v18;
  __int16 v19;
  const llvm::MemoryBuffer *v20;
  _BYTE v21[72];
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD v28[4];
  char v29;
  _QWORD v30[7];
  void *v31;
  __int128 v32;
  _QWORD v33[129];

  v33[128] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 88);
  do
  {
    v7 = (uint64_t *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    if ((v8 & 2) == 0)
      break;
    v6 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v6);
  v9 = *v7;
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v30[0] = &off_24FABA2A0;
  v30[3] = "Loading API notes from ";
  v30[4] = 23;
  v30[5] = v7 + 4;
  v30[6] = v9;
  v10 = sub_22F1E170C(*a2, *(_QWORD *)(a3 + 88), 0, 0, 0, 0);
  sub_22E490D40((_QWORD *)*a2, v10, 0, v28);
  if (!v29)
  {
    *a1 = 0;
    goto LABEL_6;
  }
  v31 = v33;
  v32 = xmmword_22F455C90;
  v11 = *(_QWORD *)(*a2 + 8);
  v22[0] = *a2;
  v22[1] = v11;
  v22[2] = 0x7600000001;
  v23 = 97;
  v25 = 0;
  v26 = 0;
  v24 = a3;
  v27 = 0;
  sub_22F242C48((uint64_t)v21, (uint64_t)&v31);
  v12 = v28[0];
  v13 = v28[1];
  v14 = sub_22E6155EC((_QWORD *)*a2, v10);
  v15 = sub_22F3626D0(v12, v13, v14, (llvm::raw_ostream *)v21, (uint64_t (*)(llvm *))sub_22F4245AC, (uint64_t)v22);
  v16 = v15;
  if (v15)
  {
    v17 = 0;
    *a1 = 0;
  }
  else
  {
    v19 = 257;
    llvm::MemoryBuffer::getMemBufferCopy();
    v17 = v20;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v21);
  llvm::deallocate_buffer(v25, (void *)(24 * v27));
  if (v16)
  {
    if (!v17)
      goto LABEL_13;
    goto LABEL_12;
  }
  v18 = v17;
  sub_22F361A5C(&v18, *(uint64_t *)((char *)a2 + 12), *(uint64_t *)((char *)a2 + 20), a1);
  v17 = v18;
  v18 = 0;
  if (v17)
LABEL_12:
    (*(void (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v17 + 8))(v17);
LABEL_13:
  if (v31 != v33)
    free(v31);
LABEL_6:
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v30);
}

BOOL sub_22EF26D90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;

  v8 = a2;
  sub_22EF26B60(&v7, a1, a3);
  v4 = (unint64_t)v7;
  v5 = (uint64_t)(a1 + 7);
  if (v7)
    sub_22F24C2B0(v5, &v8)[1] = v4 | 4;
  else
    sub_22F24C2B0(v5, &v8)[1] = 0;
  return v4 == 0;
}

uint64_t sub_22EF26DF4(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  char v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  const void *v36;
  size_t v37;
  unint64_t v38;
  __int128 *p_dst;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 __dst;
  char *v45;
  uint64_t *v46;
  int *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  __int16 v55;
  char *v56;
  __int128 v57;
  _QWORD v58[17];

  v58[16] = *MEMORY[0x24BDAC8D0];
  v52 = a2;
  v8 = *(_QWORD *)(*a1 + 16);
  v9 = a2;
  do
  {
    v10 = v9;
    v9 = *(_QWORD *)(v9 + 32);
  }
  while (v9);
  v11 = *(_BYTE *)(v10 + 23);
  v12 = v11 < 0;
  v13 = *(_QWORD *)(v10 + 8);
  if (v11 < 0)
    v10 = *(_QWORD *)v10;
  v14 = v11 & 0x7F;
  if (v12)
    v14 = v13;
  v50 = v10;
  v51 = v14;
  if (!a3)
    goto LABEL_32;
  v49 = 0;
  v48 = 0;
  *(_QWORD *)&__dst = a1;
  *((_QWORD *)&__dst + 1) = &v50;
  v45 = &v49;
  v46 = &v52;
  v47 = &v48;
  if ((*(_BYTE *)(a2 + 1344) & 0x10) == 0)
  {
    sub_22EF27284((uint64_t)&__dst, **(_BYTE ***)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), 1);
    if ((*(_WORD *)(v52 + 1344) & 0x4000) == 0)
    {
      for (i = *(_QWORD *)(v52 + 200); i != *(_QWORD *)(v52 + 208); i += 8)
      {
        if ((*(_WORD *)(*(_QWORD *)i + 1344) & 0x4000) != 0)
        {
          sub_22EF27284((uint64_t)&__dst, **(_BYTE ***)(v52 + 40), *(_QWORD *)(*(_QWORD *)(v52 + 40) + 8), 0);
          goto LABEL_31;
        }
      }
    }
    goto LABEL_31;
  }
  v56 = (char *)v58;
  v57 = xmmword_22F44E310;
  v16 = *(_QWORD *)(a2 + 40);
  v18 = *(const void **)v16;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v19 = v57;
    goto LABEL_16;
  }
  v19 = 0;
  if (v17)
  {
LABEL_16:
    memcpy(&v56[v19], v18, v17);
    v19 = v57;
  }
  v20 = v19 + v17;
  *(_QWORD *)&v57 = v20;
  if ((*(_WORD *)(v52 + 1344) & 0x4000) == 0)
  {
    v53[0] = "Headers";
    v55 = 259;
    llvm::sys::path::append();
    sub_22F1D0728(v8, v56, v57, 1, (uint64_t)v53);
    if ((v54 & 1) == 0)
      sub_22EF27284((uint64_t)&__dst, *(_BYTE **)v53[0], *(_QWORD *)(v53[0] + 8), 1);
    v21 = v57;
    if ((_QWORD)v57 != v20)
    {
      if ((unint64_t)v57 <= v20)
      {
        if (*((_QWORD *)&v57 + 1) < (unint64_t)v20)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v21 = v57;
        }
        if (v20 != v21)
          bzero(&v56[v21], v20 - v21);
      }
      *(_QWORD *)&v57 = v20;
    }
  }
  if ((*(_WORD *)(v52 + 1344) & 0x4000) != 0)
  {
LABEL_26:
    v53[0] = "PrivateHeaders";
    v55 = 259;
    llvm::sys::path::append();
    sub_22F1D0728(v8, v56, v57, 1, (uint64_t)v53);
    if ((v54 & 1) == 0)
      sub_22EF27284((uint64_t)&__dst, *(_BYTE **)v53[0], *(_QWORD *)(v53[0] + 8), (*(unsigned __int16 *)(v52 + 1344) >> 14) & 1);
  }
  else
  {
    for (j = *(_QWORD *)(v52 + 200); j != *(_QWORD *)(v52 + 208); j += 8)
    {
      if ((*(_WORD *)(*(_QWORD *)j + 1344) & 0x4000) != 0)
        goto LABEL_26;
    }
  }
  if (v56 != (char *)v58)
    free(v56);
LABEL_31:
  v23 = v48 != 0;
  if (v49)
    return v23;
LABEL_32:
  if (!a5)
    return 0;
  v23 = 24 * a5;
  while (1)
  {
    v24 = *(_BYTE *)(a4 + 23);
    v25 = v24 < 0;
    v26 = v24 >= 0 ? (char *)a4 : *(char **)a4;
    v27 = v24 & 0x7F;
    v28 = v25 ? *(_QWORD *)(a4 + 8) : v27;
    sub_22F1D0728(v8, v26, v28, 1, (uint64_t)&v56);
    if ((BYTE8(v57) & 1) == 0)
    {
      v29 = sub_22F35AEE0(*(_QWORD *)(*a1 + 16), *(_BYTE **)v56, *((_QWORD *)v56 + 1), v50, v51, 1);
      if (v29)
        break;
    }
    a4 += 24;
    v23 -= 24;
    if (!v23)
      return v23;
  }
  v30 = v29;
  sub_22EF26B60((uint64_t **)&__dst, a1, v29);
  v31 = __dst;
  a1[4] = __dst;
  v32 = v31 | a1[5];
  v23 = v32 != 0;
  if (v32)
  {
    v33 = *(_QWORD *)(v30 + 88);
    do
    {
      v34 = (unint64_t *)v33;
      v35 = *(_QWORD *)(v33 + 8);
      if ((v35 & 2) == 0)
        break;
      v33 = v35 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v33);
    v38 = *v34;
    v36 = v34 + 4;
    v37 = v38;
    if (v38 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v37 >= 0x17)
    {
      v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17)
        v41 = v37 | 7;
      v42 = v41 + 1;
      p_dst = (__int128 *)operator new(v41 + 1);
      *((_QWORD *)&__dst + 1) = v37;
      v45 = (char *)(v42 | 0x8000000000000000);
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v45) = v37;
      p_dst = &__dst;
      if (!v37)
        goto LABEL_58;
    }
    memmove(p_dst, v36, v37);
LABEL_58:
    *((_BYTE *)p_dst + v37) = 0;
    v43 = v52 + 176;
    if (*(char *)(v52 + 199) < 0)
      operator delete(*(void **)v43);
    *(_OWORD *)v43 = __dst;
    *(_QWORD *)(v43 + 16) = v45;
  }
  return v23;
}

double sub_22EF27284(uint64_t a1, _BYTE *a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t *v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  void **v15;
  void *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  void *v27;
  size_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  unint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  __int16 v43;

  v4 = a4;
  v6 = *(uint64_t **)a1;
  v7 = sub_22F35AEE0(*(_QWORD *)(**(_QWORD **)a1 + 16), a2, a3, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4);
  if (v7)
  {
    v9 = v7;
    **(_BYTE **)(a1 + 16) = 1;
    if ((v4 & 1) == 0)
    {
      v10 = *(_BYTE *)(v7 + 23);
      v11 = v10;
      v12 = v10 & 0x7F;
      if (v11 >= 0 ? v12 : *(_QWORD *)(v7 + 8))
      {
        v14 = *(_QWORD *)(*v6 + 8);
        v15 = **(void ****)(a1 + 24);
        v16 = (void *)llvm::sys::path::filename();
        v18 = v17;
        v19 = llvm::sys::path::stem();
        if (v20 < 8 || *(_QWORD *)(v19 + v20 - 8) != 0x657461766972705FLL)
        {
          if (((_WORD)v15[168] & 0x40) != 0)
            v21 = 120;
          else
            v21 = 119;
          *(_DWORD *)(v14 + 312) = 0;
          *(_DWORD *)(v14 + 316) = v21;
          if (*(char *)(v14 + 311) < 0)
          {
            **(_BYTE **)(v14 + 288) = 0;
            *(_QWORD *)(v14 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v14 + 288) = 0;
            *(_BYTE *)(v14 + 311) = 0;
          }
          v41 = v14 + 320;
          v42 = v14;
          v43 = 1;
          *(_BYTE *)(v14 + 320) = 0;
          *(_DWORD *)(v14 + 664) = 0;
          v22 = *(unsigned int *)(v14 + 776);
          if ((_DWORD)v22)
          {
            v23 = *(_QWORD *)(v14 + 768);
            v24 = 56 * v22;
            do
            {
              if (*(char *)(v23 + v24 - 9) < 0)
                operator delete(*(void **)(v23 + v24 - 32));
              v24 -= 56;
            }
            while (v24);
          }
          *(_DWORD *)(v14 + 776) = 0;
          v25 = *((_BYTE *)v15 + 23);
          v26 = v25 < 0;
          if (v25 >= 0)
            v27 = v15;
          else
            v27 = *v15;
          v28 = v25 & 0x7F;
          if (v26)
            v29 = (size_t)v15[1];
          else
            v29 = v28;
          sub_22E3B89A8((unsigned __int8 **)&v41, v27, v29);
          sub_22E3B89A8((unsigned __int8 **)&v41, v16, v18);
          sub_22E3BB0B8((uint64_t)&v41);
        }
      }
    }
    sub_22EF26B60((uint64_t **)&v41, v6, v9);
    v6[**(unsigned int **)(a1 + 32) + 4] = v41;
    if (v6[**(unsigned int **)(a1 + 32) + 4])
    {
      v30 = *(_QWORD *)(v9 + 88);
      do
      {
        v31 = (unint64_t *)v30;
        v32 = *(_QWORD *)(v30 + 8);
        if ((v32 & 2) == 0)
          break;
        v30 = v32 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v30);
      v35 = *v31;
      v33 = v31 + 4;
      v34 = v35;
      if (v35 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v34 >= 0x17)
      {
        v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v37 = v34 | 7;
        v38 = v37 + 1;
        v36 = (__int128 *)operator new(v37 + 1);
        *((_QWORD *)&v41 + 1) = v34;
        v42 = v38 | 0x8000000000000000;
        *(_QWORD *)&v41 = v36;
      }
      else
      {
        HIBYTE(v42) = v34;
        v36 = &v41;
        if (!v34)
          goto LABEL_39;
      }
      memmove(v36, v33, v34);
LABEL_39:
      *((_BYTE *)v36 + v34) = 0;
      v39 = **(_QWORD **)(a1 + 24);
      v40 = v39 + 176;
      if (*(char *)(v39 + 199) < 0)
        operator delete(*(void **)v40);
      result = *(double *)&v41;
      *(_OWORD *)v40 = v41;
      *(_QWORD *)(v40 + 16) = v42;
      ++**(_DWORD **)(a1 + 32);
    }
  }
  return result;
}

BOOL sub_22EF27530(uint64_t a1, void *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12[3];
  __int16 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_22F1D07D8(*(_QWORD *)(*(_QWORD *)a1 + 16), a2, a3, 1, 1, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    *(_QWORD *)(v8 + 312) = 0x200000000;
    if (*(char *)(v8 + 311) < 0)
    {
      **(_BYTE **)(v8 + 288) = 0;
      *(_QWORD *)(v8 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 288) = 0;
      *(_BYTE *)(v8 + 311) = 0;
    }
    v12[0] = (uint64_t *)(v8 + 320);
    v12[1] = 0;
    v12[2] = (uint64_t *)v8;
    v13 = 1;
    *(_BYTE *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 664) = 0;
    v9 = *(unsigned int *)(v8 + 776);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v8 + 768);
      v11 = 56 * v9;
      do
      {
        if (*(char *)(v10 + v11 - 9) < 0)
          operator delete(*(void **)(v10 + v11 - 32));
        v11 -= 56;
      }
      while (v11);
    }
    *(_DWORD *)(v8 + 776) = 0;
    sub_22E3B89A8((unsigned __int8 **)v12, a2, a3);
    sub_22E3BB0B8((uint64_t)v12);
    return 0;
  }
  else
  {
    sub_22EF26B60(v12, (uint64_t *)a1, v14);
    v6 = v12[0];
    *(uint64_t **)(a1 + 48) = v12[0];
    return v6 != 0;
  }
}

void sub_22EF2767C(_QWORD **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 v6;
  _BOOL8 v7;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  unint64_t v20;
  const void **v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v29;
  size_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  void **v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  const void *v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  const char *v62;
  __int16 v63;
  void *v64;
  __int128 v65;
  _BYTE v66[128];
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  void **v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = a3 + 16;
  v4 = a1[4];
  v5 = a1[5];
  *(_QWORD *)(a3 + 8) = 0x200000000;
  v6 = v5 != 0;
  if (v4)
    v7 = v6 + 1;
  else
    v7 = v6;
  if (v7)
  {
    sub_22F2633B0(a3, (_BYTE *)a1 + 32, &a1[v7 + 4]);
    return;
  }
  if (*((_BYTE *)a1 + 8))
    v9 = a2 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (a2 < 0)
      a2 = sub_22F1E22F0(*a1, a2);
    v10 = (uint64_t)*a1;
    v11 = a2 & 0x7FFFFFFF;
    v12 = *((_DWORD *)*a1 + 76);
    v13 = v12 + 1;
    if (v12 + 1 > 1)
    {
      if ((v12 & 0x80000000) != 0)
      {
        v15 = -2 - v12;
        v14 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0
                       ? *(_QWORD *)(v10 + 200) + 24 * v15
                       : sub_22F1E1134((uint64_t)*a1, v15, 0));
      }
      else
      {
        v14 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v12);
      }
    }
    else
    {
      v14 = *(_DWORD **)(v10 + 184);
    }
    if ((*v14 & 0x7FFFFFFFu) > v11)
      goto LABEL_18;
    if (v12 == -2
      || (v13 != *(_DWORD *)(v10 + 192)
        ? ((v13 & 0x80000000) != 0
         ? ((v19 = -3 - v12,
             ((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-3 - v12) >> 6)) >> (-3 - v12)) & 1) == 0)
          ? (v18 = (_DWORD *)sub_22F1E1134(v10, v19, 0))
          : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v19)))
         : (v18 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v13)),
           v17 = *v18 & 0x7FFFFFFF)
        : (v17 = *(_DWORD *)(v10 + 216)),
          v17 > v11))
    {
      v16 = *(_DWORD *)(v10 + 304);
      if (!v16)
        return;
    }
    else
    {
LABEL_18:
      v16 = sub_22F1E1EE8(v10, v11);
      if (!v16)
        return;
    }
    v20 = sub_22E6155EC(*a1, v16);
    if (v20)
    {
      v21 = *(const void ***)(v20 + 40);
      v60 = (unint64_t)v21;
      v22 = (uint64_t)(a1 + 7);
      v59 = (*a1)[2];
      v67 = v71;
      v68 = v71;
      v69 = 4;
      v70 = 0;
      v73 = 0x400000000;
      v72 = (void **)v74;
      while (1)
      {
        v64 = 0;
        if (!sub_22F24C318((uint64_t)a1[7], *((_DWORD *)a1 + 18), (uint64_t)v21, &v64)
          || v64 == &a1[7][2 * *((unsigned int *)a1 + 18)])
        {
          break;
        }
        v34 = *((_QWORD *)v64 + 1);
        v21 = (const void **)(v34 & 0xFFFFFFFFFFFFFFF8);
        if ((v34 & 4) != 0 || !v21)
        {
          if ((v34 & 4) != 0 && v21)
          {
            v49 = *(_DWORD *)(a3 + 8);
            if (v49 >= *(_DWORD *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v49 = *(_DWORD *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v49) = v21;
LABEL_79:
            ++*(_DWORD *)(a3 + 8);
            goto LABEL_80;
          }
          goto LABEL_80;
        }
        sub_22F35B294((uint64_t)&v67, (const void **)&v60);
        v60 = (unint64_t)v21;
        v33 = 3;
LABEL_56:
        if (v33 == 2 || !v21)
          goto LABEL_80;
      }
      v21 = (const void **)v60;
      v24 = *(_BYTE **)v60;
      v25 = *(_QWORD *)(v60 + 8);
      v26 = llvm::sys::path::extension();
      if (v27 == 10 && *(_QWORD *)v26 == 0x6F77656D6172662ELL && *(_WORD *)(v26 + 8) == 27506)
      {
        v35 = llvm::sys::path::stem();
        v37 = v36;
        v38 = sub_22F35B058((uint64_t *)a1, v24, v25, v35, v36, 1);
        v39 = sub_22F35B058((uint64_t *)a1, v24, v25, v35, v37, 0);
        if (v38 | v39)
        {
          v54 = (const void *)v39;
          sub_22F24C2B0((uint64_t)(a1 + 7), (uint64_t *)&v60)[1] = 0;
          if ((_DWORD)v73)
          {
            v55 = v72[v73 - 1];
            if (v55 == (const void *)v38)
            {
              sub_22F35B314((uint64_t)&v67);
              v60 = v38;
            }
            else if (v55 == v54)
            {
              sub_22F35B314((uint64_t)&v67);
              v60 = (unint64_t)v54;
            }
          }
          v56 = sub_22F24C2B0((uint64_t)(a1 + 7), (uint64_t *)&v60)[1];
          if ((v56 & 4) != 0)
          {
            v57 = v56 & 0xFFFFFFFFFFFFFFF8;
            if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v58 = *(_DWORD *)(a3 + 8);
              if (v58 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v58 = *(_DWORD *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v58) = v57;
              goto LABEL_79;
            }
          }
LABEL_80:
          v50 = v72;
          if ((_DWORD)v73)
          {
            v51 = v60 & 0xFFFFFFFFFFFFFFFBLL;
            v52 = 8 * v73;
            do
            {
              v53 = *v50++;
              v64 = v53;
              sub_22F24C2B0(v22, (uint64_t *)&v64)[1] = v51;
              v52 -= 8;
            }
            while (v52);
            v50 = v72;
          }
          if (v50 != v74)
            free(v50);
          if (v68 != v67)
            free(v68);
          return;
        }
LABEL_60:
        if (!sub_22F35B294((uint64_t)&v67, (const void **)&v60))
          goto LABEL_89;
        do
        {
          v40 = (char *)llvm::sys::path::parent_path();
          v42 = v41;
          v43 = (_WORD *)llvm::sys::path::stem();
        }
        while (v44 == 2 && *v43 == 11822);
        if (!v42)
        {
LABEL_89:
          v60 = 0;
          goto LABEL_80;
        }
        sub_22F1D0728(v59, v40, v42, 1, (uint64_t)&v64);
        v33 = 0;
        if ((BYTE8(v65) & 1) != 0)
          v21 = 0;
        else
          v21 = (const void **)v64;
        v60 = (unint64_t)v21;
        goto LABEL_56;
      }
      v64 = v66;
      v65 = xmmword_22F44E310;
      v29 = *v21;
      v30 = (size_t)v21[1];
      if (v30 >= 0x81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v31 = v65;
      }
      else
      {
        v31 = 0;
        if (!v30)
        {
LABEL_46:
          *(_QWORD *)&v65 = v31 + v30;
          v61 = "APINotes.";
          v62 = "apinotes";
          v63 = 771;
          llvm::sys::path::append();
          v32 = 1;
          sub_22F1D07D8(v59, v64, v65, 0, 1, (uint64_t)&v61);
          if ((v62 & 1) != 0 || sub_22EF26D90((uint64_t *)a1, (uint64_t)v21, (uint64_t)v61))
          {
            v33 = 0;
          }
          else
          {
            v32 = 0;
            v45 = sub_22F24C2B0((uint64_t)(a1 + 7), (uint64_t *)&v60)[1];
            v33 = 2;
            if ((v45 & 4) != 0)
            {
              v46 = v45 & 0xFFFFFFFFFFFFFFF8;
              if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v47 = *(unsigned int *)(a3 + 8);
                if (v47 >= *(unsigned int *)(a3 + 12))
                {
                  v48 = v46;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v46 = v48;
                  v47 = *(unsigned int *)(a3 + 8);
                }
                v32 = 0;
                *(_QWORD *)(*(_QWORD *)a3 + 8 * v47) = v46;
                ++*(_DWORD *)(a3 + 8);
                v33 = 2;
              }
            }
          }
          if (v64 != v66)
            free(v64);
          if (!v32)
            goto LABEL_56;
          goto LABEL_60;
        }
      }
      memcpy((char *)v64 + v31, v29, v30);
      v31 = v65;
      goto LABEL_46;
    }
  }
}

void sub_22EF27D60(llvm::PrettyStackTraceEntry *a1)
{
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void *sub_22EF27D84(_QWORD *a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  void *result;
  const char *v7;
  size_t v8;

  v4 = (const void *)a1[3];
  v5 = a1[4];
  result = (void *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v5)
    {
      memcpy(result, v4, v5);
      result = (void *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    this = (llvm::raw_ostream *)llvm::raw_ostream::write(this, (const char *)v4);
    result = (void *)*((_QWORD *)this + 4);
  }
  v7 = (const char *)a1[5];
  v8 = a1[6];
  if (v8 > *((_QWORD *)this + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(this, v7);
  if (v8)
  {
    result = memcpy(result, v7, v8);
    *((_QWORD *)this + 4) += v8;
  }
  return result;
}

void sub_22EF27E34(int *a1, int a2, const void *a3, size_t a4, uint64_t a5)
{
  size_t v9;
  void *v10[2];
  int v11;

  v10[0] = &v11;
  v11 = a2;
  v10[1] = (void *)0x100000001;
  sub_22F35C108(a1, (uint64_t)v10);
  if (a4)
  {
    v9 = *(_QWORD *)(a5 + 8);
    if (v9 != a4)
    {
      if (v9 <= a4)
      {
        if (*(_QWORD *)(a5 + 16) < a4)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v9 = *(_QWORD *)(a5 + 8);
        }
        if (a4 != v9)
          bzero((void *)(*(_QWORD *)a5 + v9), a4 - v9);
      }
      *(_QWORD *)(a5 + 8) = a4;
    }
    memcpy(*(void **)a5, a3, a4);
    sub_22F35C1BC(a1, 2u, (_QWORD *)a5);
  }
  if (v10[0] != &v11)
    free(v10[0]);
}

void sub_22EF27F1C()
{
  uint64_t v0;
  uint64_t v1;
  llvm::raw_ostream *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  int i;
  int v15;
  char *v16;
  _QWORD *v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  int v26;
  uint64_t j;
  const void *v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  char v45[4];
  uint64_t v46;
  _QWORD v47[4];
  _QWORD v48[6];
  _QWORD v49[2];
  void *v50;
  void *v51;
  __int128 v52;
  _QWORD v53[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = (llvm::raw_ostream *)v1;
  v3 = v0;
  v53[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 9u, 3u);
  if (!*(_DWORD *)(v3 + 12))
  {
LABEL_2:
    sub_22E7416F4((uint64_t)v2);
    return;
  }
  v51 = v53;
  v52 = xmmword_22F45FB10;
  v44 = 0;
  v47[0] = 0;
  v47[1] = 0;
  v47[2] = v48;
  v47[3] = 0x400000000;
  v48[4] = v49;
  v48[5] = 0;
  v49[0] = 0;
  v49[1] = 0;
  v46 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v50 = v4;
    v5 = *(unsigned int *)(v3 + 8);
    v6 = *(_QWORD **)v3;
    if ((_DWORD)v5)
    {
      while (!*v6 || *v6 == -8)
        ++v6;
    }
    v7 = *(_QWORD *)v3 + 8 * v5;
    if (v6 != (_QWORD *)v7)
    {
      v8 = (_QWORD *)*v6;
      do
      {
        v9 = (unsigned __int8 *)(v8 + 2);
        v10 = *v8;
        v11 = v46;
        ++HIDWORD(v46);
        if (3 * (int)v46 <= (4 * HIDWORD(v46)))
        {
          sub_22E7EF63C((unsigned int *)&v46, (2 * v46));
          v11 = v46;
        }
        v12 = (char *)v50;
        v13 = sub_22E3CD3D4((uint64_t)v47, 40, 3);
        *(_QWORD *)v13 = v9;
        *(_QWORD *)(v13 + 8) = v10;
        *(_QWORD *)(v13 + 16) = v8[1];
        *(_QWORD *)(v13 + 24) = 0;
        for (i = 0; v10; --v10)
        {
          v15 = *v9++;
          i = 33 * i + v15;
        }
        *(_DWORD *)(v13 + 32) = i;
        v16 = &v12[16 * ((v11 - 1) & i)];
        *(_QWORD *)(v13 + 24) = *((_QWORD *)v16 + 1);
        ++*((_DWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v13;
        do
        {
          v17 = (_QWORD *)v6[1];
          ++v6;
          v8 = v17;
          if (v17)
            v18 = v8 + 1 == 0;
          else
            v18 = 1;
        }
        while (v18);
      }
      while (v6 != (_QWORD *)v7);
    }
    sub_22F242C48((uint64_t)v40, (uint64_t)&v51);
    *(_DWORD *)v45 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
    if (HIDWORD(v46) >= 3)
    {
      v21 = ((4 * HIDWORD(v46)) / 6uLL) | ((4 * HIDWORD(v46)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v19 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v19 = 1;
    }
    if (v19 == (_DWORD)v46 || (sub_22E7EF63C((unsigned int *)&v46, v19), (_DWORD)v46))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v50 + 16 * v23;
        v25 = (uint64_t *)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v40[0] + 80))(v40);
          *(_DWORD *)v24 = v26 + (_DWORD)v43 - v41;
          *(_WORD *)v45 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
          for (j = *v25; j; j = *(_QWORD *)(j + 24))
          {
            *(_DWORD *)v45 = *(_DWORD *)(j + 32);
            llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
            *(_WORD *)v45 = *(_QWORD *)(j + 8);
            llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
            *(_WORD *)v45 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
            v28 = *(const void **)j;
            v29 = *(_QWORD *)(j + 8);
            if (v29 <= v42 - (uint64_t)v43)
            {
              if (v29)
              {
                memcpy(v43, v28, *(_QWORD *)(j + 8));
                v43 += v29;
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v40, (const char *)v28);
            }
            *(_DWORD *)v45 = *(_QWORD *)(j + 16) >> 33;
            llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
          }
        }
        ++v23;
      }
      while (v23 < v46);
    }
    v30 = (*(uint64_t (**)(_QWORD *))(v40[0] + 80))(v40);
    v31 = (_DWORD)v43 - v41 + v30;
    v32 = (v31 + 3) & 0x1FFFFFFFCLL;
    v33 = v32 - v31;
    if (v32 != v31)
    {
      v34 = v31 - v32;
      do
      {
        v45[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
      }
      while (!__CFADD__(v34++, 1));
    }
    *(_DWORD *)v45 = v46;
    llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
    *(_DWORD *)v45 = HIDWORD(v46);
    llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
    if ((_DWORD)v46)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        *(_DWORD *)v45 = *(_DWORD *)((char *)v50 + v36);
        llvm::raw_ostream::write((llvm::raw_ostream *)v40, v45);
        ++v37;
        v36 += 16;
      }
      while (v37 < v46);
    }
    v44 = v33 + v31;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v40);
    free(v50);
    sub_22E6188F4((uint64_t)v47);
    sub_22E3B4EF4((uint64_t)v47);
    v38 = sub_22F35DD10((uint64_t)v2);
    *(_DWORD *)(v3 + 64) = 0;
    sub_22F35DE38(v2, v3 + 56, v38, &v44, (uint64_t)&v51);
    if (v51 != v53)
      free(v51);
    goto LABEL_2;
  }
  v39 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF283F4(v39);
}

void sub_22EF283F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  int v57;
  uint64_t j;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  _BYTE *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t k;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t m;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  llvm::raw_ostream *v97;
  uint64_t v98;
  _QWORD v99[2];
  uint64_t v100;
  unint64_t v101;
  _BYTE *v102;
  unsigned int v103;
  char v104[8];
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _BYTE v110[32];
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  __int128 v117;
  _QWORD v118[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v118[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xAu, 3u);
  if (*(_DWORD *)(v3 + 632))
  {
    v97 = (llvm::raw_ostream *)v2;
    v116 = v118;
    v117 = xmmword_22F45FB10;
    v103 = 0;
    v106 = 0;
    v107 = 0;
    v108 = v110;
    v109 = 0x400000000;
    v111 = &v113;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v105 = 64;
    v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
    if (!v4)
      goto LABEL_119;
    v115 = v4;
    v95 = (uint64_t *)(v3 + 624);
    v5 = sub_22F35B82C((uint64_t *)(v3 + 624));
    v96 = v3;
    v7 = *(_QWORD *)(v3 + 624) + 176 * *(unsigned int *)(v3 + 640);
    if (v7 != v5)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        v10 = *(_QWORD *)v8;
        v11 = v105;
        ++HIDWORD(v105);
        if (3 * (int)v105 <= (4 * HIDWORD(v105)))
        {
          sub_22EF2E488((unsigned int *)&v105, (2 * v105));
          v11 = v105;
        }
        v12 = (char *)v115;
        v13 = v11;
        v14 = sub_22E3CD3D4((uint64_t)&v106, 32, 3);
        *(_QWORD *)v14 = v10;
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(v8 + 8);
        *(_QWORD *)(v14 + 16) = 0;
        v99[0] = v10;
        v15 = sub_22F35DF58((int *)v99, (char *)v99 + 4);
        *(_QWORD *)(v14 + 24) = v15;
        v16 = &v12[16 * (v15 & (v13 - 1))];
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v16 + 1);
        ++*((_DWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v14;
        v17 = v8 + 176;
        v8 = v9;
        if (v17 != v9)
        {
          v8 = v17;
          while (1)
          {
            v18 = *(unsigned __int8 *)(v8 + 4);
            if ((*(_DWORD *)v8 != -1 || v18 != 255) && (*(_DWORD *)v8 != -2 || v18 != 254))
              break;
            v8 += 176;
            if (v8 == v9)
            {
              v8 = v9;
              break;
            }
          }
        }
      }
      while (v8 != v7);
    }
    sub_22F242C48((uint64_t)v99, (uint64_t)&v116);
    *(_DWORD *)v104 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    if (HIDWORD(v105) >= 3)
    {
      v20 = ((4 * HIDWORD(v105)) / 6uLL) | ((4 * HIDWORD(v105)) / 3uLL);
      v21 = v20 | (v20 >> 2) | ((v20 | (v20 >> 2)) >> 4);
      v19 = (((v21 | (v21 >> 8)) >> 16) | v21 | (v21 >> 8)) + 1;
    }
    else
    {
      v19 = 1;
    }
    if (v19 == (_DWORD)v105 || (sub_22EF2E488((unsigned int *)&v105, v19), (_DWORD)v105))
    {
      v22 = 0;
      do
      {
        v23 = (char *)v115 + 16 * v22;
        if (*((_QWORD *)v23 + 1))
        {
          v24 = (*(uint64_t (**)(_QWORD *))(v99[0] + 80))(v99);
          *(_DWORD *)v23 = v24 + (_DWORD)v102 - v100;
          *(_WORD *)v104 = *((_DWORD *)v23 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
          for (i = *((_QWORD *)v23 + 1); i; i = *(_QWORD *)(i + 16))
          {
            *(_QWORD *)v104 = *(_QWORD *)(i + 24);
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            *(_WORD *)v104 = 5;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            *(_WORD *)v104 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            v26 = HIDWORD(*(_QWORD *)i);
            *(_DWORD *)v104 = *(_QWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            v104[0] = v26;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            *(_DWORD *)v104 = *(_DWORD *)(i + 8);
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
          }
        }
        ++v22;
      }
      while (v22 < v105);
    }
    v27 = (*(uint64_t (**)(_QWORD *))(v99[0] + 80))(v99);
    v28 = (_DWORD)v102 - v100 + v27;
    v29 = (v28 + 3) & 0x1FFFFFFFCLL;
    v30 = v29 - v28;
    if (v29 != v28)
    {
      v31 = v28 - v29;
      do
      {
        v104[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
        v32 = __CFADD__(v31++, 1);
      }
      while (!v32);
    }
    *(_DWORD *)v104 = v105;
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    *(_DWORD *)v104 = HIDWORD(v105);
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    if ((_DWORD)v105)
    {
      v33 = 0;
      v34 = 0;
      do
      {
        *(_DWORD *)v104 = *(_DWORD *)((char *)v115 + v33);
        llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
        ++v34;
        v33 += 16;
      }
      while (v34 < v105);
    }
    v103 = v30 + v28;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v99);
    free(v115);
    sub_22E6188F4((uint64_t)&v106);
    sub_22E3B4EF4((uint64_t)&v106);
    v35 = sub_22F35DD10((uint64_t)v97);
    *(_DWORD *)(v96 + 64) = 0;
    sub_22F35DE38(v97, v96 + 56, v35, &v103, (uint64_t)&v116);
    if (v116 != v118)
      free(v116);
    v116 = v118;
    v117 = xmmword_22F45FB10;
    v103 = 0;
    v106 = 0;
    v107 = 0;
    v108 = v110;
    v109 = 0x400000000;
    v111 = &v113;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v105 = 64;
    v36 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
    if (!v36)
LABEL_119:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v115 = v36;
    v37 = sub_22F35B82C(v95);
    v39 = *(_QWORD *)(v96 + 624) + 176 * *(unsigned int *)(v96 + 640);
    if (v39 != v37)
    {
      v41 = v37;
      v42 = v38;
      do
      {
        v43 = *(unsigned int *)(v41 + 8);
        v44 = v105;
        ++HIDWORD(v105);
        if (3 * (int)v105 <= (4 * HIDWORD(v105)))
        {
          sub_22EF2E7F8((unsigned int *)&v105, (2 * v105));
          v44 = v105;
        }
        v45 = (char *)v115;
        v46 = sub_22E3CD3D4((uint64_t)&v106, 184, 3);
        *(_DWORD *)v46 = v43;
        *(_QWORD *)(v46 + 8) = v46 + 24;
        *(_QWORD *)(v46 + 16) = 0x100000000;
        if (*(_DWORD *)(v41 + 24))
          sub_22E916DE4(v46 + 8, (uint64_t *)(v41 + 16));
        *(_QWORD *)(v46 + 168) = 0;
        v47 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
        {
          v51 = *MEMORY[0x24BED7368];
          if (!*MEMORY[0x24BED7368])
            v51 = 0xFF51AFD7ED558CCDLL;
          qword_253E4AB90 = v51;
          __cxa_guard_release(&qword_253E4AB98);
        }
        v48 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v43)) ^ ((0x9DDFEA08EB382D69
                                                                        * (qword_253E4AB90 + 8 * v43)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v43)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v43)) >> 47))) >> 47));
        *(_QWORD *)(v46 + 176) = v48;
        v49 = &v45[16 * (v48 & (v44 - 1))];
        *(_QWORD *)(v46 + 168) = *((_QWORD *)v49 + 1);
        ++*((_DWORD *)v49 + 1);
        *((_QWORD *)v49 + 1) = v46;
        while (1)
        {
          v41 += 176;
          if (v41 == v42)
            break;
          v50 = *(unsigned __int8 *)(v41 + 4);
          if ((*(_DWORD *)v41 != -1 || v50 != 255) && (*(_DWORD *)v41 != -2 || v50 != 254))
            goto LABEL_54;
        }
        v41 = v42;
LABEL_54:
        ;
      }
      while (v41 != v39);
    }
    sub_22F242C48((uint64_t)v99, (uint64_t)&v116);
    *(_DWORD *)v104 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    if (HIDWORD(v105) >= 3)
    {
      v52 = ((4 * HIDWORD(v105)) / 6uLL) | ((4 * HIDWORD(v105)) / 3uLL);
      v53 = v52 | (v52 >> 2) | ((v52 | (v52 >> 2)) >> 4);
      v40 = (((v53 | (v53 >> 8)) >> 16) | v53 | (v53 >> 8)) + 1;
    }
    else
    {
      v40 = 1;
    }
    if (v40 == (_DWORD)v105 || (sub_22EF2E7F8((unsigned int *)&v105, v40), (_DWORD)v105))
    {
      v54 = 0;
      do
      {
        v98 = v54;
        v55 = (char *)v115 + 16 * v54;
        v56 = (uint64_t *)(v55 + 8);
        if (*((_QWORD *)v55 + 1))
        {
          v57 = (*(uint64_t (**)(_QWORD *))(v99[0] + 80))(v99);
          *(_DWORD *)v55 = v57 + (_DWORD)v102 - v100;
          *(_WORD *)v104 = *((_DWORD *)v55 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
          for (j = *v56; j; j = *(_QWORD *)(j + 168))
          {
            *(_QWORD *)v104 = *(_QWORD *)(j + 176);
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            v59 = *(_DWORD *)(j + 16);
            if (v59)
            {
              v60 = *(uint64_t **)(j + 8);
              v61 = &v60[18 * v59];
              v62 = 2;
              do
              {
                v63 = v60[1];
                if (*v60 < 0)
                  v64 = 9;
                else
                  v64 = 5;
                if ((int)v63 < 0)
                  v64 += 4;
                if (v63 >= 0)
                  v65 = v64;
                else
                  v65 = v64 + 4;
                v62 += sub_22EF2E8CC((uint64_t)(v60 + 2)) + v65 + 1;
                v60 += 18;
              }
              while (v60 != v61);
            }
            else
            {
              LOWORD(v62) = 2;
            }
            *(_WORD *)v104 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            *(_WORD *)v104 = v62;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            *(_DWORD *)v104 = *(_DWORD *)j;
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            v66 = *(unsigned int *)(j + 16);
            v67 = 126 - 2 * __clz(v66);
            if ((_DWORD)v66)
              v68 = v67;
            else
              v68 = 0;
            sub_22EF2EA30(*(_QWORD *)(j + 8), *(_QWORD *)(j + 8) + 144 * v66, v68, 1);
            *(_WORD *)v104 = *(_DWORD *)(j + 16);
            llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
            v69 = *(_DWORD *)(j + 16);
            if (v69)
            {
              v70 = *(_QWORD *)(j + 8);
              v71 = v70 + 144 * v69;
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v99, (_QWORD *)v70);
                v72 = v70 + 16;
                sub_22EF30B14((llvm::raw_ostream *)v99, v70 + 16);
                v73 = *(unsigned __int8 *)(v70 + 136);
                if ((~v73 & 0x30) != 0)
                  v74 = 8;
                else
                  v74 = 12;
                v75 = ((int)(v73 << 31) >> 31) & (v73 & 6 | 8) & 0xFFFFFFFE | (16
                                                                             * (v74 & ((char)(8 * v73) >> 7) | ((v73 >> 7) | 2) & ((char)(2 * v73) >> 7))) | (v73 >> 3) & 1;
                v76 = v102;
                if ((unint64_t)v102 >= v101)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)v99);
                }
                else
                {
                  ++v102;
                  *v76 = v75;
                }
                v70 += 144;
              }
              while (v72 + 128 != v71);
            }
          }
        }
        v54 = v98 + 1;
      }
      while (v98 + 1 < (unint64_t)v105);
    }
    v77 = (*(uint64_t (**)(_QWORD *))(v99[0] + 80))(v99);
    v78 = (_DWORD)v102 - v100 + v77;
    v79 = (v78 + 3) & 0x1FFFFFFFCLL;
    v80 = v79 - v78;
    if (v79 != v78)
    {
      v81 = v78 - v79;
      do
      {
        v104[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
        v32 = __CFADD__(v81++, 1);
      }
      while (!v32);
    }
    *(_DWORD *)v104 = v105;
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    *(_DWORD *)v104 = HIDWORD(v105);
    llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
    if ((_DWORD)v105)
    {
      v82 = 0;
      v83 = 0;
      do
      {
        *(_DWORD *)v104 = *(_DWORD *)((char *)v115 + v82);
        llvm::raw_ostream::write((llvm::raw_ostream *)v99, v104);
        ++v83;
        v82 += 16;
      }
      while (v83 < v105);
    }
    v103 = v80 + v78;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v99);
    free(v115);
    if ((_DWORD)v109)
    {
      v84 = v108;
      v85 = &v108[8 * v109];
      do
      {
        v86 = *(_QWORD *)v84;
        if (*(_QWORD *)v84 == *(_QWORD *)&v108[8 * v109 - 8])
        {
          v88 = v106;
        }
        else
        {
          v87 = ((unint64_t)(v84 - v108) >> 10) & 0x1FFFFFF;
          if (v87 >= 0x1E)
            LOBYTE(v87) = 30;
          v88 = v86 + (4096 << v87);
        }
        for (k = ((v86 + 7) & 0xFFFFFFFFFFFFFFF8) + 184; k <= v88; k += 184)
          sub_22F35C3D4((char **)(k - 176));
        v84 += 8;
      }
      while (v84 != v85);
    }
    if ((_DWORD)v112)
    {
      v90 = v111;
      v91 = &v111[2 * v112];
      do
      {
        v92 = *v90 + v90[1];
        for (m = ((*v90 + 7) & 0xFFFFFFFFFFFFFFF8) + 184; m <= v92; m += 184)
          sub_22F35C3D4((char **)(m - 176));
        v90 += 2;
      }
      while (v90 != v91);
    }
    sub_22E6188F4((uint64_t)&v106);
    sub_22E3B4EF4((uint64_t)&v106);
    v2 = (uint64_t)v97;
    v94 = sub_22F35E070((uint64_t)v97);
    *(_DWORD *)(v96 + 64) = 0;
    sub_22F35E198(v97, v96 + 56, v94, &v103, (uint64_t)&v116);
    if (v116 != v118)
      free(v116);
  }
  sub_22E7416F4(v2);
}

void sub_22EF28FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  int v24;
  uint64_t i;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t j;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t k;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  llvm::raw_ostream *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  unsigned int v78;
  char v79[8];
  uint64_t v80;
  _QWORD v81[2];
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD v87[2];
  void *v88;
  void *v89;
  __int128 v90;
  _QWORD v91[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v91[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xBu, 3u);
  if (!*(_DWORD *)(v3 + 680))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v72 = (llvm::raw_ostream *)v2;
  v89 = v91;
  v90 = xmmword_22F45FB10;
  v78 = 0;
  v81[0] = 0;
  v81[1] = 0;
  v82 = (char *)&v84;
  v83 = 0x400000000;
  v85 = v87;
  v86 = 0;
  v87[0] = 0;
  v87[1] = 0;
  v80 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v88 = v4;
    v5 = sub_22F35B890((uint64_t *)(v3 + 672));
    v71 = v3;
    v7 = *(_QWORD *)(v3 + 672) + 144 * *(unsigned int *)(v3 + 688);
    if (v7 != v5)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        v10 = *(_QWORD *)v8;
        v11 = *(_DWORD *)(v8 + 8);
        v12 = v80;
        ++HIDWORD(v80);
        if (3 * (int)v80 <= (4 * HIDWORD(v80)))
        {
          sub_22EF30DB0((unsigned int *)&v80, (2 * v80));
          v12 = v80;
        }
        v13 = (char *)v88;
        v14 = sub_22E3CD3D4((uint64_t)v81, 160, 3);
        *(_QWORD *)v14 = v10;
        *(_DWORD *)(v14 + 8) = v11;
        *(_QWORD *)(v14 + 16) = v14 + 32;
        *(_QWORD *)(v14 + 24) = 0x100000000;
        if (*(_DWORD *)(v8 + 24))
          sub_22E917E58(v14 + 16, v8 + 16);
        *(_QWORD *)(v14 + 144) = 0;
        v73 = v10;
        v74 = v11;
        v15 = sub_22F35E228(&v73, (int *)&v73 + 1, (char *)&v74);
        *(_QWORD *)(v14 + 152) = v15;
        v16 = &v13[16 * (v15 & (v12 - 1))];
        *(_QWORD *)(v14 + 144) = *((_QWORD *)v16 + 1);
        ++*((_DWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v14;
        v17 = v8 + 144;
        v8 = v9;
        if (v17 != v9)
        {
          v8 = v17;
          do
          {
            if (*(_DWORD *)v8 == -2)
            {
              if (*(_DWORD *)(v8 + 4) != -2 || *(unsigned __int8 *)(v8 + 8) != 254)
                goto LABEL_21;
            }
            else if (*(_DWORD *)v8 != -1 || *(_DWORD *)(v8 + 4) != -1 || *(unsigned __int8 *)(v8 + 8) != 255)
            {
              goto LABEL_21;
            }
            v8 += 144;
          }
          while (v8 != v9);
          v8 = v9;
        }
LABEL_21:
        ;
      }
      while (v8 != v7);
    }
    sub_22F242C48((uint64_t)&v73, (uint64_t)&v89);
    *(_DWORD *)v79 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
    if (HIDWORD(v80) >= 3)
    {
      v19 = ((4 * HIDWORD(v80)) / 6uLL) | ((4 * HIDWORD(v80)) / 3uLL);
      v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
      v18 = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
    }
    else
    {
      v18 = 1;
    }
    if (v18 == (_DWORD)v80 || (sub_22EF30DB0((unsigned int *)&v80, v18), (_DWORD)v80))
    {
      v21 = 0;
      do
      {
        v22 = (char *)v88 + 16 * v21;
        v23 = (uint64_t *)(v22 + 8);
        if (*((_QWORD *)v22 + 1))
        {
          v24 = (*(uint64_t (**)(uint64_t *))(v73 + 80))(&v73);
          *(_DWORD *)v22 = v24 + (_DWORD)v77 - v75;
          *(_WORD *)v79 = *((_DWORD *)v22 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
          for (i = *v23; i; i = *(_QWORD *)(i + 144))
          {
            *(_QWORD *)v79 = *(_QWORD *)(i + 152);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            v26 = *(_DWORD *)(i + 24);
            if (v26)
            {
              v27 = *(_QWORD *)(i + 16);
              v28 = v27 + 112 * v26;
              v29 = 2;
              do
              {
                v30 = *(_QWORD *)(v27 + 8);
                if (*(uint64_t *)v27 < 0)
                  v31 = 9;
                else
                  v31 = 5;
                if ((int)v30 < 0)
                  v31 += 4;
                if (v30 >= 0)
                  v32 = v31;
                else
                  v32 = v31 + 4;
                v33 = *(char *)(v27 + 39);
                if (v33 >= 0)
                  v34 = v33 & 0x7F;
                else
                  v34 = *(_DWORD *)(v27 + 24);
                v35 = *(_BYTE *)(v27 + 71) & 0x7F;
                if (*(char *)(v27 + 71) < 0)
                  v35 = *(_DWORD *)(v27 + 56);
                v36 = v34 + v35;
                v37 = v29 + v32;
                v38 = *(char *)(v27 + 103);
                if (v38 >= 0)
                  v39 = v38 & 0x7F;
                else
                  v39 = *(_DWORD *)(v27 + 88);
                v29 = v36 + v39 + v37 + 10;
                v27 += 112;
              }
              while (v27 != v28);
            }
            else
            {
              LOWORD(v29) = 2;
            }
            strcpy(v79, "\t");
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            *(_WORD *)v79 = v29;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            v40 = *(_DWORD *)(i + 8);
            v41 = HIDWORD(*(_QWORD *)i);
            *(_DWORD *)v79 = *(_QWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            *(_DWORD *)v79 = v41;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            v79[0] = v40;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            v42 = *(unsigned int *)(i + 24);
            v43 = 126 - 2 * __clz(v42);
            if ((_DWORD)v42)
              v44 = v43;
            else
              v44 = 0;
            sub_22EF30E84(*(_QWORD *)(i + 16), (_DWORD *)(*(_QWORD *)(i + 16) + 112 * v42), v44, 1);
            *(_WORD *)v79 = *(_DWORD *)(i + 24);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
            v45 = *(_DWORD *)(i + 24);
            if (v45)
            {
              v46 = *(_QWORD *)(i + 16);
              v47 = v46 + 112 * v45;
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)&v73, (_QWORD *)v46);
                v48 = v46 + 16;
                sub_22EF32D6C((llvm::raw_ostream *)&v73, v46 + 16);
                v49 = (*(unsigned __int8 *)(v46 + 104) << 31 >> 31) & ((8 * ((*(unsigned __int8 *)(v46 + 104) >> 1) & 1)) | 4) | ((*(unsigned __int8 *)(v46 + 104) >> 1) & 2 | 1) & ((char)(32 * *(_BYTE *)(v46 + 104)) >> 7);
                v50 = v77;
                if ((unint64_t)v77 >= v76)
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v73);
                }
                else
                {
                  ++v77;
                  *v50 = v49;
                }
                v46 += 112;
              }
              while (v48 + 96 != v47);
            }
          }
        }
        ++v21;
      }
      while (v21 < v80);
    }
    v51 = (*(uint64_t (**)(uint64_t *))(v73 + 80))(&v73);
    v52 = (_DWORD)v77 - v75 + v51;
    v53 = (v52 + 3) & 0x1FFFFFFFCLL;
    v54 = v53 - v52;
    if (v53 != v52)
    {
      v55 = v52 - v53;
      do
      {
        v79[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
      }
      while (!__CFADD__(v55++, 1));
    }
    *(_DWORD *)v79 = v80;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
    *(_DWORD *)v79 = HIDWORD(v80);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
    if ((_DWORD)v80)
    {
      v57 = 0;
      v58 = 0;
      do
      {
        *(_DWORD *)v79 = *(_DWORD *)((char *)v88 + v57);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v73, v79);
        ++v58;
        v57 += 16;
      }
      while (v58 < v80);
    }
    v78 = v54 + v52;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v73);
    free(v88);
    if ((_DWORD)v83)
    {
      v59 = v82;
      v60 = &v82[8 * v83];
      do
      {
        v61 = *(_QWORD *)v59;
        if (*(_QWORD *)v59 == *(_QWORD *)&v82[8 * v83 - 8])
        {
          v63 = v81[0];
        }
        else
        {
          v62 = ((unint64_t)(v59 - v82) >> 10) & 0x1FFFFFF;
          if (v62 >= 0x1E)
            LOBYTE(v62) = 30;
          v63 = v61 + (4096 << v62);
        }
        for (j = ((v61 + 7) & 0xFFFFFFFFFFFFFFF8) + 160; j <= v63; j += 160)
          sub_22E918278((char **)(j - 144));
        v59 += 8;
      }
      while (v59 != v60);
    }
    if ((_DWORD)v86)
    {
      v65 = v85;
      v66 = &v85[2 * v86];
      do
      {
        v67 = *v65 + v65[1];
        for (k = ((*v65 + 7) & 0xFFFFFFFFFFFFFFF8) + 160; k <= v67; k += 160)
          sub_22E918278((char **)(k - 144));
        v65 += 2;
      }
      while (v65 != v66);
    }
    sub_22E6188F4((uint64_t)v81);
    sub_22E3B4EF4((uint64_t)v81);
    v2 = (uint64_t)v72;
    v69 = sub_22F35DD10((uint64_t)v72);
    *(_DWORD *)(v71 + 64) = 0;
    sub_22F35DE38(v72, v71 + 56, v69, &v78, (uint64_t)&v89);
    if (v89 != v91)
      free(v89);
    goto LABEL_2;
  }
  v70 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF29758(v70);
}

void sub_22EF29758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  int v24;
  uint64_t i;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t j;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t k;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  llvm::raw_ostream *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char v68[8];
  uint64_t v69;
  _QWORD v70[2];
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[2];
  void *v77;
  void *v78;
  __int128 v79;
  _QWORD v80[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v80[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xCu, 3u);
  if (!*(_DWORD *)(v3 + 704))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v62 = (llvm::raw_ostream *)v2;
  v78 = v80;
  v79 = xmmword_22F45FB10;
  v67 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v71 = (char *)&v73;
  v72 = 0x400000000;
  v74 = v76;
  v75 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v69 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v77 = v4;
    v5 = sub_22F35B914((uint64_t *)(v3 + 696));
    v61 = v3;
    v7 = *(_QWORD *)(v3 + 696) + 176 * *(unsigned int *)(v3 + 712);
    if (v7 != v5)
    {
      v8 = v5;
      v9 = v6;
      do
      {
        v10 = *(_QWORD *)v8;
        v11 = *(_DWORD *)(v8 + 8);
        v12 = v69;
        ++HIDWORD(v69);
        if (3 * (int)v69 <= (4 * HIDWORD(v69)))
        {
          sub_22EF32E1C((unsigned int *)&v69, (2 * v69));
          v12 = v69;
        }
        v13 = (char *)v77;
        v14 = sub_22E3CD3D4((uint64_t)v70, 192, 3);
        *(_QWORD *)v14 = v10;
        *(_DWORD *)(v14 + 8) = v11;
        *(_QWORD *)(v14 + 16) = v14 + 32;
        *(_QWORD *)(v14 + 24) = 0x100000000;
        if (*(_DWORD *)(v8 + 24))
          sub_22E9179CC(v14 + 16, (uint64_t *)(v8 + 16));
        *(_QWORD *)(v14 + 176) = 0;
        v63 = v10;
        v64 = v11;
        v15 = sub_22F35E228(&v63, (int *)&v63 + 1, (char *)&v64);
        *(_QWORD *)(v14 + 184) = v15;
        v16 = &v13[16 * (v15 & (v12 - 1))];
        *(_QWORD *)(v14 + 176) = *((_QWORD *)v16 + 1);
        ++*((_DWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v14;
        v17 = v8 + 176;
        v8 = v9;
        if (v17 != v9)
        {
          v8 = v17;
          do
          {
            if (*(_DWORD *)v8 == -2)
            {
              if (*(_DWORD *)(v8 + 4) != -2 || *(unsigned __int8 *)(v8 + 8) != 254)
                goto LABEL_21;
            }
            else if (*(_DWORD *)v8 != -1 || *(_DWORD *)(v8 + 4) != -1 || *(unsigned __int8 *)(v8 + 8) != 255)
            {
              goto LABEL_21;
            }
            v8 += 176;
          }
          while (v8 != v9);
          v8 = v9;
        }
LABEL_21:
        ;
      }
      while (v8 != v7);
    }
    sub_22F242C48((uint64_t)&v63, (uint64_t)&v78);
    *(_DWORD *)v68 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
    if (HIDWORD(v69) >= 3)
    {
      v19 = ((4 * HIDWORD(v69)) / 6uLL) | ((4 * HIDWORD(v69)) / 3uLL);
      v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
      v18 = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
    }
    else
    {
      v18 = 1;
    }
    if (v18 == (_DWORD)v69 || (sub_22EF32E1C((unsigned int *)&v69, v18), (_DWORD)v69))
    {
      v21 = 0;
      do
      {
        v22 = (char *)v77 + 16 * v21;
        v23 = (uint64_t *)(v22 + 8);
        if (*((_QWORD *)v22 + 1))
        {
          v24 = (*(uint64_t (**)(uint64_t *))(v63 + 80))(&v63);
          *(_DWORD *)v22 = v24 + v66 - v65;
          *(_WORD *)v68 = *((_DWORD *)v22 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
          for (i = *v23; i; i = *(_QWORD *)(i + 176))
          {
            *(_QWORD *)v68 = *(_QWORD *)(i + 184);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            v26 = *(_DWORD *)(i + 24);
            if (v26)
            {
              v27 = *(uint64_t **)(i + 16);
              v28 = &v27[18 * v26];
              v29 = 2;
              do
              {
                v30 = v27[1];
                if (*v27 < 0)
                  v31 = 9;
                else
                  v31 = 5;
                if ((int)v30 < 0)
                  v31 += 4;
                if (v30 >= 0)
                  v32 = v31;
                else
                  v32 = v31 + 4;
                v29 += sub_22EF32EF0((uint64_t)(v27 + 2)) + v32 + 1;
                v27 += 18;
              }
              while (v27 != v28);
            }
            else
            {
              LOWORD(v29) = 2;
            }
            strcpy(v68, "\t");
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            *(_WORD *)v68 = v29;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            v33 = *(_DWORD *)(i + 8);
            v34 = HIDWORD(*(_QWORD *)i);
            *(_DWORD *)v68 = *(_QWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            *(_DWORD *)v68 = v34;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            v68[0] = v33;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            v35 = *(unsigned int *)(i + 24);
            v36 = 126 - 2 * __clz(v35);
            if ((_DWORD)v35)
              v37 = v36;
            else
              v37 = 0;
            sub_22EF32FA8(*(_QWORD *)(i + 16), *(_QWORD *)(i + 16) + 144 * v35, v37, 1);
            *(_WORD *)v68 = *(_DWORD *)(i + 24);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
            v38 = *(_DWORD *)(i + 24);
            if (v38)
            {
              v39 = *(_QWORD *)(i + 16);
              v40 = v39 + 144 * v38;
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)&v63, (_QWORD *)v39);
                v68[0] = *(_BYTE *)(v39 + 136) & 4 | (2 * (*(_BYTE *)(v39 + 136) & 1)) | ((*(_BYTE *)(v39 + 136) & 2) != 0);
                llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
                sub_22EF352D4((llvm::raw_ostream *)&v63, v39 + 16);
                v39 += 144;
              }
              while (v39 != v40);
            }
          }
        }
        ++v21;
      }
      while (v21 < v69);
    }
    v41 = (*(uint64_t (**)(uint64_t *))(v63 + 80))(&v63);
    v42 = v66 - v65 + v41;
    v43 = (v42 + 3) & 0x1FFFFFFFCLL;
    v44 = v43 - v42;
    if (v43 != v42)
    {
      v45 = v42 - v43;
      do
      {
        v68[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
      }
      while (!__CFADD__(v45++, 1));
    }
    *(_DWORD *)v68 = v69;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
    *(_DWORD *)v68 = HIDWORD(v69);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
    if ((_DWORD)v69)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        *(_DWORD *)v68 = *(_DWORD *)((char *)v77 + v47);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v63, v68);
        ++v48;
        v47 += 16;
      }
      while (v48 < v69);
    }
    v67 = v44 + v42;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v63);
    free(v77);
    if ((_DWORD)v72)
    {
      v49 = v71;
      v50 = &v71[8 * v72];
      do
      {
        v51 = *(_QWORD *)v49;
        if (*(_QWORD *)v49 == *(_QWORD *)&v71[8 * v72 - 8])
        {
          v53 = v70[0];
        }
        else
        {
          v52 = ((unint64_t)(v49 - v71) >> 10) & 0x1FFFFFF;
          if (v52 >= 0x1E)
            LOBYTE(v52) = 30;
          v53 = v51 + (4096 << v52);
        }
        for (j = ((v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; j <= v53; j += 192)
          sub_22F35C744((char **)(j - 176));
        v49 += 8;
      }
      while (v49 != v50);
    }
    if ((_DWORD)v75)
    {
      v55 = v74;
      v56 = &v74[2 * v75];
      do
      {
        v57 = *v55 + v55[1];
        for (k = ((*v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; k <= v57; k += 192)
          sub_22F35C744((char **)(k - 176));
        v55 += 2;
      }
      while (v55 != v56);
    }
    sub_22E6188F4((uint64_t)v70);
    sub_22E3B4EF4((uint64_t)v70);
    v2 = (uint64_t)v62;
    v59 = sub_22F35DD10((uint64_t)v62);
    *(_DWORD *)(v61 + 64) = 0;
    sub_22F35DE38(v62, v61 + 56, v59, &v67, (uint64_t)&v78);
    if (v78 != v80)
      free(v78);
    goto LABEL_2;
  }
  v60 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF29E84(v60);
}

void sub_22EF29E84()
{
  uint64_t v0;
  uint64_t v1;
  llvm::raw_ostream *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  int v22;
  uint64_t i;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t j;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t k;
  void *v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54[4];
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[2];
  void *v63;
  void *v64;
  __int128 v65;
  _QWORD v66[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = (llvm::raw_ostream *)v1;
  v3 = v0;
  v66[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xDu, 3u);
  if (!*(_DWORD *)(v3 + 40))
  {
LABEL_2:
    sub_22E7416F4((uint64_t)v2);
    return;
  }
  v64 = v66;
  v65 = xmmword_22F45FB10;
  v53 = 0;
  v56[0] = 0;
  v56[1] = 0;
  v57 = (char *)&v59;
  v58 = 0x400000000;
  v60 = v62;
  v61 = 0;
  v62[0] = 0;
  v62[1] = 0;
  v55 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v63 = v4;
    v5 = sub_22F35B998((uint64_t *)(v3 + 32));
    v50[0] = v5;
    v50[1] = v6;
    v7 = *(_QWORD *)(v3 + 32) + 48 * *(unsigned int *)(v3 + 48);
    if (v7 != v5)
    {
      v8 = v5;
      do
      {
        v9 = *(_QWORD *)(v8 + 40);
        v10 = v55;
        ++HIDWORD(v55);
        if (3 * (int)v55 <= (4 * HIDWORD(v55)))
        {
          sub_22E7EF378((unsigned int *)&v55, (2 * v55));
          v10 = v55;
        }
        v11 = (char *)v63;
        v12 = sub_22E3CD3D4((uint64_t)v56, 64, 3);
        *(_DWORD *)v12 = *(_DWORD *)v8;
        *(_QWORD *)(v12 + 8) = v12 + 24;
        *(_QWORD *)(v12 + 16) = 0x200000000;
        v13 = v8;
        if (*(_DWORD *)(v8 + 16))
        {
          sub_22F24C890(v12 + 8, v8 + 8);
          v13 = v50[0];
        }
        *(_QWORD *)(v12 + 40) = v9;
        *(_QWORD *)(v12 + 48) = 0;
        v14 = sub_22F35CF08((unsigned int *)v8);
        *(_DWORD *)(v12 + 56) = v14;
        v15 = &v11[16 * ((v10 - 1) & v14)];
        *(_QWORD *)(v12 + 48) = *((_QWORD *)v15 + 1);
        ++*((_DWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v12;
        v50[0] = v13 + 48;
        sub_22F35D048((uint64_t)v50);
        v8 = v50[0];
      }
      while (v50[0] != v7);
    }
    sub_22F242C48((uint64_t)v50, (uint64_t)&v64);
    *(_DWORD *)v54 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
    if (HIDWORD(v55) >= 3)
    {
      v17 = ((4 * HIDWORD(v55)) / 6uLL) | ((4 * HIDWORD(v55)) / 3uLL);
      v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
      v16 = (((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8)) + 1;
    }
    else
    {
      v16 = 1;
    }
    if (v16 == (_DWORD)v55 || (sub_22E7EF378((unsigned int *)&v55, v16), (_DWORD)v55))
    {
      v19 = 0;
      do
      {
        v20 = (char *)v63 + 16 * v19;
        v21 = (uint64_t *)(v20 + 8);
        if (*((_QWORD *)v20 + 1))
        {
          v22 = (*(uint64_t (**)(_QWORD *))(v50[0] + 80))(v50);
          *(_DWORD *)v20 = v22 + v52 - v51;
          *(_WORD *)v54 = *((_DWORD *)v20 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
          for (i = *v21; i; i = *(_QWORD *)(i + 48))
          {
            *(_DWORD *)v54 = *(_DWORD *)(i + 56);
            llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
            *(_WORD *)v54 = (4 * *(_WORD *)(i + 16)) | 2;
            llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
            *(_WORD *)v54 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
            *(_WORD *)v54 = *(_DWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
            v24 = *(unsigned int *)(i + 16);
            if ((_DWORD)v24)
            {
              v25 = *(unint64_t **)(i + 8);
              v26 = 8 * v24;
              do
              {
                v27 = *v25++;
                *(_DWORD *)v54 = v27 >> 33;
                llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
                v26 -= 8;
              }
              while (v26);
            }
            *(_DWORD *)v54 = *(_QWORD *)(i + 40) >> 33;
            llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
          }
        }
        ++v19;
      }
      while (v19 < v55);
    }
    v28 = (*(uint64_t (**)(_QWORD *))(v50[0] + 80))(v50);
    v29 = v52 - v51 + v28;
    v30 = (v29 + 3) & 0x1FFFFFFFCLL;
    v31 = v30 - v29;
    if (v30 != v29)
    {
      v32 = v29 - v30;
      do
      {
        v54[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
      }
      while (!__CFADD__(v32++, 1));
    }
    *(_DWORD *)v54 = v55;
    llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
    *(_DWORD *)v54 = HIDWORD(v55);
    llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
    if ((_DWORD)v55)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        *(_DWORD *)v54 = *(_DWORD *)((char *)v63 + v34);
        llvm::raw_ostream::write((llvm::raw_ostream *)v50, v54);
        ++v35;
        v34 += 16;
      }
      while (v35 < v55);
    }
    v53 = v31 + v29;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v50);
    free(v63);
    if ((_DWORD)v58)
    {
      v36 = v57;
      v37 = &v57[8 * v58];
      do
      {
        v38 = *(_QWORD *)v36;
        if (*(_QWORD *)v36 == *(_QWORD *)&v57[8 * v58 - 8])
        {
          v40 = v56[0];
        }
        else
        {
          v39 = ((unint64_t)(v36 - v57) >> 10) & 0x1FFFFFF;
          if (v39 >= 0x1E)
            LOBYTE(v39) = 30;
          v40 = v38 + (4096 << v39);
        }
        for (j = ((v38 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; j <= v40; j += 64)
        {
          v42 = *(void **)(j - 56);
          if ((void *)(j - 40) != v42)
            free(v42);
        }
        v36 += 8;
      }
      while (v36 != v37);
    }
    if ((_DWORD)v61)
    {
      v43 = v60;
      v44 = &v60[2 * v61];
      do
      {
        v45 = *v43 + v43[1];
        for (k = ((*v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; k <= v45; k += 64)
        {
          v47 = *(void **)(k - 56);
          if ((void *)(k - 40) != v47)
            free(v47);
        }
        v43 += 2;
      }
      while (v43 != v44);
    }
    sub_22E6188F4((uint64_t)v56);
    sub_22E3B4EF4((uint64_t)v56);
    v48 = sub_22F35DD10((uint64_t)v2);
    *(_DWORD *)(v3 + 64) = 0;
    sub_22F35DE38(v2, v3 + 56, v48, &v53, (uint64_t)&v64);
    if (v64 != v66)
      free(v64);
    goto LABEL_2;
  }
  v49 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2A470(v49);
}

void sub_22EF2A470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  int v26;
  uint64_t i;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t j;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t k;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::raw_ostream *v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  char v75[8];
  uint64_t v76;
  _QWORD v77[2];
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[2];
  void *v84;
  void *v85;
  __int128 v86;
  _QWORD v87[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v87[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xEu, 3u);
  if (!*(_DWORD *)(v3 + 728))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v85 = v87;
  v86 = xmmword_22F45FB10;
  v74 = 0;
  v77[0] = 0;
  v77[1] = 0;
  v78 = (char *)&v80;
  v79 = 0x400000000;
  v81 = v83;
  v82 = 0;
  v83[0] = 0;
  v83[1] = 0;
  v76 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v70 = (llvm::raw_ostream *)v2;
    v84 = v4;
    v5 = *(_QWORD *)(v3 + 720);
    v6 = *(unsigned int *)(v3 + 736);
    v7 = (unsigned int *)(v5 + (v6 << 7));
    v69 = v3;
    if (*(_DWORD *)(v3 + 728))
    {
      if ((_DWORD)v6)
      {
        v67 = v6 << 7;
        v8 = *(unsigned int **)(v3 + 720);
        while (*v8 >= 0xFFFFFFFE)
        {
          v8 += 32;
          v67 -= 128;
          if (!v67)
            goto LABEL_5;
        }
      }
      else
      {
        v8 = *(unsigned int **)(v3 + 720);
      }
    }
    else
    {
LABEL_5:
      v8 = (unsigned int *)(v5 + (v6 << 7));
    }
    v9 = (unsigned int *)(v5 + ((unint64_t)v6 << 7));
    while (v8 != v9)
    {
      v11 = *v8;
      v12 = v76;
      ++HIDWORD(v76);
      if (3 * (int)v76 <= (4 * HIDWORD(v76)))
      {
        sub_22EF35464((unsigned int *)&v76, (2 * v76));
        v12 = v76;
      }
      v13 = (char *)v84;
      v14 = sub_22E3CD3D4((uint64_t)v77, 144, 3);
      *(_DWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v14 + 24;
      *(_QWORD *)(v14 + 16) = 0x100000000;
      if (v8[4])
        sub_22E915EB0(v14 + 8, (uint64_t)(v8 + 2));
      *(_QWORD *)(v14 + 128) = 0;
      v15 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
      {
        v20 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v20 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v20;
        __cxa_guard_release(&qword_253E4AB98);
      }
      v16 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69
                                                                      * (qword_253E4AB90 + 8 * v11)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) >> 47))) >> 47));
      *(_QWORD *)(v14 + 136) = v16;
      v17 = &v13[16 * (v16 & (v12 - 1))];
      *(_QWORD *)(v14 + 128) = *((_QWORD *)v17 + 1);
      ++*((_DWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v14;
      v18 = v8 + 32;
      while (v18 != v7)
      {
        v19 = *v18;
        v18 += 32;
        if (v19 <= 0xFFFFFFFD)
        {
          v8 = v18 - 32;
          goto LABEL_21;
        }
      }
      v8 = v7;
LABEL_21:
      ;
    }
    sub_22F242C48((uint64_t)v71, (uint64_t)&v85);
    *(_DWORD *)v75 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
    if (HIDWORD(v76) >= 3)
    {
      v21 = ((4 * HIDWORD(v76)) / 6uLL) | ((4 * HIDWORD(v76)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v10 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v10 = 1;
    }
    if (v10 == (_DWORD)v76 || (sub_22EF35464((unsigned int *)&v76, v10), (_DWORD)v76))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v84 + 16 * v23;
        v25 = (uint64_t *)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v71[0] + 80))(v71);
          *(_DWORD *)v24 = v26 + v73 - v72;
          *(_WORD *)v75 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
          for (i = *v25; i; i = *(_QWORD *)(i + 128))
          {
            *(_QWORD *)v75 = *(_QWORD *)(i + 136);
            llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
            v28 = *(_DWORD *)(i + 16);
            if (v28)
            {
              v29 = *(_QWORD *)(i + 8);
              v30 = v29 + 104 * v28;
              v31 = 2;
              do
              {
                v32 = *(_QWORD *)(v29 + 8);
                if (*(uint64_t *)v29 < 0)
                  v33 = 9;
                else
                  v33 = 5;
                if ((int)v32 < 0)
                  v33 += 4;
                if (v32 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 4;
                v35 = *(char *)(v29 + 39);
                if (v35 >= 0)
                  v36 = v35 & 0x7F;
                else
                  v36 = *(_DWORD *)(v29 + 24);
                v37 = *(_BYTE *)(v29 + 71) & 0x7F;
                if (*(char *)(v29 + 71) < 0)
                  v37 = *(_DWORD *)(v29 + 56);
                v38 = v36 + v37;
                v39 = v31 + v34;
                v40 = *(char *)(v29 + 103);
                if (v40 >= 0)
                  v41 = v40 & 0x7F;
                else
                  v41 = *(_DWORD *)(v29 + 88);
                v31 = v38 + v41 + v39 + 9;
                v29 += 104;
              }
              while (v29 != v30);
            }
            else
            {
              LOWORD(v31) = 2;
            }
            *(_WORD *)v75 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
            *(_WORD *)v75 = v31;
            llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
            *(_DWORD *)v75 = *(_DWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
            v42 = *(unsigned int *)(i + 16);
            v43 = 126 - 2 * __clz(v42);
            if ((_DWORD)v42)
              v44 = v43;
            else
              v44 = 0;
            sub_22EF35538(*(_QWORD *)(i + 8), *(_QWORD *)(i + 8) + 104 * v42, v44, 1);
            *(_WORD *)v75 = *(_DWORD *)(i + 16);
            llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
            v45 = *(_DWORD *)(i + 16);
            if (v45)
            {
              v46 = *(_QWORD **)(i + 8);
              v47 = &v46[13 * v45];
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v71, v46);
                sub_22EF32D6C((llvm::raw_ostream *)v71, (uint64_t)(v46 + 2));
                v46 += 13;
              }
              while (v46 != v47);
            }
          }
        }
        ++v23;
      }
      while (v23 < v76);
    }
    v48 = (*(uint64_t (**)(_QWORD *))(v71[0] + 80))(v71);
    v49 = v73 - v72 + v48;
    v50 = (v49 + 3) & 0x1FFFFFFFCLL;
    v51 = v50 - v49;
    if (v50 != v49)
    {
      v52 = v49 - v50;
      do
      {
        v75[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
      }
      while (!__CFADD__(v52++, 1));
    }
    *(_DWORD *)v75 = v76;
    llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
    *(_DWORD *)v75 = HIDWORD(v76);
    llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
    v2 = (uint64_t)v70;
    if ((_DWORD)v76)
    {
      v54 = 0;
      v55 = 0;
      do
      {
        *(_DWORD *)v75 = *(_DWORD *)((char *)v84 + v54);
        llvm::raw_ostream::write((llvm::raw_ostream *)v71, v75);
        ++v55;
        v54 += 16;
      }
      while (v55 < v76);
    }
    v74 = v51 + v49;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v71);
    free(v84);
    if ((_DWORD)v79)
    {
      v56 = v78;
      v57 = &v78[8 * v79];
      do
      {
        v58 = *(_QWORD *)v56;
        if (*(_QWORD *)v56 == *(_QWORD *)&v78[8 * v79 - 8])
        {
          v60 = v77[0];
        }
        else
        {
          v59 = ((unint64_t)(v56 - v78) >> 10) & 0x1FFFFFF;
          if (v59 >= 0x1E)
            LOBYTE(v59) = 30;
          v60 = v58 + (4096 << v59);
        }
        for (j = ((v58 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; j <= v60; j += 144)
          sub_22E916354((char **)(j - 136));
        v56 += 8;
      }
      while (v56 != v57);
    }
    if ((_DWORD)v82)
    {
      v62 = v81;
      v63 = &v81[2 * v82];
      do
      {
        v64 = *v62 + v62[1];
        for (k = ((*v62 + 7) & 0xFFFFFFFFFFFFFFF8) + 144; k <= v64; k += 144)
          sub_22E916354((char **)(k - 136));
        v62 += 2;
      }
      while (v62 != v63);
    }
    sub_22E6188F4((uint64_t)v77);
    sub_22E3B4EF4((uint64_t)v77);
    v66 = sub_22F35DD10((uint64_t)v70);
    *(_DWORD *)(v69 + 64) = 0;
    sub_22F35DE38(v70, v69 + 56, v66, &v74, (uint64_t)&v85);
    if (v85 != v87)
      free(v85);
    goto LABEL_2;
  }
  v68 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2ABCC(v68);
}

void sub_22EF2ABCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  int v26;
  uint64_t i;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t j;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t k;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char v68[8];
  uint64_t v69;
  _QWORD v70[2];
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[2];
  void *v77;
  void *v78;
  __int128 v79;
  _QWORD v80[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v80[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0xFu, 3u);
  if (!*(_DWORD *)(v3 + 752))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v78 = v80;
  v79 = xmmword_22F45FB10;
  v67 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v71 = (char *)&v73;
  v72 = 0x400000000;
  v74 = v76;
  v75 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v69 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v63 = (llvm::raw_ostream *)v2;
    v77 = v4;
    v5 = *(_QWORD *)(v3 + 744);
    v6 = *(unsigned int *)(v3 + 760);
    v7 = (unsigned int *)(v5 + 160 * v6);
    v62 = v3;
    if (*(_DWORD *)(v3 + 752))
    {
      if ((_DWORD)v6)
      {
        v60 = 160 * v6;
        v8 = *(unsigned int **)(v3 + 744);
        while (*v8 >= 0xFFFFFFFE)
        {
          v8 += 40;
          v60 -= 160;
          if (!v60)
            goto LABEL_5;
        }
      }
      else
      {
        v8 = *(unsigned int **)(v3 + 744);
      }
    }
    else
    {
LABEL_5:
      v8 = (unsigned int *)(v5 + 160 * v6);
    }
    v9 = (unsigned int *)(v5 + 160 * v6);
    while (v8 != v9)
    {
      v11 = *v8;
      v12 = v69;
      ++HIDWORD(v69);
      if (3 * (int)v69 <= (4 * HIDWORD(v69)))
      {
        sub_22EF3736C((unsigned int *)&v69, (2 * v69));
        v12 = v69;
      }
      v13 = (char *)v77;
      v14 = sub_22E3CD3D4((uint64_t)v70, 176, 3);
      *(_DWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v14 + 24;
      *(_QWORD *)(v14 + 16) = 0x100000000;
      if (v8[4])
        sub_22E9163EC(v14 + 8, (uint64_t)(v8 + 2));
      *(_QWORD *)(v14 + 160) = 0;
      v15 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
      {
        v20 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v20 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v20;
        __cxa_guard_release(&qword_253E4AB98);
      }
      v16 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69
                                                                      * (qword_253E4AB90 + 8 * v11)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) >> 47))) >> 47));
      *(_QWORD *)(v14 + 168) = v16;
      v17 = &v13[16 * (v16 & (v12 - 1))];
      *(_QWORD *)(v14 + 160) = *((_QWORD *)v17 + 1);
      ++*((_DWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v14;
      v18 = v8 + 40;
      while (v18 != v7)
      {
        v19 = *v18;
        v18 += 40;
        if (v19 <= 0xFFFFFFFD)
        {
          v8 = v18 - 40;
          goto LABEL_21;
        }
      }
      v8 = v7;
LABEL_21:
      ;
    }
    sub_22F242C48((uint64_t)v64, (uint64_t)&v78);
    *(_DWORD *)v68 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
    if (HIDWORD(v69) >= 3)
    {
      v21 = ((4 * HIDWORD(v69)) / 6uLL) | ((4 * HIDWORD(v69)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v10 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v10 = 1;
    }
    if (v10 == (_DWORD)v69 || (sub_22EF3736C((unsigned int *)&v69, v10), (_DWORD)v69))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v77 + 16 * v23;
        v25 = (uint64_t *)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v64[0] + 80))(v64);
          *(_DWORD *)v24 = v26 + v66 - v65;
          *(_WORD *)v68 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
          for (i = *v25; i; i = *(_QWORD *)(i + 160))
          {
            *(_QWORD *)v68 = *(_QWORD *)(i + 168);
            llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
            v28 = *(_DWORD *)(i + 16);
            if (v28)
            {
              v29 = *(uint64_t **)(i + 8);
              v30 = &v29[17 * v28];
              v31 = 2;
              do
              {
                v32 = v29[1];
                if (*v29 < 0)
                  v33 = 9;
                else
                  v33 = 5;
                if ((int)v32 < 0)
                  v33 += 4;
                if (v32 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 4;
                v31 += sub_22EF32EF0((uint64_t)(v29 + 2)) + v34;
                v29 += 17;
              }
              while (v29 != v30);
            }
            else
            {
              LOWORD(v31) = 2;
            }
            *(_WORD *)v68 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
            *(_WORD *)v68 = v31;
            llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
            *(_DWORD *)v68 = *(_DWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
            v35 = *(unsigned int *)(i + 16);
            v36 = 126 - 2 * __clz(v35);
            if ((_DWORD)v35)
              v37 = v36;
            else
              v37 = 0;
            sub_22EF37440(*(_QWORD *)(i + 8), *(_QWORD *)(i + 8) + 136 * v35, v37, 1);
            *(_WORD *)v68 = *(_DWORD *)(i + 16);
            llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
            v38 = *(_DWORD *)(i + 16);
            if (v38)
            {
              v39 = *(_QWORD **)(i + 8);
              v40 = &v39[17 * v38];
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v64, v39);
                sub_22EF352D4((llvm::raw_ostream *)v64, (uint64_t)(v39 + 2));
                v39 += 17;
              }
              while (v39 != v40);
            }
          }
        }
        ++v23;
      }
      while (v23 < v69);
    }
    v41 = (*(uint64_t (**)(_QWORD *))(v64[0] + 80))(v64);
    v42 = v66 - v65 + v41;
    v43 = (v42 + 3) & 0x1FFFFFFFCLL;
    v44 = v43 - v42;
    if (v43 != v42)
    {
      v45 = v42 - v43;
      do
      {
        v68[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
      }
      while (!__CFADD__(v45++, 1));
    }
    *(_DWORD *)v68 = v69;
    llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
    *(_DWORD *)v68 = HIDWORD(v69);
    llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
    if ((_DWORD)v69)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        *(_DWORD *)v68 = *(_DWORD *)((char *)v77 + v47);
        llvm::raw_ostream::write((llvm::raw_ostream *)v64, v68);
        ++v48;
        v47 += 16;
      }
      while (v48 < v69);
    }
    v67 = v44 + v42;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v64);
    free(v77);
    if ((_DWORD)v72)
    {
      v49 = v71;
      v50 = &v71[8 * v72];
      do
      {
        v51 = *(_QWORD *)v49;
        if (*(_QWORD *)v49 == *(_QWORD *)&v71[8 * v72 - 8])
        {
          v53 = v70[0];
        }
        else
        {
          v52 = ((unint64_t)(v49 - v71) >> 10) & 0x1FFFFFF;
          if (v52 >= 0x1E)
            LOBYTE(v52) = 30;
          v53 = v51 + (4096 << v52);
        }
        for (j = ((v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; j <= v53; j += 176)
          sub_22F35C674((char **)(j - 168));
        v49 += 8;
      }
      while (v49 != v50);
    }
    if ((_DWORD)v75)
    {
      v55 = v74;
      v56 = &v74[2 * v75];
      do
      {
        v57 = *v55 + v55[1];
        for (k = ((*v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; k <= v57; k += 176)
          sub_22F35C674((char **)(k - 168));
        v55 += 2;
      }
      while (v55 != v56);
    }
    sub_22E6188F4((uint64_t)v70);
    sub_22E3B4EF4((uint64_t)v70);
    v2 = (uint64_t)v63;
    v59 = sub_22F35DD10((uint64_t)v63);
    *(_DWORD *)(v62 + 64) = 0;
    sub_22F35DE38(v63, v62 + 56, v59, &v67, (uint64_t)&v78);
    if (v78 != v80)
      free(v78);
    goto LABEL_2;
  }
  v61 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2B2E8(v61);
}

void sub_22EF2B2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  int v26;
  uint64_t i;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t j;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t k;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::raw_ostream *v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72[8];
  uint64_t v73;
  _QWORD v74[2];
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[2];
  void *v81;
  void *v82;
  __int128 v83;
  _QWORD v84[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v84[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0x12u, 3u);
  if (!*(_DWORD *)(v3 + 776))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v82 = v84;
  v83 = xmmword_22F45FB10;
  v71 = 0;
  v74[0] = 0;
  v74[1] = 0;
  v75 = (char *)&v77;
  v76 = 0x400000000;
  v78 = v80;
  v79 = 0;
  v80[0] = 0;
  v80[1] = 0;
  v73 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v67 = (llvm::raw_ostream *)v2;
    v81 = v4;
    v5 = *(_QWORD *)(v3 + 768);
    v6 = *(unsigned int *)(v3 + 784);
    v7 = (unsigned int *)(v5 + 96 * v6);
    v66 = v3;
    if (*(_DWORD *)(v3 + 776))
    {
      if ((_DWORD)v6)
      {
        v64 = 96 * v6;
        v8 = *(unsigned int **)(v3 + 768);
        while (*v8 >= 0xFFFFFFFE)
        {
          v8 += 24;
          v64 -= 96;
          if (!v64)
            goto LABEL_5;
        }
      }
      else
      {
        v8 = *(unsigned int **)(v3 + 768);
      }
    }
    else
    {
LABEL_5:
      v8 = (unsigned int *)(v5 + 96 * v6);
    }
    v9 = (unsigned int *)(v5 + 96 * v6);
    while (v8 != v9)
    {
      v11 = *v8;
      v12 = v73;
      ++HIDWORD(v73);
      if (3 * (int)v73 <= (4 * HIDWORD(v73)))
      {
        sub_22EF3960C((unsigned int *)&v73, (2 * v73));
        v12 = v73;
      }
      v13 = (char *)v81;
      v14 = sub_22E3CD3D4((uint64_t)v74, 112, 3);
      *(_DWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v14 + 24;
      *(_QWORD *)(v14 + 16) = 0x100000000;
      if (v8[4])
        sub_22E9176AC(v14 + 8, (uint64_t)(v8 + 2));
      *(_QWORD *)(v14 + 96) = 0;
      v15 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
      {
        v20 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v20 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v20;
        __cxa_guard_release(&qword_253E4AB98);
      }
      v16 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69
                                                                      * (qword_253E4AB90 + 8 * v11)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) >> 47))) >> 47));
      *(_QWORD *)(v14 + 104) = v16;
      v17 = &v13[16 * (v16 & (v12 - 1))];
      *(_QWORD *)(v14 + 96) = *((_QWORD *)v17 + 1);
      ++*((_DWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v14;
      v18 = v8 + 24;
      while (v18 != v7)
      {
        v19 = *v18;
        v18 += 24;
        if (v19 <= 0xFFFFFFFD)
        {
          v8 = v18 - 24;
          goto LABEL_21;
        }
      }
      v8 = v7;
LABEL_21:
      ;
    }
    sub_22F242C48((uint64_t)v68, (uint64_t)&v82);
    *(_DWORD *)v72 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
    if (HIDWORD(v73) >= 3)
    {
      v21 = ((4 * HIDWORD(v73)) / 6uLL) | ((4 * HIDWORD(v73)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v10 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v10 = 1;
    }
    if (v10 == (_DWORD)v73 || (sub_22EF3960C((unsigned int *)&v73, v10), (_DWORD)v73))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v81 + 16 * v23;
        v25 = (uint64_t *)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v68[0] + 80))(v68);
          *(_DWORD *)v24 = v26 + v70 - v69;
          *(_WORD *)v72 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
          for (i = *v25; i; i = *(_QWORD *)(i + 96))
          {
            *(_QWORD *)v72 = *(_QWORD *)(i + 104);
            llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
            v28 = *(_DWORD *)(i + 16);
            if (v28)
            {
              v29 = *(_QWORD *)(i + 8);
              v30 = v29 + 72 * v28;
              v31 = 2;
              do
              {
                v32 = *(_QWORD *)(v29 + 8);
                if (*(uint64_t *)v29 < 0)
                  v33 = 9;
                else
                  v33 = 5;
                if ((int)v32 < 0)
                  v33 += 4;
                if (v32 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 4;
                v35 = v34 + v31;
                v36 = *(_BYTE *)(v29 + 39) & 0x7F;
                if (*(char *)(v29 + 39) < 0)
                  v36 = *(_DWORD *)(v29 + 24);
                v37 = *(char *)(v29 + 71);
                if (v37 >= 0)
                  v38 = v37 & 0x7F;
                else
                  v38 = *(_DWORD *)(v29 + 56);
                v31 = v36 + v38 + v35 + 5;
                v29 += 72;
              }
              while (v29 != v30);
            }
            else
            {
              LOWORD(v31) = 2;
            }
            *(_WORD *)v72 = 4;
            llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
            *(_WORD *)v72 = v31;
            llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
            *(_DWORD *)v72 = *(_DWORD *)i;
            llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
            v39 = *(unsigned int *)(i + 16);
            v40 = 126 - 2 * __clz(v39);
            if ((_DWORD)v39)
              v41 = v40;
            else
              v41 = 0;
            sub_22EF396E0(*(_QWORD *)(i + 8), *(_QWORD *)(i + 8) + 72 * v39, v41, 1);
            *(_WORD *)v72 = *(_DWORD *)(i + 16);
            llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
            v42 = *(_DWORD *)(i + 16);
            if (v42)
            {
              v43 = *(_QWORD **)(i + 8);
              v44 = &v43[9 * v42];
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v68, v43);
                sub_22EF30CA4((llvm::raw_ostream *)v68, (uint64_t)(v43 + 2));
                v43 += 9;
              }
              while (v43 != v44);
            }
          }
        }
        ++v23;
      }
      while (v23 < v73);
    }
    v45 = (*(uint64_t (**)(_QWORD *))(v68[0] + 80))(v68);
    v46 = v70 - v69 + v45;
    v47 = (v46 + 3) & 0x1FFFFFFFCLL;
    v48 = v47 - v46;
    if (v47 != v46)
    {
      v49 = v46 - v47;
      do
      {
        v72[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
      }
      while (!__CFADD__(v49++, 1));
    }
    *(_DWORD *)v72 = v73;
    llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
    *(_DWORD *)v72 = HIDWORD(v73);
    llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
    v2 = (uint64_t)v67;
    if ((_DWORD)v73)
    {
      v51 = 0;
      v52 = 0;
      do
      {
        *(_DWORD *)v72 = *(_DWORD *)((char *)v81 + v51);
        llvm::raw_ostream::write((llvm::raw_ostream *)v68, v72);
        ++v52;
        v51 += 16;
      }
      while (v52 < v73);
    }
    v71 = v48 + v46;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v68);
    free(v81);
    if ((_DWORD)v76)
    {
      v53 = v75;
      v54 = &v75[8 * v76];
      do
      {
        v55 = *(_QWORD *)v53;
        if (*(_QWORD *)v53 == *(_QWORD *)&v75[8 * v76 - 8])
        {
          v57 = v74[0];
        }
        else
        {
          v56 = ((unint64_t)(v53 - v75) >> 10) & 0x1FFFFFF;
          if (v56 >= 0x1E)
            LOBYTE(v56) = 30;
          v57 = v55 + (4096 << v56);
        }
        for (j = ((v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 112; j <= v57; j += 112)
          sub_22F35C594((char **)(j - 104));
        v53 += 8;
      }
      while (v53 != v54);
    }
    if ((_DWORD)v79)
    {
      v59 = v78;
      v60 = &v78[2 * v79];
      do
      {
        v61 = *v59 + v59[1];
        for (k = ((*v59 + 7) & 0xFFFFFFFFFFFFFFF8) + 112; k <= v61; k += 112)
          sub_22F35C594((char **)(k - 104));
        v59 += 2;
      }
      while (v59 != v60);
    }
    sub_22E6188F4((uint64_t)v74);
    sub_22E3B4EF4((uint64_t)v74);
    v63 = sub_22F35DD10((uint64_t)v67);
    *(_DWORD *)(v66 + 64) = 0;
    sub_22F35DE38(v67, v66 + 56, v63, &v71, (uint64_t)&v82);
    if (v82 != v84)
      free(v82);
    goto LABEL_2;
  }
  v65 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2BA30(v65);
}

void sub_22EF2BA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int **v25;
  int v26;
  unsigned int *i;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t j;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t k;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::raw_ostream *v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  char v70[8];
  uint64_t v71;
  _QWORD v72[2];
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[2];
  void *v79;
  void *v80;
  __int128 v81;
  _QWORD v82[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v82[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0x10u, 3u);
  if (!*(_DWORD *)(v3 + 800))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v80 = v82;
  v81 = xmmword_22F45FB10;
  v69 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = (char *)&v75;
  v74 = 0x400000000;
  v76 = v78;
  v77 = 0;
  v78[0] = 0;
  v78[1] = 0;
  v71 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v65 = (llvm::raw_ostream *)v2;
    v79 = v4;
    v5 = *(_QWORD *)(v3 + 792);
    v6 = *(_DWORD *)(v3 + 808);
    v7 = (unsigned int *)(v5 + 176 * v6);
    v64 = v3;
    if (*(_DWORD *)(v3 + 800))
    {
      if (v6)
      {
        v62 = 176 * v6;
        v8 = *(unsigned int **)(v3 + 792);
        while (*v8 >= 0xFFFFFFFE)
        {
          v8 += 44;
          v62 -= 176;
          if (!v62)
            goto LABEL_5;
        }
      }
      else
      {
        v8 = *(unsigned int **)(v3 + 792);
      }
    }
    else
    {
LABEL_5:
      v8 = (unsigned int *)(v5 + 176 * v6);
    }
    v9 = (unsigned int *)(v5 + 176 * v6);
    while (v8 != v9)
    {
      v11 = *v8;
      v12 = v71;
      ++HIDWORD(v71);
      if (3 * (int)v71 <= (4 * HIDWORD(v71)))
      {
        sub_22EF32E1C((unsigned int *)&v71, (2 * v71));
        v12 = v71;
      }
      v13 = (char *)v79;
      v14 = sub_22E3CD3D4((uint64_t)v72, 192, 3);
      *(_DWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v14 + 24;
      *(_QWORD *)(v14 + 16) = 0x100000000;
      if (v8[4])
        sub_22E9171E4(v14 + 8, (uint64_t *)v8 + 1);
      *(_QWORD *)(v14 + 176) = 0;
      v15 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
      {
        v20 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v20 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v20;
        __cxa_guard_release(&qword_253E4AB98);
      }
      v16 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69
                                                                      * (qword_253E4AB90 + 8 * v11)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) >> 47))) >> 47));
      *(_QWORD *)(v14 + 184) = v16;
      v17 = &v13[16 * (v16 & (v12 - 1))];
      *(_QWORD *)(v14 + 176) = *((_QWORD *)v17 + 1);
      ++*((_DWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v14;
      v18 = v8 + 44;
      while (v18 != v7)
      {
        v19 = *v18;
        v18 += 44;
        if (v19 <= 0xFFFFFFFD)
        {
          v8 = v18 - 44;
          goto LABEL_21;
        }
      }
      v8 = v7;
LABEL_21:
      ;
    }
    sub_22F242C48((uint64_t)v66, (uint64_t)&v80);
    *(_DWORD *)v70 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    if (HIDWORD(v71) >= 3)
    {
      v21 = ((4 * HIDWORD(v71)) / 6uLL) | ((4 * HIDWORD(v71)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v10 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v10 = 1;
    }
    if (v10 == (_DWORD)v71 || (sub_22EF32E1C((unsigned int *)&v71, v10), (_DWORD)v71))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v79 + 16 * v23;
        v25 = (unsigned int **)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v66[0] + 80))(v66);
          *(_DWORD *)v24 = v26 + v68 - v67;
          *(_WORD *)v70 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
          for (i = *v25; i; i = (unsigned int *)*((_QWORD *)i + 22))
          {
            *(_QWORD *)v70 = *((_QWORD *)i + 23);
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v28 = i[4];
            if (v28)
            {
              v29 = (uint64_t *)*((_QWORD *)i + 1);
              v30 = &v29[19 * v28];
              v31 = 2;
              do
              {
                v32 = v29[1];
                if (*v29 < 0)
                  v33 = 9;
                else
                  v33 = 5;
                if ((int)v32 < 0)
                  v33 += 4;
                if (v32 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 4;
                v31 += sub_22EF2E8CC((uint64_t)(v29 + 2)) + v34 + 1;
                v29 += 19;
              }
              while (v29 != v30);
            }
            else
            {
              LOWORD(v31) = 2;
            }
            strcpy(v70, "\b");
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            *(_WORD *)v70 = v31;
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            *(_QWORD *)v70 = (unint64_t)*i << 33;
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v35 = i[4];
            v36 = 126 - 2 * __clz(v35);
            if ((_DWORD)v35)
              v37 = v36;
            else
              v37 = 0;
            sub_22EF3BE48(*((_QWORD *)i + 1), (_OWORD *)(*((_QWORD *)i + 1) + 152 * v35), v37, 1);
            *(_WORD *)v70 = i[4];
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v38 = i[4];
            if (v38)
            {
              v39 = *((_QWORD *)i + 1);
              v40 = v39 + 152 * v38;
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v66, (_QWORD *)v39);
                v41 = *(_QWORD *)(v39 + 140);
                if ((v41 & 0xFF00000000) != 0)
                  v42 = 4 * v41 + 4;
                else
                  v42 = 0;
                v70[0] = v42 | (*(unsigned __int8 *)(v39 + 136) << 31 >> 31) & (*(_BYTE *)(v39 + 136) & 2 | 1);
                llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
                sub_22EF30B14((llvm::raw_ostream *)v66, v39 + 16);
                v39 += 152;
              }
              while (v39 != v40);
            }
          }
        }
        ++v23;
      }
      while (v23 < v71);
    }
    v43 = (*(uint64_t (**)(_QWORD *))(v66[0] + 80))(v66);
    v44 = v68 - v67 + v43;
    v45 = (v44 + 3) & 0x1FFFFFFFCLL;
    v46 = v45 - v44;
    if (v45 != v44)
    {
      v47 = v44 - v45;
      do
      {
        v70[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
      }
      while (!__CFADD__(v47++, 1));
    }
    *(_DWORD *)v70 = v71;
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    *(_DWORD *)v70 = HIDWORD(v71);
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    v2 = (uint64_t)v65;
    if ((_DWORD)v71)
    {
      v49 = 0;
      v50 = 0;
      do
      {
        *(_DWORD *)v70 = *(_DWORD *)((char *)v79 + v49);
        llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
        ++v50;
        v49 += 16;
      }
      while (v50 < v71);
    }
    v69 = v46 + v44;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v66);
    free(v79);
    if ((_DWORD)v74)
    {
      v51 = v73;
      v52 = &v73[8 * v74];
      do
      {
        v53 = *(_QWORD *)v51;
        if (*(_QWORD *)v51 == *(_QWORD *)&v73[8 * v74 - 8])
        {
          v55 = v72[0];
        }
        else
        {
          v54 = ((unint64_t)(v51 - v73) >> 10) & 0x1FFFFFF;
          if (v54 >= 0x1E)
            LOBYTE(v54) = 30;
          v55 = v53 + (4096 << v54);
        }
        for (j = ((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; j <= v55; j += 192)
          sub_22F35C4B4((char **)(j - 184));
        v51 += 8;
      }
      while (v51 != v52);
    }
    if ((_DWORD)v77)
    {
      v57 = v76;
      v58 = &v76[2 * v77];
      do
      {
        v59 = *v57 + v57[1];
        for (k = ((*v57 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; k <= v59; k += 192)
          sub_22F35C4B4((char **)(k - 184));
        v57 += 2;
      }
      while (v57 != v58);
    }
    sub_22E6188F4((uint64_t)v72);
    sub_22E3B4EF4((uint64_t)v72);
    v61 = sub_22F35DD10((uint64_t)v65);
    *(_DWORD *)(v64 + 64) = 0;
    sub_22F35DE38(v65, v64 + 56, v61, &v69, (uint64_t)&v80);
    if (v80 != v82)
      free(v80);
    goto LABEL_2;
  }
  v63 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2C194(v63);
}

void sub_22EF2C194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int **v25;
  int v26;
  unsigned int *i;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t j;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t k;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::raw_ostream *v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  char v70[8];
  uint64_t v71;
  _QWORD v72[2];
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[2];
  void *v79;
  void *v80;
  __int128 v81;
  _QWORD v82[514];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v82[512] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C(v1, 0x11u, 3u);
  if (!*(_DWORD *)(v3 + 824))
  {
LABEL_2:
    sub_22E7416F4(v2);
    return;
  }
  v80 = v82;
  v81 = xmmword_22F45FB10;
  v69 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = (char *)&v75;
  v74 = 0x400000000;
  v76 = v78;
  v77 = 0;
  v78[0] = 0;
  v78[1] = 0;
  v71 = 64;
  v4 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4)
  {
    v65 = (llvm::raw_ostream *)v2;
    v79 = v4;
    v5 = *(_QWORD *)(v3 + 816);
    v6 = *(_DWORD *)(v3 + 832);
    v7 = (unsigned int *)(v5 + 168 * v6);
    v64 = v3;
    if (*(_DWORD *)(v3 + 824))
    {
      if (v6)
      {
        v62 = 168 * v6;
        v8 = *(unsigned int **)(v3 + 816);
        while (*v8 >= 0xFFFFFFFE)
        {
          v8 += 42;
          v62 -= 168;
          if (!v62)
            goto LABEL_5;
        }
      }
      else
      {
        v8 = *(unsigned int **)(v3 + 816);
      }
    }
    else
    {
LABEL_5:
      v8 = (unsigned int *)(v5 + 168 * v6);
    }
    v9 = (unsigned int *)(v5 + 168 * v6);
    while (v8 != v9)
    {
      v11 = *v8;
      v12 = v71;
      ++HIDWORD(v71);
      if (3 * (int)v71 <= (4 * HIDWORD(v71)))
      {
        sub_22EF2E7F8((unsigned int *)&v71, (2 * v71));
        v12 = v71;
      }
      v13 = (char *)v79;
      v14 = sub_22E3CD3D4((uint64_t)v72, 184, 3);
      *(_DWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v14 + 24;
      *(_QWORD *)(v14 + 16) = 0x100000000;
      if (v8[4])
        sub_22E917454(v14 + 8, (uint64_t *)v8 + 1);
      *(_QWORD *)(v14 + 168) = 0;
      v15 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
      {
        v20 = *MEMORY[0x24BED7368];
        if (!*MEMORY[0x24BED7368])
          v20 = 0xFF51AFD7ED558CCDLL;
        qword_253E4AB90 = v20;
        __cxa_guard_release(&qword_253E4AB98);
      }
      v16 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69
                                                                      * (qword_253E4AB90 + 8 * v11)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v11)) >> 47))) >> 47));
      *(_QWORD *)(v14 + 176) = v16;
      v17 = &v13[16 * (v16 & (v12 - 1))];
      *(_QWORD *)(v14 + 168) = *((_QWORD *)v17 + 1);
      ++*((_DWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v14;
      v18 = v8 + 42;
      while (v18 != v7)
      {
        v19 = *v18;
        v18 += 42;
        if (v19 <= 0xFFFFFFFD)
        {
          v8 = v18 - 42;
          goto LABEL_21;
        }
      }
      v8 = v7;
LABEL_21:
      ;
    }
    sub_22F242C48((uint64_t)v66, (uint64_t)&v80);
    *(_DWORD *)v70 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    if (HIDWORD(v71) >= 3)
    {
      v21 = ((4 * HIDWORD(v71)) / 6uLL) | ((4 * HIDWORD(v71)) / 3uLL);
      v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
      v10 = (((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8)) + 1;
    }
    else
    {
      v10 = 1;
    }
    if (v10 == (_DWORD)v71 || (sub_22EF2E7F8((unsigned int *)&v71, v10), (_DWORD)v71))
    {
      v23 = 0;
      do
      {
        v24 = (char *)v79 + 16 * v23;
        v25 = (unsigned int **)(v24 + 8);
        if (*((_QWORD *)v24 + 1))
        {
          v26 = (*(uint64_t (**)(_QWORD *))(v66[0] + 80))(v66);
          *(_DWORD *)v24 = v26 + v68 - v67;
          *(_WORD *)v70 = *((_DWORD *)v24 + 1);
          llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
          for (i = *v25; i; i = (unsigned int *)*((_QWORD *)i + 21))
          {
            *(_QWORD *)v70 = *((_QWORD *)i + 22);
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v28 = i[4];
            if (v28)
            {
              v29 = (uint64_t *)*((_QWORD *)i + 1);
              v30 = &v29[18 * v28];
              v31 = 2;
              do
              {
                v32 = v29[1];
                if (*v29 < 0)
                  v33 = 9;
                else
                  v33 = 5;
                if ((int)v32 < 0)
                  v33 += 4;
                if (v32 >= 0)
                  v34 = v33;
                else
                  v34 = v33 + 4;
                v31 += sub_22EF2E8CC((uint64_t)(v29 + 2)) + v34 + 1;
                v29 += 18;
              }
              while (v29 != v30);
            }
            else
            {
              LOWORD(v31) = 2;
            }
            strcpy(v70, "\b");
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            *(_WORD *)v70 = v31;
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            *(_QWORD *)v70 = (unint64_t)*i << 33;
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v35 = i[4];
            v36 = 126 - 2 * __clz(v35);
            if ((_DWORD)v35)
              v37 = v36;
            else
              v37 = 0;
            sub_22EF3E120(*((_QWORD *)i + 1), *((_QWORD *)i + 1) + 144 * v35, v37, 1);
            *(_WORD *)v70 = i[4];
            llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
            v38 = i[4];
            if (v38)
            {
              v39 = (_QWORD *)*((_QWORD *)i + 1);
              v40 = &v39[18 * v38];
              do
              {
                sub_22EF2E960((llvm::raw_ostream *)v66, v39);
                v41 = v39[17];
                if ((v41 & 0xFF00000000) != 0)
                  v42 = v41 + 1;
                else
                  v42 = 0;
                v70[0] = v42;
                llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
                sub_22EF30B14((llvm::raw_ostream *)v66, (uint64_t)(v39 + 2));
                v39 += 18;
              }
              while (v39 != v40);
            }
          }
        }
        ++v23;
      }
      while (v23 < v71);
    }
    v43 = (*(uint64_t (**)(_QWORD *))(v66[0] + 80))(v66);
    v44 = v68 - v67 + v43;
    v45 = (v44 + 3) & 0x1FFFFFFFCLL;
    v46 = v45 - v44;
    if (v45 != v44)
    {
      v47 = v44 - v45;
      do
      {
        v70[0] = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
      }
      while (!__CFADD__(v47++, 1));
    }
    *(_DWORD *)v70 = v71;
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    *(_DWORD *)v70 = HIDWORD(v71);
    llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
    v2 = (uint64_t)v65;
    if ((_DWORD)v71)
    {
      v49 = 0;
      v50 = 0;
      do
      {
        *(_DWORD *)v70 = *(_DWORD *)((char *)v79 + v49);
        llvm::raw_ostream::write((llvm::raw_ostream *)v66, v70);
        ++v50;
        v49 += 16;
      }
      while (v50 < v71);
    }
    v69 = v46 + v44;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v66);
    free(v79);
    if ((_DWORD)v74)
    {
      v51 = v73;
      v52 = &v73[8 * v74];
      do
      {
        v53 = *(_QWORD *)v51;
        if (*(_QWORD *)v51 == *(_QWORD *)&v73[8 * v74 - 8])
        {
          v55 = v72[0];
        }
        else
        {
          v54 = ((unint64_t)(v51 - v73) >> 10) & 0x1FFFFFF;
          if (v54 >= 0x1E)
            LOBYTE(v54) = 30;
          v55 = v53 + (4096 << v54);
        }
        for (j = ((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 184; j <= v55; j += 184)
          sub_22F35C3D4((char **)(j - 176));
        v51 += 8;
      }
      while (v51 != v52);
    }
    if ((_DWORD)v77)
    {
      v57 = v76;
      v58 = &v76[2 * v77];
      do
      {
        v59 = *v57 + v57[1];
        for (k = ((*v57 + 7) & 0xFFFFFFFFFFFFFFF8) + 184; k <= v59; k += 184)
          sub_22F35C3D4((char **)(k - 176));
        v57 += 2;
      }
      while (v57 != v58);
    }
    sub_22E6188F4((uint64_t)v72);
    sub_22E3B4EF4((uint64_t)v72);
    v61 = sub_22F35DD10((uint64_t)v65);
    *(_DWORD *)(v64 + 64) = 0;
    sub_22F35DE38(v65, v64 + 56, v61, &v69, (uint64_t)&v80);
    if (v80 != v82)
      free(v80);
    goto LABEL_2;
  }
  v63 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  sub_22EF2C8D8(v63);
}

uint64_t *sub_22EF2C8D8(uint64_t *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 __dst;
  unint64_t v15;

  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)(v8 + 16) = 0x1000000000;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v8 + 72;
  *(_QWORD *)(v8 + 64) = 0x4000000000;
  *(_QWORD *)(v8 + 584) = 0;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_BYTE *)(v8 + 616) = 0;
  *(_OWORD *)(v8 + 624) = 0u;
  *(_DWORD *)(v8 + 640) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_DWORD *)(v8 + 688) = 0;
  *(_OWORD *)(v8 + 672) = 0u;
  *(_DWORD *)(v8 + 712) = 0;
  *(_OWORD *)(v8 + 696) = 0u;
  *(_DWORD *)(v8 + 736) = 0;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_DWORD *)(v8 + 760) = 0;
  *(_OWORD *)(v8 + 744) = 0u;
  *(_DWORD *)(v8 + 784) = 0;
  *(_OWORD *)(v8 + 768) = 0u;
  *(_DWORD *)(v8 + 808) = 0;
  *(_OWORD *)(v8 + 792) = 0u;
  *(_DWORD *)(v8 + 832) = 0;
  *(_OWORD *)(v8 + 816) = 0u;
  *a1 = v8;
  if (!a2)
  {
    __dst = 0uLL;
    v15 = 0;
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v15 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v15) = a3;
    p_dst = &__dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(p_dst, a2, a3);
LABEL_11:
  *((_BYTE *)p_dst + a3) = 0;
  v8 = *a1;
LABEL_12:
  v12 = v8 + 584;
  if (*(char *)(v8 + 607) < 0)
    operator delete(*(void **)v12);
  *(_OWORD *)v12 = __dst;
  *(_QWORD *)(v12 + 16) = v15;
  *(_QWORD *)(*a1 + 608) = a4;
  return a1;
}

uint64_t sub_22EF2CA74(unsigned int **a1, const void *a2, size_t a3, int a4, uint64_t a5, int *a6, uint64_t a7)
{
  unint64_t v12;
  unsigned int *v13;
  int *v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  char *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  _DWORD v52[3];
  void *v53;
  uint64_t v54;
  _BYTE v55[144];
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[16];
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  void *__p;
  char v67;
  char v68;
  char v69;
  char *v70;
  uint64_t v71;
  _QWORD v72[20];

  v72[18] = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)sub_22F35BB88(*a1, a2, a3) >> 33;
  v13 = *a1;
  v56 = 0;
  if ((sub_22F35E2DC(*((_QWORD *)v13 + 78), v13[160], v12, a4 ^ 1u, &v56) & 1) != 0)
    v14 = v56;
  else
    v14 = (int *)(*((_QWORD *)v13 + 78) + 176 * v13[160]);
  v15 = *a1;
  if (v14 == (int *)(*((_QWORD *)*a1 + 78) + 176 * (*a1)[160]))
  {
    v16 = (uint64_t)(v15 + 156);
    v17 = v15[158] + 1;
    v52[0] = v17;
    v52[1] = v17;
    v50 = (char *)v72;
    v70 = (char *)v72;
    v71 = 0x100000000;
    v49 = v55;
    v53 = v55;
    v54 = 0x100000000;
    v18 = 0x100000000;
    if (a4)
      v18 = 0;
    v56 = (int *)(v12 | v18);
    LODWORD(v57) = v17;
    v58 = v60;
    v59 = 0x100000000;
    sub_22F35E3F0((uint64_t)&v51, v16, (uint64_t)&v56, (int *)&v57);
    v14 = v51;
    v19 = (char *)v58;
    if ((_DWORD)v59)
    {
      v48 = a5;
      v20 = 144 * v59;
      do
      {
        v21 = (void **)&v19[v20];
        if (v19[v20 - 16])
        {
          if (*((char *)v21 - 17) < 0)
            operator delete(*(v21 - 5));
          *((_BYTE *)v21 - 16) = 0;
        }
        if (*((_BYTE *)v21 - 48))
        {
          if (v19[v20 - 49] < 0)
            operator delete(*(v21 - 9));
          *((_BYTE *)v21 - 48) = 0;
        }
        v22 = (void **)&v19[v20];
        if (v19[v20 - 73] < 0)
          operator delete(*(v22 - 12));
        if (*((char *)v22 - 105) < 0)
          operator delete(*(v21 - 16));
        v20 -= 144;
      }
      while (v20);
      v19 = (char *)v58;
      a5 = v48;
    }
    if (v19 != v60)
      free(v19);
    v23 = (char *)v53;
    if ((_DWORD)v54)
    {
      v24 = a5;
      v25 = 144 * v54;
      do
      {
        v26 = (void **)&v23[v25];
        if (v23[v25 - 16])
        {
          if (*((char *)v26 - 17) < 0)
            operator delete(*(v26 - 5));
          *((_BYTE *)v26 - 16) = 0;
        }
        if (*((_BYTE *)v26 - 48))
        {
          if (v23[v25 - 49] < 0)
            operator delete(*(v26 - 9));
          *((_BYTE *)v26 - 48) = 0;
        }
        v27 = (void **)&v23[v25];
        if (v23[v25 - 73] < 0)
          operator delete(*(v27 - 12));
        if (*((char *)v27 - 105) < 0)
          operator delete(*(v26 - 16));
        v25 -= 144;
      }
      while (v25);
      v23 = (char *)v53;
      a5 = v24;
    }
    if (v23 != v49)
      free(v23);
    sub_22E742CE8((uint64_t)(*a1 + 162), v52)[1] = v12;
    v28 = v70;
    if ((_DWORD)v71)
    {
      v29 = 144 * v71;
      do
      {
        v30 = (void **)&v28[v29];
        if (v28[v29 - 16])
        {
          if (*((char *)v30 - 17) < 0)
            operator delete(*(v30 - 5));
          *((_BYTE *)v30 - 16) = 0;
        }
        if (*((_BYTE *)v30 - 48))
        {
          if (v28[v29 - 49] < 0)
            operator delete(*(v30 - 9));
          *((_BYTE *)v30 - 48) = 0;
        }
        v31 = (void **)&v28[v29];
        if (v28[v29 - 73] < 0)
          operator delete(*(v31 - 12));
        if (*((char *)v31 - 105) < 0)
          operator delete(*(v30 - 16));
        v29 -= 144;
      }
      while (v29);
      v28 = v70;
    }
    if (v28 != v50)
      free(v28);
  }
  v32 = v14[6];
  if ((_DWORD)v32)
  {
    v33 = *((_QWORD *)v14 + 2) + 16;
    v34 = 144 * v32;
    while (1)
    {
      v35 = *(_QWORD *)(v33 - 16);
      if ((_DWORD)v35 == (_DWORD)a6
        && ((v35 ^ (unint64_t)a6) & 0x7FFFFFFF00000000 | (*(_QWORD *)(v33 - 8) ^ a7) & 0x7FFFFFFF7FFFFFFFLL) == 0)
      {
        break;
      }
      v33 += 144;
      v34 -= 144;
      if (!v34)
        goto LABEL_68;
    }
    sub_22F35BC24(v33, a5);
  }
  else
  {
LABEL_68:
    v56 = a6;
    v57 = a7;
    sub_22F30BE10((uint64_t)&v58, a5);
    v69 = *(_BYTE *)(a5 + 120);
    v37 = sub_22EF402D0((uint64_t)(v14 + 4), (unint64_t)&v56, 1);
    v38 = *((_QWORD *)v14 + 2);
    v39 = v14[6];
    v40 = v38 + 144 * v39;
    *(_OWORD *)v40 = *(_OWORD *)v37;
    v41 = v40 + 16;
    v42 = *(_OWORD *)(v37 + 16);
    *(_QWORD *)(v40 + 32) = *(_QWORD *)(v37 + 32);
    *(_OWORD *)(v40 + 16) = v42;
    *(_QWORD *)(v37 + 24) = 0;
    *(_QWORD *)(v37 + 32) = 0;
    *(_QWORD *)(v37 + 16) = 0;
    *(_BYTE *)(v40 + 40) = *(_BYTE *)(v37 + 40);
    v43 = *(_OWORD *)(v37 + 48);
    *(_QWORD *)(v40 + 64) = *(_QWORD *)(v37 + 64);
    *(_OWORD *)(v40 + 48) = v43;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 64) = 0;
    *(_QWORD *)(v37 + 48) = 0;
    *(_BYTE *)(v40 + 72) = 0;
    v44 = v40 + 72;
    *(_BYTE *)(v44 + 24) = 0;
    if (*(_BYTE *)(v37 + 96))
    {
      v45 = *(_OWORD *)(v37 + 72);
      *(_QWORD *)(v44 + 16) = *(_QWORD *)(v37 + 88);
      *(_OWORD *)v44 = v45;
      *(_QWORD *)(v37 + 80) = 0;
      *(_QWORD *)(v37 + 88) = 0;
      *(_QWORD *)(v37 + 72) = 0;
      *(_BYTE *)(v41 + 80) = 1;
    }
    *(_BYTE *)(v41 + 88) = 0;
    *(_BYTE *)(v41 + 112) = 0;
    if (*(_BYTE *)(v37 + 128))
    {
      v46 = *(_OWORD *)(v37 + 104);
      *(_QWORD *)(v41 + 104) = *(_QWORD *)(v37 + 120);
      *(_OWORD *)(v41 + 88) = v46;
      *(_QWORD *)(v37 + 112) = 0;
      *(_QWORD *)(v37 + 120) = 0;
      *(_QWORD *)(v37 + 104) = 0;
      *(_BYTE *)(v41 + 112) = 1;
    }
    *(_BYTE *)(v38 + 144 * v39 + 136) = *(_BYTE *)(v37 + 136);
    ++v14[6];
    if (v68)
    {
      if (v67 < 0)
        operator delete(__p);
      v68 = 0;
    }
    if (v65)
    {
      if (v64 < 0)
        operator delete(v63);
      v65 = 0;
    }
    if (v62 < 0)
      operator delete(v61);
    if ((v60[7] & 0x80000000) != 0)
      operator delete(v58);
  }
  return v14[2];
}

void sub_22EF2CF70(unsigned int **a1, int a2, const void *a3, size_t a4, char a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14;
  uint64_t *v15;
  int *v16;
  uint64_t v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 __p;
  uint64_t v26;
  char v27;
  _DWORD v28[2];
  char v29;

  v14 = sub_22F35BB88(*a1, a3, a4);
  v15 = (uint64_t *)(*a1 + 168);
  v28[0] = a2;
  v28[1] = v14 >> 33;
  v29 = a5;
  v16 = sub_22F35E6D0(v15, (uint64_t)v28);
  v18[0] = a7;
  v18[1] = a8;
  if (*((char *)a6 + 23) < 0)
  {
    sub_22E3BB2B4(&v19, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v19 = *a6;
    v20 = *((_QWORD *)a6 + 2);
  }
  v17 = (uint64_t)(v16 + 4);
  v21 = *((_BYTE *)a6 + 24);
  if (*((char *)a6 + 55) < 0)
  {
    sub_22E3BB2B4(&v22, *((void **)a6 + 4), *((_QWORD *)a6 + 5));
  }
  else
  {
    v22 = a6[2];
    v23 = *((_QWORD *)a6 + 6);
  }
  v24 = *((_BYTE *)a6 + 56);
  if (*((char *)a6 + 87) < 0)
  {
    sub_22E3BB2B4(&__p, *((void **)a6 + 8), *((_QWORD *)a6 + 9));
  }
  else
  {
    __p = a6[4];
    v26 = *((_QWORD *)a6 + 10);
  }
  v27 = *((_BYTE *)a6 + 88);
  sub_22EF2D0D4(v17, (unint64_t)v18);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)v19);
}

__n128 sub_22EF2D0D4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = sub_22EF40A6C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 112 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  v6 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(v3 + 72);
  result = *(__n128 *)(v3 + 80);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v3 + 96);
  *(__n128 *)(v4 + 80) = result;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(v3 + 104);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22EF2D17C(uint64_t *a1, int a2, __int128 *a3, char a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  __int128 v41;
  void *v42;
  void *__p;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _DWORD v47[2];
  char v48;
  __int128 v49;
  uint64_t v50;
  int v51;

  v51 = a2;
  v12 = *a1;
  v49 = *a3;
  v50 = *((_QWORD *)a3 + 2);
  v47[0] = a2;
  v47[1] = (unint64_t)sub_22F35BCC8(v12, (int *)&v49) >> 33;
  v48 = a4;
  v13 = sub_22F35E898(*a1 + 696, (uint64_t)v47);
  v33 = a6;
  v34 = a7;
  if (*((char *)a5 + 23) < 0)
  {
    sub_22E3BB2B4(&v35, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v35 = *a5;
    v36 = *((_QWORD *)a5 + 2);
  }
  v14 = (uint64_t)(v13 + 4);
  v37 = *((_BYTE *)a5 + 24);
  if (*((char *)a5 + 55) < 0)
  {
    sub_22E3BB2B4(&v38, *((void **)a5 + 4), *((_QWORD *)a5 + 5));
  }
  else
  {
    v38 = a5[2];
    v39 = *((_QWORD *)a5 + 6);
  }
  *(_OWORD *)v40 = *(__int128 *)((char *)a5 + 56);
  if (*((char *)a5 + 95) < 0)
  {
    sub_22E3BB2B4(&v41, *((void **)a5 + 9), *((_QWORD *)a5 + 10));
  }
  else
  {
    v41 = *(__int128 *)((char *)a5 + 72);
    v42 = (void *)*((_QWORD *)a5 + 11);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  sub_22E916C98(&__p, *((_QWORD *)a5 + 12), *((_QWORD *)a5 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a5 + 13) - *((_QWORD *)a5 + 12)) >> 5));
  v46 = *((_BYTE *)a5 + 120);
  sub_22EF2D544(v14, (unint64_t)&v33);
  if (__p)
  {
    sub_22E916AE0((uint64_t *)&__p);
    operator delete(__p);
  }
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if ((*((_BYTE *)a5 + 120) & 1) != 0)
  {
    v15 = *a1;
    v16 = *a1 + 624;
    LODWORD(v33) = sub_22E742CE8(v15 + 648, &v51)[1];
    BYTE4(v33) = 0;
    v17 = sub_22F35EA6C(v16, (uint64_t)&v33);
    v18 = v17[6];
    if ((_DWORD)v18)
    {
      v19 = (_BYTE *)(*((_QWORD *)v17 + 2) + 136);
      v20 = 144 * v18;
      while (1)
      {
        v21 = *((_QWORD *)v19 - 17);
        if ((_DWORD)v21 == (_DWORD)a6
          && ((v21 ^ a6) & 0x7FFFFFFF00000000 | (*((_QWORD *)v19 - 16) ^ a7) & 0x7FFFFFFF7FFFFFFFLL) == 0)
        {
          break;
        }
        v19 += 144;
        v20 -= 144;
        if (!v20)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      v33 = a6;
      v34 = a7;
      BYTE8(v41) = 0;
      LOBYTE(v42) = 0;
      LOBYTE(v45) = 0;
      v46 = 0;
      v36 = 0;
      v35 = 0uLL;
      v37 = 0;
      v39 = 0;
      v38 = 0uLL;
      LOBYTE(v40[0]) = 0;
      v23 = sub_22EF402D0((uint64_t)(v17 + 4), (unint64_t)&v33, 1);
      v24 = *((_QWORD *)v17 + 2);
      v25 = v17[6];
      v26 = v24 + 144 * v25;
      *(_OWORD *)v26 = *(_OWORD *)v23;
      v27 = v26 + 16;
      v28 = *(_OWORD *)(v23 + 16);
      *(_QWORD *)(v26 + 32) = *(_QWORD *)(v23 + 32);
      *(_OWORD *)(v26 + 16) = v28;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_BYTE *)(v26 + 40) = *(_BYTE *)(v23 + 40);
      v29 = *(_OWORD *)(v23 + 48);
      *(_QWORD *)(v26 + 64) = *(_QWORD *)(v23 + 64);
      *(_OWORD *)(v26 + 48) = v29;
      *(_QWORD *)(v23 + 56) = 0;
      *(_QWORD *)(v23 + 64) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_BYTE *)(v26 + 72) = 0;
      v30 = v26 + 72;
      *(_BYTE *)(v30 + 24) = 0;
      if (*(_BYTE *)(v23 + 96))
      {
        v31 = *(_OWORD *)(v23 + 72);
        *(_QWORD *)(v30 + 16) = *(_QWORD *)(v23 + 88);
        *(_OWORD *)v30 = v31;
        *(_QWORD *)(v23 + 80) = 0;
        *(_QWORD *)(v23 + 88) = 0;
        *(_QWORD *)(v23 + 72) = 0;
        *(_BYTE *)(v27 + 80) = 1;
      }
      *(_BYTE *)(v27 + 88) = 0;
      *(_BYTE *)(v27 + 112) = 0;
      if (*(_BYTE *)(v23 + 128))
      {
        v32 = *(_OWORD *)(v23 + 104);
        *(_QWORD *)(v27 + 104) = *(_QWORD *)(v23 + 120);
        *(_OWORD *)(v27 + 88) = v32;
        *(_QWORD *)(v23 + 112) = 0;
        *(_QWORD *)(v23 + 120) = 0;
        *(_QWORD *)(v23 + 104) = 0;
        *(_BYTE *)(v27 + 112) = 1;
      }
      *(_BYTE *)(v24 + 144 * v25 + 136) = *(_BYTE *)(v23 + 136);
      ++v17[6];
      if ((_BYTE)v45)
      {
        if (SHIBYTE(v44) < 0)
          operator delete(v42);
        LOBYTE(v45) = 0;
      }
      if (BYTE8(v41))
      {
        if (SBYTE7(v41) < 0)
          operator delete(v40[0]);
        BYTE8(v41) = 0;
      }
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v38);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)v35);
      v19 = (_BYTE *)(*((_QWORD *)v17 + 2) + 144 * v17[6] - 8);
    }
    *v19 |= 8u;
  }
}

__n128 sub_22EF2D544(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v3 = sub_22EF4133C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 144 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  v6 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(v3 + 72);
  v7 = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v3 + 104);
  *(_OWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  result = *(__n128 *)(v3 + 112);
  *(__n128 *)(v4 + 112) = result;
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v4 + 136) = *(_BYTE *)(v3 + 136);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22EF2D60C(unsigned int **a1, const void *a2, size_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 __p;
  uint64_t v22;
  int v23;

  v10 = sub_22F35BB88(*a1, a2, a3);
  v11 = (uint64_t)(*a1 + 180);
  v23 = v10 >> 33;
  v12 = sub_22EF413A4(v11, &v23);
  v14[0] = a5;
  v14[1] = a6;
  if (*((char *)a4 + 23) < 0)
  {
    sub_22E3BB2B4(&v15, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v15 = *a4;
    v16 = *((_QWORD *)a4 + 2);
  }
  v13 = (uint64_t)(v12 + 2);
  v17 = *((_BYTE *)a4 + 24);
  if (*((char *)a4 + 55) < 0)
  {
    sub_22E3BB2B4(&v18, *((void **)a4 + 4), *((_QWORD *)a4 + 5));
  }
  else
  {
    v18 = a4[2];
    v19 = *((_QWORD *)a4 + 6);
  }
  v20 = *((_BYTE *)a4 + 56);
  if (*((char *)a4 + 87) < 0)
  {
    sub_22E3BB2B4(&__p, *((void **)a4 + 8), *((_QWORD *)a4 + 9));
  }
  else
  {
    __p = a4[4];
    v22 = *((_QWORD *)a4 + 10);
  }
  sub_22EF2D74C(v13, (unint64_t)v14);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
}

__n128 sub_22EF2D74C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = sub_22EF41B90(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  v6 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v4 + 72) = *(_BYTE *)(v3 + 72);
  result = *(__n128 *)(v3 + 80);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v3 + 96);
  *(__n128 *)(v4 + 80) = result;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

__n128 sub_22EF2D7EC(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v3 = sub_22EF421BC(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 136 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(v3 + 40);
  v6 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(v3 + 72);
  v7 = *(_OWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 104) = *(_QWORD *)(v3 + 104);
  *(_OWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  result = *(__n128 *)(v3 + 112);
  *(__n128 *)(v4 + 112) = result;
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22EF2D8AC(unsigned int **a1, const void *a2, size_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 __p;
  uint64_t v22;
  int v23;

  v10 = sub_22F35BB88(*a1, a2, a3);
  v11 = (uint64_t *)(*a1 + 192);
  v23 = v10 >> 33;
  v12 = sub_22F35EE24(v11, &v23);
  v17[0] = a5;
  v17[1] = a6;
  if (*((char *)a4 + 23) < 0)
  {
    sub_22E3BB2B4(&v18, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v18 = *a4;
    v19 = *((_QWORD *)a4 + 2);
  }
  v20 = *((_BYTE *)a4 + 24);
  if (*((char *)a4 + 55) < 0)
  {
    sub_22E3BB2B4(&__p, *((void **)a4 + 4), *((_QWORD *)a4 + 5));
  }
  else
  {
    __p = a4[2];
    v22 = *((_QWORD *)a4 + 6);
  }
  v13 = sub_22EF42628((uint64_t)(v12 + 2), (unint64_t)v17, 1);
  v14 = *((_QWORD *)v12 + 1) + 72 * v12[4];
  *(_OWORD *)v14 = *(_OWORD *)v13;
  v15 = *(_OWORD *)(v13 + 16);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v13 + 32);
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v14 + 40) = *(_BYTE *)(v13 + 40);
  v16 = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  ++v12[4];
  if (SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
}

void sub_22EF2DA0C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 < a2)
    goto LABEL_2;
  if (v4 != a2)
  {
    if (v4 > a2)
    {
LABEL_6:
      a1[1] = a2;
      return;
    }
LABEL_2:
    if (a1[2] < a2)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v4 = a1[1];
    }
    if (v4 != a2)
      bzero((void *)(*a1 + v4), a2 - v4);
    goto LABEL_6;
  }
}

uint64_t sub_22EF2DA8C(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm *v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  int v13;
  void *v14;

  sub_22F35C358(a1 + 816);
  sub_22F35C438(a1 + 792);
  sub_22F35C518(a1 + 768);
  sub_22F35C5F8(a1 + 744);
  sub_22F35C6D8(a1 + 720);
  v2 = *(_DWORD *)(a1 + 712);
  v3 = *(llvm **)(a1 + 696);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_14;
  }
  v5 = (char **)((char *)v3 + 16);
  v6 = 176 * v2;
  do
  {
    v7 = *((_DWORD *)v5 - 4);
    if (v7 == -2)
    {
      if (*((_DWORD *)v5 - 3) != -2 || *((unsigned __int8 *)v5 - 8) != 254)
LABEL_13:
        v5 = sub_22F35C744(v5);
    }
    else if (v7 != -1 || *((_DWORD *)v5 - 3) != -1 || *((unsigned __int8 *)v5 - 8) != 255)
    {
      goto LABEL_13;
    }
    v5 += 22;
    v6 -= 176;
  }
  while (v6);
  v3 = *(llvm **)(a1 + 696);
  v4 = 176 * *(unsigned int *)(a1 + 712);
LABEL_14:
  llvm::deallocate_buffer(v3, (void *)v4);
  v8 = *(unsigned int *)(a1 + 688);
  v9 = *(llvm **)(a1 + 672);
  if (!(_DWORD)v8)
  {
    v10 = 0;
    goto LABEL_27;
  }
  v11 = (char **)((char *)v9 + 16);
  v12 = 144 * v8;
  while (2)
  {
    v13 = *((_DWORD *)v11 - 4);
    if (v13 == -2)
    {
      if (*((_DWORD *)v11 - 3) != -2 || *((unsigned __int8 *)v11 - 8) != 254)
LABEL_24:
        v11 = sub_22E918278(v11);
    }
    else if (v13 != -1 || *((_DWORD *)v11 - 3) != -1 || *((unsigned __int8 *)v11 - 8) != 255)
    {
      goto LABEL_24;
    }
    v11 += 18;
    v12 -= 144;
    if (v12)
      continue;
    break;
  }
  v9 = *(llvm **)(a1 + 672);
  v10 = 144 * *(unsigned int *)(a1 + 688);
LABEL_27:
  llvm::deallocate_buffer(v9, (void *)v10);
  llvm::deallocate_buffer(*(llvm **)(a1 + 648), (void *)(8 * *(unsigned int *)(a1 + 664)));
  sub_22F35C7A8((char **)(a1 + 624));
  llvm::deallocate_buffer(*(llvm **)(a1 + 624), (void *)(176 * *(unsigned int *)(a1 + 640)));
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  v14 = *(void **)(a1 + 56);
  if (v14 != (void *)(a1 + 72))
    free(v14);
  sub_22F35C820(a1 + 32);
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(48 * *(unsigned int *)(a1 + 48)));
  return sub_22F27B320(a1);
}

uint64_t sub_22EF2DC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      v7 = (void **)(a4 + 16);
      if (*(char *)(a4 + 39) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 39) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      *(_BYTE *)(a4 + 40) = *(_BYTE *)(v5 + 40);
      v9 = (void **)(a4 + 48);
      if (*(char *)(a4 + 71) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v5 + 71) = 0;
      *(_BYTE *)(v5 + 48) = 0;
      sub_22EF2DD4C(a4 + 72, (__int128 *)(v5 + 72));
      sub_22EF2DD4C(a4 + 104, (__int128 *)(v5 + 104));
      *(_BYTE *)(a4 + 136) = *(_BYTE *)(v5 + 136);
      a4 += 144;
      v5 += 144;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_22EF2DD4C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((_BYTE *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
    else
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_22EF2DDE8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_22EF2DE28(uint64_t *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  unint64_t v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v5 = 0x253E4A000uLL;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_253E4AB98);
    v5 = 0x253E4A000uLL;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v8;
      __cxa_guard_release(&qword_253E4AB98);
      v5 = 0x253E4A000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = *(_QWORD *)(v5 + 2960);
  return sub_22EF2DF1C((char *)v11, 0, v11, (char *)v12, v3, v2);
}

unint64_t sub_22EF2DF1C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_22E54F04C(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_22E9FFF78(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_22E54F2E8(a1, *(uint64_t *)v13, v10, a4);
}

void sub_22EF2DF94(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  if (v4)
  {
    sub_22F35D1E8(a1, (uint64_t)v4, (uint64_t)v4 + 48 * v3);
    llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    sub_22F35C274(a1);
  }
}

char *sub_22EF2E040(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = *((_BYTE *)a2 + 24);
  v5 = __dst + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
  }
  *(_OWORD *)(__dst + 56) = *(__int128 *)((char *)a2 + 56);
  v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_22E3BB2B4(v7, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v7 = v8;
  }
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  *((_QWORD *)__dst + 12) = 0;
  sub_22E916C98(__dst + 96, *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 5));
  return __dst;
}

uint64_t sub_22EF2E11C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    sub_22E916AE0((uint64_t *)(a1 + 96));
    operator delete(*v2);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

double sub_22EF2E188(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 1;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E070;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E1E8(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 16;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E0F0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E248(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 2;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E090;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E2A8(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  result = 0.0;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E0D0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E308(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 3;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E110;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E368(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 1;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E160;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E3C8(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 4;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E120;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22EF2E428(uint64_t a1)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)&result = 16;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v2) = xmmword_22F45E0C0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22EF2E488(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _BYTE *v13;
  unint64_t v14;
  char v15;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 16);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 24) & (count - 1));
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = (_QWORD *)llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF2E55C(v11, v12, v13, v14, v15);
  }
}

_BYTE *sub_22EF2E55C(_QWORD *a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 1 - v8 <= a4)
    {
      memcpy(a1, &__src + v8, 1 - v8);
      return (char *)a1 + 1 - v8;
    }
  }
  return a1;
}

void sub_22EF2E7F8(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 168);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 176) & (count - 1));
            *(_QWORD *)(v8 + 168) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF2E8CC(v11);
  }
}

uint64_t sub_22EF2E8CC(uint64_t a1)
{
  char v1;
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (*(_BYTE *)(a1 + 80))
  {
    v1 = *(_BYTE *)(a1 + 79);
    v2 = v1;
    LODWORD(v3) = v1 & 0x7F;
    if (v2 < 0)
      v3 = *(_QWORD *)(a1 + 64);
    v4 = v3 + 4;
  }
  else
  {
    v4 = 4;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v5 = *(_BYTE *)(a1 + 111);
    v6 = v5;
    LODWORD(v7) = v5 & 0x7F;
    if (v6 < 0)
      v7 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v8 = v7 + v4;
  v9 = *(_BYTE *)(a1 + 23) & 0x7F;
  if (*(char *)(a1 + 23) < 0)
    v9 = *(_DWORD *)(a1 + 8);
  v10 = *(char *)(a1 + 55);
  if (v10 >= 0)
    v11 = v10 & 0x7F;
  else
    v11 = *(_DWORD *)(a1 + 40);
  return (v9 + v11 + v8 + 5);
}

uint64_t sub_22EF2E960(llvm::raw_ostream *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v9[4];

  v4 = a2[1];
  v5 = *a2 >> 63;
  if ((int)v4 < 0)
    LOBYTE(v5) = 2;
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = 3;
  v9[0] = v6;
  llvm::raw_ostream::write(a1, v9);
  *(_DWORD *)v9 = *(_DWORD *)a2;
  result = llvm::raw_ostream::write(a1, v9);
  if ((*a2 & 0x8000000000000000) != 0)
  {
    *(_DWORD *)v9 = HIDWORD(*a2) & 0x7FFFFFFF;
    result = llvm::raw_ostream::write(a1, v9);
  }
  v8 = a2[1];
  if ((v8 & 0x80000000) != 0)
  {
    *(_DWORD *)v9 = v8 & 0x7FFFFFFF;
    result = llvm::raw_ostream::write(a1, v9);
    v8 = a2[1];
  }
  if (v8 < 0)
  {
    *(_DWORD *)v9 = HIDWORD(v8) & 0x7FFFFFFF;
    return llvm::raw_ostream::write(a1, v9);
  }
  return result;
}

void sub_22EF2EA30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  void **v46;
  void **v47;
  __int128 v48;
  __int128 v49;
  void **v50;
  __int128 v51;
  void **v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  void **v85;
  void **v86;
  __int128 v87;
  void **v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  __int128 v104;
  void **v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  _OWORD *v110;
  void **v111;
  __int128 v112;
  __int128 v113;
  void **v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void **v122;
  void **v123;
  __int128 v124;
  void **v125;
  __int128 v126;
  void **v127;
  __int128 v128;
  __int128 v129;
  _DWORD *v131;
  unint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  unint64_t v135;
  void **v136;
  void **v137;
  char v138;
  void **v139;
  void **v140;
  __int128 v141;
  __int128 v142;
  __int128 *v143;
  __int128 *v144;
  __int128 *v145;
  __int128 *v146;
  _DWORD *v148;
  __int128 *v149;
  int64_t v150;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  __int128 __p;
  uint64_t v162;
  char v163;
  char v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  char v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  char v177;

void sub_22EF301F4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF30A3C(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF30808(a4 + 16, a5 + 16);
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF30808(a3 + 16, a4 + 16);
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *a2;
        v15 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF30808((uint64_t)(a2 + 2), a3 + 16);
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *a2 = v16;
          a2[1] = v17;
          sub_22EF30808((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
        }
      }
    }
  }
}

void sub_22EF30300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = (uint64_t)(a1 + 2);
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = a3 + 16;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v9;
      a2[1] = v10;
      sub_22EF30808(v11, (uint64_t)(a2 + 2));
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *a2;
      v18 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = a3 + 16;
      v11 = (uint64_t)(a2 + 2);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *a2;
    v14 = a2[1];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = (uint64_t)(a2 + 2);
    sub_22EF30808((uint64_t)(a2 + 2), a3 + 16);
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v15;
      a2[1] = v16;
      v11 = (uint64_t)(a1 + 2);
LABEL_9:
      sub_22EF30808(v11, v12);
    }
  }
}

uint64_t sub_22EF30410(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  char v36;

  v4 = 1;
  switch(0x8E38E38E38E38E39 * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = (_OWORD *)(a2 - 144);
      if (sub_22E3B38EC((_DWORD *)(a2 - 144), (_DWORD *)a1))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v5;
        *(_QWORD *)(a2 - 144) = v6;
        *(_QWORD *)(a2 - 136) = v7;
        sub_22EF30808(a1 + 16, a2 - 128);
      }
      break;
    case 3uLL:
      sub_22EF30300((uint64_t *)a1, (uint64_t *)(a1 + 144), a2 - 144);
      break;
    case 4uLL:
      sub_22EF30A3C((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288, a2 - 144);
      break;
    case 5uLL:
      sub_22EF301F4((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288, a1 + 432, a2 - 144);
      break;
    default:
      v8 = (_DWORD *)(a1 + 288);
      sub_22EF30300((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288);
      v9 = a1 + 432;
      v4 = 1;
      if (a1 + 432 != a2)
      {
        v10 = 0;
        v11 = 0;
        while (1)
        {
          if (sub_22E3B38EC((_DWORD *)v9, v8))
          {
            v12 = *(_OWORD *)(v9 + 16);
            v24 = *(_OWORD *)v9;
            v25 = v12;
            v26 = *(_QWORD *)(v9 + 32);
            *(_QWORD *)(v9 + 16) = 0;
            *(_QWORD *)(v9 + 24) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            v27 = *(_BYTE *)(v9 + 40);
            v28 = *(_OWORD *)(v9 + 48);
            v29 = *(_QWORD *)(v9 + 64);
            *(_QWORD *)(v9 + 56) = 0;
            *(_QWORD *)(v9 + 64) = 0;
            *(_QWORD *)(v9 + 48) = 0;
            LOBYTE(v30) = 0;
            v32 = 0;
            if (*(_BYTE *)(v9 + 96))
            {
              v30 = *(_OWORD *)(v9 + 72);
              v31 = *(_QWORD *)(v9 + 88);
              *(_QWORD *)(v9 + 80) = 0;
              *(_QWORD *)(v9 + 88) = 0;
              *(_QWORD *)(v9 + 72) = 0;
              v32 = 1;
            }
            LOBYTE(__p) = 0;
            v35 = 0;
            if (*(_BYTE *)(v9 + 128))
            {
              __p = *(_OWORD *)(v9 + 104);
              v34 = *(_QWORD *)(v9 + 120);
              *(_QWORD *)(v9 + 112) = 0;
              *(_QWORD *)(v9 + 120) = 0;
              *(_QWORD *)(v9 + 104) = 0;
              v35 = 1;
            }
            v36 = *(_BYTE *)(v9 + 136);
            v13 = v10;
            while (1)
            {
              v14 = a1 + v13;
              *(_OWORD *)(a1 + v13 + 432) = *(_OWORD *)(a1 + v13 + 288);
              v15 = (void **)(a1 + v13 + 448);
              if (*(char *)(a1 + v13 + 471) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)(v14 + 304);
              *(_QWORD *)(a1 + v13 + 464) = *(_QWORD *)(v14 + 320);
              *(_BYTE *)(v14 + 327) = 0;
              *(_BYTE *)(v14 + 304) = 0;
              *(_BYTE *)(v14 + 472) = *(_BYTE *)(v14 + 328);
              v16 = v14 + 480;
              if (*(char *)(v14 + 503) < 0)
                operator delete(*(void **)v16);
              v17 = a1 + v13;
              *(_OWORD *)v16 = *(_OWORD *)(a1 + v13 + 336);
              *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + v13 + 352);
              *(_BYTE *)(v17 + 359) = 0;
              *(_BYTE *)(v17 + 336) = 0;
              v18 = (__int128 *)(a1 + v13 + 360);
              sub_22EF2DD4C(a1 + v13 + 504, v18);
              v19 = a1 + v13 + 392;
              sub_22EF2DD4C(v17 + 536, (__int128 *)(v17 + 392));
              *(_BYTE *)(v17 + 568) = *(_BYTE *)(v17 + 424);
              if (v13 == -288)
                break;
              v13 -= 144;
              if ((sub_22E3B38EC(&v24, (_DWORD *)(v17 + 144)) & 1) == 0)
              {
                v20 = a1 + v13 + 432;
                goto LABEL_20;
              }
            }
            v20 = a1;
LABEL_20:
            *(_OWORD *)v20 = v24;
            v21 = v17 + 304;
            if (*(char *)(v20 + 39) < 0)
              operator delete(*(void **)v21);
            v22 = v17 + 336;
            *(_OWORD *)v21 = v25;
            *(_QWORD *)(v21 + 16) = v26;
            HIBYTE(v26) = 0;
            LOBYTE(v25) = 0;
            *(_BYTE *)(v20 + 40) = v27;
            if (*(char *)(v20 + 71) < 0)
              operator delete(*(void **)v22);
            *(_OWORD *)v22 = v28;
            *(_QWORD *)(v22 + 16) = v29;
            HIBYTE(v29) = 0;
            LOBYTE(v28) = 0;
            sub_22EF2DD4C((uint64_t)v18, &v30);
            sub_22EF2DD4C(v19, &__p);
            *(_BYTE *)(v20 + 136) = v36;
            if (v35)
            {
              if (SHIBYTE(v34) < 0)
                operator delete((void *)__p);
              v35 = 0;
            }
            if (v32)
            {
              if (SHIBYTE(v31) < 0)
                operator delete((void *)v30);
              v32 = 0;
            }
            if (SHIBYTE(v29) < 0)
              operator delete((void *)v28);
            if (SHIBYTE(v26) < 0)
              operator delete((void *)v25);
            if (++v11 == 8)
              break;
          }
          v8 = (_DWORD *)v9;
          v10 += 144;
          v9 += 144;
          if (v9 == a2)
            return 1;
        }
        v4 = v9 + 144 == a2;
      }
      break;
  }
  return v4;
}

void sub_22EF30808(uint64_t a1, uint64_t a2)
{
  char v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 __p;
  uint64_t v17;
  char v18;
  char v19;

  *(_OWORD *)v9 = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  LOBYTE(v13) = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v13 = *(_OWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v15 = 1;
  }
  LOBYTE(__p) = 0;
  v18 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    __p = *(_OWORD *)(a1 + 88);
    v17 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v18 = 1;
  }
  v5 = (void **)(a1 + 32);
  v19 = *(_BYTE *)(a1 + 120);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v7;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  sub_22EF2DD4C(a1 + 56, (__int128 *)(a2 + 56));
  sub_22EF2DD4C(a1 + 88, (__int128 *)(a2 + 88));
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v8 = (void **)(a2 + 32);
  *(_OWORD *)a2 = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v4;
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)v11;
  *(_QWORD *)(a2 + 48) = v12;
  sub_22EF2DD4C(a2 + 56, &v13);
  sub_22EF2DD4C(a2 + 88, &__p);
  *(_BYTE *)(a2 + 120) = v19;
  if (v18)
  {
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  if (v15)
  {
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
}

void sub_22EF30A3C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF30300(a1, a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF30808(a3 + 16, a4 + 16);
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF30808((uint64_t)(a2 + 2), a3 + 16);
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v12;
        a2[1] = v13;
        sub_22EF30808((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
      }
    }
  }
}

void sub_22EF30B14(llvm::raw_ostream *a1, uint64_t a2)
{
  __int16 v4;
  const char *p_p;
  llvm::raw_ostream *v6;
  __int16 v7;
  const char *v8;
  llvm::raw_ostream *v9;
  void *__p;
  uint64_t v11;
  char v12;
  char v13;
  char v14[2];

  sub_22EF30CA4(a1, a2);
  LOBYTE(__p) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 80) && (sub_22E6C96C4(&__p, (__int128 *)(a2 + 56)), v13))
  {
    v4 = v12 & 0x7F;
    if (v12 < 0)
      v4 = v11;
    *(_WORD *)v14 = v4 + 1;
    llvm::raw_ostream::write(a1, v14);
    if (v12 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v6 = a1;
  }
  else
  {
    *(_WORD *)v14 = 0;
    p_p = v14;
    v6 = a1;
  }
  llvm::raw_ostream::write(v6, p_p);
  if (v13 && v12 < 0)
    operator delete(__p);
  LOBYTE(__p) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 112) && (sub_22E6C96C4(&__p, (__int128 *)(a2 + 88)), v13))
  {
    v7 = v12 & 0x7F;
    if (v12 < 0)
      v7 = v11;
    *(_WORD *)v14 = v7 + 1;
    llvm::raw_ostream::write(a1, v14);
    if (v12 >= 0)
      v8 = (const char *)&__p;
    else
      v8 = (const char *)__p;
    v9 = a1;
  }
  else
  {
    *(_WORD *)v14 = 0;
    v8 = v14;
    v9 = a1;
  }
  llvm::raw_ostream::write(v9, v8);
  if (v13)
  {
    if (v12 < 0)
      operator delete(__p);
  }
}

uint64_t sub_22EF30CA4(llvm::raw_ostream *a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  char v11;
  char v12[2];
  char v13[2];

  v4 = *(unsigned __int8 *)(a2 + 24);
  if ((~v4 & 0xC) != 0)
    v5 = 2;
  else
    v5 = 6;
  v11 = ((v4 & 2) != 0) | (2 * (v5 & (v4 << 29 >> 31) & 0xFE | v4 & 1));
  llvm::raw_ostream::write(a1, &v11);
  LOWORD(v6) = *(_BYTE *)(a2 + 23) & 0x7F;
  if (*(char *)(a2 + 23) < 0)
    v6 = *(_QWORD *)(a2 + 8);
  *(_WORD *)v12 = v6;
  llvm::raw_ostream::write(a1, v12);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  llvm::raw_ostream::write(a1, v7);
  LOWORD(v8) = *(_BYTE *)(a2 + 55) & 0x7F;
  if (*(char *)(a2 + 55) < 0)
    v8 = *(_QWORD *)(a2 + 40);
  *(_WORD *)v13 = v8;
  llvm::raw_ostream::write(a1, v13);
  if (*(char *)(a2 + 55) >= 0)
    v9 = (const char *)(a2 + 32);
  else
    v9 = *(const char **)(a2 + 32);
  return llvm::raw_ostream::write(a1, v9);
}

void sub_22EF30DB0(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 144);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 152) & (count - 1));
            *(_QWORD *)(v8 + 144) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF30E84(v11);
  }
}

void sub_22EF30E84(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  __int128 v35;
  void **v36;
  __int128 v37;
  void **v38;
  __int128 v39;
  BOOL v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 *v45;
  __int128 *v46;
  __int128 v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  void **v54;
  void **v55;
  __int128 v56;
  void **v57;
  __int128 v58;
  __int128 v59;
  void **v60;
  __int128 v61;
  void **v62;
  __int128 v63;
  void **v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  __int128 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int64_t v91;
  __int128 *v92;
  __int128 *p_p;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 *v101;
  __int128 v102;
  __int128 v103;
  _DWORD *v104;
  void **v105;
  void **v106;
  __int128 v107;
  void **v108;
  __int128 v109;
  void **v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  __int128 v115;
  _OWORD *v116;
  __int128 v117;
  __int128 v118;
  int v119;
  __int128 v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  void **v130;
  __int128 v131;
  void **v132;
  __int128 v133;
  void **v134;
  __int128 v135;
  void **v136;
  void **v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  _DWORD *v150;
  void **v151;
  void **v152;
  __int128 v153;
  void **v154;
  __int128 v155;
  void **v156;
  __int128 v157;
  void **v158;
  __int128 v159;
  char v160;
  void **v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _DWORD *v166;
  uint64_t v167;
  _OWORD *v168;
  __int128 v169;
  char v170;
  uint64_t v171;
  void **v172;
  void **v173;
  void **v174;
  char v175;
  void **v176;
  void **v177;
  __int128 v178;
  char v179;
  void **v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  int v186;
  _DWORD *v187;
  _DWORD *v188;
  int v189;
  __int128 *v190;
  __int128 *v191;
  __int128 *v192;
  _DWORD *v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  __int128 __p;
  uint64_t v202;
  char v203;
  _BYTE v204[15];
  _QWORD v205[2];
  _QWORD v206[5];

  v189 = a4;
  v193 = a2;
  v206[2] = *MEMORY[0x24BDAC8D0];
  v191 = &v198;
  v192 = &v195;
LABEL_2:
  v6 = (unint64_t)v193;
  v190 = (__int128 *)(v193 - 28);
  v187 = v193 - 84;
  v188 = v193 - 56;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_22E3B38EC(v190, (_DWORD *)a1))
        {
          v66 = *(_QWORD *)a1;
          v67 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *v190;
          v68 = v193;
          *((_QWORD *)v193 - 14) = v66;
          *((_QWORD *)v68 - 13) = v67;
          sub_22EF32AA4((uint64_t *)(a1 + 16), (__int128 *)v68 - 6);
        }
        return;
      case 3:
        sub_22EF325E8((uint64_t *)a1, (__int128 *)(a1 + 112), (uint64_t)v190);
        return;
      case 4:
        sub_22EF32C94((uint64_t *)a1, (uint64_t *)(a1 + 112), a1 + 224, (uint64_t)v190);
        return;
      case 5:
        sub_22EF324DC((uint64_t *)a1, (uint64_t *)(a1 + 112), a1 + 224, a1 + 336, (uint64_t)v190);
        return;
      default:
        if (v8 > 2687)
        {
          if (!a3)
          {
            if (a1 != v6)
            {
              v91 = (unint64_t)(v9 - 2) >> 1;
              v92 = &v198;
              p_p = &__p;
              v94 = v91;
              v191 = &v198;
              v192 = &v195;
              v190 = &__p;
              do
              {
                v95 = v94;
                if (v91 >= v94)
                {
                  v96 = (2 * v94) | 1;
                  v97 = (_DWORD *)(a1 + 112 * v96);
                  if (2 * v94 + 2 < v9 && sub_22E3B38EC((_DWORD *)(a1 + 112 * v96), v97 + 28))
                  {
                    v97 += 28;
                    v96 = 2 * v95 + 2;
                  }
                  v98 = a1 + 112 * v95;
                  if ((sub_22E3B38EC(v97, (_DWORD *)v98) & 1) == 0)
                  {
                    v194 = *(_OWORD *)v98;
                    v99 = a1 + 112 * v95;
                    v100 = *(_OWORD *)(v99 + 16);
                    v101 = v192;
                    *((_QWORD *)v192 + 2) = *(_QWORD *)(v99 + 32);
                    *v101 = v100;
                    *(_QWORD *)(v99 + 24) = 0;
                    *(_QWORD *)(v99 + 32) = 0;
                    *(_QWORD *)(v99 + 16) = 0;
                    v197 = *(_BYTE *)(v99 + 40);
                    v102 = *(_OWORD *)(v99 + 48);
                    *((_QWORD *)v92 + 2) = *(_QWORD *)(v99 + 64);
                    *v92 = v102;
                    *(_QWORD *)(v99 + 56) = 0;
                    *(_QWORD *)(v99 + 64) = 0;
                    *(_QWORD *)(v99 + 48) = 0;
                    v200 = *(_BYTE *)(v99 + 72);
                    v103 = *(_OWORD *)(v99 + 80);
                    *((_QWORD *)p_p + 2) = *(_QWORD *)(v99 + 96);
                    *p_p = v103;
                    *(_QWORD *)(v99 + 88) = 0;
                    *(_QWORD *)(v99 + 96) = 0;
                    *(_QWORD *)(v99 + 80) = 0;
                    v203 = *(_BYTE *)(v99 + 104);
                    do
                    {
                      v104 = v97;
                      *(_OWORD *)v98 = *(_OWORD *)v97;
                      v105 = (void **)(v98 + 16);
                      if (*(char *)(v98 + 39) < 0)
                        operator delete(*v105);
                      v106 = (void **)(v104 + 4);
                      v107 = *((_OWORD *)v104 + 1);
                      *(_QWORD *)(v98 + 32) = *((_QWORD *)v104 + 4);
                      *(_OWORD *)v105 = v107;
                      *((_BYTE *)v104 + 39) = 0;
                      *((_BYTE *)v104 + 16) = 0;
                      *(_BYTE *)(v98 + 40) = *((_BYTE *)v104 + 40);
                      v108 = (void **)(v98 + 48);
                      if (*(char *)(v98 + 71) < 0)
                        operator delete(*v108);
                      v109 = *((_OWORD *)v104 + 3);
                      *(_QWORD *)(v98 + 64) = *((_QWORD *)v104 + 8);
                      *(_OWORD *)v108 = v109;
                      *((_BYTE *)v104 + 71) = 0;
                      *((_BYTE *)v104 + 48) = 0;
                      *(_BYTE *)(v98 + 72) = *((_BYTE *)v104 + 72);
                      v110 = (void **)(v98 + 80);
                      if (*(char *)(v98 + 103) < 0)
                        operator delete(*v110);
                      v111 = *((_OWORD *)v104 + 5);
                      *(_QWORD *)(v98 + 96) = *((_QWORD *)v104 + 12);
                      *(_OWORD *)v110 = v111;
                      *((_BYTE *)v104 + 103) = 0;
                      *((_BYTE *)v104 + 80) = 0;
                      *(_BYTE *)(v98 + 104) = *((_BYTE *)v104 + 104);
                      if (v91 < v96)
                        break;
                      v112 = (2 * v96) | 1;
                      v97 = (_DWORD *)(a1 + 112 * v112);
                      v113 = 2 * v96 + 2;
                      if (v113 < v9 && sub_22E3B38EC((_DWORD *)(a1 + 112 * v112), v97 + 28))
                      {
                        v97 += 28;
                        v112 = v113;
                      }
                      v98 = (uint64_t)v104;
                      v96 = v112;
                    }
                    while (!sub_22E3B38EC(v97, &v194));
                    *(_OWORD *)v104 = v194;
                    if (*((char *)v104 + 39) < 0)
                      operator delete(*v106);
                    v114 = (void **)(v104 + 12);
                    v115 = *v192;
                    *((_QWORD *)v104 + 4) = *((_QWORD *)v192 + 2);
                    *(_OWORD *)v106 = v115;
                    HIBYTE(v196) = 0;
                    LOBYTE(v195) = 0;
                    *((_BYTE *)v104 + 40) = v197;
                    if (*((char *)v104 + 71) < 0)
                      operator delete(*v114);
                    v116 = v104 + 20;
                    p_p = v190;
                    v92 = v191;
                    v117 = *v191;
                    *((_QWORD *)v104 + 8) = *((_QWORD *)v191 + 2);
                    *(_OWORD *)v114 = v117;
                    HIBYTE(v199) = 0;
                    LOBYTE(v198) = 0;
                    *((_BYTE *)v104 + 72) = v200;
                    if (*((char *)v104 + 103) < 0)
                    {
                      operator delete(*((void **)v104 + 10));
                      v119 = SHIBYTE(v199);
                      v120 = *p_p;
                      *((_QWORD *)v104 + 12) = *((_QWORD *)p_p + 2);
                      *v116 = v120;
                      HIBYTE(v202) = 0;
                      LOBYTE(__p) = 0;
                      *((_BYTE *)v104 + 104) = v203;
                      if (v119 < 0)
                        operator delete((void *)v198);
                    }
                    else
                    {
                      v118 = *p_p;
                      *((_QWORD *)v104 + 12) = *((_QWORD *)p_p + 2);
                      *v116 = v118;
                      HIBYTE(v202) = 0;
                      LOBYTE(__p) = 0;
                      *((_BYTE *)v104 + 104) = v203;
                    }
                    if (SHIBYTE(v196) < 0)
                      operator delete((void *)v195);
                  }
                }
                v94 = v95 - 1;
              }
              while (v95);
              do
              {
                v121 = 0;
                v122 = v193;
                v123 = *(_QWORD *)a1;
                v183 = *(_QWORD *)(a1 + 8);
                v185 = *(_QWORD *)(a1 + 16);
                v206[0] = *(_QWORD *)(a1 + 24);
                *(_QWORD *)((char *)v206 + 7) = *(_QWORD *)(a1 + 31);
                v186 = *(unsigned __int8 *)(a1 + 39);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v184 = *(_BYTE *)(a1 + 40);
                v187 = *(_DWORD **)(a1 + 48);
                v205[0] = *(_QWORD *)(a1 + 56);
                *(_QWORD *)((char *)v205 + 7) = *(_QWORD *)(a1 + 63);
                v189 = *(unsigned __int8 *)(a1 + 71);
                *(_QWORD *)(a1 + 48) = 0;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                LODWORD(v188) = *(unsigned __int8 *)(a1 + 72);
                v191 = *(__int128 **)(a1 + 80);
                v124 = *(_QWORD *)(a1 + 88);
                *(_QWORD *)&v204[7] = *(_QWORD *)(a1 + 95);
                *(_QWORD *)v204 = v124;
                LODWORD(v192) = *(unsigned __int8 *)(a1 + 103);
                *(_QWORD *)(a1 + 80) = 0;
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
                v125 = a1;
                LODWORD(v190) = *(unsigned __int8 *)(a1 + 104);
                do
                {
                  v126 = v125 + 112 * v121 + 112;
                  v127 = 2 * v121;
                  v121 = (2 * v121) | 1;
                  v128 = v127 + 2;
                  if (v127 + 2 < v9 && sub_22E3B38EC((_DWORD *)v126, (_DWORD *)(v126 + 112)))
                  {
                    v126 += 112;
                    v121 = v128;
                  }
                  *(_OWORD *)v125 = *(_OWORD *)v126;
                  v129 = (void **)(v125 + 16);
                  if (*(char *)(v125 + 39) < 0)
                    operator delete(*v129);
                  v130 = (void **)(v126 + 16);
                  v131 = *(_OWORD *)(v126 + 16);
                  *(_QWORD *)(v125 + 32) = *(_QWORD *)(v126 + 32);
                  *(_OWORD *)v129 = v131;
                  *(_BYTE *)(v126 + 39) = 0;
                  *(_BYTE *)(v126 + 16) = 0;
                  *(_BYTE *)(v125 + 40) = *(_BYTE *)(v126 + 40);
                  v132 = (void **)(v125 + 48);
                  if (*(char *)(v125 + 71) < 0)
                    operator delete(*v132);
                  v133 = *(_OWORD *)(v126 + 48);
                  *(_QWORD *)(v125 + 64) = *(_QWORD *)(v126 + 64);
                  *(_OWORD *)v132 = v133;
                  *(_BYTE *)(v126 + 71) = 0;
                  *(_BYTE *)(v126 + 48) = 0;
                  *(_BYTE *)(v125 + 72) = *(_BYTE *)(v126 + 72);
                  v134 = (void **)(v125 + 80);
                  if (*(char *)(v125 + 103) < 0)
                    operator delete(*v134);
                  v135 = *(_OWORD *)(v126 + 80);
                  *(_QWORD *)(v125 + 96) = *(_QWORD *)(v126 + 96);
                  *(_OWORD *)v134 = v135;
                  *(_BYTE *)(v126 + 103) = 0;
                  *(_BYTE *)(v126 + 80) = 0;
                  *(_BYTE *)(v125 + 104) = *(_BYTE *)(v126 + 104);
                  v125 = v126;
                }
                while (v121 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v136 = (void **)(v126 + 48);
                v137 = (void **)(v126 + 80);
                v193 = v122 - 28;
                if ((_DWORD *)v126 == v122 - 28)
                {
                  *(_QWORD *)v126 = v123;
                  *(_QWORD *)(v126 + 8) = v183;
                  if (*(char *)(v126 + 39) < 0)
                    operator delete(*v130);
                  v164 = v206[0];
                  *(_QWORD *)(v126 + 16) = v185;
                  *(_QWORD *)(v126 + 24) = v164;
                  *(_QWORD *)(v126 + 31) = *(_QWORD *)((char *)v206 + 7);
                  *(_BYTE *)(v126 + 39) = v186;
                  *(_BYTE *)(v126 + 40) = v184;
                  if (*(char *)(v126 + 71) < 0)
                    operator delete(*v136);
                  *(_QWORD *)(v126 + 48) = v187;
                  *(_QWORD *)(v126 + 56) = v205[0];
                  *(_QWORD *)(v126 + 63) = *(_QWORD *)((char *)v205 + 7);
                  *(_BYTE *)(v126 + 71) = v189;
                  *(_BYTE *)(v126 + 72) = (_BYTE)v188;
                  if (*(char *)(v126 + 103) < 0)
                    operator delete(*v137);
                  *(_QWORD *)(v126 + 80) = v191;
                  *(_QWORD *)(v126 + 88) = *(_QWORD *)v204;
                  *(_QWORD *)(v126 + 95) = *(_QWORD *)&v204[7];
                  *(_BYTE *)(v126 + 103) = (_BYTE)v192;
                  *(_BYTE *)(v126 + 104) = (_BYTE)v190;
                }
                else
                {
                  *(_OWORD *)v126 = *((_OWORD *)v122 - 7);
                  if (*(char *)(v126 + 39) < 0)
                    operator delete(*v130);
                  v138 = *((_OWORD *)v122 - 6);
                  *(_QWORD *)(v126 + 32) = *((_QWORD *)v122 - 10);
                  *(_OWORD *)v130 = v138;
                  *((_BYTE *)v122 - 73) = 0;
                  *((_BYTE *)v122 - 96) = 0;
                  *(_BYTE *)(v126 + 40) = *((_BYTE *)v122 - 72);
                  if (*(char *)(v126 + 71) < 0)
                    operator delete(*v136);
                  v139 = *((_OWORD *)v122 - 4);
                  *(_QWORD *)(v126 + 64) = *((_QWORD *)v122 - 6);
                  *(_OWORD *)v136 = v139;
                  *((_BYTE *)v122 - 41) = 0;
                  *((_BYTE *)v122 - 64) = 0;
                  *(_BYTE *)(v126 + 72) = *((_BYTE *)v122 - 40);
                  if (*(char *)(v126 + 103) < 0)
                    operator delete(*v137);
                  v140 = *((_OWORD *)v122 - 2);
                  *(_QWORD *)(v126 + 96) = *((_QWORD *)v122 - 2);
                  *(_OWORD *)v137 = v140;
                  *((_BYTE *)v122 - 9) = 0;
                  *((_BYTE *)v122 - 32) = 0;
                  *(_BYTE *)(v126 + 104) = *((_BYTE *)v122 - 8);
                  *((_QWORD *)v122 - 14) = v123;
                  *((_QWORD *)v122 - 13) = v183;
                  if (*((char *)v122 - 73) < 0)
                    operator delete(*((void **)v122 - 12));
                  *((_QWORD *)v122 - 12) = v185;
                  v141 = v206[0];
                  *(_QWORD *)((char *)v122 - 81) = *(_QWORD *)((char *)v206 + 7);
                  *((_QWORD *)v122 - 11) = v141;
                  *((_BYTE *)v122 - 73) = v186;
                  *((_BYTE *)v122 - 72) = v184;
                  if (*((char *)v122 - 41) < 0)
                    operator delete(*((void **)v122 - 8));
                  *((_QWORD *)v122 - 8) = v187;
                  v142 = v205[0];
                  *(_QWORD *)((char *)v122 - 49) = *(_QWORD *)((char *)v205 + 7);
                  *((_QWORD *)v122 - 7) = v142;
                  *((_BYTE *)v122 - 41) = v189;
                  *((_BYTE *)v122 - 40) = (_BYTE)v188;
                  if (*((char *)v122 - 9) < 0)
                    operator delete(*((void **)v122 - 4));
                  *((_QWORD *)v122 - 4) = v191;
                  v143 = *(_QWORD *)v204;
                  *(_QWORD *)((char *)v122 - 17) = *(_QWORD *)&v204[7];
                  *((_QWORD *)v122 - 3) = v143;
                  *((_BYTE *)v122 - 9) = (_BYTE)v192;
                  *((_BYTE *)v122 - 8) = (_BYTE)v190;
                  v144 = v126 + 112 - a1;
                  if (v144 >= 113)
                  {
                    v145 = (unint64_t)(((((unint64_t)v144 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                            - 2) >> 1;
                    v146 = (_DWORD *)(a1 + 112 * v145);
                    if (sub_22E3B38EC(v146, (_DWORD *)v126))
                    {
                      v194 = *(_OWORD *)v126;
                      v147 = *(_QWORD *)(v126 + 32);
                      v195 = *(_OWORD *)v130;
                      v196 = v147;
                      *(_QWORD *)(v126 + 24) = 0;
                      *(_QWORD *)(v126 + 32) = 0;
                      *v130 = 0;
                      v197 = *(_BYTE *)(v126 + 40);
                      v148 = *(_OWORD *)v136;
                      v199 = *(_QWORD *)(v126 + 64);
                      v198 = v148;
                      *(_QWORD *)(v126 + 56) = 0;
                      *(_QWORD *)(v126 + 64) = 0;
                      *v136 = 0;
                      v200 = *(_BYTE *)(v126 + 72);
                      v149 = *(_OWORD *)v137;
                      v202 = *(_QWORD *)(v126 + 96);
                      __p = v149;
                      *(_QWORD *)(v126 + 88) = 0;
                      *(_QWORD *)(v126 + 96) = 0;
                      *v137 = 0;
                      v203 = *(_BYTE *)(v126 + 104);
                      do
                      {
                        v150 = v146;
                        *(_OWORD *)v126 = *(_OWORD *)v146;
                        v151 = (void **)(v126 + 16);
                        if (*(char *)(v126 + 39) < 0)
                          operator delete(*v151);
                        v152 = (void **)(v150 + 4);
                        v153 = *((_OWORD *)v150 + 1);
                        *(_QWORD *)(v126 + 32) = *((_QWORD *)v150 + 4);
                        *(_OWORD *)v151 = v153;
                        *((_BYTE *)v150 + 39) = 0;
                        *((_BYTE *)v150 + 16) = 0;
                        *(_BYTE *)(v126 + 40) = *((_BYTE *)v150 + 40);
                        v154 = (void **)(v126 + 48);
                        if (*(char *)(v126 + 71) < 0)
                          operator delete(*v154);
                        v155 = *((_OWORD *)v150 + 3);
                        *(_QWORD *)(v126 + 64) = *((_QWORD *)v150 + 8);
                        *(_OWORD *)v154 = v155;
                        *((_BYTE *)v150 + 71) = 0;
                        *((_BYTE *)v150 + 48) = 0;
                        *(_BYTE *)(v126 + 72) = *((_BYTE *)v150 + 72);
                        v156 = (void **)(v126 + 80);
                        if (*(char *)(v126 + 103) < 0)
                          operator delete(*v156);
                        v157 = *((_OWORD *)v150 + 5);
                        *(_QWORD *)(v126 + 96) = *((_QWORD *)v150 + 12);
                        *(_OWORD *)v156 = v157;
                        *((_BYTE *)v150 + 103) = 0;
                        *((_BYTE *)v150 + 80) = 0;
                        *(_BYTE *)(v126 + 104) = *((_BYTE *)v150 + 104);
                        if (!v145)
                          break;
                        v145 = (v145 - 1) >> 1;
                        v146 = (_DWORD *)(a1 + 112 * v145);
                        v126 = (uint64_t)v150;
                      }
                      while ((sub_22E3B38EC(v146, &v194) & 1) != 0);
                      *(_OWORD *)v150 = v194;
                      if (*((char *)v150 + 39) < 0)
                        operator delete(*v152);
                      v158 = (void **)(v150 + 12);
                      v159 = v195;
                      *((_QWORD *)v150 + 4) = v196;
                      *(_OWORD *)v152 = v159;
                      HIBYTE(v196) = 0;
                      LOBYTE(v195) = 0;
                      *((_BYTE *)v150 + 40) = v197;
                      if (*((char *)v150 + 71) < 0)
                        operator delete(*v158);
                      v160 = 0;
                      v161 = (void **)(v150 + 20);
                      v162 = v198;
                      *((_QWORD *)v150 + 8) = v199;
                      *(_OWORD *)v158 = v162;
                      HIBYTE(v199) = 0;
                      LOBYTE(v198) = 0;
                      *((_BYTE *)v150 + 72) = v200;
                      if (*((char *)v150 + 103) < 0)
                      {
                        operator delete(*v161);
                        v160 = HIBYTE(v199);
                      }
                      v163 = __p;
                      *((_QWORD *)v150 + 12) = v202;
                      *(_OWORD *)v161 = v163;
                      HIBYTE(v202) = 0;
                      LOBYTE(__p) = 0;
                      *((_BYTE *)v150 + 104) = v203;
                      if (v160 < 0)
                        operator delete((void *)v198);
                      if (SHIBYTE(v196) < 0)
                        operator delete((void *)v195);
                    }
                  }
                }
              }
              while (v9-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = (uint64_t *)(a1 + 112 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 < 0x3801)
          {
            sub_22EF325E8(v11, (__int128 *)a1, (uint64_t)v190);
          }
          else
          {
            sub_22EF325E8((uint64_t *)a1, (__int128 *)v11, (uint64_t)v190);
            v12 = 112 * v10;
            sub_22EF325E8((uint64_t *)(a1 + 112), (__int128 *)(v12 + a1 - 112), (uint64_t)v188);
            sub_22EF325E8((uint64_t *)(a1 + 224), (__int128 *)(a1 + 112 + v12), (uint64_t)v187);
            sub_22EF325E8((uint64_t *)(v12 + a1 - 112), (__int128 *)v11, a1 + 112 + v12);
            v13 = *(_QWORD *)a1;
            v14 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *v11 = v13;
            v11[1] = v14;
            sub_22EF32AA4((uint64_t *)(a1 + 16), (__int128 *)(a1 + 16 + v12));
          }
          --a3;
          if ((v189 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 112), (_DWORD *)a1) & 1) == 0)
          {
            v41 = *(_OWORD *)(a1 + 16);
            v194 = *(_OWORD *)a1;
            v42 = *(_QWORD *)(a1 + 32);
            v43 = v192;
            *v192 = v41;
            *((_QWORD *)v43 + 2) = v42;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v197 = *(_BYTE *)(a1 + 40);
            v44 = *(_OWORD *)(a1 + 48);
            v45 = v190;
            v46 = v191;
            *((_QWORD *)v191 + 2) = *(_QWORD *)(a1 + 64);
            *v46 = v44;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v200 = *(_BYTE *)(a1 + 72);
            v47 = *(_OWORD *)(a1 + 80);
            v202 = *(_QWORD *)(a1 + 96);
            __p = v47;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            v203 = *(_BYTE *)(a1 + 104);
            if ((sub_22E3B38EC(&v194, v45) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 112;
              while ((sub_22E3B38EC(&v194, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v48 = (_DWORD *)(a1 + 112);
              do
              {
                v7 = (unint64_t)v48;
                if ((unint64_t)v48 >= v6)
                  break;
                v49 = sub_22E3B38EC(&v194, v48);
                v48 = (_DWORD *)(v7 + 112);
              }
              while (!v49);
            }
            v50 = v6;
            if (v7 < v6)
            {
              v50 = v6;
              do
                v50 -= 112;
              while ((sub_22E3B38EC(&v194, (_DWORD *)v50) & 1) != 0);
            }
            while (v7 < v50)
            {
              v51 = *(_QWORD *)v7;
              v52 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v50;
              *(_QWORD *)v50 = v51;
              *(_QWORD *)(v50 + 8) = v52;
              sub_22EF32AA4((uint64_t *)(v7 + 16), (__int128 *)(v50 + 16));
              do
                v7 += 112;
              while (!sub_22E3B38EC(&v194, (_DWORD *)v7));
              do
                v50 -= 112;
              while ((sub_22E3B38EC(&v194, (_DWORD *)v50) & 1) != 0);
            }
            v53 = (_OWORD *)(v7 - 112);
            if (v7 - 112 != a1)
            {
              v54 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v53;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v54);
              v55 = (void **)(a1 + 48);
              v56 = *(_OWORD *)(v7 - 96);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 80);
              *(_OWORD *)v54 = v56;
              *(_BYTE *)(v7 - 73) = 0;
              *(_BYTE *)(v7 - 96) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 72);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v55);
              v57 = (void **)(a1 + 80);
              v58 = *(_OWORD *)(v7 - 64);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 48);
              *(_OWORD *)v55 = v58;
              *(_BYTE *)(v7 - 41) = 0;
              *(_BYTE *)(v7 - 64) = 0;
              *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 40);
              if (*(char *)(a1 + 103) < 0)
                operator delete(*v57);
              v59 = *(_OWORD *)(v7 - 32);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 16);
              *(_OWORD *)v57 = v59;
              *(_BYTE *)(v7 - 9) = 0;
              *(_BYTE *)(v7 - 32) = 0;
              *(_BYTE *)(a1 + 104) = *(_BYTE *)(v7 - 8);
              v6 = (unint64_t)v193;
            }
            *v53 = v194;
            v60 = (void **)(v7 - 96);
            if (*(char *)(v7 - 73) < 0)
              operator delete(*v60);
            v61 = *v192;
            *(_QWORD *)(v7 - 80) = *((_QWORD *)v192 + 2);
            *(_OWORD *)v60 = v61;
            HIBYTE(v196) = 0;
            LOBYTE(v195) = 0;
            *(_BYTE *)(v7 - 72) = v197;
            v62 = (void **)(v7 - 64);
            if (*(char *)(v7 - 41) < 0)
              operator delete(*v62);
            v63 = *v191;
            *(_QWORD *)(v7 - 48) = *((_QWORD *)v191 + 2);
            *(_OWORD *)v62 = v63;
            HIBYTE(v199) = 0;
            LOBYTE(v198) = 0;
            *(_BYTE *)(v7 - 40) = v200;
            v64 = (void **)(v7 - 32);
            if (*(char *)(v7 - 9) < 0)
              operator delete(*v64);
            v65 = __p;
            *(_QWORD *)(v7 - 16) = v202;
            *(_OWORD *)v64 = v65;
            HIBYTE(v202) = 0;
            LOBYTE(__p) = 0;
            *(_BYTE *)(v7 - 8) = v203;
            if (SHIBYTE(v202) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v199) < 0)
              operator delete((void *)v198);
            if (SHIBYTE(v196) < 0)
              operator delete((void *)v195);
            goto LABEL_49;
          }
          v15 = 0;
          v16 = *(_QWORD *)(a1 + 32);
          v17 = *(_OWORD *)a1;
          v19 = v191;
          v18 = v192;
          *v192 = *(_OWORD *)(a1 + 16);
          *((_QWORD *)v18 + 2) = v16;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          LOBYTE(v16) = *(_BYTE *)(a1 + 40);
          v20 = *(_OWORD *)(a1 + 48);
          *((_QWORD *)v19 + 2) = *(_QWORD *)(a1 + 64);
          *v19 = v20;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          LOBYTE(v18) = *(_BYTE *)(a1 + 72);
          v21 = *(_QWORD *)(a1 + 96);
          __p = *(_OWORD *)(a1 + 80);
          v197 = v16;
          v22 = (void **)(a1 + 16);
          v200 = (char)v18;
          v23 = (void **)(a1 + 48);
          v202 = v21;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          v203 = *(_BYTE *)(a1 + 104);
          v24 = (void **)(a1 + 80);
          v194 = v17;
          do
            v15 += 112;
          while ((sub_22E3B38EC((_DWORD *)(v15 + a1), &v194) & 1) != 0);
          v25 = a1 + v15;
          v26 = v193;
          if (v15 == 112)
          {
            v26 = v193;
            do
            {
              if (v25 >= (unint64_t)v26)
                break;
              v26 -= 28;
            }
            while ((sub_22E3B38EC(v26, &v194) & 1) == 0);
          }
          else
          {
            do
              v26 -= 28;
            while (!sub_22E3B38EC(v26, &v194));
          }
          v7 = a1 + v15;
          if (v25 < (unint64_t)v26)
          {
            v27 = v26;
            do
            {
              v28 = *(_QWORD *)v7;
              v29 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v27;
              *(_QWORD *)v27 = v28;
              *((_QWORD *)v27 + 1) = v29;
              sub_22EF32AA4((uint64_t *)(v7 + 16), (__int128 *)v27 + 1);
              do
                v7 += 112;
              while ((sub_22E3B38EC((_DWORD *)v7, &v194) & 1) != 0);
              do
                v27 -= 28;
              while (!sub_22E3B38EC(v27, &v194));
            }
            while (v7 < (unint64_t)v27);
          }
          v30 = (_OWORD *)(v7 - 112);
          if (v7 - 112 != a1)
          {
            *(_OWORD *)a1 = *v30;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v22);
            v31 = *(_OWORD *)(v7 - 96);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 80);
            *(_OWORD *)v22 = v31;
            *(_BYTE *)(v7 - 73) = 0;
            *(_BYTE *)(v7 - 96) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 72);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v23);
            v32 = *(_OWORD *)(v7 - 64);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 48);
            *(_OWORD *)v23 = v32;
            *(_BYTE *)(v7 - 41) = 0;
            *(_BYTE *)(v7 - 64) = 0;
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 40);
            if (*(char *)(a1 + 103) < 0)
              operator delete(*v24);
            v33 = *(_OWORD *)(v7 - 32);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 16);
            *(_OWORD *)v24 = v33;
            *(_BYTE *)(v7 - 9) = 0;
            *(_BYTE *)(v7 - 32) = 0;
            *(_BYTE *)(a1 + 104) = *(_BYTE *)(v7 - 8);
          }
          *v30 = v194;
          v34 = (void **)(v7 - 96);
          if (*(char *)(v7 - 73) < 0)
            operator delete(*v34);
          v6 = (unint64_t)v193;
          v35 = *v192;
          *(_QWORD *)(v7 - 80) = *((_QWORD *)v192 + 2);
          *(_OWORD *)v34 = v35;
          HIBYTE(v196) = 0;
          LOBYTE(v195) = 0;
          *(_BYTE *)(v7 - 72) = v197;
          v36 = (void **)(v7 - 64);
          if (*(char *)(v7 - 41) < 0)
            operator delete(*v36);
          v37 = *v191;
          *(_QWORD *)(v7 - 48) = *((_QWORD *)v191 + 2);
          *(_OWORD *)v36 = v37;
          HIBYTE(v199) = 0;
          LOBYTE(v198) = 0;
          *(_BYTE *)(v7 - 40) = v200;
          v38 = (void **)(v7 - 32);
          if (*(char *)(v7 - 9) < 0)
            operator delete(*v38);
          v39 = __p;
          *(_QWORD *)(v7 - 16) = v202;
          *(_OWORD *)v38 = v39;
          HIBYTE(v202) = 0;
          LOBYTE(__p) = 0;
          *(_BYTE *)(v7 - 8) = v203;
          if (SHIBYTE(v202) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v199) < 0)
            operator delete((void *)v198);
          if (SHIBYTE(v196) < 0)
            operator delete((void *)v195);
          if (v25 < (unint64_t)v26)
            goto LABEL_48;
          v40 = sub_22EF326F8(a1, v7 - 112);
          if (!sub_22EF326F8(v7, v6))
          {
            if (v40)
              continue;
LABEL_48:
            sub_22EF30E84(a1);
LABEL_49:
            v189 = 0;
            continue;
          }
          v193 = (_DWORD *)(v7 - 112);
          if (v40)
            return;
          goto LABEL_2;
        }
        if ((v189 & 1) != 0)
        {
          if (a1 != v6)
          {
            v69 = (_DWORD *)(a1 + 112);
            if ((_DWORD *)(a1 + 112) != v193)
            {
              v70 = 0;
              v71 = (_OWORD *)a1;
              do
              {
                v72 = v69;
                if (sub_22E3B38EC(v69, v71))
                {
                  v194 = *v72;
                  v195 = v71[8];
                  v196 = *((_QWORD *)v71 + 18);
                  *((_QWORD *)v71 + 16) = 0;
                  *((_QWORD *)v71 + 17) = 0;
                  *((_QWORD *)v71 + 18) = 0;
                  v197 = *((_BYTE *)v71 + 152);
                  v198 = v71[10];
                  v199 = *((_QWORD *)v71 + 22);
                  *((_QWORD *)v71 + 20) = 0;
                  *((_QWORD *)v71 + 21) = 0;
                  *((_QWORD *)v71 + 22) = 0;
                  v200 = *((_BYTE *)v71 + 184);
                  v73 = v71[12];
                  v202 = *((_QWORD *)v71 + 26);
                  __p = v73;
                  *((_QWORD *)v71 + 24) = 0;
                  *((_QWORD *)v71 + 25) = 0;
                  *((_QWORD *)v71 + 26) = 0;
                  v74 = *((_BYTE *)v71 + 216);
                  v75 = v70;
                  v203 = v74;
                  while (1)
                  {
                    v76 = v75;
                    v77 = a1 + v75;
                    *(_OWORD *)(v77 + 112) = *(_OWORD *)v77;
                    v78 = (void **)(v77 + 128);
                    if (*(char *)(v77 + 151) < 0)
                      operator delete(*v78);
                    *(_OWORD *)v78 = *(_OWORD *)(v77 + 16);
                    *(_QWORD *)(v77 + 144) = *(_QWORD *)(v77 + 32);
                    *(_BYTE *)(v77 + 39) = 0;
                    *(_BYTE *)(v77 + 16) = 0;
                    *(_BYTE *)(v77 + 152) = *(_BYTE *)(v77 + 40);
                    v79 = v77 + 160;
                    if (*(char *)(v77 + 183) < 0)
                      operator delete(*(void **)v79);
                    v80 = a1 + v76;
                    *(_OWORD *)v79 = *(_OWORD *)(a1 + v76 + 48);
                    *(_QWORD *)(v79 + 16) = *(_QWORD *)(a1 + v76 + 64);
                    *(_BYTE *)(v80 + 71) = 0;
                    *(_BYTE *)(v80 + 48) = 0;
                    *(_BYTE *)(v80 + 184) = *(_BYTE *)(a1 + v76 + 72);
                    v81 = (void **)(a1 + v76 + 192);
                    if (*(char *)(a1 + v76 + 215) < 0)
                      operator delete(*v81);
                    *(_OWORD *)v81 = *(_OWORD *)(v80 + 80);
                    *(_QWORD *)(a1 + v76 + 208) = *(_QWORD *)(v80 + 96);
                    *(_BYTE *)(v80 + 103) = 0;
                    *(_BYTE *)(v80 + 80) = 0;
                    *(_BYTE *)(v80 + 216) = *(_BYTE *)(v80 + 104);
                    if (!v76)
                      break;
                    v75 = v76 - 112;
                    if ((sub_22E3B38EC(&v194, (_DWORD *)(v76 - 112 + a1)) & 1) == 0)
                    {
                      v82 = a1 + v76;
                      goto LABEL_109;
                    }
                  }
                  v82 = a1;
LABEL_109:
                  *(_OWORD *)v82 = v194;
                  v83 = a1 + v76;
                  v84 = (void **)(v83 + 16);
                  if (*(char *)(v82 + 39) < 0)
                    operator delete(*v84);
                  v85 = v83 + 48;
                  v86 = v195;
                  *(_QWORD *)(v83 + 32) = v196;
                  *(_OWORD *)v84 = v86;
                  HIBYTE(v196) = 0;
                  LOBYTE(v195) = 0;
                  *(_BYTE *)(v82 + 40) = v197;
                  if (*(char *)(v82 + 71) < 0)
                    operator delete(*(void **)v85);
                  v87 = 0;
                  v88 = v83 + 80;
                  v89 = v198;
                  *(_QWORD *)(v85 + 16) = v199;
                  *(_OWORD *)v85 = v89;
                  HIBYTE(v199) = 0;
                  LOBYTE(v198) = 0;
                  *(_BYTE *)(v82 + 72) = v200;
                  if (*(char *)(v82 + 103) < 0)
                  {
                    operator delete(*(void **)v88);
                    v87 = HIBYTE(v199);
                  }
                  v90 = __p;
                  *(_QWORD *)(v88 + 16) = v202;
                  *(_OWORD *)v88 = v90;
                  HIBYTE(v202) = 0;
                  LOBYTE(__p) = 0;
                  *(_BYTE *)(v82 + 104) = v203;
                  if (v87 < 0)
                    operator delete((void *)v198);
                  if (SHIBYTE(v196) < 0)
                    operator delete((void *)v195);
                }
                v69 = v72 + 7;
                v70 += 112;
                v71 = v72;
              }
              while (v72 + 7 != (_OWORD *)v193);
            }
          }
        }
        else if (a1 != v6)
        {
          v166 = (_DWORD *)(a1 + 112);
          if ((_DWORD *)(a1 + 112) != v193)
          {
            v167 = a1 - 112;
            do
            {
              v168 = v166;
              if (sub_22E3B38EC(v166, (_DWORD *)a1))
              {
                v194 = *v168;
                v195 = *(_OWORD *)(a1 + 128);
                v196 = *(_QWORD *)(a1 + 144);
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 136) = 0;
                *(_QWORD *)(a1 + 144) = 0;
                v197 = *(_BYTE *)(a1 + 152);
                v198 = *(_OWORD *)(a1 + 160);
                v199 = *(_QWORD *)(a1 + 176);
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                v200 = *(_BYTE *)(a1 + 184);
                v169 = *(_OWORD *)(a1 + 192);
                v202 = *(_QWORD *)(a1 + 208);
                __p = v169;
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                v170 = *(_BYTE *)(a1 + 216);
                v171 = v167;
                v203 = v170;
                do
                {
                  *(_OWORD *)(v171 + 224) = *(_OWORD *)(v171 + 112);
                  v172 = (void **)(v171 + 240);
                  if (*(char *)(v171 + 263) < 0)
                    operator delete(*v172);
                  *(_OWORD *)v172 = *(_OWORD *)(v171 + 128);
                  *(_QWORD *)(v171 + 256) = *(_QWORD *)(v171 + 144);
                  *(_BYTE *)(v171 + 151) = 0;
                  *(_BYTE *)(v171 + 128) = 0;
                  *(_BYTE *)(v171 + 264) = *(_BYTE *)(v171 + 152);
                  v173 = (void **)(v171 + 272);
                  if (*(char *)(v171 + 295) < 0)
                    operator delete(*v173);
                  *(_OWORD *)v173 = *(_OWORD *)(v171 + 160);
                  *(_QWORD *)(v171 + 288) = *(_QWORD *)(v171 + 176);
                  *(_BYTE *)(v171 + 183) = 0;
                  *(_BYTE *)(v171 + 160) = 0;
                  *(_BYTE *)(v171 + 296) = *(_BYTE *)(v171 + 184);
                  v174 = (void **)(v171 + 304);
                  if (*(char *)(v171 + 327) < 0)
                    operator delete(*v174);
                  *(_OWORD *)v174 = *(_OWORD *)(v171 + 192);
                  *(_QWORD *)(v171 + 320) = *(_QWORD *)(v171 + 208);
                  *(_BYTE *)(v171 + 215) = 0;
                  *(_BYTE *)(v171 + 192) = 0;
                  *(_BYTE *)(v171 + 328) = *(_BYTE *)(v171 + 216);
                  v175 = sub_22E3B38EC(&v194, (_DWORD *)v171);
                  v171 -= 112;
                }
                while ((v175 & 1) != 0);
                *(_OWORD *)(v171 + 224) = v194;
                v176 = (void **)(v171 + 240);
                if (*(char *)(v171 + 263) < 0)
                  operator delete(*v176);
                v177 = (void **)(v171 + 272);
                v178 = v195;
                *(_QWORD *)(v171 + 256) = v196;
                *(_OWORD *)v176 = v178;
                HIBYTE(v196) = 0;
                LOBYTE(v195) = 0;
                *(_BYTE *)(v171 + 264) = v197;
                if (*(char *)(v171 + 295) < 0)
                  operator delete(*v177);
                v179 = 0;
                v180 = (void **)(v171 + 304);
                v181 = v198;
                *(_QWORD *)(v171 + 288) = v199;
                *(_OWORD *)v177 = v181;
                HIBYTE(v199) = 0;
                LOBYTE(v198) = 0;
                *(_BYTE *)(v171 + 296) = v200;
                if (*(char *)(v171 + 327) < 0)
                {
                  operator delete(*v180);
                  v179 = HIBYTE(v199);
                }
                v182 = __p;
                *(_QWORD *)(v171 + 320) = v202;
                *(_OWORD *)v180 = v182;
                HIBYTE(v202) = 0;
                LOBYTE(__p) = 0;
                *(_BYTE *)(v171 + 328) = v203;
                if (v179 < 0)
                  operator delete((void *)v198);
                if (SHIBYTE(v196) < 0)
                  operator delete((void *)v195);
              }
              v166 = v168 + 7;
              v167 += 112;
              a1 = (uint64_t)v168;
            }
            while (v168 + 7 != (_OWORD *)v193);
          }
        }
        return;
    }
  }
}

void sub_22EF324DC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF32C94(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF32AA4((uint64_t *)(a4 + 16), (__int128 *)(a5 + 16));
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF32AA4((uint64_t *)(a3 + 16), (__int128 *)(a4 + 16));
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *a2;
        v15 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF32AA4(a2 + 2, (__int128 *)(a3 + 16));
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *a2 = v16;
          a2[1] = v17;
          sub_22EF32AA4(a1 + 2, (__int128 *)a2 + 1);
        }
      }
    }
  }
}

void sub_22EF325E8(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = a1 + 2;
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = (__int128 *)(a3 + 16);
    }
    else
    {
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v9;
      *((_QWORD *)a2 + 1) = v10;
      sub_22EF32AA4(v11, a2 + 1);
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = (__int128 *)(a3 + 16);
      v11 = (uint64_t *)(a2 + 1);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = a2 + 1;
    sub_22EF32AA4((uint64_t *)a2 + 2, (__int128 *)(a3 + 16));
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v15;
      *((_QWORD *)a2 + 1) = v16;
      v11 = a1 + 2;
LABEL_9:
      sub_22EF32AA4(v11, v12);
    }
  }
}

BOOL sub_22EF326F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 112);
      if (sub_22E3B38EC((_DWORD *)(a2 - 112), (_DWORD *)a1))
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a2 - 112) = v7;
        *(_QWORD *)(a2 - 104) = v8;
        sub_22EF32AA4((uint64_t *)(a1 + 16), (__int128 *)(a2 - 96));
      }
      return 1;
    case 3:
      sub_22EF325E8((uint64_t *)a1, (__int128 *)(a1 + 112), a2 - 112);
      return 1;
    case 4:
      sub_22EF32C94((uint64_t *)a1, (uint64_t *)(a1 + 112), a1 + 224, a2 - 112);
      return 1;
    case 5:
      sub_22EF324DC((uint64_t *)a1, (uint64_t *)(a1 + 112), a1 + 224, a1 + 336, a2 - 112);
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 224);
      sub_22EF325E8((uint64_t *)a1, (__int128 *)(a1 + 112), a1 + 224);
      v10 = a1 + 336;
      if (a1 + 336 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22E3B38EC((_DWORD *)v10, v9))
    {
      v13 = *(_OWORD *)(v10 + 16);
      v29 = *(_OWORD *)v10;
      v30 = v13;
      v31 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v32 = *(_BYTE *)(v10 + 40);
      __p = *(_OWORD *)(v10 + 48);
      v34 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      v35 = *(_BYTE *)(v10 + 72);
      v14 = *(_OWORD *)(v10 + 80);
      v37 = *(_QWORD *)(v10 + 96);
      v36 = v14;
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v38 = *(_BYTE *)(v10 + 104);
      v15 = v11;
      *(_QWORD *)(v10 + 96) = 0;
      while (1)
      {
        v16 = v15;
        v17 = a1 + v15;
        *(_OWORD *)(a1 + v15 + 336) = *(_OWORD *)(a1 + v15 + 224);
        v18 = a1 + v15 + 352;
        if (*(char *)(a1 + v15 + 375) < 0)
          operator delete(*(void **)v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 240);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 256);
        *(_BYTE *)(v17 + 263) = 0;
        *(_BYTE *)(v17 + 240) = 0;
        *(_BYTE *)(v17 + 376) = *(_BYTE *)(v17 + 264);
        v19 = v17 + 384;
        if (*(char *)(v17 + 407) < 0)
          operator delete(*(void **)v19);
        v20 = a1 + v16;
        *(_OWORD *)v19 = *(_OWORD *)(a1 + v16 + 272);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + v16 + 288);
        *(_BYTE *)(v20 + 295) = 0;
        *(_BYTE *)(v20 + 272) = 0;
        *(_BYTE *)(v20 + 408) = *(_BYTE *)(a1 + v16 + 296);
        v21 = (void **)(a1 + v16 + 416);
        if (*(char *)(a1 + v16 + 439) < 0)
          operator delete(*v21);
        *(_OWORD *)v21 = *(_OWORD *)(v20 + 304);
        *(_QWORD *)(a1 + v16 + 432) = *(_QWORD *)(v20 + 320);
        *(_BYTE *)(v20 + 327) = 0;
        *(_BYTE *)(v20 + 304) = 0;
        *(_BYTE *)(v20 + 440) = *(_BYTE *)(v20 + 328);
        if (v16 == -224)
          break;
        v22 = sub_22E3B38EC(&v29, (_DWORD *)(a1 + v16 + 112));
        v15 = v16 - 112;
        if ((v22 & 1) == 0)
        {
          v23 = a1 + v15 + 336;
          goto LABEL_18;
        }
      }
      v23 = a1;
LABEL_18:
      *(_OWORD *)v23 = v29;
      v24 = a1 + v16;
      v25 = (void **)(v24 + 240);
      if (*(char *)(v23 + 39) < 0)
        operator delete(*v25);
      v26 = v24 + 272;
      *(_OWORD *)v25 = v30;
      *(_QWORD *)(v24 + 256) = v31;
      HIBYTE(v31) = 0;
      LOBYTE(v30) = 0;
      *(_BYTE *)(v23 + 40) = v32;
      if (*(char *)(v23 + 71) < 0)
        operator delete(*(void **)v26);
      v27 = 0;
      v28 = v24 + 304;
      *(_OWORD *)v26 = __p;
      *(_QWORD *)(v26 + 16) = v34;
      HIBYTE(v34) = 0;
      LOBYTE(__p) = 0;
      *(_BYTE *)(v23 + 72) = v35;
      if (*(char *)(v23 + 103) < 0)
      {
        operator delete(*(void **)v28);
        v27 = HIBYTE(v34);
      }
      *(_OWORD *)v28 = v36;
      *(_QWORD *)(v28 + 16) = v37;
      HIBYTE(v37) = 0;
      LOBYTE(v36) = 0;
      *(_BYTE *)(v23 + 104) = v38;
      if (v27 < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)v30);
      if (++v12 == 8)
        return v10 + 112 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 112;
    v10 += 112;
    if (v10 == a2)
      return 1;
  }
}

void sub_22EF32AA4(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t *v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  uint64_t v18;
  _BYTE v19[15];
  _BYTE v20[15];
  _BYTE v21[15];

  v4 = *a1;
  *(_QWORD *)v21 = a1[1];
  *(_QWORD *)&v21[7] = *(uint64_t *)((char *)a1 + 15);
  v5 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = *((_BYTE *)a1 + 24);
  v7 = a1 + 4;
  v8 = a1[4];
  *(_QWORD *)v20 = a1[5];
  *(_QWORD *)&v20[7] = *(uint64_t *)((char *)a1 + 47);
  v9 = *((_BYTE *)a1 + 55);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v10 = *((_BYTE *)a1 + 56);
  v11 = a1 + 8;
  *(_QWORD *)&v19[7] = *(uint64_t *)((char *)a1 + 79);
  v18 = a1[8];
  *(_QWORD *)v19 = a1[9];
  v12 = *((_BYTE *)a1 + 87);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  v16 = *((_BYTE *)a1 + 88);
  v17 = v12;
  v13 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v13;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  if (*((char *)a1 + 55) < 0)
    operator delete((void *)*v7);
  v14 = a2[2];
  v7[2] = *((_QWORD *)a2 + 6);
  *(_OWORD *)v7 = v14;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  if (*((char *)a1 + 87) < 0)
    operator delete((void *)*v11);
  v15 = a2[4];
  v11[2] = *((_QWORD *)a2 + 10);
  *(_OWORD *)v11 = v15;
  *((_BYTE *)a2 + 87) = 0;
  *((_BYTE *)a2 + 64) = 0;
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v4;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v21;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v21[7];
  *((_BYTE *)a2 + 23) = v5;
  *((_BYTE *)a2 + 24) = v6;
  if (*((char *)a2 + 55) < 0)
    operator delete(*((void **)a2 + 4));
  *((_QWORD *)a2 + 4) = v8;
  *((_QWORD *)a2 + 5) = *(_QWORD *)v20;
  *(_QWORD *)((char *)a2 + 47) = *(_QWORD *)&v20[7];
  *((_BYTE *)a2 + 55) = v9;
  *((_BYTE *)a2 + 56) = v10;
  if (*((char *)a2 + 87) < 0)
    operator delete(*((void **)a2 + 8));
  *((_QWORD *)a2 + 8) = v18;
  *((_QWORD *)a2 + 9) = *(_QWORD *)v19;
  *(_QWORD *)((char *)a2 + 79) = *(_QWORD *)&v19[7];
  *((_BYTE *)a2 + 87) = v17;
  *((_BYTE *)a2 + 88) = v16;
}

void sub_22EF32C94(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF325E8(a1, (__int128 *)a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF32AA4((uint64_t *)(a3 + 16), (__int128 *)(a4 + 16));
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF32AA4(a2 + 2, (__int128 *)(a3 + 16));
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v12;
        a2[1] = v13;
        sub_22EF32AA4(a1 + 2, (__int128 *)a2 + 1);
      }
    }
  }
}

uint64_t sub_22EF32D6C(llvm::raw_ostream *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char v8[2];
  char v9[2];

  sub_22EF30CA4(a1, a2);
  *(_WORD *)v8 = 0;
  v4 = *(unsigned __int8 *)(a2 + 56);
  if ((v4 & 1) != 0)
  {
    v8[0] = 1;
    v8[1] = (v4 >> 1) & 3;
  }
  llvm::raw_ostream::write(a1, v8);
  LOWORD(v5) = *(_BYTE *)(a2 + 87) & 0x7F;
  if (*(char *)(a2 + 87) < 0)
    v5 = *(_QWORD *)(a2 + 72);
  *(_WORD *)v9 = v5;
  llvm::raw_ostream::write(a1, v9);
  if (*(char *)(a2 + 87) >= 0)
    v6 = (const char *)(a2 + 64);
  else
    v6 = *(const char **)(a2 + 64);
  return llvm::raw_ostream::write(a1, v6);
}

void sub_22EF32E1C(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 176);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 184) & (count - 1));
            *(_QWORD *)(v8 + 176) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF32EF0(v11);
  }
}

uint64_t sub_22EF32EF0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v1 = *(_BYTE *)(a1 + 23) & 0x7F;
  if (*(char *)(a1 + 23) < 0)
    v1 = *(_DWORD *)(a1 + 8);
  v2 = *(char *)(a1 + 55);
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *(_DWORD *)(a1 + 40);
  v4 = v1 + v3 + 17;
  for (i = *(_QWORD *)(a1 + 96); i != *(_QWORD *)(a1 + 104); i += 96)
  {
    v6 = *(char *)(i + 23);
    if (v6 >= 0)
      v7 = v6 & 0x7F;
    else
      v7 = *(_DWORD *)(i + 8);
    v8 = *(_BYTE *)(i + 55) & 0x7F;
    if (*(char *)(i + 55) < 0)
      v8 = *(_DWORD *)(i + 40);
    v9 = v7 + v4 + v8;
    v10 = *(char *)(i + 87);
    if (v10 >= 0)
      v11 = v10 & 0x7F;
    else
      v11 = *(_DWORD *)(i + 72);
    v4 = v9 + v11 + 10;
  }
  v12 = *(char *)(a1 + 95);
  if (v12 >= 0)
    v13 = v12 & 0x7F;
  else
    v13 = *(_DWORD *)(a1 + 80);
  return (v4 + v13 + 2);
}

void sub_22EF32FA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void **v21;
  void **v22;
  void **v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void **v33;
  __int128 v34;
  void **v35;
  __int128 v36;
  void **v37;
  __int128 v38;
  BOOL v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  void **v51;
  void **v52;
  __int128 v53;
  void **v54;
  __int128 v55;
  __int128 v56;
  void **v57;
  __int128 v58;
  void **v59;
  __int128 v60;
  void **v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  void **v80;
  __int128 v81;
  void **v82;
  __int128 v83;
  __int128 v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  void **v95;
  void **v96;
  __int128 v97;
  void **v98;
  __int128 v99;
  void **v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  __int128 v105;
  void **v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  void **v118;
  __int128 v119;
  void **v120;
  __int128 v121;
  void **v122;
  __int128 v123;
  void **v124;
  void **v125;
  _OWORD *v126;
  void **v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void **v131;
  void **v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  void **v139;
  void **v140;
  __int128 v141;
  void **v142;
  __int128 v143;
  void **v144;
  __int128 v145;
  void **v146;
  __int128 v147;
  void **v148;
  __int128 v149;
  __int128 v150;
  _DWORD *v152;
  unint64_t v153;
  _OWORD *v154;
  __int128 v155;
  unint64_t v156;
  void **v157;
  void **v158;
  void **v159;
  char v160;
  void **v161;
  void **v162;
  __int128 v163;
  void **v164;
  __int128 v165;
  __int128 v166;
  __int128 *v167;
  __int128 *v168;
  __int128 *v169;
  __int128 *v171;
  _DWORD *v172;
  __int128 *v173;
  int64_t v174;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  void *__p[2];
  uint64_t v186;
  char v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  char v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __n128 v197;
  uint64_t v198;
  char v199;

  v6 = &v189;
LABEL_2:
  v7 = a2;
  v172 = (_DWORD *)(a2 - 144);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v7 - v8;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - v8) >> 4);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22E3B38EC(v172, (_DWORD *)v8))
        {
          v63 = *(_QWORD *)v8;
          v64 = *(_QWORD *)(v8 + 8);
          *(_OWORD *)v8 = *(_OWORD *)v172;
          *(_QWORD *)(a2 - 144) = v63;
          *(_QWORD *)(a2 - 136) = v64;
          sub_22EF34F44(v8 + 16, (__int128 *)(a2 - 128));
        }
        return;
      case 3uLL:
        sub_22EF34A10((uint64_t *)v8, (__int128 *)(v8 + 144), (uint64_t)v172);
        return;
      case 4uLL:
        sub_22EF351FC((uint64_t *)v8, (__int128 *)(v8 + 144), v8 + 288, (uint64_t)v172);
        return;
      case 5uLL:
        sub_22EF34904((uint64_t *)v8, (__int128 *)(v8 + 144), v8 + 288, v8 + 432, (uint64_t)v172);
        return;
      default:
        if (v9 > 3455)
        {
          if (!a3)
          {
            if (v8 != v7)
            {
              v174 = (v10 - 2) >> 1;
              v85 = v174;
              do
              {
                v86 = v85;
                if (v174 >= v85)
                {
                  v87 = (2 * v85) | 1;
                  v88 = a1 + 144 * v87;
                  if (2 * v85 + 2 < (uint64_t)v10
                    && sub_22E3B38EC((_DWORD *)(a1 + 144 * v87), (_DWORD *)(v88 + 144)))
                  {
                    v88 += 144;
                    v87 = 2 * v86 + 2;
                  }
                  v89 = a1 + 144 * v86;
                  if ((sub_22E3B38EC((_DWORD *)v88, (_DWORD *)v89) & 1) == 0)
                  {
                    v188 = *(_OWORD *)v89;
                    v90 = a1 + 144 * v86;
                    v91 = *(_OWORD *)(v90 + 16);
                    v190 = *(_QWORD *)(v90 + 32);
                    v189 = v91;
                    *(_QWORD *)(v90 + 24) = 0;
                    *(_QWORD *)(v90 + 32) = 0;
                    *(_QWORD *)(v90 + 16) = 0;
                    v191 = *(_BYTE *)(v90 + 40);
                    v92 = *(_OWORD *)(v90 + 48);
                    v193 = *(_QWORD *)(v90 + 64);
                    v192 = v92;
                    *(_QWORD *)(v90 + 56) = 0;
                    *(_QWORD *)(v90 + 64) = 0;
                    *(_QWORD *)(v90 + 48) = 0;
                    v194 = *(_OWORD *)(v90 + 72);
                    v93 = *(_OWORD *)(v90 + 88);
                    v196 = *(_QWORD *)(v90 + 104);
                    v195 = v93;
                    *(_QWORD *)(v90 + 96) = 0;
                    *(_QWORD *)(v90 + 104) = 0;
                    *(_QWORD *)(v90 + 88) = 0;
                    v197 = *(__n128 *)(v90 + 112);
                    v198 = *(_QWORD *)(v90 + 128);
                    *(_QWORD *)(v90 + 112) = 0;
                    *(_QWORD *)(v90 + 120) = 0;
                    *(_QWORD *)(v90 + 128) = 0;
                    v199 = *(_BYTE *)(v90 + 136);
                    do
                    {
                      v94 = v88;
                      *(_OWORD *)v89 = *(_OWORD *)v88;
                      v95 = (void **)(v89 + 16);
                      if (*(char *)(v89 + 39) < 0)
                        operator delete(*v95);
                      v96 = (void **)(v88 + 16);
                      v97 = *(_OWORD *)(v88 + 16);
                      *(_QWORD *)(v89 + 32) = *(_QWORD *)(v88 + 32);
                      *(_OWORD *)v95 = v97;
                      *(_BYTE *)(v88 + 39) = 0;
                      *(_BYTE *)(v88 + 16) = 0;
                      *(_BYTE *)(v89 + 40) = *(_BYTE *)(v88 + 40);
                      v98 = (void **)(v89 + 48);
                      if (*(char *)(v89 + 71) < 0)
                        operator delete(*v98);
                      v99 = *(_OWORD *)(v88 + 48);
                      *(_QWORD *)(v89 + 64) = *(_QWORD *)(v88 + 64);
                      *(_OWORD *)v98 = v99;
                      *(_BYTE *)(v88 + 71) = 0;
                      *(_BYTE *)(v88 + 48) = 0;
                      *(_OWORD *)(v89 + 72) = *(_OWORD *)(v88 + 72);
                      v100 = (void **)(v89 + 88);
                      if (*(char *)(v89 + 111) < 0)
                        operator delete(*v100);
                      v101 = *(_OWORD *)(v88 + 88);
                      *(_QWORD *)(v89 + 104) = *(_QWORD *)(v88 + 104);
                      *(_OWORD *)v100 = v101;
                      *(_BYTE *)(v88 + 111) = 0;
                      *(_BYTE *)(v88 + 88) = 0;
                      sub_22EF351A4((uint64_t *)(v89 + 112), (__n128 *)(v88 + 112));
                      *(_BYTE *)(v89 + 136) = *(_BYTE *)(v88 + 136);
                      if (v174 < v87)
                        break;
                      v102 = (2 * v87) | 1;
                      v88 = a1 + 144 * v102;
                      v103 = 2 * v87 + 2;
                      if (v103 < (uint64_t)v10
                        && sub_22E3B38EC((_DWORD *)(a1 + 144 * v102), (_DWORD *)(v88 + 144)))
                      {
                        v88 += 144;
                        v102 = v103;
                      }
                      v89 = v94;
                      v87 = v102;
                    }
                    while (!sub_22E3B38EC((_DWORD *)v88, &v188));
                    *(_OWORD *)v94 = v188;
                    if (*(char *)(v94 + 39) < 0)
                      operator delete(*v96);
                    v104 = (void **)(v94 + 48);
                    v105 = v189;
                    *(_QWORD *)(v94 + 32) = v190;
                    *(_OWORD *)v96 = v105;
                    HIBYTE(v190) = 0;
                    LOBYTE(v189) = 0;
                    *(_BYTE *)(v94 + 40) = v191;
                    if (*(char *)(v94 + 71) < 0)
                      operator delete(*v104);
                    v106 = (void **)(v94 + 88);
                    v107 = v192;
                    *(_QWORD *)(v94 + 64) = v193;
                    *(_OWORD *)v104 = v107;
                    HIBYTE(v193) = 0;
                    LOBYTE(v192) = 0;
                    *(_OWORD *)(v94 + 72) = v194;
                    if (*(char *)(v94 + 111) < 0)
                      operator delete(*v106);
                    v108 = v195;
                    *(_QWORD *)(v94 + 104) = v196;
                    *(_OWORD *)v106 = v108;
                    HIBYTE(v196) = 0;
                    LOBYTE(v195) = 0;
                    sub_22EF351A4((uint64_t *)(v94 + 112), &v197);
                    *(_BYTE *)(v94 + 136) = v199;
                    if (v197.n128_u64[0])
                    {
                      sub_22E916AE0((uint64_t *)&v197);
                      operator delete((void *)v197.n128_u64[0]);
                    }
                    if (SHIBYTE(v196) < 0)
                      operator delete((void *)v195);
                    if (SHIBYTE(v193) < 0)
                      operator delete((void *)v192);
                    if (SHIBYTE(v190) < 0)
                      operator delete((void *)v189);
                  }
                }
                v85 = v86 - 1;
              }
              while (v86);
              v169 = (__int128 *)(a1 + 48);
              v171 = (__int128 *)(a1 + 16);
              v168 = (__int128 *)(a1 + 88);
              do
              {
                v109 = 0;
                v176 = *(_OWORD *)a1;
                v177 = *v171;
                v178 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)v171 = 0;
                v110 = *(_BYTE *)(a1 + 40);
                v181 = *(_QWORD *)(a1 + 64);
                v180 = *v169;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)v169 = 0;
                v111 = *(_OWORD *)(a1 + 72);
                v184 = *(_QWORD *)(a1 + 104);
                v183 = *v168;
                *(_QWORD *)v168 = 0;
                *(_QWORD *)(a1 + 96) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                v112 = a2;
                __p[0] = 0;
                __p[1] = 0;
                v186 = 0;
                *(_OWORD *)__p = *(_OWORD *)(a1 + 112);
                v179 = v110;
                v186 = *(_QWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 128) = 0;
                v187 = *(_BYTE *)(a1 + 136);
                v113 = a1;
                v182 = v111;
                do
                {
                  v114 = v113 + 144 * v109 + 144;
                  v115 = 2 * v109;
                  v109 = (2 * v109) | 1;
                  v116 = v115 + 2;
                  if (v115 + 2 < (uint64_t)v10 && sub_22E3B38EC((_DWORD *)v114, (_DWORD *)(v114 + 144)))
                  {
                    v114 += 144;
                    v109 = v116;
                  }
                  *(_OWORD *)v113 = *(_OWORD *)v114;
                  v117 = (void **)(v113 + 16);
                  if (*(char *)(v113 + 39) < 0)
                    operator delete(*v117);
                  v118 = (void **)(v114 + 16);
                  v119 = *(_OWORD *)(v114 + 16);
                  *(_QWORD *)(v113 + 32) = *(_QWORD *)(v114 + 32);
                  *(_OWORD *)v117 = v119;
                  *(_BYTE *)(v114 + 39) = 0;
                  *(_BYTE *)(v114 + 16) = 0;
                  *(_BYTE *)(v113 + 40) = *(_BYTE *)(v114 + 40);
                  v120 = (void **)(v113 + 48);
                  if (*(char *)(v113 + 71) < 0)
                    operator delete(*v120);
                  v121 = *(_OWORD *)(v114 + 48);
                  *(_QWORD *)(v113 + 64) = *(_QWORD *)(v114 + 64);
                  *(_OWORD *)v120 = v121;
                  *(_BYTE *)(v114 + 71) = 0;
                  *(_BYTE *)(v114 + 48) = 0;
                  *(_OWORD *)(v113 + 72) = *(_OWORD *)(v114 + 72);
                  v122 = (void **)(v113 + 88);
                  if (*(char *)(v113 + 111) < 0)
                    operator delete(*v122);
                  v123 = *(_OWORD *)(v114 + 88);
                  *(_QWORD *)(v113 + 104) = *(_QWORD *)(v114 + 104);
                  *(_OWORD *)v122 = v123;
                  *(_BYTE *)(v114 + 111) = 0;
                  *(_BYTE *)(v114 + 88) = 0;
                  sub_22EF351A4((uint64_t *)(v113 + 112), (__n128 *)(v114 + 112));
                  *(_BYTE *)(v113 + 136) = *(_BYTE *)(v114 + 136);
                  v113 = v114;
                }
                while (v109 <= (uint64_t)((v10 - 2) >> 1));
                v124 = (void **)(v114 + 48);
                v173 = (__int128 *)(v114 + 72);
                v125 = (void **)(v114 + 88);
                v126 = (_OWORD *)(a2 - 144);
                a2 -= 144;
                if (v114 == v112 - 144)
                {
                  *(_OWORD *)v114 = v176;
                  if (*(char *)(v114 + 39) < 0)
                    operator delete(*v118);
                  *(_QWORD *)(v114 + 32) = v178;
                  *(_OWORD *)v118 = v177;
                  *(_BYTE *)(v114 + 40) = v179;
                  if (*(char *)(v114 + 71) < 0)
                    operator delete(*v124);
                  *(_QWORD *)(v114 + 64) = v181;
                  *(_OWORD *)v124 = v180;
                  *v173 = v182;
                  if (*(char *)(v114 + 111) < 0)
                    operator delete(*v125);
                  *(_QWORD *)(v114 + 104) = v184;
                  *(_OWORD *)v125 = v183;
                  sub_22EF351A4((uint64_t *)(v114 + 112), (__n128 *)__p);
                  *(_BYTE *)(v114 + 136) = v187;
                }
                else
                {
                  *(_OWORD *)v114 = *v126;
                  if (*(char *)(v114 + 39) < 0)
                    operator delete(*v118);
                  v127 = (void **)(v112 - 128);
                  v128 = *(_OWORD *)(v112 - 128);
                  *(_QWORD *)(v114 + 32) = *(_QWORD *)(v112 - 112);
                  *(_OWORD *)v118 = v128;
                  *(_BYTE *)(v112 - 105) = 0;
                  *(_BYTE *)(v112 - 128) = 0;
                  *(_BYTE *)(v114 + 40) = *(_BYTE *)(v112 - 104);
                  if (*(char *)(v114 + 71) < 0)
                    operator delete(*v124);
                  v129 = *(_OWORD *)(v112 - 96);
                  *(_QWORD *)(v114 + 64) = *(_QWORD *)(v112 - 80);
                  *(_OWORD *)v124 = v129;
                  *(_BYTE *)(v112 - 73) = 0;
                  *(_BYTE *)(v112 - 96) = 0;
                  *v173 = *(_OWORD *)(v112 - 72);
                  if (*(char *)(v114 + 111) < 0)
                    operator delete(*v125);
                  v130 = *(_OWORD *)(v112 - 56);
                  *(_QWORD *)(v114 + 104) = *(_QWORD *)(v112 - 40);
                  v167 = (__int128 *)(v114 + 88);
                  *(_OWORD *)v125 = v130;
                  *(_BYTE *)(v112 - 33) = 0;
                  *(_BYTE *)(v112 - 56) = 0;
                  sub_22EF351A4((uint64_t *)(v114 + 112), (__n128 *)(v112 - 32));
                  *(_BYTE *)(v114 + 136) = *(_BYTE *)(v112 - 8);
                  *v126 = v176;
                  if (*(char *)(v112 - 105) < 0)
                    operator delete(*v127);
                  v131 = (void **)(v112 - 96);
                  *(_QWORD *)(v112 - 112) = v178;
                  *(_OWORD *)v127 = v177;
                  *(_BYTE *)(v112 - 104) = v179;
                  if (*(char *)(v112 - 73) < 0)
                    operator delete(*v131);
                  v132 = (void **)(v112 - 56);
                  *(_QWORD *)(v112 - 80) = v181;
                  *(_OWORD *)v131 = v180;
                  *(_OWORD *)(v112 - 72) = v182;
                  if (*(char *)(v112 - 33) < 0)
                    operator delete(*v132);
                  *(_QWORD *)(v112 - 40) = v184;
                  *(_OWORD *)v132 = v183;
                  sub_22EF351A4((uint64_t *)(v112 - 32), (__n128 *)__p);
                  *(_BYTE *)(v112 - 8) = v187;
                  if (v114 + 144 - a1 >= 145)
                  {
                    v133 = ((v114 + 144 - a1) / 0x90uLL - 2) >> 1;
                    v134 = a1 + 144 * v133;
                    if (sub_22E3B38EC((_DWORD *)v134, (_DWORD *)v114))
                    {
                      v188 = *(_OWORD *)v114;
                      v135 = *(_QWORD *)(v114 + 32);
                      v189 = *(_OWORD *)v118;
                      v190 = v135;
                      *(_QWORD *)(v114 + 24) = 0;
                      *(_QWORD *)(v114 + 32) = 0;
                      *v118 = 0;
                      v191 = *(_BYTE *)(v114 + 40);
                      v136 = *(_OWORD *)v124;
                      v193 = *(_QWORD *)(v114 + 64);
                      v192 = v136;
                      *(_QWORD *)(v114 + 56) = 0;
                      *(_QWORD *)(v114 + 64) = 0;
                      *v124 = 0;
                      v194 = *v173;
                      v137 = *v167;
                      v196 = *(_QWORD *)(v114 + 104);
                      v195 = v137;
                      *(_QWORD *)(v114 + 96) = 0;
                      *(_QWORD *)(v114 + 104) = 0;
                      *(_QWORD *)v167 = 0;
                      v197 = 0uLL;
                      v198 = 0;
                      v197 = *(__n128 *)(v114 + 112);
                      v198 = *(_QWORD *)(v114 + 128);
                      *(_QWORD *)(v114 + 112) = 0;
                      *(_QWORD *)(v114 + 120) = 0;
                      *(_QWORD *)(v114 + 128) = 0;
                      v199 = *(_BYTE *)(v114 + 136);
                      do
                      {
                        v138 = v134;
                        *(_OWORD *)v114 = *(_OWORD *)v134;
                        v139 = (void **)(v114 + 16);
                        if (*(char *)(v114 + 39) < 0)
                          operator delete(*v139);
                        v140 = (void **)(v134 + 16);
                        v141 = *(_OWORD *)(v134 + 16);
                        *(_QWORD *)(v114 + 32) = *(_QWORD *)(v134 + 32);
                        *(_OWORD *)v139 = v141;
                        *(_BYTE *)(v134 + 39) = 0;
                        *(_BYTE *)(v134 + 16) = 0;
                        *(_BYTE *)(v114 + 40) = *(_BYTE *)(v134 + 40);
                        v142 = (void **)(v114 + 48);
                        if (*(char *)(v114 + 71) < 0)
                          operator delete(*v142);
                        v143 = *(_OWORD *)(v134 + 48);
                        *(_QWORD *)(v114 + 64) = *(_QWORD *)(v134 + 64);
                        *(_OWORD *)v142 = v143;
                        *(_BYTE *)(v134 + 71) = 0;
                        *(_BYTE *)(v134 + 48) = 0;
                        *(_OWORD *)(v114 + 72) = *(_OWORD *)(v134 + 72);
                        v144 = (void **)(v114 + 88);
                        if (*(char *)(v114 + 111) < 0)
                          operator delete(*v144);
                        v145 = *(_OWORD *)(v134 + 88);
                        *(_QWORD *)(v114 + 104) = *(_QWORD *)(v134 + 104);
                        *(_OWORD *)v144 = v145;
                        *(_BYTE *)(v134 + 111) = 0;
                        *(_BYTE *)(v134 + 88) = 0;
                        sub_22EF351A4((uint64_t *)(v114 + 112), (__n128 *)(v134 + 112));
                        *(_BYTE *)(v114 + 136) = *(_BYTE *)(v134 + 136);
                        if (!v133)
                          break;
                        v133 = (v133 - 1) >> 1;
                        v134 = a1 + 144 * v133;
                        v114 = v138;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v134, &v188) & 1) != 0);
                      *(_OWORD *)v138 = v188;
                      if (*(char *)(v138 + 39) < 0)
                        operator delete(*v140);
                      v146 = (void **)(v138 + 48);
                      v147 = v189;
                      *(_QWORD *)(v138 + 32) = v190;
                      *(_OWORD *)v140 = v147;
                      HIBYTE(v190) = 0;
                      LOBYTE(v189) = 0;
                      *(_BYTE *)(v138 + 40) = v191;
                      if (*(char *)(v138 + 71) < 0)
                        operator delete(*v146);
                      v148 = (void **)(v138 + 88);
                      v149 = v192;
                      *(_QWORD *)(v138 + 64) = v193;
                      *(_OWORD *)v146 = v149;
                      HIBYTE(v193) = 0;
                      LOBYTE(v192) = 0;
                      *(_OWORD *)(v138 + 72) = v194;
                      if (*(char *)(v138 + 111) < 0)
                        operator delete(*v148);
                      v150 = v195;
                      *(_QWORD *)(v138 + 104) = v196;
                      *(_OWORD *)v148 = v150;
                      HIBYTE(v196) = 0;
                      LOBYTE(v195) = 0;
                      sub_22EF351A4((uint64_t *)(v138 + 112), &v197);
                      *(_BYTE *)(v138 + 136) = v199;
                      if (v197.n128_u64[0])
                      {
                        sub_22E916AE0((uint64_t *)&v197);
                        operator delete((void *)v197.n128_u64[0]);
                      }
                      if (SHIBYTE(v196) < 0)
                        operator delete((void *)v195);
                      if (SHIBYTE(v193) < 0)
                        operator delete((void *)v192);
                      if (SHIBYTE(v190) < 0)
                        operator delete((void *)v189);
                    }
                  }
                }
                if (__p[0])
                {
                  sub_22E916AE0((uint64_t *)__p);
                  operator delete(__p[0]);
                }
              }
              while ((uint64_t)v10-- > 2);
            }
            return;
          }
          v11 = v8 + 144 * (v10 >> 1);
          if ((unint64_t)v9 < 0x4801)
          {
            sub_22EF34A10((uint64_t *)(v8 + 144 * (v10 >> 1)), (__int128 *)v8, (uint64_t)v172);
          }
          else
          {
            sub_22EF34A10((uint64_t *)v8, (__int128 *)(v8 + 144 * (v10 >> 1)), (uint64_t)v172);
            v12 = (__int128 *)(v8 + 144 * (v10 >> 1) - 144);
            sub_22EF34A10((uint64_t *)(a1 + 144), v12, a2 - 288);
            sub_22EF34A10((uint64_t *)(a1 + 288), (__int128 *)(a1 + 144 + 144 * (v10 >> 1)), a2 - 432);
            sub_22EF34A10((uint64_t *)v12, (__int128 *)(a1 + 144 * (v10 >> 1)), a1 + 144 + 144 * (v10 >> 1));
            v13 = *(_QWORD *)a1;
            v14 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *(_QWORD *)v11 = v13;
            *(_QWORD *)(v11 + 8) = v14;
            sub_22EF34F44(a1 + 16, (__int128 *)(a1 + 16 + 144 * (v10 >> 1)));
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 144), (_DWORD *)a1) & 1) == 0)
          {
            v40 = *(_OWORD *)(a1 + 16);
            v188 = *(_OWORD *)a1;
            v41 = *(_QWORD *)(a1 + 32);
            *v6 = v40;
            *((_QWORD *)v6 + 2) = v41;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v191 = *(_BYTE *)(a1 + 40);
            v42 = *(_OWORD *)(a1 + 48);
            v193 = *(_QWORD *)(a1 + 64);
            v192 = v42;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v194 = *(_OWORD *)(a1 + 72);
            v43 = *(_OWORD *)(a1 + 88);
            v196 = *(_QWORD *)(a1 + 104);
            v195 = v43;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            *(_QWORD *)(a1 + 104) = 0;
            v197 = 0uLL;
            v198 = 0;
            v197 = *(__n128 *)(a1 + 112);
            v198 = *(_QWORD *)(a1 + 128);
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_QWORD *)(a1 + 128) = 0;
            v199 = *(_BYTE *)(a1 + 136);
            if ((sub_22E3B38EC(&v188, v172) & 1) != 0)
            {
              v8 = a1;
              do
                v8 += 144;
              while ((sub_22E3B38EC(&v188, (_DWORD *)v8) & 1) == 0);
            }
            else
            {
              v44 = (_DWORD *)(a1 + 144);
              do
              {
                v8 = (unint64_t)v44;
                if ((unint64_t)v44 >= v7)
                  break;
                v45 = sub_22E3B38EC(&v188, v44);
                v44 = (_DWORD *)(v8 + 144);
              }
              while (!v45);
            }
            v46 = v7;
            if (v8 < v7)
            {
              v46 = v7;
              do
                v46 -= 144;
              while ((sub_22E3B38EC(&v188, (_DWORD *)v46) & 1) != 0);
            }
            v47 = v6;
            while (v8 < v46)
            {
              v48 = *(_QWORD *)v8;
              v49 = *(_QWORD *)(v8 + 8);
              *(_OWORD *)v8 = *(_OWORD *)v46;
              *(_QWORD *)v46 = v48;
              *(_QWORD *)(v46 + 8) = v49;
              sub_22EF34F44(v8 + 16, (__int128 *)(v46 + 16));
              do
                v8 += 144;
              while (!sub_22E3B38EC(&v188, (_DWORD *)v8));
              do
                v46 -= 144;
              while ((sub_22E3B38EC(&v188, (_DWORD *)v46) & 1) != 0);
            }
            v50 = (_OWORD *)(v8 - 144);
            if (v8 - 144 != a1)
            {
              v51 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v50;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v51);
              v52 = (void **)(a1 + 48);
              v53 = *(_OWORD *)(v8 - 128);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 112);
              *(_OWORD *)v51 = v53;
              *(_BYTE *)(v8 - 105) = 0;
              *(_BYTE *)(v8 - 128) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v8 - 104);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v52);
              v54 = (void **)(a1 + 88);
              v55 = *(_OWORD *)(v8 - 96);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 - 80);
              *(_OWORD *)v52 = v55;
              *(_BYTE *)(v8 - 73) = 0;
              *(_BYTE *)(v8 - 96) = 0;
              *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 - 72);
              if (*(char *)(a1 + 111) < 0)
                operator delete(*v54);
              v56 = *(_OWORD *)(v8 - 56);
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 - 40);
              *(_OWORD *)v54 = v56;
              *(_BYTE *)(v8 - 33) = 0;
              *(_BYTE *)(v8 - 56) = 0;
              sub_22EF351A4((uint64_t *)(a1 + 112), (__n128 *)(v8 - 32));
              *(_BYTE *)(a1 + 136) = *(_BYTE *)(v8 - 8);
            }
            *v50 = v188;
            v57 = (void **)(v8 - 128);
            if (*(char *)(v8 - 105) < 0)
              operator delete(*v57);
            v6 = v47;
            v58 = *v47;
            *(_QWORD *)(v8 - 112) = *((_QWORD *)v47 + 2);
            *(_OWORD *)v57 = v58;
            HIBYTE(v190) = 0;
            LOBYTE(v189) = 0;
            *(_BYTE *)(v8 - 104) = v191;
            v59 = (void **)(v8 - 96);
            if (*(char *)(v8 - 73) < 0)
              operator delete(*v59);
            v60 = v192;
            *(_QWORD *)(v8 - 80) = v193;
            *(_OWORD *)v59 = v60;
            HIBYTE(v193) = 0;
            LOBYTE(v192) = 0;
            *(_OWORD *)(v8 - 72) = v194;
            v61 = (void **)(v8 - 56);
            if (*(char *)(v8 - 33) < 0)
              operator delete(*v61);
            v62 = v195;
            *(_QWORD *)(v8 - 40) = v196;
            *(_OWORD *)v61 = v62;
            HIBYTE(v196) = 0;
            LOBYTE(v195) = 0;
            sub_22EF351A4((uint64_t *)(v8 - 32), &v197);
            *(_BYTE *)(v8 - 8) = v199;
            if (v197.n128_u64[0])
            {
              sub_22E916AE0((uint64_t *)&v197);
              operator delete((void *)v197.n128_u64[0]);
            }
            if (SHIBYTE(v196) < 0)
              operator delete((void *)v195);
            if (SHIBYTE(v193) < 0)
              operator delete((void *)v192);
            if (SHIBYTE(v190) < 0)
              operator delete((void *)v189);
            goto LABEL_51;
          }
          v15 = 0;
          v16 = *(_OWORD *)(a1 + 16);
          v188 = *(_OWORD *)a1;
          v17 = *(_QWORD *)(a1 + 32);
          *v6 = v16;
          *((_QWORD *)v6 + 2) = v17;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          LOBYTE(v17) = *(_BYTE *)(a1 + 40);
          v18 = *(_OWORD *)(a1 + 48);
          v193 = *(_QWORD *)(a1 + 64);
          v192 = v18;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v19 = *(_OWORD *)(a1 + 72);
          v20 = *(_OWORD *)(a1 + 88);
          v196 = *(_QWORD *)(a1 + 104);
          v195 = v20;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          v197 = 0uLL;
          v198 = 0;
          v197 = *(__n128 *)(a1 + 112);
          v21 = (void **)(a1 + 16);
          v191 = v17;
          v22 = (void **)(a1 + 48);
          v198 = *(_QWORD *)(a1 + 128);
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          v199 = *(_BYTE *)(a1 + 136);
          v23 = (void **)(a1 + 88);
          v194 = v19;
          do
            v15 += 144;
          while ((sub_22E3B38EC((_DWORD *)(v15 + a1), &v188) & 1) != 0);
          v24 = a1 + v15;
          v25 = (_DWORD *)a2;
          if (v15 == 144)
          {
            v25 = (_DWORD *)a2;
            do
            {
              if (v24 >= (unint64_t)v25)
                break;
              v25 -= 36;
            }
            while ((sub_22E3B38EC(v25, &v188) & 1) == 0);
          }
          else
          {
            do
              v25 -= 36;
            while (!sub_22E3B38EC(v25, &v188));
          }
          v8 = a1 + v15;
          if (v24 < (unint64_t)v25)
          {
            v26 = v25;
            do
            {
              v27 = *(_QWORD *)v8;
              v28 = *(_QWORD *)(v8 + 8);
              *(_OWORD *)v8 = *(_OWORD *)v26;
              *(_QWORD *)v26 = v27;
              *((_QWORD *)v26 + 1) = v28;
              sub_22EF34F44(v8 + 16, (__int128 *)v26 + 1);
              do
                v8 += 144;
              while ((sub_22E3B38EC((_DWORD *)v8, &v188) & 1) != 0);
              do
                v26 -= 36;
              while (!sub_22E3B38EC(v26, &v188));
            }
            while (v8 < (unint64_t)v26);
          }
          v29 = (_OWORD *)(v8 - 144);
          if (v8 - 144 != a1)
          {
            *(_OWORD *)a1 = *v29;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v21);
            v30 = *(_OWORD *)(v8 - 128);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 112);
            *(_OWORD *)v21 = v30;
            *(_BYTE *)(v8 - 105) = 0;
            *(_BYTE *)(v8 - 128) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v8 - 104);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v22);
            v31 = *(_OWORD *)(v8 - 96);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v8 - 80);
            *(_OWORD *)v22 = v31;
            *(_BYTE *)(v8 - 73) = 0;
            *(_BYTE *)(v8 - 96) = 0;
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 - 72);
            if (*(char *)(a1 + 111) < 0)
              operator delete(*v23);
            v32 = *(_OWORD *)(v8 - 56);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 - 40);
            *(_OWORD *)v23 = v32;
            *(_BYTE *)(v8 - 33) = 0;
            *(_BYTE *)(v8 - 56) = 0;
            sub_22EF351A4((uint64_t *)(a1 + 112), (__n128 *)(v8 - 32));
            *(_BYTE *)(a1 + 136) = *(_BYTE *)(v8 - 8);
          }
          *v29 = v188;
          v33 = (void **)(v8 - 128);
          if (*(char *)(v8 - 105) < 0)
            operator delete(*v33);
          v6 = &v189;
          v34 = v189;
          *(_QWORD *)(v8 - 112) = v190;
          *(_OWORD *)v33 = v34;
          HIBYTE(v190) = 0;
          LOBYTE(v189) = 0;
          *(_BYTE *)(v8 - 104) = v191;
          v35 = (void **)(v8 - 96);
          v7 = a2;
          if (*(char *)(v8 - 73) < 0)
            operator delete(*v35);
          v36 = v192;
          *(_QWORD *)(v8 - 80) = v193;
          *(_OWORD *)v35 = v36;
          HIBYTE(v193) = 0;
          LOBYTE(v192) = 0;
          *(_OWORD *)(v8 - 72) = v194;
          v37 = (void **)(v8 - 56);
          if (*(char *)(v8 - 33) < 0)
            operator delete(*v37);
          v38 = v195;
          *(_QWORD *)(v8 - 40) = v196;
          *(_OWORD *)v37 = v38;
          HIBYTE(v196) = 0;
          LOBYTE(v195) = 0;
          sub_22EF351A4((uint64_t *)(v8 - 32), &v197);
          *(_BYTE *)(v8 - 8) = v199;
          if (v197.n128_u64[0])
          {
            sub_22E916AE0((uint64_t *)&v197);
            operator delete((void *)v197.n128_u64[0]);
          }
          if (SHIBYTE(v196) < 0)
            operator delete((void *)v195);
          if (SHIBYTE(v193) < 0)
            operator delete((void *)v192);
          if (SHIBYTE(v190) < 0)
            operator delete((void *)v189);
          if (v24 < (unint64_t)v25)
            goto LABEL_50;
          v39 = sub_22EF34B20(a1, v8 - 144);
          if (!sub_22EF34B20(v8, a2))
          {
            if (v39)
              continue;
LABEL_50:
            sub_22EF32FA8(a1, v8 - 144, a3, a4 & 1);
LABEL_51:
            a4 = 0;
            continue;
          }
          a2 = v8 - 144;
          if (v39)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v8 != v7)
          {
            v65 = (_DWORD *)(v8 + 144);
            if (v8 + 144 != a2)
            {
              v66 = 0;
              v67 = (_OWORD *)v8;
              do
              {
                v68 = v65;
                if (sub_22E3B38EC(v65, v67))
                {
                  v188 = *v68;
                  v189 = v67[10];
                  v190 = *((_QWORD *)v67 + 22);
                  *((_QWORD *)v67 + 20) = 0;
                  *((_QWORD *)v67 + 21) = 0;
                  *((_QWORD *)v67 + 22) = 0;
                  v191 = *((_BYTE *)v67 + 184);
                  v192 = v67[12];
                  v193 = *((_QWORD *)v67 + 26);
                  *((_QWORD *)v67 + 24) = 0;
                  *((_QWORD *)v67 + 25) = 0;
                  *((_QWORD *)v67 + 26) = 0;
                  v194 = *(_OWORD *)((char *)v67 + 216);
                  v69 = *(_OWORD *)((char *)v67 + 232);
                  v196 = *((_QWORD *)v67 + 31);
                  v195 = v69;
                  *((_QWORD *)v67 + 29) = 0;
                  *((_QWORD *)v67 + 30) = 0;
                  v197 = *((__n128 *)v67 + 16);
                  v198 = *((_QWORD *)v67 + 34);
                  *((_QWORD *)v67 + 31) = 0;
                  *((_QWORD *)v67 + 32) = 0;
                  *((_QWORD *)v67 + 33) = 0;
                  *((_QWORD *)v67 + 34) = 0;
                  v70 = v66;
                  v199 = *((_BYTE *)v67 + 280);
                  while (1)
                  {
                    v71 = v70;
                    v72 = a1 + v70;
                    *(_OWORD *)(v72 + 144) = *(_OWORD *)(a1 + v70);
                    v73 = a1 + v70 + 160;
                    if (*(char *)(v72 + 183) < 0)
                      operator delete(*(void **)v73);
                    *(_OWORD *)v73 = *(_OWORD *)(v72 + 16);
                    *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 32);
                    *(_BYTE *)(v72 + 39) = 0;
                    *(_BYTE *)(v72 + 16) = 0;
                    *(_BYTE *)(v72 + 184) = *(_BYTE *)(v72 + 40);
                    v74 = v72 + 192;
                    if (*(char *)(v72 + 215) < 0)
                      operator delete(*(void **)v74);
                    v75 = a1 + v71;
                    *(_OWORD *)v74 = *(_OWORD *)(a1 + v71 + 48);
                    *(_QWORD *)(v74 + 16) = *(_QWORD *)(a1 + v71 + 64);
                    *(_BYTE *)(v75 + 71) = 0;
                    *(_BYTE *)(v75 + 48) = 0;
                    *(_OWORD *)(v75 + 216) = *(_OWORD *)(a1 + v71 + 72);
                    v76 = (void **)(a1 + v71 + 232);
                    if (*(char *)(a1 + v71 + 255) < 0)
                      operator delete(*v76);
                    *(_OWORD *)v76 = *(_OWORD *)(v75 + 88);
                    *(_QWORD *)(a1 + v71 + 248) = *(_QWORD *)(v75 + 104);
                    *(_BYTE *)(v75 + 111) = 0;
                    *(_BYTE *)(v75 + 88) = 0;
                    sub_22EF351A4((uint64_t *)(v75 + 256), (__n128 *)(v75 + 112));
                    *(_BYTE *)(v75 + 280) = *(_BYTE *)(v75 + 136);
                    if (!v71)
                      break;
                    v70 = v71 - 144;
                    if ((sub_22E3B38EC(&v188, (_DWORD *)(v71 - 144 + a1)) & 1) == 0)
                    {
                      v77 = a1 + v71;
                      goto LABEL_114;
                    }
                  }
                  v77 = a1;
LABEL_114:
                  *(_OWORD *)v77 = v188;
                  v78 = a1 + v71;
                  v79 = (void **)(v78 + 16);
                  if (*(char *)(v77 + 39) < 0)
                    operator delete(*v79);
                  v80 = (void **)(v78 + 48);
                  v81 = v189;
                  *(_QWORD *)(v78 + 32) = v190;
                  *(_OWORD *)v79 = v81;
                  HIBYTE(v190) = 0;
                  LOBYTE(v189) = 0;
                  *(_BYTE *)(v77 + 40) = v191;
                  if (*(char *)(v77 + 71) < 0)
                    operator delete(*v80);
                  v82 = (void **)(v78 + 88);
                  v83 = v192;
                  *(_QWORD *)(v78 + 64) = v193;
                  *(_OWORD *)v80 = v83;
                  HIBYTE(v193) = 0;
                  LOBYTE(v192) = 0;
                  *(_OWORD *)(v78 + 72) = v194;
                  if (*(char *)(v77 + 111) < 0)
                    operator delete(*v82);
                  v84 = v195;
                  *(_QWORD *)(v78 + 104) = v196;
                  *(_OWORD *)v82 = v84;
                  HIBYTE(v196) = 0;
                  LOBYTE(v195) = 0;
                  sub_22EF351A4((uint64_t *)(v78 + 112), &v197);
                  *(_BYTE *)(v77 + 136) = v199;
                  if (v197.n128_u64[0])
                  {
                    sub_22E916AE0((uint64_t *)&v197);
                    operator delete((void *)v197.n128_u64[0]);
                  }
                  if (SHIBYTE(v196) < 0)
                    operator delete((void *)v195);
                  if (SHIBYTE(v193) < 0)
                    operator delete((void *)v192);
                  if (SHIBYTE(v190) < 0)
                    operator delete((void *)v189);
                }
                v65 = v68 + 9;
                v66 += 144;
                v67 = v68;
              }
              while (v68 + 9 != (_OWORD *)a2);
            }
          }
        }
        else if (v8 != v7)
        {
          v152 = (_DWORD *)(v8 + 144);
          if (v8 + 144 != a2)
          {
            v153 = v8 - 144;
            do
            {
              v154 = v152;
              if (sub_22E3B38EC(v152, (_DWORD *)a1))
              {
                v188 = *v154;
                v189 = *(_OWORD *)(a1 + 160);
                v190 = *(_QWORD *)(a1 + 176);
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                v191 = *(_BYTE *)(a1 + 184);
                v192 = *(_OWORD *)(a1 + 192);
                v193 = *(_QWORD *)(a1 + 208);
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                v194 = *(_OWORD *)(a1 + 216);
                v155 = *(_OWORD *)(a1 + 232);
                v196 = *(_QWORD *)(a1 + 248);
                v195 = v155;
                *(_QWORD *)(a1 + 232) = 0;
                *(_QWORD *)(a1 + 240) = 0;
                v197 = *(__n128 *)(a1 + 256);
                v198 = *(_QWORD *)(a1 + 272);
                *(_QWORD *)(a1 + 248) = 0;
                *(_QWORD *)(a1 + 256) = 0;
                *(_QWORD *)(a1 + 264) = 0;
                *(_QWORD *)(a1 + 272) = 0;
                v156 = v153;
                v199 = *(_BYTE *)(a1 + 280);
                do
                {
                  *(_OWORD *)(v156 + 288) = *(_OWORD *)(v156 + 144);
                  v157 = (void **)(v156 + 304);
                  if (*(char *)(v156 + 327) < 0)
                    operator delete(*v157);
                  *(_OWORD *)v157 = *(_OWORD *)(v156 + 160);
                  *(_QWORD *)(v156 + 320) = *(_QWORD *)(v156 + 176);
                  *(_BYTE *)(v156 + 183) = 0;
                  *(_BYTE *)(v156 + 160) = 0;
                  *(_BYTE *)(v156 + 328) = *(_BYTE *)(v156 + 184);
                  v158 = (void **)(v156 + 336);
                  if (*(char *)(v156 + 359) < 0)
                    operator delete(*v158);
                  *(_OWORD *)v158 = *(_OWORD *)(v156 + 192);
                  *(_QWORD *)(v156 + 352) = *(_QWORD *)(v156 + 208);
                  *(_BYTE *)(v156 + 215) = 0;
                  *(_BYTE *)(v156 + 192) = 0;
                  *(_OWORD *)(v156 + 360) = *(_OWORD *)(v156 + 216);
                  v159 = (void **)(v156 + 376);
                  if (*(char *)(v156 + 399) < 0)
                    operator delete(*v159);
                  *(_OWORD *)v159 = *(_OWORD *)(v156 + 232);
                  *(_QWORD *)(v156 + 392) = *(_QWORD *)(v156 + 248);
                  *(_BYTE *)(v156 + 255) = 0;
                  *(_BYTE *)(v156 + 232) = 0;
                  sub_22EF351A4((uint64_t *)(v156 + 400), (__n128 *)(v156 + 256));
                  *(_BYTE *)(v156 + 424) = *(_BYTE *)(v156 + 280);
                  v160 = sub_22E3B38EC(&v188, (_DWORD *)v156);
                  v156 -= 144;
                }
                while ((v160 & 1) != 0);
                *(_OWORD *)(v156 + 288) = v188;
                v161 = (void **)(v156 + 304);
                if (*(char *)(v156 + 327) < 0)
                  operator delete(*v161);
                v162 = (void **)(v156 + 336);
                v163 = v189;
                *(_QWORD *)(v156 + 320) = v190;
                *(_OWORD *)v161 = v163;
                HIBYTE(v190) = 0;
                LOBYTE(v189) = 0;
                *(_BYTE *)(v156 + 328) = v191;
                if (*(char *)(v156 + 359) < 0)
                  operator delete(*v162);
                v164 = (void **)(v156 + 376);
                v165 = v192;
                *(_QWORD *)(v156 + 352) = v193;
                *(_OWORD *)v162 = v165;
                HIBYTE(v193) = 0;
                LOBYTE(v192) = 0;
                *(_OWORD *)(v156 + 360) = v194;
                if (*(char *)(v156 + 399) < 0)
                  operator delete(*v164);
                v166 = v195;
                *(_QWORD *)(v156 + 392) = v196;
                *(_OWORD *)v164 = v166;
                HIBYTE(v196) = 0;
                LOBYTE(v195) = 0;
                sub_22EF351A4((uint64_t *)(v156 + 400), &v197);
                *(_BYTE *)(v156 + 424) = v199;
                if (v197.n128_u64[0])
                {
                  sub_22E916AE0((uint64_t *)&v197);
                  operator delete((void *)v197.n128_u64[0]);
                }
                if (SHIBYTE(v196) < 0)
                  operator delete((void *)v195);
                if (SHIBYTE(v193) < 0)
                  operator delete((void *)v192);
                if (SHIBYTE(v190) < 0)
                  operator delete((void *)v189);
              }
              v152 = v154 + 9;
              v153 += 144;
              a1 = (uint64_t)v154;
            }
            while (v154 + 9 != (_OWORD *)a2);
          }
        }
        return;
    }
  }
}

void sub_22EF34904(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF351FC(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF34F44(a4 + 16, (__int128 *)(a5 + 16));
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF34F44(a3 + 16, (__int128 *)(a4 + 16));
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *(_QWORD *)a2;
        v15 = *((_QWORD *)a2 + 1);
        *a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF34F44((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *a2;
          *(_QWORD *)a2 = v16;
          *((_QWORD *)a2 + 1) = v17;
          sub_22EF34F44((uint64_t)(a1 + 2), a2 + 1);
        }
      }
    }
  }
}

void sub_22EF34A10(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = (uint64_t)(a1 + 2);
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = (__int128 *)(a3 + 16);
    }
    else
    {
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v9;
      *((_QWORD *)a2 + 1) = v10;
      sub_22EF34F44(v11, a2 + 1);
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = (__int128 *)(a3 + 16);
      v11 = (uint64_t)(a2 + 1);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = a2 + 1;
    sub_22EF34F44((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v15;
      *((_QWORD *)a2 + 1) = v16;
      v11 = (uint64_t)(a1 + 2);
LABEL_9:
      sub_22EF34F44(v11, v12);
    }
  }
}

BOOL sub_22EF34B20(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  void **v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  char v39;

  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 144);
      if (sub_22E3B38EC((_DWORD *)(a2 - 144), (_DWORD *)a1))
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a2 - 144) = v7;
        *(_QWORD *)(a2 - 136) = v8;
        sub_22EF34F44(a1 + 16, (__int128 *)(a2 - 128));
      }
      return 1;
    case 3uLL:
      sub_22EF34A10((uint64_t *)a1, (__int128 *)(a1 + 144), a2 - 144);
      return 1;
    case 4uLL:
      sub_22EF351FC((uint64_t *)a1, (__int128 *)(a1 + 144), a1 + 288, a2 - 144);
      return 1;
    case 5uLL:
      sub_22EF34904((uint64_t *)a1, (__int128 *)(a1 + 144), a1 + 288, a1 + 432, a2 - 144);
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 288);
      sub_22EF34A10((uint64_t *)a1, (__int128 *)(a1 + 144), a1 + 288);
      v10 = a1 + 432;
      if (a1 + 432 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22E3B38EC((_DWORD *)v10, v9))
    {
      v13 = *(_OWORD *)(v10 + 16);
      v28 = *(_OWORD *)v10;
      v29 = v13;
      v30 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v31 = *(_BYTE *)(v10 + 40);
      v32 = *(_OWORD *)(v10 + 48);
      v33 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      v34 = *(_OWORD *)(v10 + 72);
      v14 = *(_OWORD *)(v10 + 88);
      v36 = *(_QWORD *)(v10 + 104);
      v35 = v14;
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 96) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v10 + 112);
      v38 = *(_QWORD *)(v10 + 128);
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)(v10 + 112) = 0;
      v39 = *(_BYTE *)(v10 + 136);
      v15 = v11;
      *(_QWORD *)(v10 + 120) = 0;
      *(_QWORD *)(v10 + 128) = 0;
      while (1)
      {
        v16 = v15;
        v17 = a1 + v15;
        *(_OWORD *)(a1 + v15 + 432) = *(_OWORD *)(a1 + v15 + 288);
        v18 = a1 + v15 + 448;
        if (*(char *)(a1 + v15 + 471) < 0)
          operator delete(*(void **)v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 304);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 320);
        *(_BYTE *)(v17 + 327) = 0;
        *(_BYTE *)(v17 + 304) = 0;
        *(_BYTE *)(v17 + 472) = *(_BYTE *)(v17 + 328);
        v19 = v17 + 480;
        if (*(char *)(v17 + 503) < 0)
          operator delete(*(void **)v19);
        v20 = a1 + v16;
        *(_OWORD *)v19 = *(_OWORD *)(a1 + v16 + 336);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + v16 + 352);
        *(_BYTE *)(v20 + 359) = 0;
        *(_BYTE *)(v20 + 336) = 0;
        *(_OWORD *)(a1 + v16 + 504) = *(_OWORD *)(a1 + v16 + 360);
        v21 = (void **)(a1 + v16 + 520);
        if (*(char *)(a1 + v16 + 543) < 0)
          operator delete(*v21);
        *(_QWORD *)(a1 + v16 + 536) = *(_QWORD *)(v20 + 392);
        *(_OWORD *)v21 = *(_OWORD *)(v20 + 376);
        *(_BYTE *)(v20 + 399) = 0;
        *(_BYTE *)(v20 + 376) = 0;
        sub_22EF351A4((uint64_t *)(v20 + 544), (__n128 *)(v20 + 400));
        *(_BYTE *)(v20 + 568) = *(_BYTE *)(v20 + 424);
        if (v16 == -288)
          break;
        v22 = sub_22E3B38EC(&v28, (_DWORD *)(a1 + v16 + 144));
        v15 = v16 - 144;
        if ((v22 & 1) == 0)
        {
          v23 = a1 + v15 + 432;
          goto LABEL_18;
        }
      }
      v23 = a1;
LABEL_18:
      *(_OWORD *)v23 = v28;
      v24 = a1 + v16;
      v25 = (void **)(v24 + 304);
      if (*(char *)(v23 + 39) < 0)
        operator delete(*v25);
      v26 = (void **)(v24 + 336);
      *(_OWORD *)v25 = v29;
      *(_QWORD *)(v24 + 320) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      *(_BYTE *)(v23 + 40) = v31;
      if (*(char *)(v23 + 71) < 0)
        operator delete(*v26);
      v27 = (void **)(v24 + 376);
      *(_QWORD *)(v24 + 352) = v33;
      *(_OWORD *)v26 = v32;
      HIBYTE(v33) = 0;
      LOBYTE(v32) = 0;
      *(_OWORD *)(v24 + 360) = v34;
      if (*(char *)(v23 + 111) < 0)
        operator delete(*v27);
      *(_OWORD *)v27 = v35;
      *(_QWORD *)(v24 + 392) = v36;
      HIBYTE(v36) = 0;
      LOBYTE(v35) = 0;
      sub_22EF351A4((uint64_t *)(v24 + 400), (__n128 *)__p);
      *(_BYTE *)(v23 + 136) = v39;
      if (__p[0])
      {
        sub_22E916AE0((uint64_t *)__p);
        operator delete(__p[0]);
      }
      if (SHIBYTE(v36) < 0)
        operator delete((void *)v35);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
      if (SHIBYTE(v30) < 0)
        operator delete((void *)v29);
      if (++v12 == 8)
        return v10 + 144 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 144;
    v10 += 144;
    if (v10 == a2)
      return 1;
  }
}

void sub_22EF34F44(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  void **v13;
  void **v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  char v24;

  *(_OWORD *)v15 = *(_OWORD *)a1;
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_BYTE *)(a1 + 24);
  v5 = a1 + 32;
  *(_OWORD *)v17 = *(_OWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (_OWORD *)(a1 + 56);
  v19 = *(_OWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)v20 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = (uint64_t *)(a1 + 96);
  v8 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)__p = v8;
  v23 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v24 = *(_BYTE *)(a1 + 120);
  v9 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)v5);
  v10 = (void **)(a1 + 72);
  v11 = a2[2];
  *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v5 = v11;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *v6 = *(__int128 *)((char *)a2 + 56);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v10);
  v12 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v10 = v12;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  sub_22EF351A4(v7, (__n128 *)a2 + 6);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  v13 = (void **)(a2 + 2);
  *a2 = *(_OWORD *)v15;
  *((_QWORD *)a2 + 2) = v16;
  *((_BYTE *)a2 + 24) = v4;
  if (*((char *)a2 + 55) < 0)
    operator delete(*v13);
  v14 = (void **)a2 + 9;
  *(_OWORD *)v13 = *(_OWORD *)v17;
  *((_QWORD *)a2 + 6) = v18;
  *(__int128 *)((char *)a2 + 56) = v19;
  if (*((char *)a2 + 95) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)v20;
  *((_QWORD *)a2 + 11) = v21;
  sub_22EF351A4((uint64_t *)a2 + 12, (__n128 *)__p);
  *((_BYTE *)a2 + 120) = v24;
  if (__p[0])
  {
    sub_22E916AE0((uint64_t *)__p);
    operator delete(__p[0]);
  }
}

__n128 sub_22EF351A4(uint64_t *a1, __n128 *a2)
{
  __n128 result;

  if (*a1)
  {
    sub_22E916AE0(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = a2[1].n128_i64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_22EF351FC(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF34A10(a1, a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF34F44(a3 + 16, (__int128 *)(a4 + 16));
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF34F44((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)a2 = v12;
        *((_QWORD *)a2 + 1) = v13;
        sub_22EF34F44((uint64_t)(a1 + 2), a2 + 1);
      }
    }
  }
}

uint64_t sub_22EF352D4(llvm::raw_ostream *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  const char *v13;
  char v15;
  char v16;
  char v17[10];
  char v18[2];
  char v19[3];
  char v20;

  sub_22EF30CA4(a1, a2);
  v4 = *(unsigned __int16 *)(a2 + 56);
  v5 = (v4 >> 9) & 7;
  if ((v4 & 0xE00) == 0)
    LOBYTE(v5) = 0;
  v15 = v5 & 0xF7 | (8 * (v4 & 1));
  llvm::raw_ostream::write(a1, &v15);
  v16 = *(unsigned __int16 *)(a2 + 56) >> 1;
  llvm::raw_ostream::write(a1, &v16);
  *(_QWORD *)v17 = *(_QWORD *)(a2 + 64);
  llvm::raw_ostream::write(a1, v17);
  *(_WORD *)v18 = -21845 * ((*(_DWORD *)(a2 + 104) - *(_DWORD *)(a2 + 96)) >> 5);
  llvm::raw_ostream::write(a1, v18);
  v6 = *(_QWORD *)(a2 + 96);
  for (i = *(_QWORD *)(a2 + 104); v6 != i; v6 += 96)
  {
    sub_22EF32D6C(a1, v6);
    v8 = *(unsigned __int8 *)(v6 + 88);
    if ((~v8 & 3) != 0)
      v9 = 8;
    else
      v9 = 24;
    v10 = (v8 << 31 >> 31) & v9;
    if ((v8 & 0x1C) != 0)
      v11 = (*(_BYTE *)(v6 + 88) >> 2) & 7;
    else
      v11 = 0;
    v20 = v10 | v11;
    llvm::raw_ostream::write(a1, &v20);
  }
  LOWORD(v12) = *(_BYTE *)(a2 + 95) & 0x7F;
  if (*(char *)(a2 + 95) < 0)
    v12 = *(_QWORD *)(a2 + 80);
  *(_WORD *)v19 = v12;
  llvm::raw_ostream::write(a1, v19);
  if (*(char *)(a2 + 95) >= 0)
    v13 = (const char *)(a2 + 72);
  else
    v13 = *(const char **)(a2 + 72);
  return llvm::raw_ostream::write(a1, v13);
}

void sub_22EF35464(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 128);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 136) & (count - 1));
            *(_QWORD *)(v8 + 128) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF35538(v11);
  }
}

void sub_22EF35538(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void **v18;
  uint64_t v19;
  void **v20;
  __int128 v21;
  __int128 v22;
  void **v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void **v33;
  __int128 v34;
  void **v35;
  __int128 v36;
  void **v37;
  __int128 v38;
  BOOL v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  void **v51;
  void **v52;
  __int128 v53;
  void **v54;
  __int128 v55;
  __int128 v56;
  void **v57;
  __int128 v58;
  void **v59;
  __int128 v60;
  void **v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _DWORD *v97;
  void **v98;
  void **v99;
  __int128 v100;
  void **v101;
  __int128 v102;
  void **v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  __int128 v108;
  void **v109;
  __int128 v110;
  __int128 v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  void **v123;
  __int128 v124;
  void **v125;
  __int128 v126;
  void **v127;
  __int128 v128;
  void **v129;
  void **v130;
  _OWORD *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  _DWORD *v144;
  void **v145;
  void **v146;
  __int128 v147;
  void **v148;
  __int128 v149;
  void **v150;
  __int128 v151;
  void **v152;
  __int128 v153;
  void **v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  _DWORD *v161;
  char *v162;
  _OWORD *v163;
  __int128 v164;
  char *v165;
  void **v166;
  void **v167;
  void **v168;
  void **v169;
  void **v170;
  __int128 v171;
  void **v172;
  __int128 v173;
  __int128 v174;
  int v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v184;
  _DWORD *v185;
  char v186;
  uint64_t v187;
  char v188;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char v193;
  __int128 __p;
  uint64_t v195;
  char v196;
  __int128 v197;
  uint64_t v198;
  _BYTE v199[15];
  _QWORD v200[2];
  _QWORD v201[5];

  v201[2] = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v6 = a2;
  v185 = (_DWORD *)(a2 - 104);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_22E3B38EC(v185, (_DWORD *)a1))
        {
          v63 = *(_QWORD *)a1;
          v64 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v185;
          *(_QWORD *)(a2 - 104) = v63;
          *(_QWORD *)(a2 - 96) = v64;
          sub_22EF370B8((uint64_t *)(a1 + 16), (__int128 *)(a2 - 88));
        }
        return;
      case 3:
        sub_22EF36C10((uint64_t *)a1, (__int128 *)(a1 + 104), (uint64_t)v185);
        return;
      case 4:
        sub_22EF37294((uint64_t *)a1, (uint64_t *)(a1 + 104), a1 + 208, (uint64_t)v185);
        return;
      case 5:
        sub_22EF36B04((uint64_t *)a1, (uint64_t *)(a1 + 104), a1 + 208, a1 + 312, (uint64_t)v185);
        return;
      default:
        if (v8 > 2495)
        {
          if (!a3)
          {
            if (a1 != v6)
            {
              v87 = (unint64_t)(v9 - 2) >> 1;
              v88 = v87;
              do
              {
                v89 = v88;
                if (v87 >= v88)
                {
                  v90 = (2 * v88) | 1;
                  v91 = (_DWORD *)(a1 + 104 * v90);
                  if (2 * v88 + 2 < v9 && sub_22E3B38EC((_DWORD *)(a1 + 104 * v90), v91 + 26))
                  {
                    v91 += 26;
                    v90 = 2 * v89 + 2;
                  }
                  v92 = a1 + 104 * v89;
                  if ((sub_22E3B38EC(v91, (_DWORD *)v92) & 1) == 0)
                  {
                    v190 = *(_OWORD *)v92;
                    v93 = a1 + 104 * v89;
                    v94 = *(_OWORD *)(v93 + 16);
                    v192 = *(_QWORD *)(v93 + 32);
                    v191 = v94;
                    *(_QWORD *)(v93 + 24) = 0;
                    *(_QWORD *)(v93 + 32) = 0;
                    *(_QWORD *)(v93 + 16) = 0;
                    v193 = *(_BYTE *)(v93 + 40);
                    v95 = *(_OWORD *)(v93 + 48);
                    v195 = *(_QWORD *)(v93 + 64);
                    __p = v95;
                    *(_QWORD *)(v93 + 56) = 0;
                    *(_QWORD *)(v93 + 64) = 0;
                    *(_QWORD *)(v93 + 48) = 0;
                    v196 = *(_BYTE *)(v93 + 72);
                    v96 = *(_OWORD *)(v93 + 80);
                    v198 = *(_QWORD *)(v93 + 96);
                    v197 = v96;
                    *(_QWORD *)(v93 + 88) = 0;
                    *(_QWORD *)(v93 + 96) = 0;
                    *(_QWORD *)(v93 + 80) = 0;
                    do
                    {
                      v97 = v91;
                      *(_OWORD *)v92 = *(_OWORD *)v91;
                      v98 = (void **)(v92 + 16);
                      if (*(char *)(v92 + 39) < 0)
                        operator delete(*v98);
                      v99 = (void **)(v97 + 4);
                      v100 = *((_OWORD *)v97 + 1);
                      *(_QWORD *)(v92 + 32) = *((_QWORD *)v97 + 4);
                      *(_OWORD *)v98 = v100;
                      *((_BYTE *)v97 + 39) = 0;
                      *((_BYTE *)v97 + 16) = 0;
                      *(_BYTE *)(v92 + 40) = *((_BYTE *)v97 + 40);
                      v101 = (void **)(v92 + 48);
                      if (*(char *)(v92 + 71) < 0)
                        operator delete(*v101);
                      v102 = *((_OWORD *)v97 + 3);
                      *(_QWORD *)(v92 + 64) = *((_QWORD *)v97 + 8);
                      *(_OWORD *)v101 = v102;
                      *((_BYTE *)v97 + 71) = 0;
                      *((_BYTE *)v97 + 48) = 0;
                      *(_BYTE *)(v92 + 72) = *((_BYTE *)v97 + 72);
                      v103 = (void **)(v92 + 80);
                      if (*(char *)(v92 + 103) < 0)
                        operator delete(*v103);
                      v104 = *((_OWORD *)v97 + 5);
                      *(_QWORD *)(v92 + 96) = *((_QWORD *)v97 + 12);
                      *(_OWORD *)v103 = v104;
                      *((_BYTE *)v97 + 103) = 0;
                      *((_BYTE *)v97 + 80) = 0;
                      if (v87 < v90)
                        break;
                      v105 = (2 * v90) | 1;
                      v91 = (_DWORD *)(a1 + 104 * v105);
                      v106 = 2 * v90 + 2;
                      if (v106 < v9 && sub_22E3B38EC((_DWORD *)(a1 + 104 * v105), v91 + 26))
                      {
                        v91 += 26;
                        v105 = v106;
                      }
                      v92 = (uint64_t)v97;
                      v90 = v105;
                    }
                    while (!sub_22E3B38EC(v91, &v190));
                    *(_OWORD *)v97 = v190;
                    if (*((char *)v97 + 39) < 0)
                      operator delete(*v99);
                    v107 = (void **)(v97 + 12);
                    v108 = v191;
                    *((_QWORD *)v97 + 4) = v192;
                    *(_OWORD *)v99 = v108;
                    HIBYTE(v192) = 0;
                    LOBYTE(v191) = 0;
                    *((_BYTE *)v97 + 40) = v193;
                    if (*((char *)v97 + 71) < 0)
                      operator delete(*v107);
                    v109 = (void **)(v97 + 20);
                    v110 = __p;
                    *((_QWORD *)v97 + 8) = v195;
                    *(_OWORD *)v107 = v110;
                    HIBYTE(v195) = 0;
                    LOBYTE(__p) = 0;
                    *((_BYTE *)v97 + 72) = v196;
                    if (*((char *)v97 + 103) < 0)
                    {
                      operator delete(*v109);
                      v112 = SHIBYTE(v195);
                      v113 = v198;
                      *(_OWORD *)v109 = v197;
                      *((_QWORD *)v97 + 12) = v113;
                      HIBYTE(v198) = 0;
                      LOBYTE(v197) = 0;
                      if (v112 < 0)
                        operator delete((void *)__p);
                    }
                    else
                    {
                      v111 = v197;
                      *((_QWORD *)v97 + 12) = v198;
                      *(_OWORD *)v109 = v111;
                      HIBYTE(v198) = 0;
                      LOBYTE(v197) = 0;
                    }
                    if (SHIBYTE(v192) < 0)
                      operator delete((void *)v191);
                  }
                }
                v88 = v89 - 1;
              }
              while (v89);
              do
              {
                v114 = 0;
                v115 = a2;
                v177 = *(_QWORD *)a1;
                v178 = *(_QWORD *)(a1 + 8);
                v180 = *(_QWORD *)(a1 + 16);
                v201[0] = *(_QWORD *)(a1 + 24);
                *(_QWORD *)((char *)v201 + 7) = *(_QWORD *)(a1 + 31);
                v181 = *(_BYTE *)(a1 + 39);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v179 = *(_BYTE *)(a1 + 40);
                v182 = *(_QWORD *)(a1 + 48);
                v200[0] = *(_QWORD *)(a1 + 56);
                *(_QWORD *)((char *)v200 + 7) = *(_QWORD *)(a1 + 63);
                v116 = *(_BYTE *)(a1 + 71);
                *(_QWORD *)(a1 + 48) = 0;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                v184 = *(_BYTE *)(a1 + 72);
                v186 = v116;
                v187 = *(_QWORD *)(a1 + 80);
                v117 = *(_QWORD *)(a1 + 88);
                *(_QWORD *)&v199[7] = *(_QWORD *)(a1 + 95);
                *(_QWORD *)v199 = v117;
                v188 = *(_BYTE *)(a1 + 103);
                *(_QWORD *)(a1 + 80) = 0;
                *(_QWORD *)(a1 + 88) = 0;
                v118 = a1;
                *(_QWORD *)(a1 + 96) = 0;
                do
                {
                  v119 = v118 + 104 * v114 + 104;
                  v120 = 2 * v114;
                  v114 = (2 * v114) | 1;
                  v121 = v120 + 2;
                  if (v120 + 2 < v9 && sub_22E3B38EC((_DWORD *)v119, (_DWORD *)(v119 + 104)))
                  {
                    v119 += 104;
                    v114 = v121;
                  }
                  *(_OWORD *)v118 = *(_OWORD *)v119;
                  v122 = (void **)(v118 + 16);
                  if (*(char *)(v118 + 39) < 0)
                    operator delete(*v122);
                  v123 = (void **)(v119 + 16);
                  v124 = *(_OWORD *)(v119 + 16);
                  *(_QWORD *)(v118 + 32) = *(_QWORD *)(v119 + 32);
                  *(_OWORD *)v122 = v124;
                  *(_BYTE *)(v119 + 39) = 0;
                  *(_BYTE *)(v119 + 16) = 0;
                  *(_BYTE *)(v118 + 40) = *(_BYTE *)(v119 + 40);
                  v125 = (void **)(v118 + 48);
                  if (*(char *)(v118 + 71) < 0)
                    operator delete(*v125);
                  v126 = *(_OWORD *)(v119 + 48);
                  *(_QWORD *)(v118 + 64) = *(_QWORD *)(v119 + 64);
                  *(_OWORD *)v125 = v126;
                  *(_BYTE *)(v119 + 71) = 0;
                  *(_BYTE *)(v119 + 48) = 0;
                  *(_BYTE *)(v118 + 72) = *(_BYTE *)(v119 + 72);
                  v127 = (void **)(v118 + 80);
                  if (*(char *)(v118 + 103) < 0)
                    operator delete(*v127);
                  v128 = *(_OWORD *)(v119 + 80);
                  *(_QWORD *)(v118 + 96) = *(_QWORD *)(v119 + 96);
                  *(_OWORD *)v127 = v128;
                  *(_BYTE *)(v119 + 103) = 0;
                  *(_BYTE *)(v119 + 80) = 0;
                  v118 = v119;
                }
                while (v114 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v129 = (void **)(v119 + 48);
                v130 = (void **)(v119 + 80);
                v131 = (_OWORD *)(a2 - 104);
                a2 -= 104;
                if (v119 == v115 - 104)
                {
                  *(_QWORD *)v119 = v177;
                  *(_QWORD *)(v119 + 8) = v178;
                  if (*(char *)(v119 + 39) < 0)
                    operator delete(*v123);
                  v157 = v201[0];
                  *(_QWORD *)(v119 + 16) = v180;
                  *(_QWORD *)(v119 + 24) = v157;
                  *(_QWORD *)(v119 + 31) = *(_QWORD *)((char *)v201 + 7);
                  *(_BYTE *)(v119 + 39) = v181;
                  *(_BYTE *)(v119 + 40) = v179;
                  if (*(char *)(v119 + 71) < 0)
                    operator delete(*v129);
                  *(_QWORD *)(v119 + 48) = v182;
                  *(_QWORD *)(v119 + 56) = v200[0];
                  *(_QWORD *)(v119 + 63) = *(_QWORD *)((char *)v200 + 7);
                  *(_BYTE *)(v119 + 71) = v186;
                  *(_BYTE *)(v119 + 72) = v184;
                  if (*(char *)(v119 + 103) < 0)
                    operator delete(*v130);
                  *(_QWORD *)(v119 + 80) = v187;
                  *(_QWORD *)(v119 + 88) = *(_QWORD *)v199;
                  *(_QWORD *)(v119 + 95) = *(_QWORD *)&v199[7];
                  *(_BYTE *)(v119 + 103) = v188;
                }
                else
                {
                  *(_OWORD *)v119 = *v131;
                  if (*(char *)(v119 + 39) < 0)
                    operator delete(*v123);
                  v132 = *(_OWORD *)(v115 - 88);
                  *(_QWORD *)(v119 + 32) = *(_QWORD *)(v115 - 72);
                  *(_OWORD *)v123 = v132;
                  *(_BYTE *)(v115 - 65) = 0;
                  *(_BYTE *)(v115 - 88) = 0;
                  *(_BYTE *)(v119 + 40) = *(_BYTE *)(v115 - 64);
                  if (*(char *)(v119 + 71) < 0)
                    operator delete(*v129);
                  v133 = *(_OWORD *)(v115 - 56);
                  *(_QWORD *)(v119 + 64) = *(_QWORD *)(v115 - 40);
                  *(_OWORD *)v129 = v133;
                  *(_BYTE *)(v115 - 33) = 0;
                  *(_BYTE *)(v115 - 56) = 0;
                  *(_BYTE *)(v119 + 72) = *(_BYTE *)(v115 - 32);
                  if (*(char *)(v119 + 103) < 0)
                    operator delete(*v130);
                  v134 = *(_OWORD *)(v115 - 24);
                  *(_QWORD *)(v119 + 96) = *(_QWORD *)(v115 - 8);
                  *(_OWORD *)v130 = v134;
                  *(_BYTE *)(v115 - 1) = 0;
                  *(_BYTE *)(v115 - 24) = 0;
                  *(_QWORD *)(v115 - 104) = v177;
                  *(_QWORD *)(v115 - 96) = v178;
                  if (*(char *)(v115 - 65) < 0)
                    operator delete(*(void **)(v115 - 88));
                  *(_QWORD *)(v115 - 88) = v180;
                  v135 = v201[0];
                  *(_QWORD *)(v115 - 73) = *(_QWORD *)((char *)v201 + 7);
                  *(_QWORD *)(v115 - 80) = v135;
                  *(_BYTE *)(v115 - 65) = v181;
                  *(_BYTE *)(v115 - 64) = v179;
                  if (*(char *)(v115 - 33) < 0)
                    operator delete(*(void **)(v115 - 56));
                  *(_QWORD *)(v115 - 56) = v182;
                  v136 = v200[0];
                  *(_QWORD *)(v115 - 41) = *(_QWORD *)((char *)v200 + 7);
                  *(_QWORD *)(v115 - 48) = v136;
                  *(_BYTE *)(v115 - 33) = v186;
                  *(_BYTE *)(v115 - 32) = v184;
                  if (*(char *)(v115 - 1) < 0)
                    operator delete(*(void **)(v115 - 24));
                  *(_QWORD *)(v115 - 24) = v187;
                  v137 = *(_QWORD *)v199;
                  *(_QWORD *)(v115 - 9) = *(_QWORD *)&v199[7];
                  *(_QWORD *)(v115 - 16) = v137;
                  *(_BYTE *)(v115 - 1) = v188;
                  v138 = v119 + 104 - a1;
                  if (v138 >= 105)
                  {
                    v139 = (v138 / 0x68uLL - 2) >> 1;
                    v140 = (_DWORD *)(a1 + 104 * v139);
                    if (sub_22E3B38EC(v140, (_DWORD *)v119))
                    {
                      v190 = *(_OWORD *)v119;
                      v141 = *(_QWORD *)(v119 + 32);
                      v191 = *(_OWORD *)v123;
                      v192 = v141;
                      *(_QWORD *)(v119 + 24) = 0;
                      *(_QWORD *)(v119 + 32) = 0;
                      *v123 = 0;
                      v193 = *(_BYTE *)(v119 + 40);
                      v142 = *(_OWORD *)v129;
                      v195 = *(_QWORD *)(v119 + 64);
                      __p = v142;
                      *(_QWORD *)(v119 + 56) = 0;
                      *(_QWORD *)(v119 + 64) = 0;
                      *v129 = 0;
                      v196 = *(_BYTE *)(v119 + 72);
                      v143 = *(_OWORD *)v130;
                      v198 = *(_QWORD *)(v119 + 96);
                      v197 = v143;
                      *(_QWORD *)(v119 + 88) = 0;
                      *(_QWORD *)(v119 + 96) = 0;
                      *v130 = 0;
                      do
                      {
                        v144 = v140;
                        *(_OWORD *)v119 = *(_OWORD *)v140;
                        v145 = (void **)(v119 + 16);
                        if (*(char *)(v119 + 39) < 0)
                          operator delete(*v145);
                        v146 = (void **)(v144 + 4);
                        v147 = *((_OWORD *)v144 + 1);
                        *(_QWORD *)(v119 + 32) = *((_QWORD *)v144 + 4);
                        *(_OWORD *)v145 = v147;
                        *((_BYTE *)v144 + 39) = 0;
                        *((_BYTE *)v144 + 16) = 0;
                        *(_BYTE *)(v119 + 40) = *((_BYTE *)v144 + 40);
                        v148 = (void **)(v119 + 48);
                        if (*(char *)(v119 + 71) < 0)
                          operator delete(*v148);
                        v149 = *((_OWORD *)v144 + 3);
                        *(_QWORD *)(v119 + 64) = *((_QWORD *)v144 + 8);
                        *(_OWORD *)v148 = v149;
                        *((_BYTE *)v144 + 71) = 0;
                        *((_BYTE *)v144 + 48) = 0;
                        *(_BYTE *)(v119 + 72) = *((_BYTE *)v144 + 72);
                        v150 = (void **)(v119 + 80);
                        if (*(char *)(v119 + 103) < 0)
                          operator delete(*v150);
                        v151 = *((_OWORD *)v144 + 5);
                        *(_QWORD *)(v119 + 96) = *((_QWORD *)v144 + 12);
                        *(_OWORD *)v150 = v151;
                        *((_BYTE *)v144 + 103) = 0;
                        *((_BYTE *)v144 + 80) = 0;
                        if (!v139)
                          break;
                        v139 = (v139 - 1) >> 1;
                        v140 = (_DWORD *)(a1 + 104 * v139);
                        v119 = (uint64_t)v144;
                      }
                      while ((sub_22E3B38EC(v140, &v190) & 1) != 0);
                      *(_OWORD *)v144 = v190;
                      if (*((char *)v144 + 39) < 0)
                        operator delete(*v146);
                      v152 = (void **)(v144 + 12);
                      v153 = v191;
                      *((_QWORD *)v144 + 4) = v192;
                      *(_OWORD *)v146 = v153;
                      HIBYTE(v192) = 0;
                      LOBYTE(v191) = 0;
                      *((_BYTE *)v144 + 40) = v193;
                      if (*((char *)v144 + 71) < 0)
                        operator delete(*v152);
                      v154 = (void **)(v144 + 20);
                      v155 = __p;
                      *((_QWORD *)v144 + 8) = v195;
                      *(_OWORD *)v152 = v155;
                      HIBYTE(v195) = 0;
                      LOBYTE(__p) = 0;
                      *((_BYTE *)v144 + 72) = v196;
                      if (*((char *)v144 + 103) < 0)
                      {
                        operator delete(*v154);
                        v158 = SHIBYTE(v195);
                        v159 = v198;
                        *(_OWORD *)v154 = v197;
                        *((_QWORD *)v144 + 12) = v159;
                        HIBYTE(v198) = 0;
                        LOBYTE(v197) = 0;
                        if (v158 < 0)
                          operator delete((void *)__p);
                      }
                      else
                      {
                        v156 = v197;
                        *((_QWORD *)v144 + 12) = v198;
                        *(_OWORD *)v154 = v156;
                        HIBYTE(v198) = 0;
                        LOBYTE(v197) = 0;
                      }
                      if (SHIBYTE(v192) < 0)
                        operator delete((void *)v191);
                    }
                  }
                }
              }
              while (v9-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = (uint64_t *)(a1 + 104 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 < 0x3401)
          {
            sub_22EF36C10(v11, (__int128 *)a1, (uint64_t)v185);
          }
          else
          {
            sub_22EF36C10((uint64_t *)a1, (__int128 *)v11, (uint64_t)v185);
            v12 = 104 * v10;
            sub_22EF36C10((uint64_t *)(a1 + 104), (__int128 *)(v12 + a1 - 104), a2 - 208);
            sub_22EF36C10((uint64_t *)(a1 + 208), (__int128 *)(a1 + 104 + v12), a2 - 312);
            sub_22EF36C10((uint64_t *)(v12 + a1 - 104), (__int128 *)v11, a1 + 104 + v12);
            v13 = *(_QWORD *)a1;
            v14 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *v11 = v13;
            v11[1] = v14;
            sub_22EF370B8((uint64_t *)(a1 + 16), (__int128 *)(a1 + 16 + v12));
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 104), (_DWORD *)a1) & 1) == 0)
          {
            v40 = *(_OWORD *)(a1 + 16);
            v190 = *(_OWORD *)a1;
            v41 = *(_QWORD *)(a1 + 32);
            v191 = v40;
            v192 = v41;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v193 = *(_BYTE *)(a1 + 40);
            v42 = *(_OWORD *)(a1 + 48);
            v195 = *(_QWORD *)(a1 + 64);
            __p = v42;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v196 = *(_BYTE *)(a1 + 72);
            v43 = *(_OWORD *)(a1 + 80);
            v198 = *(_QWORD *)(a1 + 96);
            v197 = v43;
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            if ((sub_22E3B38EC(&v190, v185) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 104;
              while ((sub_22E3B38EC(&v190, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v44 = (_DWORD *)(a1 + 104);
              do
              {
                v7 = (unint64_t)v44;
                if ((unint64_t)v44 >= v6)
                  break;
                v45 = sub_22E3B38EC(&v190, v44);
                v44 = (_DWORD *)(v7 + 104);
              }
              while (!v45);
            }
            v46 = v6;
            if (v7 < v6)
            {
              v46 = v6;
              do
                v46 -= 104;
              while ((sub_22E3B38EC(&v190, (_DWORD *)v46) & 1) != 0);
            }
            while (v7 < v46)
            {
              v47 = *(_QWORD *)v7;
              v48 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v46;
              *(_QWORD *)v46 = v47;
              *(_QWORD *)(v46 + 8) = v48;
              sub_22EF370B8((uint64_t *)(v7 + 16), (__int128 *)(v46 + 16));
              do
                v7 += 104;
              while (!sub_22E3B38EC(&v190, (_DWORD *)v7));
              do
                v46 -= 104;
              while ((sub_22E3B38EC(&v190, (_DWORD *)v46) & 1) != 0);
            }
            v49 = (_OWORD *)(v7 - 104);
            if (v7 - 104 != a1)
            {
              v50 = a3;
              v51 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v49;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v51);
              v52 = (void **)(a1 + 48);
              v53 = *(_OWORD *)(v7 - 88);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 72);
              *(_OWORD *)v51 = v53;
              *(_BYTE *)(v7 - 65) = 0;
              *(_BYTE *)(v7 - 88) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 64);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v52);
              v54 = (void **)(a1 + 80);
              v55 = *(_OWORD *)(v7 - 56);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 40);
              *(_OWORD *)v52 = v55;
              *(_BYTE *)(v7 - 33) = 0;
              *(_BYTE *)(v7 - 56) = 0;
              *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 32);
              if (*(char *)(a1 + 103) < 0)
                operator delete(*v54);
              v56 = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 8);
              *(_OWORD *)v54 = v56;
              *(_BYTE *)(v7 - 1) = 0;
              *(_BYTE *)(v7 - 24) = 0;
              v6 = a2;
              a3 = v50;
            }
            *v49 = v190;
            v57 = (void **)(v7 - 88);
            if (*(char *)(v7 - 65) < 0)
              operator delete(*v57);
            v58 = v191;
            *(_QWORD *)(v7 - 72) = v192;
            *(_OWORD *)v57 = v58;
            HIBYTE(v192) = 0;
            LOBYTE(v191) = 0;
            *(_BYTE *)(v7 - 64) = v193;
            v59 = (void **)(v7 - 56);
            if (*(char *)(v7 - 33) < 0)
              operator delete(*v59);
            v60 = __p;
            *(_QWORD *)(v7 - 40) = v195;
            *(_OWORD *)v59 = v60;
            HIBYTE(v195) = 0;
            LOBYTE(__p) = 0;
            *(_BYTE *)(v7 - 32) = v196;
            v61 = (void **)(v7 - 24);
            if (*(char *)(v7 - 1) < 0)
              operator delete(*v61);
            v62 = v197;
            *(_QWORD *)(v7 - 8) = v198;
            *(_OWORD *)v61 = v62;
            HIBYTE(v198) = 0;
            LOBYTE(v197) = 0;
            if (SHIBYTE(v195) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v192) < 0)
              operator delete((void *)v191);
            goto LABEL_47;
          }
          v15 = a3;
          v16 = 0;
          v17 = *(_OWORD *)(a1 + 16);
          v190 = *(_OWORD *)a1;
          v18 = (void **)(a1 + 16);
          v19 = *(_QWORD *)(a1 + 32);
          v191 = v17;
          v192 = v19;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v193 = *(_BYTE *)(a1 + 40);
          v20 = (void **)(a1 + 48);
          v21 = *(_OWORD *)(a1 + 48);
          v195 = *(_QWORD *)(a1 + 64);
          __p = v21;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v196 = *(_BYTE *)(a1 + 72);
          v22 = *(_OWORD *)(a1 + 80);
          v198 = *(_QWORD *)(a1 + 96);
          v23 = (void **)(a1 + 80);
          v197 = v22;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          do
            v16 += 104;
          while ((sub_22E3B38EC((_DWORD *)(v16 + a1), &v190) & 1) != 0);
          v24 = a1 + v16;
          v25 = (_DWORD *)a2;
          if (v16 == 104)
          {
            v25 = (_DWORD *)a2;
            do
            {
              if (v24 >= (unint64_t)v25)
                break;
              v25 -= 26;
            }
            while ((sub_22E3B38EC(v25, &v190) & 1) == 0);
          }
          else
          {
            do
              v25 -= 26;
            while (!sub_22E3B38EC(v25, &v190));
          }
          v7 = a1 + v16;
          if (v24 < (unint64_t)v25)
          {
            v26 = v25;
            do
            {
              v27 = *(_QWORD *)v7;
              v28 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v26;
              *(_QWORD *)v26 = v27;
              *((_QWORD *)v26 + 1) = v28;
              sub_22EF370B8((uint64_t *)(v7 + 16), (__int128 *)v26 + 1);
              do
                v7 += 104;
              while ((sub_22E3B38EC((_DWORD *)v7, &v190) & 1) != 0);
              do
                v26 -= 26;
              while (!sub_22E3B38EC(v26, &v190));
            }
            while (v7 < (unint64_t)v26);
          }
          v29 = (_OWORD *)(v7 - 104);
          if (v7 - 104 != a1)
          {
            *(_OWORD *)a1 = *v29;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v18);
            v30 = *(_OWORD *)(v7 - 88);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 72);
            *(_OWORD *)v18 = v30;
            *(_BYTE *)(v7 - 65) = 0;
            *(_BYTE *)(v7 - 88) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 64);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v20);
            v31 = *(_OWORD *)(v7 - 56);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 40);
            *(_OWORD *)v20 = v31;
            *(_BYTE *)(v7 - 33) = 0;
            *(_BYTE *)(v7 - 56) = 0;
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(v7 - 32);
            if (*(char *)(a1 + 103) < 0)
              operator delete(*v23);
            v32 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)v23 = v32;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
          }
          *v29 = v190;
          v33 = (void **)(v7 - 88);
          if (*(char *)(v7 - 65) < 0)
            operator delete(*v33);
          v6 = a2;
          v34 = v191;
          *(_QWORD *)(v7 - 72) = v192;
          *(_OWORD *)v33 = v34;
          HIBYTE(v192) = 0;
          LOBYTE(v191) = 0;
          *(_BYTE *)(v7 - 64) = v193;
          v35 = (void **)(v7 - 56);
          a3 = v15;
          if (*(char *)(v7 - 33) < 0)
            operator delete(*v35);
          v36 = __p;
          *(_QWORD *)(v7 - 40) = v195;
          *(_OWORD *)v35 = v36;
          HIBYTE(v195) = 0;
          LOBYTE(__p) = 0;
          *(_BYTE *)(v7 - 32) = v196;
          v37 = (void **)(v7 - 24);
          if (*(char *)(v7 - 1) < 0)
            operator delete(*v37);
          v38 = v197;
          *(_QWORD *)(v7 - 8) = v198;
          *(_OWORD *)v37 = v38;
          HIBYTE(v198) = 0;
          LOBYTE(v197) = 0;
          if (SHIBYTE(v195) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v192) < 0)
            operator delete((void *)v191);
          if (v24 < (unint64_t)v25)
            goto LABEL_46;
          v39 = sub_22EF36D20(a1, v7 - 104);
          if (!sub_22EF36D20(v7, a2))
          {
            if (v39)
              continue;
LABEL_46:
            sub_22EF35538(a1);
LABEL_47:
            a4 = 0;
            continue;
          }
          a2 = v7 - 104;
          if (v39)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != v6)
          {
            v65 = (_DWORD *)(a1 + 104);
            if (a1 + 104 != a2)
            {
              v66 = 0;
              v67 = (_OWORD *)a1;
              do
              {
                v68 = v65;
                if (sub_22E3B38EC(v65, v67))
                {
                  v190 = *v68;
                  v191 = *(_OWORD *)((char *)v67 + 120);
                  v192 = *((_QWORD *)v67 + 17);
                  *((_QWORD *)v67 + 15) = 0;
                  *((_QWORD *)v67 + 16) = 0;
                  *((_QWORD *)v67 + 17) = 0;
                  v193 = *((_BYTE *)v67 + 144);
                  __p = *(_OWORD *)((char *)v67 + 152);
                  v195 = *((_QWORD *)v67 + 21);
                  *((_QWORD *)v67 + 19) = 0;
                  *((_QWORD *)v67 + 20) = 0;
                  *((_QWORD *)v67 + 21) = 0;
                  v196 = *((_BYTE *)v67 + 176);
                  v69 = *(_OWORD *)((char *)v67 + 184);
                  v198 = *((_QWORD *)v67 + 25);
                  v197 = v69;
                  *((_QWORD *)v67 + 23) = 0;
                  *((_QWORD *)v67 + 24) = 0;
                  v70 = v66;
                  *((_QWORD *)v67 + 25) = 0;
                  while (1)
                  {
                    v71 = v70;
                    v72 = a1 + v70;
                    *(_OWORD *)(v72 + 104) = *(_OWORD *)(a1 + v70);
                    v73 = a1 + v70 + 120;
                    if (*(char *)(v72 + 143) < 0)
                      operator delete(*(void **)v73);
                    *(_OWORD *)v73 = *(_OWORD *)(v72 + 16);
                    *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 32);
                    *(_BYTE *)(v72 + 39) = 0;
                    *(_BYTE *)(v72 + 16) = 0;
                    *(_BYTE *)(v72 + 144) = *(_BYTE *)(v72 + 40);
                    v74 = v72 + 152;
                    if (*(char *)(v72 + 175) < 0)
                      operator delete(*(void **)v74);
                    v75 = a1 + v71;
                    *(_OWORD *)v74 = *(_OWORD *)(a1 + v71 + 48);
                    *(_QWORD *)(v74 + 16) = *(_QWORD *)(a1 + v71 + 64);
                    *(_BYTE *)(v75 + 71) = 0;
                    *(_BYTE *)(v75 + 48) = 0;
                    *(_BYTE *)(v75 + 176) = *(_BYTE *)(a1 + v71 + 72);
                    v76 = (void **)(a1 + v71 + 184);
                    if (*(char *)(a1 + v71 + 207) < 0)
                      operator delete(*v76);
                    *(_OWORD *)v76 = *(_OWORD *)(v75 + 80);
                    *(_QWORD *)(a1 + v71 + 200) = *(_QWORD *)(v75 + 96);
                    *(_BYTE *)(v75 + 103) = 0;
                    *(_BYTE *)(v75 + 80) = 0;
                    if (!v71)
                      break;
                    v70 = v71 - 104;
                    if ((sub_22E3B38EC(&v190, (_DWORD *)(v71 - 104 + a1)) & 1) == 0)
                    {
                      v77 = a1 + v71;
                      goto LABEL_105;
                    }
                  }
                  v77 = a1;
LABEL_105:
                  *(_OWORD *)v77 = v190;
                  v78 = a1 + v71;
                  v79 = (void **)(v78 + 16);
                  if (*(char *)(v77 + 39) < 0)
                    operator delete(*v79);
                  v80 = v78 + 48;
                  v81 = v191;
                  *(_QWORD *)(v78 + 32) = v192;
                  *(_OWORD *)v79 = v81;
                  HIBYTE(v192) = 0;
                  LOBYTE(v191) = 0;
                  *(_BYTE *)(v77 + 40) = v193;
                  if (*(char *)(v77 + 71) < 0)
                    operator delete(*(void **)v80);
                  v82 = v78 + 80;
                  v83 = __p;
                  *(_QWORD *)(v80 + 16) = v195;
                  *(_OWORD *)v80 = v83;
                  HIBYTE(v195) = 0;
                  LOBYTE(__p) = 0;
                  *(_BYTE *)(v77 + 72) = v196;
                  if (*(char *)(v77 + 103) < 0)
                  {
                    operator delete(*(void **)v82);
                    v85 = SHIBYTE(v195);
                    v86 = v197;
                    *(_QWORD *)(v82 + 16) = v198;
                    *(_OWORD *)v82 = v86;
                    HIBYTE(v198) = 0;
                    LOBYTE(v197) = 0;
                    if (v85 < 0)
                      operator delete((void *)__p);
                  }
                  else
                  {
                    v84 = v197;
                    *(_QWORD *)(v82 + 16) = v198;
                    *(_OWORD *)v82 = v84;
                    HIBYTE(v198) = 0;
                    LOBYTE(v197) = 0;
                  }
                  if (SHIBYTE(v192) < 0)
                    operator delete((void *)v191);
                }
                v65 = (_DWORD *)v68 + 26;
                v66 += 104;
                v67 = v68;
              }
              while ((_OWORD *)((char *)v68 + 104) != (_OWORD *)a2);
            }
          }
        }
        else if (a1 != v6)
        {
          v161 = (_DWORD *)(a1 + 104);
          if (a1 + 104 != a2)
          {
            v162 = (char *)(a1 + 207);
            do
            {
              v163 = v161;
              if (sub_22E3B38EC(v161, (_DWORD *)a1))
              {
                v190 = *v163;
                v191 = *(_OWORD *)(a1 + 120);
                v192 = *(_QWORD *)(a1 + 136);
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 136) = 0;
                v193 = *(_BYTE *)(a1 + 144);
                __p = *(_OWORD *)(a1 + 152);
                v195 = *(_QWORD *)(a1 + 168);
                *(_QWORD *)(a1 + 152) = 0;
                *(_QWORD *)(a1 + 160) = 0;
                *(_QWORD *)(a1 + 168) = 0;
                v196 = *(_BYTE *)(a1 + 176);
                v164 = *(_OWORD *)(a1 + 184);
                v198 = *(_QWORD *)(a1 + 200);
                v197 = v164;
                *(_QWORD *)(a1 + 184) = 0;
                *(_QWORD *)(a1 + 192) = 0;
                v165 = v162;
                *(_QWORD *)(a1 + 200) = 0;
                do
                {
                  *(_OWORD *)(v165 - 103) = *(_OWORD *)(v165 - 207);
                  v166 = (void **)(v165 - 87);
                  if (*(v165 - 64) < 0)
                    operator delete(*v166);
                  *(_OWORD *)v166 = *(_OWORD *)(v165 - 191);
                  *(_QWORD *)(v165 - 71) = *(_QWORD *)(v165 - 175);
                  *(v165 - 168) = 0;
                  *(v165 - 191) = 0;
                  *(v165 - 63) = *(v165 - 167);
                  v167 = (void **)(v165 - 55);
                  if (*(v165 - 32) < 0)
                    operator delete(*v167);
                  *(_OWORD *)v167 = *(_OWORD *)(v165 - 159);
                  *(_QWORD *)(v165 - 39) = *(_QWORD *)(v165 - 143);
                  *(v165 - 136) = 0;
                  *(v165 - 159) = 0;
                  *(v165 - 31) = *(v165 - 135);
                  v168 = (void **)(v165 - 23);
                  if (*v165 < 0)
                    operator delete(*v168);
                  *(_QWORD *)(v165 - 7) = *(_QWORD *)(v165 - 111);
                  *(v165 - 104) = 0;
                  v165 -= 104;
                  *(_OWORD *)v168 = *(_OWORD *)(v165 - 23);
                  *(v165 - 23) = 0;
                }
                while ((sub_22E3B38EC(&v190, v165 - 207) & 1) != 0);
                *(_OWORD *)(v165 - 103) = v190;
                v169 = (void **)(v165 - 87);
                if (*(v165 - 64) < 0)
                  operator delete(*v169);
                v170 = (void **)(v165 - 55);
                v171 = v191;
                *(_QWORD *)(v165 - 71) = v192;
                *(_OWORD *)v169 = v171;
                HIBYTE(v192) = 0;
                LOBYTE(v191) = 0;
                *(v165 - 63) = v193;
                if (*(v165 - 32) < 0)
                  operator delete(*v170);
                v172 = (void **)(v165 - 23);
                v173 = __p;
                *(_QWORD *)(v165 - 39) = v195;
                *(_OWORD *)v170 = v173;
                HIBYTE(v195) = 0;
                LOBYTE(__p) = 0;
                *(v165 - 31) = v196;
                if (*v165 < 0)
                {
                  operator delete(*v172);
                  v175 = SHIBYTE(v195);
                  v176 = v197;
                  *(_QWORD *)(v165 - 7) = v198;
                  *(_OWORD *)v172 = v176;
                  HIBYTE(v198) = 0;
                  LOBYTE(v197) = 0;
                  if (v175 < 0)
                    operator delete((void *)__p);
                }
                else
                {
                  v174 = v197;
                  *(_QWORD *)(v165 - 7) = v198;
                  *(_OWORD *)v172 = v174;
                  HIBYTE(v198) = 0;
                  LOBYTE(v197) = 0;
                }
                if (SHIBYTE(v192) < 0)
                  operator delete((void *)v191);
              }
              v161 = (_DWORD *)v163 + 26;
              v162 += 104;
              a1 = (uint64_t)v163;
            }
            while ((_OWORD *)((char *)v163 + 104) != (_OWORD *)a2);
          }
        }
        return;
    }
  }
}

void sub_22EF36B04(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF37294(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF370B8((uint64_t *)(a4 + 16), (__int128 *)(a5 + 16));
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF370B8((uint64_t *)(a3 + 16), (__int128 *)(a4 + 16));
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *a2;
        v15 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF370B8(a2 + 2, (__int128 *)(a3 + 16));
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *a2 = v16;
          a2[1] = v17;
          sub_22EF370B8(a1 + 2, (__int128 *)a2 + 1);
        }
      }
    }
  }
}

void sub_22EF36C10(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = a1 + 2;
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = (__int128 *)(a3 + 16);
    }
    else
    {
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v9;
      *((_QWORD *)a2 + 1) = v10;
      sub_22EF370B8(v11, a2 + 1);
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = (__int128 *)(a3 + 16);
      v11 = (uint64_t *)(a2 + 1);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = a2 + 1;
    sub_22EF370B8((uint64_t *)a2 + 2, (__int128 *)(a3 + 16));
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v15;
      *((_QWORD *)a2 + 1) = v16;
      v11 = a1 + 2;
LABEL_9:
      sub_22EF370B8(v11, v12);
    }
  }
}

BOOL sub_22EF36D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 104);
      if (sub_22E3B38EC((_DWORD *)(a2 - 104), (_DWORD *)a1))
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a2 - 104) = v7;
        *(_QWORD *)(a2 - 96) = v8;
        sub_22EF370B8((uint64_t *)(a1 + 16), (__int128 *)(a2 - 88));
      }
      return 1;
    case 3:
      sub_22EF36C10((uint64_t *)a1, (__int128 *)(a1 + 104), a2 - 104);
      return 1;
    case 4:
      sub_22EF37294((uint64_t *)a1, (uint64_t *)(a1 + 104), a1 + 208, a2 - 104);
      return 1;
    case 5:
      sub_22EF36B04((uint64_t *)a1, (uint64_t *)(a1 + 104), a1 + 208, a1 + 312, a2 - 104);
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 208);
      sub_22EF36C10((uint64_t *)a1, (__int128 *)(a1 + 104), a1 + 208);
      v10 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_22E3B38EC((_DWORD *)v10, v9))
    {
      v13 = *(_OWORD *)(v10 + 16);
      v29 = *(_OWORD *)v10;
      v30 = v13;
      v31 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v32 = *(_BYTE *)(v10 + 40);
      __p = *(_OWORD *)(v10 + 48);
      v34 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      v35 = *(_BYTE *)(v10 + 72);
      v14 = *(_OWORD *)(v10 + 80);
      v37 = *(_QWORD *)(v10 + 96);
      v36 = v14;
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      v15 = v11;
      *(_QWORD *)(v10 + 96) = 0;
      while (1)
      {
        v16 = v15;
        v17 = a1 + v15;
        *(_OWORD *)(a1 + v15 + 312) = *(_OWORD *)(a1 + v15 + 208);
        v18 = a1 + v15 + 328;
        if (*(char *)(a1 + v15 + 351) < 0)
          operator delete(*(void **)v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 224);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 240);
        *(_BYTE *)(v17 + 247) = 0;
        *(_BYTE *)(v17 + 224) = 0;
        *(_BYTE *)(v17 + 352) = *(_BYTE *)(v17 + 248);
        v19 = v17 + 360;
        if (*(char *)(v17 + 383) < 0)
          operator delete(*(void **)v19);
        v20 = a1 + v16;
        *(_OWORD *)v19 = *(_OWORD *)(a1 + v16 + 256);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + v16 + 272);
        *(_BYTE *)(v20 + 279) = 0;
        *(_BYTE *)(v20 + 256) = 0;
        *(_BYTE *)(v20 + 384) = *(_BYTE *)(a1 + v16 + 280);
        v21 = (void **)(a1 + v16 + 392);
        if (*(char *)(a1 + v16 + 415) < 0)
          operator delete(*v21);
        *(_OWORD *)v21 = *(_OWORD *)(v20 + 288);
        *(_QWORD *)(a1 + v16 + 408) = *(_QWORD *)(v20 + 304);
        *(_BYTE *)(v20 + 311) = 0;
        *(_BYTE *)(v20 + 288) = 0;
        if (v16 == -208)
          break;
        v22 = sub_22E3B38EC(&v29, (_DWORD *)(a1 + v16 + 104));
        v15 = v16 - 104;
        if ((v22 & 1) == 0)
        {
          v23 = a1 + v15 + 312;
          goto LABEL_18;
        }
      }
      v23 = a1;
LABEL_18:
      *(_OWORD *)v23 = v29;
      v24 = a1 + v16;
      v25 = (void **)(v24 + 224);
      if (*(char *)(v23 + 39) < 0)
        operator delete(*v25);
      v26 = v24 + 256;
      *(_OWORD *)v25 = v30;
      *(_QWORD *)(v24 + 240) = v31;
      HIBYTE(v31) = 0;
      LOBYTE(v30) = 0;
      *(_BYTE *)(v23 + 40) = v32;
      if (*(char *)(v23 + 71) < 0)
        operator delete(*(void **)v26);
      v27 = 0;
      v28 = v24 + 288;
      *(_OWORD *)v26 = __p;
      *(_QWORD *)(v26 + 16) = v34;
      HIBYTE(v34) = 0;
      LOBYTE(__p) = 0;
      *(_BYTE *)(v23 + 72) = v35;
      if (*(char *)(v23 + 103) < 0)
      {
        operator delete(*(void **)v28);
        v27 = HIBYTE(v34);
      }
      *(_OWORD *)v28 = v36;
      *(_QWORD *)(v28 + 16) = v37;
      HIBYTE(v37) = 0;
      LOBYTE(v36) = 0;
      if (v27 < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)v30);
      if (++v12 == 8)
        return v10 + 104 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 104;
    v10 += 104;
    if (v10 == a2)
      return 1;
  }
}

void sub_22EF370B8(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  _BYTE v17[15];
  _BYTE v18[15];
  _BYTE v19[15];

  v4 = *a1;
  *(_QWORD *)v19 = a1[1];
  *(_QWORD *)&v19[7] = *(uint64_t *)((char *)a1 + 15);
  v5 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 4;
  v7 = a1[4];
  v8 = *((_BYTE *)a1 + 24);
  *(_QWORD *)v18 = a1[5];
  *(_QWORD *)&v18[7] = *(uint64_t *)((char *)a1 + 47);
  v9 = *((_BYTE *)a1 + 55);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v10 = a1 + 8;
  v11 = *((_BYTE *)a1 + 56);
  *(_QWORD *)&v17[7] = *(uint64_t *)((char *)a1 + 79);
  v16 = a1[8];
  *(_QWORD *)v17 = a1[9];
  v15 = *((_BYTE *)a1 + 87);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  v12 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v12;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  if (*((char *)a1 + 55) < 0)
    operator delete((void *)*v6);
  v13 = a2[2];
  v6[2] = *((_QWORD *)a2 + 6);
  *(_OWORD *)v6 = v13;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  if (*((char *)a1 + 87) < 0)
    operator delete((void *)*v10);
  v14 = a2[4];
  v10[2] = *((_QWORD *)a2 + 10);
  *(_OWORD *)v10 = v14;
  *((_BYTE *)a2 + 87) = 0;
  *((_BYTE *)a2 + 64) = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v4;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v19;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v19[7];
  *((_BYTE *)a2 + 23) = v5;
  *((_BYTE *)a2 + 24) = v8;
  if (*((char *)a2 + 55) < 0)
    operator delete(*((void **)a2 + 4));
  *((_QWORD *)a2 + 4) = v7;
  *((_QWORD *)a2 + 5) = *(_QWORD *)v18;
  *(_QWORD *)((char *)a2 + 47) = *(_QWORD *)&v18[7];
  *((_BYTE *)a2 + 55) = v9;
  *((_BYTE *)a2 + 56) = v11;
  if (*((char *)a2 + 87) < 0)
    operator delete(*((void **)a2 + 8));
  *((_QWORD *)a2 + 8) = v16;
  *((_QWORD *)a2 + 9) = *(_QWORD *)v17;
  *(_QWORD *)((char *)a2 + 79) = *(_QWORD *)&v17[7];
  *((_BYTE *)a2 + 87) = v15;
}

void sub_22EF37294(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF36C10(a1, (__int128 *)a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF370B8((uint64_t *)(a3 + 16), (__int128 *)(a4 + 16));
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF370B8(a2 + 2, (__int128 *)(a3 + 16));
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v12;
        a2[1] = v13;
        sub_22EF370B8(a1 + 2, (__int128 *)a2 + 1);
      }
    }
  }
}

void sub_22EF3736C(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 160);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 168) & (count - 1));
            *(_QWORD *)(v8 + 160) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF37440(v11);
  }
}

void sub_22EF37440(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  uint64_t v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  void **v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  void **v34;
  __int128 v35;
  void **v36;
  __int128 v37;
  BOOL v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _DWORD *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  void **v49;
  void **v50;
  __int128 v51;
  void **v52;
  __int128 v53;
  __int128 v54;
  void **v55;
  __int128 v56;
  void **v57;
  __int128 v58;
  void **v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  void **v78;
  __int128 v79;
  void **v80;
  __int128 v81;
  __int128 v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _DWORD *v92;
  void **v93;
  void **v94;
  __int128 v95;
  void **v96;
  __int128 v97;
  void **v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  __int128 v103;
  void **v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  void **v114;
  __int128 v115;
  void **v116;
  __int128 v117;
  void **v118;
  __int128 v119;
  void **v120;
  void **v121;
  _OWORD *v122;
  void **v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  void **v127;
  void **v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  void **v135;
  void **v136;
  __int128 v137;
  void **v138;
  __int128 v139;
  void **v140;
  __int128 v141;
  void **v142;
  __int128 v143;
  void **v144;
  __int128 v145;
  __int128 v146;
  _DWORD *v148;
  unint64_t v149;
  _OWORD *v150;
  __int128 v151;
  unint64_t v152;
  void **v153;
  void **v154;
  void **v155;
  char v156;
  void **v157;
  void **v158;
  __int128 v159;
  void **v160;
  __int128 v161;
  __int128 v162;
  __int128 *v163;
  __int128 *v164;
  __int128 *v165;
  __int128 *v167;
  _DWORD *v168;
  uint64_t v169;
  __int128 *v170;
  int64_t v171;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  void *__p[2];
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;

void sub_22EF38CC4(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF39534(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF392EC(a4 + 16, (__int128 *)(a5 + 16));
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF392EC(a3 + 16, (__int128 *)(a4 + 16));
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *(_QWORD *)a2;
        v15 = *((_QWORD *)a2 + 1);
        *a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF392EC((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *a2;
          *(_QWORD *)a2 = v16;
          *((_QWORD *)a2 + 1) = v17;
          sub_22EF392EC((uint64_t)(a1 + 2), a2 + 1);
        }
      }
    }
  }
}

void sub_22EF38DD0(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = (uint64_t)(a1 + 2);
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = (__int128 *)(a3 + 16);
    }
    else
    {
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v9;
      *((_QWORD *)a2 + 1) = v10;
      sub_22EF392EC(v11, a2 + 1);
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = (__int128 *)(a3 + 16);
      v11 = (uint64_t)(a2 + 1);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = a2 + 1;
    sub_22EF392EC((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)a2 = v15;
      *((_QWORD *)a2 + 1) = v16;
      v11 = (uint64_t)(a1 + 2);
LABEL_9:
      sub_22EF392EC(v11, v12);
    }
  }
}

BOOL sub_22EF38EE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *__p[2];
  uint64_t v40;

  v4 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 136);
      if (sub_22E3B38EC((_DWORD *)(a2 - 136), (_DWORD *)a1))
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a2 - 136) = v7;
        *(_QWORD *)(a2 - 128) = v8;
        sub_22EF392EC(a1 + 16, (__int128 *)(a2 - 120));
      }
      return 1;
    case 3uLL:
      sub_22EF38DD0((uint64_t *)a1, (__int128 *)(a1 + 136), a2 - 136);
      return 1;
    case 4uLL:
      sub_22EF39534((uint64_t *)a1, (__int128 *)(a1 + 136), a1 + 272, a2 - 136);
      return 1;
    case 5uLL:
      sub_22EF38CC4((uint64_t *)a1, (__int128 *)(a1 + 136), a1 + 272, a1 + 408, a2 - 136);
      return 1;
    default:
      v9 = (_DWORD *)(a1 + 272);
      sub_22EF38DD0((uint64_t *)a1, (__int128 *)(a1 + 136), a1 + 272);
      v10 = a1 + 408;
      if (a1 + 408 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      v13 = &v36;
      break;
  }
  while (1)
  {
    if (sub_22E3B38EC((_DWORD *)v10, v9))
    {
      v14 = *(_OWORD *)(v10 + 16);
      v30 = *(_OWORD *)v10;
      v31 = v14;
      v32 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      v33 = *(_BYTE *)(v10 + 40);
      v34 = *(_OWORD *)(v10 + 48);
      v35 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_OWORD *)v13 = *(_OWORD *)(v10 + 72);
      v15 = *(_OWORD *)(v10 + 88);
      v38 = *(_QWORD *)(v10 + 104);
      v37 = v15;
      *(_QWORD *)(v10 + 88) = 0;
      *(_QWORD *)(v10 + 96) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v10 + 112);
      v40 = *(_QWORD *)(v10 + 128);
      *(_QWORD *)(v10 + 104) = 0;
      *(_QWORD *)(v10 + 112) = 0;
      v16 = v11;
      *(_QWORD *)(v10 + 120) = 0;
      *(_QWORD *)(v10 + 128) = 0;
      while (1)
      {
        v17 = v16;
        v18 = a1 + v16;
        *(_OWORD *)(a1 + v16 + 408) = *(_OWORD *)(a1 + v16 + 272);
        v19 = a1 + v16 + 424;
        if (*(char *)(a1 + v16 + 447) < 0)
          operator delete(*(void **)v19);
        *(_OWORD *)v19 = *(_OWORD *)(v18 + 288);
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 304);
        *(_BYTE *)(v18 + 311) = 0;
        *(_BYTE *)(v18 + 288) = 0;
        *(_BYTE *)(v18 + 448) = *(_BYTE *)(v18 + 312);
        v20 = v18 + 456;
        if (*(char *)(v18 + 479) < 0)
          operator delete(*(void **)v20);
        v21 = a1 + v17;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + v17 + 320);
        *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 + v17 + 336);
        *(_BYTE *)(v21 + 343) = 0;
        *(_BYTE *)(v21 + 320) = 0;
        *(_OWORD *)(v21 + 480) = *(_OWORD *)(a1 + v17 + 344);
        v22 = (void **)(a1 + v17 + 496);
        if (*(char *)(a1 + v17 + 519) < 0)
          operator delete(*v22);
        *(_QWORD *)(a1 + v17 + 512) = *(_QWORD *)(v21 + 376);
        *(_OWORD *)v22 = *(_OWORD *)(v21 + 360);
        *(_BYTE *)(v21 + 383) = 0;
        *(_BYTE *)(v21 + 360) = 0;
        sub_22EF351A4((uint64_t *)(v21 + 520), (__n128 *)(v21 + 384));
        if (v17 == -272)
          break;
        v23 = sub_22E3B38EC(&v30, (_DWORD *)(a1 + v17 + 136));
        v16 = v17 - 136;
        if ((v23 & 1) == 0)
        {
          v24 = a1 + v16 + 408;
          goto LABEL_18;
        }
      }
      v24 = a1;
LABEL_18:
      v25 = v13;
      *(_OWORD *)v24 = v30;
      v26 = a1 + v17;
      v27 = (void **)(v26 + 288);
      if (*(char *)(v24 + 39) < 0)
        operator delete(*v27);
      v28 = (void **)(v26 + 320);
      *(_OWORD *)v27 = v31;
      *(_QWORD *)(v26 + 304) = v32;
      HIBYTE(v32) = 0;
      LOBYTE(v31) = 0;
      *(_BYTE *)(v24 + 40) = v33;
      if (*(char *)(v24 + 71) < 0)
        operator delete(*v28);
      v29 = (void **)(v26 + 360);
      *(_QWORD *)(v26 + 336) = v35;
      *(_OWORD *)v28 = v34;
      HIBYTE(v35) = 0;
      LOBYTE(v34) = 0;
      v13 = v25;
      *(_OWORD *)(v26 + 344) = *(_OWORD *)v25;
      if (*(char *)(v24 + 111) < 0)
        operator delete(*v29);
      *(_OWORD *)v29 = v37;
      *(_QWORD *)(v26 + 376) = v38;
      HIBYTE(v38) = 0;
      LOBYTE(v37) = 0;
      sub_22EF351A4((uint64_t *)(v26 + 384), (__n128 *)__p);
      if (__p[0])
      {
        sub_22E916AE0((uint64_t *)__p);
        operator delete(__p[0]);
      }
      if (SHIBYTE(v38) < 0)
        operator delete((void *)v37);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)v34);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)v31);
      if (++v12 == 8)
        return v10 + 136 == a2;
    }
    v9 = (_DWORD *)v10;
    v11 += 136;
    v10 += 136;
    if (v10 == a2)
      return 1;
  }
}

void sub_22EF392EC(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  void **v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  __int128 v18;
  void *v19[2];
  uint64_t v20;
  void *__p[2];
  uint64_t v22;

  *(_OWORD *)v14 = *(_OWORD *)a1;
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_BYTE *)(a1 + 24);
  v5 = a1 + 32;
  *(_OWORD *)v16 = *(_OWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (_OWORD *)(a1 + 56);
  v18 = *(_OWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)v19 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)v5);
  v9 = (void **)(a1 + 72);
  v10 = a2[2];
  *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v5 = v10;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *v6 = *(__int128 *)((char *)a2 + 56);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v11 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v11;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  sub_22EF351A4(v7, (__n128 *)a2 + 6);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  v12 = (void **)(a2 + 2);
  *a2 = *(_OWORD *)v14;
  *((_QWORD *)a2 + 2) = v15;
  *((_BYTE *)a2 + 24) = v4;
  if (*((char *)a2 + 55) < 0)
    operator delete(*v12);
  v13 = (void **)a2 + 9;
  *(_OWORD *)v12 = *(_OWORD *)v16;
  *((_QWORD *)a2 + 6) = v17;
  *(__int128 *)((char *)a2 + 56) = v18;
  if (*((char *)a2 + 95) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)v19;
  *((_QWORD *)a2 + 11) = v20;
  sub_22EF351A4((uint64_t *)a2 + 12, (__n128 *)__p);
  if (__p[0])
  {
    sub_22E916AE0((uint64_t *)__p);
    operator delete(__p[0]);
  }
}

void sub_22EF39534(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF38DD0(a1, a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF392EC(a3 + 16, (__int128 *)(a4 + 16));
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      *a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF392EC((uint64_t)(a2 + 1), (__int128 *)(a3 + 16));
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)a2 = v12;
        *((_QWORD *)a2 + 1) = v13;
        sub_22EF392EC((uint64_t)(a1 + 2), a2 + 1);
      }
    }
  }
}

void sub_22EF3960C(unsigned int *a1, size_t count)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v4 = malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 96);
            v10 = (size_t)v4 + 16 * (*(_QWORD *)(v8 + 104) & (count - 1));
            *(_QWORD *)(v8 + 96) = *(_QWORD *)(v10 + 8);
            ++*(_DWORD *)(v10 + 4);
            *(_QWORD *)(v10 + 8) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22EF396E0(v11);
  }
}

void sub_22EF396E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  void **v46;
  __int128 v47;
  void **v48;
  __int128 v49;
  BOOL v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  _DWORD *v54;
  int v55;
  __int128 *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  void **v73;
  void **v74;
  __int128 v75;
  __int128 v76;
  void **v77;
  __int128 v78;
  void **v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  int v107;
  __int128 v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  void **v119;
  void **v120;
  __int128 v121;
  void **v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  void **v139;
  __int128 v140;
  void **v141;
  __int128 v142;
  void **v143;
  _OWORD *v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  void **v162;
  void **v163;
  __int128 v164;
  void **v165;
  __int128 v166;
  void **v167;
  __int128 v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  int v173;
  uint64_t v174;
  _DWORD *v175;
  char *v176;
  _OWORD *v177;
  char *v178;
  void **v179;
  void **v180;
  void **v181;
  void **v182;
  __int128 v183;
  __int128 v184;
  int v185;
  __int128 v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v191;
  uint64_t v192;
  void **v193;
  uint64_t v194;
  void **v195;
  char v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  char v202;
  __int128 v203;
  __int128 __p;
  uint64_t v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  _QWORD v209[2];
  _QWORD v210[4];

  v210[2] = *MEMORY[0x24BDAC8D0];
  v5 = &v207;
LABEL_2:
  v6 = (_DWORD *)a2;
  v191 = (_DWORD *)(a2 - 72);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)v6 - v7;
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v6 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_22E3B38EC(v191, (_DWORD *)a1))
        {
          v81 = *(_QWORD *)a1;
          v82 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v191;
          *(_QWORD *)(a2 - 72) = v81;
          *(_QWORD *)(a2 - 64) = v82;
          v85 = *(_QWORD *)(a1 + 48);
          v84 = a1 + 48;
          v83 = v85;
          v86 = *(_QWORD *)(v84 - 32);
          *(_QWORD *)&v203 = *(_QWORD *)(v84 - 24);
          *(_QWORD *)((char *)&v203 + 7) = *(_QWORD *)(v84 - 17);
          v87 = *(_BYTE *)(v84 - 9);
          *(_QWORD *)(v84 - 24) = 0;
          *(_QWORD *)(v84 - 16) = 0;
          *(_QWORD *)(v84 - 32) = 0;
          v88 = *(_BYTE *)(v84 - 8);
          v210[0] = *(_QWORD *)(v84 + 8);
          *(_QWORD *)((char *)v210 + 7) = *(_QWORD *)(v84 + 15);
          v89 = *(_BYTE *)(v84 + 23);
          *(_QWORD *)(v84 + 8) = 0;
          *(_QWORD *)(v84 + 16) = 0;
          *(_QWORD *)v84 = 0;
          v90 = *(_OWORD *)(a2 - 56);
          *(_QWORD *)(v84 - 16) = *(_QWORD *)(a2 - 40);
          *(_OWORD *)(v84 - 32) = v90;
          *(_BYTE *)(a2 - 33) = 0;
          *(_BYTE *)(a2 - 56) = 0;
          *(_BYTE *)(v84 - 8) = *(_BYTE *)(a2 - 32);
          if (*(char *)(v84 + 23) < 0)
            operator delete(*(void **)v84);
          v91 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v84 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v84 = v91;
          *(_BYTE *)(a2 - 1) = 0;
          *(_BYTE *)(a2 - 24) = 0;
          if (*(char *)(a2 - 33) < 0)
          {
            operator delete(*(void **)(a2 - 56));
            v187 = *(char *)(a2 - 1);
            *(_QWORD *)(a2 - 56) = v86;
            v188 = *(_QWORD *)((char *)&v203 + 7);
            *(_QWORD *)(a2 - 48) = v203;
            *(_QWORD *)(a2 - 41) = v188;
            *(_BYTE *)(a2 - 33) = v87;
            *(_BYTE *)(a2 - 32) = v88;
            if (v187 < 0)
              operator delete(*(void **)(a2 - 24));
          }
          else
          {
            *(_QWORD *)(a2 - 56) = v86;
            v92 = v203;
            *(_QWORD *)(a2 - 41) = *(_QWORD *)((char *)&v203 + 7);
            *(_QWORD *)(a2 - 48) = v92;
            *(_BYTE *)(a2 - 33) = v87;
            *(_BYTE *)(a2 - 32) = v88;
          }
          *(_QWORD *)(a2 - 24) = v83;
          v189 = v210[0];
          *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v210 + 7);
          *(_QWORD *)(a2 - 16) = v189;
          *(_BYTE *)(a2 - 1) = v89;
        }
        return;
      case 3:
        sub_22EF3B1A4((uint64_t *)a1, (uint64_t *)(a1 + 72), (uint64_t)v191);
        return;
      case 4:
        sub_22EF3B99C((uint64_t *)a1, a1 + 72, a1 + 144, (uint64_t)v191);
        return;
      case 5:
        sub_22EF3AB7C(a1, a1 + 72, a1 + 144, a1 + 216, (uint64_t)v191);
        return;
      default:
        if (v8 > 1727)
        {
          if (!a3)
          {
            if ((_DWORD *)a1 != v6)
            {
              v109 = (unint64_t)(v9 - 2) >> 1;
              v110 = v109;
              do
              {
                v111 = v110;
                if (v109 >= v110)
                {
                  v112 = (2 * v110) | 1;
                  v113 = a1 + 72 * v112;
                  if (2 * v110 + 2 < v9
                    && sub_22E3B38EC((_DWORD *)(a1 + 72 * v112), (_DWORD *)(v113 + 72)))
                  {
                    v113 += 72;
                    v112 = 2 * v111 + 2;
                  }
                  v114 = a1 + 72 * v111;
                  if ((sub_22E3B38EC((_DWORD *)v113, (_DWORD *)v114) & 1) == 0)
                  {
                    v203 = *(_OWORD *)v114;
                    v115 = a1 + 72 * v111;
                    v116 = *(_OWORD *)(v115 + 16);
                    v205 = *(_QWORD *)(v115 + 32);
                    __p = v116;
                    *(_QWORD *)(v115 + 24) = 0;
                    *(_QWORD *)(v115 + 32) = 0;
                    *(_QWORD *)(v115 + 16) = 0;
                    v206 = *(_BYTE *)(v115 + 40);
                    v117 = *(_OWORD *)(v115 + 48);
                    v208 = *(_QWORD *)(v115 + 64);
                    v207 = v117;
                    *(_QWORD *)(v115 + 56) = 0;
                    *(_QWORD *)(v115 + 64) = 0;
                    *(_QWORD *)(v115 + 48) = 0;
                    do
                    {
                      v118 = v113;
                      *(_OWORD *)v114 = *(_OWORD *)v113;
                      v119 = (void **)(v114 + 16);
                      if (*(char *)(v114 + 39) < 0)
                        operator delete(*v119);
                      v120 = (void **)(v113 + 16);
                      v121 = *(_OWORD *)(v113 + 16);
                      *(_QWORD *)(v114 + 32) = *(_QWORD *)(v113 + 32);
                      *(_OWORD *)v119 = v121;
                      *(_BYTE *)(v113 + 39) = 0;
                      *(_BYTE *)(v113 + 16) = 0;
                      *(_BYTE *)(v114 + 40) = *(_BYTE *)(v113 + 40);
                      v122 = (void **)(v114 + 48);
                      if (*(char *)(v114 + 71) < 0)
                        operator delete(*v122);
                      v123 = *(_OWORD *)(v113 + 48);
                      *(_QWORD *)(v114 + 64) = *(_QWORD *)(v113 + 64);
                      *(_OWORD *)v122 = v123;
                      *(_BYTE *)(v113 + 71) = 0;
                      *(_BYTE *)(v113 + 48) = 0;
                      if (v109 < v112)
                        break;
                      v124 = (2 * v112) | 1;
                      v113 = a1 + 72 * v124;
                      v125 = 2 * v112 + 2;
                      if (v125 < v9 && sub_22E3B38EC((_DWORD *)(a1 + 72 * v124), (_DWORD *)(v113 + 72)))
                      {
                        v113 += 72;
                        v124 = v125;
                      }
                      v114 = v118;
                      v112 = v124;
                    }
                    while (!sub_22E3B38EC((_DWORD *)v113, &v203));
                    *(_OWORD *)v118 = v203;
                    if (*(char *)(v118 + 39) < 0)
                      operator delete(*v120);
                    v126 = (void **)(v118 + 48);
                    v127 = __p;
                    *(_QWORD *)(v118 + 32) = v205;
                    *(_OWORD *)v120 = v127;
                    HIBYTE(v205) = 0;
                    LOBYTE(__p) = 0;
                    *(_BYTE *)(v118 + 40) = v206;
                    if (*(char *)(v118 + 71) < 0)
                    {
                      operator delete(*v126);
                      v129 = SHIBYTE(v205);
                      v130 = v208;
                      *(_OWORD *)v126 = v207;
                      *(_QWORD *)(v118 + 64) = v130;
                      HIBYTE(v208) = 0;
                      LOBYTE(v207) = 0;
                      if (v129 < 0)
                        operator delete((void *)__p);
                    }
                    else
                    {
                      v128 = v207;
                      *(_QWORD *)(v118 + 64) = v208;
                      *(_OWORD *)v126 = v128;
                    }
                  }
                }
                v110 = v111 - 1;
              }
              while (v111);
              do
              {
                v131 = 0;
                v132 = a2;
                v133 = *(_QWORD *)a1;
                v192 = *(_QWORD *)(a1 + 8);
                v194 = *(_QWORD *)(a1 + 16);
                v210[0] = *(_QWORD *)(a1 + 24);
                *(_QWORD *)((char *)v210 + 7) = *(_QWORD *)(a1 + 31);
                v198 = *(_BYTE *)(a1 + 39);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v196 = *(_BYTE *)(a1 + 40);
                v199 = *(_QWORD *)(a1 + 48);
                v209[0] = *(_QWORD *)(a1 + 56);
                *(_QWORD *)((char *)v209 + 7) = *(_QWORD *)(a1 + 63);
                v202 = *(_BYTE *)(a1 + 71);
                *(_QWORD *)(a1 + 48) = 0;
                *(_QWORD *)(a1 + 56) = 0;
                v134 = a1;
                *(_QWORD *)(a1 + 64) = 0;
                do
                {
                  v135 = v134 + 72 * v131 + 72;
                  v136 = 2 * v131;
                  v131 = (2 * v131) | 1;
                  v137 = v136 + 2;
                  if (v136 + 2 < v9 && sub_22E3B38EC((_DWORD *)v135, (_DWORD *)(v135 + 72)))
                  {
                    v135 += 72;
                    v131 = v137;
                  }
                  *(_OWORD *)v134 = *(_OWORD *)v135;
                  v138 = (void **)(v134 + 16);
                  if (*(char *)(v134 + 39) < 0)
                    operator delete(*v138);
                  v139 = (void **)(v135 + 16);
                  v140 = *(_OWORD *)(v135 + 16);
                  *(_QWORD *)(v134 + 32) = *(_QWORD *)(v135 + 32);
                  *(_OWORD *)v138 = v140;
                  *(_BYTE *)(v135 + 39) = 0;
                  *(_BYTE *)(v135 + 16) = 0;
                  *(_BYTE *)(v134 + 40) = *(_BYTE *)(v135 + 40);
                  v141 = (void **)(v134 + 48);
                  if (*(char *)(v134 + 71) < 0)
                    operator delete(*v141);
                  v142 = *(_OWORD *)(v135 + 48);
                  *(_QWORD *)(v134 + 64) = *(_QWORD *)(v135 + 64);
                  *(_OWORD *)v141 = v142;
                  *(_BYTE *)(v135 + 71) = 0;
                  *(_BYTE *)(v135 + 48) = 0;
                  v134 = v135;
                }
                while (v131 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v143 = (void **)(v135 + 48);
                v144 = (_OWORD *)(a2 - 72);
                a2 -= 72;
                if (v135 == v132 - 72)
                {
                  *(_QWORD *)v135 = v133;
                  *(_QWORD *)(v135 + 8) = v192;
                  if (*(char *)(v135 + 39) < 0)
                  {
                    operator delete(*(void **)(v135 + 16));
                    v170 = *(char *)(v135 + 71);
                    v171 = v210[0];
                    *(_QWORD *)(v135 + 16) = v194;
                    *(_QWORD *)(v135 + 24) = v171;
                    *(_QWORD *)(v135 + 31) = *(_QWORD *)((char *)v210 + 7);
                    *(_BYTE *)(v135 + 39) = v198;
                    *(_BYTE *)(v135 + 40) = v196;
                    v151 = v202;
                    v152 = v199;
                    if (v170 < 0)
                      operator delete(*v143);
                  }
                  else
                  {
                    v150 = v210[0];
                    *(_QWORD *)(v135 + 16) = v194;
                    *(_QWORD *)(v135 + 24) = v150;
                    *(_QWORD *)(v135 + 31) = *(_QWORD *)((char *)v210 + 7);
                    *(_BYTE *)(v135 + 39) = v198;
                    *(_BYTE *)(v135 + 40) = v196;
                    v151 = v202;
                    v152 = v199;
                  }
                  *(_QWORD *)(v135 + 48) = v152;
                  *(_QWORD *)(v135 + 56) = v209[0];
                  *(_QWORD *)(v135 + 63) = *(_QWORD *)((char *)v209 + 7);
                  *(_BYTE *)(v135 + 71) = v151;
                }
                else
                {
                  *(_OWORD *)v135 = *v144;
                  if (*(char *)(v135 + 39) < 0)
                    operator delete(*v139);
                  v145 = *(_OWORD *)(v132 - 56);
                  *(_QWORD *)(v135 + 32) = *(_QWORD *)(v132 - 40);
                  *(_OWORD *)v139 = v145;
                  *(_BYTE *)(v132 - 33) = 0;
                  *(_BYTE *)(v132 - 56) = 0;
                  *(_BYTE *)(v135 + 40) = *(_BYTE *)(v132 - 32);
                  if (*(char *)(v135 + 71) < 0)
                    operator delete(*v143);
                  v146 = *(_OWORD *)(v132 - 24);
                  *(_QWORD *)(v135 + 64) = *(_QWORD *)(v132 - 8);
                  *(_OWORD *)v143 = v146;
                  *(_BYTE *)(v132 - 1) = 0;
                  *(_BYTE *)(v132 - 24) = 0;
                  *(_QWORD *)(v132 - 72) = v133;
                  *(_QWORD *)(v132 - 64) = v192;
                  if (*(char *)(v132 - 33) < 0)
                  {
                    operator delete(*(void **)(v132 - 56));
                    v153 = *(char *)(v132 - 1);
                    *(_QWORD *)(v132 - 56) = v194;
                    v154 = *(_QWORD *)((char *)v210 + 7);
                    *(_QWORD *)(v132 - 48) = v210[0];
                    *(_QWORD *)(v132 - 41) = v154;
                    *(_BYTE *)(v132 - 33) = v198;
                    *(_BYTE *)(v132 - 32) = v196;
                    v148 = v202;
                    v149 = v199;
                    if (v153 < 0)
                      operator delete(*(void **)(v132 - 24));
                  }
                  else
                  {
                    *(_QWORD *)(v132 - 56) = v194;
                    v147 = v210[0];
                    *(_QWORD *)(v132 - 41) = *(_QWORD *)((char *)v210 + 7);
                    *(_QWORD *)(v132 - 48) = v147;
                    *(_BYTE *)(v132 - 33) = v198;
                    *(_BYTE *)(v132 - 32) = v196;
                    v148 = v202;
                    v149 = v199;
                  }
                  *(_QWORD *)(v132 - 24) = v149;
                  v155 = v209[0];
                  *(_QWORD *)(v132 - 9) = *(_QWORD *)((char *)v209 + 7);
                  *(_QWORD *)(v132 - 16) = v155;
                  *(_BYTE *)(v132 - 1) = v148;
                  v156 = v135 + 72 - a1;
                  if (v156 >= 73)
                  {
                    v157 = (v156 / 0x48uLL - 2) >> 1;
                    v158 = a1 + 72 * v157;
                    if (sub_22E3B38EC((_DWORD *)v158, (_DWORD *)v135))
                    {
                      v203 = *(_OWORD *)v135;
                      v159 = *(_QWORD *)(v135 + 32);
                      __p = *(_OWORD *)v139;
                      v205 = v159;
                      *(_QWORD *)(v135 + 24) = 0;
                      *(_QWORD *)(v135 + 32) = 0;
                      *v139 = 0;
                      v206 = *(_BYTE *)(v135 + 40);
                      v160 = *(_OWORD *)v143;
                      v208 = *(_QWORD *)(v135 + 64);
                      v207 = v160;
                      *(_QWORD *)(v135 + 56) = 0;
                      *(_QWORD *)(v135 + 64) = 0;
                      *v143 = 0;
                      do
                      {
                        v161 = v158;
                        *(_OWORD *)v135 = *(_OWORD *)v158;
                        v162 = (void **)(v135 + 16);
                        if (*(char *)(v135 + 39) < 0)
                          operator delete(*v162);
                        v163 = (void **)(v158 + 16);
                        v164 = *(_OWORD *)(v158 + 16);
                        *(_QWORD *)(v135 + 32) = *(_QWORD *)(v158 + 32);
                        *(_OWORD *)v162 = v164;
                        *(_BYTE *)(v158 + 39) = 0;
                        *(_BYTE *)(v158 + 16) = 0;
                        *(_BYTE *)(v135 + 40) = *(_BYTE *)(v158 + 40);
                        v165 = (void **)(v135 + 48);
                        if (*(char *)(v135 + 71) < 0)
                          operator delete(*v165);
                        v166 = *(_OWORD *)(v158 + 48);
                        *(_QWORD *)(v135 + 64) = *(_QWORD *)(v158 + 64);
                        *(_OWORD *)v165 = v166;
                        *(_BYTE *)(v158 + 71) = 0;
                        *(_BYTE *)(v158 + 48) = 0;
                        if (!v157)
                          break;
                        v157 = (v157 - 1) >> 1;
                        v158 = a1 + 72 * v157;
                        v135 = v161;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v158, &v203) & 1) != 0);
                      *(_OWORD *)v161 = v203;
                      if (*(char *)(v161 + 39) < 0)
                        operator delete(*v163);
                      v167 = (void **)(v161 + 48);
                      v168 = __p;
                      *(_QWORD *)(v161 + 32) = v205;
                      *(_OWORD *)v163 = v168;
                      HIBYTE(v205) = 0;
                      LOBYTE(__p) = 0;
                      *(_BYTE *)(v161 + 40) = v206;
                      if (*(char *)(v161 + 71) < 0)
                      {
                        operator delete(*v167);
                        v173 = SHIBYTE(v205);
                        v174 = v208;
                        *(_OWORD *)v167 = v207;
                        *(_QWORD *)(v161 + 64) = v174;
                        HIBYTE(v208) = 0;
                        LOBYTE(v207) = 0;
                        if (v173 < 0)
                          operator delete((void *)__p);
                      }
                      else
                      {
                        v169 = v207;
                        *(_QWORD *)(v161 + 64) = v208;
                        *(_OWORD *)v167 = v169;
                      }
                    }
                  }
                }
              }
              while (v9-- > 2);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = (uint64_t *)(a1 + 72 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 < 0x2401)
          {
            sub_22EF3B1A4(v11, (uint64_t *)a1, (uint64_t)v191);
          }
          else
          {
            sub_22EF3B1A4((uint64_t *)a1, v11, (uint64_t)v191);
            v12 = 9 * v10;
            v13 = a1 + 72 * v10;
            sub_22EF3B1A4((uint64_t *)(a1 + 72), (uint64_t *)(v13 - 72), a2 - 144);
            sub_22EF3B1A4((uint64_t *)(a1 + 144), (uint64_t *)(a1 + 72 + 8 * v12), a2 - 216);
            sub_22EF3B1A4((uint64_t *)(v13 - 72), v11, a1 + 72 + 8 * v12);
            v14 = *(_QWORD *)a1;
            v15 = *(_QWORD *)(a1 + 8);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *v11 = v14;
            v11[1] = v15;
            *(_QWORD *)((char *)&v203 + 7) = *(_QWORD *)(a1 + 31);
            v16 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)&v203 = *(_QWORD *)(a1 + 24);
            LOWORD(v15) = *(_WORD *)(a1 + 39);
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v17 = *(_QWORD *)(a1 + 48);
            v210[0] = *(_QWORD *)(a1 + 56);
            *(_QWORD *)((char *)v210 + 7) = *(_QWORD *)(a1 + 63);
            v18 = *(_BYTE *)(a1 + 71);
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            v19 = *(_OWORD *)(v13 + 16);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 + 32);
            *(_OWORD *)(a1 + 16) = v19;
            *(_BYTE *)(v13 + 39) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v13 + 40);
            v20 = *(_OWORD *)(v13 + 48);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v13 + 64);
            *(_OWORD *)(a1 + 48) = v20;
            *(_BYTE *)(v13 + 71) = 0;
            *(_BYTE *)(v13 + 48) = 0;
            *(_QWORD *)(v13 + 16) = v16;
            v21 = v203;
            *(_QWORD *)(v13 + 31) = *(_QWORD *)((char *)&v203 + 7);
            *(_QWORD *)(v13 + 24) = v21;
            *(_WORD *)(v13 + 39) = v15;
            *(_QWORD *)(v13 + 48) = v17;
            v22 = v210[0];
            *(_QWORD *)(v13 + 63) = *(_QWORD *)((char *)v210 + 7);
            *(_QWORD *)(v13 + 56) = v22;
            *(_BYTE *)(v13 + 71) = v18;
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(a1 - 72), (_DWORD *)a1) & 1) == 0)
          {
            v51 = *(_OWORD *)(a1 + 16);
            v203 = *(_OWORD *)a1;
            v52 = *(_QWORD *)(a1 + 32);
            __p = v51;
            v205 = v52;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v206 = *(_BYTE *)(a1 + 40);
            v53 = *(_OWORD *)(a1 + 48);
            *((_QWORD *)v5 + 2) = *(_QWORD *)(a1 + 64);
            *v5 = v53;
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            if ((sub_22E3B38EC(&v203, v191) & 1) != 0)
            {
              v7 = a1;
              do
                v7 += 72;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v7) & 1) == 0);
            }
            else
            {
              v54 = (_DWORD *)(a1 + 72);
              do
              {
                v7 = (unint64_t)v54;
                if (v54 >= v6)
                  break;
                v55 = sub_22E3B38EC(&v203, v54);
                v54 = (_DWORD *)(v7 + 72);
              }
              while (!v55);
            }
            v56 = v5;
            v57 = (unint64_t)v6;
            if (v7 < (unint64_t)v6)
            {
              v57 = (unint64_t)v6;
              do
                v57 -= 72;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v57) & 1) != 0);
            }
            while (v7 < v57)
            {
              v58 = *(_QWORD *)v7;
              v59 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v57;
              *(_QWORD *)v57 = v58;
              *(_QWORD *)(v57 + 8) = v59;
              v61 = (void **)(v7 + 48);
              v60 = *(_QWORD *)(v7 + 48);
              v62 = *(_QWORD *)(v7 + 16);
              v210[0] = *(_QWORD *)(v7 + 24);
              *(_QWORD *)((char *)v210 + 7) = *(_QWORD *)(v7 + 31);
              v63 = *(_BYTE *)(v7 + 39);
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              v64 = *(_BYTE *)(v7 + 40);
              v209[0] = *(_QWORD *)(v7 + 56);
              *(_QWORD *)((char *)v209 + 7) = *(_QWORD *)(v7 + 63);
              v65 = *(_BYTE *)(v7 + 71);
              *(_QWORD *)(v7 + 56) = 0;
              *(_QWORD *)(v7 + 64) = 0;
              *(_QWORD *)(v7 + 48) = 0;
              v66 = *(_OWORD *)(v57 + 16);
              *(_QWORD *)(v7 + 32) = *(_QWORD *)(v57 + 32);
              *(_OWORD *)(v7 + 16) = v66;
              *(_BYTE *)(v57 + 39) = 0;
              *(_BYTE *)(v57 + 16) = 0;
              *(_BYTE *)(v7 + 40) = *(_BYTE *)(v57 + 40);
              if (*(char *)(v7 + 71) < 0)
                operator delete(*v61);
              v67 = *(_OWORD *)(v57 + 48);
              *(_QWORD *)(v7 + 64) = *(_QWORD *)(v57 + 64);
              *(_OWORD *)v61 = v67;
              *(_BYTE *)(v57 + 71) = 0;
              *(_BYTE *)(v57 + 48) = 0;
              if (*(char *)(v57 + 39) < 0)
              {
                operator delete(*(void **)(v57 + 16));
                v69 = *(char *)(v57 + 71);
                v70 = v210[0];
                *(_QWORD *)(v57 + 16) = v62;
                *(_QWORD *)(v57 + 24) = v70;
                *(_QWORD *)(v57 + 31) = *(_QWORD *)((char *)v210 + 7);
                *(_BYTE *)(v57 + 39) = v63;
                *(_BYTE *)(v57 + 40) = v64;
                if (v69 < 0)
                  operator delete(*(void **)(v57 + 48));
              }
              else
              {
                v68 = v210[0];
                *(_QWORD *)(v57 + 16) = v62;
                *(_QWORD *)(v57 + 24) = v68;
                *(_QWORD *)(v57 + 31) = *(_QWORD *)((char *)v210 + 7);
                *(_BYTE *)(v57 + 39) = v63;
                *(_BYTE *)(v57 + 40) = v64;
              }
              v71 = v209[0];
              *(_QWORD *)(v57 + 48) = v60;
              *(_QWORD *)(v57 + 56) = v71;
              *(_QWORD *)(v57 + 63) = *(_QWORD *)((char *)v209 + 7);
              *(_BYTE *)(v57 + 71) = v65;
              do
                v7 += 72;
              while (!sub_22E3B38EC(&v203, (_DWORD *)v7));
              do
                v57 -= 72;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v57) & 1) != 0);
            }
            v72 = (_OWORD *)(v7 - 72);
            v5 = v56;
            if (v7 - 72 != a1)
            {
              v73 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v72;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v73);
              v74 = (void **)(a1 + 48);
              v75 = *(_OWORD *)(v7 - 56);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 40);
              *(_OWORD *)v73 = v75;
              *(_BYTE *)(v7 - 33) = 0;
              *(_BYTE *)(v7 - 56) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 32);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v74);
              v76 = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 8);
              *(_OWORD *)v74 = v76;
              *(_BYTE *)(v7 - 1) = 0;
              *(_BYTE *)(v7 - 24) = 0;
            }
            *v72 = v203;
            v77 = (void **)(v7 - 56);
            if (*(char *)(v7 - 33) < 0)
              operator delete(*v77);
            v6 = (_DWORD *)a2;
            v78 = __p;
            *(_QWORD *)(v7 - 40) = v205;
            *(_OWORD *)v77 = v78;
            HIBYTE(v205) = 0;
            LOBYTE(__p) = 0;
            *(_BYTE *)(v7 - 32) = v206;
            v79 = (void **)(v7 - 24);
            if (*(char *)(v7 - 1) < 0)
              operator delete(*v79);
            v80 = *v56;
            *(_QWORD *)(v7 - 8) = *((_QWORD *)v56 + 2);
            *(_OWORD *)v79 = v80;
            HIBYTE(v208) = 0;
            LOBYTE(v207) = 0;
            if (SHIBYTE(v205) < 0)
              operator delete((void *)__p);
            goto LABEL_47;
          }
          v23 = 0;
          v24 = *(_OWORD *)(a1 + 16);
          v203 = *(_OWORD *)a1;
          v25 = *(_QWORD *)(a1 + 32);
          __p = v24;
          v205 = v25;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v206 = *(_BYTE *)(a1 + 40);
          v26 = *(_OWORD *)(a1 + 48);
          *((_QWORD *)v5 + 2) = *(_QWORD *)(a1 + 64);
          v193 = (void **)(a1 + 16);
          v195 = (void **)(a1 + 48);
          *v5 = v26;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          do
            v23 += 72;
          while ((sub_22E3B38EC((_DWORD *)(v23 + a1), &v203) & 1) != 0);
          v7 = a1 + v23;
          v27 = v6;
          if (v23 == 72)
          {
            v27 = v6;
            do
            {
              if (v7 >= (unint64_t)v27)
                break;
              v27 -= 18;
            }
            while ((sub_22E3B38EC(v27, &v203) & 1) == 0);
          }
          else
          {
            do
              v27 -= 18;
            while (!sub_22E3B38EC(v27, &v203));
          }
          v197 = a1 + v23;
          if (v7 < (unint64_t)v27)
          {
            v28 = v27;
            do
            {
              v29 = *(_QWORD *)v7;
              v30 = *(_QWORD *)(v7 + 8);
              *(_OWORD *)v7 = *(_OWORD *)v28;
              *(_QWORD *)v28 = v29;
              *((_QWORD *)v28 + 1) = v30;
              v32 = (void **)(v7 + 48);
              v31 = *(_QWORD *)(v7 + 48);
              v33 = *(_QWORD *)(v7 + 16);
              v210[0] = *(_QWORD *)(v7 + 24);
              *(_QWORD *)((char *)v210 + 7) = *(_QWORD *)(v7 + 31);
              v34 = *(_BYTE *)(v7 + 39);
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              v35 = *(_BYTE *)(v7 + 40);
              v209[0] = *(_QWORD *)(v7 + 56);
              *(_QWORD *)((char *)v209 + 7) = *(_QWORD *)(v7 + 63);
              v36 = *(_BYTE *)(v7 + 71);
              *(_QWORD *)(v7 + 56) = 0;
              *(_QWORD *)(v7 + 64) = 0;
              *(_QWORD *)(v7 + 48) = 0;
              v37 = *((_OWORD *)v28 + 1);
              *(_QWORD *)(v7 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)(v7 + 16) = v37;
              *((_BYTE *)v28 + 39) = 0;
              *((_BYTE *)v28 + 16) = 0;
              *(_BYTE *)(v7 + 40) = *((_BYTE *)v28 + 40);
              if (*(char *)(v7 + 71) < 0)
                operator delete(*v32);
              v38 = *((_OWORD *)v28 + 3);
              *(_QWORD *)(v7 + 64) = *((_QWORD *)v28 + 8);
              *(_OWORD *)v32 = v38;
              *((_BYTE *)v28 + 71) = 0;
              *((_BYTE *)v28 + 48) = 0;
              if (*((char *)v28 + 39) < 0)
              {
                operator delete(*((void **)v28 + 2));
                v40 = *((char *)v28 + 71);
                v41 = v210[0];
                *((_QWORD *)v28 + 2) = v33;
                *((_QWORD *)v28 + 3) = v41;
                *(_QWORD *)((char *)v28 + 31) = *(_QWORD *)((char *)v210 + 7);
                *((_BYTE *)v28 + 39) = v34;
                *((_BYTE *)v28 + 40) = v35;
                if (v40 < 0)
                  operator delete(*((void **)v28 + 6));
              }
              else
              {
                v39 = v210[0];
                *((_QWORD *)v28 + 2) = v33;
                *((_QWORD *)v28 + 3) = v39;
                *(_QWORD *)((char *)v28 + 31) = *(_QWORD *)((char *)v210 + 7);
                *((_BYTE *)v28 + 39) = v34;
                *((_BYTE *)v28 + 40) = v35;
              }
              v42 = v209[0];
              *((_QWORD *)v28 + 6) = v31;
              *((_QWORD *)v28 + 7) = v42;
              *(_QWORD *)((char *)v28 + 63) = *(_QWORD *)((char *)v209 + 7);
              *((_BYTE *)v28 + 71) = v36;
              do
                v7 += 72;
              while ((sub_22E3B38EC((_DWORD *)v7, &v203) & 1) != 0);
              do
                v28 -= 18;
              while (!sub_22E3B38EC(v28, &v203));
            }
            while (v7 < (unint64_t)v28);
          }
          v43 = (_OWORD *)(v7 - 72);
          v5 = &v207;
          if (v7 - 72 != a1)
          {
            *(_OWORD *)a1 = *v43;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v193);
            v44 = *(_OWORD *)(v7 - 56);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 40);
            *(_OWORD *)v193 = v44;
            *(_BYTE *)(v7 - 33) = 0;
            *(_BYTE *)(v7 - 56) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v7 - 32);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v195);
            v45 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)v195 = v45;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
          }
          *v43 = v203;
          v46 = (void **)(v7 - 56);
          if (*(char *)(v7 - 33) < 0)
            operator delete(*v46);
          v6 = (_DWORD *)a2;
          v47 = __p;
          *(_QWORD *)(v7 - 40) = v205;
          *(_OWORD *)v46 = v47;
          HIBYTE(v205) = 0;
          LOBYTE(__p) = 0;
          *(_BYTE *)(v7 - 32) = v206;
          v48 = (void **)(v7 - 24);
          if (*(char *)(v7 - 1) < 0)
            operator delete(*v48);
          v49 = v207;
          *(_QWORD *)(v7 - 8) = v208;
          *(_OWORD *)v48 = v49;
          HIBYTE(v208) = 0;
          LOBYTE(v207) = 0;
          if (SHIBYTE(v205) < 0)
            operator delete((void *)__p);
          if (v197 < (unint64_t)v27)
            goto LABEL_46;
          v50 = sub_22EF3B5AC(a1, v7 - 72);
          if (!sub_22EF3B5AC(v7, a2))
          {
            if (v50)
              continue;
LABEL_46:
            sub_22EF396E0(a1);
LABEL_47:
            a4 = 0;
            continue;
          }
          a2 = v7 - 72;
          if (v50)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((_DWORD *)a1 != v6)
          {
            v93 = (_DWORD *)(a1 + 72);
            if (a1 + 72 != a2)
            {
              v94 = 0;
              v95 = (_OWORD *)a1;
              do
              {
                v96 = v93;
                if (sub_22E3B38EC(v93, v95))
                {
                  v203 = *v96;
                  __p = *(_OWORD *)((char *)v95 + 88);
                  v205 = *((_QWORD *)v95 + 13);
                  *((_QWORD *)v95 + 11) = 0;
                  *((_QWORD *)v95 + 12) = 0;
                  *((_QWORD *)v95 + 13) = 0;
                  v206 = *((_BYTE *)v95 + 112);
                  v207 = *(_OWORD *)((char *)v95 + 120);
                  v208 = *((_QWORD *)v95 + 17);
                  *((_QWORD *)v95 + 15) = 0;
                  *((_QWORD *)v95 + 16) = 0;
                  v97 = v94;
                  *((_QWORD *)v95 + 17) = 0;
                  while (1)
                  {
                    v98 = a1 + v97;
                    *(_OWORD *)(a1 + v97 + 72) = *(_OWORD *)(a1 + v97);
                    v99 = (void **)(a1 + v97 + 88);
                    if (*(char *)(a1 + v97 + 111) < 0)
                      operator delete(*v99);
                    *(_OWORD *)v99 = *(_OWORD *)(v98 + 16);
                    *(_QWORD *)(a1 + v97 + 104) = *(_QWORD *)(v98 + 32);
                    *(_BYTE *)(v98 + 39) = 0;
                    *(_BYTE *)(v98 + 16) = 0;
                    *(_BYTE *)(v98 + 112) = *(_BYTE *)(v98 + 40);
                    v100 = v98 + 120;
                    if (*(char *)(v98 + 143) < 0)
                      operator delete(*(void **)v100);
                    v101 = a1 + v97;
                    *(_OWORD *)v100 = *(_OWORD *)(a1 + v97 + 48);
                    *(_QWORD *)(v100 + 16) = *(_QWORD *)(a1 + v97 + 64);
                    *(_BYTE *)(v101 + 71) = 0;
                    *(_BYTE *)(v101 + 48) = 0;
                    if (!v97)
                      break;
                    v97 -= 72;
                    if ((sub_22E3B38EC(&v203, (_DWORD *)(v97 + a1)) & 1) == 0)
                    {
                      v102 = a1 + v97 + 72;
                      goto LABEL_106;
                    }
                  }
                  v102 = a1;
LABEL_106:
                  *(_OWORD *)v102 = v203;
                  v103 = v101 + 16;
                  if (*(char *)(v102 + 39) < 0)
                    operator delete(*(void **)v103);
                  v104 = v101 + 48;
                  v105 = __p;
                  *(_QWORD *)(v103 + 16) = v205;
                  *(_OWORD *)v103 = v105;
                  HIBYTE(v205) = 0;
                  LOBYTE(__p) = 0;
                  *(_BYTE *)(v102 + 40) = v206;
                  if (*(char *)(v102 + 71) < 0)
                  {
                    operator delete(*(void **)v104);
                    v107 = SHIBYTE(v205);
                    v108 = v207;
                    *(_QWORD *)(v104 + 16) = v208;
                    *(_OWORD *)v104 = v108;
                    HIBYTE(v208) = 0;
                    LOBYTE(v207) = 0;
                    if (v107 < 0)
                      operator delete((void *)__p);
                  }
                  else
                  {
                    v106 = v207;
                    *(_QWORD *)(v104 + 16) = v208;
                    *(_OWORD *)v104 = v106;
                  }
                }
                v93 = (_DWORD *)v96 + 18;
                v94 += 72;
                v95 = v96;
              }
              while ((_OWORD *)((char *)v96 + 72) != (_OWORD *)a2);
            }
          }
        }
        else if ((_DWORD *)a1 != v6)
        {
          v175 = (_DWORD *)(a1 + 72);
          if (a1 + 72 != a2)
          {
            v176 = (char *)(a1 + 143);
            do
            {
              v177 = v175;
              if (sub_22E3B38EC(v175, (_DWORD *)a1))
              {
                v203 = *v177;
                __p = *(_OWORD *)(a1 + 88);
                v205 = *(_QWORD *)(a1 + 104);
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                v206 = *(_BYTE *)(a1 + 112);
                v207 = *(_OWORD *)(a1 + 120);
                v208 = *(_QWORD *)(a1 + 136);
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 128) = 0;
                v178 = v176;
                *(_QWORD *)(a1 + 136) = 0;
                do
                {
                  *(_OWORD *)(v178 - 71) = *(_OWORD *)(v178 - 143);
                  v179 = (void **)(v178 - 55);
                  if (*(v178 - 32) < 0)
                    operator delete(*v179);
                  *(_OWORD *)v179 = *(_OWORD *)(v178 - 127);
                  *(_QWORD *)(v178 - 39) = *(_QWORD *)(v178 - 111);
                  *(v178 - 104) = 0;
                  *(v178 - 127) = 0;
                  *(v178 - 31) = *(v178 - 103);
                  v180 = (void **)(v178 - 23);
                  if (*v178 < 0)
                    operator delete(*v180);
                  *(_QWORD *)(v178 - 7) = *(_QWORD *)(v178 - 79);
                  *(v178 - 72) = 0;
                  v178 -= 72;
                  *(_OWORD *)v180 = *(_OWORD *)(v178 - 23);
                  *(v178 - 23) = 0;
                }
                while ((sub_22E3B38EC(&v203, v178 - 143) & 1) != 0);
                *(_OWORD *)(v178 - 71) = v203;
                v181 = (void **)(v178 - 55);
                if (*(v178 - 32) < 0)
                  operator delete(*v181);
                v182 = (void **)(v178 - 23);
                v183 = __p;
                *(_QWORD *)(v178 - 39) = v205;
                *(_OWORD *)v181 = v183;
                HIBYTE(v205) = 0;
                LOBYTE(__p) = 0;
                *(v178 - 31) = v206;
                if (*v178 < 0)
                {
                  operator delete(*v182);
                  v185 = SHIBYTE(v205);
                  v186 = v207;
                  *(_QWORD *)(v178 - 7) = v208;
                  *(_OWORD *)v182 = v186;
                  HIBYTE(v208) = 0;
                  LOBYTE(v207) = 0;
                  if (v185 < 0)
                    operator delete((void *)__p);
                }
                else
                {
                  v184 = v207;
                  *(_QWORD *)(v178 - 7) = v208;
                  *(_OWORD *)v182 = v184;
                }
              }
              v175 = (_DWORD *)v177 + 18;
              v176 += 72;
              a1 = (uint64_t)v177;
            }
            while ((_OWORD *)((char *)v177 + 72) != (_OWORD *)a2);
          }
        }
        return;
    }
  }
}

void sub_22EF3AB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  uint64_t v14;
  void **v15;
  _QWORD *v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  uint64_t v32;
  void **v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char v47;
  uint64_t v48;
  void **v49;
  _QWORD *v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v83[15];
  _BYTE v84[15];
  _BYTE v85[15];
  _BYTE v86[15];
  _BYTE v87[15];
  _BYTE v88[15];
  _BYTE v89[15];
  _BYTE v90[15];

  sub_22EF3B99C((uint64_t *)a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v8 = *(_QWORD *)a4;
    v9 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
    v10 = *(_QWORD *)(a4 + 16);
    v11 = (_QWORD *)(a4 + 24);
    *(_QWORD *)v87 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)&v87[7] = *(_QWORD *)(a4 + 31);
    v12 = *(_BYTE *)(a4 + 39);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v13 = *(_BYTE *)(a4 + 40);
    v15 = (void **)(a4 + 48);
    v14 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(a4 + 56);
    *(_QWORD *)v83 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)&v83[7] = *(_QWORD *)(a4 + 63);
    v17 = *(_BYTE *)(a4 + 71);
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    v18 = *(_OWORD *)(a5 + 16);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = v18;
    *(_BYTE *)(a5 + 39) = 0;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a4 + 40) = *(_BYTE *)(a5 + 40);
    if (*(char *)(a4 + 71) < 0)
    {
      v19 = v10;
      v20 = v12;
      v21 = v17;
      v22 = v14;
      v23 = v13;
      operator delete(*v15);
      v13 = v23;
      v14 = v22;
      v17 = v21;
      v12 = v20;
      v10 = v19;
      v16 = (_QWORD *)(a4 + 56);
      v11 = (_QWORD *)(a4 + 24);
    }
    v24 = *(_OWORD *)(a5 + 48);
    *(_QWORD *)(a4 + 64) = *(_QWORD *)(a5 + 64);
    *(_OWORD *)v15 = v24;
    *(_BYTE *)(a5 + 71) = 0;
    *(_BYTE *)(a5 + 48) = 0;
    if (*(char *)(a5 + 39) < 0)
    {
      v80 = v14;
      v77 = v13;
      operator delete(*(void **)(a5 + 16));
      v25 = *(char *)(a5 + 71);
      *(_QWORD *)(a5 + 16) = v10;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)v87;
      *(_QWORD *)(a5 + 31) = *(_QWORD *)&v87[7];
      v14 = v80;
      *(_BYTE *)(a5 + 39) = v12;
      *(_BYTE *)(a5 + 40) = v77;
      if (v25 < 0)
      {
        operator delete(*(void **)(a5 + 48));
        v14 = v80;
      }
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v10;
      *(_QWORD *)(a5 + 24) = *(_QWORD *)v87;
      *(_QWORD *)(a5 + 31) = *(_QWORD *)&v87[7];
      *(_BYTE *)(a5 + 39) = v12;
      *(_BYTE *)(a5 + 40) = v13;
    }
    *(_QWORD *)(a5 + 48) = v14;
    *(_QWORD *)(a5 + 56) = *(_QWORD *)v83;
    *(_QWORD *)(a5 + 63) = *(_QWORD *)&v83[7];
    *(_BYTE *)(a5 + 71) = v17;
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v26 = *(_QWORD *)a3;
      v27 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = v27;
      v28 = *(_QWORD *)(a3 + 16);
      v29 = (_QWORD *)(a3 + 24);
      *(_QWORD *)v88 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)&v88[7] = *(_QWORD *)(a3 + 31);
      v30 = *(_BYTE *)(a3 + 39);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v31 = *(_BYTE *)(a3 + 40);
      v33 = (void **)(a3 + 48);
      v32 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)v84 = *(_QWORD *)(a3 + 56);
      *(_QWORD *)&v84[7] = *(_QWORD *)(a3 + 63);
      v34 = *(_BYTE *)(a3 + 71);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v35 = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = v35;
      *(_BYTE *)(a4 + 39) = 0;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a3 + 40) = *(_BYTE *)(a4 + 40);
      if (*(char *)(a3 + 71) < 0)
      {
        v36 = v32;
        v74 = v30;
        v37 = v34;
        v38 = v31;
        v72 = v28;
        operator delete(*v33);
        v28 = v72;
        v31 = v38;
        v34 = v37;
        v30 = v74;
        v29 = (_QWORD *)(a3 + 24);
        v32 = v36;
      }
      v39 = *(_OWORD *)v15;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
      *(_OWORD *)v33 = v39;
      *(_BYTE *)(a4 + 71) = 0;
      *(_BYTE *)(a4 + 48) = 0;
      if (*(char *)(a4 + 39) < 0)
      {
        v78 = v32;
        v75 = v34;
        v73 = v31;
        v40 = v28;
        operator delete(*(void **)(a4 + 16));
        v34 = v75;
        v32 = v78;
        v41 = *(char *)(a4 + 71);
        *(_QWORD *)(a4 + 16) = v40;
        *v11 = *(_QWORD *)v88;
        *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)&v88[7];
        *(_BYTE *)(a4 + 39) = v30;
        *(_BYTE *)(a4 + 40) = v73;
        if (v41 < 0)
        {
          operator delete(*v15);
          v34 = v75;
          v32 = v78;
        }
      }
      else
      {
        *(_QWORD *)(a4 + 16) = v28;
        *v11 = *(_QWORD *)v88;
        *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)&v88[7];
        *(_BYTE *)(a4 + 39) = v30;
        *(_BYTE *)(a4 + 40) = v31;
      }
      *(_QWORD *)(a4 + 48) = v32;
      *v16 = *(_QWORD *)v84;
      *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)&v84[7];
      *(_BYTE *)(a4 + 71) = v34;
      if (sub_22E3B38EC((_DWORD *)a3, (_DWORD *)a2))
      {
        v42 = *(_QWORD *)a2;
        v43 = *(_QWORD *)(a2 + 8);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v42;
        *(_QWORD *)(a3 + 8) = v43;
        v44 = *(_QWORD *)(a2 + 16);
        v45 = (_QWORD *)(a2 + 24);
        *(_QWORD *)v89 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)&v89[7] = *(_QWORD *)(a2 + 31);
        v46 = *(_BYTE *)(a2 + 39);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        v47 = *(_BYTE *)(a2 + 40);
        v49 = (void **)(a2 + 48);
        v48 = *(_QWORD *)(a2 + 48);
        v50 = (_QWORD *)(a2 + 56);
        *(_QWORD *)v85 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)&v85[7] = *(_QWORD *)(a2 + 63);
        v51 = *(_BYTE *)(a2 + 71);
        *(_QWORD *)(a2 + 48) = 0;
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        v52 = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = v52;
        *(_BYTE *)(a3 + 39) = 0;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
        if (*(char *)(a2 + 71) < 0)
        {
          v53 = v48;
          v54 = v47;
          v55 = v46;
          v56 = v51;
          v57 = v44;
          operator delete(*v49);
          v44 = v57;
          v51 = v56;
          v46 = v55;
          v47 = v54;
          v50 = (_QWORD *)(a2 + 56);
          v45 = (_QWORD *)(a2 + 24);
          v48 = v53;
        }
        v58 = *(_OWORD *)v33;
        *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
        *(_OWORD *)v49 = v58;
        *(_BYTE *)(a3 + 71) = 0;
        *(_BYTE *)(a3 + 48) = 0;
        if (*(char *)(a3 + 39) < 0)
        {
          v79 = v48;
          v76 = v51;
          v59 = v44;
          operator delete(*(void **)(a3 + 16));
          v51 = v76;
          v60 = *(char *)(a3 + 71);
          *(_QWORD *)(a3 + 16) = v59;
          *v29 = *(_QWORD *)v89;
          *(_QWORD *)((char *)v29 + 7) = *(_QWORD *)&v89[7];
          v48 = v79;
          *(_BYTE *)(a3 + 39) = v46;
          *(_BYTE *)(a3 + 40) = v47;
          if (v60 < 0)
          {
            operator delete(*v33);
            v51 = v76;
            v48 = v79;
          }
        }
        else
        {
          *(_QWORD *)(a3 + 16) = v44;
          *v29 = *(_QWORD *)v89;
          *(_QWORD *)((char *)v29 + 7) = *(_QWORD *)&v89[7];
          *(_BYTE *)(a3 + 39) = v46;
          *(_BYTE *)(a3 + 40) = v47;
        }
        *(_QWORD *)(a3 + 48) = v48;
        *(_QWORD *)(a3 + 56) = *(_QWORD *)v85;
        *(_QWORD *)(a3 + 63) = *(_QWORD *)&v85[7];
        *(_BYTE *)(a3 + 71) = v51;
        if (sub_22E3B38EC((_DWORD *)a2, (_DWORD *)a1))
        {
          v61 = *(_QWORD *)a1;
          v62 = *(_QWORD *)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)a2 = v61;
          *(_QWORD *)(a2 + 8) = v62;
          v63 = a1 + 48;
          v64 = *(_QWORD *)(a1 + 48);
          v65 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)v90 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)&v90[7] = *(_QWORD *)(a1 + 31);
          v66 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v67 = *(_BYTE *)(a1 + 40);
          *(_QWORD *)v86 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)&v86[7] = *(_QWORD *)(a1 + 63);
          v68 = *(_BYTE *)(a1 + 71);
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v69 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = v69;
          *(_BYTE *)(a2 + 39) = 0;
          *(_BYTE *)(a2 + 16) = 0;
          *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
          if (*(char *)(a1 + 71) < 0)
          {
            operator delete(*(void **)v63);
            v63 = a1 + 48;
          }
          v70 = *(_OWORD *)v49;
          *(_QWORD *)(v63 + 16) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)v63 = v70;
          *(_BYTE *)(a2 + 71) = 0;
          *(_BYTE *)(a2 + 48) = 0;
          if (*(char *)(a2 + 39) < 0)
          {
            operator delete(*(void **)(a2 + 16));
            v71 = *(char *)(a2 + 71);
            *(_QWORD *)(a2 + 16) = v65;
            *v45 = *(_QWORD *)v90;
            *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)&v90[7];
            *(_BYTE *)(a2 + 39) = v66;
            *(_BYTE *)(a2 + 40) = v67;
            if (v71 < 0)
              operator delete(*v49);
          }
          else
          {
            *(_QWORD *)(a2 + 16) = v65;
            *v45 = *(_QWORD *)v90;
            *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)&v90[7];
            *(_BYTE *)(a2 + 39) = v66;
            *(_BYTE *)(a2 + 40) = v67;
          }
          *(_QWORD *)(a2 + 48) = v64;
          *v50 = *(_QWORD *)v86;
          *(_QWORD *)((char *)v50 + 7) = *(_QWORD *)&v86[7];
          *(_BYTE *)(a2 + 71) = v68;
        }
      }
    }
  }
}

void sub_22EF3B1A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void **v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _BYTE v44[15];
  _BYTE v45[15];
  _BYTE v46[15];
  _BYTE v47[15];
  _BYTE v48[15];
  _BYTE v49[15];

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  if ((v6 & 1) != 0)
  {
    v8 = *a1;
    v9 = a1[1];
    v10 = a1 + 2;
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_21:
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
      v13 = (__int128 *)(a3 + 16);
      goto LABEL_22;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *a2 = v8;
    a2[1] = v9;
    v24 = a1[6];
    v22 = a1 + 6;
    v23 = v24;
    v25 = *(v22 - 4);
    *(_QWORD *)v48 = *(v22 - 3);
    *(_QWORD *)&v48[7] = *(uint64_t *)((char *)v22 - 17);
    v26 = *((_BYTE *)v22 - 9);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = 0;
    v27 = *((_BYTE *)v22 - 8);
    *(_QWORD *)v45 = v22[1];
    *(_QWORD *)&v45[7] = *(uint64_t *)((char *)v22 + 15);
    v28 = *((_BYTE *)v22 + 23);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 0;
    v29 = *((_OWORD *)a2 + 1);
    v10[2] = a2[4];
    *(_OWORD *)v10 = v29;
    *((_BYTE *)a2 + 39) = 0;
    *((_BYTE *)a2 + 16) = 0;
    *((_BYTE *)v22 - 8) = *((_BYTE *)a2 + 40);
    if (*((char *)v22 + 23) < 0)
      operator delete((void *)*v22);
    v30 = *((_OWORD *)a2 + 3);
    v22[2] = a2[8];
    *(_OWORD *)v22 = v30;
    *((_BYTE *)a2 + 71) = 0;
    *((_BYTE *)a2 + 48) = 0;
    if (*((char *)a2 + 39) < 0)
    {
      operator delete((void *)a2[2]);
      v34 = *((char *)a2 + 71);
      a2[2] = v25;
      a2[3] = *(_QWORD *)v48;
      *(uint64_t *)((char *)a2 + 31) = *(_QWORD *)&v48[7];
      *((_BYTE *)a2 + 39) = v26;
      *((_BYTE *)a2 + 40) = v27;
      if (v34 < 0)
        operator delete((void *)a2[6]);
    }
    else
    {
      a2[2] = v25;
      a2[3] = *(_QWORD *)v48;
      *(uint64_t *)((char *)a2 + 31) = *(_QWORD *)&v48[7];
      *((_BYTE *)a2 + 39) = v26;
      *((_BYTE *)a2 + 40) = v27;
    }
    a2[6] = v23;
    a2[7] = *(_QWORD *)v45;
    *(uint64_t *)((char *)a2 + 63) = *(_QWORD *)&v45[7];
    *((_BYTE *)a2 + 71) = v28;
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = a2 + 2;
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_21;
    }
  }
  else if (v7)
  {
    v11 = *a2;
    v12 = a2[1];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    v14 = a2[2];
    v13 = (__int128 *)(a2 + 2);
    *(_QWORD *)v47 = a2[3];
    *(_QWORD *)&v47[7] = *(uint64_t *)((char *)a2 + 31);
    v15 = *((_BYTE *)a2 + 39);
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v17 = (void **)(a2 + 6);
    v16 = a2[6];
    v18 = *((_BYTE *)a2 + 40);
    *(_QWORD *)v44 = a2[7];
    *(_QWORD *)&v44[7] = *(uint64_t *)((char *)a2 + 63);
    v19 = *((_BYTE *)a2 + 71);
    a2[6] = 0;
    a2[7] = 0;
    a2[8] = 0;
    v20 = *(_OWORD *)(a3 + 16);
    a2[4] = *(_QWORD *)(a3 + 32);
    *((_OWORD *)a2 + 1) = v20;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *((_BYTE *)a2 + 40) = *(_BYTE *)(a3 + 40);
    if (*((char *)a2 + 71) < 0)
      operator delete(*v17);
    v21 = *(_OWORD *)(a3 + 48);
    a2[8] = *(_QWORD *)(a3 + 64);
    *(_OWORD *)v17 = v21;
    *(_BYTE *)(a3 + 71) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    if (*(char *)(a3 + 39) < 0)
    {
      operator delete(*(void **)(a3 + 16));
      v31 = *(char *)(a3 + 71);
      *(_QWORD *)(a3 + 16) = v14;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)v47;
      *(_QWORD *)(a3 + 31) = *(_QWORD *)&v47[7];
      *(_BYTE *)(a3 + 39) = v15;
      *(_BYTE *)(a3 + 40) = v18;
      if (v31 < 0)
        operator delete(*(void **)(a3 + 48));
    }
    else
    {
      *(_QWORD *)(a3 + 16) = v14;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)v47;
      *(_QWORD *)(a3 + 31) = *(_QWORD *)&v47[7];
      *(_BYTE *)(a3 + 39) = v15;
      *(_BYTE *)(a3 + 40) = v18;
    }
    *(_QWORD *)(a3 + 48) = v16;
    *(_QWORD *)(a3 + 56) = *(_QWORD *)v44;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)&v44[7];
    *(_BYTE *)(a3 + 71) = v19;
    if (sub_22E3B38EC(a2, a1))
    {
      v32 = *a1;
      v33 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v32;
      a2[1] = v33;
      v10 = a1 + 2;
LABEL_22:
      v35 = *v10;
      *(_QWORD *)v49 = v10[1];
      *(_QWORD *)&v49[7] = *(uint64_t *)((char *)v10 + 15);
      v36 = *((_BYTE *)v10 + 23);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 0;
      v38 = v10 + 4;
      v37 = v10[4];
      v39 = *((_BYTE *)v10 + 24);
      *(_QWORD *)v46 = v10[5];
      *(_QWORD *)&v46[7] = *(uint64_t *)((char *)v10 + 47);
      v40 = *((_BYTE *)v10 + 55);
      v10[4] = 0;
      v10[5] = 0;
      v10[6] = 0;
      v41 = *v13;
      v10[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)v10 = v41;
      *((_BYTE *)v13 + 23) = 0;
      *(_BYTE *)v13 = 0;
      *((_BYTE *)v10 + 24) = *((_BYTE *)v13 + 24);
      if (*((char *)v10 + 55) < 0)
        operator delete((void *)*v38);
      v42 = v13[2];
      v38[2] = *((_QWORD *)v13 + 6);
      *(_OWORD *)v38 = v42;
      *((_BYTE *)v13 + 55) = 0;
      *((_BYTE *)v13 + 32) = 0;
      if (*((char *)v13 + 23) < 0)
      {
        operator delete(*(void **)v13);
        v43 = *((char *)v13 + 55);
        *(_QWORD *)v13 = v35;
        *((_QWORD *)v13 + 1) = *(_QWORD *)v49;
        *(_QWORD *)((char *)v13 + 15) = *(_QWORD *)&v49[7];
        *((_BYTE *)v13 + 23) = v36;
        *((_BYTE *)v13 + 24) = v39;
        if (v43 < 0)
          operator delete(*((void **)v13 + 4));
      }
      else
      {
        *(_QWORD *)v13 = v35;
        *((_QWORD *)v13 + 1) = *(_QWORD *)v49;
        *(_QWORD *)((char *)v13 + 15) = *(_QWORD *)&v49[7];
        *((_BYTE *)v13 + 23) = v36;
        *((_BYTE *)v13 + 24) = v39;
      }
      *((_QWORD *)v13 + 4) = v37;
      *((_QWORD *)v13 + 5) = *(_QWORD *)v46;
      *(_QWORD *)((char *)v13 + 47) = *(_QWORD *)&v46[7];
      *((_BYTE *)v13 + 55) = v40;
    }
  }
}

BOOL sub_22EF3B5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 __p;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_22E3B38EC((_DWORD *)(a2 - 72), (_DWORD *)a1))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_QWORD *)(a2 - 72) = v6;
        *(_QWORD *)(a2 - 64) = v7;
        v10 = *(_QWORD *)(a1 + 48);
        v8 = a1 + 48;
        v9 = v10;
        v11 = *(_QWORD *)(v8 - 32);
        *(_QWORD *)&v35 = *(_QWORD *)(v8 - 24);
        *(_QWORD *)((char *)&v35 + 7) = *(_QWORD *)(v8 - 17);
        v12 = *(_BYTE *)(v8 - 9);
        *(_QWORD *)(v8 - 24) = 0;
        *(_QWORD *)(v8 - 16) = 0;
        *(_QWORD *)(v8 - 32) = 0;
        v13 = *(_BYTE *)(v8 - 8);
        v41[0] = *(_QWORD *)(v8 + 8);
        *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)(v8 + 15);
        v14 = *(_BYTE *)(v8 + 23);
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v15 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(v8 - 16) = *(_QWORD *)(a2 - 40);
        *(_OWORD *)(v8 - 32) = v15;
        *(_BYTE *)(a2 - 33) = 0;
        *(_BYTE *)(a2 - 56) = 0;
        *(_BYTE *)(v8 - 8) = *(_BYTE *)(a2 - 32);
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        v16 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)v8 = v16;
        *(_BYTE *)(a2 - 1) = 0;
        *(_BYTE *)(a2 - 24) = 0;
        if (*(char *)(a2 - 33) < 0)
        {
          operator delete(*(void **)(a2 - 56));
          v32 = *(char *)(a2 - 1);
          v33 = v35;
          *(_QWORD *)(a2 - 56) = v11;
          *(_QWORD *)(a2 - 48) = v33;
          *(_QWORD *)(a2 - 41) = *(_QWORD *)((char *)&v35 + 7);
          *(_BYTE *)(a2 - 33) = v12;
          *(_BYTE *)(a2 - 32) = v13;
          if (v32 < 0)
            operator delete(*(void **)(a2 - 24));
        }
        else
        {
          v17 = v35;
          *(_QWORD *)(a2 - 56) = v11;
          *(_QWORD *)(a2 - 48) = v17;
          *(_QWORD *)(a2 - 41) = *(_QWORD *)((char *)&v35 + 7);
          *(_BYTE *)(a2 - 33) = v12;
          *(_BYTE *)(a2 - 32) = v13;
        }
        v34 = v41[0];
        *(_QWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 16) = v34;
        *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v41 + 7);
        *(_BYTE *)(a2 - 1) = v14;
      }
      return 1;
    case 3uLL:
      sub_22EF3B1A4((uint64_t *)a1, (uint64_t *)(a1 + 72), a2 - 72);
      return 1;
    case 4uLL:
      sub_22EF3B99C((uint64_t *)a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_22EF3AB7C(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      v18 = (_DWORD *)(a1 + 144);
      sub_22EF3B1A4((uint64_t *)a1, (uint64_t *)(a1 + 72), a1 + 144);
      v19 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v20 = 0;
      v21 = 0;
      break;
  }
  do
  {
    if (sub_22E3B38EC((_DWORD *)v19, v18))
    {
      v22 = *(_OWORD *)(v19 + 16);
      v35 = *(_OWORD *)v19;
      __p = v22;
      v37 = *(_QWORD *)(v19 + 32);
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0;
      v38 = *(_BYTE *)(v19 + 40);
      v39 = *(_OWORD *)(v19 + 48);
      v40 = *(_QWORD *)(v19 + 64);
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 64) = 0;
      v23 = v20;
      *(_QWORD *)(v19 + 48) = 0;
      while (1)
      {
        v24 = a1 + v23;
        *(_OWORD *)(a1 + v23 + 216) = *(_OWORD *)(a1 + v23 + 144);
        v25 = (void **)(a1 + v23 + 232);
        if (*(char *)(a1 + v23 + 255) < 0)
          operator delete(*v25);
        *(_OWORD *)v25 = *(_OWORD *)(v24 + 160);
        *(_QWORD *)(a1 + v23 + 248) = *(_QWORD *)(v24 + 176);
        *(_BYTE *)(v24 + 183) = 0;
        *(_BYTE *)(v24 + 160) = 0;
        *(_BYTE *)(v24 + 256) = *(_BYTE *)(v24 + 184);
        v26 = v24 + 264;
        if (*(char *)(v24 + 287) < 0)
          operator delete(*(void **)v26);
        v27 = a1 + v23;
        *(_OWORD *)v26 = *(_OWORD *)(a1 + v23 + 192);
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 + v23 + 208);
        *(_BYTE *)(v27 + 215) = 0;
        *(_BYTE *)(v27 + 192) = 0;
        if (v23 == -144)
          break;
        v23 -= 72;
        if ((sub_22E3B38EC(&v35, (_DWORD *)(v27 + 72)) & 1) == 0)
        {
          v28 = a1 + v23 + 216;
          goto LABEL_19;
        }
      }
      v28 = a1;
LABEL_19:
      *(_OWORD *)v28 = v35;
      v29 = v27 + 160;
      if (*(char *)(v28 + 39) < 0)
        operator delete(*(void **)v29);
      v30 = 0;
      v31 = v27 + 192;
      *(_OWORD *)v29 = __p;
      *(_QWORD *)(v29 + 16) = v37;
      HIBYTE(v37) = 0;
      LOBYTE(__p) = 0;
      *(_BYTE *)(v28 + 40) = v38;
      if (*(char *)(v28 + 71) < 0)
      {
        operator delete(*(void **)v31);
        v30 = HIBYTE(v37);
      }
      *(_OWORD *)v31 = v39;
      *(_QWORD *)(v31 + 16) = v40;
      HIBYTE(v40) = 0;
      LOBYTE(v39) = 0;
      if (v30 < 0)
        operator delete((void *)__p);
      if (++v21 == 8)
        return v19 + 72 == a2;
    }
    v18 = (_DWORD *)v19;
    v20 += 72;
    v19 += 72;
  }
  while (v19 != a2);
  return 1;
}

void sub_22EF3B99C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  uint64_t v14;
  void **v15;
  _QWORD *v16;
  char v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  uint64_t v31;
  void **v32;
  char v33;
  __int128 v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[15];
  _BYTE v64[15];
  _BYTE v65[15];
  _BYTE v66[15];
  _BYTE v67[15];
  _BYTE v68[15];

  sub_22EF3B1A4(a1, (uint64_t *)a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = *(_QWORD *)(a3 + 16);
    v11 = (_QWORD *)(a3 + 24);
    *(_QWORD *)v66 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)&v66[7] = *(_QWORD *)(a3 + 31);
    v12 = *(_BYTE *)(a3 + 39);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v13 = *(_BYTE *)(a3 + 40);
    v15 = (void **)(a3 + 48);
    v14 = *(_QWORD *)(a3 + 48);
    v16 = (_QWORD *)(a3 + 56);
    *(_QWORD *)v63 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)&v63[7] = *(_QWORD *)(a3 + 63);
    v17 = *(_BYTE *)(a3 + 71);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v18 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = v18;
    *(_BYTE *)(a4 + 39) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a3 + 40) = *(_BYTE *)(a4 + 40);
    if (*(char *)(a3 + 71) < 0)
    {
      v55 = v12;
      v19 = v17;
      v20 = v14;
      v21 = v10;
      v22 = v13;
      operator delete(*v15);
      v13 = v22;
      v10 = v21;
      v14 = v20;
      v17 = v19;
      v12 = v55;
      v16 = (_QWORD *)(a3 + 56);
      v11 = (_QWORD *)(a3 + 24);
    }
    v23 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)v15 = v23;
    *(_BYTE *)(a4 + 71) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    if (*(char *)(a4 + 39) < 0)
    {
      v60 = v14;
      v56 = v10;
      v59 = v13;
      operator delete(*(void **)(a4 + 16));
      v24 = *(char *)(a4 + 71);
      *(_QWORD *)(a4 + 16) = v56;
      *(_QWORD *)(a4 + 24) = *(_QWORD *)v66;
      *(_QWORD *)(a4 + 31) = *(_QWORD *)&v66[7];
      v14 = v60;
      *(_BYTE *)(a4 + 39) = v12;
      *(_BYTE *)(a4 + 40) = v59;
      if (v24 < 0)
      {
        operator delete(*(void **)(a4 + 48));
        v14 = v60;
      }
    }
    else
    {
      *(_QWORD *)(a4 + 16) = v10;
      *(_QWORD *)(a4 + 24) = *(_QWORD *)v66;
      *(_QWORD *)(a4 + 31) = *(_QWORD *)&v66[7];
      *(_BYTE *)(a4 + 39) = v12;
      *(_BYTE *)(a4 + 40) = v13;
    }
    *(_QWORD *)(a4 + 48) = v14;
    *(_QWORD *)(a4 + 56) = *(_QWORD *)v63;
    *(_QWORD *)(a4 + 63) = *(_QWORD *)&v63[7];
    *(_BYTE *)(a4 + 71) = v17;
    if (sub_22E3B38EC((_DWORD *)a3, (_DWORD *)a2))
    {
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v25;
      *(_QWORD *)(a3 + 8) = v26;
      v27 = *(_QWORD *)(a2 + 16);
      v28 = (_QWORD *)(a2 + 24);
      *(_QWORD *)v67 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)&v67[7] = *(_QWORD *)(a2 + 31);
      v29 = *(_BYTE *)(a2 + 39);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v30 = *(_BYTE *)(a2 + 40);
      v32 = (void **)(a2 + 48);
      v31 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)v64 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v64[7] = *(_QWORD *)(a2 + 63);
      v33 = *(_BYTE *)(a2 + 71);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      v34 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = v34;
      *(_BYTE *)(a3 + 39) = 0;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
      if (*(char *)(a2 + 71) < 0)
      {
        v61 = v31;
        v52 = v27;
        v35 = v33;
        v36 = v29;
        v57 = v30;
        operator delete(*v32);
        v30 = v57;
        v29 = v36;
        v33 = v35;
        v27 = v52;
        v28 = (_QWORD *)(a2 + 24);
        v31 = v61;
      }
      v37 = *(_OWORD *)v15;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)v32 = v37;
      *(_BYTE *)(a3 + 71) = 0;
      *(_BYTE *)(a3 + 48) = 0;
      if (*(char *)(a3 + 39) < 0)
      {
        v62 = v31;
        v54 = v33;
        v53 = v29;
        v58 = v30;
        v38 = v27;
        operator delete(*(void **)(a3 + 16));
        v33 = v54;
        v31 = v62;
        v39 = *(char *)(a3 + 71);
        *(_QWORD *)(a3 + 16) = v38;
        *v11 = *(_QWORD *)v67;
        *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)&v67[7];
        *(_BYTE *)(a3 + 39) = v53;
        *(_BYTE *)(a3 + 40) = v58;
        if (v39 < 0)
        {
          operator delete(*v15);
          v33 = v54;
          v31 = v62;
        }
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v27;
        *v11 = *(_QWORD *)v67;
        *(_QWORD *)((char *)v11 + 7) = *(_QWORD *)&v67[7];
        *(_BYTE *)(a3 + 39) = v29;
        *(_BYTE *)(a3 + 40) = v30;
      }
      *(_QWORD *)(a3 + 48) = v31;
      *v16 = *(_QWORD *)v64;
      *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)&v64[7];
      *(_BYTE *)(a3 + 71) = v33;
      if (sub_22E3B38EC((_DWORD *)a2, a1))
      {
        v40 = *a1;
        v41 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)a2 = v40;
        *(_QWORD *)(a2 + 8) = v41;
        v44 = a1[6];
        v42 = a1 + 6;
        v43 = v44;
        v45 = *(v42 - 4);
        *(_QWORD *)v68 = *(v42 - 3);
        *(_QWORD *)&v68[7] = *(uint64_t *)((char *)v42 - 17);
        v46 = *((_BYTE *)v42 - 9);
        *(v42 - 3) = 0;
        *(v42 - 2) = 0;
        *(v42 - 4) = 0;
        v47 = *((_BYTE *)v42 - 8);
        *(_QWORD *)v65 = v42[1];
        *(_QWORD *)&v65[7] = *(uint64_t *)((char *)v42 + 15);
        v48 = *((_BYTE *)v42 + 23);
        v42[1] = 0;
        v42[2] = 0;
        *v42 = 0;
        v49 = *(_OWORD *)(a2 + 16);
        *(v42 - 2) = *(_QWORD *)(a2 + 32);
        *((_OWORD *)v42 - 2) = v49;
        *(_BYTE *)(a2 + 39) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *((_BYTE *)v42 - 8) = *(_BYTE *)(a2 + 40);
        if (*((char *)v42 + 23) < 0)
          operator delete((void *)*v42);
        v50 = *(_OWORD *)v32;
        v42[2] = *(_QWORD *)(a2 + 64);
        *(_OWORD *)v42 = v50;
        *(_BYTE *)(a2 + 71) = 0;
        *(_BYTE *)(a2 + 48) = 0;
        if (*(char *)(a2 + 39) < 0)
        {
          operator delete(*(void **)(a2 + 16));
          v51 = *(char *)(a2 + 71);
          *(_QWORD *)(a2 + 16) = v45;
          *v28 = *(_QWORD *)v68;
          *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)&v68[7];
          *(_BYTE *)(a2 + 39) = v46;
          *(_BYTE *)(a2 + 40) = v47;
          if (v51 < 0)
            operator delete(*v32);
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v45;
          *v28 = *(_QWORD *)v68;
          *(_QWORD *)((char *)v28 + 7) = *(_QWORD *)&v68[7];
          *(_BYTE *)(a2 + 39) = v46;
          *(_BYTE *)(a2 + 40) = v47;
        }
        *(_QWORD *)(a2 + 48) = v43;
        *(_QWORD *)(a2 + 56) = *(_QWORD *)v65;
        *(_QWORD *)(a2 + 63) = *(_QWORD *)&v65[7];
        *(_BYTE *)(a2 + 71) = v48;
      }
    }
  }
}

void sub_22EF3BE48(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void **v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  void **v35;
  __int128 v36;
  void **v37;
  __int128 v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  void **v57;
  void **v58;
  __int128 v59;
  __int128 v60;
  int v61;
  void **v62;
  __int128 v63;
  void **v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  __int128 v104;
  void **v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  __int128 v114;
  __int128 v115;
  int v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void **v125;
  void **v126;
  __int128 v127;
  void **v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t *v132;
  int v133;
  void **v134;
  _OWORD *v135;
  void **v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  void **v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  void **v151;
  __int128 v152;
  void **v153;
  __int128 v154;
  int v155;
  void **v156;
  __int128 v157;
  __int128 v158;
  int v159;
  int v160;
  _DWORD *v162;
  unint64_t v163;
  _OWORD *v164;
  unint64_t v165;
  void **v166;
  void **v167;
  char v168;
  void **v169;
  void **v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 *v174;
  __int128 *v175;
  __int128 *v176;
  __int128 *v177;
  __int128 *v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v182;
  int64_t v183;
  int64_t v184;
  uint64_t v185;
  _OWORD *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  char v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  __int128 __p;
  uint64_t v199;
  char v200;
  uint64_t v201;
  int v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  char v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  char v211;
  __int128 v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  int v216;

  v7 = &v204;
  v8 = &v207;
LABEL_2:
  v182 = (_DWORD *)a2 - 38;
  v179 = (uint64_t)a2 - 456;
  v180 = (uint64_t)(a2 - 19);
  v9 = a1;
  v185 = (uint64_t)a2;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v187 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)a2 - v9) >> 3))
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_22E3B38EC(v182, (_DWORD *)v9))
        {
          v67 = *(_QWORD *)v9;
          v68 = *(_QWORD *)(v9 + 8);
          *(_OWORD *)v9 = *(_OWORD *)v182;
          *((_QWORD *)a2 - 19) = v67;
          *((_QWORD *)a2 - 18) = v68;
          sub_22EF3DDE4(v9 + 16, (uint64_t)a2 - 136);
        }
        return;
      case 3uLL:
        sub_22EF3D8AC((uint64_t *)v9, (uint64_t *)(v9 + 152), (uint64_t)v182);
        return;
      case 4uLL:
        sub_22EF3E048((uint64_t *)v9, (uint64_t *)(v9 + 152), v9 + 304, (uint64_t)v182);
        return;
      case 5uLL:
        sub_22EF3D7A0((uint64_t *)v9, (uint64_t *)(v9 + 152), v9 + 304, v9 + 456, (uint64_t)v182);
        return;
      default:
        if (v10 > 3647)
        {
          if (!a3)
          {
            if ((_OWORD *)v9 != a2)
            {
              v184 = (unint64_t)(v187 - 2) >> 1;
              v87 = v184;
              do
              {
                v88 = v87;
                if (v184 >= v87)
                {
                  v89 = (2 * v87) | 1;
                  v90 = a1 + 152 * v89;
                  if (2 * v87 + 2 < v187
                    && sub_22E3B38EC((_DWORD *)(a1 + 152 * v89), (_DWORD *)(v90 + 152)))
                  {
                    v90 += 152;
                    v89 = 2 * v88 + 2;
                  }
                  v91 = a1 + 152 * v88;
                  if ((sub_22E3B38EC((_DWORD *)v90, (_DWORD *)v91) & 1) == 0)
                  {
                    v203 = *(_OWORD *)v91;
                    v92 = a1 + 152 * v88;
                    v93 = *(_OWORD *)(v92 + 16);
                    v205 = *(_QWORD *)(v92 + 32);
                    v204 = v93;
                    *(_QWORD *)(v92 + 24) = 0;
                    *(_QWORD *)(v92 + 32) = 0;
                    *(_QWORD *)(v92 + 16) = 0;
                    v206 = *(_BYTE *)(v92 + 40);
                    v94 = *(_OWORD *)(v92 + 48);
                    v208 = *(_QWORD *)(v92 + 64);
                    v207 = v94;
                    *(_QWORD *)(v92 + 56) = 0;
                    *(_QWORD *)(v92 + 64) = 0;
                    *(_QWORD *)(v92 + 48) = 0;
                    LOBYTE(v209) = 0;
                    v211 = 0;
                    if (*(_BYTE *)(v92 + 96))
                    {
                      v95 = a1 + 152 * v88;
                      v96 = *(_OWORD *)(v95 + 72);
                      v210 = *(_QWORD *)(v95 + 88);
                      v209 = v96;
                      *(_QWORD *)(v95 + 80) = 0;
                      *(_QWORD *)(v95 + 88) = 0;
                      *(_QWORD *)(v95 + 72) = 0;
                      v211 = 1;
                    }
                    LOBYTE(v212) = 0;
                    v214 = 0;
                    if (*(_BYTE *)(a1 + 152 * v88 + 128))
                    {
                      v97 = a1 + 152 * v88;
                      v98 = *(_OWORD *)(v97 + 104);
                      v213 = *(_QWORD *)(v97 + 120);
                      v212 = v98;
                      *(_QWORD *)(v97 + 112) = 0;
                      *(_QWORD *)(v97 + 120) = 0;
                      *(_QWORD *)(v97 + 104) = 0;
                      v214 = 1;
                    }
                    v183 = v88;
                    v99 = a1 + 152 * v88;
                    v100 = *(_QWORD *)(v99 + 136);
                    v216 = *(_DWORD *)(v99 + 144);
                    v215 = v100;
                    do
                    {
                      v101 = v90;
                      *(_OWORD *)v91 = *(_OWORD *)v90;
                      v102 = (void **)(v91 + 16);
                      if (*(char *)(v91 + 39) < 0)
                        operator delete(*v102);
                      v103 = (void **)(v90 + 16);
                      v104 = *(_OWORD *)(v90 + 16);
                      *(_QWORD *)(v91 + 32) = *(_QWORD *)(v90 + 32);
                      *(_OWORD *)v102 = v104;
                      *(_BYTE *)(v90 + 39) = 0;
                      *(_BYTE *)(v90 + 16) = 0;
                      *(_BYTE *)(v91 + 40) = *(_BYTE *)(v90 + 40);
                      v105 = (void **)(v91 + 48);
                      if (*(char *)(v91 + 71) < 0)
                        operator delete(*v105);
                      v106 = *(_OWORD *)(v90 + 48);
                      *(_QWORD *)(v91 + 64) = *(_QWORD *)(v90 + 64);
                      *(_OWORD *)v105 = v106;
                      *(_BYTE *)(v90 + 71) = 0;
                      *(_BYTE *)(v90 + 48) = 0;
                      v107 = v90 + 72;
                      sub_22EF2DD4C(v91 + 72, (__int128 *)(v90 + 72));
                      v108 = v90 + 104;
                      sub_22EF2DD4C(v91 + 104, (__int128 *)(v90 + 104));
                      v109 = v90 + 136;
                      v110 = *(_DWORD *)(v90 + 144);
                      *(_QWORD *)(v91 + 136) = *(_QWORD *)(v90 + 136);
                      *(_DWORD *)(v91 + 144) = v110;
                      if (v184 < v89)
                        break;
                      v111 = (2 * v89) | 1;
                      v90 = a1 + 152 * v111;
                      v112 = 2 * v89 + 2;
                      if (v112 < v187
                        && sub_22E3B38EC((_DWORD *)(a1 + 152 * v111), (_DWORD *)(v90 + 152)))
                      {
                        v90 += 152;
                        v111 = v112;
                      }
                      v91 = v101;
                      v89 = v111;
                    }
                    while (!sub_22E3B38EC((_DWORD *)v90, &v203));
                    *(_OWORD *)v101 = v203;
                    if (*(char *)(v101 + 39) < 0)
                      operator delete(*v103);
                    v113 = (void **)(v101 + 48);
                    v114 = v204;
                    *(_QWORD *)(v101 + 32) = v205;
                    *(_OWORD *)v103 = v114;
                    HIBYTE(v205) = 0;
                    LOBYTE(v204) = 0;
                    *(_BYTE *)(v101 + 40) = v206;
                    if (*(char *)(v101 + 71) < 0)
                      operator delete(*v113);
                    v115 = v207;
                    *(_QWORD *)(v101 + 64) = v208;
                    *(_OWORD *)v113 = v115;
                    HIBYTE(v208) = 0;
                    LOBYTE(v207) = 0;
                    sub_22EF2DD4C(v107, &v209);
                    sub_22EF2DD4C(v108, &v212);
                    v116 = v216;
                    *(_QWORD *)v109 = v215;
                    *(_DWORD *)(v109 + 8) = v116;
                    a2 = (_OWORD *)v185;
                    v88 = v183;
                    if (v214)
                    {
                      if (SHIBYTE(v213) < 0)
                        operator delete((void *)v212);
                      v214 = 0;
                    }
                    if (v211)
                    {
                      if (SHIBYTE(v210) < 0)
                        operator delete((void *)v209);
                      v211 = 0;
                    }
                    if (SHIBYTE(v208) < 0)
                      operator delete((void *)v207);
                    if (SHIBYTE(v205) < 0)
                      operator delete((void *)v204);
                  }
                }
                v87 = v88 - 1;
              }
              while (v88);
              v177 = (__int128 *)(a1 + 48);
              v178 = (__int128 *)(a1 + 16);
              v174 = (__int128 *)(a1 + 104);
              v175 = (__int128 *)(a1 + 72);
              do
              {
                v189 = *(_OWORD *)a1;
                v190 = *v178;
                v191 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)v178 = 0;
                v192 = *(_BYTE *)(a1 + 40);
                v194 = *(_QWORD *)(a1 + 64);
                v193 = *v177;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)v177 = 0;
                LOBYTE(v195) = 0;
                v197 = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  v117 = *v175;
                  v196 = *(_QWORD *)(a1 + 88);
                  v195 = v117;
                  *(_QWORD *)(a1 + 80) = 0;
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_QWORD *)v175 = 0;
                  v197 = 1;
                }
                v186 = a2;
                LOBYTE(__p) = 0;
                v200 = 0;
                if (*(_BYTE *)(a1 + 128))
                {
                  v118 = *v174;
                  v199 = *(_QWORD *)(a1 + 120);
                  __p = v118;
                  *(_QWORD *)(a1 + 112) = 0;
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_QWORD *)v174 = 0;
                  v200 = 1;
                }
                v119 = 0;
                v120 = *(_QWORD *)(a1 + 136);
                v202 = *(_DWORD *)(a1 + 144);
                v201 = v120;
                v121 = a1;
                do
                {
                  v122 = v121 + 152 * v119 + 152;
                  v123 = 2 * v119;
                  v119 = (2 * v119) | 1;
                  v124 = v123 + 2;
                  if (v123 + 2 < v187 && sub_22E3B38EC((_DWORD *)v122, (_DWORD *)(v122 + 152)))
                  {
                    v122 += 152;
                    v119 = v124;
                  }
                  *(_OWORD *)v121 = *(_OWORD *)v122;
                  v125 = (void **)(v121 + 16);
                  if (*(char *)(v121 + 39) < 0)
                    operator delete(*v125);
                  v126 = (void **)(v122 + 16);
                  v127 = *(_OWORD *)(v122 + 16);
                  *(_QWORD *)(v121 + 32) = *(_QWORD *)(v122 + 32);
                  *(_OWORD *)v125 = v127;
                  *(_BYTE *)(v122 + 39) = 0;
                  *(_BYTE *)(v122 + 16) = 0;
                  *(_BYTE *)(v121 + 40) = *(_BYTE *)(v122 + 40);
                  v128 = (void **)(v121 + 48);
                  if (*(char *)(v121 + 71) < 0)
                    operator delete(*v128);
                  v129 = *(_OWORD *)(v122 + 48);
                  *(_QWORD *)(v121 + 64) = *(_QWORD *)(v122 + 64);
                  *(_OWORD *)v128 = v129;
                  *(_BYTE *)(v122 + 71) = 0;
                  *(_BYTE *)(v122 + 48) = 0;
                  v130 = (__int128 *)(v122 + 72);
                  sub_22EF2DD4C(v121 + 72, (__int128 *)(v122 + 72));
                  v131 = (__int128 *)(v122 + 104);
                  sub_22EF2DD4C(v121 + 104, (__int128 *)(v122 + 104));
                  v132 = (uint64_t *)(v122 + 136);
                  v133 = *(_DWORD *)(v122 + 144);
                  *(_QWORD *)(v121 + 136) = *(_QWORD *)(v122 + 136);
                  *(_DWORD *)(v121 + 144) = v133;
                  v121 = v122;
                }
                while (v119 <= (uint64_t)((unint64_t)(v187 - 2) >> 1));
                v134 = (void **)(v122 + 48);
                v135 = (_OWORD *)((char *)v186 - 152);
                if ((_OWORD *)v122 == (_OWORD *)((char *)v186 - 152))
                {
                  *(_OWORD *)v122 = v189;
                  if (*(char *)(v122 + 39) < 0)
                    operator delete(*v126);
                  *(_QWORD *)(v122 + 32) = v191;
                  *(_OWORD *)v126 = v190;
                  *(_BYTE *)(v122 + 40) = v192;
                  if (*(char *)(v122 + 71) < 0)
                    operator delete(*v134);
                  *(_QWORD *)(v122 + 64) = v194;
                  *(_OWORD *)v134 = v193;
                  sub_22EF2DD4C(v122 + 72, &v195);
                  sub_22EF2DD4C(v122 + 104, &__p);
                  v160 = v202;
                  *v132 = v201;
                  *(_DWORD *)(v122 + 144) = v160;
                }
                else
                {
                  *(_OWORD *)v122 = *v135;
                  if (*(char *)(v122 + 39) < 0)
                    operator delete(*v126);
                  v136 = (void **)v186 - 17;
                  v137 = *(_OWORD *)((char *)v186 - 136);
                  *(_QWORD *)(v122 + 32) = *((_QWORD *)v186 - 15);
                  *(_OWORD *)v126 = v137;
                  *((_BYTE *)v186 - 113) = 0;
                  *((_BYTE *)v186 - 136) = 0;
                  *(_BYTE *)(v122 + 40) = *((_BYTE *)v186 - 112);
                  if (*(char *)(v122 + 71) < 0)
                    operator delete(*v134);
                  v138 = *(_OWORD *)((char *)v186 - 104);
                  *(_QWORD *)(v122 + 64) = *((_QWORD *)v186 - 11);
                  v176 = (__int128 *)(v122 + 48);
                  *(_OWORD *)v134 = v138;
                  *((_BYTE *)v186 - 81) = 0;
                  *((_BYTE *)v186 - 104) = 0;
                  sub_22EF2DD4C(v122 + 72, v186 - 5);
                  sub_22EF2DD4C(v122 + 104, v186 - 3);
                  v139 = *((_QWORD *)v186 - 2);
                  *(_DWORD *)(v122 + 144) = *((_DWORD *)v186 - 2);
                  *v132 = v139;
                  *v135 = v189;
                  if (*((char *)v186 - 113) < 0)
                    operator delete(*v136);
                  v140 = (void **)v186 - 13;
                  *((_QWORD *)v186 - 15) = v191;
                  *(_OWORD *)v136 = v190;
                  *((_BYTE *)v186 - 112) = v192;
                  if (*((char *)v186 - 81) < 0)
                    operator delete(*v140);
                  *((_QWORD *)v186 - 11) = v194;
                  *(_OWORD *)v140 = v193;
                  sub_22EF2DD4C((uint64_t)(v186 - 5), &v195);
                  sub_22EF2DD4C((uint64_t)(v186 - 3), &__p);
                  v141 = v202;
                  *((_QWORD *)v186 - 2) = v201;
                  *((_DWORD *)v186 - 2) = v141;
                  v135 = (_OWORD *)((char *)v186 - 152);
                  if (v122 + 152 - a1 >= 153)
                  {
                    v142 = ((v122 + 152 - a1) / 0x98uLL - 2) >> 1;
                    v143 = a1 + 152 * v142;
                    if (sub_22E3B38EC((_DWORD *)v143, (_DWORD *)v122))
                    {
                      v203 = *(_OWORD *)v122;
                      v144 = *(_QWORD *)(v122 + 32);
                      v204 = *(_OWORD *)v126;
                      v205 = v144;
                      *(_QWORD *)(v122 + 24) = 0;
                      *(_QWORD *)(v122 + 32) = 0;
                      *v126 = 0;
                      v206 = *(_BYTE *)(v122 + 40);
                      v145 = *v176;
                      v208 = *(_QWORD *)(v122 + 64);
                      v207 = v145;
                      *(_QWORD *)(v122 + 56) = 0;
                      *(_QWORD *)(v122 + 64) = 0;
                      *(_QWORD *)v176 = 0;
                      LOBYTE(v209) = 0;
                      v211 = 0;
                      if (*(_BYTE *)(v122 + 96))
                      {
                        v146 = *v130;
                        v210 = *(_QWORD *)(v122 + 88);
                        v209 = v146;
                        *(_QWORD *)(v122 + 80) = 0;
                        *(_QWORD *)(v122 + 88) = 0;
                        *(_QWORD *)v130 = 0;
                        v211 = 1;
                      }
                      LOBYTE(v212) = 0;
                      v214 = 0;
                      if (*(_BYTE *)(v122 + 128))
                      {
                        v147 = *v131;
                        v213 = *(_QWORD *)(v122 + 120);
                        v212 = v147;
                        *(_QWORD *)(v122 + 112) = 0;
                        *(_QWORD *)(v122 + 120) = 0;
                        *(_QWORD *)v131 = 0;
                        v214 = 1;
                      }
                      v148 = *v132;
                      v216 = *(_DWORD *)(v122 + 144);
                      v215 = v148;
                      do
                      {
                        v149 = v143;
                        *(_OWORD *)v122 = *(_OWORD *)v143;
                        v150 = (void **)(v122 + 16);
                        if (*(char *)(v122 + 39) < 0)
                          operator delete(*v150);
                        v151 = (void **)(v143 + 16);
                        v152 = *(_OWORD *)(v143 + 16);
                        *(_QWORD *)(v122 + 32) = *(_QWORD *)(v143 + 32);
                        *(_OWORD *)v150 = v152;
                        *(_BYTE *)(v143 + 39) = 0;
                        *(_BYTE *)(v143 + 16) = 0;
                        *(_BYTE *)(v122 + 40) = *(_BYTE *)(v143 + 40);
                        v153 = (void **)(v122 + 48);
                        if (*(char *)(v122 + 71) < 0)
                          operator delete(*v153);
                        v154 = *(_OWORD *)(v143 + 48);
                        *(_QWORD *)(v122 + 64) = *(_QWORD *)(v143 + 64);
                        *(_OWORD *)v153 = v154;
                        *(_BYTE *)(v143 + 71) = 0;
                        *(_BYTE *)(v143 + 48) = 0;
                        sub_22EF2DD4C(v122 + 72, (__int128 *)(v143 + 72));
                        sub_22EF2DD4C(v122 + 104, (__int128 *)(v143 + 104));
                        v155 = *(_DWORD *)(v143 + 144);
                        *(_QWORD *)(v122 + 136) = *(_QWORD *)(v143 + 136);
                        *(_DWORD *)(v122 + 144) = v155;
                        if (!v142)
                          break;
                        v142 = (v142 - 1) >> 1;
                        v143 = a1 + 152 * v142;
                        v122 = v149;
                      }
                      while ((sub_22E3B38EC((_DWORD *)v143, &v203) & 1) != 0);
                      *(_OWORD *)v149 = v203;
                      if (*(char *)(v149 + 39) < 0)
                        operator delete(*v151);
                      v156 = (void **)(v149 + 48);
                      v157 = v204;
                      *(_QWORD *)(v149 + 32) = v205;
                      *(_OWORD *)v151 = v157;
                      HIBYTE(v205) = 0;
                      LOBYTE(v204) = 0;
                      *(_BYTE *)(v149 + 40) = v206;
                      if (*(char *)(v149 + 71) < 0)
                        operator delete(*v156);
                      v158 = v207;
                      *(_QWORD *)(v149 + 64) = v208;
                      *(_OWORD *)v156 = v158;
                      HIBYTE(v208) = 0;
                      LOBYTE(v207) = 0;
                      sub_22EF2DD4C(v149 + 72, &v209);
                      sub_22EF2DD4C(v149 + 104, &v212);
                      v159 = v216;
                      *(_QWORD *)(v149 + 136) = v215;
                      *(_DWORD *)(v149 + 144) = v159;
                      if (v214)
                      {
                        if (SHIBYTE(v213) < 0)
                          operator delete((void *)v212);
                        v214 = 0;
                      }
                      if (v211)
                      {
                        if (SHIBYTE(v210) < 0)
                          operator delete((void *)v209);
                        v211 = 0;
                      }
                      if (SHIBYTE(v208) < 0)
                        operator delete((void *)v207);
                      if (SHIBYTE(v205) < 0)
                        operator delete((void *)v204);
                    }
                  }
                }
                if (v200)
                {
                  if (SHIBYTE(v199) < 0)
                    operator delete((void *)__p);
                  v200 = 0;
                }
                if (v197)
                {
                  if (SHIBYTE(v196) < 0)
                    operator delete((void *)v195);
                  v197 = 0;
                }
                a2 = v135;
              }
              while (v187-- > 2);
            }
            return;
          }
          v11 = (uint64_t *)(v9 + 152 * ((unint64_t)v187 >> 1));
          if ((unint64_t)v10 < 0x4C01)
          {
            sub_22EF3D8AC((uint64_t *)(v9 + 152 * ((unint64_t)v187 >> 1)), (uint64_t *)v9, (uint64_t)v182);
          }
          else
          {
            sub_22EF3D8AC((uint64_t *)v9, (uint64_t *)(v9 + 152 * ((unint64_t)v187 >> 1)), (uint64_t)v182);
            v12 = 152 * ((unint64_t)v187 >> 1);
            sub_22EF3D8AC((uint64_t *)(v9 + 152), (uint64_t *)(v12 + v9 - 152), v180);
            sub_22EF3D8AC((uint64_t *)(v9 + 304), (uint64_t *)(v9 + 152 + v12), v179);
            sub_22EF3D8AC((uint64_t *)(v12 + v9 - 152), v11, v9 + 152 + v12);
            v13 = *(_QWORD *)v9;
            v14 = *(_QWORD *)(v9 + 8);
            *(_OWORD *)v9 = *(_OWORD *)v11;
            *v11 = v13;
            v11[1] = v14;
            sub_22EF3DDE4(v9 + 16, v9 + 16 + v12);
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_22E3B38EC((_DWORD *)(v9 - 152), (_DWORD *)v9) & 1) == 0)
          {
            v42 = *(_OWORD *)(v9 + 16);
            v203 = *(_OWORD *)v9;
            v43 = *(_QWORD *)(v9 + 32);
            *v7 = v42;
            *((_QWORD *)v7 + 2) = v43;
            *(_QWORD *)(v9 + 24) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            *(_QWORD *)(v9 + 16) = 0;
            v206 = *(_BYTE *)(v9 + 40);
            v44 = *(_OWORD *)(v9 + 48);
            *((_QWORD *)v8 + 2) = *(_QWORD *)(v9 + 64);
            *v8 = v44;
            *(_QWORD *)(v9 + 56) = 0;
            *(_QWORD *)(v9 + 64) = 0;
            *(_QWORD *)(v9 + 48) = 0;
            LOBYTE(v209) = 0;
            v211 = 0;
            if (*(_BYTE *)(v9 + 96))
            {
              v45 = *(_OWORD *)(v9 + 72);
              v210 = *(_QWORD *)(v9 + 88);
              v209 = v45;
              *(_QWORD *)(v9 + 80) = 0;
              *(_QWORD *)(v9 + 88) = 0;
              *(_QWORD *)(v9 + 72) = 0;
              v211 = 1;
            }
            LOBYTE(v212) = 0;
            v214 = 0;
            if (*(_BYTE *)(v9 + 128))
            {
              v46 = *(_OWORD *)(v9 + 104);
              v213 = *(_QWORD *)(v9 + 120);
              v212 = v46;
              *(_QWORD *)(v9 + 112) = 0;
              *(_QWORD *)(v9 + 120) = 0;
              *(_QWORD *)(v9 + 104) = 0;
              v214 = 1;
            }
            v47 = *(_QWORD *)(v9 + 136);
            v216 = *(_DWORD *)(v9 + 144);
            v215 = v47;
            if ((sub_22E3B38EC(&v203, v182) & 1) != 0)
            {
              do
                v9 += 152;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v9) & 1) == 0);
            }
            else
            {
              v48 = (_DWORD *)(v9 + 152);
              do
              {
                v9 = (unint64_t)v48;
                if (v48 >= (_DWORD *)a2)
                  break;
                v49 = sub_22E3B38EC(&v203, v48);
                v48 = (_DWORD *)(v9 + 152);
              }
              while (!v49);
            }
            v50 = (unint64_t)a2;
            if (v9 < (unint64_t)a2)
            {
              v50 = (unint64_t)a2;
              do
                v50 -= 152;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v50) & 1) != 0);
            }
            v51 = v8;
            while (v9 < v50)
            {
              v52 = *(_QWORD *)v9;
              v53 = *(_QWORD *)(v9 + 8);
              *(_OWORD *)v9 = *(_OWORD *)v50;
              *(_QWORD *)v50 = v52;
              *(_QWORD *)(v50 + 8) = v53;
              sub_22EF3DDE4(v9 + 16, v50 + 16);
              do
                v9 += 152;
              while (!sub_22E3B38EC(&v203, (_DWORD *)v9));
              do
                v50 -= 152;
              while ((sub_22E3B38EC(&v203, (_DWORD *)v50) & 1) != 0);
            }
            v54 = (_OWORD *)(v9 - 152);
            if (v9 - 152 != a1)
            {
              v55 = v7;
              v56 = a3;
              v57 = (void **)(a1 + 16);
              *(_OWORD *)a1 = *v54;
              if (*(char *)(a1 + 39) < 0)
                operator delete(*v57);
              v58 = (void **)(a1 + 48);
              v59 = *(_OWORD *)(v9 - 136);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 120);
              *(_OWORD *)v57 = v59;
              *(_BYTE *)(v9 - 113) = 0;
              *(_BYTE *)(v9 - 136) = 0;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(v9 - 112);
              if (*(char *)(a1 + 71) < 0)
                operator delete(*v58);
              v60 = *(_OWORD *)(v9 - 104);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 - 88);
              *(_OWORD *)v58 = v60;
              *(_BYTE *)(v9 - 81) = 0;
              *(_BYTE *)(v9 - 104) = 0;
              sub_22EF2DD4C(a1 + 72, (__int128 *)(v9 - 80));
              sub_22EF2DD4C(a1 + 104, (__int128 *)(v9 - 48));
              v61 = *(_DWORD *)(v9 - 8);
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 16);
              *(_DWORD *)(a1 + 144) = v61;
              a3 = v56;
              v7 = v55;
            }
            *v54 = v203;
            v62 = (void **)(v9 - 136);
            if (*(char *)(v9 - 113) < 0)
              operator delete(*v62);
            v63 = *v7;
            *(_QWORD *)(v9 - 120) = *((_QWORD *)v7 + 2);
            *(_OWORD *)v62 = v63;
            HIBYTE(v205) = 0;
            LOBYTE(v204) = 0;
            *(_BYTE *)(v9 - 112) = v206;
            v64 = (void **)(v9 - 104);
            v8 = v51;
            if (*(char *)(v9 - 81) < 0)
              operator delete(*v64);
            v65 = *v51;
            *(_QWORD *)(v9 - 88) = *((_QWORD *)v51 + 2);
            *(_OWORD *)v64 = v65;
            HIBYTE(v208) = 0;
            LOBYTE(v207) = 0;
            sub_22EF2DD4C(v9 - 80, &v209);
            sub_22EF2DD4C(v9 - 48, &v212);
            v66 = v215;
            *(_DWORD *)(v9 - 8) = v216;
            *(_QWORD *)(v9 - 16) = v66;
            if (v214)
            {
              if (SHIBYTE(v213) < 0)
                operator delete((void *)v212);
              v214 = 0;
            }
            if (v211)
            {
              if (SHIBYTE(v210) < 0)
                operator delete((void *)v209);
              v211 = 0;
            }
            if (SHIBYTE(v208) < 0)
              operator delete((void *)v207);
            if (SHIBYTE(v205) < 0)
              operator delete((void *)v204);
            goto LABEL_56;
          }
          v15 = *(_OWORD *)(v9 + 16);
          v203 = *(_OWORD *)v9;
          v16 = *(_QWORD *)(v9 + 32);
          *v7 = v15;
          *((_QWORD *)v7 + 2) = v16;
          *(_QWORD *)(v9 + 24) = 0;
          *(_QWORD *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          v206 = *(_BYTE *)(v9 + 40);
          v17 = *(_OWORD *)(v9 + 48);
          *((_QWORD *)v8 + 2) = *(_QWORD *)(v9 + 64);
          v18 = v8;
          *v8 = v17;
          *(_QWORD *)(v9 + 56) = 0;
          *(_QWORD *)(v9 + 64) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          LOBYTE(v209) = 0;
          v211 = 0;
          if (*(_BYTE *)(v9 + 96))
          {
            v19 = *(_OWORD *)(v9 + 72);
            v210 = *(_QWORD *)(v9 + 88);
            v209 = v19;
            *(_QWORD *)(v9 + 80) = 0;
            *(_QWORD *)(v9 + 88) = 0;
            *(_QWORD *)(v9 + 72) = 0;
            v211 = 1;
          }
          v20 = v7;
          LOBYTE(v212) = 0;
          v214 = 0;
          if (*(_BYTE *)(v9 + 128))
          {
            v21 = *(_OWORD *)(v9 + 104);
            v213 = *(_QWORD *)(v9 + 120);
            v212 = v21;
            *(_QWORD *)(v9 + 112) = 0;
            *(_QWORD *)(v9 + 120) = 0;
            *(_QWORD *)(v9 + 104) = 0;
            v214 = 1;
          }
          v188 = a3;
          v22 = 0;
          v23 = *(_QWORD *)(v9 + 136);
          v24 = (void **)(v9 + 16);
          v25 = (void **)(v9 + 48);
          v216 = *(_DWORD *)(v9 + 144);
          v215 = v23;
          do
            v22 += 152;
          while ((sub_22E3B38EC((_DWORD *)(v22 + v9), &v203) & 1) != 0);
          v26 = v9 + v22;
          v27 = (_DWORD *)v185;
          if (v22 == 152)
          {
            v27 = (_DWORD *)v185;
            do
            {
              if (v26 >= (unint64_t)v27)
                break;
              v27 -= 38;
            }
            while ((sub_22E3B38EC(v27, &v203) & 1) == 0);
          }
          else
          {
            do
              v27 -= 38;
            while (!sub_22E3B38EC(v27, &v203));
          }
          v9 += v22;
          if (v26 < (unint64_t)v27)
          {
            v28 = v27;
            do
            {
              v29 = *(_QWORD *)v9;
              v30 = *(_QWORD *)(v9 + 8);
              *(_OWORD *)v9 = *(_OWORD *)v28;
              *(_QWORD *)v28 = v29;
              *((_QWORD *)v28 + 1) = v30;
              sub_22EF3DDE4(v9 + 16, (uint64_t)(v28 + 4));
              do
                v9 += 152;
              while ((sub_22E3B38EC((_DWORD *)v9, &v203) & 1) != 0);
              do
                v28 -= 38;
              while (!sub_22E3B38EC(v28, &v203));
            }
            while (v9 < (unint64_t)v28);
          }
          v31 = (_OWORD *)(v9 - 152);
          if (v9 - 152 != a1)
          {
            *(_OWORD *)a1 = *v31;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v24);
            v32 = *(_OWORD *)(v9 - 136);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 120);
            *(_OWORD *)v24 = v32;
            *(_BYTE *)(v9 - 113) = 0;
            *(_BYTE *)(v9 - 136) = 0;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(v9 - 112);
            if (*(char *)(a1 + 71) < 0)
              operator delete(*v25);
            v33 = *(_OWORD *)(v9 - 104);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 - 88);
            *(_OWORD *)v25 = v33;
            *(_BYTE *)(v9 - 81) = 0;
            *(_BYTE *)(v9 - 104) = 0;
            sub_22EF2DD4C(a1 + 72, (__int128 *)(v9 - 80));
            sub_22EF2DD4C(a1 + 104, (__int128 *)(v9 - 48));
            v34 = *(_DWORD *)(v9 - 8);
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 16);
            *(_DWORD *)(a1 + 144) = v34;
          }
          *v31 = v203;
          v35 = (void **)(v9 - 136);
          if (*(char *)(v9 - 113) < 0)
            operator delete(*v35);
          v7 = v20;
          v36 = *v20;
          *(_QWORD *)(v9 - 120) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v35 = v36;
          HIBYTE(v205) = 0;
          LOBYTE(v204) = 0;
          *(_BYTE *)(v9 - 112) = v206;
          v37 = (void **)(v9 - 104);
          a2 = (_OWORD *)v185;
          if (*(char *)(v9 - 81) < 0)
            operator delete(*v37);
          v8 = v18;
          v38 = *v18;
          *(_QWORD *)(v9 - 88) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v37 = v38;
          HIBYTE(v208) = 0;
          LOBYTE(v207) = 0;
          sub_22EF2DD4C(v9 - 80, &v209);
          sub_22EF2DD4C(v9 - 48, &v212);
          v39 = v215;
          *(_DWORD *)(v9 - 8) = v216;
          *(_QWORD *)(v9 - 16) = v39;
          if (v214)
          {
            if (SHIBYTE(v213) < 0)
              operator delete((void *)v212);
            v214 = 0;
          }
          if (v211)
          {
            if (SHIBYTE(v210) < 0)
              operator delete((void *)v209);
            v211 = 0;
          }
          if (SHIBYTE(v208) < 0)
            operator delete((void *)v207);
          if (SHIBYTE(v205) < 0)
            operator delete((void *)v204);
          v40 = v26 >= (unint64_t)v27;
          a3 = v188;
          if (!v40)
            goto LABEL_55;
          v41 = sub_22EF3D9BC(a1, v9 - 152);
          if (!sub_22EF3D9BC(v9, v185))
          {
            if (v41)
              continue;
LABEL_55:
            sub_22EF3BE48(a1, v9 - 152, v188, a4 & 1);
LABEL_56:
            a4 = 0;
            continue;
          }
          a2 = (_OWORD *)(v9 - 152);
          if (v41)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((_OWORD *)v9 != a2)
          {
            v69 = (_DWORD *)(v9 + 152);
            if ((_OWORD *)(v9 + 152) != a2)
            {
              v70 = 0;
              v71 = (_OWORD *)v9;
              do
              {
                v72 = v69;
                if (sub_22E3B38EC(v69, v71))
                {
                  v203 = *v72;
                  v204 = *(_OWORD *)((char *)v71 + 168);
                  v205 = *((_QWORD *)v71 + 23);
                  *((_QWORD *)v71 + 21) = 0;
                  *((_QWORD *)v71 + 22) = 0;
                  *((_QWORD *)v71 + 23) = 0;
                  v206 = *((_BYTE *)v71 + 192);
                  v207 = *(_OWORD *)((char *)v71 + 200);
                  v208 = *((_QWORD *)v71 + 27);
                  *((_QWORD *)v71 + 25) = 0;
                  *((_QWORD *)v71 + 26) = 0;
                  *((_QWORD *)v71 + 27) = 0;
                  LOBYTE(v209) = 0;
                  v211 = 0;
                  if (*((_BYTE *)v71 + 248))
                  {
                    v209 = v71[14];
                    v210 = *((_QWORD *)v71 + 30);
                    *((_QWORD *)v71 + 29) = 0;
                    *((_QWORD *)v71 + 30) = 0;
                    *((_QWORD *)v71 + 28) = 0;
                    v211 = 1;
                  }
                  LOBYTE(v212) = 0;
                  v214 = 0;
                  if (*((_BYTE *)v71 + 280))
                  {
                    v212 = v71[16];
                    v213 = *((_QWORD *)v71 + 34);
                    *((_QWORD *)v71 + 33) = 0;
                    *((_QWORD *)v71 + 34) = 0;
                    *((_QWORD *)v71 + 32) = 0;
                    v214 = 1;
                  }
                  v215 = *((_QWORD *)v71 + 36);
                  v216 = *((_DWORD *)v71 + 74);
                  v73 = v70;
                  while (1)
                  {
                    v74 = a1 + v73;
                    *(_OWORD *)(a1 + v73 + 152) = *(_OWORD *)(a1 + v73);
                    v75 = (void **)(a1 + v73 + 168);
                    if (*(char *)(a1 + v73 + 191) < 0)
                      operator delete(*v75);
                    *(_OWORD *)v75 = *(_OWORD *)(v74 + 16);
                    *(_QWORD *)(a1 + v73 + 184) = *(_QWORD *)(v74 + 32);
                    *(_BYTE *)(v74 + 39) = 0;
                    *(_BYTE *)(v74 + 16) = 0;
                    *(_BYTE *)(v74 + 192) = *(_BYTE *)(v74 + 40);
                    v76 = v74 + 200;
                    if (*(char *)(v74 + 223) < 0)
                      operator delete(*(void **)v76);
                    v77 = a1 + v73;
                    *(_OWORD *)v76 = *(_OWORD *)(a1 + v73 + 48);
                    *(_QWORD *)(v76 + 16) = *(_QWORD *)(a1 + v73 + 64);
                    *(_BYTE *)(v77 + 71) = 0;
                    *(_BYTE *)(v77 + 48) = 0;
                    v78 = (__int128 *)(a1 + v73 + 72);
                    sub_22EF2DD4C(a1 + v73 + 224, v78);
                    v79 = a1 + v73 + 104;
                    sub_22EF2DD4C(v77 + 256, (__int128 *)(v77 + 104));
                    *(_QWORD *)(v77 + 288) = *(_QWORD *)(v77 + 136);
                    *(_DWORD *)(v77 + 296) = *(_DWORD *)(v77 + 144);
                    if (!v73)
                      break;
                    v73 -= 152;
                    if ((sub_22E3B38EC(&v203, (_DWORD *)(v73 + a1)) & 1) == 0)
                    {
                      v80 = a1 + v73 + 152;
                      goto LABEL_124;
                    }
                  }
                  v80 = a1;
LABEL_124:
                  *(_OWORD *)v80 = v203;
                  v81 = (void **)(v77 + 16);
                  if (*(char *)(v80 + 39) < 0)
                    operator delete(*v81);
                  v82 = v77 + 48;
                  v83 = v204;
                  *(_QWORD *)(v77 + 32) = v205;
                  *(_OWORD *)v81 = v83;
                  HIBYTE(v205) = 0;
                  LOBYTE(v204) = 0;
                  *(_BYTE *)(v80 + 40) = v206;
                  if (*(char *)(v80 + 71) < 0)
                    operator delete(*(void **)v82);
                  v84 = v77 + 136;
                  v85 = v207;
                  *(_QWORD *)(v82 + 16) = v208;
                  *(_OWORD *)v82 = v85;
                  HIBYTE(v208) = 0;
                  LOBYTE(v207) = 0;
                  sub_22EF2DD4C((uint64_t)v78, &v209);
                  sub_22EF2DD4C(v79, &v212);
                  v86 = v215;
                  *(_DWORD *)(v84 + 8) = v216;
                  *(_QWORD *)v84 = v86;
                  a2 = (_OWORD *)v185;
                  if (v214)
                  {
                    if (SHIBYTE(v213) < 0)
                      operator delete((void *)v212);
                    v214 = 0;
                  }
                  if (v211)
                  {
                    if (SHIBYTE(v210) < 0)
                      operator delete((void *)v209);
                    v211 = 0;
                  }
                  if (SHIBYTE(v208) < 0)
                    operator delete((void *)v207);
                  if (SHIBYTE(v205) < 0)
                    operator delete((void *)v204);
                }
                v69 = (_DWORD *)v72 + 38;
                v70 += 152;
                v71 = v72;
              }
              while ((_OWORD *)((char *)v72 + 152) != a2);
            }
          }
        }
        else if ((_OWORD *)v9 != a2)
        {
          v162 = (_DWORD *)(v9 + 152);
          if ((_OWORD *)(v9 + 152) != a2)
          {
            v163 = v9 - 152;
            do
            {
              v164 = v162;
              if (sub_22E3B38EC(v162, (_DWORD *)a1))
              {
                v203 = *v164;
                v204 = *(_OWORD *)(a1 + 168);
                v205 = *(_QWORD *)(a1 + 184);
                *(_QWORD *)(a1 + 168) = 0;
                *(_QWORD *)(a1 + 176) = 0;
                *(_QWORD *)(a1 + 184) = 0;
                v206 = *(_BYTE *)(a1 + 192);
                v207 = *(_OWORD *)(a1 + 200);
                v208 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                LOBYTE(v209) = 0;
                v211 = 0;
                if (*(_BYTE *)(a1 + 248))
                {
                  v209 = *(_OWORD *)(a1 + 224);
                  v210 = *(_QWORD *)(a1 + 240);
                  *(_QWORD *)(a1 + 232) = 0;
                  *(_QWORD *)(a1 + 240) = 0;
                  *(_QWORD *)(a1 + 224) = 0;
                  v211 = 1;
                }
                LOBYTE(v212) = 0;
                v214 = 0;
                if (*(_BYTE *)(a1 + 280))
                {
                  v212 = *(_OWORD *)(a1 + 256);
                  v213 = *(_QWORD *)(a1 + 272);
                  *(_QWORD *)(a1 + 264) = 0;
                  *(_QWORD *)(a1 + 272) = 0;
                  *(_QWORD *)(a1 + 256) = 0;
                  v214 = 1;
                }
                v215 = *(_QWORD *)(a1 + 288);
                v216 = *(_DWORD *)(a1 + 296);
                v165 = v163;
                do
                {
                  *(_OWORD *)(v165 + 304) = *(_OWORD *)(v165 + 152);
                  v166 = (void **)(v165 + 320);
                  if (*(char *)(v165 + 343) < 0)
                    operator delete(*v166);
                  *(_OWORD *)v166 = *(_OWORD *)(v165 + 168);
                  *(_QWORD *)(v165 + 336) = *(_QWORD *)(v165 + 184);
                  *(_BYTE *)(v165 + 191) = 0;
                  *(_BYTE *)(v165 + 168) = 0;
                  *(_BYTE *)(v165 + 344) = *(_BYTE *)(v165 + 192);
                  v167 = (void **)(v165 + 352);
                  if (*(char *)(v165 + 375) < 0)
                    operator delete(*v167);
                  *(_OWORD *)v167 = *(_OWORD *)(v165 + 200);
                  *(_QWORD *)(v165 + 368) = *(_QWORD *)(v165 + 216);
                  *(_BYTE *)(v165 + 223) = 0;
                  *(_BYTE *)(v165 + 200) = 0;
                  sub_22EF2DD4C(v165 + 376, (__int128 *)(v165 + 224));
                  sub_22EF2DD4C(v165 + 408, (__int128 *)(v165 + 256));
                  *(_QWORD *)(v165 + 440) = *(_QWORD *)(v165 + 288);
                  *(_DWORD *)(v165 + 448) = *(_DWORD *)(v165 + 296);
                  v168 = sub_22E3B38EC(&v203, (_DWORD *)v165);
                  v165 -= 152;
                }
                while ((v168 & 1) != 0);
                *(_OWORD *)(v165 + 304) = v203;
                v169 = (void **)(v165 + 320);
                if (*(char *)(v165 + 343) < 0)
                  operator delete(*v169);
                v170 = (void **)(v165 + 352);
                v171 = v204;
                *(_QWORD *)(v165 + 336) = v205;
                *(_OWORD *)v169 = v171;
                HIBYTE(v205) = 0;
                LOBYTE(v204) = 0;
                *(_BYTE *)(v165 + 344) = v206;
                if (*(char *)(v165 + 375) < 0)
                  operator delete(*v170);
                v172 = v207;
                *(_QWORD *)(v165 + 368) = v208;
                *(_OWORD *)v170 = v172;
                HIBYTE(v208) = 0;
                LOBYTE(v207) = 0;
                sub_22EF2DD4C(v165 + 376, &v209);
                sub_22EF2DD4C(v165 + 408, &v212);
                v173 = v215;
                *(_DWORD *)(v165 + 448) = v216;
                *(_QWORD *)(v165 + 440) = v173;
                a2 = (_OWORD *)v185;
                if (v214)
                {
                  if (SHIBYTE(v213) < 0)
                    operator delete((void *)v212);
                  v214 = 0;
                }
                if (v211)
                {
                  if (SHIBYTE(v210) < 0)
                    operator delete((void *)v209);
                  v211 = 0;
                }
                if (SHIBYTE(v208) < 0)
                  operator delete((void *)v207);
                if (SHIBYTE(v205) < 0)
                  operator delete((void *)v204);
              }
              v162 = (_DWORD *)v164 + 38;
              v163 += 152;
              a1 = (uint64_t)v164;
            }
            while ((_OWORD *)((char *)v164 + 152) != a2);
          }
        }
        return;
    }
  }
}

void sub_22EF3D7A0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF3E048(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF3DDE4(a4 + 16, a5 + 16);
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF3DDE4(a3 + 16, a4 + 16);
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *a2;
        v15 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF3DDE4((uint64_t)(a2 + 2), a3 + 16);
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *a2 = v16;
          a2[1] = v17;
          sub_22EF3DDE4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
        }
      }
    }
  }
}

void sub_22EF3D8AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = (uint64_t)(a1 + 2);
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = a3 + 16;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v9;
      a2[1] = v10;
      sub_22EF3DDE4(v11, (uint64_t)(a2 + 2));
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *a2;
      v18 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = a3 + 16;
      v11 = (uint64_t)(a2 + 2);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *a2;
    v14 = a2[1];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = (uint64_t)(a2 + 2);
    sub_22EF3DDE4((uint64_t)(a2 + 2), a3 + 16);
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v15;
      a2[1] = v16;
      v11 = (uint64_t)(a1 + 2);
LABEL_9:
      sub_22EF3DDE4(v11, v12);
    }
  }
}

BOOL sub_22EF3D9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 __p;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;

  v2 = a2;
  v4 = 1;
  switch(0x86BCA1AF286BCA1BLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = (_OWORD *)(a2 - 152);
      if (sub_22E3B38EC((_DWORD *)(a2 - 152), (_DWORD *)a1))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v5;
        *(_QWORD *)(v2 - 152) = v6;
        *(_QWORD *)(v2 - 144) = v7;
        sub_22EF3DDE4(a1 + 16, v2 - 136);
      }
      return 1;
    case 3uLL:
      sub_22EF3D8AC((uint64_t *)a1, (uint64_t *)(a1 + 152), a2 - 152);
      return v4;
    case 4uLL:
      sub_22EF3E048((uint64_t *)a1, (uint64_t *)(a1 + 152), a1 + 304, a2 - 152);
      return v4;
    case 5uLL:
      sub_22EF3D7A0((uint64_t *)a1, (uint64_t *)(a1 + 152), a1 + 304, a1 + 456, a2 - 152);
      return v4;
    default:
      v8 = (_DWORD *)(a1 + 304);
      sub_22EF3D8AC((uint64_t *)a1, (uint64_t *)(a1 + 152), a1 + 304);
      v9 = a1 + 456;
      v4 = 1;
      if (a1 + 456 == v2)
        return v4;
      v10 = 0;
      v11 = 0;
      v24 = v2;
      break;
  }
  while (1)
  {
    if (sub_22E3B38EC((_DWORD *)v9, v8))
    {
      v12 = *(_OWORD *)(v9 + 16);
      v25 = *(_OWORD *)v9;
      v26 = v12;
      v27 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v28 = *(_BYTE *)(v9 + 40);
      v29 = *(_OWORD *)(v9 + 48);
      v30 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      LOBYTE(v31) = 0;
      v33 = 0;
      if (*(_BYTE *)(v9 + 96))
      {
        v31 = *(_OWORD *)(v9 + 72);
        v32 = *(_QWORD *)(v9 + 88);
        *(_QWORD *)(v9 + 80) = 0;
        *(_QWORD *)(v9 + 88) = 0;
        *(_QWORD *)(v9 + 72) = 0;
        v33 = 1;
      }
      LOBYTE(__p) = 0;
      v36 = 0;
      if (*(_BYTE *)(v9 + 128))
      {
        __p = *(_OWORD *)(v9 + 104);
        v35 = *(_QWORD *)(v9 + 120);
        *(_QWORD *)(v9 + 112) = 0;
        *(_QWORD *)(v9 + 120) = 0;
        *(_QWORD *)(v9 + 104) = 0;
        v36 = 1;
      }
      v37 = *(_QWORD *)(v9 + 136);
      v38 = *(_DWORD *)(v9 + 144);
      v13 = v10;
      while (1)
      {
        v14 = a1 + v13;
        *(_OWORD *)(a1 + v13 + 456) = *(_OWORD *)(a1 + v13 + 304);
        v15 = (void **)(a1 + v13 + 472);
        if (*(char *)(a1 + v13 + 495) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = *(_OWORD *)(v14 + 320);
        *(_QWORD *)(a1 + v13 + 488) = *(_QWORD *)(v14 + 336);
        *(_BYTE *)(v14 + 343) = 0;
        *(_BYTE *)(v14 + 320) = 0;
        *(_BYTE *)(v14 + 496) = *(_BYTE *)(v14 + 344);
        v16 = v14 + 504;
        if (*(char *)(v14 + 527) < 0)
          operator delete(*(void **)v16);
        v17 = a1 + v13;
        *(_OWORD *)v16 = *(_OWORD *)(a1 + v13 + 352);
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + v13 + 368);
        *(_BYTE *)(v17 + 375) = 0;
        *(_BYTE *)(v17 + 352) = 0;
        v18 = (__int128 *)(a1 + v13 + 376);
        sub_22EF2DD4C(a1 + v13 + 528, v18);
        v19 = a1 + v13 + 408;
        sub_22EF2DD4C(v17 + 560, (__int128 *)(v17 + 408));
        *(_QWORD *)(v17 + 592) = *(_QWORD *)(v17 + 440);
        *(_DWORD *)(v17 + 600) = *(_DWORD *)(v17 + 448);
        if (v13 == -304)
          break;
        v13 -= 152;
        if ((sub_22E3B38EC(&v25, (_DWORD *)(v17 + 152)) & 1) == 0)
        {
          v20 = a1 + v13 + 456;
          goto LABEL_20;
        }
      }
      v20 = a1;
LABEL_20:
      *(_OWORD *)v20 = v25;
      v21 = (void **)(v17 + 320);
      if (*(char *)(v20 + 39) < 0)
        operator delete(*v21);
      v22 = (void **)(v17 + 352);
      *(_OWORD *)v21 = v26;
      *(_QWORD *)(v17 + 336) = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
      *(_BYTE *)(v20 + 40) = v28;
      if (*(char *)(v20 + 71) < 0)
        operator delete(*v22);
      *(_OWORD *)v22 = v29;
      *(_QWORD *)(v17 + 368) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      sub_22EF2DD4C((uint64_t)v18, &v31);
      sub_22EF2DD4C(v19, &__p);
      *(_QWORD *)(v17 + 440) = v37;
      *(_DWORD *)(v17 + 448) = v38;
      v2 = v24;
      if (v36)
      {
        if (SHIBYTE(v35) < 0)
          operator delete((void *)__p);
        v36 = 0;
      }
      if (v33)
      {
        if (SHIBYTE(v32) < 0)
          operator delete((void *)v31);
        v33 = 0;
      }
      if (SHIBYTE(v30) < 0)
        operator delete((void *)v29);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
      if (++v11 == 8)
        return v9 + 152 == v24;
    }
    v8 = (_DWORD *)v9;
    v10 += 152;
    v9 += 152;
    if (v9 == v2)
      return 1;
  }
}

void sub_22EF3DDE4(uint64_t a1, uint64_t a2)
{
  char v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void **v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 __p;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;

  *(_OWORD *)v10 = *(_OWORD *)a1;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v14 = *(_OWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v16 = 1;
  }
  LOBYTE(__p) = 0;
  v19 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    __p = *(_OWORD *)(a1 + 88);
    v18 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v19 = 1;
  }
  v5 = (void **)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(_DWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v7;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  sub_22EF2DD4C(a1 + 56, (__int128 *)(a2 + 56));
  sub_22EF2DD4C(a1 + 88, (__int128 *)(a2 + 88));
  v8 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v8;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v9 = (void **)(a2 + 32);
  *(_OWORD *)a2 = *(_OWORD *)v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v4;
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)v12;
  *(_QWORD *)(a2 + 48) = v13;
  sub_22EF2DD4C(a2 + 56, &v14);
  sub_22EF2DD4C(a2 + 88, &__p);
  *(_QWORD *)(a2 + 120) = v20;
  *(_DWORD *)(a2 + 128) = v21;
  if (v19)
  {
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
    v19 = 0;
  }
  if (v16)
  {
    if (SHIBYTE(v15) < 0)
      operator delete((void *)v14);
  }
}

void sub_22EF3E048(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF3D8AC(a1, a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF3DDE4(a3 + 16, a4 + 16);
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF3DDE4((uint64_t)(a2 + 2), a3 + 16);
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v12;
        a2[1] = v13;
        sub_22EF3DDE4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
      }
    }
  }
}

void sub_22EF3E120(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  void **v46;
  void **v47;
  __int128 v48;
  __int128 v49;
  void **v50;
  __int128 v51;
  void **v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  void **v85;
  void **v86;
  __int128 v87;
  void **v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  __int128 v104;
  void **v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  _OWORD *v110;
  void **v111;
  __int128 v112;
  __int128 v113;
  void **v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  void **v122;
  void **v123;
  __int128 v124;
  void **v125;
  __int128 v126;
  void **v127;
  __int128 v128;
  __int128 v129;
  _DWORD *v131;
  unint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  unint64_t v135;
  void **v136;
  void **v137;
  char v138;
  void **v139;
  void **v140;
  __int128 v141;
  __int128 v142;
  __int128 *v143;
  __int128 *v144;
  __int128 *v145;
  __int128 *v146;
  _DWORD *v148;
  __int128 *v149;
  int64_t v150;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  __int128 __p;
  uint64_t v162;
  char v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  char v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  uint64_t v177;

void sub_22EF3F8E4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_22EF4012C(a1, a2, a3, a4);
  if (sub_22E3B38EC((_DWORD *)a5, (_DWORD *)a4))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v11;
    sub_22EF3FEF8(a4 + 16, a5 + 16);
    if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
    {
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v13;
      sub_22EF3FEF8(a3 + 16, a4 + 16);
      if (sub_22E3B38EC((_DWORD *)a3, a2))
      {
        v14 = *a2;
        v15 = a2[1];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
        sub_22EF3FEF8((uint64_t)(a2 + 2), a3 + 16);
        if (sub_22E3B38EC(a2, a1))
        {
          v16 = *a1;
          v17 = a1[1];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *a2 = v16;
          a2[1] = v17;
          sub_22EF3FEF8((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
        }
      }
    }
  }
}

void sub_22EF3F9F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E3B38EC(a2, a1);
  v7 = sub_22E3B38EC((_DWORD *)a3, a2);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = *a1;
    v10 = a1[1];
    v11 = (uint64_t)(a1 + 2);
    if (v8)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      v12 = a3 + 16;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v9;
      a2[1] = v10;
      sub_22EF3FEF8(v11, (uint64_t)(a2 + 2));
      if (!sub_22E3B38EC((_DWORD *)a3, a2))
        return;
      v17 = *a2;
      v18 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      v12 = a3 + 16;
      v11 = (uint64_t)(a2 + 2);
    }
    goto LABEL_9;
  }
  if (v7)
  {
    v13 = *a2;
    v14 = a2[1];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    v12 = (uint64_t)(a2 + 2);
    sub_22EF3FEF8((uint64_t)(a2 + 2), a3 + 16);
    if (sub_22E3B38EC(a2, a1))
    {
      v15 = *a1;
      v16 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *a2 = v15;
      a2[1] = v16;
      v11 = (uint64_t)(a1 + 2);
LABEL_9:
      sub_22EF3FEF8(v11, v12);
    }
  }
}

uint64_t sub_22EF3FB00(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v4 = 1;
  switch(0x8E38E38E38E38E39 * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = (_OWORD *)(a2 - 144);
      if (sub_22E3B38EC((_DWORD *)(a2 - 144), (_DWORD *)a1))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *v5;
        *(_QWORD *)(a2 - 144) = v6;
        *(_QWORD *)(a2 - 136) = v7;
        sub_22EF3FEF8(a1 + 16, a2 - 128);
      }
      break;
    case 3uLL:
      sub_22EF3F9F0((uint64_t *)a1, (uint64_t *)(a1 + 144), a2 - 144);
      break;
    case 4uLL:
      sub_22EF4012C((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288, a2 - 144);
      break;
    case 5uLL:
      sub_22EF3F8E4((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288, a1 + 432, a2 - 144);
      break;
    default:
      v8 = (_DWORD *)(a1 + 288);
      sub_22EF3F9F0((uint64_t *)a1, (uint64_t *)(a1 + 144), a1 + 288);
      v9 = a1 + 432;
      v4 = 1;
      if (a1 + 432 != a2)
      {
        v10 = 0;
        v11 = 0;
        while (1)
        {
          if (sub_22E3B38EC((_DWORD *)v9, v8))
          {
            v12 = *(_OWORD *)(v9 + 16);
            v24 = *(_OWORD *)v9;
            v25 = v12;
            v26 = *(_QWORD *)(v9 + 32);
            *(_QWORD *)(v9 + 16) = 0;
            *(_QWORD *)(v9 + 24) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            v27 = *(_BYTE *)(v9 + 40);
            v28 = *(_OWORD *)(v9 + 48);
            v29 = *(_QWORD *)(v9 + 64);
            *(_QWORD *)(v9 + 56) = 0;
            *(_QWORD *)(v9 + 64) = 0;
            *(_QWORD *)(v9 + 48) = 0;
            LOBYTE(v30) = 0;
            v32 = 0;
            if (*(_BYTE *)(v9 + 96))
            {
              v30 = *(_OWORD *)(v9 + 72);
              v31 = *(_QWORD *)(v9 + 88);
              *(_QWORD *)(v9 + 80) = 0;
              *(_QWORD *)(v9 + 88) = 0;
              *(_QWORD *)(v9 + 72) = 0;
              v32 = 1;
            }
            LOBYTE(__p) = 0;
            v35 = 0;
            if (*(_BYTE *)(v9 + 128))
            {
              __p = *(_OWORD *)(v9 + 104);
              v34 = *(_QWORD *)(v9 + 120);
              *(_QWORD *)(v9 + 112) = 0;
              *(_QWORD *)(v9 + 120) = 0;
              *(_QWORD *)(v9 + 104) = 0;
              v35 = 1;
            }
            v36 = *(_QWORD *)(v9 + 136);
            v13 = v10;
            while (1)
            {
              v14 = a1 + v13;
              *(_OWORD *)(a1 + v13 + 432) = *(_OWORD *)(a1 + v13 + 288);
              v15 = (void **)(a1 + v13 + 448);
              if (*(char *)(a1 + v13 + 471) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)(v14 + 304);
              *(_QWORD *)(a1 + v13 + 464) = *(_QWORD *)(v14 + 320);
              *(_BYTE *)(v14 + 327) = 0;
              *(_BYTE *)(v14 + 304) = 0;
              *(_BYTE *)(v14 + 472) = *(_BYTE *)(v14 + 328);
              v16 = v14 + 480;
              if (*(char *)(v14 + 503) < 0)
                operator delete(*(void **)v16);
              v17 = a1 + v13;
              *(_OWORD *)v16 = *(_OWORD *)(a1 + v13 + 336);
              *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + v13 + 352);
              *(_BYTE *)(v17 + 359) = 0;
              *(_BYTE *)(v17 + 336) = 0;
              v18 = (__int128 *)(a1 + v13 + 360);
              sub_22EF2DD4C(a1 + v13 + 504, v18);
              v19 = a1 + v13 + 392;
              sub_22EF2DD4C(v17 + 536, (__int128 *)(v17 + 392));
              *(_QWORD *)(v17 + 568) = *(_QWORD *)(v17 + 424);
              if (v13 == -288)
                break;
              v13 -= 144;
              if ((sub_22E3B38EC(&v24, (_DWORD *)(v17 + 144)) & 1) == 0)
              {
                v20 = a1 + v13 + 432;
                goto LABEL_20;
              }
            }
            v20 = a1;
LABEL_20:
            *(_OWORD *)v20 = v24;
            v21 = v17 + 304;
            if (*(char *)(v20 + 39) < 0)
              operator delete(*(void **)v21);
            v22 = v17 + 336;
            *(_OWORD *)v21 = v25;
            *(_QWORD *)(v21 + 16) = v26;
            HIBYTE(v26) = 0;
            LOBYTE(v25) = 0;
            *(_BYTE *)(v20 + 40) = v27;
            if (*(char *)(v20 + 71) < 0)
              operator delete(*(void **)v22);
            *(_OWORD *)v22 = v28;
            *(_QWORD *)(v22 + 16) = v29;
            HIBYTE(v29) = 0;
            LOBYTE(v28) = 0;
            sub_22EF2DD4C((uint64_t)v18, &v30);
            sub_22EF2DD4C(v19, &__p);
            *(_QWORD *)(v20 + 136) = v36;
            if (v35)
            {
              if (SHIBYTE(v34) < 0)
                operator delete((void *)__p);
              v35 = 0;
            }
            if (v32)
            {
              if (SHIBYTE(v31) < 0)
                operator delete((void *)v30);
              v32 = 0;
            }
            if (SHIBYTE(v29) < 0)
              operator delete((void *)v28);
            if (SHIBYTE(v26) < 0)
              operator delete((void *)v25);
            if (++v11 == 8)
              break;
          }
          v8 = (_DWORD *)v9;
          v10 += 144;
          v9 += 144;
          if (v9 == a2)
            return 1;
        }
        v4 = v9 + 144 == a2;
      }
      break;
  }
  return v4;
}

void sub_22EF3FEF8(uint64_t a1, uint64_t a2)
{
  char v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 __p;
  uint64_t v17;
  char v18;
  uint64_t v19;

  *(_OWORD *)v9 = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  LOBYTE(v13) = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v13 = *(_OWORD *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v15 = 1;
  }
  LOBYTE(__p) = 0;
  v18 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    __p = *(_OWORD *)(a1 + 88);
    v17 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v18 = 1;
  }
  v5 = (void **)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v7;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  sub_22EF2DD4C(a1 + 56, (__int128 *)(a2 + 56));
  sub_22EF2DD4C(a1 + 88, (__int128 *)(a2 + 88));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v8 = (void **)(a2 + 32);
  *(_OWORD *)a2 = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v4;
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)v11;
  *(_QWORD *)(a2 + 48) = v12;
  sub_22EF2DD4C(a2 + 56, &v13);
  sub_22EF2DD4C(a2 + 88, &__p);
  *(_QWORD *)(a2 + 120) = v19;
  if (v18)
  {
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  if (v15)
  {
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
}

void sub_22EF4012C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22EF3F9F0(a1, a2, a3);
  if (sub_22E3B38EC((_DWORD *)a4, (_DWORD *)a3))
  {
    v8 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v9;
    sub_22EF3FEF8(a3 + 16, a4 + 16);
    if (sub_22E3B38EC((_DWORD *)a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      sub_22EF3FEF8((uint64_t)(a2 + 2), a3 + 16);
      if (sub_22E3B38EC(a2, a1))
      {
        v12 = *a1;
        v13 = a1[1];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *a2 = v12;
        a2[1] = v13;
        sub_22EF3FEF8((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
      }
    }
  }
}

_QWORD *sub_22EF40204(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 176 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F35E5C0((char **)a1, (uint64_t)v4, (uint64_t)&v4[176 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(176 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 176 * v10;
      do
      {
        *result = 0xFFFFFFFFFFLL;
        result += 22;
        v11 -= 176;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22EF402D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 144 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30BCBC(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30BCBC(a1);
    }
  }
  return v3;
}

uint64_t sub_22EF40338(uint64_t *a1, int *a2, int **a3)
{
  int v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  int v18;
  BOOL v20;
  unsigned int v22;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v7 = *a1;
  v9 = *a2;
  v8 = a2[1];
  v10 = *((unsigned __int8 *)a2 + 8);
  v11 = sub_22F35E754(v8, *((_BYTE *)a2 + 8));
  v12 = 0;
  v13 = (v11 | ((unint64_t)(37 * v9) << 32)) + ~((unint64_t)v11 << 32);
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = (v4 - 1) & (((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27)));
  for (i = 1; ; ++i)
  {
    v5 = (int *)(v7 + 144 * v16);
    v18 = *v5;
    if (v9 == *v5 && v8 == v5[1] && v10 == *((unsigned __int8 *)v5 + 8))
    {
      result = 1;
      goto LABEL_3;
    }
    if (v18 == -2)
    {
      v20 = v5[1] == -2 && *((unsigned __int8 *)v5 + 8) == 254;
      goto LABEL_22;
    }
    if (v18 != -1)
    {
      v20 = 0;
      goto LABEL_22;
    }
    v20 = 0;
    if (v5[1] == -1 && *((unsigned __int8 *)v5 + 8) == 255)
      break;
LABEL_22:
    if (v20 && v12 == 0)
      v12 = (int *)(v7 + 144 * v16);
    v22 = v16 + i;
    v16 = v22 & (v4 - 1);
  }
  result = 0;
  if (v12)
    v5 = v12;
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_22EF4049C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  llvm *v13;
  int *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  int *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 144 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[18 * v10];
      do
      {
        *result = -1;
        *((_DWORD *)result + 2) = 255;
        result += 18;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 144 * v3;
      v13 = v4;
      do
      {
        if (*(_DWORD *)v13 == -2)
        {
          if (*((_DWORD *)v13 + 1) != -2 || *((unsigned __int8 *)v13 + 8) != 254)
          {
LABEL_17:
            v19 = 0;
            sub_22EF40338((uint64_t *)a1, (int *)v13, &v19);
            v14 = v19;
            *v19 = *(_DWORD *)v13;
            v14[1] = *((_DWORD *)v13 + 1);
            v15 = *((_BYTE *)v13 + 8);
            *((_QWORD *)v14 + 2) = v14 + 8;
            v16 = (uint64_t)(v14 + 4);
            *(_BYTE *)(v16 - 8) = v15;
            *(_QWORD *)(v16 + 8) = 0x100000000;
            if (*((_DWORD *)v13 + 6))
              sub_22EF40684(v16, (uint64_t)v13 + 16);
            ++*(_DWORD *)(a1 + 8);
            sub_22E918278((char **)v13 + 2);
          }
        }
        else if (*(_DWORD *)v13 != -1 || *((_DWORD *)v13 + 1) != -1 || *((unsigned __int8 *)v13 + 8) != 255)
        {
          goto LABEL_17;
        }
        v13 = (llvm *)((char *)v13 + 144);
        v12 -= 144;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(144 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = &result[18 * v17];
      do
      {
        *result = -1;
        *((_DWORD *)result + 2) = 255;
        result += 18;
      }
      while (result != v18);
    }
  }
  return result;
}

uint64_t sub_22EF40684(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  char *v23;
  char *i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_22EF409B4((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v15 = *(char **)a1;
      if (v5)
      {
        v16 = &v4[112 * v5];
        do
        {
          *(_OWORD *)v15 = *(_OWORD *)v4;
          v17 = (void **)(v15 + 16);
          if (v15[39] < 0)
            operator delete(*v17);
          v18 = *((_OWORD *)v4 + 1);
          *((_QWORD *)v15 + 4) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v17 = v18;
          v4[39] = 0;
          v4[16] = 0;
          v15[40] = v4[40];
          v19 = (void **)(v15 + 48);
          if (v15[71] < 0)
            operator delete(*v19);
          v20 = *((_OWORD *)v4 + 3);
          *((_QWORD *)v15 + 8) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v19 = v20;
          v4[71] = 0;
          v4[48] = 0;
          v15[72] = v4[72];
          v21 = (void **)(v15 + 80);
          if (v15[103] < 0)
            operator delete(*v21);
          v22 = *((_OWORD *)v4 + 5);
          *((_QWORD *)v15 + 12) = *((_QWORD *)v4 + 12);
          *(_OWORD *)v21 = v22;
          v4[103] = 0;
          v4[80] = 0;
          v15[104] = v4[104];
          v15 += 112;
          v4 += 112;
        }
        while (v4 != v16);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v23 = *(char **)a1;
      }
      else
      {
        v23 = *(char **)a1;
      }
      for (i = &v23[112 * v6]; i != v15; i -= 112)
      {
        if (*(i - 9) < 0)
          operator delete(*((void **)i - 4));
        if (*(i - 41) < 0)
          operator delete(*((void **)i - 8));
        if (*(i - 73) < 0)
          operator delete(*((void **)i - 12));
      }
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      sub_22E918094((uint64_t *)a1);
      sub_22F30C14C(a1);
    }
    else if ((_DWORD)v6)
    {
      v7 = &v4[112 * v6];
      v8 = (char *)(*(_QWORD *)a1 + 71);
      do
      {
        *(_OWORD *)(v8 - 71) = *(_OWORD *)v4;
        v9 = (void **)(v8 - 55);
        if (*(v8 - 32) < 0)
          operator delete(*v9);
        v10 = *((_OWORD *)v4 + 1);
        *(_QWORD *)(v8 - 39) = *((_QWORD *)v4 + 4);
        *(_OWORD *)v9 = v10;
        v4[39] = 0;
        v4[16] = 0;
        *(v8 - 31) = v4[40];
        v11 = (void **)(v8 - 23);
        if (*v8 < 0)
          operator delete(*v11);
        v12 = *((_OWORD *)v4 + 3);
        *(_QWORD *)(v8 - 7) = *((_QWORD *)v4 + 8);
        *(_OWORD *)v11 = v12;
        v4[71] = 0;
        v4[48] = 0;
        v8[1] = v4[72];
        v13 = (void **)(v8 + 9);
        if (v8[32] < 0)
          operator delete(*v13);
        v14 = *((_OWORD *)v4 + 5);
        *(_QWORD *)(v8 + 25) = *((_QWORD *)v4 + 12);
        *(_OWORD *)v13 = v14;
        v4[103] = 0;
        v4[80] = 0;
        v8[33] = v4[104];
        v8 += 112;
        v4 += 112;
      }
      while (v4 != v7);
      goto LABEL_38;
    }
    v6 = 0;
LABEL_38:
    v25 = *(unsigned int *)(a2 + 8);
    if (v6 != v25)
    {
      v26 = *(_QWORD *)a2 + 112 * v25;
      v27 = *(_QWORD *)a1 + 112 * v6;
      v28 = *(_QWORD *)a2 + 112 * v6;
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v28;
        v29 = *(_OWORD *)(v28 + 16);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
        *(_OWORD *)(v27 + 16) = v29;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        *(_BYTE *)(v27 + 40) = *(_BYTE *)(v28 + 40);
        v30 = *(_OWORD *)(v28 + 48);
        *(_QWORD *)(v27 + 64) = *(_QWORD *)(v28 + 64);
        *(_OWORD *)(v27 + 48) = v30;
        *(_QWORD *)(v28 + 56) = 0;
        *(_QWORD *)(v28 + 64) = 0;
        *(_QWORD *)(v28 + 48) = 0;
        *(_BYTE *)(v27 + 72) = *(_BYTE *)(v28 + 72);
        v31 = *(_OWORD *)(v28 + 80);
        *(_QWORD *)(v27 + 96) = *(_QWORD *)(v28 + 96);
        *(_OWORD *)(v27 + 80) = v31;
        *(_QWORD *)(v28 + 88) = 0;
        *(_QWORD *)(v28 + 96) = 0;
        *(_QWORD *)(v28 + 80) = 0;
        *(_BYTE *)(v27 + 104) = *(_BYTE *)(v28 + 104);
        v28 += 112;
        v27 += 112;
      }
      while (v28 != v26);
    }
LABEL_41:
    *(_DWORD *)(a1 + 8) = v5;
    sub_22E918094((uint64_t *)a2);
  }
  return a1;
}

double sub_22EF409B4(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 112 * v5;
    do
    {
      v7 = (void **)&v4[v6];
      if (v4[v6 - 9] < 0)
        operator delete(*(v7 - 4));
      if (*((char *)v7 - 41) < 0)
        operator delete(*(void **)&v4[v6 - 64]);
      if (v4[v6 - 73] < 0)
        operator delete(*(v7 - 12));
      v6 -= 112;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

unint64_t sub_22EF40A6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 112 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30C14C(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30C14C(a1);
    }
  }
  return v3;
}

uint64_t sub_22EF40AD4(uint64_t a1, int a2, int *a3, int **a4)
{
  int *v5;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  int v19;
  BOOL v21;
  unsigned int v23;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = *((unsigned __int8 *)a3 + 8);
  v12 = sub_22F35E754(v9, *((_BYTE *)a3 + 8));
  v13 = 0;
  v14 = (v12 | ((unint64_t)(37 * v10) << 32)) + ~((unint64_t)v12 << 32);
  v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
  v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
  v17 = (a2 - 1) & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
  for (i = 1; ; ++i)
  {
    v5 = (int *)(a1 + 176 * v17);
    v19 = *v5;
    if (v10 == *v5 && v9 == v5[1] && v11 == *((unsigned __int8 *)v5 + 8))
    {
      result = 1;
      goto LABEL_3;
    }
    if (v19 == -2)
    {
      v21 = v5[1] == -2 && *((unsigned __int8 *)v5 + 8) == 254;
      goto LABEL_22;
    }
    if (v19 != -1)
    {
      v21 = 0;
      goto LABEL_22;
    }
    v21 = 0;
    if (v5[1] == -1 && *((unsigned __int8 *)v5 + 8) == 255)
      break;
LABEL_22:
    if (v21 && v13 == 0)
      v13 = (int *)(a1 + 176 * v17);
    v23 = v17 + i;
    v17 = v23 & (a2 - 1);
  }
  result = 0;
  if (v13)
    v5 = v13;
LABEL_3:
  *a4 = v5;
  return result;
}

_QWORD *sub_22EF40C38(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  llvm *v13;
  int *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  int *v19;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 176 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[22 * v10];
      do
      {
        *result = -1;
        *((_DWORD *)result + 2) = 255;
        result += 22;
      }
      while (result != v11);
    }
    if (v3)
    {
      v12 = 176 * v3;
      v13 = v4;
      do
      {
        if (*(_DWORD *)v13 == -2)
        {
          if (*((_DWORD *)v13 + 1) != -2 || *((unsigned __int8 *)v13 + 8) != 254)
          {
LABEL_19:
            v19 = 0;
            sub_22EF40AD4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (int *)v13, &v19);
            v14 = v19;
            *v19 = *(_DWORD *)v13;
            v14[1] = *((_DWORD *)v13 + 1);
            v15 = *((_BYTE *)v13 + 8);
            *((_QWORD *)v14 + 2) = v14 + 8;
            v16 = (uint64_t)(v14 + 4);
            *(_BYTE *)(v16 - 8) = v15;
            *(_QWORD *)(v16 + 8) = 0x100000000;
            if (*((_DWORD *)v13 + 6))
              sub_22EF40E2C(v16, (uint64_t)v13 + 16);
            ++*(_DWORD *)(a1 + 8);
            sub_22F35C744((char **)v13 + 2);
          }
        }
        else if (*(_DWORD *)v13 != -1 || *((_DWORD *)v13 + 1) != -1 || *((unsigned __int8 *)v13 + 8) != 255)
        {
          goto LABEL_19;
        }
        v13 = (llvm *)((char *)v13 + 176);
        v12 -= 176;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(176 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = &result[22 * v17];
      do
      {
        *result = -1;
        *((_DWORD *)result + 2) = 255;
        result += 22;
      }
      while (result != v18);
    }
  }
  return result;
}

uint64_t sub_22EF40E2C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v15 = *(char **)a1;
        if (v5)
        {
          v16 = &v4[144 * v5];
          do
          {
            *(_OWORD *)v15 = *(_OWORD *)v4;
            v17 = (void **)(v15 + 16);
            if (v15[39] < 0)
              operator delete(*v17);
            v18 = *((_OWORD *)v4 + 1);
            *((_QWORD *)v15 + 4) = *((_QWORD *)v4 + 4);
            *(_OWORD *)v17 = v18;
            v4[39] = 0;
            v4[16] = 0;
            v15[40] = v4[40];
            v19 = (void **)(v15 + 48);
            if (v15[71] < 0)
              operator delete(*v19);
            v20 = *((_OWORD *)v4 + 3);
            *((_QWORD *)v15 + 8) = *((_QWORD *)v4 + 8);
            *(_OWORD *)v19 = v20;
            v4[71] = 0;
            v4[48] = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(v4 + 72);
            v21 = (void **)(v15 + 88);
            if (v15[111] < 0)
              operator delete(*v21);
            v22 = *(_OWORD *)(v4 + 88);
            *((_QWORD *)v15 + 13) = *((_QWORD *)v4 + 13);
            *(_OWORD *)v21 = v22;
            v4[111] = 0;
            v4[88] = 0;
            sub_22EF351A4((uint64_t *)v15 + 14, (__n128 *)v4 + 7);
            v15[136] = v4[136];
            v15 += 144;
            v4 += 144;
          }
          while (v4 != v16);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v23 = *(char **)a1;
        }
        else
        {
          v23 = *(char **)a1;
        }
        if (&v23[144 * v6] != v15)
        {
          v24 = (uint64_t)&v23[144 * v6 - 56];
          do
          {
            if (*(_QWORD *)(v24 + 24))
            {
              sub_22E916AE0((uint64_t *)(v24 + 24));
              operator delete(*(void **)(v24 + 24));
            }
            if (*(char *)(v24 + 23) < 0)
              operator delete(*(void **)v24);
            if (*(char *)(v24 - 17) < 0)
              operator delete(*(void **)(v24 - 40));
            if (*(char *)(v24 - 49) < 0)
              operator delete(*(void **)(v24 - 72));
            v25 = (char *)(v24 - 88);
            v24 -= 144;
          }
          while (v25 != v15);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v26 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = *(char **)a2;
          v29 = 144 * v26;
          do
          {
            v30 = &v28[v29];
            if (*(_QWORD *)&v28[v29 - 32])
            {
              sub_22E916AE0((uint64_t *)&v28[v29 - 32]);
              operator delete(*(void **)&v28[v29 - 32]);
            }
            if (*(v30 - 33) < 0)
              operator delete(*(void **)&v28[v29 - 56]);
            v31 = &v28[v29];
            if (v28[v29 - 73] < 0)
              operator delete(*((void **)v31 - 12));
            if (*(v31 - 105) < 0)
              operator delete(*((void **)v30 - 16));
            v28 -= 144;
            v27 += 144;
          }
          while (v29 != v27);
        }
        goto LABEL_78;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v32 = 0;
          v33 = *(char **)a1;
          v34 = 144 * v6;
          do
          {
            v35 = &v33[v34];
            if (*(_QWORD *)&v33[v34 - 32])
            {
              sub_22E916AE0((uint64_t *)&v33[v34 - 32]);
              operator delete(*(void **)&v33[v34 - 32]);
            }
            if (*(v35 - 33) < 0)
              operator delete(*(void **)&v33[v34 - 56]);
            v36 = &v33[v34];
            if (v33[v34 - 73] < 0)
              operator delete(*((void **)v36 - 12));
            if (*(v36 - 105) < 0)
              operator delete(*((void **)v35 - 16));
            v33 -= 144;
            v32 += 144;
          }
          while (v34 != v32);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F30C0E0(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[144 * v6];
        v8 = (char *)(*(_QWORD *)a1 + 71);
        do
        {
          *(_OWORD *)(v8 - 71) = *(_OWORD *)v4;
          v9 = (void **)(v8 - 55);
          if (*(v8 - 32) < 0)
            operator delete(*v9);
          v10 = *((_OWORD *)v4 + 1);
          *(_QWORD *)(v8 - 39) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v9 = v10;
          v4[39] = 0;
          v4[16] = 0;
          *(v8 - 31) = v4[40];
          v11 = (void **)(v8 - 23);
          if (*v8 < 0)
            operator delete(*v11);
          v12 = *((_OWORD *)v4 + 3);
          *(_QWORD *)(v8 - 7) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v11 = v12;
          v4[71] = 0;
          v4[48] = 0;
          *(_OWORD *)(v8 + 1) = *(_OWORD *)(v4 + 72);
          v13 = (void **)(v8 + 17);
          if (v8[40] < 0)
            operator delete(*v13);
          v14 = *(_OWORD *)(v4 + 88);
          *(_QWORD *)(v8 + 33) = *((_QWORD *)v4 + 13);
          *(_OWORD *)v13 = v14;
          v4[111] = 0;
          v4[88] = 0;
          sub_22EF351A4((uint64_t *)(v8 + 41), (__n128 *)v4 + 7);
          v8[65] = v4[136];
          v8 += 144;
          v4 += 144;
        }
        while (v4 != v7);
        goto LABEL_63;
      }
      v6 = 0;
LABEL_63:
      v37 = *(char **)a2;
      v38 = *(unsigned int *)(a2 + 8);
      if (v6 != v38)
      {
        v39 = &v37[144 * v38];
        v40 = *(_QWORD *)a1 + 144 * v6;
        v41 = &v37[144 * v6];
        do
        {
          *(_OWORD *)v40 = *(_OWORD *)v41;
          v42 = *((_OWORD *)v41 + 1);
          *(_QWORD *)(v40 + 32) = *((_QWORD *)v41 + 4);
          *(_OWORD *)(v40 + 16) = v42;
          *((_QWORD *)v41 + 3) = 0;
          *((_QWORD *)v41 + 4) = 0;
          *((_QWORD *)v41 + 2) = 0;
          *(_BYTE *)(v40 + 40) = v41[40];
          v43 = *((_OWORD *)v41 + 3);
          *(_QWORD *)(v40 + 64) = *((_QWORD *)v41 + 8);
          *(_OWORD *)(v40 + 48) = v43;
          *((_QWORD *)v41 + 7) = 0;
          *((_QWORD *)v41 + 8) = 0;
          *((_QWORD *)v41 + 6) = 0;
          *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
          v44 = *(_OWORD *)(v41 + 88);
          *(_QWORD *)(v40 + 104) = *((_QWORD *)v41 + 13);
          *(_OWORD *)(v40 + 88) = v44;
          *((_QWORD *)v41 + 12) = 0;
          *((_QWORD *)v41 + 13) = 0;
          *((_QWORD *)v41 + 11) = 0;
          *(_QWORD *)(v40 + 112) = 0;
          *(_QWORD *)(v40 + 120) = 0;
          *(_QWORD *)(v40 + 128) = 0;
          *(_OWORD *)(v40 + 112) = *((_OWORD *)v41 + 7);
          *(_QWORD *)(v40 + 128) = *((_QWORD *)v41 + 16);
          *((_QWORD *)v41 + 14) = 0;
          *((_QWORD *)v41 + 15) = 0;
          *((_QWORD *)v41 + 16) = 0;
          *(_BYTE *)(v40 + 136) = v41[136];
          v41 += 144;
          v40 += 144;
        }
        while (v41 != v39);
        v37 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v45 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v45)
      {
        v46 = 0;
        v47 = 144 * v45;
        do
        {
          v48 = &v37[v47];
          if (*(_QWORD *)&v37[v47 - 32])
          {
            sub_22E916AE0((uint64_t *)&v37[v47 - 32]);
            operator delete(*(void **)&v37[v47 - 32]);
          }
          if (*(v48 - 33) < 0)
            operator delete(*(void **)&v37[v47 - 56]);
          v49 = &v37[v47];
          if (v37[v47 - 73] < 0)
            operator delete(*((void **)v49 - 12));
          if (*(v49 - 105) < 0)
            operator delete(*((void **)v48 - 16));
          v37 -= 144;
          v46 += 144;
        }
        while (v47 != v46);
      }
LABEL_78:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F35E9F0((char **)a1, (char **)a2);
  }
  return a1;
}

unint64_t sub_22EF4133C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 144 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30C0E0(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30C0E0(a1);
    }
  }
  return v3;
}

_DWORD *sub_22EF413A4(uint64_t a1, _DWORD *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_22EF41470(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = v6 + 6;
    *((_QWORD *)v6 + 2) = 0x100000000;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + (v5 << 7));
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + (v5 << 7));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_22EF41470(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_22EF415F4(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + (v19 << 7));
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + (v19 << 7));
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_22EF415F4(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + (v11 << 7));
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + (v11 << 7));
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_22EF415F4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C]((unint64_t)v8 << 7, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 7;
      do
      {
        *result = -1;
        result += 32;
        v11 -= 128;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_DWORD *)v12;
        if (*(_DWORD *)v12 <= 0xFFFFFFFD)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & (37 * v13);
          v16 = (int *)(*(_QWORD *)a1 + (v15 << 7));
          v17 = *v16;
          if (v13 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -1)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -2;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (int *)(*(_QWORD *)a1 + (v15 << 7));
              v17 = *v16;
              if (v13 == *v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *v16 = v13;
          *((_QWORD *)v16 + 1) = v16 + 6;
          *((_QWORD *)v16 + 2) = 0x100000000;
          if (*((_DWORD *)v12 + 4))
            sub_22EF417C4((uint64_t)(v16 + 2), (uint64_t)v12 + 8);
          ++*(_DWORD *)(a1 + 8);
          sub_22E916354((char **)v12 + 1);
        }
        v12 = (llvm *)((char *)v12 + 128);
      }
      while (v12 != (llvm *)((char *)v4 + 128 * v3));
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(v3 << 7));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = v22 << 7;
      do
      {
        *result = -1;
        result += 32;
        v23 -= 128;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t sub_22EF417C4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  char *v23;
  char *i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_22EF41AD8((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v15 = *(char **)a1;
      if (v5)
      {
        v16 = &v4[104 * v5];
        do
        {
          *(_OWORD *)v15 = *(_OWORD *)v4;
          v17 = (void **)(v15 + 16);
          if (v15[39] < 0)
            operator delete(*v17);
          v18 = *((_OWORD *)v4 + 1);
          *((_QWORD *)v15 + 4) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v17 = v18;
          v4[39] = 0;
          v4[16] = 0;
          v15[40] = v4[40];
          v19 = (void **)(v15 + 48);
          if (v15[71] < 0)
            operator delete(*v19);
          v20 = *((_OWORD *)v4 + 3);
          *((_QWORD *)v15 + 8) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v19 = v20;
          v4[71] = 0;
          v4[48] = 0;
          v15[72] = v4[72];
          v21 = (void **)(v15 + 80);
          if (v15[103] < 0)
            operator delete(*v21);
          v22 = *((_OWORD *)v4 + 5);
          *((_QWORD *)v15 + 12) = *((_QWORD *)v4 + 12);
          *(_OWORD *)v21 = v22;
          v4[103] = 0;
          v4[80] = 0;
          v15 += 104;
          v4 += 104;
        }
        while (v4 != v16);
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
        v23 = *(char **)a1;
      }
      else
      {
        v23 = *(char **)a1;
      }
      for (i = &v23[104 * v6]; i != v15; i -= 104)
      {
        if (*(i - 1) < 0)
          operator delete(*((void **)i - 3));
        if (*(i - 33) < 0)
          operator delete(*((void **)i - 7));
        if (*(i - 65) < 0)
          operator delete(*((void **)i - 11));
      }
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      sub_22E9160C8((uint64_t *)a1);
      sub_22F30BB6C(a1);
    }
    else if ((_DWORD)v6)
    {
      v7 = &v4[104 * v6];
      v8 = (char *)(*(_QWORD *)a1 + 71);
      do
      {
        *(_OWORD *)(v8 - 71) = *(_OWORD *)v4;
        v9 = (void **)(v8 - 55);
        if (*(v8 - 32) < 0)
          operator delete(*v9);
        v10 = *((_OWORD *)v4 + 1);
        *(_QWORD *)(v8 - 39) = *((_QWORD *)v4 + 4);
        *(_OWORD *)v9 = v10;
        v4[39] = 0;
        v4[16] = 0;
        *(v8 - 31) = v4[40];
        v11 = (void **)(v8 - 23);
        if (*v8 < 0)
          operator delete(*v11);
        v12 = *((_OWORD *)v4 + 3);
        *(_QWORD *)(v8 - 7) = *((_QWORD *)v4 + 8);
        *(_OWORD *)v11 = v12;
        v4[71] = 0;
        v4[48] = 0;
        v8[1] = v4[72];
        v13 = (void **)(v8 + 9);
        if (v8[32] < 0)
          operator delete(*v13);
        v14 = *((_OWORD *)v4 + 5);
        *(_QWORD *)(v8 + 25) = *((_QWORD *)v4 + 12);
        *(_OWORD *)v13 = v14;
        v4[103] = 0;
        v4[80] = 0;
        v8 += 104;
        v4 += 104;
      }
      while (v4 != v7);
      goto LABEL_38;
    }
    v6 = 0;
LABEL_38:
    v25 = *(unsigned int *)(a2 + 8);
    if (v6 != v25)
    {
      v26 = *(_QWORD *)a2 + 104 * v25;
      v27 = *(_QWORD *)a1 + 104 * v6;
      v28 = *(_QWORD *)a2 + 104 * v6;
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v28;
        v29 = *(_OWORD *)(v28 + 16);
        *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
        *(_OWORD *)(v27 + 16) = v29;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        *(_BYTE *)(v27 + 40) = *(_BYTE *)(v28 + 40);
        v30 = *(_OWORD *)(v28 + 48);
        *(_QWORD *)(v27 + 64) = *(_QWORD *)(v28 + 64);
        *(_OWORD *)(v27 + 48) = v30;
        *(_QWORD *)(v28 + 56) = 0;
        *(_QWORD *)(v28 + 64) = 0;
        *(_QWORD *)(v28 + 48) = 0;
        *(_BYTE *)(v27 + 72) = *(_BYTE *)(v28 + 72);
        v31 = *(_OWORD *)(v28 + 80);
        *(_QWORD *)(v27 + 96) = *(_QWORD *)(v28 + 96);
        *(_OWORD *)(v27 + 80) = v31;
        *(_QWORD *)(v28 + 88) = 0;
        *(_QWORD *)(v28 + 96) = 0;
        *(_QWORD *)(v28 + 80) = 0;
        v28 += 104;
        v27 += 104;
      }
      while (v28 != v26);
    }
LABEL_41:
    *(_DWORD *)(a1 + 8) = v5;
    sub_22E9160C8((uint64_t *)a2);
  }
  return a1;
}

double sub_22EF41AD8(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  void **v7;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = 104 * v5;
    do
    {
      v7 = (void **)&v4[v6];
      if (v4[v6 - 1] < 0)
        operator delete(*(v7 - 3));
      if (*((char *)v7 - 33) < 0)
        operator delete(*(void **)&v4[v6 - 56]);
      if (v4[v6 - 65] < 0)
        operator delete(*(v7 - 11));
      v6 -= 104;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

unint64_t sub_22EF41B90(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 104 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30BB6C(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30BB6C(a1);
    }
  }
  return v3;
}

_DWORD *sub_22EF41BF8(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 160 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F35ECC0((char **)a1, (uint64_t)v4, (uint64_t)&v4[160 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(160 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 160 * v10;
      do
      {
        *result = -1;
        result += 40;
        v11 -= 160;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF41CC4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v15 = *(char **)a1;
        if (v5)
        {
          v16 = &v4[136 * v5];
          do
          {
            *(_OWORD *)v15 = *(_OWORD *)v4;
            v17 = (void **)(v15 + 16);
            if (v15[39] < 0)
              operator delete(*v17);
            v18 = *((_OWORD *)v4 + 1);
            *((_QWORD *)v15 + 4) = *((_QWORD *)v4 + 4);
            *(_OWORD *)v17 = v18;
            v4[39] = 0;
            v4[16] = 0;
            v15[40] = v4[40];
            v19 = (void **)(v15 + 48);
            if (v15[71] < 0)
              operator delete(*v19);
            v20 = *((_OWORD *)v4 + 3);
            *((_QWORD *)v15 + 8) = *((_QWORD *)v4 + 8);
            *(_OWORD *)v19 = v20;
            v4[71] = 0;
            v4[48] = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(v4 + 72);
            v21 = (void **)(v15 + 88);
            if (v15[111] < 0)
              operator delete(*v21);
            v22 = *(_OWORD *)(v4 + 88);
            *((_QWORD *)v15 + 13) = *((_QWORD *)v4 + 13);
            *(_OWORD *)v21 = v22;
            v4[111] = 0;
            v4[88] = 0;
            sub_22EF351A4((uint64_t *)v15 + 14, (__n128 *)v4 + 7);
            v15 += 136;
            v4 += 136;
          }
          while (v4 != v16);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v23 = *(char **)a1;
        }
        else
        {
          v23 = *(char **)a1;
        }
        if (&v23[136 * v6] != v15)
        {
          v24 = (uint64_t)&v23[136 * v6 - 48];
          do
          {
            if (*(_QWORD *)(v24 + 24))
            {
              sub_22E916AE0((uint64_t *)(v24 + 24));
              operator delete(*(void **)(v24 + 24));
            }
            if (*(char *)(v24 + 23) < 0)
              operator delete(*(void **)v24);
            if (*(char *)(v24 - 17) < 0)
              operator delete(*(void **)(v24 - 40));
            if (*(char *)(v24 - 49) < 0)
              operator delete(*(void **)(v24 - 72));
            v25 = (char *)(v24 - 88);
            v24 -= 136;
          }
          while (v25 != v15);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v26 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = *(char **)a2;
          v29 = 136 * v26;
          do
          {
            v30 = &v28[v29];
            if (*(_QWORD *)&v28[v29 - 24])
            {
              sub_22E916AE0((uint64_t *)&v28[v29 - 24]);
              operator delete(*(void **)&v28[v29 - 24]);
            }
            if (*(v30 - 25) < 0)
              operator delete(*(void **)&v28[v29 - 48]);
            v31 = &v28[v29];
            if (v28[v29 - 65] < 0)
              operator delete(*((void **)v31 - 11));
            if (*(v31 - 97) < 0)
              operator delete(*((void **)v30 - 15));
            v28 -= 136;
            v27 += 136;
          }
          while (v29 != v27);
        }
        goto LABEL_78;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v32 = 0;
          v33 = *(char **)a1;
          v34 = 136 * v6;
          do
          {
            v35 = &v33[v34];
            if (*(_QWORD *)&v33[v34 - 24])
            {
              sub_22E916AE0((uint64_t *)&v33[v34 - 24]);
              operator delete(*(void **)&v33[v34 - 24]);
            }
            if (*(v35 - 25) < 0)
              operator delete(*(void **)&v33[v34 - 48]);
            v36 = &v33[v34];
            if (v33[v34 - 65] < 0)
              operator delete(*((void **)v36 - 11));
            if (*(v36 - 97) < 0)
              operator delete(*((void **)v35 - 15));
            v33 -= 136;
            v32 += 136;
          }
          while (v34 != v32);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F30BBD8(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[136 * v6];
        v8 = (uint64_t *)(*(_QWORD *)a1 + 112);
        do
        {
          *((_OWORD *)v8 - 7) = *(_OWORD *)v4;
          v9 = (void **)(v8 - 12);
          if (*((char *)v8 - 73) < 0)
            operator delete(*v9);
          v10 = *((_OWORD *)v4 + 1);
          *(v8 - 10) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v9 = v10;
          v4[39] = 0;
          v4[16] = 0;
          *((_BYTE *)v8 - 72) = v4[40];
          v11 = (void **)(v8 - 8);
          if (*((char *)v8 - 41) < 0)
            operator delete(*v11);
          v12 = *((_OWORD *)v4 + 3);
          *(v8 - 6) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v11 = v12;
          v4[71] = 0;
          v4[48] = 0;
          *(_OWORD *)(v8 - 5) = *(_OWORD *)(v4 + 72);
          v13 = (void **)(v8 - 3);
          if (*((char *)v8 - 1) < 0)
            operator delete(*v13);
          v14 = *(_OWORD *)(v4 + 88);
          *(v8 - 1) = *((_QWORD *)v4 + 13);
          *(_OWORD *)v13 = v14;
          v4[111] = 0;
          v4[88] = 0;
          sub_22EF351A4(v8, (__n128 *)v4 + 7);
          v8 += 17;
          v4 += 136;
        }
        while (v4 != v7);
        goto LABEL_63;
      }
      v6 = 0;
LABEL_63:
      v37 = *(char **)a2;
      v38 = *(unsigned int *)(a2 + 8);
      if (v6 != v38)
      {
        v39 = &v37[136 * v38];
        v40 = *(_QWORD *)a1 + 136 * v6;
        v41 = &v37[136 * v6];
        do
        {
          *(_OWORD *)v40 = *(_OWORD *)v41;
          v42 = *((_OWORD *)v41 + 1);
          *(_QWORD *)(v40 + 32) = *((_QWORD *)v41 + 4);
          *(_OWORD *)(v40 + 16) = v42;
          *((_QWORD *)v41 + 3) = 0;
          *((_QWORD *)v41 + 4) = 0;
          *((_QWORD *)v41 + 2) = 0;
          *(_BYTE *)(v40 + 40) = v41[40];
          v43 = *((_OWORD *)v41 + 3);
          *(_QWORD *)(v40 + 64) = *((_QWORD *)v41 + 8);
          *(_OWORD *)(v40 + 48) = v43;
          *((_QWORD *)v41 + 7) = 0;
          *((_QWORD *)v41 + 8) = 0;
          *((_QWORD *)v41 + 6) = 0;
          *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
          v44 = *(_OWORD *)(v41 + 88);
          *(_QWORD *)(v40 + 104) = *((_QWORD *)v41 + 13);
          *(_OWORD *)(v40 + 88) = v44;
          *((_QWORD *)v41 + 12) = 0;
          *((_QWORD *)v41 + 13) = 0;
          *((_QWORD *)v41 + 11) = 0;
          *(_QWORD *)(v40 + 112) = 0;
          *(_QWORD *)(v40 + 120) = 0;
          *(_QWORD *)(v40 + 128) = 0;
          *(_OWORD *)(v40 + 112) = *((_OWORD *)v41 + 7);
          *(_QWORD *)(v40 + 128) = *((_QWORD *)v41 + 16);
          *((_QWORD *)v41 + 14) = 0;
          *((_QWORD *)v41 + 15) = 0;
          *((_QWORD *)v41 + 16) = 0;
          v41 += 136;
          v40 += 136;
        }
        while (v41 != v39);
        v37 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v45 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v45)
      {
        v46 = 0;
        v47 = 136 * v45;
        do
        {
          v48 = &v37[v47];
          if (*(_QWORD *)&v37[v47 - 24])
          {
            sub_22E916AE0((uint64_t *)&v37[v47 - 24]);
            operator delete(*(void **)&v37[v47 - 24]);
          }
          if (*(v48 - 25) < 0)
            operator delete(*(void **)&v37[v47 - 48]);
          v49 = &v37[v47];
          if (v37[v47 - 65] < 0)
            operator delete(*((void **)v49 - 11));
          if (*(v49 - 97) < 0)
            operator delete(*((void **)v48 - 15));
          v37 -= 136;
          v46 += 136;
        }
        while (v47 != v46);
      }
LABEL_78:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F35EDA8((char **)a1, (char **)a2);
  }
  return a1;
}

unint64_t sub_22EF421BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 136 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30BBD8(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30BBD8(a1);
    }
  }
  return v3;
}

_DWORD *sub_22EF42224(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 96 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F35EFE8((char **)a1, (uint64_t)v4, (uint64_t)&v4[96 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(96 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 96 * v10;
      do
      {
        *result = -1;
        result += 24;
        v11 -= 96;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF422F0(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  char *v13;
  char *v14;
  void **v15;
  __int128 v16;
  void **v17;
  __int128 v18;
  char *v19;
  char *i;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v13 = *(char **)a1;
        if (v5)
        {
          v14 = &v4[72 * v5];
          do
          {
            *(_OWORD *)v13 = *(_OWORD *)v4;
            v15 = (void **)(v13 + 16);
            if (v13[39] < 0)
              operator delete(*v15);
            v16 = *((_OWORD *)v4 + 1);
            *((_QWORD *)v13 + 4) = *((_QWORD *)v4 + 4);
            *(_OWORD *)v15 = v16;
            v4[39] = 0;
            v4[16] = 0;
            v13[40] = v4[40];
            v17 = (void **)(v13 + 48);
            if (v13[71] < 0)
              operator delete(*v17);
            v18 = *((_OWORD *)v4 + 3);
            *((_QWORD *)v13 + 8) = *((_QWORD *)v4 + 8);
            *(_OWORD *)v17 = v18;
            v4[71] = 0;
            v4[48] = 0;
            v13 += 72;
            v4 += 72;
          }
          while (v4 != v14);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v19 = *(char **)a1;
        }
        else
        {
          v19 = *(char **)a1;
        }
        for (i = &v19[72 * v6]; i != v13; i -= 72)
        {
          if (*(i - 1) < 0)
            operator delete(*((void **)i - 3));
          if (*(i - 33) < 0)
            operator delete(*((void **)i - 7));
        }
        *(_DWORD *)(a1 + 8) = v5;
        v21 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v21)
        {
          v22 = *(char **)a2;
          v23 = 72 * v21;
          do
          {
            v24 = &v22[v23];
            if (v22[v23 - 1] < 0)
              operator delete(*((void **)v24 - 3));
            if (*(v24 - 33) < 0)
              operator delete(*((void **)v24 - 7));
            v23 -= 72;
          }
          while (v23);
        }
        goto LABEL_58;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v25 = *(char **)a1;
          v26 = 72 * v6;
          do
          {
            v27 = &v25[v26];
            if (v25[v26 - 1] < 0)
              operator delete(*((void **)v27 - 3));
            if (*(v27 - 33) < 0)
              operator delete(*((void **)v27 - 7));
            v26 -= 72;
          }
          while (v26);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F30C074(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[72 * v6];
        v8 = (char *)(*(_QWORD *)a1 + 39);
        do
        {
          *(_OWORD *)(v8 - 39) = *(_OWORD *)v4;
          v9 = (void **)(v8 - 23);
          if (*v8 < 0)
            operator delete(*v9);
          v10 = *((_OWORD *)v4 + 1);
          *(_QWORD *)(v8 - 7) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v9 = v10;
          v4[39] = 0;
          v4[16] = 0;
          v8[1] = v4[40];
          v11 = (void **)(v8 + 9);
          if (v8[32] < 0)
            operator delete(*v11);
          v12 = *((_OWORD *)v4 + 3);
          *(_QWORD *)(v8 + 25) = *((_QWORD *)v4 + 8);
          *(_OWORD *)v11 = v12;
          v4[71] = 0;
          v4[48] = 0;
          v8 += 72;
          v4 += 72;
        }
        while (v4 != v7);
        goto LABEL_47;
      }
      v6 = 0;
LABEL_47:
      v28 = *(char **)a2;
      v29 = *(unsigned int *)(a2 + 8);
      if (v6 != v29)
      {
        v30 = &v28[72 * v29];
        v31 = *(_QWORD *)a1 + 72 * v6;
        v32 = &v28[72 * v6];
        do
        {
          *(_OWORD *)v31 = *(_OWORD *)v32;
          v33 = *((_OWORD *)v32 + 1);
          *(_QWORD *)(v31 + 32) = *((_QWORD *)v32 + 4);
          *(_OWORD *)(v31 + 16) = v33;
          *((_QWORD *)v32 + 3) = 0;
          *((_QWORD *)v32 + 4) = 0;
          *((_QWORD *)v32 + 2) = 0;
          *(_BYTE *)(v31 + 40) = v32[40];
          v34 = *((_OWORD *)v32 + 3);
          *(_QWORD *)(v31 + 64) = *((_QWORD *)v32 + 8);
          *(_OWORD *)(v31 + 48) = v34;
          *((_QWORD *)v32 + 7) = 0;
          *((_QWORD *)v32 + 8) = 0;
          *((_QWORD *)v32 + 6) = 0;
          v32 += 72;
          v31 += 72;
        }
        while (v32 != v30);
        v28 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v35 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v35)
      {
        v36 = 72 * v35;
        do
        {
          v37 = &v28[v36];
          if (v28[v36 - 1] < 0)
            operator delete(*((void **)v37 - 3));
          if (*(v37 - 33) < 0)
            operator delete(*((void **)v37 - 7));
          v36 -= 72;
        }
        while (v36);
      }
LABEL_58:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F35F0D0((char **)a1, (char **)a2);
  }
  return a1;
}

unint64_t sub_22EF42628(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 72 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30C074(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30C074(a1);
    }
  }
  return v3;
}

_DWORD *sub_22EF42690(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 176 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F35F314((char **)a1, (uint64_t)v4, (uint64_t)&v4[176 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(176 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 176 * v10;
      do
      {
        *result = -1;
        result += 44;
        v11 -= 176;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF4275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  int v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      v7 = (void **)(a4 + 16);
      if (*(char *)(a4 + 39) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 39) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      *(_BYTE *)(a4 + 40) = *(_BYTE *)(v5 + 40);
      v9 = (void **)(a4 + 48);
      if (*(char *)(a4 + 71) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v5 + 71) = 0;
      *(_BYTE *)(v5 + 48) = 0;
      sub_22EF2DD4C(a4 + 72, (__int128 *)(v5 + 72));
      sub_22EF2DD4C(a4 + 104, (__int128 *)(v5 + 104));
      v11 = *(_DWORD *)(v5 + 144);
      *(_QWORD *)(a4 + 136) = *(_QWORD *)(v5 + 136);
      *(_DWORD *)(a4 + 144) = v11;
      a4 += 152;
      v5 += 152;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

unint64_t sub_22EF4283C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 152 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30BE6C(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30BE6C(a1);
    }
  }
  return v3;
}

_DWORD *sub_22EF428A4(uint64_t a1, int a2)
{
  unsigned int v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 168 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F35F82C((char **)a1, (uint64_t)v4, (uint64_t)&v4[168 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(168 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 168 * v10;
      do
      {
        *result = -1;
        result += 42;
        v11 -= 168;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EF42970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      v7 = (void **)(a4 + 16);
      if (*(char *)(a4 + 39) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 39) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      *(_BYTE *)(a4 + 40) = *(_BYTE *)(v5 + 40);
      v9 = (void **)(a4 + 48);
      if (*(char *)(a4 + 71) < 0)
        operator delete(*v9);
      v10 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(a4 + 64) = *(_QWORD *)(v5 + 64);
      *(_OWORD *)v9 = v10;
      *(_BYTE *)(v5 + 71) = 0;
      *(_BYTE *)(v5 + 48) = 0;
      sub_22EF2DD4C(a4 + 72, (__int128 *)(v5 + 72));
      sub_22EF2DD4C(a4 + 104, (__int128 *)(v5 + 104));
      *(_QWORD *)(a4 + 136) = *(_QWORD *)(v5 + 136);
      a4 += 144;
      v5 += 144;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

unint64_t sub_22EF42A48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 144 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F30BF74(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F30BF74(a1);
    }
  }
  return v3;
}

unint64_t sub_22EF42AB0(uint64_t a1, unsigned __int8 *__s2, size_t __n)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  BOOL v15;

  v3 = *(_QWORD *)(a1 + 88);
  if (!v3)
    return 0;
  if (!__n)
    return 0;
  v6 = 0;
  v7 = 0;
  do
    v7 = 33 * v7 + __s2[v6++];
  while (__n != v6);
  v8 = *(unsigned int *)(*(_QWORD *)(v3 + 8) + 4 * ((*(_DWORD *)v3 - 1) & v7));
  if (!(_DWORD)v8)
    return 0;
  v9 = (_WORD *)(*(_QWORD *)(v3 + 16) + v8);
  v10 = (unsigned __int16)*v9;
  if (!*v9)
    return 0;
  v11 = v9 + 1;
  while (1)
  {
    v12 = (unsigned __int16)v11[2];
    v13 = (unsigned __int16)v11[3];
    v14 = v11 + 4;
    v15 = *(_DWORD *)v11 == v7 && __n == v12;
    if (v15 && !memcmp(v11 + 4, __s2, __n))
      break;
    v11 = (_WORD *)((char *)v14 + v13 + v12);
    if (!--v10)
      return 0;
  }
  return (unint64_t)*(unsigned int *)((char *)v14 + __n) << 33;
}

uint64_t *sub_22EF42BA0(uint64_t *a1, const llvm::MemoryBuffer *a2, char a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char *v30;
  int v31;
  void *v32;
  size_t v33;
  size_t v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  char *v42;
  char *v43;
  void *v44;
  __int128 *__dst;
  unint64_t __dsta;
  char __dstb;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  __int128 v55;
  void *__src;
  size_t __len;
  char *v58;
  __int128 v59;
  unint64_t v60;
  char v61;
  char v62;
  char *v63;
  char v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[512];
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *__p[3];
  char *v73[2];
  _QWORD v74[34];
  char *v75;
  char v76;
  char *v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v12 = operator new();
  *(_BYTE *)(v12 + 72) = 0;
  *(_BYTE *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 56) = 0;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_QWORD *)(v12 + 168) = 0;
  *a1 = v12;
  *a6 = 0;
  *(_QWORD *)v12 = a2;
  *(_BYTE *)(v12 + 8) = a3;
  *(_QWORD *)(v12 + 12) = a4;
  *(_QWORD *)(v12 + 20) = a5;
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)&v55, a2);
  v13 = 0;
  v68 = v55;
  v70 = 0;
  v69 = 0;
  v71 = 0x200000000;
  memset(__p, 0, sizeof(__p));
  v73[0] = (char *)v74;
  v73[1] = (char *)0x800000000;
  v74[32] = 0;
  do
  {
    if ((_DWORD)v71)
      v14 = 1;
    else
      v14 = *((_QWORD *)&v68 + 1) > v69;
    if (!v14)
      goto LABEL_135;
    v15 = byte_22F49E544[v13];
    sub_22E745EC8((uint64_t)&v68, 8u, (uint64_t)&v65);
    if ((v66 & 1) != 0)
    {
      v43 = (char *)v65;
      v65 = 0;
      v77 = v43;
      sub_22E6C5940(&v77, (char **)&v59);
      if (v77)
        (*(void (**)(char *))(*(_QWORD *)v77 + 8))(v77);
      *a6 = 1;
      if ((v66 & 1) != 0)
      {
        v44 = v65;
        v65 = 0;
        if (v44)
          (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
      }
      goto LABEL_147;
    }
    if (v65 != (void *)v15)
    {
LABEL_135:
      *a6 = 1;
      goto LABEL_147;
    }
    ++v13;
  }
  while (v13 != 4);
  v16 = 0;
  v65 = v67;
  v66 = 0x4000000000;
  do
  {
    v17 = *((_QWORD *)&v68 + 1);
    v18 = v69;
    if ((_DWORD)v71)
      v19 = 1;
    else
      v19 = *((_QWORD *)&v68 + 1) > v69;
    if (!v19)
      goto LABEL_143;
    sub_22E748020((uint64_t)&v68, 0, (uint64_t)&v63);
    if ((v64 & 1) != 0)
    {
      v20 = v63;
      v63 = 0;
      v77 = v20;
      sub_22E6C5940(&v77, (char **)&v59);
      v21 = v77;
      if (v77)
LABEL_23:
        (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
LABEL_24:
      v22 = 1;
      *a6 = 1;
    }
    else
    {
      if ((_DWORD)v63 == 2)
      {
        switch(HIDWORD(v63))
        {
          case 0:
            llvm::BitstreamCursor::ReadBlockInfoBlock((llvm::BitstreamCursor *)&v68);
            if ((v62 & 1) == 0)
            {
              if (v61)
              {
                v77 = (char *)&v59;
                sub_22E746ED0((void ***)&v77);
              }
              goto LABEL_119;
            }
            v39 = v59;
            *(_QWORD *)&v59 = 0;
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            v22 = 0;
            *a6 = 1;
            goto LABEL_26;
          case 8:
            if ((v16 & 1) != 0)
              goto LABEL_24;
            v24 = *a1;
            llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v68, 8, 0);
            v21 = (char *)v59;
            if ((_QWORD)v59)
              goto LABEL_23;
            sub_22E748020((uint64_t)&v68, 0, (uint64_t)&v77);
            if ((v78 & 1) != 0)
              goto LABEL_123;
            v53 = 0;
            v25 = v24;
            v27 = (int)v77;
            v26 = HIDWORD(v77);
            v52 = v25;
            v51 = v25 + 32;
            break;
          case 9:
            if ((v16 & 1) == 0
              || sub_22F35FAF8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xA:
            if ((v16 & 1) == 0
              || sub_22F35FE08(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xB:
            if ((v16 & 1) == 0
              || sub_22F360178(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xC:
            if ((v16 & 1) == 0
              || sub_22F360488(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xD:
            if ((v16 & 1) == 0
              || sub_22F360798(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xE:
            if ((v16 & 1) == 0
              || sub_22F360AA8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0xF:
            if ((v16 & 1) == 0
              || sub_22F360DB8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0x10:
            if ((v16 & 1) == 0
              || sub_22F3613D8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0x11:
            if ((v16 & 1) == 0
              || sub_22F3616E8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
            goto LABEL_133;
          case 0x12:
            if ((v16 & 1) == 0
              || sub_22F3610C8(*a1, (llvm::BitstreamCursor *)&v68, (unsigned int **)&v65))
            {
              goto LABEL_24;
            }
LABEL_133:
            v22 = 0;
            v16 = 1;
            goto LABEL_26;
          default:
            sub_22E746760((uint64_t)&v68, (uint64_t *)&v59);
            v21 = (char *)v59;
            if ((_QWORD)v59)
              goto LABEL_23;
LABEL_119:
            v22 = 0;
            goto LABEL_26;
        }
        while (1)
        {
          while (v27 == 2)
          {
            sub_22E746760((uint64_t)&v68, (uint64_t *)&v59);
            if ((_QWORD)v59)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v59 + 8))(v59);
LABEL_127:
              v41 = 1;
LABEL_128:
              v54 = v41;
LABEL_129:
              if ((v78 & 1) != 0)
              {
                v42 = v77;
                v77 = 0;
                if (v42)
                  (*(void (**)(char *, uint64_t))(*(_QWORD *)v42 + 8))(v42, v26);
              }
              if ((v54 & 1) != 0)
                goto LABEL_24;
              goto LABEL_133;
            }
            sub_22E748020((uint64_t)&v68, 0, (uint64_t)&v59);
            sub_22F361E60(&v77, &v59);
            if ((BYTE8(v59) & 1) != 0)
            {
              v28 = v59;
              *(_QWORD *)&v59 = 0;
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
            if ((v78 & 1) != 0)
            {
LABEL_123:
              v40 = v77;
              v77 = 0;
              __src = v40;
              sub_22E6C5940((char **)&__src, (char **)&v59);
              if (__src)
                (*(void (**)(void *))(*(_QWORD *)__src + 8))(__src);
              v54 = 0;
              goto LABEL_129;
            }
            v27 = (int)v77;
            v26 = HIDWORD(v77);
          }
          if (!v27)
            goto LABEL_127;
          if (v27 == 1)
          {
            v41 = v53 ^ 1;
            goto LABEL_128;
          }
          LODWORD(v66) = 0;
          __src = 0;
          __len = 0;
          v49 = v26;
          llvm::BitstreamCursor::readRecord();
          if ((v76 & 1) != 0)
          {
            v30 = v75;
            v75 = 0;
            v58 = v30;
            sub_22E6C5940(&v58, (char **)&v59);
            if (v58)
              (*(void (**)(char *))(*(_QWORD *)v58 + 8))(v58);
            v29 = 0;
            v54 = 0;
            goto LABEL_94;
          }
          switch((_DWORD)v75)
          {
            case 1:
              if ((v53 & 1) != 0)
              {
                v29 = 0;
                v53 = 1;
                v54 = 1;
                goto LABEL_94;
              }
              if (*(_QWORD *)v65 || (v53 = 1, *((_QWORD *)v65 + 1) != 24))
              {
                v29 = 0;
                v53 = 0;
                v54 = 1;
                goto LABEL_94;
              }
              break;
            case 2:
              v32 = __src;
              if (!__src)
              {
                v59 = 0uLL;
                v60 = 0;
LABEL_83:
                if (*(char *)(v52 + 55) < 0)
                  operator delete(*(void **)v51);
                *(_OWORD *)v51 = v59;
                *(_QWORD *)(v51 + 16) = v60;
                break;
              }
              v33 = __len;
              if (__len >= 0x7FFFFFFFFFFFFFF8)
                abort();
              if (__len >= 0x17)
              {
                v34 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((__len | 7) != 0x17)
                  v34 = __len | 7;
                __dsta = v34 + 1;
                v35 = (__int128 *)operator new(v34 + 1);
                *((_QWORD *)&v59 + 1) = v33;
                v60 = __dsta | 0x8000000000000000;
                __dst = v35;
                *(_QWORD *)&v59 = v35;
              }
              else
              {
                HIBYTE(v60) = __len;
                __dst = &v59;
                if (!__len)
                  goto LABEL_82;
              }
              memmove(__dst, v32, v33);
LABEL_82:
              *((_BYTE *)__dst + v33) = 0;
              goto LABEL_83;
            case 3:
              *(_BYTE *)(v52 + 80) = *(_BYTE *)v65 & 1;
              break;
            case 4:
              v31 = *(unsigned __int8 *)(v52 + 72);
              *(_OWORD *)(v52 + 56) = *(_OWORD *)v65;
              if (!v31)
                *(_BYTE *)(v52 + 72) = 1;
              break;
          }
          sub_22E748020((uint64_t)&v68, 0, (uint64_t)&v59);
          sub_22F361E60(&v77, &v59);
          if ((BYTE8(v59) & 1) != 0)
          {
            v36 = v59;
            *(_QWORD *)&v59 = 0;
            if (v36)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          }
          if ((v78 & 1) == 0)
          {
            v29 = 1;
            v27 = (int)v77;
            v26 = HIDWORD(v77);
            goto LABEL_95;
          }
          v37 = v77;
          v77 = 0;
          v58 = v37;
          sub_22E6C5940(&v58, (char **)&v59);
          if (v58)
            (*(void (**)(char *))(*(_QWORD *)v58 + 8))(v58);
          v29 = 0;
          v54 = 0;
LABEL_94:
          v26 = v49;
LABEL_95:
          if ((v76 & 1) != 0)
          {
            v38 = v75;
            v75 = 0;
            if (v38)
            {
              v50 = v26;
              __dstb = v29;
              (*(void (**)(char *))(*(_QWORD *)v38 + 8))(v38);
              v29 = __dstb;
              v26 = v50;
            }
          }
          if ((v29 & 1) == 0)
            goto LABEL_129;
        }
      }
      v22 = 5;
    }
LABEL_26:
    if ((v64 & 1) != 0)
    {
      v23 = v63;
      v63 = 0;
      if (v23)
        (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  while (!v22);
  if (v22 == 5)
  {
    v17 = *((_QWORD *)&v68 + 1);
    v18 = v69;
    if ((_DWORD)v71)
      goto LABEL_144;
LABEL_143:
    if (v17 > v18)
LABEL_144:
      *a6 = 1;
  }
  if (v65 != v67)
    free(v65);
LABEL_147:
  sub_22E746F74(v73);
  if (__p[0])
  {
    sub_22E3B485C((uint64_t *)__p);
    operator delete(__p[0]);
  }
  return a1;
}

unint64_t sub_22EF43474@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  _WORD *v8;
  int v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  int v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v17 = *a2;
  result = sub_22F35DF58((int *)&v17, (char *)&v17 + 4);
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((*(_DWORD *)a1 - 1) & result));
  if ((_DWORD)v7 && (v8 = (_WORD *)(*(_QWORD *)(a1 + 16) + v7), v9 = (unsigned __int16)*v8, *v8))
  {
    v10 = a1 + 24;
    v11 = v8 + 1;
    while (1)
    {
      v12 = (unsigned __int16)v11[4];
      v13 = (unsigned __int16)v11[5];
      v14 = v11 + 6;
      if (*(_QWORD *)v11 == result)
      {
        v15 = *((unsigned int *)v11 + 3) | ((unint64_t)*((unsigned __int8 *)v11 + 16) << 32);
        if (v15 == (v5 & 0xFFFFFFFFFFLL))
          break;
      }
      v11 = (_WORD *)((char *)v14 + (v13 + v12));
      if (!--v9)
        goto LABEL_7;
    }
    v16 = (uint64_t)v14 + v12;
    *(_QWORD *)a3 = v15;
  }
  else
  {
LABEL_7:
    v16 = 0;
    v13 = 0;
    v10 = 0;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 4) = 0;
  }
  *(_QWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_22EF43558@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  char *v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  v4 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v5 = 0x253E4A000uLL;
  if ((v4 & 1) == 0)
  {
    v23 = result;
    v21 = *a2;
    v22 = a3;
    v18 = __cxa_guard_acquire(&qword_253E4AB98);
    v5 = 0x253E4A000uLL;
    v3 = v21;
    a3 = v22;
    v19 = v18;
    result = v23;
    if (v19)
    {
      v20 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v20 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v20;
      __cxa_guard_release(&qword_253E4AB98);
      v5 = 0x253E4A000;
      v3 = v21;
      a3 = v22;
      result = v23;
    }
  }
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v5 + 2960) + 8 * v3)) ^ ((0x9DDFEA08EB382D69
                                                                     * (*(_QWORD *)(v5 + 2960) + 8 * v3)) >> 47));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * ((*(_DWORD *)result - 1) & v7));
  if ((_DWORD)v8 && (v9 = (_WORD *)(*(_QWORD *)(result + 16) + v8), v10 = (unsigned __int16)*v9, *v9))
  {
    v11 = result + 24;
    v12 = v9 + 1;
    while (1)
    {
      v13 = *(_QWORD *)v12;
      v14 = (unsigned __int16)v12[4];
      v15 = (unsigned __int16)v12[5];
      v16 = v12 + 6;
      if (v13 == v7 && *v16 == (_DWORD)v3)
        break;
      v12 = (_WORD *)((char *)v16 + (v15 + v14));
      if (!--v10)
        goto LABEL_8;
    }
    v17 = (char *)v16 + v14;
  }
  else
  {
LABEL_8:
    LODWORD(v3) = 0;
    v17 = 0;
    v15 = 0;
    v11 = 0;
  }
  *(_DWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v17;
  *(_DWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v11;
  return result;
}

void sub_22EF436B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  void *__p;
  char v30;
  char v31;
  char v32;
  void *v33[2];
  uint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  char *v46;

  v3 = *(unsigned __int16 **)(a1 + 8);
  v5 = *v3;
  v4 = v5;
  v46 = (char *)(v3 + 1);
  *a2 = a2 + 2;
  a2[1] = 0x100000000;
  if (v5 >= 2)
  {
    sub_22F30BCBC((uint64_t)a2);
    while (1)
    {
LABEL_3:
      v6 = sub_22EF45E48(&v46);
      v8 = v7;
      v33[0] = 0;
      v33[1] = 0;
      v34 = 0;
      v35 &= 0xF0u;
      v41 = 0;
      LOBYTE(v42) = 0;
      v44 = 0;
      v45 = 0;
      v37 = 0;
      v38 = 0;
      v36 = 0;
      LOBYTE(v39) = 0;
      sub_22EF45EE0(&v46, (uint64_t)v33);
      v10 = *v46;
      v9 = *v46++;
      if ((v10 & 1) != 0)
      {
        v45 |= 8u;
        if ((v9 & 8) == 0)
        {
LABEL_5:
          if ((v9 & 0x20) != 0)
            goto LABEL_40;
          goto LABEL_6;
        }
      }
      else if ((v9 & 8) == 0)
      {
        goto LABEL_5;
      }
      v45 = v9 & 6 | v45 & 0xF8 | 1;
      if ((v9 & 0x20) != 0)
      {
LABEL_40:
        v45 = v45 & 0x3F | (((v9 & 0x10) != 0) << 7) | 0x40;
        if ((v9 & 0x80000000) == 0)
          goto LABEL_8;
LABEL_7:
        v45 = (v9 >> 1) & 0x20 | v45 & 0xDF | 0x10;
        goto LABEL_8;
      }
LABEL_6:
      if ((v9 & 0x80000000) != 0)
        goto LABEL_7;
LABEL_8:
      v21[0] = v6;
      v21[1] = v8;
      sub_22F30BE10((uint64_t)&v22, (uint64_t)v33);
      v32 = v45;
      v11 = sub_22EF402D0((uint64_t)a2, (unint64_t)v21, 1);
      v12 = *a2;
      v13 = *((_DWORD *)a2 + 2);
      v14 = *a2 + 144 * v13;
      *(_OWORD *)v14 = *(_OWORD *)v11;
      v15 = v14 + 16;
      v16 = *(_OWORD *)(v11 + 16);
      *(_QWORD *)(v14 + 32) = *(_QWORD *)(v11 + 32);
      *(_OWORD *)(v14 + 16) = v16;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_BYTE *)(v14 + 40) = *(_BYTE *)(v11 + 40);
      v17 = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v14 + 64) = *(_QWORD *)(v11 + 64);
      *(_OWORD *)(v14 + 48) = v17;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_BYTE *)(v14 + 72) = 0;
      v18 = v14 + 72;
      *(_BYTE *)(v18 + 24) = 0;
      if (*(_BYTE *)(v11 + 96))
      {
        v19 = *(_OWORD *)(v11 + 72);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v11 + 88);
        *(_OWORD *)v18 = v19;
        *(_QWORD *)(v11 + 80) = 0;
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 72) = 0;
        *(_BYTE *)(v15 + 80) = 1;
      }
      *(_BYTE *)(v15 + 88) = 0;
      *(_BYTE *)(v15 + 112) = 0;
      if (*(_BYTE *)(v11 + 128))
      {
        v20 = *(_OWORD *)(v11 + 104);
        *(_QWORD *)(v15 + 104) = *(_QWORD *)(v11 + 120);
        *(_OWORD *)(v15 + 88) = v20;
        *(_QWORD *)(v11 + 112) = 0;
        *(_QWORD *)(v11 + 120) = 0;
        *(_QWORD *)(v11 + 104) = 0;
        *(_BYTE *)(v15 + 112) = 1;
      }
      *(_BYTE *)(v12 + 144 * v13 + 136) = *(_BYTE *)(v11 + 136);
      ++*((_DWORD *)a2 + 2);
      if (v31)
      {
        if (v30 < 0)
          operator delete(__p);
        v31 = 0;
      }
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        v28 = 0;
      }
      if (v25 < 0)
        operator delete(v24);
      if (v23 < 0)
        operator delete(v22);
      if (v44)
      {
        if (v43 < 0)
          operator delete(v42);
        v44 = 0;
      }
      if (v41)
      {
        if (v40 < 0)
          operator delete(v39);
        v41 = 0;
      }
      if (SHIBYTE(v38) < 0)
        operator delete(v36);
      if (SHIBYTE(v34) < 0)
        operator delete(v33[0]);
      if (!--v4)
        return;
    }
  }
  if (v4)
    goto LABEL_3;
}

unint64_t sub_22EF439C0@<X0>(unsigned __int8 *__s2@<X2>, size_t __n@<X3>, unint64_t *a3@<X0>, unsigned int a4@<W1>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t result;
  uint64_t v9;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 __p;
  uint64_t v41;
  char v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char *v52;
  char *v53[2];
  _QWORD v54[16];

  v54[14] = *MEMORY[0x24BDAC8D0];
  result = *a3;
  v9 = *(_QWORD *)(result + 112);
  if (!v9)
    goto LABEL_3;
  result = sub_22EF42AB0(result, __s2, __n);
  if (!v12
    || (v13 = a4 | (result >> 33 << 32),
        v32 = v13,
        LODWORD(v33) = a5,
        result = sub_22F35E228(&v32, (int *)&v32 + 1, (char *)&v33),
        v14 = *(unsigned int *)(*(_QWORD *)(v9 + 8) + 4 * ((*(_DWORD *)v9 - 1) & result)),
        !(_DWORD)v14)
    || (v15 = (_WORD *)(*(_QWORD *)(v9 + 16) + v14), v16 = (unsigned __int16)*v15, !*v15))
  {
LABEL_3:
    *(_QWORD *)a6 = a6 + 16;
    *(_QWORD *)(a6 + 8) = 0x100000000;
    *(_DWORD *)(a6 + 128) = 0;
    return result;
  }
  v17 = v15 + 1;
  while (1)
  {
    v18 = (unsigned __int16)v17[4];
    v19 = (unsigned __int16)v17[5];
    v20 = v17 + 6;
    if (*(_QWORD *)v17 == result)
    {
      v21 = *(_QWORD *)(v17 + 6);
      v22 = *((unsigned __int8 *)v17 + 20);
      if (v21 == v13 && v22 == a5)
        break;
    }
    v17 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v16)
      goto LABEL_3;
  }
  v31 = *(_QWORD *)(*a3 + 12);
  v24 = *(_QWORD *)(*a3 + 20);
  v26 = *(unsigned __int16 *)((char *)v20 + v18);
  v25 = v26;
  v52 = (char *)v20 + v18 + 2;
  v53[0] = (char *)v54;
  v53[1] = (char *)0x100000000;
  if (v26 >= 2)
  {
    sub_22F30C14C((uint64_t)v53);
    goto LABEL_17;
  }
  for (; v25; --v25)
  {
LABEL_17:
    v27 = sub_22EF45E48(&v52);
    v29 = v28;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    v45 &= 0xF0u;
    v47 = 0;
    v46 = 0uLL;
    v48 &= 0xF8u;
    v50 = 0;
    v49 = 0uLL;
    v51 &= 0xF8u;
    sub_22EF46198(&v52, (uint64_t)v43);
    v30 = *v52++;
    if ((v30 & 1) != 0)
      v51 = v51 & 0xFB | (2 * v30) & 4;
    if ((v30 & 4) != 0)
      v51 = (v30 >> 2) & 2 | v51 & 0xFC | 1;
    v32 = v27;
    v33 = v29;
    if (SHIBYTE(v44) < 0)
    {
      sub_22E3BB2B4(&v34, v43[0], (unint64_t)v43[1]);
    }
    else
    {
      v34 = *(_OWORD *)v43;
      v35 = v44;
    }
    v36 = v45;
    if (SHIBYTE(v47) < 0)
    {
      sub_22E3BB2B4(&v37, (void *)v46, *((unint64_t *)&v46 + 1));
    }
    else
    {
      v37 = v46;
      v38 = v47;
    }
    v39 = v48;
    if (SHIBYTE(v50) < 0)
    {
      sub_22E3BB2B4(&__p, (void *)v49, *((unint64_t *)&v49 + 1));
    }
    else
    {
      __p = v49;
      v41 = v50;
    }
    v42 = v51;
    sub_22EF2D0D4((uint64_t)v53, (unint64_t)&v32);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
    if (SHIBYTE(v35) < 0)
      operator delete((void *)v34);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49);
    if (SHIBYTE(v47) < 0)
      operator delete((void *)v46);
    if (SHIBYTE(v44) < 0)
      operator delete(v43[0]);
  }
  sub_22F361FD0(a6, v31, v24, (uint64_t)v53);
  return (unint64_t)sub_22E918278(v53);
}

void sub_22EF43D3C(uint64_t *a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  void *v32;
  int v33;
  int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  int v41;
  unsigned __int16 *v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  BOOL v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  void *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void **v70;
  uint64_t v71;
  void **v72;
  _BYTE *v73;
  void **v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  uint64_t *v80;
  uint64_t *v81;
  char *v82;
  uint64_t *v83;
  __int16 *v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[41];
  void *v88[2];
  void *v89[2];
  uint64_t v90;
  unsigned int *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void *__p[3];
  char v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  __int128 v105;
  __int128 v106;
  void *v107[3];
  char v108;
  unsigned int v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[16];
  unsigned int v113;
  void *v114[2];
  _BYTE v115[16];
  unsigned int v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[16];
  unsigned int v120;
  void *v121;
  uint64_t v122;
  _BYTE v123[16];
  int v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  _QWORD v135[4];

  v135[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!*(_QWORD *)(*a1 + 120) || (v84 = a2, (v7 = *(_QWORD *)(v6 + 128)) == 0) || !*(_QWORD *)(v6 + 88))
  {
LABEL_15:
    *(_QWORD *)a5 = a5 + 16;
LABEL_16:
    *(_QWORD *)(a5 + 8) = 0x100000000;
    *(_DWORD *)(a5 + 160) = 0;
    return;
  }
  v10 = *(_DWORD *)a3;
  v12 = *(_QWORD *)(a3 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  v110 = v112;
  v111 = 0x200000000;
  v109 = v10;
  v83 = (uint64_t *)v112;
  if (v11)
  {
    v13 = 0;
    v14 = v12 + 16 * v11;
    do
    {
      v15 = sub_22EF42AB0(v6, *(unsigned __int8 **)v12, *(_QWORD *)(v12 + 8));
      if (!v16)
      {
        v18 = 0;
        v19 = 0;
        goto LABEL_12;
      }
      v17 = v15;
      if (v13 >= HIDWORD(v111))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v111;
      }
      *((_QWORD *)v110 + v13) = v17;
      v13 = v111 + 1;
      LODWORD(v111) = v111 + 1;
      v12 += 16;
    }
    while (v12 != v14);
    v7 = *(_QWORD *)(v6 + 128);
    v10 = v109;
    v116 = v109;
    v117 = v119;
    v118 = 0x200000000;
    if (v13)
    {
      sub_22F24C890((uint64_t)&v117, (uint64_t)&v110);
      v120 = v116;
      v73 = v123;
      v121 = v123;
      v122 = 0x200000000;
      if ((_DWORD)v118)
        sub_22F24C77C((uint64_t)&v121, (uint64_t)&v117);
      goto LABEL_31;
    }
  }
  else
  {
    v116 = v10;
    v117 = v119;
    v118 = 0x200000000;
  }
  v120 = v10;
  v73 = v123;
  v121 = v123;
  v122 = 0x200000000;
LABEL_31:
  if (v117 != v119)
    free(v117);
  v113 = v120;
  v114[0] = v115;
  v114[1] = (void *)0x200000000;
  if ((_DWORD)v122)
    sub_22F24C890((uint64_t)v114, (uint64_t)&v121);
  v72 = &v121;
  LODWORD(v78) = sub_22F35CF08(&v113);
  if (v114[0] != v115)
    free(v114[0]);
  v35 = (int)v78;
  v36 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v78));
  if ((_DWORD)v36)
  {
    v37 = (unsigned __int16 *)(*(_QWORD *)(v7 + 16) + v36);
    LODWORD(v82) = *v37;
    if ((_DWORD)v82)
    {
      v38 = 0;
      v75 = v7 + 24;
      v39 = v37 + 1;
      v81 = (uint64_t *)&v101;
      v79 = (char *)v135;
      v71 = (uint64_t)&v99 + 8;
      v80 = &v131;
      v77 = &v127;
      v74 = &v89[1];
      v76 = a4;
      do
      {
        v40 = v39[2];
        v41 = v39[3];
        v42 = v39 + 4;
        v43 = v41 + v40;
        if (*(_DWORD *)v39 == v35)
        {
          *((_QWORD *)&v99 + 1) = v81;
          v100 = 0x200000000;
          v44 = *v42;
          LODWORD(v99) = v44;
          v45 = (unint64_t)(v40 + 0x3FFFFFFFELL) >> 2;
          if ((_DWORD)v45)
          {
            v46 = 0;
            v47 = (unsigned int *)(v39 + 5);
            do
            {
              v49 = *v47++;
              v48 = v49;
              if (v46 >= HIDWORD(v100))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v46 = v100;
              }
              *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v46) = v48 << 33;
              v46 = v100 + 1;
              LODWORD(v100) = v100 + 1;
              LODWORD(v45) = v45 - 1;
            }
            while ((_DWORD)v45);
            LODWORD(v132) = v99;
            v133 = v79;
            v134 = 0x200000000;
            a4 = v76;
            v35 = (int)v78;
            if (v46)
              sub_22F24C890((uint64_t)&v133, v71);
          }
          else
          {
            LODWORD(v132) = v44;
            v133 = v79;
            v134 = 0x200000000;
          }
          v50 = v120;
          v128 = v120;
          v129 = (uint64_t)v80;
          v130 = 0x200000000;
          if ((_DWORD)v122)
          {
            sub_22F24C890((uint64_t)&v129, (uint64_t)v72);
            v50 = v128;
          }
          if ((_DWORD)v132 == v50)
          {
            v51 = (uint64_t *)v129;
            if ((_DWORD)v134 == (_DWORD)v130)
            {
              if ((_DWORD)v134)
              {
                v52 = 0;
                do
                {
                  v53 = *(_QWORD *)&v133[v52] >> 33;
                  v54 = *(_QWORD *)(v129 + v52) >> 33;
                  v55 = (_DWORD)v53 == (_DWORD)v54;
                  v56 = (_DWORD)v53 != (_DWORD)v54 || 8 * v134 - 8 == v52;
                  v52 += 8;
                }
                while (!v56);
              }
              else
              {
                v55 = 1;
              }
            }
            else
            {
              v55 = 0;
            }
          }
          else
          {
            v55 = 0;
            v51 = (uint64_t *)v129;
          }
          if (v51 != v80)
            free(v51);
          if (v133 != v79)
            free(v133);
          if (v55)
          {
            v124 = v99;
            v125 = v77;
            v126 = 0x200000000;
            if ((_DWORD)v100)
            {
              sub_22F24C890((uint64_t)&v125, v71);
              LODWORD(v88[0]) = v124;
              v88[1] = v74;
              v89[0] = (void *)0x200000000;
              if ((_DWORD)v126)
                sub_22F24C890((uint64_t)&v88[1], (uint64_t)&v125);
            }
            else
            {
              LODWORD(v88[0]) = v99;
              v88[1] = v74;
              v89[0] = (void *)0x200000000;
            }
            v91 = (unsigned int *)((char *)v42 + v40);
            LODWORD(v92) = v41;
            *((_QWORD *)&v92 + 1) = v75;
            if (v125 != v77)
              free(v125);
          }
          else
          {
            v42 = (unsigned __int16 *)((char *)v42 + v43);
          }
          if (*((uint64_t **)&v99 + 1) != v81)
            free(*((void **)&v99 + 1));
          if (v55)
            goto LABEL_84;
        }
        else
        {
          v42 = (unsigned __int16 *)((char *)v42 + v43);
        }
        ++v38;
        v39 = v42;
      }
      while (v38 != (_DWORD)v82);
    }
  }
  v88[0] = 0;
  *(_OWORD *)v89 = 0u;
  v90 = 0;
  v91 = 0;
  v88[1] = &v89[1];
  HIDWORD(v89[0]) = 2;
  LODWORD(v92) = 0;
  *((_QWORD *)&v92 + 1) = 0;
LABEL_84:
  if (v121 != v73)
    free(v121);
  if (v91)
  {
    LODWORD(v99) = v88[0];
    *((_QWORD *)&v99 + 1) = &v101;
    v100 = 0x200000000;
    if (LODWORD(v89[0]))
    {
      sub_22F24C890((uint64_t)&v99 + 8, (uint64_t)&v88[1]);
      v57 = *v91;
      if (*((char **)&v99 + 1) != &v101)
        free(*((void **)&v99 + 1));
    }
    else
    {
      v57 = *v91;
    }
    v19 = v57 << 33;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (v88[1] != &v89[1])
    free(v88[1]);
LABEL_12:
  if (v110 != v83)
    free(v110);
  if (!v18)
    goto LABEL_15;
  v20 = *(_QWORD *)(*a1 + 120);
  v21 = a4;
  v22 = (void *)(v84 | (v19 >> 33 << 32));
  v88[0] = v22;
  v23 = v21;
  LODWORD(v88[1]) = v21;
  v24 = sub_22F35E228(v88, (int *)v88 + 1, (char *)&v88[1]);
  v25 = *(unsigned int *)(*(_QWORD *)(v20 + 8) + 4 * ((*(_DWORD *)v20 - 1) & v24));
  if (!(_DWORD)v25 || (v26 = (_WORD *)(*(_QWORD *)(v20 + 16) + v25), v27 = (unsigned __int16)*v26, !*v26))
  {
LABEL_28:
    *(_QWORD *)a5 = a5 + 16;
    goto LABEL_16;
  }
  v28 = v26 + 1;
  while (1)
  {
    v29 = (unsigned __int16)v28[4];
    v30 = (unsigned __int16)v28[5];
    v31 = v28 + 6;
    if (*(_QWORD *)v28 == v24)
    {
      v32 = *(void **)(v28 + 6);
      v33 = *((unsigned __int8 *)v28 + 20);
      if (v32 == v22 && v33 == v23)
        break;
    }
    v28 = (_WORD *)((char *)v31 + v30 + v29);
    if (!--v27)
      goto LABEL_28;
  }
  v58 = (_WORD *)((char *)v31 + v29);
  v59 = *(_QWORD *)(*a1 + 12);
  v79 = *(char **)(*a1 + 20);
  v80 = (uint64_t *)v59;
  v61 = *v58;
  v60 = v61;
  v132 = (char *)(v58 + 1);
  v78 = v87;
  v85 = v87;
  v86 = 0x100000000;
  if (v61 >= 2)
  {
    sub_22F30C0E0((uint64_t)&v85);
    goto LABEL_100;
  }
  if (v60)
  {
LABEL_100:
    v81 = (uint64_t *)v107;
    v82 = (char *)&v105 + 8;
    v83 = &v94;
    v84 = &v104;
    do
    {
      v62 = (void *)sub_22EF45E48(&v132);
      v64 = v63;
      v99 = 0uLL;
      v100 = 0;
      v101 &= 0xF0u;
      v103 = 0;
      v102 = 0uLL;
      v104 &= 0xF000u;
      v105 = 0u;
      v106 = 0u;
      memset(v107, 0, sizeof(v107));
      v65 = *v132++;
      v108 = v108 & 0xF8 | v65 & 4 | (__rbit32(v65) >> 30);
      sub_22EF462D8(&v132, (uint64_t)&v99);
      v88[0] = v62;
      v88[1] = v64;
      if (SHIBYTE(v100) < 0)
      {
        sub_22E3BB2B4(v89, (void *)v99, *((unint64_t *)&v99 + 1));
      }
      else
      {
        *(_OWORD *)v89 = v99;
        v90 = v100;
      }
      LOBYTE(v91) = v101;
      if (SHIBYTE(v103) < 0)
      {
        sub_22E3BB2B4(&v92, (void *)v102, *((unint64_t *)&v102 + 1));
      }
      else
      {
        v92 = v102;
        v93 = v103;
      }
      *(_OWORD *)v83 = *(_OWORD *)v84;
      if (SHIBYTE(v106) < 0)
      {
        sub_22E3BB2B4(&v95, *((void **)&v105 + 1), v106);
      }
      else
      {
        v95 = *(_OWORD *)v82;
        v96 = *((_QWORD *)v82 + 2);
      }
      memset(__p, 0, sizeof(__p));
      sub_22E916C98(__p, (uint64_t)v107[0], (uint64_t)v107[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v107[1] - (char *)v107[0]) >> 5));
      v98 = v108;
      sub_22EF2D544((uint64_t)&v85, (unint64_t)v88);
      if (__p[0])
      {
        sub_22E916AE0((uint64_t *)__p);
        operator delete(__p[0]);
      }
      if (SHIBYTE(v96) < 0)
        operator delete((void *)v95);
      if (SHIBYTE(v93) < 0)
        operator delete((void *)v92);
      if (SHIBYTE(v90) < 0)
        operator delete(v89[0]);
      if (v107[0])
      {
        sub_22E916AE0(v81);
        operator delete(v107[0]);
      }
      if (SHIBYTE(v106) < 0)
        operator delete(*((void **)&v105 + 1));
      if (SHIBYTE(v103) < 0)
        operator delete((void *)v102);
      if (SHIBYTE(v100) < 0)
        operator delete((void *)v99);
      --v60;
    }
    while (v60);
  }
  sub_22F3620D0(a5, (uint64_t)v80, (uint64_t)v79, (uint64_t)&v85);
  v66 = (char *)v85;
  if ((_DWORD)v86)
  {
    v67 = 0;
    v68 = 144 * v86;
    do
    {
      v69 = (void **)&v66[v68];
      if (*(_QWORD *)&v66[v68 - 32])
      {
        sub_22E916AE0((uint64_t *)&v66[v68 - 32]);
        operator delete(*(void **)&v66[v68 - 32]);
      }
      if (*((char *)v69 - 33) < 0)
        operator delete(*(void **)&v66[v68 - 56]);
      v70 = (void **)&v66[v68];
      if (v66[v68 - 73] < 0)
        operator delete(*(v70 - 12));
      if (*((char *)v70 - 105) < 0)
        operator delete(*(v69 - 16));
      v66 -= 144;
      v67 += 144;
    }
    while (v68 != v67);
    v66 = (char *)v85;
  }
  if (v66 != v78)
    free(v66);
}

void sub_22EF4475C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 __p;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47[2];
  _QWORD v48[15];

  v48[13] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 136);
  if (!v7)
    goto LABEL_10;
  v8 = sub_22EF42AB0(v6, a2, a3);
  if (!v9)
    goto LABEL_10;
  v10 = v8 >> 33;
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v27 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v27 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v27;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) >> 47));
  v13 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v12));
  if (!(_DWORD)v13 || (v14 = (_WORD *)(*(_QWORD *)(v7 + 16) + v13), v15 = (unsigned __int16)*v14, !*v14))
  {
LABEL_10:
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 120) = 0;
    return;
  }
  v16 = v14 + 1;
  while (1)
  {
    v17 = *(_QWORD *)v16;
    v18 = (unsigned __int16)v16[4];
    v19 = (unsigned __int16)v16[5];
    v20 = v16 + 6;
    if (v17 == v12 && *v20 == (_DWORD)v10)
      break;
    v16 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v15)
      goto LABEL_10;
  }
  v28 = *(_QWORD *)(*a1 + 12);
  v21 = *(_QWORD *)(*a1 + 20);
  v23 = *(unsigned __int16 *)((char *)v20 + v18);
  v22 = v23;
  v46 = (char *)v20 + v18 + 2;
  v47[0] = (char *)v48;
  v47[1] = (char *)0x100000000;
  if (v23 >= 2)
  {
    sub_22F30BB6C((uint64_t)v47);
    goto LABEL_14;
  }
  for (; v22; --v22)
  {
LABEL_14:
    v24 = sub_22EF45E48(&v46);
    v26 = v25;
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    v40 &= 0xF0u;
    v42 = 0;
    v41 = 0uLL;
    v43 &= 0xF8u;
    v45 = 0;
    v44 = 0uLL;
    sub_22EF46198(&v46, (uint64_t)v38);
    v29[0] = v24;
    v29[1] = v26;
    if (SHIBYTE(v39) < 0)
    {
      sub_22E3BB2B4(&v30, v38[0], (unint64_t)v38[1]);
    }
    else
    {
      v30 = *(_OWORD *)v38;
      v31 = v39;
    }
    v32 = v40;
    if (SHIBYTE(v42) < 0)
    {
      sub_22E3BB2B4(&v33, (void *)v41, *((unint64_t *)&v41 + 1));
    }
    else
    {
      v33 = v41;
      v34 = v42;
    }
    v35 = v43;
    if (SHIBYTE(v45) < 0)
    {
      sub_22E3BB2B4(&__p, (void *)v44, *((unint64_t *)&v44 + 1));
    }
    else
    {
      __p = v44;
      v37 = v45;
    }
    sub_22EF2D74C((uint64_t)v47, (unint64_t)v29);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v45) < 0)
      operator delete((void *)v44);
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
  }
  sub_22F3621D0(a4, v28, v21, (uint64_t)v47);
  sub_22E916354(v47);
}

void sub_22EF44AC4(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *__p[3];
  void *v44[2];
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[40];
  void *v50[3];
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[19];

  v54[17] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 144);
  if (!v7)
    goto LABEL_10;
  v8 = sub_22EF42AB0(v6, a2, a3);
  if (!v9)
    goto LABEL_10;
  v10 = v8 >> 33;
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v31 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v31 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v31;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) >> 47));
  v13 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v12));
  if (!(_DWORD)v13 || (v14 = (_WORD *)(*(_QWORD *)(v7 + 16) + v13), v15 = (unsigned __int16)*v14, !*v14))
  {
LABEL_10:
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 152) = 0;
    return;
  }
  v16 = v14 + 1;
  while (1)
  {
    v17 = *(_QWORD *)v16;
    v18 = (unsigned __int16)v16[4];
    v19 = (unsigned __int16)v16[5];
    v20 = v16 + 6;
    if (v17 == v12 && *v20 == (_DWORD)v10)
      break;
    v16 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v15)
      goto LABEL_10;
  }
  v32 = *(_QWORD *)(*a1 + 20);
  v33 = *(_QWORD *)(*a1 + 12);
  v22 = *(unsigned __int16 *)((char *)v20 + v18);
  v21 = v22;
  v51 = (char *)v20 + v18 + 2;
  v52 = (char *)v54;
  v53 = 0x100000000;
  if (v22 >= 2)
  {
    sub_22F30BBD8((uint64_t)&v52);
    goto LABEL_15;
  }
  for (; v21; --v21)
  {
LABEL_15:
    v23 = sub_22EF45E48(&v51);
    v25 = v24;
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    v46 &= 0xF0u;
    v48 = 0;
    v47 = 0uLL;
    *(_WORD *)v49 &= 0xF000u;
    memset(&v49[8], 0, 32);
    memset(v50, 0, sizeof(v50));
    sub_22EF462D8(&v51, (uint64_t)v44);
    v34[0] = v23;
    v34[1] = v25;
    if (SHIBYTE(v45) < 0)
    {
      sub_22E3BB2B4(&v35, v44[0], (unint64_t)v44[1]);
    }
    else
    {
      v35 = *(_OWORD *)v44;
      v36 = v45;
    }
    v37 = v46;
    if (SHIBYTE(v48) < 0)
    {
      sub_22E3BB2B4(&v38, (void *)v47, *((unint64_t *)&v47 + 1));
    }
    else
    {
      v38 = v47;
      v39 = v48;
    }
    v40 = *(_OWORD *)v49;
    if ((v49[39] & 0x80000000) != 0)
    {
      sub_22E3BB2B4(&v41, *(void **)&v49[16], *(unint64_t *)&v49[24]);
    }
    else
    {
      v41 = *(_OWORD *)&v49[16];
      v42 = *(_QWORD *)&v49[32];
    }
    memset(__p, 0, sizeof(__p));
    sub_22E916C98(__p, (uint64_t)v50[0], (uint64_t)v50[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v50[1] - (char *)v50[0]) >> 5));
    sub_22EF2D7EC((uint64_t)&v52, (unint64_t)v34);
    if (__p[0])
    {
      sub_22E916AE0((uint64_t *)__p);
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    if (v50[0])
    {
      sub_22E916AE0((uint64_t *)v50);
      operator delete(v50[0]);
    }
    if ((v49[39] & 0x80000000) != 0)
      operator delete(*(void **)&v49[16]);
    if (SHIBYTE(v48) < 0)
      operator delete((void *)v47);
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
  }
  sub_22F3622D0(a4, v33, v32, (uint64_t)&v52);
  v26 = v52;
  if ((_DWORD)v53)
  {
    v27 = 0;
    v28 = 136 * v53;
    do
    {
      v29 = (void **)&v26[v28];
      if (*(_QWORD *)&v26[v28 - 24])
      {
        sub_22E916AE0((uint64_t *)&v26[v28 - 24]);
        operator delete(*(void **)&v26[v28 - 24]);
      }
      if (*((char *)v29 - 25) < 0)
        operator delete(*(void **)&v26[v28 - 48]);
      v30 = (void **)&v26[v28];
      if (v26[v28 - 65] < 0)
        operator delete(*(v30 - 11));
      if (*((char *)v30 - 97) < 0)
        operator delete(*(v29 - 15));
      v26 -= 136;
      v27 += 136;
    }
    while (v28 != v27);
    v26 = v52;
  }
  if (v26 != (char *)v54)
    free(v26);
}

void sub_22EF44F44(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 __p;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[11];

  v52[9] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 152);
  if (!v7)
    goto LABEL_10;
  v8 = sub_22EF42AB0(v6, a2, a3);
  if (!v9)
    goto LABEL_10;
  v10 = v8 >> 33;
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v36 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v36 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v36;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) >> 47));
  v13 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v12));
  if (!(_DWORD)v13 || (v14 = (_WORD *)(*(_QWORD *)(v7 + 16) + v13), v15 = (unsigned __int16)*v14, !*v14))
  {
LABEL_10:
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 88) = 0;
    return;
  }
  v16 = v14 + 1;
  while (1)
  {
    v17 = *(_QWORD *)v16;
    v18 = (unsigned __int16)v16[4];
    v19 = (unsigned __int16)v16[5];
    v20 = v16 + 6;
    if (v17 == v12 && *v20 == (_DWORD)v10)
      break;
    v16 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v15)
      goto LABEL_10;
  }
  v37 = *(_QWORD *)(*a1 + 12);
  v21 = *(_QWORD *)(*a1 + 20);
  v23 = *(unsigned __int16 *)((char *)v20 + v18);
  v22 = v23;
  v49 = (char *)v20 + v18 + 2;
  v50 = v52;
  v51 = 0x100000000;
  if (v23 >= 2)
  {
    sub_22F30C074((uint64_t)&v50);
    goto LABEL_25;
  }
  while (v22)
  {
LABEL_25:
    v27 = sub_22EF45E48(&v49);
    v29 = v28;
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    v46 &= 0xF0u;
    v48 = 0;
    v47 = 0uLL;
    sub_22EF46098(&v49, (uint64_t)v44);
    v38[0] = v27;
    v38[1] = v29;
    v30 = SHIBYTE(v45);
    if (SHIBYTE(v45) < 0)
    {
      sub_22E3BB2B4(&v39, v44[0], (unint64_t)v44[1]);
    }
    else
    {
      v39 = *(_OWORD *)v44;
      v40 = v45;
    }
    v41 = v46;
    v31 = SHIBYTE(v48);
    if (SHIBYTE(v48) < 0)
    {
      sub_22E3BB2B4(&__p, (void *)v47, *((unint64_t *)&v47 + 1));
    }
    else
    {
      __p = v47;
      v43 = v48;
    }
    v32 = sub_22EF42628((uint64_t)&v50, (unint64_t)v38, 1);
    v33 = (char *)v50 + 72 * v51;
    *(_OWORD *)v33 = *(_OWORD *)v32;
    v34 = *(_OWORD *)(v32 + 16);
    *((_QWORD *)v33 + 4) = *(_QWORD *)(v32 + 32);
    *((_OWORD *)v33 + 1) = v34;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    v33[40] = *(_BYTE *)(v32 + 40);
    v35 = *(_OWORD *)(v32 + 48);
    *((_QWORD *)v33 + 8) = *(_QWORD *)(v32 + 64);
    *((_OWORD *)v33 + 3) = v35;
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 48) = 0;
    LODWORD(v51) = v51 + 1;
    if (SHIBYTE(v43) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v40) < 0)
    {
      operator delete((void *)v39);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_35:
        if (v30 < 0)
          goto LABEL_40;
        goto LABEL_36;
      }
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete((void *)v47);
    if (v30 < 0)
LABEL_40:
      operator delete(v44[0]);
LABEL_36:
    --v22;
  }
  sub_22F3623D0(a4, v37, v21, (uint64_t)&v50);
  v24 = (char *)v50;
  if ((_DWORD)v51)
  {
    v25 = 72 * v51;
    do
    {
      v26 = (void **)&v24[v25];
      if (v24[v25 - 1] < 0)
        operator delete(*(v26 - 3));
      if (*((char *)v26 - 33) < 0)
        operator delete(*(v26 - 7));
      v25 -= 72;
    }
    while (v25);
    v24 = (char *)v50;
  }
  if (v24 != (char *)v52)
    free(v24);
}

void sub_22EF452F4(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  int v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  char v54;
  void *__p;
  char v56;
  char v57;
  uint64_t v58;
  int v59;
  void *v60[2];
  uint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char v67;
  char v68;
  void *v69;
  char v70;
  char v71;
  uint64_t v72;
  int v73;
  char *v74;
  void *v75;
  uint64_t v76;
  _QWORD v77[21];

  v77[19] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 160);
  if (!v7)
    goto LABEL_10;
  v8 = sub_22EF42AB0(v6, a2, a3);
  if (!v9)
    goto LABEL_10;
  v10 = v8 >> 33;
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v44 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v44 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v44;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) >> 47));
  v13 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v12));
  if (!(_DWORD)v13 || (v14 = (_WORD *)(*(_QWORD *)(v7 + 16) + v13), v15 = (unsigned __int16)*v14, !*v14))
  {
LABEL_10:
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 168) = 0;
    return;
  }
  v16 = v14 + 1;
  while (1)
  {
    v17 = *(_QWORD *)v16;
    v18 = (unsigned __int16)v16[4];
    v19 = (unsigned __int16)v16[5];
    v20 = v16 + 6;
    if (v17 == v12 && (_DWORD)v10 == *v20 >> 33)
      break;
    v16 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v15)
      goto LABEL_10;
  }
  v45 = *(_QWORD *)(*a1 + 20);
  v46 = *(_QWORD *)(*a1 + 12);
  v22 = *(unsigned __int16 *)((char *)v20 + v18);
  v21 = v22;
  v74 = (char *)v20 + v18 + 2;
  v75 = v77;
  v76 = 0x100000000;
  if (v22 >= 2)
  {
    sub_22F30BE6C((uint64_t)&v75);
    goto LABEL_15;
  }
  for (; v21; --v21)
  {
LABEL_15:
    v23 = sub_22EF45E48(&v74);
    v25 = v24;
    v60[0] = 0;
    v60[1] = 0;
    v61 = 0;
    v62 &= 0xF0u;
    v68 = 0;
    LOBYTE(v69) = 0;
    v71 = 0;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    LOBYTE(v66) = 0;
    v26 = v72 & 0xFC;
    LOBYTE(v72) = v72 & 0xFC;
    BYTE4(v72) = 0;
    LOBYTE(v73) = 0;
    v27 = *v74++;
    if ((v27 & 1) != 0)
      LOBYTE(v72) = v26 | v27 & 2 | 1;
    if (v27 >= 4)
    {
      HIDWORD(v72) = ((v27 >> 2) & 3) - 1;
      LOBYTE(v73) = 1;
    }
    sub_22EF45EE0(&v74, (uint64_t)v60);
    v47[0] = v23;
    v47[1] = v25;
    sub_22F30BE10((uint64_t)&v48, (uint64_t)v60);
    v58 = v72;
    v59 = v73;
    v28 = sub_22EF4283C((uint64_t)&v75, (unint64_t)v47, 1);
    v29 = (char *)v75;
    v30 = v76;
    v31 = (char *)v75 + 152 * v76;
    *(_OWORD *)v31 = *(_OWORD *)v28;
    v32 = v31 + 16;
    v33 = *(_OWORD *)(v28 + 16);
    *((_QWORD *)v31 + 4) = *(_QWORD *)(v28 + 32);
    *((_OWORD *)v31 + 1) = v33;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    v31[40] = *(_BYTE *)(v28 + 40);
    v34 = *(_OWORD *)(v28 + 48);
    *((_QWORD *)v31 + 8) = *(_QWORD *)(v28 + 64);
    *((_OWORD *)v31 + 3) = v34;
    *(_QWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 48) = 0;
    v31[72] = 0;
    v35 = v31 + 72;
    v35[24] = 0;
    if (*(_BYTE *)(v28 + 96))
    {
      v36 = *(_OWORD *)(v28 + 72);
      *((_QWORD *)v35 + 2) = *(_QWORD *)(v28 + 88);
      *(_OWORD *)v35 = v36;
      *(_QWORD *)(v28 + 80) = 0;
      *(_QWORD *)(v28 + 88) = 0;
      *(_QWORD *)(v28 + 72) = 0;
      v32[80] = 1;
    }
    v32[88] = 0;
    v32[112] = 0;
    if (*(_BYTE *)(v28 + 128))
    {
      v37 = *(_OWORD *)(v28 + 104);
      *((_QWORD *)v32 + 13) = *(_QWORD *)(v28 + 120);
      *(_OWORD *)(v32 + 88) = v37;
      *(_QWORD *)(v28 + 112) = 0;
      *(_QWORD *)(v28 + 120) = 0;
      *(_QWORD *)(v28 + 104) = 0;
      v32[112] = 1;
    }
    v38 = &v29[152 * v30];
    v39 = *(_QWORD *)(v28 + 136);
    *((_DWORD *)v38 + 36) = *(_DWORD *)(v28 + 144);
    *((_QWORD *)v38 + 17) = v39;
    LODWORD(v76) = v76 + 1;
    if (v57)
    {
      if (v56 < 0)
        operator delete(__p);
      v57 = 0;
    }
    if (v54)
    {
      if (v53 < 0)
        operator delete(v52);
      v54 = 0;
    }
    if (v51 < 0)
      operator delete(v50);
    if (v49 < 0)
      operator delete(v48);
    if (v71)
    {
      if (v70 < 0)
        operator delete(v69);
      v71 = 0;
    }
    if (v68)
    {
      if (v67 < 0)
        operator delete(v66);
      v68 = 0;
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v63);
    if (SHIBYTE(v61) < 0)
      operator delete(v60[0]);
  }
  sub_22F3624D0(a4, v46, v45, (uint64_t)&v75);
  v40 = (char *)v75;
  if ((_DWORD)v76)
  {
    v41 = 152 * v76;
    do
    {
      v42 = (void **)&v40[v41];
      if (v40[v41 - 24])
      {
        if (*((char *)v42 - 25) < 0)
          operator delete(*(v42 - 6));
        *((_BYTE *)v42 - 24) = 0;
      }
      if (*((_BYTE *)v42 - 56))
      {
        if (v40[v41 - 57] < 0)
          operator delete(*(v42 - 10));
        *((_BYTE *)v42 - 56) = 0;
      }
      v43 = (void **)&v40[v41];
      if (v40[v41 - 81] < 0)
        operator delete(*(v43 - 13));
      if (*((char *)v43 - 113) < 0)
        operator delete(*(v42 - 17));
      v41 -= 152;
    }
    while (v41);
    v40 = (char *)v75;
  }
  if (v40 != (char *)v77)
    free(v40);
}

void sub_22EF457F0(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  void *__p;
  char v53;
  char v54;
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char v63;
  char v64;
  void *v65;
  char v66;
  char v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[20];

  v72[18] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)(v6 + 168);
  if (!v7)
    goto LABEL_10;
  v8 = sub_22EF42AB0(v6, a2, a3);
  if (!v9)
    goto LABEL_10;
  v10 = v8 >> 33;
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v42 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v42 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v42;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) ^ ((0x9DDFEA08EB382D69 * (qword_253E4AB90 + 8 * v10)) >> 47))) >> 47));
  v13 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * ((*(_DWORD *)v7 - 1) & v12));
  if (!(_DWORD)v13 || (v14 = (_WORD *)(*(_QWORD *)(v7 + 16) + v13), v15 = (unsigned __int16)*v14, !*v14))
  {
LABEL_10:
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 160) = 0;
    return;
  }
  v16 = v14 + 1;
  while (1)
  {
    v17 = *(_QWORD *)v16;
    v18 = (unsigned __int16)v16[4];
    v19 = (unsigned __int16)v16[5];
    v20 = v16 + 6;
    if (v17 == v12 && (_DWORD)v10 == *v20 >> 33)
      break;
    v16 = (_WORD *)((char *)v20 + v19 + v18);
    if (!--v15)
      goto LABEL_10;
  }
  v43 = *(_QWORD *)(*a1 + 12);
  v21 = *(_QWORD *)(*a1 + 20);
  v23 = *(unsigned __int16 *)((char *)v20 + v18);
  v22 = v23;
  v69 = (char *)v20 + v18 + 2;
  v70 = v72;
  v71 = 0x100000000;
  if (v23 >= 2)
  {
    sub_22F30BF74((uint64_t)&v70);
    goto LABEL_15;
  }
  for (; v22; --v22)
  {
LABEL_15:
    v24 = sub_22EF45E48(&v69);
    v26 = v25;
    v56[0] = 0;
    v56[1] = 0;
    v57 = 0;
    v58 &= 0xF0u;
    v64 = 0;
    LOBYTE(v65) = 0;
    v67 = 0;
    LOBYTE(v68) = 0;
    BYTE4(v68) = 0;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    LOBYTE(v62) = 0;
    v27 = *v69++;
    if (v27)
    {
      LODWORD(v68) = (v27 & 3) - 1;
      BYTE4(v68) = 1;
    }
    sub_22EF45EE0(&v69, (uint64_t)v56);
    v44[0] = v24;
    v44[1] = v26;
    sub_22F30BE10((uint64_t)&v45, (uint64_t)v56);
    v55 = v68;
    v28 = sub_22EF42A48((uint64_t)&v70, (unint64_t)v44, 1);
    v29 = v70;
    v30 = v71;
    v31 = &v70[18 * v71];
    *(_OWORD *)v31 = *(_OWORD *)v28;
    v32 = v31 + 2;
    v33 = *(_OWORD *)(v28 + 16);
    v31[4] = *(_QWORD *)(v28 + 32);
    *((_OWORD *)v31 + 1) = v33;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *((_BYTE *)v31 + 40) = *(_BYTE *)(v28 + 40);
    v34 = *(_OWORD *)(v28 + 48);
    v31[8] = *(_QWORD *)(v28 + 64);
    *((_OWORD *)v31 + 3) = v34;
    *(_QWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 48) = 0;
    *((_BYTE *)v31 + 72) = 0;
    v35 = v31 + 9;
    *((_BYTE *)v35 + 24) = 0;
    if (*(_BYTE *)(v28 + 96))
    {
      v36 = *(_OWORD *)(v28 + 72);
      v35[2] = *(_QWORD *)(v28 + 88);
      *(_OWORD *)v35 = v36;
      *(_QWORD *)(v28 + 80) = 0;
      *(_QWORD *)(v28 + 88) = 0;
      *(_QWORD *)(v28 + 72) = 0;
      *((_BYTE *)v32 + 80) = 1;
    }
    *((_BYTE *)v32 + 88) = 0;
    *((_BYTE *)v32 + 112) = 0;
    if (*(_BYTE *)(v28 + 128))
    {
      v37 = *(_OWORD *)(v28 + 104);
      v32[13] = *(_QWORD *)(v28 + 120);
      *(_OWORD *)(v32 + 11) = v37;
      *(_QWORD *)(v28 + 112) = 0;
      *(_QWORD *)(v28 + 120) = 0;
      *(_QWORD *)(v28 + 104) = 0;
      *((_BYTE *)v32 + 112) = 1;
    }
    v29[18 * v30 + 17] = *(_QWORD *)(v28 + 136);
    LODWORD(v71) = v71 + 1;
    if (v54)
    {
      if (v53 < 0)
        operator delete(__p);
      v54 = 0;
    }
    if (v51)
    {
      if (v50 < 0)
        operator delete(v49);
      v51 = 0;
    }
    if (v48 < 0)
      operator delete(v47);
    if (v46 < 0)
      operator delete(v45);
    if (v67)
    {
      if (v66 < 0)
        operator delete(v65);
      v67 = 0;
    }
    if (v64)
    {
      if (v63 < 0)
        operator delete(v62);
      v64 = 0;
    }
    if (SHIBYTE(v61) < 0)
      operator delete(v59);
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
  }
  sub_22F3625D0(a4, v43, v21, (uint64_t)&v70);
  v38 = (char *)v70;
  if ((_DWORD)v71)
  {
    v39 = 144 * v71;
    do
    {
      v40 = (void **)&v38[v39];
      if (v38[v39 - 16])
      {
        if (*((char *)v40 - 17) < 0)
          operator delete(*(v40 - 5));
        *((_BYTE *)v40 - 16) = 0;
      }
      if (*((_BYTE *)v40 - 48))
      {
        if (v38[v39 - 49] < 0)
          operator delete(*(v40 - 9));
        *((_BYTE *)v40 - 48) = 0;
      }
      v41 = (void **)&v38[v39];
      if (v38[v39 - 73] < 0)
        operator delete(*(v41 - 12));
      if (*((char *)v41 - 105) < 0)
        operator delete(*(v40 - 16));
      v39 -= 144;
    }
    while (v39);
    v38 = (char *)v70;
  }
  if (v38 != (char *)v72)
    free(v38);
}

uint64_t sub_22EF45CAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
    MEMORY[0x2348A0E9C](v2, 0x1050C407EF653B9);
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    MEMORY[0x2348A0E9C](v3, 0x1050C407EF653B9);
  v4 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v4)
    MEMORY[0x2348A0E9C](v4, 0x1050C407EF653B9);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v5)
    MEMORY[0x2348A0E9C](v5, 0x1050C407EF653B9);
  v6 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v6)
    MEMORY[0x2348A0E9C](v6, 0x1050C407EF653B9);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v7)
    MEMORY[0x2348A0E9C](v7, 0x1050C407EF653B9);
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v8)
    MEMORY[0x2348A0E9C](v8, 0x1050C407EF653B9);
  v9 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v9)
    MEMORY[0x2348A0E9C](v9, 0x1050C407EF653B9);
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v10)
    MEMORY[0x2348A0E9C](v10, 0x1050C407EF653B9);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v11)
    MEMORY[0x2348A0E9C](v11, 0x1050C407EF653B9);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v12)
    MEMORY[0x2348A0E9C](v12, 0x1050C407EF653B9);
  if (*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

unint64_t sub_22EF45E48(_QWORD *a1)
{
  char *v2;
  char v3;
  unint64_t result;
  int v5;
  uint64_t v6;

  v2 = (char *)(*a1)++;
  v3 = *v2;
  result = *(unsigned int *)(v2 + 1);
  *a1 = v2 + 5;
  v5 = v3 & 3;
  if ((v3 & 3) != 0)
  {
    v6 = *(unsigned int *)(v2 + 5);
    *a1 = v2 + 9;
    if (v5 == 1)
    {
      result |= (v6 << 32) | 0x8000000000000000;
    }
    else
    {
      *a1 = v2 + 13;
      if (v5 != 2)
        *a1 = v2 + 17;
      result |= (v6 << 32) | 0x8000000000000000;
    }
  }
  return result;
}

void sub_22EF45EE0(char **a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  unsigned int v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  std::string::size_type v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string __dst;
  std::string __p;
  char v21;

  sub_22EF46098(a1, a2);
  v5 = *a1 + 2;
  v4 = *(unsigned __int16 *)*a1;
  *a1 = v5;
  if (!v4)
    goto LABEL_14;
  v6 = v4 - 1;
  v7 = v6;
  if (v6 >= 0x17uLL)
  {
    v9 = (v6 & 0xFFFFFFF8) + 8;
    if ((v7 | 7) == 0x17)
      v10 = v9;
    else
      v10 = v7 | 7;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_9:
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  __p = __dst;
  v21 = 1;
  sub_22E91703C((std::string *)(a2 + 56), &__p);
  if (v21 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = &(*a1)[v7];
  *a1 = v5;
LABEL_14:
  v13 = *(unsigned __int16 *)v5;
  v12 = v5 + 2;
  v11 = v13;
  *a1 = v12;
  if (!v13)
    return;
  v14 = v11 - 1;
  v15 = v14;
  if (v14 >= 0x17uLL)
  {
    v17 = (v14 & 0xFFFFFFF8) + 8;
    if ((v15 | 7) == 0x17)
      v18 = v17;
    else
      v18 = v15 | 7;
    v16 = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
    v16 = &__dst;
    if (!v14)
      goto LABEL_23;
  }
  memmove(v16, v12, v15);
LABEL_23:
  v16->__r_.__value_.__s.__data_[v15] = 0;
  __p = __dst;
  v21 = 1;
  sub_22E91703C((std::string *)(a2 + 88), &__p);
  if (v21)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 += v15;
}

double sub_22EF46098(char **a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  void **v12;
  double result;
  __int128 v14;
  uint64_t v15;

  v4 = (*a1)++;
  v5 = *v4;
  if ((v5 & 4) != 0)
    v6 = v5 & 8 | *(_BYTE *)(a2 + 24) & 0xF0 | ((v5 & 2) != 0) | (2 * (v5 & 1)) & 0xF3 | 4;
  else
    v6 = *(_BYTE *)(a2 + 24) & 0xFC | ((v5 & 2) != 0) | (2 * (v5 & 1));
  *(_BYTE *)(a2 + 24) = v6;
  v7 = *a1 + 2;
  v8 = *(unsigned __int16 *)*a1;
  *a1 = v7;
  sub_22E3B4274(&v14, v7, &v7[v8], v8);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  v9 = &(*a1)[v8];
  *a1 = v9;
  v11 = *(unsigned __int16 *)v9;
  v9 += 2;
  v10 = v11;
  *a1 = v9;
  sub_22E3B4274(&v14, v9, &v9[v11], v11);
  v12 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v12);
  result = *(double *)&v14;
  *(_OWORD *)v12 = v14;
  *(_QWORD *)(a2 + 48) = v15;
  *a1 += v10;
  return result;
}

void sub_22EF46198(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  std::string __str;

  sub_22EF46098(a1, a2);
  v4 = *a1;
  v5 = *a1 + 1;
  *a1 = v5;
  if (*v4)
  {
    *(_BYTE *)(a2 + 56) = *(_BYTE *)(a2 + 56) & 0xF8 | (2 * (*v5 & 3)) | 1;
    v5 = *a1;
  }
  *a1 = v5 + 1;
  v6 = *(unsigned __int16 *)(v5 + 1);
  *a1 = v5 + 3;
  sub_22EF46248(&__str, v5 + 3, &v5[v6 + 3], v6);
  std::string::operator=((std::string *)(a2 + 64), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *a1 += v6;
}

_QWORD *sub_22EF46248(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

double sub_22EF462D8(char **a1, uint64_t a2)
{
  unsigned int v4;
  __int16 v5;
  __int16 v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  void **v34;
  double result;
  void *v36[2];
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  void *__p;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;

  sub_22EF46098(a1, a2);
  v4 = *(*a1)++;
  if ((v4 & 7) != 0)
    v5 = *(_WORD *)(a2 + 56) & 0xF1FF | ((v4 & 7) << 9);
  else
    v5 = *(_WORD *)(a2 + 56);
  *(_WORD *)(a2 + 56) = v5 & 0xFFFE | (v4 >> 3) & 1;
  v6 = *(*a1)++;
  *(_WORD *)(a2 + 56) = *(_WORD *)(a2 + 56) & 0xFE01 | (2 * v6);
  v7 = *a1;
  v8 = *(_QWORD *)*a1;
  *a1 += 8;
  *(_QWORD *)(a2 + 64) = v8;
  v9 = *((unsigned __int16 *)v7 + 4);
  v10 = v7 + 10;
  *a1 = v7 + 10;
  if (v9)
  {
    v11 = (_QWORD *)(a2 + 96);
    do
    {
      v36[0] = 0;
      v36[1] = 0;
      v37 = 0;
      v38 &= 0xF0u;
      v40 = 0;
      v39 = 0uLL;
      v41 &= 0xF8u;
      v43 = 0;
      v42 = 0uLL;
      v44 &= 0xE0u;
      sub_22EF46198(a1, (uint64_t)v36);
      v12 = *(*a1)++;
      if ((v12 & 7) != 0)
        v44 = v44 & 0xE3 | (4 * (v12 & 7));
      if ((v12 & 8) != 0)
        v44 = (v12 >> 3) & 2 | v44 & 0xFC | 1;
      v14 = *(_QWORD *)(a2 + 104);
      v13 = *(_QWORD *)(a2 + 112);
      if (v14 >= v13)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 5);
        v17 = v16 + 1;
        if (v16 + 1 > 0x2AAAAAAAAAAAAAALL)
          abort();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 5);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x155555555555555)
          v19 = 0x2AAAAAAAAAAAAAALL;
        else
          v19 = v17;
        v49 = a2 + 112;
        if (v19)
        {
          if (v19 > 0x2AAAAAAAAAAAAAALL)
            sub_22E3B3F8C();
          v20 = (char *)operator new(96 * v19);
        }
        else
        {
          v20 = 0;
        }
        v26 = &v20[96 * v16];
        __p = v20;
        v46 = v26;
        v48 = &v20[96 * v19];
        if (SHIBYTE(v37) < 0)
        {
          sub_22E3BB2B4(&v20[96 * v16], v36[0], (unint64_t)v36[1]);
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v36;
          *((_QWORD *)v26 + 2) = v37;
        }
        v26[24] = v38;
        v27 = v26 + 32;
        if (SHIBYTE(v40) < 0)
        {
          sub_22E3BB2B4(v27, (void *)v39, *((unint64_t *)&v39 + 1));
        }
        else
        {
          *(_OWORD *)v27 = v39;
          *((_QWORD *)v26 + 6) = v40;
        }
        v26[56] = v41;
        v28 = v26 + 64;
        if (SHIBYTE(v43) < 0)
        {
          sub_22E3BB2B4(v28, (void *)v42, *((unint64_t *)&v42 + 1));
        }
        else
        {
          *(_OWORD *)v28 = v42;
          *((_QWORD *)v26 + 10) = v43;
        }
        v20[96 * v16 + 88] = v44;
        v47 = v26 + 96;
        v11 = (_QWORD *)(a2 + 96);
        sub_22EF46718((uint64_t *)(a2 + 96), &__p);
        v25 = *(_QWORD *)(a2 + 104);
        v29 = v46;
        while (1)
        {
          v30 = v47;
          if (v47 == v29)
            break;
          v47 -= 96;
          if (*(v30 - 9) < 0)
            operator delete(*((void **)v30 - 4));
          if (*(v30 - 41) < 0)
            operator delete(*((void **)v30 - 8));
          if (*(v30 - 73) < 0)
            operator delete(*((void **)v30 - 12));
        }
        if (__p)
          operator delete(__p);
      }
      else
      {
        if (SHIBYTE(v37) < 0)
        {
          sub_22E3BB2B4(*(_BYTE **)(a2 + 104), v36[0], (unint64_t)v36[1]);
        }
        else
        {
          v15 = *(_OWORD *)v36;
          *(_QWORD *)(v14 + 16) = v37;
          *(_OWORD *)v14 = v15;
        }
        *(_BYTE *)(v14 + 24) = v38;
        v21 = (_BYTE *)(v14 + 32);
        if (SHIBYTE(v40) < 0)
        {
          sub_22E3BB2B4(v21, (void *)v39, *((unint64_t *)&v39 + 1));
        }
        else
        {
          v22 = v39;
          *(_QWORD *)(v14 + 48) = v40;
          *(_OWORD *)v21 = v22;
        }
        *(_BYTE *)(v14 + 56) = v41;
        v23 = (_BYTE *)(v14 + 64);
        if (SHIBYTE(v43) < 0)
        {
          sub_22E3BB2B4(v23, (void *)v42, *((unint64_t *)&v42 + 1));
        }
        else
        {
          v24 = v42;
          *(_QWORD *)(v14 + 80) = v43;
          *(_OWORD *)v23 = v24;
        }
        *(_BYTE *)(v14 + 88) = v44;
        v25 = v14 + 96;
      }
      *(_QWORD *)(a2 + 104) = v25;
      if (SHIBYTE(v43) < 0)
        operator delete((void *)v42);
      if (SHIBYTE(v40) < 0)
        operator delete((void *)v39);
      if (SHIBYTE(v37) < 0)
        operator delete(v36[0]);
      --v9;
    }
    while (v9);
    v10 = *a1;
  }
  v33 = *(unsigned __int16 *)v10;
  v31 = v10 + 2;
  v32 = v33;
  *a1 = v31;
  sub_22EF46248(v36, v31, &v31[v33], v33);
  v34 = (void **)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*v34);
  result = *(double *)v36;
  *(_OWORD *)v34 = *(_OWORD *)v36;
  *(_QWORD *)(a2 + 88) = v37;
  *a1 += v32;
  return result;
}

uint64_t *sub_22EF46718(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 96;
      v6 = *(_OWORD *)(v3 - 96);
      *(_QWORD *)(v4 - 80) = *(_QWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 96) = v6;
      *(_QWORD *)(v3 - 88) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      *(_QWORD *)(v3 - 96) = 0;
      *(_BYTE *)(v4 - 72) = *(_BYTE *)(v3 - 72);
      v7 = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 64) = v7;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 64) = 0;
      *(_BYTE *)(v4 - 40) = *(_BYTE *)(v3 - 40);
      v8 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v8;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v3 - 8);
      v3 -= 96;
      v4 -= 96;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_22EF467E4(llvm *a1)
{
  llvm::raw_ostream *v2;
  _BYTE v3[128];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::yaml::Output::Output((llvm::yaml::Output *)v3, v2, 0);
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)v3);
  if (llvm::yaml::Output::preflightDocument((llvm::yaml::Output *)v3))
  {
    sub_22EF469C4((llvm::yaml::IO *)v3, (uint64_t)a1);
    llvm::yaml::Output::postflightDocument((llvm::yaml::Output *)v3);
  }
  llvm::yaml::Output::endDocuments((llvm::yaml::Output *)v3);
  llvm::yaml::Output::~Output((llvm::yaml::Output *)v3);
}

BOOL sub_22EF46888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v6;
  _QWORD v8[40];

  v8[39] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x23489EC4C](v8, a1, a2, 0, a4, a5);
  llvm::yaml::Input::setCurrentDocument((llvm::yaml::Input *)v8);
  sub_22EF469C4((llvm::yaml::IO *)v8, a3);
  v6 = llvm::yaml::Input::error((llvm::yaml::Input *)v8) != 0;
  MEMORY[0x23489EC58](v8);
  return v6;
}

_QWORD *sub_22EF46924(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = a1[26];
  if (v2)
  {
    v3 = a1[27];
    v4 = (void *)a1[26];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 184;
        sub_22EF4AD2C((_QWORD *)(v3 - 168));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[26];
    }
    a1[27] = v2;
    operator delete(v4);
  }
  sub_22EF4AD2C(a1 + 5);
  return a1;
}

uint64_t sub_22EF46990(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return llvm::SMDiagnostic::print(a1, 0, v2);
}

uint64_t sub_22EF469C4(llvm::yaml::IO *a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
  sub_22F362834(a1, (uint64_t)"Name");
  LODWORD(v30[0]) = 0;
  sub_22EF46EDC((uint64_t)a1, (_DWORD *)(a2 + 16), v30);
  v30[0] = "";
  v30[1] = 0;
  sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", a2 + 24, (uint64_t)v30);
  LOWORD(v30[0]) = 0;
  sub_22EF48BB8(a1, (uint64_t)"SwiftInferImportAsMember", a2 + 232, v30);
  sub_22EF471A0(a1, (_QWORD *)(a2 + 40));
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1)
    || *(_QWORD *)(a2 + 208) != *(_QWORD *)(a2 + 216))
  {
    v32 = 0;
    v31 = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "SwiftVersions", 0, 0, &v31, &v32))
    {
      v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v4 = -373475417 * ((*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
      if (v4)
      {
        v5 = 0;
        v6 = v4;
        do
        {
          v30[0] = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, _QWORD *))(*(_QWORD *)a1 + 32))(a1, v5, v30))
          {
            v8 = *(char **)(a2 + 208);
            v7 = *(char **)(a2 + 216);
            v9 = (char *)(v7 - v8);
            v10 = 0xD37A6F4DE9BD37A7 * ((v7 - v8) >> 3);
            if (v10 <= v5)
            {
              v11 = v5 + 1;
              v12 = v5 + 1 - v10;
              v13 = *(_QWORD *)(a2 + 224);
              if (0xD37A6F4DE9BD37A7 * ((v13 - (uint64_t)v7) >> 3) >= v12)
              {
                bzero(*(void **)(a2 + 216), 184 * ((184 * v5 - (unint64_t)v9) / 0xB8) + 184);
                *(_QWORD *)(a2 + 216) = &v7[184 * v12];
              }
              else
              {
                v14 = 0xD37A6F4DE9BD37A7 * ((v13 - (uint64_t)v8) >> 3);
                v15 = 2 * v14;
                if (2 * v14 <= v11)
                  v15 = v5 + 1;
                if (v14 >= 0xB21642C8590B21)
                  v16 = 0x1642C8590B21642;
                else
                  v16 = v15;
                if (v16 > 0x1642C8590B21642)
                  sub_22E3B3F8C();
                v28 = 184 * v16;
                v17 = (char *)operator new(184 * v16);
                v18 = &v17[8 * ((v7 - v8) >> 3)];
                v29 = &v17[v28];
                bzero(v18, 184 * ((184 * v5 - (unint64_t)v9) / 0xB8) + 184);
                v19 = &v17[184 * v11];
                if (v7 == v8)
                {
                  *(_QWORD *)(a2 + 208) = v18;
                  *(_QWORD *)(a2 + 216) = v19;
                  *(_QWORD *)(a2 + 224) = v29;
                }
                else
                {
                  v20 = 0;
                  do
                  {
                    v21 = &v18[v20];
                    v22 = &v7[v20];
                    v23 = *(_OWORD *)&v7[v20 - 184];
                    *((_QWORD *)v21 - 20) = 0;
                    *((_QWORD *)v21 - 19) = 0;
                    *(_OWORD *)(v21 - 184) = v23;
                    *((_QWORD *)v21 - 21) = 0;
                    *(_OWORD *)(v21 - 168) = *(_OWORD *)&v7[v20 - 168];
                    *((_QWORD *)v21 - 19) = *(_QWORD *)&v7[v20 - 152];
                    *((_QWORD *)v22 - 21) = 0;
                    *((_QWORD *)v22 - 20) = 0;
                    *((_QWORD *)v22 - 19) = 0;
                    *((_QWORD *)v21 - 18) = 0;
                    *((_QWORD *)v21 - 17) = 0;
                    *((_QWORD *)v21 - 16) = 0;
                    *((_OWORD *)v21 - 9) = *(_OWORD *)&v7[v20 - 144];
                    *((_QWORD *)v21 - 16) = *(_QWORD *)&v7[v20 - 128];
                    *((_QWORD *)v22 - 18) = 0;
                    *((_QWORD *)v22 - 17) = 0;
                    *((_QWORD *)v22 - 16) = 0;
                    *((_QWORD *)v21 - 15) = 0;
                    *((_QWORD *)v21 - 14) = 0;
                    *((_QWORD *)v21 - 13) = 0;
                    *(_OWORD *)(v21 - 120) = *(_OWORD *)&v7[v20 - 120];
                    *((_QWORD *)v21 - 13) = *(_QWORD *)&v7[v20 - 104];
                    *((_QWORD *)v22 - 15) = 0;
                    *((_QWORD *)v22 - 14) = 0;
                    *((_QWORD *)v22 - 13) = 0;
                    *((_QWORD *)v21 - 12) = 0;
                    *((_QWORD *)v21 - 11) = 0;
                    *((_QWORD *)v21 - 10) = 0;
                    *((_OWORD *)v21 - 6) = *(_OWORD *)&v7[v20 - 96];
                    *((_QWORD *)v21 - 10) = *(_QWORD *)&v7[v20 - 80];
                    *((_QWORD *)v22 - 12) = 0;
                    *((_QWORD *)v22 - 11) = 0;
                    *((_QWORD *)v22 - 10) = 0;
                    *((_QWORD *)v21 - 9) = 0;
                    *((_QWORD *)v21 - 8) = 0;
                    *((_QWORD *)v21 - 7) = 0;
                    *(_OWORD *)(v21 - 72) = *(_OWORD *)&v7[v20 - 72];
                    *((_QWORD *)v21 - 7) = *(_QWORD *)&v7[v20 - 56];
                    *((_QWORD *)v22 - 9) = 0;
                    *((_QWORD *)v22 - 8) = 0;
                    *((_QWORD *)v22 - 7) = 0;
                    *((_QWORD *)v21 - 6) = 0;
                    *((_QWORD *)v21 - 5) = 0;
                    *((_QWORD *)v21 - 4) = 0;
                    *((_OWORD *)v21 - 3) = *(_OWORD *)&v7[v20 - 48];
                    *((_QWORD *)v21 - 4) = *(_QWORD *)&v7[v20 - 32];
                    *((_QWORD *)v22 - 6) = 0;
                    *((_QWORD *)v22 - 5) = 0;
                    *((_QWORD *)v22 - 4) = 0;
                    *((_QWORD *)v21 - 3) = 0;
                    *((_QWORD *)v21 - 2) = 0;
                    *((_QWORD *)v21 - 1) = 0;
                    *(_OWORD *)(v21 - 24) = *(_OWORD *)&v7[v20 - 24];
                    *((_QWORD *)v21 - 1) = *(_QWORD *)&v7[v20 - 8];
                    *((_QWORD *)v22 - 3) = 0;
                    *((_QWORD *)v22 - 2) = 0;
                    *((_QWORD *)v22 - 1) = 0;
                    v20 -= 184;
                  }
                  while (&v7[v20] != v8);
                  v7 = *(char **)(a2 + 208);
                  v24 = *(char **)(a2 + 216);
                  *(_QWORD *)(a2 + 208) = &v18[v20];
                  *(_QWORD *)(a2 + 216) = v19;
                  *(_QWORD *)(a2 + 224) = v29;
                  if (v24 != v7)
                  {
                    do
                    {
                      v25 = v24 - 184;
                      sub_22EF4AD2C((_QWORD *)v24 - 21);
                      v24 = v25;
                    }
                    while (v25 != v7);
                  }
                }
                if (v7)
                  operator delete(v7);
              }
            }
            v26 = *(_QWORD *)(a2 + 208) + 184 * v5;
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
            sub_22F3631AC(a1);
            sub_22EF471A0(a1, (_QWORD *)(v26 + 16));
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 112))(a1);
            (*(void (**)(llvm::yaml::IO *, _QWORD))(*(_QWORD *)a1 + 40))(a1, v30[0]);
          }
          ++v5;
        }
        while (v5 != v6);
      }
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v32);
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t sub_22EF46EDC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == *a3)
    v7 = v6;
  else
    v7 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Availability", 0, v7, &v25, &v26);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 1)
      v10 = v9;
    else
      v10 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "OSX", v10))
      *a2 = 1;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 2)
      v12 = v11;
    else
      v12 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "iOS", v12))
      *a2 = 2;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 3)
      v14 = v13;
    else
      v14 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "TVOS", v14))
      *a2 = 3;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 4)
      v16 = v15;
    else
      v16 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "WatchOS", v16))
      *a2 = 4;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 5)
      v18 = v17;
    else
      v18 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "BridgeOS", v18))
      *a2 = 5;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 6)
      v20 = v19;
    else
      v20 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v20))
      *a2 = 6;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2 == 7)
      v22 = v21;
    else
      v22 = 0;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "nonswift", v22))
      *a2 = 7;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (*a2)
      v24 = 0;
    else
      v24 = v23;
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "available", v24))
      *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v26);
  }
  else if (v25)
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t sub_22EF471A0(llvm::yaml::IO *a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  __n128 v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __n128 v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t i;
  _BYTE *v59;
  _BYTE *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  __n128 v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  _DWORD *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t CurrentNode;
  _QWORD *v105;
  unint64_t v106;
  uint64_t last_not_of;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  uint64_t v111;
  unsigned int v112;
  _BYTE *v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  uint64_t result;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  int64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  __n128 v161;
  _DWORD *v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  BOOL v171;
  char *v172;
  char *v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  __n128 v184;
  uint64_t v185;
  char v186;
  uint64_t v187;

  v2 = a2;
  sub_22EF48EA0(a1, (uint64_t)"Classes", a2);
  sub_22EF48EA0(a1, (uint64_t)"Protocols", v2 + 3);
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1) || v2[6] != v2[7])
  {
    v183 = 0;
    LOBYTE(v182) = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Functions", 0, 0, &v182, &v183))
    {
      v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v4 = -858993459 * ((v2[7] - v2[6]) >> 5);
      if (v4)
      {
        v5 = 0;
        v6 = v4;
        do
        {
          v187 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v5, &v187))
          {
            v7 = (char *)v2[6];
            v8 = (char *)v2[7];
            v9 = (char *)(v8 - v7);
            v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 5);
            if (v10 <= v5)
            {
              v11 = v5 + 1;
              v12 = v5 + 1 - v10;
              v13 = v2[8];
              if (0xCCCCCCCCCCCCCCCDLL * ((v13 - (uint64_t)v8) >> 5) >= v12)
              {
                bzero((void *)v2[7], 160 * ((160 * v5 - (unint64_t)v9) / 0xA0) + 160);
                v2[7] = &v8[160 * v12];
              }
              else
              {
                v174 = v2;
                v14 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (uint64_t)v7) >> 5);
                v15 = 2 * v14;
                if (2 * v14 <= v11)
                  v15 = v5 + 1;
                if (v14 >= 0xCCCCCCCCCCCCCCLL)
                  v16 = 0x199999999999999;
                else
                  v16 = v15;
                if (v16 > 0x199999999999999)
LABEL_261:
                  sub_22E3B3F8C();
                v17 = 5 * v16;
                v18 = (char *)operator new(160 * v16);
                v19 = &v18[32 * ((v8 - v7) >> 5)];
                v172 = &v18[32 * v17];
                bzero(v19, 160 * ((160 * v5 - (unint64_t)v9) / 0xA0) + 160);
                v20 = &v18[160 * v11];
                if (v8 == v7)
                {
                  v2 = v174;
                  v174[6] = v19;
                  v174[7] = v20;
                  v174[8] = v172;
                }
                else
                {
                  v2 = v174;
                  v21 = 0;
                  do
                  {
                    v22 = &v8[v21];
                    v23 = &v19[v21];
                    *((_OWORD *)v23 - 10) = *(_OWORD *)&v8[v21 - 160];
                    *((_QWORD *)v23 - 17) = 0;
                    *((_QWORD *)v23 - 16) = 0;
                    *((_QWORD *)v23 - 18) = 0;
                    *((_OWORD *)v23 - 9) = *(_OWORD *)&v8[v21 - 144];
                    *((_QWORD *)v23 - 16) = *(_QWORD *)&v8[v21 - 128];
                    *((_QWORD *)v22 - 18) = 0;
                    *((_QWORD *)v22 - 17) = 0;
                    *((_QWORD *)v22 - 16) = 0;
                    *((_QWORD *)v23 - 15) = 0;
                    *((_QWORD *)v23 - 14) = 0;
                    *((_QWORD *)v23 - 13) = 0;
                    *(_OWORD *)(v23 - 120) = *(_OWORD *)&v8[v21 - 120];
                    *((_QWORD *)v23 - 13) = *(_QWORD *)&v8[v21 - 104];
                    *((_QWORD *)v22 - 14) = 0;
                    *((_QWORD *)v22 - 13) = 0;
                    *((_QWORD *)v22 - 15) = 0;
                    v24 = *(_OWORD *)&v8[v21 - 16];
                    v26 = *(_OWORD *)&v8[v21 - 64];
                    v25 = *(_OWORD *)&v8[v21 - 48];
                    *((_OWORD *)v23 - 2) = *(_OWORD *)&v8[v21 - 32];
                    *((_OWORD *)v23 - 1) = v24;
                    *((_OWORD *)v23 - 4) = v26;
                    *((_OWORD *)v23 - 3) = v25;
                    v27 = *(_OWORD *)&v8[v21 - 80];
                    *((_OWORD *)v23 - 6) = *(_OWORD *)&v8[v21 - 96];
                    *((_OWORD *)v23 - 5) = v27;
                    v21 -= 160;
                  }
                  while (&v8[v21] != v7);
                  v8 = (char *)v174[6];
                  v28 = (char *)v174[7];
                  v174[6] = &v19[v21];
                  v174[7] = v20;
                  v174[8] = v172;
                  while (v28 != v8)
                  {
                    v28 -= 160;
                    sub_22EF4AB88(v28);
                  }
                }
                if (v8)
                  operator delete(v8);
              }
            }
            v29 = v2;
            v30 = v2[6];
            v31 = v30 + 160 * v5;
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
            sub_22F362834(a1, (uint64_t)"Name");
            sub_22EF4A158(a1, (void **)(v31 + 16));
            v32 = (_DWORD *)(v31 + 40);
            if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1)
              || *(_QWORD *)v32 != *(_QWORD *)(v30 + 160 * v5 + 48))
            {
              sub_22F362AB0((uint64_t)a1, v32);
            }
            v33 = v30 + 160 * v5;
            v184.n128_u16[0] = 0;
            sub_22EF4A780(a1, (uint64_t)"NullabilityOfRet", (_BYTE *)(v33 + 64), &v184);
            v184.n128_u64[0] = 0;
            sub_22EF4A928(a1, v33 + 68, &v184);
            v184.n128_u32[0] = 0;
            sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v33 + 80), &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v33 + 88, (uint64_t)&v184);
            v184.n128_u16[0] = 0;
            sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v33 + 104, &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            sub_22F3628A4(a1, (uint64_t)"SwiftName", v33 + 112, (uint64_t)&v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            v34 = sub_22F3628A4(a1, (uint64_t)"ResultType", v33 + 144, (uint64_t)&v184);
            (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v34);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v187);
            v2 = v29;
          }
          ++v5;
        }
        while (v5 != v6);
      }
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v183);
    }
  }
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1) || v2[9] != v2[10])
  {
    v183 = 0;
    LOBYTE(v182) = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Globals", 0, 0, &v182, &v183))
    {
      v35 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v35 = -1171354717 * ((v2[10] - v2[9]) >> 3);
      if (v35)
      {
        v36 = 0;
        v37 = v35;
        do
        {
          v187 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v36, &v187))
          {
            v39 = (_BYTE *)v2[9];
            v38 = (_BYTE *)v2[10];
            v40 = v38 - v39;
            v41 = 0x2E8BA2E8BA2E8BA3 * ((v38 - v39) >> 3);
            if (v41 <= v36)
            {
              v42 = v36 + 1;
              v43 = v36 + 1 - v41;
              v44 = v2[11];
              if (0x2E8BA2E8BA2E8BA3 * ((v44 - (uint64_t)v38) >> 3) >= v43)
              {
                bzero((void *)v2[10], 88 * ((88 * v36 - v40) / 0x58) + 88);
                v2[10] = &v38[88 * v43];
              }
              else
              {
                v45 = 0x2E8BA2E8BA2E8BA3 * ((v44 - (uint64_t)v39) >> 3);
                v46 = 2 * v45;
                if (2 * v45 <= v42)
                  v46 = v36 + 1;
                if (v45 >= 0x1745D1745D1745DLL)
                  v47 = 0x2E8BA2E8BA2E8BALL;
                else
                  v47 = v46;
                if (v47 > 0x2E8BA2E8BA2E8BALL)
                  goto LABEL_261;
                v175 = 88 * v47;
                v173 = (char *)operator new(88 * v47);
                v48 = &v173[8 * ((v38 - v39) >> 3)];
                bzero(v48, 88 * ((88 * v36 - v40) / 0x58) + 88);
                if (v38 == v39)
                {
                  v49 = &v173[8 * ((v38 - v39) >> 3)];
                }
                else
                {
                  do
                  {
                    v50 = *(_OWORD *)(v38 - 88);
                    *(_OWORD *)(v48 - 72) = *(_OWORD *)(v38 - 72);
                    *(_OWORD *)(v48 - 88) = v50;
                    v51 = *(_OWORD *)(v38 - 56);
                    v52 = *(_OWORD *)(v38 - 40);
                    v53 = *(_OWORD *)(v38 - 24);
                    v49 = v48 - 88;
                    *((_QWORD *)v48 - 1) = *((_QWORD *)v38 - 1);
                    *(_OWORD *)(v48 - 24) = v53;
                    *(_OWORD *)(v48 - 40) = v52;
                    *(_OWORD *)(v48 - 56) = v51;
                    v38 -= 88;
                    v48 -= 88;
                  }
                  while (v38 != v39);
                }
                v2[9] = v49;
                v2[10] = &v173[88 * v42];
                v2[11] = &v173[v175];
                if (v39)
                  operator delete(v39);
              }
            }
            v54 = v2[9] + 88 * v36;
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
            sub_22F362834(a1, (uint64_t)"Name");
            v184.n128_u16[0] = 0;
            sub_22EF4A780(a1, (uint64_t)"Nullability", (_BYTE *)(v54 + 16), &v184);
            v184.n128_u32[0] = 0;
            sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v54 + 24), &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v54 + 32, (uint64_t)&v184);
            v184.n128_u16[0] = 0;
            sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v54 + 48, &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            sub_22F3628A4(a1, (uint64_t)"SwiftName", v54 + 56, (uint64_t)&v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            v55 = sub_22F3628A4(a1, (uint64_t)"Type", v54 + 72, (uint64_t)&v184);
            (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v55);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v187);
          }
          ++v36;
        }
        while (v36 != v37);
      }
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v183);
    }
  }
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1) || v2[12] != v2[13])
  {
    v183 = 0;
    LOBYTE(v182) = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Enumerators", 0, 0, &v182, &v183))
    {
      v56 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v57 = ((v2[13] - v2[12]) >> 6);
      else
        v57 = v56;
      if ((_DWORD)v57)
      {
        for (i = 0; i != v57; ++i)
        {
          v187 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, i, &v187))
          {
            v59 = (_BYTE *)v2[12];
            v60 = (_BYTE *)v2[13];
            v61 = v60 - v59;
            v62 = (v60 - v59) >> 6;
            if (v62 <= i)
            {
              v63 = i << 6;
              v64 = i + 1 - v62;
              v65 = v2[14];
              if (v64 <= (v65 - (uint64_t)v60) >> 6)
              {
                bzero((void *)v2[13], ((v63 - v61) & 0xFFFFFFFFFFFFFFC0) + 64);
                v2[13] = &v60[64 * v64];
              }
              else
              {
                v66 = v65 - (_QWORD)v59;
                v67 = v66 >> 5;
                if (v66 >> 5 <= i + 1)
                  v67 = i + 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFC0)
                  v68 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v68 = v67;
                if (v68 >> 58)
                  goto LABEL_261;
                v176 = (char *)operator new(v68 << 6);
                v69 = &v176[64 * v62];
                bzero(v69, ((v63 - v61) & 0xFFFFFFFFFFFFFFC0) + 64);
                if (v60 == v59)
                {
                  v70 = v69;
                  v71 = i + 1;
                }
                else
                {
                  v71 = i + 1;
                  do
                  {
                    v72 = *((_OWORD *)v60 - 4);
                    v73 = *((_OWORD *)v60 - 3);
                    v74 = *((_OWORD *)v60 - 1);
                    v70 = v69 - 64;
                    *((_OWORD *)v69 - 2) = *((_OWORD *)v60 - 2);
                    *((_OWORD *)v69 - 1) = v74;
                    *((_OWORD *)v69 - 4) = v72;
                    *((_OWORD *)v69 - 3) = v73;
                    v60 -= 64;
                    v69 -= 64;
                  }
                  while (v60 != v59);
                }
                v2[12] = v70;
                v2[13] = &v176[64 * v71];
                v2[14] = &v176[64 * v68];
                if (v59)
                  operator delete(v59);
              }
            }
            v75 = v2[12] + (i << 6);
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
            sub_22F362834(a1, (uint64_t)"Name");
            v184.n128_u32[0] = 0;
            sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v75 + 16), &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v75 + 24, (uint64_t)&v184);
            v184.n128_u16[0] = 0;
            sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v75 + 40, &v184);
            v184.n128_u64[0] = (unint64_t)"";
            v184.n128_u64[1] = 0;
            v76 = sub_22F3628A4(a1, (uint64_t)"SwiftName", v75 + 48, (uint64_t)&v184);
            (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v76);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v187);
          }
        }
      }
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v183);
    }
  }
  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1) || v2[15] != v2[16])
  {
    v182 = 0;
    v181 = 0;
    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Tags", 0, 0, &v181, &v182))
    {
      v77 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v77 = -252645135 * ((v2[16] - v2[15]) >> 3);
      if (v77)
      {
        v78 = 0;
        v79 = v77;
        while (1)
        {
          v183 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v78, &v183))
          {
            break;
          }
LABEL_95:
          if (++v78 == v79)
            goto LABEL_204;
        }
        v80 = (_BYTE *)v2[15];
        v81 = (_BYTE *)v2[16];
        v82 = v81 - v80;
        v83 = 0xF0F0F0F0F0F0F0F1 * ((v81 - v80) >> 3);
        if (v83 <= v78)
        {
          v84 = 136 * v78;
          v85 = v78 + 1 - v83;
          v86 = v2[17];
          if (0xF0F0F0F0F0F0F0F1 * ((v86 - (uint64_t)v81) >> 3) >= v85)
          {
            bzero((void *)v2[16], 136 * ((v84 - v82) / 0x88uLL) + 136);
            v2[16] = &v81[136 * v85];
          }
          else
          {
            v87 = 0xF0F0F0F0F0F0F0F1 * ((v86 - (uint64_t)v80) >> 3);
            v88 = 2 * v87;
            if (2 * v87 <= v78 + 1)
              v88 = v78 + 1;
            if (v87 >= 0xF0F0F0F0F0F0F0)
              v89 = 0x1E1E1E1E1E1E1E1;
            else
              v89 = v88;
            if (v89 > 0x1E1E1E1E1E1E1E1)
              goto LABEL_261;
            v179 = 17 * v89;
            v177 = (char *)operator new(136 * v89);
            v90 = &v177[8 * ((v81 - v80) >> 3)];
            bzero(v90, 136 * ((v84 - v82) / 0x88uLL) + 136);
            if (v81 == v80)
            {
              v91 = &v177[8 * ((v81 - v80) >> 3)];
            }
            else
            {
              do
              {
                *(_OWORD *)(v90 - 136) = *(_OWORD *)(v81 - 136);
                v92 = *(_OWORD *)(v81 - 120);
                v93 = *(_OWORD *)(v81 - 104);
                v94 = *(_OWORD *)(v81 - 88);
                *(_OWORD *)(v90 - 72) = *(_OWORD *)(v81 - 72);
                *(_OWORD *)(v90 - 88) = v94;
                *(_OWORD *)(v90 - 104) = v93;
                *(_OWORD *)(v90 - 120) = v92;
                v95 = *(_OWORD *)(v81 - 56);
                v96 = *(_OWORD *)(v81 - 40);
                v97 = *(_OWORD *)(v81 - 24);
                v91 = v90 - 136;
                *((_DWORD *)v90 - 2) = *((_DWORD *)v81 - 2);
                *(_OWORD *)(v90 - 24) = v97;
                *(_OWORD *)(v90 - 40) = v96;
                *(_OWORD *)(v90 - 56) = v95;
                v81 -= 136;
                v90 -= 136;
              }
              while (v81 != v80);
            }
            v2[15] = v91;
            v2[16] = &v177[136 * v78 + 136];
            v2[17] = &v177[8 * v179];
            if (v80)
              operator delete(v80);
          }
        }
        v98 = v2[15];
        v99 = v98 + 136 * v78;
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
        sub_22F362834(a1, (uint64_t)"Name");
        v184.n128_u32[0] = 0;
        sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v99 + 16), &v184);
        v184.n128_u64[0] = (unint64_t)"";
        v184.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v99 + 24, (uint64_t)&v184);
        v184.n128_u16[0] = 0;
        sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v99 + 56, &v184);
        v184.n128_u64[0] = (unint64_t)"";
        v184.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"SwiftName", v99 + 40, (uint64_t)&v184);
        v184 = 0uLL;
        v185 = 0;
        sub_22EF49FBC(a1, (uint64_t)"SwiftBridge", (__n128 *)(v99 + 64), &v184);
        v184 = 0uLL;
        v185 = 0;
        v100 = sub_22EF49FBC(a1, (uint64_t)"NSErrorDomain", (__n128 *)(v99 + 88), &v184);
        v101 = (_DWORD *)(v99 + 112);
        v186 = 1;
        v102 = (*(uint64_t (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 16))(a1, v100);
        if (*(_BYTE *)(v99 + 116))
          v103 = 0;
        else
          v103 = v102;
        if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
        {
          if (!*(_BYTE *)(v99 + 116))
          {
LABEL_136:
            *(_QWORD *)v101 = 0;
            goto LABEL_140;
          }
        }
        else if (!*(_BYTE *)(v99 + 116))
        {
          *v101 = 0;
          *(_BYTE *)(v99 + 116) = 1;
        }
        v187 = 0;
        if (!(*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "EnumExtensibility", 0, v103, &v186, &v187))
        {
          if (!v186)
            goto LABEL_140;
          goto LABEL_136;
        }
        if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
        {
          CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
          if (CurrentNode)
          {
            if (*(_DWORD *)(CurrentNode + 32) == 1)
            {
              v105 = v2;
              v106 = *(_QWORD *)(CurrentNode + 80);
              v184.n128_u64[0] = *(_QWORD *)(CurrentNode + 72);
              v184.n128_u64[1] = v106;
              last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v184);
              if (last_not_of + 1 < v184.n128_u64[1])
                v108 = last_not_of + 1;
              else
                v108 = v184.n128_u64[1];
              v109 = v184.n128_u64[1] - v106 + v108;
              if (v184.n128_u64[1] < v109)
                v109 = v184.n128_u64[1];
              if (v109 == 6)
              {
                v110 = *(_DWORD *)v184.n128_u64[0] == 1852796476 && *(_WORD *)(v184.n128_u64[0] + 4) == 15973;
                v2 = v105;
                if (v110)
                {
                  *(_QWORD *)v101 = 0;
LABEL_139:
                  (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v187);
LABEL_140:
                  v111 = v98 + 136 * v78;
                  v184.n128_u16[0] = 0;
                  sub_22EF48BB8(a1, (uint64_t)"FlagEnum", v111 + 120, &v184);
                  v187 = 0;
                  v186 = 1;
                  v112 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                  v114 = *(unsigned __int8 *)(v111 + 128);
                  v113 = (_BYTE *)(v111 + 128);
                  v115 = v113 - 4;
                  if (v114)
                    v116 = 0;
                  else
                    v116 = v112;
                  if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0 || *v113)
                  {
                    if (!*v113)
                      goto LABEL_186;
                  }
                  else
                  {
                    *v115 = 0;
                    *v113 = 1;
                  }
                  if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "EnumKind", 0, v116, &v186, &v187))
                  {
                    if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
                    {
                      v131 = llvm::yaml::Input::getCurrentNode(a1);
                      if (v131)
                      {
                        if (*(_DWORD *)(v131 + 32) == 1)
                        {
                          v132 = v2;
                          v133 = *(_QWORD *)(v131 + 80);
                          v184.n128_u64[0] = *(_QWORD *)(v131 + 72);
                          v184.n128_u64[1] = v133;
                          v134 = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v184);
                          if (v134 + 1 < v184.n128_u64[1])
                            v135 = v134 + 1;
                          else
                            v135 = v184.n128_u64[1];
                          v136 = v184.n128_u64[1] - v133 + v135;
                          if (v184.n128_u64[1] < v136)
                            v136 = v184.n128_u64[1];
                          if (v136 == 6)
                          {
                            v137 = *(_DWORD *)v184.n128_u64[0] == 1852796476
                                && *(_WORD *)(v184.n128_u64[0] + 4) == 15973;
                            v2 = v132;
                            if (v137)
                            {
                              *(_QWORD *)v115 = 0;
LABEL_185:
                              (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v187);
LABEL_188:
                              (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 112))(a1);
                              (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v183);
                              goto LABEL_95;
                            }
                          }
                          else
                          {
                            v2 = v132;
                          }
                        }
                      }
                    }
                    (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 160))(a1);
                    v117 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115)
                      v118 = 0;
                    else
                      v118 = v117;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v118))
                    {
                      *v115 = 0;
                    }
                    v119 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 1)
                      v120 = v119;
                    else
                      v120 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "CFEnum", v120))
                    {
                      *v115 = 1;
                    }
                    v121 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 1)
                      v122 = v121;
                    else
                      v122 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NSEnum", v122))
                    {
                      *v115 = 1;
                    }
                    v123 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 2)
                      v124 = v123;
                    else
                      v124 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "CFOptions", v124))
                    {
                      *v115 = 2;
                    }
                    v125 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 2)
                      v126 = v125;
                    else
                      v126 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NSOptions", v126))
                    {
                      *v115 = 2;
                    }
                    v127 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 3)
                      v128 = v127;
                    else
                      v128 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "CFClosedEnum", v128))
                    {
                      *v115 = 3;
                    }
                    v129 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v115 == 3)
                      v130 = v129;
                    else
                      v130 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NSClosedEnum", v130))
                    {
                      *v115 = 3;
                    }
                    (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 184))(a1);
                    goto LABEL_185;
                  }
LABEL_186:
                  if (v186)
                    *(_QWORD *)v115 = 0;
                  goto LABEL_188;
                }
              }
              else
              {
                v2 = v105;
              }
            }
          }
        }
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 160))(a1);
        sub_22F362FFC((uint64_t)a1, v101);
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 184))(a1);
        goto LABEL_139;
      }
LABEL_204:
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v182);
    }
  }
  result = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || v2[18] != v2[19])
  {
    v182 = 0;
    v181 = 0;
    result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Typedefs", 0, 0, &v181, &v182);
    if ((_DWORD)result)
    {
      v139 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v139 = -286331153 * ((v2[19] - v2[18]) >> 3);
      if (v139)
      {
        v140 = 0;
        v141 = v139;
        while (1)
        {
          v183 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v140, &v183))
          {
            break;
          }
LABEL_213:
          if (++v140 == v141)
            goto LABEL_259;
        }
        v143 = (_BYTE *)v2[18];
        v142 = (_BYTE *)v2[19];
        v144 = v142 - v143;
        v145 = 0xEEEEEEEEEEEEEEEFLL * ((v142 - v143) >> 3);
        if (v145 <= v140)
        {
          v146 = 120 * v140;
          v147 = v140 + 1 - v145;
          v148 = v2[20];
          if (0xEEEEEEEEEEEEEEEFLL * ((v148 - (uint64_t)v142) >> 3) >= v147)
          {
            bzero((void *)v2[19], 120 * ((v146 - v144) / 0x78uLL) + 120);
            v2[19] = &v142[120 * v147];
          }
          else
          {
            v149 = 0xEEEEEEEEEEEEEEEFLL * ((v148 - (uint64_t)v143) >> 3);
            v150 = 2 * v149;
            if (2 * v149 <= v140 + 1)
              v150 = v140 + 1;
            if (v149 >= 0x111111111111111)
              v151 = 0x222222222222222;
            else
              v151 = v150;
            if (v151 > 0x222222222222222)
              goto LABEL_261;
            v180 = 120 * v151;
            v178 = (char *)operator new(120 * v151);
            v152 = &v178[8 * ((v142 - v143) >> 3)];
            bzero(v152, 120 * ((v146 - v144) / 0x78uLL) + 120);
            if (v142 == v143)
            {
              v153 = &v178[8 * ((v142 - v143) >> 3)];
            }
            else
            {
              do
              {
                v154 = *(_OWORD *)(v142 - 120);
                v155 = *(_OWORD *)(v142 - 104);
                v156 = *(_OWORD *)(v142 - 88);
                *(_OWORD *)(v152 - 72) = *(_OWORD *)(v142 - 72);
                *(_OWORD *)(v152 - 88) = v156;
                *(_OWORD *)(v152 - 104) = v155;
                *(_OWORD *)(v152 - 120) = v154;
                v157 = *(_OWORD *)(v142 - 56);
                v158 = *(_OWORD *)(v142 - 40);
                v159 = *(_OWORD *)(v142 - 24);
                v153 = v152 - 120;
                *((_QWORD *)v152 - 1) = *((_QWORD *)v142 - 1);
                *(_OWORD *)(v152 - 24) = v159;
                *(_OWORD *)(v152 - 40) = v158;
                *(_OWORD *)(v152 - 56) = v157;
                v142 -= 120;
                v152 -= 120;
              }
              while (v142 != v143);
            }
            v2[18] = v153;
            v2[19] = &v178[120 * v140 + 120];
            v2[20] = &v178[v180];
            if (v143)
              operator delete(v143);
          }
        }
        v160 = v2[18] + 120 * v140;
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
        sub_22F362834(a1, (uint64_t)"Name");
        v184.n128_u32[0] = 0;
        sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v160 + 16), &v184);
        v184.n128_u64[0] = (unint64_t)"";
        v184.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v160 + 24, (uint64_t)&v184);
        v184.n128_u16[0] = 0;
        sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v160 + 56, &v184);
        v184.n128_u64[0] = (unint64_t)"";
        v184.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"SwiftName", v160 + 40, (uint64_t)&v184);
        v184 = 0uLL;
        v185 = 0;
        sub_22EF49FBC(a1, (uint64_t)"SwiftBridge", (__n128 *)(v160 + 64), &v184);
        v184 = 0uLL;
        v185 = 0;
        v161 = sub_22EF49FBC(a1, (uint64_t)"NSErrorDomain", (__n128 *)(v160 + 88), &v184);
        v162 = (_DWORD *)(v160 + 112);
        v186 = 1;
        v163 = (*(uint64_t (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 16))(a1, v161);
        if (*(_BYTE *)(v160 + 116))
          v164 = 0;
        else
          v164 = v163;
        if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
        {
          if (!*(_BYTE *)(v160 + 116))
            goto LABEL_254;
        }
        else if (!*(_BYTE *)(v160 + 116))
        {
          *v162 = 0;
          *(_BYTE *)(v160 + 116) = 1;
        }
        v187 = 0;
        if (!(*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "SwiftWrapper", 0, v164, &v186, &v187))
        {
          if (!v186)
          {
LABEL_258:
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 112))(a1);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v183);
            goto LABEL_213;
          }
LABEL_254:
          *(_QWORD *)v162 = 0;
          goto LABEL_258;
        }
        if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
        {
          v165 = llvm::yaml::Input::getCurrentNode(a1);
          if (v165)
          {
            if (*(_DWORD *)(v165 + 32) == 1)
            {
              v166 = v2;
              v167 = *(_QWORD *)(v165 + 80);
              v184.n128_u64[0] = *(_QWORD *)(v165 + 72);
              v184.n128_u64[1] = v167;
              v168 = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v184);
              if (v168 + 1 < v184.n128_u64[1])
                v169 = v168 + 1;
              else
                v169 = v184.n128_u64[1];
              v170 = v184.n128_u64[1] - v167 + v169;
              if (v184.n128_u64[1] < v170)
                v170 = v184.n128_u64[1];
              if (v170 == 6)
              {
                v171 = *(_DWORD *)v184.n128_u64[0] == 1852796476 && *(_WORD *)(v184.n128_u64[0] + 4) == 15973;
                v2 = v166;
                if (v171)
                {
                  *(_QWORD *)v162 = 0;
LABEL_257:
                  (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v187);
                  goto LABEL_258;
                }
              }
              else
              {
                v2 = v166;
              }
            }
          }
        }
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 160))(a1);
        sub_22F3630D4((uint64_t)a1, v162);
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 184))(a1);
        goto LABEL_257;
      }
LABEL_259:
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v182);
    }
  }
  return result;
}

void sub_22EF48A54(llvm::yaml::IO *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    LODWORD(v9) = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v8 = MEMORY[0x24BED83D8] + 16;
    v16 = &v17;
    llvm::raw_ostream::SetBufferAndMode();
    llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<llvm::StringRef,void>::output();
    if (v19 >= 0)
      v2 = v16;
    else
      v2 = *v16;
    if (v19 >= 0)
      v3 = HIBYTE(v19) & 0x7F;
    else
      v3 = (uint64_t)v16[1];
    v7[0] = v2;
    v7[1] = v3;
    v4 = sub_22E730EC8(v2, v3);
    (*(void (**)(llvm::yaml::IO *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7, v4);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if (SHIBYTE(v19) < 0)
      operator delete(v17);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, uint64_t))(*(_QWORD *)a1 + 216))(a1, &v17, 1);
    llvm::yaml::IO::getContext(a1);
    v5 = llvm::yaml::ScalarTraits<llvm::StringRef,void>::input();
    if (v6)
    {
      LOWORD(v12) = 261;
      v8 = v5;
      v9 = v6;
      (*(void (**)(llvm::yaml::IO *, uint64_t *))(*(_QWORD *)a1 + 248))(a1, &v8);
    }
  }
}

uint64_t sub_22EF48BB8(llvm::yaml::Input *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t CurrentNode;
  unint64_t v12;
  uint64_t last_not_of;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v19 = 1;
  v8 = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a3 + 1))
    v9 = 0;
  else
    v9 = v8;
  result = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!*(_BYTE *)(a3 + 1))
    {
LABEL_14:
      *(_WORD *)a3 = *a4;
      return result;
    }
  }
  else if (!*(_BYTE *)(a3 + 1))
  {
    *(_WORD *)a3 = 256;
  }
  v20 = 0;
  result = (*(uint64_t (**)(llvm::yaml::Input *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v19, &v20);
  if (!(_DWORD)result)
  {
    if (!v19)
      return result;
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
    goto LABEL_11;
  CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
  if (!CurrentNode || *(_DWORD *)(CurrentNode + 32) != 1)
    goto LABEL_11;
  v12 = *(_QWORD *)(CurrentNode + 80);
  v17 = *(_QWORD *)(CurrentNode + 72);
  v18 = v12;
  last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v17);
  if (last_not_of + 1 < v18)
    v14 = last_not_of + 1;
  else
    v14 = v18;
  v15 = v18 - v12 + v14;
  if (v18 < v15)
    v15 = v18;
  if (v15 == 6 && (*(_DWORD *)v17 == 1852796476 ? (v16 = *(unsigned __int16 *)(v17 + 4) == 15973) : (v16 = 0), v16))
    *(_WORD *)a3 = *a4;
  else
LABEL_11:
    sub_22EF48D40(a1);
  return (*(uint64_t (**)(llvm::yaml::Input *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
}

void sub_22EF48D40(llvm::yaml::IO *a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LODWORD(v8) = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v7 = MEMORY[0x24BED83D8] + 16;
    v15 = &v16;
    llvm::raw_ostream::SetBufferAndMode();
    llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<BOOL,void>::output();
    v2 = &v16;
    if (v18 < 0)
      v2 = (void **)*v15;
    v3 = (void *)(HIBYTE(v18) & 0x7F);
    if (v18 < 0)
      v3 = v15[1];
    v6[0] = v2;
    v6[1] = v3;
    (*(void (**)(llvm::yaml::IO *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v6, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v16, 0);
    llvm::yaml::IO::getContext(a1);
    v4 = llvm::yaml::ScalarTraits<BOOL,void>::input();
    if (v5)
    {
      LOWORD(v11) = 261;
      v7 = v4;
      v8 = v5;
      (*(void (**)(llvm::yaml::IO *, uint64_t *))(*(_QWORD *)a1 + 248))(a1, &v7);
    }
  }
}

uint64_t sub_22EF48EA0(llvm::yaml::IO *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t v39;
  char *v40;
  void **v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  __n128 v71;
  unsigned int v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  _BYTE *v82;
  __n128 v83;
  void **v84;
  unsigned int v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  unsigned int v108;
  _BYTE *v109;
  int v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t CurrentNode;
  void **v116;
  unint64_t v117;
  uint64_t last_not_of;
  unint64_t v119;
  unint64_t v120;
  BOOL v121;
  uint64_t v122;
  char **v123;
  void **v124;
  char *v125;
  _QWORD *v126;
  void **v127;
  void **v128;
  char **v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;

  result = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || *a3 != a3[1])
  {
    v132 = 0;
    v131 = 0;
    result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, 0, &v131, &v132);
    if ((_DWORD)result)
    {
      v7 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v7 = -1171354717 * ((a3[1] - *a3) >> 4);
      if (v7)
      {
        v8 = 0;
        v9 = v7;
        v129 = (char **)a3;
        v130 = v7;
        while (1)
        {
          v133 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v8, &v133))
          {
            break;
          }
LABEL_9:
          if (++v8 == v9)
            goto LABEL_139;
        }
        v10 = v9;
        v11 = (char *)*a3;
        v12 = (char *)a3[1];
        v13 = (char **)a3;
        v14 = (uint64_t)&v12[-*a3];
        v15 = 0x2E8BA2E8BA2E8BA3 * (v14 >> 4);
        if (v15 <= v8)
        {
          v16 = v8 + 1;
          v17 = v8 + 1 - v15;
          v18 = v13[2];
          if (0x2E8BA2E8BA2E8BA3 * ((v18 - v12) >> 4) >= v17)
          {
            bzero(v12, 176 * ((176 * v8 - v14) / 0xB0) + 176);
            v13[1] = &v12[176 * v17];
            v10 = v130;
          }
          else
          {
            v19 = 0x2E8BA2E8BA2E8BA3 * ((v18 - v11) >> 4);
            v20 = 2 * v19;
            if (2 * v19 <= v16)
              v20 = v8 + 1;
            if (v19 >= 0xBA2E8BA2E8BA2ELL)
              v21 = 0x1745D1745D1745DLL;
            else
              v21 = v20;
            if (v21 > 0x1745D1745D1745DLL)
LABEL_141:
              sub_22E3B3F8C();
            v22 = 176 * v21;
            v23 = (char *)operator new(176 * v21);
            v24 = &v23[16 * (v14 >> 4)];
            v25 = &v23[v22];
            bzero(v24, 176 * ((176 * v8 - v14) / 0xB0) + 176);
            v26 = &v23[176 * v16];
            if (v12 == v11)
            {
              v10 = v130;
              *v129 = v24;
              v129[1] = v26;
              v13 = v129;
              v129[2] = v25;
            }
            else
            {
              v27 = v25;
              v13 = v129;
              v10 = v130;
              do
              {
                v28 = *((_OWORD *)v12 - 11);
                v29 = *((_OWORD *)v12 - 10);
                v30 = *((_OWORD *)v12 - 8);
                *((_OWORD *)v24 - 9) = *((_OWORD *)v12 - 9);
                *((_OWORD *)v24 - 8) = v30;
                *((_OWORD *)v24 - 11) = v28;
                *((_OWORD *)v24 - 10) = v29;
                v31 = *((_OWORD *)v12 - 7);
                v32 = *((_OWORD *)v12 - 6);
                v33 = *((_OWORD *)v12 - 5);
                *(_OWORD *)(v24 - 68) = *(_OWORD *)(v12 - 68);
                *((_OWORD *)v24 - 6) = v32;
                *((_OWORD *)v24 - 5) = v33;
                *((_OWORD *)v24 - 7) = v31;
                *((_QWORD *)v24 - 5) = 0;
                *((_QWORD *)v24 - 4) = 0;
                *((_QWORD *)v24 - 6) = 0;
                *((_OWORD *)v24 - 3) = *((_OWORD *)v12 - 3);
                *((_QWORD *)v24 - 4) = *((_QWORD *)v12 - 4);
                *((_QWORD *)v12 - 6) = 0;
                *((_QWORD *)v12 - 5) = 0;
                *((_QWORD *)v12 - 4) = 0;
                *((_QWORD *)v24 - 3) = 0;
                *((_QWORD *)v24 - 2) = 0;
                *((_QWORD *)v24 - 1) = 0;
                *(_OWORD *)(v24 - 24) = *(_OWORD *)(v12 - 24);
                *((_QWORD *)v24 - 1) = *((_QWORD *)v12 - 1);
                v24 -= 176;
                *((_QWORD *)v12 - 3) = 0;
                *((_QWORD *)v12 - 2) = 0;
                *((_QWORD *)v12 - 1) = 0;
                v12 -= 176;
              }
              while (v12 != v11);
              v12 = *v129;
              v34 = v129[1];
              *v129 = v24;
              v129[1] = v26;
              v129[2] = v27;
              while (v34 != v12)
              {
                v34 -= 176;
                sub_22EF4AB10(v34);
              }
            }
            if (v12)
              operator delete(v12);
          }
        }
        v35 = *v13;
        v36 = (uint64_t)&(*v13)[176 * v8];
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
        sub_22F362834(a1, (uint64_t)"Name");
        v134.n128_u8[0] = 0;
        sub_22F362984(a1, (uint64_t)"AuditedForNullability", (_BYTE *)(v36 + 16), &v134);
        v134.n128_u32[0] = 0;
        sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v36 + 24), &v134);
        v134.n128_u64[0] = (unint64_t)"";
        v134.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v36 + 32, (uint64_t)&v134);
        v134.n128_u16[0] = 0;
        sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v36 + 48, &v134);
        v134.n128_u64[0] = (unint64_t)"";
        v134.n128_u64[1] = 0;
        sub_22F3628A4(a1, (uint64_t)"SwiftName", v36 + 56, (uint64_t)&v134);
        v134 = 0uLL;
        v135 = 0;
        sub_22EF49FBC(a1, (uint64_t)"SwiftBridge", (__n128 *)(v36 + 72), &v134);
        v134 = 0uLL;
        v135 = 0;
        sub_22EF49FBC(a1, (uint64_t)"NSErrorDomain", (__n128 *)(v36 + 96), &v134);
        v134.n128_u16[0] = 0;
        sub_22EF48BB8(a1, (uint64_t)"SwiftImportAsNonGeneric", v36 + 120, &v134);
        v134.n128_u16[0] = 0;
        sub_22EF48BB8(a1, (uint64_t)"SwiftObjCMembers", v36 + 122, &v134);
        v37 = (_QWORD *)(v36 + 128);
        a3 = v13;
        v9 = v10;
        if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1)
          || *v37 != *(_QWORD *)&v35[176 * v8 + 136])
        {
          v138 = 0;
          v139 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Methods", 0, 0, &v139, &v138))
          {
            v38 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
            v125 = v35;
            v127 = (void **)(v36 + 128);
            if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
              v38 = -858993459 * ((*(_QWORD *)&v35[176 * v8 + 136] - *v37) >> 5);
            if (v38)
            {
              v39 = 0;
              v40 = &v35[176 * v8];
              v41 = (void **)(v40 + 136);
              v123 = (char **)(v40 + 144);
              v124 = (void **)(v40 + 136);
              v42 = v38;
              do
              {
                v140 = 0;
                if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v39, &v140))
                {
                  v43 = (char *)*v41;
                  v44 = (_BYTE *)*v41 - (_BYTE *)*v127;
                  v45 = 0xCCCCCCCCCCCCCCCDLL * (v44 >> 5);
                  if (v45 <= v39)
                  {
                    v46 = 160 * v39;
                    v47 = v39 + 1;
                    v48 = v39 + 1 - v45;
                    if (0xCCCCCCCCCCCCCCCDLL * ((*v123 - v43) >> 5) >= v48)
                    {
                      bzero(v43, 160 * ((v46 - v44) / 0xA0uLL) + 160);
                      *v124 = &v43[160 * v48];
                      v9 = v130;
                    }
                    else
                    {
                      v49 = 0x999999999999999ALL * ((*v123 - (_BYTE *)*v127) >> 5);
                      if (v49 <= v47)
                        v49 = v39 + 1;
                      if (0xCCCCCCCCCCCCCCCDLL * ((*v123 - (_BYTE *)*v127) >> 5) >= 0xCCCCCCCCCCCCCCLL)
                        v50 = 0x199999999999999;
                      else
                        v50 = v49;
                      if (v50 > 0x199999999999999)
                        goto LABEL_141;
                      v51 = 5 * v50;
                      v52 = (char *)operator new(160 * v50);
                      v53 = &v52[32 * (v44 >> 5)];
                      v54 = &v52[32 * v51];
                      bzero(v53, 160 * ((v46 - v44) / 0xA0uLL) + 160);
                      v55 = &v52[160 * v47];
                      v56 = (char *)*v124;
                      v57 = (char *)*v127;
                      if (*v124 == *v127)
                      {
                        *v127 = v53;
                        *v124 = v55;
                        *v123 = v54;
                        v9 = v130;
                      }
                      else
                      {
                        v58 = 0;
                        do
                        {
                          v59 = &v53[v58];
                          v60 = &v56[v58];
                          v61 = *(_OWORD *)&v56[v58 - 160];
                          *((_DWORD *)v59 - 36) = *(_DWORD *)&v56[v58 - 144];
                          *((_OWORD *)v59 - 10) = v61;
                          *((_QWORD *)v59 - 16) = 0;
                          *((_QWORD *)v59 - 15) = 0;
                          *((_QWORD *)v59 - 17) = 0;
                          *(_OWORD *)(v59 - 136) = *(_OWORD *)&v56[v58 - 136];
                          *((_QWORD *)v59 - 15) = *(_QWORD *)&v56[v58 - 120];
                          *((_QWORD *)v60 - 17) = 0;
                          *((_QWORD *)v60 - 16) = 0;
                          *((_QWORD *)v60 - 15) = 0;
                          *((_QWORD *)v59 - 14) = 0;
                          *((_QWORD *)v59 - 13) = 0;
                          *((_QWORD *)v59 - 12) = 0;
                          *((_OWORD *)v59 - 7) = *(_OWORD *)&v56[v58 - 112];
                          *((_QWORD *)v59 - 12) = *(_QWORD *)&v56[v58 - 96];
                          *((_QWORD *)v60 - 13) = 0;
                          *((_QWORD *)v60 - 12) = 0;
                          *((_QWORD *)v60 - 14) = 0;
                          v62 = *(_OWORD *)&v56[v58 - 40];
                          v63 = *(_OWORD *)&v56[v58 - 24];
                          v64 = *(_QWORD *)&v56[v58 - 8];
                          *(_OWORD *)(v59 - 56) = *(_OWORD *)&v56[v58 - 56];
                          *((_QWORD *)v59 - 1) = v64;
                          *(_OWORD *)(v59 - 24) = v63;
                          *(_OWORD *)(v59 - 40) = v62;
                          v65 = *(_OWORD *)&v56[v58 - 88];
                          *(_OWORD *)(v59 - 72) = *(_OWORD *)&v56[v58 - 72];
                          *(_OWORD *)(v59 - 88) = v65;
                          v58 -= 160;
                        }
                        while (&v56[v58] != v57);
                        v56 = (char *)*v127;
                        v66 = (char *)*v124;
                        *v127 = &v53[v58];
                        *v124 = v55;
                        *v123 = v54;
                        v9 = v130;
                        while (v66 != v56)
                        {
                          v66 -= 160;
                          sub_22EF4AACC(v66);
                        }
                      }
                      if (v56)
                        operator delete(v56);
                    }
                  }
                  v67 = *v127;
                  (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
                  sub_22F362834(a1, (uint64_t)"Selector");
                  v134.n128_u64[0] = 0;
                  LOBYTE(v137) = 0;
                  if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t, _QWORD, uint64_t *, __n128 *))(*(_QWORD *)a1 + 120))(a1, "MethodKind", 1, 0, &v137, &v134))
                  {
                    sub_22EF4A44C((uint64_t)a1, &v67[40 * v39 + 4]);
                    (*(void (**)(llvm::yaml::IO *, unint64_t))(*(_QWORD *)a1 + 128))(a1, v134.n128_u64[0]);
                  }
                  v68 = &v67[40 * v39];
                  sub_22EF4A158(a1, (void **)v68 + 3);
                  v69 = v68 + 12;
                  a3 = v129;
                  if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1)
                    || *(_QWORD *)v69 != *(_QWORD *)&v67[40 * v39 + 14])
                  {
                    sub_22F362AB0((uint64_t)a1, v69);
                  }
                  v70 = &v67[40 * v39];
                  v134.n128_u16[0] = 0;
                  sub_22EF4A780(a1, (uint64_t)"NullabilityOfRet", (_BYTE *)v70 + 72, &v134);
                  v134.n128_u64[0] = 0;
                  sub_22EF4A928(a1, (uint64_t)(v70 + 19), &v134);
                  v134.n128_u32[0] = 0;
                  sub_22EF46EDC((uint64_t)a1, v70 + 22, &v134);
                  v134.n128_u64[0] = (unint64_t)"";
                  v134.n128_u64[1] = 0;
                  sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", (uint64_t)(v70 + 24), (uint64_t)&v134);
                  v134.n128_u16[0] = 0;
                  sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", (uint64_t)(v70 + 28), &v134);
                  v134.n128_u64[0] = (unint64_t)"";
                  v134.n128_u64[1] = 0;
                  v71 = sub_22F3628A4(a1, (uint64_t)"SwiftName", (uint64_t)(v70 + 30), (uint64_t)&v134);
                  v134.n128_u64[0] = 0;
                  LOBYTE(v137) = 0;
                  v72 = (*(uint64_t (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 16))(a1, v71);
                  v74 = v70[34];
                  v73 = v70 + 34;
                  if (v74)
                    v75 = 0;
                  else
                    v75 = v72;
                  if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, uint64_t, uint64_t *, __n128 *))(*(_QWORD *)a1 + 120))(a1, "FactoryAsInit", 0, v75, &v137, &v134))
                  {
                    (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 160))(a1);
                    v76 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v73)
                      v77 = 0;
                    else
                      v77 = v76;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "A", v77))
                    {
                      *v73 = 0;
                    }
                    v78 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v73 == 1)
                      v79 = v78;
                    else
                      v79 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "C", v79))
                    {
                      *v73 = 1;
                    }
                    v80 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
                    if (*v73 == 2)
                      v81 = v80;
                    else
                      v81 = 0;
                    if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "I", v81))
                    {
                      *v73 = 2;
                    }
                    (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 184))(a1);
                    (*(void (**)(llvm::yaml::IO *, unint64_t))(*(_QWORD *)a1 + 128))(a1, v134.n128_u64[0]);
                  }
                  else if ((_BYTE)v137)
                  {
                    *v73 = 0;
                  }
                  v82 = &v67[40 * v39];
                  v134.n128_u8[0] = 0;
                  sub_22F362984(a1, (uint64_t)"DesignatedInit", v82 + 140, &v134);
                  v134.n128_u8[0] = 0;
                  sub_22F362984(a1, (uint64_t)"Required", v82 + 141, &v134);
                  v134.n128_u8[0] = 0;
                  sub_22F362984(a1, (uint64_t)"SuppressDirect", v82 + 142, &v134);
                  v134.n128_u64[0] = (unint64_t)"";
                  v134.n128_u64[1] = 0;
                  v83 = sub_22F3628A4(a1, (uint64_t)"ResultType", (uint64_t)(v82 + 144), (uint64_t)&v134);
                  (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v83);
                  (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v140);
                  v41 = v124;
                }
                ++v39;
              }
              while (v39 != v42);
            }
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v138);
            v35 = v125;
          }
        }
        v84 = (void **)&v35[176 * v8 + 152];
        if (!(*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1)
          || *v84 != *(void **)&v35[176 * v8 + 160])
        {
          v137 = 0;
          v136 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Properties", 0, 0, &v136, &v137))
          {
            v85 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
            if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
              v85 = -991146299 * ((*(_QWORD *)&v35[176 * v8 + 160] - (_QWORD)*v84) >> 3);
            if (v85)
            {
              v86 = 0;
              v87 = &v35[176 * v8];
              v126 = v87 + 168;
              v128 = (void **)(v87 + 160);
              v88 = v85;
              while (1)
              {
                v138 = 0;
                if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v86, &v138))
                {
                  break;
                }
LABEL_92:
                if (++v86 == v88)
                  goto LABEL_137;
              }
              v89 = (char *)*v128;
              v90 = (_BYTE *)*v128 - (_BYTE *)*v84;
              v91 = 0x4EC4EC4EC4EC4EC5 * (v90 >> 3);
              if (v91 <= v86)
              {
                v92 = 104 * v86;
                v93 = v86 + 1 - v91;
                if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v126 - (_QWORD)v89) >> 3) >= v93)
                {
                  bzero(v89, 104 * ((v92 - v90) / 0x68uLL) + 104);
                  *v128 = &v89[104 * v93];
                }
                else
                {
                  v94 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*v126 - (_QWORD)*v84) >> 3);
                  if (v94 <= v86 + 1)
                    v94 = v86 + 1;
                  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v126 - (_QWORD)*v84) >> 3)) >= 0x13B13B13B13B13BLL)
                    v95 = 0x276276276276276;
                  else
                    v95 = v94;
                  if (v95 > 0x276276276276276)
                    goto LABEL_141;
                  v122 = 104 * v95;
                  v96 = (char *)operator new(104 * v95);
                  v97 = &v96[8 * (v90 >> 3)];
                  v98 = v96;
                  bzero(v97, 104 * ((v92 - v90) / 0x68uLL) + 104);
                  v99 = (char *)*v128;
                  v100 = (char *)*v84;
                  if (*v128 != *v84)
                  {
                    do
                    {
                      v101 = *(_OWORD *)(v99 - 104);
                      v102 = *(_OWORD *)(v99 - 88);
                      *(_OWORD *)(v97 - 72) = *(_OWORD *)(v99 - 72);
                      *(_OWORD *)(v97 - 88) = v102;
                      *(_OWORD *)(v97 - 104) = v101;
                      v103 = *(_OWORD *)(v99 - 56);
                      v104 = *(_OWORD *)(v99 - 40);
                      v105 = *(_OWORD *)(v99 - 24);
                      *((_QWORD *)v97 - 1) = *((_QWORD *)v99 - 1);
                      *(_OWORD *)(v97 - 24) = v105;
                      *(_OWORD *)(v97 - 40) = v104;
                      *(_OWORD *)(v97 - 56) = v103;
                      v97 -= 104;
                      v99 -= 104;
                    }
                    while (v99 != v100);
                    v99 = (char *)*v84;
                  }
                  *v84 = v97;
                  *v128 = &v98[104 * v86 + 104];
                  *v126 = &v98[v122];
                  if (v99)
                    operator delete(v99);
                }
              }
              v106 = *v84;
              v107 = (uint64_t)*v84 + 104 * v86;
              (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
              sub_22F362834(a1, (uint64_t)"Name");
              v140 = 0;
              v139 = 1;
              v108 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
              v110 = *(unsigned __int8 *)(v107 + 20);
              v109 = (_BYTE *)(v107 + 20);
              v111 = v109 - 4;
              if (v110)
                v112 = 0;
              else
                v112 = v108;
              if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0 || *v109)
              {
                v9 = v130;
                if (!*v109)
                  goto LABEL_119;
              }
              else
              {
                *v111 = 0;
                *v109 = 1;
                v9 = v130;
              }
              if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "PropertyKind", 0, v112, &v139, &v140))
              {
                if (((*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
                {
                  CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
                  if (CurrentNode)
                  {
                    if (*(_DWORD *)(CurrentNode + 32) == 1)
                    {
                      v116 = v84;
                      v117 = *(_QWORD *)(CurrentNode + 80);
                      v134.n128_u64[0] = *(_QWORD *)(CurrentNode + 72);
                      v134.n128_u64[1] = v117;
                      last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v134);
                      if (last_not_of + 1 < v134.n128_u64[1])
                        v119 = last_not_of + 1;
                      else
                        v119 = v134.n128_u64[1];
                      v120 = v134.n128_u64[1] - v117 + v119;
                      if (v134.n128_u64[1] < v120)
                        v120 = v134.n128_u64[1];
                      if (v120 == 6)
                      {
                        v121 = *(_DWORD *)v134.n128_u64[0] == 1852796476 && *(_WORD *)(v134.n128_u64[0] + 4) == 15973;
                        v84 = v116;
                        if (v121)
                        {
                          *(_QWORD *)v111 = 0;
                          goto LABEL_118;
                        }
                      }
                      else
                      {
                        v84 = v116;
                      }
                    }
                  }
                }
                sub_22EF4A44C((uint64_t)a1, v111);
LABEL_118:
                (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v140);
LABEL_121:
                v113 = (uint64_t)v106 + 104 * v86;
                v134.n128_u16[0] = 0;
                sub_22EF4A780(a1, (uint64_t)"Nullability", (_BYTE *)(v113 + 24), &v134);
                v134.n128_u32[0] = 0;
                sub_22EF46EDC((uint64_t)a1, (_DWORD *)(v113 + 32), &v134);
                v134.n128_u64[0] = (unint64_t)"";
                v134.n128_u64[1] = 0;
                sub_22F3628A4(a1, (uint64_t)"AvailabilityMsg", v113 + 40, (uint64_t)&v134);
                v134.n128_u16[0] = 0;
                sub_22EF48BB8(a1, (uint64_t)"SuppressDirect", v113 + 56, &v134);
                v134.n128_u16[0] = 0;
                sub_22EF48BB8(a1, (uint64_t)"SwiftPrivate", v113 + 58, &v134);
                v134.n128_u64[0] = (unint64_t)"";
                v134.n128_u64[1] = 0;
                sub_22F3628A4(a1, (uint64_t)"SwiftName", v113 + 64, (uint64_t)&v134);
                v134.n128_u16[0] = 0;
                sub_22EF48BB8(a1, (uint64_t)"SwiftImportAsAccessors", v113 + 80, &v134);
                v134.n128_u64[0] = (unint64_t)"";
                v134.n128_u64[1] = 0;
                v114 = sub_22F3628A4(a1, (uint64_t)"Type", v113 + 88, (uint64_t)&v134);
                (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v114);
                (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v138);
                goto LABEL_92;
              }
LABEL_119:
              if (v139)
                *(_QWORD *)v111 = 0;
              goto LABEL_121;
            }
LABEL_137:
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v137);
            a3 = v129;
          }
        }
        (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 112))(a1);
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v133);
        goto LABEL_9;
      }
LABEL_139:
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v132);
    }
  }
  return result;
}

__n128 sub_22EF49FBC(llvm::yaml::Input *a1, uint64_t a2, __n128 *a3, __n128 *a4)
{
  unsigned int v8;
  uint64_t v9;
  __n128 result;
  uint64_t CurrentNode;
  unint64_t v12;
  uint64_t last_not_of;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;

  v20 = 1;
  v8 = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if (a3[1].n128_u8[0])
    v9 = 0;
  else
    v9 = v8;
  if (((*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
  {
    if (!a3[1].n128_u8[0])
    {
LABEL_14:
      result = *a4;
      a3[1].n128_u64[0] = a4[1].n128_u64[0];
      *a3 = result;
      return result;
    }
  }
  else if (!a3[1].n128_u8[0])
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u8[0] = 1;
  }
  v21 = 0;
  if (!(*(unsigned int (**)(llvm::yaml::Input *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v20, &v21))
  {
    if (!v20)
      return result;
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
    goto LABEL_11;
  CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
  if (!CurrentNode || *(_DWORD *)(CurrentNode + 32) != 1)
    goto LABEL_11;
  v12 = *(_QWORD *)(CurrentNode + 80);
  v18 = *(_QWORD *)(CurrentNode + 72);
  v19 = v12;
  last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v18);
  if (last_not_of + 1 < v19)
    v14 = last_not_of + 1;
  else
    v14 = v19;
  v15 = v19 - v12 + v14;
  if (v19 < v15)
    v15 = v19;
  if (v15 == 6 && (*(_DWORD *)v18 == 1852796476 ? (v16 = *(unsigned __int16 *)(v18 + 4) == 15973) : (v16 = 0), v16))
  {
    v17 = *a4;
    a3[1].n128_u64[0] = a4[1].n128_u64[0];
    *a3 = v17;
  }
  else
  {
LABEL_11:
    sub_22EF48A54(a1);
  }
  (*(void (**)(llvm::yaml::Input *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v21);
  return result;
}

uint64_t sub_22EF4A158(llvm::yaml::IO *a1, void **a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  unint64_t i;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  result = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || *a2 != a2[1])
  {
    v26 = 0;
    v25 = 0;
    result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Parameters", 0, 0, &v25, &v26);
    if ((_DWORD)result)
    {
      v5 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
        v6 = ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      else
        v6 = v5;
      if ((_DWORD)v6)
      {
        for (i = 0; i != v6; ++i)
        {
          v27 = 0;
          if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, i, &v27))
          {
            v9 = (char *)*a2;
            v8 = (char *)a2[1];
            v10 = (v8 - (_BYTE *)*a2) >> 5;
            if (v10 <= i)
            {
              v11 = i + 1;
              v12 = i + 1 - v10;
              v13 = a2[2];
              if (v12 <= (v13 - v8) >> 5)
              {
                v22 = &v8[32 * v12];
                do
                {
                  *(_QWORD *)v8 = 0;
                  *((_QWORD *)v8 + 1) = 0;
                  v8[5] = 1;
                  v8[12] = 0;
                  *((_QWORD *)v8 + 2) = 0;
                  *((_QWORD *)v8 + 3) = 0;
                  v8 += 32;
                }
                while (v8 != v22);
                a2[1] = v22;
              }
              else
              {
                v14 = v13 - v9;
                v15 = (v13 - v9) >> 4;
                if (v15 <= v11)
                  v15 = i + 1;
                if (v14 >= 0x7FFFFFFFFFFFFFE0)
                  v16 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v16 = v15;
                if (v16 >> 59)
                  sub_22E3B3F8C();
                v17 = (char *)operator new(32 * v16);
                v18 = &v17[32 * v10];
                v19 = &v17[32 * v11];
                v20 = v18;
                do
                {
                  *(_QWORD *)v20 = 0;
                  *((_QWORD *)v20 + 1) = 0;
                  v20[5] = 1;
                  v20[12] = 0;
                  *((_QWORD *)v20 + 2) = 0;
                  *((_QWORD *)v20 + 3) = 0;
                  v20 += 32;
                }
                while (v20 != v19);
                for (; v8 != v9; v8 -= 32)
                {
                  v21 = *((_OWORD *)v8 - 1);
                  *((_OWORD *)v18 - 2) = *((_OWORD *)v8 - 2);
                  *((_OWORD *)v18 - 1) = v21;
                  v18 -= 32;
                }
                *a2 = v18;
                a2[1] = v19;
                a2[2] = &v17[32 * v16];
                if (v9)
                  operator delete(v9);
              }
            }
            v23 = (uint64_t)*a2 + 32 * i;
            (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 104))(a1);
            sub_22F362A38(a1);
            LOWORD(v28[0]) = 0;
            sub_22EF4A780(a1, (uint64_t)"Nullability", (_BYTE *)(v23 + 6), v28);
            v28[0] = 0;
            sub_22EF4A928(a1, v23 + 8, v28);
            LOWORD(v28[0]) = 0;
            sub_22EF48BB8(a1, (uint64_t)"NoEscape", v23 + 4, v28);
            v28[0] = "";
            v28[1] = 0;
            v24 = sub_22F3628A4(a1, (uint64_t)"Type", v23 + 16, (uint64_t)v28);
            (*(void (**)(llvm::yaml::IO *, __n128))(*(_QWORD *)a1 + 112))(a1, v24);
            (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v27);
          }
        }
      }
      (*(void (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 48))(a1);
      return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v26);
    }
  }
  return result;
}

uint64_t sub_22EF4A44C(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Class", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Instance", v7))
    *a2 = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

void sub_22EF4A500(llvm::yaml::IO *a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LODWORD(v8) = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v7 = MEMORY[0x24BED83D8] + 16;
    v15 = &v16;
    llvm::raw_ostream::SetBufferAndMode();
    llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<unsigned int,void>::output();
    v2 = &v16;
    if (v18 < 0)
      v2 = (void **)*v15;
    v3 = (void *)(HIBYTE(v18) & 0x7F);
    if (v18 < 0)
      v3 = v15[1];
    v6[0] = v2;
    v6[1] = v3;
    (*(void (**)(llvm::yaml::IO *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v6, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v16, 0);
    llvm::yaml::IO::getContext(a1);
    v4 = llvm::yaml::ScalarTraits<unsigned int,void>::input();
    if (v5)
    {
      LOWORD(v11) = 261;
      v7 = v4;
      v8 = v5;
      (*(void (**)(llvm::yaml::IO *, uint64_t *))(*(_QWORD *)a1 + 248))(a1, &v7);
    }
  }
}

void sub_22EF4A660(uint64_t a1, size_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = &v5[-*(_QWORD *)a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v7[(_QWORD)v11];
    v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v12[a2];
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete((void *)v6);
  }
}

uint64_t sub_22EF4A780(llvm::yaml::Input *a1, uint64_t a2, _BYTE *a3, _WORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t CurrentNode;
  unint64_t v12;
  uint64_t last_not_of;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v19 = 1;
  v8 = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if (a3[1])
    v9 = 0;
  else
    v9 = v8;
  result = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!a3[1])
    {
LABEL_26:
      *(_WORD *)a3 = *a4;
      return result;
    }
  }
  else if (!a3[1])
  {
    *(_WORD *)a3 = 256;
  }
  v20 = 0;
  result = (*(uint64_t (**)(llvm::yaml::Input *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v19, &v20);
  if (!(_DWORD)result)
  {
    if (!v19)
      return result;
    goto LABEL_26;
  }
  if (((*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
    goto LABEL_27;
  CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
  if (!CurrentNode || *(_DWORD *)(CurrentNode + 32) != 1)
    goto LABEL_27;
  v12 = *(_QWORD *)(CurrentNode + 80);
  v17 = *(_QWORD *)(CurrentNode + 72);
  v18 = v12;
  last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v17);
  if (last_not_of + 1 < v18)
    v14 = last_not_of + 1;
  else
    v14 = v18;
  v15 = v18 - v12 + v14;
  if (v18 < v15)
    v15 = v18;
  if (v15 == 6 && (*(_DWORD *)v17 == 1852796476 ? (v16 = *(unsigned __int16 *)(v17 + 4) == 15973) : (v16 = 0), v16))
  {
    *(_WORD *)a3 = *a4;
  }
  else
  {
LABEL_27:
    (*(void (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 160))(a1);
    sub_22F362C50((uint64_t)a1, a3);
    (*(void (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 184))(a1);
  }
  return (*(uint64_t (**)(llvm::yaml::Input *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
}

uint64_t sub_22EF4A928(llvm::yaml::Input *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t CurrentNode;
  unint64_t v10;
  uint64_t last_not_of;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;

  v17 = 1;
  v6 = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a2 + 4))
    v7 = 0;
  else
    v7 = v6;
  result = (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1);
  if ((result & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 4))
    {
LABEL_26:
      *(_QWORD *)a2 = *a3;
      return result;
    }
  }
  else if (!*(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 4) = 1;
  }
  v18 = 0;
  result = (*(uint64_t (**)(llvm::yaml::Input *, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "RetainCountConvention", 0, v7, &v17, &v18);
  if (!(_DWORD)result)
  {
    if (!v17)
      return result;
    goto LABEL_26;
  }
  if (((*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0)
    goto LABEL_27;
  CurrentNode = llvm::yaml::Input::getCurrentNode(a1);
  if (!CurrentNode || *(_DWORD *)(CurrentNode + 32) != 1)
    goto LABEL_27;
  v10 = *(_QWORD *)(CurrentNode + 80);
  v15 = *(_QWORD *)(CurrentNode + 72);
  v16 = v10;
  last_not_of = llvm::StringRef::find_last_not_of((llvm::StringRef *)&v15);
  if (last_not_of + 1 < v16)
    v12 = last_not_of + 1;
  else
    v12 = v16;
  v13 = v16 - v10 + v12;
  if (v16 < v13)
    v13 = v16;
  if (v13 == 6 && (*(_DWORD *)v15 == 1852796476 ? (v14 = *(unsigned __int16 *)(v15 + 4) == 15973) : (v14 = 0), v14))
  {
    *(_QWORD *)a2 = *a3;
  }
  else
  {
LABEL_27:
    (*(void (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 160))(a1);
    sub_22F362EA4((uint64_t)a1, (_DWORD *)a2);
    (*(void (**)(llvm::yaml::Input *))(*(_QWORD *)a1 + 184))(a1);
  }
  return (*(uint64_t (**)(llvm::yaml::Input *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v18);
}

void sub_22EF4AACC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void sub_22EF4AB10(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[16];
  if (v3)
  {
    v4 = (_QWORD *)a1[17];
    v5 = (void *)a1[16];
    if (v4 != v3)
    {
      do
      {
        v4 -= 20;
        sub_22EF4AACC(v4);
      }
      while (v4 != v3);
      v5 = (void *)a1[16];
    }
    a1[17] = v3;
    operator delete(v5);
  }
}

void sub_22EF4AB88(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void sub_22EF4ABCC(llvm::yaml::IO *a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LODWORD(v8) = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    v7 = MEMORY[0x24BED83D8] + 16;
    v15 = &v16;
    llvm::raw_ostream::SetBufferAndMode();
    llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<llvm::VersionTuple,void>::output();
    v2 = &v16;
    if (v18 < 0)
      v2 = (void **)*v15;
    v3 = (void *)(HIBYTE(v18) & 0x7F);
    if (v18 < 0)
      v3 = v15[1];
    v6[0] = v2;
    v6[1] = v3;
    (*(void (**)(llvm::yaml::IO *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v6, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v16, 0);
    llvm::yaml::IO::getContext(a1);
    v4 = llvm::yaml::ScalarTraits<llvm::VersionTuple,void>::input();
    if (v5)
    {
      LOWORD(v11) = 261;
      v7 = v4;
      v8 = v5;
      (*(void (**)(llvm::yaml::IO *, uint64_t *))(*(_QWORD *)a1 + 248))(a1, &v7);
    }
  }
}

_QWORD *sub_22EF4AD2C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)a1[6];
  if (v6)
  {
    v7 = (_QWORD *)a1[7];
    v8 = (void *)a1[6];
    if (v7 != v6)
    {
      do
      {
        v7 -= 20;
        sub_22EF4AB88(v7);
      }
      while (v7 != v6);
      v8 = (void *)a1[6];
    }
    a1[7] = v6;
    operator delete(v8);
  }
  sub_22EF4ADD4(a1 + 3);
  return sub_22EF4ADD4(a1);
}

_QWORD *sub_22EF4ADD4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 22;
        sub_22EF4AB10(v3);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22EF4AE34(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t i;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  char v15;
  char v16;
  const void *v17;
  std::string::size_type v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  char v31;
  char v32;
  const void *v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  std::string::size_type v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  char v49;
  char v50;
  const void *v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  char v59;
  unsigned int v60;
  char v61;
  char v62;
  const void *v63;
  std::string::size_type v64;
  std::string *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  unint64_t v69;
  const void *v70;
  uint64_t v71;
  llvm::Twine *v72;
  const void *v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  char v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  std::string *p_p;
  char v83;
  unsigned int v84;
  char v85;
  char v86;
  const void *v87;
  size_t v88;
  __int128 *v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  std::string *v95;
  _QWORD v98[3];
  __int16 v99;
  _QWORD v100[4];
  __int16 v101;
  std::string __dst;
  uint64_t v103;
  __int16 v104;
  _QWORD v105[4];
  __int16 v106;
  __int128 v107;
  const void *v108;
  uint64_t v109;
  std::string __p;
  void *v111;
  _BYTE v112[32];
  __int128 v113;
  uint64_t v114;
  _BYTE v115[12];
  _QWORD v116[4];
  __int16 v117;
  _QWORD v118[4];
  _QWORD v119[4];
  __int16 v120;
  _QWORD v121[4];
  _QWORD v122[4];
  __int16 v123;
  _QWORD v124[4];
  _QWORD v125[4];
  __int16 v126;
  _QWORD v127[4];
  _QWORD v128[4];
  __int16 v129;
  _QWORD v130[4];
  _QWORD v131[4];
  __int16 v132;
  _QWORD v133[4];
  __int128 v134;
  unint64_t v135;

  v133[0] = 0;
  v133[1] = 0;
  v133[2] = 0x800000000;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_22E3B39D4((llvm::StringMapImpl *)v133, *(const void **)v6, *(_QWORD *)(v6 + 8));
      if ((v7 & 1) != 0)
      {
        sub_22EF4BF58(a1, v6, 1, a3, a4);
      }
      else
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
        *(_QWORD *)&v107 = "multiple definitions of class '";
        v108 = *(const void **)v6;
        v109 = *(_QWORD *)(v6 + 8);
        v131[0] = &v107;
        v131[2] = "'";
        v132 = 770;
        sub_22EF4BDA0(a1, (llvm::Twine *)v131);
      }
      v6 += 176;
    }
    while (v6 != v5);
  }
  v130[0] = 0;
  v130[1] = 0;
  v130[2] = 0x800000000;
  v9 = a2[3];
  for (i = a2[4]; v9 != i; v9 += 176)
  {
    sub_22E3B39D4((llvm::StringMapImpl *)v130, *(const void **)v9, *(_QWORD *)(v9 + 8));
    if ((v10 & 1) != 0)
    {
      sub_22EF4BF58(a1, v9, 0, a3, a4);
    }
    else
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = "multiple definitions of protocol '";
      v108 = *(const void **)v9;
      v109 = *(_QWORD *)(v9 + 8);
      v128[0] = &v107;
      v128[2] = "'";
      v129 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v128);
    }
  }
  v127[1] = 0;
  v127[0] = 0;
  v127[2] = 0x800000000;
  v11 = a2[9];
  v12 = a2[10];
  if (v11 != v12)
  {
    while (1)
    {
      sub_22E3B39D4((llvm::StringMapImpl *)v127, *(const void **)v11, *(_QWORD *)(v11 + 8));
      if ((v13 & 1) != 0)
        break;
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = "multiple definitions of global variable '";
      v108 = *(const void **)v11;
      v109 = *(_QWORD *)(v11 + 8);
      v125[0] = &v107;
      v125[2] = "'";
      v126 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v125);
LABEL_51:
      v11 += 88;
      if (v11 == v12)
        goto LABEL_52;
    }
    v107 = 0uLL;
    v108 = 0;
    LOBYTE(v109) = v109 & 0xF0;
    memset(&__p, 0, sizeof(__p));
    LOBYTE(v111) = v111 & 0xF8;
    memset(v112, 0, 24);
    sub_22EF4CBA0(a1, (int *)(v11 + 24), (uint64_t)&v107, *(_QWORD *)v11, *(_QWORD *)(v11 + 8));
    v14 = *(unsigned __int16 *)(v11 + 48);
    v15 = v109 & 0xF3 | (4 * (v14 > 0xFF));
    if (v14 >= 0x100)
      v16 = 8 * v14;
    else
      v16 = 0;
    LOBYTE(v109) = v15 | v16;
    v17 = *(const void **)(v11 + 56);
    if (!v17)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_28;
    }
    v18 = *(_QWORD *)(v11 + 64);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    if (v18 >= 0x17)
    {
      v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v20 = v18 | 7;
      v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v18;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v11 + 64);
      p_dst = &__dst;
      if (!v18)
        goto LABEL_27;
    }
    memmove(p_dst, v17, v18);
LABEL_27:
    p_dst->__r_.__value_.__s.__data_[v18] = 0;
LABEL_28:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst;
    if (*(_BYTE *)(v11 + 17))
      LOBYTE(v111) = v111 & 0xF8 | (2 * (*(_BYTE *)(v11 + 16) & 3)) | 1;
    v22 = *(const void **)(v11 + 72);
    if (!v22)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_43:
      std::string::operator=((std::string *)v112, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      sub_22EF2D60C(*(unsigned int ***)(a1 + 16), *(const void **)v11, *(_QWORD *)(v11 + 8), &v107, (uint64_t)a3, a4);
      if ((v112[23] & 0x80000000) != 0)
        operator delete(*(void **)v112);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      goto LABEL_51;
    }
    v23 = *(_QWORD *)(v11 + 80);
    if (v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_220:
      abort();
    if (v23 >= 0x17)
    {
      v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v25 = v23 | 7;
      v26 = v25 + 1;
      v24 = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v23;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v11 + 80);
      v24 = &__dst;
      if (!v23)
        goto LABEL_42;
    }
    memmove(v24, v22, v23);
LABEL_42:
    v24->__r_.__value_.__s.__data_[v23] = 0;
    goto LABEL_43;
  }
LABEL_52:
  v124[1] = 0;
  v124[0] = 0;
  v124[2] = 0x800000000;
  v27 = a2[6];
  v28 = a2[7];
  if (v27 != v28)
  {
    while (1)
    {
      sub_22E3B39D4((llvm::StringMapImpl *)v124, *(const void **)v27, *(_QWORD *)(v27 + 8));
      if ((v29 & 1) != 0)
        break;
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = "multiple definitions of global function '";
      v108 = *(const void **)v27;
      v109 = *(_QWORD *)(v27 + 8);
      v122[0] = &v107;
      v122[2] = "'";
      v123 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v122);
LABEL_55:
      v27 += 160;
      if (v27 == v28)
        goto LABEL_97;
    }
    v107 = 0uLL;
    v108 = 0;
    LOBYTE(v109) = v109 & 0xF0;
    memset(&__p, 0, sizeof(__p));
    LOWORD(v111) = (unsigned __int16)v111 & 0xF000;
    memset(v112, 0, sizeof(v112));
    v113 = 0u;
    v114 = 0;
    sub_22EF4CBA0(a1, (int *)(v27 + 80), (uint64_t)&v107, *(_QWORD *)v27, *(_QWORD *)(v27 + 8));
    v30 = *(unsigned __int16 *)(v27 + 104);
    v31 = v109 & 0xF3 | (4 * (v30 > 0xFF));
    if (v30 >= 0x100)
      v32 = 8 * v30;
    else
      v32 = 0;
    LOBYTE(v109) = v31 | v32;
    v33 = *(const void **)(v27 + 112);
    if (!v33)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_71;
    }
    v34 = *(_QWORD *)(v27 + 120);
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    if (v34 >= 0x17)
    {
      v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v36 = v34 | 7;
      v37 = v36 + 1;
      v35 = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v34;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v27 + 120);
      v35 = &__dst;
      if (!v34)
        goto LABEL_70;
    }
    memmove(v35, v33, v34);
LABEL_70:
    v35->__r_.__value_.__s.__data_[v34] = 0;
LABEL_71:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst;
    sub_22EF4CD00(*(unsigned int **)(v27 + 16), *(unsigned int **)(v27 + 24), (uint64_t *)&v107);
    v92 = v92 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v27 + 64);
    sub_22EF4D0B4(a1, *(_QWORD *)(v27 + 40), *(_QWORD *)(v27 + 48), *(_WORD *)(v27 + 64), (uint64_t)&v107, *(_QWORD *)v27, *(_QWORD *)(v27 + 8));
    v38 = *(const void **)(v27 + 144);
    if (!v38)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_84:
      if ((v112[31] & 0x80000000) != 0)
        operator delete(*(void **)&v112[8]);
      *(std::string *)&v112[8] = __dst;
      v43 = *(_QWORD *)(v27 + 68);
      if ((v43 & 0xFF00000000) != 0)
        v44 = (((_WORD)v43 << 9) + 512) & 0xE00;
      else
        v44 = 0;
      LOWORD(v111) = v44 | (unsigned __int16)v111 & 0xF1FF;
      sub_22F35BE9C(*(unsigned int ***)(a1 + 16), *(const void **)v27, *(_QWORD *)(v27 + 8), &v107, (uint64_t)a3, a4);
      if ((_QWORD)v113)
      {
        sub_22E916AE0((uint64_t *)&v113);
        operator delete((void *)v113);
      }
      if ((v112[31] & 0x80000000) != 0)
        operator delete(*(void **)&v112[8]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      goto LABEL_55;
    }
    v39 = *(_QWORD *)(v27 + 152);
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = (std::string *)operator new(v41 + 1);
      __dst.__r_.__value_.__l.__size_ = v39;
      __dst.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v27 + 152);
      v40 = &__dst;
      if (!v39)
        goto LABEL_83;
    }
    memmove(v40, v38, v39);
LABEL_83:
    v40->__r_.__value_.__s.__data_[v39] = 0;
    goto LABEL_84;
  }
LABEL_97:
  v121[0] = 0;
  v121[1] = 0;
  v121[2] = 0x800000000;
  v45 = a2[12];
  v46 = a2[13];
  if (v45 != v46)
  {
    while (1)
    {
      sub_22E3B39D4((llvm::StringMapImpl *)v121, *(const void **)v45, *(_QWORD *)(v45 + 8));
      if ((v47 & 1) != 0)
        break;
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = "multiple definitions of enumerator '";
      v108 = *(const void **)v45;
      v109 = *(_QWORD *)(v45 + 8);
      v119[0] = &v107;
      v119[2] = "'";
      v120 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v119);
LABEL_120:
      v45 += 64;
      if (v45 == v46)
        goto LABEL_121;
    }
    v107 = 0uLL;
    v108 = 0;
    LOBYTE(v109) = v109 & 0xF0;
    memset(&__p, 0, sizeof(__p));
    sub_22EF4CBA0(a1, (int *)(v45 + 16), (uint64_t)&v107, *(_QWORD *)v45, *(_QWORD *)(v45 + 8));
    v48 = *(unsigned __int16 *)(v45 + 40);
    v49 = v109 & 0xF3 | (4 * (v48 > 0xFF));
    if (v48 >= 0x100)
      v50 = 8 * v48;
    else
      v50 = 0;
    LOBYTE(v109) = v49 | v50;
    v51 = *(const void **)(v45 + 48);
    if (!v51)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_114:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __dst;
      sub_22EF2D8AC(*(unsigned int ***)(a1 + 16), *(const void **)v45, *(_QWORD *)(v45 + 8), &v107, (uint64_t)a3, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      goto LABEL_120;
    }
    v52 = *(_QWORD *)(v45 + 56);
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    if (v52 >= 0x17)
    {
      v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v54 = v52 | 7;
      v55 = v54 + 1;
      v53 = (std::string *)operator new(v54 + 1);
      __dst.__r_.__value_.__l.__size_ = v52;
      __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v45 + 56);
      v53 = &__dst;
      if (!v52)
        goto LABEL_113;
    }
    memmove(v53, v51, v52);
LABEL_113:
    v53->__r_.__value_.__s.__data_[v52] = 0;
    goto LABEL_114;
  }
LABEL_121:
  v118[0] = 0;
  v118[1] = 0;
  v118[2] = 0x800000000;
  v56 = a2[15];
  v57 = a2[16];
  if (v56 != v57)
  {
    v58 = "multiple definitions Of tag '";
    while (1)
    {
      sub_22E3B39D4((llvm::StringMapImpl *)v118, *(const void **)v56, *(_QWORD *)(v56 + 8));
      if ((v59 & 1) != 0)
        break;
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = v58;
      v108 = *(const void **)v56;
      v109 = *(_QWORD *)(v56 + 8);
      v116[0] = &v107;
      v116[2] = "'";
      v117 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v116);
LABEL_159:
      v56 += 136;
      if (v56 == v57)
        goto LABEL_185;
    }
    v107 = 0uLL;
    v108 = 0;
    LOBYTE(v109) = v109 & 0xF0;
    v112[16] = 0;
    v112[24] = 0;
    LOBYTE(v114) = 0;
    memset(&__p, 0, sizeof(__p));
    LOBYTE(v111) = 0;
    v115[0] &= 0xFCu;
    v115[4] = 0;
    v115[8] = 0;
    sub_22EF4CBA0(a1, (int *)(v56 + 16), (uint64_t)&v107, *(_QWORD *)v56, *(_QWORD *)(v56 + 8));
    v60 = *(unsigned __int16 *)(v56 + 56);
    v61 = v109 & 0xF3 | (4 * (v60 > 0xFF));
    if (v60 >= 0x100)
      v62 = 8 * v60;
    else
      v62 = 0;
    LOBYTE(v109) = v61 | v62;
    v63 = *(const void **)(v56 + 40);
    if (!v63)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_139:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __dst;
      sub_22EF4D1EC((uint64_t)&v107, v56 + 64);
      sub_22EF4D2E4((uint64_t)&v107, v56 + 88);
      if (*(_BYTE *)(v56 + 128))
      {
        if (*(_BYTE *)(v56 + 116))
        {
          v70 = *(const void **)v56;
          v71 = *(_QWORD *)(v56 + 8);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot mix EnumKind and EnumExtensibility (for ";
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v70;
          v103 = v71;
          v104 = 1283;
          v105[0] = &__dst;
          v105[2] = ")";
          v106 = 770;
          v72 = (llvm::Twine *)v105;
        }
        else
        {
          if (!*(_BYTE *)(v56 + 121))
          {
            switch(*(_DWORD *)(v56 + 124))
            {
              case 0:
                if (!v115[8])
                  v115[8] = 1;
                *(_DWORD *)&v115[4] = 0;
                goto LABEL_184;
              case 1:
                if (!v115[8])
                  v115[8] = 1;
                v79 = 1;
                goto LABEL_183;
              case 2:
                if (!v115[8])
                  v115[8] = 1;
                *(_DWORD *)&v115[4] = 1;
                v78 = v115[0] | 3;
                goto LABEL_168;
              case 3:
                if (!v115[8])
                  v115[8] = 1;
                v79 = 2;
LABEL_183:
                *(_DWORD *)&v115[4] = v79;
LABEL_184:
                v78 = v115[0] & 0xFC | 1;
                goto LABEL_168;
              default:
                goto LABEL_169;
            }
          }
          v73 = *(const void **)v56;
          v74 = *(_QWORD *)(v56 + 8);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot mix EnumKind and FlagEnum (for ";
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v73;
          v103 = v74;
          v104 = 1283;
          v100[0] = &__dst;
          v100[2] = ")";
          v101 = 770;
          v72 = (llvm::Twine *)v100;
        }
        sub_22EF4BDA0(a1, v72);
      }
      else
      {
        *(_QWORD *)&v115[4] = *(_QWORD *)(v56 + 112);
        v75 = HIBYTE(*(unsigned __int16 *)(v56 + 120));
        if (*(_WORD *)(v56 + 120))
          v76 = v75 == 0;
        else
          v76 = 1;
        if (v76)
          v77 = 0;
        else
          v77 = 2;
        v78 = v115[0] & 0xFC | (v75 != 0) | v77;
LABEL_168:
        v115[0] = v78;
LABEL_169:
        sub_22F35BF28(*(unsigned int ***)(a1 + 16), *(const void **)v56, *(_QWORD *)(v56 + 8), (uint64_t)&v107, (uint64_t)a3, a4);
      }
      if ((_BYTE)v114)
      {
        if (SHIBYTE(v113) < 0)
          operator delete(*(void **)&v112[24]);
        LOBYTE(v114) = 0;
      }
      if (v112[16])
      {
        if ((v112[15] & 0x80000000) != 0)
          operator delete(v111);
        v112[16] = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      goto LABEL_159;
    }
    v64 = *(_QWORD *)(v56 + 48);
    if (v64 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    if (v64 >= 0x17)
    {
      v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v64 | 7) != 0x17)
        v66 = v64 | 7;
      v67 = v58;
      v68 = v66 + 1;
      v65 = (std::string *)operator new(v66 + 1);
      v69 = v68 | 0x8000000000000000;
      v58 = v67;
      __dst.__r_.__value_.__l.__size_ = v64;
      __dst.__r_.__value_.__r.__words[2] = v69;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v56 + 48);
      v65 = &__dst;
      if (!v64)
        goto LABEL_138;
    }
    memmove(v65, v63, v64);
LABEL_138:
    v65->__r_.__value_.__s.__data_[v64] = 0;
    goto LABEL_139;
  }
LABEL_185:
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  __dst.__r_.__value_.__r.__words[2] = 0x800000000;
  v80 = a2[18];
  v81 = a2[19];
  if (v80 != v81)
  {
    p_p = &__p;
    while (1)
    {
      sub_22E3B39D4((llvm::StringMapImpl *)&__dst, *(const void **)v80, *(_QWORD *)(v80 + 8));
      if ((v83 & 1) != 0)
        break;
      LOWORD(__p.__r_.__value_.__l.__data_) = 1283;
      *(_QWORD *)&v107 = "multiple definitions of typedef '";
      v108 = *(const void **)v80;
      v109 = *(_QWORD *)(v80 + 8);
      v98[0] = &v107;
      v98[2] = "'";
      v99 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v98);
LABEL_189:
      v80 += 120;
      if (v80 == v81)
        goto LABEL_219;
    }
    v107 = 0uLL;
    v108 = 0;
    LOBYTE(v109) = v109 & 0xF0;
    v112[16] = 0;
    v112[24] = 0;
    LOBYTE(v114) = 0;
    v115[0] = 0;
    v115[4] = 0;
    p_p->__r_.__value_.__l.__size_ = 0;
    p_p->__r_.__value_.__r.__words[2] = 0;
    p_p->__r_.__value_.__r.__words[0] = 0;
    p_p[1].__r_.__value_.__s.__data_[0] = 0;
    sub_22EF4CBA0(a1, (int *)(v80 + 16), (uint64_t)&v107, *(_QWORD *)v80, *(_QWORD *)(v80 + 8));
    v84 = *(unsigned __int16 *)(v80 + 56);
    v85 = v109 & 0xF3 | (4 * (v84 > 0xFF));
    if (v84 >= 0x100)
      v86 = 8 * v84;
    else
      v86 = 0;
    LOBYTE(v109) = v85 | v86;
    v87 = *(const void **)(v80 + 40);
    if (!v87)
    {
      v134 = 0uLL;
      v135 = 0;
LABEL_205:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = v134;
      p_p->__r_.__value_.__r.__words[2] = v135;
      sub_22EF4D1EC((uint64_t)&v107, v80 + 64);
      sub_22EF4D2E4((uint64_t)&v107, v80 + 88);
      *(_QWORD *)v115 = *(_QWORD *)(v80 + 112);
      sub_22F35C018(*(unsigned int ***)(a1 + 16), *(const void **)v80, *(_QWORD *)(v80 + 8), (uint64_t)&v107, (uint64_t)a3, a4);
      if ((_BYTE)v114)
      {
        if (SHIBYTE(v113) < 0)
          operator delete(*(void **)&v112[24]);
        LOBYTE(v114) = 0;
      }
      if (v112[16])
      {
        if ((v112[15] & 0x80000000) != 0)
          operator delete(v111);
        v112[16] = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      goto LABEL_189;
    }
    v88 = *(_QWORD *)(v80 + 48);
    if (v88 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_220;
    v95 = p_p;
    if (v88 >= 0x17)
    {
      v90 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v88 | 7) != 0x17)
        v90 = v88 | 7;
      v93 = v90 + 1;
      v89 = (__int128 *)operator new(v90 + 1);
      *((_QWORD *)&v134 + 1) = v88;
      v135 = v93 | 0x8000000000000000;
      *(_QWORD *)&v134 = v89;
    }
    else
    {
      HIBYTE(v135) = *(_QWORD *)(v80 + 48);
      v89 = &v134;
      if (!v88)
        goto LABEL_204;
    }
    memmove(v89, v87, v88);
LABEL_204:
    *((_BYTE *)v89 + v88) = 0;
    p_p = v95;
    goto LABEL_205;
  }
LABEL_219:
  sub_22E3B3AD0((uint64_t)&__dst);
  sub_22E3B3AD0((uint64_t)v118);
  sub_22E3B3AD0((uint64_t)v121);
  sub_22E3B3AD0((uint64_t)v124);
  sub_22E3B3AD0((uint64_t)v127);
  sub_22E3B3AD0((uint64_t)v130);
  return sub_22E3B3AD0((uint64_t)v133);
}

void sub_22EF4BDA0(uint64_t a1, llvm::Twine *this)
{
  void (*v3)(_QWORD *, _QWORD);
  void **v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  _QWORD v11[2];
  void *v12;
  char v13;
  uint64_t v14;
  int v15;
  void *v16[2];
  unint64_t v17;
  void *v18[2];
  void *__p[2];
  __int128 v20;
  char *v21[2];
  _QWORD v22[21];

  v22[20] = *MEMORY[0x24BDAC8D0];
  v3 = *(void (**)(_QWORD *, _QWORD))(a1 + 32);
  llvm::Twine::str(this);
  if (v10 >= 0)
    v4 = v9;
  else
    v4 = (void **)v9[0];
  if (v10 >= 0)
    v5 = v10 & 0x7F;
  else
    v5 = (size_t)v9[1];
  v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  LOBYTE(v12) = 0;
  v14 = -1;
  v15 = 0;
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    v16[1] = (void *)v5;
    v17 = v8 | 0x8000000000000000;
    v16[0] = v6;
    goto LABEL_14;
  }
  v6 = v16;
  HIBYTE(v17) = v5;
  if (v5)
LABEL_14:
    memmove(v6, v4, v5);
  *((_BYTE *)v6 + v5) = 0;
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v18 = 0u;
  v21[0] = (char *)v22;
  v21[1] = (char *)0x400000000;
  v3(v11, *(_QWORD *)(a1 + 40));
  sub_22E616E68(v21);
  if (__p[1])
  {
    *(void **)&v20 = __p[1];
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (v13 < 0)
    operator delete(v12);
  if (v10 < 0)
    operator delete(v9[0]);
  *(_BYTE *)(a1 + 48) = 1;
}

void sub_22EF4BF58(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v8;
  char v9;
  char v10;
  const void *v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  char v25;
  const void *v26;
  const char *v27;
  char v28;
  char v29;
  const char *v30;
  std::string::size_type v31;
  void *p_str;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  std::string::size_type v44;
  const void *v45;
  size_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  llvm::Twine *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  unsigned int v68;
  char v69;
  char v70;
  const void *v71;
  std::string::size_type v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  const void *v78;
  std::string::size_type v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int **v84;
  const void *v85;
  size_t v86;
  char v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v94[4];
  __int16 v95;
  _QWORD v96[4];
  __int16 v97;
  _QWORD v98[2];
  uint64_t v99;
  char v100;
  char v101;
  _QWORD v102[4];
  __int16 v103;
  _QWORD v104[4];
  void *v105[2];
  uint64_t v106;
  char v107;
  __int128 __p;
  unint64_t v109;
  void *v110;
  char v111;
  char v112;
  void *v113;
  char v114;
  char v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  _QWORD v121[2];
  const char *v122;
  uint64_t v123;
  __int16 v124;
  __int128 __dst;
  unint64_t v126;
  uint64_t v127;
  std::string v128;
  __int16 v129;
  _BYTE v130[32];
  void *v131[3];
  char v132;
  std::string __str;
  __int16 v134;
  uint64_t v135;

  v6 = a2;
  v135 = *MEMORY[0x24BDAC8D0];
  v112 = 0;
  LOBYTE(v113) = 0;
  v115 = 0;
  v116 = 0;
  v105[1] = 0;
  v106 = 0;
  v105[0] = 0;
  v107 = 0;
  v109 = 0;
  __p = 0uLL;
  LOBYTE(v110) = 0;
  sub_22EF4CBA0(a1, (int *)(a2 + 24), (uint64_t)v105, *(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  v8 = *(unsigned __int16 *)(v6 + 48);
  v9 = v107 & 0xF3 | (4 * (v8 > 0xFF));
  if (v8 >= 0x100)
    v10 = 8 * v8;
  else
    v10 = 0;
  v107 = v9 | v10;
  v11 = *(const void **)(v6 + 56);
  if (!v11)
  {
    __dst = 0uLL;
    v126 = 0;
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v6 + 64);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_166:
    abort();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v126 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v126) = *(_QWORD *)(v6 + 64);
    p_dst = &__dst;
    if (!v12)
      goto LABEL_14;
  }
  memmove(p_dst, v11, v12);
LABEL_14:
  *((_BYTE *)p_dst + v12) = 0;
LABEL_15:
  if (SHIBYTE(v109) < 0)
    operator delete((void *)__p);
  __p = __dst;
  v109 = v126;
  sub_22EF4D1EC((uint64_t)v105, v6 + 72);
  sub_22EF4D2E4((uint64_t)v105, v6 + 96);
  if (*(_BYTE *)(v6 + 16))
    v116 = v116 & 0xF8 | 1;
  if (*(_BYTE *)(v6 + 121))
  {
    if (*(_BYTE *)(v6 + 120))
      v16 = 48;
    else
      v16 = 16;
    v116 = v16 | v116 & 0xCF;
  }
  if (*(_BYTE *)(v6 + 123))
  {
    if (*(_BYTE *)(v6 + 122))
      v17 = -64;
    else
      v17 = 64;
    v116 = v17 | v116 & 0x3F;
  }
  v89 = sub_22EF2CA74(*(unsigned int ***)(a1 + 16), *(const void **)v6, *(_QWORD *)(v6 + 8), a3, (uint64_t)v105, a4, a5);
  v104[0] = 0;
  v104[1] = 0;
  v104[2] = 0x1000000000;
  v18 = *(_QWORD *)(v6 + 128);
  v19 = *(_QWORD *)(v6 + 136);
  v91 = v6;
  if (v18 != v19)
  {
    v90 = *(_QWORD *)(v6 + 136);
    do
    {
      v20 = *(_DWORD *)(v18 + 16);
      v21 = *sub_22F363224((llvm::StringMapImpl *)v104, *(const void **)v18, *(_QWORD *)(v18 + 8));
      if (v20 == 1)
        v22 = 8;
      else
        v22 = 9;
      if (*(_BYTE *)(v21 + v22))
      {
        v27 = "+";
        if (v20 == 1)
          v27 = "-";
        if (*v27)
        {
          v30 = (const char *)v98;
          v99 = (uint64_t)v27;
          v28 = 3;
          v29 = 2;
        }
        else
        {
          v28 = 1;
          v29 = 3;
          v30 = "duplicate definition of method '";
        }
        v98[0] = "duplicate definition of method '";
        v100 = 3;
        v101 = v28;
        *(_QWORD *)&v117 = v30;
        v118 = (uint64_t)"[";
        LOBYTE(v120) = v29;
        HIBYTE(v120) = 3;
        v34 = *(_QWORD *)v6;
        v33 = *(_QWORD *)(v6 + 8);
        v121[0] = &v117;
        v122 = (const char *)v34;
        v123 = v33;
        v124 = 1282;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)" ";
        v134 = 770;
        v36 = *(const void **)v18;
        v35 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)&__dst = &__str;
        v126 = (unint64_t)v36;
        v127 = v35;
        LOWORD(v128.__r_.__value_.__l.__data_) = 1282;
        v102[0] = &__dst;
        v102[2] = "]'";
        v103 = 770;
        sub_22EF4BDA0(a1, (llvm::Twine *)v102);
        goto LABEL_93;
      }
      *(_BYTE *)(v21 + v22) = 1;
      __dst = 0uLL;
      v126 = 0;
      LOBYTE(v127) = v127 & 0xF0;
      memset(&v128, 0, sizeof(v128));
      v129 &= 0xF000u;
      memset(v130, 0, sizeof(v130));
      memset(v131, 0, sizeof(v131));
      v132 &= 0xF8u;
      sub_22EF4CBA0(a1, (int *)(v18 + 88), (uint64_t)&__dst, *(_QWORD *)v18, *(_QWORD *)(v18 + 8));
      v23 = *(unsigned __int16 *)(v18 + 112);
      v24 = v127 & 0xF3 | (4 * (v23 > 0xFF));
      if (v23 >= 0x100)
        v25 = 8 * v23;
      else
        v25 = 0;
      LOBYTE(v127) = v24 | v25;
      v26 = *(const void **)(v18 + 120);
      if (!v26)
      {
        memset(&__str, 0, sizeof(__str));
        goto LABEL_55;
      }
      v31 = *(_QWORD *)(v18 + 128);
      if (v31 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_166;
      if (v31 >= 0x17)
      {
        v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17)
          v37 = v31 | 7;
        v38 = v37 + 1;
        p_str = operator new(v37 + 1);
        v39 = v38 | 0x8000000000000000;
        v19 = v90;
        __str.__r_.__value_.__l.__size_ = v31;
        __str.__r_.__value_.__r.__words[2] = v39;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
      }
      else
      {
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(_QWORD *)(v18 + 128);
        p_str = &__str;
        if (!v31)
          goto LABEL_54;
      }
      memmove(p_str, v26, v31);
LABEL_54:
      *((_BYTE *)p_str + v31) = 0;
      v6 = v91;
LABEL_55:
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
      v128 = __str;
      v40 = *(_QWORD *)(v18 + 8);
      if (v40)
      {
        v41 = *(unsigned __int8 *)(*(_QWORD *)v18 + v40 - 1);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
        __str.__r_.__value_.__l.__size_ = 0x400000000;
        llvm::StringRef::split();
        if (v41 == 58)
        {
          v42 = LODWORD(__str.__r_.__value_.__r.__words[1]);
          v43 = __str.__r_.__value_.__r.__words[1];
          goto LABEL_64;
        }
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
        __str.__r_.__value_.__l.__size_ = 0x400000000;
        llvm::StringRef::split();
      }
      v42 = LODWORD(__str.__r_.__value_.__r.__words[1]);
      if (LODWORD(__str.__r_.__value_.__r.__words[1]) < 2)
      {
        v43 = 0;
LABEL_64:
        v44 = __str.__r_.__value_.__r.__words[0];
        v132 = *(_BYTE *)(v18 + 140) | v132 & 0xF8 | (2 * *(_BYTE *)(v18 + 141)) | (4 * *(_BYTE *)(v18 + 142));
        if (*(_DWORD *)(v18 + 136))
        {
          v121[0] = "'FactoryAsInit' is no longer valid; use 'SwiftName' instead";
          v124 = 259;
          sub_22EF4BDA0(a1, (llvm::Twine *)v121);
        }
        v45 = *(const void **)(v18 + 144);
        if (!v45)
        {
          v117 = 0uLL;
          v118 = 0;
LABEL_77:
          if ((v130[31] & 0x80000000) != 0)
            operator delete(*(void **)&v130[8]);
          *(_OWORD *)&v130[8] = v117;
          *(_QWORD *)&v130[24] = v118;
          sub_22EF4CD00(*(unsigned int **)(v18 + 24), *(unsigned int **)(v18 + 32), (uint64_t *)&__dst);
          sub_22EF4D0B4(a1, *(_QWORD *)(v18 + 48), *(_QWORD *)(v18 + 56), *(_WORD *)(v18 + 72), (uint64_t)&__dst, *(_QWORD *)v18, *(_QWORD *)(v18 + 8));
          v51 = *(_QWORD *)(v18 + 76);
          if ((v51 & 0xFF00000000) != 0)
            v52 = (((_WORD)v51 << 9) + 512) & 0xE00;
          else
            v52 = 0;
          v129 = v52 | v129 & 0xF1FF;
          v53 = *(uint64_t **)(a1 + 16);
          LODWORD(v117) = v43;
          *((_QWORD *)&v117 + 1) = v44;
          v118 = v42;
          sub_22EF2D17C(v53, v89, &v117, *(_DWORD *)(v18 + 16) == 1, &__dst, (uint64_t)a4, a5);
          goto LABEL_83;
        }
        v46 = *(_QWORD *)(v18 + 152);
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_166;
        if (v46 >= 0x17)
        {
          v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v48 = v46 | 7;
          v49 = v48 + 1;
          v47 = (__int128 *)operator new(v48 + 1);
          v50 = v49 | 0x8000000000000000;
          v19 = v90;
          *((_QWORD *)&v117 + 1) = v46;
          v118 = v50;
          *(_QWORD *)&v117 = v47;
        }
        else
        {
          HIBYTE(v118) = *(_QWORD *)(v18 + 152);
          v47 = &v117;
          if (!v46)
            goto LABEL_76;
        }
        memmove(v47, v45, v46);
LABEL_76:
        *((_BYTE *)v47 + v46) = 0;
        v6 = v91;
        goto LABEL_77;
      }
      v120 = 1283;
      *(_QWORD *)&v117 = "selector ";
      v118 = *(_QWORD *)v18;
      v119 = *(_QWORD *)(v18 + 8);
      v121[0] = &v117;
      v122 = "is missing a ':' at the end";
      v124 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v121);
LABEL_83:
      if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[2])
        free(__str.__r_.__value_.__l.__data_);
      if (v131[0])
      {
        sub_22E916AE0((uint64_t *)v131);
        operator delete(v131[0]);
      }
      if ((v130[31] & 0x80000000) != 0)
        operator delete(*(void **)&v130[8]);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
      if (SHIBYTE(v126) < 0)
        operator delete((void *)__dst);
LABEL_93:
      v18 += 160;
    }
    while (v18 != v19);
  }
  v117 = 0uLL;
  v118 = 0x800000000;
  v98[0] = 0;
  v98[1] = 0;
  v99 = 0x800000000;
  v54 = *(_QWORD *)(v6 + 152);
  v55 = *(_QWORD *)(v6 + 160);
  if (v54 != v55)
  {
    while (1)
    {
      if (*(_BYTE *)(v54 + 20))
      {
        v56 = *(_DWORD *)(v54 + 16);
        if (v56 != 1)
          goto LABEL_101;
      }
      sub_22E3B39D4((llvm::StringMapImpl *)&v117, *(const void **)v54, *(_QWORD *)(v54 + 8));
      if ((v57 & 1) == 0)
      {
        v124 = 1283;
        v58 = *(_QWORD *)v6;
        v59 = *(_QWORD *)(v6 + 8);
        v121[0] = "duplicate definition of instance property '";
        v122 = (const char *)v58;
        v123 = v59;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)".";
        v134 = 770;
        v61 = *(const void **)v54;
        v60 = *(_QWORD *)(v54 + 8);
        *(_QWORD *)&__dst = &__str;
        v126 = (unint64_t)v61;
        v127 = v60;
        LOWORD(v128.__r_.__value_.__l.__data_) = 1282;
        v96[0] = &__dst;
        v96[2] = "'";
        v97 = 770;
        v62 = (llvm::Twine *)v96;
        goto LABEL_104;
      }
      if (*(_BYTE *)(v54 + 20))
        break;
LABEL_102:
      sub_22E3B39D4((llvm::StringMapImpl *)v98, *(const void **)v54, *(_QWORD *)(v54 + 8));
      if ((v63 & 1) != 0)
      {
LABEL_105:
        __dst = 0uLL;
        v126 = 0;
        LOBYTE(v127) = v127 & 0xF0;
        memset(&v128, 0, sizeof(v128));
        LOBYTE(v129) = v129 & 0xF8;
        memset(v130, 0, 24);
        v130[24] &= 0xF8u;
        sub_22EF4CBA0(a1, (int *)(v54 + 32), (uint64_t)&__dst, *(_QWORD *)v54, *(_QWORD *)(v54 + 8));
        v68 = *(unsigned __int16 *)(v54 + 58);
        v69 = v127 & 0xF3 | (4 * (v68 > 0xFF));
        if (v68 >= 0x100)
          v70 = 8 * v68;
        else
          v70 = 0;
        LOBYTE(v127) = v69 | v70;
        v71 = *(const void **)(v54 + 64);
        if (!v71)
        {
          memset(&__str, 0, sizeof(__str));
          goto LABEL_119;
        }
        v72 = *(_QWORD *)(v54 + 72);
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_166;
        if (v72 >= 0x17)
        {
          v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v74 = v72 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          v76 = v75 | 0x8000000000000000;
          v6 = v91;
          __str.__r_.__value_.__l.__size_ = v72;
          __str.__r_.__value_.__r.__words[2] = v76;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
        }
        else
        {
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(_QWORD *)(v54 + 72);
          v73 = &__str;
          if (!v72)
          {
LABEL_118:
            v73[v72] = 0;
LABEL_119:
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
            v128 = __str;
            if (*(_BYTE *)(v54 + 25))
              LOBYTE(v129) = v129 & 0xF8 | (2 * (*(_BYTE *)(v54 + 24) & 3)) | 1;
            if (*(_BYTE *)(v54 + 81))
            {
              if (*(_BYTE *)(v54 + 80))
                v77 = 3;
              else
                v77 = 1;
              v130[24] = v77 | v130[24] & 0xFC;
            }
            if (*(_BYTE *)(v54 + 57))
              v130[24] = v130[24] & 0xFB | (4 * *(_BYTE *)(v54 + 56));
            v78 = *(const void **)(v54 + 88);
            if (v78)
            {
              v79 = *(_QWORD *)(v54 + 96);
              if (v79 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_166;
              if (v79 >= 0x17)
              {
                v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v79 | 7) != 0x17)
                  v81 = v79 | 7;
                v82 = v81 + 1;
                v80 = operator new(v81 + 1);
                v83 = v82 | 0x8000000000000000;
                v6 = v91;
                __str.__r_.__value_.__l.__size_ = v79;
                __str.__r_.__value_.__r.__words[2] = v83;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
              }
              else
              {
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(_QWORD *)(v54 + 96);
                v80 = &__str;
                if (!v79)
                {
LABEL_140:
                  v80[v79] = 0;
                  goto LABEL_141;
                }
              }
              memmove(v80, v78, v79);
              goto LABEL_140;
            }
            memset(&__str, 0, sizeof(__str));
LABEL_141:
            std::string::operator=((std::string *)v130, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v84 = *(unsigned int ***)(a1 + 16);
            v85 = *(const void **)v54;
            v86 = *(_QWORD *)(v54 + 8);
            if (*(_BYTE *)(v54 + 20))
            {
              v87 = *(_DWORD *)(v54 + 16) == 1;
              v88 = v89;
            }
            else
            {
              sub_22EF2CF70(v84, v89, v85, v86, 1, &__dst, (uint64_t)a4, a5);
              v84 = *(unsigned int ***)(a1 + 16);
              v85 = *(const void **)v54;
              v86 = *(_QWORD *)(v54 + 8);
              v88 = v89;
              v87 = 0;
            }
            sub_22EF2CF70(v84, v88, v85, v86, v87, &__dst, (uint64_t)a4, a5);
            if ((v130[23] & 0x80000000) != 0)
              operator delete(*(void **)v130);
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v128.__r_.__value_.__l.__data_);
            if (SHIBYTE(v126) < 0)
              operator delete((void *)__dst);
            goto LABEL_152;
          }
        }
        memmove(v73, v71, v72);
        goto LABEL_118;
      }
      v124 = 1283;
      v64 = *(_QWORD *)v6;
      v65 = *(_QWORD *)(v6 + 8);
      v121[0] = "duplicate definition of class property '";
      v122 = (const char *)v64;
      v123 = v65;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)".";
      v134 = 770;
      v67 = *(const void **)v54;
      v66 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)&__dst = &__str;
      v126 = (unint64_t)v67;
      v127 = v66;
      LOWORD(v128.__r_.__value_.__l.__data_) = 1282;
      v94[0] = &__dst;
      v94[2] = "'";
      v95 = 770;
      v62 = (llvm::Twine *)v94;
LABEL_104:
      sub_22EF4BDA0(a1, v62);
LABEL_152:
      v54 += 104;
      if (v54 == v55)
        goto LABEL_153;
    }
    v56 = *(_DWORD *)(v54 + 16);
LABEL_101:
    if (v56)
      goto LABEL_105;
    goto LABEL_102;
  }
LABEL_153:
  sub_22E3B3AD0((uint64_t)v98);
  sub_22E3B3AD0((uint64_t)&v117);
  sub_22F27B320((uint64_t)v104);
  if (v115)
  {
    if (v114 < 0)
      operator delete(v113);
    v115 = 0;
  }
  if (v112)
  {
    if (v111 < 0)
      operator delete(v110);
    v112 = 0;
  }
  if (SHIBYTE(v109) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
}

double sub_22EF4CBA0(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int v5;
  char v6;
  int v7;
  const void *v10;
  size_t v11;
  __int128 *v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;

  v5 = *a2;
  v6 = *(_BYTE *)(a3 + 24) & 0xFE | (*a2 == 6);
  *(_BYTE *)(a3 + 24) = v6;
  v7 = *a2;
  *(_BYTE *)(a3 + 24) = v6 & 0xFD | (2 * (*a2 == 7));
  if (v5 != 6 && v7 != 7)
  {
    if (*((_QWORD *)a2 + 2))
    {
      v19 = 1283;
      *(_QWORD *)&v16 = "availability message for available API '";
      v17 = a4;
      v18 = a5;
      v20[0] = &v16;
      v20[2] = "' will not be used";
      v21 = 770;
      sub_22EF4BDA0(a1, (llvm::Twine *)v20);
    }
    return result;
  }
  v10 = (const void *)*((_QWORD *)a2 + 1);
  if (v10)
  {
    v11 = *((_QWORD *)a2 + 2);
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v12 = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&v16 + 1) = v11;
      v17 = v15 | 0x8000000000000000;
      *(_QWORD *)&v16 = v12;
    }
    else
    {
      HIBYTE(v17) = *((_QWORD *)a2 + 2);
      v12 = &v16;
      if (!v11)
        goto LABEL_18;
    }
    memmove(v12, v10, v11);
LABEL_18:
    *((_BYTE *)v12 + v11) = 0;
    goto LABEL_19;
  }
  v16 = 0uLL;
  v17 = 0;
LABEL_19:
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  result = *(double *)&v16;
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  return result;
}

void sub_22EF4CD00(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  char v3;
  char v4;
  char v5;
  unsigned int *v7;
  unint64_t *v8;
  char v9;
  int v10;
  BOOL v11;
  char v12;
  const void *v13;
  std::string::size_type v14;
  void *p_str;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type size;
  std::string::size_type v31;
  uint64_t v32;
  const void *v33;
  uint64_t *v35;
  void *v36[2];
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  std::string __p;
  char v44;
  std::string __str;
  char *v46;
  unint64_t *v47;

  if (a1 != a2)
  {
    v7 = a1;
    v35 = a3 + 12;
    v8 = (unint64_t *)(a3 + 14);
    while (1)
    {
      v36[0] = 0;
      v36[1] = 0;
      v37 = 0;
      v38 &= 0xF0u;
      v40 = 0;
      v41 = 0;
      v39 = 0;
      v9 = v42 & 0xF8;
      v42 &= 0xF8u;
      memset(&__p, 0, sizeof(__p));
      if (*((_BYTE *)v7 + 7))
        v42 = v9 | (2 * (*((_BYTE *)v7 + 6) & 3)) | 1;
      v10 = HIBYTE(*((unsigned __int16 *)v7 + 2));
      v11 = !*((_WORD *)v7 + 2) || v10 == 0;
      v12 = v11 ? 0 : 2;
      v44 = v44 & 0xE0 | (v10 != 0) | v12;
      v13 = (const void *)*((_QWORD *)v7 + 2);
      if (v13)
        break;
      memset(&__str, 0, sizeof(__str));
LABEL_22:
      std::string::operator=(&__p, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v18 = *((_QWORD *)v7 + 1);
      if ((v18 & 0xFF00000000) != 0)
        v19 = (4 * v18 + 4) & 0x1C;
      else
        v19 = 0;
      v44 = v19 | v44 & 0xE3;
      v20 = a3[12];
      v21 = a3[13];
      v22 = *v7;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v20) >> 5) <= v22)
      {
        v5 &= 0xF0u;
        v3 &= 0xF8u;
        v4 &= 0xE0u;
        do
        {
          if (v21 >= *v8)
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v20) >> 5);
            if (v23 + 1 > 0x2AAAAAAAAAAAAAALL)
              goto LABEL_57;
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v8 - v20) >> 5);
            v25 = 2 * v24;
            if (2 * v24 <= v23 + 1)
              v25 = v23 + 1;
            if (v24 >= 0x155555555555555)
              v26 = 0x2AAAAAAAAAAAAAALL;
            else
              v26 = v25;
            v47 = v8;
            if (v26 > 0x2AAAAAAAAAAAAAALL)
              sub_22E3B3F8C();
            v27 = 3 * v26;
            v28 = (char *)operator new(96 * v26);
            v29 = (std::string::size_type)&v28[96 * v23];
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
            __str.__r_.__value_.__l.__size_ = v29;
            *(_QWORD *)(v29 + 8) = 0;
            *(_QWORD *)(v29 + 16) = 0;
            *(_QWORD *)v29 = 0;
            *(_BYTE *)(v29 + 24) = v5;
            *(_QWORD *)(v29 + 40) = 0;
            *(_QWORD *)(v29 + 48) = 0;
            *(_QWORD *)(v29 + 32) = 0;
            *(_BYTE *)(v29 + 56) = v3;
            *(_QWORD *)(v29 + 72) = 0;
            *(_QWORD *)(v29 + 80) = 0;
            *(_QWORD *)(v29 + 64) = 0;
            *(_BYTE *)(v29 + 88) = v4;
            __str.__r_.__value_.__r.__words[2] = v29 + 96;
            v46 = &v28[32 * v27];
            sub_22EF46718(v35, &__str);
            v21 = a3[13];
            size = __str.__r_.__value_.__l.__size_;
            while (1)
            {
              v31 = __str.__r_.__value_.__r.__words[2];
              if (__str.__r_.__value_.__r.__words[2] == size)
                break;
              __str.__r_.__value_.__r.__words[2] -= 96;
              if (*(char *)(v31 - 9) < 0)
                operator delete(*(void **)(v31 - 32));
              if (*(char *)(v31 - 41) < 0)
                operator delete(*(void **)(v31 - 64));
              if (*(char *)(v31 - 73) < 0)
                operator delete(*(void **)(v31 - 96));
            }
            if (__str.__r_.__value_.__r.__words[0])
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          else
          {
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 16) = 0;
            *(_BYTE *)(v21 + 24) = v5;
            *(_QWORD *)(v21 + 40) = 0;
            *(_QWORD *)(v21 + 48) = 0;
            *(_QWORD *)(v21 + 32) = 0;
            *(_BYTE *)(v21 + 56) = v3;
            *(_QWORD *)(v21 + 72) = 0;
            *(_QWORD *)(v21 + 80) = 0;
            *(_QWORD *)(v21 + 64) = 0;
            *(_BYTE *)(v21 + 88) = v4;
            v21 += 96;
          }
          a3[13] = v21;
          v20 = a3[12];
          v22 = *v7;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v20) >> 5) <= v22);
      }
      sub_22F363314(v20 + 96 * v22, (uint64_t)v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete(v39);
      if (SHIBYTE(v37) < 0)
        operator delete(v36[0]);
      v7 += 8;
      if (v7 == a2)
        return;
    }
    v14 = *((_QWORD *)v7 + 3);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
LABEL_57:
      abort();
    if (v14 >= 0x17)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      v32 = v16 + 1;
      v33 = (const void *)*((_QWORD *)v7 + 2);
      p_str = operator new(v16 + 1);
      v13 = v33;
      __str.__r_.__value_.__l.__size_ = v14;
      __str.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    }
    else
    {
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = *((_QWORD *)v7 + 3);
      p_str = &__str;
      if (!v14)
        goto LABEL_21;
    }
    v17 = p_str;
    memmove(p_str, v13, v14);
    p_str = v17;
LABEL_21:
    *((_BYTE *)p_str + v14) = 0;
    goto LABEL_22;
  }
}

